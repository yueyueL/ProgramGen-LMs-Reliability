public void run ( ) { int height = ( com.google.gwt.user.client.Window.getClientHeight ( ) ) - ( ( com.google.gerrit.client.Gerrit.getHeaderFooterHeight ( ) ) + 18 ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; render ( diff ) ; commentManager.render ( comments , prefs.expandAllComments ( ) ) ; skipManager.render ( prefs.context ( ) , diff ) ; }
public void start ( ) { final org.eclipse.jgit.storage.file.WindowCacheConfig c = new org.eclipse.jgit.storage.file.WindowCacheConfig ( ) ; c.fromConfig ( cfg ) ; org.eclipse.jgit.storage.file.WindowCache.reconfigure ( c ) ; }
public void testUnblockNoForce ( ) { com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert.assertTrue ( "u can push" , u.controlForRef ( "refs/heads/master" ) . canUpdate ( ) ) ; }
public void indexChangeOnNonVisibleBranch ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; blockRead ( project , "refs/heads/master" ) ; com.google.gerrit.acceptance.RestResponse r = userSession.post ( ( ( "/changes/" + changeId ) + "/index/" ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public com.google.gerrit.server.notedb.NoteDbUpdateManager setChangeRepo ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectInserter ins , com.google.gerrit.server.git.ChainedReceiveCommands cmds ) { com.google.common.base.Preconditions.checkState ( ( ( changeRepo ) == null ) , "change repo already initialized" ) ; changeRepo = new com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo ( repo , rw , ins , cmds , false ) ; return this ; }
public com.google.gerrit.extensions.registration.RegistrationHandle replace ( final com.google.gerrit.sshd.CommandName name , final com.google.inject.Provider < org.apache.sshd.server.Command > cmd ) { final java.util.concurrent.ConcurrentMap < java.lang.String , com.google.inject.Provider < org.apache.sshd.server.Command > > m = getMap ( ) ; m.put ( name.value ( ) , cmd ) ; return new com.google.gerrit.extensions.registration.RegistrationHandle ( ) { @ java.lang.Override public void remove ( ) { m.remove ( name.value ( ) , cmd ) ; } } ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( allProjects ) . getConfig ( ) ; com.google.gerrit.reviewdb.client.AccountGroup.UUID anonymousUsers = com.google.gerrit.server.group.SystemGroupBackend.getGroup ( com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS ) . getUUID ( ) ; com.google.gerrit.server.project.Util.grant ( cfg , com.google.gerrit.common.data.Permission.forLabel ( Q.getName ( ) ) , ( - 1 ) , 1 , anonymousUsers , "refs/heads/*" ) ; saveProjectConfig ( cfg ) ; }
public void select ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme urlType ) { com.google.gerrit.client.download.DownloadUrlLink first = null ; for ( com.google.gwt.user.client.ui.Widget w : this ) { if ( w instanceof com.google.gerrit.client.download.DownloadUrlLink ) { final com.google.gerrit.client.download.DownloadUrlLink d = ( ( com.google.gerrit.client.download.DownloadUrlLink ) ( w ) ) ; if ( first == null ) { first = d ; } if ( ( d.urlType ) == urlType ) { d.select ( ) ; return ; } } } if ( first != null ) { first.select ( ) ; } }
protected void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.rpc.CallbackGroup cmGroup = new com.google.gerrit.client.rpc.CallbackGroup ( ) ; net.codemirror.lib.CodeMirror.initLibrary ( cmGroup.add ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ) ; initPath ( ) ; com.google.gerrit.client.changes.ChangeFileApi.getContentOrMessage ( revision , path , cmGroup.addFinal ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.lang.String > ( this ) { @ java.lang.Override protected void preDisplay ( java.lang.String content ) { initEditor ( content ) ; } } ) ) ; }
public org.apache.sshd.common.file.FileSystemView createFileSystemView ( org.apache.sshd.common.Session session ) throws java.io.IOException { return new org.apache.sshd.common.file.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( org.apache.sshd.common.file.SshFile baseDir , java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return this ; } } ; }
public void allRefsVisibleNoRefsMetaConfig ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/changes/02/2/1" , "refs/heads/branch" , "refs/heads/master" ) ; }
private boolean isMember ( com.google.gerrit.reviewdb.client.AccountGroup parent , com.google.gerrit.common.data.GroupDescription.Basic member ) throws com.google.gwtorm.server.OrmException { return groups.isIncluded ( dbProvider.get ( ) , parent.getGroupUUID ( ) , member.getGroupUUID ( ) ) ; }
private boolean isSignedOffBy ( java.util.List < org.eclipse.jgit.revwalk.FooterLine > footers , java.lang.String email ) { for ( final org.eclipse.jgit.revwalk.FooterLine line : footers ) { if ( ( line.matches ( FooterKey.SIGNED_OFF_BY ) ) && ( email.equals ( line.getEmailAddress ( ) ) ) ) { return true ; } } return false ; }
protected void configure ( ) { if ( ( gerritConfig.getString ( pluginName , null , "url" ) ) != null ) { com.googlesource.gerrit.plugins.its.storyboard.StoryboardModule.log.info ( "Storyboard is configured as ITS" ) ; bind ( com.googlesource.gerrit.plugins.hooks.its.ItsFacade.class ) . toInstance ( new com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade ( pluginName , gerritConfig ) ) ; install ( new com.googlesource.gerrit.plugins.hooks.ItsHookModule ( pluginName , pluginCfgFactory ) ) ; } }
private void verifyComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { com.google.common.base.Preconditions.checkArgument ( ( ( c.getRevId ( ) ) != null ) , "RevId required for comment: %s" , c ) ; com.google.common.base.Preconditions.checkArgument ( c.getAuthor ( ) . equals ( getUser ( ) . getAccountId ( ) ) , ( "The author for the following comment does not match the author of" + " this ChangeDraftUpdate (%s): %s" ) , getUser ( ) . getAccountId ( ) , c ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Account account , java.lang.String agreementName ) { if ( ! ( listeners.iterator ( ) . hasNext ( ) ) ) { return ; } com.google.gerrit.server.extensions.events.AgreementSignup.Event event = new com.google.gerrit.server.extensions.events.AgreementSignup.Event ( util.accountInfo ( account ) , agreementName ) ; for ( com.google.gerrit.extensions.events.AgreementSignupListener l : listeners ) { try { l.onAgreementSignup ( event ) ; } catch ( java.lang.Exception e ) { util.logEventListenerError ( this , l , e ) ; } } }
public void testUpsertNothing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.NO_DATA ) ; }
private com.google.gerrit.client.diff.ScrollbarAnnotation diff ( net.codemirror.lib.CodeMirror cm , int s , int n ) { com.google.gerrit.client.diff.ScrollbarAnnotation a = new com.google.gerrit.client.diff.ScrollbarAnnotation ( cm ) ; a.at ( net.codemirror.lib.CodeMirror.pos ( s ) , net.codemirror.lib.CodeMirror.pos ( ( s + n ) ) ) ; diff.add ( a ) ; return a ; }
public static void rebaseEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit:rebase" ) . post ( in , cb ) ; }
public static java.lang.Iterable < java.lang.Object [ ] > configs ( ) { org.eclipse.jgit.lib.Config defaultConfig = new com.google.gerrit.acceptance.AbstractDaemonTest.NamedConfig ( "default" ) ; return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { defaultConfig } } ) ; }
public void inheritSubmit_OverridesAndDeniesOfRef ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.SUBMIT , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.SUBMIT , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.SUBMIT , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCannotSubmit ( "refs/foobar" , u ) ; assertCannotSubmit ( "refs/tags/foobar" , u ) ; assertCanSubmit ( "refs/heads/foobar" , u ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > safeGetApprovals ( com.google.gerrit.server.git.CodeReviewCommit n ) { try { return approvalsUtil.byPatchSet ( db.get ( ) , n.notes ( ) , n.getPatchsetId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.git.MergeUtil.log.error ( ( "Can't read approval records for " + ( n.getPatchsetId ( ) ) ) , e ) ; return java.util.Collections.emptyList ( ) ; } }
static java.lang.String getInnerText ( org.pegdown.ast.Node node ) { if ( ( node == null ) || ( node.getChildren ( ) . isEmpty ( ) ) ) { return null ; } java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; com.google.gitiles.doc.MarkdownUtil.appendTextFromChildren ( b , node ) ; return com.google.common.base.Strings.emptyToNull ( b.toString ( ) . trim ( ) ) ; }
public com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > stars ( ) throws com.google.gwtorm.server.OrmException { if ( ( stars ) == null ) { stars = com.google.common.base.Preconditions.checkNotNull ( starredChangesUtil ) . byChange ( legacyId ) ; } return stars ; }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.setB0 ( ) ; com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; a1 = a1.dereference ( ) ; if ( a1 instanceof com.googlecode.prolog_cafe.builtin.VariableTerm ) throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException ( this , 1 ) ; if ( ! ( a1 instanceof com.googlecode.prolog_cafe.builtin.IntegerTerm ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( this , 1 , "integer" , a1 ) ; engine.halt = 1 + ( ( ( com.googlecode.prolog_cafe.builtin.IntegerTerm ) ( a1 ) ) . intValue ( ) ) ; return cont ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return ( com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) + ( id.toString ( ) ) ; }
abstract void expandSideAll ( ) ;
public void compareEqual ( ) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupBundle reviewDbBundle = newBundle ( ) . source ( Source.REVIEW_DB ) . build ( ) ; com.google.gerrit.server.group.db.GroupBundle noteDbBundle = newBundle ( ) . source ( Source.NOTE_DB ) . build ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.group.db.GroupBundle.compare ( reviewDbBundle , noteDbBundle ) ) . isEmpty ( ) ; }
static com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > topicField ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { if ( schema == null ) { return com.google.gerrit.server.index.ChangeField.LEGACY_TOPIC2 ; } if ( schema.hasField ( com.google.gerrit.server.index.ChangeField.FUZZY_TOPIC ) ) { return schema.getFields ( ) . get ( com.google.gerrit.server.index.ChangeField.FUZZY_TOPIC.getName ( ) ) ; } if ( schema.hasField ( com.google.gerrit.server.index.ChangeField.LEGACY_TOPIC3 ) ) { return schema.getFields ( ) . get ( com.google.gerrit.server.index.ChangeField.LEGACY_TOPIC3.getName ( ) ) ; } return schema.getFields ( ) . get ( com.google.gerrit.server.index.ChangeField.LEGACY_TOPIC2.getName ( ) ) ; }
private void assertNotesMigrationState ( com.google.gerrit.server.notedb.NotesMigrationState expected ) throws java.lang.Exception { gerritConfig.load ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.notedb.NotesMigrationState.forConfig ( gerritConfig ) ) . hasValue ( expected ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.AccountSshKey result ) { addNew.setEnabled ( true ) ; addTxt.setText ( "" ) ; keys.addOneKey ( result ) ; if ( ! ( keys.isVisible ( ) ) ) { showAddKeyBlock ( false ) ; setKeyTableVisible ( true ) ; } }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { info.setText ( 0 , fieldIdx , account.getFullName ( ) ) ; info.setText ( 1 , fieldIdx , account.getPreferredEmail ( ) ) ; info.setText ( 2 , fieldIdx , com.google.gerrit.client.FormatUtil.mediumFormat ( account.getRegisteredOn ( ) ) ) ; prefsPanel.display ( account ) ; }
public com.google.gerrit.index.query.InternalQuery < T > setRequestedFields ( java.util.Set < java.lang.String > fields ) { queryProcessor.setRequestedFields ( fields ) ; return this ; }
protected com.google.gerrit.extensions.common.ChangeInfo queryOne ( java.lang.Object query ) throws java.lang.Exception { java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( query ) ; com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( java.lang.String.format ( "expected singleton List<ChangeInfo>, found %s for [%s]" , results , query ) ) . that ( results ) . hasSize ( 1 ) ; return results.get ( 0 ) ; }
public final java.util.List < com.google.gerrit.reviewdb.client.Account.FieldName > editableAccountFields ( ) { java.util.List < com.google.gerrit.reviewdb.client.Account.FieldName > fields = new java.util.ArrayList < > ( ) ; for ( java.lang.String f : com.google.gerrit.client.rpc.Natives.asList ( _editableAccountFields ( ) ) ) { fields.add ( Account.FieldName.valueOf ( f ) ) ; } return fields ; }
private void expandBefore ( ) { net.codemirror.lib.TextMarker.FromTo range = textMarker.find ( ) ; int oldStart = range.getFrom ( ) . getLine ( ) ; int newStart = oldStart + ( com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND ) ; int end = range.getTo ( ) . getLine ( ) ; clearMarkerAndWidget ( ) ; collapse ( newStart , end , true ) ; updateSelection ( ) ; }
public void changeEditRef ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id ( 1000042 ) ; com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id ( 56414 ) ; com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , 50 ) ; java.lang.String refName = com.google.gerrit.server.edit.ChangeEditUtil.editRefName ( accountId , changeId , psId ) ; org.junit.Assert.assertEquals ( "refs/users/42/1000042/edit-56414/50" , refName ) ; }
private void parseUpdate ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef ( cmd.getRefName ( ) ) ; if ( ctl.canUpdate ( ) ) { if ( ( com.google.gerrit.server.git.ReceiveCommits.isHead ( cmd ) ) && ( ! ( isCommit ( cmd ) ) ) ) { return ; } validateNewCommits ( ctl , cmd ) ; } else { com.google.gerrit.server.git.ReceiveCommits.reject ( cmd ) ; } }
public void destroy ( ) { if ( ( ( task ) != null ) && ( ! ( task.isDone ( ) ) ) ) { task.cancel ( true ) ; } }
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( com.google.gson.JsonElement json ) { com.google.gson.JsonElement source = json.getAsJsonObject ( ) . get ( "_source" ) ; if ( source == null ) { source = json.getAsJsonObject ( ) . get ( "fields" ) ; } com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( source.getAsJsonObject ( ) . get ( GroupField.UUID.getName ( ) ) . getAsString ( ) ) ; return groupCache.get ( ) . get ( uuid ) ; }
public void oneIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a file:b" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.query.change.AndChangeSource.class ) . isSameAs ( out.getClass ( ) ) ; com.google.common.truth.Truth.assertThat ( out.getChildren ( ) ) . containsExactly ( query ( in.getChild ( 1 ) ) , in.getChild ( 0 ) ) . inOrder ( ) ; }
public void gitLink ( ) { com.google.gitiles.doc.MarkdownToHtml md = com.google.gitiles.doc.MarkdownToHtml.builder ( ) . setGitilesView ( view ) . setConfig ( new com.google.gitiles.doc.MarkdownConfig ( config ) ) . setFilePath ( "index.md" ) . build ( ) ; java.lang.String url ; url = "git://example.com/repo.git" ; com.google.common.truth.Truth.assertThat ( md.href ( url ) ) . isEqualTo ( url ) ; com.google.common.truth.Truth.assertThat ( md.href ( "git:example.com/repo.git" ) ) . isEqualTo ( "#zSoyz" ) ; com.google.common.truth.Truth.assertThat ( md.href ( "git://" ) ) . isEqualTo ( "#zSoyz" ) ; com.google.common.truth.Truth.assertThat ( md.href ( "git://example.com/../root" ) ) . isEqualTo ( "#zSoyz" ) ; com.google.common.truth.Truth.assertThat ( md.href ( "git://example.com/root/.." ) ) . isEqualTo ( "#zSoyz" ) ; }
public void emptyGroupName ( ) throws java.lang.Exception { com.google.gerrit.common.data.GroupReference g = newGroup ( "" ) ; updateGroupNames ( com.google.gerrit.server.group.db.GroupNameNotesTest.newPersonIdent ( ) , g ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.group.db.GroupNameNotes.loadAllGroups ( repo ) ) . containsExactly ( g ) ; com.google.common.truth.Truth.assertThat ( readNameNote ( g ) ) . isEqualTo ( "[group]\n\tuuid = -1\n\tname = \n" ) ; }
private void req ( java.lang.String key , java.lang.StringBuffer buf , org.apache.log4j.spi.LoggingEvent event ) { java.lang.Object val = event.getMDC ( key ) ; buf.append ( ' ' ) ; if ( val != null ) { buf.append ( val ) ; } else { buf.append ( '-' ) ; } }
public java.lang.String encode ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String emailAddress ) { try { java.lang.String payload = java.lang.String.format ( "%s:%s" , accountId , emailAddress ) ; byte [ ] utf8 = payload.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; java.lang.String base64 = org.eclipse.jgit.util.Base64.encodeBytes ( utf8 ) ; return emailRegistrationToken.newToken ( base64 ) ; } catch ( com.google.gwtjsonrpc.server.XsrfException e ) { throw new java.lang.IllegalArgumentException ( e ) ; } }
private static javax.xml.parsers.DocumentBuilder newBuilder ( ) throws javax.xml.parsers.ParserConfigurationException { final javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance ( ) ; factory.setValidating ( false ) ; factory.setExpandEntityReferences ( false ) ; factory.setIgnoringComments ( true ) ; final javax.xml.parsers.DocumentBuilder parser = factory.newDocumentBuilder ( ) ; return parser ; }
public void testFindInDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( ( - 1 ) , mapper.lineOnOther ( Side.PARENT , 9 ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { if ( ( ( mySubname == null ) && ( ( subname ) == null ) ) || ( ( mySubname != null ) && ( mySubname.equals ( subname ) ) ) ) { display ( result ) ; } }
public com.google.gerrit.server.group.GroupResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.lang.Exception { final com.google.gerrit.server.CurrentUser user = self.get ( ) ; if ( user instanceof com.google.gerrit.server.AnonymousUser ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "Authentication required" ) ; } else if ( ! ( user instanceof com.google.gerrit.server.IdentifiedUser ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return parse ( id ) ; }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; }
private java.lang.String getInstanceName ( org.eclipse.jgit.lib.Config config , @ com.google.gerrit.common.Nullable com.google.inject.Provider < java.lang.String > canonicalUrlProvider ) { java.lang.String instanceName = config.getString ( "gerrit" , null , "instanceName" ) ; if ( ( instanceName != null ) || ( canonicalUrlProvider == null ) ) { return instanceName ; } return canonicalUrlProvider.get ( ) ; }
private void createTags ( ) throws java.lang.Exception { grant ( Permission.SUBMIT , project , "refs/for/refs/heads/master" ) ; grant ( Permission.CREATE , project , "refs/tags/*" ) ; grant ( Permission.PUSH , project , "refs/tags/*" ) ; for ( java.lang.String tagname : com.google.gerrit.acceptance.rest.project.TagsIT.testTags ) { com.google.gerrit.acceptance.PushOneCommit.Tag tag = new com.google.gerrit.acceptance.PushOneCommit.Tag ( tagname ) ; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; push.setTag ( tag ) ; com.google.gerrit.acceptance.PushOneCommit.Result result = push.to ( "refs/for/master%submit" ) ; result.assertOkStatus ( ) ; } }
private com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > getChangesByProject ( ) throws com.google.gwtorm.server.OrmException { com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > changesByProject = com.google.common.collect.ArrayListMultimap.create ( ) ; try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { for ( com.google.gerrit.reviewdb.client.Change c : com.google.gerrit.pgm.RebuildNoteDb.unwrap ( db ) . changes ( ) . all ( ) ) { changesByProject.put ( c.getProject ( ) , c.getId ( ) ) ; } return changesByProject ; } }
private void review ( com.google.gerrit.acceptance.PushOneCommit.Result r , int score ) throws java.lang.Exception { revision ( r ) . review ( new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . label ( "Code-Review" , score ) ) ; }
private com.google.inject.Injector getPluginInjector ( java.io.File jarFile ) throws java.io.IOException { final java.lang.String pluginName = com.google.common.base.Objects.firstNonNull ( com.google.gerrit.server.plugins.PluginLoader.getGerritPluginName ( jarFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( jarFile ) ) ; return initInjector.createChildInjector ( new com.google.inject.AbstractModule ( ) { @ java.lang.Override protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.PluginName.class ) . toInstance ( pluginName ) ; } } ) ; }
public void visit ( org.pegdown.ast.HeaderNode node ) { java.lang.String tag = "h" + ( node.getLevel ( ) ) ; html.open ( tag ) ; java.lang.String id = toc.idFromHeader ( node ) ; if ( id != null ) { html.attribute ( "id" , id ) ; } visitChildren ( node ) ; html.close ( tag ) ; }
public int getCardinality ( ) { return ( source ) != null ? source.getCardinality ( ) : opts.limit ( ) ; }
public static void toPreparedStatement ( final java.sql.PreparedStatement ps , final int col , final byte [ ] raw ) throws java.sql.SQLException { if ( raw != null ) { ps.setBinaryStream ( col , new java.io.ByteArrayInputStream ( raw ) , raw.length ) ; } else { ps.setNull ( col , java.sql.Types.LONGVARCHAR ) ; } }
public com.google.gerrit.reviewdb.client.AccountGroup get ( final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return byUUID.get ( uuid ) ; }
private void index ( com.google.gerrit.server.project.ProjectControl projectControl ) { try { index.apply ( new com.google.gerrit.server.project.ProjectResource ( projectControl.getProjectState ( ) , projectControl.getUser ( ) ) , null ) ; } catch ( java.lang.Exception e ) { writeError ( "error" , java.lang.String.format ( "Unable to index %s: %s" , projectControl.getProject ( ) . getName ( ) , e.getMessage ( ) ) ) ; } }
private com.google.common.collect.SetMultimap < org.eclipse.jgit.lib.ObjectId , org.eclipse.jgit.lib.Ref > changeRefsById ( ) throws java.io.IOException { if ( ( refsById ) == null ) { refsById = com.google.common.collect.HashMultimap.create ( ) ; for ( org.eclipse.jgit.lib.Ref r : repo.getRefDatabase ( ) . getRefs ( "refs/changes/" ) . values ( ) ) { if ( com.google.gerrit.reviewdb.client.PatchSet.isRef ( r.getName ( ) ) ) { refsById.put ( r.getObjectId ( ) , r ) ; } } } return refsById ; }
public void listNoChildren ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/children/" ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; java.util.List < com.google.gerrit.extensions.common.ProjectInfo > projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList ( r ) ; org.junit.Assert.assertTrue ( ( ( projectInfoList.size ( ) ) == 2 ) ) ; }
public void upsertComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) { upsertDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; upsertPublishedComment ( comment ) ; } }
public void multipleUpdatesInBatchWithSameObject ( ) throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d = load ( 0 ) ; d.setIncrement ( 1 ) ; try ( com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch = d.openUpdate ( newMetaDataUpdate ( ) ) ) { batch.write ( d , newMetaDataUpdate ( ) . getCommitBuilder ( ) ) ; assertMyMetaData ( 0 ) ; d.setIncrement ( 2 ) ; batch.write ( d , newMetaDataUpdate ( ) . getCommitBuilder ( ) ) ; batch.commit ( ) ; } assertMyMetaData ( 3 , "Increment conf.value by 1" , "Increment conf.value by 2" ) ; }
private com.google.gerrit.reviewdb.AccountGroup lookup ( final com.google.gerrit.reviewdb.AccountGroup.NameKey groupName ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.ReviewDb db = schema.open ( ) ; try { return db.accountGroups ( ) . get ( groupName ) ; } finally { db.close ( ) ; } }
private com.google.inject.Injector createSshInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( sysInjector.getInstance ( com.google.gerrit.sshd.SshModule.class ) ) ; modules.add ( new com.google.gerrit.sshd.commands.MasterCommandModule ( ) ) ; return sysInjector.createChildInjector ( modules ) ; }
private boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ProjectState pe = projectCache.get ( change.getProject ( ) ) ; if ( pe == null ) { return false ; } com.google.gerrit.server.project.ProjectControl pc = pe.controlFor ( user ) ; return pc.controlFor ( change ) . isVisible ( db ) ; }
protected void preInvoke ( final com.google.gerrit.server.GerritCall call ) { super . preInvoke ( call ) ; if ( call.isComplete ( ) ) { return ; } if ( ( call.getMethod ( ) . getAnnotation ( com.google.gerrit.client.rpc.SignInRequired.class ) ) != null ) { if ( ! ( call.requireXsrfValid ( ) ) ) { return ; } if ( ( call.getAccountId ( ) ) == null ) { call.onFailure ( new com.google.gerrit.client.rpc.NotSignedInException ( ) ) ; return ; } } }
public com.google.gerrit.extensions.restapi.BinaryResult file ( java.lang.String path ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.FileResource resource = filesCollection.parse ( resource ( ) , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ; return getContent.apply ( resource ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve file" , e ) ; } }
public static java.lang.String shortestExample ( java.lang.String refPattern ) { if ( com.google.gerrit.server.project.RefPattern.isRE ( refPattern ) ) { return com.google.gerrit.server.project.RefPattern.toRegExp ( refPattern ) . toAutomaton ( ) . getShortestExample ( true ) . replace ( ' ' , '-' ) ; } else if ( refPattern.endsWith ( "/*" ) ) { return ( refPattern.substring ( 0 , ( ( refPattern.length ( ) ) - 1 ) ) ) + '1' ; } else { return refPattern ; } }
public void testParseRef ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit master = repo.branch ( "refs/heads/master" ) . commit ( ) . create ( ) ; assertEquals ( new com.google.gitiles.RevisionParser.Result ( com.google.gitiles.Revision.peeled ( "master" , master ) ) , parser.parse ( "master" ) ) ; assertEquals ( new com.google.gitiles.RevisionParser.Result ( com.google.gitiles.Revision.peeled ( "refs/heads/master" , master ) ) , parser.parse ( "refs/heads/master" ) ) ; assertNull ( parser.parse ( "refs//heads//master" ) ) ; assertNull ( parser.parse ( "refs heads master" ) ) ; }
private void cancel ( ) { label.setVisible ( true ) ; edit.setVisible ( true ) ; input.setVisible ( false ) ; input.setValue ( label.getText ( ) ) ; save.setVisible ( false ) ; save.setEnabled ( false ) ; cancel.setVisible ( false ) ; }
public java.lang.String getProjectName ( ) { return p.get ( ) ; }
net.sf.ehcache.Element get ( final java.lang.String token ) { if ( ( token != null ) && ( ! ( "" . equals ( token ) ) ) ) { try { return self.get ( new com.google.gerrit.server.http.WebSessionManager.Key ( token ) ) ; } catch ( java.lang.IllegalStateException e ) { return null ; } catch ( net.sf.ehcache.CacheException e ) { return null ; } } else { return null ; } }
protected java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > getAdvertisedRefs ( org.eclipse.jgit.lib.Repository repository , org.eclipse.jgit.revwalk.RevWalk revWalk ) { return filter ( repository.getAllRefs ( ) ) ; }
private java.lang.String getCommand ( java.lang.String command , com.google.gitiles.RevisionParser.Result result , java.lang.String path ) { if ( ! ( com.google.gitiles.ViewFilter.CMD_AUTO.equals ( command ) ) ) { return command ; } else if ( ( result.getOldRevision ( ) ) != null ) { return com.google.gitiles.ViewFilter.CMD_DIFF ; } else { return com.google.gitiles.ViewFilter.CMD_SHOW ; } }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( CreateGroup.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( GroupDetailFactory.Factory.class ) ; factory ( MyGroupsFactory.Factory.class ) ; factory ( RenameGroup.Factory.class ) ; }
private void checkCanRunAs ( ) throws com.google.gerrit.sshd.UnloggedFailure { if ( ( caller ) instanceof com.google.gerrit.server.PeerDaemonUser ) { } else if ( ! ( enableRunAs ) ) { throw die ( "suexec disabled by auth.enableRunAs = false" ) ; } else if ( ! ( caller.getCapabilities ( ) . canRunAs ( ) ) ) { throw die ( "suexec not permitted" ) ; } }
public void basicGroupProperties ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups ( ) . create ( name ( "group" ) ) . get ( ) ; com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup ( db , new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( createdGroup.id ) ) . get ( ) ; deleteGroupRefs ( reviewDbGroup ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState ( rebuild ( reviewDbGroup ) ) ) . isEqualTo ( roundToSecond ( reviewDbGroup ) ) ; }
public java.nio.file.FileVisitResult preVisitDirectory ( java.nio.file.Path dir , java.nio.file.attribute.BasicFileAttributes attrs ) throws java.io.IOException { java.lang.String fName = dir.getFileName ( ) . toString ( ) ; if ( ( fName.endsWith ( ".deleted" ) ) && ( fName.matches ( ".*\\d{13}.deleted$" ) ) ) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn ( "Will delete this folder: {}" , dir ) ; recursiveDelete ( dir ) ; return java.nio.file.FileVisitResult.SKIP_SUBTREE ; } else if ( org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository ( dir.toFile ( ) , FS.DETECTED ) ) { return java.nio.file.FileVisitResult.SKIP_SUBTREE ; } return super . preVisitDirectory ( dir , attrs ) ; }
public void onSuccess ( java.lang.Object result ) { actionsPanel.remove ( b ) ; fireOnSuggestRefresh ( ) ; }
private java.lang.String extractWhat ( com.google.gerrit.sshd.DispatchCommand dcmd ) { if ( dcmd == null ) { return "Command was already destroyed" ; } java.lang.StringBuilder commandName = new java.lang.StringBuilder ( dcmd.getCommandName ( ) ) ; java.lang.String [ ] args = dcmd.getArguments ( ) ; for ( int i = 1 ; i < ( args.length ) ; i ++ ) { commandName.append ( "." ) . append ( args [ i ] ) ; } return commandName.toString ( ) ; }
public void run ( ) { synchronized ( cleanup ) { for ( final java.util.Iterator < java.lang.Runnable > i = cleanup.iterator ( ) ; i.hasNext ( ) ; ) { try { i.next ( ) . run ( ) ; } catch ( java.lang.Throwable err ) { com.google.gerrit.server.RequestCleanup.log.error ( "Failed to execute per-request cleanup" , err ) ; } i.remove ( ) ; } } }
public void topoSortCycle ( ) { com.google.gerrit.server.notedb.rebuild.Event e1 = new com.google.gerrit.server.notedb.rebuild.EventSorterTest.TestEvent ( com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; com.google.gerrit.server.notedb.rebuild.Event e2 = new com.google.gerrit.server.notedb.rebuild.EventSorterTest.TestEvent ( com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; java.util.List < com.google.gerrit.server.notedb.rebuild.Event > events = events ( e2 , e1 ) ; new com.google.gerrit.server.notedb.rebuild.EventSorter ( events ) . sort ( ) ; com.google.common.truth.Truth.assertThat ( events ) . containsExactly ( e1 , e2 ) . inOrder ( ) ; }
public static java.lang.String owner ( com.google.gerrit.client.account.AccountInfo ai ) { if ( ( ai.email ( ) ) != null ) { return ai.email ( ) ; } else if ( ( ai.name ( ) ) != null ) { return ai.name ( ) ; } else if ( ( ai._accountId ( ) ) != 0 ) { return "" + ( ai._accountId ( ) ) ; } else { return "" ; } }
public boolean deleteChangeFromIndex ( int changeId ) { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult result = httpSession.delete ( buildIndexEndpoint ( changeId ) ) ; if ( result.isSuccessful ( ) ) { return true ; } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error ( "Unable to delete from index change {}. Cause: {}" , changeId , result.getMessage ( ) ) ; } catch ( java.io.IOException e ) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error ( ( "Error trying to delete from index change " + changeId ) , e ) ; } return false ; }
public void testSortWithRegex ( ) { grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , "^refs/heads/.*" ) ; grant ( util.getParentConfig ( ) , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.ANONYMOUS , "^refs/heads/.*-QA-.*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertTrue ( "u can read" , u.controlForRef ( "refs/heads/foo-QA-bar" ) . isVisible ( ) ) ; assertTrue ( "d can read" , d.controlForRef ( "refs/heads/foo-QA-bar" ) . isVisible ( ) ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( ( "Reports for patchset " + ( screen.getToken ( 1 ) ) ) ) ; screen.show ( new com.googlesource.gerrit.plugins.verifystatus.client.JobsScreen ( screen.getToken ( 1 ) ) ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( revision ) != null ) { rw.markStart ( revision ) ; rw.sort ( RevSort.REVERSE ) ; registeredOn = new java.sql.Timestamp ( ( ( rw.next ( ) . getCommitTime ( ) ) * 1000L ) ) ; org.eclipse.jgit.lib.Config cfg = readConfig ( com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG ) ; account = parse ( cfg ) ; } isLoaded = true ; }
public void testOneIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a file:b" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.query.change.AndSource.class ) . isSameAs ( out.getClass ( ) ) ; com.google.common.truth.Truth.assertThat ( out.getChildren ( ) ) . containsExactly ( query ( in.getChild ( 1 ) ) , in.getChild ( 0 ) ) . inOrder ( ) ; }
private void setCreatedOnToVeryOldTimestamp ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups ( ) . get ( groupId ) ; java.time.Instant instant = java.time.LocalDateTime.of ( 1800 , java.time.Month.JANUARY , 1 , 0 , 0 ) . toInstant ( java.time.ZoneOffset.UTC ) ; group.setCreatedOn ( java.sql.Timestamp.from ( instant ) ) ; db.accountGroups ( ) . update ( com.google.common.collect.ImmutableList.of ( group ) ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.client.PatchLineComment result ) { enableButtons ( true ) ; notifyDraftDelta ( 1 ) ; findOrCreateEditor ( result , true ) . setOpen ( false ) ; }
public com.google.gerrit.acceptance.RestResponse putRaw ( java.lang.String endPoint , com.google.gerrit.extensions.restapi.RawInput stream ) throws java.io.IOException { com.google.common.base.Preconditions.checkNotNull ( stream ) ; org.apache.http.client.methods.HttpPut put = new org.apache.http.client.methods.HttpPut ( ( ( ( url ) + "/a" ) + endPoint ) ) ; put.addHeader ( new org.apache.http.message.BasicHeader ( "Content-Type" , stream.getContentType ( ) ) ) ; put.setEntity ( new org.apache.http.entity.BufferedHttpEntity ( new org.apache.http.entity.InputStreamEntity ( stream.getInputStream ( ) , stream.getContentLength ( ) ) ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( put ) ) ; }
public void cannotGetDashboardWithInheritedForNonDefault ( ) throws java.lang.Exception { java.lang.String id = createDashboard ( DashboardsCollection.DEFAULT_DASHBOARD_NAME , "test" ) ; exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; exception.expectMessage ( "inherited flag can only be used with default" ) ; gApi.projects ( ) . name ( project.get ( ) ) . dashboard ( id ) . get ( true ) ; }
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > reindexIfStale ( com.google.gerrit.reviewdb.client.Account.Id id ) { java.util.concurrent.Callable < java.lang.Boolean > task = ( ) -> { if ( stalenessChecker.isStale ( id ) ) { index ( id ) ; return true ; } return false ; } ; return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.nonCancellationPropagating ( batchExecutor.submit ( task ) ) , IndexUtils.MAPPER ) ; }
com.google.gerrit.server.account.externalids.ExternalId get ( com.google.gerrit.server.account.externalids.ExternalId.Key key , org.eclipse.jgit.lib.ObjectId rev ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled ( ) ; if ( rev.equals ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return com.google.gerrit.server.account.externalids.ExternalIdReader.parse ( key , rw , rev ) ; } }
protected boolean updateHead ( org.eclipse.jgit.transport.URIish uri , com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String newHead ) { java.io.OutputStream errStream = sshHelper.newErrorBufferStream ( ) ; java.lang.String cmd = ( ( "gerrit set-head " + ( projectName.get ( ) ) ) + " --new-head " ) + newHead ; try { execute ( uri , cmd , errStream ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.replication.GerritSshApi.log.error ( java.lang.String.format ( ( "Error updating HEAD of remote repository at %s to %s:\n" + " Exception: %s\n Command: %s\n Output: %s" ) , uri , newHead , e , cmd , errStream ) , e ) ; return false ; } return true ; }
public void blockPushDraftsUnblockAdmin ( ) { com.google.gerrit.server.project.testing.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/drafts/*" ) ; com.google.gerrit.server.project.testing.Util.allow ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.testing.Util.ADMIN , "refs/drafts/*" ) ; com.google.gerrit.server.permissions.ProjectControl u = user ( local ) ; com.google.gerrit.server.permissions.ProjectControl a = user ( local , "a" , com.google.gerrit.server.project.testing.Util.ADMIN ) ; assertBlocked ( com.google.gerrit.common.data.Permission.PUSH , "refs/drafts/refs/heads/master" , u ) ; assertNotBlocked ( com.google.gerrit.common.data.Permission.PUSH , "refs/drafts/refs/heads/master" , a ) ; }
void setMaxHeight ( int height ) { this . maxHeight = height ; for ( int i = 0 ; i < ( getTabBar ( ) . getTabCount ( ) ) ; i ++ ) { tabs.get ( i ) . setMaxHeight ( height ) ; } }
public void withDuplicateInternalGroupCaseSensitiveName_Conflict ( ) throws java.lang.Exception { java.lang.String newGroupName = "dupGroupA" ; adminSession.put ( ( "/groups/" + newGroupName ) ) ; sshSession.exec ( ( "gerrit create-group " + newGroupName ) ) ; com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( sshSession.getError ( ) ) . that ( sshSession.hasError ( ) ) . isTrue ( ) ; }
public com.google.gerrit.extensions.api.config.AccessCheckInfo checkAccess ( com.google.gerrit.extensions.api.config.AccessCheckInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return checkAccess.get ( ) . apply ( new com.google.gerrit.server.config.ConfigResource ( ) , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check access" , e ) ; } }
public void changeFields ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId ( ) . getParentKey ( ) ; gApi.changes ( ) . id ( id.get ( ) ) . topic ( name ( "a-topic" ) ) ; com.google.gerrit.reviewdb.client.Change old = db.changes ( ) . get ( id ) ; rebuild ( id ) ; com.google.gerrit.acceptance.server.notedb.ChangeRebuilderIT.assertChangeEqual ( old , notesFactory.create ( db , project , id ) . getChange ( ) ) ; }
protected void display ( com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info ) { super . display ( info ) ; com.google.gwt.user.client.ui.InlineHyperlink uploadLink = new com.google.gwt.user.client.ui.InlineHyperlink ( "Upload Image" , ( ( "/x/" + ( com.google.gerrit.plugin.client.Plugin.get ( ) . getPluginName ( ) ) ) + "/upload" ) ) ; add ( uploadLink ) ; }
protected void configureServlets ( ) { com.googlesource.gerrit.plugins.gitblit.GitBlitModule.log.info ( "Configuring servlet and filters" ) ; bind ( com.gitblit.IUserService.class ) . to ( com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class ) ; bind ( com.googlesource.gerrit.plugins.gitblit.app.GerritGitBlit.class ) ; serve ( "/pages/*" ) . with ( com.googlesource.gerrit.plugins.gitblit.WrappedPagesServlet.class ) ; serve ( "/feed/*" ) . with ( com.googlesource.gerrit.plugins.gitblit.WrappedSyndicationServlet.class ) ; filter ( "/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.class ) ; filter ( "/pages/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.WrappedPagesFilter.class ) ; filter ( "/feed/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.WrappedSyndicationFilter.class ) ; }
public java.util.List < com.google.reviewit.app.Change > next ( ) throws com.google.gerrit.extensions.restapi.RestApiException { query ( ) ; java.util.List < com.google.reviewit.app.Change > nextChanges = result.subList ( ( ( page ) * ( com.google.reviewit.app.QueryHandler.LIMIT_QUERY ) ) , ( ( ( page ) + 1 ) * ( com.google.reviewit.app.QueryHandler.LIMIT_QUERY ) ) ) ; ( page ) ++ ; return nextChanges ; }
private com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent createEvent ( ) throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all ( ) ) { long size = repoSizeCache.get ( p ) . get ( ) ; event.addData ( size , p.get ( ) ) ; } return event ; }
public static com.google.gerrit.common.data.PermissionRule block ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String capabilityName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.project.testing.Util.newRule ( project , group ) ; project.getAccessSection ( AccessSection.GLOBAL_CAPABILITIES , true ) . getPermission ( capabilityName , true ) . add ( rule ) ; return rule ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { renderSubmitType ( result.asString ( ) ) ; }
public void onSuccess ( final java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > deleted ) { for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.reviewdb.Branch k = getRowItem ( row ) ; if ( ( k != null ) && ( deleted.contains ( k.getNameKey ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public void onKeyPress ( final com.google.gwt.user.client.ui.Widget sender , final char kc , final int mod ) { if ( ( ( mod & ( MODIFIER_CTRL ) ) == ( MODIFIER_CTRL ) ) || ( ( mod & ( MODIFIER_META ) ) == ( MODIFIER_META ) ) ) { switch ( kc ) { case 'c' : case 'x' : com.google.gwt.user.client.DeferredCommand.addCommand ( new com.google.gwt.user.client.Command ( ) { public void execute ( ) { hideTextBox ( ) ; } } ) ; break ; } } }
private void fireEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( change , holder.user , db ) ) { holder.listener.onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
public void setDownloadUrl ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme url ) { if ( url != null ) { downloadUrl = url.name ( ) ; } else { downloadUrl = null ; } }
private void displayDefaultContext ( final short lines ) { for ( int i = 0 ; i < ( AccountGeneralPreferences.CONTEXT_CHOICES.length ) ; i ++ ) { if ( ( com.google.gerrit.client.reviewdb.AccountGeneralPreferences.CONTEXT_CHOICES [ i ] ) == lines ) { defaultContext.setSelectedIndex ( i ) ; return ; } } displayDefaultContext ( AccountGeneralPreferences.DEFAULT_CONTEXT ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.server.account.GetSshKeys.SshKeyInfo > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.AddSshKey.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) && ( ! ( self.get ( ) . getCapabilities ( ) . canModifyAccount ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "not allowed to add SSH keys" ) ; } return apply ( rsrc.getUser ( ) , input ) ; }
private void disableLuceneAutomaticCommit ( ) { org.eclipse.jgit.lib.Config cfg = dbInjector.getInstance ( com.google.inject.Key.get ( org.eclipse.jgit.lib.Config.class , com.google.gerrit.server.config.GerritServerConfig.class ) ) ; if ( ( com.google.gerrit.server.index.IndexModule.getIndexType ( dbInjector ) ) == ( IndexType.LUCENE ) ) { cfg.setLong ( "index" , "changes_open" , "commitWithin" , ( - 1 ) ) ; cfg.setLong ( "index" , "changes_closed" , "commitWithin" , ( - 1 ) ) ; } }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) ; int batchSize ; if ( ( schema != null ) && ( schema.hasField ( ChangeField.EXACT_COMMIT ) ) ) { batchSize = ( indexConfig.maxTerms ( ) ) - 3 ; } else { batchSize = indexConfig.maxPrefixTerms ( ) ; } return byCommitsOnBranchNotMerged ( schema , branch , hashes , batchSize ) ; }
private void cancel ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { callback ( false , req , rsp ) ; }
private java.util.Set < java.lang.String > getAllowedUserIds ( com.google.gerrit.server.IdentifiedUser user ) { java.util.Set < java.lang.String > result = new java.util.HashSet < > ( ) ; result.addAll ( user.getEmailAddresses ( ) ) ; for ( com.google.gerrit.reviewdb.client.AccountExternalId extId : user.state ( ) . getExternalIds ( ) ) { if ( extId.isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY ) ) { continue ; } result.add ( extId.getExternalId ( ) ) ; } return result ; }
public static void createBranch ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String ref , java.lang.String revision , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.BranchInfo > asyncCallback ) { com.google.gerrit.client.projects.ProjectApi.BranchInput input = com.google.gerrit.client.projects.ProjectApi.BranchInput.create ( ) ; input.setRevision ( revision ) ; new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( projectName.get ( ) ) . view ( "branches" ) . id ( ref ) . ifNoneMatch ( ) . put ( input , asyncCallback ) ; }
com.googlesource.gerrit.plugins.reviewers.ReviewersConfig create ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) ;
private void finishActiveTag ( ) { if ( ( tag ) != null ) { if ( com.google.gitiles.doc.html.HtmlBuilder.SELF_CLOSING_TAGS.contains ( tag ) ) { htmlBuf.append ( " />" ) ; } else { htmlBuf.append ( '>' ) ; } tag = null ; } }
private void renderLinks ( com.google.gerrit.client.editor.EditFileInfo editInfo , com.google.gwt.core.client.JsArray < com.google.gerrit.client.DiffWebLinkInfo > diffLinks ) { renderLinksToDiff ( ) ; if ( editInfo != null ) { renderLinks ( com.google.gerrit.client.rpc.Natives.asList ( editInfo.web_links ( ) ) ) ; } else if ( diffLinks != null ) { renderLinks ( com.google.gerrit.client.rpc.Natives.asList ( diffLinks ) ) ; } }
public boolean isFile ( ) { boolean isCommitMessage = Patch.COMMIT_MSG.equals ( script.getNewName ( ) ) ; return ! ( ( isCommitMessage || ( ( ( side ) == ( com.google.gerrit.client.patches.PatchSetSelectBox.Side.A ) ) && ( 0 >= ( script.getA ( ) . size ( ) ) ) ) ) || ( ( ( side ) == ( com.google.gerrit.client.patches.PatchSetSelectBox.Side.B ) ) && ( 0 >= ( script.getB ( ) . size ( ) ) ) ) ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.project.ProjectControl ctl ; try { ctl = controlFactory.controlFor ( new com.google.gerrit.reviewdb.client.Project.NameKey ( com.google.gerrit.extensions.restapi.Url.decode ( id ) ) , user.get ( ) ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } if ( ( ! ( ctl.isVisible ( ) ) ) && ( ! ( ctl.isOwner ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.project.ProjectResource ( ctl ) ; }
public boolean equals ( java.lang.Object other ) { if ( other instanceof com.google.gerrit.extensions.registration.DynamicMap.NamePair ) { com.google.gerrit.extensions.registration.DynamicMap.NamePair np = ( ( com.google.gerrit.extensions.registration.DynamicMap.NamePair ) ( other ) ) ; return ( pluginName.equals ( np ) ) && ( exportName.equals ( np ) ) ; } return false ; }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { if ( ( id == ( reloadVersionId ) ) && ( isAttached ( ) ) ) { diff = diffInfo ; operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { skipManager.removeAll ( ) ; chunkManager.reset ( ) ; diffTable.scrollbar.removeDiffAnnotations ( ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; render ( diff ) ; chunkManager.adjustPadding ( ) ; skipManager.render ( prefs.context ( ) , diff ) ; } } ) ; } }
private Account.Id queryForUsername ( final java.lang.String username ) { try { final com.google.gerrit.reviewdb.ReviewDb db = schema.open ( ) ; try { final com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId extId = db.accountExternalIds ( ) . get ( new com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId.Key ( SCHEME_GERRIT , username ) ) ; return extId != null ? extId.getAccountId ( ) : null ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.client.OrmException e ) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn ( "Cannot query for username in database" , e ) ; return null ; } }
public com.google.gerrit.extensions.api.projects.ChildProjectApi child ( java.lang.String name ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return childApi.create ( children.parse ( checkExists ( ) , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( name ) ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot parse child project" , e ) ; } }
public void missingRepo ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "otherproject" ) , adminId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; insertMissingPatchSet ( c , "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) ; assertProblems ( c , "Destination repository not found: otherproject" ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( revision ) != null ) { rw.markStart ( revision ) ; rw.sort ( RevSort.REVERSE ) ; registeredOn = new java.sql.Timestamp ( ( ( rw.next ( ) . getCommitTime ( ) ) * 1000L ) ) ; org.eclipse.jgit.lib.Config cfg = readConfig ( com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG ) ; account = parse ( cfg ) ; account.setMetaId ( revision.name ( ) ) ; } isLoaded = true ; }
public void visit ( org.pegdown.ast.VerbatimNode node ) { html.open ( "pre" ) ; html.open ( "code" ) ; java.lang.String text = node.getText ( ) ; while ( text.startsWith ( "\n" ) ) { html.open ( "br" ) ; text = text.substring ( 1 ) ; } html.appendAndEscape ( text ) ; html.close ( "code" ) ; html.close ( "pre" ) ; }
private static java.util.Set < java.security.PublicKey > myHostKeys ( org.apache.sshd.common.KeyPairProvider p ) { final java.util.Set < java.security.PublicKey > keys = new java.util.HashSet < > ( 2 ) ; com.google.gerrit.sshd.DatabasePubKeyAuth.addPublicKey ( keys , p , KeyPairProvider.SSH_RSA ) ; com.google.gerrit.sshd.DatabasePubKeyAuth.addPublicKey ( keys , p , KeyPairProvider.SSH_DSS ) ; return keys ; }
private static java.lang.String quotedPhrase ( final java.lang.String name ) { if ( com.google.gerrit.server.mail.EmailHeader.needsQuotedPrintable ( name ) ) { return com.google.gerrit.server.mail.EmailHeader.quotedPrintable ( name ) ; } for ( int i = 0 ; i < ( name.length ( ) ) ; i ++ ) { final char c = name.charAt ( i ) ; if ( ( com.google.gerrit.server.mail.Address.MUST_QUOTE_NAME.indexOf ( c ) ) != ( - 1 ) ) { return com.google.gerrit.server.mail.Address.wrapInQuotes ( name ) ; } } return name ; }
public void flushWebSessionsCache_Forbidden ( ) throws java.lang.Exception { allowGlobalCapabilities ( com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , GlobalCapability.VIEW_CACHES , GlobalCapability.FLUSH_CACHES ) ; try { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/accounts/flush" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; r.consume ( ) ; r = userSession.post ( "/config/server/caches/web_sessions/flush" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; } finally { removeGlobalCapabilities ( com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , GlobalCapability.VIEW_CACHES , GlobalCapability.FLUSH_CACHES ) ; } }
protected com.google.gerrit.client.reviewdb.ReviewDb openReviewDb ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { if ( ( db ) == null ) { try { db = com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 1 , "fatal: Gerrit database is offline" , e ) ; } } return db ; }
private void fireEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( change , holder.user , db ) ) { holder.listener.onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
public void currentRevisionAndMessages ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = get ( changeId , com.google.gerrit.extensions.common.ListChangesOption.CURRENT_REVISION , com.google.gerrit.extensions.common.ListChangesOption.MESSAGES ) ; org.junit.Assert.assertEquals ( 1 , c.revisions.size ( ) ) ; org.junit.Assert.assertEquals ( commitId ( 2 ) , c.currentRevision ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableSet.of ( commitId ( 2 ) ) , c.revisions.keySet ( ) ) ; org.junit.Assert.assertEquals ( 3 , c.revisions.get ( commitId ( 2 ) ) . _number ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > currentApprovals ( ) throws com.google.gwtorm.server.OrmException { if ( ( currentApprovals ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; if ( c == null ) { currentApprovals = java.util.Collections.emptyList ( ) ; } else if ( ( allApprovals ) != null ) { return allApprovals.get ( c.currentPatchSetId ( ) ) ; } else { currentApprovals = approvalsUtil.byPatchSet ( db , notes ( ) , c.currentPatchSetId ( ) ) ; } } return currentApprovals ; }
private com.google.gwtexpui.linker.server.Permutation select ( final javax.servlet.http.HttpServletRequest req ) { if ( "0" . equals ( req.getParameter ( "s" ) ) ) { return null ; } return selector.select ( req ) ; }
java.lang.Runnable maybeNextVimSearch ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } } } ; }
boolean isSingleProjectMatch ( ) { java.lang.String [ ] projects = config.getProjects ( ) ; boolean ret = ( projects.length ) == 1 ; if ( ret ) { java.lang.String projectMatch = projects [ 0 ] ; if ( ( com.googlesource.gerrit.plugins.replication.ReplicationFilter.getPatternType ( projectMatch ) ) != ( ReplicationFilter.PatternType.EXACT_MATCH ) ) { ret = false ; } } return ret ; }
private java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.Id > parseGroups ( java.util.List < java.lang.String > groups ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.Id > groupIds = com.google.common.collect.Sets.newHashSet ( ) ; if ( groups != null ) { for ( java.lang.String g : groups ) { groupIds.add ( com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( groupsCollection.parseInternal ( g ) ) . getId ( ) ) ; } } return groupIds ; }
public void testAddSingleHashtag ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < java.lang.String > expected = java.util.Arrays.asList ( "tag2" ) ; assertResult ( POST ( changeId , "tag2" , null ) , expected ) ; assertResult ( GET ( changeId ) , expected ) ; expected = java.util.Arrays.asList ( "tag1" , "tag2" ) ; assertResult ( POST ( changeId , "tag1" , null ) , expected ) ; assertResult ( GET ( changeId ) , expected ) ; }
public void blobText ( ) throws java.lang.Exception { repo.branch ( "master" ) . commit ( ) . add ( "foo" , "contents" ) . create ( ) ; java.lang.String text = buildText ( "/repo/+/master/foo?format=TEXT" , "100644" ) ; org.junit.Assert.assertEquals ( "contents" , new java.lang.String ( com.google.common.io.BaseEncoding.base64 ( ) . decode ( text ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { for ( com.google.gerrit.reviewdb.client.Patch p : detail.getPatches ( ) ) { openWindow ( com.google.gerrit.client.Dispatcher.toPatchUnified ( diffBaseId , p.getKey ( ) ) ) ; } }
public com.google.gerrit.server.git.MetaDataUpdate create ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gerrit.server.IdentifiedUser user , org.eclipse.jgit.lib.BatchRefUpdate batch ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.git.MetaDataUpdate md = factory.create ( name , mgr.openRepository ( name ) , batch ) ; md.getCommitBuilder ( ) . setAuthor ( createPersonIdent ( user ) ) ; md.getCommitBuilder ( ) . setCommitter ( serverIdent ) ; return md ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
public void dontSkipForOtherOps ( ) throws java.lang.Exception { java.lang.String config = "[plugin \"uploadvalidator\"]\n" + ( ( "skipValidation=testOp\n" + "skipGroup=testGroup\n" ) + "skipGroup=anotherGroup" ) ; com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , config ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( "testGroup" , "yetAnotherGroup" ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; com.google.common.truth.Truth.assertThat ( validatorConfig.isEnabledForRef ( projectName , "anyRef" , "anotherOp" ) ) . isTrue ( ) ; }
protected boolean shouldSendMessage ( ) { return ( ( ( sshKey ) != null ) || ( ( gpgKeys.size ( ) ) > 0 ) ) && ( ( user.equals ( callingUser ) ) || ( ! ( callingUser.getCapabilities ( ) . canAdministrateServer ( ) ) ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { patchSetDetail = result ; if ( ( fileList ) == null ) { fileList = new com.google.gerrit.client.changes.PatchTable ( ) ; fileList.display ( result ) ; patchIndex = fileList.indexOf ( patchKey ) ; topNav.display ( patchIndex , getPatchScreenType ( ) , fileList ) ; bottomNav.display ( patchIndex , getPatchScreenType ( ) , fileList ) ; } refresh ( true ) ; }
com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource ( java.lang.String name ) { try { java.nio.file.Path p = getResourcePath ( name ) ; return cache.get ( p , newLoader ( p ) ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.httpd.raw.ResourceServlet.log.warn ( java.lang.String.format ( "Cannot load static resource %s" , name ) , e ) ; return null ; } }
private void parseTag ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { tag = null ; java.util.List < java.lang.String > tagLines = commit.getFooterLines ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_TAG ) ; if ( tagLines.isEmpty ( ) ) { return ; } else if ( ( tagLines.size ( ) ) == 1 ) { tag = tagLines.get ( 0 ) ; } else { throw expectedOneFooter ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_TAG , tagLines ) ; } }
public static com.google.gerrit.server.StarredChangesUtil.StarField parse ( java.lang.String s ) { int p = s.indexOf ( com.google.gerrit.server.StarredChangesUtil.StarField.SEPARATOR ) ; if ( p >= 0 ) { try { com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.parse ( s.substring ( 0 , p ) ) ; java.lang.String label = s.substring ( ( p + 1 ) ) ; return com.google.gerrit.server.StarredChangesUtil.StarField.create ( accountId , label ) ; } catch ( java.lang.NumberFormatException e ) { return null ; } } return null ; }
void onReplyDone ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReply ( getOriginal ( ) , "Done" , true ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { patchSetDetail = result ; if ( ( fileList ) == null ) { fileList = new com.google.gerrit.client.changes.PatchTable ( prefs ) ; fileList.display ( result ) ; patchIndex = fileList.indexOf ( patchKey ) ; } refresh ( true ) ; }
public void setAssigneeOnWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; assign ( sc , sc.owner , sc.assignee ) ; assertThat ( sender ) . sent ( "setassignee" , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
private com.google.gerrit.server.ssh.AbstractCommand create ( final java.lang.String cmd ) { return new com.google.gerrit.server.ssh.AbstractCommand ( ) { @ java.lang.Override protected void run ( final java.lang.String [ ] argv ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.Failure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; } } ; }
public void testParseSimple ( ) throws java.lang.Exception { com.google.gerrit.server.git.DestinationList dl = new com.google.gerrit.server.git.DestinationList ( ) ; dl.parseLabel ( com.google.gerrit.server.git.DestinationListTest.LABEL , com.google.gerrit.server.git.DestinationListTest.F_SIMPLE , null ) ; java.util.Set < com.google.gerrit.reviewdb.client.Branch.NameKey > branches = dl.getDestinations ( com.google.gerrit.server.git.DestinationListTest.LABEL ) ; com.google.common.truth.Truth.assertThat ( branches ) . containsExactlyElementsIn ( com.google.gerrit.server.git.DestinationListTest.D_SIMPLE ) ; }
public void mergeByReviewerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , sc.reviewer , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "merged" , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; }
public void create ( ) throws java.lang.Exception { for ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values ( ) ) { pushTagForExistingCommit ( tagType , Status.REJECTED_OTHER_REASON ) ; allowTagCreation ( tagType ) ; pushTagForExistingCommit ( tagType , Status.OK ) ; pushTagForNewCommit ( tagType , Status.REJECTED_OTHER_REASON ) ; } allowPushOnRefsTags ( ) ; for ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values ( ) ) { pushTagForNewCommit ( tagType , Status.OK ) ; } }
public com.google.common.base.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) throws java.io.IOException { java.util.jar.JarEntry jarEntry = jarFile.getJarEntry ( resourcePath ) ; if ( ( jarEntry == null ) || ( ( jarEntry.getSize ( ) ) == 0 ) ) { return com.google.common.base.Optional.absent ( ) ; } return com.google.common.base.Optional.of ( resourceOf ( jarEntry ) ) ; }
public com.google.gerrit.common.data.Capable canUpload ( ) { com.google.gerrit.common.data.Capable result = projectControl.canPushToAtLeastOneRef ( ) ; if ( result != ( com.google.gerrit.common.data.Capable.OK ) ) { return result ; } if ( receiveConfig.checkMagicRefs ) { result = com.google.gerrit.server.util.MagicBranch.checkMagicBranchRefs ( repo , projectControl.getProject ( ) ) ; } return result ; }
protected java.lang.String getChangeMessageThreadId ( ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( '<' ) ; r.append ( "gerrit" ) ; r.append ( '.' ) ; r.append ( change.getCreatedOn ( ) . getTime ( ) ) ; r.append ( '.' ) ; r.append ( change.getKey ( ) . get ( ) ) ; r.append ( '@' ) ; r.append ( getGerritHost ( ) ) ; r.append ( '>' ) ; return r.toString ( ) ; }
private com.google.inject.AbstractModule createIndexModule ( ) { com.google.gerrit.server.index.IndexModule.IndexType indexType = com.google.gerrit.server.index.IndexModule.getIndexType ( cfgInjector ) ; switch ( indexType ) { case LUCENE : return ( luceneModule ) != null ? luceneModule : new com.google.gerrit.lucene.LuceneIndexModule ( ) ; case SOLR : return new com.google.gerrit.solr.SolrIndexModule ( ) ; default : throw new java.lang.IllegalStateException ( ( "unsupported index.type = " + indexType ) ) ; } }
private void assertEditPreferences ( com.google.gerrit.extensions.client.EditPreferencesInfo out , com.google.gerrit.extensions.client.EditPreferencesInfo in ) { com.google.common.truth.Truth.assertThat ( out.lineLength ) . isEqualTo ( in.lineLength ) ; com.google.common.truth.Truth.assertThat ( out.tabSize ) . isEqualTo ( in.tabSize ) ; com.google.common.truth.Truth.assertThat ( out.hideTopMenu ) . isEqualTo ( in.hideTopMenu ) ; com.google.common.truth.Truth.assertThat ( out.showTabs ) . isNull ( ) ; com.google.common.truth.Truth.assertThat ( out.showWhitespaceErrors ) . isEqualTo ( in.showWhitespaceErrors ) ; com.google.common.truth.Truth.assertThat ( out.syntaxHighlighting ) . isNull ( ) ; com.google.common.truth.Truth.assertThat ( out.hideLineNumbers ) . isEqualTo ( in.hideLineNumbers ) ; com.google.common.truth.Truth.assertThat ( out.theme ) . isEqualTo ( in.theme ) ; }
PatchSet.Id getPatchSetId ( ) { com.google.gerrit.reviewdb.client.PatchSet.Id id = get ( 0 ) . psId ; for ( int i = 1 ; i < ( size ( ) ) ; i ++ ) { com.google.common.base.Preconditions.checkState ( java.util.Objects.equals ( id , get ( i ) . psId ) , "mismatched patch sets in EventList: %s != %s" , id , get ( i ) . psId ) ; } return id ; }
protected void respondWithJobStatusJson ( javax.servlet.http.HttpServletResponse resp , com.googlesource.gerrit.plugins.github.git.BatchImporter cloner ) throws java.io.IOException { java.util.Collection < com.googlesource.gerrit.plugins.github.git.GitJob > jobs = cloner.getJobs ( ) ; java.util.List < com.googlesource.gerrit.plugins.github.git.GitJobStatus > jobListStatus = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.googlesource.gerrit.plugins.github.git.GitJob job : jobs ) { jobListStatus.add ( job.getStatus ( ) ) ; } new com.google.gson.Gson ( ) . toJson ( jobListStatus , jobListStatus.getClass ( ) , new com.google.gson.stream.JsonWriter ( resp.getWriter ( ) ) ) ; }
private void decodeChangedLines ( org.apache.lucene.document.Document doc , com.google.gerrit.server.query.change.ChangeData cd ) { org.apache.lucene.index.IndexableField added = doc.getField ( com.google.gerrit.lucene.LuceneChangeIndex.ADDED_FIELD ) ; org.apache.lucene.index.IndexableField deleted = doc.getField ( com.google.gerrit.lucene.LuceneChangeIndex.DELETED_FIELD ) ; if ( ( added != null ) && ( deleted != null ) ) { cd.setChangedLines ( added.numericValue ( ) . intValue ( ) , deleted.numericValue ( ) . intValue ( ) ) ; } }
public void onSuccess ( final java.util.Set < com.google.gerrit.reviewdb.AccountExternalId.Key > removed ) { deleteIdentity.setEnabled ( true ) ; for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.reviewdb.AccountExternalId k = getRowItem ( row ) ; if ( ( k != null ) && ( removed.contains ( k.getKey ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public synchronized void stop ( ) { if ( ( ds ) != null ) { closeDataSource ( ds ) ; } }
void updateFileCommentVisibility ( boolean forceHide ) { com.google.gwt.user.client.ui.UIObject.setVisible ( patchSetNavRow , ( ! forceHide ) ) ; if ( forceHide || ( ( ( fileCommentPanelA.getBoxCount ( ) ) == 0 ) && ( ( fileCommentPanelB.getBoxCount ( ) ) == 0 ) ) ) { com.google.gwt.user.client.ui.UIObject.setVisible ( fileCommentRow , false ) ; } else { com.google.gwt.user.client.ui.UIObject.setVisible ( fileCommentRow , true ) ; } host.resizeCodeMirror ( ) ; }
private com.google.gerrit.server.ssh.AbstractCommand create ( final java.lang.String cmd ) { final com.google.inject.Provider < ? extends com.google.gerrit.server.ssh.AbstractCommand > f = commands.get ( cmd ) ; if ( f != null ) { return f.get ( ) ; } return new com.google.gerrit.server.ssh.AbstractCommand ( ) { @ java.lang.Override protected void run ( ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.UnloggedFailure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; } } ; }
public void parseAuthor ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Patch-Set: 1\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseFails ( writeCommit ( ( "Update change\n" + ( "\n" + "Patch-Set: 1\n" ) ) , new org.eclipse.jgit.lib.PersonIdent ( "Change Owner" , "owner@example.com" , serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ) ) ; assertParseFails ( writeCommit ( ( "Update change\n" + ( "\n" + "Patch-Set: 1\n" ) ) , new org.eclipse.jgit.lib.PersonIdent ( "Change Owner" , "x@gerrit" , serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ) ) ; }
public void emptyExceptSubject ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update.commit ( ) ; org.junit.Assert.assertNull ( update.getRevision ( ) ) ; update = newUpdate ( c , changeOwner ) ; update.setSubject ( "Create change" ) ; update.commit ( ) ; org.junit.Assert.assertNotNull ( update.getRevision ( ) ) ; }
private void assertParseFails ( org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( commit ) ) { parser.parseAll ( ) ; org.junit.Assert.fail ( ( "Expected parse to fail:\n" + ( commit.getFullMessage ( ) ) ) ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { } }
private com.google.gerrit.server.change.ReviewerJson.PostResult putAccount ( com.google.gerrit.server.change.ReviewerResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser ( ) . getAccount ( ) ; com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl ( ) ; com.google.gerrit.server.change.ReviewerJson.PostResult result = new com.google.gerrit.server.change.ReviewerJson.PostResult ( ) ; if ( isValidReviewer ( member , control ) ) { addReviewers ( rsrc.getChangeResource ( ) , result , com.google.common.collect.ImmutableMap.of ( member.getId ( ) , control ) ) ; } return result ; }
protected void configure ( ) { factory ( ReviewerResource.Factory.class ) ; factory ( AccountInfo.Loader.Factory.class ) ; factory ( EmailReviewComments.Factory.class ) ; factory ( ChangeInserter.Factory.class ) ; factory ( PatchSetInserter.Factory.class ) ; factory ( ChangeEdits.Create.Factory.class ) ; factory ( ChangeEdits.DeleteEdit.Factory.class ) ; }
public void messagesNotReturnedByDefault ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) ; postMessage ( changeId , "Some nits need to be fixed." ) ; com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId ) ; org.junit.Assert.assertNull ( c.messages ) ; }
public boolean cancel ( boolean mayInterruptIfRunning ) { return task.cancel ( mayInterruptIfRunning ) ; }
public com.google.gerrit.extensions.registration.RegistrationHandle replace ( final com.google.gerrit.sshd.CommandName name , final com.google.inject.Provider < org.apache.sshd.server.Command > cmd ) { final java.util.concurrent.ConcurrentMap < java.lang.String , com.google.gerrit.sshd.CommandProvider > m = getMap ( ) ; m.put ( name.value ( ) , new com.google.gerrit.sshd.CommandProvider ( cmd , null ) ) ; return new com.google.gerrit.extensions.registration.RegistrationHandle ( ) { @ java.lang.Override public void remove ( ) { m.remove ( name.value ( ) , cmd ) ; } } ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toProjectDefaultDashboard ( info.project_name_key ( ) ) ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { saveProject.setEnabled ( true ) ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.junit.TestRepository < ? > repo , java.lang.String subject , java.lang.String fileName , java.lang.String content , java.lang.String topic ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , repo , subject , fileName , content ) ; return push.to ( ( "refs/for/master/" + ( name ( topic ) ) ) ) ; }
private void appendHunkHeader ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final com.google.gerrit.prettify.common.EditList.Hunk hunk ) { openLine ( m ) ; padLineNumber ( m ) ; padLineNumber ( m ) ; m.openTd ( ) ; m.addStyleName ( Gerrit.RESOURCES.css ( ) . diffText ( ) ) ; m.addStyleName ( Gerrit.RESOURCES.css ( ) . diffTextHunkHeader ( ) ) ; m.append ( "@@ -" ) ; appendRange ( m , ( ( hunk.getCurA ( ) ) + 1 ) , ( ( hunk.getEndA ( ) ) - ( hunk.getCurA ( ) ) ) ) ; m.append ( " +" ) ; appendRange ( m , ( ( hunk.getCurB ( ) ) + 1 ) , ( ( hunk.getEndB ( ) ) - ( hunk.getCurB ( ) ) ) ) ; m.append ( " @@" ) ; m.closeTd ( ) ; closeLine ( m ) ; }
public void preferDeleteAtLineBreak ( ) throws java.lang.Exception { java.lang.String a = " abc\n def\n" ; java.lang.String b = " abc\n def\n" ; java.util.List < org.eclipse.jgit.diff.Edit > expected = new org.eclipse.jgit.diff.EditList ( ) ; expected.add ( new org.eclipse.jgit.diff.Edit ( 0 , 2 , 0 , 0 ) ) ; expected.add ( new org.eclipse.jgit.diff.Edit ( 8 , 10 , 6 , 6 ) ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.patch.IntraLineLoaderTest.intraline ( a , b ) ) . isEqualTo ( expected ) ; }
public void testIsEnabledRefNoParentMatchingBranchMiddleDisabled ( ) { java.lang.String [ ] branches = new java.lang.String [ ] { "^refs/heads/foo.*" , "^refs/heads/test.*" , "^refs/heads/baz.*" } ; setupIsEnabled ( "false" , null , branches ) ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertFalse ( itsConfig.isEnabled ( "testProject" , "refs/heads/testBranch" ) ) ; }
public void setUp ( ) throws java.sql.SQLException { java.sql.Connection conn = java.sql.DriverManager.getConnection ( ( ( ( com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.TEST_URL ) + ";" ) + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.TEST_OPTIONS ) ) ) ; stat = conn.createStatement ( ) ; poolMock = new com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.PoolMock ( ) ; org.mockito.Mockito.when ( cfgMock.getMaxAge ( ) ) . thenReturn ( 5 ) ; org.mockito.Mockito.when ( cfgMock.getLocalStorePath ( ) ) . thenReturn ( testFolder.getRoot ( ) . toPath ( ) ) ; }
public void testItsAssociationPolicySuggested ( ) { com.googlesource.gerrit.plugins.hooks.its.ItsConfig itsConfig = createItsConfig ( ) ; org.easymock.EasyMock.expect ( serverConfig.getEnum ( "commentLink" , "ItsTestName" , "association" , ItsAssociationPolicy.OPTIONAL ) ) . andReturn ( ItsAssociationPolicy.SUGGESTED ) . atLeastOnce ( ) ; replayMocks ( ) ; assertEquals ( "Expected and generated associated policy do not match" , ItsAssociationPolicy.SUGGESTED , itsConfig.getItsAssociationPolicy ( ) ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Project project , boolean preserveGitRepository ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repository = repoManager.openRepository ( project.getNameKey ( ) ) ; cleanCache ( repository ) ; if ( ! preserveGitRepository ) { deleteGitRepository ( project.getNameKey ( ) , repository ) ; } }
protected void assertApproved ( java.lang.String changeId ) throws java.io.IOException { com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId , com.google.gerrit.extensions.common.ListChangesOption.DETAILED_LABELS ) ; com.google.gerrit.server.change.ChangeJson.LabelInfo cr = c.labels.get ( "Code-Review" ) ; org.junit.Assert.assertEquals ( 1 , cr.all.size ( ) ) ; org.junit.Assert.assertEquals ( 2 , cr.all.get ( 0 ) . value.intValue ( ) ) ; org.junit.Assert.assertEquals ( "Administrator" , cr.all.get ( 0 ) . name ) ; }
private java.util.List < com.google.gerrit.extensions.api.projects.CommentLinkInfo > getCommitLinkInfo ( final java.lang.String commentlinkName ) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = com.googlesource.gerrit.plugins.its.base.its.ItsConfig.currentProjectName.get ( ) ; if ( projectName != null ) { java.util.List < com.google.gerrit.extensions.api.projects.CommentLinkInfo > commentlinks = projectCache.get ( projectName ) . getCommentLinks ( ) ; return com.google.common.collect.FluentIterable.from ( commentlinks ) . filter ( new com.google.common.base.Predicate < com.google.gerrit.extensions.api.projects.CommentLinkInfo > ( ) { @ java.lang.Override public boolean apply ( com.google.gerrit.extensions.api.projects.CommentLinkInfo input ) { return input.name.equals ( commentlinkName ) ; } } ) . toList ( ) ; } return java.util.Collections.emptyList ( ) ; }
public void loginPhase1 ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope ... scopes ) throws java.io.IOException { response.sendRedirect ( java.lang.String.format ( "%s?client_id=%s%s&redirect_uri=%s&state=%s%s" , config.gitHubOAuthUrl , config.gitHubClientId , getScope ( scopes ) , getURLEncoded ( config.oAuthFinalRedirectUrl ) , me ( ) , getURLEncoded ( request.getRequestURI ( ) . toString ( ) ) ) ) ; }
public void testAppend_String ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.append ( ( ( java.lang.String ) ( null ) ) ) ) ; org.junit.Assert.assertEquals ( "" , b.asString ( ) ) ; org.junit.Assert.assertSame ( b , b.append ( "foo" ) ) ; org.junit.Assert.assertSame ( b , b.append ( "bar" ) ) ; org.junit.Assert.assertEquals ( "foobar" , b.asString ( ) ) ; }
protected static final java.net.URL toFileURL ( java.lang.String filename ) { if ( filename == null ) { return null ; } try { return new java.io.File ( filename ) . toURI ( ) . toURL ( ) ; } catch ( java.net.MalformedURLException e ) { throw new java.lang.IllegalArgumentException ( e ) ; } }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.server.git.MergeOp.OpenRepo or , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.server.git.CodeReviewCommit branchTip ) throws com.google.gerrit.server.git.IntegrationException { return submitStrategyFactory.create ( submitType , db , or.repo , or.rw , or.ins , or.canMergeFlag , getAlreadyAccepted ( or , branchTip ) , destBranch , caller , commits ) ; }
public com.google.gerrit.extensions.common.AccountInfo getAssignee ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.AccountInfo > r = getAssignee.apply ( change ) ; return r.isNone ( ) ? null : r.value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get assignee" , e ) ; } }
public boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( isOwner ( ) ) || ( isReviewer ( db , cd ) ) ) || ( getRefControl ( ) . canViewDrafts ( ) ) ; }
private void setNew ( com.google.gerrit.reviewdb.Change c , com.google.gerrit.reviewdb.ChangeMessage msg ) { sendMergeFail ( c , msg , true , true ) ; }
public boolean equals ( java.lang.Object o ) { if ( o instanceof com.google.gerrit.server.patch.PatchListKey ) { com.google.gerrit.server.patch.PatchListKey k = ( ( com.google.gerrit.server.patch.PatchListKey ) ( o ) ) ; return ( ( ( java.util.Objects.equals ( oldId , k.oldId ) ) && ( java.util.Objects.equals ( parentNum , k.parentNum ) ) ) && ( java.util.Objects.equals ( newId , k.newId ) ) ) && ( ( whitespace ) == ( k.whitespace ) ) ; } return false ; }
public void onShowView ( ) { super . onShowView ( ) ; int rest = ( com.google.gerrit.client.Gerrit.getHeaderFooterHeight ( ) ) + 30 ; cm.setHeight ( ( ( com.google.gwt.user.client.Window.getClientHeight ( ) ) - rest ) ) ; cm.refresh ( ) ; cm.focus ( ) ; }
public void testPushForMasterWithMessage ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master/%m=my_test_message" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null ) ; com.google.gerrit.extensions.common.ChangeInfo ci = get ( r.getChangeId ( ) ) ; java.util.Collection < com.google.gerrit.extensions.common.ChangeMessageInfo > changeMessages = ci.messages ; com.google.common.truth.Truth.assertThat ( changeMessages ) . hasSize ( 1 ) ; for ( com.google.gerrit.extensions.common.ChangeMessageInfo cm : changeMessages ) { com.google.common.truth.Truth.assertThat ( cm.message ) . isEqualTo ( "Uploaded patch set 1.\nmy test message" ) ; } }
protected void command ( final com.google.gerrit.sshd.CommandName parent , final java.lang.Class < ? extends com.google.gerrit.sshd.BaseCommand > clazz ) { com.google.gerrit.sshd.CommandMetaData meta = ( ( com.google.gerrit.sshd.CommandMetaData ) ( clazz.getAnnotation ( com.google.gerrit.sshd.CommandMetaData.class ) ) ) ; if ( meta == null ) { throw new java.lang.IllegalStateException ( "no CommandMetaData annotation found" ) ; } bind ( com.google.gerrit.sshd.Commands.key ( parent , meta.name ( ) , meta.descr ( ) ) ) . to ( clazz ) ; }
public void emptyServletPath ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/foo/bar" , "" , "/c" ) ) ) . isEqualTo ( "/foo/bar" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/foo%2Fbar" , "" , "/c" ) ) ) . isEqualTo ( "/foo%2Fbar" ) ; }
private void setNavigationOnClickListener ( @ android.support.annotation.IdRes int id , final com.google.reviewit.app.Change change , final java.lang.String path , final java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > files ) { v ( id ) . setOnClickListener ( new android.view.View.OnClickListener ( ) { @ java.lang.Override public void onClick ( android.view.View v ) { removeDiffView ( ) ; createDiffView ( ) ; init ( path , change , files ) ; displayFile ( change , path , files.get ( path ) ) ; } } ) ; }
static com.google.gson.JsonArray newJsonArrayFromStrings ( java.util.Collection < java.lang.String > names ) { com.google.gson.JsonArray result = new com.google.gson.JsonArray ( ) ; java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( names ) ; java.util.Collections.sort ( list ) ; for ( java.lang.String name : list ) { result.add ( name ) ; } return result ; }
public void setUp ( ) throws java.lang.Exception { testRepo = new org.eclipse.jgit.junit.TestRepository ( ( ( org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ) ( repoManager.openRepository ( project ) ) ) ) ; tip = testRepo.getRevWalk ( ) . parseCommit ( testRepo.getRepository ( ) . getRef ( "HEAD" ) . getObjectId ( ) ) ; adminId = admin.getId ( ) ; checker = checkerProvider.get ( ) ; }
public void testGc ( ) throws java.lang.Exception { java.lang.String response = adminSshSession.exec ( ( ( ( ( "gerrit gc \"" + ( project.get ( ) ) ) + "\" \"" ) + ( project2.get ( ) ) ) + "\"" ) ) ; com.google.common.truth.Truth.assert_ ( ) . withMessage ( adminSshSession.getError ( ) ) . that ( adminSshSession.hasError ( ) ) . isFalse ( ) ; assertNoError ( response ) ; gcAssert.assertHasPackFile ( project , project2 ) ; gcAssert.assertHasNoPackFile ( allProjects , project3 ) ; }
public static java.util.Set < java.lang.String > getEmails ( java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids ) { java.util.Set < java.lang.String > emails = new java.util.HashSet < > ( ) ; for ( com.google.gerrit.reviewdb.client.AccountExternalId id : ids ) { if ( id.isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_MAILTO ) ) { emails.add ( id.getSchemeRest ( ) ) ; } } return emails ; }
private void updateGerritConfig ( com.google.gerrit.server.config.SitePaths sitePaths , java.lang.String newSecureStore ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.pgm.SwitchSecureStore.log.info ( "Set gerrit.secureStoreClass property of gerrit.config to {}" , newSecureStore ) ; org.eclipse.jgit.storage.file.FileBasedConfig config = new org.eclipse.jgit.storage.file.FileBasedConfig ( sitePaths.gerrit_config , org.eclipse.jgit.util.FS.DETECTED ) ; config.load ( ) ; config.setString ( "gerrit" , null , "secureStoreClass" , newSecureStore ) ; config.save ( ) ; }
protected java.util.List < com.google.gerrit.reviewdb.client.RobotComment > parse ( byte [ ] raw , int offset ) throws java.io.IOException { try ( java.io.InputStream is = new java.io.ByteArrayInputStream ( raw , offset , ( ( raw.length ) - offset ) ) ; java.io.Reader r = new java.io.InputStreamReader ( is ) ) { return noteUtil.getGson ( ) . fromJson ( r , com.google.gerrit.server.notedb.RobotCommentsRevisionNoteData.class ) . comments ; } }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.BatchRefUpdate batchRefUpdate ) { for ( org.eclipse.jgit.transport.ReceiveCommand cmd : batchRefUpdate.getCommands ( ) ) { if ( ( cmd.getResult ( ) ) == ( ReceiveCommand.Result.OK ) ) { fire ( project , cmd ) ; } } }
public static void prev ( java.lang.String query , int limit , java.lang.String sortkey , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeList > callback ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeList.newQuery ( query ) ; if ( limit > 0 ) { call.addParameter ( "n" , limit ) ; } com.google.gerrit.client.changes.ChangeList.addOptions ( call , java.util.EnumSet.of ( ListChangesOption.LABELS ) ) ; if ( ! ( PagedSingleListScreen.MIN_SORTKEY.equals ( sortkey ) ) ) { call.addParameter ( "P" , sortkey ) ; } call.get ( callback ) ; }
protected void configure ( ) { bind ( com.codahale.metrics.MetricRegistry.class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.class ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.metrics.MetricMaker.class ) . to ( com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.class ) ; com.google.gerrit.extensions.registration.DynamicMap.mapOf ( binder ( ) , com.google.gerrit.metrics.dropwizard.MetricResource.METRIC_KIND ) ; child ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "metrics" ) . to ( com.google.gerrit.metrics.dropwizard.MetricsCollection.class ) ; get ( com.google.gerrit.metrics.dropwizard.MetricResource.METRIC_KIND ) . to ( com.google.gerrit.metrics.dropwizard.GetMetric.class ) ; }
public boolean isLoggedIn ( ) { boolean loggedIn = ( ( token ) != null ) && ( ( hub ) != null ) ; if ( loggedIn && ( ( myself ) == null ) ) { try { myself = hub.getMyself ( ) ; } catch ( java.lang.Throwable e ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.error ( "Connection to GitHub broken: logging out" , e ) ; logout ( ) ; loggedIn = false ; } } return loggedIn ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { setEdit ( false ) ; getCm ( ) . focus ( ) ; }
private void setListIdHeader ( ) { final java.lang.StringBuilder listid = new java.lang.StringBuilder ( ) ; listid.append ( "gerrit-" ) ; listid.append ( projectName.replace ( '/' , '-' ) ) ; listid.append ( "@" ) ; listid.append ( getGerritHost ( ) ) ; final java.lang.String listidStr = listid.toString ( ) ; setHeader ( "Mailing-List" , ( "list " + listidStr ) ) ; setHeader ( "List-Id" , ( ( "<" + ( listidStr.replace ( '@' , '.' ) ) ) + ">" ) ) ; if ( ( getSettingsUrl ( ) ) != null ) { setHeader ( "List-Unsubscribe" , ( ( "<" + ( getSettingsUrl ( ) ) ) + ">" ) ) ; } }
protected void bccWatchesNotifyAllComments ( ) { try { for ( final com.google.gerrit.reviewdb.AccountProjectWatch w : getWatches ( ) ) { if ( w.isNotify ( NotifyType.ALL_COMMENTS ) ) { add ( RecipientType.BCC , w.getAccountId ( ) ) ; } } } catch ( com.google.gwtorm.client.OrmException err ) { } }
private void pushTagDeletion ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagRef , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { org.eclipse.jgit.transport.PushResult r = com.google.gerrit.acceptance.GitUtil.deleteRef ( testRepo , tagRef ) ; org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = r.getRemoteUpdate ( tagRef ) ; com.google.common.truth.Truth.assertThat ( refUpdate.getStatus ( ) ) . named ( tagType.name ( ) ) . isEqualTo ( expectedStatus ) ; }
public com.google.gerrit.solr.SolrChangeIndex getChangeIndex ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.IndexCollection indexes , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.solr.SolrChangeIndex ( cfg , fillArgs , sitePaths , indexes , com.google.gerrit.server.index.ChangeSchemas.getLatest ( ) , base ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > apply ( java.util.List < ? > input ) throws java.lang.Exception { com.google.gerrit.server.git.MultiProgressMonitor.Task t = mpm.beginSubTask ( "update refs" , MultiProgressMonitor.UNKNOWN ) ; org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { bru.execute ( walk , t ) ; mpm.end ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; } finally { walk.release ( ) ; } }
private void replace ( com.google.gerrit.server.git.ProjectConfig config , java.util.Set < java.lang.String > toDelete , com.google.gerrit.common.data.AccessSection section ) throws com.google.gerrit.common.errors.NoSuchGroupException { for ( com.google.gerrit.common.data.Permission permission : section.getPermissions ( ) ) { for ( com.google.gerrit.common.data.PermissionRule rule : permission.getRules ( ) ) { lookupGroup ( rule ) ; } } config.replace ( section ) ; toDelete.remove ( section.getName ( ) ) ; }
public com.google.gerrit.server.change.ConsistencyChecker.Result check ( com.google.gerrit.reviewdb.client.Change c ) { return check ( c , null ) ; }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get ( id ) ; if ( c == null ) { c = com.google.gerrit.server.git.BatchUpdate.unwrap ( db ) . changes ( ) . get ( id ) ; } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew ( c ) ; com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext ( changeControlFactory.controlFor ( notes , user ) , new com.google.gerrit.server.git.BatchUpdateReviewDb ( db ) ) ; return ctx ; }
public boolean allRefsAreVisible ( ) { return allRefsAreVisible ( java.util.Collections.< java.lang.String > emptySet ( ) ) ; }
public synchronized void init ( javax.servlet.ServletConfig config ) throws javax.servlet.ServletException { super . init ( config ) ; java.lang.String path = config.getServletContext ( ) . getContextPath ( ) ; base = ( com.google.common.base.Strings.nullToEmpty ( path ) ) + "/plugins/" ; for ( com.google.gerrit.server.plugins.Plugin plugin : pending ) { install ( plugin ) ; } pending = null ; }
public com.googlecode.prolog_cafe.lang.NumberTerm divide ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( ( t.doubleValue ( ) ) == 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "zero_divisor" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( ( ( this . doubleValue ( ) ) / ( t.doubleValue ( ) ) ) ) ; }
public boolean isEnabled ( com.google.gerrit.server.change.RevisionResource resource ) { return ( ( resource.getChange ( ) . getStatus ( ) . isOpen ( ) ) && ( resource.getControl ( ) . canRebase ( ) ) ) && ( rebaseChange.get ( ) . canRebase ( resource ) ) ; }
protected void configure ( ) { if ( com.google.gerrit.server.util.BouncyCastleUtil.havePGP ( ) ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.server.git.ReceivePackInitializer.class ) . to ( com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class ) ; } else { com.google.gerrit.server.git.gpg.SignedPushModule.log.info ( ( "BouncyCastle PGP not installed; signed push verification is" + " disabled" ) ) ; } }
public static boolean isNoteDbTestEnabled ( ) { final java.lang.String [ ] RUN_FLAGS = new java.lang.String [ ] { "yes" , "y" , "true" } ; java.lang.String value = java.lang.System.getenv ( "GERRIT_ENABLE_NOTEDB" ) ; return ( value != null ) && ( java.util.Arrays.asList ( RUN_FLAGS ) . contains ( value.toLowerCase ( ) ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > reindexIfStale ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { java.util.concurrent.Callable < java.lang.Boolean > task = ( ) -> { if ( stalenessChecker.isStale ( uuid ) ) { index ( uuid ) ; return true ; } return false ; } ; return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.nonCancellationPropagating ( batchExecutor.submit ( task ) ) , IndexUtils.MAPPER ) ; }
public final boolean hasField ( com.google.gerrit.server.index.FieldDef < T , ? > field ) { return ( fields.get ( field.getName ( ) ) ) == field ; }
private java.util.concurrent.Callable < com.google.gerrit.httpd.raw.ResourceServlet.Resource > newLoader ( final java.lang.String name , final java.nio.file.Path p ) { return new java.util.concurrent.Callable < com.google.gerrit.httpd.raw.ResourceServlet.Resource > ( ) { @ java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( java.nio.file.Files.getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( name ) , java.nio.file.Files.readAllBytes ( p ) ) ; } } ; }
public void missingRepo ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "otherproject" ) , userId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.testutil.TestChanges.newPatchSet ( c.currentPatchSetId ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) , userId ) ; db.patchSets ( ) . insert ( java.util.Collections.singleton ( ps ) ) ; assertProblems ( c , "Destination repository not found: otherproject" ) ; }
private void group ( java.lang.String name ) throws java.io.IOException { adminSession.put ( ( "/groups/" + name ) , new java.lang.Object ( ) ) . consume ( ) ; }
java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > getForPatchSet ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { return getForPatchSet ( db , ctl , db.patchSets ( ) . get ( psId ) ) ; }
private void checkMergeResult ( com.google.gerrit.extensions.common.ChangeInfo change ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.BranchInfo branch = gApi.projects ( ) . name ( change.project ) . branch ( change.branch ) . get ( ) ; com.google.gerrit.server.events.ChangeMergedEvent event = eventRecorder.getOneChangeMerged ( change.project , change.branch , java.lang.Integer.toString ( change._number ) ) ; com.google.common.truth.Truth.assertThat ( event.newRev ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( branch.revision ) . isEqualTo ( event.newRev ) ; }
public static java.lang.String toChange ( com.google.gerrit.reviewdb.client.Change.Id c , java.lang.String b , java.lang.String p ) { java.lang.String u = ( "/c/" + c ) + "/" ; if ( b != null ) { u += b + ".." ; } u += p ; return u ; }
private boolean visibleEdit ( java.lang.String name ) { if ( ( ( userEditPrefix ) != null ) && ( name.startsWith ( userEditPrefix ) ) ) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromEditRefPart ( name ) ; if ( id != null ) { return visible ( id ) ; } } return false ; }
private com.google.inject.Injector createSshInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( new com.google.gerrit.sshd.SshModule ( ) ) ; modules.add ( new com.google.gerrit.sshd.commands.MasterCommandModule ( ) ) ; modules.add ( cfgInjector.getInstance ( com.google.gerrit.sshd.commands.MasterPluginsModule.class ) ) ; return sysInjector.createChildInjector ( modules ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.rpc.CallbackGroup cbs = new com.google.gerrit.client.rpc.CallbackGroup ( ) ; Util.DETAIL_SVC.patchSetPublishDetail ( patchSetId , cbs.addGwtjsonrpc ( new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.common.data.PatchSetPublishDetail > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.common.data.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; display ( result ) ; } @ java.lang.Override protected void postDisplay ( ) { message.setFocus ( true ) ; } } ) ) ; }
public void fire ( com.google.gerrit.extensions.common.ChangeInfo change , com.google.gerrit.extensions.common.RevisionInfo revision , com.google.gerrit.extensions.common.AccountInfo reviewer , com.google.gerrit.extensions.common.AccountInfo adder , java.sql.Timestamp when ) { if ( ! ( listeners.iterator ( ) . hasNext ( ) ) ) { return ; } com.google.gerrit.server.extensions.events.ReviewerAdded.Event event = new com.google.gerrit.server.extensions.events.ReviewerAdded.Event ( change , revision , reviewer , adder , when ) ; for ( com.google.gerrit.extensions.events.ReviewerAddedListener l : listeners ) { try { l.onReviewerAdded ( event ) ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.warn ( "Error in event listener, e" ) ; } } }
public static synchronized void setClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert ( clockStep , clockStepUnit ) ; org.joda.time.DateTimeUtils.setCurrentMillisProvider ( new org.joda.time.DateTimeUtils.MillisProvider ( ) { @ java.lang.Override public long getMillis ( ) { return com.google.gerrit.testutil.TestTimeUtil.clockMs.getAndAdd ( com.google.gerrit.testutil.TestTimeUtil.clockStepMs ) ; } } ) ; }
public final java.sql.Timestamp updated ( ) { java.lang.String updatedRaw = updatedRaw ( ) ; return updatedRaw == null ? null : com.google.gwtjsonrpc.client.impl.ser.JavaSqlTimestamp_JsonSerializer.parseTimestamp ( updatedRaw ( ) ) ; }
public int run ( ) throws java.lang.Exception { final com.google.inject.Injector injector = com.google.inject.Guice.createInjector ( com.google.inject.Stage.PRODUCTION , new com.google.gerrit.server.config.GerritServerModule ( ) , new com.google.gerrit.server.ssh.SshDaemonModule ( ) ) ; com.google.gerrit.client.rpc.Common.setGerritConfig ( injector.getInstance ( com.google.gerrit.client.data.GerritConfig.class ) ) ; injector.getInstance ( com.google.gerrit.server.ssh.GerritSshDaemon.class ) . start ( ) ; return never ( ) ; }
public void testOwnerProject ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.ProjectControl uBlah = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl uAdmin = util.user ( local , com.google.gerrit.server.project.Util.DEVS , com.google.gerrit.server.project.Util.ADMIN ) ; org.junit.Assert.assertFalse ( "not owner" , uBlah.isOwner ( ) ) ; org.junit.Assert.assertTrue ( "is owner" , uAdmin.isOwner ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.account.AccountIndexRewriter.class ) ; bind ( com.google.gerrit.server.index.account.AccountIndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.account.AccountIndexCollection.class ) ; factory ( AccountIndexerImpl.Factory.class ) ; bind ( com.google.gerrit.server.index.change.ChangeIndexRewriter.class ) ; bind ( com.google.gerrit.server.index.change.ChangeIndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.change.ChangeIndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
void flush ( ) throws java.io.IOException { flushToFinalInserter ( ) ; finalIns.flush ( ) ; tempIns.clear ( ) ; }
public java.lang.String get ( long num ) throws java.io.IOException { if ( ( ( getTail ( ) ) <= num ) && ( num <= ( getHead ( ) ) ) ) { try { return com.googlesource.gerrit.plugins.events.fsstore.Fs.readFile ( paths.event ( num ) ) ; } catch ( java.nio.file.NoSuchFileException e ) { } } return null ; }
private com.google.gerrit.client.diff.DraftBox addDraftBox ( com.google.gerrit.client.changes.CommentInfo info , boolean doSave ) { net.codemirror.lib.CodeMirror cm = getCmFromSide ( info.side ( ) ) ; com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox ( this , cm , revision , info , commentLinkProcessor , true , doSave ) ; addCommentBox ( info , box ) ; if ( ! doSave ) { box.setEdit ( true ) ; } net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle ( ( ( info.line ( ) ) - 1 ) ) ; lineActiveBoxMap.put ( handle , box ) ; return box ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) && ( change.currentPatchSetId ( ) . equals ( patchSetId ) ) ) { change.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } else { return null ; } }
void display ( final java.util.Map < com.google.gerrit.reviewdb.AccountGroup.Id , com.google.gerrit.reviewdb.AccountGroup > groups , final java.util.List < com.google.gerrit.common.data.InheritedRefRight > refRights ) { while ( 1 < ( table.getRowCount ( ) ) ) table.removeRow ( ( ( table.getRowCount ( ) ) - 1 ) ) ; for ( final com.google.gerrit.common.data.InheritedRefRight r : refRights ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; applyDataRowStyle ( row ) ; populate ( row , groups , r ) ; } }
public static java.lang.String sortKey ( long lastUpdated , int id ) { final long lastUpdatedOn = ( lastUpdated / 1000L ) - ( com.google.gerrit.server.ChangeUtil.SORT_KEY_EPOCH ) ; final java.lang.StringBuilder r = new java.lang.StringBuilder ( 16 ) ; r.setLength ( 16 ) ; com.google.gerrit.server.ChangeUtil.formatHexInt ( r , 0 , ( ( int ) ( lastUpdatedOn / 60 ) ) ) ; com.google.gerrit.server.ChangeUtil.formatHexInt ( r , 8 , id ) ; return r.toString ( ) ; }
static java.util.List < java.util.Map < java.lang.String , java.lang.Object > > getTags ( javax.servlet.http.HttpServletRequest req , com.google.gitiles.TimeCache timeCache , org.eclipse.jgit.revwalk.RevWalk walk , int limit ) throws java.io.IOException { return com.google.gitiles.RefServlet.getRefs ( org.eclipse.jgit.http.server.ServletUtils.getRepository ( req ) . getRefDatabase ( ) , com.google.gitiles.ViewFilter.getView ( req ) , Constants.R_TAGS , com.google.gitiles.RefServlet.tagComparator ( timeCache , walk ) , null , limit ) ; }
public boolean equals ( java.lang.Object other ) { if ( other instanceof com.google.gerrit.httpd.plugins.ResourceKey ) { com.google.gerrit.httpd.plugins.ResourceKey rk = ( ( com.google.gerrit.httpd.plugins.ResourceKey ) ( other ) ) ; return ( ( plugin ) == ( rk.plugin ) ) && ( resource.equals ( rk.resource ) ) ; } return false ; }
protected void configure ( ) { install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . implement ( com.google.gerrit.server.index.change.ChangeIndex.class , com.google.gerrit.elasticsearch.ElasticChangeIndex.class ) . build ( ChangeIndex.Factory.class ) ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . implement ( com.google.gerrit.server.index.account.AccountIndex.class , com.google.gerrit.lucene.LuceneAccountIndex.class ) . build ( AccountIndex.Factory.class ) ) ; install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; install ( new com.google.gerrit.index.SingleVersionModule ( singleVersions ) ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.extensions.restapi.TopLevelResource > list ( ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get ( ) ; if ( user instanceof com.google.gerrit.server.AnonymousUser ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "Authentication required" ) ; } else if ( ! ( user instanceof com.google.gerrit.server.IdentifiedUser ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } return list.get ( ) ; }
java.util.Set < java.lang.String > getTeamsForUser ( java.lang.String organizationName , java.lang.String username ) { try { return new com.google.common.collect.ImmutableSet.Builder < java.lang.String > ( ) . addAll ( orgTeamsByUsername.get ( username ) . get ( organizationName ) ) . build ( ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.log.warn ( ( ( ( ( "Cannot get Teams membership for organisation '" + organizationName ) + "' and user '" ) + username ) + "'" ) , e ) ; return java.util.Collections.emptySet ( ) ; } }
private com.google.gerrit.reviewdb.client.Change loadChangeFromDb ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb ( db ) . changes ( ) . get ( changeId ) ; com.google.common.base.Preconditions.checkArgument ( ( project != null ) , "project is required" ) ; com.google.common.base.Preconditions.checkNotNull ( change , "change %s not found in ReviewDb" , changeId ) ; com.google.common.base.Preconditions.checkArgument ( change.getProject ( ) . equals ( project ) , ( "passed project %s when creating ChangeNotes for %s, but actual" + " project is %s" ) , project , changeId , change.getProject ( ) ) ; return change ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( config , headless , slave , polyGerritDev ) ) ; if ( test ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName.class ) . toInstance ( com.google.gerrit.server.securestore.DefaultSecureStore.class . getName ( ) ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; } }
private java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > suggestReviewers ( com.google.gerrit.acceptance.RestSession session , java.lang.String changeId , java.lang.String query , int n ) throws java.io.IOException { return newGson ( ) . fromJson ( session.get ( ( ( ( ( ( "/changes/" + changeId ) + "/suggest_reviewers?q=" ) + query ) + "&n=" ) + n ) ) . getReader ( ) , new com.google.gson.reflect.TypeToken < java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > > ( ) { } . getType ( ) ) ; }
private static com.google.gerrit.server.IdentifiedUser checkUser ( com.google.gerrit.server.project.ChangeControl ctl ) { com.google.common.base.Preconditions.checkArgument ( ctl.getCurrentUser ( ) . isIdentifiedUser ( ) , "only IdentifiedUser may create patch set on change %s" , ctl.getChange ( ) . getId ( ) ) ; return ( ( com.google.gerrit.server.IdentifiedUser ) ( ctl.getCurrentUser ( ) ) ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { if ( ( send ) == sender ) { onSend ( ) ; } else if ( ( cancel ) == sender ) { com.google.gerrit.client.Gerrit.uncache ( this ) ; goChange ( ) ; } }
public void testFindAfterDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( 0 , mapper.lineOnOther ( Side.PARENT , 10 ) ) ; }
public void load ( final com.google.gerrit.client.reviewdb.Change c , final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { change = c ; final com.google.gerrit.client.reviewdb.PatchSet.Id ps = change.currentPatchSetId ( ) ; if ( ps != null ) { currentPatchSet = db.patchSets ( ) . get ( ps ) ; currentPatchSetInfo = db.patchSetInfo ( ) . get ( ps ) ; } }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { if ( ( id == ( reloadVersionId ) ) && ( isAttached ( ) ) ) { diff = diffInfo ; operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { skipManager.removeAll ( ) ; chunkManager.reset ( ) ; diffTable.overview.clearDiffGutters ( ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; render ( diff ) ; skipManager.render ( prefs.context ( ) , diff ) ; } } ) ; } }
void onSave ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.changes.ChangeFileApi.putContentOrMessage ( revision , path , cm.getValue ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } } ) ; }
public com.google.gerrit.acceptance.RestResponse post ( java.lang.String endPoint , java.lang.Object content ) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost ( ( "http://localhost:8080/a" + endPoint ) ) ; if ( content != null ) { post.addHeader ( new org.apache.http.message.BasicHeader ( "Content-Type" , "application/json" ) ) ; post.setEntity ( new org.apache.http.entity.StringEntity ( new com.google.gson.Gson ( ) . toJson ( content ) , com.google.common.base.Charsets.UTF_8.name ( ) ) ) ; } return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( post ) ) ; }
public void pushPrivatesWithDisablePrivateChangesFalse ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result result = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) . to ( "refs/for/master%private" ) ; com.google.common.truth.Truth.assertThat ( result.getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( true ) ; }
private void allowSubmitOnBehalfOf ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; com.google.gerrit.server.project.Util.allow ( cfg , Permission.SUBMIT_AS , com.google.gerrit.server.group.SystemGroupBackend.getGroup ( com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) . getUUID ( ) , "refs/heads/*" ) ; saveProjectConfig ( project , cfg ) ; }
public boolean canRestore ( ) { return ( canAbandon ( ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
void setReviewed ( boolean r ) { reviewed.setValue ( r , true ) ; }
public void copyMaxScoreOnRework ( ) throws java.lang.Exception { codeReview.setCopyMaxScore ( true ) ; saveLabelConfig ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput.approve ( ) ) ; assertApproval ( r , 2 ) ; r = ammendChange ( r.getChangeId ( ) ) ; assertApproval ( r , 2 ) ; }
public void validatePreMerge ( com.google.gerrit.server.git.CodeReviewCommit commit , com.google.gerrit.server.project.ProjectState destProject , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch ) throws com.google.gerrit.server.git.validators.MergeValidationException { java.util.List < com.google.gerrit.server.git.validators.MergeValidationListener > validators = com.google.common.collect.Lists.newLinkedList ( ) ; validators.add ( new com.google.gerrit.server.git.validators.MergeValidators.PluginMergeValidationListener ( mergeValidationListeners ) ) ; for ( com.google.gerrit.server.git.validators.MergeValidationListener validator : validators ) { validator.onPreMerge ( commit , destProject , destBranch ) ; } }
public java.util.Set < com.google.gerrit.reviewdb.AccountGroup.Id > getEffectiveGroups ( ) { if ( ( effectiveGroups ) == null ) { if ( authConfig.isIdentityTrustable ( state ( ) . getExternalIds ( ) ) ) { effectiveGroups = realm.groups ( state ( ) ) ; } else { effectiveGroups = authConfig.getRegisteredGroups ( ) ; } } return effectiveGroups ; }
public void mute ( boolean mute ) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ( mute ) { this . mute.apply ( change , new com.google.gerrit.server.change.Mute.Input ( ) ) ; } else { unmute.apply ( change , new com.google.gerrit.server.change.Unmute.Input ( ) ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot mute change" , e ) ; } }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) { permissionBackend.user ( self ) . check ( GlobalPermission.MODIFY_ACCOUNT ) ; } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser ( ) . getAccountId ( ) ; return accountCache.get ( id ) . getAccount ( ) . getGeneralPreferencesInfo ( ) ; }
private org.apache.lucene.search.Query intQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { int value ; try { value = java.lang.Integer.valueOf ( p.getValue ( ) ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new com.google.gerrit.server.query.QueryParseException ( ( "not an integer: " + ( p.getValue ( ) ) ) ) ; } return new org.apache.lucene.search.TermQuery ( com.google.gerrit.lucene.QueryBuilder.intTerm ( p.getField ( ) . getName ( ) , value ) ) ; }
private void readObject ( java.io.ObjectInputStream in ) throws java.io.IOException { commit = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; into = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; char t = in.readChar ( ) ; submitType = com.google.gerrit.server.change.MergeabilityCacheImpl.SUBMIT_TYPES.inverse ( ) . get ( t ) ; if ( ( submitType ) == null ) { throw new java.io.IOException ( ( "Invalid submit type code: " + t ) ) ; } mergeStrategy = com.google.gerrit.server.ioutil.BasicSerialization.readString ( in ) ; }
public void testUpsertTwoBothExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; }
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator ( ) { com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest ( project , new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) , 1 ) ; cd.setChange ( com.google.gerrit.testing.TestChanges.newChange ( project , admin.id ) ) ; return evaluatorFactory.create ( cd ) ; }
private static com.google.gerrit.common.data.PermissionRule grant ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.common.data.PermissionRule rule , java.lang.String ref , boolean exclusive ) { com.google.gerrit.common.data.Permission permission = project.getAccessSection ( ref , true ) . getPermission ( permissionName , true ) ; if ( exclusive ) { permission.setExclusiveGroup ( exclusive ) ; } permission.add ( rule ) ; return rule ; }
public com.google.gerrit.server.update.BatchUpdate create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.sql.Timestamp when ) { return reviewDbBatchUpdateFactory.create ( db , project , user , when ) ; }
public boolean isActive ( java.lang.String username ) throws com.google.gerrit.server.account.AccountException , javax.naming.NamingException , javax.security.auth.login.LoginException { try { javax.naming.directory.DirContext ctx = helper.open ( ) ; com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema ( ctx ) ; helper.findAccount ( schema , ctx , username , false ) ; } catch ( com.google.gerrit.server.auth.NoSuchUserException e ) { return false ; } return true ; }
void setSkipBars ( java.util.Set < com.google.gerrit.client.diff.SkipBar > bars ) { skipBars = bars ; }
public static java.util.Map < java.lang.String , java.lang.String > toSoyData ( org.eclipse.jgit.lib.PersonIdent ident , org.eclipse.jgit.util.GitDateFormatter df ) { return com.google.common.collect.ImmutableMap.of ( "name" , ident.getName ( ) , "email" , ident.getEmailAddress ( ) , "time" , df.formatDate ( ident ) , "relativeTime" , org.eclipse.jgit.util.RelativeDateFormatter.format ( ident.getWhen ( ) ) ) ; }
private void initContext ( com.google.gwt.user.client.ui.ListBox context ) { for ( final short v : com.google.gerrit.reviewdb.client.AccountDiffPreference.CONTEXT_CHOICES ) { final java.lang.String label ; if ( v == ( com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT ) ) { label = Util.C.contextWholeFile ( ) ; } else { label = Util.M.lines ( v ) ; } context.addItem ( label , java.lang.String.valueOf ( v ) ) ; } }
public void currentRevision ( ) throws java.lang.Exception { com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId , com.google.gerrit.common.changes.ListChangesOption.CURRENT_REVISION ) ; org.junit.Assert.assertEquals ( commitId ( 2 ) , c.current_revision ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableSet.of ( commitId ( 2 ) ) , c.revisions.keySet ( ) ) ; org.junit.Assert.assertEquals ( 3 , c.revisions.get ( commitId ( 2 ) ) . _number ) ; }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > list ( ) { java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > names = new java.util.TreeSet < com.google.gerrit.reviewdb.client.Project.NameKey > ( ) ; scanProjects ( basePath , "" , names ) ; return java.util.Collections.unmodifiableSortedSet ( names ) ; }
public void newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=OWNER" , other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "newpatchset" , sc ) . to ( sc.owner ) . to ( sc.reviewer ) . cc ( sc.ccer ) . notTo ( sc.starrer , other ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
public void setParent_Forbidden ( ) throws com.jcraft.jsch.JSchException , java.io.IOException { java.lang.String parent = "parent" ; com.google.gerrit.acceptance.GitUtil.createProject ( sshSession , parent , null , true ) ; com.google.gerrit.acceptance.RestResponse r = userSession.put ( ( ( "/projects/" + ( project ) ) + "/parent" ) , new com.google.gerrit.acceptance.rest.project.SetParentIT.ParentInput ( parent ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; r.consume ( ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { org.apache.lucene.index.Term id = idTerm ( cd ) ; if ( readOnly ) { return ; } if ( cd.getChange ( ) . getStatus ( ) . isOpen ( ) ) { openIndex.delete ( id ) ; } else { closedIndex.delete ( id ) ; } }
private < T > org.elasticsearch.index.query.BoolQueryBuilder and ( com.google.gerrit.server.query.Predicate < T > p ) throws com.google.gerrit.index.query.QueryParseException { try { org.elasticsearch.index.query.BoolQueryBuilder b = org.elasticsearch.index.query.QueryBuilders.boolQuery ( ) ; for ( com.google.gerrit.server.query.Predicate < T > c : p.getChildren ( ) ) { b.must ( toQueryBuilder ( c ) ) ; } return b ; } catch ( org.apache.lucene.search.BooleanQuery e ) { throw new com.google.gerrit.index.query.QueryParseException ( ( "cannot create query for index: " + p ) , e ) ; } }
protected void configureServlets ( ) { java.lang.Class < ? extends javax.servlet.Filter > authFilter ; if ( authConfig.isTrustContainerAuth ( ) ) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class ; } else if ( authConfig.isGitBasichAuth ( ) ) { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class ; } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class ; } java.lang.String git = GitOverHttpServlet.URL_REGEX ; filterRegex ( git ) . through ( authFilter ) ; serveRegex ( git ) . with ( com.google.gerrit.httpd.GitOverHttpServlet.class ) ; filter ( "/a/*" ) . through ( authFilter ) ; }
public void listProjects ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey someProject = new com.google.gerrit.reviewdb.client.Project.NameKey ( "some-project" ) ; com.google.gerrit.acceptance.GitUtil.createProject ( sshSession , someProject.get ( ) ) ; com.google.gerrit.acceptance.RestResponse r = GET ( "/projects/" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ProjectInfo > result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap ( r ) ; com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects ( java.util.Arrays.asList ( allUsers , someProject , project ) , result.values ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { site = new com.google.gerrit.server.config.SitePaths ( com.google.gerrit.testutil.TempFileUtil.createTempDirectory ( ) . toPath ( ) ) ; site.resolve ( "git" ) . toFile ( ) . mkdir ( ) ; cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setString ( "gerrit" , null , "basePath" , "git" ) ; repoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; addPanel.setVisible ( false ) ; com.google.gerrit.client.account.AccountApi.canCreateRefs ( "self" , getProjectKey ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { addPanel.setVisible ( true ) ; } } ) ; refreshBranches ( ) ; savedPanel = BRANCH ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . screen ( "" , new com.googlesource.gerrit.plugins.cookbook.client.IndexScreen.Factory ( ) ) ; com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.PROFILE_SCREEN_BOTTOM , new com.googlesource.gerrit.plugins.cookbook.client.CookBookProfileExtension.Factory ( ) ) ; com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.cookbook.client.CookBookChangeScreenExtension.Factory ( ) ) ; }
public void getChildProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; com.google.gerrit.reviewdb.client.Project.NameKey child = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; createProject ( child.get ( ) ) ; sshSession.close ( ) ; com.google.gerrit.extensions.common.ProjectInfo childInfo = gApi.projects ( ) . name ( allProjects.get ( ) ) . child ( child.get ( ) ) . get ( ) ; com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo ( projectCache.get ( child ) . getProject ( ) , childInfo ) ; }
private static synchronized void scheduleImp ( final com.google.gerrit.client.reviewdb.Project.NameKey project , final java.lang.String ref , final com.google.gerrit.git.PushQueue.ReplicationConfig config , final org.spearce.jgit.transport.URIish uri ) { com.google.gerrit.git.PushOp e = com.google.gerrit.git.PushQueue.pending.get ( uri ) ; if ( e == null ) { e = new com.google.gerrit.git.PushOp ( project.get ( ) , config.remote , uri ) ; com.google.gerrit.git.WorkQueue.schedule ( e , config.delay , java.util.concurrent.TimeUnit.SECONDS ) ; com.google.gerrit.git.PushQueue.pending.put ( uri , e ) ; } e.addRef ( ref ) ; }
private void assertNoIncludes ( java.lang.String group ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup g = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( group ) ) ; java.util.Iterator < com.google.gerrit.reviewdb.client.AccountGroupById > it = db.accountGroupById ( ) . byGroup ( g.getId ( ) ) . iterator ( ) ; com.google.common.truth.Truth.assertThat ( it.hasNext ( ) ) . isFalse ( ) ; }
void onSave ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.changes.ChangeFileApi.putContentOrMessage ( revision , path , cm.getValue ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } } ) ; }
public void onSuccess ( com.google.gerrit.common.data.com.google.gerrit.client.changes.ChangeInfo result ) { changeInfo = result ; display ( event.getValue ( ) ) ; }
private < K , V > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > disk ( final com.google.inject.Key < com.google.gerrit.server.cache.Cache < K , V > > key ) { final boolean disk = true ; final com.google.gerrit.server.cache.CacheProvider < K , V > b = new com.google.gerrit.server.cache.CacheProvider < K , V > ( disk , this ) ; bind ( key ) . toProvider ( b ) . in ( Scopes.SINGLETON ) ; return b ; }
public void onSuccess ( com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploadScreen.projectBox.setValue ( info.getDefaultProject ( ) ) ; }
public void byPathRegex ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( "repo" ) ; org.eclipse.jgit.revwalk.RevCommit commit = repo.parseBody ( repo.commit ( ) . message ( "one" ) . add ( "dir/file1" , "contents1" ) . add ( "dir/file2" , "contents2" ) . create ( ) ) ; com.google.gerrit.reviewdb.client.Change change = insert ( newChange ( repo , commit , null , null , null ) ) ; assertQuery ( "path:.*file.*" ) ; assertQuery ( "path:^dir.file.*" , change ) ; }
public static com.google.gerrit.gpg.testutil.TestKey keyI ( ) throws java.lang.Exception { return new com.google.gerrit.gpg.testutil.TestKey ( ( "-----BEGIN PGP PUBLIC KEY BLOCK-----\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "Version: GnuPG v1\n" + "\n" ) + "mQENBEx+aTEBCAC6dFperkew4ZowIfEyAjScjPBggcbw5XUXxLCF0nBRjWH+HvuI\n" ) + "CGwznRyeuTiy5yyB9/CcvTLTkEs8qIyJUJoikm7QpaVVL6imVq1HD1xcOJpV1FV1\n" ) + "eFu562xCRDUqD6KQf54N04V9TMDyubhPkQYbx1H2gq+uBEo9d1w6AsSMgaUn3xH/\n" ) + "xYe+INxcP6jFT2OKc36x+8ipP6pc8Hba1X90JwadOcJlwEyJfJKs7hYHTaYn+I6+\n" ) + "4w0Y//WebhT4ocsYIiOYrENQUcic+vL3fkwwJCloyDBCGxr7w7Gn4Pe3peTCl4Sp\n" ) + "vIIoYnHPW4h3Nyh8qAlBNDw7dCPS9LP7wRdNABEBAAG0HlRlc3R1c2VyIEkgPHRl\n" ) + "c3RpQGV4YW1wbGUuY29tPokBOAQTAQIAIgUCTH5pMQIbAwYLCQgHAwIGFQgCCQoL\n" ) + "BBYCAwECHgECF4AACgkQ0CLaOl6a7dAjNQf/fLmGeKgaesawP53UeioQ8hgDEFKP\n" ) + "BddNQP248NpReZ1rg3h8Q21PQJVKrtDYn94WJi5NTqUtk9rtx9SiqKaEc3wzIpLc\n" ) + "nIYrgGLWot5nq+5V1nY9t9QAiJJDrmm2/3tX+jTWW6CpuLih7IsD+gJmpZkY6PfM\n" ) + "T+teKEeh5E1XBbu10fwDwMJta+043/TiljInjER1f/b41EnSjI6YXFnxnyiLeDgD\n" ) + "A1QIIzB/W2ccGqphzJriDETDJhKFZIeqvjylZofgCLyMRSyZtsu+b4pfBK3hMpu5\n" ) + "aaYylaM1BWOpAiqUmGUKqxN/o9EGx4wvsMxK6xgiZe5UdQPaoDcFCsEMg4kBIAQQ\n" ) + "AQIACgUCTH5xrAMFAXgACgkQoTk8RsLmoZiu2Af8D4PnyWkosYYkcmU4T7CvIHGW\n" ) + "Qnx4KsnYWaAqYrYrorL6R+f8SZ5caGwj05UOvHnqx/Ij0a1Zv4MpEuzB0se1XkyQ\n" ) + "eCLdAIKVodfiepsCHyqW6/mc9LV2qKS1HF5x5LwDkI1atOuPt/O14fch4E0beTbl\n" ) + "FXzGo7YdpH8RunV8l+i3FxxTcUtUkij3Ro4EMwVF/6YG8gBOd08GxWspEQWBH3GK\n" ) + "k7Repj4IPwXCoEfU1H+XJNPaM5cnt+L87QfbhNOWmHmWhhrOmZg160joODON8w8x\n" ) + "j3gma9Cp6luPDEQC3XnsEup3BdCdIciG5JS6JA/2GDeulg+eS4x9Xkmmp6nzObkB\n" ) + "DQRMfmkxAQgAxeT+bUBbADga+lYtkmtYVbuG7uWjwdg9TR6qWKD7n37mcu6OgNNl\n" ) + "rPaHoClvOL20fcArZ8wT/FbjvDI6ZHn22YA19OvAR+Eqmf3D7qTmebchnCu955Pk\n" ) + "X7AOOpKfX48qoYq8BoskZDnbFidm5YKfIin3CNDdlQbd3na+ihGCuv0KoGzefuAH\n" ) + "cITeYEUESh7HLzQ9/pMES9eCgdTEkwYD5NJjfkLnj2kZtDsSiNnENZ0TIlyKOBMn\n" ) + "ixgsARDjLrkqyTg79thWALiqVBXUKn2NBtMkK5xTDc/7q3nIw4InYMIrLtntSu1w\n" ) + "pn1gXbdg1HFl5BgqEB9Fp0k02YvrSiiVswARAQABiQEfBBgBAgAJBQJMfmkxAhsM\n" ) + "AAoJENAi2jpemu3QFPoH/1ynX1j1QWL8TfJFPoB3vXivwGURs3J7LsywHTRjpQVQ\n" ) + "vxQvKTzB1+woUxtEbdjKgMbvY/ShHSlEZKVV9l3ZihrNewHA1GMHrDtBGXcNRP9B\n" ) + "RfJHTrDzjUxrEEwu4QIq71o4tS89NvQmlYYi7O4ThtVB4hYSwl436+vAT9ybIQkU\n" ) + "OjCkYrKye6JHs1K4BnVuWcOVujQwW4H8QFbddcWF49uN6DSqrwDFsjFog6wL7u6V\n" ) + "UL5upRBP/RZWA4HKJVF2tS0Ptr6xLTmf4Tp5n10CGFYkPcRp9biVyeVRJBW4uZf0\n" ) + "EDsn9J5rNG0pWtgnhAEi6smoT4fADTOzpOovUiTSQhQ=\n" ) + "=SiG3\n" ) + "-----END PGP PUBLIC KEY BLOCK-----\n" ) ) , ( "-----BEGIN PGP PRIVATE KEY BLOCK-----\n" + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "Version: GnuPG v1\n" + "\n" ) + "lQOYBEx+aTEBCAC6dFperkew4ZowIfEyAjScjPBggcbw5XUXxLCF0nBRjWH+HvuI\n" ) + "CGwznRyeuTiy5yyB9/CcvTLTkEs8qIyJUJoikm7QpaVVL6imVq1HD1xcOJpV1FV1\n" ) + "eFu562xCRDUqD6KQf54N04V9TMDyubhPkQYbx1H2gq+uBEo9d1w6AsSMgaUn3xH/\n" ) + "xYe+INxcP6jFT2OKc36x+8ipP6pc8Hba1X90JwadOcJlwEyJfJKs7hYHTaYn+I6+\n" ) + "4w0Y//WebhT4ocsYIiOYrENQUcic+vL3fkwwJCloyDBCGxr7w7Gn4Pe3peTCl4Sp\n" ) + "vIIoYnHPW4h3Nyh8qAlBNDw7dCPS9LP7wRdNABEBAAEAB/oCD6EKLvjXgItlqdm/\n" ) + "X+OWMYHDCtuRCMW7+2gEw/TxfLeGJaOHWxAouwUIArEEb/hjdaRfIg4wdJUxmyPX\n" ) + "WyNqUdupkjdXNa7RNaesIi0ilrdZOn7NlHWJCCXwKt2R0jd2p8PDED6CWaE1+76I\n" ) + "/IuwOHDTD8MABke3KvHDXMxjzdeuRbm670Aqz6zTVY+BZG1GH63Ef5JEyezMgAU5\n" ) + "42+v+OgD0W0/jCxF7jt2ddP9QiOzu0q65mI4qlOuSebxjH8P7ye0LU9EuWVgAcwc\n" ) + "YJh2lk3eH8bCWTwlIHj4+8MYgY5i510I5xfY3sWuylw/qtFP9vYjisrysadcUExc\n" ) + "QUxFBADXQSCmvtgRoSLiGfQv2y2qInx67eJw8pUXFEIJKdOFOhX4vogT9qPWQAms\n" ) + "/vSshcsAPgpZJZ8MNeGpMGLAGm8y4D2zWWd9YLNmVXsPu7EyrDpXlKHCFnsQfOGN\n" ) + "c5j8u4CHBn1cS/Yk53S+6Yge2jvnOjVNFmxB0ocs0Y5zbdTJYwQA3b+hQebH7NNr\n" ) + "FlPwthRZS0TiX5+qkE9tE/0mpRrUN3iS9bnF0IXRmHFp7Hz+EsVbA2Re2A5HIHnQ\n" ) + "/BSpAsSHRhjU3MH4gzwfg9W43eZGVfofSY6IlUCIcd1bGjSAjJgmfhjU7ofS59i/\n" ) + "DjzP1jBfXdjOEUQULTkXjHPqO7j4048D/jqMwZNY3AawTMjqKr9nGK49aWv/OVdy\n" ) + "6xGn4dRJNk3gnnIvjAEFy5+HHbUCJ2lA3X2AssQ9tvbuyDnoSL5/G+zEYtyRuAC5\n" ) + "9TLQQRmy4qjsYC5TwfoUwFbgqRsmGUcjj2wtE+gb1S8P/zudYrEqOD3K60Y5qXcn\n" ) + "S3PHgJ++5TzFQba0HlRlc3R1c2VyIEkgPHRlc3RpQGV4YW1wbGUuY29tPokBOAQT\n" ) + "AQIAIgUCTH5pMQIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQ0CLaOl6a\n" ) + "7dAjNQf/fLmGeKgaesawP53UeioQ8hgDEFKPBddNQP248NpReZ1rg3h8Q21PQJVK\n" ) + "rtDYn94WJi5NTqUtk9rtx9SiqKaEc3wzIpLcnIYrgGLWot5nq+5V1nY9t9QAiJJD\n" ) + "rmm2/3tX+jTWW6CpuLih7IsD+gJmpZkY6PfMT+teKEeh5E1XBbu10fwDwMJta+04\n" ) + "3/TiljInjER1f/b41EnSjI6YXFnxnyiLeDgDA1QIIzB/W2ccGqphzJriDETDJhKF\n" ) + "ZIeqvjylZofgCLyMRSyZtsu+b4pfBK3hMpu5aaYylaM1BWOpAiqUmGUKqxN/o9EG\n" ) + "x4wvsMxK6xgiZe5UdQPaoDcFCsEMg50DmARMfmkxAQgAxeT+bUBbADga+lYtkmtY\n" ) + "VbuG7uWjwdg9TR6qWKD7n37mcu6OgNNlrPaHoClvOL20fcArZ8wT/FbjvDI6ZHn2\n" ) + "2YA19OvAR+Eqmf3D7qTmebchnCu955PkX7AOOpKfX48qoYq8BoskZDnbFidm5YKf\n" ) + "Iin3CNDdlQbd3na+ihGCuv0KoGzefuAHcITeYEUESh7HLzQ9/pMES9eCgdTEkwYD\n" ) + "5NJjfkLnj2kZtDsSiNnENZ0TIlyKOBMnixgsARDjLrkqyTg79thWALiqVBXUKn2N\n" ) + "BtMkK5xTDc/7q3nIw4InYMIrLtntSu1wpn1gXbdg1HFl5BgqEB9Fp0k02YvrSiiV\n" ) + "swARAQABAAf/VXp4O5CUvh9956vZu2kKmt2Jhx9CALT6pZkdU3MVvOr/d517iEHH\n" ) + "pVJHevLqy8OFdtvO4+LOryyI6f14I3ZbHc+3frdmMqYb1LA8NZScyO5FYkOyn5jO\n" ) + "CFbvjnVOyeP5MhXO6bSoX3JuI7+ZPoGRYxxlTDWLwJdatoDsBI9TvJhVekyAchTH\n" ) + "Tyt3NQIvLXqHvKU/8WAgclBKeL/y/idep1BrJ4cIJ+EFp0agEG0WpRRUAYjwfE3P\n" ) + "aSEV0NOoB8rapPW3XuEjO+ZTht+NYvqgPIdTjwXZGFPYnwvEuz772Th4pO3o/PdF\n" ) + "2cljvRn3qo+lSVnJ0Ki2pb+LukJSIdfHgQQA1DBdm29a/3dBla2y6wxlSXW/3WBp\n" ) + "51Vpd8SBuwdVrNNQMwPmf1L93YskJnUKSTo7MwgrYZFWf7QzgfD/cHXr8QK2C1TP\n" ) + "czUC0/uFCm8pPQoOt/osp3PjDAzGgUAMFXCgLtb04P2JqbFvtse5oTFWrKqmscTG\n" ) + "KnEBkzfgy37U0iMEAO7BEgXCYvqyztHmQATqJfbpxgQGqk738UW6qWwG8mK6aT5V\n" ) + "OidZvrWqJ3WeIKmEhoJlY2Ky1ZTuJfeQuVucqzNWlZy2yzDijs+t3v4pFGajv4nV\n" ) + "ivGvlb/O/QoHBuF/9K36lIIqcZstfa2UIYRqkkdEz2JHWJsr81VvCw2Gb38xA/sG\n" ) + "hqErrIgSBPRCJObM/gb9rJ6dbA5SNY5trc778EjS1myhyPhGOaOmYbdQMONUqLo2\n" ) + "q1UZo1G7oaI1Um9v5MXN1yZNX/kvx1TMldZEEixrhCIob81eXSpEUfs+Mz2RqvqT\n" ) + "YsYquYQNPrPXWZQwTJV6fpsBQUMeE/pmlisaSAijHkXPiQEfBBgBAgAJBQJMfmkx\n" ) + "AhsMAAoJENAi2jpemu3QFPoH/1ynX1j1QWL8TfJFPoB3vXivwGURs3J7LsywHTRj\n" ) + "pQVQvxQvKTzB1+woUxtEbdjKgMbvY/ShHSlEZKVV9l3ZihrNewHA1GMHrDtBGXcN\n" ) + "RP9BRfJHTrDzjUxrEEwu4QIq71o4tS89NvQmlYYi7O4ThtVB4hYSwl436+vAT9yb\n" ) + "IQkUOjCkYrKye6JHs1K4BnVuWcOVujQwW4H8QFbddcWF49uN6DSqrwDFsjFog6wL\n" ) + "7u6VUL5upRBP/RZWA4HKJVF2tS0Ptr6xLTmf4Tp5n10CGFYkPcRp9biVyeVRJBW4\n" ) + "uZf0EDsn9J5rNG0pWtgnhAEi6smoT4fADTOzpOovUiTSQhQ=\n" ) + "=RcWw\n" ) + "-----END PGP PRIVATE KEY BLOCK-----\n" ) ) ) ; }
private void flushEventsToDraftUpdate ( com.google.gerrit.server.notedb.NoteDbUpdateManager manager , com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.EventList < com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.PatchLineCommentEvent > events , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { if ( events.isEmpty ( ) ) { return ; } com.google.gerrit.server.notedb.ChangeDraftUpdate update = draftUpdateFactory.create ( change , events.getAccountId ( ) , events.newAuthorIdent ( ) , events.getWhen ( ) ) ; update.setPatchSetId ( events.getPatchSetId ( ) ) ; for ( com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.PatchLineCommentEvent e : events ) { e.applyDraft ( update ) ; } manager.add ( update ) ; events.clear ( ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { renderSubmitType ( result.asString ( ) ) ; }
void set ( com.google.gerrit.client.info.ChangeInfo info ) { this . changeId = info.legacyId ( ) ; assigneeLink.setText ( ( ( info.assignee ( ) ) != null ? info.assignee ( ) . name ( ) : "" ) ) ; assigneeSuggestOracle.setChange ( changeId ) ; editAssigneeIcon.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public static com.google.gson.GsonBuilder defaultGsonBuilder ( ) { final com.google.gson.GsonBuilder gb = new com.google.gson.GsonBuilder ( ) ; gb.registerTypeAdapter ( java.sql.Date.class , new com.google.gwtjsonrpc.server.SqlDateDeserializer ( ) ) ; gb.registerTypeAdapter ( java.sql.Timestamp.class , new com.google.gwtjsonrpc.server.SqlTimestampDeserializer ( ) ) ; return gb ; }
public int run ( ) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.server.config.GerritGlobalModule.createInjector ( ) ; com.google.inject.Injector sshInjector = sysInjector.createChildInjector ( new com.google.gerrit.server.ssh.SshModule ( ) ) ; sshInjector.getInstance ( com.google.gerrit.server.ssh.SshDaemon.class ) . start ( ) ; return never ( ) ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval deletedApproval ( com.google.gerrit.server.update.BatchUpdate.ChangeContext ctx ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval ( new com.google.gerrit.reviewdb.client.PatchSetApproval.Key ( ps.getId ( ) , accountId , new com.google.gerrit.reviewdb.client.LabelId ( label ) ) , ( ( short ) ( 0 ) ) , ctx.getWhen ( ) ) ; }
private static byte [ ] message ( org.eclipse.jetty.server.HttpConnection conn ) { java.lang.String msg = conn.getHttpChannel ( ) . getResponse ( ) . getReason ( ) ; if ( msg == null ) { msg = org.eclipse.jetty.http.HttpStatus.getMessage ( conn.getHttpChannel ( ) . getResponse ( ) . getStatus ( ) ) ; } return msg.getBytes ( java.nio.charset.StandardCharsets.ISO_8859_1 ) ; }
public void rebuildEmptySiteStartingWithNoteDbEnabled ( ) throws java.lang.Exception { initSite ( ) ; setNotesMigrationState ( NotesMigrationState.NOTE_DB_UNFUSED ) ; com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "RebuildNoteDb" , "-d" , sitePath , "--show-stack-trace" ) ; }
public void testDoPostErrorWhileSendingErrorMessage ( ) throws java.lang.Exception { org.easymock.EasyMock.expect ( req.getReader ( ) ) . andThrow ( new java.io.IOException ( "someError" ) ) ; rsp.sendError ( javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST , "someError" ) ; org.easymock.EasyMock.expectLastCall ( ) . andThrow ( new java.io.IOException ( "someOtherError" ) ) ; replayAll ( ) ; syncEventsRestApiServlet.doPost ( req , rsp ) ; verifyAll ( ) ; }
private java.util.List < com.google.gerrit.extensions.common.AccountInfo > suggestAccounts ( com.google.gerrit.server.api.accounts.SuggestAccountsRequest r ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.account.QueryAccounts myQueryAccounts = queryAccountsProvider.get ( ) ; myQueryAccounts.setSuggest ( true ) ; myQueryAccounts.setQuery ( r.getQuery ( ) ) ; myQueryAccounts.setLimit ( r.getLimit ( ) ) ; return myQueryAccounts.apply ( TopLevelResource.INSTANCE ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot retrieve suggested accounts" , e ) ; } }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.setB0 ( ) ; com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; a1 = a1.dereference ( ) ; if ( ! ( a1.isVariable ( ) ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( this , 1 , "variable" , a1 ) ; if ( ! ( a1.unify ( new com.googlecode.prolog_cafe.builtin.JavaObjectTerm ( engine.getHashManager ( ) ) , engine.trail ) ) ) return engine.fail ( ) ; return cont ; }
public void testAppend_char ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; com.google.common.truth.Truth.assertThat ( b ) . isSameAs ( b.append ( 'a' ) ) ; com.google.common.truth.Truth.assertThat ( b ) . isSameAs ( b.append ( 'b' ) ) ; com.google.common.truth.Truth.assertThat ( "ab" ) ; }
private static com.google.gwt.user.client.ui.Anchor anchor ( final java.lang.String text , final java.lang.String to ) { final com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor ( text , to ) ; a.setStyleName ( com.google.gerrit.client.Gerrit.RESOURCES.css ( ) . menuItem ( ) ) ; com.google.gwt.user.client.ui.Accessibility.setRole ( a.getElement ( ) , Accessibility.ROLE_MENUITEM ) ; return a ; }
private static void init ( ) { if ( ( com.google.gwtexpui.globalkey.client.GlobalKey.keys ) == null ) { com.google.gwtexpui.globalkey.client.GlobalKey.keys = new com.google.gwtexpui.globalkey.client.KeyCommandSet ( ) ; com.google.gwtexpui.globalkey.client.DocWidget.get ( ) . addKeyPressHandler ( com.google.gwtexpui.globalkey.client.GlobalKey.keys ) ; com.google.gwtexpui.globalkey.client.GlobalKey.keyApplication = new com.google.gwtexpui.globalkey.client.KeyCommandSet ( Util.C.applicationSection ( ) ) ; com.google.gwtexpui.globalkey.client.GlobalKey.keyApplication.add ( new com.google.gwtexpui.globalkey.client.ShowHelpCommand ( ) ) ; com.google.gwtexpui.globalkey.client.GlobalKey.keys.add ( com.google.gwtexpui.globalkey.client.GlobalKey.keyApplication ) ; } }
private void initCipers ( ) { setCipherFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Cipher > > asList ( new org.apache.sshd.common.cipher.AES128CBC.Factory ( ) , new org.apache.sshd.common.cipher.TripleDESCBC.Factory ( ) , new org.apache.sshd.common.cipher.BlowfishCBC.Factory ( ) , new org.apache.sshd.common.cipher.AES192CBC.Factory ( ) , new org.apache.sshd.common.cipher.AES256CBC.Factory ( ) ) ) ; }
public void start ( ) { for ( com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all ( ) ) { com.google.gerrit.server.project.ProjectState projectState = projectCache.get ( p ) ; if ( projectState != null ) { installCommandAsync ( projectState ) ; } } }
public static void forceLogout ( final javax.servlet.http.HttpServletResponse rsp ) { javax.servlet.http.Cookie c ; c = new javax.servlet.http.Cookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE , "" ) ; c.setMaxAge ( 0 ) ; rsp.addCookie ( c ) ; c = new javax.servlet.http.Cookie ( com.google.gerrit.client.Gerrit.OPENIDUSER_COOKIE , "" ) ; c.setMaxAge ( 0 ) ; rsp.addCookie ( c ) ; }
private com.google.inject.Injector getPluginInjector ( java.io.File jarFile ) { java.lang.String jarFileName = jarFile.getName ( ) ; final java.lang.String pluginName = jarFileName.substring ( 0 , jarFileName.lastIndexOf ( '.' ) ) ; return initInjector.createChildInjector ( new com.google.inject.AbstractModule ( ) { @ java.lang.Override protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.PluginName.class ) . toInstance ( pluginName ) ; } } ) ; }
public void onLoad ( ) { if ( ( diffTable ) == null ) { initUI ( ) ; } super . onLoad ( ) ; PatchUtil.DETAIL_SVC.unifiedPatchDetail ( patchId , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.data.UnifiedPatchDetail > ( ) { public void onSuccess ( final com.google.gerrit.client.data.UnifiedPatchDetail r ) { if ( isAttached ( ) ) { display ( r ) ; } } } ) ; }
private void createTestSiteDirs ( ) throws java.io.IOException { testSite = tempSiteDir.getRoot ( ) . toPath ( ) ; com.google.gerrit.server.config.SitePaths sitePath = new com.google.gerrit.server.config.SitePaths ( testSite ) ; pluginsSitePath = java.nio.file.Files.createDirectories ( sitePath.plugins_dir ) ; java.nio.file.Files.createDirectories ( sitePath.tmp_dir ) ; }
public void run ( ) { }
private org.eclipse.jgit.lib.Repository openRepository ( java.lang.String name ) throws java.io.IOException { if ( repos.containsKey ( name ) ) { return repos.get ( name ) ; } org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ; repos.put ( name , repo ) ; return repo ; }
public void testIsEnabledEventNoBranches ( ) { java.lang.String [ ] branches = new java.lang.String [ ] { } ; setupIsEnabled ( "true" , null , branches ) ; com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent ( ) ; event.change = new com.google.gerrit.server.data.ChangeAttribute ( ) ; event.change.project = "testProject" ; event.change.branch = "testBranch" ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertTrue ( itsConfig.isEnabled ( event ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.info.AccountInfo > in ) { java.util.List < com.google.gerrit.client.ui.AccountSuggestOracle.AccountSuggestion > r = new java.util.ArrayList ( in.length ( ) ) ; for ( com.google.gerrit.client.info.AccountInfo p : com.google.gerrit.client.rpc.Natives.asList ( in ) ) { r.add ( new com.google.gerrit.client.ui.AccountSuggestOracle.AccountSuggestion ( p ) ) ; } cb.onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( r ) ) ; }
public void name ( java.lang.String name ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.group.PutName.Input in = new com.google.gerrit.server.group.PutName.Input ( ) ; in.name = name ; try { putName.apply ( rsrc , in ) ; } catch ( com.google.gerrit.common.errors.NoSuchGroupException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name , e ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put group name" , e ) ; } }
private void deleteLock ( java.lang.String project , java.lang.String lockId , com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext action ) throws java.io.IOException { com.googlesource.gerrit.plugins.lfs.locks.LfsDeleteLockInput input = action.input ( com.googlesource.gerrit.plugins.lfs.locks.LfsDeleteLockInput.class ) ; com.googlesource.gerrit.plugins.lfs.locks.LfsPutLocksAction.log.debug ( "Delete (-f {}) lock for {} in project {}" , java.lang.Boolean.TRUE.equals ( input.force ) , lockId , project ) ; com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = new com.googlesource.gerrit.plugins.lfs.locks.LfsLock ( "random_id" , "some/path/to/file" , now ( ) , new com.googlesource.gerrit.plugins.lfs.locks.LfsLockOwner ( "Lock Owner <lock_owner@example.com>" ) ) ; action.sendResponse ( lock ) ; }
public static void copyLabels ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.common.data.LabelTypes labelTypes , com.google.gerrit.reviewdb.client.PatchSet.Id source , com.google.gerrit.reviewdb.client.PatchSet dest , boolean trivialRebase ) throws com.google.gwtorm.server.OrmException { java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > sourceApprovals = db.patchSetApprovals ( ) . byPatchSet ( source ) ; com.google.gerrit.server.ApprovalsUtil.copyLabels ( db , labelTypes , sourceApprovals , source , dest , trivialRebase ) ; }
public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { if ( ( format ) == ( com.google.gerrit.server.OutputFormat.TEXT ) ) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream ( ) ; display ( buf ) ; return com.google.gerrit.extensions.restapi.BinaryResult.create ( buf.toByteArray ( ) ) . setContentType ( "text/plain" ) . setCharacterEncoding ( "UTF-8" ) ; } format = com.google.gerrit.server.OutputFormat.JSON ; return display ( null ) ; }
protected void ccExistingReviewers ( ) { if ( ( ! ( NotifyHandling.ALL.equals ( notify ) ) ) && ( ! ( NotifyHandling.OWNER_REVIEWERS.equals ( notify ) ) ) ) { return ; } try { for ( com.google.gerrit.reviewdb.client.Account.Id id : changeData.reviewers ( ) . byState ( com.google.gerrit.server.notedb.ReviewerStateInternal.REVIEWER ) ) { add ( RecipientType.CC , id ) ; } } catch ( com.google.gwtorm.server.OrmException err ) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn ( "Cannot CC users that commented on updated change" , err ) ; } }
public void testBlockPushDraftsUnblockAdmin ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/drafts/*" ) ; com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ADMIN , "refs/drafts/*" ) ; org.junit.Assert.assertTrue ( "push is blocked for anonymous to refs/drafts/master" , util.user ( local ) . controlForRef ( "refs/drafts/refs/heads/master" ) . isBlocked ( com.google.gerrit.common.data.Permission.PUSH ) ) ; org.junit.Assert.assertFalse ( "push is blocked for admin refs/drafts/master" , util.user ( local , "a" , com.google.gerrit.server.project.Util.ADMIN ) . controlForRef ( "refs/drafts/refs/heads/master" ) . isBlocked ( com.google.gerrit.common.data.Permission.PUSH ) ) ; }
public void setUp ( ) { easyMock = new org.easymock.EasyMockSupport ( ) ; storeMock = easyMock.createMock ( com.ericsson.gerrit.plugins.eventslog.EventStore.class ) ; poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock ( 1 ) ; listener = new com.ericsson.gerrit.plugins.eventslog.EventHandler ( storeMock , poolMock ) ; }
private static void initVimKeys ( ) { net.codemirror.lib.KeyMap km = net.codemirror.lib.CodeMirror.cloneKeyMap ( "vim" ) ; for ( java.lang.String s : new java.lang.String [ ] { "A" , "C" , "I" , "O" , "R" , "U" , "Ctrl-C" , "Ctrl-O" } ) { km.remove ( s ) ; } net.codemirror.lib.CodeMirror.addKeyMap ( "vim_ro" , km ) ; }
public void testReplaceOneLink ( ) { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html ( "A\nissue 42\nB" ) ; com.google.gwtexpui.safehtml.client.SafeHtml n = o.replaceAll ( com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls ( new com.google.gwtexpui.safehtml.client.RawFindReplace ( "(issue\\s(\\d+))" , "<a href=\"?$2\">$1</a>" ) ) ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( "A\n<a href=\"?42\">issue 42</a>\nB" , n.asString ( ) ) ; }
protected void populate ( final int row , final com.google.gerrit.reviewdb.Project k ) { final com.google.gwt.user.client.ui.Anchor projectLink = new com.google.gwt.user.client.ui.Anchor ( k.getName ( ) ) ; projectLink.addClickHandler ( new com.google.gwt.event.dom.client.ClickHandler ( ) { @ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { sugestParent.setText ( getRowItem ( row ) . getName ( ) ) ; } } ) ; table.setWidget ( row , 1 , projectLink ) ; table.setText ( row , 2 , k.getDescription ( ) ) ; setRowItem ( row , k ) ; }
public void changeMessageUuid ( ) throws java.lang.Exception { java.util.regex.Pattern pat = java.util.regex.Pattern.compile ( "^[0-9a-f]{8}_[0-9a-f]{8}$" ) ; com.google.common.truth.Truth.assertThat ( "abcd1234_0987fedc" ) . matches ( pat ) ; com.google.gerrit.reviewdb.server.ReviewDb db = new com.google.gerrit.server.ChangeUtilTest.FakeDb ( ) ; java.lang.String id1 = com.google.gerrit.server.ChangeUtil.messageUUID ( db ) ; com.google.common.truth.Truth.assertThat ( id1 ) . matches ( pat ) ; java.lang.String id2 = com.google.gerrit.server.ChangeUtil.messageUUID ( db ) ; com.google.common.truth.Truth.assertThat ( id2 ) . isNotEqualTo ( id1 ) ; com.google.common.truth.Truth.assertThat ( id2 ) . matches ( pat ) ; }
public void testNoPropertySets ( ) { com.googlesource.gerrit.plugins.hooks.workflow.ActionController actionController = createActionController ( ) ; com.google.gerrit.server.events.ChangeEvent event = createMock ( com.google.gerrit.server.events.ChangeEvent.class ) ; java.util.Set < java.util.Set < com.googlesource.gerrit.plugins.hooks.workflow.Property > > propertySets = java.util.Collections.emptySet ( ) ; org.easymock.EasyMock.expect ( propertyExtractor.extractFrom ( event ) ) . andReturn ( propertySets ) . anyTimes ( ) ; replayMocks ( ) ; actionController.onChangeEvent ( event ) ; }
private void saveQuerySettings ( ) { getApp ( ) . getConfigManager ( ) . setQueryConfig ( new com.google.reviewit.app.QueryConfig.Builder ( ) . setServerId ( getServerId ( ) ) . setQuery ( textOf ( R.id.queryInput ) ) . setLabel ( textOf ( R.id.labelInput ) ) . build ( ) ) ; display ( com.google.reviewit.SortChangesFragment.class ) ; }
private org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger ( ) { org.eclipse.jgit.merge.ThreeWayMerger m ; if ( destProject.isUseContentMerge ( ) ) { m = MergeStrategy.RESOLVE.newMerger ( repo , true ) ; } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger ( repo ) ; } m.setObjectInserter ( new org.eclipse.jgit.lib.ObjectInserter.Filter ( ) { @ java.lang.Override protected org.eclipse.jgit.lib.ObjectInserter delegate ( ) { return inserter ; } @ java.lang.Override public void flush ( ) { } @ java.lang.Override public void release ( ) { } } ) ; return m ; }
private void authenticate ( java.lang.String dn , java.lang.String password ) throws com.google.gerrit.server.account.AccountException { final java.util.Properties env = new java.util.Properties ( ) ; env.put ( javax.naming.Context.INITIAL_CONTEXT_FACTORY , com.google.gerrit.server.ldap.LdapRealm.LDAP ) ; env.put ( javax.naming.Context.PROVIDER_URL , server ) ; env.put ( javax.naming.Context.SECURITY_PRINCIPAL , dn ) ; env.put ( javax.naming.Context.SECURITY_CREDENTIALS , ( password != null ? password : "" ) ) ; try { new javax.naming.directory.InitialDirContext ( env ) . close ( ) ; } catch ( javax.naming.NamingException e ) { throw new com.google.gerrit.server.account.AccountException ( "Incorrect username or password" , e ) ; } }
public com.google.gitiles.GitilesView.Builder setOldRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case DIFF : case LOG : break ; default : revision = com.google.common.base.Objects.firstNonNull ( revision , Revision.NULL ) ; com.google.common.base.Preconditions.checkState ( ( revision == ( Revision.NULL ) ) , "cannot set old revision on %s view" , type ) ; break ; } this . oldRevision = revision ; return this ; }
public static java.lang.String keyToString ( org.bouncycastle.openpgp.PGPPublicKey key ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.Iterator < java.lang.String > it = key.getUserIDs ( ) ; return java.lang.String.format ( "%s %s(%s)" , com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyID ( ) ) , ( it.hasNext ( ) ? ( it.next ( ) ) + " " : "" ) , com.google.gerrit.server.git.gpg.PublicKeyStore.fingerprintToString ( key.getFingerprint ( ) ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.reviewdb.client.AccountGroupMember k = getRowItem ( row ) ; if ( ( k != null ) && ( ids.contains ( k.getKey ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public void inheritRead_AppendWithDenyOfRef ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCanRead ( u ) ; assertCanRead ( "refs/master" , u ) ; assertCanRead ( "refs/tags/foobar" , u ) ; assertCanRead ( "refs/heads/master" , u ) ; }
public void display ( final java.util.List < com.google.gerrit.client.reviewdb.Patch > list ) { final java.lang.StringBuilder nc = new java.lang.StringBuilder ( ) ; appendHeader ( nc ) ; for ( final com.google.gerrit.client.reviewdb.Patch p : list ) { appendRow ( nc , p ) ; } appendRow ( nc , null ) ; resetHtml ( nc.toString ( ) ) ; int row = 1 ; for ( final com.google.gerrit.client.reviewdb.Patch p : list ) { setRowItem ( ( row ++ ) , p ) ; } }
private java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.change.ReviewerResource rsrc ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id user = rsrc.getUser ( ) . getAccountId ( ) ; return com.google.common.collect.Iterables.filter ( db.patchSetApprovals ( ) . byChange ( rsrc.getChange ( ) . getId ( ) ) , new com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.PatchSetApproval > ( ) { @ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return user.equals ( input.getAccountId ( ) ) ; } } ) ; }
public void addGroupMembers ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > accountIds ) throws com.google.gwtorm.server.OrmException , java.io.IOException { java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup > foundGroup = groups.get ( db , groupId ) ; if ( ! ( foundGroup.isPresent ( ) ) ) { return ; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get ( ) ; addGroupMembers ( db , group , accountIds ) ; }
public void conflictingChanges ( ) throws com.jcraft.jsch.JSchException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.api.Git git = createProject ( ) ; com.google.gerrit.acceptance.git.PushOneCommit.Result change = createChange ( git , true ) ; com.google.gerrit.acceptance.git.PushOneCommit.Result conflictingChange1 = createChange ( git , true ) ; com.google.gerrit.acceptance.git.PushOneCommit.Result conflictingChange2 = createChange ( git , true ) ; createChange ( git , false ) ; java.util.Set < java.lang.String > changes = queryConflictingChanges ( change ) ; assertChanges ( changes , conflictingChange1 , conflictingChange2 ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { double y = cm.heightAtLine ( line , "local" ) ; double viewport = cm.getScrollInfo ( ) . getClientHeight ( ) ; cm.setCursor ( net.codemirror.lib.LineCharacter.create ( line ) ) ; cm.scrollToY ( ( y - ( 0.5 * viewport ) ) ) ; cm.focus ( ) ; }
public void testIndexTaskToString ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexTask indexTask = indexEventHandler.new com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexTask ( com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.CHANGE_ID , false ) ; com.google.common.truth.Truth.assertThat ( indexTask.toString ( ) ) . isEqualTo ( java.lang.String.format ( "[%s] Index change %s in target instance" , com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.PLUGIN_NAME , com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.CHANGE_ID ) ) ; }
void openCloseAll ( ) { boolean open = false ; for ( int i = 0 ; i < ( getBoxCount ( ) ) ; i ++ ) { if ( ! ( getCommentBox ( i ) . isOpen ( ) ) ) { open = true ; break ; } } for ( int i = 0 ; i < ( getBoxCount ( ) ) ; i ++ ) { getCommentBox ( i ) . setOpen ( open ) ; } }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . screen ( "" , new com.googlesource.gerrit.plugins.cookbook.client.IndexScreen.Factory ( ) ) ; }
public static boolean havePGP ( ) { try { java.lang.Class.forName ( org.bouncycastle.openpgp.PGPPublicKey.class . getName ( ) ) ; com.google.gerrit.server.util.BouncyCastleUtil.addBouncyCastleProvider ( ) ; return true ; } catch ( java.lang.NoClassDefFoundError | java.lang.ClassNotFoundException | java.lang.SecurityException | java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException | java.lang.ClassCastException noBouncyCastle ) { return false ; } }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( ui ) ; bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; java.util.List < java.lang.String > plugins = com.google.common.base.Objects.firstNonNull ( getInstallPlugins ( ) , com.google.common.collect.Lists.< java.lang.String > newArrayList ( ) ) ; bind ( new com.google.inject.TypeLiteral < java.util.List < java.lang.String > > ( ) { } ) . annotatedWith ( com.google.gerrit.pgm.init.InstallPlugins.class ) . toInstance ( plugins ) ; }
public void abandonWipChangeInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
public void testUnblockForceWithAllowNoForce_NotPossible ( ) { com.google.gerrit.common.data.PermissionRule r = grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , "refs/heads/*" ) ; r.setBlock ( ) ; r.setForce ( true ) ; grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertFalse ( "u can't force push" , u.controlForRef ( "refs/heads/master" ) . canForceUpdate ( ) ) ; }
public com.google.gerrit.server.change.ConsistencyChecker.Result check ( com.google.gerrit.server.query.change.ChangeData cd ) { reset ( ) ; try { return check ( cd.change ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { error ( "Error looking up change" , e ) ; return com.google.gerrit.server.change.ConsistencyChecker.Result.create ( cd.getId ( ) , problems ) ; } }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) { checkUpdate ( update ) ; if ( ( ps.getPatchSetId ( ) ) == 1 ) { update.setSubject ( "Create change" ) ; update.setBranch ( change.getDest ( ) . get ( ) ) ; } else { update.setSubject ( ( "Create patch set " + ( ps.getPatchSetId ( ) ) ) ) ; } }
public void owner ( java.lang.String owner ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.OwnerInput in = new com.google.gerrit.extensions.common.OwnerInput ( ) ; in.owner = owner ; try { putOwner.apply ( rsrc , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot put group owner" , e ) ; } }
public void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { if ( ( result.length ( ) ) > 0 ) { getTab ( ) . setTitle ( Resources.M.conflictingChanges ( result.length ( ) ) ) ; getTab ( ) . setChanges ( info.project ( ) , revision , convertChangeList ( result ) ) ; } }
private boolean isEmpty ( ) { if ( ! ( migration.commitChangeWrites ( ) ) ) { return true ; } return ( ( ( changeUpdates.isEmpty ( ) ) && ( draftUpdates.isEmpty ( ) ) ) && ( robotCommentUpdates.isEmpty ( ) ) ) && ( toDelete.isEmpty ( ) ) ; }
protected void setMessageText ( java.lang.String message ) { if ( message == null ) { message = "" ; } else { message = message.trim ( ) ; } messageSummary.setText ( com.google.gerrit.client.ui.CommentPanel.summarize ( message ) ) ; com.google.gwtexpui.safehtml.client.SafeHtml buf = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) . append ( message ) . wikify ( ) ; buf = com.google.gerrit.client.ui.CommentLinkProcessor.apply ( buf ) ; com.google.gwtexpui.safehtml.client.SafeHtml.set ( messageText , buf ) ; }
public boolean equals ( java.lang.Object o ) { if ( o instanceof com.google.gerrit.server.util.LabelVote ) { com.google.gerrit.server.util.LabelVote l = ( ( com.google.gerrit.server.util.LabelVote ) ( o ) ) ; return ( com.google.common.base.Objects.equal ( name , l.name ) ) && ( ( value ) == ( l.value ) ) ; } return false ; }
private void resizeFrame ( final int width , final int height ) { final int w = java.lang.Math.min ( 630 , ( width - 15 ) ) ; final int h = java.lang.Math.min ( 440 , ( height - 60 ) ) ; panel.setWidth ( ( w + "px" ) ) ; panel.setHeight ( ( h + "px" ) ) ; }
public void rangeOfFixReplacementNeedsToBeValid ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isTrue ( ) ; fixReplacementInfo.range = createRange ( 13 , 9 , 5 , 10 ) ; exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; exception.expectMessage ( java.lang.String.format ( ( "Range (13:9 - 5:10) is not " + "valid for the replacement of the robot comment on %s" ) , withFixRobotCommentInput.path ) ) ; addRobotComment ( changeId , withFixRobotCommentInput ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { for ( com.google.gerrit.reviewdb.Patch p : detail.getPatches ( ) ) { com.google.gerrit.client.ui.PatchLink.SideBySide link = new com.google.gerrit.client.ui.PatchLink.SideBySide ( p.getFileName ( ) , p.getKey ( ) , 0 , null , null ) ; com.google.gwt.user.client.Window.open ( link.getElement ( ) . toString ( ) , p.getFileName ( ) , null ) ; } }
public void deleteGpgKeys ( ) throws java.lang.Exception { java.lang.String ref = com.google.gerrit.reviewdb.client.RefNames.REFS_GPG_KEYS ; try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsers ) ) { if ( ( repo.getRefDatabase ( ) . exactRef ( ref ) ) != null ) { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef ( ref ) ; ru.setForceUpdate ( true ) ; com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( ( "Failed to delete " + ref ) ) . that ( ru.delete ( ) ) . isEqualTo ( RefUpdate.Result.FORCED ) ; } } }
public void setUp ( ) { listenerMock = org.mockito.Mockito.mock ( com.google.gerrit.common.EventListener.class ) ; com.google.gerrit.extensions.registration.DynamicSet < com.google.gerrit.common.EventListener > listeners = com.google.gerrit.extensions.registration.DynamicSet.emptySet ( ) ; listeners.add ( listenerMock ) ; broker = new com.ericsson.gerrit.plugins.syncevents.SyncEventBroker ( null , listeners , null , null , null ) ; }
private java.lang.String url ( com.google.gerrit.client.diff.FileInfo info ) { return info.binary ( ) ? com.google.gerrit.client.Dispatcher.toUnified ( base , curr , info.path ( ) ) : com.google.gerrit.client.Dispatcher.toSideBySide ( base , curr , info.path ( ) ) ; }
public void testEvictAccountsOK ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id key = Account.Id.parse ( "123" ) ; java.lang.String keyJson = new com.google.gson.GsonBuilder ( ) . create ( ) . toJson ( key ) ; org.mockito.Mockito.when ( httpSessionMock.post ( buildCacheEndpoint ( Constants.ACCOUNTS ) , keyJson ) ) . thenReturn ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EMPTY_MSG ) ) ; com.google.common.truth.Truth.assertThat ( forwarder.evict ( Constants.ACCOUNTS , key ) ) . isTrue ( ) ; }
public void setId ( java.lang.String id ) { this . id = ( id != null ) ? com.google.gerrit.common.data.LabelType.checkId ( id ) : null ; }
public java.util.Collection < com.google.gerrit.reviewdb.ProjectRight > getWildcardRights ( final com.google.gerrit.reviewdb.ApprovalCategory.Id id ) { if ( ( inheritedRights ) == null ) { inheritedRights = com.google.gerrit.server.workflow.FunctionState.index ( project.getInheritedRights ( ) ) ; } final java.util.Collection < com.google.gerrit.reviewdb.ProjectRight > l = inheritedRights.get ( id ) ; return l != null ? l : java.util.Collections.< com.google.gerrit.reviewdb.ProjectRight > emptySet ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.util.List < java.lang.Void > > apply ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.List < com.google.common.util.concurrent.ListenableFuture < java.lang.Void > > result = com.google.common.collect.Lists.newArrayListWithCapacity ( changes.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { result.add ( executor.submit ( new com.google.gerrit.server.index.ReindexAfterUpdate.Index ( event , c ) ) ) ; } return com.google.common.util.concurrent.Futures.allAsList ( result ) ; }
private void addGutterTag ( com.google.gerrit.client.diff.DiffInfo.Region region , int startA , int startB ) { if ( ( region.a ( ) ) == null ) { sidePanel.addGutter ( cmB , startB , SidePanel.GutterType.INSERT ) ; } else if ( ( region.b ( ) ) == null ) { sidePanel.addGutter ( cmA , startA , SidePanel.GutterType.DELETE ) ; } else { sidePanel.addGutter ( cmB , startB , SidePanel.GutterType.EDIT ) ; } }
private com.google.gerrit.acceptance.rest.group.AccountInfo GET_ONE ( java.lang.String endpoint ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get ( endpoint ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; return new com.google.gson.Gson ( ) . fromJson ( r.getReader ( ) , new com.google.common.reflect.TypeToken < com.google.gerrit.acceptance.rest.group.AccountInfo > ( ) { } . getType ( ) ) ; }
private java.util.Set < java.lang.String > allRefPatterns ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { final java.util.Set < java.lang.String > all = new java.util.HashSet < java.lang.String > ( ) ; for ( final com.google.gerrit.reviewdb.RefRight pr : state.getAllRights ( actionId , true ) ) { all.add ( pr.getRefPattern ( ) ) ; } return all ; }
public static com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup fromUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { com.google.common.base.Preconditions.checkArgument ( uuid.get ( ) . startsWith ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.UUID_PREFIX ) , ( ( "Invalid GitHub UUID '" + uuid ) + "'" ) ) ; return new com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup ( uuid.get ( ) . substring ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.UUID_PREFIX.length ( ) ) , null ) ; }
com.google.gerrit.client.diff.DraftBox addReplyBox ( com.google.gerrit.client.changes.CommentInfo replyTo , java.lang.String initMessage , boolean doSave ) { com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.create ( path , replyTo.side ( ) , replyTo.line ( ) , replyTo.id ( ) , initMessage ) ; com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox ( this , revision , info , commentLinkProcessor , true , ( ! doSave ) ) ; addCommentBox ( info , box ) ; return box ; }
public void unblockRangeForNotChangeOwner ( ) { com.google.gerrit.server.project.Util.allow ( local , ( ( com.google.gerrit.common.data.Permission.LABEL ) + "Code-Review" ) , ( - 2 ) , ( + 2 ) , com.google.gerrit.server.group.SystemGroupBackend.CHANGE_OWNER , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.common.data.PermissionRange range = u.controlForRef ( "refs/heads/master" ) . getRange ( ( ( com.google.gerrit.common.data.Permission.LABEL ) + "Code-Review" ) ) ; assertCannotVote ( ( - 2 ) , range ) ; assertCannotVote ( 2 , range ) ; }
private java.lang.String changeKindMessage ( com.google.gerrit.server.change.ChangeKind changeKind ) { switch ( changeKind ) { case TRIVIAL_REBASE : case NO_CHANGE : return ( ": Patch Set " + ( priorPatchSet.get ( ) ) ) + " was rebased" ; case NO_CODE_CHANGE : return ": Commit message was updated" ; case REWORK : default : return null ; } }
public UiAction.Description getDescription ( com.google.gerrit.server.change.ChangeResource resource ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Abandon" ) . setTitle ( "Abandon the change" ) . setVisible ( ( ( resource.getChange ( ) . getStatus ( ) . isOpen ( ) ) && ( resource.getControl ( ) . canAbandon ( ) ) ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { patchSetDetail = result ; if ( ( fileList ) == null ) { fileList = new com.google.gerrit.client.changes.PatchTable ( prefs ) ; fileList.display ( idSideA , result ) ; patchIndex = fileList.indexOf ( patchKey ) ; } refresh ( true ) ; }
public void resetToDefaults ( ) { maximumPageSize = com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; copySelfOnEmail = false ; reversePatchSetOrder = false ; showUserInReview = false ; downloadUrl = null ; downloadCommand = null ; dateFormat = null ; timeFormat = null ; relativeDateInChangeTable = false ; commentVisibilityStrategy = null ; diffView = null ; }
private void onPatchSetCreated ( final com.google.gerrit.server.events.PatchSetCreatedEvent event ) { com.google.gerrit.server.data.ChangeAttribute change = event.change.get ( ) ; if ( atomicityHelper.isAtomicReview ( change ) ) { processNewAtomicPatchSet ( change ) ; } }
protected void assertTipCommit ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , java.lang.String expectedMessage ) throws java.lang.Exception { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( allUsersRepo ) ) { org.eclipse.jgit.lib.Ref ref = allUsersRepo.exactRef ( com.google.gerrit.reviewdb.client.RefNames.refsGroups ( uuid ) ) ; com.google.gerrit.server.group.db.AbstractGroupTest.assertCommit ( com.google.gerrit.server.git.CommitUtil.toCommitInfo ( rw.parseCommit ( ref.getObjectId ( ) ) , rw ) , expectedMessage , com.google.gerrit.server.group.db.AbstractGroupTest.getAccountName ( userId ) , com.google.gerrit.server.group.db.AbstractGroupTest.getAccountEmail ( userId ) ) ; } }
void audit ( com.google.gerrit.sshd.SshScope.Context ctx , java.lang.Object result , java.lang.String commandName , java.lang.String [ ] args ) { final java.lang.String sid = extractSessionId ( ctx ) ; final long created = extractCreated ( ctx ) ; final java.lang.String what = extractWhat ( commandName , args ) ; auditService.dispatch ( new com.google.gerrit.audit.AuditEvent ( sid , extractCurrentUser ( ctx ) , ( "ssh:" + what ) , created , java.util.Arrays.asList ( args ) , result ) ) ; }
public void contributorAgreements ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.client.ContributorAgreement > > callback ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ; try { callback.onSuccess ( db.contributorAgreements ( ) . active ( ) . toList ( ) ) ; } finally { db.close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { callback.onFailure ( e ) ; } }
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.server.account.AccountState > i : getWriteIndexes ( ) ) { i.replace ( byIdCache.get ( id ) ) ; } fireAccountIndexedEvent ( id.get ( ) ) ; }
public void setAssigneeForNonVisibleChange ( ) throws java.lang.Exception { git ( ) . fetch ( ) . setRefSpecs ( new org.eclipse.jgit.transport.RefSpec ( "refs/meta/config:refs/meta/config" ) ) . call ( ) ; testRepo.reset ( RefNames.REFS_CONFIG ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( "refs/for/refs/meta/config" ) ; exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "is not visible to" ) ; setAssignee ( r , user.email ) ; }
private com.google.gerrit.client.reviewdb.AccountGroup missingGroup ( final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { final com.google.gerrit.client.reviewdb.AccountGroup.NameKey name = new com.google.gerrit.client.reviewdb.AccountGroup.NameKey ( ( "Deleted Group" + ( groupId.toString ( ) ) ) ) ; final com.google.gerrit.client.reviewdb.AccountGroup g = new com.google.gerrit.client.reviewdb.AccountGroup ( name , groupId ) ; g.setAutomaticMembership ( true ) ; g.setOwnerGroupId ( administrators ) ; return g ; }
public com.google.gerrit.server.patch.PatchList get ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get ( key ) ; } catch ( java.util.concurrent.ExecutionException e ) { PatchListLoader.log.warn ( ( "Error computing " + key ) , e ) ; throw new com.google.gerrit.server.patch.PatchListNotAvailableException ( e.getCause ( ) ) ; } }
private void restoreEvent ( com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry entry ) { try { eventsDb.storeEvent ( entry.getName ( ) , entry.getTimestamp ( ) , entry.getEvent ( ) ) ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn ( "Could not restore events from local" , e ) ; } }
protected void configure ( ) { com.google.gerrit.sshd.CommandName gerrit = com.google.gerrit.sshd.Commands.named ( "gerrit" ) ; com.google.gerrit.sshd.CommandName index = com.google.gerrit.sshd.Commands.named ( gerrit , "index" ) ; command ( index ) . toProvider ( new com.google.gerrit.sshd.DispatchCommandProvider ( index ) ) ; command ( index , com.google.gerrit.sshd.commands.IndexActivateCommand.class ) ; command ( index , com.google.gerrit.sshd.commands.IndexStartCommand.class ) ; command ( index , com.google.gerrit.sshd.commands.IndexChangesCommand.class ) ; }
public java.util.List < com.google.gerrit.server.project.CommentLinkInfo > getCommentLinks ( ) { return commentLinks ; }
public void testGcAll ( ) throws com.jcraft.jsch.JSchException , java.io.IOException { java.lang.String response = sshSession.exec ( "gerrit gc --all" ) ; org.junit.Assert.assertFalse ( sshSession.hasError ( ) ) ; assertNoError ( response ) ; gcAssert.assertHasPackFile ( allProjects , project1 , project2 , project3 ) ; }
private com.google.gerrit.reviewdb.client.ChangeMessage message ( com.google.gerrit.reviewdb.client.Change c , java.lang.String body ) { java.lang.String uuid ; try { uuid = com.google.gerrit.server.ChangeUtil.messageUUID ( db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return null ; } com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage ( new com.google.gerrit.reviewdb.client.ChangeMessage.Key ( c.getId ( ) , uuid ) , null , com.google.gerrit.common.TimeUtil.nowTs ( ) , c.currentPatchSetId ( ) ) ; m.setMessage ( body ) ; return m ; }
public < T extends com.google.gerrit.server.permissions.GlobalOrPluginPermission > java.util.Set < T > test ( java.util.Collection < T > permSet ) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Set < T > ok = com.google.gerrit.server.project.DefaultPermissionBackend.newSet ( permSet ) ; for ( T perm : permSet ) { if ( can ( perm ) ) { ok.add ( perm ) ; } } return ok ; }
public boolean canDelete ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Status status ) throws com.google.gwtorm.server.OrmException { if ( ! ( isVisible ( db ) ) ) { return false ; } switch ( status ) { case DRAFT : return ( isOwner ( ) ) || ( getRefControl ( ) . canDeleteDrafts ( ) ) ; case NEW : case ABANDONED : return isAdmin ( ) ; case MERGED : default : return false ; } }
public void badRequest ( ) throws java.io.IOException , javax.servlet.ServletException { org.easymock.EasyMock.expect ( request.getPathInfo ( ) ) . andReturn ( "/someCache" ) ; java.lang.String errorMessage = "someError" ; org.easymock.EasyMock.expect ( request.getReader ( ) ) . andThrow ( new java.io.IOException ( errorMessage ) ) ; response.sendError ( javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST , errorMessage ) ; org.easymock.EasyMock.expectLastCall ( ) . once ( ) ; replayAll ( ) ; servlet.doPost ( request , response ) ; verifyAll ( ) ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; } catch ( java.nio.file.NoSuchFileException e ) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND ; } }
public void submitWithErrorMessage ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update.setSubject ( "Submit patch set 1" ) ; update.submit ( com.google.common.collect.ImmutableList.of ( submitRecord ( "RULE_ERROR" , "Problem with patch set:\n1" ) ) ) ; update.commit ( ) ; assertBodyEquals ( ( "Submit patch set 1\n" + ( ( ( "\n" + "Patch-set: 1\n" ) + "Status: submitted\n" ) + "Submitted-with: RULE_ERROR Problem with patch set: 1\n" ) ) , update.getRevision ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { text.setReadOnly ( false ) ; text.setFocus ( true ) ; save.setEnabled ( true ) ; cancel.setEnabled ( true ) ; discard.setEnabled ( true ) ; super . onFailure ( caught ) ; onSave.onFailure ( caught ) ; }
public boolean isVisible ( ) { return ( ( ( ( user.isInternalUser ( ) ) || ( groupBackend.isVisibleToAll ( group.getGroupUUID ( ) ) ) ) || ( user.getEffectiveGroups ( ) . contains ( group.getGroupUUID ( ) ) ) ) || ( user.getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ) || ( isOwner ( ) ) ; }
static com.google.gerrit.server.project.SectionSortCache.EntryKey create ( java.lang.String refName , java.util.List < com.google.gerrit.common.data.AccessSection > sections ) { int hc = refName.hashCode ( ) ; java.util.List < java.lang.String > patterns = new java.util.ArrayList ( sections.size ( ) ) ; for ( com.google.gerrit.common.data.AccessSection s : sections ) { java.lang.String n = s.getName ( ) ; patterns.add ( n ) ; hc = ( hc * 31 ) + ( n.hashCode ( ) ) ; } return new com.google.gerrit.server.project.AutoValue_SectionSortCache_EntryKey ( refName , com.google.common.collect.ImmutableList.copyOf ( patterns ) , hc ) ; }
public java.util.Set < java.lang.Class < ? > > eval ( java.io.File scalaFile ) throws java.io.IOException , java.lang.ClassNotFoundException { if ( scalaFile.isFile ( ) ) { return evalFiles ( java.util.Arrays.asList ( scalaFile ) ) ; } else if ( scalaFile.isDirectory ( ) ) { return evalDirectory ( scalaFile ) ; } else { throw new java.io.IOException ( ( ( "File " + scalaFile ) + " is not a supported for loading Scala scripts" ) ) ; } }
public void parsePatchSetGroups ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) + "Groups: d,e,f\n" ) ) ) ; }
public void includeExistingGroup_OK ( ) throws java.lang.Exception { group ( "newGroup" ) ; PUT ( "/groups/Administrators/groups/newGroup" ) . consume ( ) ; com.google.common.truth.Truth.assertThat ( PUT ( "/groups/Administrators/groups/newGroup" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; }
public void queryChangesOneTerm ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange ( ) ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( "status:open" ) ; com.google.common.truth.Truth.assertThat ( results ) . hasSize ( 2 ) ; com.google.common.truth.Truth.assertThat ( results.get ( 0 ) . changeId ) . isEqualTo ( r2.getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( results.get ( 1 ) . changeId ) . isEqualTo ( r1.getChangeId ( ) ) ; }
public java.lang.String select ( final java.lang.String title , java.lang.String name , java.lang.String dv , java.util.Set < java.lang.String > allowedValues ) { final java.lang.String ov = get ( name ) ; java.lang.String nv = ui.readString ( ( ov != null ? ov : dv ) , allowedValues , "%s" , title ) ; if ( ! ( com.google.gerrit.pgm.init.api.Section.eq ( ov , nv ) ) ) { set ( name , nv ) ; } return nv ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { label.setVisible ( false ) ; edit.setVisible ( false ) ; input.setVisible ( true ) ; save.setVisible ( true ) ; cancel.setVisible ( true ) ; }
void notifyStarting ( com.googlesource.gerrit.plugins.replication.PushOne op ) { synchronized ( pending ) { if ( ! ( op.wasCanceled ( ) ) ) { pending.remove ( op.getURI ( ) ) ; } } }
private static com.google.gerrit.extensions.restapi.BinaryResult compress ( com.google.gerrit.extensions.restapi.BinaryResult bin ) throws java.io.IOException { org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap ( ( 20 << 20 ) ) ; java.util.zip.GZIPOutputStream gz = new java.util.zip.GZIPOutputStream ( buf ) ; bin.writeTo ( gz ) ; gz.close ( ) ; return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult ( buf ) . setContentType ( bin.getContentType ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.server.WebLinks.Link > getProjectLinks ( java.lang.String project ) { java.util.List < com.google.gerrit.server.WebLinks.Link > links = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.extensions.webui.ProjectWebLink webLink : projectLinks ) { links.add ( new com.google.gerrit.server.WebLinks.Link ( webLink.getLinkName ( ) , webLink.getProjectUrl ( project ) ) ) ; } return links ; }
private void initHttpd ( ) { webInjector = createWebInjector ( ) ; sysInjector.getInstance ( com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class ) . setHttpServletRequest ( webInjector.getProvider ( javax.servlet.http.HttpServletRequest.class ) ) ; httpdInjector = createHttpdInjector ( ) ; manager.add ( webInjector , httpdInjector ) ; }
public void setTopView ( com.google.gerrit.client.patches.PatchScreen.TopView tv ) { topPanel.clear ( ) ; switch ( tv ) { case COMMIT : topPanel.add ( commitMessageBlock ) ; break ; case PREFERENCES : topPanel.add ( settingsPanel ) ; break ; case PATCH_SETS : topPanel.add ( historyTable ) ; break ; case FILES : topPanel.add ( fileList ) ; break ; } }
private void disableChangeCache ( ) { globalConfig.setLong ( "cache" , "changes" , "maximumWeight" , 0 ) ; }
private void setDefaultBlameCache ( ) { if ( ( blameCache ) == null ) { if ( config.getSubsections ( "cache" ) . contains ( "blame" ) ) { blameCache = new com.google.gitiles.BlameCacheImpl ( com.google.gitiles.ConfigUtil.getCacheBuilder ( config , "blame" ) ) ; } else { blameCache = new com.google.gitiles.BlameCacheImpl ( ) ; } } }
public void clearReviewed ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { java.sql.Connection con = ds.getConnection ( ) ; java.sql.PreparedStatement stmt = HEAD ( ( b67f80 ? JestClientBuilder : Format ( ( ( ( google ) - ( java ) ) - ( format ) ) ) ) ) . prepareStatement ( ( "DELETE FROM ACCOUNT_PATCH_REVIEWS " + "WHERE CHANGE_ID + ? AND PATCH_SET_ID = ?" ) ) ; }
private org.eclipse.jgit.treewalk.CanonicalTreeParser getOnlyChildSubtree ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id , byte [ ] prefix ) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser ( prefix , rw.getObjectReader ( ) , id ) ; if ( ( p.eof ( ) ) || ( ( p.getEntryFileMode ( ) ) != ( org.eclipse.jgit.lib.FileMode.TREE ) ) ) { return null ; } p.next ( 1 ) ; return p.eof ( ) ? p : null ; }
private void checkCreateCommit ( com.google.inject.Provider < ? extends com.google.gerrit.server.CurrentUser > user , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.server.project.ProjectState projectState , com.google.gerrit.server.permissions.PermissionBackend.ForRef forRef ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { try { forRef.check ( RefPermission.UPDATE ) ; return ; } catch ( com.google.gerrit.extensions.restapi.AuthException denied ) { } if ( projectState.controlFor ( user.get ( ) ) . isReachableFromHeadsOrTags ( repo , commit ) ) { return ; } throw new com.google.gerrit.extensions.restapi.AuthException ( java.lang.String.format ( "%s for creating new commit object not permitted" , RefPermission.UPDATE.describeForException ( ) ) ) ; }
private static void configureDefault ( java.util.Map < java.lang.String , java.util.List < com.google.gerrit.common.data.PermissionRule > > res , com.google.gerrit.common.data.AccessSection section , java.lang.String capName , com.google.gerrit.common.data.GroupReference group ) { if ( ( section.getPermission ( capName ) ) == null ) { com.google.gerrit.common.data.PermissionRange.WithDefaults range = com.google.gerrit.common.data.GlobalCapability.getRange ( capName ) ; if ( range != null ) { com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule ( group ) ; rule.setRange ( range.getDefaultMin ( ) , range.getDefaultMax ( ) ) ; res.put ( capName , java.util.Collections.singletonList ( rule ) ) ; } } }
public void addPatchSets ( com.google.gerrit.server.data.ChangeAttribute ca , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSetApproval > > approvals , com.google.gerrit.common.data.LabelTypes labelTypes ) { addPatchSets ( ca , ps , approvals , false , null , labelTypes ) ; }
private java.util.Map < java.lang.String , java.lang.Integer > getSingleSchemaVersions ( ) { java.util.Map < java.lang.String , java.lang.Integer > singleVersions = new java.util.HashMap < > ( ) ; putSchemaVersion ( singleVersions , AccountSchemaDefinitions.INSTANCE ) ; putSchemaVersion ( singleVersions , ChangeSchemaDefinitions.INSTANCE ) ; putSchemaVersion ( singleVersions , GroupSchemaDefinitions.INSTANCE ) ; return singleVersions ; }
protected void doRun ( ) throws java.io.IOException , org.eclipse.jgit.lfs.errors.LfsException { java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksAction.LFS_LOCKS_URL.matcher ( context.path ) ; if ( matcher.matches ( ) ) { java.lang.String project = matcher.group ( 1 ) ; listLocks ( project ) ; } throw new org.eclipse.jgit.lfs.errors.LfsException ( ( "no repository at " + ( context.path ) ) ) ; }
static com.google.gerrit.server.patch.ComparisonType readFrom ( java.io.InputStream in ) throws java.io.IOException { int p = com.google.gerrit.server.ioutil.BasicSerialization.readVarInt32 ( in ) ; java.lang.Integer parentNum = ( p > 0 ) ? p : null ; boolean autoMerge = ( com.google.gerrit.server.ioutil.BasicSerialization.readVarInt32 ( in ) ) != 0 ; return new com.google.gerrit.server.patch.ComparisonType ( parentNum , autoMerge ) ; }
public com.googlesource.gerrit.plugins.imagare.GetConfig.ConfigInfo apply ( com.google.gerrit.server.config.ConfigResource resource ) { com.googlesource.gerrit.plugins.imagare.GetConfig.ConfigInfo info = new com.googlesource.gerrit.plugins.imagare.GetConfig.ConfigInfo ( ) ; info.defaultProject = com.google.common.base.Objects.firstNonNull ( cfg.getString ( "defaultProject" ) , "All-Projects" ) ; info.linkDecoration = cfg.getEnum ( "linkDecoration" , LinkDecoration.NONE ) ; if ( LinkDecoration.NONE.equals ( info.linkDecoration ) ) { info.linkDecoration = null ; } return info ; }
public void setUp ( ) throws java.lang.Exception { project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; }
private void initMode ( ) { mode.addItem ( "" , "" ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String > e : com.google.gerrit.client.diff.PreferencesBox.NAME_TO_MODE.entrySet ( ) ) { mode.addItem ( e.getKey ( ) , e.getValue ( ) ) ; } }
public boolean isOwner ( ) { if ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) { return true ; } if ( ( ! ( RefRight.ALL.equals ( getRefName ( ) ) ) ) && ( getProjectControl ( ) . isOwner ( ) ) ) { return true ; } return false ; }
public void generatesExpectedMessage ( ) throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig ( ) ; mockEvent.change = com.google.common.base.Suppliers.ofInstance ( mockChange ) ; mockEvent.author = com.google.common.base.Suppliers.ofInstance ( mockAccount ) ; mockEvent.comment = "This is the first line\nAnd the second line." ; mockChange.number = 1234 ; mockChange.project = "testproject" ; mockChange.branch = "master" ; mockChange.url = "https://change/" ; mockChange.owner = mockOwner ; mockOwner.name = "Owner" ; mockAccount.name = "Unit Tester" ; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator ; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance ( mockEvent , config ) ; java.lang.String expectedResult ; expectedResult = "{\n" + ( ( ( ( ( ( ( ( ( ( ( ( " \"channel\": \"#testchannel\",\n" + " \"attachments\": [\n" ) + " {\n" ) + " \"fallback\": \"Unit Tester commented on - testproject (master) - https://change/ - This is the first line\nAnd the second line.\",\n" ) + " \"pretext\": \"Unit Tester commented on\",\n" ) + " \"title\": \"testproject (master) - change 1234\",\n" ) + " \"title_link\": \"https://change/\",\n" ) + " \"text\": \"This is the first line\n" ) + "And the second line.\",\n" ) + " \"color\": \"good\"\n" ) + " }\n" ) + " ]\n" ) + "}\n" ) ; java.lang.String actualResult ; actualResult = messageGenerator.generate ( ) ; org.junit.Assert.assertThat ( actualResult , org.hamcrest.core.Is.is ( org.hamcrest.CoreMatchers.equalTo ( expectedResult ) ) ) ; }
private void setDefaultRenderer ( javax.servlet.FilterConfig filterConfig ) { if ( ( renderer ) == null ) { renderer = new com.google.gitiles.DefaultRenderer ( ( ( filterConfig.getServletContext ( ) . getContextPath ( ) ) + ( com.google.gitiles.GitilesServlet.STATIC_PREFIX ) ) , com.google.common.collect.FluentIterable.from ( java.util.Arrays.asList ( config.getStringList ( "gitiles" , null , "customTemplates" ) ) ) . transform ( new com.google.gitiles.Renderer.FileUrlMapper ( ) ) , com.google.common.base.Objects.firstNonNull ( config.getString ( "gitiles" , null , "siteTitle" ) , "Gitiles" ) ) ; } }
private void doPerformAction ( java.lang.String issueKey , java.lang.String actionName ) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException , java.io.IOException { log.debug ( "Trying to perform action: {} on issue {}" , actionName , issueKey ) ; boolean ret = client ( ) . doTransition ( issueKey , actionName ) ; if ( ret ) { log.debug ( "Action {} successful on Issue {}" , actionName , issueKey ) ; } else { log.debug ( "Action {} on Issue {} not possible" , actionName , issueKey ) ; } }
private void printTree ( final com.google.gerrit.sshd.commands.TreeNode node , final int level , final boolean isLast ) { printNode ( node , level , isLast ) ; final java.util.SortedSet < ? extends com.google.gerrit.sshd.commands.TreeNode > childNodes = node.getChildren ( ) ; int i = 0 ; final int size = childNodes.size ( ) ; for ( final com.google.gerrit.sshd.commands.TreeNode childNode : childNodes ) { final boolean isLastChild = ( ++ i ) == size ; printTree ( childNode , ( level + 1 ) , isLastChild ) ; } }
public void testRejectJavaScript_AnchorHref ( ) { final java.lang.String href = "javascript:window.close();" ; try { new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) . openAnchor ( ) . setAttribute ( "href" , href ) ; org.junit.Assert.fail ( "accepted javascript in a href" ) ; } catch ( java.lang.RuntimeException e ) { org.junit.Assert.assertEquals ( ( "javascript unsafe in href: " + href ) , e.getMessage ( ) ) ; } }
static void call ( final com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision ) { com.google.gerrit.client.changes.ChangeApi.rebase ( id.get ( ) , revision , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; } } ) ; }
public int compareTo ( com.google.gerrit.server.notedb.ChangeRebuilder.Event other ) { return com.google.common.collect.ComparisonChain.start ( ) . compare ( com.google.gerrit.server.notedb.ChangeRebuilder.round ( when ) , com.google.gerrit.server.notedb.ChangeRebuilder.round ( other.when ) ) . compare ( who.get ( ) , other.who.get ( ) ) . compare ( psId.get ( ) , other.psId.get ( ) ) . result ( ) ; }
public void run ( ) { java.lang.String mode = ( ( m != null ) && ( ! ( m.isEmpty ( ) ) ) ) ? m : null ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "mode" , mode ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "mode" , mode ) ; }
public void testRelativeAlternateLocation ( ) { configMock = org.easymock.EasyMock.createNiceMock ( com.google.gerrit.server.config.RepositoryConfig.class ) ; org.easymock.EasyMock.expect ( configMock.getAllBasePaths ( ) ) . andReturn ( java.util.Arrays.asList ( java.nio.file.Paths.get ( "repos" ) ) ) . anyTimes ( ) ; org.easymock.EasyMock.replay ( configMock ) ; repoManager = new com.google.gerrit.server.git.MultiBaseLocalDiskRepositoryManager ( site , cfg , configMock ) ; }
public void noExternalIds ( ) throws java.lang.Exception { db.accountExternalIds ( ) . delete ( db.accountExternalIds ( ) . byAccount ( user.getAccountId ( ) ) ) ; reloadUser ( ) ; com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKeys.validKeyWithSecondUserId ( ) ; com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create ( ) . setExpectedUser ( user ) . disableTrust ( ) ; assertProblems ( checker.check ( key.getPublicKey ( ) ) , Status.BAD , ( "No identities found for user; check" + " http://test/#/settings/web-identities" ) ) ; checker = checkerFactory.create ( ) . disableTrust ( ) ; assertProblems ( checker.check ( key.getPublicKey ( ) ) , Status.BAD , "Key is not associated with any users" ) ; db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getAccountId ( ) , com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey ( key.getPublicKey ( ) ) ) ) ) ; reloadUser ( ) ; assertProblems ( checker.check ( key.getPublicKey ( ) ) , Status.BAD , "No identities found for user" ) ; }
public void signAgreement ( java.lang.String agreementName ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.AgreementInput input = new com.google.gerrit.extensions.common.AgreementInput ( ) ; input.name = agreementName ; putAgreement.apply ( account , input ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot sign agreement" , e ) ; } }
public static com.google.gerrit.reviewdb.client.Change.Id fromRef ( final java.lang.String ref ) { return PatchSet.Id.fromRef ( ref ) . getParentKey ( ) ; }
private void insertDummyApproval ( final com.google.gerrit.server.git.ReceiveCommits.ReplaceResult result , final com.google.gerrit.reviewdb.Account.Id forAccount , final com.google.gerrit.reviewdb.ApprovalCategory.Id catId , final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { insertDummyApproval ( result.change , result.patchSet.getId ( ) , forAccount , catId , db ) ; }
protected void configure ( ) { factory ( AbandonChange.Factory.class ) ; factory ( ChangeDetailFactory.Factory.class ) ; factory ( PatchSetDetailFactory.Factory.class ) ; factory ( PatchSetPublishDetailFactory.Factory.class ) ; factory ( SubmitAction.Factory.class ) ; }
private void doAssertApproval ( int expected , com.google.gerrit.extensions.common.ChangeInfo c ) { com.google.gerrit.extensions.common.LabelInfo cr = c.labels.get ( "Code-Review" ) ; org.junit.Assert.assertEquals ( ( - 1 ) , ( ( int ) ( cr.defaultValue ) ) ) ; org.junit.Assert.assertEquals ( 1 , cr.all.size ( ) ) ; org.junit.Assert.assertEquals ( "Administrator" , cr.all.get ( 0 ) . name ) ; org.junit.Assert.assertEquals ( expected , cr.all.get ( 0 ) . value.intValue ( ) ) ; }
public boolean canEditTopicName ( ) { if ( getChange ( ) . getStatus ( ) . isOpen ( ) ) { return ( ( ( ( isOwner ( ) ) || ( getRefControl ( ) . isOwner ( ) ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ) || ( getRefControl ( ) . canEditTopicName ( ) ) ; } else { return getRefControl ( ) . canForceEditTopicName ( ) ; } }
public void groupNamesRefIsMissing ( ) throws java.lang.Exception { java.util.List < com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo > problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes ( allUsersRepo , "g-1" , new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( "uuid-1" ) ) ; com.google.common.truth.Truth.assertThat ( problems ) . containsExactly ( com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo.warning ( "Group with name 'g-1' doesn't exist in the list of all names" ) ) ; }
private void streamFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { java.io.File f = resolveFile ( req ) ; res.setStatus ( HttpServletResponse.SC_OK ) ; res.setContentType ( "application/octet-stream" ) ; res.setContentLength ( ( ( int ) ( f.length ( ) ) ) ) ; java.io.OutputStream out = res.getOutputStream ( ) ; try ( java.io.InputStream in = new java.io.FileInputStream ( f ) ) { com.google.common.io.ByteStreams.copy ( in , out ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.projectListTitle ( ) ) ; projects = new com.google.gerrit.client.admin.ProjectListScreen.ProjectTable ( ) ; projects.setSavePointerId ( Link.ADMIN_PROJECTS ) ; add ( projects ) ; final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel ( ) ; fp.setStyleName ( "gerrit-AddSshKeyPanel" ) ; fp.add ( new com.google.gerrit.client.ui.SmallHeading ( Util.C.headingCreateGroup ( ) ) ) ; }
public void setUp ( ) { java.lang.String tz = "US/Eastern" ; systemTimeZoneProperty = java.lang.System.setProperty ( "user.timezone" , tz ) ; systemTimeZone = java.util.TimeZone.getDefault ( ) ; java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( tz ) ) ; long maxMs = com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS ; com.google.common.truth.Truth.assertThat ( maxMs ) . isGreaterThan ( 1000L ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( ( maxMs * 2 ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) ; accountId = new com.google.gerrit.reviewdb.client.Account.Id ( 100 ) ; }
private static final java.net.InetSocketAddress newPort ( ) throws java.io.IOException { java.net.ServerSocket s = new java.net.ServerSocket ( 0 , 0 , java.net.InetAddress.getLocalHost ( ) ) ; try { return ( ( java.net.InetSocketAddress ) ( s.getLocalSocketAddress ( ) ) ) ; } finally { s.close ( ) ; } }
void display ( final java.util.List < com.google.gerrit.reviewdb.client.Branch > result ) { canDelete = false ; while ( 1 < ( table.getRowCount ( ) ) ) table.removeRow ( ( ( table.getRowCount ( ) ) - 1 ) ) ; for ( final com.google.gerrit.reviewdb.client.Branch k : result ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; applyDataRowStyle ( row ) ; populate ( row , k ) ; } }
public com.google.common.base.Optional < com.googlesource.gerrit.plugins.manager.gson.SmartJson > getOptional ( java.lang.String fieldName ) { if ( ( ( jsonElem ) != null ) && ( ( jsonElem.getAsJsonObject ( ) . get ( fieldName ) ) != null ) ) { return com.google.common.base.Optional.of ( com.googlesource.gerrit.plugins.manager.gson.SmartJson.of ( jsonElem.getAsJsonObject ( ) . get ( fieldName ) ) ) ; } else { return com.google.common.base.Optional.absent ( ) ; } }
public void testParseNonVisibleCommitSha ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit other = repo.commit ( ) . create ( ) ; repo.branch ( "master" ) . commit ( ) . create ( ) ; assertEquals ( null , parser.parse ( other.name ( ) ) ) ; repo.branch ( "other" ) . update ( other ) ; assertEquals ( new com.google.gitiles.RevisionParser.Result ( com.google.gitiles.Revision.peeled ( other.name ( ) , other ) ) , parser.parse ( other.name ( ) ) ) ; }
private org.eclipse.jgit.notes.NoteMap loadRejectCommitsMap ( ) throws java.io.IOException { java.lang.String rejectNotes = "refs/meta/reject-commits" ; try { org.eclipse.jgit.lib.Ref ref = repo.getRef ( rejectNotes ) ; if ( ref == null ) { return null ; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk ( ) ; org.eclipse.jgit.revwalk.RevCommit map = rw.parseCommit ( ref.getObjectId ( ) ) ; return org.eclipse.jgit.notes.NoteMap.read ( rw.getObjectReader ( ) , map ) ; } catch ( java.io.IOException badMap ) { throw new java.io.IOException ( ( "Cannot load " + rejectNotes ) , badMap ) ; } }
private byte [ ] indexRowKey ( com.google.gwtorm.nosql.IndexFunction < T > f , T obj ) { com.google.gwtorm.nosql.IndexKeyBuilder b = new com.google.gwtorm.nosql.IndexKeyBuilder ( ) ; b.add ( com.google.gwtorm.nosql.generic.GenericAccess.getRelationName ( ) ) ; b.add ( '.' ) ; b.add ( f.getName ( ) ) ; b.delimiter ( ) ; f.encode ( b , obj ) ; b.delimiter ( ) ; com.google.gwtorm.nosql.generic.GenericAccess.getKeyIndex ( ) . encode ( b , obj ) ; return b.toByteArray ( ) ; }
private org.eclipse.jetty.server.Handler appHandler ( ) { org.eclipse.jetty.servlet.ServletContextHandler handler = new org.eclipse.jetty.servlet.ServletContextHandler ( ) ; handler.setContextPath ( "" ) ; handler.addServlet ( new org.eclipse.jetty.servlet.ServletHolder ( new com.google.gitiles.GitilesServlet ( ) ) , "/*" ) ; return handler ; }
private void save ( com.google.gerrit.server.git.ProjectConfig pc ) throws java.lang.Exception { try ( com.google.gerrit.server.git.meta.MetaDataUpdate md = metaDataUpdateFactory.create ( pc.getProject ( ) . getNameKey ( ) , user ) ) { pc.commit ( md ) ; projectCache.evict ( pc.getProject ( ) . getNameKey ( ) ) ; } }
public java.lang.String format ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.UnsupportedEncodingException { com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatter f = new com.googlesource.gerrit.plugins.xdocs.formatter.MarkdownFormatter ( ) ; if ( ! ( cfg.getBoolean ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_ALLOW_HTML , false ) ) ) { f.suppressHtml ( ) ; } byte [ ] b = f.markdownToDocHtml ( raw , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; return new java.lang.String ( b , java.nio.charset.StandardCharsets.UTF_8 ) ; }
private void doGeneratePassword ( ) { if ( ( id ) != null ) { enableUI ( false ) ; Util.ACCOUNT_SEC.generatePassword ( id.getKey ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.reviewdb.client.AccountExternalId > ( ) { public void onSuccess ( final com.google.gerrit.reviewdb.client.AccountExternalId result ) { display ( result ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { enableUI ( true ) ; } } ) ; } }
private static void install ( com.google.gwt.core.client.JavaScriptObject cb , com.google.gerrit.client.api.JsUiPlugin p ) { try { com.google.gerrit.client.api.ApiGlue.pluginName = p.name ( ) ; com.google.gerrit.client.api.ApiGlue.invoke ( cb , p ) ; } finally { com.google.gerrit.client.api.ApiGlue.pluginName = null ; } }
public void testWithAnInvalidSection ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject ( "a" ) ; com.google.gerrit.reviewdb.client.Project.NameKey p2 = createProject ( "b" ) ; com.google.gerrit.reviewdb.client.Project.NameKey p3 = createProject ( "d" ) ; com.google.gerrit.reviewdb.client.Project.NameKey p4 = createProject ( "e" ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.fromText ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( "\n" + ( ( "[submodule \"a\"]\n" + " path = a\n" ) + " url = ssh://localhost/" ) ) + ( p1.get ( ) ) ) + "\n" ) + " branch = .\n" ) + "[submodule \"b\"]\n" ) + " url = http://localhost:80/" ) + ( p2.get ( ) ) ) + "\n" ) + " branch = master\n" ) + "[submodule \"c\"]\n" ) + " path = c\n" ) + " branch = .\n" ) + "[submodule \"d\"]\n" ) + " path = d-parent/the-d-folder\n" ) + " url = ssh://localhost/" ) + ( p3.get ( ) ) ) + "\n" ) + "[submodule \"e\"]\n" ) + " path = e\n" ) + " url = ssh://localhost/" ) + ( p4.get ( ) ) ) + "\n" ) + " branch = refs/heads/master\n" ) ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expected = com.google.common.collect.Sets.newHashSet ( new com.google.gerrit.reviewdb.client.SubmoduleSubscription ( targetBranch , new com.google.gerrit.reviewdb.client.Branch.NameKey ( p1 , "master" ) , "a" ) , new com.google.gerrit.reviewdb.client.SubmoduleSubscription ( targetBranch , new com.google.gerrit.reviewdb.client.Branch.NameKey ( p4 , "master" ) , "e" ) ) ; com.google.common.truth.Truth.assertThat ( res ) . containsExactlyElementsIn ( expected ) ; }
public void testPreformat4 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest.html ( " Q\n <R>\n S\n\nB" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( ( ( ( ( ( "<p>" + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest.pre ( " Q" ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest.pre ( " &lt;R&gt;" ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyPreformatTest.pre ( " S" ) ) ) + "</p>" ) + "<p>B</p>" ) , n.asString ( ) ) ; }
protected boolean canReload ( ) { java.util.jar.Attributes main = manifest.getMainAttributes ( ) ; java.lang.String v = main.getValue ( "Gerrit-ReloadMode" ) ; if ( ( com.google.common.base.Strings.isNullOrEmpty ( v ) ) || ( "reload" . equalsIgnoreCase ( v ) ) ) { return true ; } else if ( "restart" . equalsIgnoreCase ( v ) ) { return false ; } else { PluginLoader.log.warn ( java.lang.String.format ( "Plugin %s has invalid Gerrit-ReloadMode %s; assuming restart" , getName ( ) , v ) ) ; return false ; } }
private java.lang.String n ( com.google.gerrit.common.data.GroupDescription.Basic a ) { if ( a == null ) { return "" ; } java.lang.String n = a.getName ( ) ; if ( ( n != null ) && ( ( n.length ( ) ) > 0 ) ) { return n ; } return a.getGroupUUID ( ) . get ( ) ; }
private java.util.Set < java.lang.String > getManifestProjects ( java.lang.String fromBranch , java.lang.String toBranch ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException { java.util.Map < java.lang.String , java.lang.Object > toBranchConfig = config.getMergeConfig ( fromBranch , toBranch ) ; java.util.Map < java.lang.String , java.lang.String > manifestProjectInfo = getManifestInfoFromConfig ( toBranchConfig ) ; return getManifestProjectsForBranch ( manifestProjectInfo , toBranch ) ; }
protected void configureServlets ( ) { com.googlesource.gerrit.plugins.gitblit.GitBlitModule.log.info ( "Configuring servlet and filters" ) ; bind ( com.gitblit.IUserService.class ) . to ( com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class ) ; bind ( com.googlesource.gerrit.plugins.gitblit.app.GerritGitBlit.class ) ; serve ( "/pages/*" ) . with ( com.googlesource.gerrit.plugins.gitblit.WrappedPagesServlet.class ) ; serve ( "/feed/*" ) . with ( com.googlesource.gerrit.plugins.gitblit.WrappedSyndicationServlet.class ) ; filter ( "/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.class ) ; filter ( "/pages/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.WrappedPagesFilter.class ) ; filter ( "/feed/*" ) . through ( com.googlesource.gerrit.plugins.gitblit.WrappedSyndicationFilter.class ) ; }
private void assertInvalid ( final java.lang.String in ) { exception.expect ( java.lang.IllegalArgumentException.class ) ; exception.expectMessage ( ( "Invalid email address: " + in ) ) ; com.google.gerrit.server.mail.Address.parse ( in ) ; }
public void visit ( org.pegdown.ast.WikiLinkNode node ) { java.lang.String text = node.getText ( ) ; java.lang.String path = ( text.replace ( ' ' , '-' ) ) + ".md" ; html.open ( "a" ) . attribute ( "href" , href ( path ) ) . appendAndEscape ( text ) . close ( "a" ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gerrit.httpd.rpc.account.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.AccountGroup group = db.accountGroups ( ) . get ( groupId ) ; assertAmGroupOwner ( db , group ) ; group.setExternalNameKey ( bindTo ) ; db.accountGroups ( ) . update ( java.util.Collections.singleton ( group ) ) ; groupCache.evict ( group ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public void fill ( ) throws com.google.gwtorm.server.OrmException { try { directory.fillAccountInfo ( com.google.common.collect.Iterables.concat ( created.values ( ) , provided ) , com.google.gerrit.server.account.AccountInfo.Loader.DETAILED_OPTIONS ) ; } catch ( com.google.gerrit.server.account.AccountDirectory.DirectoryException e ) { com.google.common.base.Throwables.propagateIfPossible ( e.getCause ( ) , com.google.gwtorm.server.OrmException.class ) ; throw new com.google.gwtorm.server.OrmException ( e ) ; } }
private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gerrit.reviewdb.client.Account.Id reviewerId ) { com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id = com.google.common.collect.Iterables.getLast ( ctl.getLabelTypes ( ) . getLabelTypes ( ) ) . getLabelId ( ) ; com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval ( new com.google.gerrit.reviewdb.client.PatchSetApproval.Key ( patchSetId , reviewerId , id ) , ( ( short ) ( 0 ) ) ) ; dummyApproval.cache ( ctl.getChange ( ) ) ; return dummyApproval ; }
private void assertIncludes ( java.lang.String group , java.lang.String ... includes ) throws java.lang.Exception { java.lang.Iterable < java.lang.String > actualNames = com.google.common.collect.Iterables.transform ( gApi.groups ( ) . id ( group ) . includedGroups ( ) , new com.google.common.base.Function < com.google.gerrit.extensions.common.GroupInfo , java.lang.String > ( ) { @ java.lang.Override public java.lang.String apply ( com.google.gerrit.extensions.common.GroupInfo in ) { return in.name ; } } ) ; com.google.common.truth.Truth.assertThat ( actualNames ) . containsExactlyElementsIn ( java.util.Arrays.asList ( includes ) ) . inOrder ( ) ; }
public void testTagHeightWidth ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.openElement ( "img" ) ) ; org.junit.Assert.assertSame ( b , b.setHeight ( 100 ) ) ; org.junit.Assert.assertSame ( b , b.setWidth ( 42 ) ) ; org.junit.Assert.assertSame ( b , b.closeSelf ( ) ) ; org.junit.Assert.assertEquals ( "<img height=\"100\" width=\"42\" />" , b.asString ( ) ) ; }
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.extensions.client.ListChangesOption ... options ) throws java.io.IOException { return getChange ( admin , changeId , options ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.SshKeyInfo > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.AddSshKey.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) && ( ! ( self.get ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "not allowed to add SSH keys" ) ; } return apply ( rsrc.getUser ( ) , input ) ; }
public void parseTopic ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Topic: Some Topic" ) ) ) ; assertParseSucceeds ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Topic:" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( "\n" + "Patch-Set: 1\n" ) + "Topic: Some Topic\n" ) + "Topic: Other Topic" ) ) ) ; }
private java.util.List < com.google.gerrit.server.git.CodeReviewCommit > sort ( java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toSort , org.eclipse.jgit.revwalk.RevCommit initialTip ) throws com.google.gerrit.server.git.IntegrationException { try { return new com.google.gerrit.server.git.RebaseSorter ( args.rw , initialTip , args.canMergeFlag ) . sort ( toSort ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.IntegrationException ( "Commit sorting failed" , e ) ; } }
private void assertDeleteByRestSucceeds ( java.lang.String ref ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userRestSession.delete ( ( ( ( "/projects/" + ( project.get ( ) ) ) + "/branches/" ) + ref ) ) ; r.assertNoContent ( ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; branch ( ) . get ( ) ; }
public void check ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.common.truth.Truth.assertThat ( gApi.changes ( ) . id ( r.getChangeId ( ) ) . get ( ) . problems ) . isNull ( ) ; com.google.common.truth.Truth.assertThat ( gApi.changes ( ) . id ( r.getChangeId ( ) ) . get ( java.util.EnumSet.of ( ListChangesOption.CHECK ) ) . problems ) . isEmpty ( ) ; }
private void display ( com.google.gerrit.reviewdb.client.AccountExternalId id ) { java.lang.String user ; java.lang.String pass ; if ( id != null ) { user = id.getSchemeRest ( ) ; pass = id.getPassword ( ) ; } else { user = null ; pass = null ; } this . id = id ; com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( user ) ; password.setText ( ( pass != null ? pass : "" ) ) ; password.setVisible ( ( pass != null ) ) ; enableUI ( true ) ; }
public void oneResult ( ) throws java.lang.Exception { java.util.List < org.eclipse.jgit.revwalk.RevCommit > commits = linearCommits ( 1 ) ; walk.markStart ( commits.get ( 0 ) ) ; com.google.gitiles.Paginator p = new com.google.gitiles.Paginator ( walk , 10 , null ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( commits.get ( 0 ) ) , com.google.common.collect.ImmutableList.copyOf ( p ) ) ; org.junit.Assert.assertNull ( p.getPreviousStart ( ) ) ; org.junit.Assert.assertNull ( p.getNextStart ( ) ) ; }
public void abandonWipChangeInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
public void setUp ( ) throws java.lang.Exception { repo = com.google.gerrit.acceptance.GitUtil.newTestRepository ( repoManager.openRepository ( project ) ) ; com.google.gerrit.server.git.ProjectConfig pc = projectCache.checkedGet ( allProjects ) . getConfig ( ) ; for ( com.google.gerrit.common.data.AccessSection sec : pc.getAccessSections ( ) ) { sec.removePermission ( Permission.READ ) ; } saveProjectConfig ( allProjects , pc ) ; }
private boolean inBranch ( final com.google.gerrit.reviewdb.client.Change change ) { if ( ( branch ) == null ) { return true ; } return change.getDest ( ) . get ( ) . equals ( branch ) ; }
private com.google.gerrit.extensions.common.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = new com.google.gerrit.extensions.common.ApprovalInfo ( id.get ( ) ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
public void testBlockRule_ParentBlocksChild ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/tags/*" ) ; com.google.gerrit.server.project.Util.grant ( util.getParentConfig ( ) , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , "refs/tags/*" ) . setBlock ( ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert.assertFalse ( "u can't force update tag" , u.controlForRef ( "refs/tags/V10" ) . canForceUpdate ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestApiException apply ( java.lang.Exception input ) { if ( input instanceof com.google.gerrit.extensions.restapi.RestApiException ) { return ( ( com.google.gerrit.extensions.restapi.RestApiException ) ( input ) ) ; } return new com.google.gerrit.extensions.restapi.RestApiException ( "Error inserting change/patchset" , input ) ; }
protected boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id to ) throws com.google.gwtorm.server.OrmException { return ( ( projectState ) == null ) || ( projectState.controlFor ( args.identifiedUserFactory.create ( to ) ) . controlFor ( args.db.get ( ) , change ) . isVisible ( args.db.get ( ) ) ) ; }
public void onAssigneeChanged ( com.google.gerrit.extensions.events.AssigneeChangedListener.Event ev ) { try { com.google.gerrit.reviewdb.client.Change change = getChange ( ev.getChange ( ) ) ; com.google.gerrit.server.events.AssigneeChangedEvent event = new com.google.gerrit.server.events.AssigneeChangedEvent ( change ) ; event.change = changeAttributeSupplier ( change ) ; event.changer = accountAttributeSupplier ( ev.getWho ( ) ) ; event.oldAssignee = accountAttributeSupplier ( ev.getOldAssignee ( ) ) ; dispatcher.get ( ) . postEvent ( change , event ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.events.StreamEventsApiListener.log.error ( "Failed to dispatch event" , e ) ; } }
public final int parseArguments ( final org.kohsuke.args4j.spi.Parameters params ) throws org.kohsuke.args4j.CmdLineException { final java.lang.String idString = params.getParameter ( 0 ) ; final com.google.gerrit.client.reviewdb.PatchSet.Id id ; try { id = PatchSet.Id.parse ( idString ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new org.kohsuke.args4j.CmdLineException ( owner , ( "Invalid patch set: " + idString ) ) ; } setter.addValue ( id ) ; return 1 ; }
public void parseTopic ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Patch-set: 1\n" ) + "Topic: Some Topic\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Patch-set: 1\n" ) + "Topic:\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( "\n" + "Patch-set: 1\n" ) + "Topic: Some Topic\n" ) + "Topic: Other Topic" ) ) ) ; }
public static java.lang.String messageUUID ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { final byte [ ] raw = new byte [ 8 ] ; com.google.gerrit.server.ChangeUtil.fill ( raw , db ) ; return org.eclipse.jgit.util.Base64.encodeBytes ( raw ) ; }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd , com.google.common.base.Optional < com.google.gerrit.reviewdb.client.PatchSet.Id > limitToPsId ) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create ( has ( com.google.gerrit.extensions.common.ListChangesOption.DETAILED_ACCOUNTS ) ) ; com.google.gerrit.server.change.ChangeJson.ChangeInfo res = toChangeInfo ( cd , limitToPsId ) ; accountLoader.fill ( ) ; return res ; }
public void want ( final java.lang.Iterable < com.google.gerrit.reviewdb.Account.Id > ids ) { for ( final com.google.gerrit.reviewdb.Account.Id id : ids ) { want ( id ) ; } }
java.lang.Runnable maybeNextVimSearch ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } } } ; }
private static java.lang.Process exec ( final org.eclipse.jgit.lib.Repository repo , final java.util.List < java.lang.String > args ) throws java.io.IOException { final java.lang.String [ ] argv = args.toArray ( new java.lang.String [ args.size ( ) ] ) ; return java.lang.Runtime.getRuntime ( ) . exec ( argv , null , repo.getDirectory ( ) ) ; }
private void sort ( java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toSort ) throws com.google.gerrit.server.git.MergeException { try { java.util.List < com.google.gerrit.server.git.CodeReviewCommit > sorted = new com.google.gerrit.server.git.RebaseSorter ( args.rw , args.alreadyAccepted , args.canMergeFlag ) . sort ( toSort ) ; toSort.clear ( ) ; toSort.addAll ( sorted ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.git.MergeException ( "Commit sorting failed" , e ) ; } }
private void assertLineChsEqual ( net.codemirror.lib.LineCharacter a , net.codemirror.lib.LineCharacter b ) { org.junit.Assert.assertEquals ( ( ( ( a.getLine ( ) ) + "," ) + ( a.getCh ( ) ) ) , ( ( ( b.getLine ( ) ) + "," ) + ( b.getCh ( ) ) ) ) ; }
protected void configureServlets ( ) { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ProjectAccessPathFilter.class ) ; if ( authConfig.isTrustContainerAuth ( ) ) { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ContainerAuthFilter.class ) ; } else { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ProjectDigestFilter.class ) ; } serve ( "/p/*" ) . with ( com.google.gerrit.httpd.ProjectServlet.class ) ; }
private void updateNoRpc ( final com.google.gerrit.common.data.PatchScript last ) { RpcStatus.INSTANCE.onRpcStart ( null ) ; com.google.gwt.user.client.DeferredCommand.addCommand ( new com.google.gwt.user.client.Command ( ) { @ java.lang.Override public void execute ( ) { try { onResult ( last , false ) ; } finally { RpcStatus.INSTANCE.onRpcComplete ( null ) ; } } } ) ; }
private org.apache.lucene.search.Query intQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { int value ; try { value = java.lang.Integer.valueOf ( p.getValue ( ) ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new com.google.gerrit.server.query.QueryParseException ( ( "not an integer: " + ( p.getValue ( ) ) ) ) ; } return new org.apache.lucene.search.TermQuery ( intTerm ( p.getOperator ( ) , value ) ) ; }
public static java.lang.String readFile ( final java.lang.Class < ? > context , final java.lang.String name ) throws java.io.IOException { final java.io.InputStream in = context.getResourceAsStream ( name ) ; if ( in == null ) { return null ; } try { return com.google.gerrit.httpd.HtmlDomUtil.asString ( in ) ; } catch ( java.io.IOException e ) { throw new java.io.IOException ( ( "Error reading " + name ) , e ) ; } }
private static void usage ( ) { java.lang.System.err.println ( "Usage:" ) ; java.lang.System.err.println ( " java -jar cafeteria.jar package:predicate" ) ; java.lang.System.err.println ( " java -jar cafeteria.jar predicate" ) ; java.lang.System.err.println ( " package: package name\n" ) ; java.lang.System.err.println ( " predicate: predicate name (only atom)" ) ; }
public void setUp ( ) throws java.lang.Exception { for ( java.lang.String name : com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) { project ( ) . branch ( name ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; } assertBranches ( com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES ) ; }
private void assertBranches ( java.util.List < java.lang.String > branches ) throws java.lang.Exception { java.util.List < java.lang.String > expected = com.google.common.collect.Lists.newArrayList ( "HEAD" , RefNames.REFS_CONFIG , "refs/heads/master" ) ; expected.addAll ( branches ) ; com.google.gerrit.acceptance.rest.project.BranchAssert.assertRefNames ( expected , project ( ) . branches ( ) . get ( ) ) ; }
protected void createProject ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey parent , boolean createEmptyCommit ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = name ; in.parent = ( parent != null ) ? parent.get ( ) : null ; in.createEmptyCommit = createEmptyCommit ; createProject ( in ) ; }
public void testCarriageReturn ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.performValidation ( repo , c , com.google.common.collect.Sets.newHashSet ( new java.lang.String [ ] { "" } ) ) ; com.google.common.truth.Truth.assertThat ( m ) . hasSize ( 1 ) ; java.util.List < com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage > expected = new java.util.ArrayList < > ( ) ; expected.add ( new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage ( "found carriage return (CR) character in file: foo.txt" , true ) ) ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsAllIn ( expected ) ; }
public void trailingSlashes ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s/foo/bar/" , "/c" , "/s" ) ) ) . isEqualTo ( "/foo/bar/" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s/foo/bar///" , "/c" , "/s" ) ) ) . isEqualTo ( "/foo/bar/" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s/foo%2Fbar/" , "/c" , "/s" ) ) ) . isEqualTo ( "/foo%2Fbar/" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s/foo%2Fbar///" , "/c" , "/s" ) ) ) . isEqualTo ( "/foo%2Fbar/" ) ; }
synchronized java.util.Set < com.google.gerrit.reviewdb.client.Change > addAll ( java.util.Collection < com.google.gerrit.reviewdb.client.Change > changes ) { java.util.Set < com.google.gerrit.reviewdb.client.Change > r = com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize ( changes.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Change c : changes ) { if ( pending.add ( c.getId ( ) ) ) { r.add ( c ) ; } } return r ; }
public static void restore ( int id , java.lang.String msg , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.Input input = com.google.gerrit.client.changes.ChangeApi.Input.create ( ) ; input.message ( com.google.gerrit.client.changes.ChangeApi.emptyToNull ( msg ) ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , "restore" ) . post ( input , cb ) ; }
public void testSinglePeeledTagText ( ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest.newRequest ( ) ; req.setPathInfo ( "/test/+refs/tags/atag" ) ; req.setQueryString ( "format=TEXT" ) ; com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse ( ) ; servlet.service ( req , res ) ; assertEquals ( 200 , res.getStatus ( ) ) ; assertEquals ( ( ( ( ( id ( "refs/tags/atag" ) ) + " refs/tags/atag\n" ) + ( peeled ( "refs/tags/atag" ) ) ) + " refs/tags/atag^{}\n" ) , res.getActualBodyString ( ) ) ; }
private void beforeCreateProject ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , java.io.IOException { com.google.gerrit.server.project.CreateProjectArgs args = new com.google.gerrit.server.project.CreateProjectArgs ( ) ; args.setProjectName ( name ) ; args.newParent = projectsCollection.get ( ) . parse ( parent.get ( ) ) . getControl ( ) ; for ( com.google.gerrit.server.validators.ProjectCreationValidationListener l : projectCreationValidationListeners ) { try { l.validateNewProject ( args ) ; } catch ( com.google.gerrit.server.validators.ValidationException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e.getMessage ( ) , e ) ; } } }
public void submitOnPushMergeConflict ( ) throws java.lang.Exception { org.eclipse.jgit.lib.ObjectId objectId = repo ( ) . getRef ( "HEAD" ) . getObjectId ( ) ; push ( "refs/heads/master" , "one change" , "a.txt" , "some content" ) ; testRepo.reset ( objectId ) ; grant ( Permission.SUBMIT , project , "refs/for/refs/heads/master" ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = push ( "refs/for/master%submit" , "other change" , "a.txt" , "other content" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null , admin ) ; r.assertMessage ( CommitMergeStatus.PATH_CONFLICT.getMessage ( ) ) ; }
private void preMerge ( ) throws com.google.gerrit.server.git.MergeException , com.google.gwtorm.server.OrmException { openBranch ( ) ; validateChangeList ( ) ; mergeTip = branchTip ; switch ( destProject.getSubmitType ( ) ) { case CHERRY_PICK : cherryPickChanges ( ) ; break ; case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : default : reduceToMinimalMerge ( ) ; mergeTopics ( ) ; markCleanMerges ( ) ; break ; } }
protected void init ( ) throws javax.mail.MessagingException { super . init ( ) ; lookupPriorReviewers ( ) ; add ( RecipientType.TO , reviewers ) ; add ( RecipientType.CC , extraCC ) ; rcptToAuthors ( RecipientType.CC ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.projects.Projects.class ) . to ( com.google.gerrit.server.api.projects.ProjectsImpl.class ) ; factory ( BranchApiImpl.Factory.class ) ; factory ( TagApiImpl.Factory.class ) ; factory ( ProjectApiImpl.Factory.class ) ; factory ( ChildProjectApiImpl.Factory.class ) ; }
public com.google.common.collect.ImmutableList < com.google.gerrit.reviewdb.client.AccountGroup > all ( ) { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return com.google.common.collect.ImmutableList.copyOf ( db.accountGroups ( ) . all ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.account.GroupCacheImpl.log.warn ( "Cannot list internal groups" , e ) ; return com.google.common.collect.ImmutableList.of ( ) ; } }
public static final java.lang.String shortName ( java.lang.String ref ) { return ref.startsWith ( com.google.gerrit.reviewdb.client.RefNames.REFS_HEADS ) ? ref.substring ( com.google.gerrit.reviewdb.client.RefNames.REFS_HEADS.length ( ) ) : ref ; }
private void parseAll ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { walk.markStart ( walk.parseCommit ( tip ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { parse ( commit ) ; } pruneReviewers ( ) ; }
public com.google.gerrit.server.plugins.PluginResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.lang.Exception { com.google.gerrit.server.plugins.Plugin p = loader.get ( com.google.gerrit.server.util.Url.decode ( id ) ) ; if ( p == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.plugins.PluginResource ( p ) ; }
public java.lang.String toRevision ( final com.google.gerrit.reviewdb.Project.NameKey project , final com.google.gerrit.reviewdb.PatchSet ps ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; com.google.gerrit.common.data.GitwebLink.p ( r , project ) ; com.google.gerrit.common.data.GitwebLink.a ( r , "commit" ) ; com.google.gerrit.common.data.GitwebLink.h ( r , ps ) ; return ( baseUrl ) + r ; }
public com.google.gerrit.httpd.rpc.patch.PatchDetailServiceImpl.PublishResult run ( com.google.gerrit.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doPublishComments ( psid , message , approvals , db , txn ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { new com.google.gerrit.client.changes.AbandonChangeDialog ( patchSet.getId ( ) , new com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Object > ( ) { public void onSuccess ( java.lang.Object result ) { actionsPanel.remove ( b ) ; fireOnSuggestRefresh ( ) ; } public void onFailure ( java.lang.Throwable caught ) { } } ) . center ( ) ; }
public void testCarriageReturnIgnoringBinaries ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithPseudoBinaries ( ) ; java.util.Set < java.lang.String > ignoreFiles = com.google.common.collect.Sets.newHashSet ( new java.lang.String [ ] { "iso" , "jpeg" } ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.performValidation ( repo , c , ignoreFiles ) ; com.google.common.truth.Truth.assertThat ( m ) . isEmpty ( ) ; }
public AccountResource.SshKey parse ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) && ( ! ( self.get ( ) . getCapabilities ( ) . canModifyAccount ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } return parse ( rsrc.getUser ( ) , id ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { onGutterClick ( cmLine ) ; }
public static void abandon ( int id , java.lang.String msg , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.MessageInput input = com.google.gerrit.client.changes.ChangeApi.MessageInput.create ( ) ; input.message ( com.google.gerrit.client.changes.ChangeApi.emptyToNull ( msg ) ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , "abandon" ) . post ( input , cb ) ; }
public static void query ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.changes.ChangeList > > callback , java.lang.String ... queries ) { assert ( queries.length ) >= 2 ; com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.changes.ChangeList.URI ) ; for ( java.lang.String q : queries ) { call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( q ) ) ; } com.google.gerrit.client.changes.ChangeList.addOptions ( call , ListChangesOption.LABELS ) ; call.get ( callback ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.SshHostKey > result ) { serverKeys.clear ( ) ; for ( final com.google.gerrit.common.data.SshHostKey keyInfo : result ) { serverKeys.add ( new com.google.gerrit.client.account.SshHostKeyPanel ( keyInfo ) ) ; } }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder ( final com.google.gerrit.server.patch.PatchList list , org.eclipse.jgit.lib.Repository git ) { final com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference ( diffPrefs ) ; final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get ( ) ; b.setRepository ( git , projectKey ) ; b.setChange ( change ) ; b.setDiffPrefs ( dp ) ; b.setTrees ( list.isAgainstParent ( ) , list.getOldId ( ) , list.getNewId ( ) ) ; return b ; }
public void testCreate_NotDirectory ( ) throws java.io.IOException { final java.nio.file.Path root = com.google.gerrit.server.config.SitePathsTest.random ( ) ; try { java.nio.file.Files.createFile ( root ) ; try { new com.google.gerrit.server.config.SitePaths ( root ) ; org.junit.Assert.fail ( "Did not throw exception" ) ; } catch ( java.nio.file.NotDirectoryException e ) { } } finally { java.nio.file.Files.delete ( root ) ; } }
private java.lang.String getCommand ( java.lang.String command , com.google.gitiles.RevisionParser.Result result , java.lang.String path ) { if ( ! ( com.google.gitiles.ViewFilter.CMD_AUTO.equals ( command ) ) ) { return command ; } else if ( ( result.getOldRevision ( ) ) != null ) { return com.google.gitiles.ViewFilter.CMD_DIFF ; } else { return com.google.gitiles.ViewFilter.CMD_SHOW ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doReloadPlugins ( ) ; }
public void testRefsHeads ( ) throws java.lang.Exception { repo.branch ( "refs/heads/foo" ) . commit ( ) . create ( ) ; repo.branch ( "refs/heads/refs/heads/foo" ) . commit ( ) . create ( ) ; java.util.Map < java.lang.String , ? > data = buildData ( ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( ref ( "/b/test/+/foo" , "foo" ) , ref ( "/b/test/+/refs/heads/refs/heads/foo" , "refs/heads/foo" ) ) , data.get ( "branches" ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.group.GroupIndexCollection.class ) ; }
public void delete ( com.google.gerrit.server.edit.ChangeEdit edit ) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange ( ) ; org.eclipse.jgit.lib.Repository repo = gitManager.openRepository ( change.getProject ( ) ) ; try { deleteRef ( repo , edit ) ; } finally { repo.close ( ) ; } }
public void init ( com.google.reviewit.app.ReviewItApp app , com.google.reviewit.app.Change change ) { ( ( com.google.reviewit.widget.ProjectBranchTopicAgeView ) ( findViewById ( R.id.projectBranchTopicAge ) ) ) . init ( change ) ; ( ( com.google.reviewit.widget.UserView ) ( findViewById ( R.id.owner ) ) ) . init ( app , change.info.owner ) ; com.google.gerrit.extensions.common.ChangeInfo info = change.info ; com.google.reviewit.util.WidgetUtil.setText ( findViewById ( R.id.subject ) , info.subject ) ; }
public void createProjectFooBar ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = name ( "foo" ) ; gApi.projects ( ) . name ( "bar" ) . create ( in ) ; }
public void addReviewerToReviewableChangeByOtherInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , other , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.owner , sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public java.lang.Iterable < com.google.gerrit.extensions.common.WebLinkInfo > getBranchLinks ( java.lang.String project , java.lang.String branch ) { java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > links = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.extensions.webui.BranchWebLink webLink : branchLinks ) { links.add ( new com.google.gerrit.extensions.common.WebLinkInfo ( webLink.getLinkName ( ) , webLink.getImageUrl ( ) , webLink.getBranchUrl ( project , branch ) , webLink.getTarget ( ) ) ) ; } return links ; }
public boolean equals ( final java.lang.Object o ) { return ( ( o instanceof com.google.gerrit.client.reviewdb.ProjectLeadGroup.Key ) && ( ( ( com.google.gerrit.client.reviewdb.ProjectLeadGroup.Key ) ( o ) ) . projectName.equals ( projectName ) ) ) && ( ( ( com.google.gerrit.client.reviewdb.ProjectLeadGroup.Key ) ( o ) ) . groupId.equals ( groupId ) ) ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > all ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( readFromGit ) { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.externalids.ExternalIdReader.all ( repo , com.google.gerrit.server.account.externalids.ExternalIdReader.readRevision ( repo ) ) ; } } return com.google.gerrit.server.account.externalids.ExternalId.from ( db.accountExternalIds ( ) . all ( ) . toList ( ) ) ; }
protected void onRequestSuggestions ( final com.google.gerrit.client.ui.Request request , final com.google.gerrit.client.ui.Callback done ) { final int suggestFrom = com.google.gerrit.client.Gerrit.getConfig ( ) . getSuggestFrom ( ) ; if ( ( suggestFrom == 0 ) || ( ( request.getQuery ( ) . length ( ) ) >= suggestFrom ) ) { _onRequestSuggestions ( request , done ) ; } }
com.google.gerrit.client.diff.DiffChunkInfo getFirst ( ) { return chunks.isEmpty ( ) ? null : chunks.get ( 0 ) ; }
private void assertDeleteForbidden ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( branch ( ) . get ( ) . canDelete ) . isNull ( ) ; exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "delete not permitted" ) ; branch ( ) . delete ( ) ; }
private final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk ( ) throws java.security.NoSuchProviderException , org.bouncycastle.openpgp.PGPException { final org.bouncycastle.openpgp.operator.bc.BcPGPDataEncryptorBuilder builder = new org.bouncycastle.openpgp.operator.bc.BcPGPDataEncryptorBuilder ( org.bouncycastle.openpgp.PGPEncryptedData.CAST5 ) . setSecureRandom ( prng ) ; org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator ( builder , true ) ; final org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator methodGenerator = new org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator ( dest ) ; cpk.addMethod ( methodGenerator ) ; return cpk ; }
private static java.lang.String extractTitleFromMarkdown ( java.util.jar.JarFile jar , java.util.jar.JarEntry entry ) throws java.io.IOException { java.lang.String charEnc = null ; java.util.jar.Attributes atts = entry.getAttributes ( ) ; if ( atts != null ) { charEnc = com.google.common.base.Strings.emptyToNull ( atts.getValue ( "Character-Encoding" ) ) ; } if ( charEnc == null ) { charEnc = "UTF-8" ; } return new com.google.gerrit.server.documentation.MarkdownFormatter ( ) . extractTitleFromMarkdown ( com.google.gerrit.httpd.plugins.HttpPluginServlet.readWholeEntry ( jar , entry ) , charEnc ) ; }
private java.lang.Class < T > generate ( com.google.gwtorm.schema.sql.SqlDialect dialect , final com.google.gwtorm.server.GeneratedClassLoader loader ) throws com.google.gwtorm.client.OrmException { return ( ( java.lang.Class < T > ) ( new com.google.gwtorm.jdbc.gen.SchemaGen ( loader , schemaModel , dialect ) . create ( ) ) ) ; }
public void hashtagsWithAccentedCharacters ( ) throws java.lang.Exception { java.lang.String commitMessage = "Jag #måste #öva på min #Svenska!\n\n" + "Jag behöver en #läkare." ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "måste" , "öva" , "Svenska" , "läkare" ) ) ; }
protected void service ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException , javax.servlet.ServletException { res.setHeader ( "Expires" , "Fri, 01 Jan 1980 00:00:00 GMT" ) ; res.setHeader ( "Pragma" , "no-cache" ) ; res.setHeader ( "Cache-Control" , "no-cache, must-revalidate" ) ; super . service ( req , res ) ; }
private java.util.List < com.google.gerrit.server.data.ChangeAttribute > executeSucessfullQuery ( java.lang.String query ) throws java.lang.Exception { java.lang.String rawResponse = sshSession.exec ( query ) ; com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( sshSession.getError ( ) ) . that ( sshSession.hasError ( ) ) . isFalse ( ) ; return getChanges ( rawResponse ) ; }
private static java.lang.String duration ( double ns ) { if ( ns < 0.5 ) { return null ; } java.lang.String suffix = "ns" ; if ( ns >= 1000.0 ) { ns /= 1000.0 ; suffix = "us" ; } if ( ns >= 1000.0 ) { ns /= 1000.0 ; suffix = "ms" ; } if ( ns >= 1000.0 ) { ns /= 1000.0 ; suffix = "s " ; } return java.lang.String.format ( "%4.1f%s" , ns , suffix ) ; }
private org.eclipse.jgit.lib.ObjectId writeTree ( org.eclipse.jgit.revwalk.RevTree srcTree , org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException , org.eclipse.jgit.errors.UnmergedPathException { try { newTree = readTree ( srcTree ) ; onSave ( commit ) ; return newTree.writeTree ( inserter ) ; } finally { newTree = null ; } }
protected void configure ( ) { install ( new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.ProjectWebLink.class ) . to ( com.googlesource.gerrit.plugins.xdocs.XDocProjectWebLink.class ) ; }
public void testInheritRead_AppendWithDenyOfRef ( ) { grant ( parent , com.google.gerrit.reviewdb.ApprovalCategory.READ , registered , "refs/*" , 1 ) ; grant ( local , com.google.gerrit.reviewdb.ApprovalCategory.READ , registered , "refs/heads/*" , 0 ) ; com.google.gerrit.server.project.ProjectControl u = user ( ) ; assertTrue ( "can read" , u.isVisible ( ) ) ; assertTrue ( "can read" , u.controlForRef ( "refs/master" ) . isVisible ( ) ) ; assertTrue ( "can read" , u.controlForRef ( "refs/tags/foobar" ) . isVisible ( ) ) ; assertTrue ( "no master" , u.controlForRef ( "refs/heads/master" ) . isVisible ( ) ) ; }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder ( com.google.gerrit.server.diff.PatchList list , org.eclipse.jgit.lib.Repository git ) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get ( ) ; b.setRepository ( git , notes.getProjectName ( ) ) ; b.setChange ( notes.getChange ( ) ) ; b.setDiffPrefs ( diffPrefs ) ; b.setTrees ( list.getComparisonType ( ) , list.getOldId ( ) , list.getNewId ( ) ) ; return b ; }
public com.google.gerrit.server.notedb.NoteDbUpdateManager setAllUsersRepo ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectInserter ins , com.google.gerrit.server.git.ChainedReceiveCommands cmds ) { com.google.common.base.Preconditions.checkState ( ( ( allUsersRepo ) == null ) , "allUsers repo already initialized" ) ; allUsersRepo = new com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo ( repo , rw , ins , cmds , false ) ; return this ; }
public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink ( int index , com.google.gerrit.client.patches.PatchScreen.Type patchType ) { for ( index -- ; index > ( - 1 ) ; index -- ) { com.google.gerrit.client.ui.InlineHyperlink link = createLink ( index , patchType , com.google.gwtexpui.safehtml.client.SafeHtml.asis ( Util.C.prevPatchLinkIcon ( ) ) , null ) ; if ( link != null ) { return link ; } } return null ; }
private void assertDeleteSucceeds ( ) throws java.lang.Exception { java.lang.String tagRev = tag ( ) . get ( ) . revision ; tag ( ) . delete ( ) ; eventRecorder.assertRefUpdatedEvents ( project.get ( ) , com.google.gerrit.acceptance.rest.project.DeleteTagIT.TAG , null , tagRev , tagRev , null ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; tag ( ) . get ( ) ; }
protected void configure ( ) { bind ( com.googlesource.gerrit.plugins.serviceuser.ServiceUserCollection.class ) ; child ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "serviceusers" ) . to ( com.googlesource.gerrit.plugins.serviceuser.ServiceUserCollection.class ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . build ( CreateServiceUser.Factory.class ) ) ; get ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "config" ) . to ( com.googlesource.gerrit.plugins.serviceuser.GetConfig.class ) ; put ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "config" ) . to ( com.googlesource.gerrit.plugins.serviceuser.PutConfig.class ) ; }
private com.google.gerrit.extensions.common.ChangeMessageInfo getLastMessage ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.ChangeMessageInfo lastMessage = com.google.common.collect.Iterables.getLast ( gApi.changes ( ) . id ( r.getChange ( ) . getId ( ) . get ( ) ) . get ( ) . messages , null ) ; com.google.common.truth.Truth.assertThat ( lastMessage ) . isNotNull ( ) ; return lastMessage ; }
protected void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.groups.GroupMap.all ( new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.groups.GroupMap > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; } } ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { java.lang.String projectName = com.google.gwt.http.client.URL.decode ( screen.getToken ( 1 ) ) ; java.lang.String fileName = com.google.gwt.http.client.URL.decode ( screen.getToken ( 2 ) ) ; screen.show ( new com.googlesource.gerrit.plugins.xdocs.client.XDocScreen ( projectName , "HEAD" , fileName ) ) ; }
void display ( final java.util.Map < com.google.gerrit.client.reviewdb.AccountGroup.Id , com.google.gerrit.client.reviewdb.AccountGroup > groups , final java.util.List < com.google.gerrit.client.reviewdb.ProjectRight > result ) { while ( 1 < ( table.getRowCount ( ) ) ) table.removeRow ( ( ( table.getRowCount ( ) ) - 1 ) ) ; for ( final com.google.gerrit.client.reviewdb.ProjectRight k : result ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; applyDataRowStyle ( row ) ; populate ( row , groups , k ) ; } }
private boolean expired ( java.sql.Timestamp created ) { if ( ( expireAfterWrite ) == 0 ) { return false ; } long age = ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) - ( created.getTime ( ) ) ; return ( 1000 * ( expireAfterWrite ) ) < age ; }
public void run ( ) { if ( cm.extras ( ) . hasActiveLine ( ) ) { com.google.gerrit.client.diff.UnifiedCommentGroup w = map ( cm.side ( ) ) . get ( ( ( cm.getLineNumber ( cm.extras ( ) . activeLine ( ) ) ) + 1 ) ) ; if ( w != null ) { w.openCloseLast ( ) ; } } }
public void run ( ) { store.put ( key , h ) ; }
public static com.google.gerrit.reviewdb.client.AccountDiffPreference createDefault ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.AccountDiffPreference p = new com.google.gerrit.reviewdb.client.AccountDiffPreference ( accountId ) ; p.setIgnoreWhitespace ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.IGNORE_NONE ) ; p.setTabSize ( 8 ) ; p.setLineLength ( 100 ) ; p.setSyntaxHighlighting ( true ) ; p.setShowWhitespaceErrors ( true ) ; p.setShowLineEndings ( true ) ; p.setIntralineDifference ( true ) ; p.setShowTabs ( true ) ; p.setContext ( com.google.gerrit.reviewdb.client.AccountDiffPreference.DEFAULT_CONTEXT ) ; p.setManualReview ( false ) ; return p ; }
public java.lang.String apply ( com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return id.toString ( ) ; }
protected com.google.gerrit.reviewdb.client.Change insert ( com.google.gerrit.server.change.ChangeInserter ins ) throws java.lang.Exception { try ( com.google.gerrit.server.git.BatchUpdate bu = updateFactory.create ( db , ins.getChange ( ) . getProject ( ) , ins.getUser ( ) , ins.getChange ( ) . getCreatedOn ( ) ) ) { bu.insertChange ( ins ) ; bu.execute ( ) ; return ins.getChange ( ) ; } }
private void loadDraftComments ( com.google.gerrit.reviewdb.client.Account.Id author ) throws com.google.gwtorm.server.OrmException { if ( ( ( draftCommentNotes ) == null ) || ( ! ( author.equals ( draftCommentNotes.getAuthor ( ) ) ) ) ) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes ( repoManager , migration , allUsers , getChangeId ( ) , author ) ; draftCommentNotes.load ( ) ; } }
private static void populateBottomMenu ( ) { final com.google.gwt.user.client.ui.RootPanel btmmenu = com.google.gwt.user.client.ui.RootPanel.get ( "gerrit_btmmenu" ) ; final java.lang.String vs = com.google.gerrit.client.Gerrit.getVersion ( ) ; final com.google.gwt.user.client.ui.HTML version = new com.google.gwt.user.client.ui.HTML ( com.google.gerrit.client.Gerrit.M.poweredBy ( vs ) ) ; version.setStyleName ( "gerrit-version" ) ; btmmenu.add ( version ) ; }
private com.google.gerrit.server.edit.ChangeEdit createEdit ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.project.ChangeControl changeControl , com.google.gerrit.reviewdb.client.PatchSet basePatchSet , org.eclipse.jgit.lib.ObjectId newEditCommitId , java.sql.Timestamp timestamp ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Change change = changeControl.getChange ( ) ; java.lang.String editRefName = getEditRefName ( change , basePatchSet ) ; updateReference ( repository , editRefName , org.eclipse.jgit.lib.ObjectId.zeroId ( ) , newEditCommitId , timestamp ) ; reindex ( change ) ; org.eclipse.jgit.revwalk.RevCommit newEditCommit = com.google.gerrit.server.edit.ChangeEditModifier.lookupCommit ( repository , newEditCommitId ) ; return new com.google.gerrit.server.edit.ChangeEdit ( change , editRefName , newEditCommit , basePatchSet ) ; }
public void patchSetObjectMissing ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( project , userId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.testutil.TestChanges.newPatchSet ( c.currentPatchSetId ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) , userId ) ; db.patchSets ( ) . insert ( java.util.Collections.singleton ( ps ) ) ; com.google.common.truth.Truth.assertThat ( checker.check ( c ) ) . containsExactly ( "Object missing: patch set 1: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) ; }
public void testTagDiv ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.openDiv ( ) ) ; org.junit.Assert.assertSame ( b , b.append ( "d<a>ta" ) ) ; org.junit.Assert.assertSame ( b , b.closeDiv ( ) ) ; org.junit.Assert.assertEquals ( "<div>d&lt;a&gt;ta</div>" , b.asString ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gwt.dom.client.Element row = getRow ( event.getNativeEvent ( ) . getEventTarget ( ) . < com.google.gwt.dom.client.Element > cast ( ) ) ; if ( row != null ) { movePointerTo ( ( ( startRow ) + ( com.google.gwt.user.client.DOM.getChildIndex ( body , row ) ) ) , false ) ; event.stopPropagation ( ) ; } }
public boolean canSubmit ( ) { return canPerform ( ApprovalCategory.SUBMIT , ( ( short ) ( 1 ) ) ) ; }
public java.util.List < java.lang.String > getMoreStable ( java.lang.String branch ) { int i = order.indexOf ( com.google.gerrit.server.git.BranchOrderSection.fullName ( branch ) ) ; if ( 0 <= i ) { return order.subList ( ( i + 1 ) , order.size ( ) ) ; } else { return com.google.common.collect.ImmutableList.of ( ) ; } }
public void onSuccess ( com.google.gerrit.client.change.RelatedChanges.RelatedInfo result ) { com.google.gerrit.client.change.RelatedChangesTab tab = tabs.get ( com.google.gerrit.client.change.RelatedChanges.RELATED_CHANGES ) ; tab.setTitle ( Resources.M.relatedChanges ( result.changes ( ) . length ( ) ) ) ; tab.setChanges ( info.project ( ) , revision , result.changes ( ) ) ; }
private void columnReviewed ( com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb , com.google.gerrit.client.diff.FileInfo info ) { sb.openTd ( ) . setStyleName ( com.google.gerrit.client.change.FileTable.R.css ( ) . reviewed ( ) ) ; if ( hasUser ) { sb.openElement ( "input" ) . setAttribute ( "title" , Resources.C.reviewedFileTitle ( ) ) . setAttribute ( "type" , "checkbox" ) . setAttribute ( "onclick" , ( ( ( ( com.google.gerrit.client.change.FileTable.REVIEWED ) + "(event," ) + ( info._row ( ) ) ) + ")" ) ) . closeSelf ( ) ; } sb.closeTd ( ) ; }
public org.eclipse.jgit.lib.Config load ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { java.io.File path = getPath ( ) ; if ( path == null ) { return null ; } org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository ( path ) ; try { load ( repo ) ; } finally { repo.close ( ) ; } return cfg ; }
public com.google.gerrit.reviewdb.client.AccountGroup get ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) { return byId.get ( groupId ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( ( user ) == null ) { if ( isSignedIn ( ) ) { user = identified.create ( val.getAccountId ( ) ) ; } else { user = anonymousProvider.get ( ) ; } } return user ; }
public synchronized void start ( ) { com.google.gerrit.server.plugins.PluginLoader.log.info ( ( "Loading plugins from " + ( pluginsDir.toAbsolutePath ( ) ) ) ) ; srvInfoImpl.state = ServerInformation.State.STARTUP ; rescan ( ) ; srvInfoImpl.state = ServerInformation.State.RUNNING ; if ( ( scanner ) != null ) { scanner.start ( ) ; } }
private void putSchemaVersion ( java.util.Map < java.lang.String , java.lang.Integer > singleVersions , com.google.gerrit.server.index.SchemaDefinitions < ? > schemaDef ) { java.lang.String schemaName = schemaDef.getName ( ) ; int version = cfg.getInt ( "index" , "lucene" , ( schemaName + "TestVersion" ) , ( - 1 ) ) ; if ( version > 0 ) { com.google.common.base.Preconditions.checkState ( ( ! ( singleVersions.containsKey ( schemaName ) ) ) , "version for schema %s was alreay set" , schemaName ) ; singleVersions.put ( schemaName , version ) ; } }
private java.lang.String getPluginCanonicalWebUrl ( java.lang.String name ) { java.lang.String url = java.lang.String.format ( "%s/plugins/%s/" , com.google.common.base.CharMatcher.is ( '/' ) . trimTrailingFrom ( urlProvider.get ( ) ) , name ) ; return url ; }
public void run ( ) { java.lang.String t = prefs.theme ( ) . name ( ) . toLowerCase ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "theme" , t ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "theme" , t ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > and ( java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > that ) { if ( ( that.size ( ) ) == 1 ) { return com.google.common.collect.Iterables.getOnlyElement ( that ) ; } return new com.google.gerrit.server.query.AndPredicate ( that ) ; }
protected void configureServlets ( ) { serve ( ( "/" + ( OpenIdServiceImpl.RETURN_URL ) ) ) . with ( com.google.gerrit.server.openid.OpenIdLoginServlet.class ) ; install ( new com.google.gerrit.server.http.RpcServletModule ( com.google.gerrit.server.rpc.UiRpcModule.PREFIX ) { @ java.lang.Override protected void configureServlets ( ) { rpc ( com.google.gerrit.server.openid.OpenIdServiceImpl.class ) ; } } ) ; }
public com.google.gerrit.extensions.common.ChangeInfo apply ( com.google.gerrit.server.change.ChangeResource req , final com.google.gerrit.extensions.api.changes.AbandonInput input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl control = req.getControl ( ) ; com.google.gerrit.server.IdentifiedUser caller = ( ( com.google.gerrit.server.IdentifiedUser ) ( control.getCurrentUser ( ) ) ) ; if ( ! ( control.canAbandon ( ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "abandon not permitted" ) ; } com.google.gerrit.reviewdb.client.Change change = abandon ( control , input.message , caller.getAccount ( ) ) ; return json.create ( ChangeJson.NO_OPTIONS ) . format ( change ) ; }
public void run ( ) { if ( ( prefs.context ( ) ) == ( com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT ) ) { contextEntireFile.setValue ( true ) ; } view.setContext ( prefs.context ( ) ) ; }
boolean isSubmit ( ) { return submit ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.SubmitInput in = com.google.gerrit.client.changes.ChangeApi.SubmitInput.create ( ) ; in.wait_for_merge ( true ) ; com.google.gerrit.client.changes.ChangeApi.api ( id , commit , "submit" ) . data ( in ) . post ( cb ) ; }
private void cleanInBackground ( ) { int cnt = java.lang.Math.max ( 0 , ( ( cleanupHandles.size ( ) ) - ( running.size ( ) ) ) ) ; if ( 0 < cnt ) { cleaner.get ( ) . clean ( cnt ) ; } }
private com.google.gerrit.server.account.AccountState toAccountState ( com.google.gson.JsonElement json ) { com.google.gson.JsonElement source = json.getAsJsonObject ( ) . get ( "_source" ) ; if ( source == null ) { source = json.getAsJsonObject ( ) . get ( "fields" ) ; } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( source.getAsJsonObject ( ) . get ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . getAsInt ( ) ) ; return accountCache.get ( ) . get ( id ) ; }
public void display ( com.google.gerrit.common.data.ChangeDetail changeDetail , java.lang.Boolean starred , java.lang.Boolean canEditCommitMessage , com.google.gerrit.reviewdb.client.PatchSetInfo info , com.google.gerrit.common.data.AccountInfoCache acc , com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord , com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor ) { infoBlock.display ( changeDetail , acc , submitTypeRecord ) ; messageBlock.display ( changeDetail.getChange ( ) . currentPatchSetId ( ) , starred , canEditCommitMessage , info.getMessage ( ) , commentLinkProcessor ) ; }
private com.google.inject.Injector createWebInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebModule.class ) ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebSshGlueModule.class ) ) ; return sysInjector.createChildInjector ( modules ) ; }
public void testPushForMasterAsDraft ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushForReviewIT.PushOneCommit push = new com.google.gerrit.acceptance.git.PushForReviewIT.PushOneCommit ( ) ; java.lang.String ref = "refs/drafts/master" ; org.eclipse.jgit.transport.PushResult r = push.to ( ref ) ; com.google.gerrit.acceptance.git.PushForReviewIT.assertOkStatus ( r , ref ) ; assertChange ( push.changeId , Change.Status.DRAFT , com.google.gerrit.acceptance.git.PushForReviewIT.PushOneCommit.SUBJECT , null ) ; push = new com.google.gerrit.acceptance.git.PushForReviewIT.PushOneCommit ( ) ; ref = "refs/for/master%draft" ; r = push.to ( ref ) ; com.google.gerrit.acceptance.git.PushForReviewIT.assertOkStatus ( r , ref ) ; assertChange ( push.changeId , Change.Status.DRAFT , com.google.gerrit.acceptance.git.PushForReviewIT.PushOneCommit.SUBJECT , null ) ; }
public com.google.gwt.user.client.ui.CheckBox getSyntaxHighlightingCheckBox ( ) { return syntaxHighlighting ; }
public void onSuccess ( T value ) { if ( failed ) { return ; } this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
private static void editTree ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation op , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.dircache.DirCacheEditor dce , org.eclipse.jgit.lib.ObjectInserter ins , java.lang.String path , byte [ ] content ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { switch ( op ) { case DELETE_ENTRY : dce.add ( new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath ( path ) ) ; break ; case CHANGE_ENTRY : case RESTORE_ENTRY : dce.add ( com.google.gerrit.server.edit.ChangeEditModifier.getPathEdit ( op , repo , rw , base , path , ins , content ) ) ; break ; } dce.finish ( ) ; }
void onLineWrapping ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.lineWrapping ( e.getValue ( ) ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "lineWrapping" , prefs.lineWrapping ( ) ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "lineWrapping" , prefs.lineWrapping ( ) ) ; BRANCH ( ee24b3 ) ; com.google.gerrit.client.diff.Adds a ; com.google.gerrit.client.diff.pref config ; com.google.gerrit.client.diff.lineWrapping to ; com.google.gerrit.client.diff.and Diff ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito.when ( config.getUrl ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.syncindex.HttpClientProviderTest.EMPTY ) ; org.mockito.Mockito.when ( config.getUser ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.syncindex.HttpClientProviderTest.EMPTY ) ; org.mockito.Mockito.when ( config.getPassword ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.syncindex.HttpClientProviderTest.EMPTY ) ; org.mockito.Mockito.when ( config.getConnectionTimeout ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.syncindex.HttpClientProviderTest.TIME_INTERVAL ) ; org.mockito.Mockito.when ( config.getSocketTimeout ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.syncindex.HttpClientProviderTest.TIME_INTERVAL ) ; }
public void basicLog ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch ( "HEAD" ) . commit ( ) . create ( ) ; repo.getRevWalk ( ) . parseBody ( commit ) ; com.google.gitiles.CommitJsonData.Log log = buildJson ( "/repo/+log" , com.google.gitiles.LogServletTest.LOG.getType ( ) , "" ) ; com.google.common.truth.Truth.assertThat ( log.log ) . hasSize ( 1 ) ; verifyJsonCommit ( log.log.get ( 0 ) , commit ) ; com.google.common.truth.Truth.assertThat ( log.log.get ( 0 ) . treeDiff ) . isNull ( ) ; }
private static com.google.common.base.Optional < com.google.gerrit.common.data.SubmitRecord > findOkRecord ( java.util.Collection < com.google.gerrit.common.data.SubmitRecord > in ) { return com.google.common.collect.Iterables.tryFind ( in , new com.google.common.base.Predicate < com.google.gerrit.common.data.SubmitRecord > ( ) { @ java.lang.Override public boolean apply ( com.google.gerrit.common.data.SubmitRecord input ) { return ( input.status ) == ( com.google.gerrit.common.data.SubmitRecord.Status.OK ) ; } } ) ; }
private void saveSubscribeSections ( org.eclipse.jgit.lib.Config rc ) { for ( com.google.gerrit.reviewdb.client.Project.NameKey p : subscribeSections.keySet ( ) ) { com.google.gerrit.common.data.SubscribeSection s = subscribeSections.get ( p ) ; for ( org.eclipse.jgit.transport.RefSpec r : s.getRefSpecs ( ) ) { rc.setString ( com.google.gerrit.server.git.ProjectConfig.SUBSCRIBE_SECTION , p.get ( ) , com.google.gerrit.server.git.ProjectConfig.SUBSCRIBE_REFS , r.toString ( ) ) ; } } }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( ( accessToken ) == null ? 0 : accessToken.hashCode ( ) ) ; result = ( prime * result ) + ( ( tokenType ) == null ? 0 : tokenType.hashCode ( ) ) ; return result ; }
private < T > T execute ( com.google.gerrit.server.update.RetryHelper.ActionType actionType , com.google.gerrit.server.update.RetryHelper.Action < T > action , com.google.gerrit.server.update.RetryHelper.Options opts , com.google.common.base.Predicate < java.lang.Throwable > exceptionPredicate ) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener ( ) ; try { com.github.rholder.retry.RetryerBuilder < T > retryerBuilder = createRetryerBuilder ( opts , exceptionPredicate ) ; retryerBuilder.withRetryListener ( listener ) ; return execute ( actionType , action , retryerBuilder.build ( ) ) ; } finally { metrics.attemptCounts.record ( actionType , listener.getAttemptCount ( ) ) ; } }
public static void zipFile ( java.io.File file , java.lang.String name , java.util.zip.ZipOutputStream zip ) throws java.io.IOException { zip.putNextEntry ( new java.util.zip.ZipEntry ( name ) ) ; try ( java.io.FileInputStream input = new java.io.FileInputStream ( file ) ) { com.google.common.io.ByteStreams.copy ( input , zip ) ; } zip.closeEntry ( ) ; }
public void addComment ( final java.lang.String issueId , final java.lang.String comment ) { if ( ! ( exists ( issueId ) ) ) { log.warn ( ( ( "Story " + issueId ) + " does not exist, nothing to update" ) ) ; return ; } try { client.addComment ( issueId , comment ) ; } catch ( java.io.IOException e ) { log.error ( ( "Error: could not add comment to issue " + issueId ) ) ; } log.info ( ( ( ( "Updated " + issueId ) + "with comment: " ) + comment ) ) ; }
private static java.lang.String nameOf ( java.lang.String name ) { if ( name.endsWith ( ".disabled" ) ) { name = name.substring ( 0 , name.lastIndexOf ( '.' ) ) ; } int ext = name.lastIndexOf ( '.' ) ; return 0 < ext ? name.substring ( 0 , ext ) : name ; }
protected void configureServlets ( ) { serve ( "/static/*" ) . with ( com.google.gerrit.httpd.raw.SiteStaticDirectoryServlet.class ) ; install ( new com.google.gerrit.server.cache.CacheModule ( ) { @ java.lang.Override protected void configure ( ) { cache ( com.google.gerrit.httpd.raw.StaticModule.CACHE , java.nio.file.Path.class , com.google.gerrit.httpd.raw.ResourceServlet.Resource.class ) . maximumWeight ( ( 1 << 20 ) ) . weigher ( ResourceServlet.Weigher.class ) ; } } ) ; }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder ( final com.google.gerrit.server.patch.PatchList list , org.eclipse.jgit.lib.Repository git ) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get ( ) ; b.setRepository ( git , project ) ; b.setChange ( change ) ; b.setDiffPrefs ( diffPrefs ) ; b.setTrees ( list.isAgainstParent ( ) , list.getOldId ( ) , list.getNewId ( ) ) ; return b ; }
public void onChangeAbandoned ( com.google.gerrit.extensions.events.ChangeAbandonedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo change = event.getChange ( ) ; java.lang.String revision = event.getRevision ( ) . commit.commit ; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.info ( "Detected revision {} abandoned on {}." , revision , change.project ) ; abandonDownstream ( change , revision ) ; }
protected void onStarClick ( final int row ) { final com.google.gerrit.client.data.ChangeInfo c = getChangeInfo ( row ) ; if ( ( c != null ) && ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ) { c.setStarred ( ( ! ( c.isStarred ( ) ) ) ) ; setStar ( row , c ) ; } }
public void parsePatchSetGroups ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( ( ( ( "\n" + "Patch-set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n" ) + "Subject: Change subject\n" ) + "Groups: a,b,c\n" ) + "Groups: d,e,f\n" ) ) ) ; }
public void simpleReadmeDoc ( ) throws java.lang.Exception { java.lang.String title = "DocServletTest simpleDoc" ; java.lang.String url = "http://daringfireball.net/projects/markdown/syntax" ; java.lang.String markdown = ( ( ( ( ( ( "# " + title ) + "\n" ) + "\n" ) + "Tests the rendering of " ) + "[Markdown](" ) + url ) + ")." ; repo.branch ( "master" ) . commit ( ) . add ( "README.md" , markdown ) . create ( ) ; java.lang.String html = buildHtml ( "/repo/+doc/master/README.md" ) ; org.junit.Assert.assertTrue ( html.contains ( ( ( "<title>" + title ) + "</title>" ) ) ) ; org.junit.Assert.assertTrue ( html.contains ( ( ( "<h1 id=\"DocServletTest-simpleDoc\">" + title ) + "</h1>" ) ) ) ; org.junit.Assert.assertTrue ( html.contains ( ( ( "<a href=\"" + url ) + "\">Markdown</a>" ) ) ) ; }
public void abandonReviewableChangeByOtherCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( other ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
public void doClaSignupHook ( com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.common.data.ContributorAgreement cla ) { if ( account != null ) { final java.util.List < java.lang.String > args = new java.util.ArrayList < > ( ) ; addArg ( args , "--submitter" , getDisplayName ( account ) ) ; addArg ( args , "--user-id" , account.getId ( ) . toString ( ) ) ; addArg ( args , "--cla-name" , cla.getName ( ) ) ; runHook ( claSignedHook , args ) ; } }
public static void createProject ( java.lang.String projectName , java.lang.String parent , java.lang.Boolean createEmptyCcommit , java.lang.Boolean permissionsOnly , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > asyncCallback ) { com.google.gerrit.client.projects.ProjectApi.ProjectInput input = com.google.gerrit.client.projects.ProjectApi.ProjectInput.create ( ) ; input.setName ( projectName ) ; input.setParent ( parent ) ; input.setPermissionsOnly ( permissionsOnly ) ; input.setCreateEmptyCommit ( createEmptyCcommit ) ; new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( projectName ) . ifNoneMatch ( ) . put ( input , asyncCallback ) ; }
public static synchronized void setClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert ( clockStep , clockStepUnit ) ; org.joda.time.DateTimeUtils.setCurrentMillisProvider ( new org.joda.time.DateTimeUtils.MillisProvider ( ) { @ java.lang.Override public long getMillis ( ) { return com.google.gerrit.testutil.TestTimeUtil.clockMs.getAndAdd ( com.google.gerrit.testutil.TestTimeUtil.clockStepMs ) ; } } ) ; }
public synchronized void onGitReferenceUpdated ( com.googlesource.gerrit.plugins.supermanifest.Event event ) { if ( event.getProjectName ( ) . equals ( allProjectsName.get ( ) ) ) { if ( event.getRefName ( ) . equals ( "refs/meta/config" ) ) { updateConfiguration ( ) ; } return ; } try { update ( event.getProjectName ( ) , event.getRefName ( ) , true ) ; } catch ( java.lang.Exception e ) { } }
public void assertHasPackFile ( com.google.gerrit.reviewdb.client.Project ... projects ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { for ( com.google.gerrit.reviewdb.client.Project.NameKey p : projects ) { com.google.common.truth.Truth.assert_ ( ) . withMessage ( ( ( "Project " + ( p.get ( ) ) ) + " has no pack files." ) ) . that ( getPackFiles ( p ) ) . isNotEmpty ( ) ; } }
public void blockOwner ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.DEVS , "refs/*" ) ; com.google.common.truth.Truth.assertThat ( user ( local , com.google.gerrit.server.project.Util.DEVS ) . isOwner ( ) ) . isFalse ( ) ; }
private void doDeleteRefRights ( final java.util.HashSet < com.google.gerrit.reviewdb.RefRight.Key > refRightIds ) { if ( ! ( refRightIds.isEmpty ( ) ) ) { Util.PROJECT_SVC.deleteRight ( projectName , refRightIds , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.common.data.ProjectDetail > ( ) { @ java.lang.Override public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { display ( result ) ; } } ) ; } }
private static org.apache.lucene.search.Query or ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { try { org.apache.lucene.search.BooleanQuery q = new org.apache.lucene.search.BooleanQuery ( ) ; for ( int i = 0 ; i < ( p.getChildCount ( ) ) ; i ++ ) { q.add ( com.google.gerrit.lucene.QueryBuilder.toQuery ( p.getChild ( i ) ) , org.apache.lucene.search.BooleanClause.Occur.SHOULD ) ; } return q ; } catch ( org.apache.lucene.search.BooleanQuery e ) { throw new com.google.gerrit.server.query.QueryParseException ( ( "cannot create query for index: " + p ) , e ) ; } }
public static boolean branchExists ( final com.google.gerrit.server.git.GitRepositoryManager repoManager , final com.google.gerrit.reviewdb.client.Branch.NameKey branch ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( branch.getParentKey ( ) ) ; try { return ( repo.getRef ( branch.get ( ) ) ) != null ; } finally { repo.close ( ) ; } }
private boolean isHttpTransformPatternrUndefined ( javax.servlet.FilterConfig config ) { return ( ( ( java.lang.System.getProperty ( com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.GLOBAL_HTTP_TRANSFORM_PATTERN ) ) == null ) && ( ( config.getServletContext ( ) . getInitParameter ( com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.GLOBAL_HTTP_TRANSFORM_PATTERN ) ) == null ) ) && ( ( config.getInitParameter ( com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.HTTP_TRANSFORM_PATTERN ) ) == null ) ; }
public void set ( java.lang.String key , com.google.gson.JsonObject event ) throws java.io.IOException { java.nio.file.Path replicationStatusPath = getReplicationStatusPath ( key ) ; java.nio.file.Files.write ( replicationStatusPath , event.toString ( ) . getBytes ( ) , java.nio.file.StandardOpenOption.TRUNCATE_EXISTING , java.nio.file.StandardOpenOption.CREATE , java.nio.file.StandardOpenOption.WRITE ) ; }
public com.google.gerrit.reviewdb.client.AuthType getAuthType ( ) { return authType ; }
private static boolean isUser ( com.googlecode.prolog_cafe.lang.Term who ) { return ( ( ( who.isStructure ( ) ) && ( ( who.arity ( ) ) == 1 ) ) && ( who.name ( ) . equals ( "user" ) ) ) && ( who.arg ( 0 ) . isInteger ( ) ) ; }
private void initCreateTxt ( ) { project = new com.google.gwtexpui.globalkey.client.NpTextBox ( ) ; project.setVisibleLength ( 50 ) ; project.addKeyPressHandler ( new com.google.gwt.event.dom.client.KeyPressHandler ( ) { @ java.lang.Override public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doCreateProject ( ) ; } } } ) ; }
public void onFailure ( java.lang.Throwable caught ) { com.google.gwt.core.client.GWT.log ( "myAccount failed" , caught ) ; }
public void run ( ) { unschedule ( e ) ; try { mergeImpl ( e.dest ) ; } finally { finish ( e.dest ) ; } }
public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < T > add ( com.google.inject.Key < T > key , T item ) { java.util.concurrent.atomic.AtomicReference < T > ref = new java.util.concurrent.atomic.AtomicReference < T > ( item ) ; items.add ( ref ) ; return new ReloadableHandle ( ref , key , item ) ; }
public void run ( ) { com.google.codereview.Main.LOG.info ( "Shutting down thread pool." ) ; pool.shutdown ( ) ; boolean waiting = true ; do { try { waiting = pool.awaitTermination ( 10 , java.util.concurrent.TimeUnit.SECONDS ) ; } catch ( java.lang.InterruptedException ie ) { } } while ( waiting ) ; com.google.codereview.Main.LOG.info ( "Thread pool shutdown." ) ; org.apache.log4j.LogManager.shutdown ( ) ; }
public java.util.Map < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Collection < com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType > > getProjectWatches ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = repoManager.openRepository ( allUsersName ) ; com.google.gerrit.server.account.WatchConfig watchConfig = new com.google.gerrit.server.account.WatchConfig ( accountId ) ) { watchConfig.load ( git ) ; return watchConfig.getProjectWatches ( ) ; } }
public boolean handles ( java.io.File srcFile ) { java.util.List < com.google.gerrit.server.plugins.ServerPluginProvider > providers = providersForHandlingPlugin ( srcFile ) ; switch ( providers.size ( ) ) { case 1 : return true ; case 0 : return false ; default : throw new com.google.gerrit.server.plugins.MultipleProvidersForPluginException ( srcFile , providers ) ; } }
private java.util.List < com.google.gerrit.reviewdb.client.AccountGroup.UUID > collectGroups ( org.eclipse.jgit.lib.ProgressMonitor progress ) throws com.google.gwtorm.server.OrmException { progress.beginTask ( "Collecting groups" , ProgressMonitor.UNKNOWN ) ; java.util.List < com.google.gerrit.reviewdb.client.AccountGroup.UUID > uuids = new java.util.ArrayList < > ( ) ; try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { for ( com.google.gerrit.reviewdb.client.AccountGroup group : db.accountGroups ( ) . all ( ) ) { uuids.add ( group.getGroupUUID ( ) ) ; } } progress.endTask ( ) ; return uuids ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.notedb.ChangeNotes notes ) ;
private com.google.gerrit.reviewdb.client.AccountGroup group ( java.lang.String name ) throws java.lang.Exception { com.google.gerrit.server.account.CreateGroupArgs args = new com.google.gerrit.server.account.CreateGroupArgs ( ) ; args.setGroupName ( name ( name ) ) ; args.initialMembers = java.util.Collections.singleton ( admin.getId ( ) ) ; return createGroupFactory.create ( args ) . createGroup ( ) ; }
private com.google.gerrit.server.ssh.AbstractCommand create ( final java.lang.String cmd ) { final com.google.inject.Provider < ? extends com.google.gerrit.server.ssh.AbstractCommand > f = commands.get ( cmd ) ; if ( f != null ) { return f.get ( ) ; } return new com.google.gerrit.server.ssh.AbstractCommand ( ) { @ java.lang.Override protected void run ( ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.UnloggedFailure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; } } ; }
protected void configure ( ) { factory ( LuceneChangeIndex.Factory.class ) ; install ( new com.google.gerrit.server.index.IndexModule ( threads ) ) ; if ( ( ( singleVersion ) == null ) && ( ( base ) == null ) ) { install ( new com.google.gerrit.lucene.LuceneIndexModule.MultiVersionModule ( ) ) ; } else { install ( new com.google.gerrit.lucene.LuceneIndexModule.SingleVersionModule ( ) ) ; } }
protected void onShowView ( com.google.gerrit.client.ui.Screen view ) { final java.lang.String token = view.getToken ( ) ; if ( ! ( token.equals ( com.google.gwt.user.client.History.getToken ( ) ) ) ) { com.google.gwt.user.client.History.newItem ( token , false ) ; com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( token ) ; } if ( view instanceof com.google.gerrit.client.changes.ChangeListScreen ) { com.google.gerrit.client.Gerrit.lastChangeListToken = token ; } super . onShowView ( view ) ; view.onShowView ( ) ; }
public void addGpgKey ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) ; java.lang.String id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyId ( ) ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( key.getPublicKeyArmored ( ) ) ) . get ( id ) ; info.id = id ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , info ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ) ; org.bouncycastle.openpgp.PGPPublicKey stored = getOnlyKeyFromStore ( key ) ; com.google.common.truth.Truth.assertThat ( stored.getFingerprint ( ) ) . isEqualTo ( key.getPublicKey ( ) . getFingerprint ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
private com.google.gitiles.doc.MarkdownToHtml treeReadme ( java.lang.String path ) { return readme ( com.google.gitiles.GitilesView.path ( ) . copyFrom ( view ) . setPathPart ( path ) . build ( ) ) ; }
public void testOwnerProject ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.ProjectControl uBlah = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl uAdmin = util.user ( local , com.google.gerrit.server.project.Util.DEVS , com.google.gerrit.server.project.Util.ADMIN ) ; org.junit.Assert.assertFalse ( "not owner" , uBlah.isOwner ( ) ) ; org.junit.Assert.assertTrue ( "is owner" , uAdmin.isOwner ( ) ) ; }
static com.google.gerrit.extensions.client.GeneralPreferencesInfo readFromGit ( com.google.gerrit.server.git.GitRepositoryManager gitMgr , com.google.gerrit.server.account.GeneralPreferencesLoader loader , com.google.gerrit.server.config.AllUsersName allUsersName , com.google.gerrit.extensions.client.GeneralPreferencesInfo in ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( org.eclipse.jgit.lib.Repository git = gitMgr.openRepository ( allUsersName ) ) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault ( ) ; p.load ( git ) ; com.google.gerrit.extensions.client.GeneralPreferencesInfo r = com.google.gerrit.server.config.ConfigUtil.loadSection ( p.getConfig ( ) , UserConfigSections.GENERAL , null , new com.google.gerrit.extensions.client.GeneralPreferencesInfo ( ) , com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults ( ) , in ) ; return loader.loadMyMenusAndUrlAliases ( r , p , null ) ; } }
public void merge ( java.lang.Iterable < com.google.gerrit.common.data.SubmitRecord > submitRecords ) { this . status = com.google.gerrit.reviewdb.client.PatchLineComment.Status.MERGED ; this . submitRecords = com.google.common.collect.ImmutableList.copyOf ( submitRecords ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( this . submitRecords.isEmpty ( ) ) ) , "no submit records specified at submit time" ) ; }
private java.lang.String count ( long cnt ) { if ( cnt == 0 ) { return "" ; } return java.lang.String.format ( "%6d" , cnt ) ; }
protected java.lang.String getNameFor ( final com.google.gerrit.client.reviewdb.Account.Id accountId ) { if ( accountId == null ) { return "Anonymous Coward" ; } final com.google.gerrit.client.reviewdb.Account userAccount = com.google.gerrit.client.rpc.Common.getAccountCache ( ) . get ( accountId ) ; if ( userAccount == null ) { return "Anonymous Coward #" + accountId ; } java.lang.String name = userAccount.getFullName ( ) ; if ( name == null ) { name = userAccount.getPreferredEmail ( ) ; } if ( name == null ) { name = "Anonymous Coward #" + accountId ; } return name ; }
public void suggestReviewersChange ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 6 ) ; reviewers = suggestReviewers ( changeId , "u" , 5 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 5 ) ; reviewers = suggestReviewers ( changeId , "users3" , 10 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 1 ) ; }
private static void injectCss ( com.google.gwt.resources.client.ExternalTextResource css ) { try { css.getText ( new com.google.gwt.resources.client.ResourceCallback < com.google.gwt.resources.client.TextResource > ( ) { @ java.lang.Override public void onSuccess ( com.google.gwt.resources.client.TextResource resource ) { com.google.gwt.dom.client.StyleInjector.inject ( resource.getText ( ) ) ; } @ java.lang.Override public void onError ( com.google.gwt.resources.client.ResourceException e ) { net.codemirror.lib.Loader.error ( e ) ; } } ) ; } catch ( com.google.gwt.resources.client.ResourceException e ) { net.codemirror.lib.Loader.error ( e ) ; } }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission.WithValue perm ) { return label ( perm.permissionName ( ) . get ( ) ) . contains ( perm.value ( ) ) ; }
public void duplicatePatchSetRevisions ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeNotes notes = insertChange ( ) ; com.google.gerrit.reviewdb.client.PatchSet ps1 = psUtil.current ( db , notes ) ; java.lang.String rev = ps1.getRevision ( ) . get ( ) ; notes = incrementPatchSet ( notes , testRepo.getRevWalk ( ) . parseCommit ( org.eclipse.jgit.lib.ObjectId.fromString ( rev ) ) ) ; assertProblems ( notes , null , com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem ( ( ( "Multiple patch sets pointing to " + rev ) + ": [1, 2]" ) ) ) ; }
public boolean isAssignee ( ) { com.google.gerrit.reviewdb.client.Account.Id currentAssignee = notes.getAssignee ( ) ; if ( ( currentAssignee != null ) && ( getUser ( ) . isIdentifiedUser ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = getUser ( ) . getAccountId ( ) ; return id.equals ( currentAssignee ) ; } return false ; }
public com.google.gerrit.server.plugins.PluginEntry apply ( java.util.jar.JarEntry jarEntry ) { try { return resourceOf ( jarEntry ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalArgumentException ( ( ( "Cannot convert jar entry " + jarEntry ) + " to a resource" ) , e ) ; } }
private int limit ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > s ) { int n = ( com.google.gerrit.server.query.change.ChangeQueryBuilder.hasLimit ( s ) ) ? com.google.gerrit.server.query.change.ChangeQueryBuilder.getLimit ( s ) : maxLimit ; return ( limit ) > 0 ? ( java.lang.Math.min ( n , limit ) ) + 1 : n + 1 ; }
private boolean canEditDescription ( ) { if ( getChange ( ) . getStatus ( ) . isOpen ( ) ) { return ( ( ( isOwner ( ) ) || ( getRefControl ( ) . isOwner ( ) ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getUser ( ) . getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ; } return false ; }
public java.util.List < com.google.gerrit.server.query.change.QueryResult > queryChanges ( java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > queries ) throws com.google.gerrit.server.query.QueryParseException , com.google.gwtorm.server.OrmException { return queryChanges ( null , queries ) ; }
public void customConflictMessageWitTopicTest ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.automerger.FailedMergeException fme = new com.googlesource.gerrit.plugins.automerger.FailedMergeException ( failedMergeBranches , currentRevision , hostName , "i am ${topic}" , topic ) ; java.lang.String conflictMessage = "i am testtopic" ; com.google.common.truth.Truth.assertThat ( fme.getDisplayString ( ) . split ( "\\n" ) ) . asList ( ) . containsExactly ( "i am testtopic" , "i am testtopic" , "i am testtopic" ) ; }
public void parseSubject ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( "\n" + "Patch-Set: 1\n" ) + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Subject: Some subject of a change\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( ( "\n" + "Patch-Set: 1\n" ) + "Subject: Some subject of a change\n" ) + "Subject: Some other subject\n" ) ) ) ; }
private void deleteProject ( org.eclipse.jgit.transport.URIish replicateURI ) { if ( ! ( replicateURI.isRemote ( ) ) ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.deleteLocally ( replicateURI ) ; com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( "Deleted local repository: {}" , replicateURI ) ; } else if ( com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH ( replicateURI ) ) { deleteRemoteSsh ( replicateURI ) ; com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( "Deleted remote repository: {}" , replicateURI ) ; } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn ( ( "Cannot delete project on remote site {}. " + ( "Only local paths and SSH URLs are supported" + " for remote repository deletion" ) ) , replicateURI ) ; } }
public com.google.gerrit.acceptance.RestResponse get ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet ( ( ( ( url ) + "/a" ) + endPoint ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( get ) ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.AccountGroup > createEntry ( final com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey key ) throws java.lang.Exception { final com.google.gerrit.reviewdb.ReviewDb db = schema.open ( ) ; try { return db.accountGroups ( ) . byExternalName ( key ) . toList ( ) ; } finally { db.close ( ) ; } }
private java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > getEffectiveUserGroups ( ) { final java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > userGroups = user.getEffectiveGroups ( ) ; if ( isOwner ( ) ) { final java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > userGroupsOnProject = new java.util.HashSet < com.google.gerrit.reviewdb.AccountGroup.UUID > ( ( ( userGroups.size ( ) ) + 1 ) ) ; userGroupsOnProject.addAll ( userGroups ) ; userGroupsOnProject.add ( AccountGroup.PROJECT_OWNERS ) ; return java.util.Collections.unmodifiableSet ( userGroupsOnProject ) ; } else { return userGroups ; } }
private java.lang.Iterable < java.lang.String > getDraftRefs ( final com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > refNames = getRefNamesAllUsers ( RefNames.REFS_DRAFT_COMMENTS ) ; final java.lang.String suffix = "/" + ( changeId.get ( ) ) ; return com.google.common.collect.Iterables.filter ( refNames , new com.google.common.base.Predicate < java.lang.String > ( ) { @ java.lang.Override public boolean apply ( java.lang.String input ) { return input.endsWith ( suffix ) ; } } ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( CreateGroup.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( GroupDetailHandler.Factory.class ) ; factory ( MyGroupsFactory.Factory.class ) ; factory ( RenameGroup.Factory.class ) ; factory ( VisibleGroups.Factory.class ) ; }
public com.google.gerrit.server.index.IndexConfig build ( ) { com.google.gerrit.server.index.IndexConfig cfg = autoBuild ( ) ; com.google.gerrit.server.index.IndexConfig.checkLimit ( cfg.maxLimit ( ) , "maxLimit" ) ; com.google.gerrit.server.index.IndexConfig.checkLimit ( cfg.maxPages ( ) , "maxPages" ) ; com.google.gerrit.server.index.IndexConfig.checkLimit ( cfg.maxTerms ( ) , "maxTerms" ) ; return cfg ; }
public static void assertBranchInfo ( com.google.gerrit.server.project.ListBranches.BranchInfo expected , com.google.gerrit.server.project.ListBranches.BranchInfo actual ) { com.google.common.truth.Truth.assertThat ( actual.ref ) . isEqualTo ( expected.ref ) ; if ( ( expected.revision ) != null ) { com.google.common.truth.Truth.assertThat ( actual.revision ) . isEqualTo ( expected.revision ) ; } com.google.common.truth.Truth.assertThat ( com.google.gerrit.acceptance.rest.project.BranchAssert.toBoolean ( actual.canDelete ) ) . isEqualTo ( expected.canDelete ) ; }
private void mergeImpl ( ) throws com.google.gerrit.server.git.MergeException { openRepository ( ) ; openBranch ( ) ; listPendingSubmits ( ) ; validateChangeList ( ) ; mergeTip = branchTip ; switch ( destProject.getSubmitType ( ) ) { case CHERRY_PICK : cherryPickChanges ( ) ; break ; case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : default : reduceToMinimalMerge ( ) ; mergeTopics ( ) ; markCleanMerges ( ) ; break ; } updateBranch ( ) ; updateChangeStatus ( ) ; }
public void index ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) throws java.io.IOException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get ( nameKey ) ; if ( projectState != null ) { com.google.gerrit.server.project.ProjectData projectData = projectState.toProjectData ( ) ; for ( com.google.gerrit.server.index.project.ProjectIndex i : getWriteIndexes ( ) ) { i.replace ( projectData ) ; } fireProjectIndexedEvent ( nameKey.get ( ) ) ; } else { for ( com.google.gerrit.server.index.project.ProjectIndex i : getWriteIndexes ( ) ) { i.delete ( nameKey ) ; } } }
private com.google.gerrit.server.permissions.ProjectControl user ( com.google.gerrit.server.git.ProjectConfig local , java.lang.String name , com.google.gerrit.reviewdb.client.AccountGroup ... memberOf ) { return new com.google.gerrit.server.permissions.ProjectControl ( java.util.Collections.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet ( ) , java.util.Collections.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet ( ) , sectionSorter , changeControlFactory , permissionBackend , new com.google.gerrit.server.permissions.RefControlTest.MockUser ( name , memberOf ) , newProjectState ( local ) ) ; }
public boolean canUpload ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.READ , ( ( short ) ( 2 ) ) ) ; }
public void onSuccess ( final com.google.gerrit.client.VoidResult result ) { for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.client.groups.GroupInfo i = getRowItem ( row ) ; if ( ( i != null ) && ( ids.contains ( i.getGroupUUID ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public void isoWithOtherTimeZone ( ) throws java.lang.Exception { org.eclipse.jgit.lib.PersonIdent ident = newIdent ( "Mon Jan 2 15:04:05 2006" , "-0700" ) ; com.google.gitiles.DateFormatter df = new com.google.gitiles.DateFormatter ( com.google.common.base.Optional.of ( java.util.TimeZone.getTimeZone ( "GMT-0400" ) ) , Format.ISO ) ; com.google.common.truth.Truth.assertThat ( df.format ( ident ) ) . isEqualTo ( "2006-01-02 18:04:05" ) ; }
public boolean match ( final T object ) throws com.google.gwtorm.server.OrmException { for ( final com.google.gerrit.server.query.Predicate < T > c : children ) { if ( c.match ( object ) ) { return true ; } } return false ; }
public void testPostResponseOK ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.syncindex.HttpSessionTest.wireMockRule.givenThat ( com.github.tomakehurst.wiremock.client.WireMock.post ( com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo ( com.ericsson.gerrit.plugins.syncindex.HttpSessionTest.ENDPOINT ) ) . willReturn ( com.github.tomakehurst.wiremock.client.WireMock.aResponse ( ) . withStatus ( com.ericsson.gerrit.plugins.syncindex.HttpSessionTest.OK ) ) ) ; com.google.common.truth.Truth.assertThat ( httpSession.post ( com.ericsson.gerrit.plugins.syncindex.HttpSessionTest.ENDPOINT ) . isSuccessful ( ) ) . isTrue ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSetInfo createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.rules.StoredValues.CHANGE_DATA.get ( engine ) . getChange ( ) ; com.google.gerrit.reviewdb.client.PatchSet ps = com.google.gerrit.rules.StoredValues.PATCH_SET.get ( engine ) ; com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; com.google.gerrit.server.patch.PatchSetInfoFactory patchInfoFactory = env.getArgs ( ) . getPatchSetInfoFactory ( ) ; try { return patchInfoFactory.get ( change , ps ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e ) { throw new com.googlecode.prolog_cafe.lang.SystemException ( e.getMessage ( ) ) ; } }
public < T > com.google.gerrit.client.rpc.HttpCallback < T > add ( com.google.gerrit.client.rpc.HttpCallback < T > cb ) { checkFinalAdded ( ) ; if ( failed ) { cb.onFailure ( failedThrowable ) ; return new com.google.gerrit.client.rpc.HttpCallback < T > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.rpc.HttpResponse < T > result ) { } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { } } ; } com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl < T > w = new com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl ( cb ) ; callbacks.add ( w ) ; remaining.add ( w ) ; return w ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setTitleText ( Util.C.projectListTitle ( ) ) ; projects = new com.google.gerrit.client.admin.ProjectListScreen.ProjectTable ( ) ; projects.setSavePointerId ( Link.ADMIN_PROJECTS ) ; add ( projects ) ; final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel ( ) ; fp.setStyleName ( "gerrit-AddSshKeyPanel" ) ; fp.add ( new com.google.gerrit.client.ui.SmallHeading ( Util.C.headingCreateGroup ( ) ) ) ; }
private < T extends com.google.gwt.core.client.JavaScriptObject > void sendRaw ( com.google.gwt.http.client.RequestBuilder.Method method , java.lang.String body , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { com.google.gerrit.client.rpc.RestApi.HttpCallback < T > httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback ( background , cb ) ; try { if ( ! ( background ) ) { RpcStatus.INSTANCE.onRpcStart ( ) ; } com.google.gwt.http.client.RequestBuilder req = request ( method ) ; req.setHeader ( "Content-Type" , com.google.gerrit.client.rpc.RestApi.TEXT_TYPE ) ; req.sendRequest ( body , httpCallback ) ; } catch ( com.google.gwt.http.client.RequestException e ) { httpCallback.onError ( null , e ) ; } }
public < P extends com.google.gerrit.server.query.Predicate < T > > P find ( com.google.gerrit.server.query.Predicate < T > p , java.lang.Class < P > clazz ) { if ( clazz.isAssignableFrom ( p.getClass ( ) ) ) { return ( ( P ) ( p ) ) ; } for ( com.google.gerrit.server.query.Predicate < T > c : p.getChildren ( ) ) { P r = find ( c , clazz ) ; if ( r != null ) { return r ; } } return null ; }
public void setExisting_Conflict ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = admin.username ; adminRestSession.put ( ( ( "/accounts/" + ( accounts.create ( ) . id.get ( ) ) ) + "/username" ) , in ) . assertConflict ( ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( link ( getRowItem ( row ) ) ) ; }
public void testQueryParamsNotCopied ( ) throws java.lang.Exception { com.google.gitiles.GitilesView view = com.google.gitiles.GitilesView.hostIndex ( ) . copyFrom ( com.google.gitiles.GitilesViewTest.HOST ) . putParam ( "foo" , "foovalue" ) . putParam ( "bar" , "barvalue" ) . build ( ) ; com.google.gitiles.GitilesView copy = com.google.gitiles.GitilesView.hostIndex ( ) . copyFrom ( view ) . build ( ) ; assertFalse ( view.getParameters ( ) . isEmpty ( ) ) ; assertTrue ( copy.getParameters ( ) . isEmpty ( ) ) ; }
private < T > T execute ( com.google.gerrit.server.update.RetryHelper.ChangeAction < T > changeAction , com.github.rholder.retry.Retryer < T > retryer ) throws java.lang.Throwable { try { return retryer.call ( ( ) -> changeAction.call ( updateFactory ) ) ; } catch ( java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e ) { if ( e instanceof com.github.rholder.retry.RetryException ) { metrics.timeoutCount.increment ( ) ; } if ( ( e.getCause ( ) ) != null ) { throw e.getCause ( ) ; } throw e ; } }
boolean isReviewed ( ) { return reviewed.getValue ( ) ; }
public void testGetPeopleAccess ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open ( ) ; assertNotNull ( schema.people ( ) ) ; assertEquals ( "people" , schema.people ( ) . getRelationName ( ) ) ; }
private static com.google.gitiles.CommitJsonData.Ident toJsonData ( org.eclipse.jgit.lib.PersonIdent ident , com.google.gitiles.DateFormatterBuilder.DateFormatter df ) { com.google.gitiles.CommitJsonData.Ident result = new com.google.gitiles.CommitJsonData.Ident ( ) ; result.name = ident.getName ( ) ; result.email = ident.getEmailAddress ( ) ; result.time = df.format ( ident ) ; return result ; }
void onDiscard ( com.google.gwt.event.dom.client.ClickEvent e ) { e.stopPropagation ( ) ; if ( ( comment.id ( ) ) == null ) { removeUI ( ) ; } else { setEdit ( false ) ; com.google.gerrit.client.changes.CommentApi.deleteDraft ( psId , comment.id ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gwt.core.client.JavaScriptObject > ( ) { @ java.lang.Override public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { removeUI ( ) ; } } ) ; } }
private com.google.gerrit.server.change.ReviewerJson.PostResult putAccount ( com.google.gerrit.server.change.ReviewerResource rsrc ) throws com.google.gerrit.common.errors.EmailException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser ( ) . getAccountId ( ) ; com.google.gerrit.server.project.ChangeControl control = rsrc.getControl ( ) . forUser ( identifiedUserFactory.create ( id ) ) ; com.google.gerrit.server.change.ReviewerJson.PostResult result = new com.google.gerrit.server.change.ReviewerJson.PostResult ( ) ; addReviewers ( rsrc , result , com.google.common.collect.ImmutableMap.of ( id , control ) ) ; return result ; }
public java.lang.Iterable < com.google.gerrit.server.plugins.Plugin > getPlugins ( ) { return running.values ( ) ; }
private void initApprovals ( final com.google.gerrit.common.data.PatchSetPublishDetail r , final com.google.gwt.user.client.ui.Panel body ) { for ( final com.google.gerrit.common.data.ApprovalType ct : com.google.gerrit.client.Gerrit.getConfig ( ) . getApprovalTypes ( ) . getApprovalTypes ( ) ) { if ( r.isAllowed ( ct.getCategory ( ) . getId ( ) ) ) { initApprovalType ( r , body , ct ) ; } } }
private void fPercent ( final java.lang.String name , final long value , final long total ) { final long pcent = ( 0 < total ) ? ( 100 * value ) / total : 0 ; p.println ( java.lang.String.format ( " %1$-12s: %2$3d%%" , name , ( ( int ) ( pcent ) ) ) ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( CreateGroup.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( GroupDetailHandler.Factory.class ) ; factory ( MyGroupsFactory.Factory.class ) ; factory ( RenameGroup.Factory.class ) ; factory ( VisibleGroupsHandler.Factory.class ) ; }
public static com.google.gerrit.extensions.client.EditPreferencesInfo defaults ( ) { com.google.gerrit.extensions.client.EditPreferencesInfo i = new com.google.gerrit.extensions.client.EditPreferencesInfo ( ) ; i.tabSize = 8 ; i.lineLength = 100 ; i.cursorBlinkRate = 0 ; i.hideTopMenu = false ; i.showTabs = true ; i.showWhitespaceErrors = false ; i.syntaxHighlighting = true ; i.hideLineNumbers = false ; i.matchBrackets = false ; i.theme = com.google.gerrit.extensions.client.Theme.DEFAULT ; i.keyMapType = KeyMapType.DEFAULT ; return i ; }
public void patchScript ( final com.google.gerrit.reviewdb.client.Patch.Key patchKey , final com.google.gerrit.reviewdb.client.PatchSet.Id psa , final com.google.gerrit.reviewdb.client.PatchSet.Id psb , final com.google.gerrit.reviewdb.client.AccountDiffPreference dp , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.PatchScript > callback ) { if ( psb == null ) { callback.onFailure ( new com.google.gerrit.common.errors.NoSuchEntityException ( ) ) ; return ; } patchScriptFactoryFactory.create ( patchKey , psa , psb , dp ) . to ( callback ) ; }
public com.google.gerrit.server.IdentifiedUser parseOnBehalfOf ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller , java.lang.String id ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.IdentifiedUser user = parseIdOnBehalfOf ( caller , id ) ; if ( user == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Account Not Found: %s" , id ) ) ; } else if ( ! ( accountControlFactory.get ( ) . canSee ( user.getAccount ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Account Not Found: %s" , id ) ) ; } return user ; }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.lucene.LuceneIndexModule.SingleVersionListener.class ) ; bind ( new com.google.inject.TypeLiteral < java.util.Map < java.lang.String , java.lang.Integer > > ( ) { } ) . annotatedWith ( com.google.inject.name.Names.named ( com.google.gerrit.lucene.LuceneIndexModule.SINGLE_VERSIONS ) ) . toInstance ( this . singleVersions ) ; }
public void onSuccess ( com.google.gerrit.client.account.AgreementInfo result ) { if ( isAttached ( ) ) { mySigned = new java.util.HashSet < com.google.gerrit.client.reviewdb.ContributorAgreement.Id > ( ) ; for ( com.google.gerrit.client.reviewdb.AccountAgreement a : result.accepted ) { mySigned.add ( a.getAgreementId ( ) ) ; } postRPC ( ) ; } }
public void newAdapterRoundTrip ( ) { java.lang.String json = gson.toJson ( com.google.gerrit.server.notedb.CommentTimestampAdapterTest.NON_DST_TS ) ; com.google.common.truth.Truth.assertThat ( json ) . isEqualTo ( ( ( '"' + ( com.google.gerrit.server.notedb.CommentTimestampAdapterTest.NON_DST_STR ) ) + '"' ) ) ; com.google.common.truth.Truth.assertThat ( gson.fromJson ( json , java.sql.Timestamp.class ) ) . isEqualTo ( com.google.gerrit.server.notedb.CommentTimestampAdapterTest.NON_DST_TS ) ; }
void deleteChecked ( ) { deleteButton.setEnabled ( false ) ; for ( int row = 2 ; row < ( table.getRowCount ( ) ) ; row ++ ) { if ( ( ( com.google.gwt.user.client.ui.CheckBox ) ( table.getWidget ( row , 0 ) ) ) . getValue ( ) ) { table.removeRow ( ( row -- ) ) ; } } }
public com.googlecode.prolog_cafe.lang.NumberTerm mod ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.lang.IllegalTypeException ( "integer" , t ) ; if ( ( t.intValue ( ) ) == 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "zero_divisor" ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) % ( t.intValue ( ) ) ) ) ; }
void addPatchSetId ( final java.lang.String token ) { try { patchSets.add ( parsePatchSet ( token ) ) ; } catch ( com.google.gerrit.sshd.commands.UnloggedFailure e ) { throw new java.lang.IllegalArgumentException ( e.getMessage ( ) , e ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.lang.IllegalArgumentException ( "database error" , e ) ; } }
private static int nextLineBreak ( java.lang.String s , int start , int end ) { for ( int i = start ; i < end ; i ++ ) { if ( ( ( s.charAt ( i ) ) == '\n' ) || ( ( s.charAt ( i ) ) == '\r' ) ) { return i ; } } return - 1 ; }
private void assertChildNotFound ( com.google.gerrit.reviewdb.client.Project.NameKey parent , java.lang.String child ) throws java.lang.Exception { try { gApi.projects ( ) . name ( parent.get ( ) ) . child ( child ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException e ) { com.google.common.truth.Truth.assertThat ( e.getMessage ( ) ) . contains ( child ) ; } }
public void setAssigneeOnReviewableChangeByAdmin ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; assign ( sc , admin , assignee ) ; assertThat ( sender ) . sent ( "setassignee" , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , admin ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . to ( assignee ) ; }
private void fByteCount ( final java.lang.String name , double value ) { java.lang.String suffix = "bytes" ; if ( value > 1024 ) { value /= 1024 ; suffix = "kb" ; } if ( value > 1024 ) { value /= 1024 ; suffix = "mb" ; } if ( value > 1024 ) { value /= 1024 ; suffix = "gb" ; } p.println ( java.lang.String.format ( " %1$-12s: %2$6.2f %3$s" , name , value , suffix ) ) ; }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.setB0 ( ) ; com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; a1 = a1.dereference ( ) ; if ( a1.isVariable ( ) ) throw new com.googlecode.prolog_cafe.builtin.PInstantiationException ( this , 1 ) ; if ( ! ( a1.isInteger ( ) ) ) throw new com.googlecode.prolog_cafe.builtin.IllegalTypeException ( this , 1 , "integer" , a1 ) ; engine.halt = 1 + ( ( ( com.googlecode.prolog_cafe.builtin.IntegerTerm ) ( a1 ) ) . intValue ( ) ) ; return cont ; }
protected void configure ( ) { bind ( com.google.inject.Key.get ( javax.sql.DataSource.class , com.google.inject.name.Names.named ( "ReviewDb" ) ) ) . toProvider ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; listener ( ) . to ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) ; }
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit , int maxPages , int maxTerms ) { return new com.google.gerrit.server.index.AutoValue_IndexConfig ( com.google.gerrit.server.index.IndexConfig.checkLimit ( maxLimit , "maxLimit" , java.lang.Integer.MAX_VALUE ) , com.google.gerrit.server.index.IndexConfig.checkLimit ( maxPages , "maxPages" , java.lang.Integer.MAX_VALUE ) , com.google.gerrit.server.index.IndexConfig.checkLimit ( maxTerms , "maxTerms" , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS ) ) ; }
private com.google.gerrit.server.account.AccountState missing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; account.setActive ( false ) ; return new com.google.gerrit.server.account.AccountState ( allUsersName , account , java.util.Collections.emptySet ( ) , new java.util.HashMap < > ( ) ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; } } ) ; rpc ( com.google.gerrit.server.rpc.account.AccountSecurityImpl.class ) ; rpc ( com.google.gerrit.server.rpc.account.AccountServiceImpl.class ) ; }
protected void configureServlets ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.WebUiPlugin.class ) . toInstance ( new com.google.gerrit.extensions.webui.GwtPlugin ( "imagare" ) ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.WebUiPlugin.class ) . toInstance ( new com.google.gerrit.extensions.webui.JavaScriptPlugin ( "imagare.js" ) ) ; }
public static byte [ ] readBytes ( final java.io.InputStream input ) throws java.io.IOException { final int len = com.google.gerrit.server.ioutil.BasicSerialization.readVarInt32 ( input ) ; if ( len == 0 ) { return com.google.gerrit.server.ioutil.BasicSerialization.NO_BYTES ; } final byte [ ] buf = new byte [ len ] ; org.eclipse.jgit.util.NB.readFully ( input , buf , 0 , len ) ; return buf ; }
private void ensurePermitted ( com.google.gerrit.server.project.ChangeControl changeControl ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException { if ( ! ( changeControl.canAddPatchSet ( reviewDb.get ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "Not allowed to edit a change." ) ; } }
public com.google.gerrit.server.project.ChangeControl validateFor ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl c = controlFor ( db , change , user ) ; if ( ! ( c.isVisible ( db ) ) ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( c.getId ( ) ) ; } return c ; }
private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.reviewdb.client.Change.Id id ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get ( id ) ; if ( c == null ) { c = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb ( db ) . changes ( ) . get ( id ) ; } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate ( c ) ; com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor ( notes , user ) ; return new com.google.gerrit.server.git.BatchUpdate.ChangeContext ( ctl , new com.google.gerrit.server.git.BatchUpdateReviewDb ( db ) , repo , rw ) ; }
protected void bccWatchesNotifyAllComments ( ) { if ( ( db ) != null ) { try { final com.google.gerrit.client.reviewdb.Project project = getProject ( ) ; if ( project != null ) { for ( com.google.gerrit.client.reviewdb.AccountProjectWatch w : db.accountProjectWatches ( ) . notifyAllComments ( project.getId ( ) ) ) { add ( RecipientType.BCC , w.getAccountId ( ) ) ; } } } catch ( com.google.gwtorm.client.OrmException err ) { } } }
boolean wouldPushRef ( java.lang.String ref ) { if ( ( ! ( replicatePermissions ) ) && ( GitRepositoryManager.REF_CONFIG.equals ( ref ) ) ) { return false ; } for ( org.eclipse.jgit.transport.RefSpec s : remote.getPushRefSpecs ( ) ) { if ( s.matchSource ( ref ) ) { return true ; } } return false ; }
public int compareTo ( com.googlecode.prolog_cafe.lang.Term anotherTerm ) { if ( ( val ) != ( this ) ) return val.compareTo ( anotherTerm ) ; if ( ! ( anotherTerm.isVariable ( ) ) ) return BEFORE ; if ( ( this ) == anotherTerm ) return EQUAL ; int x = ( this . hashCode ( ) ) - ( ( ( com.googlecode.prolog_cafe.lang.VariableTerm ) ( anotherTerm ) ) . hashCode ( ) ) ; if ( x != 0 ) return x ; throw new com.googlecode.prolog_cafe.lang.InternalException ( "VariableTerm is not unique" ) ; }
public com.google.gerrit.extensions.common.PluginInfo apply ( com.google.gerrit.server.plugins.PluginResource resource , com.google.gerrit.server.plugins.DisablePlugin.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { permissionBackend.user ( user ) . check ( GlobalPermission.ADMINISTRATE_SERVER ) ; } catch ( com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Could not check permission" , e ) ; } if ( ! ( loader.isRemoteAdminEnabled ( ) ) ) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException ( "remote plugin administration is disabled" ) ; } java.lang.String name = resource.getName ( ) ; loader.disablePlugins ( com.google.common.collect.ImmutableSet.of ( name ) ) ; return com.google.gerrit.server.plugins.ListPlugins.toPluginInfo ( loader.get ( name ) ) ; }
public void testReplaceLocalName ( ) { final com.google.gerrit.server.ParamertizedString p = new com.google.gerrit.server.ParamertizedString ( "${a.localPart}" ) ; assertEquals ( 1 , p.getParameterNames ( ) . size ( ) ) ; assertTrue ( p.getParameterNames ( ) . contains ( "a" ) ) ; final java.util.Map < java.lang.String , java.lang.String > a = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; a.put ( "a" , "foo@example.com" ) ; assertNotNull ( p.bind ( a ) ) ; assertEquals ( 1 , p.bind ( a ) . length ) ; assertEquals ( "foo" , p.bind ( a ) [ 0 ] ) ; assertEquals ( "foo" , p.replace ( a ) ) ; a.put ( "a" , "foo" ) ; assertNotNull ( p.bind ( a ) ) ; assertEquals ( 1 , p.bind ( a ) . length ) ; assertEquals ( "foo" , p.bind ( a ) [ 0 ] ) ; assertEquals ( "foo" , p.replace ( a ) ) ; }
private static void addResourceStateHeaders ( javax.servlet.http.HttpServletResponse res , com.google.gerrit.extensions.restapi.RestResource rsrc ) { if ( rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified ) { res.setDateHeader ( com.google.common.net.HttpHeaders.LAST_MODIFIED , ( ( com.google.gerrit.extensions.restapi.RestResource.HasLastModified ) ( rsrc ) ) . getLastModified ( ) . getTime ( ) ) ; } }
private com.google.gerrit.sshd.SshSession newSession ( ) { return new com.google.gerrit.sshd.SshSession ( session , session.getRemoteAddress ( ) , userFactory.create ( AccessPath.GIT , new com.google.inject.Provider < java.net.SocketAddress > ( ) { @ java.lang.Override public java.net.SocketAddress get ( ) { return session.getRemoteAddress ( ) ; } } , user.getAccountId ( ) ) ) ; }
public void manualCertificationMatchesExternalId ( ) throws java.lang.Exception { addExternalId ( "foo" , "myId" , null ) ; com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create ( user ) ; assertNoProblems ( checker.check ( com.google.gerrit.gpg.testutil.TestKeys.validKeyWithSecondUserId ( ) . getPublicKey ( ) ) ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { new com.google.gerrit.server.index.ChangeIndexer.Task ( cd , false ) . call ( ) ; } catch ( java.lang.RuntimeException e ) { throw e ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.index.ChangeIndexer.MAPPER.apply ( e ) ; } }
private void addExternalId ( java.lang.String scheme , java.lang.String id , java.lang.String email ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getAccountId ( ) , new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( scheme , id ) ) ; if ( email != null ) { extId.setEmailAddress ( email ) ; } db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( extId ) ) ; reloadUser ( ) ; }
public void setUp ( ) throws java.lang.Exception { mergeResults = com.google.common.collect.Maps.newHashMap ( ) ; com.google.gerrit.server.CurrentUser listenerUser = factory.create ( user.id ) ; hooks.addChangeListener ( new com.google.gerrit.common.ChangeListener ( ) { @ java.lang.Override public void onChangeEvent ( com.google.gerrit.server.events.ChangeEvent event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent cMEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults.put ( cMEvent.change.number , cMEvent.newRev ) ; } } } , listenerUser ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; }
public java.util.List < com.google.gerrit.server.project.ProjectJson.ProjectInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) { java.util.List < com.google.gerrit.server.project.ProjectJson.ProjectInfo > childProjects = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : projectCache.all ( ) ) { com.google.gerrit.server.project.ProjectState e = projectCache.get ( projectName ) ; if ( e == null ) { continue ; } if ( rsrc.getNameKey ( ) . equals ( e.getProject ( ) . getParent ( allProjects ) ) ) { childProjects.add ( json.format ( e.getProject ( ) ) ) ; } } return childProjects ; }
public com.googlecode.prolog_cafe.lang.Operation exec ( com.googlecode.prolog_cafe.lang.Prolog engine ) throws com.googlecode.prolog_cafe.lang.PrologException { com.google.gerrit.reviewdb.PatchSetInfo psInfo ; try { psInfo = getPatchSetInfo ( engine ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException err ) { throw new com.googlecode.prolog_cafe.lang.JavaException ( this , 1 , err ) ; } com.google.gerrit.reviewdb.UserIdentity committer = psInfo.getCommitter ( ) ; return exec ( engine , committer ) ; }
public void testPatternWCommentLink ( ) { com.googlesource.gerrit.plugins.hooks.its.ItsConfig itsConfig = createItsConfig ( ) ; org.easymock.EasyMock.expect ( serverConfig.getString ( "ItsTestName" , null , "commentlink" ) ) . andReturn ( "foo" ) . atLeastOnce ( ) ; org.easymock.EasyMock.expect ( serverConfig.getString ( "commentlink" , "foo" , "match" ) ) . andReturn ( "TestPattern" ) . atLeastOnce ( ) ; replayMocks ( ) ; assertEquals ( "Expected and generated pattern are not equal" , "TestPattern" , itsConfig.getIssuePattern ( ) . pattern ( ) ) ; }
protected void rcptToAuthors ( final javax.mail.Message.RecipientType rt ) throws javax.mail.MessagingException { add ( rt , change.getOwner ( ) ) ; if ( ( patchSet ) != null ) { add ( rt , patchSet.getUploader ( ) ) ; } if ( ( patchSetInfo ) != null ) { add ( rt , patchSetInfo.getAuthor ( ) ) ; add ( rt , patchSetInfo.getCommitter ( ) ) ; } }
public com.google.gerrit.server.git.BatchUpdate insertChange ( com.google.gerrit.server.git.BatchUpdate.InsertChangeOp op ) { com.google.gerrit.reviewdb.client.Change c = op.getChange ( ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( newChanges.containsKey ( c.getId ( ) ) ) ) , "only one op allowed to create change %s" , c.getId ( ) ) ; newChanges.put ( c.getId ( ) , c ) ; ops.get ( c.getId ( ) ) . add ( 0 , op ) ; return this ; }
private void appendLineNumber ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final int idx ) { m.openTd ( ) ; m.setStyleName ( Gerrit.RESOURCES.css ( ) . lineNumber ( ) ) ; m.append ( com.google.gwtexpui.safehtml.client.SafeHtml.asis ( ( ( "<a href=\"javascript:void(0)\">" + ( idx + 1 ) ) + "</a>" ) ) ) ; m.closeTd ( ) ; }
public void getRelatedNoResult ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = push.to ( "refs/for/master" ) . getPatchSetId ( ) ; java.util.List < com.google.gerrit.server.change.GetRelated.ChangeAndCommit > related = getRelated ( ps ) ; com.google.common.truth.Truth.assertThat ( related ) . isEmpty ( ) ; }
public void signatureByExpiredKeyBeforeExpiration ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key3 = com.google.gerrit.gpg.testutil.TestKeys.expiredKey ( ) ; java.util.Date now = new java.text.SimpleDateFormat ( "YYYY-MM-dd HH:mm:ss Z" ) . parse ( "2005-07-10 12:00:00 -0400" ) ; org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( validNonce ( ) , key3 , now ) ; assertNoProblems ( cert ) ; }
private void saveSecureStore ( ) throws java.io.IOException { if ( ( secureStoreInitData ) != null ) { java.io.File dst = new java.io.File ( site.lib_dir , secureStoreInitData.jarFile.getName ( ) ) ; com.google.common.io.Files.copy ( secureStoreInitData.jarFile , dst ) ; com.google.gerrit.pgm.init.api.Section gerritSection = sectionFactory.get ( "gerrit" , null ) ; gerritSection.set ( "secureStoreClass" , secureStoreInitData.className ) ; } }
private void verifyComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { com.google.common.base.Preconditions.checkArgument ( ( ( c.getRevId ( ) ) != null ) ) ; com.google.common.base.Preconditions.checkArgument ( c.getAuthor ( ) . equals ( getUser ( ) . getAccountId ( ) ) , ( "The author for the following comment does not match the author of" + " this ChangeDraftUpdate (%s): %s" ) , getUser ( ) . getAccountId ( ) , c ) ; }
protected void onUnload ( ) { super . onUnload ( ) ; if ( ( resizeHandler ) != null ) { resizeHandler.removeHandler ( ) ; resizeHandler = null ; } if ( ( cmA ) != null ) { cmA.getWrapperElement ( ) . removeFromParent ( ) ; cmA = null ; } if ( ( cmB ) != null ) { cmB.getWrapperElement ( ) . removeFromParent ( ) ; cmB = null ; } com.google.gwt.user.client.Window.enableScrolling ( true ) ; }
public com.google.gerrit.server.notedb.NoteDbUpdateManager stage ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { db = unwrapDb ( db ) ; com.google.gerrit.reviewdb.client.Change change = db.changes ( ) . get ( changeId ) ; if ( change == null ) { throw new com.google.gerrit.server.project.NoSuchChangeException ( changeId ) ; } com.google.gerrit.server.notedb.NoteDbUpdateManager manager = updateManagerFactory.create ( change.getProject ( ) ) ; buildUpdates ( manager , com.google.gerrit.server.notedb.ChangeBundle.fromReviewDb ( db , changeId ) ) ; manager.stage ( ) ; return manager ; }
public void setUp ( ) { easyMock = new org.easymock.EasyMockSupport ( ) ; storeMock = easyMock.createMock ( com.ericsson.gerrit.plugins.eventslog.EventStore.class ) ; poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock ( 1 ) ; listener = new com.ericsson.gerrit.plugins.eventslog.EventHandler ( storeMock , poolMock ) ; }
private com.google.gerrit.server.notedb.ChangeNotes createFromChangeOnlyWhenNotedbDisabled ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Preconditions.checkState ( ( ! ( migration.readChanges ( ) ) ) , ( "do not call" + " createFromChangeWhenNotedbDisabled when notedb is enabled" ) ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsers , change.getProject ( ) , change ) . load ( ) ; }
private java.util.Properties loadBuckProperties ( ) throws java.io.IOException { java.util.Properties properties = new java.util.Properties ( ) ; java.nio.file.Path propertiesPath = gen.resolve ( "tools" ) . resolve ( "buck.properties" ) ; if ( java.nio.file.Files.exists ( propertiesPath ) ) { try ( java.io.InputStream in = java.nio.file.Files.newInputStream ( propertiesPath ) ) { properties.load ( in ) ; } } return properties ; }
private boolean matchAny ( java.util.List < com.google.gerrit.common.data.PermissionRule > rules ) { java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > groups = user.getEffectiveGroups ( ) ; for ( com.google.gerrit.common.data.PermissionRule rule : rules ) { if ( com.google.gerrit.server.account.CapabilityControl.match ( groups , rule ) ) { return true ; } } return false ; }
private java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > suggestReviewers ( com.google.gerrit.acceptance.RestSession session , java.lang.String changeId , java.lang.String query , int n ) throws java.io.IOException { return newGson ( ) . fromJson ( session.get ( ( ( ( ( ( "/changes/" + changeId ) + "/suggest_reviewers?q=" ) + query ) + "&n=" ) + n ) ) . getReader ( ) , new com.google.gson.reflect.TypeToken < java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > > ( ) { } . getType ( ) ) ; }
private java.lang.String getCommentChangeAbandoned ( java.util.Map < java.lang.String , java.lang.String > map ) { return getCommentChangeEvent ( "abandoned" , "abandoner" , map ) ; }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { notes = notesFactory.create ( db , project , legacyId ) ; change = notes.getChange ( ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( "Unable to load change " + ( legacyId ) ) ) ; } setPatchSets ( null ) ; return change ; }
public com.google.gerrit.acceptance.RestResponse post ( java.lang.String endPoint , java.lang.Object content ) throws java.io.IOException { org.apache.http.client.methods.HttpPost post = new org.apache.http.client.methods.HttpPost ( ( ( ( url ) + "/a" ) + endPoint ) ) ; if ( content != null ) { post.addHeader ( new org.apache.http.message.BasicHeader ( "Content-Type" , "application/json" ) ) ; post.setEntity ( new org.apache.http.entity.StringEntity ( new com.google.gson.Gson ( ) . toJson ( content ) , com.google.common.base.Charsets.UTF_8.name ( ) ) ) ; } return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( post ) ) ; }
public static java.lang.String shard ( int id ) { if ( id < 0 ) { return null ; } java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; int n = id % 100 ; if ( n < 10 ) { r.append ( '0' ) ; } r.append ( n ) ; r.append ( '/' ) ; r.append ( id ) ; return r.toString ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.GerritCallback.isNotSignedIn ( caught ) ) { new com.google.gerrit.client.ErrorDialog ( Util.C.errorNotSignedIn ( ) ) . center ( ) ; } else if ( caught instanceof com.google.gwtjsonrpc.client.ServerUnavailableException ) { new com.google.gerrit.client.ErrorDialog ( Util.C.errorServerUnavailable ( ) ) . center ( ) ; } else { com.google.gwt.core.client.GWT.log ( ( ( ( getClass ( ) . getName ( ) ) + " caught " ) + caught ) , caught ) ; new com.google.gerrit.client.ErrorDialog ( caught ) . center ( ) ; } }
protected void ccExistingReviewers ( ) { try { for ( com.google.gerrit.reviewdb.client.Account.Id id : getReviewers ( ) . get ( ReviewerState.REVIEWER ) ) { add ( RecipientType.CC , id ) ; } } catch ( com.google.gwtorm.server.OrmException err ) { com.google.gerrit.server.mail.ChangeEmail.log.warn ( "Cannot CC users that commented on updated change" , err ) ; } }
public boolean isReviewer ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( getCurrentUser ( ) . isIdentifiedUser ( ) ) { java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > results = ( cd != null ) ? cd.reviewers ( ) . values ( ) : approvalsUtil.getReviewers ( db , getChange ( ) . getId ( ) ) . values ( ) ; com.google.gerrit.server.IdentifiedUser user = ( ( com.google.gerrit.server.IdentifiedUser ) ( getCurrentUser ( ) ) ) ; return results.contains ( user.getAccountId ( ) ) ; } return false ; }
public void commentOnWipChangeByOwnerNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( "comment" , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
com.ericsson.gerrit.plugins.eventslog.sql.SQLClient provideLocalSqlClient ( com.ericsson.gerrit.plugins.eventslog.EventsLogConfig cfg ) { java.lang.String path = cfg.getLocalStorePath ( ) . toString ( ) ; path = ( path.endsWith ( "/" ) ) ? path : path + "/" ; return new com.ericsson.gerrit.plugins.eventslog.sql.SQLClient ( cfg.getLocalStoreDriver ( ) , ( ( com.ericsson.gerrit.plugins.eventslog.sql.SQLModule.H2_DB_PREFIX ) + path ) , cfg.getUrlOptions ( ) ) ; }
public void testQuote1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyQuoteTest.html ( "> I\'m happy\n > with quotes!\n\nSee above." ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( ( ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyQuoteTest.quote ( "I&#39;m happy\nwith quotes!" ) ) + "<p>See above.</p>" ) , n.asString ( ) ) ; }
public void testNestedQuotes1 ( ) { java.lang.String comment = " > > prior\n > \n > next\n" ; java.util.List < com.google.gerrit.server.mail.send.CommentFormatter.Block > result = com.google.gerrit.server.mail.send.CommentFormatter.parse ( comment ) ; com.google.common.truth.Truth.assertThat ( result ) . hasSize ( 1 ) ; assertBlock ( result , 0 , BlockType.QUOTE , "> prior\n\nnext" ) ; }
private void preMerge ( final com.google.gerrit.server.git.strategy.SubmitStrategy strategy , final java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run ( branchTip , toMerge ) ; refLogIdent = strategy.getRefLogIdent ( ) ; commits.putAll ( strategy.getNewCommits ( ) ) ; }
protected void run ( ) throws com.google.gerrit.sshd.commands.Failure { try { performRenameGroupFactory.create ( ) . renameGroup ( groupName , newGroupName ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw die ( e ) ; } catch ( com.google.gerrit.common.errors.NameAlreadyUsedException e ) { throw die ( e ) ; } catch ( com.google.gerrit.common.errors.NoSuchGroupException e ) { throw die ( e ) ; } }
public void storeLocalOffline ( ) throws java.lang.Exception { setUpClientMock ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( new java.net.ConnectException ( ) ) ) . when ( eventsDb ) . createDBIfNotCreated ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( ) ) . when ( eventsDb ) . queryOne ( ) ; }
public static synchronized void setClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert ( clockStep , clockStepUnit ) ; HEAD ( ( 6899000.0 - 2.14 ) ) ; org.joda.time.DateTimeUtils.setCurrentMillisProvider ( new org.joda.time.DateTimeUtils.MillisProvider ( ) { @ java.lang.Override public long getMillis ( ) { return com.google.gerrit.testutil.TestTimeUtil.clockMs.getAndAdd ( com.google.gerrit.testutil.TestTimeUtil.clockStepMs ) ; } } ) ; }
public void testIsEnabledRefParentNoBranchEnforced ( ) { java.lang.String [ ] branches = new java.lang.String [ ] { } ; setupIsEnabled ( "false" , "enforced" , branches ) ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertTrue ( itsConfig.isEnabled ( "testProject" , "refs/heads/testBranch" ) ) ; }
public com.google.gerrit.extensions.client.EditPreferencesInfo apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) && ( ! ( self.get ( ) . getCapabilities ( ) . canModifyAccount ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "requires Modify Account capability" ) ; } return com.google.gerrit.server.account.GetEditPreferences.readFromGit ( rsrc.getUser ( ) . getAccountId ( ) , gitMgr , allUsersName , null ) ; }
public com.google.gerrit.common.data.ChangeDetail call ( ) throws com.google.gerrit.common.errors.NoSuchEntityException , com.google.gerrit.server.patch.PatchSetInfoNotAvailableException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.client.OrmException , java.lang.IllegalStateException { final com.google.gerrit.reviewdb.Change.Id changeId = patchSetId.getParentKey ( ) ; final com.google.gerrit.server.project.ChangeControl changeControl = changeControlFactory.validateFor ( changeId ) ; if ( ( ! ( changeControl.isOwner ( ) ) ) && ( ! ( changeControl.isVisible ( db ) ) ) ) { throw new java.lang.IllegalStateException ( "Cannot publish patchset" ) ; } com.google.gerrit.server.ChangeUtil.publishDraftPatchSet ( db , patchSetId ) ; return changeDetailFactory.create ( changeId ) . call ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIdOnlyWhenNoteDbDisabled ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Preconditions.checkState ( ( ! ( args.migration.readChanges ( ) ) ) , ( "do not call" + " createFromIdOnlyWhenNoteDbDisabled when NoteDb is enabled" ) ) ; com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb ( db ) . changes ( ) . get ( changeId ) ; com.google.common.base.Preconditions.checkNotNull ( change , "change %s not found in ReviewDb" , changeId ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load ( ) ; }
private com.google.gerrit.reviewdb.client.ChangeMessage buildChangeMessage ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change dest , com.google.gerrit.reviewdb.client.PatchSet newPatchSet , com.google.gerrit.reviewdb.client.Account.Id pullRequestAuthorId , java.lang.String pullRequestMessage ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.ChangeMessage cmsg = new com.google.gerrit.reviewdb.client.ChangeMessage ( new com.google.gerrit.reviewdb.client.ChangeMessage.Key ( dest.getId ( ) , com.google.gerrit.server.ChangeUtil.messageUUID ( db ) ) , pullRequestAuthorId , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , newPatchSet.getId ( ) ) ; cmsg.setMessage ( pullRequestMessage ) ; return cmsg ; }
private java.nio.file.Path getReplicationStatusPath ( java.lang.String key ) throws java.io.IOException { java.lang.String sanitizedKey = key.replace ( "." , "_" ) . replace ( " " , "_" ) ; java.nio.file.Path projectPath = pluginData.resolve ( ( sanitizedKey + ".replication-error.json" ) ) ; java.nio.file.Files.createDirectories ( projectPath.getParent ( ) ) ; return projectPath ; }
void set ( com.google.gerrit.client.info.ChangeInfo info ) { this . changeId = info.legacyId ( ) ; this . canEdit = ( info.hasActions ( ) ) && ( info.actions ( ) . containsKey ( "assignee" ) ) ; setAssignee ( info.assignee ( ) ) ; assigneeSuggestOracle.setChange ( changeId ) ; editAssigneeIcon.setVisible ( canEdit ) ; }
public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.PutName.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { if ( ( ( self.get ( ) ) != ( rsrc.getUser ( ) ) ) && ( ! ( self.get ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "not allowed to change name" ) ; } return apply ( rsrc.getUser ( ) , input ) ; }
public void onSuccess ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( ( ( mySubname == null ) && ( ( subname ) == null ) ) || ( ( mySubname != null ) && ( mySubname.equals ( subname ) ) ) ) { display ( result ) ; } }
public void testTokenSerializationDeserialization ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor processor = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenProessor ( cipher ) ; com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken ( 0 ) ; java.lang.String serialized = processor.serialize ( token ) ; com.google.common.truth.Truth.assertThat ( serialized ) . isNotEmpty ( ) ; com.google.common.base.Optional < com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken > deserialized = processor.deserialize ( serialized ) ; com.google.common.truth.Truth.assertThat ( deserialized.isPresent ( ) ) . isTrue ( ) ; com.google.common.truth.Truth.assertThat ( token.expiresAt ) . isEqualTo ( deserialized.get ( ) . expiresAt ) ; }
public static void query ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeList > > callback , java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > options , java.lang.String ... queries ) { assert ( queries.length ) >= 2 ; com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.changes.ChangeList.URI ) ; for ( java.lang.String q : queries ) { call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( q ) ) ; } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll ( options ) ; com.google.gerrit.client.changes.ChangeList.addOptions ( call , com.google.gerrit.client.changes.ChangeList.OPTIONS ) ; call.get ( callback ) ; }
private com.google.common.collect.Multimap < java.lang.String , org.eclipse.jgit.diff.Edit > getEditsDueToRebasePerFilePath ( org.eclipse.jgit.revwalk.RevWalk revWalk , org.eclipse.jgit.revwalk.RevCommit commitB , org.eclipse.jgit.revwalk.RevCommit commitA ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { if ( ! ( arePatchSetCommitsWithRebaseInBetween ( revWalk , commitA , commitB ) ) ) { return com.google.common.collect.ImmutableMultimap.of ( ) ; } return getEditsDueToRebasePerFilePath ( commitA , commitB ) ; }
public com.googlecode.prolog_cafe.lang.Operation exec ( com.googlecode.prolog_cafe.lang.Prolog engine ) throws com.googlecode.prolog_cafe.lang.PrologException { engine.setB0 ( ) ; com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference ( ) ; com.google.gerrit.reviewdb.client.Change change = StoredValues.CHANGE.get ( engine ) ; com.google.gerrit.reviewdb.client.Project.NameKey name = change.getProject ( ) ; if ( ! ( a1.unify ( com.googlecode.prolog_cafe.lang.SymbolTerm.create ( name.get ( ) ) , engine.trail ) ) ) { return engine.fail ( ) ; } return cont ; }
private com.google.inject.Key < javax.servlet.http.HttpServlet > notFound ( ) { return key ( new javax.servlet.http.HttpServlet ( ) { @ java.lang.Override protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { rsp.sendError ( HttpServletResponse.SC_NOT_FOUND ) ; } } ) ; }
public void run ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { }
public boolean canSubmit ( ) { return getRefControl ( ) . canSubmit ( isOwner ( ) ) ; }
private java.util.Map < com.google.gerrit.reviewdb.client.AccountGroup.UUID , com.google.gerrit.reviewdb.client.AccountGroupById > getIncludedGroups ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws com.google.gwtorm.server.OrmException { final java.util.Map < com.google.gerrit.reviewdb.client.AccountGroup.UUID , com.google.gerrit.reviewdb.client.AccountGroupById > groups = com.google.common.collect.Maps.newHashMap ( ) ; for ( com.google.gerrit.reviewdb.client.AccountGroupById g : db.get ( ) . accountGroupById ( ) . byGroup ( groupId ) ) { groups.put ( g.getIncludeUUID ( ) , g ) ; } return groups ; }
private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount ( java.lang.String reviewer , com.google.gerrit.server.change.ReviewerResource rsrc , boolean cc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser ( ) . getAccount ( ) ; com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl ( ) ; com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult ( reviewer ) ; if ( isValidReviewer ( member , control ) ) { addReviewers ( rsrc.getChangeResource ( ) , result , com.google.common.collect.ImmutableMap.of ( member.getId ( ) , control ) , cc ) ; } return result ; }
static com.googlecode.prolog_cafe.lang.Term export ( com.google.gerrit.common.data.LabelType type ) { return new com.googlecode.prolog_cafe.lang.StructureTerm ( gerrit.PRED_get_legacy_label_types_1.symLabelType , com.googlecode.prolog_cafe.lang.SymbolTerm.intern ( type.getName ( ) ) , com.googlecode.prolog_cafe.lang.SymbolTerm.intern ( type.getFunctionName ( ) ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( type.getMin ( ) . getValue ( ) ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( type.getMax ( ) . getValue ( ) ) ) ; }
private void render ( com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb , com.google.gerrit.client.diff.FileInfo info ) { sb.openTr ( ) ; sb.openTd ( ) . setStyleName ( com.google.gerrit.client.change.FileTable.R.css ( ) . pointer ( ) ) . closeTd ( ) ; columnReviewed ( sb , info ) ; columnPath ( sb , info ) ; columnComments ( sb , info ) ; columnDelta1 ( sb , info ) ; columnDelta2 ( sb , info ) ; sb.closeTr ( ) ; }
public com.google.gerrit.server.group.GroupJson addOption ( com.google.gerrit.common.groups.ListGroupsOption o ) { options.add ( o ) ; return this ; }
private java.sql.PreparedStatement stubExecuteBatchOK ( java.lang.String command , final int ... updateCounts ) throws java.sql.SQLException { java.sql.PreparedStatement ps = setupPreparedStatementForBatch ( updateCounts ) ; org.mockito.Mockito.stub ( conn.prepareStatement ( command ) ) . toReturn ( ps ) ; return ps ; }
public void addThenRemove ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key1 = com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ; store.add ( key1.getPublicKeyRing ( ) ) ; store.remove ( key1.getPublicKey ( ) . getFingerprint ( ) ) ; org.junit.Assert.assertEquals ( RefUpdate.Result.NO_CHANGE , store.save ( newCommitBuilder ( ) ) ) ; assertKeys ( key1.getKeyId ( ) ) ; }
public java.io.Reader getReader ( ) throws java.io.IOException , java.lang.IllegalStateException { if ( ( ( reader ) == null ) && ( ( response.getEntity ( ) ) != null ) ) { reader = new java.io.InputStreamReader ( response.getEntity ( ) . getContent ( ) ) ; reader.skip ( JSON_MAGIC.length ) ; } return reader ; }
public com.google.gerrit.common.data.GroupReference apply ( com.google.gerrit.server.account.AccountState state ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ; if ( state.getUserName ( ) . isPresent ( ) ) { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid ( state.getUserName ( ) . get ( ) ) ; } else { uuid = com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.uuid ( state.getAccount ( ) . getId ( ) ) ; } return new com.google.gerrit.common.data.GroupReference ( uuid , com.googlesource.gerrit.plugins.singleusergroup.SingleUserGroup.nameOf ( uuid , state ) ) ; }
public void unblockInParentBlockInLocal ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl d = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , d ) ; }
public void testOwnerProject ( ) { grant ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.ProjectControl uBlah = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl uAdmin = util.user ( local , com.google.gerrit.server.project.Util.DEVS , com.google.gerrit.server.project.Util.ADMIN ) ; assertFalse ( "not owner" , uBlah.isOwner ( ) ) ; assertTrue ( "is owner" , uAdmin.isOwner ( ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSetInfo previousPatchSetInfo ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gwtorm.server.OrmException { try { return patchSetInfoFactory.get ( ctx.getDb ( ) , ctx.getNotes ( ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( psId.getParentKey ( ) , ( ( psId.get ( ) ) - 1 ) ) ) ; } catch ( com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
private Account.Id parseIdent ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.PersonIdent a = commit.getAuthorIdent ( ) ; org.eclipse.jgit.lib.PersonIdent c = commit.getCommitterIdent ( ) ; if ( ( a.getName ( ) . equals ( c.getName ( ) ) ) && ( a.getEmailAddress ( ) . equals ( c.getEmailAddress ( ) ) ) ) { return null ; } return noteUtil.parseIdent ( commit.getAuthorIdent ( ) , id ) ; }
public void defaultMessage ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) ; com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId , com.google.gerrit.extensions.common.ListChangesOption.MESSAGES ) ; org.junit.Assert.assertNotNull ( c.messages ) ; org.junit.Assert.assertEquals ( 1 , c.messages.size ( ) ) ; org.junit.Assert.assertEquals ( "Uploaded patch set 1." , c.messages.iterator ( ) . next ( ) . message ) ; }
private void assertIsHealthy ( ) { javax.servlet.http.HttpServletResponse responseMock = mock ( javax.servlet.http.HttpServletResponse.class ) ; servlet.doGet ( null , responseMock ) ; org.mockito.Mockito.verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
private com.google.gerrit.server.account.AccountState makeUser ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id ( 42 ) ; final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( userId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; account.setFullName ( name ) ; account.setPreferredEmail ( email ) ; return new com.google.gerrit.server.account.AccountState ( account , java.util.Collections.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet ( ) , java.util.Collections.< com.google.gerrit.reviewdb.client.AccountExternalId > emptySet ( ) ) ; }
public void onScreenLoad ( com.google.gerrit.client.ui.ScreenLoadEvent event ) { com.google.gerrit.client.ui.Screen screen = event.getScreen ( ) ; if ( screen instanceof com.google.gerrit.client.admin.ProjectScreen ) { com.google.gerrit.reviewdb.client.Project.NameKey projectKey = ( ( com.google.gerrit.client.admin.ProjectScreen ) ( screen ) ) . getProjectKey ( ) ; setTargetHistoryToken ( com.google.gerrit.client.Dispatcher.toProjectAdmin ( projectKey , panel ) ) ; } super . onScreenLoad ( event ) ; }
private static < T extends com.google.gwt.core.client.JavaScriptObject > T parseJson ( com.google.gwt.http.client.Response res ) throws com.google.gwt.json.client.JSONException { java.lang.String json = res.getText ( ) ; if ( json.startsWith ( com.google.gerrit.client.rpc.RestApi.JSON_MAGIC ) ) { json = json.substring ( com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length ( ) ) ; } if ( json.isEmpty ( ) ) { throw new com.google.gwt.json.client.JSONException ( "response was empty" ) ; } return com.google.gerrit.client.rpc.RestApi.cast ( com.google.gwt.json.client.JSONParser.parseStrict ( json ) ) ; }
private void createDraftUpdateIfNull ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { if ( ( draftUpdate ) == null ) { draftUpdate = draftUpdateFactory.create ( ctl , when ) ; if ( ( psId ) != null ) { draftUpdate.setPatchSetId ( psId ) ; } else { draftUpdate.setPatchSetId ( com.google.gerrit.server.notedb.CommentsInNotesUtil.getCommentPsId ( c ) ) ; } } }
public synchronized void add ( java.lang.String event ) throws java.io.IOException { long next = ( getHead ( ) ) + 1 ; java.nio.file.Path epath = paths.event ( next ) ; com.googlesource.gerrit.plugins.events.fsstore.Fs.createDirectories ( epath.getParent ( ) ) ; java.nio.file.Files.write ( epath , ( event + "\n" ) . getBytes ( ) ) ; stores.head.increment ( ) ; }
public void testUpdateOneModified ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 0 ) ; com.google.gwtorm.jdbc.JdbcAccess < com.google.gwtorm.jdbc.TestJdbcAccess.Data , com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey > classUnderTest = createClassUnderTest ( ) ; try { classUnderTest.update ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; org.junit.Assert.fail ( "missing OrmConcurrencyException" ) ; } catch ( com.google.gwtorm.client.OrmConcurrencyException e ) { } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { attachComments ( result ) ; displayComments ( result ) ; send.setEnabled ( true ) ; }
public void self ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts ( ) . self ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.name ) . isEqualTo ( "Administrator" ) ; com.google.common.truth.Truth.assertThat ( info.email ) . isEqualTo ( "admin@example.com" ) ; com.google.common.truth.Truth.assertThat ( info.username ) . isEqualTo ( "admin" ) ; }
protected void doDelete ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) { if ( ! ( currentUserProvider.get ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ) { sendError ( rsp , javax.servlet.http.HttpServletResponse.SC_FORBIDDEN ) ; return ; } this . healthy = false ; rsp.setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
public void pushWithInvalidChangeIdFromEgit ( ) throws java.lang.Exception { com.google.gerrit.acceptance.git.AbstractPushForReview.createCommit ( testRepo , ( "Message with invalid Change-Id\n" + ( "\n" + "Change-Id: I0000000000000000000000000000000000000000\n" ) ) ) ; com.google.gerrit.acceptance.git.AbstractPushForReview.pushForReviewRejected ( testRepo , "invalid Change-Id line format in commit message footer" ) ; com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet ( project ) . getConfig ( ) ; config.getProject ( ) . setRequireChangeID ( InheritableBoolean.FALSE ) ; saveProjectConfig ( project , config ) ; com.google.gerrit.acceptance.git.AbstractPushForReview.pushForReviewRejected ( testRepo , "invalid Change-Id line format in commit message footer" ) ; }
public void shouldCreateSharedDirectoryIfItDoesNotExist ( ) throws java.io.IOException { java.io.File configuredDirectory = tempFolder.newFolder ( ) ; com.google.common.truth.Truth.assertThat ( configuredDirectory.delete ( ) ) . isTrue ( ) ; org.mockito.Mockito.when ( pluginConfigMock.getString ( "sharedDirectory" ) ) . thenReturn ( configuredDirectory.getAbsolutePath ( ) ) ; java.nio.file.Path sharedDirectory = module.getSharedDirectory ( pluginConfigFactoryMock , com.ericsson.gerrit.plugins.highavailability.ModuleTest.PLUGIN_NAME ) ; com.google.common.truth.Truth.assertThat ( sharedDirectory.toFile ( ) . exists ( ) ) . isTrue ( ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { if ( ( cmA ) != null ) { cmA.setHeight ( ( ( event.getHeight ( ) ) - ( com.google.gerrit.client.diff.SideBySide2.HEADER_FOOTER ) ) ) ; cmA.refresh ( ) ; } if ( ( cmB ) != null ) { cmB.setHeight ( ( ( event.getHeight ( ) ) - ( com.google.gerrit.client.diff.SideBySide2.HEADER_FOOTER ) ) ) ; cmB.refresh ( ) ; } }
public void setUpMocks ( ) { changeId = Change.Id.parse ( java.lang.Integer.toString ( com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.CHANGE_ID ) ) ; accountId = Account.Id.parse ( java.lang.Integer.toString ( com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.ACCOUNT_ID ) ) ; indexEventHandler = new com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler ( com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) , com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.PLUGIN_NAME , forwarder ) ; }
public void isEnabledForMultipleRefs ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + ( ( " ref = refs/heads/branch1\n" + " ref = refs/heads/branch2\n" ) + " blockedFileExtension = jar" ) ) ) ; assertThat ( config.isEnabledForRef ( projectName , "refs/heads/branch1" ) ) . isTrue ( ) ; assertThat ( config.isEnabledForRef ( projectName , "refs/heads/branch2" ) ) . isTrue ( ) ; assertThat ( config.isEnabledForRef ( projectName , "refs/heads/branch3" ) ) . isFalse ( ) ; }
public java.util.Collection < com.google.gerrit.common.data.AccessSection > getAccessSections ( ) { return accessSections.values ( ) ; }
public void tearDown ( ) { if ( ( lifecycle ) != null ) { lifecycle.stop ( ) ; } requestContext.setContext ( null ) ; if ( ( db ) != null ) { db.close ( ) ; } com.google.gerrit.testutil.InMemoryDatabase.drop ( schemaFactory ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { final boolean oldValue = k.isGroupOwner ( ) ; final boolean newValue = owner.isChecked ( ) ; Util.GROUP_SVC.changeGroupOwner ( k.getKey ( ) , newValue , new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > ( ) { public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { k.setGroupOwner ( newValue ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { owner.setChecked ( oldValue ) ; k.setGroupOwner ( oldValue ) ; super . onFailure ( caught ) ; } } ) ; }
private void display ( final com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; }
public com.google.gerrit.server.IdentifiedUser parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parseId ( id ) ; if ( user == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Account Not Found: %s" , id ) ) ; } return user ; }
public boolean isOwner ( ) { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( group ) ; if ( accountGroup == null ) { isOwner = false ; } else if ( ( isOwner ) == null ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = accountGroup.getOwnerGroupUUID ( ) ; isOwner = ( getCurrentUser ( ) . getEffectiveGroups ( ) . contains ( ownerUUID ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ; } return isOwner ; }
private boolean isChunk ( final int row ) { final java.lang.Object o = getRowItem ( row ) ; if ( o instanceof com.google.gerrit.client.patches.PatchLine ) { final com.google.gerrit.client.patches.PatchLine pl = ( ( com.google.gerrit.client.patches.PatchLine ) ( o ) ) ; switch ( pl.getType ( ) ) { case DELETE : case INSERT : case REPLACE : return true ; } } else if ( o instanceof com.google.gerrit.client.patches.AbstractPatchContentTable.CommentList ) { return true ; } return false ; }
private void displayDefaultContext ( final short lines ) { for ( int i = 0 ; i < ( AccountGeneralPreferences.CONTEXT_CHOICES.length ) ; i ++ ) { if ( ( com.google.gerrit.client.reviewdb.AccountGeneralPreferences.CONTEXT_CHOICES [ i ] ) == lines ) { defaultContext.setSelectedIndex ( i ) ; return ; } } displayDefaultContext ( AccountGeneralPreferences.DEFAULT_CONTEXT ) ; }
private static void publish ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { java.lang.String token = com.google.gerrit.client.Dispatcher.toPublish ( ps ) ; new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; } private com.google.gerrit.client.ui.Screen select ( ) { return new com.google.gerrit.client.changes.PublishCommentScreen ( ps ) ; } } . onSuccess ( ) ; }
private static boolean havePGP ( ) { try { java.lang.Class.forName ( org.bouncycastle.openpgp.PGPPublicKey.class . getName ( ) ) ; return true ; } catch ( java.lang.NoClassDefFoundError noBouncyCastle ) { return false ; } catch ( java.lang.ClassNotFoundException noBouncyCastle ) { return false ; } }
public void execute ( ) { com.google.gwt.user.client.Window.scrollTo ( 0 , 0 ) ; for ( int i = 0 ; i < ( labelsTable.getColumnCount ( ) ) ; i ++ ) { com.google.gwt.user.client.ui.RadioButton b = ( ( com.google.gwt.user.client.ui.RadioButton ) ( labelsTable.getWidget ( 1 , i ) ) ) ; if ( ( b != null ) && ( b.getValue ( ) ) ) { b.setFocus ( true ) ; break ; } } }
private void parseDelete ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef ( cmd.getRefName ( ) ) ; if ( ctl.canDelete ( ) ) { } else { com.google.gerrit.server.git.ReceiveCommits.reject ( cmd , "can not delete references" ) ; } }
public void unblockInLocalForceEditTopicName_Fails ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.common.truth.Truth.assertThat ( u.controlForRef ( "refs/heads/master" ) . canForceEditTopicName ( ) ) . named ( "u can't edit topic name" ) . isFalse ( ) ; }
protected void configure ( ) { bind ( org.apache.http.impl.client.CloseableHttpClient.class ) . toProvider ( com.ericsson.gerrit.plugins.syncindex.HttpClientProvider.class ) . in ( Scopes.SINGLETON ) ; bind ( com.ericsson.gerrit.plugins.syncindex.Configuration.class ) . in ( Scopes.SINGLETON ) ; bind ( com.ericsson.gerrit.plugins.syncindex.HttpSession.class ) ; bind ( com.ericsson.gerrit.plugins.syncindex.RestSession.class ) ; bind ( java.util.concurrent.Executor.class ) . annotatedWith ( com.ericsson.gerrit.plugins.syncindex.SyncIndexExecutor.class ) . toProvider ( com.ericsson.gerrit.plugins.syncindex.SyncIndexExecutorProvider.class ) ; listener ( ) . to ( com.ericsson.gerrit.plugins.syncindex.SyncIndexExecutorProvider.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.server.extensions.events.ChangeIndexedListener.class ) . to ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.class ) ; }
public void offlineUponStart ( ) throws java.lang.Exception { setUpClientMock ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( new java.net.ConnectException ( ) ) ) . when ( eventsDb ) . createDBIfNotCreated ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( ) ) . when ( eventsDb ) . queryOne ( ) ; }
public static void dialog ( final com.google.gwt.user.client.ui.PopupPanel panel ) { com.google.gwtexpui.globalkey.client.GlobalKey.initEvents ( ) ; com.google.gwtexpui.globalkey.client.GlobalKey.initDialog ( ) ; assert panel.isShowing ( ) ; assert ( com.google.gwtexpui.globalkey.client.GlobalKey.active ) == ( com.google.gwtexpui.globalkey.client.GlobalKey.global ) ; com.google.gwtexpui.globalkey.client.GlobalKey.active = new com.google.gwtexpui.globalkey.client.GlobalKey.State ( panel ) ; com.google.gwtexpui.globalkey.client.GlobalKey.active.add ( new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand ( 0 , com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE , panel ) ) ; panel.addCloseHandler ( com.google.gwtexpui.globalkey.client.GlobalKey.restoreGlobal ) ; }
private void setDoubleClickHandler ( ) { if ( ( messageClick ) == null ) { messageClick = contentPanelMessage.addDomHandler ( new com.google.gwt.event.dom.client.DoubleClickHandler ( ) { @ java.lang.Override public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent arg0 ) { editArea.setText ( contentPanelMessage.getText ( ) ) ; setEdit ( ( ! ( isEdit ( ) ) ) ) ; runClickCallback ( ) ; } } , com.google.gwt.event.dom.client.DoubleClickEvent.getType ( ) ) ; } }
private void registerCmEvents ( final net.codemirror.lib.CodeMirror cm ) { cm.on ( "beforeSelectionChange" , onSelectionChange ( cm ) ) ; cm.on ( "cursorActivity" , updateActiveLine ( cm ) ) ; cm.on ( "gutterClick" , onGutterClick ( cm ) ) ; cm.on ( "focus" , updateActiveLine ( cm ) ) ; }
public void setHttpInjector ( com.google.inject.Injector injector ) { httpModule = com.google.gerrit.server.plugins.PluginGuiceEnvironment.copy ( injector ) ; httpGen = injector.getProvider ( com.google.gerrit.server.plugins.ModuleGenerator.class ) ; onStart.addAll ( com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners ( injector , com.google.gerrit.server.plugins.StartPluginListener.class ) ) ; onReload.addAll ( com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners ( injector , com.google.gerrit.server.plugins.ReloadPluginListener.class ) ) ; }
public void abandonWipChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner ) ; assertThat ( sender ) . notSent ( ) ; }
private void setReviewed ( com.google.gerrit.client.info.FileInfo info , boolean r ) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision ( curr ) . view ( "files" ) . id ( info.path ( ) ) . view ( "reviewed" ) ; if ( r ) { api.put ( com.google.gerrit.client.rpc.CallbackGroup.< com.google.gerrit.client.changes.ReviewInfo > emptyCallback ( ) ) ; } else { api.delete ( com.google.gerrit.client.rpc.CallbackGroup.< com.google.gerrit.client.changes.ReviewInfo > emptyCallback ( ) ) ; } }
public java.util.List < com.google.gerrit.server.ReviewerStatusUpdate > reviewerUpdates ( ) throws com.google.gwtorm.server.OrmException { if ( ( reviewerUpdates ) == null ) { reviewerUpdates = approvalsUtil.getReviewerUpdates ( notes ( ) ) ; } return reviewerUpdates ; }
public static boolean isExpected ( int statusCode ) { switch ( statusCode ) { case com.google.gerrit.client.rpc.RestApi.SC_UNAVAILABLE : case 400 : case 401 : case 403 : case 404 : case 405 : case 409 : case 412 : case 429 : return true ; default : return false ; } }
private static boolean isSingleQuery ( java.lang.String query ) { if ( query.matches ( "^[1-9][0-9]*$" ) ) { return true ; } if ( query.matches ( "^[iI][0-9a-f]{4,}$" ) ) { return true ; } if ( query.matches ( ( ( "^([0-9a-fA-F]{4," + ( com.google.gerrit.reviewdb.client.RevId.LEN ) ) + "})$" ) ) ) { return true ; } return false ; }
public void storeLocalOffline ( ) throws java.lang.Exception { setUpClientMock ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( new java.net.ConnectException ( ) ) ) . when ( eventsDb ) . createDBIfNotCreated ( ) ; org.mockito.Mockito.doThrow ( new java.sql.SQLException ( ) ) . when ( eventsDb ) . queryOne ( ) ; }
private boolean validateAction ( java.lang.String actionName , java.lang.String actionValue ) throws com.j2bugzilla.base.BugzillaException { com.j2bugzilla.rpc.GetLegalValues.Fields field = getFields ( ) . get ( actionName ) ; return ( field != null ) && ( getLegalValues ( field ) . contains ( actionValue ) ) ; }
void setShowLineNumbers ( boolean b ) { cmA.setOption ( "lineNumbers" , b ) ; cmB.setOption ( "lineNumbers" , b ) ; if ( b ) { diffTable.addStyleName ( DiffTable.style.showLineNumbers ( ) ) ; } else { diffTable.removeStyleName ( DiffTable.style.showLineNumbers ( ) ) ; } }
public org.eclipse.jgit.lib.ObjectId loadRevision ( ) throws com.google.gwtorm.server.OrmException { if ( loaded ) { return getRevision ( ) ; } else if ( ! ( args.migration.enabled ( ) ) ) { return null ; } try ( org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository ( getProjectName ( ) ) ) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase ( ) . exactRef ( getRefName ( ) ) ; return ref != null ? ref.getObjectId ( ) : null ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
private com.google.gerrit.server.git.ProjectLevelConfig getPluginConfig ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String pluginName ) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get ( projectName ) ; if ( projectState == null ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( projectName ) ; } return projectState.getConfig ( pluginName ) ; }
private void assertProblems ( org.eclipse.jgit.transport.PushCertificate cert , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = checker.check ( cert ) . getCheckResult ( ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public void testReplaceTwoLinks ( ) { final com.google.gwtexpui.safehtml.client.RegexFindReplace [ ] repl = new com.google.gwtexpui.safehtml.client.RegexFindReplace [ ] { new com.google.gwtexpui.safehtml.client.RegexFindReplace ( "(issue\\s(\\d+))" , "<a href=\"?$2\">$1</a>" ) } ; final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html ( "A\nissue 42\nissue 9918\nB" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.replaceAll ( java.util.Arrays.asList ( repl ) ) ; assertNotSame ( o , n ) ; assertEquals ( ( "A\n" + ( ( "<a href=\"?42\">issue 42</a>\n" + "<a href=\"?9918\">issue 9918</a>\n" ) + "B" ) ) , n.asString ( ) ) ; }
public void abandonReviewableChangeNotifyOwnersReviewers ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . notTo ( sc.owner , sc.starrer ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
public void testUpsertTwoFirstExisting ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 , 0 ) ; java.sql.PreparedStatement insert = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . upsert ( twoRows ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( update ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( insert ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertExpectedIdsUsed ( insert , 2 ) ; }
public void nonIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a OR foo:b" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.query.change.AndChangeSource.class ) . isSameAs ( out.getClass ( ) ) ; com.google.common.truth.Truth.assertThat ( out.getChildren ( ) ) . containsExactly ( query ( com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) , in ) . inOrder ( ) ; }
private com.google.gerrit.server.git.MetaDataUpdate createMetaDataUpdate ( org.eclipse.jgit.lib.Repository allUsersRepo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.BatchRefUpdate batchRefUpdate ) { com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , allUsersName , allUsersRepo , batchRefUpdate ) ; metaDataUpdate.getCommitBuilder ( ) . setAuthor ( serverUser ) ; metaDataUpdate.getCommitBuilder ( ) . setCommitter ( serverUser ) ; return metaDataUpdate ; }
public void testMultipleIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "file:a OR foo:b OR file:c OR foo:d" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert.assertSame ( com.google.gerrit.server.query.change.OrSource.class , out.getClass ( ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( query ( com.google.gerrit.server.query.Predicate.or ( in.getChild ( 0 ) , in.getChild ( 2 ) ) ) , in.getChild ( 1 ) , in.getChild ( 3 ) ) , out.getChildren ( ) ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; bind ( com.google.gerrit.pgm.init.Browser.class ) ; }
public synchronized void stop ( ) { if ( ( daemonAcceptor ) != null ) { try { daemonAcceptor.close ( true ) . await ( ) ; com.google.gerrit.sshd.SshDaemon.sshDaemonLog.info ( "Stopped Gerrit SSHD" ) ; } catch ( java.io.IOException e ) { com.google.gerrit.sshd.SshDaemon.sshDaemonLog.warn ( "Exception caught while closing" , e ) ; } finally { daemonAcceptor = null ; } } }
private boolean inProject ( com.google.gerrit.reviewdb.client.Project project ) { if ( ( projectControl ) != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( project.getNameKey ( ) ) ; } else { return true ; } }
public com.google.gerrit.server.git.PluginProjectConfig getPluginConfig ( java.lang.String pluginName ) { com.google.common.collect.LinkedListMultimap < java.lang.String , java.lang.String > pluginConfig = pluginConfigs.get ( pluginName ) ; if ( pluginConfig == null ) { pluginConfig = com.google.common.collect.LinkedListMultimap.create ( ) ; pluginConfigs.put ( pluginName , pluginConfig ) ; } return new com.google.gerrit.server.git.PluginProjectConfig ( pluginName , pluginConfig ) ; }
protected void run ( ) throws java.lang.Exception { com.google.gerrit.server.project.SetHead.Input input = new com.google.gerrit.server.project.SetHead.Input ( ) ; input.ref = newHead ; try { setHead.apply ( new com.google.gerrit.server.project.ProjectResource ( project ) , input ) ; } catch ( com.google.gerrit.extensions.restapi.UnprocessableEntityException e ) { throw die ( e ) ; } }
public static java.lang.String robotCommentsRef ( com.google.gerrit.reviewdb.client.Change.Id id ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.REFS_CHANGES ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( id.get ( ) ) ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.ROBOT_COMMENTS_SUFFIX ) ; return r.toString ( ) ; }
public void setUp ( ) throws java.lang.Exception { anonRestSession = new com.google.gerrit.acceptance.RestSession ( server , null ) ; admin2 = accounts.admin2 ( ) ; com.google.gerrit.extensions.api.groups.GroupInput gi = new com.google.gerrit.extensions.api.groups.GroupInput ( ) ; gi.name = name ( "New-Group" ) ; gi.members = com.google.common.collect.ImmutableList.of ( user.id.toString ( ) ) ; newGroup = gApi.groups ( ) . create ( gi ) . get ( ) ; }
public void changeUserName ( final java.lang.String newName , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) { if ( realm.allowsEdit ( Account.FieldName.USER_NAME ) ) { com.google.gerrit.httpd.rpc.Handler.wrap ( changeUserNameFactory.create ( newName ) ) . to ( callback ) ; } else { callback.onFailure ( new com.google.gerrit.common.errors.PermissionDeniedException ( ( "Not allowed to change" + " username" ) ) ) ; } }
< K , V > com.google.inject.Provider < com.google.gerrit.server.cache.EntryCreator < K , V > > getEntryCreator ( com.google.gerrit.server.cache.CacheProvider < K , V > cp , java.lang.Class < ? extends com.google.gerrit.server.cache.EntryCreator < K , V > > type ) { com.google.inject.Key < com.google.gerrit.server.cache.EntryCreator < K , V > > key = info.newKey ( ) ; bind ( key ) . to ( type ) . in ( Scopes.SINGLETON ) ; return getProvider ( key ) ; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType ( com.google.gerrit.server.query.change.ChangeData cd ) { try { return cd.submitType ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { logError ( ( "Failed to get submit type for " + ( cd.getId ( ) ) ) , e ) ; return null ; } }
public static com.google.gerrit.server.notedb.NotesMigration allEnabled ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "notedb" , null , "write" , true ) ; cfg.setBoolean ( "notedb" , "patchSetApprovals" , "read" , true ) ; cfg.setBoolean ( "notedb" , "changeMessages" , "read" , true ) ; cfg.setBoolean ( "notedb" , "comments" , "read" , true ) ; return new com.google.gerrit.server.notedb.NotesMigration ( cfg ) ; }
private static java.lang.reflect.Method getDefaultConfig ( java.lang.Class < ? > clazz ) { java.lang.reflect.Method result = null ; for ( java.lang.reflect.Method m : clazz.getMethods ( ) ) { com.google.gerrit.testutil.ConfigSuite.Default ann = m.getAnnotation ( com.google.gerrit.testutil.ConfigSuite.Default.class ) ; if ( ann != null ) { com.google.common.base.Preconditions.checkArgument ( ( result == null ) , "Multiple methods annotated with @ConfigSuite.Method: %s, %s" , result , m ) ; result = m ; } } return result ; }
public void tooManyTerms ( ) throws java.lang.Exception { java.lang.String q = "file:a OR file:b OR file:c" ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( q ) ; org.junit.Assert.assertEquals ( query ( in ) , rewrite ( in ) ) ; exception.expect ( com.google.gerrit.server.query.QueryParseException.class ) ; exception.expectMessage ( "too many terms in query" ) ; rewrite ( parse ( ( q + " OR file:d" ) ) ) ; }
public void testGetCachePatterns ( ) throws java.lang.Exception { globalPluginConfig.setStringList ( com.ericsson.gerrit.plugins.highavailability.Configuration.CACHE_SECTION , null , com.ericsson.gerrit.plugins.highavailability.Configuration.PATTERN_KEY , com.google.common.collect.ImmutableList.of ( "^my_cache.*" , "other" ) ) ; com.google.common.truth.Truth.assertThat ( getConfiguration ( ) . cache ( ) . patterns ( ) ) . containsExactly ( "^my_cache.*" , "other" ) ; }
public void abandonReviewableWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
private int search ( final java.lang.String fileName ) { int high = patches.length ; int low = 0 ; while ( low < high ) { final int mid = ( low + high ) > > > 1 ; final int cmp = patches [ mid ] . getNewName ( ) . compareTo ( fileName ) ; if ( cmp < 0 ) low = mid + 1 ; else if ( cmp == 0 ) return mid ; else high = mid ; } return - ( low + 1 ) ; }
private static com.google.gerrit.server.query.change.ListChanges.GitPerson toGitPerson ( com.google.gerrit.reviewdb.client.UserIdentity committer ) { com.google.gerrit.server.query.change.ListChanges.GitPerson p = new com.google.gerrit.server.query.change.ListChanges.GitPerson ( ) ; p.name = committer.getName ( ) ; p.email = committer.getEmail ( ) ; p.date = committer.getDate ( ) ; p.tz = committer.getTimeZone ( ) ; return p ; }
com.googlesource.gerrit.plugins.gitiles.FilteredRepository create ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor ( name , userProvider.get ( ) ) ; if ( ! ( ctl.isVisible ( ) ) ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( name ) ; } org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( name ) ; return new com.googlesource.gerrit.plugins.gitiles.FilteredRepository ( ctl , repo , new com.google.gerrit.server.git.VisibleRefFilter ( tagCache , changeCache , repo , ctl , db.get ( ) , true ) ) ; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.server.git.MergeOpRepoManager.OpenRepo or , com.google.gerrit.server.git.MergeTip mergeTip , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.server.git.CodeReviewCommit branchTip , com.google.gerrit.server.git.SubmoduleOp submoduleOp ) throws com.google.gerrit.server.git.IntegrationException { return submitStrategyFactory.create ( submitType , db , or.repo , or.rw , or.ins , or.canMergeFlag , getAlreadyAccepted ( or , branchTip ) , destBranch , caller , mergeTip , commits , submissionId , submitInput.notify , submoduleOp ) ; }
private void display ( com.google.gerrit.reviewdb.client.AccountExternalId id ) { java.lang.String user ; java.lang.String pass ; if ( id != null ) { user = id.getSchemeRest ( ) ; pass = id.getPassword ( ) ; } else { user = null ; pass = null ; } this . id = id ; com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( user ) ; password.setText ( ( pass != null ? pass : "" ) ) ; password.setVisible ( ( pass != null ) ) ; enableUI ( true ) ; }
public java.lang.String get ( final int idx ) { for ( int i = lastGetRange ; i < ( ranges.size ( ) ) ; i ++ ) { final com.google.gerrit.client.data.SparseFileContent.Range r = ranges.get ( i ) ; if ( r.contains ( idx ) ) { lastGetRange = i ; return r.get ( idx ) ; } } if ( ( lastGetRange ) != 0 ) { lastGetRange = 0 ; return get ( idx ) ; } throw new java.lang.ArrayIndexOutOfBoundsException ( idx ) ; }
private void alterTable ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String sqlFormat ) throws java.sql.SQLException { java.sql.Statement stmt = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) . getConnection ( ) . createStatement ( ) ; try { stmt.executeUpdate ( java.lang.String.format ( sqlFormat , "patch_set_approvals" , "category_id" ) ) ; } finally { stmt.close ( ) ; } }
private com.google.inject.Injector createSshInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < > ( ) ; modules.add ( sysInjector.getInstance ( com.google.gerrit.sshd.SshModule.class ) ) ; if ( ! ( test ) ) { modules.add ( new com.google.gerrit.sshd.SshHostKeyModule ( ) ) ; } modules.add ( new com.google.gerrit.sshd.commands.DefaultCommandModule ( slave ) ) ; return sysInjector.createChildInjector ( modules ) ; }
public static com.google.gerrit.server.project.RefPatternMatcher getMatcher ( java.lang.String pattern ) { if ( pattern.contains ( "${" ) ) { return new com.google.gerrit.server.project.RefPatternMatcher.ExpandParameters ( pattern ) ; } else if ( com.google.gerrit.server.project.RefControl.isRE ( pattern ) ) { return new com.google.gerrit.server.project.RefPatternMatcher.Regexp ( pattern ) ; } else if ( pattern.endsWith ( "/*" ) ) { return new com.google.gerrit.server.project.RefPatternMatcher.Prefix ( pattern.substring ( 0 , ( ( pattern.length ( ) ) - 1 ) ) ) ; } else { return new com.google.gerrit.server.project.RefPatternMatcher.Exact ( pattern ) ; } }
public void starUnstarChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; java.lang.String triplet = "p~master~" + ( r.getChangeId ( ) ) ; gApi.accounts ( ) . self ( ) . starChange ( triplet ) ; org.junit.Assert.assertTrue ( getChange ( triplet ) . starred ) ; gApi.accounts ( ) . self ( ) . unstarChange ( triplet ) ; org.junit.Assert.assertNull ( getChange ( triplet ) . starred ) ; }
public void createEmptyEditRest ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( org.apache.http.HttpStatus.SC_NO_CONTENT , adminSession.post ( urlEdit ( ) ) . getStatusCode ( ) ) ; com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > edit = editUtil.byChange ( change ) ; org.junit.Assert.assertArrayEquals ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD , com.google.gerrit.acceptance.edit.ChangeEditIT.toBytes ( fileUtil.getContent ( edit.get ( ) . getChange ( ) . getProject ( ) , edit.get ( ) . getRevision ( ) . get ( ) , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ) ) ; }
public void publishDraftPatchSet ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createDraftChange ( ) ; com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId ) ; org.junit.Assert.assertEquals ( ( "p~master~" + changeId ) , c.id ) ; org.junit.Assert.assertEquals ( Change.Status.DRAFT , c.status ) ; com.google.gerrit.acceptance.RestResponse r = publishPatchSet ( changeId ) ; org.junit.Assert.assertEquals ( 204 , r.getStatusCode ( ) ) ; c = getChange ( changeId ) ; org.junit.Assert.assertEquals ( Change.Status.NEW , c.status ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . screenRegex ( "project/(.*)/rev/(.*)/(.*)" , new com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.Factory ( ) ) ; com.google.gerrit.plugin.client.Plugin.get ( ) . screenRegex ( "project/(.*)/(.*)" , new com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.HeadFactory ( ) ) ; }
public void nameValue ( ) { final java.lang.String name = "author" ; final java.lang.String value = "alice" ; final com.google.gerrit.server.query.OperatorPredicate < java.lang.String > f = f ( name , value ) ; org.junit.Assert.assertSame ( name , f.getOperator ( ) ) ; org.junit.Assert.assertSame ( value , f.getValue ( ) ) ; org.junit.Assert.assertEquals ( 0 , f.getChildren ( ) . size ( ) ) ; }
public void testGcWithoutCapability_Error ( ) throws java.lang.Exception { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession ( server , user ) ; s.exec ( "gerrit gc --all" ) ; assertError ( ( "One of the following capabilities is required to access this" + " resource: [runGC, maintainServer]" ) , s.getError ( ) ) ; s.close ( ) ; }
public void getProject ( ) throws java.lang.Exception { java.lang.String name = project.get ( ) ; com.google.gerrit.acceptance.RestResponse r = adminSession.get ( ( "/projects/" + name ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; com.google.gerrit.extensions.common.ProjectInfo p = newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.extensions.common.ProjectInfo.class ) ; com.google.common.truth.Truth.assertThat ( p.name ) . isEqualTo ( name ) ; }
public com.google.gerrit.extensions.common.AccountInfo accountInfo ( com.google.gerrit.server.account.AccountState accountState ) { if ( ( accountState == null ) || ( ( accountState.getAccount ( ) . getId ( ) ) == null ) ) { return null ; } com.google.gerrit.reviewdb.client.Account account = accountState.getAccount ( ) ; com.google.gerrit.extensions.common.AccountInfo accountInfo = new com.google.gerrit.extensions.common.AccountInfo ( account.getId ( ) . get ( ) ) ; accountInfo.email = account.getPreferredEmail ( ) ; accountInfo.name = account.getFullName ( ) ; accountInfo.username = accountState.getUserName ( ) ; return accountInfo ; }
private static void mergeImpl ( final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { try { new com.google.gerrit.git.MergeOp ( com.google.gerrit.server.GerritServer.getInstance ( ) , branch ) . merge ( ) ; } catch ( java.lang.Throwable e ) { e.printStackTrace ( ) ; } }
public com.google.gitiles.GitilesView.Builder setPathPart ( java.lang.String path ) { switch ( type ) { case PATH : case DIFF : this . path = com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash ( com.google.common.base.Preconditions.checkNotNull ( path ) ) ; return this ; case DESCRIBE : case REFS : case LOG : this . path = ( path != null ) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash ( path ) : null ; return this ; default : throw new java.lang.IllegalStateException ( java.lang.String.format ( "cannot set path on %s view" , type ) ) ; } }
private org.eclipse.jgit.transport.PushResult pushVia ( org.eclipse.jgit.transport.Transport tn ) throws java.io.IOException , org.eclipse.jgit.errors.NotSupportedException , org.eclipse.jgit.errors.TransportException { tn.applyConfig ( config ) ; tn.setCredentialsProvider ( credentialsProvider ) ; java.util.List < org.eclipse.jgit.transport.RemoteRefUpdate > todo = generateUpdates ( tn ) ; if ( todo.isEmpty ( ) ) { return new org.eclipse.jgit.transport.PushResult ( ) ; } com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( ( ( ( "Push to " + ( uri ) ) + " references: " ) + todo ) ) ; return tn.push ( NullProgressMonitor.INSTANCE , todo ) ; }
public void setUp ( ) { fs = com.google.common.jimfs.Jimfs.newFileSystem ( com.google.common.jimfs.Configuration.unix ( ) ) ; ts = new java.util.concurrent.atomic.AtomicLong ( org.joda.time.format.ISODateTimeFormat.dateTime ( ) . parseMillis ( "2010-01-30T12:00:00.000-08:00" ) ) ; }
private static void createIndexes ( ) { com.google.gerrit.elasticsearch.ElasticChangeIndex.ChangeMapping openChangesMapping = new com.google.gerrit.elasticsearch.ElasticChangeIndex.ChangeMapping ( ChangeSchemaDefinitions.INSTANCE.getLatest ( ) ) ; com.google.gerrit.elasticsearch.ElasticChangeIndex.ChangeMapping closedChangesMapping = new com.google.gerrit.elasticsearch.ElasticChangeIndex.ChangeMapping ( ChangeSchemaDefinitions.INSTANCE.getLatest ( ) ) ; openChangesMapping.closedChanges = null ; closedChangesMapping.openChanges = null ; com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node.client ( ) . admin ( ) . indices ( ) . prepareCreate ( com.google.gerrit.elasticsearch.ElasticQueryChangesTest.INDEX_NAME ) . addMapping ( com.google.gerrit.elasticsearch.ElasticChangeIndex.OPEN_CHANGES , ElasticTestUtils.gson.toJson ( openChangesMapping ) ) . addMapping ( com.google.gerrit.elasticsearch.ElasticChangeIndex.CLOSED_CHANGES , ElasticTestUtils.gson.toJson ( closedChangesMapping ) ) . execute ( ) . actionGet ( ) ; }
private java.lang.Runnable doScroll ( final net.codemirror.lib.CodeMirror cm ) { final net.codemirror.lib.CodeMirror other = ( cm == ( cmA ) ) ? cmB : cmA ; return new java.lang.Runnable ( ) { public void run ( ) { cm.scrollToY ( other.getScrollInfo ( ) . getTop ( ) ) ; } } ; }
public static org.eclipse.jgit.api.Git cloneProject ( java.lang.String url ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { final java.io.File gitDir = com.google.gerrit.acceptance.TempFileUtil.createTempDirectory ( ) ; final org.eclipse.jgit.api.CloneCommand cloneCmd = org.eclipse.jgit.api.Git.cloneRepository ( ) ; cloneCmd.setURI ( url ) ; cloneCmd.setDirectory ( gitDir ) ; return cloneCmd.call ( ) ; }
private org.apache.lucene.search.Query notTimestamp ( com.google.gerrit.server.index.TimestampRangePredicate < V > r ) throws com.google.gerrit.index.query.QueryParseException { if ( ( r.getMinTimestamp ( ) . getTime ( ) ) == 0 ) { return org.apache.lucene.search.NumericRangeQuery.newLongRange ( r.getField ( ) . getName ( ) , r.getMaxTimestamp ( ) . getTime ( ) , null , true , true ) ; } throw new com.google.gerrit.index.query.QueryParseException ( ( "cannot negate: " + r ) ) ; }
public void preferInsertAtLineBreak2 ( ) throws java.lang.Exception { java.lang.String a = " abc\n def\n" ; java.lang.String b = " abc\n def\n" ; java.util.List < org.eclipse.jgit.diff.Edit > expected = new org.eclipse.jgit.diff.EditList ( ) ; expected.add ( new org.eclipse.jgit.diff.Edit ( 0 , 0 , 0 , 2 ) ) ; expected.add ( new org.eclipse.jgit.diff.Edit ( 6 , 6 , 8 , 10 ) ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.patch.IntraLineLoaderTest.intraline ( a , b ) ) . isEqualTo ( expected ) ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gwt.dom.client.Document.get ( ) . getElementById ( "gerrit_hostpagedata" ) . removeFromParent ( ) ; com.google.gerrit.client.Gerrit.myConfig = result.config ; com.google.gerrit.client.Gerrit.myTheme = result.theme ; if ( ( result.account ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.account ; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth ; } if ( ( result.accountDiffPref ) != null ) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( result ) ; }
public void readCommentLinkMatchButNoHtmlOrLink ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit ( ) . add ( "project.config" , ( "[commentlink \"bugzilla\"]\n" + "\tmatch = \"(bugs#?)(d+)\"\n" ) ) . create ( ) ; com.google.gerrit.server.git.ProjectConfig cfg = read ( rev ) ; com.google.common.truth.Truth.assertThat ( cfg.getCommentLinkSections ( ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( cfg.getValidationErrors ( ) . stream ( ) . map ( ValidationError :: getMessage ) ) . containsExactly ( ( "project.config: Error in pattern \"(bugs#?)(d+)\" in commentlink.bugzilla.match: " + "commentlink.bugzilla must have either link or html" ) ) ; }
public boolean cleanUp ( ) { java.io.File gitDirectory = destinationDirectory ; if ( ! ( gitDirectory.exists ( ) ) ) { return false ; } try { org.apache.commons.io.FileUtils.deleteDirectory ( gitDirectory ) ; return true ; } catch ( java.io.IOException e ) { com.googlesrouce.gerrit.plugins.github.git.GitClone.log.error ( ( "Cannot clean-up output Git directory " + gitDirectory ) ) ; return false ; } }
private PatchSet.Id parsePatchSetId ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.util.List < java.lang.String > psIdLines = commit.getFooterLines ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET ) ; if ( ( psIdLines.size ( ) ) != 1 ) { throw parseException ( "missing or multiple %s: %s" , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET , psIdLines ) ; } java.lang.Integer psId = com.google.common.primitives.Ints.tryParse ( psIdLines.get ( 0 ) ) ; if ( psId == null ) { throw parseException ( "invalid %s: %s" , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET , psIdLines.get ( 0 ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , psId ) ; }
private void fireEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.RefEvent event ) { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( branchName , holder.user ) ) { holder.listener.onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
private com.google.inject.Injector createWebInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebModule.class ) ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebSshGlueModule.class ) ) ; if ( sshd ) { modules.add ( sshInjector.getInstance ( com.google.inject.Module.class ) ) ; } return sysInjector.createChildInjector ( modules ) ; }
public void changeProjectAccess ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.lang.String baseRevision , java.lang.String msg , java.util.List < com.google.gerrit.common.data.AccessSection > sections , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > cb ) { org.eclipse.jgit.lib.ObjectId base = org.eclipse.jgit.lib.ObjectId.fromString ( baseRevision ) ; changeProjectAccessFactory.create ( projectName , base , sections , msg ) . to ( cb ) ; }
protected com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase ( ) . exactRef ( getRefName ( ) ) ; return com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle.create ( new org.eclipse.jgit.revwalk.RevWalk ( repo ) , ( ref != null ? ref.getObjectId ( ) : null ) ) ; }
private com.google.inject.Injector createWebInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebModule.class ) ) ; modules.add ( sysInjector.getInstance ( com.google.gerrit.httpd.GitOverHttpModule.class ) ) ; modules.add ( sshInjector.getInstance ( com.google.gerrit.httpd.WebSshGlueModule.class ) ) ; modules.add ( com.google.gerrit.httpd.CacheBasedWebSession.module ( ) ) ; if ( sshd ) { modules.add ( sshInjector.getInstance ( com.google.inject.Module.class ) ) ; } return sysInjector.createChildInjector ( modules ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.project.ProjectControl ctl ; try { ctl = controlFactory.controlFor ( new com.google.gerrit.reviewdb.client.Project.NameKey ( id ) , user.get ( ) ) ; } catch ( com.google.gerrit.server.project.NoSuchProjectException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } if ( ( ! ( ctl.isVisible ( ) ) ) && ( ! ( ctl.isOwner ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.project.ProjectResource ( ctl ) ; }
private void postEvent ( com.googlesource.gerrit.plugins.replication.PushOne pushOp ) { postEvent ( pushOp , null ) ; }
public static com.google.gerrit.server.index.IndexConfig fromConfig ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.server.index.IndexConfig.Builder b = com.google.gerrit.server.index.IndexConfig.builder ( ) ; return b.maxLimit ( cfg.getInt ( "index" , null , "maxLimit" , b.maxLimit ( ) ) ) . maxPages ( cfg.getInt ( "index" , null , "maxPages" , b.maxPages ( ) ) ) . maxTerms ( cfg.getInt ( "index" , null , "maxTerms" , b.maxTerms ( ) ) ) . build ( ) ; }
public void onExit ( int rc , java.lang.String exitMessage ) { exit.onExit ( translateExit ( rc ) , exitMessage ) ; log ( rc ) ; }
public void onFailure ( final java.lang.Throwable caught ) { userNameTxt.setEnabled ( true ) ; changeUserName.setEnabled ( true ) ; if ( InvalidSshUserNameException.MESSAGE.equals ( caught.getMessage ( ) ) ) { invalidUserName ( ) ; } else { super . onFailure ( caught ) ; } }
public java.lang.String getHtmlMessage ( ) { if ( com.google.common.base.Strings.isNullOrEmpty ( id ) ) { return null ; } if ( com.google.common.base.Strings.isNullOrEmpty ( expiresAt ) ) { com.googlesource.gerrit.plugins.messageoftheday.MessageOfTheDayImpl.log.warn ( "expiresAt not defined, no message will be shown" ) ; return null ; } if ( ( com.googlesource.gerrit.plugins.messageoftheday.MessageOfTheDayImpl.today ( ) . compareTo ( expiresAt ) ) > 0 ) { return null ; } return msg ; }
public com.google.common.base.Optional < com.google.gerrit.reviewdb.client.PatchSetApproval > getSubmitApproval ( ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval psa : currentApprovals ( ) ) { if ( psa.isLegacySubmit ( ) ) { return com.google.common.base.Optional.fromNullable ( psa ) ; } } return com.google.common.base.Optional.absent ( ) ; }
public java.util.Collection < com.google.gerrit.pgm.init.api.InitStep > getInitSteps ( ) { java.util.List < java.io.File > jars = scanJarsInPluginsDirectory ( ) ; java.util.ArrayList < com.google.gerrit.pgm.init.api.InitStep > pluginsInitSteps = new java.util.ArrayList < > ( ) ; for ( java.io.File jar : jars ) { com.google.gerrit.pgm.init.api.InitStep init = loadInitStep ( jar ) ; if ( init != null ) { pluginsInitSteps.add ( init ) ; } } return pluginsInitSteps ; }
public void patchComments ( final com.google.gerrit.client.reviewdb.Patch.Key patchKey , final com.google.gerrit.client.reviewdb.PatchSet.Id psa , final com.google.gerrit.client.reviewdb.PatchSet.Id psb , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.patches.CommentDetail > callback ) { if ( psb == null ) { callback.onFailure ( new com.google.gerrit.client.rpc.NoSuchEntityException ( ) ) ; return ; } run ( callback , new com.google.gerrit.server.patch.PatchCommentAction ( patchKey , psa , psb ) ) ; }
public static synchronized void setClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert ( clockStep , clockStepUnit ) ; HEAD ( ( 6899000.0 - 2.14 ) ) ; org.joda.time.DateTimeUtils.setCurrentMillisProvider ( new org.joda.time.DateTimeUtils.MillisProvider ( ) { @ java.lang.Override public long getMillis ( ) { return com.google.gerrit.testutil.TestTimeUtil.clockMs.getAndAdd ( com.google.gerrit.testutil.TestTimeUtil.clockStepMs ) ; } } ) ; }
private void executePostOps ( ) throws java.lang.Exception { com.google.gerrit.server.update.BatchUpdate.ContextImpl ctx = new com.google.gerrit.server.update.BatchUpdate.ContextImpl ( ) ; for ( com.google.gerrit.server.update.BatchUpdate.Op op : ops.values ( ) ) { op.postUpdate ( ctx ) ; } for ( com.google.gerrit.server.update.BatchUpdate.RepoOnlyOp op : repoOnlyOps ) { op.postUpdate ( ctx ) ; } }
public void testUpdateOneException ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchException ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , new java.sql.BatchUpdateException ( ) ) ; try { createClassUnderTest ( ) . update ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; org.junit.Assert.fail ( "missingException" ) ; } catch ( com.google.gwtorm.client.OrmException e ) { } }
private com.google.gerrit.server.git.MergeOp.OpenRepo openRepo ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException { com.google.gerrit.server.git.MergeOp.OpenRepo repo = openRepos.get ( project ) ; if ( repo == null ) { try { repo = new com.google.gerrit.server.git.MergeOp.OpenRepo ( repoManager.openRepository ( project ) ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException e ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( project ) ; } openRepos.put ( project , repo ) ; } return repo ; }
protected static void send ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , byte [ ] data ) throws java.io.IOException { if ( ( ( data.length ) > 256 ) && ( com.google.gwt.user.server.rpc.RPCServletUtils.acceptsGzipEncoding ( req ) ) ) { res.setHeader ( "Content-Encoding" , "gzip" ) ; data = com.google.gerrit.httpd.HtmlDomUtil.compress ( data ) ; } res.setContentLength ( data.length ) ; java.io.OutputStream out = res.getOutputStream ( ) ; try { out.write ( data ) ; } finally { out.close ( ) ; } }
public java.lang.String format ( org.eclipse.jgit.lib.PersonIdent ident ) { java.text.DateFormat df = getDateFormat ( format ) ; java.util.TimeZone tz = ident.getTimeZone ( ) ; if ( tz == null ) { tz = org.eclipse.jgit.util.SystemReader.getInstance ( ) . getTimeZone ( ) ; } df.setTimeZone ( tz ) ; return df.format ( ident.getWhen ( ) ) ; }
private void sendCreateChange ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gerrit.common.errors.EmailException { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create ( ctx.getProject ( ) , change.getId ( ) ) ; cm.setFrom ( ctx.getAccountId ( ) ) ; cm.setPatchSet ( patchSet , patchSetInfo ) ; cm.addReviewers ( recipients.getReviewers ( ) ) ; cm.addExtraCC ( recipients.getCcOnly ( ) ) ; cm.send ( ) ; }
public boolean isVisible ( ) { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( group ) ; return ( ( ( ( accountGroup != null ) && ( accountGroup.isVisibleToAll ( ) ) ) || ( ( user ) instanceof com.google.gerrit.server.InternalUser ) ) || ( user.getEffectiveGroups ( ) . contains ( group.getGroupUUID ( ) ) ) ) || ( isOwner ( ) ) ; }
private void fireEvent ( final com.google.gerrit.reviewdb.client.Change change , final com.google.gerrit.server.events.ChangeEvent event , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { dispatcher.fireEvent ( change , event , db ) ; }
private static void assertCommentInfo ( com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput expected , com.google.gerrit.extensions.common.CommentInfo actual ) { com.google.common.truth.Truth.assertThat ( actual.line ) . isEqualTo ( expected.line ) ; com.google.common.truth.Truth.assertThat ( actual.message ) . isEqualTo ( expected.message ) ; com.google.common.truth.Truth.assertThat ( actual.inReplyTo ) . isEqualTo ( expected.inReplyTo ) ; if ( ( actual.side ) == null ) { com.google.common.truth.Truth.assertThat ( Comment.Side.REVISION ) . isEqualTo ( expected.side ) ; } }
public static com.google.gerrit.extensions.client.EditPreferencesInfo defaults ( ) { com.google.gerrit.extensions.client.EditPreferencesInfo i = new com.google.gerrit.extensions.client.EditPreferencesInfo ( ) ; i.tabSize = 8 ; i.lineLength = 100 ; i.cursorBlinkRate = 0 ; i.hideTopMenu = false ; i.showTabs = true ; i.showWhitespaceErrors = false ; i.syntaxHighlighting = true ; i.hideLineNumbers = false ; i.matchBrackets = true ; i.autoCloseBrackets = false ; i.theme = Theme.DEFAULT ; i.keyMapType = KeyMapType.DEFAULT ; return i ; }
void scheduleFullSync ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final java.lang.String urlMatch , com.googlesource.gerrit.plugins.replication.ReplicationState state ) { if ( ! ( running ) ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.stateLog.warn ( "Replication plugin did not finish startup before event" , state ) ; return ; } for ( com.googlesource.gerrit.plugins.replication.Destination cfg : config.getDestinations ( ) ) { if ( cfg.wouldPushProject ( project ) ) { for ( org.eclipse.jgit.transport.URIish uri : cfg.getURIs ( project , urlMatch ) ) { cfg.schedule ( project , PushOne.ALL_REFS , uri , state ) ; } } } }
public java.io.File resolve ( final java.lang.String path ) { if ( ( path != null ) && ( ! ( path.isEmpty ( ) ) ) ) { java.io.File loc = new java.io.File ( path ) ; if ( ! ( loc.isAbsolute ( ) ) ) { loc = new java.io.File ( site_path , path ) ; } try { return loc.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { return loc.getAbsoluteFile ( ) ; } } return null ; }
public void newPatchSetOnWipChangeNotifyAllInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%wip,notify=ALL" , sc.owner ) ; assertThat ( sender ) . sent ( "newpatchset" , sc ) . notTo ( sc.owner ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.reviewer , sc.ccer ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
protected void onUnload ( ) { super . onUnload ( ) ; com.google.gerrit.client.Gerrit.setHeaderVisible ( true ) ; }
public int compare ( com.google.gerrit.server.project.ListBranches.BranchInfo a , com.google.gerrit.server.project.ListBranches.BranchInfo b ) { return a.ref.compareTo ( b.ref ) ; }
private com.google.gerrit.reviewdb.client.Change findChange ( com.google.gerrit.extensions.common.ChangeInfo c ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = com.google.gerrit.server.query.change.ChangeData.asChanges ( queryProvider.get ( ) . byBranchKey ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( targetProject , com.googlesource.gerrit.plugins.importer.ReplayChangesStep.fullName ( c.branch ) ) , new com.google.gerrit.reviewdb.client.Change.Key ( c.changeId ) ) ) ; if ( changes.isEmpty ( ) ) { return null ; } return db.changes ( ) . get ( com.google.common.collect.Iterators.getOnlyElement ( changes.iterator ( ) ) . getId ( ) ) ; }
public void run ( ) { skipManager.removeAll ( ) ; chunkManager.reset ( ) ; diffTable.overview.clearDiffMarkers ( ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; render ( diff ) ; skipManager.render ( prefs.context ( ) , diff ) ; }
public void visit ( org.pegdown.ast.StrongEmphSuperNode node ) { if ( node.isClosed ( ) ) { wrapChildren ( ( node.isStrong ( ) ? "strong" : "em" ) , node ) ; } else { html.appendAndEscape ( node.getChars ( ) ) ; visitChildren ( node ) ; } }
public void queryChangesMultipleTerms ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange ( ) ; createChange ( ) ; java.util.List < com.google.gerrit.extensions.common.ChangeInfo > results = query ( ( "status:open " + ( r1.getChangeId ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( com.google.common.collect.Iterables.getOnlyElement ( results ) . changeId ) . isEqualTo ( r1.getChangeId ( ) ) ; }
public void inheritRead_SingleBranchDoesNotOverrideInherited ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/for/refs/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/foobar" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCanUpload ( u ) ; assertCreateChange ( "refs/heads/master" , u ) ; assertCreateChange ( "refs/heads/foobar" , u ) ; }
public void execute ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( migration.failChangeWrites ( ) ) { throw new com.google.gwtorm.server.OrmException ( com.google.gerrit.server.notedb.NoteDbUpdateManager.CHANGES_READ_ONLY ) ; } if ( isEmpty ( ) ) { return ; } try ( com.google.gerrit.metrics.Timer1.Context timer = metrics.updateLatency.start ( com.google.gerrit.server.notedb.NoteDbTable.CHANGES ) ) { stage ( ) ; execute ( changeRepo ) ; execute ( allUsersRepo ) ; } finally { close ( ) ; } }
final void onResult ( final java.lang.Object result ) { cancel ( ) ; final R obj ; try { obj = serializer.fromJson ( result ) ; } catch ( java.lang.RuntimeException e ) { callback.onFailure ( e ) ; return ; } callback.onSuccess ( obj ) ; }
public boolean indexAccount ( final int accountId ) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request ( ( "index account " + accountId ) ) { @ java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send ( ) throws java.io.IOException { return httpSession.post ( com.google.common.base.Joiner.on ( "/" ) . join ( pluginRelativePath , "index/account" , accountId ) ) ; } } . execute ( ) ; }
private void initIncludedInAction ( com.google.gerrit.client.info.ChangeInfo info ) { if ( ( info.status ( ) ) == ( com.google.gerrit.reviewdb.client.Change.Status.MERGED ) ) { includedInAction = new com.google.gerrit.client.change.IncludedInAction ( info.legacyId ( ) , style , headerLine , includedIn ) ; includedIn.setVisible ( true ) ; } }
private void initCompression ( ) { setCompressionFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Compression > > asList ( new org.apache.sshd.common.compression.CompressionNone.Factory ( ) ) ) ; }
public void topic ( java.lang.String topic ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input ( ) ; in.topic = topic ; try { putTopic.apply ( change , in ) ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwRestApiException ( "Cannot set topic" , e ) ; } }
public void missingOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount owner = accounts.create ( "missing" ) ; com.google.gerrit.server.project.ChangeControl ctl = insertChange ( owner ) ; db.accounts ( ) . deleteKeys ( java.util.Collections.singleton ( owner.getId ( ) ) ) ; assertProblems ( ctl , null , com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem ( ( "Missing change owner: " + ( owner.getId ( ) ) ) ) ) ; }
private static com.google.gerrit.server.account.AccountState missing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids = java.util.Collections.emptySet ( ) ; java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > anon = com.google.common.collect.ImmutableSet.of ( ) ; return new com.google.gerrit.server.account.AccountState ( account , anon , ids ) ; }
public PerThreadRequestScope.Scoper provideScoper ( final com.google.gerrit.server.git.PerThreadRequestScope.Propagator propagator ) { final com.google.gerrit.server.util.RequestContext requestContext = new com.google.gerrit.server.util.RequestContext ( ) { @ java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { throw new com.google.inject.OutOfScopeException ( "No user on merge thread" ) ; } } ; return new com.google.gerrit.server.git.PerThreadRequestScope.Scoper ( ) { @ java.lang.Override public < T > java.util.concurrent.Callable < T > scope ( java.util.concurrent.Callable < T > callable ) { return propagator.scope ( requestContext , callable ) ; } } ; }
public void testCopy ( ) { final com.google.gerrit.server.query.OperatorPredicate < java.lang.String > f = f ( "author" , "alice" ) ; org.junit.Assert.assertSame ( f , f.copy ( java.util.Collections.< com.google.gerrit.server.query.Predicate < java.lang.String > > emptyList ( ) ) ) ; org.junit.Assert.assertSame ( f , f.copy ( f.getChildren ( ) ) ) ; exception.expect ( java.lang.IllegalArgumentException.class ) ; exception.expectMessage ( "Expected 0 children" ) ; f.copy ( java.util.Collections.singleton ( f ( "owner" , "bob" ) ) ) ; }
public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent arg0 ) { editArea.setText ( contentPanelMessage.getText ( ) ) ; setEdit ( ( ! ( isEdit ( ) ) ) ) ; runClickCallback ( ) ; }
private void sendMarkdownAsHtml ( java.lang.String md , int lastModified , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { byte [ ] html = new com.google.gerrit.server.documentation.MarkdownFormatter ( ) . suppressHtml ( ) . markdownToDocHtml ( replaceMacros ( md ) , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; res.setDateHeader ( "Last-Modified" , lastModified ) ; res.setContentType ( "text/html" ) ; res.setCharacterEncoding ( java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; res.setContentLength ( html.length ) ; res.getOutputStream ( ) . write ( html ) ; }
private java.lang.String setTopic ( int sourceId , java.lang.String topic ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( topic == null ) || ( topic.isEmpty ( ) ) ) { topic = "am-" + ( java.util.UUID.randomUUID ( ) . toString ( ) ) ; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug ( "Setting original change {} topic to {}" , sourceId , topic ) ; gApi.changes ( ) . id ( sourceId ) . topic ( topic ) ; } return topic ; }
private static com.google.gerrit.reviewdb.Account oneAccount ( final com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.Account > rs ) { final java.util.List < com.google.gerrit.reviewdb.Account > r = rs.toList ( ) ; return ( r.size ( ) ) == 1 ? r.get ( 0 ) : null ; }
public org.apache.lucene.search.Query toQuery ( com.google.gerrit.server.query.Predicate < V > p ) throws com.google.gerrit.index.query.QueryParseException { if ( p instanceof com.google.gerrit.server.query.AndPredicate ) { return and ( p ) ; } else if ( p instanceof com.google.gerrit.server.query.OrPredicate ) { return or ( p ) ; } else if ( p instanceof com.google.gerrit.server.query.NotPredicate ) { return not ( p ) ; } else if ( p instanceof com.google.gerrit.server.index.IndexPredicate ) { return fieldQuery ( ( ( com.google.gerrit.server.index.IndexPredicate < V > ) ( p ) ) ) ; } else { throw new com.google.gerrit.index.query.QueryParseException ( ( "cannot create query for index: " + p ) ) ; } }
private boolean markKeyInvalid ( int seq ) { checkLoaded ( ) ; com.google.gerrit.server.account.AccountSshKey key = getKey ( seq ) ; if ( ( key != null ) && ( key.isValid ( ) ) ) { key.setInvalid ( ) ; return true ; } return false ; }
private static java.io.File getLauncherLoadedFrom ( ) { try { return com.google.gerrit.launcher.GerritLauncher.getDistributionArchive ( ) ; } catch ( java.io.IOException e ) { if ( ( e instanceof java.io.FileNotFoundException ) && ( GerritLauncher.NOT_ARCHIVED.equals ( e.getMessage ( ) ) ) ) { return null ; } else { com.google.inject.ProvisionException pe = new com.google.inject.ProvisionException ( "Error reading gerrit.war" ) ; pe.initCause ( e ) ; throw pe ; } } }
private void setDefaultRenderer ( javax.servlet.FilterConfig filterConfig ) { if ( ( renderer ) == null ) { renderer = new com.google.gitiles.DefaultRenderer ( ( ( filterConfig.getServletContext ( ) . getContextPath ( ) ) + ( com.google.gitiles.GitilesServlet.STATIC_PREFIX ) ) , com.google.gitiles.Renderer.toFileURL ( config.getString ( "gitiles" , null , "customTemplates" ) ) , com.google.common.base.Objects.firstNonNull ( config.getString ( "gitiles" , null , "siteTitle" ) , "Gitiles" ) ) ; } }
private java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > patchSetDrafts ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > drafts = com.google.common.collect.Maps.newHashMap ( ) ; for ( com.google.gerrit.reviewdb.client.PatchLineComment c : plcUtil.draftByPatchSetAuthor ( ctx.getDb ( ) , psId , user.getAccountId ( ) , ctx.getChangeNotes ( ) ) ) { drafts.put ( c.getKey ( ) . get ( ) , c ) ; } return drafts ; }
private com.google.gerrit.server.IdentifiedUser createUser ( final com.google.gerrit.sshd.SshSession sd , final com.google.gerrit.server.account.AccountState state ) { return userFactory.create ( AccessPath.SSH , new com.google.inject.Provider < java.net.SocketAddress > ( ) { @ java.lang.Override public java.net.SocketAddress get ( ) { return sd.getRemoteAddress ( ) ; } } , state.getAccount ( ) . getId ( ) ) ; }
protected void configure ( ) { bind ( java.util.concurrent.Executor.class ) . annotatedWith ( com.googlesource.gerrit.plugins.webhooks.WebHooksExecutor.class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.ExecutorProvider.class ) ; bind ( com.googlesource.gerrit.plugins.webhooks.Configuration.class ) . in ( Scopes.SINGLETON ) ; bind ( org.apache.http.impl.client.CloseableHttpClient.class ) . toProvider ( com.googlesource.gerrit.plugins.webhooks.HttpClientProvider.class ) . in ( Scopes.SINGLETON ) ; factory ( PostEventTask.Factory.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.EventListener.class ) . to ( com.googlesource.gerrit.plugins.webhooks.EventHandler.class ) ; }
public void listTasksWithoutViewQueueCapability ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.get ( "/config/server/tasks/" ) ; r.assertOK ( ) ; java.util.List < com.google.gerrit.server.config.ListTasks.TaskInfo > result = newGson ( ) . fromJson ( r.getReader ( ) , new com.google.gson.reflect.TypeToken < java.util.List < com.google.gerrit.server.config.ListTasks.TaskInfo > > ( ) { } . getType ( ) ) ; com.google.common.truth.Truth.assertThat ( result ) . isEmpty ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . to ( com.google.gerrit.server.index.ChangeIndexerImpl.class ) ; bind ( com.google.gerrit.server.query.change.IndexRewrite.class ) . to ( com.google.gerrit.server.query.change.IndexRewriteImpl.class ) ; bind ( new com.google.inject.TypeLiteral < com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > > ( ) { } ) . toInstance ( com.google.gerrit.server.index.ChangeSchemas.getLatestRelease ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.server.index.ChangeIndex.class ) ; com.google.gerrit.extensions.registration.DynamicItem.itemOf ( binder ( ) , com.google.gerrit.server.index.ChangeIndex.class ) ; }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { if ( ( project ) == null ) { notes = notesFactory.createFromIdOnlyWhenNotedbDisabled ( db , legacyId ) ; } else { notes = notesFactory.create ( db , project , legacyId ) ; } change = notes.getChange ( ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( "Unable to load change " + ( legacyId ) ) ) ; } return change ; }
public void addApprovals ( com.google.gerrit.server.events.PatchSetAttribute p , java.util.Collection < com.google.gerrit.reviewdb.PatchSetApproval > list ) { if ( ! ( list.isEmpty ( ) ) ) { p.approvals = new java.util.ArrayList < com.google.gerrit.server.events.ApprovalAttribute > ( list.size ( ) ) ; for ( com.google.gerrit.reviewdb.PatchSetApproval a : list ) { if ( ( a.getValue ( ) ) != 0 ) { p.approvals.add ( asApprovalAttribute ( a ) ) ; } } if ( p.approvals.isEmpty ( ) ) { p.approvals = null ; } } }
public com.google.gerrit.client.rpc.RestApi data ( com.google.gwt.core.client.JavaScriptObject obj ) { return data ( new com.google.gwt.json.client.JSONObject ( obj ) ) ; }
protected void runImpl ( ) throws java.io.IOException { final org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack ( repo ) ; up.upload ( in , out , err ) ; }
private void computeInsertedDeleted ( ) { inserted = 0 ; deleted = 0 ; for ( int i = 0 ; i < ( list.length ( ) ) ; i ++ ) { com.google.gerrit.client.diff.FileInfo info = list.get ( i ) ; if ( ( ! ( Patch.COMMIT_MSG.equals ( info.path ( ) ) ) ) && ( ! ( info.binary ( ) ) ) ) { inserted += info.lines_inserted ( ) ; deleted += info.lines_deleted ( ) ; } } }
private com.google.gerrit.server.IdentifiedUser createNew ( ) { com.google.gerrit.server.IdentifiedUser user = createMock ( com.google.gerrit.server.IdentifiedUser.class ) ; expect ( user.isIdentifiedUser ( ) ) . andReturn ( true ) ; expect ( user.asIdentifiedUser ( ) ) . andReturn ( user ) ; expect ( user.getEffectiveGroups ( ) ) . andReturn ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupMembership ( groupUUID ) ) ; replay ( user ) ; return user ; }
public void testDuplicateCompoundIndexOnlyPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "(status:new OR file:a) bar:p file:b" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; org.junit.Assert.assertSame ( com.google.gerrit.server.query.change.AndSource.class , out.getClass ( ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( query ( com.google.gerrit.server.query.Predicate.and ( in.getChild ( 0 ) , in.getChild ( 2 ) ) ) , in.getChild ( 1 ) ) , out.getChildren ( ) ) ; }
com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor ( @ com.google.gerrit.server.index.IndexExecutor ( value = com.google.gerrit.server.git.QueueProvider.QueueType.INTERACTIVE ) com.google.common.util.concurrent.ListeningExecutorService interactive , @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue workQueue ) { if ( ( batchExecutor ) != null ) { return batchExecutor ; } int threads = config.getInt ( "index" , null , "batchThreads" , 0 ) ; if ( threads <= 0 ) { return interactive ; } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator ( workQueue.createQueue ( threads , "Index-Batch" ) ) ; }
public void run ( ) { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create ( change ) ; cm.setFrom ( me ) ; cm.setPatchSet ( ps , info ) ; cm.addReviewers ( reviewers ) ; cm.addExtraCC ( cc ) ; cm.send ( ) ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.git.ReceiveCommits.log.error ( ( "Cannot send email for new change " + ( change.getId ( ) ) ) , e ) ; } }
public boolean canSee ( final com.google.gerrit.reviewdb.client.Account otherUser ) { return canSee ( otherUser.getId ( ) ) ; }
protected boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user ) { try { permissionBackend.user ( user ) . project ( project ) . check ( ProjectPermission.ACCESS ) ; return true ; } catch ( com.google.gerrit.extensions.restapi.AuthException | com.google.gerrit.server.permissions.PermissionBackendException e ) { return false ; } }
private java.lang.String parseBranch ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.util.List < java.lang.String > branchLines = commit.getFooterLines ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_BRANCH ) ; if ( branchLines.isEmpty ( ) ) { return null ; } else if ( ( branchLines.size ( ) ) > 1 ) { throw expectedOneFooter ( com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_BRANCH , branchLines ) ; } return com.google.gerrit.reviewdb.client.RefNames.fullName ( branchLines.get ( 0 ) ) ; }
private void appendFileHeader ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final java.lang.String line ) { openLine ( m ) ; padLineNumber ( m ) ; padLineNumber ( m ) ; m.openTd ( ) ; m.addStyleName ( "DiffText" ) ; m.addStyleName ( "DiffText-FILE_HEADER" ) ; m.append ( line ) ; m.closeTd ( ) ; closeLine ( m ) ; }
public void testMissingDownstreamMerges ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result result = createChange ( "subject" , "filename" , "content" , "testtopic" ) ; pushConfig ( "automerger.config" , result.getChange ( ) . project ( ) . get ( ) ) ; result.assertOkStatus ( ) ; int changeNumber = result.getChange ( ) . getId ( ) . id ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( ( ( "Failed to submit 1 change due to the following problems:\nChange " + changeNumber ) + ": Missing downstream branches ds_one. Please recreate the automerges." ) ) ; merge ( result ) ; }
private boolean longRunning ( ) { return ( ( java.lang.System.currentTimeMillis ( ) ) - ( start ) ) > 200 ; }
public void run ( ) { boolean s = prefs.showWhitespaceErrors ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "showTrailingSpace" , s ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "showTrailingSpace" , s ) ; }
private static com.google.gerrit.reviewdb.client.Project.InheritedBoolean getBool ( com.google.gwt.user.client.ui.ListBox box ) { int i = box.getSelectedIndex ( ) ; if ( i >= 0 ) { return com.google.gerrit.reviewdb.client.Project.InheritedBoolean.valueOf ( box.getValue ( i ) ) ; } return com.google.gerrit.reviewdb.client.Project.InheritedBoolean.INHERIT ; }
private static boolean isContentType ( com.google.gwt.http.client.Response res , java.lang.String want ) { java.lang.String type = res.getHeader ( "Content-Type" ) ; if ( type == null ) { return false ; } int semi = type.indexOf ( ';' ) ; if ( semi >= 0 ) { type = type.substring ( 0 , semi ) . trim ( ) ; } return want.equals ( type ) ; }
private com.google.gerrit.server.query.Predicate < T > defaultField ( org.antlr.runtime.tree.Tree r ) throws com.google.gerrit.index.query.QueryParseException { switch ( r.getType ( ) ) { case com.google.gerrit.index.query.QueryParser.SINGLE_WORD : case com.google.gerrit.index.query.QueryParser.EXACT_PHRASE : if ( ( r.getChildCount ( ) ) != 0 ) { throw com.google.gerrit.server.query.QueryBuilder.error ( ( "Expected no children under: " + r ) ) ; } return defaultField ( r.getText ( ) ) ; default : throw com.google.gerrit.server.query.QueryBuilder.error ( ( "Unsupported node: " + r ) ) ; } }
public void testUnblockInLocalVisibilityByRegisteredUsers_Fails ( ) { com.google.gerrit.server.project.Util.grant ( util.getParentConfig ( ) , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) . setBlock ( ) ; com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; org.junit.Assert.assertFalse ( "u can't read" , u.controlForRef ( "refs/heads/master" ) . isVisibleByRegisteredUsers ( ) ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , com.google.gerrit.extensions.restapi.CacheControl c ) throws java.io.IOException { res.setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching ( req , res , null , c ) ; com.google.gerrit.httpd.restapi.RestApiServlet.replyText ( req , res , msg ) ; }
public void destroy ( ) { synchronized ( this ) { if ( ( cmd ) != null ) { final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( ctx ) ; try { cmd.destroy ( ) ; log ( BaseCommand.STATUS_CANCEL ) ; } finally { ctx = null ; cmd = null ; com.google.gerrit.sshd.SshScope.set ( old ) ; } } } }
public java.util.List < com.google.gerrit.server.project.ProjectJson.ProjectInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) { java.util.List < com.google.gerrit.server.project.ProjectJson.ProjectInfo > childProjects = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.reviewdb.client.Project.NameKey projectName : projectCache.all ( ) ) { com.google.gerrit.server.project.ProjectState e = projectCache.get ( projectName ) ; if ( e == null ) { continue ; } if ( rsrc.getNameKey ( ) . equals ( e.getProject ( ) . getParent ( allProjects ) ) ) { childProjects.add ( json.format ( e.getProject ( ) ) ) ; } } return childProjects ; }
private void assertCreateFails ( java.lang.Class < ? extends com.google.gerrit.extensions.restapi.RestApiException > errType , java.lang.String errMsg ) throws java.lang.Exception { exception.expect ( errType ) ; if ( errMsg != null ) { exception.expectMessage ( errMsg ) ; } branch ( ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) . isEqualTo ( NoteDbMode.OFF ) ; gerritConfig = new org.eclipse.jgit.storage.file.FileBasedConfig ( sitePaths.gerrit_config.toFile ( ) , org.eclipse.jgit.util.FS.detect ( ) ) ; }
public void withNonDuplicateGroupName ( ) throws java.lang.Exception { java.lang.String newGroupName = "newGroupB" ; sshSession.exec ( ( "gerrit create-group " + newGroupName ) ) ; com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( sshSession.getError ( ) ) . that ( sshSession.hasError ( ) ) . isFalse ( ) ; com.google.gerrit.reviewdb.client.AccountGroup accountGroup = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( newGroupName ) ) ; com.google.common.truth.Truth.assertThat ( accountGroup ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( accountGroup.getName ( ) ) . isEqualTo ( newGroupName ) ; }
static void initLibrary ( com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > cb ) { if ( net.codemirror.lib.Loader.isLibLoaded ( ) ) { cb.onSuccess ( null ) ; } else { net.codemirror.lib.Loader.injectCss ( Lib.I.css ( ) ) ; net.codemirror.lib.Loader.injectScript ( Lib.I.js ( ) . getSafeUri ( ) , cb ) ; } }
protected boolean onKeyPress ( final char keyCode , final int modifiers ) { if ( super . onKeyPress ( keyCode , modifiers ) ) { return true ; } if ( modifiers == 0 ) { switch ( keyCode ) { case 's' : case 'c' : toggleCurrentRow ( ) ; return true ; } } return false ; }
public void onBrowserEvent ( com.google.gwt.user.client.Event event ) { super . onBrowserEvent ( event ) ; if ( ( ( com.google.gwt.user.client.DOM.eventGetType ( event ) ) == ( com.google.gwt.user.client.Event.ONCLICK ) ) && ( com.google.gerrit.client.ui.LinkMenuItem.impl.handleAsClick ( event ) ) ) { com.google.gerrit.client.ui.LinkMenuItem.implPanel.blur ( getElement ( ) ) ; } }
public void add ( com.google.gerrit.lifecycle.LifecycleListener listener ) { manager.add ( listener ) ; }
private Account.Id parseIdent ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String email = commit.getCommitterIdent ( ) . getEmailAddress ( ) ; int at = email.indexOf ( '@' ) ; if ( at >= 0 ) { java.lang.String host = email.substring ( ( at + 1 ) , email.length ( ) ) ; java.lang.Integer id = com.google.common.primitives.Ints.tryParse ( email.substring ( 0 , at ) ) ; if ( ( id != null ) && ( host.equals ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) ) { return new com.google.gerrit.reviewdb.client.Account.Id ( id ) ; } } throw parseException ( "invalid committer, expected <id>@%s: %s" , com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST , email ) ; }
public Account.Id apply ( com.google.gerrit.reviewdb.client.StarredChange in ) { return in.getAccountId ( ) ; }
public int weigh ( com.google.gitiles.blame.BlameCacheImpl.Key key , java.util.List < com.google.gitiles.blame.Region > value ) { return value.size ( ) ; }
private void loadBase ( java.lang.String notesBranch ) throws java.io.IOException { org.eclipse.jgit.lib.Ref branch = db.getRef ( notesBranch ) ; if ( branch != null ) { baseCommit = revWalk.parseCommit ( branch.getObjectId ( ) ) ; base = org.eclipse.jgit.notes.NoteMap.read ( revWalk.getObjectReader ( ) , baseCommit ) ; } if ( ( baseCommit ) != null ) { ours = org.eclipse.jgit.notes.NoteMap.read ( revWalk.getObjectReader ( ) , baseCommit ) ; } else { ours = org.eclipse.jgit.notes.NoteMap.newEmptyMap ( ) ; } }
public static java.lang.String format ( final com.google.gerrit.reviewdb.client.Change change ) { return ( ( ( ( change.getProject ( ) . get ( ) ) + "~" ) + ( change.getDest ( ) . getShortName ( ) ) ) + "~" ) + ( change.getKey ( ) . get ( ) ) ; }
protected void throwUnauthorizedOp ( java.lang.String op , com.google.gerrit.server.project.ProjectControl control ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = control.getProject ( ) . getName ( ) ; java.lang.String userName = ( com.google.common.base.Strings.isNullOrEmpty ( control.getUser ( ) . getUserName ( ) ) ) ? "anonymous" : control.getUser ( ) . getUserName ( ) ; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug ( java.lang.String.format ( "operation %s unauthorized for user %s on project %s" , op , userName , project ) ) ; throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized ( op , project ) ; }
private com.google.gerrit.server.project.ProjectState getProjectState ( ) { return projectControl.getProjectState ( ) ; }
private com.google.gerrit.extensions.client.SubmitType getSubmitType ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator ( cd ) . setPatchSet ( patchSet ) . getSubmitType ( ) ; if ( ( rec.status ) != ( SubmitTypeRecord.Status.OK ) ) { throw new com.google.gwtorm.server.OrmException ( ( "Submit type rule failed: " + rec ) ) ; } return rec.type ; }
private static GitilesView.Builder copyAndCanonicalize ( com.google.gitiles.GitilesView view , java.lang.String revision ) { com.google.gitiles.GitilesView.Builder copy = com.google.gitiles.GitilesView.log ( ) . copyFrom ( view ) ; if ( ( view.getRevision ( ) ) != ( Revision.NULL ) ) { copy.setRevision ( view.getRevision ( ) ) ; } else { copy.setRevision ( com.google.gitiles.Revision.named ( revision ) ) ; } if ( ( view.getOldRevision ( ) ) != ( Revision.NULL ) ) { copy.setOldRevision ( view.getOldRevision ( ) ) ; } return copy ; }
public void testFindNoDuplicates ( ) throws java.lang.Exception { changedPaths = com.google.common.collect.Sets.newHashSet ( "a" , "ab" , "f1/ab" ) ; runCheck ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidatorTest.INITIAL_PATHNAMES , changedPaths , messages , vistedPaths ) ; com.google.common.truth.Truth.assertThat ( messages ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( vistedPaths ) . containsExactlyElementsIn ( com.google.common.collect.ImmutableList.of ( "a" , "ab" , "f1" , "f1/a" , "f1/ab" , "f2" ) ) ; }
public void linkifyMessageUrl ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "https://my/url" , "url" , "https://my/url" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "https://my/url" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "foo " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " bar" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "foo http://my/url bar" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "foo " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " bar " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/other/url" , "url" , "http://my/other/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " baz" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "foo http://my/url bar http://my/other/url baz" ) ) ; }
java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > toFileInfoMap ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.RevId revision , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet base ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { org.eclipse.jgit.lib.ObjectId a = ( base == null ) ? null : org.eclipse.jgit.lib.ObjectId.fromString ( base.getRevision ( ) . get ( ) ) ; org.eclipse.jgit.lib.ObjectId b = org.eclipse.jgit.lib.ObjectId.fromString ( revision.get ( ) ) ; return toFileInfoMap ( change , new com.google.gerrit.server.patch.PatchListKey ( a , b , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE ) ) ; }
public void onAgreementSignup ( com.google.gerrit.extensions.events.AgreementSignupListener.Event event ) { com.google.gerrit.extensions.common.AccountInfo submitter = event.getAccount ( ) ; if ( submitter != null ) { com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs ( ) ; args.add ( "--submitter" , submitter ) ; args.add ( "--user-id" , submitter._accountId ) ; args.add ( "--cla-name" , event.getAgreementName ( ) ) ; hook.submit ( args ) ; } }
protected void movePointerTo ( final int newRow ) { super . movePointerTo ( newRow ) ; if ( ( ( 0 <= newRow ) && ( newRow < ( table.getRowCount ( ) ) ) ) && ( ( getRowItem ( newRow ) ) != null ) ) { delSel.setEnabled ( true ) ; } else { delSel.setEnabled ( false ) ; } }
public void removeNonexisting ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key1 = com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) ; store.add ( key1.getPublicKeyRing ( ) ) ; org.junit.Assert.assertEquals ( RefUpdate.Result.NEW , store.save ( newCommitBuilder ( ) ) ) ; com.google.gerrit.gpg.testutil.TestKey key2 = com.google.gerrit.gpg.testutil.TestKeys.key2 ( ) ; store.remove ( key2.getPublicKey ( ) . getFingerprint ( ) ) ; org.junit.Assert.assertEquals ( RefUpdate.Result.NO_CHANGE , store.save ( newCommitBuilder ( ) ) ) ; assertKeys ( key1.getKeyId ( ) , key1 ) ; }
public void setup ( ) throws java.lang.Exception { normalProject = createProject ( "normal" ) ; secretProject = createProject ( "secret" ) ; secretRefProject = createProject ( "secretRef" ) ; privilegedGroup = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( createGroup ( "privilegedGroup" ) ) ) ; privilegedUser = accounts.create ( "privilegedUser" , "snowden@nsa.gov" , "Ed Snowden" ) ; gApi.groups ( ) . id ( privilegedGroup.getGroupUUID ( ) . get ( ) ) . addMembers ( privilegedUser.username ) ; com.google.common.truth.Truth.assertThat ( gApi.groups ( ) . id ( privilegedGroup.getGroupUUID ( ) . get ( ) ) . members ( ) . get ( 0 ) . email ) . contains ( "snowden" ) ; grant ( Permission.READ , secretProject , "refs/*" , false , privilegedGroup.getGroupUUID ( ) ) ; block ( Permission.READ , SystemGroupBackend.REGISTERED_USERS , "refs/*" , secretProject ) ; deny ( secretRefProject , Permission.READ , SystemGroupBackend.ANONYMOUS_USERS , "refs/*" ) ; grant ( Permission.READ , secretRefProject , "refs/heads/secret/*" , false , privilegedGroup.getGroupUUID ( ) ) ; block ( Permission.READ , SystemGroupBackend.REGISTERED_USERS , "refs/heads/secret/*" , secretRefProject ) ; grant ( Permission.READ , secretRefProject , "refs/heads/*" , false , SystemGroupBackend.REGISTERED_USERS ) ; }
public void visit ( org.commonmark.node.Image node ) { html.open ( "img" ) . attribute ( "src" , resolveImageUrl ( node.getDestination ( ) ) ) . attribute ( "title" , node.getTitle ( ) ) . attribute ( "alt" , com.google.gitiles.doc.MarkdownUtil.getInnerText ( node ) ) ; }
public int compareTo ( com.google.gerrit.common.data.PermissionRule o ) { int cmp = ( com.google.gerrit.common.data.PermissionRule.deny ( this ) ) - ( com.google.gerrit.common.data.PermissionRule.deny ( o ) ) ; if ( cmp == 0 ) cmp = ( com.google.gerrit.common.data.PermissionRule.range ( o ) ) - ( com.google.gerrit.common.data.PermissionRule.range ( this ) ) ; if ( cmp == 0 ) cmp = com.google.gerrit.common.data.PermissionRule.group ( this ) . compareTo ( com.google.gerrit.common.data.PermissionRule.group ( o ) ) ; return cmp ; }
public static java.util.Map < java.lang.String , java.lang.String > toSoyData ( org.eclipse.jgit.lib.PersonIdent ident , com.google.gitiles.DateFormatterBuilder.DateFormatter df ) { return com.google.common.collect.ImmutableMap.of ( "name" , ident.getName ( ) , "email" , ident.getEmailAddress ( ) , "time" , df.format ( ident ) , "relativeTime" , org.eclipse.jgit.util.RelativeDateFormatter.format ( ident.getWhen ( ) ) ) ; }
public void testUpdateOneException ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchException ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , new java.sql.BatchUpdateException ( ) ) ; try { createClassUnderTest ( ) . update ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; org.junit.Assert.fail ( "missingException" ) ; } catch ( com.google.gwtorm.client.OrmException e ) { } }
protected void configure ( ) { bind ( org.apache.http.impl.client.CloseableHttpClient.class ) . toProvider ( com.ericsson.gerrit.plugins.multimaster.HttpClientProvider.class ) . in ( Scopes.SINGLETON ) ; bind ( com.ericsson.gerrit.plugins.multimaster.Configuration.class ) . in ( Scopes.SINGLETON ) ; bind ( com.ericsson.gerrit.plugins.multimaster.HttpSession.class ) ; bind ( com.ericsson.gerrit.plugins.multimaster.RestSession.class ) ; bind ( java.util.concurrent.Executor.class ) . annotatedWith ( com.ericsson.gerrit.plugins.multimaster.SyncIndexExecutor.class ) . toProvider ( com.ericsson.gerrit.plugins.multimaster.SyncIndexExecutorProvider.class ) ; listener ( ) . to ( com.ericsson.gerrit.plugins.multimaster.SyncIndexExecutorProvider.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.ChangeIndexedListener.class ) . to ( com.ericsson.gerrit.plugins.multimaster.IndexEventHandler.class ) ; }
public static void deleteBranches ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.util.Set < java.lang.String > refs , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup ( ) ; for ( java.lang.String ref : refs ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( projectName.get ( ) ) . view ( "branches" ) . id ( ref ) . delete ( group.add ( cb ) ) ; cb = com.google.gerrit.client.rpc.CallbackGroup.emptyCallback ( ) ; } group.done ( ) ; }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) ; int batchSize ; if ( ( schema != null ) && ( schema.hasField ( ChangeField.EXACT_COMMIT ) ) ) { batchSize = ( indexConfig.maxTerms ( ) ) - 3 ; } else { batchSize = indexConfig.maxPrefixTerms ( ) ; } return byCommitsOnBranchNotMerged ( schema , branch , hashes , batchSize ) ; }
public void setUpMocks ( ) { HEAD ( e448b8 ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Update bazlets ; latest ( revision ) ; servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet ( indexer ) ; id = Account.Id.tryParse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) . get ( ) ; org.mockito.Mockito.when ( req.getPathInfo ( ) ) . thenReturn ( ( "/index/account/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ) ) ; }
private void addToImportedUsersGroup ( com.google.gerrit.reviewdb.client.Account.Id id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = getImportedUsersGroup ( ) ; com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember ( new com.google.gerrit.reviewdb.client.AccountGroupMember.Key ( id , group.getId ( ) ) ) ; db.get ( ) . accountGroupMembers ( ) . insert ( java.util.Collections.singleton ( member ) ) ; }
boolean deleteFromIndex ( int changeId ) { try { com.ericsson.gerrit.plugins.highavailability.IndexResponseHandler.IndexResult result = httpSession.delete ( buildEndpoint ( changeId ) ) ; if ( result.isSuccessful ( ) ) { return true ; } com.ericsson.gerrit.plugins.highavailability.RestSession.log.error ( "Unable to delete from index change {}. Cause: {}" , changeId , result.getMessage ( ) ) ; } catch ( java.io.IOException e ) { com.ericsson.gerrit.plugins.highavailability.RestSession.log.error ( ( "Error trying to delete from index change " + changeId ) , e ) ; } return false ; }
public com.google.gerrit.server.account.GetEmails.EmailInfo apply ( com.google.gerrit.server.account.AccountResource.Email rsrc ) { com.google.gerrit.server.account.GetEmails.EmailInfo e = new com.google.gerrit.server.account.GetEmails.EmailInfo ( ) ; e.email = rsrc.getEmail ( ) ; e.setPreferred ( rsrc.getEmail ( ) . equals ( rsrc.getUser ( ) . getAccount ( ) . getPreferredEmail ( ) ) ) ; return e ; }
public boolean isOwner ( ) { if ( ( getCurrentUser ( ) ) instanceof com.google.gerrit.server.IdentifiedUser ) { final com.google.gerrit.server.IdentifiedUser i = ( ( com.google.gerrit.server.IdentifiedUser ) ( getCurrentUser ( ) ) ) ; return i.getAccountId ( ) . equals ( change.getOwner ( ) ) ; } return false ; }
private com.google.gerrit.client.diff.DraftBox newRangeDraft ( net.codemirror.lib.CodeMirror cm , int line , net.codemirror.lib.TextMarker.FromTo fromTo ) { com.google.gerrit.client.diff.DisplaySide side = host.getSideFromCm ( cm ) ; return addDraftBox ( com.google.gerrit.client.changes.CommentInfo.createRange ( path , getStoredSideFromDisplaySide ( side ) , ( line + 1 ) , null , null , com.google.gerrit.client.diff.CommentRange.create ( fromTo ) ) , side ) ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getFromUser ( java.lang.String username , java.lang.String email , java.lang.String fullName , java.util.SortedSet < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > scopes ) { try { return new com.googlesource.gerrit.plugins.github.oauth.OAuthCookie ( cipher , username , email , fullName , scopes ) ; } catch ( com.googlesource.gerrit.plugins.github.oauth.OAuthTokenException e ) { return null ; } }
private boolean add ( java.util.Set < java.lang.Integer > watchers , com.google.gerrit.reviewdb.client.AccountProjectWatch w , com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type , com.google.gerrit.server.query.change.ChangeData change ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = identifiedUserFactory.create ( w.getAccountId ( ) ) ; try { if ( filterMatch ( user , w.getFilter ( ) , change ) ) { if ( w.isNotify ( type ) ) { watchers.add ( w.getAccountId ( ) . get ( ) ) ; } return true ; } } catch ( com.google.gerrit.server.query.QueryParseException e ) { } return false ; }
protected void setApiHeaders ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , com.google.gitiles.FormatType type ) { res.setContentType ( type.getMimeType ( ) ) ; res.setCharacterEncoding ( com.google.common.base.Charsets.UTF_8.name ( ) ) ; res.setHeader ( com.google.common.net.HttpHeaders.CONTENT_DISPOSITION , "attachment" ) ; setCacheHeaders ( req , res ) ; }
public void commentOnReviewableWipChangeByOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . notSent ( ) ; }
public void linkifyMessageUrl ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS , config ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "https://my/url" , "url" , "https://my/url" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "https://my/url" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "foo " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " bar" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "foo http://my/url bar" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "foo " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url" , "url" , "http://my/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " bar " ) , com.google.common.collect.ImmutableMap.of ( "text" , "http://my/other/url" , "url" , "http://my/other/url" ) , com.google.common.collect.ImmutableMap.of ( "text" , " baz" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "foo http://my/url bar http://my/other/url baz" ) ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; if ( migration.readComments ( ) ) { com.google.common.base.Preconditions.checkArgument ( draftNotes.containsComment ( c ) , ( "Cannot delete this comment" + " because it didn't previously exist as a draft" ) ) ; } if ( migration.write ( ) ) { if ( draftNotes.containsComment ( c ) ) { deleteComments.add ( c ) ; } } }
public void unstarChange ( java.lang.String changeId ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.ChangeResource rsrc = changes.parse ( TopLevelResource.INSTANCE , com.google.gerrit.extensions.restapi.IdString.fromUrl ( changeId ) ) ; com.google.gerrit.server.account.AccountResource.StarredChange starredChange = new com.google.gerrit.server.account.AccountResource.StarredChange ( account.getUser ( ) , rsrc ) ; starredChangesDelete.apply ( starredChange , new com.google.gerrit.server.account.StarredChanges.EmptyInput ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot unstar change" , e ) ; } }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { if ( ( schema == null ) || ( schema.hasField ( ChangeField.LEGACY_REVIEWED ) ) ) { return new com.google.gerrit.server.query.change.LegacyIsReviewedPredicate ( ) ; } com.google.gerrit.server.query.change.IsReviewedPredicate.checkSchema ( schema ) ; return com.google.gerrit.server.query.Predicate.not ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ) ; }
private short getDefaultContext ( ) { final int idx = defaultContext.getSelectedIndex ( ) ; if ( 0 <= idx ) { return java.lang.Short.parseShort ( defaultContext.getValue ( idx ) ) ; } return com.google.gerrit.client.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; }
private static java.lang.reflect.Method getDefaultConfig ( java.lang.Class < ? > clazz ) { java.lang.reflect.Method result = null ; for ( java.lang.reflect.Method m : clazz.getMethods ( ) ) { com.google.gerrit.testutil.ConfigSuite.Default ann = m.getAnnotation ( com.google.gerrit.testutil.ConfigSuite.Default.class ) ; if ( ann != null ) { com.google.common.base.Preconditions.checkArgument ( ( result == null ) , "Multiple methods annotated with @ConfigSuite.Method: %s, %s" , result , m ) ; result = m ; } } return result ; }
public void reviewTriplet ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; gApi.changes ( ) . id ( ( "p~master~" + ( r.getChangeId ( ) ) ) ) . revision ( r.getCommit ( ) . name ( ) ) . review ( com.google.gerrit.acceptance.api.revision.RevisionIT.approve ( ) ) ; }
private java.util.List < com.google.gerrit.server.change.GetRelated.ChangeAndCommit > getRelated ( com.google.gerrit.reviewdb.client.Change.Id changeId , int ps ) throws java.lang.Exception { java.lang.String url = java.lang.String.format ( "/changes/%d/revisions/%d/related" , changeId.get ( ) , ps ) ; return newGson ( ) . fromJson ( adminRestSession.get ( url ) . getReader ( ) , com.google.gerrit.server.change.GetRelated.RelatedInfo.class ) . changes ; }
protected void loadDefaults ( ) { approvals = com.google.common.collect.ImmutableListMultimap.of ( ) ; reviewers = com.google.common.collect.ImmutableSetMultimap.of ( ) ; submitRecords = com.google.common.collect.ImmutableList.of ( ) ; allChangeMessages = com.google.common.collect.ImmutableList.of ( ) ; changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of ( ) ; comments = com.google.common.collect.ImmutableListMultimap.of ( ) ; hashtags = com.google.common.collect.ImmutableSet.of ( ) ; patchSets = com.google.common.collect.ImmutableSortedMap.of ( ) ; allPastReviewers = com.google.common.collect.ImmutableList.of ( ) ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Mute" ) . setTitle ( "Mute the change to unhighlight it in the dashboard" ) . setVisible ( ( ( ! ( rsrc.isUserOwner ( ) ) ) && ( isMuteable ( rsrc.getChange ( ) ) ) ) ) ; }
public void getPersonPartsExtractsParts ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getPersonParts ( new org.eclipse.jgit.lib.PersonIdent ( "" , "" ) ) ) . containsExactly ( "" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getPersonParts ( new org.eclipse.jgit.lib.PersonIdent ( "foo bar" , "" ) ) ) . containsExactly ( "foo" , "bar" , "" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getPersonParts ( new org.eclipse.jgit.lib.PersonIdent ( "" , "foo@example.com" ) ) ) . containsExactly ( "foo@example.com" , "foo" , "example.com" , "example" , "com" ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getPersonParts ( new org.eclipse.jgit.lib.PersonIdent ( "foO J. bAr" , "bA-z@exAmple.cOm" ) ) ) . containsExactly ( "foo" , "j" , "bar" , "ba-z@example.com" , "ba-z" , "ba" , "z" , "example.com" , "example" , "com" ) ; }
private void checkImpl ( ) { checkOwner ( ) ; checkCurrentPatchSetEntity ( ) ; if ( ! ( openRepo ( ) ) ) { return ; } if ( ! ( checkPatchSets ( ) ) ) { return ; } checkMerged ( ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.SubmittedTogetherInfo info = apply ( resource , options ) ; if ( options.isEmpty ( ) ) { return info.changes ; } return info ; }
private void refresh ( ) { setToken ( ( ( ( subname ) == null ) || ( "" . equals ( subname ) ) ? com.google.gerrit.common.PageLinks.ADMIN_GROUPS : ( ( com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) + "?filter=" ) + ( com.google.gwt.http.client.URL.encodeQueryString ( subname ) ) ) ) ; com.google.gerrit.client.groups.GroupMap.match ( subname , new com.google.gerrit.client.ui.IgnoreOutdatedFilterResultsCallbackWrapper < com.google.gerrit.client.groups.GroupMap > ( this , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.groups.GroupMap > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result , subname ) ; groups.finishDisplay ( ) ; } } ) ) ; }
public PatchSet.Id call ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { try { if ( caller == ( java.lang.Thread.currentThread ( ) ) ) { return insertPatchSet ( db ) ; } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ; try { return insertPatchSet ( db ) ; } finally { db.close ( ) ; } } } finally { synchronized ( replaceProgress ) { replaceProgress.update ( 1 ) ; } } }
public void newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwnerInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=OWNER" , other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "newpatchset" , sc ) . to ( sc.owner ) . to ( sc.reviewer , sc.ccer ) . notTo ( sc.starrer , other ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; }
public com.google.gerrit.extensions.common.AccountInfo deleteAssignee ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.AccountInfo > r = deleteAssignee.apply ( change , null ) ; return r.isNone ( ) ? null : r.value ( ) ; } catch ( com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete assignee" , e ) ; } }
public void addReviewerToReviewableChangeByOtherCcingSelfInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , other , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , null ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . to ( sc.reviewerByEmail ) . cc ( sc.owner , sc.reviewer , other ) . cc ( sc.ccerByEmail ) . notTo ( sc.starrer ) ; } ) ; }
public boolean muted ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return stars.isMutedBy ( change.getChange ( ) , change.getUser ( ) . getAccountId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot check if muted" , e ) ; } }
private java.util.Set < java.lang.String > getRefNames ( java.lang.String prefix ) throws com.google.gwtorm.server.OrmException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsers ) ) { org.eclipse.jgit.lib.RefDatabase refDb = repo.getRefDatabase ( ) ; return refDb.getRefs ( prefix ) . keySet ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public void customLabelMaxNoBlock_NegativeVoteNotBlock ( ) throws java.lang.Exception { Q.setFunctionName ( "MaxNoBlock" ) ; saveLabelConfig ( ) ; com.google.gerrit.acceptance.rest.change.ChangeInfo c = get ( disliked ( change ( ) ) ) ; com.google.gerrit.server.change.ChangeJson.LabelInfo q = c.labels.get ( Q.getName ( ) ) ; org.junit.Assert.assertEquals ( 1 , q.all.size ( ) ) ; org.junit.Assert.assertNull ( q.rejected ) ; org.junit.Assert.assertNotNull ( q.disliked ) ; }
public com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.server.query.change.QueryOptions opts ) throws com.google.gerrit.server.query.QueryParseException { com.google.gerrit.server.index.change.ChangeIndex index = indexes.getSearchIndex ( ) ; org.eclipse.jgit.util.MutableInteger leafTerms = new org.eclipse.jgit.util.MutableInteger ( ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewriteImpl ( in , index , opts , leafTerms ) ; if ( ( in == out ) || ( out instanceof com.google.gerrit.server.index.IndexPredicate ) ) { return new com.google.gerrit.server.index.change.IndexedChangeQuery ( index , out , opts ) ; } else if ( out == null ) { return in ; } else { return out ; } }
private void initIncludedInAction ( com.google.gerrit.client.changes.ChangeInfo info ) { if ( ( info.status ( ) ) == ( com.google.gerrit.reviewdb.client.Change.Status.MERGED ) ) { includedInAction = new com.google.gerrit.client.change.IncludedInAction ( info.legacyId ( ) , style , headerLine , includedIn ) ; includedIn.setVisible ( true ) ; } }
public void onSend ( ) { com.google.gerrit.client.changes.ChangeApi.cherrypick ( info.legacyId ( ) . get ( ) , revision , getDestinationBranch ( ) , getMessageText ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
void expectWrapper ( java.lang.String path , @ javax.annotation.Nonnull java.util.Optional < byte [ ] > value ) throws java.io.IOException { org.easymock.EasyMock.expect ( com.vmware.gerrit.owners.common.JgitWrapper.getBlobAsBytes ( org.easymock.EasyMock.anyObject ( org.eclipse.jgit.lib.Repository.class ) , org.easymock.EasyMock.anyObject ( java.lang.String.class ) , org.easymock.EasyMock.eq ( path ) ) ) . andReturn ( value ) . anyTimes ( ) ; }
public void testUpdateOneDBException ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.SQLException exception = new java.sql.BatchUpdateException ( ) ; java.sql.PreparedStatement update = stubStatementThrowExceptionOnExecute ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , exception ) ; com.google.gwtorm.jdbc.JdbcAccess < com.google.gwtorm.jdbc.TestJdbcAccess.Data , com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey > classUnderTest = createClassUnderTest ( ) ; try { classUnderTest.update ( oneRow ) ; org.junit.Assert.fail ( "missingException" ) ; } catch ( com.google.gwtorm.server.OrmException e ) { org.junit.Assert.assertSame ( e.getCause ( ) , exception ) ; } com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( update ) ; }
private static com.google.gerrit.testutil.FakeEmailSender.Message create ( com.google.gerrit.server.mail.Address from , java.util.Collection < com.google.gerrit.server.mail.Address > rcpt , java.util.Map < java.lang.String , com.google.gerrit.server.mail.send.EmailHeader > headers , java.lang.String body ) { return new com.google.gerrit.testutil.AutoValue_FakeEmailSender_Message ( from , com.google.common.collect.ImmutableList.copyOf ( rcpt ) , com.google.common.collect.ImmutableMap.copyOf ( headers ) , body ) ; }
void onReplyDone ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReply ( getOriginal ( ) , "Done" , true ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
private void fireEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.Event event ) { for ( com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( branchName , holder.user ) ) { holder.listener.onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
public static void recursivelyDelete ( java.io.File dir ) throws java.io.IOException { if ( ! ( dir.getPath ( ) . equals ( dir.getCanonicalPath ( ) ) ) ) { return ; } java.io.File [ ] contents = dir.listFiles ( ) ; if ( contents != null ) { for ( java.io.File d : contents ) { if ( d.isDirectory ( ) ) { com.google.gerrit.testutil.TempFileUtil.recursivelyDelete ( d ) ; } else { com.google.gerrit.testutil.TempFileUtil.deleteNowOrOnExit ( d ) ; } } } com.google.gerrit.testutil.TempFileUtil.deleteNowOrOnExit ( dir ) ; }
public void inheritRead_SingleBranchDoesNotOverrideInherited ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/for/refs/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/foobar" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCanUpload ( u ) ; assertCanUpload ( "refs/heads/master" , u ) ; assertCanUpload ( "refs/heads/foobar" , u ) ; }
public void configure ( ) { factory ( OnlineReindexer.Factory.class ) ; listener ( ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicMap.mapOf ( binder ( ) , com.google.gerrit.server.config.CacheResource.CACHE_KIND ) ; child ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "caches" ) . to ( com.google.gerrit.server.config.CachesCollection.class ) ; get ( com.google.gerrit.server.config.CacheResource.CACHE_KIND ) . to ( com.google.gerrit.server.config.GetCache.class ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { final com.google.gwt.user.client.ui.HTMLTable.Cell cell = table.getCellForEvent ( event ) ; if ( ( ( cell != null ) && ( ( cell.getCellIndex ( ) ) != 1 ) ) && ( ( getRowItem ( cell.getRowIndex ( ) ) ) != null ) ) { movePointerTo ( cell.getRowIndex ( ) ) ; } }
public void addPatchSetComments ( com.google.gerrit.server.events.PatchSetAttribute patchSetAttribute , java.util.Collection < com.google.gerrit.reviewdb.PatchLineComment > patchLineComments ) { for ( com.google.gerrit.reviewdb.PatchLineComment comment : patchLineComments ) { if ( ( comment.getKey ( ) . getParentKey ( ) . getParentKey ( ) . get ( ) ) == ( java.lang.Integer.parseInt ( patchSetAttribute.number ) ) ) { if ( ( patchSetAttribute.comments ) == null ) { patchSetAttribute.comments = new java.util.ArrayList < com.google.gerrit.server.events.PatchSetCommentAttribute > ( ) ; } patchSetAttribute.comments.add ( asPatchSetLineAttribute ( comment ) ) ; } } }
public static java.lang.String toProjectAdmin ( com.google.gerrit.reviewdb.client.Project.NameKey n , java.lang.String panel ) { if ( ( panel == null ) || ( ProjectScreen.INFO.equals ( panel ) ) ) { return "/admin/projects/" + ( n.toString ( ) ) ; } return ( ( "/admin/projects/" + ( n.toString ( ) ) ) + "," ) + panel ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( updated ( ) ) && ( runHooks ) ) { com.google.gerrit.server.IdentifiedUser currentUser = ( ( com.google.gerrit.server.IdentifiedUser ) ( ctx.getUser ( ) ) ) ; hooks.doHashtagsChangedHook ( change , currentUser.getAccount ( ) , toAdd , toRemove , updatedHashtags , ctx.getDb ( ) ) ; } }
void setShowLineNumbers ( boolean b ) { cmA.setOption ( "lineNumbers" , b ) ; cmB.setOption ( "lineNumbers" , b ) ; if ( b ) { diffTable.addStyleName ( DiffTable.style.showLineNumbers ( ) ) ; } else { diffTable.removeStyleName ( DiffTable.style.showLineNumbers ( ) ) ; } }
public com.google.gerrit.index.query.DataSource < com.google.gerrit.server.project.ProjectData > getSource ( com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > p , com.google.gerrit.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource ( opts , queryBuilder.toQuery ( p ) , new org.apache.lucene.search.Sort ( new org.apache.lucene.search.SortField ( com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD , SortField.Type.STRING , false ) ) ) ; }
java.lang.Runnable toggleOpenBox ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( cm.extras ( ) . hasActiveLine ( ) ) { com.google.gerrit.client.diff.SideBySideCommentGroup w = map ( cm.side ( ) ) . get ( ( ( cm.getLineNumber ( cm.extras ( ) . activeLine ( ) ) ) + 1 ) ) ; if ( w != null ) { w.openCloseLast ( ) ; } } } } ; }
public java.util.Set < com.google.gerrit.reviewdb.Account > call ( ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.client.OrmException { if ( AccountGroup.PROJECT_OWNERS.equals ( groupUUID ) ) { return getProjectOwners ( ) ; } return getAllGroupMembers ( groupCache.get ( groupUUID ) , new java.util.HashSet < com.google.gerrit.reviewdb.AccountGroup.Id > ( ) ) ; }
private void addMissingLabel ( java.lang.String text ) { com.google.gwt.user.client.Element li = com.google.gwt.user.client.DOM.createElement ( "li" ) ; li.setClassName ( Gerrit.RESOURCES.css ( ) . missingApproval ( ) ) ; li.setInnerText ( text ) ; com.google.gwt.user.client.DOM.appendChild ( missing.getElement ( ) , li ) ; }
java.util.Set < java.lang.String > getOrganizationsForUser ( java.lang.String username ) { try { return orgTeamsByUsername.get ( username ) . keySet ( ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.log.warn ( ( ( "Cannot get GitHub organisations for user '" + username ) + "'" ) , e ) ; return java.util.Collections.emptySet ( ) ; } }
public void createChangeOnInvisibleBranchFails ( ) throws java.lang.Exception { changeInTwoBranches ( "invisible-branch" , "a.txt" , "branchB" , "b.txt" ) ; block ( project , "refs/heads/invisible-branch" , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; com.google.gerrit.extensions.common.ChangeInput in = newChangeInput ( ChangeStatus.NEW ) ; in.branch = "invisible-branch" ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.AuthException.class , "cannot upload review" ) ; }
public org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException { initRepository ( ) ; return repo ; }
public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse res , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { java.lang.String pkg = "gerrit-gwtui" ; java.lang.String target = "ui_" + ( rule.select ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ) ) ; java.lang.String rule = ( ( "//" + pkg ) + ":" ) + target ; java.io.File zip = new java.io.File ( new java.io.File ( gen , pkg ) , ( target + ".zip" ) ) ; synchronized ( this ) { try { com.google.gerrit.pgm.http.jetty.JettyServer.build ( root , gen , rule ) ; } catch ( com.google.gerrit.pgm.http.jetty.JettyServer.BuildFailureException e ) { displayFailure ( rule , e.why , ( ( javax.servlet.http.HttpServletResponse ) ( res ) ) ) ; return ; } if ( ( ! ( target.equals ( lastTarget ) ) ) || ( ( lastTime ) != ( zip.lastModified ( ) ) ) ) { lastTarget = target ; lastTime = zip.lastModified ( ) ; com.google.gerrit.pgm.http.jetty.JettyServer.unpack ( zip , dstwar ) ; } } chain.doFilter ( request , res ) ; }
public void filterOutAllResults ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( "repo" ) ; com.google.gerrit.reviewdb.client.Account.Id user2 = accountManager.authenticate ( com.google.gerrit.server.account.AuthRequest.forUser ( "anotheruser" ) ) . getAccountId ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { insert ( newChangeForUser ( repo , user2 ) ) ; } assertQuery ( "status:new ownerin:Administrators" ) ; assertQuery ( "status:new ownerin:Administrators limit:2" ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
private com.google.gerrit.server.change.ReviewerJson.PostResult putAccount ( com.google.gerrit.server.change.ReviewerResource rsrc ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.reviewdb.client.Account member = rsrc.getUser ( ) . getAccount ( ) ; com.google.gerrit.server.project.ChangeControl control = rsrc.getControl ( ) ; com.google.gerrit.server.change.ReviewerJson.PostResult result = new com.google.gerrit.server.change.ReviewerJson.PostResult ( ) ; if ( isValidReviewer ( member , control ) ) { addReviewers ( rsrc , result , com.google.common.collect.ImmutableMap.of ( member.getId ( ) , control ) ) ; } return result ; }
private java.lang.String healthCheckAccess ( ) throws java.io.IOException { client ( ) . sysInfo ( ) ; final java.lang.String result = ( "{\"status\"=\"ok\",\"username\"=\"" + ( getUsername ( ) ) ) + "\"}" ; log.debug ( "Healtheck on access result: {}" , result ) ; return result ; }
private void initBranchLink ( com.google.gerrit.client.changes.ChangeInfo info ) { branchLink.setText ( info.branch ( ) ) ; branchLink.setTargetHistoryToken ( com.google.gerrit.common.PageLinks.toChangeQuery ( com.google.gerrit.client.ui.BranchLink.query ( info.projectNameKey ( ) , info.status ( ) , info.branch ( ) , null ) ) ) ; }
protected void configure ( ) { bind ( new com.google.inject.TypeLiteral < com.google.gwtorm.client.SchemaFactory < com.google.gerrit.reviewdb.ReviewDb > > ( ) { } ) . toInstance ( db ) ; bind ( com.google.gerrit.server.config.SitePaths.class ) . toInstance ( paths ) ; install ( new com.google.gerrit.server.schema.SchemaVersion.Module ( ) ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setString ( "gerrit" , null , "basePath" , "git" ) ; cfg.setString ( "user" , null , "name" , "Gerrit Code Review" ) ; cfg.setString ( "user" , null , "email" , "gerrit@localhost" ) ; bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( cfg ) ; bind ( org.eclipse.jgit.lib.PersonIdent.class ) . annotatedWith ( com.google.gerrit.server.GerritPersonIdent.class ) . toProvider ( com.google.gerrit.server.GerritPersonIdentProvider.class ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder ( ) ; msg.append ( "Abandoned" ) ; if ( ! ( com.google.common.base.Strings.nullToEmpty ( msgTxt ) . trim ( ) . isEmpty ( ) ) ) { msg.append ( "\n\n" ) ; msg.append ( msgTxt.trim ( ) ) ; } return com.google.gerrit.server.ChangeMessagesUtil.newMessage ( ctx , msg.toString ( ) ) ; }
private com.google.gerrit.common.ChangeHookRunner.ApprovalAttribute getApprovalAttribute ( java.util.Map.Entry < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > approval ) { com.google.gerrit.common.ChangeHookRunner.ApprovalAttribute a = new com.google.gerrit.common.ChangeHookRunner.ApprovalAttribute ( ) ; a.type = approval.getKey ( ) . get ( ) ; final com.google.gerrit.common.data.ApprovalType at = approvalTypes.getApprovalType ( approval.getKey ( ) ) ; a.description = at.getCategory ( ) . getName ( ) ; a.value = java.lang.Short.toString ( approval.getValue ( ) . get ( ) ) ; return a ; }
public java.lang.Iterable < com.google.gerrit.extensions.common.WebLinkInfo > getBranchLinks ( java.lang.String project , java.lang.String branch ) { java.util.List < com.google.gerrit.extensions.common.WebLinkInfo > links = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.extensions.webui.BranchWebLink webLink : branchLinks ) { links.add ( new com.google.gerrit.extensions.common.WebLinkInfo ( webLink.getLinkName ( ) , webLink.getImageUrl ( ) , webLink.getBranchUrl ( project , branch ) , webLink.getTarget ( ) ) ) ; } return links ; }
protected void configureServlets ( ) { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ProjectAccessPathFilter.class ) ; if ( authConfig.isTrustContainerAuth ( ) ) { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ContainerAuthFilter.class ) ; } else { filter ( "/p/*" ) . through ( com.google.gerrit.httpd.ProjectDigestFilter.class ) ; } serve ( "/p/*" ) . with ( com.google.gerrit.httpd.ProjectServlet.class ) ; }
private void renderLinks ( ) { for ( com.google.gerrit.client.ui.InlineHyperlink link : getLinks ( ) ) { linkPanel.add ( link ) ; } }
public void dontSkipByDefault ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , "" ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; com.google.common.truth.Truth.assertThat ( validatorConfig.isEnabledForRef ( projectName , "anyRef" , "anyOp" ) ) . isTrue ( ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.AccountSshKey result ) { addNew.setEnabled ( true ) ; addTxt.setText ( "" ) ; keys.addOneKey ( result ) ; if ( ! ( keys.isVisible ( ) ) ) { showAddKeyBlock ( false ) ; setKeyTableVisible ( true ) ; keys.updateDeleteButton ( ) ; } }
private void assertUnchangedMessage ( com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > edit , java.lang.String message ) throws java.lang.Exception { try { modifier.modifyMessage ( edit.get ( ) , message ) ; fail ( "UnchangedCommitMessageException expected" ) ; } catch ( com.google.gerrit.server.edit.UnchangedCommitMessageException ex ) { com.google.common.truth.Truth.assertThat ( ex.getMessage ( ) ) . isEqualTo ( "New commit message cannot be same as existing commit message" ) ; } }
public T call ( ) throws java.lang.Exception { com.google.gerrit.server.RequestCleanup cleanup = scope.scope ( com.google.inject.Key.get ( com.google.gerrit.server.RequestCleanup.class ) , new com.google.inject.Provider < com.google.gerrit.server.RequestCleanup > ( ) { @ java.lang.Override public com.google.gerrit.server.RequestCleanup get ( ) { return new com.google.gerrit.server.RequestCleanup ( ) ; } } ) . get ( ) ; try { return callable.call ( ) ; } finally { cleanup.run ( ) ; } }
private void fireHook ( ) { final java.util.Map < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > changed = new java.util.HashMap < com.google.gerrit.reviewdb.ApprovalCategory.Id , com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > ( ) ; for ( com.google.gerrit.reviewdb.ApprovalCategoryValue.Id v : approvals ) { changed.put ( v.getParentKey ( ) , v ) ; } hooks.doCommentAddedHook ( change , user.getAccount ( ) , patchSet , messageText , changed ) ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git , java.lang.String subject , java.lang.String fileName , java.lang.String content ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , git , subject , fileName , content ) ; return push.to ( "refs/for/master" ) ; }
private void deleteRemoteSsh ( org.eclipse.jgit.transport.URIish uri ) { java.lang.String quotedPath = QuotedString.BOURNE.quote ( uri.getPath ( ) ) ; java.lang.String cmd = "rm -rf " + quotedPath ; java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.ReplicationQueue.newErrorBufferStream ( ) ; try { executeRemoteSsh ( uri , cmd , errStream ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error ( java.lang.String.format ( ( "Error deleting remote repository at %s:\n" + ( ( " Exception: %s\n" + " Command: %s\n" ) + " Output: %s" ) ) , uri , e , cmd , errStream ) , e ) ; } }
public java.lang.Object createTest ( ) throws java.lang.Exception { java.lang.Object test = getTestClass ( ) . getJavaClass ( ) . newInstance ( ) ; parameterField.set ( test , com.google.gerrit.testutil.ConfigSuite.callConfigMethod ( configMethod ) ) ; return test ; }
public void onSuccess ( com.google.gerrit.reviewdb.client.Account currentUser ) { box.hide ( ) ; if ( ( com.google.gerrit.client.Gerrit.getConfig ( ) . getAuthType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.DEVELOPMENT_BECOME_ANY_ACCOUNT ) ) { currentEmail = addr ; if ( ( emailPick.getItemCount ( ) ) == 0 ) { onSaveSuccess ( currentUser ) ; } else { save.setEnabled ( true ) ; } updateEmailList ( ) ; } }
public static void restoreContent ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String filename , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > result ) { com.google.gerrit.client.changes.ChangeFileApi.Input in = com.google.gerrit.client.changes.ChangeFileApi.Input.create ( ) ; in.path ( filename ) ; in.restore ( true ) ; com.google.gerrit.client.changes.ChangeApi.edit ( id.getParentKey ( ) . get ( ) ) . post ( in , result ) ; }
static void call ( final com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision ) { com.google.gerrit.client.changes.ChangeApi.rebase ( id.get ( ) , revision , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.changes.ChangeInfo > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; } } ) ; }
public void restoreFile ( java.lang.String filePath ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.change.ChangeEdits.Post.Input restoreInput = new com.google.gerrit.server.change.ChangeEdits.Post.Input ( ) ; restoreInput.restorePath = filePath ; changeEditsPost.apply ( changeResource , restoreInput ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot restore file of change edit" , e ) ; } }
public void patchSets ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId ( ) . getParentKey ( ) ; r = amendChange ( r.getChangeId ( ) ) ; checker.checkChanges ( id ) ; }
private void load ( ) throws java.io.IOException { if ( ( migration.write ( ) ) && ( ( getRevision ( ) ) == null ) ) { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( getProjectName ( ) ) ; try { load ( repo ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new java.io.IOException ( e ) ; } finally { repo.close ( ) ; } } }
public void testNoCommand ( ) throws java.lang.Exception { assertEquals ( Type.HOST_INDEX , getView ( "/" ) . getType ( ) ) ; assertEquals ( Type.REPOSITORY_INDEX , getView ( "/repo" ) . getType ( ) ) ; assertNull ( getView ( "/repo/+" ) ) ; assertNull ( getView ( "/repo/+/" ) ) ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission.WithValue perm ) { com.google.gerrit.common.data.PermissionRange r = label ( perm.permissionName ( ) . get ( ) ) ; if ( ( ( perm.forUser ( ) ) == ( com.google.gerrit.server.permissions.LabelPermission.ForUser.ON_BEHALF_OF ) ) && ( r.isEmpty ( ) ) ) { return false ; } return r.contains ( perm.value ( ) ) ; }
private void deleteRemoteSsh ( org.eclipse.jgit.transport.URIish uri ) { java.lang.String quotedPath = QuotedString.BOURNE.quote ( uri.getPath ( ) ) ; java.lang.String cmd = "rm -rf " + quotedPath ; java.io.OutputStream errStream = sshHelper.newErrorBufferStream ( ) ; HEAD ( ( 5723.0F - 2.15 ) ) ; sshHelper.executeRemoteSsh ( uri , cmd , errStream ) ; }
public void onSuccess ( final com.google.gerrit.client.VoidResult result ) { for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.client.groups.MemberInfo i = getRowItem ( row ) ; if ( ( i != null ) && ( ids.contains ( i.getAccountId ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > list ( ) { namesUpdateLock.lock ( ) ; try { com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor visitor = new com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor ( basePath ) ; scanProjects ( visitor ) ; return java.util.Collections.unmodifiableSortedSet ( visitor.found ) ; } finally { namesUpdateLock.unlock ( ) ; } }
protected void assertQuery ( com.google.gerrit.extensions.api.changes.Changes.QueryRequest query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.query.change.AbstractQueryChangesTest.query ( query ) ) . named ( query.toString ( ) ) . containsExactlyElementsIn ( com.google.gerrit.server.query.change.AbstractQueryChangesTest.ids ( changes ) ) . inOrder ( ) ; }
protected void doInsert ( final java.lang.Iterable < T > instances , final com.google.gwtorm.jdbc.JdbcTransaction txn ) throws com.google.gwtorm.client.OrmException { try { if ( schema.getDialect ( ) . canDetermineIndividualBatchUpdateCounts ( ) ) { insertAsBatch ( instances ) ; } else { insertIndividually ( instances ) ; } } catch ( java.sql.SQLException e ) { throw convertError ( "insert" , e ) ; } }
private static synchronized java.util.concurrent.ScheduledThreadPoolExecutor shutdown ( ) { final java.util.concurrent.ScheduledThreadPoolExecutor p = com.google.gerrit.git.WorkQueue.pool ; if ( p != null ) { p.shutdown ( ) ; com.google.gerrit.git.WorkQueue.pool = null ; return p ; } return null ; }
public java.util.List < com.googlesource.gerrit.plugins.github.MenuEntry > getEntries ( ) { if ( ( userProvider.get ( ) ) instanceof com.google.gerrit.server.IdentifiedUser ) { return menuEntries ; } else { return java.util.Collections.emptyList ( ) ; } }
public < V > com.google.gerrit.metrics.CallbackMetric < V > newCallbackMetric ( java.lang.String name , java.lang.Class < V > valueClass , com.google.gerrit.metrics.Description desc ) { checkNotDefined ( name ) ; return new com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.CallbackMetricImpl < V > ( name , valueClass ) ; }
public void byCommit ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( "repo" ) ; com.google.gerrit.server.change.ChangeInserter ins = newChange ( repo ) ; insert ( repo , ins ) ; java.lang.String sha = ins.getPatchSet ( ) . getRevision ( ) . get ( ) ; assertQuery ( "0000000000000000000000000000000000000000" ) ; for ( int i = 0 ; i <= 36 ; i ++ ) { java.lang.String q = sha.substring ( 0 , ( 40 - i ) ) ; assertQuery ( q , ins.getChange ( ) ) ; } }
private boolean isIndexPredicate ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.server.index.ChangeIndex index ) { if ( ! ( in instanceof com.google.gerrit.server.index.IndexPredicate ) ) { return false ; } com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p = ( ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > ) ( in ) ) ; return index.getSchema ( ) . getFields ( ) . containsKey ( p.getField ( ) . getName ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { java.lang.Class.forName ( com.mysql.jdbc.Driver.class . getName ( ) ) ; final java.lang.String host = "localhost" ; final java.lang.String database = "gwtorm" ; final java.lang.String user = "gwtorm" ; final java.lang.String pass = "gwtorm" ; final java.lang.String url = ( ( "jdbc:mysql://" + host ) + "/" ) + database ; db = java.sql.DriverManager.getConnection ( url , user , pass ) ; executor = new com.google.gwtorm.jdbc.JdbcExecutor ( db ) ; dialect = new com.google.gwtorm.schema.sql.DialectMySQL ( ) . refine ( db ) ; final java.util.Properties p = new java.util.Properties ( ) ; p.setProperty ( "driver" , com.mysql.jdbc.Driver.class . getName ( ) ) ; p.setProperty ( "url" , db.getMetaData ( ) . getURL ( ) ) ; p.setProperty ( "user" , user ) ; p.setProperty ( "password" , pass ) ; phoneBook = new com.google.gwtorm.jdbc.Database < com.google.gwtorm.data.PhoneBookDb > ( new com.google.gwtorm.jdbc.SimpleDataSource ( p ) , com.google.gwtorm.data.PhoneBookDb.class ) ; phoneBook2 = new com.google.gwtorm.jdbc.Database < com.google.gwtorm.data.PhoneBookDb2 > ( new com.google.gwtorm.jdbc.SimpleDataSource ( p ) , com.google.gwtorm.data.PhoneBookDb2.class ) ; drop ( "TABLE address_id" ) ; drop ( "TABLE addresses" ) ; drop ( "TABLE cnt" ) ; drop ( "TABLE foo" ) ; drop ( "TABLE people" ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.changes.ChangeList > result ) { updateColumnsForLabels ( result.asList ( ) . toArray ( new com.google.gerrit.client.changes.ChangeList [ result.size ( ) ] ) ) ; for ( int i = 0 ; i < ( result.size ( ) ) ; i ++ ) { sections.get ( i ) . display ( result.get ( i ) ) ; } finishDisplay ( ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { for ( int row = 1 ; row < ( table.getRowCount ( ) ) ; ) { final com.google.gerrit.common.data.AccountProjectWatchInfo k = getRowItem ( row ) ; if ( ( k != null ) && ( ids.contains ( k.getWatch ( ) . getKey ( ) ) ) ) { table.removeRow ( row ) ; } else { row ++ ; } } }
public static com.google.gerrit.server.change.PostReview.CommentSetEntry create ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) { return com.google.gerrit.server.change.PostReview.CommentSetEntry.create ( comment.getKey ( ) . getParentKey ( ) , comment.getLine ( ) , com.google.gerrit.extensions.client.Side.fromShort ( comment.getSide ( ) ) , com.google.common.hash.Hashing.sha1 ( ) . hashString ( comment.getMessage ( ) , java.nio.charset.StandardCharsets.UTF_8 ) , comment.getRange ( ) ) ; }
private static java.lang.String providersListToString ( java.lang.Iterable < com.google.gerrit.server.plugins.ServerPluginProvider > providersHandlers ) { java.lang.Iterable < java.lang.String > providerNames = com.google.common.collect.Iterables.transform ( providersHandlers , new com.google.common.base.Function < com.google.gerrit.server.plugins.ServerPluginProvider , java.lang.String > ( ) { @ java.lang.Override public java.lang.String apply ( com.google.gerrit.server.plugins.ServerPluginProvider provider ) { return provider.getProviderPluginName ( ) ; } } ) ; return com.google.common.base.Joiner.on ( ", " ) . join ( providerNames ) ; }
public com.google.gerrit.client.data.ChangeDetail run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.client.changes.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Change change = db.changes ( ) . get ( id ) ; if ( change == null ) { throw new com.google.gerrit.client.changes.Failure ( new com.google.gerrit.client.rpc.NoSuchEntityException ( ) ) ; } final com.google.gerrit.client.data.ChangeDetail d = new com.google.gerrit.client.data.ChangeDetail ( ) ; d.load ( db , new com.google.gerrit.client.data.AccountCache ( db ) , change ) ; return d ; }
public void byCommitter ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo = createProject ( "repo" ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo , null , null , userId.get ( ) , null ) ) ; assertQuery ( "committer:jcommitter@example.com" , change1 ) ; assertQuery ( "committer:jcommitter" , change1 ) ; assertQuery ( "committer:example" , change1 ) ; assertQuery ( "committer:example.com" , change1 ) ; assertQuery ( "committer:Committer" , change1 ) ; assertQuery ( "committer:jauthor@example.com" ) ; assertQuery ( "committer:somewhere.com" ) ; assertQuery ( "committer:jauthor" ) ; assertQuery ( "committer:Author" ) ; }
public void doesNotPublishWhenExpected ( ) throws java.lang.Exception { mockEvent.change = mockChange ; mockChange.commitMessage = "WIP:This is a title\nAnd a the body." ; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator ; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance ( mockEvent , config ) ; org.junit.Assert.assertThat ( messageGenerator.shouldPublish ( ) , org.hamcrest.core.Is.is ( true ) ) ; }
public void testParseWComments ( ) throws java.lang.Exception { com.google.gerrit.server.git.QueryList ql = com.google.gerrit.server.git.QueryList.parse ( ( ( ( com.google.gerrit.server.git.QueryListTest.C1 ) + ( com.google.gerrit.server.git.QueryListTest.F_SIMPLE ) ) + ( com.google.gerrit.server.git.QueryListTest.C2 ) ) , null ) ; com.google.common.truth.Truth.assertThat ( ql.getQuery ( com.google.gerrit.server.git.QueryListTest.N_FOO ) ) . isEqualTo ( com.google.gerrit.server.git.QueryListTest.Q_P ) ; com.google.common.truth.Truth.assertThat ( ql.getQuery ( com.google.gerrit.server.git.QueryListTest.N_BAR ) ) . isEqualTo ( com.google.gerrit.server.git.QueryListTest.Q_B ) ; }
public java.lang.Void call ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( caller == ( java.lang.Thread.currentThread ( ) ) ) { insertChange ( db ) ; } else { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { insertChange ( db ) ; } } synchronized ( newProgress ) { newProgress.update ( 1 ) ; } return null ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.CommitResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return com.google.gerrit.server.project.FileResource.create ( repoManager , parent.getProject ( ) , parent.getCommit ( ) , id.get ( ) ) ; }
public void byProjectPrefix ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( "repo1" ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( "repo2" ) ; com.google.gerrit.reviewdb.client.Change change1 = newChange ( repo1 , null , null , null , null ) . insert ( ) ; com.google.gerrit.reviewdb.client.Change change2 = newChange ( repo2 , null , null , null , null ) . insert ( ) ; assertQuery ( "projects:foo" ) ; assertQuery ( "projects:repo1" , change1 ) ; assertQuery ( "projects:repo2" , change2 ) ; assertQuery ( "projects:repo" , change2 , change1 ) ; }
public void inheritRead_AppendWithDenyOfRef ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCanAccess ( u ) ; assertCanRead ( "refs/master" , u ) ; assertCanRead ( "refs/tags/foobar" , u ) ; assertCanRead ( "refs/heads/master" , u ) ; }
public void start ( ) { queue.getDefaultQueue ( ) . execute ( compressor ) ; java.time.ZoneId zone = java.time.ZoneId.systemDefault ( ) ; java.time.LocalDate now = java.time.LocalDate.now ( zone ) ; long milliSecondsUntil11pm = now.atStartOfDay ( zone ) . plusHours ( 23 ) . toInstant ( ) . toEpochMilli ( ) ; queue.getDefaultQueue ( ) . scheduleAtFixedRate ( compressor , milliSecondsUntil11pm , java.util.concurrent.TimeUnit.HOURS.toMillis ( 24 ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIdOnlyWhenNotedbDisabled ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Preconditions.checkState ( ( ! ( args.migration.readChanges ( ) ) ) , ( "do not call" + " createFromIdOnlyWhenNotedbDisabled when notedb is enabled" ) ) ; com.google.gerrit.reviewdb.client.Change change = com.google.gerrit.server.notedb.ChangeNotes.Factory.unwrap ( db ) . changes ( ) . get ( changeId ) ; return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change ) . load ( ) ; }
protected java.lang.String buildHtml ( java.lang.String path , boolean assertHasETag ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = build ( path ) ; org.junit.Assert.assertEquals ( "text/html" , res.getHeader ( com.google.common.net.HttpHeaders.CONTENT_TYPE ) ) ; if ( assertHasETag ) { org.junit.Assert.assertNotNull ( "has ETag" , res.getHeader ( com.google.common.net.HttpHeaders.ETAG ) ) ; } return res.getActualBodyString ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { l.setVisible ( true ) ; edit.setVisible ( true ) ; input.setVisible ( false ) ; input.setValue ( headRevision ) ; save.setVisible ( false ) ; save.setEnabled ( false ) ; cancel.setVisible ( false ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException ;
public boolean equals ( java.lang.Object other ) { return ( other instanceof com.google.gerrit.server.permissions.LabelPermission ) && ( name.equals ( ( ( com.google.gerrit.server.permissions.LabelPermission ) ( other ) ) . name ) ) ; }
public com.google.gerrit.server.group.GroupJson.GroupInfo format ( com.google.gerrit.common.data.GroupDescription.Basic group ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.GroupJson.GroupInfo info = init ( group ) ; if ( ( options.contains ( com.google.gerrit.common.groups.ListGroupsOption.MEMBERS ) ) || ( options.contains ( com.google.gerrit.common.groups.ListGroupsOption.INCLUDES ) ) ) { com.google.gerrit.server.group.GroupResource rsrc = new com.google.gerrit.server.group.GroupResource ( groupControlFactory.controlFor ( group ) ) ; initMembersAndIncludes ( rsrc , info ) ; } return info ; }
private boolean isEditModeEnabled ( com.google.gerrit.client.changes.ChangeInfo info , com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev ) { if ( rev.is_edit ( ) ) { return true ; } if ( ( edit ) == null ) { return revision.equals ( info.current_revision ( ) ) ; } return ( rev._number ( ) ) == ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent ( info.revisions ( ) . values ( ) ) ) ; }
public final void copyTo ( com.google.gerrit.extensions.client.EditPreferencesInfo p ) { p.tabSize = tabSize ( ) ; p.lineLength = lineLength ( ) ; p.cursorBlinkRate = cursorBlinkRate ( ) ; p.hideTopMenu = hideTopMenu ( ) ; p.showTabs = showTabs ( ) ; p.showWhitespaceErrors = showWhitespaceErrors ( ) ; p.syntaxHighlighting = syntaxHighlighting ( ) ; p.hideLineNumbers = hideLineNumbers ( ) ; p.theme = theme ( ) ; p.keyMapType = keyMapType ( ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval > byPatchSet ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration.readPatchSetApprovals ( ) ) ) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals ( db.patchSetApprovals ( ) . byPatchSet ( psId ) ) ; } return copier.getForPatchSet ( db , ctl , psId ) ; }
public void parseOptionMap ( java.util.Map < java.lang.String , java.lang.String [ ] > parameters ) throws org.kohsuke.args4j.CmdLineException { com.google.common.collect.Multimap < java.lang.String , java.lang.String > map = com.google.common.collect.LinkedHashMultimap.create ( ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String [ ] > ent : parameters.entrySet ( ) ) { for ( java.lang.String val : ent.getValue ( ) ) { map.put ( ent.getKey ( ) , val ) ; } } parseOptionMap ( map ) ; }
public void deleteReviewerFromReviewableChangeByAdminCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; setEmailStrategy ( admin , EmailStrategy.CC_ON_OWN_COMMENTS ) ; setApiUser ( admin ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . sent ( "deleteReviewer" , sc ) . to ( sc.owner , extraReviewer ) . cc ( admin , extraCcer , sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.server.project.ProjectState project , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) { try { com.google.gerrit.server.change.ChangeKindCacheImpl.Key key = new com.google.gerrit.server.change.ChangeKindCacheImpl.Key ( prior , next , useRecursiveMerge ) ; return new com.google.gerrit.server.change.ChangeKindCacheImpl.Loader ( key , repo ) . call ( ) ; } catch ( java.io.IOException e ) { com.google.gerrit.server.change.ChangeKindCacheImpl.log.warn ( ( ( ( "Cannot check trivial rebase of new patch set " + ( next.name ( ) ) ) + " in " ) + ( project.getProject ( ) . getName ( ) ) ) , e ) ; return ChangeKind.REWORK ; } }
private java.util.Optional < com.google.gerrit.common.data.GroupReference > getGroupReference ( org.eclipse.jgit.notes.NoteMap noteMap , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteKey = com.google.gerrit.server.group.db.GroupNameNotes.getNoteKey ( groupName ) ; org.eclipse.jgit.lib.ObjectId blobId = noteMap.get ( noteKey ) ; if ( blobId == null ) { return java.util.Optional.empty ( ) ; } byte [ ] noteData = rw.getObjectReader ( ) . open ( blobId , org.eclipse.jgit.lib.Constants.OBJ_BLOB ) . getCachedBytes ( ) ; com.google.gerrit.common.data.GroupReference groupReference = com.google.gerrit.server.group.db.GroupNameNotes.getFromNoteData ( noteData ) ; return java.util.Optional.of ( groupReference ) ; }
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit , int maxPages , int maxTerms ) { }
public java.util.Set < java.lang.String > getEmailAddresses ( com.google.gerrit.server.IdentifiedUser user ) { java.util.Collection < com.google.gerrit.server.account.ExternalId > ids = user.state ( ) . getExternalIds ( ) ; java.util.Set < java.lang.String > emails = com.google.common.collect.Sets.newHashSetWithExpectedSize ( ids.size ( ) ) ; for ( com.google.gerrit.server.account.ExternalId ext : ids ) { if ( ! ( com.google.common.base.Strings.isNullOrEmpty ( ext.email ( ) ) ) ) { emails.add ( ext.email ( ) ) ; } } return emails ; }
private java.util.List < com.google.gerrit.acceptance.TestAccount > createAccounts ( int n , java.lang.String emailPrefix ) throws java.lang.Exception { java.util.List < com.google.gerrit.acceptance.TestAccount > result = new java.util.ArrayList < > ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { result.add ( accounts.create ( name ( ( "u" + i ) ) , ( ( ( emailPrefix + "-" ) + i ) + "@example.com" ) , ( "Full Name " + i ) ) ) ; } return result ; }
public static void deleteDraftChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gerrit.server.git.GitRepositoryManager gitManager , final com.google.gerrit.server.extensions.events.GitReferenceUpdated gitRefUpdated , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { final com.google.gerrit.reviewdb.client.Change.Id changeId = patchSetId.getParentKey ( ) ; com.google.gerrit.server.ChangeUtil.deleteDraftChange ( changeId , gitManager , gitRefUpdated , db ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.IntegrationException { return ( ! ( args.mergeUtil.hasMissingDependencies ( args.mergeSorter , toMerge ) ) ) && ( args.mergeUtil.canCherryPick ( args.mergeSorter , args.repo , mergeTip , args.rw , toMerge ) ) ; }
public void generatesExpectedMessage ( ) throws java.lang.Exception { mockEvent.change = mockChange ; mockEvent.author = mockAccount ; mockEvent.comment = "This is the first line\nAnd the second line." ; mockChange.project = "testproject" ; mockChange.branch = "master" ; mockChange.url = "https://change/" ; mockAccount.name = "Unit Tester" ; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator ; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance ( mockEvent , config ) ; java.lang.String expectedResult ; expectedResult = "{\"text\": \"Unit Tester commented\\n>>>" + ( ( "testproject (master): This is the first line\n" + "And the second line. (https://change/)\"," ) + "\"channel\": \"#testchannel\",\"username\": \"testuser\"}\n" ) ; java.lang.String actualResult ; actualResult = messageGenerator.generate ( ) ; org.junit.Assert.assertThat ( actualResult , org.hamcrest.core.Is.is ( org.hamcrest.CoreMatchers.equalTo ( expectedResult ) ) ) ; }
public void stop ( ) throws com.google.gwt.core.ext.UnableToCompleteException { com.google.gwt.core.ext.TreeLogger branch = logger.branch ( TreeLogger.INFO , "Stopping Jetty server" ) ; org.mortbay.log.Log.setLog ( new com.google.gerrit.gwtdebug.GerritDebugLauncher.JettyTreeLogger ( branch ) ) ; try { server.stop ( ) ; server.setStopAtShutdown ( false ) ; branch.log ( TreeLogger.INFO , "Stopped successfully" ) ; } catch ( java.lang.Exception e ) { branch.log ( TreeLogger.ERROR , "Unable to stop embedded Jetty server" , e ) ; throw new com.google.gwt.core.ext.UnableToCompleteException ( ) ; } finally { org.mortbay.log.Log.setLog ( new com.google.gerrit.gwtdebug.GerritDebugLauncher.JettyTreeLogger ( logger ) ) ; } }
private java.util.Map < com.google.gerrit.reviewdb.Change.Key , com.google.gerrit.reviewdb.Change.Id > openChangesByKey ( ) throws com.google.gwtorm.client.OrmException { final java.util.Map < com.google.gerrit.reviewdb.Change.Key , com.google.gerrit.reviewdb.Change.Id > r = new java.util.HashMap < com.google.gerrit.reviewdb.Change.Key , com.google.gerrit.reviewdb.Change.Id > ( ) ; for ( com.google.gerrit.reviewdb.Change c : db.changes ( ) . byProjectOpenAll ( project.getNameKey ( ) ) ) { r.put ( c.getKey ( ) , c.getId ( ) ) ; } return r ; }
public void threeLevelTreeWithSomeIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-foo:a (file:b OR file:c)" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; com.google.common.truth.Truth.assertThat ( out.getClass ( ) ) . isSameAs ( com.google.gerrit.server.query.change.AndChangeSource.class ) ; com.google.common.truth.Truth.assertThat ( out.getChildren ( ) ) . containsExactly ( query ( in.getChild ( 1 ) ) , in.getChild ( 0 ) ) . inOrder ( ) ; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.server.git.MergeOp.OpenRepo or , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.server.git.CodeReviewCommit branchTip , com.google.gerrit.server.IdentifiedUser caller ) throws com.google.gerrit.server.git.IntegrationException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , or.repo , or.rw , or.ins , or.canMergeFlag , getAlreadyAccepted ( or , branchTip ) , destBranch , caller ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > in = result.get ( path ) ; if ( in != null ) { addAllToCommentList ( in , toDrafts ) ; } }
public void newPatchSetOnWipChangeSettingReadyInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%ready" , sc.owner ) ; assertThat ( sender ) . sent ( "newpatchset" , sc ) . notTo ( sc.owner ) . to ( sc.reviewer ) . cc ( sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; assertThat ( sender ) . notSent ( ) ; }
private void parseReviewer ( com.google.gerrit.server.notedb.ReviewerState state , java.lang.String line ) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.PersonIdent ident = org.eclipse.jgit.util.RawParseUtils.parsePersonIdent ( line ) ; if ( ident == null ) { throw parseException ( "invalid %s: %s" , state.getFooterKey ( ) . getName ( ) , line ) ; } com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent ( ident ) ; if ( ! ( reviewers.containsKey ( accountId ) ) ) { reviewers.put ( accountId , state ) ; } }
public com.google.gerrit.server.events.MessageAttribute asMessageAttribute ( com.google.gerrit.reviewdb.client.ChangeMessage message ) { com.google.gerrit.server.events.MessageAttribute a = new com.google.gerrit.server.events.MessageAttribute ( ) ; a.timestamp = ( message.getWrittenOn ( ) . getTime ( ) ) / 1000L ; a.reviewer = asAccountAttribute ( message.getAuthor ( ) ) ; a.message = message.getMessage ( ) ; return a ; }
public void remove ( com.google.gerrit.common.data.AccessSection section ) { if ( section != null ) { accessSections.remove ( section.getName ( ) ) ; } }
public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { validate ( ctx ) ; patchSetInfo = patchSetInfoFactory.get ( ctx.getRevWalk ( ) , commit , patchSet.getId ( ) ) ; change.setCurrentPatchSet ( patchSetInfo ) ; if ( ! ( updateRef ) ) { return ; } ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) , commit , patchSet.getRefName ( ) ) ) ; }
public com.google.gerrit.client.data.ChangeDetail run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gerrit.client.changes.Failure , com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Change change = db.changes ( ) . get ( id ) ; if ( change == null ) { throw new com.google.gerrit.client.changes.Failure ( new com.google.gerrit.client.rpc.NoSuchEntityException ( ) ) ; } final com.google.gerrit.client.data.ChangeDetail d = new com.google.gerrit.client.data.ChangeDetail ( ) ; d.load ( db , new com.google.gerrit.client.data.AccountInfoCacheFactory ( db ) , change ) ; return d ; }
public void replace ( com.google.gerrit.server.project.ProjectState projectState ) throws java.io.IOException { io.searchbox.core.Bulk bulk = new io.searchbox.core.Bulk.Builder ( ) . defaultIndex ( indexName ) . defaultType ( com.google.gerrit.elasticsearch.ElasticProjectIndex.PROJECTS ) . addAction ( insert ( com.google.gerrit.elasticsearch.ElasticProjectIndex.PROJECTS , projectState ) ) . refresh ( true ) . build ( ) ; io.searchbox.client.JestResult result = client.execute ( bulk ) ; if ( ! ( result.isSucceeded ( ) ) ) { throw new java.io.IOException ( java.lang.String.format ( "Failed to replace project %s in index %s: %s" , projectState.getProject ( ) . getName ( ) , indexName , result.getErrorMessage ( ) ) ) ; } }
protected void configureServlets ( ) { install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderServletModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.highavailability.health.HealthServletModule ( ) ) ; if ( config.websession ( ) . synchronize ( ) ) { install ( new com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionModule ( ) ) ; } }
public com.google.gerrit.extensions.common.AccountInfo accountInfo ( com.google.gerrit.reviewdb.client.Account a ) { if ( ( a == null ) || ( ( a.getId ( ) ) == null ) ) { return null ; } return com.google.gerrit.server.account.AccountJson.toAccountInfo ( a ) ; }
public com.google.gerrit.server.project.ProjectState projectState ( com.google.inject.Provider < com.google.gerrit.reviewdb.ReviewDb > db , com.google.gerrit.server.project.ProjectCache projectCache ) throws com.google.gwtorm.client.OrmException { if ( ( projectState ) == null ) { com.google.gerrit.reviewdb.Change c = change ( db ) ; projectState = projectCache.get ( c.getProject ( ) ) ; } return projectState ; }
void doLinkIdentity ( ) { final com.google.gerrit.client.SignInDialog d = new com.google.gerrit.client.SignInDialog ( new com.google.gerrit.client.rpc.GerritCallback < java.lang.Object > ( ) { public void onSuccess ( final java.lang.Object result ) { refresh ( ) ; } } ) ; d.setMode ( SignInDialog.Mode.LINK_IDENTIY ) ; d.show ( ) ; }
public void testOnTime ( ) throws java.lang.Exception { org.joda.time.DateTime now = org.joda.time.DateTime.now ( ) . toDateTime ( DateTimeZone.UTC ) ; com.google.common.truth.Truth.assertThat ( auth.onTime ( com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.DATE_TIME.print ( now.plusSeconds ( 1 ) ) , "o" , "id" ) ) . isTrue ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { for ( com.google.gerrit.reviewdb.Patch p : detail.getPatches ( ) ) { com.google.gwt.user.client.Window.open ( ( ( ( Window.Location.getPath ( ) ) + "#" ) + ( com.google.gerrit.client.Dispatcher.toPatchUnified ( p.getKey ( ) ) ) ) , "_blank" , null ) ; } }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.api.projects.DashboardInfo > apply ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.server.project.SetDashboard.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gerrit.server.permissions.PermissionBackendException , java.io.IOException { com.google.gerrit.server.project.SetDefaultDashboard set = setDefault.get ( ) ; set.inherited = inherited ; return set.apply ( com.google.gerrit.server.project.DashboardResource.projectDefault ( resource.getControl ( ) ) , input ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.client.Account.Id to ) { try { if ( ( ! ( rcptTo.contains ( to ) ) ) && ( isVisibleTo ( to ) ) ) { rcptTo.add ( to ) ; add ( rt , toAddress ( to ) ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.mail.send.OutgoingEmail.log.error ( ( "Error reading database for account: " + to ) , e ) ; } }
private void initRights ( ) { final com.google.gwt.user.client.ui.Label rightsHdr = new com.google.gwt.user.client.ui.Label ( Util.C.headingAccessRights ( ) ) ; rightsHdr.setStyleName ( "gerrit-SmallHeading" ) ; rights = new com.google.gerrit.client.admin.ProjectAdminScreen.RightsTable ( ) ; delRight = new com.google.gwt.user.client.ui.Button ( Util.C.buttonDeleteGroupMembers ( ) ) ; delRight.addClickListener ( new com.google.gwt.user.client.ui.ClickListener ( ) { public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { rights.deleteChecked ( ) ; } } ) ; add ( rightsHdr ) ; add ( rights ) ; add ( delRight ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return change ; }
public java.lang.String getETag ( ) { com.google.gerrit.server.CurrentUser user = control.getUser ( ) ; com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5 ( ) . newHasher ( ) ; if ( user.isIdentifiedUser ( ) ) { h.putString ( starredChangesUtil.getObjectId ( user.getAccountId ( ) , getId ( ) ) . name ( ) , java.nio.charset.StandardCharsets.UTF_8 ) ; } prepareETag ( h , user ) ; return h.hash ( ) . toString ( ) ; }
public void deleteDraftChange ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createDraftChange ( ) ; com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId ) ; org.junit.Assert.assertEquals ( ( "p~master~" + changeId ) , c.id ) ; org.junit.Assert.assertEquals ( Change.Status.DRAFT , c.status ) ; com.google.gerrit.acceptance.RestResponse r = com.google.gerrit.acceptance.rest.change.DeleteDraftChangeIT.deleteChange ( changeId , adminSession ) ; org.junit.Assert.assertEquals ( 204 , r.getStatusCode ( ) ) ; }
public void doesNotPublishWhenExpected ( ) throws java.lang.Exception { mockEvent.change = mockChange ; mockChange.commitMessage = "WIP-This is a title\nAnd a the body." ; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator ; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance ( mockEvent , config ) ; org.junit.Assert.assertThat ( messageGenerator.shouldPublish ( ) , org.hamcrest.core.Is.is ( false ) ) ; }
public static java.lang.String readFile ( final java.io.File parentDir , final java.lang.String name ) throws java.io.IOException { if ( parentDir == null ) { return null ; } final java.io.File path = new java.io.File ( parentDir , name ) ; try { return com.google.gerrit.httpd.HtmlDomUtil.asString ( new java.io.FileInputStream ( path ) ) ; } catch ( java.io.FileNotFoundException e ) { return null ; } catch ( java.io.IOException e ) { throw new java.io.IOException ( ( "Error reading " + path ) , e ) ; } }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) . to ( com.google.gerrit.server.index.change.ReindexAfterRefUpdate.class ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; }
private static java.lang.String trim ( java.lang.String ref ) { if ( ref.startsWith ( "refs/changes/" ) ) { int s1 = ref.lastIndexOf ( '/' ) ; if ( s1 > 0 ) { int s2 = ref.lastIndexOf ( '/' , ( s1 - 1 ) ) ; if ( s2 > 0 ) { return ref.substring ( ( s2 + 1 ) ) ; } } } return null ; }
private void cleanUpReferences ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx , com.google.gerrit.reviewdb.client.Change.Id id , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { accountPatchReviewStore.get ( ) . clearReviewed ( ps.getId ( ) ) ; } starredChangesUtil.unstarAll ( ctx.getChange ( ) . getProject ( ) , id ) ; }
public void approvalTombstoneCommitFormat ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( c , changeOwner ) ; update.removeApproval ( "Code-Review" ) ; update.commit ( ) ; assertBodyEquals ( ( "Update patch set 1\n" + ( ( "\n" + "Patch-set: 1\n" ) + "Label: -Code-Review\n" ) ) , update.getResult ( ) ) ; }
public void findOkRecord ( ) { java.util.Collection < com.google.gerrit.common.data.SubmitRecord > submitRecords = new java.util.ArrayList < > ( ) ; submitRecords.add ( com.google.gerrit.common.data.SubmitRecordTest.NOT_READY_RECORD ) ; submitRecords.add ( com.google.gerrit.common.data.SubmitRecordTest.OK_RECORD ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.common.data.SubmitRecord.findOkRecord ( submitRecords ) . isPresent ( ) ) . isTrue ( ) ; }
public com.google.gerrit.server.change.ReviewerResource parse ( com.google.gerrit.server.change.ChangeResource change , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.lang.Exception { if ( id.matches ( "^[0-9]+$" ) ) { return new com.google.gerrit.server.change.ReviewerResource ( change , Account.Id.parse ( id ) ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public com.google.gerrit.reviewdb.client.Change createChange ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { change = new com.google.gerrit.reviewdb.client.Change ( com.google.gerrit.server.change.ChangeInserter.getChangeKey ( commit ) , changeId , ctx.getUser ( ) . getAccountId ( ) , new com.google.gerrit.reviewdb.client.Branch.NameKey ( ctx.getProject ( ) , refName ) , ctx.getWhen ( ) ) ; change.setStatus ( com.google.common.base.MoreObjects.firstNonNull ( status , Change.Status.NEW ) ) ; change.setTopic ( topic ) ; return change ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { if ( ( changeMessage ) == null ) { return ; } emailReviewers ( ctx.getProject ( ) , currChange , del , changeMessage ) ; reviewerDeleted.fire ( currChange , currPs , reviewer , ctx.getUser ( ) . asIdentifiedUser ( ) . getAccount ( ) , changeMessage.getMessage ( ) , newApprovals , oldApprovals , ctx.getWhen ( ) ) ; }
private static void validateDiffMode ( com.googlesource.gerrit.plugins.xdocs.XDocServlet.ResourceKey key , com.googlesource.gerrit.plugins.xdocs.formatter.Formatters.FormatterProvider formatter , eu.medsea.mimeutil.MimeType mimeType ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ( ( key.diffMode ) != ( DiffMode.NO_DIFF ) ) && ( ( ( key.revisionB ) == null ) || ( ( formatter == null ) && ( com.googlesource.gerrit.plugins.xdocs.XDocServlet.isImage ( mimeType ) ) ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } }
public synchronized void removeWriteIndex ( int version ) { int removeIndex = - 1 ; for ( int i = 0 ; i < ( writeIndexes.size ( ) ) ; i ++ ) { if ( ( writeIndexes.get ( i ) . getSchema ( ) . getVersion ( ) ) == version ) { removeIndex = i ; break ; } } if ( removeIndex >= 0 ) { writeIndexes.remove ( removeIndex ) ; } }
public void getDiffPreferences ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( ( ( "/accounts/" + ( admin.email ) ) + "/preferences.diff" ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo diffPreferences = newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo.class ) ; com.google.gerrit.acceptance.rest.account.GetDiffPreferencesIT.assertDiffPreferences ( new com.google.gerrit.reviewdb.client.AccountDiffPreference ( admin.id ) , diffPreferences ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { final com.google.gerrit.server.CurrentUser user = session.getCurrentUser ( ) ; if ( user.isIdentifiedUser ( ) ) { com.google.gerrit.server.IdentifiedUser identifiedUser = userFactory.create ( ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) ) ; identifiedUser.setAccessPath ( user.getAccessPath ( ) ) ; return identifiedUser ; } return user ; }
private static void formatDiff ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree , org.eclipse.jgit.treewalk.AbstractTreeIterator newTree , java.lang.String path , org.eclipse.jgit.diff.DiffFormatter diff ) throws java.io.IOException { try { if ( ! ( path.equals ( "" ) ) ) { diff.setPathFilter ( org.eclipse.jgit.treewalk.filter.PathFilter.create ( path ) ) ; } diff.setRepository ( repo ) ; diff.setDetectRenames ( true ) ; diff.format ( oldTree , newTree ) ; } finally { diff.release ( ) ; } }
private org.apache.solr.common.SolrInputDocument toDocument ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { org.apache.solr.common.SolrInputDocument result = new org.apache.solr.common.SolrInputDocument ( ) ; for ( com.google.gerrit.server.index.Schema.Values < com.google.gerrit.server.query.change.ChangeData > values : schema.buildFields ( cd , fillArgs ) ) { add ( result , values ) ; } return result ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
public void setUp ( ) throws java.lang.Exception { site = new com.google.gerrit.server.config.SitePaths ( com.google.gerrit.testutil.TempFileUtil.createTempDirectory ( ) . toPath ( ) ) ; site.resolve ( "git" ) . toFile ( ) . mkdir ( ) ; cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setString ( "gerrit" , null , "basePath" , "git" ) ; repoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; repoManager.start ( ) ; }
public void testCommitDashV ( ) throws java.lang.Exception { assertEquals ( ( ( ( "a\n" + ( "\n" + "Change-Id: I7fc3876fee63c766a2063df97fbe04a2dddd8d7c\n" ) ) + ( SOB1 ) ) + ( SOB2 ) ) , call ( ( ( ( ( ( ( ( ( "a\n" + "\n" ) + ( SOB1 ) ) + ( SOB2 ) ) + "\n" ) + "# on branch master\n" ) + "diff --git a/src b/src\n" ) + "new file mode 100644\n" ) + "index 0000000..c78b7f0\n" ) ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( mySubname.equals ( subname ) ) { display ( result ) ; } }
private void createErrorBox ( ) { errorLine = new com.google.gwt.user.client.ui.FlowPanel ( ) ; errorLine.setVisible ( false ) ; errorMsg = new com.google.gwt.user.client.ui.InlineLabel ( OpenIdUtil.C.notSupported ( ) ) ; errorLine.setStyleName ( "gerrit-OpenID-errorline" ) ; errorLine.add ( errorMsg ) ; formBody.add ( errorLine ) ; }
public void abandonWipChangeNotifyAll ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . notTo ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
private Account.Id toAccountId ( final java.lang.String nameOrEmail ) throws com.google.gerrit.common.errors.NoSuchAccountException , com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account a = accountResolver.findByNameOrEmail ( nameOrEmail ) ; if ( a == null ) { throw new com.google.gerrit.common.errors.NoSuchAccountException ( ( ( "\"" + nameOrEmail ) + "\" is not registered" ) ) ; } return a.getId ( ) ; }
public java.lang.String getComment ( ) { final java.lang.String s = getSshPublicKey ( ) ; if ( ( s == null ) || ( ( s.length ( ) ) == 0 ) ) { return "" ; } final java.lang.String [ ] parts = s.split ( " " ) ; if ( ( parts.length ) < 3 ) { return "" ; } return parts [ 3 ] ; }
public void testListTables ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { assertTrue ( dialect.listTables ( db ) . isEmpty ( ) ) ; execute ( "CREATE TABLE cnt (s SERIAL)" ) ; execute ( "CREATE TABLE foo (cnt INT)" ) ; java.util.Set < java.lang.String > s = dialect.listTables ( db ) ; assertEquals ( 1 , s.size ( ) ) ; assertFalse ( s.contains ( "cnt" ) ) ; assertTrue ( s.contains ( "foo" ) ) ; }
private java.util.List < java.lang.String > getLinesOfComment ( com.google.gerrit.reviewdb.client.Comment comment , com.google.gerrit.server.patch.PatchFile fileData ) { java.util.List < java.lang.String > lines = new java.util.ArrayList < > ( ) ; if ( ( comment.range ) == null ) { try { lines.add ( fileData.getLine ( comment.side , comment.lineNbr ) ) ; } catch ( java.lang.Throwable e ) { lines.add ( "" ) ; } } else { lines.addAll ( getLinesByRange ( comment.range , fileData , comment.side ) ) ; } return lines ; }
private void columnDelta1 ( com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb , com.google.gerrit.client.diff.FileInfo info ) { sb.openTd ( ) . setStyleName ( com.google.gerrit.client.change.FileTable.R.css ( ) . deltaColumn1 ( ) ) ; if ( ( ! ( Patch.COMMIT_MSG.equals ( info.path ( ) ) ) ) && ( ! ( info.binary ( ) ) ) ) { sb.append ( ( ( info.lines_inserted ( ) ) - ( info.lines_deleted ( ) ) ) ) ; } sb.closeTd ( ) ; }
private com.google.gerrit.server.notedb.ChangeNotes getNotes ( com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db.get ( ) . changes ( ) . get ( changeId ) ; if ( c == null ) { throw com.google.gerrit.sshd.commands.PatchSetParser.error ( ( ( "\"" + changeId ) + "\" no such change" ) ) ; } return notesFactory.create ( db.get ( ) , c ) ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; install ( com.google.gerrit.server.git.SearchingChangeCacheImpl.module ( ) ) ; install ( new com.google.gerrit.server.notedb.NoteDbModule ( ) ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) . to ( com.google.gerrit.server.index.change.ReindexAfterUpdate.class ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; }
public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { if ( ( format ) == ( com.google.gerrit.server.OutputFormat.TEXT ) ) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream ( ) ; display ( buf ) ; return com.google.gerrit.extensions.restapi.BinaryResult.create ( buf.toByteArray ( ) ) . setContentType ( "text/plain" ) . setCharacterEncoding ( "UTF-8" ) ; } format = com.google.gerrit.server.OutputFormat.JSON ; return display ( null ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( RebaseChangeHandler.Factory.class ) ; factory ( ChangeDetailFactory.Factory.class ) ; factory ( IncludedInDetailFactory.Factory.class ) ; factory ( PatchSetDetailFactory.Factory.class ) ; factory ( PatchSetPublishDetailFactory.Factory.class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class ) ; rpc ( com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class ) ; }
private org.eclipse.jgit.revwalk.RevCommit parseCommit ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { if ( id instanceof org.eclipse.jgit.revwalk.RevCommit ) { return ( ( org.eclipse.jgit.revwalk.RevCommit ) ( id ) ) ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit ( id ) ; walk.parseBody ( commit ) ; return commit ; } finally { walk.release ( ) ; } }
public final void scrollToLine ( int line ) { int height = getHeight ( ) ; if ( ( lineAtHeight ( ( height - 20 ) ) ) < line ) { scrollToY ( ( ( heightAtLine ( line , "local" ) ) - ( 0.5 * height ) ) ) ; } setCursor ( net.codemirror.lib.Pos.create ( line ) ) ; }
protected void startThread ( final com.google.gerrit.sshd.BaseCommand.CommandRunnable thunk ) { final com.google.gerrit.sshd.BaseCommand.TaskThunk tt = new com.google.gerrit.sshd.BaseCommand.TaskThunk ( thunk ) ; if ( isAdminHighPriorityCommand ( ) ) { new java.lang.Thread ( tt , tt.toString ( ) ) . start ( ) ; } else { task.set ( executor.submit ( tt ) ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless , slave ) ) ; if ( test ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName.class ) . toInstance ( com.google.gerrit.server.securestore.DefaultSecureStore.class . getName ( ) ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; } }
protected void run ( ) throws com.google.gerrit.sshd.commands.Failure { try { checkPermission ( ) ; final com.google.gerrit.sshd.commands.QueryShell shell = factory.create ( in , out ) ; shell.setOutputFormat ( format ) ; if ( ( query ) != null ) { shell.execute ( query ) ; } else { shell.run ( ) ; } } catch ( com.google.gerrit.common.errors.PermissionDeniedException err ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( ( "fatal: " + ( err.getMessage ( ) ) ) ) ; } }
private void reply ( org.eclipse.jetty.server.HttpConnection conn , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { byte [ ] msg = com.google.gerrit.pgm.http.jetty.HiddenErrorHandler.message ( conn ) ; res.setHeader ( HttpHeader.CONTENT_TYPE.asString ( ) , "text/plain; charset=ISO-8859-1" ) ; res.setContentLength ( msg.length ) ; try { com.google.gwtexpui.server.CacheHeaders.setNotCacheable ( res ) ; } finally { javax.servlet.ServletOutputStream out = res.getOutputStream ( ) ; try { out.write ( msg ) ; } finally { out.close ( ) ; } } }
public synchronized < F1 , F2 , F3 > com.google.gerrit.metrics.Timer3 < F1 , F2 , F3 > newTimer ( java.lang.String name , com.google.gerrit.metrics.Description desc , com.google.gerrit.metrics.Field < F1 > field1 , com.google.gerrit.metrics.Field < F2 > field2 , com.google.gerrit.metrics.Field < F3 > field3 ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkTimerDescription ( desc ) ; com.google.gerrit.metrics.dropwizard.TimerImplN m = new com.google.gerrit.metrics.dropwizard.TimerImplN ( this , name , desc , field1 , field2 , field3 ) ; define ( name , desc ) ; bucketed.put ( name , m ) ; return m.timer3 ( ) ; }
public static com.google.gitiles.Revision peel ( java.lang.String name , org.eclipse.jgit.lib.ObjectId id , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject obj = walk.parseAny ( id ) ; org.eclipse.jgit.revwalk.RevObject peeled = walk.peel ( obj ) ; return new com.google.gitiles.Revision ( name , obj , obj.getType ( ) , peeled , peeled.getType ( ) ) ; }
private java.lang.String url ( ) { if ( ( info.hasChangeNumber ( ) ) && ( info.hasRevisionNumber ( ) ) ) { return "#" + ( com.google.gerrit.common.PageLinks.toChange ( info.patchSetId ( ) ) ) ; } com.google.gerrit.client.info.GitwebInfo gw = com.google.gerrit.client.Gerrit.info ( ) . gitweb ( ) ; if ( ( gw != null ) && ( ( project ) != null ) ) { return gw.toRevision ( project , info.commit ( ) . commit ( ) ) ; } return null ; }
public void inheritRead_AppendWithDenyOfRef ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local ) ; assertCanAccess ( u ) ; assertCanRead ( "refs/master" , u ) ; assertCanRead ( "refs/tags/foobar" , u ) ; assertCanRead ( "refs/heads/master" , u ) ; }
public java.io.Reader getReader ( ) throws java.io.IOException , java.lang.IllegalStateException { java.io.Reader reader = new java.io.InputStreamReader ( response.getEntity ( ) . getContent ( ) ) ; reader.skip ( JSON_MAGIC.length ) ; return reader ; }
public java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > byChange ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration.readChanges ( ) ) ) { return com.google.gerrit.server.ChangeMessagesUtil.sortChangeMessages ( db.changeMessages ( ) . byChange ( notes.getChangeId ( ) ) ) ; } else { return com.google.gerrit.server.ChangeMessagesUtil.sortChangeMessages ( notes.load ( ) . getChangeMessages ( ) . values ( ) ) ; } }
private void logError ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.MergeOp.log.isErrorEnabled ( ) ) { if ( t != null ) { com.google.gerrit.server.git.MergeOp.log.error ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) , t ) ; } else { com.google.gerrit.server.git.MergeOp.log.error ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) ) ; } } }
public void testTimeAltersId ( ) throws java.lang.Exception { assertEquals ( ( "a\n" + ( "\n" + "Change-Id: I7fc3876fee63c766a2063df97fbe04a2dddd8d7c\n" ) ) , call ( "a\n" ) ) ; tick ( ) ; assertEquals ( ( "a\n" + ( "\n" + "Change-Id: I3251906b99dda598a58a6346d8126237ee1ea800\n" ) ) , call ( "a\n" ) ) ; tick ( ) ; assertEquals ( ( "a\n" + ( "\n" + "Change-Id: I69adf9208d828f41a3d7e41afbca63aff37c0c5c\n" ) ) , call ( "a\n" ) ) ; }
private com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute getPatchSetAttribute ( final com.google.gerrit.reviewdb.PatchSet patchSet ) { com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute p = new com.google.gerrit.common.ChangeHookRunner.PatchSetAttribute ( ) ; p.revision = patchSet.getRevision ( ) . get ( ) ; p.number = java.lang.Integer.toString ( patchSet.getPatchSetId ( ) ) ; return p ; }
public void dateOneOnly ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap < > ( ) ; java.lang.String oldDate = "1990-10-10 10:00:00" ; params.put ( "t1" , oldDate ) ; java.lang.String query = com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( params ) ; org.junit.Assert.assertTrue ( query.contains ( java.lang.String.format ( "'%s' and " , oldDate ) ) ) ; }
private static boolean onSupportedJavaVersion ( ) { final java.lang.String version = java.lang.System.getProperty ( "java.specification.version" ) ; if ( 1.7 <= ( Main.parse ( version ) ) ) { return true ; } else { java.lang.System.err.println ( "fatal: Gerrit Code Review requires Java 7 or later" ) ; java.lang.System.err.println ( ( ( " (trying to run on Java " + version ) + ")" ) ) ; return false ; } }
public void start ( ) { queue.start ( ) ; if ( ( ( srvInfo.getState ( ) ) == ( ServerInformation.State.STARTUP ) ) && ( config.isReplicateAllOnPluginStart ( ) ) ) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState ( new com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing ( eventDispatcher , database ) ) ; pushAllFuture.set ( pushAll.create ( null , com.googlesource.gerrit.plugins.replication.ReplicationFilter.all ( ) , state ) . schedule ( 30 , java.util.concurrent.TimeUnit.SECONDS ) ) ; } }
void onDelete ( int idx ) { java.lang.String path = list.get ( idx ) . path ( ) ; com.google.gerrit.client.changes.ChangeEditApi.delete ( curr.getParentKey ( ) . get ( ) , path , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( curr.getParentKey ( ) ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { } } ) ; }
private void savePatchSet ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { if ( ! ( patchSet.isDraft ( ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( "Patch set is not a draft" ) ; } psUtil.publish ( ctx.getDb ( ) , ctx.getUpdate ( psId ) , patchSet ) ; if ( ! ( wasDraftChange ) ) { ctx.saveChange ( ) ; } }
public void removePublisher ( final com.googlesource.gerrit.plugins.rabbitmq.message.Publisher publisher ) { HEAD ( f7e22d ) ; com.googlesource.gerrit.plugins.rabbitmq.worker.Remove obsolete ; com.googlesource.gerrit.plugins.rabbitmq.worker.manifest entries ; com.google.gerrit.extensions.registration.RegistrationHandle registration = eventListenerRegistrations.remove ( publisher ) ; if ( registration != null ) { registration.remove ( ) ; } source.removeEventListener ( publisher.getEventListener ( ) ) ; }
public final void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { if ( isAttached ( ) ) { if ( ( ( result.length ( ) ) == 1 ) && ( com.google.gerrit.client.changes.QueryScreen.isSingleQuery ( query ) ) ) { com.google.gerrit.client.changes.ChangeInfo c = result.get ( 0 ) ; com.google.gerrit.reviewdb.client.Change.Id id = c.legacy_id ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) , new com.google.gerrit.client.changes.ChangeScreen ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } }
public void onLoad ( ) { super . onLoad ( ) ; Util.ACCOUNT_SEC.validateEmail ( magicToken , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gwtjsonrpc.client.VoidResult > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gwtjsonrpc.client.VoidResult result ) { } @ java.lang.Override protected void postDisplay ( ) { com.google.gwt.user.client.History.newItem ( Link.SETTINGS_CONTACT , true ) ; } } ) ; }
public java.lang.String apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.googlesource.gerrit.plugins.cookbook.HelloProjectAction.Input input ) { final java.lang.String greeting = ( input.french ) ? "Bonjour" : "Hello" ; return java.lang.String.format ( "%s %s from project %s!" , greeting , ( com.google.common.base.Strings.isNullOrEmpty ( input.message ) ? com.google.common.base.MoreObjects.firstNonNull ( user.get ( ) . getUserName ( ) , "world" ) : input.message ) , rsrc.getName ( ) ) ; }
private boolean isRevisionOutOfDate ( ) { try ( org.eclipse.jgit.lib.Repository git = gitMgr.openRepository ( getProject ( ) . getNameKey ( ) ) ) { org.eclipse.jgit.lib.Ref ref = git.getRefDatabase ( ) . exactRef ( RefNames.REFS_CONFIG ) ; if ( ( ref == null ) || ( ( ref.getObjectId ( ) ) == null ) ) { return true ; } return ! ( ref.getObjectId ( ) . equals ( config.getRevision ( ) ) ) ; } catch ( java.io.IOException gone ) { return true ; } }
private void addExtensionPoint ( com.google.gerrit.client.GerritUiExtensionPoint extensionPoint , com.google.gwt.user.client.ui.Panel p , com.google.gerrit.client.info.ChangeInfo change , com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev ) { com.google.gerrit.client.api.ExtensionPanel extensionPanel = new com.google.gerrit.client.api.ExtensionPanel ( extensionPoint ) ; extensionPanel.putObject ( GerritUiExtensionPoint.Key.CHANGE_INFO , change ) ; extensionPanel.putObject ( GerritUiExtensionPoint.Key.REVISION_INFO , rev ) ; p.add ( extensionPanel ) ; }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) ; if ( schema.hasField ( ChangeField.EXACT_COMMIT ) ) { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commitsOnBranchNotMerged ( branch , com.google.gerrit.server.query.change.InternalChangeQuery.commits ( schema , hashes ) ) ) ; } else { return byCommitsOnBranchNotMerged ( schema , branch , hashes , indexConfig.maxPrefixTerms ( ) ) ; } }
public void display ( final com.google.gerrit.common.data.ChangeDetail detail ) { clear ( ) ; final com.google.gerrit.reviewdb.PatchSet currps = detail.getCurrentPatchSet ( ) ; currentPatchSetId = currps.getPatchSetId ( ) ; for ( final com.google.gerrit.reviewdb.PatchSet ps : detail.getPatchSets ( ) ) { if ( ps == currps ) { add ( new com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel ( parent , detail , detail.getCurrentPatchSetDetail ( ) ) ) ; } else { add ( new com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel ( parent , detail , ps ) ) ; } } }
private void display ( com.google.gerrit.reviewdb.client.AccountExternalId id ) { java.lang.String user ; java.lang.String pass ; if ( id != null ) { user = id.getSchemeRest ( ) ; pass = id.getPassword ( ) ; } else { user = null ; pass = null ; } this . id = id ; com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( user ) ; password.setText ( ( pass != null ? pass : "" ) ) ; password.setVisible ( ( pass != null ) ) ; enableUI ( true ) ; }
public java.util.Map < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Set < com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType > > getProjectWatches ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = repoManager.openRepository ( allUsersName ) ; com.google.gerrit.server.account.WatchConfig watchConfig = new com.google.gerrit.server.account.WatchConfig ( accountId ) ) { watchConfig.load ( git ) ; return watchConfig.getProjectWatches ( ) ; } }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource root , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.UnsupportedEncodingException { java.util.List < com.google.gerrit.reviewdb.client.Change > changes = findChanges ( id.encoded ( ) ) ; if ( ( changes.size ( ) ) != 1 ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } com.google.gerrit.server.project.ChangeControl control ; try { control = changeControlFactory.validateFor ( changes.get ( 0 ) ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.change.ChangeResource ( control ) ; }
public com.google.gerrit.extensions.api.projects.BranchApi create ( com.google.gerrit.extensions.api.projects.BranchInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.project.CreateBranch.Input input = new com.google.gerrit.server.project.CreateBranch.Input ( ) ; input.ref = ref ; input.revision = in.revision ; createBranchFactory.create ( ref ) . apply ( project , input ) ; return this ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot create branch" , e ) ; } }
private static void assertNoDiffs ( com.google.gerrit.server.notedb.ChangeBundle a , com.google.gerrit.server.notedb.ChangeBundle b ) { com.google.common.truth.Truth.assertThat ( a.differencesFrom ( b ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( b.differencesFrom ( a ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( a ) . isEqualTo ( b ) ; com.google.common.truth.Truth.assertThat ( b ) . isEqualTo ( a ) ; com.google.common.truth.Truth.assertThat ( a.hashCode ( ) ) . isEqualTo ( b.hashCode ( ) ) ; }
public void byProjectPrefix ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo1 = createProject ( "repo1" ) ; org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo2 = createProject ( "repo2" ) ; com.google.gerrit.reviewdb.client.Change change1 = insert ( newChange ( repo1 , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change change2 = insert ( newChange ( repo2 , null , null , null , null ) ) ; assertQuery ( "projects:foo" ) ; assertQuery ( "projects:repo1" , change1 ) ; assertQuery ( "projects:repo2" , change2 ) ; assertQuery ( "projects:repo" , change2 , change1 ) ; }
public java.lang.String toRevision ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.PatchSet ps ) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString ( type.getRevision ( ) ) ; final java.util.Map < java.lang.String , java.lang.String > p = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; p.put ( "project" , encode ( project.get ( ) ) ) ; p.put ( "commit" , encode ( ps.getRevision ( ) . get ( ) ) ) ; return ( baseUrl ) + ( pattern.replace ( p ) ) ; }
public void badRequestCausedByCacheNotFound ( ) throws java.lang.Exception { java.lang.String pluginName = "somePlugin" ; java.lang.String cacheName = "nonexistingCache" ; configureMocksFor ( pluginName , cacheName ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException e = new com.ericsson.gerrit.plugins.highavailability.forwarder.CacheNotFoundException ( pluginName , cacheName ) ; org.mockito.Mockito.doThrow ( e ) . when ( evictCacheMock ) . evict ( org.mockito.ArgumentMatchers.eq ( pluginName ) , org.mockito.ArgumentMatchers.eq ( cacheName ) , org.mockito.ArgumentMatchers.any ( ) ) ; servlet.doPost ( requestMock , responseMock ) ; org.mockito.Mockito.verify ( responseMock ) . sendError ( javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST , e.getMessage ( ) ) ; }
public void testProjectCreation ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectA = new com.google.gerrit.reviewdb.client.Project.NameKey ( "projectA" ) ; repoManager.createRepository ( projectA ) ; com.google.common.truth.Truth.assertThat ( repoManager.openRepository ( projectA ) ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( repoManager.list ( ) ) ) ) . containsExactly ( projectA ) ; }
private static byte [ ] readWholeEntry ( com.google.gerrit.server.plugins.PluginContentScanner scanner , com.google.gerrit.server.plugins.PluginEntry entry ) throws java.io.IOException { byte [ ] data = new byte [ entry.getSize ( ) . get ( ) . intValue ( ) ] ; java.io.InputStream in = scanner.getInputStream ( entry ) ; try { org.eclipse.jgit.util.IO.readFully ( in , data , 0 , data.length ) ; } finally { in.close ( ) ; } return data ; }
public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { com.google.gerrit.client.admin.ProjectBranchesScreen.Query q = new com.google.gerrit.client.admin.ProjectBranchesScreen.Query ( filterTxt.getValue ( ) ) ; if ( match.equals ( q.qMatch ) ) { q.start ( start ) ; } else if ( ( query ) == null ) { q.run ( ) ; query = q ; } }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.account.AccountCapabilities > cb , java.lang.String ... filter ) { com.google.gerrit.client.rpc.RestApi api = new com.google.gerrit.client.rpc.RestApi ( "/accounts/self/capabilities" ) ; for ( java.lang.String name : filter ) { api.addParameter ( "q" , name ) ; } api.send ( cb ) ; }
protected void saveProjectConfig ( com.google.gerrit.reviewdb.client.Project.NameKey p , com.google.gerrit.server.git.ProjectConfig cfg ) throws java.lang.Exception { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create ( p ) ; try { cfg.commit ( md ) ; } finally { md.close ( ) ; } projectCache.evict ( cfg.getProject ( ) ) ; }
public com.google.gwtorm.client.OrmException convertError ( final java.lang.String op , final java.lang.String entity , final java.sql.SQLException err ) { if ( ( ( err.getCause ( ) ) == null ) && ( ( err.getNextException ( ) ) != null ) ) { err.initCause ( err.getNextException ( ) ) ; } return new com.google.gwtorm.client.OrmException ( ( ( op + " failure on " ) + entity ) , err ) ; }
private java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > scanDraftComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { java.util.Map < java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > drafts = com.google.common.collect.Maps.newHashMap ( ) ; for ( com.google.gerrit.reviewdb.client.PatchLineComment c : db.patchComments ( ) . draftByPatchSetAuthor ( rsrc.getPatchSet ( ) . getId ( ) , rsrc.getAuthorId ( ) ) ) { drafts.put ( c.getKey ( ) . get ( ) , c ) ; } return drafts ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.diff.FileInfo > m ) { files.set ( ( base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , base._number ( ) ) : null ) , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , rev._number ( ) , rev.edit ( ) ) , style , editMessage , reply ) ; files.setValue ( m , myLastReply , comments.get ( 0 ) , drafts.get ( 0 ) , fileTableMode ) ; }
protected void assertApproved ( java.lang.String changeId ) throws java.io.IOException { com.google.gerrit.extensions.common.ChangeInfo c = getChange ( changeId , com.google.gerrit.extensions.client.ListChangesOption.DETAILED_LABELS ) ; com.google.gerrit.extensions.common.LabelInfo cr = c.labels.get ( "Code-Review" ) ; com.google.common.truth.Truth.assertThat ( cr.all ) . hasSize ( 1 ) ; com.google.common.truth.Truth.assertThat ( cr.all.get ( 0 ) . value.intValue ( ) ) . isEqualTo ( 2 ) ; com.google.common.truth.Truth.assertThat ( new com.google.gerrit.reviewdb.client.Account.Id ( cr.all.get ( 0 ) . _accountId ) ) . isEqualTo ( admin.getId ( ) ) ; }
private org.eclipse.jgit.dircache.DirCacheEntry file ( final java.lang.String name ) throws java.io.IOException { final org.eclipse.jgit.lib.ObjectInserter oi = repository.newObjectInserter ( ) ; try { final org.eclipse.jgit.dircache.DirCacheEntry e = new org.eclipse.jgit.dircache.DirCacheEntry ( name ) ; e.setFileMode ( FileMode.REGULAR_FILE ) ; e.setObjectId ( oi.insert ( Constants.OBJ_BLOB , org.eclipse.jgit.lib.Constants.encode ( name ) ) ) ; oi.flush ( ) ; return e ; } finally { oi.release ( ) ; } }
private void serveGwtUi ( ) { serve ( "/gerrit_ui/*" ) . with ( com.google.inject.Key.get ( javax.servlet.http.HttpServlet.class , com.google.inject.name.Names.named ( com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET ) ) ) ; if ( ( warFs ) == null ) { filter ( "/" ) . through ( new com.google.gerrit.httpd.raw.RecompileGwtUiFilter ( buckOut , unpackedWar ) ) ; } }
com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo generateAuthInfo ( com.google.gerrit.server.CurrentUser user , java.lang.String project , java.lang.String operation ) { com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken token = new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.LfsSshAuthToken ( user.getUserName ( ) , project , operation , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo ( processor.serialize ( token ) , token.expiresAt ) ; }
public void setUp ( ) throws java.lang.Exception { gApiMock = org.mockito.Mockito.mock ( com.google.gerrit.extensions.api.GerritApi.class , Mockito.RETURNS_DEEP_STUBS ) ; configMock = org.mockito.Mockito.mock ( com.googlesource.gerrit.plugins.automerger.ConfigLoader.class ) ; org.mockito.Mockito.when ( configMock.getCodeReviewLabel ( ) ) . thenReturn ( "Code-Review" ) ; ds = new com.googlesource.gerrit.plugins.automerger.DownstreamCreator ( gApiMock , configMock ) ; }
public java.util.Enumeration < com.google.gerrit.server.plugins.PluginEntry > entries ( ) { return java.util.Collections.enumeration ( com.google.common.collect.Lists.transform ( java.util.Collections.list ( jarFile.entries ( ) ) , new com.google.common.base.Function < java.util.jar.JarEntry , com.google.gerrit.server.plugins.PluginEntry > ( ) { @ java.lang.Override public com.google.gerrit.server.plugins.PluginEntry apply ( java.util.jar.JarEntry jarEntry ) { try { return resourceOf ( jarEntry ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalArgumentException ( ( ( "Cannot convert jar entry " + jarEntry ) + " to a resource" ) , e ) ; } } } ) ) ; }
public void update ( ) throws com.google.gerrit.server.git.SubmoduleException { try { schema = schemaFactory.open ( ) ; updateSubmoduleSubscriptions ( ) ; updateSuperProjects ( destBranch , mergeTip.getId ( ) . toObjectId ( ) , null ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.server.git.SubmoduleException ( "Cannot open database" , e ) ; } finally { if ( ( schema ) != null ) { schema.close ( ) ; schema = null ; } } }
public void testUnblockForceEditTopicName ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.ANONYMOUS , "refs/heads/*" ) . setBlock ( ) ; com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertTrue ( "u can edit topic name" , u.controlForRef ( "refs/heads/master" ) . canForceEditTopicName ( ) ) ; }
public void testUsernamePatternWithRegex ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , "^refs/sb/${username}/heads/.*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , "d.v" , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util.user ( local , "dev" , com.google.gerrit.server.project.Util.DEVS ) ; assertFalse ( "u can't read" , u.controlForRef ( "refs/sb/dev/heads/foobar" ) . isVisible ( ) ) ; assertTrue ( "d can read" , d.controlForRef ( "refs/sb/dev/heads/foobar" ) . isVisible ( ) ) ; }
protected java.util.SortedSet < java.lang.String > cacheNames ( ) { final java.util.SortedSet < java.lang.String > names = new java.util.TreeSet < java.lang.String > ( ) ; names.add ( "groups" ) ; names.add ( "projects" ) ; names.add ( "accounts" ) ; for ( final net.sf.ehcache.Ehcache c : getAllCaches ( ) ) { names.add ( c.getName ( ) ) ; } return names ; }
public static void zipFile ( java.io.File file , java.lang.String name , java.util.zip.ZipOutputStream zip ) throws java.io.IOException { zip.putNextEntry ( new java.util.zip.ZipEntry ( name ) ) ; java.io.FileInputStream input = new java.io.FileInputStream ( file ) ; com.google.common.io.ByteStreams.copy ( input , zip ) ; input.close ( ) ; zip.closeEntry ( ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > toParentInfos ( final org.eclipse.jgit.revwalk.RevCommit [ ] parents , final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { java.util.List < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > pInfos = new java.util.ArrayList < com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo > ( parents.length ) ; for ( org.eclipse.jgit.revwalk.RevCommit parent : parents ) { walk.parseBody ( parent ) ; com.google.gerrit.reviewdb.client.RevId rev = new com.google.gerrit.reviewdb.client.RevId ( parent.getId ( ) . name ( ) ) ; java.lang.String msg = parent.getShortMessage ( ) ; pInfos.add ( new com.google.gerrit.reviewdb.client.PatchSetInfo.ParentInfo ( rev , msg ) ) ; } return pInfos ; }
public int compare ( com.google.gerrit.server.query.change.ChangeData a , com.google.gerrit.server.query.change.ChangeData b ) { try { return a.change ( db ) . getSortKey ( ) . compareTo ( b.change ( db ) . getSortKey ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return 0 ; } }
private void applyReview ( com.google.gerrit.reviewdb.client.PatchSet patchSet , final com.google.gerrit.extensions.api.changes.ReviewInput review ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.sshd.commands.line arguments ; com.google.gerrit.sshd.commands.task name ; com.google.gerrit.sshd.commands.and ssh_log ; gApi.changes ( ) . id ( patchSet.getId ( ) . getParentKey ( ) . get ( ) ) . revision ( patchSet.getRevision ( ) . get ( ) ) . review ( review ) ; }
public void onUnload ( ) { if ( ( regNavigation ) != null ) { regNavigation.removeHandler ( ) ; regNavigation = null ; } if ( ( regAction ) != null ) { regAction.removeHandler ( ) ; regAction = null ; } super . onUnload ( ) ; }
public boolean updateChange ( com.google.gerrit.server.update.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange ( ) ; com.google.gerrit.server.notedb.ChangeUpdate update = ctx.getUpdate ( change.currentPatchSetId ( ) ) ; change.setPrivate ( isPrivate ) ; change.setLastUpdatedOn ( ctx.getWhen ( ) ) ; update.setPrivate ( isPrivate ) ; addMessage ( ctx , update ) ; return true ; }
public static void cherrypick ( int id , java.lang.String commit , java.lang.String destination , java.lang.String message , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.CherryPickInput cherryPickInput = com.google.gerrit.client.changes.ChangeApi.CherryPickInput.create ( ) ; cherryPickInput.setMessage ( message ) ; cherryPickInput.setDestination ( destination ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "cherrypick" ) . post ( cherryPickInput , cb ) ; }
private void init ( ) { android.widget.TextView commitMsg = ( ( android.widget.TextView ) ( v ( R.id.commitMessage ) ) ) ; commitMsg.setLinksClickable ( true ) ; v ( R.id.reviewButton ) . setOnClickListener ( new android.view.View.OnClickListener ( ) { @ java.lang.Override public void onClick ( android.view.View v ) { display ( com.google.reviewit.UnifiedDiffFragment.class ) ; } } ) ; com.google.reviewit.util.WidgetUtil.underline ( tv ( R.id.showMore ) ) ; com.google.reviewit.util.WidgetUtil.underline ( tv ( R.id.showAll ) ) ; }
public void testMultipleIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "file:a OR foo:b OR file:c OR foo:d" ) ; com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > out = rewrite ( in ) ; assertSame ( com.google.gerrit.server.query.change.OrSource.class , out.getClass ( ) ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( query ( com.google.gerrit.server.query.Predicate.or ( in.getChild ( 0 ) , in.getChild ( 2 ) ) ) , in.getChild ( 1 ) , in.getChild ( 3 ) ) , out.getChildren ( ) ) ; }
private static void markUninteresting ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { if ( id == null ) { return ; } try { walk.markUninteresting ( walk.parseCommit ( id ) ) ; } catch ( org.eclipse.jgit.errors.IncorrectObjectTypeException e ) { } catch ( org.eclipse.jgit.errors.MissingObjectException e ) { } }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { done.setEnabled ( true ) ; setOpen ( false ) ; com.google.gerrit.client.diff.DraftBox box = getCommentManager ( ) . addDraftBox ( result , getCm ( ) . side ( ) ) ; registerReplyBox ( box ) ; if ( ! ( getCommentInfo ( ) . has_line ( ) ) ) { getCommentManager ( ) . addFileCommentBox ( box ) ; } }
private void logout ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain , javax.servlet.http.HttpServletRequest httpRequest ) throws java.io.IOException , javax.servlet.ServletException { getGitHubLogin ( request ) . logout ( ) ; com.googlesource.gerrit.plugins.github.oauth.GitHubLogoutServletResponse bufferedResponse = new com.googlesource.gerrit.plugins.github.oauth.GitHubLogoutServletResponse ( ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) , config.logoutRedirectUrl ) ; chain.doFilter ( httpRequest , bufferedResponse ) ; }
public void deleteBranchByProjectOwnerForcePushBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockForcePush ( ) ; com.google.gerrit.acceptance.RestResponse r = userSession.delete ( ( ( ( "/projects/" + ( project.get ( ) ) ) + "/branches/" ) + ( branch.getShortName ( ) ) ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; r.consume ( ) ; }
public com.google.gerrit.server.notedb.NoteDbChangeState rebuild ( com.google.gerrit.server.notedb.NoteDbUpdateManager manager , com.google.gerrit.server.notedb.ChangeBundle bundle ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.Change change = new com.google.gerrit.reviewdb.client.Change ( bundle.getChange ( ) ) ; buildUpdates ( manager , bundle ) ; return com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta ( change , manager.stage ( ) . get ( change.getId ( ) ) ) ; }
private void setSubmitType ( com.google.gerrit.extensions.common.SubmitType submitType ) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input ( ) ; in.submitType = submitType ; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.FALSE ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( ( ( "/projects/" + ( project.get ( ) ) ) + "/config" ) , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; r.consume ( ) ; }
private void streamRequestToFile ( javax.servlet.http.HttpServletRequest req , java.io.File file ) throws java.io.FileNotFoundException , java.io.IOException { java.io.InputStream in = req.getInputStream ( ) ; java.io.OutputStream out = new java.io.FileOutputStream ( file ) ; try { com.google.common.io.ByteStreams.copy ( in , out ) ; } finally { out.close ( ) ; } }
protected void configure ( ) { factory ( AddBranch.Factory.class ) ; factory ( ChangeProjectAccess.Factory.class ) ; factory ( CreateProjectHandler.Factory.class ) ; factory ( ChangeProjectSettings.Factory.class ) ; factory ( DeleteBranches.Factory.class ) ; factory ( ListBranches.Factory.class ) ; factory ( VisibleProjects.Factory.class ) ; factory ( VisibleProjectDetails.Factory.class ) ; factory ( ProjectAccessFactory.Factory.class ) ; factory ( ProjectDetailFactory.Factory.class ) ; factory ( SuggestParentCandidatesHandler.Factory.class ) ; }
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.index.Index < com.google.gerrit.reviewdb.client.Account.Id , com.google.gerrit.server.account.AccountState > i : getWriteIndexes ( ) ) { byIdCache.evict ( id ) ; java.util.Optional < com.google.gerrit.server.account.AccountState > accountState = byIdCache.get ( id ) ; if ( accountState.isPresent ( ) ) { i.replace ( accountState.get ( ) ) ; } else { i.delete ( id ) ; } } fireAccountIndexedEvent ( id.get ( ) ) ; com.google.gerrit.server.index.account.AccountIndexerImpl.autoReindexIfStale ( id ) ; }
void onKeyMap ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ChangeEvent e ) { com.google.gerrit.extensions.client.KeyMapType keyMapType = com.google.gerrit.extensions.client.KeyMapType.valueOf ( keyMap.getValue ( keyMap.getSelectedIndex ( ) ) ) ; prefs.keyMapType ( keyMapType ) ; view.getEditor ( ) . setOption ( "keyMap" , keyMapType.name ( ) . toLowerCase ( ) ) ; }
public void testSkipSubTreesWithImproperPrefix ( ) throws java.lang.Exception { changedPaths = com.google.common.collect.Sets.newHashSet ( "f1/A" ) ; runCheck ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidatorTest.INITIAL_PATHNAMES , changedPaths , messages , vistedPaths ) ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( messages ) ) . containsExactly ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessage ( com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator.conflict ( "f1/A" , "f1/a" ) ) ) ; com.google.common.truth.Truth.assertThat ( vistedPaths ) . containsExactlyElementsIn ( com.google.common.collect.ImmutableList.of ( "a" , "ab" , "f1" , "f1/a" , "f1/ab" , "f2" ) ) ; }
public RefUpdate.Result call ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef ( refName ) ; afterReadRef.run ( ) ; org.eclipse.jgit.lib.ObjectId oldId ; if ( ref == null ) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId ( ) ; next = seed.get ( ) ; } else { oldId = ref.getObjectId ( ) ; next = parse ( oldId ) ; } return store ( repo , rw , oldId , ( ( next ) + ( count ) ) ) ; }
public static java.lang.String addTab ( java.lang.String str ) { java.lang.StringBuffer buf = new java.lang.StringBuffer ( "" ) ; java.lang.String [ ] arr = str.split ( "\n" ) ; for ( java.lang.String s : arr ) { if ( ! ( s.trim ( ) . isEmpty ( ) ) ) { buf.append ( ( ( "\t" + s ) + " \n" ) ) ; } } return buf.toString ( ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.Abandon.Op op = new com.google.gerrit.server.change.Abandon.Op ( control.getUser ( ) , msgTxt , notifyHandling ) ; try ( com.google.gerrit.server.git.BatchUpdate u = batchUpdateFactory.create ( dbProvider.get ( ) , control.getProject ( ) . getNameKey ( ) , control.getUser ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) { u.addOp ( control.getId ( ) , op ) . execute ( ) ; } return op.change ; }
public void testDashList2 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.html ( "A\n\n- line 1\n- 2nd line\n\nB" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; assertNotSame ( o , n ) ; assertEquals ( ( ( ( ( ( "<p>A</p>" + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.BEGIN_LIST ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.item ( "line 1" ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.item ( "2nd line" ) ) ) + ( com.google.gwtexpui.safehtml.client.SafeHtml_WikifyListTest.END_LIST ) ) + "<p>B</p>" ) , n.asString ( ) ) ; }
private void assertSubmitApproval ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = db.changes ( ) . get ( patchSetId.getParentKey ( ) ) ; com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.create ( c ) . load ( ) ; com.google.gerrit.reviewdb.client.PatchSetApproval a = approvalsUtil.getSubmitter ( db , notes , patchSetId ) ; org.junit.Assert.assertTrue ( a.isSubmit ( ) ) ; org.junit.Assert.assertEquals ( 1 , a.getValue ( ) ) ; org.junit.Assert.assertEquals ( admin.id , a.getAccountId ( ) ) ; }
private org.eclipse.jgit.dircache.DirCacheEntry file ( final java.lang.String name ) throws java.io.IOException { final org.eclipse.jgit.lib.ObjectInserter oi = repository.newObjectInserter ( ) ; try { final org.eclipse.jgit.dircache.DirCacheEntry e = new org.eclipse.jgit.dircache.DirCacheEntry ( name ) ; e.setFileMode ( FileMode.REGULAR_FILE ) ; e.setObjectId ( oi.insert ( Constants.OBJ_BLOB , org.eclipse.jgit.lib.Constants.encode ( name ) ) ) ; oi.flush ( ) ; return e ; } finally { oi.release ( ) ; } }
public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; if ( ( ( impl.getUser ( ) ) != null ) && ( ! ( impl.getProjects ( ) . isEmpty ( ) ) ) ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( 1 , "fatal: --user and --project options are not compatible." ) ; } final java.io.PrintWriter stdout = toPrintWriter ( out ) ; try { impl.display ( stdout ) ; } finally { stdout.flush ( ) ; } }
public final int parseArguments ( final org.kohsuke.args4j.spi.Parameters params ) throws org.kohsuke.args4j.CmdLineException { final java.lang.String n = params.getParameter ( 0 ) ; final com.google.gerrit.reviewdb.AccountGroup group = groupCache.get ( new com.google.gerrit.reviewdb.AccountGroup.NameKey ( n ) ) ; if ( group == null ) { throw new org.kohsuke.args4j.CmdLineException ( owner , ( ( "Group \"" + n ) + "\" does not exist" ) ) ; } setter.addValue ( group.getId ( ) ) ; return 1 ; }
public void submit ( com.google.gerrit.extensions.api.changes.SubmitInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { submit.get ( ) . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot submit change" , e ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot submit change" , e ) ; } }
public com.google.gerrit.server.account.AccountState load ( com.google.gerrit.reviewdb.client.Account.Id key ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ; try { final com.google.gerrit.server.account.AccountState state = load ( db , key ) ; java.lang.String user = state.getUserName ( ) ; if ( user != null ) { byName.put ( user , com.google.common.base.Optional.of ( state.getAccount ( ) . getId ( ) ) ) ; } return state ; } finally { db.close ( ) ; } }
public void uploadPackSubsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; setApiUser ( user ) ; assertUploadPackRefs ( "HEAD" , ( ( r1 ) + "1" ) , ( ( r1 ) + "meta" ) , ( ( r3 ) + "1" ) , ( ( r3 ) + "meta" ) , "refs/heads/master" , "refs/tags/master-tag" ) ; }
private com.google.gerrit.reviewdb.client.Change insertChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( project , adminId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; com.google.gerrit.server.notedb.ChangeUpdate u = changeUpdateFactory.create ( changeControlFactory.controlFor ( c , userFactory.create ( adminId ) ) ) ; u.setSubject ( c.getSubject ( ) ) ; u.setBranch ( c.getDest ( ) . get ( ) ) ; u.commit ( ) ; return c ; }
public java.lang.String toString ( ) { final java.lang.String val = getValue ( ) ; if ( com.google.gerrit.server.query.QueryParser.isSingleWord ( val ) ) { return ( ( getOperator ( ) ) + ":" ) + val ; } else { return ( ( ( getOperator ( ) ) + ":\"" ) + val ) + "\"" ; } }
void onSave ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.account.AccountApi.putDiffPreferences ( prefs , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.DiffPreferences > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.account.DiffPreferences result ) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = com.google.gerrit.client.Gerrit.getDiffPreferences ( ) ; result.copyTo ( p ) ; com.google.gerrit.client.Gerrit.setDiffPreferences ( p ) ; } } ) ; close ( ) ; }
private boolean isMergeable ( com.google.gerrit.reviewdb.Change c ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.git.CodeReviewCommit commit = commits.get ( c.getId ( ) ) ; final com.google.gerrit.server.git.CommitMergeStatus s = ( commit != null ) ? commit.statusCode : null ; boolean isMergeable = false ; if ( ( s != null ) && ( ( ( s.equals ( CommitMergeStatus.CLEAN_MERGE ) ) || ( s.equals ( CommitMergeStatus.CLEAN_PICK ) ) ) || ( s.equals ( CommitMergeStatus.ALREADY_MERGED ) ) ) ) { isMergeable = true ; } return isMergeable ; }
void onLineLength ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > e ) { java.lang.String v = e.getValue ( ) ; if ( ( v != null ) && ( ( v.length ( ) ) > 0 ) ) { prefs.lineLength ( java.lang.Math.max ( 1 , java.lang.Integer.parseInt ( v ) ) ) ; view.setLineLength ( prefs.lineLength ( ) ) ; } }
private static void codemirrorForEdit ( final java.lang.String token , final com.google.gerrit.reviewdb.client.Patch.Key id , final int line ) { com.google.gwt.core.client.GWT.runAsync ( new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { @ java.lang.Override public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.editor.EditScreen ( id , line ) ) ; } } ) ; }
public java.util.Set < java.lang.String > listSequences ( java.sql.Connection db ) throws java.sql.SQLException { java.sql.Statement s = db.createStatement ( ) ; try { java.sql.ResultSet rs = s.executeQuery ( "SELECT sequence_name FROM user_sequences" ) ; try { java.util.HashSet < java.lang.String > sequences = new java.util.HashSet < java.lang.String > ( ) ; while ( rs.next ( ) ) { sequences.add ( rs.getString ( 1 ) . toLowerCase ( ) ) ; } return sequences ; } finally { rs.close ( ) ; } } finally { s.close ( ) ; } }
private org.eclipse.jgit.revwalk.RevCommit makeCommit ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.util.Set < java.io.File > files = new java.util.HashSet < > ( ) ; for ( java.lang.String filenames : com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidatorTest.getInvalidFilenames ( ) ) { files.add ( new java.io.File ( repo.getDirectory ( ) . getParent ( ) , filenames ) ) ; } files.add ( new java.io.File ( repo.getDirectory ( ) . getParent ( ) , "test" ) ) ; return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.makeCommit ( repo , "Commit with empty test files." , files ) ; }
public java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > onCommitReceived ( com.google.gerrit.server.events.CommitReceivedEvent receiveEvent ) throws com.google.gerrit.server.git.validators.CommitValidationException { if ( itsConfig.isEnabled ( receiveEvent.getProjectNameKey ( ) , receiveEvent.getRefName ( ) ) ) { return validCommit ( receiveEvent.commit ) ; } else { return java.util.Collections.emptyList ( ) ; } }
public void revisionActionsOneChangePerTopic ( ) throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic ( "foo1" ) . getChangeId ( ) ; approve ( changeId ) ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions = getActions ( changeId ) ; commonActionsAssertions ( actions ) ; noSubmitWholeTopicAssertions ( actions ) ; }
private void mergeImpl ( final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { try { new com.google.gerrit.git.MergeOp ( server , replication , branch ) . merge ( ) ; } catch ( java.lang.Throwable e ) { com.google.gerrit.git.ChangeMergeQueue.log.error ( ( ( "Merge attempt for " + branch ) + " failed" ) , e ) ; } }
java.util.List < com.google.gerrit.server.project.SectionMatcher > getAllSections ( ) { if ( isAllProjects ) { return getLocalAccessSections ( ) ; } java.util.List < com.google.gerrit.server.project.SectionMatcher > all = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.server.project.ProjectState s : tree ( ) ) { all.addAll ( s.getLocalAccessSections ( ) ) ; } return all ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( admin ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
private void assertHasNoTags ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( rsrc.getNameKey ( ) ) ; try { if ( ! ( repo.getRefDatabase ( ) . getRefs ( Constants.R_TAGS ) . isEmpty ( ) ) ) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ( java.lang.String.format ( "Project %s has tags" , rsrc.getName ( ) ) ) ; } } finally { repo.close ( ) ; } } catch ( java.io.IOException e ) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ( e ) ; } }
public void testEvictGroupsByIncludeOK ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID key = AccountGroup.UUID.parse ( "90b3042d9094a37985f3f9281391dbbe9a5addad" ) ; java.lang.String keyJson = new com.google.gson.GsonBuilder ( ) . create ( ) . toJson ( key ) ; org.mockito.Mockito.when ( httpSessionMock.post ( buildCacheEndpoint ( Constants.GROUPS_BYINCLUDE ) , keyJson ) ) . thenReturn ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EMPTY_MSG ) ) ; com.google.common.truth.Truth.assertThat ( forwarder.evict ( Constants.GROUPS_BYINCLUDE , key ) ) . isTrue ( ) ; }
private java.lang.String getLatestDiff ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId oldTreeId , org.eclipse.jgit.lib.ObjectId newTreeId ) throws java.io.IOException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter ( out ) ; fmt.setRepository ( repo ) ; fmt.format ( oldTreeId , newTreeId ) ; fmt.flush ( ) ; return out.toString ( ) ; }
private java.lang.String extractWhat ( com.google.gerrit.sshd.DispatchCommand dcmd ) { java.lang.String commandName = dcmd.getCommandName ( ) ; for ( java.lang.String arg : dcmd.getArguments ( ) ) { commandName = ( commandName + "." ) + arg ; } return commandName ; }
public void printJson ( final java.lang.StringBuffer sb , final java.util.Set < T > o ) { if ( o != null ) { sb.append ( '[' ) ; boolean first = true ; for ( final T item : o ) { if ( first ) { first = false ; } else { sb.append ( ',' ) ; } serializer.printJson ( sb , item ) ; } sb.append ( ']' ) ; } else { sb.append ( com.google.gwtjsonrpc.client.JS_NULL ) ; } }
private static void codemirror ( final java.lang.String token , final com.google.gerrit.client.DiffObject base , final com.google.gerrit.reviewdb.client.Patch.Key id , final com.google.gerrit.client.diff.DisplaySide side , final int line ) { com.google.gwt.core.client.GWT.runAsync ( new com.google.gerrit.client.Dispatcher.AsyncSplit ( token ) { @ java.lang.Override public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.SideBySide ( base , com.google.gerrit.client.DiffObject.patchSet ( id.getParentKey ( ) ) , id.get ( ) , side , line ) ) ; } } ) ; }
private java.lang.String getToken ( final javax.servlet.http.HttpServletRequest req ) { java.lang.String token = req.getPathInfo ( ) ; if ( ( token != null ) && ( token.startsWith ( "/" ) ) ) { token = token.substring ( 1 ) ; } if ( ( token == null ) || ( token.isEmpty ( ) ) ) { token = com.google.gerrit.common.PageLinks.MINE ; } return token ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig.sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.contactstore ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.user ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.auth ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.gitweb ( config , rs ) ; }
private static void deleteRemoteSsh ( org.eclipse.jgit.transport.URIish uri ) { java.lang.String quotedPath = QuotedString.BOURNE.quote ( uri.getPath ( ) ) ; java.lang.String cmd = "rm -rf " + quotedPath ; java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.ReplicationQueue.newErrorBufferStream ( ) ; try { com.googlesource.gerrit.plugins.replication.ReplicationQueue.executeRemoteSsh ( uri , cmd , errStream ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error ( java.lang.String.format ( ( "Error deleting remote repository at %s:\n" + ( ( " Exception: %s\n" + " Command: %s\n" ) + " Output: %s" ) ) , uri , e , cmd , errStream ) , e ) ; } }
public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) ; if ( ! ( org.eclipse.jgit.http.server.GitSmartHttpTools.isGitClient ( req ) ) ) { chain.doFilter ( request , response ) ; return ; } javax.servlet.http.HttpServletResponseWrapper rsp = new javax.servlet.http.HttpServletResponseWrapper ( ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) ) ; if ( verify ( req , rsp ) ) { chain.doFilter ( req , response ) ; } }
public void display ( final java.util.List < com.google.gerrit.common.data.GroupDetail > result ) { while ( 1 < ( table.getRowCount ( ) ) ) table.removeRow ( ( ( table.getRowCount ( ) ) - 1 ) ) ; for ( com.google.gerrit.common.data.GroupDetail detail : result ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; applyDataRowStyle ( row ) ; populate ( row , detail ) ; } }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( ( change.getStatus ( ) ) == ( Change.Status.ABANDONED ) ) && ( change.currentPatchSetId ( ) . equals ( patchSetId ) ) ) { change.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } else { return null ; } }
public void onSend ( ) { com.google.gerrit.client.changes.ChangeApi.rebase ( id.get ( ) , revision , getBase ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.info.ChangeInfo > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; super . onFailure ( caught ) ; } } ) ; }
private void parseAll ( ) throws java.io.IOException , java.text.ParseException , org.eclipse.jgit.errors.ConfigInvalidException { walk.markStart ( walk.parseCommit ( tip ) ) ; for ( org.eclipse.jgit.revwalk.RevCommit commit : walk ) { parse ( commit ) ; } parseComments ( walk.parseCommit ( tip ) ) ; pruneReviewers ( ) ; }
static java.util.SortedMap < java.lang.String , java.lang.String > makeSortedMap ( java.util.Map < java.lang.String , java.util.Set < java.lang.String > > map ) { java.util.SortedMap < java.lang.String , java.lang.String > result = new java.util.TreeMap < > ( ) ; for ( java.lang.String key : com.google.common.collect.Ordering.natural ( ) . sortedCopy ( map.keySet ( ) ) ) { result.put ( key , java.lang.String.join ( " " , com.google.common.collect.Ordering.natural ( ) . sortedCopy ( map.get ( key ) ) ) ) ; } return result ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.util.RequestScopePropagator prop ) { java.util.concurrent.Callable < ? > task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task ( change ) ; if ( prop != null ) { task = prop.wrap ( task ) ; } return executor.submit ( task ) ; }
public int run ( ) throws java.lang.Exception { final com.google.inject.Injector injector = com.google.inject.Guice.createInjector ( com.google.inject.Stage.PRODUCTION , new com.google.gerrit.server.config.DatabaseModule ( ) , new com.google.gerrit.server.config.GerritGlobalModule ( ) , new com.google.gerrit.server.ssh.SshModule ( ) , new com.google.inject.AbstractModule ( ) { @ java.lang.Override protected void configure ( ) { bind ( com.google.gerrit.client.data.GerritConfig.class ) . toProvider ( com.google.gerrit.server.config.GerritConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; } } ) ; com.google.gerrit.client.rpc.Common.setGerritConfig ( injector.getInstance ( com.google.gerrit.client.data.GerritConfig.class ) ) ; injector.getInstance ( com.google.gerrit.server.ssh.SshDaemon.class ) . start ( ) ; return never ( ) ; }
public final com.google.common.util.concurrent.ListenableFuture < com.google.gerrit.server.notedb.NoteDbUpdateManager.Result > rebuildAsync ( final com.google.gerrit.reviewdb.client.Change.Id id , com.google.common.util.concurrent.ListeningExecutorService executor ) { return executor.submit ( new java.util.concurrent.Callable < com.google.gerrit.server.notedb.NoteDbUpdateManager.Result > ( ) { @ java.lang.Override public com.google.gerrit.server.notedb.NoteDbUpdateManager.Result call ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { return rebuild ( db , id ) ; } } } ) ; }
public java.util.List < com.google.gerrit.extensions.api.projects.BranchInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listBranches.request ( this ) . apply ( checkExists ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot list branches" , e ) ; } }
private java.lang.String getGerritHost ( ) { if ( ( getGerritUrl ( ) ) != null ) { try { return new java.net.URL ( getGerritUrl ( ) ) . getHost ( ) ; } catch ( java.net.MalformedURLException e ) { } } return org.spearce.jgit.util.SystemReader.getInstance ( ) . getHostname ( ) ; }
public static java.lang.String toPatch ( final java.lang.String type , final com.google.gerrit.client.reviewdb.Patch.Id id ) { final com.google.gerrit.client.reviewdb.PatchSet.Id psId = id.getParentKey ( ) ; final com.google.gerrit.client.reviewdb.Change.Id chId = psId.getParentKey ( ) ; final java.lang.String encp = com.google.gerrit.client.Link.encodePath ( id.get ( ) ) ; return ( ( ( ( ( ( "patch," + type ) + "," ) + ( chId.get ( ) ) ) + "," ) + ( psId.get ( ) ) ) + "," ) + encp ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.Abandon.Op op = new com.google.gerrit.server.change.Abandon.Op ( control , msgTxt , notifyHandling ) ; try ( com.google.gerrit.server.git.BatchUpdate u = batchUpdateFactory.create ( dbProvider.get ( ) , control.getProject ( ) . getNameKey ( ) , control.getUser ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) { u.addOp ( control.getId ( ) , op ) . execute ( ) ; } return op.change ; }
private void hide ( ) { for ( com.google.gwt.user.client.ui.Widget w = getParent ( ) ; w != null ; w = w.getParent ( ) ) { if ( w instanceof com.google.gwt.user.client.ui.PopupPanel ) { ( ( com.google.gwt.user.client.ui.PopupPanel ) ( w ) ) . hide ( ) ; break ; } } }
protected void migrateData ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws java.sql.SQLException { java.sql.Statement stmt = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) . getConnection ( ) . createStatement ( ) ; try { stmt.executeUpdate ( "UPDATE accounts set mute_common_path_prefixes = 'Y'" ) ; } finally { stmt.close ( ) ; } }
public void testBlocked ( ) throws java.lang.Exception { java.lang.String [ ] patterns = new java.lang.String [ ] { "application/pdf" , "application/xml" , "text/html" } ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = validator.performValidation ( repo , makeCommit ( ) , patterns , false ) ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsExactly ( "ERROR: found blocked content type (application/pdf) in file: foo.pdf" , "ERROR: found blocked content type (application/xml) in file: foo.xml" , "ERROR: found blocked content type (text/html) in file: foo.html" ) ; }
public void onSuggestionsReady ( com.google.gerrit.client.ui.Request request , com.google.gerrit.client.ui.Response response ) { if ( ( exclude.size ( ) ) > 0 ) { java.util.Set < com.google.gerrit.client.ui.Suggestion > filteredSuggestions = new java.util.HashSet < com.google.gerrit.client.ui.Suggestion > ( response.getSuggestions ( ) ) ; for ( com.google.gerrit.client.ui.Suggestion s : response.getSuggestions ( ) ) { if ( exclude.contains ( s.getReplacementString ( ) ) ) { filteredSuggestions.remove ( s ) ; } } response.setSuggestions ( filteredSuggestions ) ; } callback.onSuggestionsReady ( request , response ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > and ( final java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > that ) { if ( ( that.size ( ) ) == 1 ) { return com.google.common.collect.Iterables.getOnlyElement ( that ) ; } return new com.google.gerrit.server.query.AndPredicate < T > ( that ) ; }
public void submitTwoChangesWithFastForward_missingDependency ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange ( ) ; submitWithConflict ( change2.getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead ( ) ; com.google.common.truth.Truth.assertThat ( head.getId ( ) ) . isEqualTo ( oldHead.getId ( ) ) ; }
public boolean canEditHashtags ( ) { return ( ( ( ( isOwner ( ) ) || ( getRefControl ( ) . isOwner ( ) ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ) || ( getRefControl ( ) . canEditHashtags ( ) ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { try { editModifier.modifyFile ( rsrc.getChangeEdit ( ) , rsrc.getPath ( ) , com.google.common.io.ByteStreams.toByteArray ( input.content.getInputStream ( ) ) ) ; } catch ( com.google.gerrit.server.project.InvalidChangeOperationException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e.getMessage ( ) ) ; } return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { com.google.gerrit.reviewdb.Account.Id accountId = getAccountId ( ) ; if ( ! ( diffPref.getAccountId ( ) . equals ( getAccountId ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( ( ( ( "diffPref.getAccountId() " + ( diffPref.getAccountId ( ) ) ) + " doesn't match" ) + " the accountId of the signed in user " ) + ( getAccountId ( ) ) ) ) ; } db.accountDiffPreferences ( ) . upsert ( java.util.Collections.singleton ( diffPref ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
private void initAgreements ( ) { grid.addHeader ( new com.google.gerrit.client.ui.SmallHeading ( Util.C.headingAgreements ( ) ) ) ; contributorAgreements = com.google.gerrit.client.admin.ProjectInfoScreen.newInheritedBooleanBox ( ) ; if ( com.google.gerrit.client.Gerrit.getConfig ( ) . isUseContributorAgreements ( ) ) { saveEnabler.listenTo ( contributorAgreements ) ; grid.add ( Util.C.useContributorAgreements ( ) , contributorAgreements ) ; } signedOffBy = com.google.gerrit.client.admin.ProjectInfoScreen.newInheritedBooleanBox ( ) ; saveEnabler.listenTo ( signedOffBy ) ; grid.addHtml ( Util.C.useSignedOffBy ( ) , signedOffBy ) ; }
public void setUp ( ) throws java.lang.Exception { index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection ( ) ; indexes.setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriter ( indexes , com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 , 3 , 100 ) ) ; }
private void testPushForMasterWithTopic ( com.google.gerrit.acceptance.git.PushForReviewIT.Protocol p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { selectProtocol ( p ) ; java.lang.String topic = "my/topic" ; com.google.gerrit.acceptance.git.PushOneCommit.Result r = pushTo ( ( "refs/for/master/" + topic ) ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , topic ) ; r = pushTo ( ( "refs/for/master%topic=" + topic ) ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , topic ) ; }
private static void setXGerritAuthCookie ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp , com.google.gerrit.httpd.WebSession session ) { java.lang.String v = ( session != null ) ? session.getXGerritAuth ( ) : "" ; javax.servlet.http.Cookie c = new javax.servlet.http.Cookie ( com.google.gerrit.common.data.HostPageData.XSRF_COOKIE_NAME , v ) ; c.setPath ( "/" ) ; c.setHttpOnly ( false ) ; c.setSecure ( com.google.gerrit.httpd.raw.HostPageServlet.isSecure ( req ) ) ; c.setMaxAge ( ( session != null ? - 1 : 0 ) ) ; rsp.addCookie ( c ) ; }
protected void renderTextError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String message ) throws java.io.IOException { res.setStatus ( statusCode ) ; setApiHeaders ( req , res , com.google.gitiles.FormatType.TEXT ) ; setCacheHeaders ( res ) ; try ( java.io.Writer out = com.google.gitiles.BaseServlet.newWriter ( req , res ) ) { out.write ( message ) ; } }
public org.eclipse.jgit.transport.UploadPack create ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.lib.Repository repo ) throws org.eclipse.jgit.http.server.resolver.ServiceNotAuthorizedException , org.eclipse.jgit.http.server.resolver.ServiceNotEnabledException { com.google.gerrit.server.project.ProjectControl pc = com.google.gerrit.httpd.ProjectServlet.getProjectControl ( req ) ; if ( ! ( pc.canRunUploadPack ( ) ) ) { throw new org.eclipse.jgit.http.server.resolver.ServiceNotAuthorizedException ( ) ; } org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack ( repo ) ; up.setPackConfig ( packConfig ) ; if ( ! ( pc.allRefsAreVisible ( ) ) ) { up.setRefFilter ( new com.google.gerrit.server.git.VisibleRefFilter ( repo , pc , db.get ( ) ) ) ; } return up ; }
public void storeEvent ( java.lang.String projectName , java.sql.Timestamp timestamp , java.lang.String event ) throws java.sql.SQLException { java.sql.Connection conn = ds.getConnection ( ) ; java.sql.Statement stat = conn.createStatement ( ) ; try { stat.execute ( ( ( java.lang.String.format ( "INSERT INTO %s(%s, %s, %s) " , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.PROJECT_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.DATE_ENTRY , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.EVENT_ENTRY ) ) + ( java.lang.String.format ( "VALUES('%s', '%s', '%s')" , projectName , timestamp , event ) ) ) ) ; } finally { closeStatement ( stat ) ; closeConnection ( conn ) ; } }
private < A extends com.google.gwtorm.client.Access < ? , ? > > java.lang.Class < A > loadClass ( ) throws com.google.gwtorm.client.OrmException { try { final java.lang.Class < ? > c = java.lang.Class.forName ( implClassName , false , classLoader ) ; return ( ( java.lang.Class < A > ) ( c ) ) ; } catch ( java.lang.ClassNotFoundException err ) { throw new com.google.gwtorm.client.OrmException ( "Cannot load generated class" , err ) ; } }
public java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > visiblePatchSets ( ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.PatchSet > predicate = new com.google.common.base.Predicate < com.google.gerrit.reviewdb.client.PatchSet > ( ) { @ java.lang.Override public boolean apply ( com.google.gerrit.reviewdb.client.PatchSet input ) { try { return changeControl ( ) . isPatchVisible ( input , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return false ; } } } ; return com.google.common.collect.FluentIterable.from ( patchSets ( ) ) . filter ( predicate ) . toList ( ) ; }
public java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > onCommitReceived ( com.google.gerrit.server.events.CommitReceivedEvent receiveEvent ) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > messages = new java.util.LinkedList < > ( ) ; for ( com.google.gerrit.server.git.validators.CommitValidationListener validator : commitValidationListeners ) { try { messages.addAll ( validator.onCommitReceived ( receiveEvent ) ) ; } catch ( com.google.gerrit.server.git.validators.CommitValidationException e ) { messages.addAll ( e.getMessages ( ) ) ; throw new com.google.gerrit.server.git.validators.CommitValidationException ( e.getMessage ( ) , messages ) ; } } return messages ; }
private java.lang.Iterable < T > buffer ( com.google.gwtorm.server.ResultSet < T > scanner ) { return com.google.common.collect.FluentIterable.from ( com.google.common.collect.Iterables.partition ( scanner , 50 ) ) . transformAndConcat ( new com.google.common.base.Function < java.util.List < T > , java.util.List < T > > ( ) { @ java.lang.Override public java.util.List < T > apply ( java.util.List < T > buffer ) { return transformBuffer ( buffer ) ; } } ) ; }
private com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.server.change.RevisionResource rsrc , com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = dbProvider.get ( ) . changes ( ) . get ( id ) ; if ( c == null ) { return null ; } return rsrc.getControl ( ) . getProjectControl ( ) . controlFor ( c ) ; }
public void testCarriageReturnIgnoringBinaries ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithPseudoBinaries ( ) ; java.util.Set < java.lang.String > ignoreFiles = com.google.common.collect.Sets.newHashSet ( new java.lang.String [ ] { "iso" , "jpeg" } ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.performValidation ( repo , c , ignoreFiles ) ; org.junit.Assert.assertEquals ( 0 , m.size ( ) ) ; }
private static java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > getPatchSets ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets = cd.patchSets ( ) ; java.util.TreeMap < java.lang.Integer , com.google.gerrit.reviewdb.client.PatchSet > result = com.google.common.collect.Maps.newTreeMap ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : patchSets ) { result.put ( ps.getId ( ) . get ( ) , ps ) ; } return result ; }
public void createNewChangeSignedOffByFooter ( ) throws java.lang.Exception { HEAD ( ( dfc7e6 = ( metrics ) - ( ( com.google.gerrit.acceptance.rest.change.version ) ( setSignedOffByFooter ( ) ) ) ) ) ; com.google.gerrit.extensions.common.ChangeInfo info = assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; java.lang.String message = info.revisions.get ( info.currentRevision ) . commit.message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( "%sAdministrator <%s>" , org.eclipse.jgit.lib.Constants.SIGNED_OFF_BY_TAG , admin.getIdent ( ) . getEmailAddress ( ) ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { updateOriginal ( result ) ; setMessageText ( message ) ; setDate ( result.updated ( ) ) ; setEdit ( false ) ; if ( isNew ) { removeStyleName ( draftStyle.newDraft ( ) ) ; isNew = false ; } }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer.getInstance ( ) ; final com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > rdf = gs.getDatabase ( ) ; final com.google.gerrit.client.data.GroupCache groups = gs.getGroupCache ( ) ; return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( rdf , groups ) ; }
private com.google.gerrit.reviewdb.ChangeMessage message ( final com.google.gerrit.reviewdb.Change c , final java.lang.String body ) { final java.lang.String uuid ; try { uuid = com.google.gerrit.server.ChangeUtil.messageUUID ( schema ) ; } catch ( com.google.gwtorm.client.OrmException e ) { return null ; } final com.google.gerrit.reviewdb.ChangeMessage m = new com.google.gerrit.reviewdb.ChangeMessage ( new com.google.gerrit.reviewdb.ChangeMessage.Key ( c.getId ( ) , uuid ) , null ) ; m.setMessage ( body ) ; return m ; }
public void onOpen ( final com.google.gwt.user.client.ui.DisclosureEvent event ) { if ( ( infoTable ) == null ) { Util.DETAIL_SVC.patchSetDetail ( patchSet.getKey ( ) , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.data.PatchSetDetail > ( ) { public void onSuccess ( final com.google.gerrit.client.data.PatchSetDetail result ) { ensureLoaded ( result ) ; } } ) ; } }
private static synchronized com.google.gerrit.git.WorkQueue.Executor getPool ( final boolean autoStart ) { if ( autoStart && ( ( com.google.gerrit.git.WorkQueue.pool ) == null ) ) { com.google.gerrit.git.WorkQueue.pool = new com.google.gerrit.git.WorkQueue.Executor ( 1 ) ; com.google.gerrit.git.WorkQueue.pool.setKeepAliveTime ( 60 , java.util.concurrent.TimeUnit.SECONDS ) ; com.google.gerrit.git.WorkQueue.pool.setMaximumPoolSize ( 5 ) ; } return com.google.gerrit.git.WorkQueue.pool ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange ( ) ; return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Mark private" ) . setTitle ( "Mark change as private" ) . setVisible ( ( ( ( ! ( change.isPrivate ( ) ) ) && ( ( change.getStatus ( ) ) != ( Change.Status.MERGED ) ) ) && ( canSetPrivate ( rsrc ) ) ) ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.PROJECT_SVC.ownedProjects ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.util.List < com.google.gerrit.client.reviewdb.Project > > ( this ) { @ java.lang.Override protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.Project > result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; } } ) ; }
private java.io.File getSiteFromReviewDb ( java.sql.Connection conn ) { try { java.sql.Statement stmt = conn.createStatement ( ) ; try { java.sql.ResultSet rs = stmt.executeQuery ( "SELECT site_path FROM system_config" ) ; if ( rs.next ( ) ) { return new java.io.File ( rs.getString ( 1 ) ) ; } } finally { stmt.close ( ) ; } return null ; } catch ( java.sql.SQLException e ) { return null ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; indexes = new com.google.gerrit.server.index.IndexCollection ( ) ; indexes.setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; rewrite = new com.google.gerrit.server.index.IndexRewriteImpl ( indexes , null , new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl ( null , indexes ) , new com.google.gerrit.server.query.change.SqlRewriterImpl ( null ) ) ; }
public void atomicDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > changes = queryProvider.get ( ) . byProject ( project.getNameKey ( ) ) ; deleteChanges ( changes ) ; db.accountProjectWatches ( ) . delete ( db.accountProjectWatches ( ) . byProject ( project.getNameKey ( ) ) ) ; db.submoduleSubscriptions ( ) . delete ( db.submoduleSubscriptions ( ) . bySuperProjectProject ( project.getNameKey ( ) ) ) ; }
public void commentOnReviewableChangeByReviewerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setApiUser ( sc.reviewer ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "comment" , sc ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public void testEndOfString ( ) throws com.google.gwtorm.server.OrmException { assertTrue ( com.google.gerrit.server.query.change.RegexFilePredicateTest.predicate ( "^a$" ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest.change ( "a" ) ) ) ; assertFalse ( com.google.gerrit.server.query.change.RegexFilePredicateTest.predicate ( "^a$" ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest.change ( "a$" ) ) ) ; assertFalse ( com.google.gerrit.server.query.change.RegexFilePredicateTest.predicate ( "^a\\$" ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest.change ( "a" ) ) ) ; assertTrue ( com.google.gerrit.server.query.change.RegexFilePredicateTest.predicate ( "^a\\$" ) . match ( com.google.gerrit.server.query.change.RegexFilePredicateTest.change ( "a$" ) ) ) ; }
public void receivePackRespectsVisibilityOfOpenChanges ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; deny ( "refs/heads/branch" , Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; setApiUser ( user ) ; com.google.common.truth.Truth.assertThat ( getReceivePackRefs ( ) . additionalHaves ( ) ) . containsExactly ( com.google.gerrit.acceptance.git.RefAdvertisementIT.obj ( c3 , 1 ) ) ; }
public boolean equals ( final java.lang.Object other ) { return ( ( getClass ( ) ) == ( other.getClass ( ) ) ) && ( getChildren ( ) . equals ( ( ( com.google.gerrit.server.query.Predicate < ? > ) ( other ) ) . getChildren ( ) ) ) ; }
private static org.eclipse.jgit.revwalk.RevCommit createCommit ( org.eclipse.jgit.junit.TestRepository < ? > testRepo , java.lang.String message ) throws java.lang.Exception { return testRepo.branch ( "HEAD" ) . commit ( ) . message ( message ) . add ( "a.txt" , "content" ) . create ( ) ; BRANCH ( fcc660 ) ; version = $missing$ ; }
private com.google.gerrit.extensions.common.CommentInfo getDraftComment ( java.lang.String changeId , java.lang.String revId , java.lang.String uuid ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession.get ( ( ( ( ( ( "/changes/" + changeId ) + "/revisions/" ) + revId ) + "/drafts/" ) + uuid ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; return newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.extensions.common.CommentInfo.class ) ; }
public void afterRefUpdates ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { if ( failAfterRefUpdates ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( "Failing after ref updates" ) ; } for ( com.google.gerrit.server.git.strategy.SubmitStrategy strategy : strategies ) { com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments args = strategy.args ; if ( args.mergeTip.getCurrentTip ( ) . equals ( args.mergeTip.getInitialTip ( ) ) ) { continue ; } com.google.gerrit.reviewdb.client.Account account = args.accountCache.get ( args.caller.getAccountId ( ) ) . getAccount ( ) ; args.hooks.doRefUpdatedHook ( args.destBranch , args.mergeTip.getInitialTip ( ) , args.mergeTip.getCurrentTip ( ) , account ) ; } }
private void updateAccountInNoteDb ( org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , allUsersName , allUsersRepo ) ; org.eclipse.jgit.lib.PersonIdent ident = serverIdent.get ( ) ; md.getCommitBuilder ( ) . setAuthor ( ident ) ; md.getCommitBuilder ( ) . setCommitter ( ident ) ; com.google.gerrit.server.account.AccountConfig accountConfig = new com.google.gerrit.server.account.AccountConfig ( null , account.getId ( ) ) ; accountConfig.load ( allUsersRepo ) ; accountConfig.setAccount ( account ) ; accountConfig.commit ( md ) ; }
public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchSetApproval p : object.approvals ( ) ) { final com.google.gerrit.server.IdentifiedUser reviewer = userFactory.create ( dbProvider , p.getAccountId ( ) ) ; if ( reviewer.getEffectiveGroups ( ) . contains ( uuid ) ) { return true ; } } return false ; }
private com.google.gerrit.server.query.change.ChangeData changeData ( ) { if ( ( cd ) == null ) { com.google.gerrit.reviewdb.server.ReviewDb reviewDb = db ( ) ; com.google.common.base.Preconditions.checkState ( ( reviewDb != null ) , "need ReviewDb" ) ; cd = changeDataFactory.create ( reviewDb , getNotes ( ) ) ; } return cd ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > ids ) throws com.google.gerrit.server.query.QueryParseException { if ( ( com.google.gerrit.server.query.change.IsReviewedPredicate.getField ( schema ) ) == ( com.google.gerrit.server.index.ChangeField.LEGACY_REVIEWED ) ) { throw new com.google.gerrit.server.query.QueryParseException ( "Only is:reviewed is supported" ) ; } java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > predicates = new java.util.ArrayList ( ids.size ( ) ) ; for ( com.google.gerrit.reviewdb.client.Account.Id id : ids ) { predicates.add ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( id ) ) ; } return com.google.gerrit.server.query.Predicate.or ( predicates ) ; }
public void createEmptyChange_InvalidStatus ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = newChangeInfo ( ChangeStatus.SUBMITTED ) ; com.google.gerrit.acceptance.RestResponse r = adminSession.post ( "/changes/" , ci ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_BAD_REQUEST , r.getStatusCode ( ) ) ; org.junit.Assert.assertTrue ( r.getEntityContent ( ) . contains ( "unsupported change status" ) ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.extensions.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.account.AccountSecurityImpl.class ) ; rpc ( com.google.gerrit.httpd.rpc.account.AccountServiceImpl.class ) ; }
public static boolean isValid ( java.lang.String addr ) { if ( ! ( com.google.gerrit.server.mail.OutgoingEmailValidator.initialized.getAndSet ( true ) ) ) { org.apache.commons.validator.routines.DomainValidator.updateTLDOverride ( org.apache.commons.validator.routines.DomainValidator.ArrayType.GENERIC_PLUS , new java.lang.String [ ] { "local" } ) ; } return org.apache.commons.validator.routines.EmailValidator.getInstance ( true , true ) . isValid ( addr ) ; }
public com.google.gerrit.reviewdb.client.AccountSshKey create ( com.google.gerrit.reviewdb.client.AccountSshKey.Id id , java.lang.String encoded ) throws com.google.gerrit.common.errors.InvalidSshKeyException { try { final com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey ( id , com.google.gerrit.sshd.SshUtil.toOpenSshPublicKey ( encoded ) ) ; com.google.gerrit.sshd.SshUtil.parse ( key ) ; return key ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new com.google.gerrit.common.errors.InvalidSshKeyException ( ) ; } catch ( java.security.spec.InvalidKeySpecException e ) { throw new com.google.gerrit.common.errors.InvalidSshKeyException ( ) ; } catch ( java.security.NoSuchProviderException e ) { com.google.gerrit.sshd.SshKeyCacheImpl.log.error ( "Cannot parse SSH key" , e ) ; throw new com.google.gerrit.common.errors.InvalidSshKeyException ( ) ; } }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder ( org.eclipse.jgit.lib.Config config , java.lang.String section , @ com.google.gerrit.common.Nullable java.lang.String subsection ) { return new com.google.gerrit.server.config.AutoValue_ScheduleConfig.Builder ( ) . setNow ( java.time.ZonedDateTime.now ( java.time.ZoneId.systemDefault ( ) ) ) . setKeyInterval ( com.google.gerrit.server.config.ScheduleConfig.KEY_INTERVAL ) . setKeyStartTime ( com.google.gerrit.server.config.ScheduleConfig.KEY_STARTTIME ) . setConfig ( config ) . setSection ( section ) . setSubsection ( subsection ) ; }
public void testChildHashCode ( ) { final java.lang.String pName = "foo" ; final java.lang.String cName = "bar" ; final com.google.gwtorm.client.StringKeyTestCase.Parent p = new com.google.gwtorm.client.StringKeyTestCase.Parent ( pName ) ; final com.google.gwtorm.client.StringKeyTestCase.Child c = new com.google.gwtorm.client.StringKeyTestCase.Child ( p , cName ) ; assertSame ( p , c.getParentKey ( ) ) ; assertTrue ( ( ( cName.hashCode ( ) ) != ( c.hashCode ( ) ) ) ) ; }
public void testChangeIdAfterBugOrIssue ( ) throws java.lang.Exception { assertEquals ( ( ( "a\n" + ( ( "\n" + "Bug: 42\n" ) + "Change-Id: I8c0321227c4324e670b9ae8cf40eccc87af21b1b\n" ) ) + ( SOB1 ) ) , call ( ( ( "a\n" + ( "\n" + "Bug: 42\n" ) ) + ( SOB1 ) ) ) ) ; assertEquals ( ( ( "a\n" + ( ( "\n" + "Issue: 42\n" ) + "Change-Id: Ie66e07d89ae5b114c0975b49cf326e90331dd822\n" ) ) + ( SOB1 ) ) , call ( ( ( "a\n" + ( "\n" + "Issue: 42\n" ) ) + ( SOB1 ) ) ) ) ; }
protected void configure ( ) { bind ( new com.google.inject.TypeLiteral < com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > > ( ) { } ) . toInstance ( db ) ; bind ( com.google.gerrit.server.config.SitePaths.class ) . toInstance ( paths ) ; install ( new com.google.gerrit.server.schema.SchemaVersion.Module ( ) ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setString ( "gerrit" , null , "basePath" , "git" ) ; cfg.setString ( "user" , null , "name" , "Gerrit Code Review" ) ; cfg.setString ( "user" , null , "email" , "gerrit@localhost" ) ; bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( cfg ) ; bind ( org.eclipse.jgit.lib.PersonIdent.class ) . annotatedWith ( com.google.gerrit.server.GerritPersonIdent.class ) . toProvider ( com.google.gerrit.server.GerritPersonIdentProvider.class ) ; bind ( com.google.gerrit.server.config.AllProjectsName.class ) . toInstance ( new com.google.gerrit.server.config.AllProjectsName ( "All-Projects" ) ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.config.AnonymousCowardName.class ) . toProvider ( com.google.gerrit.server.config.AnonymousCowardNameProvider.class ) ; bind ( com.google.gerrit.server.schema.DataSourceType.class ) . to ( com.google.gerrit.testutil.InMemoryH2Type.class ) ; }
public void display ( final com.google.gerrit.reviewdb.Patch.Key k , final com.google.gerrit.reviewdb.PatchSet.Id a , final com.google.gerrit.reviewdb.PatchSet.Id b , final com.google.gerrit.common.data.PatchScript s ) { patchKey = k ; idSideA = a ; idSideB = b ; final java.lang.String pathName = patchKey.get ( ) ; int ext = pathName.lastIndexOf ( '.' ) ; render ( s ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer.getInstance ( ) ; final com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > rdf = gs.getDatabase ( ) ; final com.google.gerrit.client.data.GroupCache groups = gs.getGroupCache ( ) ; final com.google.gerrit.client.data.GerritConfig config = gs.getGerritConfig ( ) ; return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( rdf , groups , config ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.revisions ( ) . copyKeysIntoChildren ( "name" ) ; com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeInfo.RevisionInfo > list = info.revisions ( ) . values ( ) ; com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber ( list ) ; diffTable.setUpPatchSetNav ( list , diff ) ; header.setChangeInfo ( info ) ; }
private void mockUnconnectableStoryboard ( ) { org.easymock.EasyMock.expect ( serverConfig.getString ( "its-storyboard" , null , "url" ) ) . andReturn ( "<no-url>" ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( serverConfig.getString ( "its-storyboard" , null , "username" ) ) . andReturn ( "none" ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( serverConfig.getString ( "its-storyboard" , null , "password" ) ) . andReturn ( "none" ) . anyTimes ( ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > open ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > dbProvider ) { java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > r = new java.util.ArrayList < > ( 4 ) ; for ( final com.google.gerrit.reviewdb.client.Change.Status e : Change.Status.values ( ) ) { if ( e.isOpen ( ) ) { r.add ( new com.google.gerrit.server.query.change.ChangeStatusPredicate ( e ) ) ; } } return ( r.size ( ) ) == 1 ? r.get ( 0 ) : or ( r ) ; }
private org.eclipse.jgit.revwalk.RevCommit getHead ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { return rw.parseCommit ( repo.getRef ( name ) . getObjectId ( ) ) ; } finally { rw.release ( ) ; } } finally { repo.close ( ) ; } }
public void addReviewer ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; in.reviewer = user.email ; com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes ( ) . id ( ( "p~master~" + ( r.getChangeId ( ) ) ) ) ; cApi.addReviewer ( in ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableSet.of ( user.id ) , com.google.gerrit.acceptance.api.change.ChangeIT.getReviewers ( cApi.get ( ) ) ) ; }
public void init ( final javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { this . config = config ; try { com.google.gerrit.server.GerritServer.getInstance ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new javax.servlet.ServletException ( "Cannot initialize GerritServer" , e ) ; } catch ( com.google.gwtjsonrpc.server.XsrfException e ) { throw new javax.servlet.ServletException ( "Cannot initialize GerritServer" , e ) ; } }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision ( ) ; if ( rev == null ) { return ; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk ( reader ) ; com.google.gerrit.server.notedb.DraftCommentNotes.Parser parser = new com.google.gerrit.server.notedb.DraftCommentNotes.Parser ( getChange ( ) , walk , rev , repoManager , draftsProject , author ) ; parser.parseDraftComments ( ) ; buildCommentTable ( draftBaseComments , parser.draftBaseComments ) ; buildCommentTable ( draftPsComments , parser.draftPsComments ) ; noteMap = parser.noteMap ; }
public void testUnblockInLocalForceEditTopicName_Fails ( ) { com.google.gerrit.server.project.Util.grant ( util.getParentConfig ( ) , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.ANONYMOUS , "refs/heads/*" ) . setBlock ( ) ; com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.EDIT_TOPIC_NAME , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) . setForce ( true ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.REGISTERED ) ; assertFalse ( "u can't edit topic name" , u.controlForRef ( "refs/heads/master" ) . canForceEditTopicName ( ) ) ; }
private static long parseSortKey ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String value ) { com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > field = schema.getFields ( ) . get ( ChangeField.SORTKEY.getName ( ) ) ; if ( field == ( com.google.gerrit.server.index.ChangeField.SORTKEY ) ) { return com.google.gerrit.server.ChangeUtil.parseSortKey ( value ) ; } else { return com.google.gerrit.server.index.ChangeField.legacyParseSortKey ( value ) ; } }
private Account.Id user ( java.lang.String name , java.lang.String email ) { final com.google.gerrit.server.account.AccountState s = makeUser ( name , email ) ; org.easymock.EasyMock.expect ( accountCache.maybeGet ( org.easymock.EasyMock.eq ( s.getAccount ( ) . getId ( ) ) ) ) . andReturn ( java.util.Optional.of ( s ) ) ; return s.getAccount ( ) . getId ( ) ; }
public int compare ( com.google.gerrit.server.query.change.ChangeData a , com.google.gerrit.server.query.change.ChangeData b ) { try { return b.change ( db ) . getSortKey ( ) . compareTo ( a.change ( db ) . getSortKey ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return 0 ; } }
public void run ( ) { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create ( change ) ; cm.setFrom ( change.getOwner ( ) ) ; cm.setPatchSet ( patchSet , patchSetInfo ) ; cm.addReviewers ( reviewers ) ; cm.addExtraCC ( extraCC ) ; cm.send ( ) ; } catch ( java.lang.Exception e ) { com.google.gerrit.server.change.ChangeInserter.log.error ( ( "Cannot send email for new change " + ( change.getId ( ) ) ) , e ) ; } }
public boolean testRemoveReviewer ( com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.server.CurrentUser currentUser , com.google.gerrit.reviewdb.client.Account.Id reviewer , int value ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchChangeException { if ( canRemoveReviewerWithoutPermissionCheck ( notes , currentUser , reviewer , value ) ) { return true ; } return permissionBackend.user ( currentUser ) . change ( notes ) . database ( dbProvider ) . test ( ChangePermission.REMOVE_REVIEWER ) ; }
public void submitWithFastForward ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change.getChangeId ( ) ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead ( ) ; com.google.common.truth.Truth.assertThat ( head.getId ( ) ) . isEqualTo ( change.getCommitId ( ) ) ; com.google.common.truth.Truth.assertThat ( head.getParent ( 0 ) ) . isEqualTo ( oldHead ) ; assertSubmitter ( change.getChangeId ( ) , 1 ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > filter ( java.util.Collection < com.google.gerrit.reviewdb.RefRight > all , com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { java.util.List < com.google.gerrit.reviewdb.RefRight > mine = new java.util.ArrayList < com.google.gerrit.reviewdb.RefRight > ( all.size ( ) ) ; for ( com.google.gerrit.reviewdb.RefRight right : all ) { if ( ( com.google.gerrit.server.project.RefControl.matches ( getRefName ( ) , right.getRefPattern ( ) ) ) && ( right.getApprovalCategoryId ( ) . equals ( actionId ) ) ) { mine.add ( right ) ; } } return mine ; }
private void set ( java.lang.String branch , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException { final org.eclipse.jgit.lib.RefUpdate u = realDb.updateRef ( ( ( org.eclipse.jgit.lib.Constants.R_HEADS ) + branch ) ) ; u.setForceUpdate ( true ) ; u.setNewObjectId ( id ) ; switch ( u.update ( ) ) { case NEW : case FAST_FORWARD : case FORCED : break ; default : fail ( ( ( ( "unexpected update failure " + branch ) + " " ) + ( u.getResult ( ) ) ) ) ; } }
protected com.google.gerrit.client.reviewdb.ReviewDb openReviewDb ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { try { return com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 1 , "fatal: Gerrit database is offline" , e ) ; } }
void setMaxHeight ( int height ) { maxHeight = height - ( getTabBar ( ) . getOffsetHeight ( ) ) ; for ( int i = 0 ; i < ( getTabBar ( ) . getTabCount ( ) ) ; i ++ ) { tabs.get ( i ) . setMaxHeight ( maxHeight ) ; } }
private static java.util.TreeSet < java.lang.String > filterNonCore ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.actions.ActionInfo > m ) { java.util.TreeSet < java.lang.String > ids = new java.util.TreeSet < java.lang.String > ( m.keySet ( ) ) ; for ( java.lang.String id : com.google.gerrit.client.change.Actions.CORE ) { ids.remove ( id ) ; } return ids ; }
protected void configure ( ) { factory ( RebaseChangeHandler.Factory.class ) ; factory ( ChangeDetailFactory.Factory.class ) ; factory ( IncludedInDetailFactory.Factory.class ) ; factory ( PatchSetDetailFactory.Factory.class ) ; factory ( PatchSetPublishDetailFactory.Factory.class ) ; factory ( PublishAction.Factory.class ) ; factory ( DeleteDraftChange.Factory.class ) ; }
public void createProjectWithGitSuffix ( ) throws java.lang.Exception { java.lang.String name = name ( "foo" ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( ( name + ".git" ) ) . get ( ) . name ) ; org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead ( name , RefNames.REFS_CONFIG ) ; eventRecorder.assertRefUpdatedEvents ( name , RefNames.REFS_CONFIG , null , head ) ; eventRecorder.assertRefUpdatedEvents ( name , "refs/heads/master" , new java.lang.String [ ] { } ) ; }
public void testCreateProjectApi ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.extensions.api.projects.ProjectApi projectApi = gApi.projects ( ) . name ( newProjectName ) . create ( ) ; com.google.gerrit.extensions.common.ProjectInfo p = projectApi.get ( ) ; org.junit.Assert.assertEquals ( newProjectName , p.name ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache.get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( newProjectName ) ) ; org.junit.Assert.assertNotNull ( projectState ) ; com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo ( projectState.getProject ( ) , p ) ; assertHead ( newProjectName , "refs/heads/master" ) ; }
public com.google.gerrit.extensions.common.AccountInfo deleteAssignee ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.AccountInfo > r = deleteAssignee.apply ( change , null ) ; return r.isNone ( ) ? null : r.value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete assignee" , e ) ; } }
protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { try { com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput ( ) ; in.revision = revision ; gApi.projects ( ) . name ( project.getProject ( ) . getNameKey ( ) . get ( ) ) . branch ( name ) . create ( in ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException e ) { throw die ( e ) ; } }
public void tearDownInjector ( ) { lifecycle.stop ( ) ; requestContext.setContext ( null ) ; db.close ( ) ; com.google.gerrit.testutil.InMemoryDatabase.drop ( schemaFactory ) ; }
private void writeBlobText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , com.google.gitiles.PathServlet.WalkResult wr ) throws java.io.IOException { setModeHeader ( res , wr.type ) ; try ( java.io.Writer writer = startRenderText ( req , res , null ) ; java.io.OutputStream out = com.google.common.io.BaseEncoding.base64 ( ) . encodingStream ( writer ) ) { wr.getObjectReader ( ) . open ( wr.id ) . copyTo ( out ) ; } }
private GitilesView.Builder parseShowCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) throws java.io.IOException { path = com.google.gitiles.ViewFilter.trimLeadingSlash ( path ) ; com.google.gitiles.RevisionParser.Result result = parseRevision ( req , path ) ; if ( result == null ) { return null ; } return parseShowCommand ( repoName , result , path ) ; }
private static java.lang.String owner ( com.google.gerrit.client.account.AccountInfo ai ) { if ( ( ai.email ( ) ) != null ) { return ai.email ( ) ; } else if ( ( ai.name ( ) ) != null ) { return ai.name ( ) ; } else if ( ( ai._account_id ( ) ) != 0 ) { return "" + ( ai._account_id ( ) ) ; } else { return "" ; } }
public void revisionActionsOneChangePerTopicUnapproved ( ) throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic ( "foo1" ) . getChangeId ( ) ; java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions = getActions ( changeId ) ; com.google.common.truth.Truth.assertThat ( actions ) . containsKey ( "cherrypick" ) ; com.google.common.truth.Truth.assertThat ( actions ) . containsKey ( "rebase" ) ; com.google.common.truth.Truth.assertThat ( actions ) . hasSize ( 2 ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { if ( ( destTopicName ) != null ) { change.setTopic ( ( destTopicName.isEmpty ( ) ? null : destTopicName ) ) ; } change.setStatus ( Change.Status.NEW ) ; change.setCurrentPatchSet ( result.info ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } else { return null ; } }
public static com.google.gitiles.BaseServlet notFoundServlet ( ) { return new com.google.gitiles.BaseServlet ( new org.eclipse.jgit.lib.Config ( ) , null ) { private static final long serialVersionUID = 1L ; @ java.lang.Override public void service ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) { res.setStatus ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND ) ; } } ; }
public com.google.gerrit.server.events.PatchSetAttribute asPatchSetAttribute ( final com.google.gerrit.reviewdb.PatchSet patchSet ) { com.google.gerrit.server.events.PatchSetAttribute p = new com.google.gerrit.server.events.PatchSetAttribute ( ) ; p.revision = patchSet.getRevision ( ) . get ( ) ; p.number = java.lang.Integer.toString ( patchSet.getPatchSetId ( ) ) ; p.ref = patchSet.getRefName ( ) ; final com.google.gerrit.server.account.AccountState uploader = accountCache.get ( patchSet.getUploader ( ) ) ; p.uploader = asAccountAttribute ( uploader.getAccount ( ) ) ; return p ; }
public void testAppend_int ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; assertSame ( b , b.append ( 4 ) ) ; assertSame ( b , b.append ( 2 ) ) ; assertSame ( b , b.append ( ( - 100 ) ) ) ; assertEquals ( "42-100" , b.asString ( ) ) ; }
public java.lang.String getStatusDescription ( ) { if ( ( exception ) != null ) { return getErrorDescription ( exception ) ; } switch ( status.getStatus ( ) ) { case COMPLETE : return "Cloned (100%)" ; case CANCELLED : return "Cancelled" ; default : return ( ( ( ( ( "Phase-" + ( currTask ) ) + " / " ) + ( task ) ) + " (" ) + ( lastPercentage ) ) + "%)" ; } }
private org.eclipse.jgit.lib.ObjectId getEditRev ( ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.NoSuchChangeException , java.io.IOException { com.google.common.base.Optional < com.google.gerrit.server.edit.ChangeEdit > edit = editReader.byChange ( change ) ; if ( edit.isPresent ( ) ) { return edit.get ( ) . getRef ( ) . getObjectId ( ) ; } throw new com.google.gerrit.server.project.NoSuchChangeException ( change.getId ( ) ) ; }
public boolean equals ( final java.lang.Object obj ) { if ( ( ! ( super . equals ( obj ) ) ) || ( ! ( obj instanceof com.google.gerrit.common.data.AccessSection ) ) ) { return false ; } return new java.util.HashSet < com.google.gerrit.common.data.Permission > ( getPermissions ( ) ) . equals ( new java.util.HashSet < com.google.gerrit.common.data.Permission > ( ( ( com.google.gerrit.common.data.AccessSection ) ( obj ) ) . getPermissions ( ) ) ) ; }
public void skipWhenUserBelongsToGroupName ( ) throws java.lang.Exception { java.lang.String config = "[plugin \"uploadvalidator\"]\n" + ( "skipValidation=testOp\n" + "skipGroup=testGroupName\n" ) ; com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , config ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( "testGroupId" ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( new com.google.gerrit.reviewdb.client.AccountGroup ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "testGroupName" ) , new com.google.gerrit.reviewdb.client.AccountGroup.Id ( 1 ) , new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( "testGroupId" ) ) ) ) ; com.google.common.truth.Truth.assertThat ( validatorConfig.isEnabledForRef ( projectName , "anyRef" , "testOp" ) ) . isFalse ( ) ; }
public void testNoEscaping ( ) { java.lang.String find = "find" ; java.lang.String link = "link" ; com.google.gwtexpui.safehtml.client.LinkFindReplace a = new com.google.gwtexpui.safehtml.client.LinkFindReplace ( find , link ) ; assertEquals ( find , a.pattern ( ) . getSource ( ) ) ; assertEquals ( "<a href=\"link\">find</a>" , a.replace ( find ) ) ; assertEquals ( ( ( ( "find = " + find ) + ", link = " ) + link ) , a.toString ( ) ) ; }
private void init ( final com.google.reviewit.app.Change change ) { android.support.v4.widget.SwipeRefreshLayout swipeRefreshLayout = ( ( android.support.v4.widget.SwipeRefreshLayout ) ( v ( R.id.swipeRefreshLayout ) ) ) ; swipeRefreshLayout.setColorSchemeColors ( R.color.progressBar ) ; swipeRefreshLayout.setRefreshing ( true ) ; swipeRefreshLayout.setOnRefreshListener ( new android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener ( ) { @ java.lang.Override public void onRefresh ( ) { refresh ( change ) ; } } ) ; tv ( R.id.commitMessage ) . setLinksClickable ( true ) ; }
void onSave ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.account.AccountApi.putEditPreferences ( prefs , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.EditPreferences > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.account.EditPreferences p ) { com.google.gerrit.client.Gerrit.setEditPreferences ( p.copyTo ( new com.google.gerrit.extensions.client.EditPreferencesInfo ( ) ) ) ; } } ) ; close ( ) ; }
public java.util.List < com.google.gerrit.extensions.common.SshKeyInfo > apply ( com.google.gerrit.server.IdentifiedUser user ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.RepositoryNotFoundException { return com.google.common.collect.Lists.transform ( authorizedKeys.getKeys ( user.getAccountId ( ) ) , new com.google.common.base.Function < com.google.gerrit.reviewdb.client.AccountSshKey , com.google.gerrit.extensions.common.SshKeyInfo > ( ) { @ java.lang.Override public com.google.gerrit.extensions.common.SshKeyInfo apply ( com.google.gerrit.reviewdb.client.AccountSshKey key ) { return com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo ( key ) ; } } ) ; }
private static boolean needsSuperSerializer ( com.google.gwt.core.ext.typeinfo.JClassType type ) { type = type.getSuperclass ( ) ; while ( ! ( java.lang.Object.class . getName ( ) . equals ( type.getQualifiedSourceName ( ) ) ) ) { if ( ( com.google.gwtjsonrpc.rebind.SerializerCreator.sortFields ( type ) . length ) > 0 ) { return true ; } type = type.getSuperclass ( ) ; } return false ; }
public void testEmpty1 ( ) { final java.lang.String name = "empty-file" ; final com.google.gerrit.server.patch.PatchListEntry e = com.google.gerrit.server.patch.PatchListEntry.empty ( name ) ; assertNull ( e.getOldName ( ) ) ; assertEquals ( name , e.getNewName ( ) ) ; assertSame ( Patch.PatchType.UNIFIED , e.getPatchType ( ) ) ; assertSame ( Patch.ChangeType.MODIFIED , e.getChangeType ( ) ) ; assertTrue ( e.getEdits ( ) . isEmpty ( ) ) ; }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; parser = new com.google.gitiles.RevisionParser ( repo.getRepository ( ) , new com.google.gitiles.TestGitilesAccess ( repo.getRepository ( ) ) . forRequest ( null ) , new com.google.gitiles.VisibilityCache ( false , com.google.common.cache.CacheBuilder.newBuilder ( ) . maximumSize ( 0 ) ) ) ; }
public int weigh ( com.google.gerrit.server.patch.PatchListKey key , com.google.gerrit.server.patch.PatchList value ) { int size = ( ( ( ( ( 16 + ( 4 * 8 ) ) + ( 2 * 36 ) ) + 16 ) + ( 3 * 8 ) ) + ( 3 * 4 ) ) + 20 ; for ( com.google.gerrit.server.patch.PatchListEntry e : value.getPatches ( ) ) { size += e.weigh ( ) ; } return size ; }
private < T > boolean callHander ( com.googlesource.gerrit.plugins.github.notification.WebhookEventHandler < T > handler , java.lang.String jsonBody ) throws java.io.IOException { T payload = gson.fromJson ( jsonBody , handler.getPayloadType ( ) ) ; if ( payload != null ) { return handler.doAction ( payload ) ; } else { com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.error ( ( ( ( "Cannot decode JSON payload '" + jsonBody ) + "' into " ) + ( handler.getPayloadType ( ) . getName ( ) ) ) ) ; return false ; } }
private void setDefaultBlameCache ( ) { if ( ( blameCache ) == null ) { if ( config.getSubsections ( "cache" ) . contains ( "blame" ) ) { blameCache = new com.google.gitiles.blame.BlameCacheImpl ( com.google.gitiles.ConfigUtil.getCacheBuilder ( com.google.gitiles.blame.BlameCacheImpl.newBuilder ( ) , config , "blame" ) ) ; } else { blameCache = new com.google.gitiles.blame.BlameCacheImpl ( ) ; } } }
protected void onShowView ( com.google.gerrit.client.ui.Screen view ) { com.google.gerrit.client.Gerrit.lastViewToken = com.google.gwt.user.client.History.getToken ( ) ; java.lang.String token = view.getToken ( ) ; if ( ! ( token.equals ( com.google.gerrit.client.Gerrit.lastViewToken ) ) ) { com.google.gwt.user.client.History.newItem ( token , false ) ; com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( token ) ; } if ( view instanceof com.google.gerrit.client.changes.ChangeListScreen ) { com.google.gerrit.client.Gerrit.lastChangeListToken = token ; } super . onShowView ( view ) ; view.onShowView ( ) ; }
private void computeAllowed ( ) { final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > am = user.getEffectiveGroups ( ) ; final com.google.gerrit.server.project.ProjectState pe = projectCache.get ( change.getDest ( ) . getParentKey ( ) ) ; computeAllowed ( am , pe.getRights ( ) ) ; computeAllowed ( am , projectCache.getWildcardRights ( ) ) ; }
protected void selectProtocol ( com.google.gerrit.acceptance.git.AbstractPushForReview.Protocol p ) throws java.lang.Exception { java.lang.String url ; switch ( p ) { case SSH : url = sshUrl ; break ; case HTTP : url = admin.getHttpUrl ( server ) ; break ; default : throw new java.lang.IllegalArgumentException ( ( "unexpected protocol: " + p ) ) ; } setRepo ( com.google.gerrit.acceptance.GitUtil.cloneProject ( ( ( url + "/" ) + ( project.get ( ) ) ) ) ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "submit" ) . post ( in , cb ) ; }
private void writeToBatch ( com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch , com.google.gerrit.server.notedb.AbstractChangeUpdate update , org.eclipse.jgit.lib.Repository repo ) throws com.google.gwtorm.server.OrmException , java.io.IOException { org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter ( ) ; try { update.setInserter ( inserter ) ; update.writeCommit ( batch ) ; } finally { inserter.release ( ) ; } }
private void checkCanRunAs ( ) throws com.google.gerrit.sshd.UnloggedFailure { if ( ( caller.get ( ) ) instanceof com.google.gerrit.server.PeerDaemonUser ) { } else if ( ! ( enableRunAs ) ) { throw new com.google.gerrit.sshd.UnloggedFailure ( 1 , "fatal: suexec disabled by auth.enableRunAs = false" ) ; } else if ( ! ( caller.get ( ) . getCapabilities ( ) . canRunAs ( ) ) ) { throw new com.google.gerrit.sshd.UnloggedFailure ( 1 , "fatal: suexec not permitted" ) ; } }
private void assertParseFails ( org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( commit ) ) { parser.parseAll ( ) ; org.junit.Assert.fail ( ( "Expected parse to fail:\n" + ( commit.getFullMessage ( ) ) ) ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { } }
void setShowLineNumbers ( boolean b ) { cmA.setOption ( "lineNumbers" , b ) ; cmB.setOption ( "lineNumbers" , b ) ; if ( b ) { diffTable.addStyleName ( SideBySideTable.style.showLineNumbers ( ) ) ; } else { diffTable.removeStyleName ( SideBySideTable.style.showLineNumbers ( ) ) ; } }
private static java.util.Collection < java.security.PublicKey > computeHostKeys ( ) { final org.apache.sshd.common.KeyPairProvider p = com.google.gerrit.server.ssh.GerritSshDaemon.sshd.getKeyPairProvider ( ) ; final java.util.List < java.security.PublicKey > keys = new java.util.ArrayList < java.security.PublicKey > ( 2 ) ; com.google.gerrit.server.ssh.GerritSshDaemon.addPublicKey ( keys , p , KeyPairProvider.SSH_DSS ) ; com.google.gerrit.server.ssh.GerritSshDaemon.addPublicKey ( keys , p , KeyPairProvider.SSH_RSA ) ; return java.util.Collections.unmodifiableList ( keys ) ; }
public void onLoad ( ) { if ( ( projects ) == null ) { initUI ( ) ; } Util.PROJECT_SVC.ownedProjects ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.util.List < com.google.gerrit.client.reviewdb.Project > > ( this ) { @ java.lang.Override protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.Project > result ) { projects.display ( result ) ; projects.finishDisplay ( true ) ; } } ) ; }
public static com.google.gerrit.client.rpc.RestApi change ( int id ) { return new com.google.gerrit.client.rpc.RestApi ( "/changes/" ) . id ( java.lang.String.valueOf ( id ) ) ; }
public java.lang.String string ( final java.lang.String title , final java.lang.String name , final java.lang.String dv , final boolean nullIfDefault ) { final java.lang.String ov = get ( name ) ; java.lang.String nv = ui.readString ( ( ov != null ? ov : dv ) , "%s" , title ) ; if ( nullIfDefault && ( nv == dv ) ) { nv = null ; } if ( ! ( com.google.gerrit.pgm.init.Section.eq ( ov , nv ) ) ) { set ( name , nv ) ; } return nv ; }
private static int guessVersion ( java.lang.Class < ? > c ) { java.lang.String n = c.getName ( ) ; n = n.substring ( ( ( n.lastIndexOf ( '_' ) ) + 1 ) ) ; while ( n.startsWith ( "0" ) ) n = n.substring ( 1 ) ; return java.lang.Integer.parseInt ( n ) ; }
public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle < T > add ( com.google.inject.Key < T > key , com.google.inject.Provider < T > item ) { java.util.concurrent.atomic.AtomicReference < com.google.inject.Provider < T > > ref = new java.util.concurrent.atomic.AtomicReference < com.google.inject.Provider < T > > ( item ) ; items.add ( ref ) ; return new ReloadableHandle ( ref , key , item ) ; }
private java.util.List < com.google.gerrit.common.data.GroupReference > suggestAccountGroup ( @ javax.annotation.Nullable final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String query , final int limit ) { final int n = ( limit <= 0 ) ? 10 : java.lang.Math.min ( limit , 10 ) ; return com.google.common.collect.Lists.newArrayList ( com.google.common.collect.Iterables.limit ( groupBackend.suggest ( query ) , n ) ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException { if ( ( input.content ) == null ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( "no input provided" ) ; } try { editModifier.modifyFile ( rsrc.getChangeEdit ( ) , rsrc.getPath ( ) , com.google.common.io.ByteStreams.toByteArray ( input.content.getInputStream ( ) ) ) ; } catch ( com.google.gerrit.server.project.InvalidChangeOperationException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( e.getMessage ( ) ) ; } return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
public void testUnblockLargerScope_Fails ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.ANONYMOUS , "refs/heads/master" ) . setBlock ( ) ; com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertFalse ( "u can't push" , u.controlForRef ( "refs/heads/master" ) . canUpdate ( ) ) ; }
private void statesCleanUp ( ) { if ( ( ! ( stateMap.isEmpty ( ) ) ) && ( ! ( isRetrying ( ) ) ) ) { for ( java.util.Map.Entry < java.lang.String , com.googlesource.gerrit.plugins.replication.ReplicationState > entry : stateMap.entries ( ) ) { entry.getValue ( ) . notifyRefReplicated ( projectName.get ( ) , entry.getKey ( ) , uri , RefPushResult.FAILED ) ; } } }
boolean dbExists ( ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds.getConnection ( ) ; java.sql.ResultSet tables = conn.getMetaData ( ) . getTables ( null , null , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME.toUpperCase ( ) , null ) ) { return tables.next ( ) ; } }
private boolean isPolyGerritEnabled ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) { if ( ! ( options.enableGwtUi ( ) ) ) { return true ; } java.lang.String param = req.getParameter ( "polygerrit" ) ; if ( "1" . equals ( param ) ) { return setPolyGerritCookie ( req , res , UiType.POLYGERRIT ) ; } else if ( "0" . equals ( param ) ) { return setPolyGerritCookie ( req , res , UiType.GWT ) ; } else { return isPolyGerritCookie ( req ) ; } }
public void testCreateSchema_LabelTypes ( ) throws java.lang.Exception { java.util.List < java.lang.String > labels = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.common.data.LabelType label : getLabelTypes ( ) . getLabelTypes ( ) ) { labels.add ( label.getName ( ) ) ; } assertEquals ( com.google.common.collect.ImmutableList.of ( "Verified" , "Code-Review" ) , labels ) ; }
public void setEnableIntralineDifference ( final boolean on ) { enableIntralineDifference = on ; if ( enableIntralineDifference ) { intralineDifference.setValue ( getValue ( ) . isIntralineDifference ( ) ) ; } else { intralineDifference.setValue ( false ) ; } toggleEnabledStatus ( save.isEnabled ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo > result ) { if ( ! ( result.isEmpty ( ) ) ) { java.util.Map < java.lang.String , com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo > jobs = new java.util.TreeMap < > ( ) ; for ( java.lang.String key : result.keySet ( ) ) { jobs.put ( key , result.get ( key ) ) ; } display ( jobs ) ; } }
public void fire ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id uploader , java.sql.Timestamp when , com.google.gerrit.extensions.api.changes.NotifyHandling notify ) { if ( ! ( listeners.iterator ( ) . hasNext ( ) ) ) { return ; } try { fire ( util.changeInfo ( change ) , util.revisionInfo ( change.getProject ( ) , patchSet ) , util.accountInfo ( uploader ) , when , notify ) ; } catch ( com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e ) { com.google.gerrit.server.extensions.events.RevisionCreated.log.error ( "Couldn't fire event" , e ) ; } }
private void onOpen ( ) { if ( ( 0 <= ( currentRow ) ) && ( ( currentRow ) < ( table.getRowCount ( ) ) ) ) { final RowItem item = getRowItem ( currentRow ) ; if ( item != null ) { onOpenItem ( item ) ; } } }
private static java.lang.String time ( final long now , final long time ) { if ( ( time - now ) < ( ( ( 24 * 60 ) * 60 ) * 1000L ) ) { return new java.text.SimpleDateFormat ( "HH:mm:ss" ) . format ( new java.util.Date ( time ) ) ; } return new java.text.SimpleDateFormat ( "MMM-dd" ) . format ( new java.util.Date ( time ) ) ; }
public void testOwnerProject ( ) { local.add ( grant ( com.google.gerrit.reviewdb.ApprovalCategory.OWN , admin , "refs/*" , 1 ) ) ; com.google.gerrit.server.project.ProjectControl uBlah = user ( devs ) ; com.google.gerrit.server.project.ProjectControl uAdmin = user ( devs , admin ) ; assertFalse ( "not owner" , uBlah.isOwner ( ) ) ; assertTrue ( "is owner" , uAdmin.isOwner ( ) ) ; }
public com.google.gerrit.server.CurrentUser runAs ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id , @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , caller ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.reviewdb.client.Change.Id changeId = psId.getParentKey ( ) ; java.lang.String rev = java.lang.String.valueOf ( psId.get ( ) ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId , rev ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , null , rev , false , submit ) ) ; }
private static boolean isFile ( org.eclipse.jgit.revwalk.RevWalk walk , com.google.gitiles.GitilesView view ) throws java.io.IOException { if ( view.getPathPart ( ) . equals ( "" ) ) { return false ; } org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath ( walk.getObjectReader ( ) , view.getPathPart ( ) , walk.parseTree ( view.getRevision ( ) . getId ( ) ) ) ; try { return ( ( tw.getRawMode ( 0 ) ) & ( org.eclipse.jgit.lib.FileMode.TYPE_FILE ) ) > 0 ; } finally { tw.release ( ) ; } }
public void setUp ( ) throws java.lang.Exception { testEnv.getInjector ( ) . injectMembers ( this ) ; db = testEnv.getDb ( ) ; com.google.common.truth.TruthJUnit.assume ( ) . that ( ( ( db ) instanceof com.google.gwtorm.jdbc.JdbcSchema ) ) . isTrue ( ) ; connection = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) . getConnection ( ) ; createdOnRetrieval = connection.prepareStatement ( "SELECT created_on FROM account_groups WHERE group_id = ?" ) ; createdOnUpdate = connection.prepareStatement ( "UPDATE account_groups SET created_on = ? WHERE group_id = ?" ) ; auditEntryDeletion = connection.prepareStatement ( "DELETE FROM account_group_members_audit WHERE group_id = ?" ) ; }
public void voteOnBehalfOfInvalidLabel ( ) throws java.lang.Exception { allowCodeReviewOnBehalfOf ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.onBehalfOf = user.id.toString ( ) ; in.strictLabels = true ; in.label ( "Not-A-Label" , 5 ) ; exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; exception.expectMessage ( "label \"Not-A-Label\" is not a configured label" ) ; revision.review ( in ) ; }
protected void run ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { try { if ( luceneVersionManager.activateLatestIndex ( ) ) { stdout.println ( "Activated latest index version" ) ; } else { stdout.println ( "Not activating index, already using latest version" ) ; } } catch ( com.google.gerrit.lucene.ReindexerAlreadyRunningException e ) { throw new com.google.gerrit.sshd.commands.UnloggedFailure ( ( "Failed to activate latest index: " + ( e.getMessage ( ) ) ) ) ; } }
protected void insert ( int row , com.google.gerrit.client.projects.ProjectInfo k ) { super . insert ( row , k ) ; if ( ( com.google.gerrit.client.Gerrit.getGitwebLink ( ) ) != null ) { table.getFlexCellFormatter ( ) . addStyleName ( row , ProjectsTable.C_REPO_BROWSER , Gerrit.RESOURCES.css ( ) . dataCell ( ) ) ; } }
private static java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted ( org.eclipse.jgit.revwalk.RevWalk rw , java.lang.Iterable < org.eclipse.jgit.lib.Ref > refs ) throws java.io.IOException , org.eclipse.jgit.errors.MissingObjectException { java.util.Set < org.eclipse.jgit.revwalk.RevCommit > accepted = com.google.common.collect.Sets.newHashSet ( ) ; for ( org.eclipse.jgit.lib.Ref r : refs ) { try { accepted.add ( rw.parseCommit ( r.getObjectId ( ) ) ) ; } catch ( org.eclipse.jgit.errors.IncorrectObjectTypeException nonCommit ) { } } return accepted ; }
private com.google.gerrit.reviewdb.client.AccountSshKey createSshKey ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.String keyFile ) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get ( keyFile ) ; if ( ! ( java.nio.file.Files.exists ( p ) ) ) { throw new java.io.IOException ( java.lang.String.format ( "Cannot add public SSH key: %s is not a file" , keyFile ) ) ; } java.lang.String content = new java.lang.String ( java.nio.file.Files.readAllBytes ( p ) , java.nio.charset.StandardCharsets.UTF_8 ) ; return new com.google.gerrit.reviewdb.client.AccountSshKey ( new com.google.gerrit.reviewdb.client.AccountSshKey.Id ( id , 0 ) , content ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > onePredicate ( com.google.gerrit.server.query.change.LabelPredicate.Args args , java.lang.String label , int expVal ) { if ( expVal != 0 ) { return com.google.gerrit.server.query.change.LabelPredicate.equalsLabelPredicate ( args , label , expVal ) ; } else { return com.google.gerrit.server.query.change.LabelPredicate.noLabelQuery ( args , label ) ; } }
private void delete ( java.lang.String path ) { hide ( ) ; com.google.gerrit.client.changes.ChangeEditApi.delete ( changeId.get ( ) , path , new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > ( ) { @ java.lang.Override public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( changeId ) ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { } } ) ; }
public static com.google.gerrit.server.patch.DiffSummaryKey fromPatchListKey ( com.google.gerrit.server.patch.PatchListKey plk ) { com.google.common.base.Preconditions.checkArgument ( ( ( plk.getAlgorithm ( ) ) == ( PatchListKey.Algorithm.OPTIMIZED_DIFF ) ) ) ; return new com.google.gerrit.server.patch.DiffSummaryKey ( plk.getOldId ( ) , plk.getParentNum ( ) , plk.getNewId ( ) , plk.getWhitespace ( ) ) ; }
