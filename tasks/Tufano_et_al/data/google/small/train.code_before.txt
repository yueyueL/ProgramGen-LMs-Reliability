public void changeProjectSettings ( final com.google.gerrit.reviewdb.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
public boolean isVisible ( ) { return ( ( ( getCurrentUser ( ) ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerform ( Permission.READ ) ) ) && ( canRead ( ) ) ; }
public void remove ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public long getMillis ( ) { return clockMs.getAndAdd ( clockStepMs ) ; }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.index.IndexCollection indexes ) { com.google.gerrit.server.index.ChangeIndex index = ( indexes != null ) ? indexes.getSearchIndex ( ) : null ; return index != null ? index.getSchema ( ) : null ; }
public boolean containsCommentPublished ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { for ( com.google.gerrit.reviewdb.client.PatchLineComment l : getComments ( ) . values ( ) ) { if ( c.getKey ( ) . equals ( l.getKey ( ) ) ) { return true ; } } return false ; }
protected abstract void doInsert ( java.lang.Iterable < E > instances , T txn ) throws com.google.gwtorm.client.OrmException ;
public void onHistoryChanged ( final java.lang.String token ) { final com.google.gerrit.client.Screen s = select ( token ) ; if ( s != null ) { com.google.gerrit.client.Gerrit.display ( s ) ; } else { } }
public void notSticky ( ) throws java.lang.Exception { assertNotSticky ( java.util.EnumSet.of ( com.google.gerrit.extensions.client.ChangeKind.REWORK , com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE , com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE , com.google.gerrit.extensions.client.ChangeKind.MERGE_FIRST_PARENT_UPDATE ) ) ; }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpDelete ( ( ( peerInfo.get ( ) . getDirectUrl ( ) ) + endpoint ) ) , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler ( ) ) ; }
private void decodeApprovals ( org.apache.lucene.document.Document doc , com.google.gerrit.server.query.change.ChangeData cd ) { cd.setCurrentApprovals ( com.google.gerrit.lucene.LuceneChangeIndex.decodeProtos ( doc , com.google.gerrit.lucene.LuceneChangeIndex.APPROVAL_FIELD , PatchSetApprovalProtoField.CODEC ) ) ; }
public void removeHandler ( ) { com.google.gwtexpui.globalkey.client.GlobalKey.keys.remove ( key ) ; com.google.gwtexpui.globalkey.client.GlobalKey.keyApplication.remove ( key ) ; }
public long getHead ( ) throws java.io.IOException { return stores.head.get ( ) ; }
protected void fireGitRefUpdatedEvent ( org.eclipse.jgit.lib.RefUpdate ru ) { gitRefUpdated.fire ( projectName , ru , ( ( author ) == null ? null : author.getAccount ( ) ) ) ; }
void removeGutter ( com.google.gerrit.client.diff.SidePanel.GutterWrapper wrapper ) { gutters.remove ( wrapper ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.client.PatchLineComment > comments ( ) throws com.google.gwtorm.server.OrmException { if ( ( comments ) == null ) { comments = db.patchComments ( ) . byChange ( legacyId ) . toList ( ) ; } return comments ; }
public void setSideA ( com.google.gerrit.reviewdb.PatchSet.Id patchSetId ) { idSideA = patchSetId ; com.google.gerrit.client.patches.PatchScreen.diffSideA = patchSetId ; }
public java.net.SocketAddress get ( ) { return sd.getRemoteAddress ( ) ; }
boolean isSubmit ( ) { return submit ; }
public void afterRefUpdates ( ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { if ( failAfterRefUpdates ) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( "Failing after ref updates" ) ; } }
public com.google.gerrit.extensions.client.SubmitType submitType ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getSubmitType.apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get submit type" , e ) ; } }
public void testInvalidSchemeInReplace ( ) { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "find" , "javascript:alert(1)" ) . replace ( "find" ) ; org.junit.Assert.fail ( "Expected IllegalStateException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
private void assertDeleteSucceeds ( ) throws java.lang.Exception { branch ( ) . delete ( ) ; try { branch ( ) . get ( ) ; org.junit.Assert.fail ( "Expected ResourceNotFoundException" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException expected ) { } }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.dashboards.DashboardInfo item ) { return item.name ( ) ; }
private void blockReviewDbUpdates ( boolean block ) { cfg.setBoolean ( "user" , null , "readGroupsFromNoteDb" , block ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.client.Project.NameKey > byName ( java.lang.String prefix ) { return java.util.Collections.emptySet ( ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.Comment c ) { verifyComment ( c ) ; createDraftUpdateIfNull ( ) . deleteComment ( c ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toEditScreen ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( result.legacy_id ( ) , 1 ) , "project.config" ) ) ; }
private static java.lang.String getChangeId ( org.eclipse.jgit.revwalk.RevCommit c ) { return com.google.common.collect.Iterables.getOnlyElement ( c.getFooterLines ( com.google.gerrit.common.FooterConstants.CHANGE_ID ) ) ; }
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body ) throws java.lang.Exception { return writeCommit ( body , changeNoteUtil.newIdent ( changeOwner.getAccount ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) , serverIdent , "Anonymous Coward" ) ) ; }
private boolean search ( java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > ids ) { return user.getEffectiveGroups ( ) . containsAnyOf ( ids ) ; }
protected long nextLong ( final java.lang.String query ) throws com.google.gwtorm.client.OrmException { return getDialect ( ) . nextLong ( getConnection ( ) , query ) ; }
public void selfRevokedKey ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.selfRevokedKey ( ) , "Key is revoked" ) ; }
public void evict ( final com.google.gerrit.reviewdb.Account.Id accountId ) { byId.remove ( accountId ) ; }
public void visit ( org.pegdown.ast.ExpLinkNode node ) { html.open ( "a" ) . attribute ( "href" , href ( node.url ) ) . attribute ( "title" , node.title ) ; visitChildren ( node ) ; html.close ( "a" ) ; }
public boolean isSampledStatisticsEnabled ( ) { return self.isSampledStatisticsEnabled ( ) ; }
public boolean isEnabled ( ) { return ( enabled ) && ( isVisible ( ) ) ; }
public final native com.google.gwt.core.client.JavaScriptObject has_use_contributor_agreements ( ) ;
private AccountGroup.UUID groupUuid ( java.lang.String groupName ) { return groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( groupName ) ) . getGroupUUID ( ) ; }
com.google.gitiles.doc.Navbar setMarkdown ( com.google.gitiles.doc.MarkdownConfig cfg , byte [ ] md ) { if ( ( md != null ) && ( ( md.length ) > 0 ) ) { parse ( cfg , org.eclipse.jgit.util.RawParseUtils.decode ( md ) ) ; } return this ; }
public int compare ( com.google.gerrit.client.groups.GroupInfo a , com.google.gerrit.client.groups.GroupInfo b ) { return a.name ( ) . compareTo ( b.name ( ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { removeUI ( ) ; }
void onReply ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReply ( getOriginal ( ) , "" , false ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
public java.nio.file.FileSystem createFileSystem ( org.apache.sshd.common.Session session ) throws java.io.IOException { return java.nio.file.FileSystems.getDefault ( ) ; }
public void testEndsBeforeNewline ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 , 3 ) , iter.advance ( 3 ) ) ; }
public static final native void disableUnwantedKey ( java.lang.String category , java.lang.String name ) ;
private void testUserNotPresent ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( "/accounts/sandboxuser" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public java.sql.Timestamp apply ( com.google.gerrit.reviewdb.client.ChangeMessage input ) { return input.getWrittenOn ( ) ; }
public void listNonExistingGroupIncludes_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/groups/non-existing/groups/" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
protected void configure ( ) { listener ( ) . to ( GitRepositoryManager.Lifecycle.class ) ; listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( WorkQueue.Lifecycle.class ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.googlesource.gerrit.plugins.serverconfig.HideFromNonAdmins.class ) ; serve ( "/*" ) . with ( com.googlesource.gerrit.plugins.serverconfig.ServerConfigServlet.class ) ; }
public final java.sql.Timestamp created ( ) { java.sql.Timestamp ts = _get_cts ( ) ; if ( ts == null ) { ts = com.google.gwtjsonrpc.client.impl.ser.JavaSqlTimestamp_JsonSerializer.parseTimestamp ( createdRaw ( ) ) ; _set_cts ( ts ) ; } return ts ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { return source.read ( ) ; }
private com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace getIgnoreWhitespace ( ) { final int sel = ignoreWhitespace.getSelectedIndex ( ) ; if ( 0 <= sel ) { return com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.valueOf ( ignoreWhitespace.getValue ( sel ) ) ; } return getValue ( ) . getIgnoreWhitespace ( ) ; }
public static long nowMs ( ) { return org.joda.time.DateTimeUtils.currentTimeMillis ( ) ; }
public java.lang.String name ( ) { return "Bugzilla" ; }
public void testParse_NameEmail5 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "A U Thor <author@example.com>" ) ; org.junit.Assert.assertEquals ( "A U Thor" , a.name ) ; org.junit.Assert.assertEquals ( "author@example.com" , a.email ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) { }
public com.google.gerrit.extensions.restapi.BinaryResult submitPreview ( java.lang.String format ) throws com.google.gerrit.extensions.restapi.RestApiException { try { submitPreview.setFormat ( format ) ; return submitPreview.apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get submit preview" , e ) ; } }
public void shouldFireEventsForReplicationOfOneRefToOneNode ( ) throws java.net.URISyntaxException { org.easymock.EasyMock.resetToDefault ( pushResultProcessingMock ) ; org.eclipse.jgit.transport.URIish uri = new org.eclipse.jgit.transport.URIish ( "git://someHost/someRepo.git" ) ; pushResultProcessingMock.onRefReplicatedToOneNode ( "someProject" , "someRef" , uri , RefPushResult.SUCCEEDED ) ; pushResultProcessingMock.onRefReplicatedToAllNodes ( "someProject" , "someRef" , 1 ) ; pushResultProcessingMock.onAllRefsReplicatedToAllNodes ( 1 ) ; org.easymock.EasyMock.replay ( pushResultProcessingMock ) ; replicationState.increasePushTaskCount ( "someProject" , "someRef" ) ; replicationState.markAllPushTasksScheduled ( ) ; replicationState.notifyRefReplicated ( "someProject" , "someRef" , uri , RefPushResult.SUCCEEDED ) ; org.easymock.EasyMock.verify ( pushResultProcessingMock ) ; }
private static native void addHistoryHook ( ) ;
protected void configure ( ) { cache ( com.google.gerrit.server.project.SectionSortCache.CACHE_NAME , com.google.gerrit.server.project.SectionSortCache.EntryKey.class , com.google.gerrit.server.project.SectionSortCache.EntryVal.class ) ; bind ( com.google.gerrit.server.project.SectionSortCache.class ) ; }
public void setUp ( ) { module = new com.ericsson.gerrit.plugins.highavailability.Module ( ) ; }
public void run ( ) { apply.run ( ) ; }
public final native void skipUncommented ( boolean s ) ;
private org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.query.change.ChangeData cd ) { return intTerm ( com.google.gerrit.server.query.change.ChangeQueryBuilder.FIELD_CHANGE , cd.getId ( ) . get ( ) ) ; }
private javax.servlet.http.Cookie getGerritCookie ( javax.servlet.http.HttpServletRequest httpRequest ) { for ( javax.servlet.http.Cookie cookie : httpRequest.getCookies ( ) ) { if ( cookie.getName ( ) . equalsIgnoreCase ( com.googlesource.gerrit.plugins.github.oauth.OAuthFilter.GERRIT_COOKIE_NAME ) ) { return cookie ; } } return null ; }
protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.PluginName.class ) . toInstance ( name ) ; }
public void reviewId ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( com.google.gerrit.acceptance.api.revision.RevisionIT.approve ( ) ) ; }
void setShowLineNumbers ( boolean b ) { }
public int compare ( final com.google.gerrit.server.git.CodeReviewCommit a , final com.google.gerrit.server.git.CodeReviewCommit b ) { return ( a.originalOrder ) - ( b.originalOrder ) ; }
void changeGroupOwner ( com.google.gerrit.client.reviewdb.AccountGroupMember.Key key , boolean owner , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public void evictByUsername ( java.lang.String username ) ;
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doExternalSearch ( ) ; }
protected void configure ( ) { bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toProvider ( com.google.gerrit.server.config.GerritServerConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( ( ! ( com.ericsson.gerrit.plugins.syncevents.Context.isForwardedEvent ( ) ) ) && ( event instanceof com.google.gerrit.server.events.ProjectEvent ) ) { executor.execute ( new com.ericsson.gerrit.plugins.syncevents.EventHandler.SyncEventTask ( event ) ) ; } }
private void checkIdentifiedUser ( ) throws com.google.gerrit.extensions.restapi.AuthException { if ( ! ( ( user.get ( ) ) instanceof com.google.gerrit.server.IdentifiedUser ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "drafts only available to authenticated users" ) ; } }
public com.google.common.base.Optional < java.io.InputStream > getResourceInputStream ( java.lang.String resourcePath ) throws java.io.IOException { return com.google.common.base.Optional.absent ( ) ; }
public int compare ( com.google.gerrit.server.plugins.Plugin a , com.google.gerrit.server.plugins.Plugin b ) { return a.getName ( ) . compareTo ( b.getName ( ) ) ; }
public com.google.gerrit.server.index.ChangeIndex getWriteIndex ( int version ) { for ( com.google.gerrit.server.index.ChangeIndex i : writeIndexes ) { if ( ( i.getSchema ( ) . getVersion ( ) ) == version ) { return i ; } } return null ; }
public void patchSetDetail ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail2 ( null , id , null , callback ) ; }
void onAddMe ( com.google.gwt.event.dom.client.ClickEvent e ) { BRANCH ( 74.0F ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { if ( submit ) { submit ( ) ; } else { saveStateOnUnload = false ; goChange ( ) ; } }
public final native void expandAllComments ( boolean e ) ;
protected abstract com.google.gwtorm.client.ResultSet < T > scan ( java.lang.String indexName , byte [ ] fromKey , byte [ ] toKey , int limit ) throws com.google.gwtorm.client.OrmException ;
public void uncache ( org.eclipse.jgit.lib.Config.SectionParser < ? > parser ) { secureConfig.uncache ( parser ) ; }
HEAD ( ) { com.google.gerrit.acceptance.rest.change.@ com.google.gerrit.acceptance.rest.change.Ensure reply dialog ; com.google.gerrit.acceptance.rest.change.@ com.google.gerrit.acceptance.rest.change.Ensure reply are ; }
protected void configure ( ) { factory ( AbandonedSender.Factory.class ) ; }
public void registerKeys ( ) { super . registerKeys ( ) ; regNavigation = com.google.gwtexpui.globalkey.client.GlobalKey.add ( this , keysNavigation ) ; regAction = com.google.gwtexpui.globalkey.client.GlobalKey.add ( this , keysAction ) ; }
private void expandAll ( ) { hiddenSkipMap.remove ( cm.getLineHandle ( marker.find ( ) . getTo ( ) . getLine ( ) ) ) ; marker.clear ( ) ; widget.clear ( ) ; removeFromParent ( ) ; }
void deleteMembers ( java.lang.String ... members ) throws com.google.gerrit.extensions.restapi.RestApiException ;
protected com.google.inject.Injector createInjector ( ) { return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( ) ) ; }
private com.google.gerrit.server.config.GetServerInfo.ReceiveInfo getReceiveInfo ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.server.config.GetServerInfo.ReceiveInfo info = new com.google.gerrit.server.config.GetServerInfo.ReceiveInfo ( ) ; info.enableSignedPush = com.google.gerrit.server.git.gpg.SignedPushModule.isEnabled ( cfg ) ; return info ; }
public static void addGpgKey ( java.lang.String account , java.lang.String armored , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.GpgKeyInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "gpgkeys" ) . post ( com.google.gerrit.client.account.AccountApi.GpgKeysInput.add ( armored ) , cb ) ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; impl.display ( out ) ; }
public void onSuccess ( com.google.gerrit.client.projects.BranchInfo branch ) { addBranch.setEnabled ( true ) ; nameTxtBox.setText ( "" ) ; irevTxtBox.setText ( "" ) ; refreshBranches ( ) ; }
final native java.lang.String message ( ) ;
public void setOriginalSubject ( java.lang.String originalSubject ) { this . originalSubject = originalSubject ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { }
protected void formatChange ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "Reverted" ) ) ; }
public void parse ( ) { generalPreferences = parse ( null ) ; }
public void onFailure ( final java.lang.Throwable caught ) { addBranch.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > in = result.get ( path ) ; if ( in != null ) { addAllToCommentList ( in , toDrafts ) ; } }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , git , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push.rm ( "refs/for/master" ) . getChangeId ( ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return com.google.gerrit.server.OpenIdServiceImpl.getInstance ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { rights.deleteChecked ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.common.data.ProjectDetail > event ) { display ( event.getValue ( ) ) ; }
static com.google.gerrit.client.rpc.RestApi config ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) . view ( "config" ) ; }
private static boolean isInvalidXSRF ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwt.user.client.rpc.InvocationException ) && ( caught.getMessage ( ) . equals ( JsonUtil.ERROR_INVALID_XSRF ) ) ; }
public static org.eclipse.jgit.lib.Config noteDbWriteEnabled ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "notedb" , null , "write" , true ) ; return cfg ; }
private java.lang.String group ( java.lang.String name ) throws java.lang.Exception { name = name ( name ) ; gApi.groups ( ) . create ( name ) ; return name ; }
private static final native void nativeDelete ( java.lang.String name ) ;
public boolean match ( com.google.gerrit.reviewdb.PatchSetApproval p , short value ) { return ( p.getValue ( ) ) >= value ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return deleteAsync ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public void addToNonExistingGroup_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( PUT ( "/groups/non-existing/members/admin" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public static com.google.inject.Key < com.google.gerrit.server.ssh.AbstractCommand > key ( final java.lang.String name ) { return com.google.inject.Key.get ( com.google.gerrit.server.ssh.AbstractCommand.class , com.google.gerrit.server.ssh.Commands.named ( name ) ) ; }
private com.googlesource.gerrit.plugins.github.MenuItem getItem ( java.lang.String anchorName , java.lang.String urlPath ) { return new com.googlesource.gerrit.plugins.github.MenuItem ( anchorName , urlPath , "" ) ; }
public void createDraftChange ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isTrue ( ) ; assertCreateSucceeds ( newChangeInput ( ChangeStatus.DRAFT ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public void configure ( ) { bind ( com.google.gerrit.server.mail.send.EmailSender.class ) . to ( com.google.gerrit.testutil.FakeEmailSender.class ) ; }
public final native com.google.gerrit.client.changes.ChangeInfo.DetailedLabelInfo detailed_label ( java.lang.String n ) ;
public void start ( ) { final org.eclipse.jgit.lib.WindowCacheConfig c = new org.eclipse.jgit.lib.WindowCacheConfig ( ) ; c.fromConfig ( cfg ) ; org.eclipse.jgit.lib.WindowCache.reconfigure ( c ) ; }
public void negativeEndLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 2 , ( - 1 ) , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public boolean handles ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return ( uuid.get ( ) . startsWith ( "global:" ) ) || ( uuid.get ( ) . matches ( "[0-9a-f]{40}" ) ) ; }
void onReload ( com.google.gwt.event.dom.client.ClickEvent e ) { e.preventDefault ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
public void markKeyInvalid ( com.google.gerrit.reviewdb.client.Account.Id accountId , int seq ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = open ( accountId ) ) { if ( authorizedKeys.markKeyInvalid ( seq ) ) { commit ( authorizedKeys ) ; } } }
private static void logAndThrowSubmoduleException ( final java.lang.String errorMsg ) throws com.google.gerrit.server.git.SubmoduleException { com.google.gerrit.server.git.SubmoduleOp.log.error ( errorMsg ) ; throw new com.google.gerrit.server.git.SubmoduleException ( errorMsg ) ; }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder ( ) { return new com.google.gerrit.server.project.AutoValue_SubmitRuleOptions.Builder ( ) . allowClosed ( false ) . skipFilters ( false ) . rule ( null ) ; }
private static java.util.List < com.google.gerrit.server.change.RevisionResource > toResources ( com.google.gerrit.server.change.ChangeResource change , com.google.gerrit.reviewdb.client.PatchSet ps ) { return java.util.Collections.singletonList ( new com.google.gerrit.server.change.RevisionResource ( change , ps ) ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply ( resource ( ) , new com.google.gerrit.server.project.DeleteBranch.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete branch" , e ) ; } }
public java.lang.String getChangeAvatarUrl ( com.google.gerrit.reviewdb.client.UserIdentity user ) ;
private static void doCreateTable ( java.sql.Statement stmt ) throws java.sql.SQLException { stmt.executeUpdate ( ( "CREATE TABLE IF NOT EXISTS account_patch_reviews (" + ( ( ( ( ( ( "account_id INTEGER DEFAULT 0 NOT NULL, " + "change_id INTEGER DEFAULT 0 NOT NULL, " ) + "patch_set_id INTEGER DEFAULT 0 NOT NULL, " ) + "file_name VARCHAR(255) DEFAULT '' NOT NULL, " ) + "CONSTRAINT primary_key_account_patch_reviews " ) + "PRIMARY KEY (account_id, change_id, patch_set_id, file_name)" ) + ")" ) ) ) ; }
private java.lang.String urlDelete ( com.google.gerrit.reviewdb.client.Change c ) { return ( ( ( ( "/changes/" + ( c.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/files/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
void addBranch ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.lang.String branchName , java.lang.String startingRevision , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) ;
private void postEvent ( com.google.gerrit.server.events.RefEvent event ) { try { dispatcher.postEvent ( event ) ; } catch ( com.google.gwtorm.server.OrmException e ) { com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing.log.error ( "Cannot post event" , e ) ; } }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { saveName.setEnabled ( false ) ; setTitleText ( Util.M.group ( newName ) ) ; }
private org.eclipse.jgit.revwalk.RevCommit getHead ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { BRANCH ( 5.0 ) ; }
protected void configure ( ) { post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "set-wip" ) . to ( com.googlesource.gerrit.plugins.wip.WorkInProgressAction.class ) ; post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "set-ready" ) . to ( com.googlesource.gerrit.plugins.wip.ReadyForReviewAction.class ) ; }
java.lang.String syncUrl ( com.ericsson.gerrit.plugins.syncindex.Configuration config ) { return config.getUrl ( ) ; }
public boolean isOwner ( ) { return ( ( isDeclaredOwner ( ) ) && ( ! ( controlForRef ( "refs/*" ) . isBlocked ( Permission.OWNER ) ) ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public < T > void set ( com.google.gerrit.rules.StoredValue < T > sv , T obj ) { sv.set ( engine , obj ) ; }
private static java.lang.String encodeBase64 ( final byte [ ] data ) throws java.io.UnsupportedEncodingException { return new java.lang.String ( org.apache.commons.codec.binary.Base64.encodeBase64 ( data ) , org.apache.commons.net.smtp.AuthSMTPClient.UTF_8 ) ; }
public com.google.gerrit.server.project.ListProjects setShowTree ( boolean show ) { this . showTree = show ; return this ; }
protected com.google.gerrit.sshd.SshScope.Context continuingContext ( com.google.gerrit.sshd.SshScope.Context ctx ) { return new com.google.gerrit.sshd.SshScope.Context ( ctx , ctx.getSession ( ) , ctx.getCommandLine ( ) ) ; }
public void onRevisionCreated ( com.google.gerrit.extensions.events.RevisionCreatedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo c = event.getChange ( ) ; onEvent ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c.project ) , c._number , event.getWho ( ) . email ) ; }
void setContext ( final int context ) { operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { renderSkips ( context ) ; } } ) ; }
public void onSend ( ) { Util.MANAGE_SVC.cherryPickChange ( patchSet.getId ( ) , getMessageText ( ) , getDestinationBranch ( ) , createCallback ( ) ) ; }
public boolean execute ( ) { if ( ( prefs.syntaxHighlighting ( ) ) && ( isAttached ( ) ) ) { setSyntaxHighlighting ( prefs.syntaxHighlighting ( ) ) ; } return false ; }
public static void reloadChanges ( com.google.gerrit.server.git.ChangeSet cs ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : cs.changes ( ) ) { cd.reloadChange ( ) ; cd.setPatchSets ( null ) ; } }
public void removeApproval ( java.lang.String label ) { removeApprovalFor ( getUser ( ) . getAccountId ( ) , label ) ; }
public com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return postReviewers.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.query.change.ChangeData cd ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.server.index.ChangeField.LEGACY_ID.getName ( ) , cd.getId ( ) . get ( ) ) ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , com.google.gerrit.client.diff.SideBySide2.Direction.NEXT ) . run ( ) ; } }
public com.google.gerrit.server.util.ManualRequestContext open ( ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.util.ManualRequestContext ( userFactory.create ( ) , schemaFactory , requestContext ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.ChangeResource > list ( ) { throw new java.lang.IllegalStateException ( "not yet implemented" ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( ( activePatchSetId ) > 0 ) && ( ( activePatchSetId ) < ( body.getWidgetCount ( ) ) ) ) { activate ( ( ( activePatchSetId ) + 1 ) ) ; } }
public synchronized void stop ( ) { HEAD ( 3435 ) ; com.google.gerrit.sshd.c5 Revert ; }
private void initRow ( final int row , final java.lang.String name ) { infoTable.setText ( row , 0 , name ) ; infoTable.getCellFormatter ( ) . addStyleName ( row , 0 , "header" ) ; }
private static java.lang.String getContentPath ( java.lang.String url ) { return ( url + ( url.endsWith ( "/" ) ? com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.CONTENT_PATH : "/" + ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.CONTENT_PATH ) ) ) + "/" ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > watchedProject ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.WATCHED_PROJECT , project.get ( ) ) ; }
public void onScreenLoad ( com.google.gerrit.client.ui.ScreenLoadEvent event ) { if ( ( event.getScreen ( ) ) instanceof com.google.gerrit.client.admin.ProjectScreen ) { com.google.gerrit.client.Gerrit.menuLeft.selectTab ( com.google.gerrit.client.Gerrit.menuLeft.getWidgetIndex ( this ) ) ; } }
public java.lang.String getMethod ( ) { return "GET" ; }
public void onSuccess ( final com.google.gerrit.client.account.SshKeyList result ) { keys.display ( result.keys ) ; keys.finishDisplay ( true ) ; }
private void setOpen ( boolean open ) { com.google.gwt.user.client.ui.UIObject.setVisible ( summary , ( ! open ) ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( contentPanel , open ) ; }
private static long minCachedObjectTime ( ) { return ( new java.util.Date ( ) . getTime ( ) ) - ( com.googlesource.gerrit.plugins.findowners.Cache.CACHE_LIFE_MSEC ) ; }
public void maybeFossilCollectIndexRow ( long now , byte [ ] key , com.google.gwtorm.nosql.IndexRow r ) throws com.google.gwtorm.client.OrmException { if ( ( ( r.getTimestamp ( ) ) + ( db.getMaxFossilAge ( ) ) ) <= now ) { delete ( key ) ; } }
private void initApprovalTypes ( ) { if ( ( approvalTypes ) == null ) { approvalTypes = new java.util.ArrayList < com.google.gerrit.client.data.ApprovalType > ( ) ; } }
public void execute ( ) { sp.setHeight ( "" ) ; setPosition ( getOffsetWidth ( ) , getOffsetHeight ( ) ) ; installFileList ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.POST , cb ) ; }
public void createProjectFooWithGitSuffix ( ) throws java.lang.Exception { java.lang.String name = name ( "foo" ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( ( name + ".git" ) ) . get ( ) . name ) ; }
public void pushWithPrivateByDefaultDisabled ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( createChange ( ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( false ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; if ( ( c.getRevId ( ) ) == null ) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId ( c , cache , change , ps ) ; } update.putComment ( c ) ; }
private boolean isDeclaredOwner ( ) { if ( ( declaredOwner ) == null ) { com.google.gerrit.server.account.GroupMembership effectiveGroups = user.getEffectiveGroups ( ) ; declaredOwner = effectiveGroups.containsAnyOf ( state.getAllOwners ( ) ) ; } return declaredOwner ; }
public void shouldThrowAnExceptionIfAnErrorOccurCreatingSharedDirectory ( ) throws java.io.IOException { java.io.File configuredDirectory = tempFolder.newFile ( ) ; org.mockito.Mockito.when ( pluginConfigMock.getString ( "sharedDirectory" ) ) . thenReturn ( configuredDirectory.getAbsolutePath ( ) ) ; module.getSharedDirectory ( pluginConfigFactoryMock , com.ericsson.gerrit.plugins.highavailability.ModuleTest.PLUGIN_NAME ) ; }
public void onReloadPlugin ( com.google.gerrit.server.plugins.Plugin oldPlugin , com.google.gerrit.server.plugins.Plugin newPlugin ) { com.google.inject.servlet.GuiceFilter filter = load ( newPlugin ) ; if ( filter != null ) { plugins.put ( newPlugin.getName ( ) , filter ) ; } }
public void run ( ) { cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; cmA.refresh ( ) ; cmB.refresh ( ) ; }
public final PatchSet.Id patch_set_id ( ) { return ( has_change_number ( ) ) && ( has_revision_number ( ) ) ? new com.google.gerrit.reviewdb.client.PatchSet.Id ( legacy_id ( ) , _revision_number ( ) ) : null ; }
public java.sql.Connection getConnection ( ) throws java.sql.SQLException { return java.sql.DriverManager.getConnection ( url , connectionInfo ) ; }
void onPublishEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.publishEdit ( changeId ) ; }
private int num ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r ) { return ! ( r.is_edit ( ) ) ? ( 2 * ( ( r._number ( ) ) - 1 ) ) + 1 : 2 * editParent ; }
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( ) . get ( uuid ) ; }
protected void configure ( ) { install ( new com.google.inject.servlet.ServletModule ( ) { @ java.lang.Override protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) ; bind ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) . in ( com.google.inject.Scopes.SINGLETON ) ; serve ( "/" ) . with ( com.google.gerrit.server.http.HostPageServlet.class ) ; serve ( "/Gerrit" ) . with ( com.google.gerrit.server.http.LegacyGerritServlet.class ) ; serve ( "/cat/*" ) . with ( com.google.gerrit.server.http.CatServlet.class ) ; serve ( "/logout" ) . with ( com.google.gerrit.server.http.HttpLogoutServlet.class ) ; serve ( "/prettify/*" ) . with ( com.google.gerrit.server.http.PrettifyServlet.class ) ; serve ( "/signout" ) . with ( com.google.gerrit.server.http.HttpLogoutServlet.class ) ; serve ( "/ssh_info" ) . with ( com.google.gerrit.server.http.SshServlet.class ) ; serve ( "/static/*" ) . with ( com.google.gerrit.server.http.StaticServlet.class ) ; } } ) ; install ( new com.google.gerrit.server.rpc.UiRpcModule ( ) ) ; install ( new com.google.gerrit.server.config.GerritRequestModule ( ) ) ; bind ( com.google.gerrit.server.ssh.SshInfo.class ) . toProvider ( sshInfoProvider ) ; bind ( com.google.gerrit.client.data.GerritConfig.class ) . toProvider ( com.google.gerrit.server.config.GerritConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.account.AccountManager.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( java.net.SocketAddress.class ) . annotatedWith ( com.google.gerrit.server.RemotePeer.class ) . toProvider ( com.google.gerrit.server.http.HttpRemotePeerProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.http.WebSession.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.http.WebSessionManager.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . toProvider ( com.google.gerrit.server.http.HttpCurrentUserProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toProvider ( com.google.gerrit.server.http.HttpIdentifiedUserProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; }
protected org.eclipse.jgit.lib.ObjectId readRef ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { return ( refs ) != null ? refs.get ( getRefName ( ) ) . orNull ( ) : super . readRef ( repo ) ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { final com.google.gerrit.sshd.SshSession s = session.getAttribute ( SshSession.KEY ) ; this . ctx = new com.google.gerrit.sshd.SshScope.Context ( s , commandLine ) ; }
public void abandonReviewableChangeByOtherCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( other ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gwtexpui.globalkey.client.GlobalKey.active.all.onKeyPress ( event ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box , com.google.gerrit.common.changes.Side side ) { diffTable.onRemoveDraftBox ( box , side ) ; }
public static java.lang.String format ( java.lang.String hostname , int port ) { if ( 0 <= ( hostname.indexOf ( ':' ) ) ) { hostname = ( "[" + hostname ) + "]" ; } return ( hostname + ":" ) + port ; }
public void getTagOfNonVisibleProjectWithApi ( ) throws java.lang.Exception { blockRead ( "refs/*" ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . tag ( "tag" ) . get ( ) ; }
public java.lang.String getCharacterEncoding ( ) { return com.google.common.base.Charsets.UTF_8.name ( ) ; }
static void invoke ( com.google.gerrit.client.changes.ChangeInfo change , com.google.gerrit.client.actions.ActionInfo action , com.google.gerrit.client.rpc.RestApi api ) { com.google.gerrit.client.api.DefaultActions.invoke ( action , api , com.google.gerrit.client.api.DefaultActions.callback ( com.google.gerrit.common.PageLinks.toChange ( change.legacy_id ( ) ) ) ) ; }
protected java.lang.String soyTextTemplate ( java.lang.String name ) { return args.soyTofu.newRenderer ( ( "com.google.gerrit.server.mail.template." + name ) ) . setContentKind ( SanitizedContent.ContentKind.TEXT ) . setData ( soyContext ) . render ( ) ; }
static byte [ ] toByteArray ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Ref ref ) { return com.google.gerrit.server.index.change.StalenessChecker.RefState.toByteArray ( project , ref.getName ( ) , ref.getObjectId ( ) ) ; }
public static java.lang.Iterable < java.lang.String > splitOptionValue ( java.lang.String value ) { return com.google.common.collect.Iterables.transform ( com.google.gerrit.server.OptionUtil.COMMA_OR_SPACE.split ( value ) , com.google.gerrit.server.OptionUtil.TO_LOWER_CASE ) ; }
public static native net.codemirror.lib.CodeMirror create ( com.google.gwt.dom.client.Element p , net.codemirror.lib.Configuration cfg ) ;
public void setReversePatchSetOrder ( final boolean reversePatchSetOrder ) { this . reversePatchSetOrder = reversePatchSetOrder ; }
protected java.lang.String readStringImpl ( java.lang.String def , java.lang.String fmt , java.lang.Object ... args ) { return def ; }
public void addReviewerToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
private PatchSet.Id nextPatchSetId ( com.google.gerrit.server.notedb.ChangeNotes notes ) throws java.lang.Exception { return com.google.gerrit.server.ChangeUtil.nextPatchSetId ( testRepo.getRepository ( ) , notes.getChange ( ) . currentPatchSetId ( ) ) ; }
protected void doGet ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { renderHtml ( req , res , "gitiles.repositoryIndex" , buildData ( req ) ) ; }
public void queryOne ( ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds.getConnection ( ) ; java.sql.Statement stat = conn.createStatement ( ) ) { stat.executeQuery ( ( ( "SELECT * FROM " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) + " LIMIT 1" ) ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; initPath ( ) ; setHeaderVisible ( false ) ; }
public void evictAll ( ) ;
public java.lang.String describeForException ( ) { return "label " + ( label.formatWithEquals ( ) ) ; }
protected void configure ( ) { persist ( com.google.gerrit.server.auth.oauth.OAuthTokenCache.OAUTH_TOKENS , java.lang.String.class , com.google.gerrit.extensions.auth.oauth.OAuthToken.class ) ; }
public void onSuccess ( com.google.gerrit.client.documentation.DocInfo indexInfo ) { com.google.gerrit.client.Gerrit.hasDocumentation = indexInfo != null ; }
public void createEmptyChange_MissingMessage ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = new com.google.gerrit.extensions.common.ChangeInfo ( ) ; ci.project = project.get ( ) ; ci.branch = "master" ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "commit message must be non-empty" ) ; }
public void doClaSignupHook ( com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.common.data.ContributorAgreement cla ) { }
protected abstract void encodeKey ( com.google.gwtorm.nosql.IndexKeyBuilder dst , K key ) ;
private void initializeConfiguration ( ) { configuration = new com.ericsson.gerrit.plugins.highavailability.Configuration ( cfgFactoryMock , pluginName ) ; }
void setFormat ( com.google.gerrit.server.query.change.QueryProcessor.OutputFormat format ) { processor.setOutput ( out , format ) ; }
public org.eclipse.jgit.revwalk.RevCommit commitAt ( org.eclipse.jgit.lib.ObjectId expected ) throws java.io.IOException { if ( com.google.common.base.Objects.equal ( src , expected ) ) { return revision ; } return updateRef ( com.google.common.base.Objects.firstNonNull ( expected , org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) , src , getRefName ( ) ) ; }
public void dirty ( final com.google.gerrit.client.reviewdb.ChangeApproval ap ) { if ( ( modified ) == null ) { modified = new java.util.HashSet < com.google.gerrit.client.reviewdb.ChangeApproval > ( ) ; } modified.add ( ap ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.client.UserIdentity who ) { if ( ( who != null ) && ( ( who.getAccount ( ) ) != null ) ) { add ( rt , who.getAccount ( ) ) ; } }
private java.lang.String groupOf ( final com.google.gerrit.reviewdb.RefRight r ) { return groups.get ( r.getAccountGroupId ( ) ) . getName ( ) ; }
public void refresh ( ) { Util.DETAIL_SVC.changeDetail ( changeId , new com.google.gerrit.client.changes.ChangeDetailCache.GerritCallback ( ) ) ; }
static void fireEvent ( com.google.gwtjsonrpc.client.BaseRpcEvent < ? > event ) { com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.fireEvent ( event ) ; event.call = null ; }
public int getContext ( ) { return settings.getContext ( ) ; }
public void stop ( ) { }
public boolean canAdministrateServer ( ) { if ( ( canAdministrateServer ) == null ) { canAdministrateServer = ( ( user ) instanceof com.google.gerrit.server.PeerDaemonUser ) || ( matchAny ( capabilities.administrateServer ) ) ; } return canAdministrateServer ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType , result.canModifyState , result.canModifyMaxObjectSizeLimit ) ; display ( result ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
public void stop ( ) { if ( ( manager ) != null ) { manager.stop ( ) ; manager = null ; sysInjector = null ; sshInjector = null ; } }
public void publish ( com.google.gerrit.extensions.api.changes.PublishChangeEditInput publishChangeEditInput ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publishChangeEdit.apply ( changeResource , publishChangeEditInput ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish change edit" , e ) ; } }
public void go ( ) { com.google.gerrit.client.Dispatcher.patch ( getTargetHistoryToken ( ) , patchKey , patchIndex , patchSetDetail , parentPatchTable ) ; }
public com.google.common.collect.ImmutableList < org.eclipse.jgit.diff.Edit > getEdits ( ) { return com.google.gerrit.server.patch.IntraLineDiff.deepCopyEdits ( edits ) ; }
com.googlesource.gerrit.plugins.quota.PersistentCounter providePushCounter ( @ com.google.inject.name.Named ( value = com.googlesource.gerrit.plugins.quota.PersistentCounter.PUSH ) com.google.common.cache.LoadingCache < com.google.gerrit.reviewdb.client.Project.NameKey , java.util.concurrent.atomic.AtomicLong > counts ) { return new com.googlesource.gerrit.plugins.quota.PersistentCounter ( counts ) ; }
private boolean isHidden ( ) { return getProject ( ) . getState ( ) . equals ( com.google.gerrit.extensions.api.projects.ProjectState.HIDDEN ) ; }
public java.lang.String getOrganisation ( ) { return gitHubRepository.organisation ; }
private final native java.lang.String intraline_statusRaw ( ) ;
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > starredBy ( ) throws com.google.gwtorm.server.OrmException { if ( ( starredByUser ) == null ) { starredByUser = starredChangesUtil.byChange ( legacyId ) ; } return starredByUser ; }
public java.util.List < com.googlesrouce.gerrit.plugins.github.git.GHContent > getDirectoryContent ( java.lang.String path , java.lang.String ref ) throws java.io.IOException { return ghRepository.getDirectoryContent ( path , ref ) ; }
private com.google.common.util.concurrent.ListeningExecutorService newExecutor ( ) { if ( ( threads ) > 0 ) { return com.google.common.util.concurrent.MoreExecutors.listeningDecorator ( dbInjector.getInstance ( com.google.gerrit.server.git.WorkQueue.class ) . createQueue ( threads , "RebuildChange" ) ) ; } else { return com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService ( ) ; } }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public void evictGroups ( ) throws java.io.IOException , javax.servlet.ServletException { configureMocksFor ( Constants.GROUPS ) ; servlet.doPost ( request , response ) ; verifyAll ( ) ; }
public void postUpdate ( com.google.gerrit.server.update.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { assigneeChanged.fire ( change , ctx.getAccount ( ) , deletedAssignee , ctx.getWhen ( ) ) ; }
public void deleteBranchByUserWithForcePushPermission ( ) throws java.lang.Exception { grantForcePush ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( ) ; }
public boolean yesno ( boolean def , java.lang.String msg ) { return false ; }
public com.google.gerrit.server.query.Predicate < T > copy ( java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { if ( ! ( children.isEmpty ( ) ) ) { throw new java.lang.IllegalArgumentException ( "Expected 0 children" ) ; } return this ; }
public T decode ( com.google.protobuf.ByteString buf ) { return decode ( buf.newCodedInput ( ) ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHCommitStatus createCommitStatus ( java.lang.String sha1 , com.googlesrouce.gerrit.plugins.github.git.GHCommitState state , java.lang.String targetUrl , java.lang.String description ) throws java.io.IOException { return ghRepository.createCommitStatus ( sha1 , state , targetUrl , description ) ; }
public void run ( ) { int v = prefs.tabSize ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "tabSize" , v ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "tabSize" , v ) ; }
private void checkPath ( ) { com.google.common.base.Preconditions.checkState ( ( ( path ) != null ) , "missing path on %s view" , type ) ; checkRevision ( ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { final com.google.gerrit.client.changes.ChangeScreen s = ( ( com.google.gerrit.client.changes.ChangeScreen ) ( newScreen ) ) ; changeId = s.changeId ; changeInfo = s.changeInfo ; return this ; }
public void evictInclude ( com.google.gerrit.reviewdb.AccountGroup.Id groupId ) { byInclude.remove ( groupId ) ; }
public boolean canRemoveGroup ( com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return isOwner ( ) ; }
public java.lang.String apply ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.common.base.Objects.firstNonNull ( accountCache.get ( accountId ) . getAccount ( ) . getPreferredEmail ( ) , "n/a" ) ; }
private void readObject ( java.io.ObjectInputStream in ) throws java.io.IOException { prior = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; next = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; strategyName = in.readUTF ( ) ; }
public void formatFooter ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "CommentFooter" ) ) ; }
public void visit ( org.pegdown.ast.DefinitionListNode node ) { wrapChildren ( "dl" , node ) ; }
public void load ( org.eclipse.jgit.lib.Repository git ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.common.base.Preconditions.checkState ( ( ( this . git ) == null ) ) ; this . git = git ; super . load ( git ) ; }
java.util.Map < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Set < com.google.gerrit.server.account.WatchConfig.NotifyType > > getProjectWatches ( ) { checkLoaded ( ) ; return projectWatches ; }
private boolean isPatchSet ( com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.Event e ) { return e instanceof com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.PatchSetEvent ; }
void moveDown ( int row ) { swap ( row , ( row + 1 ) ) ; }
protected com.google.gwtorm.client.ResultSet scanIndex ( com.google.gwtorm.nosql.IndexFunction index , byte [ ] fromKey , byte [ ] toKey , int limit ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { if ( ! ( Util.C.addPermission ( ) . equals ( event.getValue ( ) ) ) ) { onAddPermission ( event.getValue ( ) ) ; } }
public com.googlesource.gerrit.plugins.hooks.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentlink" , pluginName , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.DELETE , content , cb ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GitCloneStatus getStatus ( ) { return GitCloneStatus.FAILED ; }
public void onCreateAccount ( final com.google.gerrit.server.account.AuthRequest who , final com.google.gerrit.reviewdb.client.Account account ) { usernameCache.put ( who.getLocalUser ( ) , account.getId ( ) ) ; }
public static java.lang.String toChange ( com.google.gerrit.reviewdb.client.Change.Id c , java.lang.String b , java.lang.String p ) { java.lang.String u = ( "/c/" + c ) + "/" ; if ( b != null ) { u += b + ".." ; } u += p ; return u ; }
public com.google.gerrit.client.reviewdb.Account.Id getId ( ) { return accountId ; }
public java.util.List < com.google.gerrit.reviewdb.AccountSshKey > run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.accountSshKeys ( ) . byAccount ( getAccountId ( ) ) . toList ( ) ; }
public void testNoAdvance ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 ) , iter.advance ( 0 ) ) ; }
public void nameInConfigMustBeDefined ( ) throws java.lang.Exception { populateGroupConfig ( groupUuid , "[group]\n\tid = 42\n\townerGroupUuid = owners\n" ) ; expectedException.expect ( org.eclipse.jgit.errors.ConfigInvalidException.class ) ; expectedException.expectMessage ( "Name of the group users-XYZ" ) ; com.google.gerrit.server.group.db.GroupConfig.loadForGroup ( repository , groupUuid ) ; }
public void markDeleted ( ) { this . deleted = true ; }
public void onSuccess ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
private void writeObject ( final java.io.ObjectOutputStream out ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectIdSerialization.writeNotNull ( out , aId ) ; org.eclipse.jgit.lib.ObjectIdSerialization.writeNotNull ( out , bId ) ; }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.transport.ReceiveCommand cmd ) { fire ( project , cmd.getRefName ( ) , cmd.getOldId ( ) , cmd.getNewId ( ) , cmd.getType ( ) ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { return execute ( org.apache.http.client.fluent.Request.Delete ( ( ( ( url ) + "/a" ) + endPoint ) ) ) ; }
public com.google.gerrit.server.IdentifiedUser get ( ) { throw new com.google.inject.OutOfScopeException ( "No user on merge thread" ) ; }
private static java.lang.String getGerritServerAvatarUrl ( ) { return Gerrit.RESOURCES.gerritAvatar ( ) . getSafeUri ( ) . asString ( ) ; }
protected void init ( java.lang.String name , com.google.gerrit.server.query.Predicate < T > ... args ) { this . init = true ; this . name = name ; this . children = java.util.Arrays.asList ( args ) ; }
private void showPatch ( final boolean showPatch ) { noDifference.setVisible ( ( ! showPatch ) ) ; patchTable.setVisible ( showPatch ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.Iterable < java.lang.String > projects ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , null , projects ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { change.nextPatchSetId ( ) ; return change ; }
public boolean isVisible ( ) { return ( getProjectControl ( ) . visibleForReplication ( ) ) || ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ) ; }
public com.google.gerrit.reviewdb.server.ReviewDb getDb ( ) { return dbWrapper ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { for ( com.google.gerrit.reviewdb.client.Patch p : detail.getPatches ( ) ) { openWindow ( com.google.gerrit.client.Dispatcher.toPatchUnified ( base , p.getKey ( ) ) ) ; } }
public final native net.codemirror.lib.LineCharacter getTo ( ) ;
public org.pegdown.ast.RootNode parse ( org.parboiled.support.StringBuilderVar body ) { return parser.parseMarkdown ( body.getChars ( ) ) ; }
private boolean isEmpty ( ) { return ( ! ( migration.writeChanges ( ) ) ) || ( changeUpdates.isEmpty ( ) ) ; }
public java.lang.String getMissingDownstreamsMessage ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String message = getConfig ( ) . getString ( "global" , null , "missingDownstreamsMessage" ) ; if ( message == null ) { message = "Missing downstream branches ${missingDownstreams}. Please recreate the automerges." ; } return message ; }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.storage.dfs.DfsRepository > ( new org.eclipse.jgit.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; }
public void createNewChange ( ) throws java.lang.Exception { assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; }
public void run ( ) { clearSkipBars ( ) ; clearMarkers ( ) ; diffTable.sidePanel.clearDiffGutters ( ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; render ( diff ) ; renderSkips ( prefs.context ( ) ) ; }
public java.util.concurrent.ScheduledFuture < ? > scheduleWithFixedDelay ( java.lang.Runnable command , long initialDelay , long delay , java.util.concurrent.TimeUnit unit ) { command.run ( ) ; return null ; }
public java.lang.Object getInternalContext ( ) { return self ( ) . getInternalContext ( ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { buttonClicked = true ; if ( callback != null ) { callback.onSuccess ( result ) ; } hide ( ) ; }
private void initSshd ( ) { sshInjector = createSshInjector ( ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor ( project ) ; return ( projectControl.isReadable ( ) ) && ( ( ! ( projectControl.isHidden ( ) ) ) || ( config.replicateHiddenProjects ( ) ) ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > draft ( com.google.gerrit.reviewdb.Patch.Key patch , com.google.gerrit.reviewdb.Account.Id author ) throws com.google.gwtorm.client.OrmException ;
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT ) throws java.lang.Exception { return buildJson ( path , typeOfT , "" ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , id ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.r1 = this . r1 ; engine.r2 = this . r2 ; }
public com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType ( ) { com.google.gerrit.server.project.ProjectState projectState = getProjectControl ( ) . getProjectState ( ) ; return projectState.getProject ( ) . getSubmitType ( ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( account , new com.google.gerrit.server.account.Index.Input ( ) ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index account" , e ) ; } }
private com.google.gerrit.server.plugins.PluginEntry resourceOf ( java.util.jar.JarEntry jarEntry ) throws java.io.IOException { return new com.google.gerrit.server.plugins.PluginEntry ( jarEntry.getName ( ) , jarEntry.getTime ( ) , com.google.common.base.Optional.of ( jarEntry.getSize ( ) ) , attributesOf ( jarEntry ) ) ; }
public final native double heightAtLine ( int line , java.lang.String mode ) ;
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( control , msgTxt , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNew ( ) ; }
com.google.gerrit.httpd.raw.PolyGerritUiIndexServlet getPolyGerritUiIndexServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.PolyGerritUiIndexServlet ( cache , polyGerritBasePath ( ) ) ; }
protected void onOpenItem ( final com.google.gerrit.client.reviewdb.Project item ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Link.toProjectAdmin ( item.getId ( ) ) ) ; }
public void testGcNonExistingProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( POST ( "/projects/non-existing/gc" ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private static boolean isStateChange ( javax.servlet.http.HttpServletRequest req ) { java.lang.String method = req.getMethod ( ) ; return ! ( ( "GET" . equals ( method ) ) || ( "HEAD" . equals ( method ) ) ) ; }
private PushOneCommit.Result pushTo ( java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , admin.getIdent ( ) ) ; return push.to ( git , ref ) ; }
public static org.eclipse.jgit.lib.Config noteDbEnabled ( ) { @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "notedb" , null , "write" , true ) ; cfg.setBoolean ( "notedb" , "publishedComments" , "read" , true ) ; return cfg ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( irevTxtBox.getText ( ) ) ) { irevTxtBox.setText ( Util.C.defaultRevisionSpec ( ) ) ; irevTxtBox.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public void setLimit ( int n ) { limitFromCaller = n ; }
public static com.google.inject.Key < org.apache.sshd.server.CommandFactory.Command > key ( final java.lang.String name ) { return com.google.inject.Key.get ( CommandFactory.Command.class , com.google.gerrit.server.ssh.Commands.named ( name ) ) ; }
public java.lang.String apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String username = rsrc.getUser ( ) . state ( ) . getUserName ( ) ; if ( username == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } return username ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.server.project.ChangeControl ctl , java.util.Date when , com.google.gerrit.common.data.LabelTypes labelTypes ) ;
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { if ( cell == ( com.google.gerrit.client.changes.ChangeTable.C_STAR ) ) { onStarClick ( row ) ; } }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
private boolean search ( java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > ids ) { return user.memberOfAny ( ids ) ; }
public void commentOnReviewableChangeByOwnerNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { adjustCodeMirrorHeight ( ) ; }
public void remove ( ) { for ( com.google.gerrit.metrics.CallbackMetric < ? > m : all ) { m.remove ( ) ; } }
public RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , byte [ ] content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY , edit , file , content ) ; }
public boolean supportsRoleChanges ( com.gitblit.models.UserModel user , com.gitblit.Constants.Role role ) { return false ; }
public void publish ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) { publishAction.create ( patchSetId ) . to ( callback ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.cache.CachePool.class ) . to ( com.google.gerrit.server.cache.EhcachePoolImpl.class ) ; bind ( com.google.gerrit.server.cache.EhcachePoolImpl.class ) ; listener ( ) . to ( com.google.gerrit.server.cache.EhcachePoolImpl.Lifecycle.class ) ; }
public void commentOnWipChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . notSent ( ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type , com.google.gerrit.reviewdb.client.Account updater ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type , util.accountInfo ( updater ) ) ; }
public void encode ( T obj , final byte [ ] data , int offset , int length ) { encode ( obj , com.google.protobuf.CodedOutputStream.newInstance ( data , offset , length ) ) ; }
public Account.Id apply ( java.lang.String refPart ) { return Account.Id.fromRefPart ( refPart ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.GlobalCapability.hasRange ( permission ) ) { return com.google.gerrit.server.account.CapabilityControl.toRange ( permission , getRules ( permission ) ) ; } return null ; }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , false , expectedStatus ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { setEnabledForUseContentMerge ( ) ; }
void close ( ) { if ( ( update ) != null ) { update.close ( ) ; } ins.close ( ) ; rw.close ( ) ; repo.close ( ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { hide ( ) ; }
private static void assertDeleted ( java.lang.String expectedNewName , com.google.gerrit.server.patch.PatchListEntry e ) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName ( expectedNewName , e ) ; com.google.common.truth.Truth.assertThat ( e.getChangeType ( ) ) . isEqualTo ( ChangeType.DELETED ) ; }
private static java.util.List < com.google.gerrit.server.query.Predicate > list ( final com.google.gerrit.server.query.Predicate ... predicates ) { return java.util.Arrays.asList ( predicates ) ; }
public void testBadEventAndItIsForwarded ( ) throws java.lang.Exception { setUpMocks ( false ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; org.mockito.Mockito.verifyZeroInteractions ( restSession ) ; }
public java.lang.String getLocalUser ( ) { if ( isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT ) ) { return getExternalId ( ) . substring ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT.length ( ) ) ; } return null ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.notedb.ChangeNotes notes ) { return new com.google.gerrit.server.project.ChangeControl ( changeDataFactory , approvalsUtil , refControl , notes , patchSetUtil ) ; }
public void remove ( ) { registry.remove ( name ) ; }
private static java.lang.Class < ? > findClass ( java.lang.String klazzname ) { try { return java.lang.Class.forName ( klazzname ) ; } catch ( java.lang.ClassNotFoundException e ) { throw com.google.gerrit.pgm.shell.JythonShell.noShell ( ( ( "Class " + klazzname ) + " not found" ) , e ) ; } }
public void evictAfterRename ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName ) throws java.io.IOException { if ( oldName != null ) { byName.invalidate ( oldName.get ( ) ) ; } }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.cancelUnsavedChanges ( ) ) ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } }
public void createDraftChange ( ) throws java.lang.Exception { assertChange ( newChangeInfo ( ChangeStatus.DRAFT ) ) ; }
void onSave ( com.google.gwt.event.dom.client.ClickEvent e ) { e.stopPropagation ( ) ; onSave ( ) ; }
public void parseReviewer ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: Change Owner <1@gerrit>\n" ) + "CC: Other Account <2@gerrit>\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: 1@gerrit\n" ) ) ) ; }
void setAutoHideDiffHeader ( boolean hide ) { diffTable.setAutoHideDiffHeader ( hide ) ; }
public abstract boolean match ( T object ) throws com.google.gwtorm.server.OrmException ;
private void assertNotesMigrationState ( com.google.gerrit.server.notedb.NotesMigrationState expected ) throws java.lang.Exception { gerritConfig.load ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.notedb.NotesMigrationState.forConfig ( gerritConfig ) ) . hasValue ( expected ) ; }
public void sendRedirect ( java.lang.String msg ) { status = SC_FOUND ; }
public void testFindAfterDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( 0 , mapper.lineOnOther ( Side.PARENT , 10 ) ) ; }
private java.util.List < com.google.gerrit.server.patch.PatchListEntry > getCurrentPatches ( java.lang.String changeId ) throws java.lang.Exception { return patchListCache.get ( getKey ( null , getCurrentRevisionId ( changeId ) ) , project ) . getPatches ( ) ; }
java.lang.String getBaseUrl ( ) { return baseUrl ; }
public boolean supportsRoleChanges ( com.gitblit.models.TeamModel team , com.gitblit.Constants.Role role ) { return false ; }
protected void formatChange ( ) { formatSalutation ( ) ; formatChangeDetail ( ) ; appendText ( "\n" ) ; appendText ( ( ( " " + ( getPullUrl ( ) ) ) + "\n" ) ) ; }
public java.lang.String resourcePath ( ) { return java.lang.String.format ( "/projects/%s/+refs/%s" , getProjectControl ( ) . getProjectState ( ) . getName ( ) , refName ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
private com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse resp = adminRestSession.post ( ( ( "/changes/" + changeId ) + "/reviewers" ) , in ) ; return com.google.gerrit.acceptance.rest.change.ChangeReviewersIT.readContentFromJson ( resp , com.google.gerrit.extensions.api.changes.AddReviewerResult.class ) ; }
public java.lang.String toString ( ) { return ( "CurrentUser[" + ( getAccountId ( ) ) ) + "]" ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( java.lang.String hash ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , hash ) ) ; }
private static com.google.gerrit.server.IdentifiedUser checkUser ( com.google.gerrit.server.project.RefControl ctl ) { com.google.common.base.Preconditions.checkArgument ( ctl.getCurrentUser ( ) . isIdentifiedUser ( ) , "only IdentifiedUser may create change" ) ; return ( ( com.google.gerrit.server.IdentifiedUser ) ( ctl.getCurrentUser ( ) ) ) ; }
void sendAsync ( ) { sendEmailsExecutor.submit ( this ) ; }
public java.lang.String decode ( final java.lang.String e ) { return com.google.gwt.http.client.URL.decodeComponent ( e ) ; }
static void deleteSessionCookie ( ) { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.SESSION_COOKIE ) ; com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; }
private static java.lang.String skip ( final java.lang.String prefix , final java.lang.String in ) { return in.substring ( prefix.length ( ) ) ; }
protected void assertResultEquals ( com.google.gerrit.reviewdb.client.Change expected , com.google.gerrit.server.change.ChangeJson.ChangeInfo actual ) { org.junit.Assert.assertEquals ( expected.getId ( ) . get ( ) , actual._number ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; com.google.gerrit.client.diff.DiffInfo diffInfo = diff ; diff = null ; display ( diffInfo ) ; }
public java.lang.Object apply ( com.google.gerrit.server.account.AccountResource resource , com.google.gerrit.server.account.CreateAccount.Input input ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( ( ( "Account \"" + ( resource.getUser ( ) . getNameEmail ( ) ) ) + "\" already exists" ) ) ; }
void setCurrentUrl ( com.google.gerrit.client.changes.DownloadUrlLink link ) { urls.setVisible ( false ) ; copyLabel.setText ( cmd ) ; }
public com.google.gerrit.server.project.TagResource parse ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return new com.google.gerrit.server.project.TagResource ( resource.getControl ( ) , list.get ( resource , id ) ) ; }
public com.google.gerrit.client.account.AgreementInfo run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.account.AgreementInfo i = new com.google.gerrit.client.account.AgreementInfo ( ) ; i.load ( com.google.gerrit.client.rpc.Common.getAccountId ( ) , db ) ; return i ; }
public void execute ( ) { new com.google.gerrit.client.auth.openid.OpenIdSignInDialog ( com.google.gerrit.common.auth.SignInMode.REGISTER , null ) . center ( ) ; }
java.lang.String get ( java.lang.String name ) { return flags.cfg.getString ( section , null , name ) ; }
public void setChangedLines ( int insertions , int deletions ) { changedLines = new com.google.gerrit.server.query.change.ChangeData.ChangedLines ( insertions , deletions ) ; }
public void checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , java.util.List < java.lang.String > problems ) { }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { if ( callback != null ) { callback.onFailure ( null ) ; } hide ( ) ; }
public static void restoreTime ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpDelete delete = new org.apache.http.client.methods.HttpDelete ( ( ( ( url ) + "/a" ) + endPoint ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( delete ) ) ; }
private com.google.gerrit.server.project.ProjectControl getProjectControl ( ) { return refControl.getProjectControl ( ) ; }
public java.util.SortedMap < java.lang.String , com.google.gerrit.extensions.common.ProjectInfo > getAsMap ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return list ( this ) ; }
private ReceiveCommitsAdvertiseRefsHook.Result getReceivePackRefs ( ) throws java.lang.Exception { com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook hook = new com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook ( queryProvider , project ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ) { return hook.advertiseRefs ( repo.getAllRefs ( ) ) ; } }
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.extensions.common.ListChangesOption ... options ) throws java.io.IOException { return getChange ( adminSession , changeId , options ) ; }
public void execute ( ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { execute ( com.google.gerrit.server.update.BatchUpdate.Listener.NONE ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( "^WIP.*" , true , true ) ; }
public void removeChangeListener ( com.google.gerrit.common.ChangeListener listener ) { listeners.remove ( listener ) ; }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo access ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getAccess.apply ( checkExists ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get access rights" , e ) ; } }
public void testToString ( ) { org.junit.Assert.assertEquals ( "-author:bob" , com.google.gerrit.server.query.Predicate.not ( f ( "author" , "bob" ) ) . toString ( ) ) ; }
public void deleteReviewerFromWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . notSent ( ) ; }
public java.lang.String encode ( java.lang.String e ) { e = com.google.gwt.http.client.URL.encodeQueryString ( e ) ; e = fixPathImpl ( e ) ; e = fixColonImpl ( e ) ; return e ; }
public org.eclipse.jgit.revwalk.RevCommit getCommit ( ) { return commit.getCommit ( ) ; }
public boolean apply ( com.google.gerrit.common.data.SubmitRecord input ) { return ( input.status ) == ( com.google.gerrit.common.data.SubmitRecord.Status.OK ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( "index" ) . add ( "p" , source ) . add ( "limit" , limit ) . toString ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , id , null ) ; }
public void setProject ( final java.lang.String pattern ) { project = pattern ; }
public void createNewChange ( ) throws java.lang.Exception { assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; }
private static com.google.gerrit.server.query.change.AndSource and ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > ... preds ) { return new com.google.gerrit.server.query.change.AndSource ( java.util.Arrays.asList ( preds ) ) ; }
public void run ( ) { com.google.gerrit.client.Gerrit.doSignIn ( host.getToken ( ) ) ; }
public void assertCanDelete ( com.google.gerrit.reviewdb.client.Project project ) throws java.lang.Exception { if ( db.submoduleSubscriptions ( ) . bySubmoduleProject ( project.getNameKey ( ) ) . iterator ( ) . hasNext ( ) ) { throw new java.lang.Exception ( "Project is subscribed by other projects." ) ; } }
public void evict ( java.lang.String username ) { cache.remove ( new com.google.gerrit.reviewdb.Account.Username ( username ) ) ; }
public void onFocus ( final com.google.gwt.user.client.ui.Widget sender ) { if ( ( currentRow ) < 0 ) { onDown ( ) ; } }
public void onSuccess ( final com.google.gwtjsonrpc.common.com.google.gerrit.client.VoidResult result ) { saveName.setEnabled ( false ) ; setPageTitle ( Util.M.group ( newName ) ) ; groupNameTxt.setText ( newName ) ; }
public java.util.List < java.lang.String > getTeamNamesForRepositoryRole ( java.lang.String role ) { return null ; }
public final native int lineAtHeight ( int height ) ;
public final com.google.gerrit.server.git.gpg.CheckResult check ( org.bouncycastle.openpgp.PGPPublicKey key ) { return check ( key , key.getKeyID ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; com.google.gerrit.acceptance.git.GitUtil.initSsh ( admin ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( admin ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project.get ( ) ) ; git = com.google.gerrit.acceptance.git.GitUtil.cloneProject ( ( ( ( sshSession.getUrl ( ) ) + "/" ) + ( project.get ( ) ) ) ) ; sshSession.close ( ) ; db = reviewDbProvider.open ( ) ; }
protected void init ( ) throws com.google.gerrit.server.mail.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; bccWatchesNotifyAllComments ( ) ; }
protected com.google.gerrit.server.patch.PatchList getPatchList ( ) { if ( ( patchSet ) != null ) { return args.patchListCache.get ( change , patchSet ) ; } return null ; }
public void setUp ( ) throws java.lang.Exception { tr = new org.eclipse.jgit.junit.TestRepository ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "pubkeys" ) ) ) ; store = new com.google.gerrit.server.git.gpg.PublicKeyStore ( tr.getRepository ( ) ) ; }
private com.google.inject.Injector createSshInjector ( ) { return sysInjector.createChildInjector ( new com.google.gerrit.server.ssh.SshModule ( ) ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void cancel ( ) { try { SshScopes.current.set ( context ) ; onExit ( com.google.gerrit.sshd.BaseCommand.STATUS_CANCEL ) ; } finally { SshScopes.current.set ( null ) ; } }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return new com.google.gerrit.server.group.GetGroup.GroupInfo ( resource.getControl ( ) . getGroup ( ) ) ; }
public boolean apply ( com.google.gerrit.server.project.ProjectState in ) { return groups.containsAnyOf ( in.localOwners ) ; }
public void confirm ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = emailTokenVerifier.encode ( admin.getId ( ) , "new.mail@example.com" ) ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/config/server/email.confirm" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NO_CONTENT ) ; }
public void setUseContributorAgreements ( final boolean u ) { useContributorAgreements = u ; }
public void onSuccess ( final com.google.gerrit.client.groups.MemberInfo memberInfo ) { addMemberBox.setEnabled ( true ) ; addMemberBox.setText ( "" ) ; members.insert ( memberInfo ) ; }
private boolean isDev ( ) { return ( options.forcePolyGerritDev ( ) ) || ( ( getPaths ( ) . warFs ) == null ) ; }
private void removeAuditEntriesFor ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) throws java.lang.Exception { com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.AccountGroupMemberAudit > groupMemberAudits = db.accountGroupMembersAudit ( ) . byGroup ( groupId ) ; db.accountGroupMembersAudit ( ) . delete ( groupMemberAudits ) ; }
public void runBare ( ) throws java.lang.Throwable { try { super . runBare ( ) ; } catch ( com.google.gerrit.server.tools.hooks.CommitMsgHookTest.SkipTestOnThisPlatform e ) { java.lang.System.err.println ( ( ( " - Skipping " + ( getName ( ) ) ) + " on this system" ) ) ; } }
private java.util.concurrent.ScheduledThreadPoolExecutor getExecutor ( ) { return queue.getQueue ( user.get ( ) . getCapabilities ( ) . getQueueType ( ) ) ; }
private void redisplay ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( id ) ) ; }
private com.google.gerrit.server.mail.FromAddressGenerator create ( ) { return new com.google.gerrit.server.mail.FromAddressGeneratorProvider ( config , ident , accountCache ) . get ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { reviewers.onOpenForm ( ) ; }
public boolean get ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.ObjectId into , com.google.gerrit.extensions.common.SubmitType submitType , java.lang.String mergeStrategy , com.google.gerrit.reviewdb.client.Branch.NameKey dest ) { return get ( new com.google.gerrit.server.change.MergeabilityCache.EntryKey ( commit , into , submitType , mergeStrategy , dest ) ) ; }
private static org.apache.lucene.index.Term idTerm ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) { return com.google.gerrit.lucene.QueryBuilder.stringTerm ( com.google.gerrit.server.index.project.ProjectField.NAME.getName ( ) , nameKey.get ( ) ) ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int start , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.FakeIndex.Source ( p ) ; }
protected java.lang.String getId ( com.google.gerrit.reviewdb.client.AccountGroup group ) { return group.getGroupUUID ( ) . get ( ) ; }
public void want ( final java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup.Id > ids ) { for ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id : ids ) { want ( id ) ; } }
public void rollback ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
void listBranches ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) ;
protected com.google.gerrit.server.AnonymousUser createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; return env.getInjector ( ) . getInstance ( com.google.gerrit.server.AnonymousUser.class ) ; }
public boolean canUpdate ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD , com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD_UPDATE ) ; }
public void createBranchByAdminCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class ) ; }
public int getInt ( java.lang.String name , int defaultValue ) { return getValue ( name , new com.google.common.base.Function < java.lang.String , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer apply ( java.lang.String stringVal ) { return java.lang.Integer.parseInt ( stringVal ) ; } } , defaultValue ) ; }
private void configureCmdLineParser ( ) { factory ( CmdLineParser.Factory.class ) ; registerOptionHandler ( Account.Id.class , com.google.gerrit.server.ssh.commands.AccountIdHandler.class ) ; registerOptionHandler ( PatchSet.Id.class , com.google.gerrit.server.ssh.commands.PatchSetIdHandler.class ) ; registerOptionHandler ( com.google.gerrit.server.project.ProjectControl.class , com.google.gerrit.server.ssh.commands.ProjectControlHandler.class ) ; }
public com.google.gerrit.extensions.api.changes.RevisionApi revision ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return revisionApi.create ( revisions.parse ( change , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( id ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot parse revision" , e ) ; } }
public com.google.gerrit.server.account.AccountState get ( final com.google.gerrit.reviewdb.Account.Id accountId ) { return byId.get ( accountId ) ; }
void onCreateEdit ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.CreateEditAction.create ( changeId , revision ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , new com.googlesource.gerrit.plugins.verifystatus.client.BuildsDropDownPanel.Factory ( ) ) ; }
public final com.google.gerrit.extensions.common.Theme theme ( ) { java.lang.String s = themeRaw ( ) ; return s != null ? com.google.gerrit.extensions.common.Theme.valueOf ( s ) : com.google.gerrit.extensions.common.Theme.DEFAULT ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , c , user ) ; }
void setName ( java.lang.String n ) { name = n ; id = com.google.gerrit.server.util.Url.encode ( n ) ; }
public void onFailure ( java.lang.Throwable caught ) { super . onFailure ( caught ) ; enableForm ( true ) ; }
private com.google.gerrit.reviewdb.RefRight grant ( com.google.gerrit.reviewdb.ApprovalCategory.Id categoryId , com.google.gerrit.reviewdb.AccountGroup.Id group , java.lang.String ref , int maxValue ) { return grant ( categoryId , group , ref , maxValue , maxValue ) ; }
public static void createProject ( com.google.gerrit.acceptance.SshSession s , java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.git.GitUtil.createProject ( s , name , parent , true ) ; }
public boolean apply ( java.lang.String input ) { return input.endsWith ( suffix ) ; }
public final native com.google.gwt.core.client.JavaScriptObject has_require_change_id ( ) ;
public boolean canRebase ( ) { return canAddPatchSet ( ) ; }
public long getElapsed ( ) { return ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) - ( when ) ; }
protected void preDisplay ( com.google.gerrit.client.diff.DiffInfo diff ) { display ( diff ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ProjectEvent ) { database.storeEvent ( ( ( com.google.gerrit.server.events.ProjectEvent ) ( event ) ) ) ; } }
private static boolean isTag ( final org.eclipse.jgit.lib.Ref ref ) { return ref.getName ( ) . startsWith ( Constants.R_TAGS ) ; }
public void testParse_NameEmail2 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "A <a@b>" ) ; org.junit.Assert.assertEquals ( "A" , a.name ) ; org.junit.Assert.assertEquals ( "a@b" , a.email ) ; }
public void listEmptyGroupIncludes ( ) throws java.lang.Exception { java.lang.String gx = group ( "gx" ) ; com.google.common.truth.Truth.assertThat ( gApi.groups ( ) . id ( gx ) . includedGroups ( ) ) . isEmpty ( ) ; }
public void createDraftChange ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isTrue ( ) ; assertCreateSucceeds ( newChangeInfo ( ChangeStatus.DRAFT ) ) ; }
private void checkAccessAnnotations ( com.google.gerrit.httpd.restapi.RestApiServlet.ViewData viewData ) throws com.google.gerrit.extensions.restapi.AuthException { checkAccessAnnotations ( viewData.pluginName , viewData.view.getClass ( ) ) ; }
private void initChangeUrl ( ) throws javax.mail.MessagingException { msg.setHeader ( "X-Gerrit-ChangeURL" , changeUrl ( ) ) ; }
void onExpandAll ( com.google.gwt.event.dom.client.ClickEvent e ) { expandAll ( ) ; manager.remove ( this , otherBar ) ; cm.focus ( ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHRef [ ] getRefs ( ) throws java.io.IOException { return ghRepository.getRefs ( ) ; }
public com.google.gerrit.extensions.api.projects.BranchInfo apply ( com.google.gerrit.server.project.BranchResource rsrc ) { return rsrc.getBranchInfo ( ) ; }
public void caseSensitiveEmailLocalPart ( ) throws java.lang.Exception { com.google.gitiles.IdentRevFilter filter = com.google.gitiles.IdentRevFilter.author ( "eSt" ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "est@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "Establish@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "tESt@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "tesTing@google.com" ) ) ) ; }
public org.parboiled.Rule [ ] blockPluginRules ( ) { return new org.parboiled.Rule [ ] { cols ( ) , note ( ) , toc ( ) } ; }
private java.nio.file.Path getDeveloperBuckOut ( ) { try { return com.google.gerrit.launcher.GerritLauncher.getDeveloperBuckOut ( ) ; } catch ( java.io.FileNotFoundException e ) { return null ; } }
private byte [ ] formatTxtAsHtml ( java.lang.String txt ) { java.lang.String html = ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( txt ) ) ) + "</pre>" ; return html.getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; }
static void checkEnabled ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ! ( com.google.gerrit.server.util.BouncyCastleUtil.havePGP ( ) ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( "GPG not enabled" ) ; } }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; }
public void deleteFile ( java.lang.String filePath ) throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditDeleteContent.apply ( changeResource.getControl ( ) , filePath ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete file of change edit" , e ) ; } }
public boolean match ( T object ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Preconditions.checkState ( that.isMatchable ( ) , "match invoked, but child predicate %s doesn't implement %s" , that , com.google.gerrit.server.query.Matchable.class . getName ( ) ) ; return ! ( that.asMatchable ( ) . match ( object ) ) ; }
public static com.google.gerrit.server.patch.ComparisonType againstAutoMerge ( ) { return new com.google.gerrit.server.patch.ComparisonType ( null , true ) ; }
private java.util.jar.Manifest getPluginManifest ( com.google.gerrit.server.plugins.PluginScanner scanner ) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.plugins.InvalidPluginException ( "Cannot get plugin manifest" , e ) ; } }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return null ; }
void removeStates ( ) { stateMap.clear ( ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.IntegrationException { return args.mergeUtil.canCherryPick ( args.mergeSorter , args.repo , mergeTip , args.rw , toMerge ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { b.setEnabled ( false ) ; Util.MANAGE_SVC.submit ( patchSet.getId ( ) , new com.google.gerrit.client.changes.ChangeDetailCache.GerritWidgetCallback ( b ) { public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { onSubmitResult ( result ) ; } } ) ; }
public final native double getScrollSetAt ( ) ;
public void save ( ) { lastUpdated = new java.util.Date ( ) ; com.googlesource.gerrit.plugins.repositoryuse.Usage.table.insertOrUpdate ( this ) ; com.googlesource.gerrit.plugins.repositoryuse.Usage.log.info ( java.lang.String.format ( "Saving Usage: %s, %s, %s, %s" , project , branch , destination , ref ) ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { enableForm ( true ) ; saveName.setEnabled ( false ) ; saveDesc.setEnabled ( false ) ; display ( result ) ; }
private boolean isOpen ( ) { return com.google.gwt.user.client.ui.UIObject.isVisible ( contentPanel ) ; }
abstract com.google.gerrit.server.update.RetryHelper.Options autoBuild ( ) ;
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException ;
public com.google.gerrit.extensions.restapi.BinaryResult setCharacterEncoding ( java.lang.String encoding ) { characterEncoding = encoding ; return this ; }
public java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup > load ( com.google.gerrit.reviewdb.client.AccountGroup.Id key ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return java.util.Optional.ofNullable ( db.accountGroups ( ) . get ( key ) ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.ReviewDb > db , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , null , db , id ) ; }
public void deleteReviewerFromWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . notSent ( ) ; }
public static void draft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . get ( cb ) ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.reviewdb.client.Change change , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account.Id accountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when , java.util.Comparator < java.lang.String > labelNameComparator ) ;
com.google.gerrit.server.account.GroupDetailFactory create ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) ;
public java.lang.String getShortName ( ) { final java.lang.String n = get ( ) ; if ( n.startsWith ( "refs/heads/" ) ) { return n.substring ( "refs/heads/" . length ( ) ) ; } return n ; }
public final native void setWidth ( java.lang.String w ) ;
public void setCommit ( org.eclipse.jgit.lib.ObjectId commit ) { com.google.common.base.Preconditions.checkArgument ( ( commit != null ) ) ; this . commit = commit ; }
public boolean isEnabled ( ) { return ( enabled ) && ( isVisible ( ) ) ; }
public PatchSet.Id newPatchSetId ( ) { return new com.google.gerrit.reviewdb.PatchSet.Id ( changeId , ( ++ ( nbrPatchSets ) ) ) ; }
public void delete_MethodNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( ( ( "/accounts/" + ( admin.username ) ) + "/username" ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_METHOD_NOT_ALLOWED ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { final com.google.gerrit.client.changes.ChangeScreen s = ( ( com.google.gerrit.client.changes.ChangeScreen ) ( newScreen ) ) ; changeId = s.changeId ; changeInfo = s.changeInfo ; starred = s.starred ; return this ; }
private java.lang.String urlPut ( com.google.gerrit.reviewdb.client.Change c ) { return ( urlDelete ( c ) ) + "/content" ; }
public java.lang.String getCommand ( java.lang.String url ) { return ( "git pull " + url ) + " ${ref}" ; }
private static com.google.gwt.user.client.ui.Label newDescriptionLabel ( ) { final com.google.gwt.user.client.ui.Label d = new com.google.gwt.user.client.ui.Label ( ) ; d.setStyleName ( "gerrit-ChangeScreen-Description" ) ; return d ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; }
public void abandonReviewableChangeByOtherCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer , other ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
private void afterTest ( ) throws java.lang.Exception { server.stop ( ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , java.lang.Iterable < T > > buildRepeatable ( com.google.gerrit.server.index.FieldDef.GetterWithArgs < I , java.lang.Iterable < T > > getter ) { return new com.google.gerrit.server.index.FieldDef ( name , type , stored , true , getter ) ; }
public void preDisplay ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; }
private boolean isAuthorizedCall ( javax.servlet.http.HttpServletRequest req ) { return ( ! ( com.google.common.base.Strings.isNullOrEmpty ( req.getServletPath ( ) ) ) ) && ( req.getServletPath ( ) . startsWith ( com.google.gerrit.httpd.plugins.HttpPluginServlet.AUTHORIZED_PREFIX ) ) ; }
int limit ( ) ;
public void testChangeOwner_OwnerACLNotGranted ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException , org.eclipse.jgit.errors.ConfigInvalidException { approve ( sessionOwner , createChange ( ) , HttpStatus.SC_FORBIDDEN ) ; }
public static com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle create ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) { return new com.google.gerrit.server.notedb.AutoValue_AbstractChangeNotes_LoadHandle ( walk , ( id != null ? id.copy ( ) : null ) ) ; }
public void start ( ) { startThread ( new java.lang.Runnable ( ) { public void run ( ) { runImp ( ) ; } } ) ; }
public void visit ( org.pegdown.ast.CodeNode node ) { wrapText ( "code" , node ) ; }
public void run ( ) { cm.getInputField ( ) . blur ( ) ; clearActiveLine ( cm ) ; clearActiveLine ( otherCm ( cm ) ) ; }
public java.util.Map < java.lang.String , java.util.List < com.google.gerrit.extensions.common.CommentInfo > > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.get ( ) . setFillAccounts ( includeAuthorInfo ( ) ) . format ( listComments ( rsrc ) ) ; }
public UiAction.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Edit Topic" ) . setVisible ( rsrc.permissions ( ) . testOrFalse ( ChangePermission.EDIT_TOPIC_NAME ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , null , db , id , null ) ; }
public abstract boolean moreChanges ( ) ;
private void loadDefaults ( ) { approvals = com.google.common.collect.ImmutableListMultimap.of ( ) ; reviewers = com.google.common.collect.ImmutableSetMultimap.of ( ) ; submitRecords = com.google.common.collect.ImmutableList.of ( ) ; }
public java.lang.String toString ( ) { return "is:reviewed" ; }
public void deleteGpgKey ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) ; java.lang.String id = key.getKeyIdString ( ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; addGpgKey ( key.getPublicKeyArmored ( ) ) ; assertKeys ( key ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . delete ( ) ; assertKeys ( ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
default void onUpdate ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.server.account.externalids.ExternalId updatedExtId ) throws java.io.IOException { onUpdate ( newNotesRev , java.util.Collections.singleton ( updatedExtId ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject msg ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; hide ( ) ; }
public PatchSet.Id newPatchSetId ( ) { return new com.google.gerrit.reviewdb.PatchSet.Id ( changeId , ( ++ ( nbrPatchSets ) ) ) ; }
protected void configure ( ) { bind ( com.google.gwtjsonrpc.client.RemoteJsonService.class ) . toInstance ( srv ) ; }
public com.google.gerrit.server.change.ChangeInserter setDraft ( boolean draft ) { change.setStatus ( ( draft ? Change.Status.DRAFT : Change.Status.NEW ) ) ; patchSet.setDraft ( draft ) ; return this ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doExternalSearch ( ) ; } }
public void setOutputFormat ( com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusQueryShell.OutputFormat fmt ) { outputFormat = fmt ; }
public void put ( K key , V value ) { cache.put ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) , new com.google.gerrit.ehcache.SerializableProtobuf < V > ( value , valueCodec ) ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChangeEdit.apply ( changeResource , new com.google.gerrit.server.change.DeleteChangeEdit.Input ( ) ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change edit" , e ) ; } }
public void run ( ) { try { synchronized ( list ) { list.add ( cmd ) ; } runImp ( ) ; } finally { synchronized ( list ) { list.remove ( cmd ) ; } } }
public void add ( java.lang.String name , com.google.gerrit.extensions.common.AccountInfo account ) { if ( account != null ) { args.add ( name ) ; args.add ( format ( account ) ) ; } }
public boolean allRefsAreVisible ( ) { return canPerformOnAllRefs ( ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ; }
private void apply ( com.google.gerrit.server.index.ChangeIndex i , com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { if ( delete ) { i.delete ( cd ) ; } else { i.replace ( cd ) ; } }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.Change > query ( com.google.gerrit.reviewdb.ReviewDb db , int lim , java.lang.String key ) throws com.google.gwtorm.client.OrmException { return db.changes ( ) . allClosedPrev ( s.getCode ( ) , key , lim ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT , expectedError ) ; }
private static long keyId ( byte [ ] fp ) { return java.nio.ByteBuffer.wrap ( fp ) . getLong ( ( ( fp.length ) - 8 ) ) ; }
void index ( com.google.gerrit.reviewdb.client.Account.Id id , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation ) throws java.io.IOException { indexer.index ( id ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug ( "Account {} successfully indexed" , id ) ; }
public int hash ( com.google.gerrit.server.patch.CharText seq , int ptr ) { return seq.charAt ( ptr ) ; }
private java.util.Collection < com.google.gerrit.server.index.project.ProjectIndex > getWriteIndexes ( ) { if ( ( indexes ) != null ) { return indexes.getWriteIndexes ( ) ; } return ( index ) != null ? java.util.Collections.singleton ( index ) : com.google.common.collect.ImmutableSet.of ( ) ; }
public com.google.gerrit.server.patch.IntraLineDiff get ( org.eclipse.jgit.lib.ObjectId aId , com.google.gerrit.server.patch.Text aText , org.eclipse.jgit.lib.ObjectId bId , com.google.gerrit.server.patch.Text bText , java.util.List < org.eclipse.jgit.diff.Edit > edits ) ;
private void expandSideAll ( ) { clearMarkerAndWidget ( ) ; removeFromParent ( ) ; updateSelection ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void onFailure ( java.lang.Throwable caught ) { goChange ( ) ; super . onFailure ( caught ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey ) ) { return readPatchList ( key , repo ) ; } }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return noteUtil.newIdent ( author , when , serverIdent ) ; }
public void noNotificationForDraftPatchSetsForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%draft" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public UiAction.Description getDescription ( com.google.gerrit.server.change.RevisionResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Edit Description" ) . setVisible ( rsrc.getControl ( ) . canEditDescription ( ) ) ; }
public static com.google.gitiles.GitilesView.Builder zip ( ) { return new com.google.gitiles.GitilesView.Builder ( com.google.gitiles.GitilesView.Type.ZIP ) ; }
com.google.gerrit.server.git.NotesBranchUtil create ( org.eclipse.jgit.lib.Repository db ) ;
public com.google.gerrit.server.project.ChangeControl getControl ( ) { com.google.common.base.Preconditions.checkNotNull ( ctl ) ; return ctl ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , new com.googlesource.gerrit.plugins.examples.wuichangescreenheaderrightofpopdowns.client.BuildsDropDownPanel.Factory ( ) ) ; }
protected com.google.gerrit.client.account.ContactPanel createWidget ( ) { return new com.google.gerrit.client.account.ContactPanel ( this ) ; }
public void testUpsertTwoNotExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE ) ; java.sql.PreparedStatement insert = stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; verifyIds ( insert , 1 , 2 ) ; }
public void setUpMocks ( ) { servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet ( indexer ) ; id = Account.Id.parse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ; org.mockito.Mockito.when ( req.getPathInfo ( ) ) . thenReturn ( ( "/index/account/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ) ) ; }
public void deleteVote ( java.lang.String label ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply ( new com.google.gerrit.server.change.VoteResource ( reviewer , label ) , null ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete vote" , e ) ; } }
public final native void set_commit ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo c ) ;
static void initialize ( org.eclipse.jgit.lib.Config cfg ) { cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter.MARKDOWN.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/x-markdown" ) ; }
public void onSuccess ( com.google.gwt.resources.client.TextResource resource ) { com.google.gwt.dom.client.StyleInjector.inject ( resource.getText ( ) ) ; }
public static void getMessage ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.String > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id.getParentKey ( ) . get ( ) ) . view ( "edit_message" ) . get ( com.google.gerrit.client.changes.ChangeFileApi.wrapper ( cb ) ) ; }
com.google.gitiles.CommitJsonData.Commit toJsonData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit c , com.google.gitiles.DateFormatterBuilder.DateFormatter df ) throws java.io.IOException { return toJsonData ( req , c , com.google.gitiles.CommitJsonData.DEFAULT_FIELDS , df ) ; }
public java.lang.String getQueryString ( ) { return com.google.gerrit.util.http.testutil.FakeHttpServletRequest.paramsToString ( parameters ) ; }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo access ( com.google.gerrit.extensions.api.access.ProjectAccessInput p ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setAccess.apply ( checkExists ( ) , p ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put access rights" , e ) ; } }
public void onFailure ( final java.lang.Throwable caught ) { k.getWatch ( ) . setNotifySubmittedChanges ( oldVal ) ; notifySubmittedChanges.setChecked ( oldVal ) ; super . onFailure ( caught ) ; }
public void testParse_Email1 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "author@example.com" ) ; org.junit.Assert.assertNull ( a.name ) ; org.junit.Assert.assertEquals ( "author@example.com" , a.email ) ; }
public com.google.gerrit.server.group.MembersCollection.MemberInfo apply ( com.google.gerrit.server.group.MemberResource resource ) { return com.google.gerrit.server.group.MembersCollection.parse ( resource.getUser ( ) . getAccount ( ) ) ; }
private void doReplay ( ) { org.easymock.EasyMock.replay ( schemaFactory , schema , subscriptions , urlProvider , repoManager , replication ) ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.account ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.account ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( ) ; }
public io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings createPluginSettings ( ) { return new io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings ( pluginUserName , branch , fileRef , localFilePath , allowMaintainersSubmit , autoAddReviewers , autoSubmit ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicMap.mapOf ( binder ( ) , com.googlesource.gerrit.plugins.imagare.ImageResource.IMAGE_KIND ) ; bind ( com.googlesource.gerrit.plugins.imagare.ImagesCollection.class ) ; child ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "images" ) . to ( com.googlesource.gerrit.plugins.imagare.ImagesCollection.class ) ; }
public boolean isExpandAllComments ( ) { return diffPrefs.isExpandAllComments ( ) ; }
protected java.util.Optional < com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken > createToken ( java.util.List < java.lang.String > values ) { return java.util.Optional.of ( new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken ( values.get ( 0 ) ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.client.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( authConfig , accountCache , realm , null , null , id ) ; }
private boolean isProjectStatePermittingWrite ( ) { return getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( ProjectState.ACTIVE ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_OK , null ) ; }
public void listTagsOfNonExistingProject ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/projects/non-existing/tags" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public void setUserName ( java.lang.String user ) { userName = user ; }
public void onSuccess ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { for ( com.google.gerrit.reviewdb.client.Change c : changes ) { @ java.lang.SuppressWarnings ( value = "unused" ) java.util.concurrent.Future < ? > possiblyIgnoredError = executor.submit ( new com.google.gerrit.server.index.change.ReindexAfterUpdate.Index ( event , c.getId ( ) ) ) ; } }
public final native int getTo ( ) ;
public java.util.Map < java.util.Map.Entry < java.lang.String , java.lang.String > , com.google.common.base.Optional < com.google.gerrit.reviewdb.client.PatchSetApproval > > get ( ) { return com.google.common.collect.Maps.newLinkedHashMap ( ) ; }
public final native java.lang.String ownerUuid ( ) ;
public com.google.gerrit.sshd.SshKeyCacheEntryCollection get ( java.lang.String username ) { return cache.get ( new com.google.gerrit.reviewdb.Account.Username ( username ) ) ; }
public void onFailure ( java.lang.Throwable e ) { enableEdit ( true ) ; super . onFailure ( e ) ; }
public void setCharacterEncoding ( java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
void ownedProjects ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.Project > > callback ) ;
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.index.IndexCollection indexes ) { com.google.gerrit.server.index.change.ChangeIndex index = ( indexes != null ) ? indexes.getSearchIndex ( ) : null ; return index != null ? index.getSchema ( ) : null ; }
protected java.io.Writer startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return newWriter ( res ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { r.add ( result ) ; }
public org.parboiled.Rule [ ] blockPluginRules ( ) { return new org.parboiled.Rule [ ] { cols ( ) , note ( ) , toc ( ) } ; }
com.google.gerrit.reviewdb.AccountGroup get ( com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey name ) throws com.google.gwtorm.client.OrmException ;
private static com.google.gerrit.acceptance.RestResponse deletePatchSet ( java.lang.String changeId , com.google.gerrit.reviewdb.client.PatchSet ps , com.google.gerrit.acceptance.RestSession s ) throws java.lang.Exception { return s.delete ( ( ( ( "/changes/" + changeId ) + "/revisions/" ) + ( ps.getRevision ( ) . get ( ) ) ) ) ; }
private void assertDeleteForbidden ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "Cannot delete branch" ) ; branch ( ) . delete ( ) ; }
private void assertCreateChange ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { boolean create = u.asForProject ( ) . ref ( ref ) . testOrFalse ( RefPermission.CREATE_CHANGE ) ; com.google.common.truth.Truth.assertThat ( create ) . named ( ( "can create change " + ref ) ) . isTrue ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public abstract org.eclipse.jgit.lib.Repository createRepository ( java.lang.String name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException ;
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( final com.google.gerrit.reviewdb.client.Account account ) { com.google.gerrit.server.events.AccountAttribute who = new com.google.gerrit.server.events.AccountAttribute ( ) ; who.name = account.getFullName ( ) ; who.email = account.getPreferredEmail ( ) ; who.username = account.getUserName ( ) ; return who ; }
protected void migrateData ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws java.sql.SQLException { try ( java.sql.Statement stmt = ( ( com.google.gwtorm.jdbc.JdbcSchema ) ( db ) ) . getConnection ( ) . createStatement ( ) ) { stmt.execute ( ( "CREATE INDEX patch_sets_byRevision" + " ON patch_sets (revision)" ) ) ; } }
public void doClaSignupHook ( com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.common.data.ContributorAgreement cla ) { }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.client.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
public com.google.gerrit.server.config.PluginConfig getWithInheritance ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String pluginName ) throws com.google.gerrit.server.project.NoSuchProjectException { return get ( projectName , pluginName ) . withInheritance ( projectStateFactory ) ; }
public abstract boolean yesno ( java.lang.String fmt , java.lang.Object ... args ) ;
private java.lang.String createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , owner.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
com.google.gerrit.server.account.externalids.ExternalId get ( com.google.gerrit.server.account.externalids.ExternalId.Key key ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { checkReadEnabled ( ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.externalids.ExternalIdNotes.loadReadOnly ( repo ) . get ( key ) . orElse ( null ) ; } }
private static boolean isApproved ( com.google.gerrit.client.changes.ChangeInfo.LabelInfo label , com.google.gerrit.client.changes.ChangeInfo.ApprovalInfo ai ) { return ( ( label.approved ( ) ) != null ) && ( ( label.approved ( ) . _accountId ( ) ) == ( ai._accountId ( ) ) ) ; }
private final native void setIgnoreWhitespaceRaw ( java.lang.String i ) ;
private void renderSubmitType ( java.lang.String action ) { try { com.google.gerrit.reviewdb.client.Project.SubmitType type = Project.SubmitType.valueOf ( action ) ; submitActionText.setInnerText ( com.google.gerrit.client.admin.Util.toLongString ( type ) ) ; } catch ( java.lang.IllegalArgumentException e ) { submitActionText.setInnerText ( action ) ; } }
public void subsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "refs/changes/02/2/1" , "refs/heads/branch" ) ; }
public boolean accept ( java.io.File pathname ) { java.lang.String n = pathname.getName ( ) ; return ( ! ( n.startsWith ( ".last_" ) ) ) && ( ! ( n.startsWith ( ".next_" ) ) ) ; }
private static com.google.gerrit.reviewdb.ApprovalCategoryValue value ( final com.google.gerrit.reviewdb.ApprovalCategory cat , final int value , final java.lang.String name ) { return new com.google.gerrit.reviewdb.ApprovalCategoryValue ( new com.google.gerrit.reviewdb.ApprovalCategoryValue.Id ( cat.getId ( ) , ( ( short ) ( value ) ) ) , name ) ; }
public com.google.gerrit.lucene.LuceneChangeIndex getChangeIndex ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.lucene.LuceneChangeIndex ( cfg , sitePaths , fillArgs , readOnly ) ; }
public void testStringASCII ( ) { com.google.gwtorm.nosql.IndexKeyBuilder ib = new com.google.gwtorm.nosql.IndexKeyBuilder ( ) ; ib.add ( "hi" ) ; com.google.gwtorm.nosql.IndexKeyBuilderTest.assertEquals ( new byte [ ] { 'h' , 'i' } , ib ) ; }
private void updateSkipNum ( ) { numSkipLines -= com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND ; skipNum.setText ( java.lang.String.valueOf ( numSkipLines ) ) ; checkAndUpdateArrows ( ) ; }
public void setIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.SideBySide2.DisplaySide side ) { return ( side == ( com.google.gerrit.client.diff.SideBySide2.DisplaySide.A ) ) && ( ( base ) != null ) ? base : revision ; }
protected void onClick ( final com.google.gwt.user.client.Event event ) { movePointerTo ( id ) ; super . onClick ( event ) ; }
public T get ( ) { return com.google.gerrit.sshd.SshScope.getContext ( ) . get ( key , creator ) ; }
public void setContext ( final short s ) { context = s ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { topic.onEdit ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; injector = com.google.inject.Guice.createInjector ( new com.googlesource.gerrit.plugins.hooks.workflow.ActionControllerTest.TestModule ( ) ) ; }
protected abstract java.util.concurrent.Callable < ? > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) ;
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.SubmittedTogetherInfo info = apply ( resource , options ) ; if ( options.isEmpty ( ) ) { return info.changes ; } return info ; }
public void start ( ) { final org.eclipse.jgit.storage.file.WindowCacheConfig c = new org.eclipse.jgit.storage.file.WindowCacheConfig ( ) ; c.fromConfig ( cfg ) ; org.eclipse.jgit.storage.file.WindowCache.reconfigure ( c ) ; }
private java.lang.String url ( com.google.gerrit.client.diff.FileInfo info ) { return info.binary ( ) ? com.google.gerrit.client.Dispatcher.toUnified ( base , patchSetId , info.path ( ) ) : com.google.gerrit.client.Dispatcher.toSideBySide ( base , patchSetId , info.path ( ) ) ; }
public void onEvent ( final com.google.gerrit.server.events.Event event ) { offer ( event ) ; }
public void insert ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { }
public static com.google.gerrit.client.rpc.RestApi edit ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit" ) ; }
public void start ( ) { if ( ( listeners ) == null ) { listeners = all ( ) ; for ( com.google.gerrit.lifecycle.LifecycleListener obj : listeners ) { obj.start ( ) ; } } }
public boolean isSubmit ( ) { return com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId.SUBMIT.get ( ) . equals ( getLabel ( ) ) ; }
public org.eclipse.jgit.patch.FileHeader call ( ) throws java.io.IOException { return diffFormatter.toFileHeader ( diffEntry ) ; }
public void notSticky ( ) throws java.lang.Exception { assertNotSticky ( java.util.EnumSet.of ( com.google.gerrit.extensions.client.ChangeKind.REWORK , com.google.gerrit.extensions.client.ChangeKind.TRIVIAL_REBASE , com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE ) ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , remotePeerProvider , dbProvider , id , caller ) ; }
public void addPublishedComments ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchLineComment c : comments ) { update.upsertComment ( c ) ; } db.patchComments ( ) . upsert ( comments ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { display ( result ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_OK , null ) ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( final com.google.gerrit.reviewdb.Change change ) { return new com.google.gerrit.server.project.ChangeControl ( this , change ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return user.getRealUser ( ) ; BRANCH ( e39cb5 ) ; EmailReviewComments : Provide = $missing$ ; com.google.gerrit.server.change.the current ; instead ( exc ) ; }
public void run ( ) { switch ( getIntraLineStatus ( ) ) { case OFF : case OK : toggleShowIntraline ( ) ; break ; default : break ; } }
public void onChange ( final com.google.gwt.event.dom.client.ChangeEvent event ) { save.setEnabled ( true ) ; }
public void evict ( final com.google.gerrit.reviewdb.Account.Id accountId ) { byId.remove ( accountId ) ; }
private com.google.common.util.concurrent.ListeningExecutorService newExecutor ( ) { if ( ( threads ) > 0 ) { return com.google.common.util.concurrent.MoreExecutors.listeningDecorator ( dbInjector.getInstance ( com.google.gerrit.server.git.WorkQueue.class ) . createQueue ( threads , "RebuildChange" ) ) ; } else { return com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ; } }
default void afterRefUpdates ( ) throws java.lang.Exception { }
void onLeftSide ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { view.diffTable.setVisibleA ( e.getValue ( ) ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , account , com.google.common.collect.ImmutableSet.of ( ) , new java.util.HashMap < > ( ) ) ; }
public static void createEdit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "create_edit" ) . post ( com.google.gwt.core.client.JavaScriptObject.createObject ( ) , cb ) ; }
final Account.FieldName get ( ) { return Account.FieldName.valueOf ( getRaw ( ) ) ; }
public final native void set_commit ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo c ) ;
public boolean isVisible ( ) { return ( ( projectControl.visibleForReplication ( ) ) || ( canPerform ( Permission.READ ) ) ) && ( canRead ( ) ) ; }
public java.lang.String getId ( ) { return ( id ) != null ? id : name ; }
public void createGroup ( final java.lang.String newName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.reviewdb.client.AccountGroup.Id > callback ) { createGroupFactory.create ( newName ) . to ( callback ) ; }
public org.eclipse.jgit.lib.ObjectInserter getInserter ( ) throws java.io.IOException { initRepository ( ) ; return inserter ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.ApiGlue.addHistoryHook ( ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( newUserName ) ; enableUI ( true ) ; }
private static java.lang.String getUrl ( java.lang.String baseUrl , java.lang.String path ) throws java.net.MalformedURLException { return new java.net.URL ( new java.net.URL ( baseUrl ) , path ) . toExternalForm ( ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.server.change.ChangeJson.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
private static java.lang.String getUrl ( java.lang.String pluginName , int changeId , java.lang.Integer patchSetIdA , int patchSetIdB , java.lang.String fileName ) { return ( com.googlesource.gerrit.plugins.xdocs.client.SideBySideDiffPreviewWebLink.getUrl ( pluginName , changeId , patchSetIdA , patchSetIdB , fileName ) ) + ",unified" ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.Change > query ( com.google.gerrit.reviewdb.ReviewDb db , int lim , java.lang.String key ) throws com.google.gwtorm.client.OrmException { return searchQuery ( db , query , lim , key , com.google.gerrit.httpd.rpc.ChangeListServiceImpl.QUERY_NEXT ) ; }
protected void configureServlets ( ) { serve ( "/*" ) . with ( com.googlesource.gerrit.plugins.serverconfig.ServerConfigServlet.class ) ; }
public java.lang.String getUrl ( java.lang.String project ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( "repo download " ) ; r.append ( project ) ; return r.toString ( ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.server.http.RequestCleanupFilter.class ) ; filter ( "/*" ) . through ( com.google.gerrit.server.http.UrlRewriteFilter.class ) ; }
public void markReady ( boolean ready ) throws java.io.IOException { com.google.gerrit.lucene.LuceneChangeIndex.setReady ( sitePaths , schema.getVersion ( ) , ready ) ; }
private com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig getConfig ( java.lang.String defaultConfig , com.google.gerrit.reviewdb.client.Project.NameKey projName ) throws org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projName , defaultConfig ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; return config ; }
public void testGetIndexScript ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( hana.getIndexScript ( ) ) . isEqualTo ( org.hamcrest.CoreMatchers.sameInstance ( ScriptRunner.NOOP ) ) ; }
static boolean doCheckInvalidLineEndings ( com.google.gerrit.server.config.PluginConfig cfg ) { return cfg.getBoolean ( com.googlesource.gerrit.plugins.uploadvalidator.InvalidLineEndingValidator.KEY_CHECK_REJECT_WINDOWS_LINE_ENDINGS , false ) ; }
public void rebuildAndCheckChanges ( com.google.gerrit.reviewdb.client.Change ... changeIds ) throws java.lang.Exception { rebuildAndCheckChanges ( java.util.Arrays.asList ( changeIds ) ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( cleanupSitePath ) { if ( sitePath.exists ( ) ) { org.eclipse.jgit.util.FileUtils.delete ( sitePath , FileUtils.RECURSIVE ) ; } } super . tearDown ( ) ; }
public void stop ( ) { openIndex.close ( ) ; closedIndex.close ( ) ; }
public static java.lang.String mediumFormat ( final java.util.Date dt ) { if ( dt == null ) { return "" ; } com.google.gerrit.client.FormatUtil.ensureInited ( ) ; return com.google.gerrit.client.FormatUtil.dtfmt.format ( new java.util.Date ( dt.getTime ( ) ) ) ; }
public void onClick ( android.view.View v ) { root.clear ( ) ; init ( root , path , change , files ) ; displayFile ( root , change , path , files.get ( path ) ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( goal ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( argNo ) } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.PInstantiationException.INSTANTIATION_ERROR , args ) ; }
public void selfRevokedKey ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.selfRevokedKey ( ) , "Key is revoked" ) ; }
public void onFailure ( java.lang.Throwable err ) { getTab ( ) . setTitle ( Resources.M.conflictingChanges ( "na" ) ) ; getTab ( ) . setError ( err.getMessage ( ) ) ; }
public static void setCurrentAccountImpl ( final com.google.gerrit.client.rpc.RpcUtil.CurrentAccountImpl i ) { com.google.gerrit.client.rpc.RpcUtil.caImpl = i ; }
java.io.File getWebSessionDir ( com.google.gerrit.server.config.SitePaths site , com.google.gerrit.server.config.PluginConfigFactory cfg , @ com.google.gerrit.extensions.annotations.PluginName java.lang.String pluginName ) { return new java.io.File ( cfg.getFromGerritConfig ( pluginName ) . getString ( "directory" , ( ( site.site_path ) + "/websessions" ) ) ) ; }
public void rangeInOneLineIsValid ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 2 , 13 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isValid ( ) ; }
protected org.eclipse.jgit.lib.ObjectInserter getObjectInserter ( ) throws java.io.IOException { initRepository ( ) ; return repoView.getInserter ( ) ; }
void visibleProjectDetails ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ProjectDetail > > callback ) ;
public void testCreateGroupWhenGroupAlreadyExists_Conflict ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; gApi.groups ( ) . create ( "Administrators" ) ; }
public void run ( ) { try { running = true ; task.run ( ) ; } finally { running = false ; } }
public com.google.gerrit.server.account.GroupControl controlFor ( com.google.gerrit.common.data.GroupDescription.Basic group ) { return new com.google.gerrit.server.account.GroupControl ( user.get ( ) , group , groupBackend ) ; }
public TestPerson.Key getParentKey ( ) { return owner ; }
protected com.google.gerrit.server.patch.PatchList getPatchList ( ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ( ( patchSet ) != null ) { return args.patchListCache.get ( change , patchSet ) ; } throw new com.google.gerrit.server.patch.PatchListNotAvailableException ( "no patchSet specified" ) ; }
public java.lang.String apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { java.lang.String username = rsrc.getUser ( ) . getAccount ( ) . getUserName ( ) ; if ( username == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } return username ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo getPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPreferences.apply ( account ) ; } catch ( com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get preferences" , e ) ; } }
private void extractMailExample ( java.lang.String orig ) throws java.lang.Exception { java.io.File ex = new java.io.File ( site.mail_dir , ( orig + ".example" ) ) ; com.google.gerrit.pgm.init.InitUtil.extract ( ex , com.google.gerrit.server.mail.OutgoingEmail.class , orig ) ; com.google.gerrit.common.FileUtil.chmod ( 292 , ex ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacy_id ( ) ) ) ; }
public static com.google.gerrit.client.rpc.RestApi edit ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edits" ) . id ( "0" ) ; }
PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.DisplaySide side ) { if ( ( ( side == ( DisplaySide.A ) ) && ( ( base ) != null ) ) && ( ( base.get ( ) ) >= 0 ) ) { return base ; } return revision ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , starredChangesCache , accountProjectWatchCache , remotePeerProvider , dbProvider , id ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ; }
public void getNonExistingAccount_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/accounts/non-existing" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource ) { return new com.google.gerrit.server.group.GroupInfo ( resource.getGroup ( ) ) ; }
private void fireChangeDeletedFromIndexEvent ( com.google.gerrit.reviewdb.client.Change.Id id ) { for ( com.google.gerrit.server.extensions.events.ChangeIndexedListener listener : indexedListener ) { listener.onChangeDeleted ( id ) ; } }
public void waitForUser ( ) { if ( ( console.readLine ( "Press enter to continue " ) ) == null ) { throw com.google.gerrit.pgm.util.ConsoleUI.abort ( ) ; } }
public final boolean hasContactStore ( ) { return ( contact_store ( ) ) != null ; }
public void testUpsertNothing ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { createClassUnderTest ( ) . upsert ( noData ) ; }
public com.google.gerrit.reviewdb.client.Change change ( ) { return getControl ( ) . getChange ( ) ; }
public void evict ( java.lang.String username ) { }
public void emptyExceptSubject ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( newChange ( ) , changeOwner ) ; update.setSubject ( "Create change" ) ; update.commit ( ) ; org.junit.Assert.assertNotNull ( update.getRevision ( ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , this ) ; }
public void setUsername ( java.lang.String username ) { this . username = username ; resetSession ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doExternalSearch ( ) ; }
protected com.google.gerrit.util.cli.CmdLineParser newCmdLineParser ( ) { return cmdLineParserFactory.create ( this ) ; }
public int compare ( com.google.gerrit.client.diff.UnifiedDiffChunkInfo o1 , com.google.gerrit.client.diff.UnifiedDiffChunkInfo o2 ) { return ( o1.cmLine ) - ( o2.cmLine ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( topic ( topic ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public void onLostFocus ( final com.google.gwt.user.client.ui.Widget sender ) { }
public java.util.List < com.google.gerrit.server.account.AccountState > byExternalId ( java.lang.String externalId ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.account.AccountPredicates.externalId ( externalId ) ) ; }
void send ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { com.google.gerrit.httpd.plugins.HttpPluginServlet.noCache ( res ) ; res.sendError ( HttpServletResponse.SC_NOT_FOUND ) ; }
private com.google.gerrit.client.ui.AccountDashboardLink link ( final com.google.gerrit.reviewdb.client.Account.Id id ) { return com.google.gerrit.client.ui.AccountDashboardLink.link ( accountCache , id ) ; }
public static com.google.gerrit.server.git.QueryList parse ( java.lang.String text , com.google.gerrit.server.git.ValidationError.Sink errors ) throws java.io.IOException { return new com.google.gerrit.server.git.QueryList ( com.google.gerrit.server.git.QueryList.parse ( text , com.google.gerrit.server.git.QueryList.FILE_NAME , com.google.gerrit.server.git.TRIM , com.google.gerrit.server.git.TRIM , errors ) ) ; }
static void deleteSessionCookie ( ) { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.myAccountDiffPref = null ; com.google.gerrit.client.Gerrit.xGerritAuth = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; com.google.gwt.user.client.Cookies.removeCookie ( "GerritAccount" ) ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getChangeUpdate ( ) . setTopic ( magicBranch.topic ) ; }
public void revokedByKeyNotPresentInStore ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add ( com.google.gerrit.gpg.testutil.TestKeys.revokedCompromisedKey ( ) ) ; save ( ) ; assertProblems ( k , ( "Key is revoked (key material has been compromised):" + " test6 compromised" ) ) ; }
public void onClick ( android.view.View v ) { reloadQuery ( ) ; }
public void getProjectNotExisting ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( "/projects/does-not-exist" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private void renderSubmitType ( java.lang.String action ) { try { com.google.gerrit.extensions.common.SubmitType type = com.google.gerrit.extensions.common.SubmitType.valueOf ( action ) ; submitActionText.setInnerText ( com.google.gerrit.client.admin.Util.toLongString ( type ) ) ; } catch ( java.lang.IllegalArgumentException e ) { submitActionText.setInnerText ( action ) ; } }
void applyDraft ( com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate ) throws com.google.gwtorm.server.OrmException { if ( ( c.getRevId ( ) ) == null ) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId ( c , cache , change , ps ) ; } draftUpdate.insertComment ( c ) ; }
com.google.common.hash.Funnel < java.lang.String > funnel ( ) { com.google.common.hash.Funnel < ? > s = com.google.common.hash.Funnels.stringFunnel ( ) ; return ( ( com.google.common.hash.Funnel < java.lang.String > ) ( s ) ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , java.lang.Iterable < T > > buildRepeatable ( com.google.gerrit.server.index.FieldDef.Getter < I , java.lang.Iterable < T > > getter ) { return buildRepeatable ( ( in , a ) -> getter.get ( in ) ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfoImpl ( serverEnableSignedPush , resource.getControl ( ) , config , pluginConfigEntries , cfgFactory , allProjects , uiActions , views ) ; }
public void moveTipTo ( com.google.gerrit.server.git.CodeReviewCommit newTip , java.lang.String mergedFrom ) { com.google.common.base.Preconditions.checkArgument ( ( newTip != null ) ) ; branchTip = newTip ; mergeResults.put ( mergedFrom , newTip.getName ( ) ) ; }
public boolean isVisible ( ) { return ( visibleForReplication ( ) ) || ( canPerformOnAnyRef ( Permission.READ ) ) ; }
public void testUpdateOne ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 ) ; createClassUnderTest ( ) . update ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; }
protected com.google.gerrit.client.ui.Screen createScreen ( ) { return new com.google.gerrit.client.patches.PatchSideBySideScreen ( key ) ; }
void set ( com.google.gerrit.client.changes.ChangeInfo info ) { this . changeId = info.legacy_id ( ) ; display ( info ) ; reviewerSuggestOracle.setChange ( changeId ) ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( "Reviewers" ) ; screen.show ( new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen ( screen.getToken ( ) ) ) ; }
public static native net.codemirror.lib.CodeMirror create ( com.google.gwt.dom.client.Element parent , net.codemirror.lib.Configuration cfg ) ;
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c.setStatus ( Change.Status.MERGED ) ; return c ; }
public void onClose ( final com.google.gwt.event.logical.shared.CloseEvent < com.google.gwt.user.client.ui.PopupPanel > event ) { com.google.gwtexpui.globalkey.client.ShowHelpCommand.current = null ; }
public com.google.gerrit.server.query.change.ChangeData apply ( com.google.gerrit.server.query.change.ChangeData input ) { input.cacheFromSource ( source ) ; return input ; }
public static org.eclipse.jgit.lib.Config noteDbEnabled ( ) { return com.google.gerrit.server.notedb.NotesMigration.allEnabledConfig ( ) ; }
protected void preDisplay ( com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.dashboards.DashboardList > result ) { dashes.display ( result ) ; }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder ( ) { return com.google.gerrit.server.account.InternalAccountUpdate.createBuilderProxyThatConvertsNullStringArgsToEmptyStrings ( new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder ( ) ) ; }
java.lang.String value ( ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onExpandAll ( null ) ; }
public void suggestReviewersFullTextSearch ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "ser" , 5 ) ; org.junit.Assert.assertEquals ( 4 , reviewers.size ( ) ) ; }
void publish ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
protected void configure ( ) { }
private void assertNoError ( java.lang.String response ) { org.junit.Assert.assertFalse ( response , response.toLowerCase ( java.util.Locale.US ) . contains ( "error" ) ) ; }
public long getMaxValue ( ) { return java.lang.Long.MAX_VALUE ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply ( rsrc , new com.google.gerrit.server.account.DeleteGpgKey.Input ( ) ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete GPG key" , e ) ; } }
public boolean isVisible ( ) { return ( getProjectControl ( ) . visibleForReplication ( ) ) || ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ) ; }
public void restoreFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.project.ChangeControl changeControl , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , changeControl , new com.google.gerrit.server.edit.tree.RestoreFileModification ( file ) ) ; }
public void testList ( ) { com.google.common.truth.Truth.assertThat ( cfg.getStringList ( "x" , null , "y" ) ) . asList ( ) . containsExactly ( "a" , "b" ) ; }
public void removeChangeListener ( com.google.gerrit.common.ChangeListener listener ) ;
public void afterUpdateChange ( ) throws java.lang.Exception { }
public void close ( ) { }
protected com.google.gerrit.client.reviewdb.ReviewDb openReviewDb ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { try { return getGerritServer ( ) . getDatabase ( ) . open ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 1 , "fatal: Gerrit database is offline" ) ; } }
public void evict ( com.google.gerrit.reviewdb.Account.Id accountId ) ;
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultProjectName ( ) . equals ( box.getText ( ) ) ) { box.setText ( "" ) ; box.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
void rebase ( ) throws com.google.gerrit.extensions.restapi.RestApiException ;
protected void includeWatchers ( com.google.gerrit.server.account.WatchConfig.NotifyType type ) { includeWatchers ( type , true ) ; }
public final java.lang.Class < ? extends org.kohsuke.args4j.spi.OptionHandler < java.lang.Short > > handler ( ) { return com.google.gerrit.server.ssh.commands.CmdOption.Handler.class ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommitPrefix ( java.lang.String prefix ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( org.eclipse.jgit.lib.AbbreviatedObjectId.fromString ( prefix ) ) ) ; }
private com.google.gitiles.doc.MarkdownToHtml revisionReadme ( ) { return readme ( com.google.gitiles.GitilesView.revision ( ) . copyFrom ( view ) . build ( ) ) ; }
final native void wait_for_merge ( boolean b ) ;
public void onFailure ( final java.lang.Throwable caught ) { if ( ( rpcSequence ) == rpcseq ) { super . onFailure ( caught ) ; } }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , null ) ; }
public boolean canForceUpdate ( ) { return ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD , com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD_REPLACE ) ) || ( canDelete ( ) ) ; }
private static com.google.gerrit.client.reviewdb.LoginType toType ( final org.spearce.jgit.lib.Config cfg ) { if ( com.google.gerrit.server.config.AuthConfig.isBecomeAnyoneEnabled ( ) ) { return com.google.gerrit.client.reviewdb.LoginType.DEVELOPMENT_BECOME_ANY_ACCOUNT ; } return com.google.gerrit.server.config.ConfigUtil.getEnum ( cfg , "auth" , null , "type" , LoginType.OPENID ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.deleteDocuments ( term ) ) ; }
static void replyError ( javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg ) throws java.io.IOException { res.setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet.replyText ( null , res , msg ) ; }
public void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public final void update ( final java.lang.Iterable < E > instances , final com.google.gwtorm.client.Transaction txn ) throws com.google.gwtorm.client.OrmException { if ( txn != null ) { cast ( txn ) . queueUpdate ( this , instances ) ; } else { update ( instances ) ; } }
public com.google.gerrit.server.change.PatchSetInserter setGroups ( java.lang.Iterable < java.lang.String > groups ) { this . groups = groups ; return this ; }
public void testDeleteOneExisting ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 1 ) ; createClassUnderTest ( ) . delete ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; }
void visibleProjects ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectList > callback ) ;
protected void configure ( ) { factory ( AbandonedSender.Factory.class ) ; factory ( CommentSender.Factory.class ) ; factory ( RevertedSender.Factory.class ) ; factory ( RestoredSender.Factory.class ) ; }
public void onClick ( android.view.View v ) { removeDiffView ( ) ; createDiffView ( ) ; init ( path , change , files ) ; displayFile ( change , path , files.get ( path ) ) ; }
private static int version ( com.google.gerrit.server.index.ChangeIndex i ) { return i.getSchema ( ) . getVersion ( ) ; }
protected void configure ( ) { cache ( com.google.gerrit.httpd.plugins.HttpPluginModule.PLUGIN_RESOURCES , com.google.gerrit.httpd.plugins.ResourceKey.class , com.google.gerrit.httpd.plugins.Resource.class ) . maximumWeight ( ( 2 << 20 ) ) . weigher ( com.google.gerrit.httpd.plugins.ResourceWeigher.class ) ; }
protected void configure ( ) { bind ( com.google.inject.Key.get ( javax.sql.DataSource.class , com.google.inject.name.Names.named ( "ReviewDb" ) ) ) . toProvider ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; listener ( ) . to ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) ; }
public static java.lang.String toChange ( final com.google.gerrit.client.data.ChangeHeader c ) { return "change," + ( c.id ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( false ) ) ; }
public void loadGerritConfig ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.GerritConfig > callback ) { callback.onSuccess ( com.google.gerrit.client.rpc.Common.getGerritConfig ( ) ) ; }
public void testEvictProjectListOK ( ) throws java.lang.Exception { setupMocks ( Constants.PROJECT_LIST , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.PROJECT_LIST , new java.lang.Object ( ) ) ) . isTrue ( ) ; }
public boolean apply ( com.google.gerrit.extensions.common.ProjectInfo info ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( info.name ) . equals ( p ) ; }
public void onSuccess ( final com.google.gerrit.client.data.GerritConfig result ) { com.google.gerrit.client.Gerrit.config = result ; onModuleLoad2 ( ) ; }
public java.lang.String toString ( ) { return ( ( getOperator ( ) ) + ":" ) + ( id.name ( ) ) ; }
public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return revisionActions.apply ( revision ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get actions" , e ) ; } }
public void createNewProject ( java.lang.String projectName , java.lang.String parentName , boolean emptyCommit , boolean permissionsOnly , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) { createProjectHandlerFactory.create ( projectName , parentName , emptyCommit , permissionsOnly ) . to ( callback ) ; }
public com.google.gerrit.server.query.Predicate < T > getChild ( int i ) { if ( i == 0 ) { return pred ; } throw new java.lang.ArrayIndexOutOfBoundsException ( i ) ; }
public int compare ( final org.eclipse.jgit.diff.Edit o1 , final org.eclipse.jgit.diff.Edit o2 ) { return ( o1.getBeginA ( ) ) - ( o2.getBeginA ( ) ) ; }
public void go ( ) { movePointerTo ( id ) ; super . go ( ) ; }
public final native void set_current_revision ( java.lang.String r ) ;
private void populateAndServeFsRepository ( com.googlesource.gerrit.plugins.lfs.LfsBackend backend ) { com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository repository = fsRepoFactory.create ( backend ) ; cache.put ( backend , repository ) ; serve ( repository.getServletUrlPattern ( ) ) . with ( new com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet ( repository ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { createReplyEditor ( this ) ; }
public void description ( com.google.gerrit.extensions.api.projects.DescriptionInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { putDescription.apply ( checkExists ( ) , in ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put project description" , e ) ; } }
void setLfsResponseType ( ) { res.setContentType ( com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.CONTENTTYPE_VND_GIT_LFS_JSON ) ; }
public void evictAll ( ) ;
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.GerritServerTests.isNoteDbTestEnabled ( ) ) . isFalse ( ) ; notesMigration.setAllEnabled ( false ) ; }
public void setUpMocks ( ) { servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet ( indexer ) ; uuid = AccountGroup.UUID.parse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServletTest.UUID ) ; org.mockito.Mockito.when ( req.getPathInfo ( ) ) . thenReturn ( ( "/index/group/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServletTest.UUID ) ) ) ; }
private com.google.gerrit.server.diff.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return com.google.gerrit.server.diff.PatchListKey.againstCommit ( revisionIdA , revisionIdB , Whitespace.IGNORE_NONE ) ; }
public java.util.List < com.googlesrouce.gerrit.plugins.github.git.GHRelease > getReleases ( ) throws java.io.IOException { return ghRepository.getReleases ( ) ; }
public void resetMillisProvider ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( user ) . put ( "/projects/newProject" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( com.google.gerrit.reviewdb.Account.Id id ) { return asAccountAttribute ( accountCache.get ( id ) . getAccount ( ) ) ; }
public void setLimit ( int limit ) { imp.setLimit ( limit ) ; }
protected void configure ( ) { factory ( ChangeDetailFactory.Factory.class ) ; factory ( PatchSetPublishDetailFactory.Factory.class ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gwt.user.client.Window.open ( com.google.gerrit.client.Gerrit.getConfig ( ) . getEditFullNameUrl ( ) , "_blank" , null ) ; }
public final Project.NameKey project_name_key ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( project ( ) ) ; }
protected static java.lang.String getGroupName ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return java.lang.String.format ( "Group <%s>" , uuid ) ; }
public void operationComplete ( org.apache.mina.core.future.IoFuture future ) { if ( ( s.getUsername ( ) ) == null ) { java.lang.String username = s.getAttribute ( SshUtil.AUTH_ATTEMPTED_AS ) ; if ( username != null ) { sshLog.onAuthFail ( s , username ) ; } } }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , id ) ; }
public WorkQueue.Executor get ( ) { return queues.getQueue ( user.getCapabilities ( ) . getQueueType ( ) ) ; }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; includeWatchers ( NotifyType.ALL_COMMENTS ) ; includeWatchers ( NotifyType.SUBMITTED_CHANGES ) ; }
public final native com.google.gerrit.client.config.GitWebInfo gitWeb ( ) ;
protected void preDisplay ( com.google.gerrit.common.data.GroupList result ) { groups.display ( result.getGroups ( ) ) ; groups.finishDisplay ( ) ; }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest input ) { return ! ( input.skip ) ; }
public com.google.gerrit.extensions.common.EditInfo toEditInfo ( com.google.gerrit.server.edit.ChangeEdit edit ) throws java.io.IOException { com.google.gerrit.extensions.common.EditInfo out = new com.google.gerrit.extensions.common.EditInfo ( ) ; out.commit = com.google.gerrit.server.edit.ChangeEditJson.fillCommit ( edit.getEditCommit ( ) ) ; return out ; }
public java.lang.String getRefName ( ) { return com.google.gerrit.server.edit.ChangeEditUtil.editRefName ( user.getAccountId ( ) , change.getId ( ) , basePatchSet.getId ( ) ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { onSaveSuccess ( result ) ; }
public static void getGroup ( java.lang.String group , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupInfo > cb ) { com.google.gerrit.client.groups.GroupApi.group ( group ) . get ( cb ) ; }
public void write ( byte [ ] b ) throws java.io.IOException { out.write ( b ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( "FixReplacement{" + "range=" ) + ( range ) ) + ", replacement='" ) + ( replacement ) ) + '\'' ) + '}' ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNew ( ) ; } }
public void testWithAnotherURI ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject ( "a" ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; java.lang.String gitmodules = ( ( ( "" + ( ( "[submodule \"a\"]\n" + "path = a\n" ) + "url = http://localhost:80/" ) ) + ( p.get ( ) ) ) + "\n" ) + "branch = master\n" ; cfg.fromText ( gitmodules ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expected = com.google.common.collect.Sets.newHashSet ( new com.google.gerrit.reviewdb.client.SubmoduleSubscription ( targetBranch , new com.google.gerrit.reviewdb.client.Branch.NameKey ( p , "master" ) , "a" ) ) ; com.google.common.truth.Truth.assertThat ( res ) . containsExactlyElementsIn ( expected ) ; }
protected void configure ( ) { install ( new com.google.gerrit.rules.PrologModule.EnviromentModule ( ) ) ; bind ( PrologEnvironment.Args.class ) ; }
public void testSubscriptionWildcardACLForMissingProject ( ) throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository < ? > subRepo = createProjectWithPush ( "subscribed-to-project" ) ; allowSubmoduleSubscription ( "subscribed-to-project" , "refs/heads/*" , "not-existing-super-project" , "refs/heads/*" ) ; pushChangeTo ( subRepo , "master" ) ; }
public java.lang.String toString ( ) { return atts.get ( "dn" ) ; }
public int getSizeBasedOnAccuracy ( int statisticsAccuracy ) throws java.lang.IllegalArgumentException , java.lang.IllegalStateException , net.sf.ehcache.CacheException { return self.getSizeBasedOnAccuracy ( statisticsAccuracy ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gwt.user.client.History.newItem ( Link.SETTINGS_CONTACT , true ) ; }
public boolean match ( java.lang.String ref , java.lang.String username ) { return expect.equals ( ref ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( repoManager , accountCache , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , c , account , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , com.google.gerrit.server.notedb.ChangeNotesTest.TZ ) ; }
public void stop ( ) { mem.drop ( ) ; }
public void execute ( com.google.gerrit.server.git.BatchUpdate.Listener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.git.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener ) ; }
public java.util.List < com.google.gerrit.common.data.SubmitRecord > canSubmit ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return canSubmit ( db , patchSet , null , false ) ; }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; return update ; }
void ownedGroups ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.AccountGroup > > callback ) ;
private int getSepPos ( java.lang.String fromTo ) { int sepPos = fromTo.indexOf ( com.googlesource.gerrit.plugins.github.GitHubConfig.FROM_TO_SEPARATOR ) ; if ( sepPos < 0 ) { throw new com.googlesource.gerrit.plugins.github.InvalidGitHubConfigException ( fromTo ) ; } return sepPos ; }
public boolean isOwner ( ) { return ( ( isDeclaredOwner ( ) ) && ( ! ( controlForRef ( "refs/*" ) . isBlocked ( Permission.OWNER ) ) ) ) || ( user.getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ; }
com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse resp = adminRestSession.post ( ( ( "/changes/" + changeId ) + "/reviewers" ) , in ) ; return readContentFromJson ( resp , com.google.gerrit.extensions.api.changes.AddReviewerResult.class ) ; }
public com.google.gwt.user.client.ui.AbstractImagePrototype openidLogo ( ) ;
public static net.codemirror.lib.LineCharacter create ( int line , int ch ) { net.codemirror.lib.LineCharacter lineCh = createObject ( ) . cast ( ) ; lineCh.setLine ( line ) ; lineCh.setCh ( ch ) ; return lineCh ; }
public java.lang.String commitMessage ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitMessage ) == null ) { loadCommitData ( ) ; } return commitMessage ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.AccountProjectWatch > notifyNewChanges ( com.google.gerrit.reviewdb.Project.NameKey name ) throws com.google.gwtorm.client.OrmException ;
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo info ) { rev.setCommit ( info ) ; }
private void beforeTest ( org.eclipse.jgit.lib.Config cfg ) throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start ( cfg ) ; server.getTestInjector ( ) . injectMembers ( this ) ; }
private static boolean isInlineComment ( java.lang.String key ) { return ( ( key.startsWith ( "patchCommentEdit-" ) ) || ( key.startsWith ( "patchReply-" ) ) ) || ( key.startsWith ( "patchComment-" ) ) ; }
public void onSuccess ( com.google.gwt.resources.client.TextResource resource ) { com.google.gwt.dom.client.StyleInjector.inject ( resource.getText ( ) ) ; cb.onSuccess ( null ) ; }
public void execute ( com.google.gerrit.server.update.BatchUpdate.Listener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( oldId , parentNum , newId , whitespace ) ; }
public static synchronized void incrementClock ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockMs.addAndGet ( clockStepUnit.toMillis ( clockStep ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initPath ( ) ; setHeaderVisible ( false ) ; }
protected void deny ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permission , com.google.gerrit.reviewdb.client.AccountGroup.UUID id , java.lang.String ref ) throws java.lang.Exception { com.google.gerrit.server.project.testing.Util.deny ( project , permission , id , ref ) ; saveProjectConfig ( project ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( indexTask ( cd ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
protected void configure ( ) { factory ( MetaDataUpdate.InternalFactory.class ) ; bind ( MetaDataUpdate.Server.class ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return isSignedIn ( ) ? identified.create ( val ( ) . accountId ) : anonymous ; }
private java.util.List < java.lang.String > getRelativePaths ( java.io.File dir , java.lang.String extension ) { java.util.ArrayList < java.lang.String > pathList = new java.util.ArrayList < > ( ) ; getRelativePaths ( dir , extension , "" , pathList ) ; return pathList ; }
public void onLostFocus ( com.google.gwt.user.client.ui.Widget arg0 ) { hideTextBox ( ) ; }
public void testSimpleAdvance ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 , 1 ) , iter.advance ( 1 ) ) ; }
static void deleteSessionCookie ( ) { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.SESSION_COOKIE ) ; com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentlink" , pluginName , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
public void schemaThrowsExceptionWhenLookingUpForChange ( ) throws java.lang.Exception { setupPostMocks ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServletTest.THROW_ORM_EXCEPTION ) ; indexRestApiServlet.doPost ( req , rsp ) ; org.mockito.Mockito.verify ( rsp ) . sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND , "Error trying to find a change \n" ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return user ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( conflictingChangesTab ) == null ) { conflictingChangesTab = createTab ( Resources.C.conflictingChanges ( ) , Resources.C.conflictingChangesTooltip ( ) ) ; conflictingChangesTab.registerKeys ( ) ; } return conflictingChangesTab ; }
public java.io.InputStream getInputStream ( ) throws java.io.IOException { return new java.io.ByteArrayInputStream ( sshKey.getBytes ( "UTF-8" ) ) ; }
public synchronized void schedule ( int idx , com.googlesource.gerrit.plugins.github.git.GitJob pullRequestImportJob ) { jobs.put ( idx , pullRequestImportJob ) ; executor.exec ( pullRequestImportJob ) ; }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { initRepository ( ) ; commands.add ( cmd ) ; }
private com.google.gerrit.server.config.GetServerInfo.ServerInfo getServerConfig ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get ( "/config/server/info/" ) ; return newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.server.config.GetServerInfo.ServerInfo.class ) ; }
private static java.lang.String includedGroupsBase ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID ) { return ( com.google.gerrit.client.groups.GroupApi.base ( groupUUID ) ) + "groups" ; }
private void adjustCodeMirrorHeight ( ) { int rest = ( ( com.google.gerrit.client.Gerrit.getHeaderFooterHeight ( ) ) + ( header.getOffsetHeight ( ) ) ) + 5 ; cm.setHeight ( ( ( com.google.gwt.user.client.Window.getClientHeight ( ) ) - rest ) ) ; }
public void addHashtagWithoutPermissionNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "Editing hashtags not permitted" ) ; addHashtags ( r , "MyHashtag" ) ; }
protected java.lang.String prettify ( java.lang.String html , java.lang.String type ) { return com.google.gerrit.prettify.client.ClientSideFormatter.go ( html , type , settings.getTabSize ( ) ) ; }
public void run ( ) { cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; cmA.refresh ( ) ; cmB.refresh ( ) ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { this . ctx = new com.google.gerrit.sshd.SshScope.Context ( session.getAttribute ( SshSession.KEY ) ) ; }
private void submit ( ) { Util.MANAGE_SVC.submit ( patchSetId , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.common.data.ChangeDetail > ( ) { public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { saveStateOnUnload = false ; goChange ( ) ; } } ) ; }
public void testContainsTrueWithSingleElement ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; com.google.common.truth.Truth.assertThat ( ds ) . contains ( 2 ) ; }
public boolean isVisible ( ) { return getRefControl ( ) . isVisible ( ) ; }
public void configure ( ) { bind ( com.google.gerrit.server.mail.EmailSender.class ) . to ( com.google.gerrit.testutil.FakeEmailSender.class ) ; }
public com.google.gerrit.reviewdb.client.AccountDiffPreference.Theme getTheme ( ) { return ( theme ) != null ? com.google.gerrit.reviewdb.client.AccountDiffPreference.Theme.valueOf ( theme ) : null ; }
com.google.gerrit.server.git.CreateCodeReviewNotes create ( org.eclipse.jgit.lib.Repository db ) ;
public void review ( final com.google.gerrit.client.reviewdb.AccountAgreement.Status newStatus , final com.google.gerrit.client.reviewdb.Account.Id by ) { status = newStatus.getCode ( ) ; reviewedBy = by ; reviewedOn = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
public void setStatisticsEnabled ( boolean enableStatistics ) { self ( ) . setStatisticsEnabled ( enableStatistics ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.RefEvent event ) { fireEvent ( branchName , event ) ; }
public static org.eclipse.jgit.internal.storage.dfs.InMemoryRepository newRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.testutil.InMemoryRepositoryManager.Repo ( new com.google.gerrit.testutil.TestNotesMigration ( ) , name ) ; }
public int compare ( java.nio.file.Path a , java.nio.file.Path b ) { return com.google.common.collect.ComparisonChain.start ( ) . compare ( com.google.gerrit.common.SiteLibraryLoaderUtil.lastModified ( b ) , com.google.gerrit.common.SiteLibraryLoaderUtil.lastModified ( a ) ) . compare ( a , b ) . result ( ) ; }
public void clearPassword ( com.google.gerrit.reviewdb.client.AccountExternalId.Key key , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.reviewdb.client.AccountExternalId > callback ) { com.google.gerrit.httpd.rpc.Handler.wrap ( clearPasswordFactory.create ( key ) ) . to ( callback ) ; }
public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent.setFileMode ( FileMode.GITLINK ) ; ent.setObjectId ( updateTo ) ; }
public void testWithEndingURL ( ) throws java.lang.Exception { assertEquals ( ( "a\n" + ( ( ( "\n" + "http://example.com/ fixes this\n" ) + "\n" ) + "Change-Id: I3b7e4e16b503ce00f07ba6ad01d97a356dad7701\n" ) ) , call ( ( "a\n" + ( "\n" + "http://example.com/ fixes this\n" ) ) ) ) ; assertEquals ( ( "a\n" + ( ( ( "\n" + "https://example.com/ fixes this\n" ) + "\n" ) + "Change-Id: I62b9039e2fc0dce274af55e8f99312a8a80a805d\n" ) ) , call ( ( "a\n" + ( "\n" + "https://example.com/ fixes this\n" ) ) ) ) ; assertEquals ( ( "a\n" + ( ( ( "\n" + "ftp://example.com/ fixes this\n" ) + "\n" ) + "Change-Id: I71b05dc1f6b9a5540a53a693e64d58b65a8910e8\n" ) ) , call ( ( "a\n" + ( "\n" + "ftp://example.com/ fixes this\n" ) ) ) ) ; assertEquals ( ( "a\n" + ( ( ( "\n" + "git://example.com/ fixes this\n" ) + "\n" ) + "Change-Id: Id34e942baa68d790633737d815ddf11bac9183e5\n" ) ) , call ( ( "a\n" + ( "\n" + "git://example.com/ fixes this\n" ) ) ) ) ; }
static AccountExternalId.Key toExtIdKey ( org.bouncycastle.openpgp.PGPPublicKey key ) { return new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GPGKEY , com.google.common.io.BaseEncoding.base16 ( ) . encode ( key.getFingerprint ( ) ) ) ; }
public void deleteReviewerFromReviewableChangeNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; removeReviewer ( sc , extraReviewer , NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getCommentManager ( ) . commentNav ( cm , Direction.NEXT ) . run ( ) ; } }
public void onOk ( ) { deleteBranches ( ids ) ; }
void changeProjectDescription ( com.google.gerrit.client.reviewdb.Project.Id projectId , java.lang.String description , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public void sendRedirect ( java.lang.String location ) throws java.io.IOException { super . sendRedirect ( com.google.common.base.Objects.firstNonNull ( redirectUrl , location ) ) ; }
private static Project.NameKey getProjectName ( com.google.gerrit.server.project.ChangeControl ctl ) { return ctl.getChange ( ) . getDest ( ) . getParentKey ( ) ; }
public static java.lang.String toPatchSideBySide ( final com.google.gerrit.reviewdb.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , id ) ; }
private long getSecureConfigLastEditTs ( ) throws java.io.IOException { if ( ! ( java.nio.file.Files.exists ( site.secure_config ) ) ) { return 0L ; } return java.nio.file.Files.getLastModifiedTime ( site.secure_config ) . toMillis ( ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( edit , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( file , content ) ) ; }
com.google.gerrit.lucene.LuceneChangeIndex create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String base ) ;
public void getTagOfNonExistingProjectWithApi ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( "does-not-exist" ) . tag ( "tag" ) . get ( ) ; }
public void setTopic ( final java.lang.String topic ) { this . topic = topic.trim ( ) ; }
public void remove ( ) { filter = null ; }
java.lang.String patchSetAction ( java.lang.String action , int id ) ;
public void setValue ( final short v ) { value = v ; granted = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm floatIntPart ( ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "float" , this ) ; }
void onSave ( com.google.gwt.event.dom.client.ClickEvent e ) { e.stopPropagation ( ) ; save ( null ) ; }
private boolean isSuccessful ( org.apache.http.HttpResponse response ) { int sc = response.getStatusLine ( ) . getStatusCode ( ) ; return ( sc == ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ) || ( sc == ( javax.servlet.http.HttpServletResponse.SC_OK ) ) ; }
public com.google.gerrit.server.git.BatchUpdate addOp ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.server.git.BatchUpdate.Op op ) { com.google.common.base.Preconditions.checkArgument ( ( ! ( op instanceof com.google.gerrit.server.git.BatchUpdate.InsertChangeOp ) ) , "use insertChange" ) ; ops.put ( id , op ) ; return this ; }
public boolean match ( final T object ) throws com.google.gwtorm.server.OrmException { for ( final com.google.gerrit.server.query.Predicate < T > c : children ) { if ( ! ( c.match ( object ) ) ) { return false ; } } return true ; }
public java.lang.String getContentType ( ) { return response.getFirstHeader ( "X-FYI-Content-Type" ) . getValue ( ) ; }
public void check ( com.google.gerrit.server.permissions.RefPermission perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( ( perm.describeForException ( ) ) + " not permitted for " ) + ( getRefName ( ) ) ) ) ; } }
public void removeReviewer ( com.google.gerrit.reviewdb.client.Account.Id reviewer ) { reviewers.put ( reviewer , ReviewerState.REMOVED ) ; }
public void destroy ( ) { }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { onSaveType ( ) ; }
static com.googlesource.gerrit.plugins.findowners.OwnersDb get ( com.googlesource.gerrit.plugins.findowners.Server server , java.lang.String key , java.lang.String url , java.lang.String project , java.lang.String branch , java.util.Collection < java.lang.String > files ) { return com.googlesource.gerrit.plugins.findowners.Cache.get ( server , key , null , url , project , branch , files ) ; }
public void removeApproval ( java.lang.String label ) { removeApprovalFor ( getUser ( ) . getAccountId ( ) , label ) ; }
public com.google.gerrit.extensions.common.ChangeInfo addChangeActions ( com.google.gerrit.extensions.common.ChangeInfo to , com.google.gerrit.server.project.ChangeControl ctl ) { to.actions = toActionMap ( ctl ) ; return to ; }
private void afterTest ( ) throws java.lang.Exception { db.close ( ) ; sshSession.close ( ) ; server.stop ( ) ; }
public void evictAfterRename ( final com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) { byName.remove ( oldName ) ; }
static void publish ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision ) { com.google.gerrit.client.changes.ChangeApi.publish ( id.get ( ) , revision , com.google.gerrit.client.change.DraftActions.cs ( id ) ) ; }
private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps , com.google.gerrit.client.changes.CommentInfo info ) { return com.google.gerrit.client.Dispatcher.toSideBySide ( null , ps , info.path ( ) ) ; }
public void close ( ) throws java.lang.Exception { blockReviewDbUpdates ( false ) ; }
public java.util.List < com.google.gerrit.client.reviewdb.PatchLineComment > run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.patchComments ( ) . draft ( key , com.google.gerrit.client.rpc.Common.getAccountId ( ) ) . toList ( ) ; }
protected void onUnload ( ) { super . onUnload ( ) ; if ( setTheme ) { Gerrit.THEMER.set ( null ) ; } }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; return update ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) ;
public com.google.gerrit.acceptance.RestResponse post ( java.lang.String endPoint ) { return null ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ( userPopup.isShowing ( ) ) && ( userPopup.isVisible ( ) ) ) { userPopup.hide ( ) ; } else { userPopup.showRelativeTo ( l ) ; } }
public static boolean shouldConfigureLogSystem ( ) { return com.google.common.base.Strings.isNullOrEmpty ( java.lang.System.getProperty ( com.google.gerrit.util.LogUtil.LOG4J_CONFIGURATION ) ) ; }
public void evict ( com.google.gerrit.reviewdb.Account.Id key ) ;
public static java.lang.String refsUsers ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.REFS_USERS ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( accountId.get ( ) ) ) ; return r.toString ( ) ; }
private static java.lang.String extractFooter ( java.lang.String key , java.lang.String line ) { return line.substring ( ( ( line.indexOf ( key ) ) + ( key.length ( ) ) ) , line.length ( ) ) ; }
public void add ( final com.google.inject.Injector ... injectors ) { for ( final com.google.inject.Injector i : injectors ) { add ( i ) ; } }
protected void add ( final javax.mail.Message.RecipientType rt , final java.util.Collection < com.google.gerrit.client.reviewdb.Account.Id > list ) throws javax.mail.MessagingException { for ( final com.google.gerrit.client.reviewdb.Account.Id id : list ) { add ( rt , id ) ; } }
private void addExtensionPoints ( ) { addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER , headerExtension ) ; addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_BUTTONS , headerExtensionMiddle ) ; addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , headerExtensionRight ) ; addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , changeExtension ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , getRefControl ( ) . forUser ( who ) , getChange ( ) ) ; }
public void testParse_NameEmail3 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "<a@b>" ) ; assertNull ( a.name ) ; assertEquals ( "a@b" , a.email ) ; }
public void subsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/heads/master" ) ; }
private com.google.gerrit.httpd.raw.Paths getPaths ( ) { if ( ( paths ) == null ) { paths = new com.google.gerrit.httpd.raw.Paths ( ) ; } return paths ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit commit , org.eclipse.jgit.util.GitDateFormatter df ) throws java.io.IOException { return toSoyData ( req , commit , com.google.gitiles.CommitSoyData.FieldSet.DEFAULT , df ) ; }
private static java.lang.String publicKey ( com.jcraft.jsch.KeyPair sshKey , java.lang.String comment ) throws java.io.UnsupportedEncodingException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; sshKey.writePublicKey ( out , comment ) ; return out.toString ( "ASCII" ) ; }
public java.util.List < com.google.gerrit.extensions.common.CommentInfo > commentsAsList ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listComments.getComments ( revision ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve comments" , e ) ; } }
public boolean isOwner ( ) { return ( controlForRef ( AccessSection.ALL ) . isOwner ( ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public void login ( com.google.gerrit.server.account.AuthResult res , boolean rememberMe ) ;
public static void getBranches ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( projectName.get ( ) ) . view ( "branches" ) . get ( cb ) ; }
public java.util.Collection < com.google.gerrit.common.data.AccessSection > getLocalAccessSections ( ) { return getConfig ( ) . getAccessSections ( ) ; }
default void onRemoveByKey ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey ) throws java.io.IOException { onRemoveByKeys ( newNotesRev , accountId , java.util.Collections.singleton ( extIdKey ) ) ; }
private java.io.File getResourceFile ( java.lang.String resourcePath ) { java.io.File resourceFile = new java.io.File ( staticResourcesPath , resourcePath ) ; return resourceFile ; }
public void rebase ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . revision ( r.getCommit ( ) . name ( ) ) . rebase ( ) ; }
private void initEditor ( java.lang.String content ) { cm = net.codemirror.lib.CodeMirror.create ( editor , getConfig ( ) ) ; cm.setValue ( content ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm sqrt ( ) { if ( ( this . val ) < 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "undefined" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( java.lang.Math.sqrt ( this . val ) ) ; }
private com.google.gerrit.server.plugins.ServerPlugin loadExternalPlugin ( java.lang.String name , java.io.File scriptFile , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot ) { return externalPluginFactory.get ( name , scriptFile , pluginUserFactory.create ( name ) , snapshot ) ; }
public boolean hasChange ( ) { return source.hasChange ( ) ; }
public void start ( ) { }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; }
public void setText ( java.lang.String text ) { focusHint ( ) ; super . setText ( text ) ; if ( ! ( isFocused ) ) { blurHint ( ) ; } }
public void onSuccess ( java.lang.Void result ) { loadConfigInfo ( info , rev ) ; }
public static void display ( final com.google.gerrit.client.Screen view ) { if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.body.remove ( com.google.gerrit.client.Gerrit.currentScreen ) ; } com.google.gerrit.client.Gerrit.currentScreen = view ; com.google.gerrit.client.Gerrit.body.add ( com.google.gerrit.client.Gerrit.currentScreen ) ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.server.project.ChangeControl ctl , java.util.Date when ) ;
protected com.google.gson.GsonBuilder createGsonBuilder ( ) { final com.google.gson.GsonBuilder g = super . createGsonBuilder ( ) ; g.registerTypeAdapter ( org.eclipse.jgit.diff.Edit.class , new com.google.gerrit.httpd.rpc.EditDeserializer ( ) ) ; return g ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { final com.google.gerrit.sshd.SshSession s = session.getAttribute ( SshSession.KEY ) ; this . ctx = sshScope.newContext ( s , commandLine ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.updateDocument ( term , doc ) ) ; }
private void add ( final javax.mail.Message.RecipientType rt , final com.google.gerrit.client.reviewdb.UserIdentity who ) throws javax.mail.MessagingException { if ( ( who != null ) && ( ( who.getAccount ( ) ) != null ) ) { add ( rt , who.getAccount ( ) ) ; } }
private void assertDeleteForbidden ( ) throws java.lang.Exception { try { branch ( ) . delete ( ) ; org.junit.Assert.fail ( "Expected AuthException" ) ; } catch ( com.google.gerrit.extensions.restapi.AuthException expected ) { } branch ( ) . get ( ) ; }
private static boolean missing ( final java.lang.String value ) { return ( value == null ) || ( value.trim ( ) . equals ( "" ) ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.Change > byProjectKey ( com.google.gerrit.reviewdb.Project.NameKey p , com.google.gerrit.reviewdb.Change.Key key ) throws com.google.gwtorm.client.OrmException ;
public void testIndexChangeFailed ( ) throws java.lang.Exception { setUpMocks ( com.ericsson.gerrit.plugins.syncindex.RestSessionTest.INDEX_OP , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.FAILED , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.ERROR_MSG , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.index ( com.ericsson.gerrit.plugins.syncindex.RestSessionTest.CHANGE_NUMBER ) ) . isFalse ( ) ; }
public void removeChangeListener ( com.google.gerrit.common.ChangeListener listener ) { }
public void deleteBranchByProjectOwner ( ) throws java.lang.Exception { grantOwner ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( ) ; }
public void testParseBad ( ) throws java.lang.Exception { com.google.gerrit.server.git.ValidationError.Sink sink = org.easymock.EasyMock.createNiceMock ( ValidationError.Sink.class ) ; org.easymock.EasyMock.replay ( sink ) ; com.google.gerrit.server.git.QueryList.parse ( com.google.gerrit.server.git.QueryListTest.L_BAD , sink ) ; }
public void patchSetDetail ( final com.google.gerrit.reviewdb.PatchSet.Id idA , final com.google.gerrit.reviewdb.PatchSet.Id idB , final com.google.gerrit.reviewdb.AccountDiffPreference diffPrefs , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail.create ( idA , idB , diffPrefs ) . to ( callback ) ; }
public static com.google.inject.Injector createInjector ( ) { return com.google.gerrit.server.config.GerritGlobalModule.createInjector ( com.google.inject.Guice.createInjector ( com.google.inject.Stage.PRODUCTION , new com.google.gerrit.server.config.DatabaseModule ( ) ) ) ; }
private java.io.Writer getWriter ( javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { return new java.io.OutputStreamWriter ( res.getOutputStream ( ) , res.getCharacterEncoding ( ) ) ; }
protected void configure ( ) { if ( ! ( groupsMigration.disableGroupReviewDb ( ) ) ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.server.audit.GroupMemberAuditListener.class ) . to ( com.google.gerrit.server.group.DbGroupMemberAuditListener.class ) ; } }
protected void fireEventForUnrestrictedListeners ( com.google.gerrit.server.events.Event event ) { if ( ! ( com.ericsson.gerrit.plugins.syncevents.Context.isForwardedEvent ( ) ) ) { super . fireEventForUnrestrictedListeners ( event ) ; } }
private static com.google.gerrit.server.git.MergeSuperSet.QueryKey create ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.lang.Iterable < java.lang.String > hashes ) { return new com.google.gerrit.server.git.AutoValue_MergeSuperSet_QueryKey ( branch , com.google.common.collect.ImmutableSet.copyOf ( hashes ) ) ; }
protected abstract com.google.gwtorm.client.ResultSet < T > scanPrimaryKey ( byte [ ] fromKey , byte [ ] toKey , int limit ) throws com.google.gwtorm.client.OrmException ;
public com.codahale.metrics.Metric getMetric ( java.lang.String name ) { return registry.getMetrics ( ) . get ( name ) ; }
public java.io.Reader get ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet ( ( "http://localhost:8080/a" + endPoint ) ) ; org.apache.http.HttpResponse response = getClient ( ) . execute ( get ) ; java.io.Reader reader = new java.io.InputStreamReader ( response.getEntity ( ) . getContent ( ) ) ; reader.skip ( JSON_MAGIC.length ) ; return reader ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , accountCache , realm , remotePeerProvider , dbProvider , id ) ; }
public void testEventSentOK ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( true , "" , false ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isTrue ( ) ; }
private com.google.gerrit.reviewdb.client.Change getChange ( com.google.gerrit.extensions.common.ChangeInfo info ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.common.ChangeHookApiListener.unwrap ( db.get ( ) ) . changes ( ) . get ( new com.google.gerrit.reviewdb.client.Change.Id ( info._number ) ) ; }
private void postMessage ( java.lang.String changeId , java.lang.String msg ) throws java.io.IOException { com.google.gerrit.acceptance.rest.change.ChangeMessagesIT.ReviewInput in = new com.google.gerrit.acceptance.rest.change.ChangeMessagesIT.ReviewInput ( ) ; in.message = msg ; session.post ( ( ( "/changes/" + changeId ) + "/revisions/1/review" ) , in ) . consume ( ) ; }
public void flushBuffer ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void validCert ( ) throws java.lang.Exception { org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( validNonce ( ) , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; assertProblems ( cert ) ; }
private final native void setIgnoreWhitespaceRaw ( java.lang.String i ) ;
protected void format ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "AddKey" ) ) ; }
protected void configure ( ) { bind ( java.nio.file.Path.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
public void testRightEventIsForwarded ( ) throws java.lang.Exception { setUpMocks ( true ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; org.mockito.Mockito.verifyZeroInteractions ( restSession ) ; }
protected void updateOwnerGroup ( com.google.gerrit.client.groups.GroupInfo ownerGroup ) { group.setOwnerUUID ( ownerGroup.getGroupUUID ( ) ) ; }
void setUseContributorArgreements ( boolean on ) { contributorAgreements = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE ; }
public final java.lang.String approvalKey ( ) { return approvalKey ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.Change.Status.ABANDONED ) ) { change.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } return null ; }
public java.lang.String getLoginHttpHeader ( ) { return sConfig.loginHttpHeader ; }
public org.eclipse.jgit.lib.RefUpdate.Result deleteFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( edit , new com.google.gerrit.server.edit.tree.DeleteFileModification ( file ) ) ; }
protected final boolean after ( int line , org.eclipse.jgit.diff.Edit e ) { return ( getEnd ( e ) ) < line ; }
public static synchronized int getSshdPort ( ) { return ( com.google.gerrit.server.ssh.GerritSshDaemon.sshd ) != null ? com.google.gerrit.server.ssh.GerritSshDaemon.sshd.getPort ( ) : 0 ; }
public boolean isVisible ( ) { return ( getProjectControl ( ) . visibleForReplication ( ) ) || ( canPerform ( Permission.READ ) ) ; }
public final void beforeTest ( ) throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start ( ) ; server.getTestInjector ( ) . injectMembers ( this ) ; }
public com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) { com.google.gerrit.reviewdb.Account.Id id = byName.get ( username ) ; return id != null ? byId.get ( id ) : null ; }
public static final com.google.gerrit.common.data.LabelType patchSetLock ( ) { com.google.gerrit.common.data.LabelType label = com.google.gerrit.server.project.Util.category ( "Patch-Set-Lock" , com.google.gerrit.server.project.Util.value ( 1 , "Patch Set Locked" ) , com.google.gerrit.server.project.Util.value ( 0 , "Patch Set Unlocked" ) ) ; label.setFunctionName ( "PatchSetLock" ) ; return label ; }
public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put ( "/groups/Administrators" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_PRECONDITION_FAILED , r.getStatusCode ( ) ) ; }
public void tearDown ( ) { requestContext.setContext ( null ) ; if ( ( db ) != null ) { db.close ( ) ; } com.google.gerrit.testutil.InMemoryDatabase.drop ( schemaFactory ) ; }
public static java.lang.String toAccountGroup ( final com.google.gerrit.reviewdb.AccountGroup.Id id ) { return "admin,group," + ( id.toString ( ) ) ; }
public static java.lang.String mediumFormat ( final java.util.Date dt ) { if ( dt == null ) { return "" ; } return com.google.gerrit.client.FormatUtil.dtfmt.format ( new java.util.Date ( dt.getTime ( ) ) ) ; }
public int hashCode ( ) { return value ( ) . hashCode ( ) ; }
private void addMessage ( java.lang.String message ) { messages.add ( new com.google.gerrit.server.git.ReceiveCommits.Message ( message , false ) ) ; }
private void doVerify ( ) { org.easymock.classextension.EasyMock.verify ( mockDb , pc , pcf , grm ) ; org.easymock.classextension.EasyMock.verify ( refMocks.toArray ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getFromUser ( java.lang.String username , java.lang.String email , java.lang.String fullName ) { try { return new com.googlesource.gerrit.plugins.github.oauth.OAuthCookie ( cipher , username , email , fullName ) ; } catch ( com.googlesource.gerrit.plugins.github.oauth.OAuthTokenException e ) { return null ; } }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { actionsPanel.remove ( b ) ; fireOnSuggestRefresh ( ) ; }
private void enable ( final boolean on ) { showSiteHeader.setEnabled ( on ) ; useFlashClipboard.setEnabled ( on ) ; maximumPageSize.setEnabled ( on ) ; defaultContext.setEnabled ( on ) ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { setApiHeaders ( res , com.google.gitiles.FormatType.TEXT ) ; return res.getWriter ( ) ; }
private static int version ( com.google.gerrit.server.index.change.ChangeIndex i ) { return i.getSchema ( ) . getVersion ( ) ; }
private boolean isPrimitive ( final org.kohsuke.args4j.spi.Setter setter ) { return setter.getType ( ) . isPrimitive ( ) ; }
protected Account.Id getAccountId ( ) { com.google.gerrit.server.CurrentUser u = currentUser.get ( ) ; if ( u instanceof com.google.gerrit.server.IdentifiedUser ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( u ) ) . getAccountId ( ) ; } return null ; }
private static com.google.gerrit.server.change.ConsistencyChecker.Result create ( com.google.gerrit.reviewdb.client.Change.Id id , java.util.List < com.google.gerrit.extensions.common.ProblemInfo > problems ) { return new com.google.gerrit.server.change.AutoValue_ConsistencyChecker_Result ( id , null , problems ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int limit ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 , limit ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { submitTypeRecord = com.google.gerrit.common.data.SubmitTypeRecord.OK ( Project.SubmitType.valueOf ( result.asString ( ) ) ) ; }
private void setNew ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
public void removeCollaborators ( java.util.Collection < com.googlesrouce.gerrit.plugins.github.git.GHUser > users ) throws java.io.IOException { ghRepository.removeCollaborators ( users ) ; }
void sendMessages ( ) { for ( com.google.gerrit.server.git.ReceiveCommits.Message m : messages ) { if ( m.isError ) { messageSender.sendError ( m.message ) ; } else { messageSender.sendMessage ( m.message ) ; } } }
public T getValue ( ) { return asEditor ( ) . getValue ( ) ; }
public final native void copySelfOnEmail ( boolean c ) ;
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.IntegrationException { return args.mergeUtil.canFastForward ( args.mergeSorter , mergeTip , args.rw , toMerge ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNewRight ( ) ; }
public final boolean canLink ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revision ) { return ( revision.draft ( ) ) || ( type ( ) . linkDrafts ( ) ) ; }
public < T > T get ( com.google.gerrit.rules.StoredValue < T > sv ) { return sv.getOrNull ( engine ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( final com.google.gerrit.reviewdb.client.PatchSet.Id c ) { return com.google.gerrit.server.git.MergeUtil.getSubmitter ( db.get ( ) , c ) ; }
public com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey primaryKey ( com.google.gwtorm.jdbc.TestJdbcAccess.Data entity ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public boolean isLabel ( ) { return com.google.gerrit.common.data.Permission.isLabel ( getName ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent e ) { e.preventDefault ( ) ; e.stopPropagation ( ) ; }
private void initProviderJce ( ) { setKeyExchangeFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.KeyExchange > > asList ( new org.apache.sshd.server.kex.DHG1.Factory ( ) ) ) ; setRandomFactory ( new org.apache.sshd.common.random.SingletonRandomFactory ( new org.apache.sshd.common.random.JceRandom.Factory ( ) ) ) ; }
protected void onOpenRow ( final int row ) { final com.google.gerrit.client.info.ChangeInfo c = getRowItem ( row ) ; final com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public java.lang.String toString ( ) { return ( "AccessSection[" + ( getRefPattern ( ) ) ) + "]" ; }
public void patchSetDetail ( final com.google.gerrit.reviewdb.PatchSet.Id id , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail.create ( id ) . to ( callback ) ; }
public void createNewDraftChange ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isTrue ( ) ; assertCreateSucceeds ( newChangeInput ( ChangeStatus.DRAFT ) ) ; }
public void setSideA ( com.google.gerrit.reviewdb.PatchSet.Id patchSetId ) { idSideA = patchSetId ; com.google.gerrit.client.patches.PatchScreen.diffSideA = patchSetId ; if ( ( fileList ) != null ) { fileList.setPatchSetIdToCompareWith ( patchSetId ) ; } }
public void getUrl ( ) throws java.lang.Exception { config.setString ( "database" , null , "instance" , "3" ) ; com.google.common.truth.Truth.assertThat ( hana.getUrl ( ) ) . isEqualTo ( "jdbc:sap://my.host:30315" ) ; config.setString ( "database" , null , "instance" , "77" ) ; com.google.common.truth.Truth.assertThat ( hana.getUrl ( ) ) . isEqualTo ( "jdbc:sap://my.host:37715" ) ; }
public void testAcrossNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 , 1 ) , iter.advance ( 5 ) ) ; }
public void resetToDefaults ( ) { defaultContext = com.google.gerrit.client.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; showSiteHeader = true ; useFlashClipboard = true ; }
public com.google.gwtorm.server.Access < ? , ? > [ ] allRelations ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public WorkQueue.Executor createEmailReviewCommentsExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "sendemail" , null , "threadPoolSize" , 1 ) ; return queues.createQueue ( poolSize , "EmailReviewComments" ) ; }
public com.google.gerrit.acceptance.RestResponse head ( java.lang.String endPoint ) throws java.io.IOException { return execute ( org.apache.http.client.fluent.Request.Head ( ( ( ( url ) + "/a" ) + endPoint ) ) ) ; }
private void initUI ( ) { initName ( ) ; initDescription ( ) ; initMemberList ( ) ; }
public void addOtherUsersGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getId ( ) , new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( "foo:myId" ) ) ; db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( extId ) ) ; com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( "GPG key already associated with another account" ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; }
public boolean isVisible ( ) { if ( ( isVisible ) == null ) { isVisible = ( ( getCurrentUser ( ) . isInternalUser ( ) ) || ( canPerform ( Permission.READ ) ) ) && ( canRead ( ) ) ; } return isVisible ; }
public void configure ( ) { java.lang.String secureStoreClassName = com.google.gerrit.server.config.GerritServerConfigModule.getSecureStoreClassName ( sitePath ) ; bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName.class ) . toProvider ( com.google.inject.util.Providers.of ( secureStoreClassName ) ) ; }
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( account ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
public final AccountGroup.Id getGroupId ( ) { return new com.google.gerrit.reviewdb.client.AccountGroup.Id ( groupId ( ) ) ; }
public void onFocus ( com.google.gwt.user.client.ui.Widget sender ) { if ( Util.C.defaultAccountName ( ) . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( "" ) ; nameTxtBox.removeStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public void afterRefresh ( boolean didRefresh ) throws java.io.IOException { for ( com.google.gerrit.lucene.SubIndex.NrtFuture f : notDoneNrtFutures ) { f.removeIfDone ( ) ; } }
public java.util.List < ? extends com.google.gerrit.extensions.common.GroupAuditEventInfo > auditLog ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getAuditLog.apply ( rsrc ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get audit log" , e ) ; } }
public boolean indexChange ( final int changeId ) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request ( ( "index change " + changeId ) ) { @ java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send ( ) throws java.io.IOException { return httpSession.post ( buildIndexEndpoint ( changeId ) ) ; } } . execute ( ) ; }
public void add ( com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate ) { draftUpdates.put ( draftUpdate.getRefName ( ) , draftUpdate ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( revision , null ) ; } catch ( com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft ps" , e ) ; } }
public static com.google.gerrit.server.patch.PatchListKey againstCommit ( org.eclipse.jgit.lib.AnyObjectId otherCommitId , org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace ) { return new com.google.gerrit.server.patch.PatchListKey ( otherCommitId , newId , whitespace , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public static boolean readWrite ( ) { return ( ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) == ( com.google.gerrit.testutil.NoteDbMode.READ_WRITE ) ) || ( ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) == ( com.google.gerrit.testutil.NoteDbMode.PRIMARY ) ) ; }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.lucene.LuceneIndexModule.SingleVersionListener.class ) ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.userAccount ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.userAccount ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( ) ; }
public void removeAll ( ) { cache.removeAll ( ) ; }
public void setTimeForTesting ( ) { systemTimeZone = java.lang.System.setProperty ( "user.timezone" , "US/Eastern" ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public int compare ( final com.google.gerrit.client.reviewdb.Project a , final com.google.gerrit.client.reviewdb.Project b ) { return a.getName ( ) . compareTo ( b.getName ( ) ) ; }
public abstract java.lang.String getSqlType ( com.google.gwtorm.schema.ColumnModel column ) ;
private boolean canRegisterNewEmail ( ) { return com.google.gerrit.client.Gerrit.info ( ) . auth ( ) . canEdit ( Account.FieldName.REGISTER_NEW_EMAIL ) ; }
public com.google.common.base.Optional < com.google.gerrit.server.query.change.ChangeData.ChangedLines > changedLines ( ) throws com.google.gwtorm.server.OrmException { if ( ( changedLines ) == null ) { if ( ! ( lazyLoad ) ) { return com.google.common.base.Optional.absent ( ) ; } changedLines = computeChangedLines ( ) ; } return changedLines ; }
protected void onLoad ( ) { super . onLoad ( ) ; query = new com.google.gerrit.client.admin.ProjectTagsScreen.Query ( match ) . start ( start ) . run ( ) ; savedPanel = TAGS ; }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; return update ; }
protected abstract void populateDownloadCommandLinks ( ) ;
public java.lang.String getName ( ) { return this . getName ( ) ; }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.newIdent ( author , when , serverIdent , anonymousCowardName ) ; }
private static com.google.common.collect.ImmutableMultimap.Builder < org.eclipse.jgit.lib.ObjectId , com.google.gerrit.reviewdb.client.PatchSet.Id > patchSets ( ) { return com.google.common.collect.ImmutableMultimap.builder ( ) ; }
public java.lang.String getRepository ( ) { return gitHubRepository.repository ; }
public com.google.gerrit.pgm.util.LibraryDownloader setRequired ( final boolean required ) { this . required = required ; return this ; }
public boolean isOwner ( ) { return ( controlForRef ( AccessSection.ALL ) . isOwner ( ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ; }
void changeProjectSettings ( com.google.gerrit.reviewdb.Project update , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = session.delete ( urlEdit ( ) ) ; org.junit.Assert.assertEquals ( org.apache.http.HttpStatus.SC_BAD_REQUEST , r.getStatusCode ( ) ) ; }
void storeEvent ( com.google.gerrit.server.events.ProjectEvent event ) throws java.sql.SQLException { storeEvent ( event.getProjectNameKey ( ) . get ( ) , new java.sql.Timestamp ( java.util.concurrent.TimeUnit.SECONDS.toMillis ( event.eventCreatedOn ) ) , new com.google.gson.Gson ( ) . toJson ( event ) ) ; }
public void execute ( ) { getElement ( ) . getStyle ( ) . setPaddingLeft ( cm.getGutterElement ( ) . getOffsetWidth ( ) , Unit.PX ) ; }
com.google.gerrit.common.changes.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.SideBySide2.DisplaySide side ) { return ( side == ( com.google.gerrit.client.diff.SideBySide2.DisplaySide.A ) ) && ( ( base ) == null ) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION ; }
void setLimit ( int n ) { queryProcessor.setLimit ( n ) ; }
protected io.searchbox.core.Bulk.Builder addActions ( io.searchbox.core.Bulk.Builder builder , com.google.gerrit.reviewdb.client.Change.Id c ) { return builder.addAction ( delete ( OPEN_CHANGES , c ) ) . addAction ( delete ( OPEN_CHANGES , c ) ) ; }
public java.util.List < com.google.gerrit.extensions.api.projects.ReflogEntryInfo > reflog ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getReflog.apply ( resource ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve reflog" , e ) ; } }
public static java.lang.String toChangeQuery ( final java.lang.String query ) { return ( ( "q," + ( com.google.gwtorm.client.KeyUtil.encode ( query ) ) ) + "," ) + ( com.google.gerrit.common.PageLinks.TOP ) ; }
private static void logAndThrowSubmoduleException ( final java.lang.String errorMsg ) throws com.google.gerrit.server.git.SubmoduleException { com.google.gerrit.server.git.SubmoduleOp.log.error ( errorMsg ) ; throw new com.google.gerrit.server.git.SubmoduleException ( errorMsg ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.PatchLineComment result ) { enable ( true ) ; notifyDraftDelta ( 1 ) ; createEditor ( result ) . setOpen ( false ) ; }
com.googlesource.gerrit.plugins.quota.UsageDataEventCreator providePushEventCreator ( com.google.gerrit.server.project.ProjectCache projectCache , @ com.google.inject.name.Named ( value = com.googlesource.gerrit.plugins.quota.PersistentCounter.PUSH ) com.googlesource.gerrit.plugins.quota.PersistentCounter counts ) { return new com.googlesource.gerrit.plugins.quota.FetchAndPushEventCreator ( projectCache , counts , FetchAndPushEventCreator.PUSH_COUNT ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box , com.google.gerrit.common.changes.Side side ) { diffTable.onRemoveDraftBox ( box , side ) ; }
public boolean getBoolean ( java.lang.String name , boolean defaultValue ) { return getValue ( name , new com.google.common.base.Function < java.lang.String , java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean apply ( java.lang.String stringVal ) { return java.lang.Boolean.parseBoolean ( stringVal ) ; } } , defaultValue ) ; }
public void keyExpiringInFuture ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.key2 ( ) ) ; }
public void setCurrentFilePaths ( java.util.List < java.lang.String > filePaths ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet ( ) ; if ( ps != null ) { files.put ( ps.getPatchSetId ( ) , com.google.common.collect.ImmutableList.copyOf ( filePaths ) ) ; } }
public void execute ( ) { setFocus ( true ) ; }
protected boolean hasDifferences ( com.google.gerrit.common.data.PatchScript script ) { return ( hasEdits ( script ) ) || ( hasMeta ( script ) ) ; }
public void testProjectWithSlashesNotFound ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gerrit.server.util.SubmoduleSection > sectionsToReturn = new java.util.HashMap < > ( ) ; sectionsToReturn.put ( "project" , new com.google.gerrit.server.util.SubmoduleSection ( "ssh://localhost/company/tools/project" , "project" , "." ) ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expectedSubscriptions = java.util.Collections.emptySet ( ) ; execute ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "super-project" ) , "refs/heads/master" ) , sectionsToReturn , new java.util.HashMap < java.lang.String , java.lang.String > ( ) , expectedSubscriptions ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { goChange ( ) ; }
public boolean isVisible ( ) { return getProjectControl ( ) . isVisible ( ) ; }
private void assertCanRead ( com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.isVisible ( ) ) . named ( "can read" ) . isTrue ( ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , getRefControl ( ) . forUser ( who ) , getChange ( ) ) ; }
private static synchronized com.google.gerrit.git.WorkQueue.Executor getPool ( final boolean autoStart ) { if ( autoStart && ( ( com.google.gerrit.git.WorkQueue.pool ) == null ) ) { com.google.gerrit.git.WorkQueue.pool = new com.google.gerrit.git.WorkQueue.Executor ( 1 ) ; } return com.google.gerrit.git.WorkQueue.pool ; }
public boolean canForgeGerritServerIdentity ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.FORGE_IDENTITY , com.google.gerrit.reviewdb.ApprovalCategory.FORGE_SERVER ) ; }
Account.Id parse ( java.lang.String id ) { return Account.Id.parse ( id ) ; }
public void evict ( com.google.gerrit.reviewdb.Account.Id key ) { byAccountId.remove ( key ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( ! ( failed ) ) { failed = true ; failedThrowable = caught ; } remaining.remove ( this ) ; this . applyAllFailed ( ) ; }
void onIgnoreWhitespace ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ChangeEvent e ) { prefs.ignoreWhitespace ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.valueOf ( ignoreWhitespace.getValue ( ignoreWhitespace.getSelectedIndex ( ) ) ) ) ; view.reloadDiffInfo ( ) ; }
protected void insertRow ( final int row ) { table.insertRow ( row ) ; table.getCellFormatter ( ) . setStyleName ( row , 0 , com.google.gerrit.client.patches.S_ICON_CELL ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return getRefControl ( ) . getCurrentUser ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { update ( ) ; } }
private com.google.gerrit.extensions.common.ChangeStatus booleanToDraftStatus ( java.lang.Boolean draft ) { if ( draft == null ) { return com.google.gerrit.extensions.common.ChangeStatus.NEW ; } return draft ? com.google.gerrit.extensions.common.ChangeStatus.DRAFT : com.google.gerrit.extensions.common.ChangeStatus.NEW ; }
public void testExclamationMark ( ) { com.google.gerrit.common.data.GitWebType gitWebType = new com.google.gerrit.common.data.GitWebType ( ) ; gitWebType.setPathSeparator ( '!' ) ; org.junit.Assert.assertEquals ( "a!b" , gitWebType.replacePathSeparator ( "a/b" ) ) ; }
com.google.gerrit.server.git.WorkQueue.Executor getExecutor ( @ com.google.gerrit.server.config.GerritServerConfig final org.eclipse.jgit.lib.Config config , final com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "receive" , null , "threadPoolSize" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) ) ; return queues.createQueue ( poolSize , "ReceiveCommits" ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { throw new com.googlecode.prolog_cafe.lang.IllegalTypeException ( "integer" , this ) ; }
public void startPositionEqualToEndPositionIsValidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 11 , 13 , 11 ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isValid ( ) ; }
public void linkifyAmpersand ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS , config ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url?a&b" , "url" , "http://my/url?a&b" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url?a&b" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://weird/htmlified/?url" , "url" , "http://weird/htmlified/?url" ) , com.google.common.collect.ImmutableMap.of ( "text" , "&lt;p&rt;" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://weird/htmlified/?url&lt;p&rt;" ) ) ; }
public void testKeyIdToString ( ) throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = com.google.gerrit.gpg.testutil.TestKey.key1 ( ) . getPublicKey ( ) ; org.junit.Assert.assertEquals ( "46328A8C" , com.google.gerrit.gpg.PublicKeyStore.keyIdToString ( key.getKeyID ( ) ) ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.ProjectDetail result ) { display ( result ) ; }
static com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > commitField ( java.lang.String id ) { if ( ( id.length ( ) ) == ( org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH ) ) { return com.google.gerrit.server.index.ChangeField.EXACT_COMMIT ; } return com.google.gerrit.server.index.ChangeField.COMMIT ; }
public void onFailure ( java.lang.Throwable caught ) { query = new com.google.gerrit.client.admin.ProjectBranchesScreen.Query ( ) . start ( start ) . run ( ) ; super . onFailure ( caught ) ; }
private final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk ( ) throws com.google.gerrit.server.contact.NoSuchProviderException , org.bouncycastle.openpgp.PGPException { BRANCH ( f20820 ) ; com.google.gerrit.server.contact.Remove now ; com.google.gerrit.server.contact.project parameter ; org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator ( org.bouncycastle.openpgp.PGPEncryptedData.CAST5 , true , prng , "BC" ) ; cpk.addMethod ( dest ) ; return cpk ; }
public void addReviewerByEmailToReviewableChangeInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; forAll ( ( adder ) -> { java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; } }
protected void preDisplay ( java.lang.String content ) { initEditor ( content ) ; }
public void setBlock ( boolean block ) { this . block = block ; }
public boolean canUpload ( ) { return getProjectControl ( ) . controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH ) ; }
public static java.io.File solrIndexConfig ( com.google.gerrit.server.config.SitePaths sitePaths ) { return new java.io.File ( sitePaths.index_dir , "gerrit_index.config" ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withOption ( com.google.gerrit.extensions.common.ListChangesOption options ) { this . options.add ( options ) ; return this ; }
public com.google.gerrit.server.patch.PatchList get ( final com.google.gerrit.reviewdb.Change change , final com.google.gerrit.reviewdb.PatchSet patchSet ) { return get ( change , patchSet , com.google.gerrit.common.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; }
protected void configureCommands ( ) { command ( com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusAdminQueryShell.class ) ; command ( com.googlesource.gerrit.plugins.verifystatus.commands.SaveCommand.class ) ; factory ( VerifyStatusQueryShell.Factory.class ) ; }
public void destroySite ( ) throws java.lang.Exception { if ( ( sitePath ) != null ) { com.google.gerrit.acceptance.TempFileUtil.recursivelyDelete ( sitePath ) ; } }
public void noNotificationForChangeThatIsTurnedPrivateForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%private" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ProjectList result ) { createProjectLinkPanel.setVisible ( result.canCreateProject ( ) ) ; projects.display ( result.getProjects ( ) ) ; projects.finishDisplay ( ) ; }
public java.lang.String getTarget ( ) { return Target.BLANK ; }
public void removingReviewerTriggersNotification ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isTrue ( ) ; com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo ( "Foo Bar" , "foo.bar@gerritcodereview.com" ) ; for ( com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of ( ReviewerState.CC , ReviewerState.REVIEWER ) ) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.extensions.api.changes.AddReviewerInput addInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; addInput.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRFCAddressString ( acc ) ; addInput.state = state ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . addReviewer ( addInput ) ; com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; reviewInput.message = "I have a comment" ; setApiUser ( user ) ; revision ( r ) . review ( reviewInput ) ; setApiUser ( admin ) ; sender.clear ( ) ; com.google.gerrit.extensions.api.changes.DeleteReviewerByEmailInput deleteReviewerInput = new com.google.gerrit.extensions.api.changes.DeleteReviewerByEmailInput ( ) ; deleteReviewerInput.reviewer = addInput.reviewer ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . deleteReviewerByEmail ( deleteReviewerInput ) ; java.util.List < com.google.gerrit.testutil.FakeEmailSender.Message > messages = sender.getMessages ( ) ; com.google.common.truth.Truth.assertThat ( messages ) . hasSize ( 1 ) ; com.google.common.truth.Truth.assertThat ( messages.get ( 0 ) . rcpt ( ) ) . containsExactly ( com.google.gerrit.server.mail.Address.parse ( addInput.reviewer ) , user.emailAddress ) ; sender.clear ( ) ; } }
public Project.NameKey getProjectNameKey ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change.get ( ) . project ) ; }
protected com.google.gerrit.pgm.CmdLineParser newCmdLineParser ( ) { return new com.google.gerrit.pgm.CmdLineParser ( this ) ; }
private com.google.gerrit.server.plugins.ServerPlugin loadExternalPlugin ( java.lang.String name , java.io.File scriptFile , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot ) { return externalPluginFactory.get ( name , scriptFile , pluginUserFactory.create ( name ) , snapshot ) ; }
public void invalidate ( final com.google.gerrit.client.reviewdb.Project p ) { if ( p != null ) { auto.remove ( p.getNameKey ( ) ) ; auto.remove ( p.getId ( ) ) ; } }
public com.google.gerrit.server.account.GroupMembership groups ( com.google.gerrit.server.account.AccountState who ) ;
private static boolean isCssName ( final java.lang.String name ) { return com.google.gwtexpui.safehtml.client.SafeHtmlBuilder.isElementName ( name ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "ALL" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
public int run ( ) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.server.config.GerritGlobalModule.createInjector ( ) ; com.google.inject.Injector sshInjector = createSshInjector ( sysInjector ) ; com.google.gerrit.server.Lifecycle.start ( sysInjector , sshInjector ) ; return never ( ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
public void commentOnReviewableChangeByOwnerCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setEmailStrategy ( sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; if ( ( name ) != null ) { setPageTitle ( Util.M.project ( name.get ( ) ) ) ; } }
public void testCreateGroupWhenGroupAlreadyExists_Conflict ( ) throws java.lang.Exception { try { gApi.groups ( ) . create ( "Administrators" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceConflictException expected ) { } }
public com.google.gerrit.server.plugins.InstallPlugin create ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , com.google.gerrit.server.util.Url.decode ( id ) , true ) ; }
com.google.gerrit.server.change.EmailReviewComments create ( com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notify , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id authorId , com.google.gerrit.reviewdb.client.ChangeMessage message , java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) ;
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.server.query.change.QueryOptions opts ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , opts ) ; }
private void fill ( com.google.gerrit.server.change.AccountInfo info , com.google.gerrit.reviewdb.client.Account account ) { info.name = account.getFullName ( ) ; if ( detailed ) { info._account_id = account.getId ( ) . get ( ) ; info.email = account.getPreferredEmail ( ) ; } }
protected void preDisplay ( java.lang.Void result ) { com.google.gerrit.client.diff.DiffInfo diffInfo = diff ; diff = null ; display ( diffInfo ) ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( db , repoManager , migration , allUsersProvider , change ) . load ( ) ; }
public org.eclipse.jgit.lib.PersonIdent getUserPersonIdent ( ) { return createPersonIdent ( ) ; }
protected void populateWatches ( ) { Util.ACCOUNT_SVC.myProjectWatch ( new com.google.gerrit.client.rpc.ScreenLoadCallback < java.util.List < com.google.gerrit.common.data.AccountProjectWatchInfo > > ( this ) { @ java.lang.Override public void preDisplay ( final java.util.List < com.google.gerrit.common.data.AccountProjectWatchInfo > result ) { watchesTab.display ( result ) ; } } ) ; }
public void pushForMasterWithHashtagsNoteDbDisabled ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master%hashtag=tag1" ) ; r.assertErrorStatus ( "cannot add hashtags; noteDb is disabled" ) ; }
public java.lang.String getReplacementString ( ) { final com.google.gerrit.common.data.AccountInfo accountInfo = reviewerInfo.getAccountInfo ( ) ; if ( accountInfo != null ) { return com.google.gerrit.client.FormatUtil.nameEmail ( accountInfo ) ; } return reviewerInfo.getGroup ( ) . getName ( ) ; }
public void linkifyMessageUrlAndChangeId ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS , config ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url/I0123456789" , "url" , "http://my/url/I0123456789" ) , com.google.common.collect.ImmutableMap.of ( "text" , " is not change " ) , com.google.common.collect.ImmutableMap.of ( "text" , "I0123456789" , "url" , "http://test-host-review/foo/#/q/I0123456789,n,z" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url/I0123456789 is not change I0123456789" ) ) ; }
private java.lang.String createGroup ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput ( ) ; in.ownerId = "Administrators" ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public static void getDefault ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + "default" ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
boolean canAddPatchSet ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.ADD_PATCH_SET ) ) && ( canWrite ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; add ( com.google.gerrit.client.admin.ProjectAccessScreen.uiBinder.createAndBindUi ( this ) ) ; driver = com.google.gwt.core.client.GWT.create ( com.google.gerrit.client.admin.ProjectAccessScreen.Driver.class ) ; driver.initialize ( accessEditor ) ; }
protected com.google.gerrit.server.query.Predicate < T > postRewrite ( com.google.gerrit.server.query.Predicate < T > pred ) { return pred ; }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private" ) . delete ( cb ) ; }
public com.google.common.collect.ImmutableList < com.google.gerrit.testutil.FakeEmailSender.Message > getMessages ( ) { waitForEmails ( ) ; synchronized ( messages ) { return com.google.common.collect.ImmutableList.copyOf ( messages ) ; } }
protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; session = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; com.google.gerrit.acceptance.git.GitUtil.initSsh ( admin ) ; com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project.get ( ) ) ; git = com.google.gerrit.acceptance.git.GitUtil.cloneProject ( ( ( ( sshSession.getUrl ( ) ) + "/" ) + ( project.get ( ) ) ) ) ; sshSession.close ( ) ; db = reviewDbProvider.open ( ) ; }
protected void setCurrentUrl ( com.google.gerrit.client.download.DownloadUrlLink link ) { widget.setVisible ( true ) ; copyLabel.setText ( ( ( "git fetch " + ( link.urlData ) ) + " && git cherry-pick FETCH_HEAD" ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { goChange ( ) ; }
public java.lang.Thread newThread ( final java.lang.Runnable task ) { final java.lang.Thread t = parent.newThread ( task ) ; t.setName ( ( ( prefix + "-thread-" ) + ( tid.getAndIncrement ( ) ) ) ) ; return t ; }
void set ( com.google.gerrit.server.index.account.AccountIndexCollection indexCollection ) { this . indexCollection = indexCollection ; }
public com.google.gerrit.server.project.ChangeControl getChangeControl ( ) { return ctl ; }
public void listNonEmptyGroupMembers ( ) throws java.lang.Exception { assertMembers ( GET ( "/groups/Administrators/members/" ) , admin.fullName ) ; accounts.create ( "admin2" , "Administrators" ) ; assertMembers ( GET ( "/groups/Administrators/members/" ) , admin.fullName , "admin2" ) ; }
public boolean createProject ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String head ) { boolean success = false ; for ( org.eclipse.jgit.transport.URIish uri : getURIs ( project , false ) ) { success &= createProject ( uri , head ) ; } return success ; }
public com.google.gerrit.reviewdb.server.ChangeAccess changes ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountExternalIdInfo > getExternalIds ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getExternalIds.apply ( account ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get external IDs" , e ) ; } }
private boolean isValidEntry ( java.util.jar.JarEntry entry ) { return ( entry != null ) && ( ( entry.getSize ( ) ) > 0 ) ; }
public boolean isNested ( ) { return ( getPrimitiveType ( ) ) == null ; }
protected void preExecute ( ) { super . preExecute ( ) ; progress = v ( R.id.progress ) ; initialProgress = v ( R.id.initialProgress ) ; reloadButton = v ( R.id.reloadButton ) ; statusText = tv ( R.id.statusText ) ; changeList = vg ( R.id.changeList ) ; }
public void center ( ) { super . center ( ) ; com.google.gwtexpui.globalkey.client.GlobalKey.dialog ( this ) ; message.setFocus ( true ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo > map ) { map.copyKeysIntoChildren ( "category" ) ; panel.setWidget ( new com.googlesource.gerrit.plugins.verifystatus.client.BuildsDropDownPanel ( ) ) ; }
public boolean rebuildProject ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > allChanges , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository allUsersRepo ) { return false ; }
public java.lang.String getBaseProject ( boolean isPrivateProject ) { return com.google.common.base.Objects.firstNonNull ( ( isPrivateProject ? privateBaseProject : publicBaseProject ) , allProjectsName ) ; }
public void testCreateProjectWithNameMismatch_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "otherName" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/someName" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.rules.PredicateProvider.class ) . to ( com.vmware.gerrit.owners.OwnerPredicateProvider.class ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , accessPath , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , remotePeerProvider , null , id ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , caller ) ; }
public void onScreenLoad ( com.google.gerrit.client.ui.ScreenLoadEvent event ) { if ( ( event.getScreen ( ) ) instanceof com.google.gerrit.client.admin.ProjectScreen ) { com.google.gerrit.client.Gerrit.menuLeft.selectTab ( com.google.gerrit.client.Gerrit.menuLeft.getWidgetIndex ( this ) ) ; } }
public void getGeneralPreferences ( ) throws java.lang.Exception { com.google.gerrit.extensions.client.GeneralPreferencesInfo result = gApi.config ( ) . server ( ) . getDefaultPreferences ( ) ; com.google.gerrit.acceptance.AssertUtil.assertPrefs ( result , com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults ( ) , "my" ) ; }
public void add ( final com.google.gerrit.server.plugins.RegistrationHandle handle ) { add ( new com.google.gerrit.lifecycle.LifecycleListener ( ) { @ java.lang.Override public void start ( ) { } @ java.lang.Override public void stop ( ) { handle.remove ( ) ; } } ) ; }
public void self ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts ( ) . self ( ) . get ( ) ; org.junit.Assert.assertEquals ( "Administrator" , info.name ) ; org.junit.Assert.assertEquals ( "admin@example.com" , info.email ) ; org.junit.Assert.assertEquals ( "admin" , info.username ) ; }
private static com.google.gerrit.server.git.PerThreadRequestScope getContext ( ) { final com.google.gerrit.server.git.PerThreadRequestScope ctx = com.google.gerrit.server.git.PerThreadRequestScope.current.get ( ) ; if ( ctx == null ) { throw new com.google.inject.OutOfScopeException ( "Not in command/request" ) ; } return ctx ; }
public boolean canListen ( java.net.InetSocketAddress address , org.apache.sshd.server.session.ServerSession session ) { return false ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( deleteTask ( cd ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
protected boolean shouldClose ( org.eclipse.jgit.lib.Repository repo ) { return true ; }
public void start ( org.apache.sshd.server.Environment env ) throws java.io.IOException { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; impl.display ( out ) ; } } ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change.setCurrentPatchSet ( patchSetInfoFactory.get ( newCommit , ps.getId ( ) ) ) ; return change ; }
public void setLocalUser ( java.lang.String localUser ) { if ( externalId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT ) ) { externalId = ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT , localUser ) ; } }
public void setChanges ( java.util.List < com.google.gerrit.client.data.ChangeInfo > c ) { changes = c ; }
protected void configure ( ) { delete ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND ) . to ( com.googlesource.gerrit.plugins.deleteproject.DeleteProject.class ) ; post ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "delete" ) . to ( com.googlesource.gerrit.plugins.deleteproject.DeleteProject.class ) ; }
public void testEntityNbsp ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; assertSame ( b , b.nbsp ( ) ) ; assertEquals ( "&nbsp;" , b.asString ( ) ) ; }
public void setUpMocks ( ) { servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet ( indexer ) ; id = Account.Id.parse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ; org.mockito.Mockito.when ( req.getPathInfo ( ) ) . thenReturn ( ( "/index/account/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ) ) ; }
void replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { writer.updateDocument ( term , doc ) ; }
public boolean containsHeader ( java.lang.String name ) { return false ; }
private com.google.gerrit.server.config.GetServerInfo.UserConfigInfo getUserInfo ( java.lang.String anonymousCowardName ) { com.google.gerrit.server.config.GetServerInfo.UserConfigInfo info = new com.google.gerrit.server.config.GetServerInfo.UserConfigInfo ( ) ; info.anonymousCowardName = anonymousCowardName ; return info ; }
protected void migrateData ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws com.google.gwtorm.server.OrmException { try ( com.google.gwtorm.server.StatementExecutor e = newExecutor ( db ) ) { e.execute ( "UPDATE changes SET status = 'n' WHERE status = 's'" ) ; } }
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.IOException ;
void addError ( java.lang.String error ) { messages.add ( new com.google.gerrit.server.git.ReceiveCommits.Message ( error , true ) ) ; }
public void cancel ( ) { for ( com.googlesrouce.gerrit.plugins.github.git.GitJob job : jobs.values ( ) ) { job.cancel ( ) ; } }
public com.google.gerrit.extensions.api.projects.BranchApi branch ( java.lang.String ref ) { return branchApi.create ( project , ref ) ; }
public java.util.List < com.google.gerrit.client.data.ApprovalType > getApprovalTypes ( ) { initApprovalTypes ( ) ; return approvalTypes ; }
public void go ( ) { for ( com.google.gerrit.reviewdb.client.Patch p : detail.getPatches ( ) ) { openWindow ( com.google.gerrit.client.Dispatcher.toPatchUnified ( base , p.getKey ( ) ) ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , null , null , id ) ; }
public static boolean useSsh ( ) { return ( com.google.gerrit.testutil.SshMode.get ( ) ) == ( com.google.gerrit.testutil.SshMode.YES ) ; }
protected abstract void onCellSingleClick ( int row , int column ) ;
public static void add ( com.google.gerrit.client.changes.ChangeInfo info ) { com.google.gerrit.client.projects.ConfigInfoCache.instance.changeToProject.put ( info.legacyId ( ) . get ( ) , info.project ( ) ) ; }
com.google.gerrit.httpd.raw.FontsServlet getFontsServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet ( cache , getPaths ( ) . buckOut ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . addValue ( fields.keySet ( ) ) . toString ( ) ; }
private com.google.gerrit.extensions.common.ChangeInfo getWithLabels ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { return get ( r.getChangeId ( ) , ListChangesOption.LABELS , ListChangesOption.DETAILED_LABELS ) ; }
private com.google.gerrit.server.project.ChangeControl incrementPatchSet ( com.google.gerrit.server.project.ChangeControl ctl ) throws java.lang.Exception { return incrementPatchSet ( ctl , patchSetCommit ( nextPatchSetId ( ctl ) ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.config.GerritOptions.class ) . toInstance ( new com.google.gerrit.server.config.GerritOptions ( config , false , false , false ) ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > copyVetosToLatestPatchSet ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return copyVetosToLatestPatchSet ( db , change ) ; }
public void testLinkifyAmpersand ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url?a&b" , "url" , "http://my/url?a&b" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url?a&b" ) ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://weird/htmlified/?url" , "url" , "http://weird/htmlified/?url" ) , com.google.common.collect.ImmutableMap.of ( "text" , "&lt;p&rt;" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://weird/htmlified/?url&lt;p&rt;" ) ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return user ; }
public void run ( ) { openIndex.close ( ) ; }
public com.googlesource.gerrit.plugins.hooks.HookArgs createArgs ( ) { return new com.googlesource.gerrit.plugins.hooks.HookArgs ( anonymousCowardName , urlProvider ) ; }
public com.google.gerrit.pgm.util.LibraryDownloader setRequired ( final boolean required ) { this . required = required ; return this ; }
public void run ( ) { ( header.hasNext ( ) ? header.next : header.up ) . go ( ) ; }
public void evict ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { if ( accountId != null ) { byId.invalidate ( accountId ) ; } }
public void show ( ) { impl.visible ( true ) ; super . show ( ) ; }
public com.google.gerrit.server.change.ChangeInserter setGroups ( java.lang.Iterable < java.lang.String > groups ) { patchSet.setGroups ( groups ) ; return this ; }
public static com.google.gwt.event.shared.HandlerRegistration addRpcCompleteHandler ( com.google.gwtjsonrpc.client.RpcCompleteHandler h ) { return com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.addHandler ( com.google.gwtjsonrpc.client.RpcCompleteEvent.getType ( ) , h ) ; }
public void evict ( final com.google.gerrit.reviewdb.Account.Id accountId ) { byId.remove ( accountId ) ; }
protected java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > listComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = rsrc.getNotes ( ) ; return plcUtil.publishedByPatchSet ( db.get ( ) , notes , rsrc.getPatchSet ( ) . getId ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > draftByChangeFileAuthor ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String file , com.google.gerrit.reviewdb.client.Account.Id author ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public com.google.gerrit.client.reviewdb.ApprovalCategoryValue getValue ( final com.google.gerrit.client.reviewdb.ChangeApproval ca ) { initByValue ( ) ; return byValue.get ( ca.getValue ( ) ) ; }
protected void configure ( ) { bind ( java.nio.file.Path.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toProvider ( com.google.gerrit.httpd.SitePathFromSystemConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public static com.google.gerrit.server.patch.ComparisonType againstOtherPatchSet ( ) { return new com.google.gerrit.server.patch.ComparisonType ( null , false ) ; }
public static void addSignOutHandler ( final com.google.gerrit.client.SignOutHandler l ) { if ( ! ( com.google.gerrit.client.Gerrit.signOutHandlers.contains ( l ) ) ) { com.google.gerrit.client.Gerrit.signOutHandlers.add ( l ) ; } }
public static void comments ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "comments" ) . get ( cb ) ; }
public void put ( javax.servlet.http.HttpServletRequest req , java.lang.String key , java.lang.Object value ) { com.google.gitiles.BaseServlet.getData ( req ) . put ( key , value ) ; }
public static void putMessage ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String m , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > r ) { com.google.gerrit.client.changes.ChangeFileApi.putMessage ( id.getParentKey ( ) , m , r ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
com.codahale.metrics.Gauge < V > gauge ( final java.lang.Runnable trigger ) { return new com.codahale.metrics.Gauge < V > ( ) { @ java.lang.Override public com.google.gerrit.metrics.dropwizard.V getValue ( ) { trigger.run ( ) ; return value ; } } ; }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id ) { com.google.gerrit.client.changes.ChangeApi.deleteChange ( id.get ( ) , com.google.gerrit.client.change.DraftActions.mine ( ) ) ; }
private final native void setStartCh ( int sc ) ;
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , revision , fileName , null , 0 ) ; }
public void getOpenChange_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; assertNotFound ( r.getCommitId ( ) ) ; }
com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int start , int limit ) throws com.google.gerrit.server.query.QueryParseException ;
public void close ( ) { getRepository ( ) . close ( ) ; }
public static java.util.Set < java.lang.String > getPersonParts ( org.eclipse.jgit.lib.PersonIdent person ) { if ( person == null ) { return com.google.common.collect.ImmutableSet.of ( ) ; } return com.google.gerrit.server.index.SchemaUtil.getNameParts ( person.getName ( ) , java.util.Collections.singleton ( person.getEmailAddress ( ) ) ) ; }
public void setWhitespace ( final com.google.gerrit.client.patches.PatchScriptSettings.Whitespace ws ) { assert ws != null ; whitespace = ws ; }
public org.eclipse.jgit.lib.ObjectId insert ( int type , long length , java.io.InputStream in ) throws java.io.IOException { return insert ( com.google.gerrit.server.notedb.InsertedObject.create ( type , in ) ) ; }
private static boolean inProject ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.project.ProjectControl projectControl ) { if ( projectControl == null ) { return true ; } return projectControl.getProject ( ) . getNameKey ( ) . equals ( change.getProject ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.RestApi.isNotFound ( caught ) ) { } else { super . onFailure ( caught ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { setOpen ( ( ! ( isOpen ( ) ) ) ) ; }
public void testCreateGroupWithoutCapability_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; try { gApi.groups ( ) . create ( name ( "newGroup" ) ) ; } catch ( com.google.gerrit.extensions.restapi.AuthException expected ) { } }
public void emptyCommitMessage ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( "" ) ) . isEmpty ( ) ; }
public boolean match ( java.lang.String ref , java.lang.String username ) { return ref.startsWith ( prefix ) ; }
public com.google.gitiles.GitilesView.Builder setRepositoryName ( java.lang.String repositoryName ) { switch ( type ) { case HOST_INDEX : throw new java.lang.IllegalStateException ( java.lang.String.format ( "cannot set repository name on %s view" , type ) ) ; default : this . repositoryName = com.google.common.base.Preconditions.checkNotNull ( repositoryName ) ; return this ; } }
public com.google.gerrit.server.notedb.DraftCommentNotes create ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.notedb.DraftCommentNotes ( repoManager , draftsProject , changeId , accountId ) ; }
protected void saveProjectConfig ( com.google.gerrit.server.git.ProjectConfig cfg ) throws java.lang.Exception { try ( com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create ( cfg.getName ( ) ) ) { cfg.commit ( md ) ; } projectCache.evict ( cfg.getProject ( ) ) ; }
public org.apache.sshd.server.FileSystemView createFileSystemView ( org.apache.sshd.common.Session session ) throws java.io.IOException { return new org.apache.sshd.server.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( org.apache.sshd.server.SshFile baseDir , java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
public static boolean isCapability ( java.lang.String varName ) { return com.google.gerrit.common.data.GlobalCapability.NAMES_LC.contains ( varName.toLowerCase ( ) ) ; }
java.lang.String get ( final java.lang.String attName ) throws javax.naming.NamingException { return java.lang.String.valueOf ( atts.get ( attName ) . get ( 0 ) ) ; }
protected void onLoad ( ) { resizePaddingWidget ( ) ; }
public Account.Id apply ( java.lang.String refPart ) { return Account.Id.fromRefPart ( refPart ) ; }
public java.lang.String getBaseGerritUrl ( javax.servlet.http.HttpServletRequest req ) ;
public void run ( ) { setVisibleA ( ( ! ( isVisibleA ( ) ) ) ) ; }
public final void insert ( final java.lang.Iterable < E > instances , final com.google.gwtorm.client.Transaction txn ) throws com.google.gwtorm.client.OrmException { if ( txn != null ) { cast ( txn ) . queueInsert ( this , instances ) ; } else { insert ( instances ) ; } }
private boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( canAbandon ( db ) ) && ( refControl.asForRef ( ) . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ; }
public org.kohsuke.github.GHMyself getMyself ( ) { return myself ; }
public void putComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; com.google.common.base.Preconditions.checkArgument ( ( ( c.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) , "Cannot insert a published comment into a ChangeDraftUpdate" ) ; put.add ( c ) ; }
private static java.lang.String renderName ( com.google.gerrit.client.changes.ChangeInfo.GitPerson person ) { return ( ( ( person.name ( ) ) + " <" ) + ( person.email ( ) ) ) + ">" ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getEffectiveGroups ( ) { return java.util.Collections.singleton ( AccountGroup.ANONYMOUS_USERS ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { showCLA ( cla ) ; }
public boolean canRunGC ( ) { return ( canPerform ( GlobalCapability.RUN_GC ) ) || ( canAdministrateServer ( ) ) ; }
public void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.InMemoryDatabase.drop ( db ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { com.google.gerrit.client.Gerrit.doSignOut ( ) ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config elasticsearchConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( elasticsearchConfig ) ; com.google.gerrit.elasticsearch.ElasticTestUtils.configure ( elasticsearchConfig , com.google.gerrit.elasticsearch.ElasticQueryProjectsTest.nodeInfo.port ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( elasticsearchConfig , notesMigration ) ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHMilestone getMilestone ( int number ) throws java.io.IOException { return ghRepository.getMilestone ( number ) ; }
public void description ( com.google.gerrit.extensions.api.projects.PutDescriptionInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { putDescription.apply ( checkExists ( ) , in ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put project description" , e ) ; } }
com.google.gerrit.common.data.PatchScript toPatchScript ( com.google.gerrit.server.diff.PatchListEntry content , com.google.gerrit.common.data.CommentDetail comments , java.util.List < com.google.gerrit.reviewdb.client.Patch > history ) throws java.io.IOException { reader = db.newObjectReader ( ) ; try { return build ( content , comments , history ) ; } finally { reader.close ( ) ; } }
public static java.util.List < com.google.gerrit.pgm.init.InitPlugins.PluginData > listPluginsAndRemoveTempFiles ( com.google.gerrit.server.config.SitePaths site ) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins ( site , true ) ; }
public com.google.gerrit.metrics.dropwizard.V getValue ( ) { trigger.run ( ) ; return value ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; }
public void testEventSentThrowsException ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( false , "Exception" , true ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public void testGetSharedDirectory ( ) throws java.lang.Exception { initializeConfiguration ( ) ; com.google.common.truth.Truth.assertThat ( configuration.main ( ) . sharedDirectory ( ) ) . isEqualTo ( com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.SHARED_DIRECTORY ) ; }
public void onHeadUpdated ( com.google.gerrit.extensions.events.HeadUpdatedListener.Event event ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , FilterType.ALL ) ) { updateHead ( uri , event.getNewHeadName ( ) ) ; } }
public com.googlecode.prolog_cafe.lang.NumberTerm or ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) | ( t.intValue ( ) ) ) ) ; }
void setTabTitle ( int index , java.lang.String title ) { getTabBar ( ) . setTabText ( index , title ) ; }
int getHeaderHeight ( ) { return patchSetSelectBoxA.getOffsetHeight ( ) ; }
public void normalize ( final com.google.gerrit.client.data.ApprovalType at , final com.google.gerrit.client.reviewdb.ChangeApproval ca ) { applyTypeFloor ( at , ca ) ; applyRightFloor ( ca ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type ) ; }
private static native void init0 ( ) ;
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setShowSiteHeader ( val ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public void deleteReviewerFromWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; removeReviewer ( sc , extraReviewer ) ; assertThat ( sender ) . notSent ( ) ; }
public org.apache.sshd.common.file.SshFile getFile ( org.apache.sshd.common.file.SshFile baseDir , java.lang.String file ) { return null ; }
public final com.google.gerrit.server.index.Schema < V > getLatest ( ) { return schemas.lastEntry ( ) . getValue ( ) ; }
public com.google.gerrit.server.change.PatchSetInserter setNotify ( com.google.gerrit.extensions.api.changes.NotifyHandling notify ) { this . notify = notify ; return this ; }
final native int _revision_number ( ) ;
private static java.lang.String queryClosed ( java.lang.String who ) { return ( ( ( "is:closed (owner:" + who ) + " OR reviewer:" ) + who ) + ")" ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > publishedByChangeFile ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String file ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( curr.getParentKey ( ) ) ) ; }
private java.io.FileNotFoundException badWebRoot ( java.net.URL u ) { return new java.io.FileNotFoundException ( ( "Cannot find web root from " + u ) ) ; }
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException , java.io.IOException { index ( newChangeData ( db , change ) ) ; reindexAfterIndexUpdate ( change.getProject ( ) , change.getId ( ) ) ; }
public void noNotificationForDraftPatchSetsForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS , NotifyType.ALL_COMMENTS ) ) ; HEAD ( 297 ) ; com.google.gerrit.acceptance.server.project.c74 Merge ; }
public void resolvingEmailToAccountIdMocking ( ) throws java.lang.Exception { resolveEmail ( "user-a@email.com" , com.vmware.gerrit.owners.common.ClassicConfig.USERA ) ; resolveEmail ( "user-b@email.com" , com.vmware.gerrit.owners.common.ClassicConfig.USERB ) ; resolveEmail ( "user-c@email.com" , com.vmware.gerrit.owners.common.ClassicConfig.USERC ) ; }
public static java.lang.String getVersion ( ) { return com.google.gerrit.common.Version.version ; }
public com.google.gerrit.lucene.LuceneChangeIndex getChangeIndex ( com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.lucene.LuceneChangeIndex ( sitePaths , fillArgs , readOnly ) ; }
public com.google.common.base.Optional < com.google.gerrit.reviewdb.client.AccountGroup > load ( final com.google.gerrit.reviewdb.client.AccountGroup.Id key ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return com.google.common.base.Optional.fromNullable ( db.accountGroups ( ) . get ( key ) ) ; } }
public void readCommentLinkInvalidPattern ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit ( ) . add ( "project.config" , ( "[commentlink \"bugzilla\"]\n" + ( "\tmatch = \"(bugs{+#?)(d+)\"\n" + "\tlink = http://bugs.example.com/show_bug.cgi?id=$2" ) ) ) . create ( ) ; com.google.gerrit.server.git.ProjectConfig cfg = read ( rev ) ; com.google.common.truth.Truth.assertThat ( cfg.getCommentLinkSections ( ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( cfg.getValidationErrors ( ) . stream ( ) . map ( ValidationError :: getMessage ) ) . containsExactly ( ( "project.config: Invalid pattern \"(bugs{+#?)(d+)\" in commentlink.bugzilla.match: " + ( ( "Illegal repetition near index 4\n" + "(bugs{+#?)(d+)\n" ) + " ^" ) ) ) ; }
public void onChangeEvent ( final com.google.gerrit.common.ChangeHookRunner.ChangeEvent event ) { offer ( event ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { l.setVisible ( false ) ; edit.setVisible ( false ) ; input.setVisible ( true ) ; save.setVisible ( true ) ; cancel.setVisible ( true ) ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; final java.io.PrintWriter stdout = toPrintWriter ( out ) ; try { impl.display ( stdout ) ; } finally { stdout.flush ( ) ; } }
public void deleteBranchByAdminForcePushBlocked ( ) throws java.lang.Exception { blockForcePush ( ) ; assertDeleteSucceeds ( ) ; }
public void getCache_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.get ( "/config/server/caches/accounts" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
public void put ( K key , V value ) { cache.put ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) , new com.google.gerrit.ehcache.SerializableProtobuf < V > ( value , valueCodec ) ) ; }
public final native void setHeight ( java.lang.String h ) ;
public static com.google.gerrit.client.rpc.RestApi detail ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "detail" ) ; }
public com.google.gerrit.extensions.common.ProjectInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc ) { return json.format ( rsrc ) ; }
public java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup > load ( java.lang.String uuid ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return groups.get ( db , new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( uuid ) ) ; } }
public void onFailure ( java.lang.Throwable caught ) { enableOnFailure.setEnabled ( true ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > preferredEmail ( java.lang.String email ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.PREFERRED_EMAIL , AccountQueryBuilder.FIELD_PREFERRED_EMAIL , email.toLowerCase ( ) ) ; }
public void onSend ( ) { Util.MANAGE_SVC.revertChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public java.lang.String getETag ( ) { return change.getETag ( ) ; }
public static java.lang.String nameOf ( java.io.File plugin ) { return com.google.gerrit.server.plugins.PluginLoader.nameOf ( plugin.getName ( ) ) ; }
public void visit ( org.pegdown.ast.ExpLinkNode node ) { html.open ( "a" ) . attribute ( "href" , node.url ) . attribute ( "title" , node.title ) ; visitChildren ( node ) ; html.close ( "a" ) ; }
boolean hasNext ( ) { return hasNext ; }
public void indexChangeOnNonVisibleBranch ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; blockRead ( "refs/heads/master" ) ; userSession.post ( ( ( "/changes/" + changeId ) + "/index/" ) ) . assertNotFound ( ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( account , new com.google.gerrit.server.account.Index.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot index account" , e ) ; } }
public boolean canSubmit ( ) { return canPerform ( Permission.SUBMIT ) ; }
public void formatSeconds ( ) { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat ( 1 , com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS , "1 seconds ago" ) ; com.google.gerrit.client.RelativeDateFormatterTest.assertFormat ( 89 , com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS , "89 seconds ago" ) ; }
public void all ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testutil.IndexVersions.ALL ) ) . containsExactlyElementsIn ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getSchemas ( ) . keySet ( ) ) . inOrder ( ) ; }
public java.lang.String encode ( java.lang.String e ) { e = com.google.gwt.http.client.URL.encodeComponent ( e ) ; e = fixPathImpl ( e ) ; e = fixColonImpl ( e ) ; return e ; }
protected com.google.gson.GsonBuilder newGsonBuilder ( javax.servlet.http.HttpServletRequest req ) throws java.io.IOException { return super . newGsonBuilder ( req ) . registerTypeAdapter ( com.google.gitiles.blame.Region.class , new com.google.gitiles.blame.RegionAdapter ( new com.google.gitiles.DateFormatter ( getAccess ( req ) , com.google.gitiles.DateFormatter.Format.ISO ) ) ) ; }
private static boolean fail ( final java.lang.String username , final org.apache.sshd.server.session.ServerSession session , final java.lang.String err ) { session.setAttribute ( com.google.gerrit.sshd.SshUtil.AUTH_ATTEMPTED_AS , username ) ; session.setAttribute ( com.google.gerrit.sshd.SshUtil.AUTH_ERROR , err ) ; return false ; }
public void zeroEndCharacterResultsInValidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 31 , 19 , 0 ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isValid ( ) ; }
com.google.gerrit.server.project.RefControl controlForRef ( com.google.gerrit.reviewdb.client.Branch.NameKey ref ) { return controlForRef ( ref.get ( ) ) ; }
public void testDelimiter ( ) { com.google.gwtorm.nosql.IndexKeyBuilder ib = new com.google.gwtorm.nosql.IndexKeyBuilder ( ) ; ib.delimiter ( ) ; com.google.gwtorm.nosql.IndexKeyBuilderTest.assertEquals ( new byte [ ] { 0 , 1 } , ib ) ; }
final void setCreateNewChangeForAllNotInTarget ( com.google.gerrit.extensions.common.InheritableBoolean v ) { setCreateNewChangeForAllNotInTargetRaw ( v.name ( ) ) ; }
protected final void configure ( ) { bind ( com.google.gerrit.sshd.Commands.key ( command ) ) . toProvider ( new com.google.gerrit.sshd.DispatchCommandProvider ( command ) ) ; configureCmds ( ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.AccountGroup group ) { return new com.google.gerrit.server.account.GroupControl ( user.get ( ) , group ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.git.ChainedReceiveCommands cmds ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change , false , cmds ) . load ( ) ; }
public static void reloadChanges ( com.google.gerrit.server.git.ChangeSet cs ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : cs.changes ( ) ) { cd.reloadChange ( ) ; cd.setPatchSets ( null ) ; cd.setMergeable ( null ) ; } }
public static org.eclipse.jgit.lib.ObjectId toId ( org.eclipse.jgit.lib.Ref ref ) { return ( ref != null ) && ( ( ref.getObjectId ( ) ) != null ) ? ref.getObjectId ( ) : org.eclipse.jgit.lib.ObjectId.zeroId ( ) ; }
public void testChangeDeletedFromIndexOK ( ) throws java.lang.Exception { setUpMocks ( com.ericsson.gerrit.plugins.syncindex.RestSessionTest.DELETE_OP , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.SUCCESSFUL , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.EMPTY_MSG , com.ericsson.gerrit.plugins.syncindex.RestSessionTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.deleteFromIndex ( com.ericsson.gerrit.plugins.syncindex.RestSessionTest.CHANGE_NUMBER ) ) . isTrue ( ) ; }
public int compare ( final com.google.gerrit.reviewdb.AccountGroup a , final com.google.gerrit.reviewdb.AccountGroup b ) { return a.getName ( ) . compareTo ( b.getName ( ) ) ; }
public static java.lang.String toPatch ( final com.google.gerrit.client.patches.PatchScreen.Type type , final com.google.gerrit.reviewdb.client.Patch.Key id ) { if ( type == ( PatchScreen.Type.SIDE_BY_SIDE ) ) { return com.google.gerrit.client.Dispatcher.toPatchSideBySide ( id ) ; } else { return com.google.gerrit.client.Dispatcher.toPatchUnified ( id ) ; } }
public void deleteBranchByAdminForcePushBlocked ( ) throws java.lang.Exception { blockForcePush ( ) ; assertDeleteSucceeds ( ) ; }
private boolean isLdapGroup ( final com.google.gerrit.client.reviewdb.AccountGroup group ) { return group.isAutomaticMembership ( ) ; }
public void listNonExistingGroupMembers_NotFound ( ) throws java.lang.Exception { try { gApi.groups ( ) . id ( "non-existing" ) . members ( ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException expected ) { } }
void onEdit ( com.google.gwt.event.dom.client.ClickEvent event ) { edit.setEnabled ( false ) ; cancel1.setVisible ( true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( commitTools , true ) ; accessEditor.setEditing ( true ) ; driver.edit ( access ) ; }
protected void configure ( org.eclipse.jgit.transport.OpenSshConfig.Host hc , com.jcraft.jsch.Session session ) { }
public void shouldReturnExecutor ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( syncEventsExecutorProvider.get ( ) ) . isEqualTo ( executorMock ) ; }
public void addMembers ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , java.util.Collection < ? extends com.google.gerrit.reviewdb.client.Account.Id > newMemberIds ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException , java.io.IOException { groupsUpdateProvider.get ( ) . addGroupMembers ( db.get ( ) , groupUuid , com.google.common.collect.ImmutableSet.copyOf ( newMemberIds ) ) ; }
protected void configure ( ) { cache ( com.google.gerrit.server.change.ChangeKindCache.ID_CACHE , com.google.gerrit.server.change.ChangeKindCache.Key.class , com.google.gerrit.server.change.ChangeKind.class ) . maximumWeight ( 0 ) . loader ( com.google.gerrit.server.change.ChangeKindCache.Loader.class ) ; }
public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; factory ( FusedNoteDbBatchUpdate.AssistedFactory.class ) ; factory ( UnfusedNoteDbBatchUpdate.AssistedFactory.class ) ; }
private void initTheme ( ) { for ( com.google.gerrit.extensions.common.Theme t : com.google.gerrit.extensions.common.Theme.values ( ) ) { theme.addItem ( t.name ( ) . toLowerCase ( ) , t.name ( ) ) ; } }
public boolean isOwner ( ) { return ( canPerformOnAllRefs ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.groupListTitle ( ) ) ; groups = new com.google.gerrit.client.admin.GroupTable ( true , com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) ; add ( groups ) ; }
private static boolean timeEq ( final long a , final long b ) { return ( a / 1000L ) == ( b / 1000L ) ; }
public boolean updateTeamModels ( java.util.Collection < com.gitblit.models.TeamModel > models ) { return false ; }
public void validCert ( ) throws java.lang.Exception { org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( validNonce ( ) , com.google.gerrit.gpg.testutil.TestKey.key1 ( ) ) ; assertProblems ( cert ) ; }
private java.lang.String groupOf ( final com.google.gerrit.reviewdb.ProjectRight r ) { return groups.get ( r.getAccountGroupId ( ) ) . getName ( ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.AccountSshKey > getKeys ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return read ( accountId ) . getKeys ( ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ChangeDetail r ) { display ( r ) ; }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > getStarredChanges ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return stars.list ( ) . apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get starred changes" , e ) ; } }
public java.lang.String getToken ( com.google.gwtjsonrpc.client.JsonDefTarget proxy ) { return com.google.gerrit.client.Gerrit.accessToken ; }
public void run ( ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( change ) ; try { index.replace ( cd ) ; } catch ( java.io.IOException e ) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error ( "Error indexing change" , e ) ; } }
public static com.google.gerrit.server.group.db.InternalGroupUpdate.Builder builder ( ) { return new com.google.gerrit.server.group.db.AutoValue_InternalGroupUpdate.Builder ( ) . setMemberModification ( java.util.function.Function.identity ( ) ) ; }
protected org.eclipse.jgit.lib.ObjectInserter delegate ( ) { return inserter ; }
public static java.lang.String toGroup ( com.google.gerrit.reviewdb.client.AccountGroup.Id id , java.lang.String panel ) { return ( ( "/admin/groups/" + ( id.toString ( ) ) ) + "," ) + panel ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return new com.google.gerrit.server.notedb.ChangeUpdate ( com.google.gerrit.server.notedb.ChangeNotesTest.SERVER_IDENT , repoManager , com.google.gerrit.server.notedb.NotesMigration.allEnabled ( ) , accountCache , null , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , stubChangeControl ( c , user ) , com.google.gerrit.server.util.TimeUtil.nowTs ( ) ) ; }
protected java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > getGroups ( ) { if ( ( userGroups ) == null ) { userGroups = com.google.gerrit.client.rpc.Common.getGroupCache ( ) . getGroups ( getAccountId ( ) ) ; } return userGroups ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( java.nio.file.Files.getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; }
public boolean update ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { try { return new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change ) . call ( ) ; } catch ( java.lang.Exception e ) { com.google.common.base.Throwables.propagateIfPossible ( e ) ; throw com.google.gerrit.server.change.MergeabilityChecker.MAPPER.apply ( e ) ; } }
public java.lang.String getSchemeRest ( ) { java.lang.String id = getExternalId ( ) ; int c = id.indexOf ( ':' ) ; return 0 < c ? id.substring ( ( c + 1 ) ) : null ; }
public void onFailure ( java.lang.Throwable err ) { com.google.gerrit.client.change.RelatedChangesTab tab = tabs.get ( com.google.gerrit.client.change.RelatedChanges.RELATED_CHANGES ) ; tab.setTitle ( Resources.M.relatedChanges ( "na" ) ) ; tab.setError ( err.getMessage ( ) ) ; }
public com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > rewrite ( com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > in , com.google.gerrit.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { com.google.gerrit.server.index.project.ProjectIndex index = indexes.getSearchIndex ( ) ; com.google.common.base.Preconditions.checkNotNull ( index , "no active search index configured for projects" ) ; return new com.google.gerrit.server.index.project.IndexedProjectQuery ( index , in , opts ) ; }
public boolean canRunReceivePack ( ) { return isAnyIncludedIn ( receiveGroups , user.getEffectiveGroups ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { java.lang.String url = "http://localhost:" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.wireMockRule.port ( ) ) ; com.ericsson.gerrit.plugins.highavailability.Configuration cfg = org.mockito.Mockito.mock ( com.ericsson.gerrit.plugins.highavailability.Configuration.class ) ; org.mockito.Mockito.when ( cfg.getUser ( ) ) . thenReturn ( "user" ) ; org.mockito.Mockito.when ( cfg.getPassword ( ) ) . thenReturn ( "pass" ) ; org.mockito.Mockito.when ( cfg.getMaxTries ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.MAX_TRIES ) ; org.mockito.Mockito.when ( cfg.getConnectionTimeout ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.TIMEOUT ) ; org.mockito.Mockito.when ( cfg.getSocketTimeout ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.TIMEOUT ) ; org.mockito.Mockito.when ( cfg.getRetryInterval ( ) ) . thenReturn ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.RETRY_INTERVAL ) ; com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo peerInfo = org.mockito.Mockito.mock ( com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo.class ) ; org.mockito.Mockito.when ( peerInfo.getDirectUrl ( ) ) . thenReturn ( url ) ; httpSession = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider ( cfg ) . get ( ) , com.google.inject.util.Providers.of ( peerInfo ) ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSessionTest.wireMockRule.resetRequests ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , null ) ; }
public void noNotificationForChangeThatIsTurnedPrivateForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; BRANCH ( efc835 ) ; com.google.gerrit.acceptance.server.project.Fix notifications ; com.google.gerrit.acceptance.server.project.comments on ; com.google.gerrit.acceptance.server.project.patch sets ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%private" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.CurrentUser.class ) . toInstance ( remoteUser ) ; }
public final Change.Id legacy_id ( ) { return has_change_number ( ) ? new com.google.gerrit.reviewdb.client.Change.Id ( _change_number ( ) ) : null ; }
public void onSuccess ( java.lang.Void result ) { net.codemirror.lib.Loader.initVimKeys ( ) ; cb.onSuccess ( null ) ; }
private void colorLines ( net.codemirror.lib.CodeMirror cm , java.lang.String color , int line , int cnt ) { colorLines ( cm , LineClassWhere.WRAP , color , line , ( line + cnt ) ) ; }
protected void setRepo ( org.eclipse.jgit.api.Git git ) throws java.lang.Exception { this . git = git ; testRepo = new org.eclipse.jgit.junit.TestRepository ( git.getRepository ( ) ) ; }
public static PermissionRange.WithDefaults getRange ( java.lang.String varName ) { if ( com.google.gerrit.common.data.GlobalCapability.QUERY_LIMIT.equalsIgnoreCase ( varName ) ) { return new com.google.gerrit.common.data.PermissionRange.WithDefaults ( varName , 0 , java.lang.Integer.MAX_VALUE , 0 , 500 ) ; } return null ; }
public int size ( ) { return changeData.size ( ) ; }
public static org.eclipse.jgit.lib.Config submitWholeTopicEnabled ( ) { return wholeTopicEnabledConfig ( ) ; }
private void checkRepositoryIndex ( ) { com.google.common.base.Preconditions.checkState ( ( ( repositoryName ) != null ) , "missing repository name on %s view" , type ) ; checkHostIndex ( ) ; }
private void rememberXsrfKey ( final com.google.gwt.http.client.Response rsp ) { final java.lang.String v = rsp.getHeader ( Shared.XSRF_HEADER ) ; if ( v != null ) { proxy.xsrfKey = v ; } }
public java.util.List < com.googlesource.gerrit.plugins.manager.repository.PluginInfo > availablePlugins ( ) throws java.io.IOException { return repository.list ( com.google.gerrit.common.Version.getVersion ( ) ) ; }
public void banCommit_Forbidden ( ) throws java.lang.Exception { userRestSession.put ( ( ( "/projects/" + ( project.get ( ) ) ) + "/ban/" ) , BanCommit.Input.fromCommits ( "a8a477efffbbf3b44169bb9a1d3a334cbbd9aa96" ) ) . assertForbidden ( ) ; }
static void savePublic ( final org.eclipse.jgit.storage.file.FileBasedConfig sec ) throws java.io.IOException { sec.save ( ) ; }
private void assertCanUpload ( com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.canPushToAtLeastOneRef ( ) ) . named ( "can upload" ) . isEqualTo ( Capable.OK ) ; }
private java.sql.PreparedStatement stubExecuteBatchOK ( java.lang.String command , final int ... updateCounts ) throws java.sql.SQLException { java.sql.PreparedStatement ps = setupPreparedStatementForBatch ( updateCounts ) ; org.mockito.Mockito.stub ( conn.prepareStatement ( command ) ) . toReturn ( ps ) ; return ps ; }
public com.google.gerrit.server.git.ChangeReportFormatter.Input setPrivate ( boolean isPrivate ) { this . isPrivate = isPrivate ; return this ; }
public boolean isNotify ( final com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) { switch ( type ) { case NEW_CHANGES : return notifyNewChanges ; case ALL_COMMENTS : return notifyAllComments ; case SUBMITTED_CHANGES : return notifySubmittedChanges ; } return false ; }
protected static Branch.NameKey getBranch ( java.lang.String project , java.lang.String branch ) { return new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( project ) , ( ( branch.startsWith ( "refs/" ) ? "" : "refs/heads/" ) + branch ) ) ; }
public com.google.gerrit.extensions.api.projects.TagInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listTags.get ( project , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( ref ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( e.getMessage ( ) ) ; } }
public org.eclipse.jgit.revwalk.RevWalk getRevWalk ( ) throws java.io.IOException { initRepository ( ) ; return revWalk ; }
public static void publish ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "publish" ) . post ( in , cb ) ; }
private void removeIdLock ( T id ) { synchronized ( idLocks ) { if ( ( idLocks.get ( id ) . get ( ) ) == 0 ) { idLocks.remove ( id ) ; } } }
public java.lang.String getProject ( ) { return escape ( project ) ; }
public void run ( ) { expandText ( ) ; }
public void logout ( com.gitblit.models.UserModel user ) { }
public com.google.gerrit.server.patch.PatchListEntry get ( java.lang.String fileName ) throws com.google.gerrit.server.project.NoSuchFileException { int index = search ( fileName ) ; if ( 0 <= index ) { return patches [ index ] ; } throw new com.google.gerrit.server.project.NoSuchFileException ( fileName ) ; }
public void evictMemberIn ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) { if ( groupId != null ) { memberIn.invalidate ( groupId ) ; } }
private boolean visible ( com.google.gerrit.server.change.ChangeResource change , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { return change.getControl ( ) . isPatchVisible ( ps , dbProvider.get ( ) ) ; }
public final native com.google.gwt.core.client.JsArrayString permitted_values ( java.lang.String n ) ;
public com.google.gerrit.extensions.common.CommentInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDraft.apply ( draft ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve draft" , e ) ; } }
public com.googlesrouce.gerrit.plugins.github.git.GHContentUpdateResponse createContent ( java.lang.String content , java.lang.String commitMessage , java.lang.String path , java.lang.String branch ) throws java.io.IOException { return ghRepository.createContent ( content , commitMessage , path , branch ) ; }
protected java.lang.String getMappings ( ) { return ( ( ( "{\"mappings\" : " + ( com.google.gerrit.elasticsearch.ElasticChangeIndex.getMappingProperties ( "open_changes" ) ) ) + "," ) + ( com.google.gerrit.elasticsearch.ElasticChangeIndex.getMappingProperties ( "closed_changes" ) ) ) + "}" ; }
private void injectMode ( com.google.gerrit.client.diff.DiffInfo diffInfo , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > cb ) { new net.codemirror.mode.ModeInjector ( ) . add ( getContentType ( diffInfo.meta_a ( ) ) ) . add ( getContentType ( diffInfo.meta_b ( ) ) ) . inject ( cb ) ; }
public java.lang.Boolean run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAbandonChange ( message , change , patchSetId , cmsg , db , txn ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.git.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change" , e ) ; } }
public void onFailure ( java.lang.Throwable caught ) { super . onFailure ( caught ) ; save.setEnabled ( true ) ; }
public void execute ( ) { message.setFocus ( true ) ; }
private void addPermission ( java.lang.String refSpec , java.lang.String action , com.google.gerrit.common.data.PermissionRule rule ) { config.getAccessSection ( refSpec , true ) . getPermission ( action , true ) . add ( rule ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > draft ( com.google.gerrit.reviewdb.Patch.Key patch , com.google.gerrit.reviewdb.Account.Id author ) throws com.google.gwtorm.client.OrmException ;
private void reindexAfterIndexUpdate ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id ) { if ( reindexAfterIndexUpdate ) { reindexIfStale ( project , id ) ; } }
public java.lang.String getName ( ) { return "Anonymous HTTP" ; }
synchronized void updatingMergeabilityFlag ( com.google.gerrit.reviewdb.client.Change change ) { pending.remove ( change.getId ( ) ) ; }
public boolean match ( int psValue , int expValue ) { return psValue == expValue ; }
public final native java.lang.String getName ( ) ;
protected void configure ( ) { bind ( com.google.gerrit.common.ChangeHookRunner.class ) ; bind ( com.google.gerrit.common.ChangeHooks.class ) . to ( com.google.gerrit.common.ChangeHookRunner.class ) ; listener ( ) . to ( com.google.gerrit.common.ChangeHookRunner.class ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { cbox.setEnabled ( true ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { update ( ) ; } }
public static boolean readWrite ( ) { return ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) == ( com.google.gerrit.testutil.NoteDbMode.READ_WRITE ) ; }
public com.google.gerrit.server.query.InternalQuery < T > setLimit ( int n ) { queryProcessor.setUserProvidedLimit ( n ) ; return this ; }
private boolean isEdit ( ) { return getStyleName ( ) . contains ( draftStyle.edit ( ) ) ; }
public void onOpen ( com.google.gwt.event.logical.shared.OpenEvent < com.google.gwt.user.client.ui.DisclosurePanel > event ) { activate ( patchSetId ) ; }
public void delete_MethodNotAllowed ( ) throws java.lang.Exception { adminSession.put ( ( ( "/accounts/" + ( admin.username ) ) + "/username" ) ) . assertMethodNotAllowed ( ) ; }
public void init ( javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { for ( com.google.gerrit.httpd.AllRequestFilter f : filters ) { f.init ( config ) ; } }
public com.googlesource.gerrit.plugins.hooks.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentlink" , pluginName , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
public final native void setFrom ( net.codemirror.lib.LineCharacter from ) ;
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.client.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( authConfig , accountCache , realm , remotePeerProvider , dbProvider , id ) ; }
void sendMessages ( ) { for ( com.google.gerrit.server.git.validators.CommitValidationMessage m : messages ) { if ( m.isError ( ) ) { messageSender.sendError ( m.getMessage ( ) ) ; } else { messageSender.sendMessage ( m.getMessage ( ) ) ; } } }
com.google.gerrit.server.change.PatchSetInserter create ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.revwalk.RevCommit commit ) ;
private com.google.gwtexpui.globalkey.client.KeyCommand setupNav ( com.google.gerrit.client.ui.InlineHyperlink link , int key , java.lang.String help , com.google.gerrit.client.diff.FileInfo info ) { }
protected void onCellSingleClick ( int row , int column ) { movePointerTo ( row ) ; }
public void testEvictCacheFailed ( ) throws java.lang.Exception { setupMocks ( Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON2 , false , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON ) ) . isFalse ( ) ; }
public java.io.PrintWriter getWriter ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public static com.google.gerrit.reviewdb.client.Account.Id parse ( java.lang.String str ) { com.google.gerrit.reviewdb.client.Account.Id r = new com.google.gerrit.reviewdb.client.Account.Id ( ) ; r.fromString ( str ) ; return r ; }
void onSave ( ) { }
public com.google.common.collect.ImmutableMap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > getPatchSets ( ) { return state.patchSets ( ) ; }
public boolean canSubmit ( ) { return getRefControl ( ) . canSubmit ( ) ; }
public void end ( ) { if ( ( ( total ) == ( com.google.gerrit.server.git.MultiProgressMonitor.UNKNOWN ) ) && ( ( count ) > 0 ) ) { wakeUp ( ) ; } }
public void setUp ( ) throws java.lang.Exception { admin = accounts.admin ( ) ; session = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; com.google.gerrit.acceptance.git.GitUtil.initSsh ( admin ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; db = reviewDbProvider.open ( ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.String comment ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , comment , null ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; }
void removeAll ( ) { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar.expandAll ( ) ; } skipBars = null ; line0 = null ; } }
private static native java.lang.String go ( java.lang.String srcText , java.lang.String srcType , int tabSize ) ;
public int compare ( com.google.gerrit.server.patch.PatchListEntry a , com.google.gerrit.server.patch.PatchListEntry b ) { return com.google.gerrit.server.patch.PatchList.comparePaths ( a.getNewName ( ) , b.getNewName ( ) ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult apply ( com.google.gerrit.server.project.FileResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return fileContentUtil.getContent ( rsrc.getProject ( ) , rsrc.getRev ( ) , rsrc.getPath ( ) ) ; }
public static void drafts ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . get ( cb ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { return execute ( org.apache.http.client.fluent.Request.Delete ( ( ( ( url ) + "/a" ) + endPoint ) ) ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) { return new com.google.gerrit.server.project.FileResource ( parent.getControl ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( parent.getRevision ( ) ) , id.get ( ) ) ; }
private com.google.gerrit.server.config.GetServerInfo.ContactStoreInfo getContactStoreInfo ( ) { java.lang.String url = config.getString ( "contactstore" , null , "url" ) ; if ( url == null ) { return null ; } com.google.gerrit.server.config.GetServerInfo.ContactStoreInfo contactStore = new com.google.gerrit.server.config.GetServerInfo.ContactStoreInfo ( ) ; contactStore.url = url ; return contactStore ; }
private void wrapText ( java.lang.String tag , org.pegdown.ast.TextNode node ) { html.open ( tag ) . appendAndEscape ( node.getText ( ) ) . close ( tag ) ; }
protected void saveProjectConfig ( com.google.gerrit.server.git.ProjectConfig cfg ) throws java.lang.Exception { try ( com.google.gerrit.server.git.meta.MetaDataUpdate md = metaDataUpdateFactory.create ( cfg.getName ( ) ) ) { cfg.commit ( md ) ; } projectCache.evict ( cfg.getProject ( ) ) ; }
static boolean skip ( org.eclipse.jgit.lib.Ref ref ) { return ( ( ref.isSymbolic ( ) ) || ( ( ref.getObjectId ( ) ) == null ) ) || ( com.google.gerrit.reviewdb.client.PatchSet.isRef ( ref.getName ( ) ) ) ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { setApiHeaders ( res , com.google.gitiles.FormatType.TEXT ) ; return res.getWriter ( ) ; }
abstract void initPatchSetListForTableHeader ( ) ;
public java.lang.String get ( com.google.gerrit.server.account.AccountState input , com.google.gerrit.server.index.account.FillArgs args ) { return input.getUserName ( ) . toLowerCase ( ) ; }
public boolean canWrite ( ) { return getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( Project.State.ACTIVE ) ; }
public void onUpdate ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) { }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( cd , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void addReviewerToReviewableWipChange ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
public void shouldHavePushTask ( ) { replicationState.increasePushTaskCount ( "someProject" , "someRef" ) ; org.junit.Assert.assertTrue ( replicationState.hasPushTask ( ) ) ; }
private static boolean isTextBody ( com.google.gwt.http.client.Response res ) { return com.google.gerrit.client.rpc.RestApi.isContentType ( res , "text/plain" ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( ) . run ( ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( change , new com.google.gerrit.server.change.Index.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot index change" , e ) ; } }
public void onSignOut ( ) { if ( isRequiresSignIn ( ) ) { com.google.gwt.user.client.History.newItem ( Link.ALL ) ; } }
private com.google.inject.Module createIndexModule ( ) { switch ( indexType ) { case LUCENE : return new com.google.gerrit.lucene.LuceneIndexModule ( ) ; default : throw new java.lang.IllegalStateException ( ( "unsupported index.type = " + ( indexType ) ) ) ; } }
protected java.io.File newSitePath ( ) throws java.io.IOException { return new java.io.File ( createWorkRepository ( ) . getWorkTree ( ) , "test_site" ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChange ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , null ) ; }
public void banCommit_Forbidden ( ) throws java.lang.Exception { userSession.put ( ( ( "/projects/" + ( project.get ( ) ) ) + "/ban/" ) , BanCommit.Input.fromCommits ( "a8a477efffbbf3b44169bb9a1d3a334cbbd9aa96" ) ) . assertForbidden ( ) ; }
private com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig getConfig ( java.lang.String defaultConfig ) throws org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , defaultConfig ) ) ; return config ; }
public synchronized com.google.gerrit.testutil.FakeEmailSender.Message peekMessage ( ) { if ( ( messagesRead ) >= ( messages.size ( ) ) ) { return null ; } return messages.get ( messagesRead ) ; }
private void afterTest ( ) throws java.lang.Exception { db.close ( ) ; sshSession.close ( ) ; server.stop ( ) ; com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; }
public java.lang.String required ( java.lang.String name ) { return com.google.gerrit.server.config.ConfigUtil.getRequired ( cfg , null , name ) ; }
public com.google.gerrit.server.project.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfo ( resource.getControl ( ) . getProjectState ( ) , config ) ; }
public void invalidate ( final com.google.gerrit.client.reviewdb.Project p ) { if ( p != null ) { auto.remove ( p.getNameKey ( ) ) ; } }
public com.google.gerrit.server.account.GetSshKeys.SshKeyInfo apply ( com.google.gerrit.server.account.AccountResource.SshKey rsrc ) { return new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo ( rsrc.getSshKey ( ) ) ; }
public void setPreviewText ( final java.lang.String text ) { if ( ( textLabel ) != null ) { textLabel.setText ( text ) ; } }
void onSaveSuccess ( final com.google.gerrit.reviewdb.client.Account userAccount ) { super . onSaveSuccess ( userAccount ) ; displayHasContact ( userAccount ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; }
public void pruneSchema ( com.google.gwtorm.server.StatementExecutor e ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSave ( ) ; }
void setRepository ( final org.eclipse.jgit.lib.Repository r ) { db = r ; }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > submittedTogether ( ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private static java.lang.String format ( final java.lang.String name , final java.lang.String email ) { return new com.google.gerrit.server.mail.Address ( name , email ) . toHeaderString ( ) ; }
java.lang.String getPatchSetUrl ( final java.lang.String projectName , final java.lang.String commit ) ;
protected void configureServlets ( ) { install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventForwarderServletModule ( ) ) ; }
public static void display ( final com.google.gerrit.client.ui.Screen view ) { if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.body.remove ( com.google.gerrit.client.Gerrit.currentScreen ) ; } com.google.gerrit.client.Gerrit.currentScreen = view ; com.google.gerrit.client.Gerrit.body.add ( com.google.gerrit.client.Gerrit.currentScreen ) ; }
public com.google.common.collect.Table < com.google.gerrit.reviewdb.client.PatchSet.Id , java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > getDraftBaseComments ( com.google.gerrit.reviewdb.client.Account.Id author ) throws com.google.gwtorm.server.OrmException { loadDraftComments ( author ) ; return draftCommentNotes.getDraftBaseComments ( ) ; }
protected void assertIsAdministrator ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { if ( ! ( com.google.gerrit.client.rpc.Common.getGroupCache ( ) . isAdministrator ( getAccountId ( ) ) ) ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 1 , "fatal: Not a Gerrit administrator" ) ; } }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { ensureLoaded ( result ) ; patchTable.setRegisterKeys ( true ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { rights.deleteChecked ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.restapi.access.AccessCollection.class ) ; com.google.gerrit.extensions.registration.DynamicMap.mapOf ( binder ( ) , com.google.gerrit.server.access.AccessResource.ACCESS_KIND ) ; }
public java.lang.String intercept ( java.lang.String in ) { if ( in.startsWith ( "gerrit plugin" ) ) { return in ; } com.googlesource.gerrit.plugins.readonly.DisableCommandInterceptor.log.warn ( ( "Disabling command: " + in ) ) ; return ( pluginName ) + " disable" ; }
public java.lang.String getStatus ( ) { return status ; }
public void setRecursive ( boolean recursive ) { this . recursive = recursive ; }
public com.google.gerrit.client.diff.DiffApi intraline ( ) { call.addParameterTrue ( "intraline" ) ; return this ; }
void setToRetry ( ) { retrying = true ; ( retryCount ) ++ ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
void initMeter ( ) { if ( ( meter ) == null ) { meter = new com.google.gwtexpui.progress.client.ProgressBar ( Util.M.loadingPatchSet ( psid.get ( ) ) ) ; myBody.clear ( ) ; myBody.add ( meter ) ; } updateMeter ( ) ; }
public static com.google.gitiles.GitilesView getView ( javax.servlet.http.HttpServletRequest req ) { return ( ( com.google.gitiles.GitilesView ) ( req.getAttribute ( com.google.gitiles.ViewFilter.VIEW_ATTIRBUTE ) ) ) ; }
private org.eclipse.jgit.lib.ObjectId getDestRef ( com.google.gerrit.server.notedb.ChangeNotes notes ) throws java.lang.Exception { return testRepo.getRepository ( ) . exactRef ( notes.getChange ( ) . getDest ( ) . get ( ) ) . getObjectId ( ) ; }
public com.google.gerrit.server.account.AccountInfo apply ( com.google.gerrit.server.group.MemberResource resource ) { return com.google.gerrit.server.account.AccountInfo.parse ( resource.getMember ( ) . getAccount ( ) , true ) ; }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.notedb.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ApprovalsUtil.getReviewers ( approvals ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent arg0 ) { if ( cb.getValue ( ) ) { scriptSettings.setContext ( com.google.gerrit.client.reviewdb.AccountGeneralPreferences.WHOLE_FILE_CONTEXT ) ; } else { initContextLines ( ) ; } refresh ( false ) ; }
protected void configureServlets ( ) { serve ( "/become" ) . with ( com.google.gerrit.server.http.BecomeAnyAccountLoginServlet.class ) ; }
boolean isTokenValid ( final java.lang.String keyIn ) { return ( isSignedIn ( ) ) && ( key ( ) . token.equals ( keyIn ) ) ; }
protected abstract void onCellDoubleClick ( int row , int column ) ;
public void onSelection ( final com.google.gwt.event.logical.shared.SelectionEvent < java.lang.Integer > event ) { com.google.gerrit.client.Gerrit.display ( tabTokens.get ( event.getSelectedItem ( ) ) , false ) ; }
private static java.lang.String newName ( com.google.gerrit.server.diff.PatchListEntry entry ) { switch ( entry.getChangeType ( ) ) { case DELETED : return null ; case ADDED : case MODIFIED : case COPIED : case RENAMED : case REWRITE : default : return entry.getNewName ( ) ; } }
public void invalidate ( java.lang.Object key ) { if ( key instanceof java.lang.String ) { deleteFile ( new java.io.File ( dir , ( ( java.lang.String ) ( key ) ) ) ) ; } }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.setB0 ( ) ; com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; if ( ! ( a1.unify ( engine.getException ( ) , engine.trail ) ) ) return engine.fail ( ) ; return cont ; }
public void doChangeRestoreHook ( com.google.gerrit.reviewdb.Change change , com.google.gerrit.reviewdb.Account account , java.lang.String reason , com.google.gerrit.reviewdb.ReviewDb db ) { }
public void deleteBranchByUserWithDeletePermission ( ) throws java.lang.Exception { grantDelete ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( ) ; }
boolean isNeedUpgrade ( ) { for ( java.lang.String name : com.google.gerrit.pgm.init.UpgradeFrom2_0_x.etcFiles ) { if ( new java.io.File ( site_path , name ) . exists ( ) ) { return true ; } } return false ; }
protected void doGet ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { handleRequest ( request.getPathInfo ( ) , request , response ) ; }
protected abstract void display ( final com.google.gerrit.common.data.GroupDetail groupDetail ) ;
public int compare ( com.google.gerrit.reviewdb.AccountGroup a , com.google.gerrit.reviewdb.AccountGroup b ) { return a.getName ( ) . compareTo ( b.getName ( ) ) ; }
public void copy ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { copy ( db , ctl , ps , java.util.Collections.< com.google.gerrit.reviewdb.client.PatchSetApproval > emptyList ( ) ) ; }
void onLogin ( ) { async.append ( log ( ( "LOGIN FROM " + ( session.get ( ) . getRemoteAddressAsString ( ) ) ) ) ) ; }
public com.google.gerrit.common.data.ReviewerResult call ( ) throws java.lang.Exception { com.google.gerrit.common.data.ReviewerResult result = addReviewerFactory.create ( changeId , reviewers ) . call ( ) ; result.setChange ( changeDetailFactory.create ( changeId ) . call ( ) ) ; return result ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { changeScreen.update ( result ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , account , com.google.common.collect.ImmutableSet.of ( ) , com.google.common.collect.ImmutableMap.of ( ) , com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults ( ) ) ; }
boolean canAddPatchSet ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.ADD_PATCH_SET ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public void testFindInDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( new com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo ( ( - 1 ) , false ) , mapper.lineOnOther ( Side.PARENT , 9 ) ) ; }
com.google.gitiles.doc.Navbar setMarkdown ( byte [ ] md ) { if ( ( md != null ) && ( ( md.length ) > 0 ) ) { parse ( org.eclipse.jgit.util.RawParseUtils.decode ( md ) ) ; } return this ; }
private static com.google.gerrit.server.query.change.QueryOptions options ( int start , int limit ) { return com.google.gerrit.server.query.change.QueryOptions.create ( com.google.gerrit.server.index.IndexRewriterTest.CONFIG , start , limit ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.ProjectRight > getProjectRights ( final com.google.gerrit.common.data.ApprovalType at ) { return getProjectRights ( com.google.gerrit.server.workflow.FunctionState.id ( at ) ) ; }
private void log ( final int rc ) { if ( logged.compareAndSet ( false , true ) ) { log.onExecute ( cmd , rc ) ; } }
protected void doPost ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) { this . healthy = true ; rsp.setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
private static boolean isNameAlreadyUsed ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NameAlreadyUsedException.MESSAGE ) ) ; }
protected java.io.Writer startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return getWriter ( res ) ; }
public void go ( ) { com.google.gerrit.client.HistoryHandler.patch ( getTargetHistoryToken ( ) , patchKey , patchIndex , parentPatchTable ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.rules.PredicateProvider.class ) ; factory ( PrologEnvironment.Factory.class ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( indexTask ( cd ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public java.lang.String getName ( ) { return "SSH" ; }
public void review ( com.google.gerrit.extensions.api.changes.ReviewInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post review" , e ) ; } }
public boolean canRemoveGroup ( final com.google.gerrit.reviewdb.AccountGroup.Id id ) { return isOwner ( ) ; }
public void onHeadUpdated ( com.google.gerrit.extensions.events.HeadUpdatedListener.Event event ) { updateHead ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , event.getNewHeadName ( ) ) ; }
public com.google.gerrit.server.notedb.ChangeUpdate load ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return load ( change , com.google.gerrit.server.util.TimeUtil.nowTs ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > byCommitsOnBranchNotMerged ( com.google.gerrit.reviewdb.client.Branch.NameKey branch , java.util.List < java.lang.String > hashes ) throws com.google.gwtorm.server.OrmException { return byCommitsOnBranchNotMerged ( branch , hashes , 100 ) ; }
public void createDraftChangeWhenDraftsNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = createDraftChange ( ) ; r.assertErrorStatus ( "cannot upload drafts" ) ; }
public void onSignIn ( ) { if ( refreshOnSignIn ) { refresh ( ) ; } }
public java.util.Collection < com.google.gerrit.common.data.AccessSection > getAccessSections ( ) { return accessSections.values ( ) ; }
public void getDiffPreferencesOfNonExistingAccount_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , adminSession.get ( "/accounts/non-existing/preferences.diff" ) . getStatusCode ( ) ) ; }
com.google.gerrit.server.patch.FileList getFileList ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.server.patch.PatchListNotAvailableException ;
public void myAccount ( final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.reviewdb.client.Account > callback ) { callback.onSuccess ( currentUser.get ( ) . getAccount ( ) ) ; }
private static boolean correctUser ( java.lang.String user , com.google.gerrit.httpd.WebSession session ) { com.google.gerrit.server.account.ExternalId.Key id = session.getLastLoginExternalId ( ) ; return ( id != null ) && ( id.equals ( ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT , user ) ) ) ; }
protected void assertBadQuery ( java.lang.Object query ) throws java.lang.Exception { try { newQuery ( query ) . get ( ) ; org.junit.Assert.fail ( ( "expected BadRequestException for query: " + query ) ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) { } }
public void onSuccess ( final com.google.gerrit.reviewdb.client.AccountGroup.Id result ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toGroup ( result , AccountGroupScreen.MEMBERS ) ) ; }
public static void getHttpPassword ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeString > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "password.http" ) . get ( cb ) ; }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.ApprovalsUtil.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ApprovalsUtil.getReviewers ( allApprovals ( db ) ) ; }
public void delete ( int id ) throws java.io.IOException { }
protected void setDateText ( final java.lang.String dateText ) { header.setText ( 0 , 2 , dateText ) ; }
public void update ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { upsert ( instances ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { }
private void initChangeUrl ( ) throws javax.mail.MessagingException { msg.setHeader ( "X-Gerrit-ChangeURL" , changeUrl ( ) ) ; }
public final native java.lang.String reply_tooltip ( ) ;
public void setReadyForReview ( java.lang.String message ) throws com.google.gerrit.extensions.restapi.RestApiException { try { setReady.apply ( change , new com.google.gerrit.server.change.WorkInProgressOp.Input ( message ) ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set ready for review state" , e ) ; } }
private static java.util.Date parseDate ( java.lang.String str ) throws java.lang.Exception { return new java.text.SimpleDateFormat ( "YYYY-MM-dd HH:mm:ss Z" ) . parse ( str ) ; }
public java.util.Set < com.googlesrouce.gerrit.plugins.github.git.GHTeam > getTeams ( ) throws java.io.IOException { return ghRepository.getTeams ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { enableUI ( true ) ; if ( InvalidUserNameException.MESSAGE.equals ( caught.getMessage ( ) ) ) { invalidUserName ( ) ; } else { super . onFailure ( caught ) ; } }
private static com.google.gerrit.common.data.PermissionRule grant ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.common.data.PermissionRule rule , java.lang.String ref ) { return com.google.gerrit.server.project.testing.Util.grant ( project , permissionName , rule , ref , false ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > members ( boolean recursive ) throws com.google.gerrit.extensions.restapi.RestApiException { listMembers.setRecursive ( recursive ) ; try { return listMembers.apply ( rsrc ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list group members" , e ) ; } }
public void getNamePartsExtractsParts ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getNameParts ( "" ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.index.SchemaUtil.getNameParts ( "foO-bAr_Baz a.b@c/d" ) ) . containsExactly ( "foo" , "bar" , "baz" , "a" , "b" , "c" , "d" ) ; }
public static void throwIfNotStaleFileHandle ( java.io.IOException e ) throws java.io.IOException { if ( ! ( com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle ( e ) ) ) { throw e ; } }
public void testCreateSchema_DefaultAccess_AnonymousUsers ( ) throws com.google.gwtorm.client.OrmException { db.create ( ) ; final com.google.gerrit.reviewdb.SystemConfig config = db.getSystemConfig ( ) ; assertDefaultRight ( config.anonymousGroupId , ApprovalCategory.READ , 1 , 1 ) ; }
protected void loadPrev ( ) { com.google.gerrit.client.changes.ChangeList.prev ( query , pageSize , pos , loadCallback ( ) ) ; }
private void writeError ( java.lang.String msg ) { try { err.write ( msg.getBytes ( com.googlesource.gerrit.plugins.verifystatus.commands.ENC ) ) ; } catch ( java.io.IOException e ) { } }
public abstract java.util.concurrent.Callable < ? > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) ;
private static org.eclipse.jgit.transport.RemoteSession connect ( org.eclipse.jgit.transport.URIish uri ) throws org.eclipse.jgit.errors.TransportException { return org.eclipse.jgit.transport.SshSessionFactory.getInstance ( ) . getSession ( uri , null , FS.DETECTED , 0 ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
public java.util.Map < java.lang.String , java.lang.String [ ] > getParameterMap ( ) { return java.util.Collections.unmodifiableMap ( com.google.common.collect.Maps.transformValues ( parameters.asMap ( ) , com.google.gerrit.util.http.testutil.FakeHttpServletRequest.STRING_COLLECTION_TO_ARRAY ) ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { return org.kohsuke.github.GitHub.connectUsingOAuth ( this . token.accessToken ) ; }
public com.google.gerrit.server.notedb.ChangeNotes getNotes ( ) { return ctl.getNotes ( ) ; }
public java.lang.String getSqlType ( final com.google.gwtorm.schema.ColumnModel column ) { return "SMALLINT DEFAULT 0 NOT NULL" ; }
public void testGcWithoutCapability_Error ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession ( server , accounts.create ( "user" , "user@example.com" , "User" ) ) ; s.exec ( "gerrit gc --all" ) ; assertError ( "fatal: user does not have \"runGC\" capability." , s.getError ( ) ) ; }
public void run ( ) { getSkipManager ( ) . removeAll ( ) ; getSkipManager ( ) . render ( context , diff ) ; updateRenderEntireFile ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { topic.onEdit ( ) ; }
private com.google.gerrit.server.query.change.InternalChangeQuery query ( ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) ) ; return queryProvider.get ( ) . setRequestedFields ( fields ) ; }
public void testGetPeopleAccess ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open ( ) ; assertNotNull ( schema.people ( ) ) ; }
private void setDefaultFields ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { setDefaultConfig ( filterConfig ) ; setDefaultRenderer ( filterConfig ) ; setDefaultUrls ( ) ; setDefaultAccess ( ) ; setDefaultVisbilityCache ( ) ; setDefaultTimeCache ( ) ; setDefaultGitwebRedirect ( ) ; }
public void enable ( ) throws com.google.gerrit.extensions.restapi.RestApiException { enable.apply ( resource , new com.google.gerrit.server.plugins.EnablePlugin.Input ( ) ) ; }
private com.google.gerrit.server.patch.PatchListKey keyFor ( com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace ) { if ( ( parentNum ) < 0 ) { return new com.google.gerrit.server.patch.PatchListKey ( aId , bId , whitespace ) ; } return com.google.gerrit.server.patch.PatchListKey.againstParentNum ( ( ( parentNum ) + 1 ) , bId , whitespace ) ; }
public void onFailure ( final java.lang.Throwable caught ) { super . onFailure ( caught ) ; onDiscoveryFailure ( ) ; }
private static boolean isConfig ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { return cmd.getRefName ( ) . equals ( GitRepositoryManager.REF_CONFIG ) ; }
private static com.google.gerrit.server.change.RebaseUtil.Base create ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) { if ( ctl == null ) { return null ; } return new com.google.gerrit.server.change.AutoValue_RebaseUtil_Base ( ctl , ps ) ; }
private com.google.gerrit.gpg.testutil.TestKey add ( com.google.gerrit.gpg.testutil.TestKey k ) { store.add ( k.getPublicKeyRing ( ) ) ; return k ; }
private com.google.gerrit.server.account.AuthResult auth ( com.google.gerrit.reviewdb.client.Account account ) { if ( account != null ) { return new com.google.gerrit.server.account.AuthResult ( account.getId ( ) , null , false ) ; } return null ; }
private static org.eclipse.jgit.lib.Config updateConfig ( org.eclipse.jgit.lib.Config cfg ) { cfg.setInt ( "index" , null , "maxPages" , 10 ) ; return cfg ; }
static void deleteSessionCookie ( ) { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.SESSION_COOKIE ) ; com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.myAccountDiffPref = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public org.eclipse.jgit.lib.ObjectInserter getInserter ( ) throws java.io.IOException { return getRepoView ( ) . getInserter ( ) ; }
HEAD ( com.google.gerrit.extensions.api.changes.b3f1de dev ) { }
public void setRefPattern ( java.lang.String refPattern ) { this . refPattern = refPattern ; }
public org.eclipse.jgit.lib.ObjectId insert ( int type , byte [ ] data , int off , int len ) { return insert ( com.google.gerrit.server.notedb.InsertedObject.create ( type , data , off , len ) ) ; }
long getTimeoutMillis ( @ com.google.gerrit.server.config.GerritServerConfig final org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit ( cfg , "receive" , null , "timeout" , java.util.concurrent.TimeUnit.MINUTES.toMillis ( 2 ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { removeUI ( ) ; }
public void setSubmitRecords ( java.util.List < com.google.gerrit.common.data.SubmitRecord > records ) { submitRecords = records ; }
public com.google.gerrit.server.git.ChangeReportFormatter.Input setEdit ( boolean edit ) { this . edit = edit ; return this ; }
public void run ( ) throws java.lang.Exception { processor.setOutput ( out , QueryProcessor.OutputFormat.TEXT ) ; parseCommandLine ( ) ; processor.query ( com.google.gerrit.sshd.commands.Query.join ( query , " " ) ) ; }
public void beforeTest ( ) throws java.lang.Exception { if ( com.google.gerrit.testutil.GerritServerTests.isNoteDbTestEnabled ( ) ) { com.google.gerrit.server.notedb.NotesMigration.setAllEnabledConfig ( config ) ; } }
public void testSetForwardedEvent ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.syncindex.Context.setForwardedEvent ( true ) ; try { com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.syncindex.Context.isForwardedEvent ( ) ) . isTrue ( ) ; } finally { com.ericsson.gerrit.plugins.syncindex.Context.unsetForwardedEvent ( ) ; } }
public final native void set_commit ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo c ) ;
protected void setCurrentUrl ( com.google.gerrit.client.download.DownloadUrlLink link ) { widget.setVisible ( true ) ; copyLabel.setText ( ( "git pull " + ( link.urlData ) ) ) ; }
static com.google.gerrit.client.reviewdb.AccountExternalId getInstance ( int rawOldAccountId , java.lang.String rawExternalId ) { return new com.google.gerrit.client.reviewdb.AccountExternalId ( new com.google.gerrit.client.reviewdb.Account.Id ( rawOldAccountId ) , new com.google.gerrit.client.reviewdb.AccountExternalId.Key ( rawExternalId ) ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( user , repositoryName , objectId ) ; }
public static java.lang.String stripAndaddCharsAtEnd ( java.lang.String str , java.lang.String chs ) { org.apache.commons.lang.StringUtils.stripEnd ( str , chs ) ; return str + chs ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.myAccount = result ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; } com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; showInitialScreen ( ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > email ( java.lang.String email ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EMAIL , AccountQueryBuilder.FIELD_EMAIL , email.toLowerCase ( ) ) ; }
private java.lang.String urlDeleteEdit ( ) { return ( urlGet ( ) ) + "/0" ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { event.preventDefault ( ) ; form.submit ( ) ; } }
public void cancel ( ) { if ( ( status.getStatus ( ) ) != ( com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.Code.SYNC ) ) { return ; } cancelled = true ; status.update ( GitJobStatus.Code.CANCELLED , "Cancelled" , "Cancelled" ) ; rollback ( ) ; }
static java.lang.String get ( ) { return com.google.gwt.core.client.GWT.< com.google.gerrit.client.api.PluginName > create ( com.google.gerrit.client.api.PluginName.class ) . guessName ( ) ; }
public void httpLink ( ) { com.google.gitiles.doc.MarkdownToHtml md = new com.google.gitiles.doc.MarkdownToHtml ( view , config ) ; java.lang.String url ; url = "http://example.com/foo.html" ; com.google.common.truth.Truth.assertThat ( md.href ( url ) ) . isEqualTo ( url ) ; url = "https://example.com/foo.html" ; com.google.common.truth.Truth.assertThat ( md.href ( url ) ) . isEqualTo ( url ) ; url = "//example.com/foo.html" ; com.google.common.truth.Truth.assertThat ( md.href ( url ) ) . isEqualTo ( url ) ; }
public void visit ( org.pegdown.ast.AbbreviationNode node ) { }
public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockCreateReference ( ) ; setApiUser ( user ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { keys.deleteChecked ( ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getFileWebLink ( java.lang.String projectName , java.lang.String revision , java.lang.String fileName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.PREVIEW , getImageUrl ( ) , getFileUrl ( projectName , revision , fileName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.Account result ) { display ( result.getGeneralPreferences ( ) ) ; enable ( true ) ; }
public abstract com.google.gerrit.server.plugins.PluginContentScanner getScanner ( ) ;
com.google.gerrit.server.project.ProjectControl getProjectControl ( ) { return projectControl ; }
public void visit ( org.pegdown.ast.ExpImageNode node ) { html.open ( "img" ) . attribute ( "src" , node.url ) . attribute ( "title" , node.title ) . attribute ( "alt" , com.google.gitiles.doc.MarkdownHelper.getInnerText ( node ) ) ; }
private void initUI ( ) { initName ( ) ; initOwner ( ) ; initDescription ( ) ; initMemberList ( ) ; }
public com.google.gerrit.server.ParamertizedString.Builder replace ( final java.lang.String name , final java.lang.String value ) { params.put ( name , value ) ; return this ; }
public void flush_Forbidden ( ) throws java.lang.Exception { userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH , java.util.Arrays.asList ( "projects" ) ) ) . assertForbidden ( ) ; }
public java.lang.String getCommentLinkName ( ) { java.lang.String ret ; ret = gerritConfig.getString ( pluginName , null , "commentlink" ) ; if ( ret == null ) { ret = pluginName ; } return ret ; }
protected void onLoad ( ) { super . onLoad ( ) ; setPageTitle ( Util.C.plugins ( ) ) ; display ( ) ; }
private java.lang.String newChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , git , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push.to ( "refs/for/master" ) . getChangeId ( ) ; }
public java.lang.String generate ( ) { java.lang.StringBuilder message ; message = new java.lang.StringBuilder ( ) ; message.append ( "Unsupported change event: " ) ; message.append ( this . event.toString ( ) ) ; return message.toString ( ) ; }
public com.google.gerrit.client.rpc.RestApi data ( java.lang.String data ) { contentType = "text/plain; charset=utf-8" ; contentData = data ; return this ; }
public java.util.List < java.lang.String > getAllTeamNames ( ) { return null ; }
private static java.lang.String reduceWildcard ( java.lang.String input ) { return input.contains ( "*" ) ? input.substring ( 0 , input.indexOf ( "*" ) ) : input ; }
private java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountExternalId > getGpgExtIds ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.account.GpgKeys.getGpgExtIds ( db.get ( ) , rsrc.getUser ( ) . getAccountId ( ) ) ; }
public boolean canRestore ( ) { return canAbandon ( ) ; }
public void setPassword ( java.lang.String p ) { password = p ; }
public boolean canRunReceivePack ( ) { return isAnyIncludedIn ( receiveGroups , user.getEffectiveGroups ( ) ) ; }
public java.util.Collection < java.lang.String > getHeaders ( java.lang.String name ) { return headers.get ( com.google.common.base.Preconditions.checkNotNull ( name ) ) ; }
long getTimeoutMillis ( @ com.google.gerrit.server.config.GerritServerConfig final org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit ( cfg , "receive" , null , "timeout" , java.util.concurrent.TimeUnit.SECONDS.convert ( 2 , java.util.concurrent.TimeUnit.MINUTES ) , java.util.concurrent.TimeUnit.SECONDS ) ; }
public java.util.List < com.google.gerrit.extensions.common.SshKeyInfo > listSshKeys ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getSshKeys.apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list SSH keys" , e ) ; } }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.server.project.ChangeControl control ) { return new com.google.gerrit.server.change.ChangeResource ( control ) ; }
public void delete ( ) { com.googlesource.gerrit.plugins.repositoryuse.Ref.log.info ( java.lang.String.format ( "Deleting Ref: %s, %s" , project , ref ) ) ; com.googlesource.gerrit.plugins.repositoryuse.Ref.table.delete ( this ) ; }
private void setRejectImplicitMerges ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.getProject ( ) . setRejectImplicitMerges ( InheritableBoolean.TRUE ) ; saveProjectConfig ( project , cfg ) ; }
private void unblockRead ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig pc = projectCache.checkedGet ( project ) . getConfig ( ) ; pc.getAccessSection ( "refs/*" ) . remove ( new com.google.gerrit.common.data.Permission ( com.google.gerrit.common.data.Permission.READ ) ) ; saveProjectConfig ( project , pc ) ; }
public char getOpeningDelimiterChar ( ) { return '{' ; }
protected java.lang.String currentTimeFormatted ( ) { org.eclipse.jgit.lib.PersonIdent p = new org.eclipse.jgit.lib.PersonIdent ( repo.getRepository ( ) ) ; return new com.google.gitiles.DateFormatter ( com.google.common.base.Optional.< java.util.TimeZone > absent ( ) , DateFormatter.Format.ISO ) . format ( p ) ; }
public java.lang.String getBaseGitUrl ( javax.servlet.http.HttpServletRequest req ) { return "git://test-host/foo" ; }
private void createGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup ( repo , groupUuid , groupName ) ; commit ( groupNameNotes ) ; }
public void visit ( com.google.gitiles.doc.ColsNode node ) { html.open ( "div" ) . attribute ( "class" , "cols" ) ; visitChildren ( node ) ; html.close ( "div" ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.BatchRefUpdate batchRefUpdate ) { for ( org.eclipse.jgit.transport.ReceiveCommand cmd : batchRefUpdate.getCommands ( ) ) { if ( ( cmd.getResult ( ) ) == ( ReceiveCommand.Result.OK ) ) { fire ( project , cmd ) ; } } }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; hide ( ) ; }
public void testUpsertTwoSecondExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 0 , 1 ) ; java.sql.PreparedStatement insert = stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; verifyIds ( insert , 1 ) ; }
private com.googlesource.gerrit.plugins.replication.ReplicationFileBasedConfig loadConfig ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.googlesource.gerrit.plugins.replication.ReplicationFileBasedConfig ( injector , site , remoteSiteUserFactory , pluginUser , gitRepositoryManager , groupBackend ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; if ( ( header ) == null ) { onInitUI ( ) ; } com.google.gerrit.client.Gerrit.setQueryString ( null ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.reviewdb.Project item ) { return item.getId ( ) ; }
private java.io.File configFile ( javax.servlet.http.HttpServletRequest req ) { return new java.io.File ( site_path , ( ( req.getServletPath ( ) ) + ( req.getPathInfo ( ) ) ) ) ; }
public boolean isIgnoreWhitespace ( ) { return ( settings.getWhitespace ( ) ) != ( com.google.gerrit.common.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; }
public void setUp ( ) { userId = new com.google.gerrit.reviewdb.client.Account.Id ( 1 ) ; repoManager = new com.google.gerrit.testutil.InMemoryRepositoryManager ( ) ; }
public void self ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts ( ) . self ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.name ) . isEqualTo ( "Administrator" ) ; com.google.common.truth.Truth.assertThat ( info.email ) . isEqualTo ( "admin@example.com" ) ; com.google.common.truth.Truth.assertThat ( info.username ) . isEqualTo ( "admin" ) ; }
public com.google.gerrit.server.patch.IntraLineDiff call ( ) throws java.lang.Exception { return com.google.gerrit.server.patch.IntraLineLoader.compute ( key ) ; }
public void onCallEnd ( ) { if ( ( -- ( activeCalls ) ) == 0 ) { loading.setVisible ( false ) ; } }
public static com.google.gwt.user.client.Element parse ( final com.google.gwtexpui.safehtml.client.SafeHtml str ) { return com.google.gwt.user.client.DOM.getFirstChild ( com.google.gwtexpui.safehtml.client.SafeHtml.set ( com.google.gwt.user.client.DOM.createDiv ( ) , str ) ) ; }
void onIntralineDifference ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.intralineDifference ( e.getValue ( ) ) ; if ( ( view ) != null ) { view.setShowIntraline ( prefs.intralineDifference ( ) ) ; } }
public int hashCode ( ) { return ( ( com.google.gerrit.server.query.IntPredicate.getOperator ( ) . hashCode ( ) ) * 31 ) + ( intValue ) ; }
public static void startIndexService ( ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException { if ( ( com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo ) != null ) { return ; } com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo = com.google.gerrit.elasticsearch.ElasticTestUtils.startElasticsearchNode ( ) ; com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes ( ) ; }
public com.google.gerrit.reviewdb.client.AccountGroup get ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { want ( id ) ; return out.get ( id ) ; }
public static java.lang.String nameEmail ( final com.google.gerrit.reviewdb.client.Account acct ) { return com.google.gerrit.client.FormatUtil.nameEmail ( new com.google.gerrit.common.data.AccountInfo ( acct ) ) ; }
public java.lang.Object getInternalContext ( ) { return self.getInternalContext ( ) ; }
public void testUpdateNothing ( ) throws com.google.gwtorm.server.OrmException { createClassUnderTest ( ) . update ( noData ) ; }
public static void permissions ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "PERMISSIONS" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
public static com.google.gerrit.client.info.AccountInfo getUserAccountInfo ( ) { return com.google.gerrit.client.FormatUtil.asInfo ( com.google.gerrit.client.Gerrit.myAccount ) ; }
private void logError ( java.lang.String msg ) { if ( com.google.gerrit.server.git.MergeSuperSet.log.isErrorEnabled ( ) ) { com.google.gerrit.server.git.MergeSuperSet.log.error ( msg ) ; } }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNewInclude ( ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { enableForm ( true ) ; saveDesc.setEnabled ( false ) ; display ( result ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toGroup ( getRowItem ( row ) . getId ( ) ) ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.setAccountDiffPreference ( get ( ) ) ; cb.onSuccess ( result ) ; }
com.googlesource.gerrit.plugins.replication.Destination create ( com.googlesource.gerrit.plugins.replication.DestinationConfiguration config ) { return new com.googlesource.gerrit.plugins.replication.Destination ( injector , config , replicationUserFactory , pluginUser , gitRepositoryManager , groupBackend , stateLog , groupIncludeCache , eventDispatcher ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , accountCache , realm , null , null , id ) ; }
public com.google.gerrit.extensions.api.projects.DashboardApi defaultDashboard ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return dashboard ( com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME ) ; }
protected void onOpenItem ( final com.google.gerrit.client.reviewdb.Project item ) { com.google.gwt.user.client.History.newItem ( link ( item ) ) ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > isActive ( ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ACTIVE , "1" ) ; }
javax.servlet.http.HttpServlet getPolyGerritUiIndexServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.SingleFileServlet ( cache , polyGerritBasePath ( ) . resolve ( "index.html" ) , getPaths ( ) . isDev ( ) , false ) ; }
public boolean isUseContentMerge ( ) { return getInheritedBoolean ( new com.google.common.base.Function < com.google.gerrit.reviewdb.client.Project , com.google.gerrit.reviewdb.client.Project.InheritedBoolean > ( ) { @ java.lang.Override public com.google.gerrit.reviewdb.client.Project.InheritedBoolean apply ( com.google.gerrit.reviewdb.client.Project input ) { return input.getUseContentMerge ( ) ; } } ) ; }
protected void setupSoyContext ( ) { super . setupSoyContext ( ) ; soyContextEmailData.put ( "reviewerNames" , getReviewerNames ( ) ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT , expectedError ) ; }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.server.account.AccountState > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticAccountIndex.QuerySource ( p , opts ) ; }
com.ericsson.gerrit.plugins.syncindex.IndexResponseHandler.IndexResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpDelete ( ( ( url ) + endpoint ) ) , new com.ericsson.gerrit.plugins.syncindex.IndexResponseHandler ( ) ) ; }
public void onActivityCreated ( android.os.Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; setHasOptionsMenu ( true ) ; com.google.reviewit.util.TaskObserver.enableProgressBar ( getWindow ( ) ) ; init ( ) ; display ( ) ; }
com.google.gerrit.reviewdb.ProjectAccess projects ( ) ;
private boolean canUploadMerges ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH_MERGE ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public void setStatisticsEnabled ( boolean enableStatistics ) { self.setStatisticsEnabled ( enableStatistics ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > memberIn ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
private void display ( final com.google.gerrit.client.data.UnifiedPatchDetail detail ) { diffTable.display ( detail.getLines ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSetApproval > iterateAllEntities ( ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void testBadEventAndItIsForwarded ( ) throws java.lang.Exception { setUpMocks ( false , false ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; verifyAll ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.server.project.ProjectState > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.project.ProjectState > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource ( opts , queryBuilder.toQuery ( p ) , new org.apache.lucene.search.Sort ( new org.apache.lucene.search.SortField ( com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD , SortField.Type.STRING , false ) ) ) ; }
public void visit ( org.pegdown.ast.OrderedListNode node ) { wrapChildren ( "ol" , node ) ; }
public void onSuccess ( com.google.gerrit.common.data.com.google.gerrit.client.changes.ChangeInfo result ) { changeInfo = result ; display ( event.getValue ( ) ) ; }
public void testPushForMasterWithHashtagsNoteDbDisabled ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master%hashtag=tag1" ) ; r.assertErrorStatus ( "cannot add hashtags; noteDb is disabled" ) ; }
private void assertAccessDenied ( com.google.gerrit.server.project.ProjectControl u ) { boolean access = u.asForProject ( ) . testOrFalse ( ProjectPermission.ACCESS ) ; com.google.common.truth.Truth.assertThat ( access ) . named ( "cannot access" ) . isFalse ( ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.extensions.api.projects.ConfigInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ! ( rsrc.getControl ( ) . isOwner ( ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "restricted to project owner" ) ; } return apply ( rsrc.getProjectState ( ) , input ) ; }
private java.lang.String group ( java.lang.String name ) throws java.lang.Exception { name = name ( name ) ; gApi.groups ( ) . create ( name ) ; return name ; }
public void onSubmitComplete ( final com.google.gwt.user.client.ui.FormSubmitCompleteEvent event ) { }
public com.google.gerrit.server.project.ChangeControl getControl ( ) { return ctl ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicItem.bind ( binder ( ) , com.google.gerrit.common.EventDispatcher.class ) . to ( com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedAwareEventBroker.class ) ; }
public void run ( ) { cm.setHeight ( height ) ; cm.setOption ( "viewportMargin" , 10 ) ; cm.refresh ( ) ; }
com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return changeControlFactory.create ( controlForRef ( change.getDest ( ) ) , db , change.getProject ( ) , change.getId ( ) ) ; }
public void run ( ) { com.google.gerrit.pgm.Daemon.log.info ( "caught shutdown, cleaning up" ) ; manager.stop ( ) ; }
abstract void expandBefore ( int cnt ) ;
protected void upgradeFrom ( com.google.gerrit.server.schema.UpdateUI ui , com.google.gerrit.reviewdb.CurrentSchemaVersion curr , com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { throw new com.google.gwtorm.client.OrmException ( ( ( ( ( "Cannot upgrade from " + ( curr.versionNbr ) ) + "; manually run scripts from" ) + " http://gerrit.googlecode.com/files/schema-upgrades003_019.zip" ) + " and restart." ) ) ; }
public com.google.gerrit.reviewdb.Account getAccount ( ) { return state ( ) . getAccount ( ) ; }
private boolean canEditSshUserName ( ) { return com.google.gerrit.client.Gerrit.getConfig ( ) . canEdit ( Account.FieldName.SSH_USER_NAME ) ; }
public void putReviewer ( com.google.gerrit.reviewdb.client.Account.Id reviewer , com.google.gerrit.server.notedb.ReviewerState type ) { com.google.common.base.Preconditions.checkArgument ( ( type != ( ReviewerState.REMOVED ) ) , "invalid ReviewerType" ) ; reviewers.put ( reviewer , type ) ; }
public void onError ( com.google.gwt.event.dom.client.ErrorEvent event ) { setVisible ( false ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.Event event ) { }
static void initialize ( org.eclipse.jgit.lib.Config cfg ) { cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , AsciidocFormatter.NAME , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_EXT , "adoc" ) ; cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , MarkdownFormatter.NAME , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/x-markdown" ) ; cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , PlainTextFormatter.NAME , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/plain" ) ; }
public com.google.gerrit.extensions.api.changes.SubmittedTogetherInfo submittedTogether ( java.util.EnumSet < com.google.gerrit.extensions.api.changes.SubmittedTogetherOption > options ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return submittedTogether.apply ( change , options ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot query submittedTogether" , e ) ; } }
private static com.google.gerrit.common.auth.SignInMode signInMode ( final javax.servlet.http.HttpServletRequest req ) { try { return com.google.gerrit.common.auth.SignInMode.valueOf ( req.getParameter ( com.google.gerrit.httpd.auth.openid.OpenIdServiceImpl.P_MODE ) ) ; } catch ( java.lang.RuntimeException e ) { return com.google.gerrit.common.auth.SignInMode.SIGN_IN ; } }
public static boolean isOAuthLogin ( javax.servlet.http.HttpServletRequest request ) { return ( request.getRequestURI ( ) . indexOf ( GitHubOAuthConfig.OAUTH_LOGIN ) ) >= 0 ; }
private com.google.gerrit.server.diff.PatchListKey keyFor ( com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace ) { if ( ( parentNum ) < 0 ) { return com.google.gerrit.server.diff.PatchListKey.againstCommit ( aId , bId , whitespace ) ; } return com.google.gerrit.server.diff.PatchListKey.againstParentNum ( ( ( parentNum ) + 1 ) , bId , whitespace ) ; }
public com.google.gerrit.server.change.PatchSetInserter setUploader ( com.google.gerrit.reviewdb.client.Account.Id uploader ) { this . uploader = uploader ; return this ; }
private static boolean isVerified ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id ) { return "Verified" . equalsIgnoreCase ( id.get ( ) ) ; }
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publish.apply ( revision , new com.google.gerrit.server.change.Publish.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish draft patch set" , e ) ; } }
private void reindexChanges ( ) throws java.io.IOException { com.google.gerrit.server.index.ChangeIndexer.allAsList ( indexFutures ) . checkedGet ( ) ; }
protected java.lang.Object serviceHandle ( ) { return this ; }
public java.lang.String encode ( final java.lang.String e ) { return fixPathImpl ( com.google.gwt.http.client.URL.encodeComponent ( e ) ) ; }
public void evict ( java.lang.String username ) ;
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.actions.ActionInfo > actionMap ) { actionMap.copyKeysIntoChildren ( "id" ) ; renderRevisionInfo ( changeInfo , actionMap ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doClearPassword ( ) ; }
private static native java.lang.String userAgent ( ) ;
private void abandon ( java.lang.String changeId , com.google.gerrit.acceptance.TestAccount by , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy emailStrategy ) throws java.lang.Exception { abandon ( changeId , by , emailStrategy , null ) ; }
public void onTabSelected ( com.google.gwt.user.client.ui.SourcesTabEvents sender , int tabIndex ) { com.google.gwt.user.client.History.newItem ( tabTokens.get ( tabIndex ) , false ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toProjectAdmin ( new com.google.gerrit.reviewdb.Project.NameKey ( projectName ) , ProjectScreen.INFO ) ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; com.google.common.base.Preconditions.checkArgument ( draftNotes.containsComment ( c ) , ( "Cannot delete this comment " + "because it didn't previously exist as a draft" ) ) ; deleteComments.add ( c ) ; }
public java.lang.Object apply ( com.google.gerrit.server.account.AccountResource.Email rsrc , com.google.gerrit.server.account.CreateEmail.Input input ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( ( ( "Email \"" + ( rsrc.getEmail ( ) ) ) + "\" already exists" ) ) ; }
public void doRefUpdatedHook ( com.google.gerrit.reviewdb.Branch.NameKey refName , org.eclipse.jgit.lib.ObjectId oldId , org.eclipse.jgit.lib.ObjectId newId , com.google.gerrit.reviewdb.Account account ) { }
protected java.io.File getSitePath ( ) { java.io.File path = sitePath.getAbsoluteFile ( ) ; if ( "." . equals ( path.getName ( ) ) ) { path = path.getParentFile ( ) ; } return path ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , com.google.gerrit.reviewdb.client.Change.Id id ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.server.query.change.LegacyChangeIdPredicate.idField ( schema ) . getName ( ) , id.get ( ) ) ; }
public void operationComplete ( org.apache.sshd.common.future.CloseFuture future ) { if ( sd.isAuthenticationError ( ) ) { sshLog.onAuthFail ( sd ) ; } }
private static com.google.gerrit.reviewdb.client.AccountPatchReview getExisting ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.change.PatchResource resource ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountPatchReview.Key key = new com.google.gerrit.reviewdb.client.AccountPatchReview.Key ( resource.getPatchKey ( ) , resource.getAccountId ( ) ) ; return db.accountPatchReviews ( ) . get ( key ) ; }
public void createAssignee ( ) throws java.lang.Exception { assignee = accounts.create ( "assignee" , "assignee@example.com" , "assignee" ) ; }
private void maybeFlush ( ) throws com.google.gwtorm.client.OrmException { if ( db.isAutoFlush ( ) ) { db.flush ( ) ; } }
public void onUpdate ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) { }
private static void assertNotRef ( java.lang.String refName ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.PatchSet.isRef ( refName ) ) . isFalse ( ) ; com.google.common.truth.Truth.assertThat ( PatchSet.Id.fromRef ( refName ) ) . isNull ( ) ; }
protected void onUnload ( ) { expandTimer.cancel ( ) ; super . onUnload ( ) ; }
com.google.gerrit.server.query.Predicate create ( java.lang.String value ) throws com.google.gerrit.server.query.QueryParseException ;
public void writeTo ( java.io.OutputStream out ) throws java.io.IOException { java.io.OutputStream e = com.google.common.io.BaseEncoding.base64 ( ) . encodingStream ( new java.io.OutputStreamWriter ( out , com.google.common.base.Charsets.ISO_8859_1 ) ) ; src.writeTo ( e ) ; e.flush ( ) ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { focusHint ( ) ; }
public void listTagsOfNonVisibleProject_NotFound ( ) throws java.lang.Exception { blockRead ( project , "refs/*" ) ; com.google.common.truth.Truth.assertThat ( userSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
static void deleteEdit ( com.google.gerrit.reviewdb.client.Change.Id id ) { com.google.gerrit.client.changes.ChangeApi.deleteEdit ( id.get ( ) , com.google.gerrit.client.change.EditActions.cs ( id ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < com.google.gerrit.reviewdb.client.PatchLineComment , com.google.gwtorm.server.OrmException > getAsync ( com.google.gerrit.reviewdb.client.PatchLineComment.Key key ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void run ( ) { boolean s = prefs.showWhitespaceErrors ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "showTrailingSpace" , s ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "showTrailingSpace" , s ) ; }
void setShowTabs ( boolean b ) { if ( b ) { diffTable.addStyleName ( DiffTable.style.showTabs ( ) ) ; } else { diffTable.removeStyleName ( DiffTable.style.showTabs ( ) ) ; } }
private int getPermittedLimit ( ) { if ( enforceVisibility ) { return userProvider.get ( ) . getCapabilities ( ) . getRange ( GlobalCapability.QUERY_LIMIT ) . getMax ( ) ; } return java.lang.Integer.MAX_VALUE ; }
public void testSubscriptionWildcardACLForMissingBranch ( ) throws java.lang.Exception { createProjectWithPush ( "super-project" ) ; org.eclipse.jgit.junit.TestRepository < ? > subRepo = createProjectWithPush ( "subscribed-to-project" ) ; allowSubmoduleSubscription ( "subscribed-to-project" , "refs/heads/*" , "super-project" , "refs/heads/*" ) ; pushChangeTo ( subRepo , "foo" ) ; }
protected com.google.gerrit.pgm.init.ConsoleUI getConsoleUI ( ) { return com.google.gerrit.pgm.init.ConsoleUI.getInstance ( false ) ; }
public com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( ) { return patchSet ; }
public void run ( ) { progress.setValue ( ( ( ( 100 * ( ++ ( cycle ) ) ) * 250 ) / ( com.google.gerrit.client.api.PluginLoader.MAX_LOAD_TIME_MILLIS ) ) ) ; }
public java.lang.String format ( ) { final java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m.append ( formatValue ( ) ) ; m.append ( ' ' ) ; m.append ( getName ( ) ) ; return m.toString ( ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toProvider ( com.google.gerrit.server.config.SitePathFromSystemConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change ) { setRevisions ( change , patchSet ) ; addHeader ( change ) ; init ( ) ; display ( change ) ; }
public com.google.gerrit.reviewdb.Project getProject ( ) { return getConfig ( ) . getProject ( ) ; }
private boolean isAllowedOpenID ( final java.lang.String id ) { for ( final com.google.gerrit.common.auth.openid.OpenIdProviderPattern pattern : allowedOpenIDs ) { if ( pattern.matches ( id ) ) { return true ; } } return false ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , remotePeerProvider , dbProvider , id , null ) ; }
public void removeReviewer ( final com.google.gerrit.reviewdb.client.Change.Id id , final com.google.gerrit.reviewdb.client.Account.Id reviewerId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ReviewerResult > callback ) { removeReviewerHandlerFactory.create ( id , reviewerId ) . to ( callback ) ; }
private void removeProjectEvents ( java.lang.String project ) { try { eventsDb.removeProjectEvents ( project ) ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.warn ( ( ( "Cannot remove project " + project ) + " from database" ) , e ) ; } }
void deleteBranch ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > ids , com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > > callback ) ;
public java.lang.String me ( ) { return ( "" + ( hashCode ( ) ) ) + ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.ME_SEPARATOR ) ; }
public java.lang.String [ ] getParameterValues ( java.lang.String name ) { return com.google.gitiles.FakeHttpServletRequest.STRING_COLLECTION_TO_ARRAY.apply ( parameters.get ( name ) ) ; }
protected final com.google.gerrit.pgm.CmdLineParser newCmdLineParser ( ) { final com.google.gerrit.pgm.CmdLineParser parser = super . newCmdLineParser ( ) ; for ( com.google.gerrit.server.ssh.commands.CmdOption c : optionList ) { parser.addOption ( c , c ) ; } return parser ; }
protected void configure ( ) { bind ( org.apache.sshd.common.KeyPairProvider.class ) . toProvider ( com.google.gerrit.sshd.HostKeyProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public org.parboiled.Rule [ ] blockPluginRules ( ) { return new org.parboiled.Rule [ ] { toc ( ) } ; }
private void readObject ( final java.io.ObjectInputStream in ) throws java.io.IOException { oldId = org.eclipse.jgit.lib.ObjectIdSerialization.readCanBeNull ( in ) ; newId = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; whitespace = com.google.gerrit.server.ioutil.BasicSerialization.readEnum ( in , com.google.gerrit.common.data.PatchScriptSettings.Whitespace.values ( ) ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHCommit getCommit ( java.lang.String sha1 ) throws java.io.IOException { return ghRepository.getCommit ( sha1 ) ; }
public void setUp ( ) throws java.lang.Exception { db = com.google.gerrit.testutil.InMemoryDatabase.newDatabase ( ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "submit" ) . post ( in , cb ) ; }
public Project.Id getProjectId ( ) { return key.projectId ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.DeleteContent.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return apply ( rsrc.getControl ( ) , rsrc.getPath ( ) ) ; }
private static org.pegdown.PegDownProcessor newParser ( ) { org.pegdown.plugins.PegDownPlugins plugins = new org.pegdown.plugins.PegDownPlugins.Builder ( ) . withPlugin ( com.google.gitiles.doc.GitilesMarkdown.class ) . build ( ) ; return new org.pegdown.PegDownProcessor ( com.google.gitiles.doc.GitilesMarkdown.MD_OPTIONS , plugins ) ; }
protected org.eclipse.jgit.junit.TestRepository < ? > createProjectWithPush ( java.lang.String name ) throws java.lang.Exception { return createProjectWithPush ( name , null ) ; }
protected void appendGetField ( final com.google.gwtorm.schema.ColumnModel c ) { if ( ( c.getParent ( ) ) == null ) { mv.visitVarInsn ( com.google.gwtorm.jdbc.gen.ALOAD , keyvar ) ; } else { super . appendGetField ( c ) ; } }
public void execute ( ) { new com.google.gerrit.client.SignInDialog ( SignInDialog.Mode.REGISTER ) . center ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent arg0 ) { if ( cb.getValue ( ) ) { scriptSettings.setWhitespace ( Whitespace.IGNORE_SPACE_CHANGE ) ; } else { scriptSettings.setWhitespace ( Whitespace.IGNORE_NONE ) ; } refresh ( false ) ; }
private boolean match ( java.lang.String refName , java.lang.String refPattern ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( refPattern ) . match ( refName , null ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.ChangeMessage in ) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = in.getPatchSetId ( ) ; return ( psId == null ) || ( patchSets.containsKey ( psId ) ) ; }
public boolean apply ( com.google.gerrit.common.data.SubmitRecord input ) { return ( input.status ) == ( com.google.gerrit.common.data.SubmitRecord.Status.OK ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return identifiedUserFactory.create ( change.getOwner ( ) ) ; }
public com.google.gerrit.extensions.api.projects.Projects.ListParameter withDescription ( boolean description ) { this . description = description ; return this ; }
public void registerCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self ( ) . registerCacheUsageListener ( cacheUsageListener ) ; }
public boolean isInGroup ( final com.google.gerrit.client.reviewdb.Account.Id accountId , final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > m = getGroups ( accountId ) ; return m.contains ( groupId ) ; }
protected boolean canPerform ( final com.google.gerrit.client.reviewdb.ApprovalCategory.Id actionId , final short val ) { return currentUser.canPerform ( cachedProj , actionId , val ) ; }
void onRemoveDraftBox ( com.google.gerrit.client.diff.DraftBox box ) { boxes.remove ( box ) ; table.updateFileCommentVisibility ( false ) ; }
public void start ( ) { }
protected abstract boolean writeChanges ( ) ;
public void onSuccess ( com.google.gerrit.client.projects.BranchInfo branch ) { addBranch.setEnabled ( true ) ; nameTxtBox.setText ( "" ) ; irevTxtBox.setText ( "" ) ; branchTable.insert ( branch ) ; }
com.google.gerrit.server.change.PatchSetInserter create ( org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk revWalk , com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.IdentifiedUser user , com.google.gerrit.reviewdb.client.Change change , org.eclipse.jgit.revwalk.RevCommit commit ) ;
void showTable ( ) { myBody.clear ( ) ; myBody.add ( table ) ; table.finishDisplay ( ) ; }
public void nameInConfigMustBeDefined ( ) throws java.lang.Exception { populateGroupConfig ( groupUuid , "[group]\n\tid = 42\n\townerGroupUuid = owners\n" ) ; expectedException.expect ( org.eclipse.jgit.errors.ConfigInvalidException.class ) ; expectedException.expectMessage ( "Name of the group users-XYZ" ) ; com.google.gerrit.server.group.db.GroupConfig.loadForGroup ( repository , groupUuid ) ; }
static com.google.gerrit.server.project.SectionMatcher wrap ( com.google.gerrit.common.data.AccessSection section ) { java.lang.String ref = section.getName ( ) ; if ( com.google.gerrit.common.data.AccessSection.isAccessSection ( ref ) ) { return com.google.gerrit.server.project.SectionMatcher.wrap ( ref , section ) ; } else { return null ; } }
public java.util.List < java.lang.String > currentFilePaths ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet ( ) ; if ( ps == null ) { return null ; } return filePaths ( currentPatchSet ) ; }
public java.util.jar.JarFile getJarFile ( ) { return null ; }
public com.google.gerrit.server.project.ProjectResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return parse ( id.get ( ) ) ; }
public Account.Id getAssignee ( ) { return state.assignee ( ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( unchanged , updated , deleted ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = new com.google.gerrit.testutil.InMemoryDatabase ( ) ; }
private static void assertNotRef ( java.lang.String refName ) { org.junit.Assert.assertFalse ( com.google.gerrit.reviewdb.client.PatchSet.isRef ( refName ) ) ; org.junit.Assert.assertNull ( PatchSet.Id.fromRef ( refName ) ) ; }
public static void publishEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "publish_edit" ) . post ( in , cb ) ; }
protected void preDisplay ( com.google.gerrit.common.data.GroupList result ) { addPanel.setVisible ( result.isCanCreateGroup ( ) ) ; groups.display ( result.getGroups ( ) ) ; groups.finishDisplay ( ) ; }
static void invoke ( com.google.gerrit.client.info.ChangeInfo change , com.google.gerrit.client.info.ActionInfo action , com.google.gerrit.client.rpc.RestApi api ) { com.google.gerrit.client.api.DefaultActions.invoke ( action , api , com.google.gerrit.client.api.DefaultActions.callback ( com.google.gerrit.common.PageLinks.toChange ( change.legacyId ( ) ) ) ) ; }
public java.util.Set < com.google.gerrit.client.reviewdb.Change.Id > run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return com.google.gerrit.client.changes.ChangeListServiceImpl.starredBy ( db , com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ) ; }
public void emptyStringTest ( ) throws java.lang.Exception { queryBuilder.addParameter ( "status" , "open" ) ; queryBuilder.addParameter ( "topic" , "" ) ; com.google.common.truth.Truth.assertThat ( queryBuilder.get ( ) ) . isEqualTo ( "topic:\"\" status:\"open\"" ) ; }
BRANCH ( ) { }
public com.google.gerrit.extensions.common.RevisionInfo addRevisionActions ( com.google.gerrit.extensions.common.RevisionInfo to , com.google.gerrit.server.change.RevisionResource rsrc ) { to.actions = toActionMap ( rsrc ) ; return to ; }
private org.eclipse.jgit.revwalk.RevCommit patchSetCommit ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = testRepo.commit ( ) . parent ( tip ) . message ( ( "Change " + psId ) ) . create ( ) ; return testRepo.parseBody ( c ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , id.name ( ) ) ) ; }
private void checkRevision ( ) { com.google.common.base.Preconditions.checkState ( ( ( revision ) != ( Revision.NULL ) ) , "missing revision on %s view" , type ) ; checkRepositoryIndex ( ) ; }
final native void isVisibleToAll ( boolean v ) ;
private java.util.Collection < com.google.gerrit.reviewdb.RefRight > getWildProjectRights ( ) { final com.google.gerrit.server.project.ProjectState s = projectCache.get ( wildProject ) ; return s != null ? s.getLocalRights ( ) : java.util.Collections.< com.google.gerrit.reviewdb.RefRight > emptyList ( ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RENAME_ENTRY , edit , file , newFile , null ) ; }
private void resizeBoxPaddings ( ) { for ( com.google.gerrit.client.diff.CommentBox box : allBoxes ) { box.resizePaddingWidget ( ) ; } }
public com.google.gerrit.server.change.MergeabilityChecker.Check addProject ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { projects.add ( project ) ; return this ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { if ( getCurrentUser ( ) . equals ( who ) ) { return this ; } return new com.google.gerrit.server.project.ChangeControl ( changeDataFactory , getRefControl ( ) . forUser ( who ) , notes ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.README , getImageUrl ( ) , getBranchUrl ( projectName , branchName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public void removeReviewer ( com.google.gerrit.reviewdb.client.Account.Id reviewer ) { reviewers.put ( reviewer , ReviewerState.REMOVED ) ; }
protected java.lang.String soyFile ( java.lang.String name ) { return args.soyTofu.newRenderer ( ( "com.google.gerrit.server.mail.template." + name ) ) . setData ( soyContext ) . render ( ) ; }
public com.google.gerrit.reviewdb.client.Change atomicUpdate ( com.google.gerrit.reviewdb.client.Change.Id key , com.google.gwtorm.server.AtomicUpdate < com.google.gerrit.reviewdb.client.Change > update ) { throw new java.lang.UnsupportedOperationException ( ( "do not call atomicUpdate; updateChange is always called within a" + " transaction" ) ) ; }
public void center ( ) { super . center ( ) ; com.google.gwtexpui.globalkey.client.GlobalKey.dialog ( this ) ; sendButton.setFocus ( true ) ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "N" ) ; } else { commentManager.commentNav ( cm , Direction.NEXT ) . run ( ) ; } }
public com.google.gerrit.server.git.ReplaceOp setUpdateRef ( boolean updateRef ) { this . updateRef = updateRef ; return this ; }
public final java.lang.String descrName ( ) { return descrName ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public void stop ( ) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info ( "closing jgroups channel {}" , jgroupsConfig.clusterName ( ) ) ; channel.close ( ) ; peerInfo = com.google.common.base.Optional.absent ( ) ; peerAddress = null ; }
public java.lang.String getChangeAvatarUrl ( com.google.gerrit.server.IdentifiedUser forUser ) { return "http://www.gravatar.com" ; }
public com.google.gerrit.server.change.ChangeInserter setDraft ( boolean draft ) { change.setStatus ( ( draft ? Change.Status.DRAFT : Change.Status.NEW ) ) ; patchSet.setDraft ( draft ) ; return this ; }
public com.google.gerrit.server.query.InternalQuery < T > setLimit ( int n ) { queryProcessor.setLimit ( n ) ; return this ; }
public com.google.gitiles.doc.html.HtmlBuilder appendAndEscape ( java.lang.CharSequence in ) { try { finishActiveTag ( ) ; textBuf.append ( in ) ; return this ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalStateException ( e ) ; } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void execute ( java.lang.Runnable command ) { com.google.common.truth.Truth.assertThat ( command.toString ( ) ) . isEqualTo ( java.lang.String.format ( "[%s] Send event '%s' to target instance" , com.ericsson.gerrit.plugins.syncevents.EventHandlerTest.PLUGIN_NAME , null ) ) ; command.run ( ) ; }
abstract void expandBefore ( int cnt ) ;
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { db.accountProjectWatches ( ) . update ( java.util.Collections.singleton ( watch ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public com.google.gerrit.server.account.AccountInfo apply ( com.google.gerrit.server.account.AccountResource rsrc ) { return com.google.gerrit.server.account.AccountInfo.parse ( rsrc.getUser ( ) . getAccount ( ) , true ) ; }
public java.util.List < com.google.gerrit.extensions.client.ProjectWatchInfo > getWatchedProjects ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getWatchedProjects.apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get watched projects" , e ) ; } }
protected abstract V impl ( ) throws java.lang.Exception ;
private static void initDisableUnwantedKeys ( ) { for ( java.lang.String s : new java.lang.String [ ] { "C" , "J" , "K" , "O" , "R" , "U" , "Ctrl-C" } ) { net.codemirror.lib.CodeMirror.disableUnwantedKey ( "vim" , s ) ; } }
private void setScopes ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope ... scopes ) { this . scopesSet = new java.util.TreeSet < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > ( java.util.Arrays.asList ( scopes ) ) ; }
public java.lang.String getProjectUrl ( java.lang.String projectName ) { return getBranchUrl ( projectName , Constants.HEAD ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > queryChanges ( java.lang.String queryString ) throws com.google.gerrit.server.query.QueryParseException , com.google.gwtorm.server.OrmException { return queryChanges ( com.google.common.collect.ImmutableList.of ( queryString ) ) . get ( 0 ) ; }
public com.google.gerrit.reviewdb.server.ReviewDb open ( ) { return new com.google.gerrit.testutil.DisabledReviewDb ( ) ; }
public void setCommandPrefix ( final java.lang.String prefix ) { this . commandPrefix = prefix ; }
public static com.google.gerrit.server.project.DashboardResource projectDefault ( com.google.gerrit.server.project.ProjectControl ctl ) { return new com.google.gerrit.server.project.DashboardResource ( ctl , null , null , null , true ) ; }
void onEdit ( ) { if ( canEdit ) { com.google.gwt.user.client.ui.UIObject.setVisible ( form , true ) ; input.setText ( text.getText ( ) ) ; input.setFocus ( true ) ; } }
private void injectRuleBase ( java.lang.String rules ) throws java.io.IOException { injectRuleBase ( rules , false ) ; }
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit ) { com.google.common.base.Preconditions.checkArgument ( ( maxLimit > 0 ) , "maxLimit must be positive: %s" , maxLimit ) ; return new com.google.gerrit.server.index.AutoValue_IndexConfig ( maxLimit ) ; }
public java.lang.String getDisplayName ( ) { return project.getName ( ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.client.Account.Id to ) { if ( ( ! ( emailOnlyAuthors ) ) || ( authors.contains ( to ) ) ) { super . add ( rt , to ) ; } }
java.lang.String buildCommand ( com.google.gerrit.httpd.raw.BuildSystem.Label l ) ;
public static com.google.gerrit.extensions.common.BanCommitInput fromCommits ( java.util.List < java.lang.String > commits ) { com.google.gerrit.extensions.common.BanCommitInput in = new com.google.gerrit.extensions.common.BanCommitInput ( ) ; in.commits = commits ; return in ; }
void setOpen ( boolean open ) { resizePaddingWidget ( ) ; setRangeHighlight ( open ) ; }
public boolean canRead ( ) { return ( getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( Project.State.READ_ONLY ) ) || ( canWrite ( ) ) ; }
private void destroy ( final com.google.gerrit.reviewdb.ActiveSession.Key key ) throws com.google.gwtorm.client.OrmException { schema.activeSessions ( ) . deleteKeys ( java.util.Arrays.asList ( key ) ) ; cache.remove ( key ) ; }
public void onSuccess ( final com.google.gerrit.client.data.PatchScript result ) { if ( ( rpcSequence ) == rpcseq ) { script = result ; onResult ( ) ; } }
private com.google.gitiles.doc.MarkdownToHtml repoIndexReadme ( ) { return readme ( view ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm divide ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( ( t.doubleValue ( ) ) == 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "zero_divisor" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( ( ( this . val ) / ( t.doubleValue ( ) ) ) ) ; }
void updateHead ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String newHeadName ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( project , FilterType.ALL ) ) { updateHead ( uri , newHeadName ) ; } }
protected void onUnload ( ) { if ( ( signedInListener ) != null ) { com.google.gerrit.client.Gerrit.removeSignedInListener ( signedInListener ) ; } super . onUnload ( ) ; }
protected com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType ( ) { return com.google.gerrit.reviewdb.client.Project.SubmitType.MERGE_IF_NECESSARY ; }
public void testEventSentFailed ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( false , "Error" , false ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public int compare ( final com.google.gerrit.server.patch.PatchListEntry a , final com.google.gerrit.server.patch.PatchListEntry b ) { return a.getNewName ( ) . compareTo ( b.getNewName ( ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public void rollback ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public void dontSkipByDefault ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig validatorConfig = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , "" ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; com.google.common.truth.Truth.assertThat ( validatorConfig.isEnabledForRef ( anyUser , projectName , "anyRef" , "anyOp" ) ) . isTrue ( ) ; }
public void confirmInvalidToken_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = "invalidToken" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/config/server/email.confirm" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; }
protected abstract com.google.gerrit.server.mail.send.ProjectWatch.Watchers getWatchers ( com.google.gerrit.server.account.WatchConfig.NotifyType type ) throws com.google.gwtorm.server.OrmException ;
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { remove ( ids ) ; }
private boolean isEditeable ( com.google.gerrit.client.diff.FileInfo info ) { java.lang.String status = info.status ( ) ; return ( status == null ) || ( ! ( ChangeType.DELETED.matches ( status ) ) ) ; }
private com.google.gerrit.client.patches.CommentEditorPanel createEditor ( final com.google.gerrit.reviewdb.client.PatchLineComment newComment ) { int row = rowOf ( getElement ( ) ) ; int column = columnOf ( getElement ( ) ) ; return createCommentEditor ( ( row + 1 ) , column , newComment ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.CommitResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.project.FileResource ( parent.getNameKey ( ) , parent.getCommitId ( ) . getName ( ) , id.get ( ) ) ; }
private java.lang.String readEmail ( ) { java.lang.String email = ui.readString ( "admin@example.com" , "email" ) ; if ( ( email != null ) && ( ! ( org.apache.commons.validator.routines.EmailValidator.getInstance ( ) . isValid ( email ) ) ) ) { ui.message ( "error: invalid email address\n" ) ; return readEmail ( ) ; } return email ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { showAddKeyBlock ( true ) ; }
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body ) throws java.lang.Exception { return writeCommit ( body , com.google.gerrit.server.notedb.ChangeNoteUtil.newIdent ( changeOwner.getAccount ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) , serverIdent , "Anonymous Coward" ) ) ; }
protected com.google.gwtorm.client.ResultSet < T > getBySqlIn ( final java.util.Collection < K > keys ) throws com.google.gwtorm.client.OrmException { return super . get ( keys ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
public static org.eclipse.jgit.transport.ReceiveCommand getCommand ( org.eclipse.jgit.lib.RefUpdate update , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { HEAD ( 2 ) ; com.google.gerrit.server.git.validators.a35a2 Merge ; }
public java.lang.String getAuthorizationUrl ( com.googlesource.gerrit.plugins.oauth.Token requestToken ) { return api.getAuthorizationUrl ( config ) ; }
public boolean canUpload ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.READ , ( ( short ) ( 2 ) ) ) ; }
java.lang.Runnable toggleA ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setVisibleA ( ( ! ( isVisibleA ( ) ) ) ) ; } } ; }
final native void path ( java.lang.String p ) ;
public java.lang.String getUserName ( ) { return state ( ) . getUserName ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNewTag ( ) ; } }
void set ( com.google.gerrit.client.changes.ChangeInfo info ) { this . changeId = info.legacy_id ( ) ; display ( info ) ; reviewerSuggestOracle.setChange ( changeId ) ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo format ( com.google.gerrit.server.group.GroupResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo info = init ( rsrc.getGroup ( ) ) ; initMembersAndSubgroups ( rsrc , info ) ; return info ; }
public com.google.gerrit.server.plugins.PluginScanner getScanner ( ) { return scanner ; }
public java.lang.String toString ( ) { return ( "Label[" + ( label.format ( ) ) ) + ']' ; }
public com.google.gerrit.extensions.common.CommentInfo update ( com.google.gerrit.extensions.api.changes.DraftInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply ( draft , in ) . value ( ) ; } catch ( com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot update draft" , e ) ; } }
void onAutoHideDiffTableHeader ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.autoHideDiffTableHeader ( ( ! ( e.getValue ( ) ) ) ) ; view.setAutoHideDiffHeader ( ( ! ( e.getValue ( ) ) ) ) ; view.resizeCodeMirror ( ) ; }
public void evaluate ( ) throws java.lang.Throwable { try { setUp ( ) ; statement.evaluate ( ) ; } finally { tearDown ( ) ; } }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( account , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > of ( ) , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountExternalId > of ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { changes = com.google.gerrit.client.rpc.Natives.asList ( result ) ; base.setEnabled ( true ) ; base.setFocus ( true ) ; }
public final java.util.Set < java.lang.String > permitted_values ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _permitted_values ( ) ) ; }
public static void updated ( final com.google.gerrit.reviewdb.client.Change c ) { c.setLastUpdatedOn ( new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( c ) ; }
public void run ( ) { cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; chunkManager.adjustPadding ( ) ; cmA.refresh ( ) ; cmB.refresh ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
protected void configure ( ) { its = createMock ( com.googlesource.gerrit.plugins.hooks.its.ItsFacade.class ) ; bind ( com.googlesource.gerrit.plugins.hooks.its.ItsFacade.class ) . toInstance ( its ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( filterTxt.getText ( ) ) ) { filterTxt.setText ( Util.C.defaultFilter ( ) ) ; filterTxt.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public void abandonReviewableChangeNotifyOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
private com.google.gerrit.extensions.api.changes.DraftInput newDraft ( java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.DraftInput d = new com.google.gerrit.extensions.api.changes.DraftInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( d , path , side , line , message ) ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { this . context = new com.google.gerrit.sshd.SshScope.Context ( session.getAttribute ( SshSession.KEY ) , "" ) ; }
public java.util.List < com.gitblit.models.UserModel > getAllUsers ( ) { return null ; }
public com.google.gerrit.server.change.CommentInfo apply ( com.google.gerrit.server.change.DraftResource rsrc ) { return new com.google.gerrit.server.change.CommentInfo ( rsrc.getComment ( ) , null ) ; }
static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > cansee ( com.google.gerrit.server.query.account.AccountQueryBuilder.Arguments args , com.google.gerrit.server.notedb.ChangeNotes changeNotes ) { return new com.google.gerrit.server.query.account.CanSeeChangePredicate ( args.db , args.changeControlFactory , args.userFactory , changeNotes ) ; BRANCH ( 354.0F ) ; }
public net.sf.ehcache.config.CacheConfiguration getCacheConfiguration ( ) { return self ( ) . getCacheConfiguration ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { com.google.gerrit.client.Gerrit.postSignIn ( result ) ; hide ( ) ; if ( ac != null ) { ac.onSuccess ( null ) ; } }
public T decode ( byte [ ] buf ) { return decode ( com.google.protobuf.CodedInputStream.newInstance ( buf ) ) ; }
public void visit ( org.pegdown.ast.ExpImageNode node ) { html.open ( "img" ) . attribute ( "src" , node.url ) . attribute ( "title" , node.title ) . attribute ( "alt" , com.google.gitiles.doc.MarkdownUtil.getInnerText ( node ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
private com.google.gerrit.server.project.ProjectData toProjectData ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey ( doc.getField ( com.google.gerrit.server.index.project.ProjectField.NAME.getName ( ) ) . stringValue ( ) ) ; return projectCache.get ( ) . get ( nameKey ) . toProjectData ( ) ; }
public void run ( ) { reindex ( ) ; }
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publishDraftChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish change" , e ) ; } }
public void evictAfterRename ( com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) ;
static org.eclipse.jgit.lib.ObjectId keyObjectId ( long keyId ) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap ( new byte [ org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH ] ) ; buf.putLong ( keyId ) ; return org.eclipse.jgit.lib.ObjectId.fromRaw ( buf.array ( ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( com.google.gerrit.extensions.common.RevisionInfo info ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.common.ChangeHookApiListener.unwrap ( db.get ( ) ) . patchSets ( ) . get ( PatchSet.Id.fromRef ( info.ref ) ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return "/admin/groups/uuid-" + ( uuid.toString ( ) ) ; }
public void setMembers ( java.util.List < com.google.gerrit.reviewdb.client.AccountGroupMember > m ) { members = m ; }
public void onSuccess ( final com.google.gerrit.reviewdb.AccountGroup.Id result ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.HistoryHandler.toAccountGroup ( result ) ) ; }
public com.google.gerrit.server.project.RefControl create ( final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String ref ) { return new com.google.gerrit.server.project.RefControl ( projectControl , ref ) ; }
public void copySettingsFrom ( final com.google.gerrit.client.reviewdb.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; submitType = update.submitType ; }
public static final native net.codemirror.lib.KeyMap cloneKeyMap ( java.lang.String name ) ;
public void testDefaultIsMIXED ( ) { org.junit.Assert.assertTrue ( ( ( create ( ) ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.PatternGen ) ) ; }
com.google.gerrit.server.change.EmailReviewComments create ( com.google.gerrit.extensions.api.changes.NotifyHandling notify , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.server.IdentifiedUser user , com.google.gerrit.reviewdb.client.ChangeMessage message , java.util.List < com.google.gerrit.reviewdb.client.Comment > comments ) ;
public void doCommentAddedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , java.lang.String comment , java.util.Map < java.lang.String , java.lang.Short > approvals , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
public void setPosition ( int offsetWidth , int offsetHeight ) { popup.setPopupPosition ( 390 , 120 ) ; }
protected java.util.Set < com.google.gerrit.client.config.DownloadInfo.DownloadCommandInfo > getCommands ( com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo schemeInfo ) { return schemeInfo.cloneCommands ( project ) ; }
private java.lang.String link ( final com.google.gerrit.reviewdb.Project item ) { return com.google.gerrit.client.HistoryHandler.toProjectAdmin ( item.getNameKey ( ) , ProjectAdminScreen.INFO_TAB ) ; }
public void onSuccess ( final com.google.gerrit.common.data.AccountProjectWatchInfo result ) { addNew.setEnabled ( true ) ; nameTxt.setText ( "" ) ; watches.insertWatch ( result ) ; }
public final void theme ( com.google.gerrit.extensions.common.Theme i ) { setThemeRaw ( ( i != null ? i.toString ( ) : Theme.DEFAULT.toString ( ) ) ) ; }
void onCloseForm ( ) { com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( error , false ) ; editAssigneeIcon.setVisible ( true ) ; suggestBox.setFocus ( false ) ; }
public void onSignOut ( ) { addReviewer.setVisible ( false ) ; }
public void servletPathMatchesRequestPath ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s" , "/c" , "/s" ) ) ) . isNull ( ) ; }
public com.google.gitiles.Revision getOldRevision ( ) { return revision ; }
com.google.gerrit.gpg.GerritPushCertificateChecker create ( com.google.gerrit.server.IdentifiedUser expectedUser ) ;
public com.google.gitiles.GitilesView.Builder setExtension ( java.lang.String extension ) { switch ( type ) { default : com.google.common.base.Preconditions.checkState ( ( extension == null ) , "cannot set extension on %s view" , type ) ; case ARCHIVE : this . extension = extension ; break ; } return this ; }
public com.googlesource.gerrit.plugins.manager.gson.SmartJson get ( java.lang.String fieldName ) ;
public boolean apply ( com.google.gerrit.reviewdb.client.AccountExternalId externalId ) { return ( externalId.isScheme ( AccountExternalId.SCHEME_EXTERNAL ) ) && ( externalId.getSchemeRest ( ) . startsWith ( OAuthWebFilter.GITHUB_EXT_ID ) ) ; }
public abstract java.lang.String getType ( ) ;
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; }
public boolean canRemoveMember ( final com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
private void uncacheSshKeys ( final com.google.gerrit.reviewdb.Account.Id me ) { uncacheSshKeys ( accountCache.get ( me ) . getAccount ( ) . getSshUserName ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeQuery ( "is:draft" ) ) ; }
public void onFailure ( java.lang.Throwable e ) { enableEdit ( true ) ; super . onFailure ( e ) ; }
void onLogin ( ) { async.append ( log ( ( "LOGIN FROM " + ( session.get ( ) . getRemoteAddressAsString ( ) ) ) ) ) ; audit ( context.get ( ) , "0" , "LOGIN" ) ; }
protected void configure ( ) { bind ( com.google.gerrit.common.EventDispatcher.class ) . to ( com.google.gerrit.common.EventBroker.class ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { enableEdit ( true ) ; set ( result ) ; setEdit ( false ) ; if ( autoClosed ) { setOpen ( false ) ; } }
public void tearDown ( ) { lifecycle.stop ( ) ; requestContext.setContext ( null ) ; db.close ( ) ; com.google.gerrit.testutil.InMemoryDatabase.drop ( schemaFactory ) ; }
public void isDisabledForInvalidRef ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + ( " ref = anInvalidRef\n" + " blockedFileExtension = jar" ) ) ) ; com.google.common.truth.Truth.assertThat ( config.isEnabledForRef ( projectName , "refs/heads/anyref" , "blockedFileExtension" ) ) . isFalse ( ) ; }
public com.google.gerrit.server.group.CreateGroup create ( com.google.gerrit.extensions.restapi.TopLevelResource root , java.lang.String name ) { return createGroup.create ( com.google.gerrit.extensions.restapi.Url.decode ( name ) ) ; }
protected void onMovePointerTo ( java.lang.String projectName ) { if ( ( ! ( projectsPopup.isPoppingUp ( ) ) ) || ( "" . equals ( nameBox.getText ( ) ) ) ) { nameBox.setText ( projectName ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.notedb.ChangeNotesCache.class ) ; cache ( com.google.gerrit.server.notedb.ChangeNotesCache.CACHE_NAME , com.google.gerrit.server.notedb.ChangeNotesCache.Key.class , com.google.gerrit.server.notedb.ChangeNotesState.class ) . maximumWeight ( 1000 ) ; }
private void onDiscoveryFailure ( ) { showError ( OpenIdUtil.C.notSupported ( ) ) ; enable ( true ) ; providerId.selectAll ( ) ; providerId.setFocus ( true ) ; }
public java.util.Map < java.lang.String , java.util.List < com.google.gerrit.extensions.common.CommentInfo > > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.format ( listComments ( rsrc ) , includeAuthorInfo ( ) ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.httpd.RequireSslFilter.class ) ; }
public void update ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj , true ) ; } maybeFlush ( ) ; }
public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.IndexRewriter.class ) ; bind ( com.google.gerrit.server.index.IndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.IndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
protected com.google.gwtorm.client.ResultSet scanPrimaryKey ( byte [ ] fromKey , byte [ ] toKey , int limit ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onGitReferenceUpdated ( com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event ) { for ( com.googlesource.gerrit.plugins.branchnetwork.data.Update update : event.getUpdates ( ) ) { if ( update.getRefName ( ) . startsWith ( "refs/heads" ) ) { networkGraphDataCache.refresh ( event.getProjectName ( ) ) ; return ; } } }
public void setRevision ( final java.lang.String pattern ) { revision = pattern ; }
public void testEvictAccountsOK ( ) throws java.lang.Exception { setupMocks ( Constants.ACCOUNTS , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.ID_RESPONSE , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.ACCOUNTS , createMock ( Account.Id.class ) ) ) . isTrue ( ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo config ( com.google.gerrit.extensions.api.projects.ConfigInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { return putConfig.apply ( checkExists ( ) , in ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( c.getProject ( ) , c.getId ( ) , tip , walk , repoManager ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { form.submit ( ) ; }
public com.google.gerrit.server.project.SubmitRuleEvaluator setRule ( @ com.google.gerrit.common.Nullable java.lang.String rule ) { this . rule = rule ; return this ; }
void deleteSshKey ( com.google.gerrit.client.reviewdb.AccountSshKey.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws java.io.IOException { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) , commit , getPatchSetId ( ) . toRefName ( ) , ReceiveCommand.Type.CREATE ) ) ; }
public int getSessionAge ( ) { return sConfig.maxSessionAge ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , com.google.gerrit.client.diff.SideBySide2.Direction.NEXT ) . run ( ) ; } }
public void testEndsOnNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 ) , iter.advance ( 4 ) ) ; }
void onEditMode ( com.google.gwt.event.dom.client.ClickEvent e ) { fileTableMode = FileTable.Mode.EDIT ; refreshFileTable ( ) ; editMode.setVisible ( false ) ; reviewMode.setVisible ( true ) ; }
public final void init ( ) { if ( ( labels0 ( ) ) != null ) { labels0 ( ) . copyKeysIntoChildren ( "_name" ) ; } }
public com.google.gerrit.reviewdb.client.ChangeMessage getChangeMessage ( ) { if ( ( message ) == null ) { return null ; } }
public void groupCannotBeRenamedWithoutSpecifiedUuid ( ) throws java.lang.Exception { createGroup ( groupUuid , groupName ) ; com.google.gerrit.reviewdb.client.AccountGroup.NameKey anotherName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "admins" ) ; expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.loadForRename ( repo , null , groupName , anotherName ) ; }
private boolean couldDeleteWhenIn ( com.google.gerrit.reviewdb.client.Change.Status status ) { switch ( status ) { case NEW : case ABANDONED : return true ; case MERGED : return false ; } return false ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > externalId ( java.lang.String externalId ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EXTERNAL_ID , externalId ) ; }
public com.google.gerrit.extensions.api.projects.BranchInfo apply ( com.google.gerrit.server.project.BranchResource rsrc , com.google.gerrit.extensions.api.projects.BranchInput input ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( ( ( "Branch \"" + ( rsrc.getBranchInfo ( ) . ref ) ) + "\" already exists" ) ) ; }
public com.google.gerrit.server.group.CreateGroup create ( com.google.gerrit.extensions.restapi.TopLevelResource root , java.lang.String name ) { return createGroup.create ( name ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.config.SitePaths.class ) . toInstance ( site ) ; }
public java.lang.String getSchemeRest ( final java.lang.String scheme ) { return isScheme ( scheme ) ? getExternalId ( ) . substring ( scheme.length ( ) ) : null ; }
void onReplyDone ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReply ( getOriginal ( ) , "Done" , true ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.server.project.RefControl ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit rc ) ;
public void init ( javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { for ( com.google.gerrit.httpd.AllRequestFilter f : filters ) { f.init ( config ) ; } }
public com.googlesrouce.gerrit.plugins.github.git.GHCompare getCompare ( com.googlesrouce.gerrit.plugins.github.git.GHCommit id1 , com.googlesrouce.gerrit.plugins.github.git.GHCommit id2 ) throws java.io.IOException { return ghRepository.getCompare ( id1 , id2 ) ; }
protected boolean removeEldestEntry ( java.util.Map.Entry < java.lang.String , com.google.gerrit.client.reviewdb.Change.Id > eldest ) { return ( size ( ) ) >= 5 ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.reviewdb.AccountDiffPreference > event ) { update ( event.getValue ( ) ) ; }
com.google.gerrit.server.account.PerformCreateGroup create ( ) ;
public com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor create ( com.google.gerrit.server.events.ProjectEvent event ) { return new com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor ( event ) ; }
void setVisibleA ( boolean show ) { visibleA = show ; if ( show ) { removeStyleName ( com.google.gerrit.client.diff.DiffTable.style.hideA ( ) ) ; } else { addStyleName ( com.google.gerrit.client.diff.DiffTable.style.hideA ( ) ) ; } }
private java.lang.String link ( final com.google.gerrit.reviewdb.Project item ) { return com.google.gerrit.client.Dispatcher.toProjectAdmin ( item.getNameKey ( ) , ProjectAdminScreen.INFO_TAB ) ; }
public com.google.gitiles.GitilesView.Builder setExtension ( java.lang.String extension ) { if ( ( type ) != ( com.google.gitiles.GitilesView.Type.ARCHIVE ) ) { com.google.common.base.Preconditions.checkState ( ( extension == null ) , "cannot set extension on %s view" , type ) ; } this . extension = extension ; return this ; }
public void onSuccess ( com.google.gerrit.client.account.ProjectCapabilities result ) { addPanel.setVisible ( result.canPerform ( ProjectCapabilities.CREATE_REF ) ) ; }
private org.eclipse.jgit.lib.PersonIdent newRefLogIdent ( ) { com.google.gerrit.server.CurrentUser u = user.get ( ) ; if ( u.isIdentifiedUser ( ) ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( u ) ) . newRefLogIdent ( ) ; } else { return serverIdent.get ( ) ; } }
public com.google.gerrit.extensions.client.DiffPreferencesInfo apply ( com.google.gerrit.server.config.ConfigResource configResource ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = gitManager.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.PreferencesConfig.readDefaultDiffPreferences ( git ) ; } }
public static boolean isSignedIn ( ) { return ( com.google.gerrit.client.Gerrit.myAccount ) != null ; }
public com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > getSchemaFactory ( ) { return db ; }
private java.lang.String link ( final com.google.gerrit.client.reviewdb.Project item ) { return com.google.gerrit.client.Link.toProjectAdmin ( item.getId ( ) , ProjectAdminScreen.INFO_TAB ) ; }
private com.googlesource.gerrit.plugins.its.rtc.network.RTCHttpParams.ParameterParser getParameterParser ( java.lang.String name ) { return com.google.common.base.Objects.firstNonNull ( com.googlesource.gerrit.plugins.its.rtc.network.RTCHttpParams.TYPES.get ( name ) , com.googlesource.gerrit.plugins.its.rtc.network.RTCHttpParams.TYPE_STRING ) ; }
public void subsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/heads/master" ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( id , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
private static java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > bumpRowVersionNotLastUpdatedOn ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) { return java.util.Collections.singleton ( ctx.getChange ( ) ) ; }
public void unblockMoreSpecificRefInLocal_Fails ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/master" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
java.util.List < org.eclipse.jgit.dircache.DirCacheEditor.PathEdit > getPathEdits ( org.eclipse.jgit.lib.Repository repository ) throws java.io.IOException ;
public void onClick ( com.google.gwt.event.dom.client.ClickEvent arg0 ) { if ( cb.getValue ( ) ) { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_SPACE_CHANGE ) ; } else { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; } refresh ( false ) ; }
public void listNonExistingGroupIncludes_NotFound ( ) throws java.lang.Exception { java.lang.String name = name ( "non-existing" ) ; com.google.common.truth.Truth.assertThat ( adminSession.get ( ( ( "/groups/" + name ) + "/groups/" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public void remove ( java.lang.String key ) throws java.io.IOException { java.nio.file.Path replicationStatusPath = getReplicationStatusPath ( key ) ; if ( java.nio.file.Files.exists ( replicationStatusPath ) ) { java.nio.file.Files.delete ( replicationStatusPath ) ; } }
private java.lang.String urlDelete ( com.google.gerrit.reviewdb.client.Change c ) { return ( ( ( ( "/changes/" + ( c.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/files/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
void changeProjectAccess ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.lang.String baseRevision , java.lang.String message , java.util.List < com.google.gerrit.common.data.AccessSection > sections , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) ;
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
private void autoReindexIfStale ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( autoReindexIfStale ) { @ java.lang.SuppressWarnings ( value = "unused" ) java.util.concurrent.Future < ? > possiblyIgnoredError = reindexIfStale ( id ) ; } }
public abstract java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getOwnerGroupUUID ( ) ;
public java.lang.String getHttpUrl ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b.append ( "http://" ) ; b.append ( username ) ; b.append ( ":" ) ; b.append ( httpPassword ) ; b.append ( "@localhost:8080" ) ; return b.toString ( ) ; }
public com.googlesource.gerrit.plugins.webhooks.HttpSession get ( ) { return session.get ( ) ; }
private boolean include ( org.pegdown.ast.HeaderNode h ) { if ( ( h.getLevel ( ) ) == 1 ) { return ( countH1 ) > 1 ; } return ( h.getLevel ( ) ) <= ( maxLevel ) ; }
public void noNotificationForDraftChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "draft change" , "a" , "a1" ) . to ( "refs/for/master%draft" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public java.lang.String getExternalId ( ) { return externalId ; }
public void getCacheWithGerritPrefix ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( "/config/server/caches/gerrit-accounts" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; }
private void enableForm ( final boolean on ) { ownerTxtBox.setEnabled ( on ) ; descTxt.setEnabled ( on ) ; }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { com.google.gerrit.common.changes.Side side = getSideFromCm ( cm ) ; com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.create ( path , side , ( line + 1 ) , null , null ) ; return addDraftBox ( info , false ) ; }
public boolean equals ( java.lang.Object o ) { return ( o instanceof com.google.gerrit.server.git.gpg.Fingerprint ) && ( equalsBytes ( ( ( com.google.gerrit.server.git.gpg.Fingerprint ) ( o ) ) . fp ) ) ; }
static com.google.gerrit.client.account.AccountApi.HttpPasswordInput create ( ) { return ( ( com.google.gerrit.client.account.AccountApi.HttpPasswordInput ) ( createObject ( ) ) ) ; }
private void adjustCodeMirrorHeight ( ) { int rest = ( ( com.google.gerrit.client.Gerrit.getHeaderFooterHeight ( ) ) + ( header.getOffsetHeight ( ) ) ) + 5 ; cm.setHeight ( ( ( com.google.gwt.user.client.Window.getClientHeight ( ) ) - rest ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
public void destroy ( ) { com.google.gerrit.git.WorkQueue.terminate ( ) ; super . destroy ( ) ; }
void replyTo ( com.google.gerrit.client.changes.ChangeInfo.MessageInfo info ) { replyAction.onReply ( info ) ; }
public java.lang.String getContentType ( ) { java.lang.String enc = getCharacterEncoding ( ) ; if ( enc != null ) { return ( ( contentType ) + "; charset=" ) + enc ; } return contentType ; }
public java.lang.String getLoggableName ( ) { return getUserName ( ) . orElseGet ( ( ) -> "a/" + ( getAccountId ( ) . get ( ) ) ) ; }
public int compare ( com.google.gerrit.server.schema.Schema_65.AccountGroupAgreement a1 , com.google.gerrit.server.schema.Schema_65.AccountGroupAgreement a2 ) { return com.google.common.primitives.Longs.compare ( a1.getTime ( ) , a2.getTime ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; } else { com.google.gerrit.client.Gerrit.display ( PageLinks.ALL_OPEN ) ; } }
void index ( com.google.gerrit.reviewdb.client.Account.Id id , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation ) throws java.io.IOException { indexer.index ( id ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug ( "Account {} successfully indexed" , id ) ; }
public java.sql.Timestamp apply ( com.google.gerrit.reviewdb.client.ChangeMessage input ) { return input.getWrittenOn ( ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHHook createHook ( java.lang.String name , java.util.Map < java.lang.String , java.lang.String > config , java.util.Collection < com.googlesrouce.gerrit.plugins.github.git.GHEvent > events , boolean active ) throws java.io.IOException { return ghRepository.createHook ( name , config , events , active ) ; }
public static com.google.gerrit.server.git.ProjectConfig read ( com.google.gerrit.server.git.MetaDataUpdate update , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.ProjectConfig r = new com.google.gerrit.server.git.ProjectConfig ( update.getProjectName ( ) ) ; r.load ( update , id ) ; return r ; }
public static java.lang.String refsUsers ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.REFS_USERS ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( accountId.get ( ) ) ) ; return r.toString ( ) ; }
public boolean canViewConnections ( ) { return ( canPerform ( GlobalCapability.VIEW_CONNECTIONS ) ) || ( user.isAdministrator ( ) ) ; }
private void init ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.transport.ReceivePack rp ) { for ( com.google.gerrit.server.config.ReceivePackInitializer initializer : receivePackInitializers ) { initializer.init ( project , rp ) ; } }
public void listTagsOfNonVisibleProject ( ) throws java.lang.Exception { blockRead ( "refs/*" ) ; userSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) . assertNotFound ( ) ; }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentlink" , getCommentLinkName ( ) , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
private void assertNoProblems ( com.google.gerrit.server.project.ChangeControl ctl , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix ) { com.google.common.truth.Truth.assertThat ( checker.check ( ctl , fix ) . problems ( ) ) . isEmpty ( ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.Event event ) { fireEvent ( branchName , event ) ; }
public static PatchScreen.TopView getPatchScreenTopView ( ) { if ( ( com.google.gerrit.client.Gerrit.patchScreen ) == null ) { return null ; } return com.google.gerrit.client.Gerrit.patchScreen.getTopView ( ) ; }
private void commit ( com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes ) throws java.io.IOException { try ( com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate ( ) ) { groupNameNotes.commit ( metaDataUpdate ) ; } }
public void putApprovalFor ( com.google.gerrit.reviewdb.client.Account.Id reviewer , java.lang.String label , short value ) { approvals.put ( label , reviewer , com.google.common.base.Optional.of ( value ) ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( box.getText ( ) ) ) { box.setText ( Util.C.defaultProjectName ( ) ) ; box.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) ; }
public void setContext ( final int ctx ) { assert ( 0 <= ctx ) || ( ctx == ( com.google.gerrit.reviewdb.AccountGeneralPreferences.WHOLE_FILE_CONTEXT ) ) ; context = ctx ; }
private com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSet ) == null ) { patchSet = cd.currentPatchSet ( ) ; } return patchSet ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { }
public static java.util.List < com.google.gerrit.common.data.SubmitRecord > defaultRuleError ( ) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError ( "Error evaluating project rules, check server log" ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void rebuildAndCheckAllChanges ( ) throws java.lang.Exception { rebuildAndCheckChanges ( com.google.common.collect.Iterables.transform ( unwrapDb ( ) . changes ( ) . all ( ) , com.google.gerrit.reviewdb.server.ReviewDbUtil.changeIdFunction ( ) ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.SshKeyInfo > listSshKeys ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getSshKeys.apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list SSH keys" , e ) ; } }
public void removeAll ( ) { cache.removeAll ( ) ; }
public void setSubject ( final java.lang.String s ) { subject = s ; }
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withQuery ( java.lang.String query ) { this . query = query ; return this ; }
SetParent.Input newParentInput ( java.lang.String project ) { com.google.gerrit.server.project.SetParent.Input in = new com.google.gerrit.server.project.SetParent.Input ( ) ; in.parent = project ; return in ; }
void setId ( com.google.gerrit.reviewdb.client.Account.Id i ) { accountId = i.get ( ) ; id = com.google.gerrit.server.util.Url.encode ( java.lang.Integer.toString ( accountId ) ) ; }
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( final com.google.gerrit.reviewdb.client.Account account ) { com.google.gerrit.server.events.AccountAttribute who = new com.google.gerrit.server.events.AccountAttribute ( ) ; who.name = account.getFullName ( ) ; who.email = account.getPreferredEmail ( ) ; return who ; }
static org.eclipse.jgit.lib.Config readDefaultConfig ( org.eclipse.jgit.lib.Repository allUsersRepo ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.PreferencesConfig.VersionedDefaultPreferences defaultPrefs = new com.google.gerrit.server.account.PreferencesConfig.VersionedDefaultPreferences ( ) ; defaultPrefs.load ( allUsersRepo ) ; return defaultPrefs.getConfig ( ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { addComments ( revisionNumber , result ) ; update ( revisionNumber ) ; }
public void onRemove ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.Iterable < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( account , new com.google.gerrit.server.account.Index.Input ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index account" , e ) ; } }
protected void format ( ) { formatSalutation ( ) ; formatChangeDetail ( ) ; }
private void setupDefaultOperations ( ) { new org.eclipse.example.calc.internal.operations.Equals ( ) ; new org.eclipse.example.calc.internal.operations.Minus ( ) ; new org.eclipse.example.calc.internal.operations.Plus ( ) ; new org.eclipse.example.calc.internal.operations.Square ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { enableUI ( true ) ; }
public final java.lang.Class < ? extends org.kohsuke.args4j.spi.OptionHandler > handler ( ) { return org.kohsuke.args4j.spi.OptionHandler.class ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( revision , null ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft ps" , e ) ; } }
public static java.lang.String refsDraftComments ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsDraftCommentsPrefix ( accountId ) ; r.append ( changeId.get ( ) ) ; return r.toString ( ) ; }
private boolean checkConnection ( ) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.info ( "Checking database connection..." ) ; try { eventsDb.queryOne ( ) ; return true ; } catch ( java.sql.SQLException e ) { return false ; } }
public void assertStatus ( int status ) throws java.lang.Exception { com.google.common.truth.Truth.assert_ ( ) . withMessage ( java.lang.String.format ( "Expected status code %d" , status ) ) . that ( getStatusCode ( ) ) . isEqualTo ( status ) ; }
public void testNeedsUrlEncoding ( ) throws java.net.URISyntaxException { assertTrue ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "http://host/path" ) ) ) ; assertTrue ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "https://host/path" ) ) ) ; assertTrue ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "amazon-s3://config/bucket/path" ) ) ) ; assertFalse ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "host:path" ) ) ) ; assertFalse ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "user@host:path" ) ) ) ; assertFalse ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "git://host/path" ) ) ) ; assertFalse ( com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding ( new org.eclipse.jgit.transport.URIish ( "ssh://host/path" ) ) ) ; }
private void initSignatures ( ) { setSignatureFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Signature > > asList ( new org.apache.sshd.common.signature.SignatureDSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureRSA.Factory ( ) ) ) ; }
com.google.gerrit.server.index.project.ProjectIndexer getProjectIndexer ( com.google.gerrit.server.index.project.ProjectIndexerImpl.Factory factory , com.google.gerrit.server.index.project.ProjectIndexCollection indexes ) { return factory.create ( indexes ) ; }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.server.project.ProjectState > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.project.ProjectState > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticProjectIndex.QuerySource ( p , opts ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GitJobStatus getStatus ( ) { return status ; }
public boolean failOnLoad ( ) { return false ; }
public com.google.common.base.Optional < java.io.InputStream > getResourceInputStream ( java.lang.String resourcePath ) throws java.io.IOException { return com.google.common.base.Optional.absent ( ) ; }
private static com.google.gerrit.client.rpc.RestApi group ( java.lang.String group ) { return new com.google.gerrit.client.rpc.RestApi ( "groups" ) . id ( group ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.project.ProjectState > name ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) { return new com.google.gerrit.server.query.project.ProjectPredicates.ProjectPredicate ( com.google.gerrit.server.index.project.ProjectField.NAME , nameKey.get ( ) ) ; }
public final java.lang.String id ( ) { java.lang.String id = java.lang.String.valueOf ( _number ( ) ) ; if ( edit ( ) ) { id += "+" ; } return id ; }
public void setSortKey ( final java.lang.String newSortKey ) { sortKey = newSortKey ; }
boolean canRenderEntireFile ( com.google.gerrit.client.account.DiffPreferences prefs ) { return ( ( fileSize.compareTo ( com.google.gerrit.client.diff.DiffScreen.FileSize.HUGE ) ) < 0 ) || ( ( ( prefs.context ( ) ) != ( com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT ) ) && ( ( prefs.context ( ) ) < 100 ) ) ; }
public boolean matches ( com.google.gerrit.reviewdb.client.AccountExternalId id ) { return matches ( id.getExternalId ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSetApproval > byChange ( com.google.gerrit.reviewdb.client.Change.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RENAME_ENTRY , edit , file , newFile , null ) ; }
public boolean allowsEdit ( final com.google.gerrit.reviewdb.client.Account.FieldName field ) { return ! ( readOnlyAccountFields.contains ( field ) ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { com.google.gerrit.server.edit.ChangeEditUtil.deleteRef ( ctx.getRepository ( ) , edit ) ; }
private static java.lang.String providersListToString ( java.lang.Iterable < com.google.gerrit.server.plugins.ServerPluginProvider > providersHandlers ) { return java.util.stream.StreamSupport.stream ( providersHandlers.spliterator ( ) , false ) . map ( ServerPluginProvider :: getProviderPluginName ) . collect ( java.util.stream.Collectors.joining ( ", " ) ) ; }
public boolean isOAuthLogin ( javax.servlet.http.HttpServletRequest request ) { return request.getRequestURI ( ) . endsWith ( OAuthConfig.OAUTH_LOGIN ) ; }
public final native com.google.gwt.core.client.JavaScriptObject has_use_content_merge ( ) ;
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_PREFIX_TERMS ) ; }
public void noNotificationForPrivateChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES , NotifyType.ALL_COMMENTS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; sender.clear ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "private change" , "a" , "a1" ) . to ( "refs/for/master%private" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { return source.read ( ) ; }
void evictAll ( ) throws java.io.IOException ;
public boolean containsCommentPublished ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { for ( com.google.gerrit.reviewdb.client.PatchLineComment l : getComments ( ) . values ( ) ) { if ( c.getKey ( ) . equals ( l.getKey ( ) ) ) { return true ; } } return false ; }
public void doClaSignupHook ( com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.common.data.ContributorAgreement cla ) ;
boolean canRebase ( ) { return ( canPerform ( Permission.REBASE ) ) && ( canWrite ( ) ) ; }
public void testCreatePermissionOnlyProject ( ) throws java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.permissions_only = true ; session.put ( ( "/projects/" + newProjectName ) , in ) ; assertHead ( newProjectName , RefNames.REFS_CONFIG ) ; }
public java.lang.String getName ( ) { return escape ( name ) ; }
private java.lang.String readFile ( java.io.File f ) throws java.io.IOException { return f.exists ( ) ? com.google.common.io.Files.toString ( f , java.nio.charset.StandardCharsets.UTF_8 ) : null ; }
com.google.gerrit.reviewdb.client.AccountGroup get ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) ;
void suggestReviewer ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String query , int limit , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ReviewerInfo > > callback ) ;
com.google.gerrit.reviewdb.client.AccountGroup getAccountGroup ( ) ;
public java.util.List < com.google.gerrit.server.query.change.ChangeData > toList ( ) { return java.util.Collections.unmodifiableList ( com.google.common.collect.Lists.newArrayList ( iterator ( ) ) ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "reviewers" ) . to ( com.googlesource.gerrit.plugins.reviewers.GetReviewers.class ) ; put ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "reviewers" ) . to ( com.googlesource.gerrit.plugins.reviewers.PutReviewers.class ) ; }
public com.google.gerrit.httpd.raw.Label gwtZipLabel ( java.lang.String agent ) { return new com.google.gerrit.httpd.raw.Label ( "gerrit-gwtui" , ( ( "ui_" + agent ) + ".zip" ) ) ; }
org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException ;
public void run ( ) { runImp ( ) ; }
private void inject ( ) { dbInjector = createDbInjector ( ) ; sysInjector = createSysInjector ( ) ; sysInjector.injectMembers ( this ) ; }
public void setSampledStatisticsEnabled ( boolean enableStatistics ) { self.setSampledStatisticsEnabled ( enableStatistics ) ; }
public void testNoAdvance ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 ) , iter.advance ( 0 ) ) ; }
com.google.gerrit.extensions.webui.UiCommand.Place getPlace ( ) ;
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.fetch ( git , ( ( com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG ) + ":refs/heads/config" ) ) ; com.google.gerrit.acceptance.GitUtil.checkout ( git , "refs/heads/config" ) ; }
java.lang.String idFromHeader ( org.pegdown.ast.HeaderNode header ) { java.lang.String t = com.google.gitiles.doc.MarkdownHelper.getInnerText ( header ) ; return t != null ? com.google.gitiles.doc.TocFormatter.idFromTitle ( t ) : null ; }
public com.google.gerrit.server.project.ProjectControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return state.controlFor ( who ) ; }
public void insert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { insertOne ( obj ) ; } }
public void onCallStart ( ) { if ( ( ++ ( activeCalls ) ) == 1 ) { if ( ( com.google.gerrit.client.RpcStatus.hideDepth ) == 0 ) { loading.setVisible ( true ) ; } } }
void onLogout ( ) { async.append ( log ( "LOGOUT" ) ) ; audit ( "0" , "LOGOUT" , new java.lang.String [ ] { } ) ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameterTrue ( "list" ) . get ( cb ) ; }
protected void configureServlets ( ) { filter ( "/" ) . through ( com.google.gerrit.httpd.auth.container.HttpAuthFilter.class ) ; serve ( "/login" , "/login/*" ) . with ( com.google.gerrit.httpd.auth.container.HttpLoginServlet.class ) ; }
private com.google.gerrit.reviewdb.client.Project fetchGerritProject ( com.google.gerrit.server.project.ProjectCache projectCache , java.lang.String fetchOrganisation , java.lang.String fetchRepoName ) { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey = Project.NameKey.parse ( ( ( fetchOrganisation + "/" ) + fetchRepoName ) ) ; com.google.gerrit.server.project.ProjectState projectState = projectCache.get ( projectNameKey ) ; return projectState.getProject ( ) ; }
static java.lang.Boolean isForwardedEvent ( ) { return com.ericsson.gerrit.plugins.syncindex.Context.FORWARDED_EVENT.get ( ) ; }
private static java.lang.StringBuffer toGerrit ( final javax.servlet.http.HttpServletRequest req ) { final java.lang.StringBuffer url = new java.lang.StringBuffer ( ) ; url.append ( req.getContextPath ( ) ) ; url.append ( "/Gerrit" ) ; return url ; }
public void move ( java.lang.String destination ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.MoveInput in = new com.google.gerrit.extensions.api.changes.MoveInput ( ) ; in.destination_branch = destination ; move ( in ) ; }
public void testKeyIdToString ( ) throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) . getPublicKey ( ) ; org.junit.Assert.assertEquals ( "46328A8C" , com.google.gerrit.gpg.PublicKeyStore.keyIdToString ( key.getKeyID ( ) ) ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( ! ( ReviewAssistant.realUser ) ) { return pluginUser ; } else { return identifiedUserFactory.create ( change.getOwner ( ) ) ; } }
public void run ( ) { java.lang.String token = host.getToken ( ) ; if ( cm.hasActiveLine ( ) ) { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getActiveLine ( ) ; int line = ( cm.getLineNumber ( handle ) ) + 1 ; token += ( "@" + ( ( cm.side ( ) ) == ( DisplaySide.A ) ? "a" : "" ) ) + line ; } com.google.gerrit.client.Gerrit.doSignIn ( token ) ; }
public void visit ( org.pegdown.ast.TableHeaderNode node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; table.inHeader = true ; wrapChildren ( "thead" , node ) ; table.inHeader = false ; }
public boolean isVisibleToAll ( ) { return false ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.notedb.ChangeNotes notes ) ;
public com.google.gerrit.server.query.change.ChangeData.ChangedLines getChangedLines ( ) { return new com.google.gerrit.server.query.change.ChangeData.ChangedLines ( insertions , deletions ) ; }
public void onFailure ( java.lang.Throwable err ) { getTab ( ) . setTitle ( Resources.M.conflictingChanges ( "na" ) ) ; getTab ( ) . setError ( err.getMessage ( ) ) ; }
public static void addGpgKey ( java.lang.String account , java.lang.String armored , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.GpgKeyInfo > > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "gpgkeys" ) . post ( com.google.gerrit.client.account.AccountApi.GpgKeysInput.add ( armored ) , cb ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { loadInfoTable ( result ) ; loadActionPanel ( result ) ; }
public java.lang.String getFileRef ( ) { return fileRef ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.RevisionResource > list ( ) throws com.google.gerrit.extensions.restapi.AuthException { throw new java.lang.UnsupportedOperationException ( ) ; }
java.lang.String get ( final java.lang.String attName ) { return atts.get ( attName ) ; }
public void setSubmitRecords ( java.util.List < com.google.gerrit.common.data.SubmitRecord > records ) { submitRecords = records ; }
public void onSuccess ( java.lang.Void result ) { net.codemirror.theme.ThemeLoader.loadTheme ( prefs.theme ( ) , themeCallback ) ; group2.done ( ) ; group3.done ( ) ; }
public void setIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
java.lang.String getRemoteUser ( javax.servlet.http.HttpServletRequest req ) { return com.google.gerrit.httpd.RemoteUserUtil.getRemoteUser ( req , loginHeader ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project1.get ( ) ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project2.get ( ) ) ; sshSession.close ( ) ; session = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; }
protected void configure ( ) { HEAD ( 34 ) ; }
public void destroy ( ) { }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s/+/%s" , baseUrl , projectName , branchName ) , Target.BLANK ) ; }
public org.apache.sshd.server.CommandFactory get ( ) { return new com.google.gerrit.server.ssh.GuiceCommandFactory ( createMap ( ) ) ; }
public static java.lang.String toHTML ( final com.google.gerrit.client.reviewdb.PatchLineComment comment ) { return com.google.gerrit.client.ui.DomUtil.wikify ( comment.getMessage ( ) . trim ( ) ) ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig.sshd ( config , rs ) ; }
private static long getLastModified ( com.googlesource.gerrit.plugins.replication.ReplicationFileBasedConfig cfg ) throws java.io.IOException { return java.nio.file.Files.getLastModifiedTime ( cfg.getCfgPath ( ) ) . toMillis ( ) ; }
void addRef ( final java.lang.String ref ) { delta.add ( ref ) ; }
private void fail ( com.google.gerrit.reviewdb.client.Change change , java.lang.Throwable t ) { com.google.gerrit.pgm.Reindex.log.error ( ( "Failed to index change " + ( change.getId ( ) ) ) , t ) ; ok.set ( false ) ; failed.update ( 1 ) ; }
private long extractCreated ( final com.google.gerrit.sshd.SshScope.Context ctx ) { return ctx != null ? ctx.created : java.lang.System.currentTimeMillis ( ) ; }
public void run ( ) { if ( ! ( session.isOpen ( ) ) ) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.info ( "#start: try to reconnect" ) ; session.connect ( ) ; } }
public void listEmptyGroupMembers ( ) throws java.lang.Exception { group ( "empty" , "Administrators" ) ; com.google.common.truth.Truth.assertThat ( GET ( "/groups/empty/members/" ) ) . isEmpty ( ) ; }
protected void configure ( ) { persist ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.CACHE_NAME , Project.NameKey.class , java.util.concurrent.atomic.AtomicLong.class ) . loader ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class ) . expireAfterWrite ( 1 , java.util.concurrent.TimeUnit.DAYS ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) throws com.google.gerrit.common.errors.NoSuchGroupException { final com.google.gerrit.common.data.GroupDescription.Basic group = groupBackend.get ( groupId ) ; if ( group == null ) { throw new com.google.gerrit.common.errors.NoSuchGroupException ( groupId ) ; } return controlFor ( group ) ; }
public static void setCurrentMillisSupplier ( java.util.function.LongSupplier customCurrentMillisSupplier ) { com.google.gerrit.common.TimeUtil.currentMillisSupplier = customCurrentMillisSupplier ; }
private org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > newRepo ( java.lang.String name ) throws java.lang.Exception { return new org.eclipse.jgit.junit.TestRepository ( repoManager.createRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; }
private com.google.gerrit.extensions.auth.oauth.OAuthUserInfo getAsOAuthUserInfo ( com.googlesource.gerrit.plugins.cfoauth.AccessToken accessToken ) { return new com.google.gerrit.extensions.auth.oauth.OAuthUserInfo ( accessToken.getExternalId ( ) , accessToken.getUserName ( ) , accessToken.getEmailAddress ( ) , null , null ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { header.toggleReviewed ( ) . run ( ) ; }
void onExpandAll ( com.google.gwt.event.dom.client.ClickEvent e ) { expandAll ( ) ; manager.remove ( this , otherBar ) ; cm.focus ( ) ; }
private void initUI ( ) { initOwner ( ) ; initDescription ( ) ; initRights ( ) ; }
public com.google.gerrit.extensions.api.changes.ChangeApi revert ( ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.d47190 Revert ; }
public com.google.gerrit.server.update.BatchUpdate addRepoOnlyOp ( com.google.gerrit.server.update.BatchUpdate.RepoOnlyOp op ) { com.google.common.base.Preconditions.checkArgument ( ( ! ( op instanceof com.google.gerrit.server.update.BatchUpdate.Op ) ) , "use addOp()" ) ; repoOnlyOps.add ( op ) ; return this ; }
public com.google.gerrit.extensions.common.EditInfo applyFix ( java.lang.String fixId ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void testNonIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a" ) ; org.junit.Assert.assertSame ( in , rewrite ( in ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gwtorm.server.OrmException { if ( ( resource.toAccountGroup ( ) ) == null ) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException ( ) ; } return apply ( resource.getGroupUUID ( ) ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.Iterable < java.lang.String > projects ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , null , projects ) ; }
private void init ( org.eclipse.jgit.transport.ReceivePack rp ) { for ( com.google.gerrit.server.config.ReceivePackInitializer initializer : receivePackInitializers ) { initializer.init ( projectControl.getProject ( ) . getNameKey ( ) , rp ) ; } }
private java.lang.String [ ] toTrusted ( final org.eclipse.jgit.lib.Config cfg ) { final java.lang.String [ ] r = cfg.getStringList ( "auth" , null , "trustedopenid" ) ; if ( ( r.length ) == 0 ) { return new java.lang.String [ ] { "http://" , "https://" } ; } return r ; }
public void run ( ) { cm.getInputField ( ) . blur ( ) ; removeActiveLineHighlight ( cm ) ; removeActiveLineHighlight ( otherCm ( cm ) ) ; }
public Response.Action getDownloadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getDownloadAction ( id ) ; action.header = java.util.Collections.singletonMap ( org.eclipse.jgit.util.HttpSupport.HDR_AUTHORIZATION , authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.DOWNLOAD , id ) ) ; return action ; }
private com.google.gitiles.doc.MarkdownToHtml readme ( com.google.gitiles.GitilesView v , java.lang.String path ) { return new com.google.gitiles.doc.MarkdownToHtml ( v , config , path ) ; }
public void logout ( ) { if ( ( val ) != null ) { manager.destroy ( key ) ; key = null ; val = null ; saveCookie ( "" , 0 ) ; } }
com.google.gerrit.server.patch.PatchListKey toPatchListKey ( ) { return new com.google.gerrit.server.patch.PatchListKey ( oldId , parentNum , newId , whitespace , PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
protected com.google.gerrit.server.index.Schema < T > schema ( ) { com.google.gerrit.server.index.Index < ? , T > index = ( ( indexes ) != null ) ? indexes.getSearchIndex ( ) : null ; return index != null ? index.getSchema ( ) : null ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
com.google.gerrit.pgm.init.Section get ( java.lang.String name ) ;
javax.servlet.http.HttpServlet getDocServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { HEAD ( 685 ) ; com.google.gerrit.httpd.raw.b5b Merge ; }
public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.ActionInfo > actions ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return revisionActions.apply ( revision ) . value ( ) ; }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges.newUpdate ( injector , c , user ) ; update.setAllowWriteToNewRef ( true ) ; return update ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.data.ChangeInfo > result ) { starred.display ( result ) ; table.finishDisplay ( true ) ; }
private java.lang.Object cache ( java.lang.Object res ) { return com.google.gerrit.extensions.restapi.Response.ok ( res ) . caching ( com.google.gerrit.extensions.restapi.CacheControl.PRIVATE ( 0 , java.util.concurrent.TimeUnit.SECONDS ) . setMustRevalidate ( ) ) ; }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) ;
void onLogout ( ) { async.append ( log ( "LOGOUT" ) ) ; }
private void toggleCurrentRow ( ) { final com.google.gwt.user.client.ui.CheckBox cb = ( ( com.google.gwt.user.client.ui.CheckBox ) ( table.getWidget ( getCurrentRow ( ) , 1 ) ) ) ; cb.setChecked ( ( ! ( cb.isChecked ( ) ) ) ) ; }
private com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig getConfig ( java.lang.String defaultConfig ) throws org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , defaultConfig ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; return config ; }
public boolean accept ( java.io.File pathname ) { return ( pathname.getName ( ) . endsWith ( ".jar" ) ) && ( pathname.isFile ( ) ) ; }
private void appendLineText ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final com.google.gerrit.client.patches.PatchLine.Type type , final com.google.gerrit.prettify.common.SparseHtmlFile src , final int i , final boolean fullBlock ) { appendLineText ( m , type , src.getSafeHtmlLine ( i ) , src.hasTrailingEdit ( i ) , fullBlock ) ; }
public void checkChanges ( com.google.gerrit.reviewdb.client.Change ... changeIds ) throws java.lang.Exception { checkActual ( readExpected ( java.util.Arrays.stream ( changeIds ) ) , new java.util.ArrayList < > ( ) ) ; }
public com.google.gitiles.GitilesView.Builder setExtension ( java.lang.String extension ) { switch ( type ) { default : com.google.common.base.Preconditions.checkState ( ( extension == null ) , "cannot set path on %s view" , type ) ; case ARCHIVE : this . extension = extension ; break ; } return this ; }
public static void markPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public void evictAllNoReindex ( ) { byId.invalidateAll ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSet get ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public final com.google.gerrit.server.index.IndexDefinition.IndexFactory < K , V , I > getIndexFactory ( ) { return indexFactory ; }
private synchronized void runHook ( java.nio.file.Path hook , java.util.List < java.lang.String > args ) { if ( java.nio.file.Files.exists ( hook ) ) { hookQueue.execute ( new com.google.gerrit.common.ChangeHookRunner.AsyncHookTask ( null , hook , args ) ) ; } }
public static void putContent ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String filename , java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > result ) { com.google.gerrit.client.changes.ChangeFileApi.contentEdit ( id.getParentKey ( ) , filename ) . put ( content , result ) ; }
public com.google.gerrit.reviewdb.client.SystemConfig getSystemConfig ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.server.ReviewDb c = open ( ) ; try { return c.systemConfig ( ) . get ( new com.google.gerrit.reviewdb.client.SystemConfig.Key ( ) ) ; } finally { c.close ( ) ; } }
public void setCertificate ( java.lang.String certificate ) { this . certificate = certificate ; resetSession ( ) ; }
public int getTabIndex ( ) { return suggestBox.getTabIndex ( ) ; }
private void group ( java.lang.String name , java.lang.String ownerGroup ) throws java.io.IOException { com.google.gerrit.acceptance.rest.group.GroupInput in = new com.google.gerrit.acceptance.rest.group.GroupInput ( ) ; in.owner_id = ownerGroup ; session.put ( ( "/groups/" + name ) , in ) . consume ( ) ; }
public void run ( ) { try { sem.acquire ( queueLen ) ; } catch ( java.lang.InterruptedException e ) { e.printStackTrace ( ) ; } pm.end ( ) ; }
private boolean canRead ( com.google.gerrit.server.project.ChangeControl ctl ) throws com.google.gerrit.server.permissions.PermissionBackendException { return permissionBackend.user ( user ) . change ( ctl.getNotes ( ) ) . database ( db ) . test ( ChangePermission.READ ) ; }
private java.util.Optional < com.google.gerrit.server.edit.ChangeEdit > lookupChangeEdit ( com.google.gerrit.server.project.ChangeControl changeControl ) throws com.google.gerrit.extensions.restapi.AuthException , java.io.IOException { return changeEditUtil.byChange ( changeControl ) ; }
public com.google.gerrit.extensions.common.ChangeInfo get ( java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changeJson.create ( s ) . format ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve change" , e ) ; } }
public void noNotificationForPrivateChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; sender.clear ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "private change" , "a" , "a1" ) . to ( "refs/for/master%private" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public void generateResultSetGet ( final com.google.gwtorm.jdbc.gen.CodeGenSupport cgs ) { cgs.fieldSetBegin ( ) ; cgs.pushSqlHandle ( ) ; cgs.pushColumnIndex ( ) ; cgs.invokeResultSetGet ( getJavaSqlTypeAlias ( ) ) ; cgs.fieldSetEnd ( ) ; }
protected org.apache.sshd.common.session.AbstractSession doCreateSession ( org.apache.sshd.common.io.IoSession ioSession ) throws java.lang.Exception { return new com.google.gerrit.sshd.GerritServerSession ( server , ioSession ) ; }
public java.lang.String apply ( com.google.gerrit.server.change.ChangeResource rsrc ) { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig ( rsrc.getControl ( ) . getProjectControl ( ) . getProjectState ( ) , pluginName ) ; return cfg.getString ( "changeInfo" ) ; }
org.eclipse.jgit.lib.Repository getAllUsersRepo ( ) throws java.io.IOException { initAllUsersRepo ( ) ; return allUsersRepo.repo ; }
org.eclipse.jgit.revwalk.RevWalk getChangeRevWalk ( ) throws java.io.IOException { initChangeRepo ( ) ; return changeRepo.rw ; }
void patchSetDetail ( com.google.gerrit.reviewdb.PatchSet.Id keyA , com.google.gerrit.reviewdb.PatchSet.Id keyB , com.google.gerrit.reviewdb.AccountDiffPreference diffPrefs , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) ;
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount admin = accounts.admin ( ) ; adminSession = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; userSession = new com.google.gerrit.acceptance.RestSession ( server , user ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; branch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( project , "test" ) ; com.google.gerrit.acceptance.git.GitUtil.initSsh ( admin ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; try { com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project.get ( ) , null , true ) ; } finally { sshSession.close ( ) ; } adminSession.put ( ( ( ( "/projects/" + ( project.get ( ) ) ) + "/branches/" ) + ( branch.getShortName ( ) ) ) ) . consume ( ) ; }
public static java.lang.String op ( java.lang.String name , java.lang.String value ) { if ( ( value.indexOf ( ' ' ) ) >= 0 ) { return ( ( name + ":\"" ) + value ) + "\"" ; } return ( name + ":" ) + value ; }
public void validateLocalDomain ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( validator.isValid ( "foo@bar.local" ) ) . isTrue ( ) ; }
public void addOption ( com.google.gerrit.common.changes.ListChangesOption o ) { options.add ( o ) ; }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.lib.ModeInjector ( ) . add ( getContentType ( info.meta_a ( ) ) ) . add ( getContentType ( info.meta_b ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.io.IOException { index ( changeDataFactory.create ( db , project , changeId ) ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public void deleteBranchByAdmin ( ) throws java.lang.Exception { assertDeleteSucceeds ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , accessPath , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , remotePeerProvider , dbProvider , id ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return change ; }
public void start ( ) { com.google.gerrit.server.index.GerritIndexStatus cfg = createIndexStatus ( ) ; for ( com.google.gerrit.server.index.IndexDefinition < ? , ? , ? > def : defs.values ( ) ) { initIndex ( def , cfg ) ; } }
public void onFailure ( java.lang.Throwable caught ) { if ( ! ( failed ) ) { failed = true ; failedThrowable = caught ; } remaining.remove ( this ) ; this . applyAllFailed ( ) ; }
public org.eclipse.jgit.lib.ObjectId getNewId ( ) { refreshObjectIds ( ) ; return newId ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.fullTextSearchMaxMatches" , value = "2" ) } ) public void suggestReviewersFullTextSearchLimitMaxMatches ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "ser" , 3 ) ; org.junit.Assert.assertEquals ( 2 , reviewers.size ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { group ( "users1" ) ; group ( "users2" ) ; group ( "users3" ) ; accounts.create ( "user1" , "user1@example.com" , "User1" , "users1" ) ; accounts.create ( "user2" , "user2@example.com" , "User2" , "users2" ) ; accounts.create ( "user3" , "user3@example.com" , "User3" , "users1" , "users2" ) ; }
public java.lang.Object getScreenCacheToken ( ) { return this ; }
protected final com.google.gerrit.util.cli.CmdLineParser newCmdLineParser ( ) { final com.google.gerrit.util.cli.CmdLineParser parser = super . newCmdLineParser ( ) ; for ( com.google.gerrit.sshd.commands.ApproveOption c : optionList ) { parser.addOption ( c , c ) ; } return parser ; }
void changeProjectSubmitType ( com.google.gerrit.client.reviewdb.Project.Id projectId , com.google.gerrit.client.reviewdb.Project.SubmitType newSubmitType , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
void setCanDelete ( boolean canDelete ) { this . canDelete = ( canDelete ) ? true : null ; }
void cacheVisibleTo ( com.google.gerrit.server.project.ChangeControl ctl ) { visibleTo = ctl.getCurrentUser ( ) ; changeControl = ctl ; }
void projectAccess ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) ;
public com.google.gerrit.extensions.api.projects.BranchInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return resource ( ) . getBranchInfo ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot read branch" , e ) ; } }
public com.googlesrouce.gerrit.plugins.github.git.GHMilestone createMilestone ( java.lang.String title , java.lang.String description ) throws java.io.IOException { return ghRepository.createMilestone ( title , description ) ; }
public final void insert ( final java.lang.Iterable < E > instances , final com.google.gwtorm.client.Transaction txn ) throws com.google.gwtorm.client.OrmException { if ( txn != null ) { cast ( txn ) . queueInsert ( this , instances ) ; } else { insert ( instances ) ; } }
private void attachComments ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { in.drafts ( ReviewInput.DraftHandling.KEEP ) ; in.comments ( result ) ; }
public void usernamePatternCanUploadToAnyRef ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/users/${username}/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , "a-registered-user" ) ; assertCanUpload ( u ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
public void onPreMerge ( com.google.gerrit.server.git.CodeReviewCommit commit , com.google.gerrit.server.project.ProjectState destProject , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch ) throws com.google.gerrit.server.git.validators.MergeValidationException { for ( com.google.gerrit.server.git.validators.MergeValidationListener validator : mergeValidationListeners ) { validator.onPreMerge ( commit , destProject , destBranch ) ; } }
public static void confirmEmail ( java.lang.String token , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.config.ConfigServerApi.EmailConfirmationInput input = com.google.gerrit.client.config.ConfigServerApi.EmailConfirmationInput.create ( ) ; input.setToken ( token ) ; new com.google.gerrit.client.rpc.RestApi ( "config/server/email.confirm" ) . put ( input , cb ) ; }
public void error ( java.lang.String message ) { throw new com.google.gerrit.pgm.util.Die ( ( "Cannot open log file: " + message ) ) ; }
public void onFailure ( java.lang.Throwable err ) { if ( com.google.gerrit.client.changes.SubmitFailureDialog.isConflict ( err ) ) { new com.google.gerrit.client.changes.SubmitFailureDialog ( err.getMessage ( ) ) . center ( ) ; } else { super . onFailure ( err ) ; } goChange ( ) ; }
com.google.gerrit.testutil.InMemoryDatabase getInMemoryDatabase ( com.google.gerrit.server.schema.SchemaCreator schemaCreator ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.testutil.InMemoryDatabase ( schemaCreator ) ; }
public void start ( ) { }
private static com.google.gerrit.client.rpc.RestApi base ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { return new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( project.get ( ) ) . view ( "dashboards" ) ; }
public java.lang.Integer apply ( java.lang.String stringVal ) { return java.lang.Integer.parseInt ( stringVal ) ; }
private com.google.gerrit.extensions.common.ProblemInfo problem ( java.lang.String msg ) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo ( ) ; p.message = msg ; problems.add ( p ) ; return p ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply ( resource ( ) , new com.google.gerrit.server.project.DeleteBranch.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete branch" , e ) ; } }
public void insertComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { insertDraftComment ( comment ) ; } else { insertPublishedComment ( comment ) ; } }
void onReviewMode ( com.google.gwt.event.dom.client.ClickEvent e ) { fileTableMode = FileTable.Mode.REVIEW ; refreshFileTable ( ) ; editMode.setVisible ( true ) ; reviewMode.setVisible ( false ) ; }
protected java.lang.String getName ( ) { return com.google.common.base.MoreObjects.firstNonNull ( name , com.google.gerrit.testutil.ConfigSuite.DEFAULT ) ; }
boolean canForceEditTopicName ( ) { return canForcePerform ( Permission.EDIT_TOPIC_NAME ) ; }
private org.eclipse.jgit.lib.PersonIdent getRefLogIdent ( com.google.gerrit.server.IdentifiedUser user ) { return user.newRefLogIdent ( com.google.gerrit.common.TimeUtil.nowTs ( ) , tz ) ; }
public long longValue ( ) { return ( ( long ) ( val ) ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change.nextPatchSetId ( ) ; return change ; }
public void destroy ( ) { com.google.gerrit.git.MergeQueue.terminate ( ) ; super . destroy ( ) ; }
public void branchAlreadyExists_Conflict ( ) throws java.lang.Exception { assertCreateSucceeds ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; }
private void wrapChildren ( java.lang.String tag , org.pegdown.ast.SuperNode node ) { html.open ( tag ) ; visitChildren ( node ) ; html.close ( tag ) ; }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.lib.ModeInjector ( ) . add ( getContentType ( info.meta_a ( ) ) ) . add ( getContentType ( info.meta_b ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
public void testEvictCacheFailed ( ) throws java.lang.Exception { setupMocks ( Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON2 , false , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON ) ) . isFalse ( ) ; }
public void run ( ) { rc.processCommands ( commands ) ; }
protected int getValueInt ( com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { return changeData.changedLines ( ) . insertions ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.AccountSecurityImpl ( ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.server.audit.AuditListener.class ) ; com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.server.audit.GroupMemberAuditListener.class ) ; bind ( com.google.gerrit.server.audit.AuditService.class ) ; }
public boolean match ( final T object ) throws com.google.gwtorm.server.OrmException { return ! ( that.match ( object ) ) ; }
private static org.eclipse.jgit.util.TemporaryBuffer.Heap heap ( int max ) { return new org.eclipse.jgit.util.TemporaryBuffer.Heap ( max ) ; }
public org.apache.sshd.server.Command get ( ) { return new com.google.gerrit.sshd.AliasCommand ( root , currentUser , command ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { k.setGroupOwner ( newValue ) ; }
public static java.lang.String getAuthorization ( ) { return com.google.gerrit.client.Gerrit.authorization ; }
private void initNoMembersInfo ( ) { noMembersInfo = new com.google.gwt.user.client.ui.FlowPanel ( ) ; noMembersInfo.setVisible ( false ) ; noMembersInfo.add ( new com.google.gerrit.client.ui.SmallHeading ( Util.C.noMembersInfo ( ) ) ) ; add ( noMembersInfo ) ; }
public boolean isDone ( ) { if ( super . isDone ( ) ) { return true ; } else if ( isSearcherCurrent ( ) ) { set ( null ) ; return true ; } return false ; }
public java.lang.Long apply ( java.lang.String stringVal ) { return java.lang.Long.parseLong ( stringVal ) ; }
public static void main ( final java.lang.String [ ] argv ) throws com.google.gwtjsonrpc.server.XsrfException , com.google.gwtorm.client.OrmException { com.google.gerrit.server.GerritServer.getInstance ( ) ; com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; }
private static boolean match ( java.lang.String value , java.lang.String pattern ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( pattern ) . match ( value , null ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public boolean isOwner ( ) { return ( controlForRef ( RefRight.ALL ) . isOwner ( ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public synchronized void stop ( ) { for ( com.google.gerrit.server.plugins.Plugin p : running.values ( ) ) { p.stop ( ) ; } running.clear ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? executor.submit ( deleteTask ( cd ) ) : com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( change.getId ( ) , changeMessages.keySet ( ) , patchSets.keySet ( ) , patchSetApprovals.keySet ( ) , patchLineComments.keySet ( ) ) ; }
public java.util.Map < java.lang.String , java.util.List < com.google.gerrit.extensions.common.CommentInfo > > comments ( ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.d47190 Revert ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { setFocus ( true ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getLocalRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id action ) { return com.google.gerrit.server.project.ProjectState.filter ( getLocalRights ( ) , action ) ; }
private static void doCreateTable ( java.sql.Statement stmt ) throws java.sql.SQLException { stmt.executeUpdate ( ( "CREATE TABLE IF NOT EXISTS account_patch_reviews (" + ( ( ( ( ( ( "account_id INTEGER DEFAULT 0 NOT NULL, " + "change_id INTEGER DEFAULT 0 NOT NULL, " ) + "patch_set_id INTEGER DEFAULT 0 NOT NULL, " ) + "file_name VARCHAR(4096) DEFAULT '' NOT NULL, " ) + "CONSTRAINT primary_key_account_patch_reviews " ) + "PRIMARY KEY (account_id, change_id, patch_set_id, file_name)" ) + ")" ) ) ) ; }
public void testBadEventAndNotForwarded ( ) throws java.lang.Exception { setUpMocks ( false , false ) ; eventHandler.onEvent ( event ) ; verifyAll ( ) ; }
public void execute ( ) { if ( ( cmA ) != null ) { cmA.setOption ( "viewportMargin" , 10 ) ; } if ( ( cmB ) != null ) { cmB.setOption ( "viewportMargin" , 10 ) ; } resizeCodeMirror ( ) ; }
public java.nio.file.FileSystem createFileSystem ( org.apache.sshd.common.Session session ) throws java.io.IOException { return java.nio.file.FileSystems.getDefault ( ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet ( java.lang.String changeId ) throws com.google.gwtorm.server.OrmException { return db.patchSets ( ) . get ( getCurrentPatchSetId ( changeId ) ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( getChange ( ) . getId ( ) ) ; }
static java.lang.String trimLeadingSlash ( java.lang.String str ) { com.google.common.base.Preconditions.checkArgument ( str.startsWith ( "/" ) , "expected string starting with a slash: %s" , str ) ; return str.substring ( 1 ) ; }
protected void ccExistingReviewers ( ) { ccApprovals ( false ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . screenRegex ( ".*" , new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen.Factory ( ) ) ; }
public synchronized void sendRedirect ( java.lang.String msg ) { status = SC_FOUND ; committed = true ; }
public void remove ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public FirstWebLoginListener ( com.google.gerrit.server.plugins.PluginLoader pluginLoader , @ com.google.gerrit.extensions.annotations.PluginData java.nio.file.Path pluginData ) { }
public void setNew_MethodNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.UsernameInput in = new com.google.gerrit.extensions.common.UsernameInput ( ) ; in.username = "newUsername" ; adminRestSession.put ( ( ( "/accounts/" + ( admin.username ) ) + "/username" ) , in ) . assertMethodNotAllowed ( ) ; }
public abstract java.lang.String getProjectDescription ( final java.lang.String name ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException ;
public com.google.gerrit.client.workflow.CategoryFunction getFunction ( ) { return com.google.gerrit.client.workflow.CategoryFunction.forName ( functionName ) ; }
private org.eclipse.jgit.lib.Repository getRepository ( ) { try { return args.server.openRepository ( projectName ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException e ) { return null ; } }
public void execute ( ) { final java.lang.String base = com.google.gwt.core.client.GWT.getModuleBaseURL ( ) ; Window.Location.assign ( ( base + "__BecomeAnyAccount" ) ) ; }
public UiAction.Description getDescription ( com.google.gerrit.server.change.ChangeResource resource ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Edit Topic" ) . setVisible ( resource.getControl ( ) . canEditTopicName ( ) ) ; }
void init ( com.google.gerrit.client.change.ChangeScreen2.Style style ) { this . style = style ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > byEmail ( java.lang.String email ) throws java.io.IOException ;
public void testEvictCacheOK ( ) throws java.lang.Exception { setupMocks ( Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON2 , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON ) ) . isTrue ( ) ; }
public void bumpLastUpdatedOn ( boolean bump ) { bumpLastUpdatedOn = bump ; }
public void registerCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self.registerCacheUsageListener ( cacheUsageListener ) ; }
public void registerKeys ( ) { super . registerKeys ( ) ; contentTable.setRegisterKeys ( contentTable.isVisible ( ) ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return change ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { display ( result ) ; }
public com.google.gerrit.server.change.RevisionResource getRevisionResource ( java.lang.String project , int changeNumber ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { HEAD ( d6ab94 ) ; }
public void GetDiffPreferences ( ) throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = get ( ) ; assertPrefsEqual ( result , com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults ( ) ) ; }
public static com.google.gerrit.client.rpc.RestApi revision ( int id , java.lang.String revision ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( revision ) ; }
private void display ( final com.google.gerrit.client.data.SideBySidePatchDetail detail ) { sbsTable.setAccountInfoCache ( detail.getAccounts ( ) ) ; sbsTable.display ( detail ) ; sbsTable.finishDisplay ( true ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.README , getImageUrl ( ) , getBranchUrl ( projectName , branchName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public static java.lang.String permalink ( final com.google.gerrit.client.reviewdb.Change.Id c ) { return ( com.google.gwt.core.client.GWT.getModuleBaseURL ( ) ) + ( c.get ( ) ) ; }
private void assertIllegalArgument ( java.lang.String value , java.lang.String expectedMessage ) { exception.expect ( java.lang.IllegalArgumentException.class ) ; exception.expectMessage ( expectedMessage ) ; com.google.gerrit.testutil.IndexVersionsTest.get ( value ) ; }
public final java.sql.Timestamp updated ( ) { return com.google.gwtjsonrpc.client.impl.ser.JavaSqlTimestamp_JsonSerializer.parseTimestamp ( updatedRaw ( ) ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.httpd.rpc.RpcServletModule ( com.google.gerrit.httpd.rpc.UiRpcModule.PREFIX ) { @ java.lang.Override protected void configureServlets ( ) { rpc ( com.google.gerrit.httpd.auth.ldap.UserPassAuthServiceImpl.class ) ; } } ) ; }
public abstract java.lang.String getProjectDescription ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException ;
void appendSubmittedBy ( com.google.gerrit.reviewdb.client.Account user ) { sb.append ( "Submitted-by: " ) ; appendUserData ( user ) ; sb.append ( "\n" ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { deleteDraftComment ( comment ) ; } else { throw new java.lang.IllegalArgumentException ( "Cannot delete a published comment." ) ; } }
com.google.gerrit.server.git.ReplaceOp create ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Branch.NameKey dest , boolean checkMergedInto , @ com.google.inject.assistedinject.Assisted ( value = "priorPatchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId , @ com.google.inject.assistedinject.Assisted ( value = "priorCommit" ) org.eclipse.jgit.revwalk.RevCommit priorCommit , @ com.google.inject.assistedinject.Assisted ( value = "patchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , @ com.google.inject.assistedinject.Assisted ( value = "commit" ) org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.List < java.lang.String > groups , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.ReceiveCommits.MagicBranchInput magicBranch , @ com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate ) ;
private java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupsOf ( com.google.gerrit.reviewdb.client.Account account ) { com.google.gerrit.server.IdentifiedUser user = userFactory.create ( account.getId ( ) ) ; return new java.util.HashSet < com.google.gerrit.reviewdb.client.AccountGroup.UUID > ( user.getEffectiveGroups ( ) ) ; }
public void setRequireChangeID ( final boolean cid ) { requireChangeID = cid ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval get ( com.google.gerrit.reviewdb.client.PatchSetApproval.Key key ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void selfRevokedKey ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKey.key4 ( ) , "Key is revoked" ) ; }
protected void preDisplay ( java.lang.String content ) { initEditor ( content ) ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute ca , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSetApproval > > approvals , com.google.gerrit.common.data.LabelTypes labelTypes ) { addPatchSets ( ca , ps , approvals , false , null , labelTypes ) ; }
private void preMerge ( ) throws com.google.gerrit.server.git.MergeException { final com.google.gerrit.server.git.SubmitStrategy strategy = createStrategy ( ) ; mergeTip = strategy.run ( branchTip , toMerge ) ; refLogIdent = strategy.getRefLogIdent ( ) ; commits.putAll ( strategy.getNewCommits ( ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) << ( t.intValue ( ) ) ) ) ; }
private void setupDefaultOperations ( ) { new org.eclipse.example.calc.internal.operations.Equals ( ) ; new org.eclipse.example.calc.internal.operations.Minus ( ) ; new org.eclipse.example.calc.internal.operations.Plus ( ) ; new org.eclipse.example.calc.internal.operations.Square ( ) ; new org.eclipse.example.calc.internal.Divide ( ) ; }
public void isEnabledForAllRefsByDefault ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + "blockedFileExtension = jar" ) ) ; com.google.common.truth.Truth.assertThat ( config.isEnabledForRef ( projectName , "anyRef" , "blockedFileExtension" ) ) . isTrue ( ) ; }
public final native boolean isDefault ( ) ;
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.ApiGlue.addHistoryHook ( ) ; }
public static com.google.gerrit.common.data.SubmitTypeRecord OK ( com.google.gerrit.extensions.client.SubmitType type ) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord ( ) ; r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK ; r.type = type ; return r ; }
public < T extends java.lang.Enum < ? > > T readEnum ( T def , java.lang.String fmt , java.lang.Object ... args ) { return def ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < com.google.gwt.user.client.ui.SuggestOracle.Suggestion > event ) { if ( submitOnSelection ) { submitOnSelection = false ; doAdd ( ) ; } }
public int getCost ( ) { return 2 ; }
public final com.google.common.collect.ImmutableSortedMap < java.lang.Integer , com.google.gerrit.server.index.Schema < V > > getSchemas ( ) { return schemaDefs.getSchemas ( ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return user ; }
public java.lang.String getName ( ) { return "Group" ; }
public void put ( final K key , final V value ) { self.put ( new net.sf.ehcache.Element ( key , value ) ) ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commits , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.lang.String submissionId ) ;
public void onSuccess ( java.lang.Void result ) { net.codemirror.lib.Loader.initDisableUnwantedKeys ( ) ; }
public static java.lang.String toProjectAcceess ( final com.google.gerrit.reviewdb.Project.NameKey p ) { return ( "admin,project," + ( p.get ( ) ) ) + ",access" ; }
public boolean enableDefaultUi ( ) { return ( ! ( headless ) ) && ( ! ( enablePolyGerrit ) ) ; }
public void addNonExistingMember_NotFound ( ) throws java.lang.Exception { adminSession.put ( "/groups/Administrators/members/non-existing" ) . assertNotFound ( ) ; }
public void maxAutomergeVoteDisabledTest ( ) throws java.lang.Exception { defaultSetup ( "automerger.config" ) ; com.google.common.truth.Truth.assertThat ( configLoader.maxAutomergeVoteDisabled ( ) ) . isEqualTo ( false ) ; }
private GitilesView.Builder parseDescribeCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) { if ( com.google.gitiles.ViewFilter.isEmptyPath ( path ) ) { return null ; } return com.google.gitiles.GitilesView.describe ( ) . setRepositoryName ( repoName ) . setPathPart ( path ) ; }
public com.google.gerrit.extensions.common.ChangeInfo info ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.noneOf ( com.google.gerrit.extensions.common.ListChangesOption.class ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { removeUI ( ) ; }
protected void add ( final javax.mail.Message.RecipientType rt , final java.util.Collection < com.google.gerrit.client.reviewdb.Account.Id > list ) throws javax.mail.MessagingException { for ( final com.google.gerrit.client.reviewdb.Account.Id id : list ) { add ( rt , id ) ; } }
public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags.apply ( change , input ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post hashtags" , e ) ; } }
public static org.eclipse.jgit.revwalk.RevWalk newRevWalk ( org.eclipse.jgit.lib.Repository repo ) { return new org.eclipse.jgit.revwalk.RevWalk ( repo ) { @ java.lang.Override protected org.eclipse.jgit.revwalk.RevCommit createCommit ( org.eclipse.jgit.lib.AnyObjectId id ) { return new com.google.gerrit.server.git.CodeReviewCommit ( id ) ; } } ; }
protected void onUnload ( ) { com.google.gerrit.client.Gerrit.removeSignedInListener ( signedInListener ) ; super . onUnload ( ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.ContributorAgreement > result ) { if ( isAttached ( ) ) { available = result ; postRPC ( ) ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.actions.ActionInfo > actionMap ) { actionMap.copyKeysIntoChildren ( "id" ) ; renderRevisionInfo ( changeInfo , actionMap ) ; }
void toggleShowIntraline ( ) { prefs.intralineDifference ( ( ! ( prefs.intralineDifference ( ) ) ) ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; prefsAction.update ( ) ; }
public void onSuccess ( java.lang.Void result ) { net.codemirror.lib.Vim.initKeyMap ( ) ; cb.onSuccess ( null ) ; }
public void batchAbandon ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { batchAbandon ( project , user , controls , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
private static java.lang.String getExtension ( java.io.File file ) { return com.google.gerrit.server.plugins.JarPluginProvider.getExtension ( file.getName ( ) ) ; }
public boolean match ( com.google.gerrit.server.project.ProjectState projectState ) throws com.google.gwtorm.server.OrmException { return permissionBackend.user ( user ) . project ( projectState.getProject ( ) . getNameKey ( ) ) . testOrFalse ( ProjectPermission.READ ) ; }
private static void assertParseNotifyValueFails ( java.lang.String notifyValue ) { try { com.google.gerrit.server.account.WatchConfigTest.parseNotifyValue ( notifyValue ) ; org.junit.Assert.fail ( ( "expected ConfigInvalidException for notifyValue: " + notifyValue ) ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { } }
public void testAppend_float ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.append ( 0.0F ) ) ; org.junit.Assert.assertEquals ( "0.0" , b.asString ( ) ) ; }
public com.google.gerrit.server.change.ChangeEditResource parse ( com.google.gerrit.server.change.ChangeResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.lang.Exception { throw new java.lang.IllegalStateException ( "not yet implemented" ) ; }
private static java.lang.String my ( org.eclipse.jgit.lib.Config cfg , java.lang.String subsection , java.lang.String key , java.lang.String defaultValue ) { java.lang.String val = cfg.getString ( com.google.gerrit.server.account.GetPreferences.MY , subsection , key ) ; return ! ( com.google.common.base.Strings.isNullOrEmpty ( val ) ) ? val : defaultValue ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "edit" , com.google.gerrit.client.DiffObject.base ( ) , revision , fileName , null , line ) ; }
public com.google.gerrit.acceptance.PushOneCommit.Result rm ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.rm ( git , fileName ) ; return execute ( git , ref ) ; }
public boolean match ( com.google.gerrit.server.project.ProjectData pd ) throws com.google.gwtorm.server.OrmException { return permissionBackend.user ( user ) . project ( pd.getProject ( ) . getNameKey ( ) ) . testOrFalse ( ProjectPermission.READ ) ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > email ( java.lang.String email ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EMAIL , AccountQueryBuilder.FIELD_EMAIL , email ) ; }
public void createSyncEventsRestApiServlet ( ) throws java.lang.Exception { syncEventsRestApiServlet = new com.ericsson.gerrit.plugins.syncevents.SyncEventsRestApiServlet ( dispatcher ) ; org.mockito.Mockito.when ( req.getContentType ( ) ) . thenReturn ( com.google.common.net.MediaType.JSON_UTF_8.toString ( ) ) ; }
public static synchronized void useSystemTime ( ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = null ; com.google.gerrit.common.TimeUtil.resetCurrentMillisSupplier ( ) ; }
public void setContentType ( java.lang.String type ) { headers.removeAll ( com.google.common.net.HttpHeaders.CONTENT_TYPE ) ; headers.put ( com.google.common.net.HttpHeaders.CONTENT_TYPE , type ) ; }
public Account.Id apply ( com.google.gerrit.acceptance.TestAccount in ) { return in.id ; }
public void listTagsOfNonVisibleProject ( ) throws java.lang.Exception { blockRead ( project , "refs/*" ) ; com.google.common.truth.Truth.assertThat ( userSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private static void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd , final java.lang.String why ) { cmd.setResult ( ReceiveCommand.Result.REJECTED_OTHER_REASON , why ) ; }
default com.google.gerrit.reviewdb.client.Account getAccount ( ) { return getIdentifiedUser ( ) . getAccount ( ) ; }
protected void init ( ) throws javax.mail.MessagingException { super . init ( ) ; setHeader ( MimeMessage.MESSAGE_ID , getChangeMessageThreadId ( ) ) ; add ( RecipientType.TO , reviewers ) ; add ( RecipientType.CC , extraCC ) ; rcptToAuthors ( RecipientType.CC ) ; }
void publish ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
protected void onUnload ( ) { com.google.gerrit.client.Gerrit.removeSignedInListener ( signedInListener ) ; super . onUnload ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSearch ( ) ; } }
void projectDetail ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
public java.lang.String getMessageText ( ) { return ( message.getText ( ) . trim ( ) ) + '\n' ; }
public com.google.gerrit.extensions.restapi.BinaryResult submitPreview ( java.lang.String format ) throws com.google.gerrit.extensions.restapi.RestApiException { submitPreview.setFormat ( format ) ; return submitPreview.apply ( revision ) ; }
private void forAll ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Tester tester ) throws java.lang.Exception { for ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder : com.google.common.collect.ImmutableList.of ( singly ( ) , batch ( ) ) ) { tester.test ( adder ) ; } }
public java.lang.String apply ( com.google.gerrit.server.project.ProjectResource resource ) { com.google.gerrit.reviewdb.client.Project project = resource.getControl ( ) . getProject ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent ( allProjectsName ) ; return parentName != null ? parentName.get ( ) : "" ; }
private java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > fetchAccountIds ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return approvalsUtil.getReviewers ( dbProvider.get ( ) , rsrc.getChange ( ) . getId ( ) ) . values ( ) ; }
public net.sf.ehcache.Element get ( final com.google.gerrit.server.patch.DiffCacheKey key ) { return self.get ( key ) ; }
public long longValue ( ) { return ( ( long ) ( this . val ) ) ; }
public com.google.gerrit.extensions.client.ChangeKind getChangeKind ( @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , repo , rw , cd , patch ) ; }
private static org.eclipse.jgit.lib.ObjectId toObjectId ( java.lang.String id ) { return id != null ? org.eclipse.jgit.lib.ObjectId.fromString ( id ) : null ; }
public com.google.gerrit.server.notedb.ChangeNotes createForNew ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( db , repoManager , migration , allUsersProvider , change ) . load ( ) ; }
protected void provideStateTo ( final org.apache.sshd.server.CommandFactory.Command cmd ) { cmd.setInputStream ( in ) ; cmd.setOutputStream ( out ) ; cmd.setErrorStream ( err ) ; cmd.setExitCallback ( exit ) ; }
protected void ccAllApprovals ( ) { ccApprovals ( true ) ; }
public void onFailure ( final java.lang.Throwable caught ) { k.getWatch ( ) . setNotifyAllComments ( oldVal ) ; notifyAllComments.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
public void abandonChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final java.lang.String message , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) { abandonChangeHandlerFactory.create ( patchSetId , message ) . to ( callback ) ; }
public java.lang.String apply ( org.eclipse.jgit.lib.ObjectId id ) { return id.getName ( ) ; }
public void remove ( ) { for ( java.lang.String name : names ) { descriptions.remove ( name ) ; registry.remove ( name ) ; } }
public static void edit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . get ( cb ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSet > byChange ( com.google.gerrit.reviewdb.client.Change.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
private void assertDeleteForbidden ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; branch ( ) . delete ( ) ; }
void removeAll ( ) { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar.expandSideAll ( ) ; } skipBars = null ; line0 = null ; } }
protected abstract int printJsonImpl ( int fieldCount , java.lang.StringBuilder sb , T o ) ;
public int compareTo ( com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry o ) { return ( this . id ) - ( o.id ) ; }
public static boolean hasRange ( java.lang.String varName ) { return ( com.google.gerrit.common.data.GlobalCapability.QUERY_LIMIT.equalsIgnoreCase ( varName ) ) || ( com.google.gerrit.common.data.GlobalCapability.BATCH_CHANGES_LIMIT.equalsIgnoreCase ( varName ) ) ; }
public static java.lang.String toGroup ( com.google.gerrit.reviewdb.client.AccountGroup.Id id , java.lang.String panel ) { return ( ( "/admin/groups/" + ( id.toString ( ) ) ) + "," ) + panel ; }
public static Account.Id getAccountId ( ) { return com.google.gerrit.client.rpc.RpcUtil.caImpl.getAccountId ( ) ; }
protected void assertResultEquals ( java.lang.String message , com.google.gerrit.reviewdb.client.Change expected , com.google.gerrit.server.change.ChangeJson.ChangeInfo actual ) { org.junit.Assert.assertEquals ( message , expected.getId ( ) . get ( ) , actual._number ) ; }
void appendSubmittedBy ( com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account ) { sb.append ( "Submitted-by: " ) ; appendUserData ( accountId , account ) ; sb.append ( "\n" ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toProjectTags ( getProjectKey ( ) ) ) ; }
public long getMinValue ( ) { return 0 ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , "" , defaultNotify ( control ) , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public void stream ( java.io.OutputStream out ) throws java.io.IOException { java.io.OutputStream b64Out = com.google.common.io.BaseEncoding.base64 ( ) . encodingStream ( new java.io.OutputStreamWriter ( out , com.google.common.base.Charsets.UTF_8 ) ) ; loader.copyTo ( b64Out ) ; b64Out.close ( ) ; }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; }
public void schemaThrowsExceptionWhenLookingUpForChange ( ) throws java.lang.Exception { setupPostMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.THROW_ORM_EXCEPTION ) ; syncIndexRestApiServlet.doPost ( req , rsp ) ; org.mockito.Mockito.verify ( rsp ) . sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND , "Error trying to find a change \n" ) ; }
public void cleanupIndex ( ) { if ( ( com.google.gerrit.elasticsearch.ElasticQueryAccountsTest.nodeInfo ) != null ) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes ( com.google.gerrit.elasticsearch.ElasticQueryAccountsTest.nodeInfo.node , com.google.gerrit.elasticsearch.ElasticQueryAccountsTest.INDEX_NAME ) ; com.google.gerrit.elasticsearch.ElasticQueryAccountsTest.createIndexes ( ) ; } }
public static java.nio.file.Path getDeveloperBuckOut ( ) throws java.io.FileNotFoundException { return com.google.gerrit.launcher.GerritLauncher.resolveInSourceRoot ( "buck-out" ) ; }
private void initRow ( final int row , final java.lang.String name ) { table.setText ( row , 0 , name ) ; table.getCellFormatter ( ) . addStyleName ( row , 0 , "header" ) ; }
public final com.google.gerrit.server.query.Predicate < T > getChild ( int i ) { if ( i != 0 ) { throw new java.lang.ArrayIndexOutOfBoundsException ( i ) ; } return that ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { r.add ( result ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( org.eclipse.jgit.revwalk.RevWalk walk , int limit , @ javax.annotation.Nullable java.lang.String revision , @ javax.annotation.Nullable org.eclipse.jgit.lib.ObjectId start , org.eclipse.jgit.util.GitDateFormatter df ) throws java.io.IOException { return toSoyData ( new com.google.gitiles.Paginator ( walk , limit , start ) , revision , df ) ; }
public static void get ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String dashboardId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + ( com.google.gerrit.client.dashboards.DashboardList.encodeDashboardId ( dashboardId ) ) ) ) . get ( callback ) ; }
protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.PluginName.class ) . toInstance ( name ) ; }
private void allowFastForwardTagUpdate ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , "refs/tags/*" , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public abstract com.google.protobuf.ByteString encode ( T obj ) ;
public static void display ( final java.lang.String historyToken , final com.google.gerrit.client.ui.Screen view ) { com.google.gwt.user.client.History.newItem ( historyToken , false ) ; com.google.gerrit.client.Gerrit.display ( view ) ; if ( ( com.google.gerrit.client.Gerrit.historyHooks ) != null ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( historyToken ) ; } }
public void createNewDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.MethodNotAllowedException.class , "draft workflow is disabled" ) ; }
public abstract com.google.gerrit.reviewdb.client.Change getChange ( ) ;
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { b.setEnabled ( false ) ; Util.MANAGE_SVC.rebaseChange ( patchSet.getId ( ) , new com.google.gerrit.client.changes.ChangeDetailCache.GerritWidgetCallback ( b ) ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.AccountGroup.UUID uuid ) { return "admin,group,uuid-" + ( uuid.toString ( ) ) ; }
public void listEmptyGroupMembers ( ) throws java.lang.Exception { java.lang.String group = createGroup ( "empty" ) ; com.google.common.truth.Truth.assertThat ( GET ( ( ( "/groups/" + group ) + "/members/" ) ) ) . isEmpty ( ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.Unified ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ; }
public void setFieldReference ( final com.google.gwtorm.schema.ColumnModel cm ) { setFieldReference ( cm , true ) ; }
public void unblockInLocal_Fails ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , fixers , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl f = user ( local , fixers ) ; assertCannotUpdate ( "refs/heads/master" , f ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return pred.match ( cd ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { rebuild ( change , null ) ; return null ; }
public java.util.List < com.google.gerrit.common.data.SubmitRecord > canSubmit ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return canSubmit ( db , patchSet , null , false ) ; }
public com.ericsson.gerrit.plugins.syncindex.IndexResponseHandler.IndexResult handleResponse ( org.apache.http.HttpResponse response ) { return new com.ericsson.gerrit.plugins.syncindex.IndexResponseHandler.IndexResult ( isSuccessful ( response ) , parseResponse ( response ) ) ; }
private void createDraftUpdateIfNull ( ) { if ( ( draftUpdate ) == null ) { draftUpdate = draftUpdateFactory.create ( ctl , when ) ; } }
public boolean canSee ( com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
abstract void insertNewDraft ( com.google.gerrit.client.diff.DisplaySide side , int line ) ;
private static < T > com.google.common.util.concurrent.CheckedFuture < T , java.io.IOException > submit ( java.util.concurrent.Callable < T > task , com.google.common.util.concurrent.ListeningExecutorService executor ) { return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.nonCancellationPropagating ( executor.submit ( task ) ) , com.google.gerrit.server.index.change.ChangeIndexer.MAPPER ) ; }
public void submit ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > cb ) { submitAction.create ( patchSetId ) . to ( cb ) ; }
protected void configure ( ) { factory ( SaveDraft.Factory.class ) ; }
public void setContentLengthLong ( long length ) { headers.removeAll ( com.google.common.net.HttpHeaders.CONTENT_LENGTH ) ; headers.put ( com.google.common.net.HttpHeaders.CONTENT_LENGTH , java.lang.Long.toString ( length ) ) ; }
private com.google.gerrit.client.diff.DisplaySide displaySide ( com.google.gerrit.client.changes.CommentInfo info , com.google.gerrit.client.diff.DisplaySide forSide ) { if ( ( info.side ( ) ) == ( com.google.gerrit.extensions.common.Side.PARENT ) ) { return ( base ) == null ? DisplaySide.A : null ; } return forSide ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; }
public void parseReviewer ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Patch-Set: 1\n" ) + "Reviewer: Change Owner <1@gerrit>\n" ) + "CC: Other Account <2@gerrit>\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: 1@gerrit\n" ) ) ) ; }
private com.google.gwtorm.jdbc.JdbcAccess < com.google.gwtorm.jdbc.TestJdbcAccess.Data , com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey > createJdbcAccess ( final com.google.gwtorm.schema.sql.SqlDialect dialect ) { com.google.gwtorm.jdbc.JdbcSchema schema = setupSchema ( dialect ) ; com.google.gwtorm.jdbc.JdbcAccess < com.google.gwtorm.jdbc.TestJdbcAccess.Data , com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey > classUnderTest = new com.google.gwtorm.jdbc.TestJdbcAccess.DataJdbcAccess ( schema ) ; return classUnderTest ; }
void changeProjectSettings ( com.google.gerrit.reviewdb.Project update , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
public boolean updateUserModels ( java.util.Collection < com.gitblit.models.UserModel > models ) { return false ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
private void fireRefUpdated ( org.eclipse.jgit.lib.RefUpdate branchUpdate ) { gitRefUpdated.fire ( destBranch.getParentKey ( ) , branchUpdate ) ; hooks.doRefUpdatedHook ( destBranch , branchUpdate , getAccount ( mergeTip ) ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithStatus ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Change.Status status ) throws java.lang.Exception { return newChange ( repo , null , null , null , status , null ) ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.PatchSet.Id ps ) { return ( ( "change," + ( ps.getParentKey ( ) . toString ( ) ) ) + ",patchset=" ) + ( ps.get ( ) ) ; }
private void assertNotesMigrationState ( com.google.gerrit.server.notedb.NotesMigrationState expected ) throws java.lang.Exception { gerritConfig.load ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.notedb.NotesMigrationState.forNotesMigration ( new com.google.gerrit.server.notedb.ConfigNotesMigration ( gerritConfig ) ) ) . hasValue ( expected ) ; }
private boolean inProject ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Project.NameKey project ) { if ( projectControl != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( project ) ; } return true ; }
public void markReady ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private boolean isLogFile ( final java.io.File entry ) { return entry.isFile ( ) ; }
public void preDisplay ( final com.google.gerrit.common.data.AgreementInfo result ) { agreements.display ( result ) ; }
public int compareTo ( final com.google.gerrit.sshd.commands.ProjectNode o ) { return project.getNameKey ( ) . compareTo ( o.project.getNameKey ( ) ) ; }
private void updateForm ( ) { tagTable.updateDeleteButton ( ) ; addTag.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
void patchSetAction ( com.google.gerrit.client.reviewdb.ApprovalCategoryValue.Id value , com.google.gerrit.client.reviewdb.PatchSet.Id patchSetId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public com.google.gerrit.server.account.GpgKeys.ListGpgKeys list ( ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.account.GpgKeys.checkEnabled ( ) ; return new com.google.gerrit.server.account.GpgKeys.ListGpgKeys ( ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
protected void configureCommands ( ) { command ( com.googlesource.gerrit.plugins.events.StreamEvents.class ) ; }
public int getIntParameter ( java.lang.String name , int defaultValue ) { return config.getInt ( RTCItsFacade.ITS_NAME_RTC , null , getParamName ( name ) , defaultValue ) ; }
private boolean isRecoverable ( java.io.IOException e ) { return ! ( e instanceof javax.net.ssl.SSLException ) ; }
protected java.lang.String prettify ( java.lang.String html , java.lang.String type ) { return com.google.gerrit.prettify.client.ClientSideFormatter.go ( com.google.gerrit.prettify.client.ClientSideFormatter.prettify.getContext ( ) , html , type , settings.getTabSize ( ) ) ; }
boolean isDraft ( ) { return cmd.getRefName ( ) . startsWith ( MagicBranch.NEW_DRAFT_CHANGE ) ; }
static void savePublic ( final org.eclipse.jgit.lib.FileBasedConfig sec ) throws java.io.IOException { sec.save ( ) ; }
private void init ( ) { tv ( R.id.commitMessage ) . setLinksClickable ( true ) ; }
void setOptionFlagsHex ( java.lang.String hex ) { json.addOptions ( com.google.gerrit.extensions.client.ListChangesOption.fromBits ( java.lang.Integer.parseInt ( hex , 16 ) ) ) ; }
public void testDefaultBehaviour ( ) { org.junit.Assert.assertEquals ( "a/b" , new com.google.gerrit.common.data.GitWebType ( ) . replacePathSeparator ( "a/b" ) ) ; }
public void replace ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { }
private synchronized void runHook ( java.io.File hook , java.util.List < java.lang.String > args ) { if ( hook.exists ( ) ) { hookQueue.execute ( new com.google.gerrit.common.ChangeHookRunner.HookTask ( null , hook , args ) ) ; } }
private com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { return getRefControl ( ) . getRange ( permission , isOwner ( ) ) ; }
public static void resetFromEnv ( com.google.gerrit.server.notedb.MutableNotesMigration migration ) { migration.setFrom ( com.google.gerrit.testutil.NoteDbMode.get ( ) . state ) ; }
com.google.gerrit.server.notedb.ChangeDraftUpdate create ( com.google.gerrit.server.project.ChangeControl ctl , java.util.Date when ) ;
public void registerKeys ( ) { super . registerKeys ( ) ; regNavigation = com.google.gwtexpui.globalkey.client.GlobalKey.add ( this , keysNavigation ) ; regAction = com.google.gwtexpui.globalkey.client.GlobalKey.add ( this , keysAction ) ; patchSetsBlock.setRegisterKeys ( true ) ; }
public void removeCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self ( ) . removeCacheUsageListener ( cacheUsageListener ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.RestApi.isNotFound ( caught ) ) { display ( null ) ; display ( ) ; } else { super . onFailure ( caught ) ; } }
public com.codahale.metrics.Metric apply ( com.google.gerrit.metrics.dropwizard.BucketedCallback < V > . ValueGauge in ) { return in ; }
private static < T > com.google.gwtorm.jdbc.gen.GeneratedClassLoader newLoader ( final java.lang.Class < T > schema ) { return new com.google.gwtorm.jdbc.gen.GeneratedClassLoader ( schema.getClassLoader ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo info ) { rev.set_commit ( info ) ; }
public void listTagsOfNonVisibleBranch ( ) throws java.lang.Exception { grant ( Permission.SUBMIT , project , "refs/for/refs/heads/master" ) ; grant ( Permission.SUBMIT , project , "refs/for/refs/heads/hidden" ) ; grant ( Permission.CREATE , project , "refs/tags/*" ) ; grant ( Permission.PUSH , project , "refs/tags/*" ) ; com.google.gerrit.acceptance.PushOneCommit.Tag tag1 = new com.google.gerrit.acceptance.PushOneCommit.Tag ( "v1.0" ) ; com.google.gerrit.acceptance.PushOneCommit push1 = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; push1.setTag ( tag1 ) ; com.google.gerrit.acceptance.PushOneCommit.Result r1 = push1.to ( "refs/for/master%submit" ) ; r1.assertOkStatus ( ) ; pushTo ( "refs/heads/hidden" ) ; com.google.gerrit.acceptance.PushOneCommit.Tag tag2 = new com.google.gerrit.acceptance.PushOneCommit.Tag ( "v2.0" ) ; com.google.gerrit.acceptance.PushOneCommit push2 = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; push2.setTag ( tag2 ) ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = push2.to ( "refs/for/hidden%submit" ) ; r2.assertOkStatus ( ) ; java.util.List < com.google.gerrit.extensions.common.TagInfo > result = com.google.gerrit.acceptance.rest.project.TagsIT.toTagInfoList ( adminSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) ) ; com.google.common.truth.Truth.assertThat ( result ) . hasSize ( 2 ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag1.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . revision ) . isEqualTo ( r1.getCommitId ( ) . getName ( ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 1 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag2.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 1 ) . revision ) . isEqualTo ( r2.getCommitId ( ) . getName ( ) ) ; blockRead ( project , "refs/heads/hidden" ) ; result = com.google.gerrit.acceptance.rest.project.TagsIT.toTagInfoList ( adminSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) ) ; com.google.common.truth.Truth.assertThat ( result ) . hasSize ( 1 ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag1.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . revision ) . isEqualTo ( r1.getCommitId ( ) . getName ( ) ) ; }
public void onLoad ( com.google.gerrit.plugin.client.extension.Panel panel ) { panel.setWidget ( new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel ( panel ) ) ; }
public void onPreMerge ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.git.CodeReviewCommit commit , com.google.gerrit.server.project.ProjectState destProject , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gerrit.server.git.validators.MergeValidationException ;
public boolean shouldPublish ( ) { return true ; }
public void visibleProjectDetails ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ProjectDetail > > callback ) { visibleProjectDetailsFactory.create ( ) . to ( callback ) ; }
public static com.google.gwt.event.shared.HandlerRegistration addSignOutHandler ( final com.google.gerrit.client.SignOutHandler l ) { return com.google.gerrit.client.Gerrit.globalHandlers.addHandler ( com.google.gerrit.client.SignOutEvent.getType ( ) , l ) ; }
void visibleProjects ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.Project > > callback ) ;
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo info ) { rev.set_commit ( info ) ; }
protected static MailMessage.Builder newMailMessageBuilder ( ) { com.google.gerrit.server.mail.receive.MailMessage.Builder b = com.google.gerrit.server.mail.receive.MailMessage.builder ( ) ; b.id ( "id" ) ; b.from ( new com.google.gerrit.server.mail.Address ( "Foo Bar" , "foo@bar.com" ) ) ; b.dateReceived ( new org.joda.time.DateTime ( ) ) ; b.subject ( "" ) ; return b ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private boolean canCopy ( ) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get ( ) . getCapabilities ( ) ; return ( ctl.canAdministrateServer ( ) ) || ( ctl.canPerform ( ( ( ( pluginName ) + "-" ) + ( CopyProjectCapability.ID ) ) ) ) ; }
public void testCreateSchema ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open ( ) ; schema.createSchema ( ) ; }
public void doChangeMergedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
private static void assertBadRequest ( com.google.gerrit.extensions.api.projects.Projects.ListRequest req ) throws java.lang.Exception { try { req.get ( ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException expected ) { } }
com.google.gerrit.server.change.ChangeEdits.DeleteEdit create ( com.google.gerrit.reviewdb.client.Change change , java.lang.String path ) ;
public void setStars ( com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > stars ) { this . stars = com.google.common.collect.ImmutableMultimap.copyOf ( stars ) ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.reviewdb.client.Change change , java.util.Date when ) ;
public final com.google.gerrit.extensions.api.projects.ProjectState state ( ) { if ( ( stateRaw ( ) ) == null ) { return com.google.gerrit.extensions.api.projects.ProjectState.ACTIVE ; } return com.google.gerrit.extensions.api.projects.ProjectState.valueOf ( stateRaw ( ) ) ; }
public void onMouseMove ( com.google.gwt.event.dom.client.MouseMoveEvent event ) { resizePaddingWidget ( ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { removeUI ( ) ; }
public void testAcrossMultipleLines ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 2 , 2 ) , iter.advance ( 10 ) ) ; }
private java.io.InputStream open ( java.lang.String name ) { return com.google.gerrit.main.GerritLauncher.class . getClassLoader ( ) . getResourceAsStream ( name ) ; }
public void fromRange ( com.google.gerrit.extensions.common.Comment.Range r ) { range = ( r == null ) ? null : new com.google.gerrit.reviewdb.client.CommentRange ( range.startLine , range.startCharacter , range.endLine , range.endCharacter ) ; }
public void onFailure ( java.lang.Throwable err ) { relatedChangesTab.setTitle ( Resources.M.relatedChanges ( Resources.C.notAvailable ( ) ) ) ; relatedChangesTab.setError ( err.getMessage ( ) ) ; }
org.eclipse.jgit.lib.ObjectId insert ( com.google.gerrit.server.notedb.InsertedObject obj ) { inserted.put ( obj.id ( ) , obj ) ; return obj.id ( ) ; }
public void testChangeDeletedFromIndexFailed ( ) throws java.lang.Exception { setUpMocks ( com.ericsson.gerrit.plugins.multimaster.RestSessionTest.DELETE_OP , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.FAILED , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.ERROR_MSG , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.deleteFromIndex ( com.ericsson.gerrit.plugins.multimaster.RestSessionTest.CHANGE_NUMBER ) ) . isFalse ( ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void setCommandLine ( final java.lang.String line ) { this . commandLine = line ; }
public final native com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo > pluginConfigParameter ( java.lang.String p ) ;
public void onSuccess ( final com.google.gerrit.reviewdb.client.Account result ) { if ( ! ( isAttached ( ) ) ) { return ; } display ( result ) ; haveAccount = true ; postLoad ( ) ; }
private void addWebLink ( java.lang.String href , java.lang.String name ) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor ( ) ; a.setHref ( href ) ; a.setText ( name ) ; com.google.gwt.dom.client.Element el = a.getElement ( ) ; webLinkCell.appendChild ( el ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { return controlFor ( project ) . isVisible ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( ) . run ( ) ; }
public java.io.File getBasePath ( ) { return repoManager.getBasePath ( ) ; }
public com.google.gerrit.extensions.common.CommitInfo commit ( boolean addLinks ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public boolean isLdapAuthType ( ) { return ( ( authType ) == ( com.google.gerrit.reviewdb.client.AuthType.LDAP ) ) || ( ( authType ) == ( com.google.gerrit.reviewdb.client.AuthType.LDAP_BIND ) ) ; }
private org.eclipse.jgit.lib.PersonIdent getRefLogIdent ( com.google.gerrit.server.IdentifiedUser user , java.sql.Timestamp when ) { return user.newRefLogIdent ( when , tz ) ; }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( key , repository , project , branch , files ) ; }
protected com.google.gwtorm.data.PhoneBookDb openAndCreate ( ) throws com.google.gwtorm.client.OrmException { final com.google.gwtorm.data.PhoneBookDb schema = open ( ) ; schema.createSchema ( ) ; return schema ; }
protected void loadPrev ( ) { Util.LIST_SVC.byProjectOpenPrev ( projectKey , pos , pageSize , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.data.SingleListChangeInfo > ( ) { public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; } } ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHContentUpdateResponse createContent ( java.lang.String content , java.lang.String commitMessage , java.lang.String path ) throws java.io.IOException { return ghRepository.createContent ( content , commitMessage , path ) ; }
protected com.google.gwtjsonrpc.server.SignedToken xsrfInit ( ) throws com.google.gwtjsonrpc.server.XsrfException { return new com.google.gwtjsonrpc.server.SignedToken ( ( ( 4 * 60 ) * 60 ) ) ; }
private org.spearce.jgit.lib.ObjectId emptyTree ( ) throws java.io.IOException { return new org.spearce.jgit.lib.ObjectWriter ( git ) . writeCanonicalTree ( new byte [ 0 ] ) ; }
public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key , project ) ; return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary ( patchList ) ; }
com.google.gerrit.server.index.ChangeIndexer getChangeIndexer ( com.google.gerrit.server.index.ChangeIndexer.Factory factory , com.google.gerrit.server.index.IndexCollection indexes ) { return factory.create ( indexes ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box ) { host.diffTable.onRemoveDraftBox ( box ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.Iterable < java.lang.String > projects ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , null , projects ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) ) ; }
public AccountExternalId.Key apply ( com.google.gerrit.server.git.gpg.Fingerprint fp ) { return toExtIdKey ( fp.get ( ) ) ; }
protected void configure ( ) { post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "hello-revision" ) . to ( com.googlesource.gerrit.plugins.cookbook.HelloRevisionAction.class ) ; post ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "hello-project" ) . to ( com.googlesource.gerrit.plugins.cookbook.HelloProjectAction.class ) ; }
public < T > java.util.Enumeration < T > resources ( java.lang.Class < ? extends T > resourceClass ) { return java.util.Collections.emptyEnumeration ( ) ; }
public void restore ( com.google.gerrit.extensions.api.changes.RestoreInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { restore.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot restore change" , e ) ; } }
public static java.util.EnumSet < com.google.gerrit.reviewdb.client.Change.Status > getPossibleStatus ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) { java.util.EnumSet < com.google.gerrit.reviewdb.client.Change.Status > s = com.google.gerrit.server.index.change.IndexRewriter.extractStatus ( in ) ; return s != null ? s : java.util.EnumSet.allOf ( com.google.gerrit.reviewdb.client.Change.Status.class ) ; }
public void printJson ( java.io.PrintWriter out ) { new com.google.gson.Gson ( ) . toJson ( this , com.googlesource.gerrit.plugins.github.git.GitJobStatus.class , new com.google.gson.stream.JsonWriter ( out ) ) ; }
protected com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > enforceVisibility ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > pred ) { return new com.google.gerrit.server.query.change.AndChangeSource ( pred , new com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate ( db , notesFactory , changeControlFactory , userProvider.get ( ) ) , start ) ; }
public static com.google.gerrit.server.account.externalids.ExternalId createWithEmail ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings.emptyToNull ( email ) , null ) ; }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.storage.dfs.DfsRepository > ( new org.eclipse.jgit.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
protected abstract < V > boolean isDirty ( java.util.Collection < com.google.gerrit.server.index.VersionManager.Version < V > > inUse , com.google.gerrit.server.index.VersionManager.Version < V > v ) ;
public boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH ) ) && ( canWrite ( ) ) ; }
protected void run ( ) { stdout.print ( "Hello, example administrator\n" ) ; }
public static boolean isSignedIn ( ) { return ( com.google.gerrit.client.Gerrit.getUserAccount ( ) ) != null ; }
private static java.lang.String tempNameFor ( java.lang.String name ) { java.text.SimpleDateFormat fmt = new java.text.SimpleDateFormat ( "yyMMdd_HHmm" ) ; return ( ( ( "plugin_" + name ) + "_" ) + ( fmt.format ( new java.util.Date ( ) ) ) ) + "_" ; }
private boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public void addReviewerToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public java.lang.String myUrl ( ) { throw new java.lang.UnsupportedOperationException ( "peerInfo.jgroups.myUrl not supported" ) ; }
public java.lang.String getStory ( final java.lang.String issueId ) throws java.io.IOException { return getData ( ( ( ( ( this . baseUrl ) + ( com.googlesource.gerrit.plugins.its.storyboard.StoryboardClient.STORIES_ENDPOINT ) ) + "/" ) + issueId ) ) ; }
static void deleteAllIndexes ( com.google.gerrit.elasticsearch.ElasticTestUtils.ElasticNodeInfo nodeInfo ) { nodeInfo.node.client ( ) . admin ( ) . indices ( ) . prepareDelete ( "_all" ) . execute ( ) ; }
public com.google.common.collect.ImmutableList < com.google.gerrit.server.notedb.InsertedObject > getInsertedObjects ( ) { return com.google.common.collect.ImmutableList.copyOf ( inserted.values ( ) ) ; }
public void check ( ) throws com.google.gerrit.server.StartupException { for ( com.google.gerrit.server.StartupCheck startupCheck : startupChecks ) { startupCheck.check ( ) ; } }
static void deleteIndexes ( org.elasticsearch.node.Node node , java.lang.String index ) { node.client ( ) . admin ( ) . indices ( ) . prepareDelete ( index ) . execute ( ) ; }
public void createDraftChange ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isTrue ( ) ; assertChange ( newChangeInfo ( ChangeStatus.DRAFT ) ) ; }
public boolean canForgeCommitter ( ) { if ( ( canForgeCommitter ) == null ) { canForgeCommitter = canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.FORGE_IDENTITY , com.google.gerrit.reviewdb.ApprovalCategory.FORGE_COMMITTER ) ; } return canForgeCommitter ; }
public static java.lang.String toChange ( final com.google.gerrit.client.data.ChangeInfo c ) { return "change," + ( c.getId ( ) . get ( ) ) ; }
private void assertProblems ( org.eclipse.jgit.transport.PushCertificate cert , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = checker.check ( cert ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public void onSend ( ) { java.lang.String topic = newTopic.getText ( ) ; Util.DETAIL_SVC.alterTopic ( change.getId ( ) , topic , getMessageText ( ) , createCallback ( ) ) ; }
public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; }
public boolean include ( final com.google.gwtexpui.globalkey.client.KeyCommand key ) { return ! ( key instanceof com.google.gerrit.client.ui.NeedsSignInKeyCommand ) ; }
public void onFailure ( java.lang.Throwable caught ) { enableOnFailure.setEnabled ( true ) ; }
void setContext ( final int context ) { operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { getSkipManager ( ) . removeAll ( ) ; getSkipManager ( ) . render ( context , diff ) ; updateRenderEntireFile ( ) ; } } ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String hash , java.lang.String name , com.google.gerrit.server.git.GitRepositoryManager gitRepoManager ) { project.setRevision ( hash ) ; project.setUpstream ( name ) ; return true ; }
public com.google.gerrit.server.project.ChangeControl getControl ( ) { return ctl ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.server.query.change.ChangeData cd ) { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { setEdit ( false ) ; }
private static org.eclipse.jgit.errors.ConfigInvalidException invalidConfig ( java.lang.String noteId , java.lang.String message ) { return new org.eclipse.jgit.errors.ConfigInvalidException ( java.lang.String.format ( "Invalid external id config for note %s: %s" , noteId , message ) ) ; }
public boolean hasChange ( ) { return false ; }
public boolean isEnabled ( com.google.gerrit.server.change.ChangeResource resource ) { return resource.getControl ( ) . canEditTopicName ( ) ; }
protected PushOneCommit.Result createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , git ) ; return push.to ( "refs/for/master" ) ; }
public void addReviewers ( final com.google.gerrit.reviewdb.client.Change.Id id , final java.util.List < java.lang.String > reviewers , final boolean confirmed , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ReviewerResult > callback ) { addReviewerHandlerFactory.create ( id , reviewers , confirmed ) . to ( callback ) ; }
protected void migrateData ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { db.approvalCategoryValues ( ) . insert ( java.util.Collections.singleton ( new com.google.gerrit.reviewdb.ApprovalCategoryValue ( new com.google.gerrit.reviewdb.ApprovalCategoryValue.Id ( com.google.gerrit.reviewdb.ApprovalCategory.FORGE_IDENTITY , com.google.gerrit.reviewdb.ApprovalCategory.FORGE_SERVER ) , "Forge Gerrit Code Review Server Identity" ) ) ) ; }
public void contextDestroyed ( final javax.servlet.ServletContextEvent event ) { if ( ( manager ) != null ) { manager.stop ( ) ; manager = null ; } super . contextDestroyed ( event ) ; }
private void fastForwardTagToNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , true , expectedStatus ) ; }
public static com.google.gerrit.client.rpc.RestApi comments ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "comments" ) ; }
private org.antlr.runtime.tree.Tree onlyChildOf ( org.antlr.runtime.tree.Tree r ) throws com.google.gerrit.index.query.QueryParseException { if ( ( r.getChildCount ( ) ) != 1 ) { throw com.google.gerrit.server.query.QueryBuilder.error ( ( "Expected exactly one child: " + r ) ) ; } return r.getChild ( 0 ) ; }
final native void restore_path ( java.lang.String p ) ;
public java.util.List < com.google.gerrit.server.query.Predicate < T > > getChildren ( ) { return com.google.common.collect.ImmutableList.of ( pred ) ; }
public abstract java.util.jar.JarFile getJarFile ( ) ;
public boolean isOwner ( ) { return ( ( isDeclaredOwner ( ) ) && ( ! ( controlForRef ( "refs/*" ) . isBlocked ( Permission.OWNER ) ) ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public void setPatchKey ( final com.google.gerrit.client.reviewdb.Patch.Key id ) { patchKey = id ; }
public boolean hasChange ( ) { return index.getSchema ( ) . getFields ( ) . containsKey ( ChangeField.CHANGE.getName ( ) ) ; }
void setChanges ( java.lang.String project , java.lang.String revision , com.google.gwt.core.client.JsArray < com.google.gerrit.client.change.RelatedChanges.ChangeAndCommit > changes ) { this . project = project ; render ( revision , changes ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.index.query.QueryParseException { return rewrite.rewrite ( in , com.google.gerrit.server.index.change.ChangeIndexRewriterTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
private boolean isDeclaredOwner ( ) { if ( ( declaredOwner ) == null ) { declaredOwner = state.isOwner ( user.getEffectiveGroups ( ) ) ; } return declaredOwner ; }
static Project.NameKey getProjectName ( com.google.gerrit.reviewdb.client.Change change ) { return change.getProject ( ) ; }
private final native void downloadSchemeRaw ( java.lang.String d ) ;
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { addPanel.setVisible ( true ) ; }
private void visitChildren ( org.pegdown.ast.Node node ) { for ( org.pegdown.ast.Node child : node.getChildren ( ) ) { child.accept ( this ) ; } }
public void display ( final com.google.gerrit.client.groups.GroupMap groups ) { display ( groups , null ) ; }
public final native com.google.gwt.core.client.JsArray < com.google.gerrit.client.DiffWebLinkInfo > web_links ( ) ;
public static java.util.EnumSet < com.google.gerrit.reviewdb.client.Change.Status > getPossibleStatus ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) { java.util.EnumSet < com.google.gerrit.reviewdb.client.Change.Status > s = com.google.gerrit.server.index.change.ChangeIndexRewriter.extractStatus ( in ) ; return s != null ? s : java.util.EnumSet.allOf ( com.google.gerrit.reviewdb.client.Change.Status.class ) ; }
public void start ( ) { submit.create ( ) . start ( 15 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public boolean canAdministrateServer ( ) { if ( ( canAdministrateServer ) == null ) { canAdministrateServer = ( ( user ) instanceof com.google.gerrit.server.PeerDaemonUser ) || ( canPerform ( GlobalCapability.ADMINISTRATE_SERVER ) ) ; } return canAdministrateServer ; }
public void testParse_Email1 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "author@example.com" ) ; assertNull ( a.name ) ; assertEquals ( "author@example.com" , a.email ) ; }
public void createEmptyChange_InvalidStatus ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = newChangeInfo ( ChangeStatus.SUBMITTED ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "unsupported change status" ) ; }
private void blockReviewDbUpdates ( boolean block ) { cfg.setBoolean ( "user" , null , "readGroupsFromNoteDb" , block ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { changeScreen.display ( result ) ; }
private static com.google.gitiles.FormatType set ( javax.servlet.http.HttpServletRequest req , com.google.gitiles.FormatType format ) { req.setAttribute ( com.google.gitiles.FormatType.FORMAT_TYPE_ATTRIBUTE , format ) ; return format ; }
protected boolean isAllProjects ( com.google.gerrit.server.project.ProjectResource rsrc ) { return rsrc.getControl ( ) . getProject ( ) . getNameKey ( ) . equals ( allProjectsName ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { actionsPanel.remove ( b ) ; }
private static boolean canCoalesce ( com.google.gerrit.server.diff.CharText a , int b , int e ) { while ( b < e ) { if ( ( a.charAt ( ( b ++ ) ) ) == '\n' ) { return false ; } } return true ; }
public static void registerClass ( com.google.gerrit.server.events.Event event ) { java.lang.String type = event.getType ( ) ; com.google.gerrit.server.events.EventTypes.typesByString.put ( type , event.getClass ( ) ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo.class ) . toProvider ( com.ericsson.gerrit.plugins.highavailability.peers.PluginConfigPeerInfoProvider.class ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , base ) ; }
private com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context newContinuingContext ( com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx ) { return new com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ( ctx , ctx.getSession ( ) , ctx.getCurrentUser ( ) ) ; }
private void assertApproveFails ( com.google.gerrit.acceptance.TestAccount a , java.lang.String changeId ) throws java.lang.Exception { try { approve ( a , changeId ) ; } catch ( com.google.gerrit.extensions.restapi.AuthException expected ) { } }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { if ( ( send ) == sender ) { onSend ( ) ; } else if ( ( cancel ) == sender ) { com.google.gerrit.client.Gerrit.uncache ( this ) ; goChange ( ) ; } }
public java.lang.String getText ( ) { return nameTxtBox.getText ( ) ; }
public void setSubmitType ( com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) { this . submitType = submitType ; }
public static com.google.gerrit.client.rpc.RestApi drafts ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "drafts" ) ; }
public static com.google.common.cache.CacheBuilder < java.lang.Object , java.lang.Object > newBuilder ( ) { return com.google.common.cache.CacheBuilder.newBuilder ( ) . maximumSize ( ( 10 << 10 ) ) ; }
com.google.gerrit.server.git.receive.ReplaceOp create ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Branch.NameKey dest , boolean checkMergedInto , @ com.google.inject.assistedinject.Assisted ( value = "priorPatchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId , @ com.google.inject.assistedinject.Assisted ( value = "priorCommitId" ) org.eclipse.jgit.lib.ObjectId priorCommit , @ com.google.inject.assistedinject.Assisted ( value = "patchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , @ com.google.inject.assistedinject.Assisted ( value = "commitId" ) org.eclipse.jgit.lib.ObjectId commitId , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.List < java.lang.String > groups , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.receive.ReceiveCommits.MagicBranchInput magicBranch , @ com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate ) ;
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; com.google.gerrit.client.Gerrit.doSignIn ( com.google.gwt.user.client.History.getToken ( ) ) ; }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.ApprovalsUtil.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ApprovalsUtil.getReviewers ( allApprovals ( db ) ) ; }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { com.google.gerrit.common.changes.Side side = getSideFromCm ( cm ) ; com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.create ( path , side , ( line + 1 ) , null , null ) ; return addDraftBox ( info , false ) ; }
public com.google.gerrit.common.data.GitwebType getGitwebType ( ) { return type ; }
public void run ( ) { closedIndex.close ( ) ; }
private static boolean isJsonBody ( com.google.gwt.http.client.Response res ) { return com.google.gerrit.client.rpc.RestApi.isContentType ( res , JsonConstants.JSON_TYPE ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( user.getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ; }
public void run ( ) { cmB.operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { apply.run ( ) ; } } ) ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public static com.google.gerrit.lucene.LuceneIndexModule singleVersionAllLatest ( int threads ) { return new com.google.gerrit.lucene.LuceneIndexModule ( com.google.common.collect.ImmutableMap.< java.lang.String , java.lang.Integer > of ( ) , threads , false ) ; }
public void go ( ) { if ( ( com.google.gerrit.client.Gerrit.patchScreen ) != null ) { com.google.gerrit.client.Gerrit.patchScreen.setTopView ( tv ) ; } com.google.gwt.dom.client.AnchorElement.as ( getElement ( ) ) . blur ( ) ; }
public void cancel ( ) { onExit ( 0 ) ; }
public static java.lang.String format ( java.lang.String hostname , int port ) { if ( 0 <= ( hostname.indexOf ( ':' ) ) ) { hostname = ( "[" + hostname ) + "]" ; } return ( hostname + ":" ) + port ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { com.google.gerrit.client.projects.ProjectMap.projects ( ) . addParameterRaw ( "type" , "ALL" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
void appendUser ( java.lang.String key , com.google.gerrit.server.account.AccountInfo user ) { sb.append ( key ) ; sb.append ( ": " ) ; appendUserData ( user ) ; sb.append ( "\n" ) ; }
public void remove ( com.google.gerrit.extensions.api.changes.DeleteReviewerInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteReviewer.apply ( reviewer , input ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot remove reviewer" , e ) ; } }
private static boolean acceptsJson ( javax.servlet.http.HttpServletRequest req ) { return ( req != null ) && ( com.google.gerrit.httpd.restapi.RestApiServlet.isType ( com.google.gerrit.httpd.restapi.RestApiServlet.JSON_TYPE , req.getHeader ( "Accept" ) ) ) ; }
protected void configure ( ) { factory ( LfsGetLocksAction.Factory.class ) ; factory ( LfsPutLocksAction.Factory.class ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { changes = com.google.gerrit.client.rpc.Natives.asList ( result ) ; base.setEnabled ( true ) ; }
public final boolean siteHasUsernames ( ) { if ( ( ( isCustomExtension ( ) ) && ( ( httpPasswordUrl ( ) ) != null ) ) && ( ! ( canEdit ( FieldName.USER_NAME ) ) ) ) { return false ; } return true ; }
private com.google.gerrit.server.project.ChangeControl changeControl ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gerrit.server.change.NoSuchChangeException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.change.Change c = cd.change ( ) ; return changeControlFactory.controlFor ( c , identifiedUserFactory.create ( c.getOwner ( ) ) ) ; ccd5b7 = $missing$ ; }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
public void testContainsFalseWithTwoElements ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; ds.add ( 4 ) ; com.google.common.truth.Truth.assertThat ( ds ) . doesNotContain ( 3 ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getPatchSetWebLink ( java.lang.String projectName , java.lang.String commit ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s/+/%s" , baseUrl , projectName , commit ) , Target.BLANK ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , starredChangesCache , remotePeerProvider , dbProvider , id ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doBrowse ( ) ; }
com.google.gerrit.server.IdentifiedUser provideCurrentUser ( com.google.gerrit.server.CurrentUser user ) { if ( user instanceof com.google.gerrit.server.IdentifiedUser ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) ; } throw new com.google.inject.ProvisionException ( com.google.gerrit.common.errors.NotSignedInException.MESSAGE , new com.google.gerrit.common.errors.NotSignedInException ( ) ) ; }
private org.eclipse.jgit.lib.Ref getDraftRef ( com.google.gerrit.acceptance.TestAccount account , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openMetadataRepository ( allUsers ) ) { return repo.exactRef ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( account.id , changeId ) ) ; } }
com.google.gerrit.server.git.WorkQueue.Executor getExecutor ( @ com.google.gerrit.server.config.GerritServerConfig final org.eclipse.jgit.lib.Config config , final com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "receive" , null , "threadPoolSize" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) ) ; return queues.createQueue ( poolSize , "ReceiveCommits" ) ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , com.google.common.collect.ImmutableList.of ( ) , com.google.common.collect.ImmutableSet.of ( ) , 0 , 0 , 0 , 0 ) ; }
public java.lang.String describeForException ( ) { if ( ( forUser ) == ( com.google.gerrit.server.permissions.LabelPermission.ForUser.ON_BEHALF_OF ) ) { return "labelAs " + ( label.formatWithEquals ( ) ) ; } return "label " + ( label.formatWithEquals ( ) ) ; }
public java.lang.String getLabel ( ) { return getLabelId ( ) . get ( ) ; }
public void onDraftPublished ( com.google.gerrit.extensions.events.DraftPublishedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo c = event.getChange ( ) ; onEvent ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c.project ) , c._number , event.getWho ( ) . email ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHContent getFileContent ( java.lang.String path ) throws java.io.IOException { return ghRepository.getFileContent ( path ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , getRefControl ( ) . forUser ( who ) , notes ) ; }
public java.lang.Class < com.google.gerrit.server.group.PutMembers.Input > inputType ( ) { return com.google.gerrit.server.group.PutMembers.Input.class ; }
private boolean isLive ( final java.io.File entry ) { final java.lang.String name = entry.getName ( ) ; return ErrorLogFile.LOG_NAME.equals ( name ) ; }
public static void drop ( com.google.gerrit.testing.InMemoryDatabase db ) { if ( db != null ) { db.drop ( ) ; } }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.groups.GroupInfo item ) { return item.getGroupId ( ) ; }
protected void onExit ( final int rc ) { eventListenerRegistration.remove ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
public boolean canCreateAccount ( ) { return ( canPerform ( GlobalCapability.CREATE_ACCOUNT ) ) || ( user.isAdministrator ( ) ) ; }
public long getTail ( ) throws java.io.IOException { if ( ( getHead ( ) ) == 0 ) { return 0 ; } long tail = stores.tail.get ( ) ; return tail < 1 ? 1 : tail ; }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l.onSignIn ( ) ; } }
public com.google.gerrit.server.project.ListProjects.FilterType getType ( ) { return type ; }
private Account.Id parseIdent ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { return parseIdent ( commit.getCommitterIdent ( ) ) ; }
private void fastForwardTagToExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , false , expectedStatus ) ; }
com.google.gerrit.extensions.common.AccountInfo getReviewer ( ) ;
public void testCreateProjectHttpWhenProjectAlreadyExists_Conflict ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( ( "/projects/" + ( allProjects.get ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_CONFLICT ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { addRight.setEnabled ( true ) ; nameTxt.setText ( "" ) ; referenceTxt.setText ( "" ) ; display ( result ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.ChangeIndex.class ) . toInstance ( ChangeIndex.DISABLED ) ; bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . toInstance ( ChangeIndexer.DISABLED ) ; }
public javax.servlet.ServletOutputStream getOutputStream ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public Account.Id getDeletedAssignee ( ) { return ( deletedAssignee ) != null ? deletedAssignee.getId ( ) : null ; }
public java.util.List < java.lang.String > getTeamnamesForRepositoryRole ( java.lang.String role ) { return java.util.Collections.emptyList ( ) ; }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { return addDraftBox ( com.google.gerrit.client.changes.CommentInfo.createRange ( path , getSideFromCm ( cm ) , ( line + 1 ) , null , null , null ) ) ; }
public void testChangeOwner_OwnerACLGranted ( ) throws java.lang.Exception { grantApproveToChangeOwner ( ) ; approve ( user , createMyChange ( ) ) ; }
public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent arg0 ) { setEdit ( true ) ; }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) ; }
private boolean isSignIn ( final com.google.gerrit.httpd.auth.openid.SignInMode mode ) { switch ( mode ) { case SIGN_IN : case REGISTER : return true ; default : return false ; } }
private java.lang.String url ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r ) { return com.google.gerrit.common.PageLinks.toChange ( changeId , r.id ( ) ) ; }
private static com.google.gerrit.reviewdb.client.AccountGroup missing ( com.google.gerrit.reviewdb.client.AccountGroup.Id key ) { com.google.gerrit.reviewdb.client.AccountGroup.NameKey name = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( ( "Deleted Group" + key ) ) ; return new com.google.gerrit.reviewdb.client.AccountGroup ( name , key , null ) ; }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( accountCache , emails , key , repository , project , branch , files ) ; }
public void setCharacterEncoding ( java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
void unregisterReplyBox ( ) { replyBox = null ; }
void onDeleteChange ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.DraftActions.delete ( changeId ) ; }
private static boolean isConfig ( com.google.gerrit.server.project.ListBranches.BranchInfo i ) { return RefNames.REFS_CONFIG.equals ( i.ref ) ; }
private void autoReindexIfStale ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { if ( autoReindexIfStale ) { @ java.lang.SuppressWarnings ( value = "unused" ) java.util.concurrent.Future < ? > possiblyIgnoredError = reindexIfStale ( uuid ) ; } }
boolean canForceEditTopicName ( ) { return canForcePerform ( Permission.EDIT_TOPIC_NAME ) ; }
public void addChangeListener ( com.google.gerrit.common.ChangeListener listener , com.google.gerrit.server.CurrentUser user ) { }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.server.project.ChangeControl ctl , java.util.Date when , java.util.Comparator < java.lang.String > labelNameComparator ) ;
private com.google.gerrit.server.index.change.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.index.query.QueryParseException { return query ( p , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ; }
public void suggestParentCandidates ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.client.Project > > callback ) { suggestParentCandidatesHandlerFactory.create ( ) . to ( callback ) ; }
public void onChangeEvent ( final com.google.gerrit.server.events.ChangeEvent event ) { offer ( event ) ; }
public void printTest ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( sshSession.exec ( "cookbook print" ) ) . isEqualTo ( "Hello world!\n" ) ; com.google.common.truth.Truth.assertThat ( sshSession.hasError ( ) ) . isFalse ( ) ; }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { toGerrit ( com.google.gerrit.common.PageLinks.toChangeQuery ( query ) , req , rsp ) ; }
void onCreate ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) throws java.io.IOException ;
public void onSuccess ( com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change ) { setRevisions ( change , patchSet ) ; addHeader ( change ) ; display ( change ) ; }
public boolean isSampledStatisticsEnabled ( ) { return self ( ) . isSampledStatisticsEnabled ( ) ; }
public com.google.gerrit.extensions.registration.DynamicMap < com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.ChangeEditResource > > views ( ) { throw new java.lang.IllegalStateException ( "not yet implemented" ) ; }
com.google.gerrit.client.diff.UnifiedChunkManager.LineSidePair getLineSidePairFromCmLine ( int cmLine ) { return chunkManager.getLineSidePairFromCmLine ( cmLine ) ; }
void onCherryPick ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.CherryPickAction.call ( cherrypick , changeId , revision , project , message ) ; }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; for ( net.codemirror.lib.CodeMirror cm : getCms ( ) ) { cm.adjustHeight ( height ) ; } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.DELETE , cb ) ; }
public void anonymousAccess ( ) throws java.lang.Exception { setApiUserAnonymous ( ) ; gApi.config ( ) . server ( ) . getInfo ( ) ; }
private static void checkMutuallyExclusiveLabels ( java.util.Set < java.lang.String > labels ) { if ( labels.containsAll ( com.google.common.collect.ImmutableSet.of ( com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL , com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL ) ) ) { throw com.google.gerrit.server.StarredChangesUtil.IllegalLabelException.mutuallyExclusiveLabels ( com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL , com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL ) ; } }
private java.lang.String commitId ( int i ) { return results.get ( i ) . getCommitId ( ) . name ( ) ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < com.google.gwt.user.client.ui.SuggestOracle.Suggestion > event ) { if ( submitOnSelection ) { submitOnSelection = false ; doAddNew ( ) ; } }
public void setReversePatchSetOrder ( final boolean reversePatchSetOrder ) { this . reversePatchSetOrder = reversePatchSetOrder ; }
private static com.google.gerrit.client.rpc.RestApi api ( int id , java.lang.String action ) { return new com.google.gerrit.client.rpc.RestApi ( ( ( ( "/changes/" + id ) + "/" ) + action ) ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
private com.google.gerrit.httpd.raw.Paths getPaths ( ) { if ( ( paths ) == null ) { paths = new com.google.gerrit.httpd.raw.Paths ( ) ; } }
private void verifyLocks ( java.lang.String project , com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext action ) throws java.io.IOException { com.googlesource.gerrit.plugins.lfs.locks.LfsPutLocksAction.log.debug ( "Verify list of locks for {} project" , project ) ; action.sendResponse ( new com.googlesource.gerrit.plugins.lfs.locks.LfsVerifyLocksResponse ( java.util.Collections.emptyList ( ) , java.util.Collections.emptyList ( ) , null ) ) ; }
public void setParentToSelfNotAllowed ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( "cycle exists between" ) ; gApi.projects ( ) . name ( project.get ( ) ) . parent ( project.get ( ) ) ; }
public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider ( ) { return com.google.inject.util.Providers.of ( db ) ; }
static java.nio.file.Path getDir ( com.google.gerrit.server.config.SitePaths sitePaths , java.lang.String name , com.google.gerrit.server.index.Schema < ? > schema ) { return sitePaths.index_dir.resolve ( java.lang.String.format ( "%s_%04d" , name , schema.getVersion ( ) ) ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . addValue ( getId ( ) ) . toString ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; if ( isInvalidSshKey ( caught ) ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidSshKeyError ( ) ) . center ( ) ; } else { super . onFailure ( caught ) ; } }
protected void add ( com.google.gerrit.server.mail.RecipientType type , com.google.gerrit.server.mail.ChangeEmail.Watchers.List list ) { for ( com.google.gerrit.reviewdb.client.Account.Id user : list.accounts ) { add ( type , user ) ; } for ( com.google.gerrit.server.mail.Address addr : list.emails ) { add ( type , addr ) ; } }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groups ( final com.google.gerrit.server.account.AccountState who ) { return who.getInternalGroups ( ) ; }
public java.lang.String getUserName ( ) { return state ( ) . getUserName ( ) . orElse ( null ) ; }
public com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput apply ( com.google.gerrit.extensions.common.CommentInfo info ) { com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ci = new com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ( ) ; ci.path = path ; com.google.gerrit.acceptance.server.change.CommentsIT.copy ( info , ci ) ; return ci ; }
public void setUp ( ) { com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; }
private PushOneCommit.Result createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
public void listNonExistingGroupIncludes_NotFound ( ) throws java.lang.Exception { java.lang.String name = name ( "non-existing" ) ; com.google.common.truth.Truth.assertThat ( adminSession.get ( ( ( "/groups/" + name ) + "/groups/" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent e ) { setEdit ( true ) ; }
public void emptyChangeUpdate ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( newChange ( ) , changeOwner ) ; update.commit ( ) ; org.junit.Assert.assertNull ( update.getRevision ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public com.google.gerrit.server.project.TagResource parse ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return new com.google.gerrit.server.project.TagResource ( resource.getControl ( ) , list.get ( ) . get ( resource , id ) ) ; }
public void run ( ) { if ( cm.hasActiveLine ( ) ) { newDraft ( cm ) ; } }
public void parseLabel ( java.lang.String label , java.lang.String text , com.google.gerrit.server.git.ValidationError.Sink errors ) throws java.io.IOException { destinations.replaceValues ( label , com.google.gerrit.server.git.DestinationList.toSet ( parse ( text , ( ( com.google.gerrit.server.git.DestinationList.DIR_NAME ) + label ) , com.google.gerrit.server.git.TRIM , null , errors ) ) ) ; }
public void addUser ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = "sandboxuser" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/accounts/sandboxuser" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_CREATED ) ; }
public WorkQueue.Executor createMergeabilityChecksExecutor ( com.google.gerrit.server.git.WorkQueue queues ) { return queues.createQueue ( 1 , "MergeabilityChecks" ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { actionsPanel.remove ( b ) ; fireOnSuggestRefresh ( ) ; }
public void testIndexTaskToString ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexTask indexTask = indexEventHandler.new com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexTask ( com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.CHANGE_ID , false ) ; com.google.common.truth.Truth.assertThat ( indexTask.toString ( ) ) . isEqualTo ( java.lang.String.format ( "[%s] Index change %s in target instance" , com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.PLUGIN_NAME , com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandlerTest.CHANGE_ID ) ) ; }
private java.io.File getFile ( java.lang.String includeFileName ) { if ( includeFileName.startsWith ( "/" ) ) { return new java.io.File ( basePath , includeFileName ) ; } else { return new java.io.File ( currentIs.getCurrentDir ( ) , includeFileName ) ; } }
public void testLinkify_AngleBrackets1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A <http://go.here/> B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( "<p>A &lt;<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>&gt; B</p>" , n.asString ( ) ) ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision ) ; } }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( project , resource , revId ) ; }
public void removeChangeListener ( com.google.gerrit.common.ChangeListener listener ) { listeners.remove ( listener ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated , boolean ignoreRebaseEmptyPatchSet ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , ignoreRebaseEmptyPatchSet ) ; }
private void configureCmdLineParser ( ) { factory ( CmdLineParser.Factory.class ) ; registerOptionHandler ( PatchSet.Id.class , com.google.gerrit.server.ssh.commands.PatchSetIdHandler.class ) ; registerOptionHandler ( com.google.gerrit.server.project.ProjectControl.class , com.google.gerrit.server.ssh.commands.ProjectControlHandler.class ) ; }
public void testIsIgnoredTopicChangedEvent ( ) { com.google.gerrit.server.events.TopicChangedEvent event = new com.google.gerrit.server.events.TopicChangedEvent ( ) ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertFalse ( itsConfig.isEnabled ( event ) ) ; assertLogMessageContains ( "not recognised and ignored" ) ; }
private void colorLines ( net.codemirror.lib.CodeMirror cm , int line , int cnt ) { for ( int i = 0 ; i < cnt ; i ++ ) { cm.addLineClass ( ( line + i ) , LineClassWhere.WRAP , diffTable.style.diff ( ) ) ; } }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l.onSignIn ( ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doExternalSearch ( ) ; }
private void updateSelection ( ) { if ( cm.somethingSelected ( ) ) { net.codemirror.lib.TextMarker.FromTo sel = cm.getSelectedRange ( ) ; cm.setSelection ( sel.getFrom ( ) , sel.getTo ( ) ) ; } }
private void assumeNoteDbDisabled ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) . isNotEqualTo ( NoteDbMode.CHECK ) ; }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( err ) ; } }
public com.googlesrouce.gerrit.plugins.github.git.GHPullRequest getPullRequest ( int i ) throws java.io.IOException { return ghRepository.getPullRequest ( i ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( isSignedIn ( ) ) { return identified.create ( AccessPath.WEB , val.getAccountId ( ) ) ; } return anonymous ; }
public void setCookie ( javax.servlet.http.HttpServletResponse response , com.gitblit.models.UserModel user ) { }
private org.eclipse.jgit.lib.ObjectId createCommit ( com.google.gerrit.server.IdentifiedUser me , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.revwalk.RevCommit revision , org.eclipse.jgit.lib.ObjectId tree ) throws java.io.IOException { return createCommit ( me , inserter , revision , tree , revision.getFullMessage ( ) ) ; }
protected void onOpenRow ( final int row ) { final com.google.gerrit.client.changes.ChangeInfo c = getRowItem ( row ) ; final com.google.gerrit.reviewdb.client.Change.Id id = c.legacy_id ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.highavailability.Configuration.class ) . in ( Scopes.SINGLETON ) ; install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.highavailability.event.EventModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.highavailability.index.IndexModule ( ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNewBranch ( ) ; } }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public static com.google.gerrit.client.rpc.RestApi revision ( int id , java.lang.String revision ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( revision ) ; }
public void noRevisionOptions ( ) throws java.lang.Exception { com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId ) ; org.junit.Assert.assertNull ( c.currentRevision ) ; org.junit.Assert.assertNull ( c.revisions ) ; }
com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands ( ) throws java.io.IOException { initChangeRepo ( ) ; return changeRepo.cmds ; }
private com.google.gerrit.client.diff.FileCommentPanel getPanelFromSide ( com.google.gerrit.common.changes.Side side ) { return side == ( com.google.gerrit.common.changes.Side.PARENT ) ? fileCommentPanelA : fileCommentPanelB ; }
public boolean updateChange ( com.google.gerrit.server.update.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { boolean ret = patchSetInserter.updateChange ( ctx ) ; rebasedPatchSet = patchSetInserter.getPatchSet ( ) ; return ret ; }
void onExpandBefore ( com.google.gwt.event.dom.client.ClickEvent e ) { otherBar.expandBefore ( ) ; expandBefore ( ) ; cm.focus ( ) ; }
protected void doPost ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) { process ( req , rsp , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation.INDEX ) ; }
public java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > listRepositories ( java.util.Set < java.lang.String > branches ) throws java.io.IOException , org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException , org.eclipse.jgit.transport.resolver.ServiceNotEnabledException ;
public void copy ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { db.patchSetApprovals ( ) . insert ( getForPatchSet ( db , ctl , ps ) ) ; }
private void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd , final java.lang.String why ) { cmd.setResult ( ReceiveCommand.Result.REJECTED_OTHER_REASON , why ) ; commandProgress.update ( 1 ) ; }
private static java.lang.String readDefaultCSS ( ) { if ( ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.defaultCss ) != null ) { return com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.defaultCss ; } try { return com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.readDefaultCss ( new java.util.concurrent.atomic.AtomicBoolean ( ) ) ; } catch ( java.io.IOException err ) { return "" ; } }
public void write ( java.io.Writer w ) throws java.io.IOException { final java.text.SimpleDateFormat fmt ; fmt = new java.text.SimpleDateFormat ( "EEE, d MMM yyyy HH:mm:ss Z" , java.util.Locale.ENGLISH ) ; w.write ( fmt.format ( value ) ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE ) ; }
private org.spearce.jgit.lib.Repository getRepository ( ) { try { return server.getRepositoryCache ( ) . get ( projectName ) ; } catch ( com.google.gerrit.git.InvalidRepositoryException e ) { return null ; } }
com.google.gerrit.httpd.WebSessionManager.Val get ( final com.google.gerrit.httpd.WebSessionManager.Key key ) { return self.getIfPresent ( key.token ) ; }
private com.google.gerrit.common.changes.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) == null ) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION ; }
public static java.lang.String toSideBySide ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , revision , fileName , null , 0 ) ; }
public void selectHttpUrl ( ) throws java.io.IOException , java.net.URISyntaxException , org.eclipse.jgit.api.errors.GitAPIException { BRANCH ( c303a3 ) ; }
public static com.google.gerrit.client.changes.ReviewInput create ( ) { com.google.gerrit.client.changes.ReviewInput r = createObject ( ) . cast ( ) ; r.init ( ) ; return r ; }
public com.google.gerrit.server.mail.CommentSender create ( com.google.gerrit.reviewdb.client.Change change ) ;
private void closeConnection ( java.sql.Connection conn ) { if ( conn != null ) { try { conn.close ( ) ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn ( "Cannot close connection" , e ) ; } } }
protected com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { return com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle.create ( new org.eclipse.jgit.revwalk.RevWalk ( repo ) , readRef ( repo ) ) ; }
private static void noCache ( javax.servlet.http.HttpServletResponse res ) { res.setHeader ( "Expires" , "Fri, 01 Jan 1980 00:00:00 GMT" ) ; res.setHeader ( "Pragma" , "no-cache" ) ; res.setHeader ( "Cache-Control" , "no-cache, must-revalidate" ) ; res.setHeader ( "Content-Disposition" , "attachment" ) ; }
public final com.googlesource.gerrit.plugins.xdocs.client.ChangeStatus getStatus ( ) { return com.googlesource.gerrit.plugins.xdocs.client.ChangeStatus.valueOf ( statusRaw ( ) ) ; }
public void doFilter ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { monitoring.doFilter ( request , response , chain ) ; }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.server.account.AccountState > i : indexes.getWriteIndexes ( ) ) { i.replace ( byIdCache.get ( id ) ) ; } }
public void addReviewerByEmailToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( email ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
T call ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory ) throws java.lang.Exception ;
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; }
public static void setup ( ) { com.google.gerrit.server.events.EventTypes.register ( com.ericsson.gerrit.plugins.syncevents.SyncEventsRestApiServletTest.RefReplicationDoneEvent.TYPE , com.ericsson.gerrit.plugins.syncevents.SyncEventsRestApiServletTest.RefReplicationDoneEvent.class ) ; com.google.gwtorm.client.KeyUtil.setEncoderImpl ( new com.google.gwtorm.server.StandardKeyEncoder ( ) ) ; }
public void BROKEN_testIsEnabledUnknownEvent ( ) { com.google.gerrit.server.events.Event event = new com.google.gerrit.server.events.Event ( "foo" ) { } ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertFalse ( itsConfig.isEnabled ( event ) ) ; assertLogMessageContains ( "not recognised and ignored" ) ; }
private org.eclipse.jgit.revwalk.RevCommit getHead ( org.eclipse.jgit.lib.Repository repo , java.lang.String name ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return rw.parseCommit ( repo.getRef ( name ) . getObjectId ( ) ) ; } }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > release ( java.util.Collection < com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > > fields ) { return new com.google.gerrit.server.index.Schema ( true , fields ) ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public void execute ( java.lang.String issue , java.lang.Iterable < com.googlesource.gerrit.plugins.hooks.workflow.ActionRequest > actions ) { for ( com.googlesource.gerrit.plugins.hooks.workflow.ActionRequest actionRequest : actions ) { execute ( issue , actionRequest ) ; } }
public java.lang.Thread newThread ( final java.lang.Runnable task ) { final java.lang.Thread t = parent.newThread ( task ) ; t.setPriority ( java.lang.Thread.MIN_PRIORITY ) ; return t ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return format ( new com.google.gerrit.server.query.change.ChangeData ( rsrc.getControl ( ) ) ) ; }
private void allowPushOfTagsForNewCommits ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , "refs/tags/*" , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( cherryPicksTab ) == null ) { cherryPicksTab = createTab ( Resources.C.cherryPicks ( ) , Resources.C.cherryPicksTooltip ( ) ) ; cherryPicksTab.registerKeys ( ) ; cherryPicksTab.setShowBranches ( true ) ; } return cherryPicksTab ; }
public static com.google.gerrit.server.notedb.MutableNotesMigration newNotesMigrationFromEnv ( ) { com.google.gerrit.server.notedb.MutableNotesMigration m = com.google.gerrit.server.notedb.MutableNotesMigration.newDisabled ( ) ; com.google.gerrit.testutil.NoteDbMode.resetFromEnv ( m ) ; return m ; }
java.lang.String onSubmit ( java.lang.String newCommitMessage , org.eclipse.jgit.revwalk.RevCommit original , org.eclipse.jgit.revwalk.RevCommit mergeTip , com.google.gerrit.server.project.ChangeControl ctl ) ;
public void remove ( K key ) { if ( key != null ) { cache.remove ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) ) ; } }
public void addReviewerToWipChangeInReviewDbNotifyAll ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeFileApi.FileContent result ) { textArea.setText ( result.text ( ) ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.Class < T > classOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . fromJson ( buildJsonRaw ( path ) , classOfT ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
protected void configure ( ) { bind ( com.google.gerrit.server.permissions.PermissionBackend.class ) . to ( com.google.gerrit.server.project.DefaultPermissionBackend.class ) . in ( Scopes.SINGLETON ) ; bind ( ProjectControl.GenericFactory.class ) ; factory ( ProjectControl.AssistedFactory.class ) ; bind ( ChangeControl.GenericFactory.class ) ; bind ( ChangeControl.Factory.class ) ; }
protected java.lang.String getName ( ) { return hook.getName ( ) ; }
static ExternalId.Key toExtIdKey ( org.bouncycastle.openpgp.PGPPublicKey key ) { return ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_GPGKEY , com.google.common.io.BaseEncoding.base16 ( ) . encode ( key.getFingerprint ( ) ) ) ; }
private void updateManifest ( java.lang.String projectName , java.lang.String refName , com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest , java.lang.String manifestSrc ) throws java.io.IOException , javax.xml.bind.JAXBException { updateManifest ( projectName , refName , manifest , manifestSrc , "" ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { openForm.setVisible ( true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; suggestBox.setFocus ( false ) ; }
protected void configureCommands ( ) { command ( com.google.gerrit.plugins.ShowAccountCommand.class ) ; alias ( "show-account" , com.google.gerrit.plugins.ShowAccountCommand.class ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { doSave ( ) ; }
public org.eclipse.jgit.lib.ObjectId commit ( final org.eclipse.jgit.lib.ObjectInserter inserter , final org.eclipse.jgit.lib.CommitBuilder mergeCommit ) throws java.io.IOException , java.io.UnsupportedEncodingException { org.eclipse.jgit.lib.ObjectId id = inserter.insert ( mergeCommit ) ; inserter.flush ( ) ; return id ; }
public abstract java.util.List < com.google.gerrit.server.query.change.ChangeData > changes ( ) ;
protected abstract com.google.gwtorm.nosql.IndexFunction < T > getKeyIndex ( ) ;
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; resizeBoxPaddings ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doChangeUserName ( ) ; }
void cancel ( ) { canceled = true ; }
public synchronized com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) { return byUsername.get ( username ) ; }
private long getGerritSessionMaxAgeMillis ( ) { return com.google.gerrit.server.config.ConfigUtil.getTimeUnit ( config.gerritConfig , "cache" , com.googlesource.gerrit.plugins.github.oauth.OAuthCookieProvider.CACHE_NAME , "maxAge" , TokenCipher.MAX_COOKIE_TIMEOUT , java.util.concurrent.TimeUnit.SECONDS ) ; }
public int hashCode ( ) { return get ( ) . hashCode ( ) ; }
java.lang.String getTitle ( java.lang.String count ) { }
public < T > java.util.Enumeration < T > resources ( java.lang.Class < ? extends T > resourceClass ) { return java.util.Collections.emptyEnumeration ( ) ; }
private void initChannels ( ) { setChannelFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.server.ServerChannel > > asList ( new org.apache.sshd.server.channel.ChannelSession.Factory ( ) ) ) ; }
public java.lang.String intercept ( java.lang.String in ) { if ( pattern.matcher ( in ) . matches ( ) ) { return in ; } com.googlesource.gerrit.plugins.readonly.DisableCommandInterceptor.log.warn ( ( "Disabling command: " + in ) ) ; return ( pluginName ) + " disable" ; }
public GroupDescription.Basic parseInternal ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { com.google.gerrit.common.data.GroupDescription.Basic group = parse ( id ) ; if ( ( com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( group ) ) == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "External Group Not Allowed: %s" , id ) ) ; } return group ; }
public void testUserNotPresent2 ( ) throws java.lang.Exception { testUserNotPresent ( ) ; BRANCH ( 8 ) ; com.google.gerrit.acceptance.a4d86 Merge ; }
public void close ( ) { if ( ( conn ) != null ) { try { conn.close ( ) ; } catch ( java.sql.SQLException err ) { } conn = null ; } }
public java.lang.Object createEntry ( java.lang.Object key ) throws java.lang.Exception { return this . createEntry ( ( ( K ) ( key ) ) ) ; }
public void changeDetail ( final com.google.gerrit.client.reviewdb.Change.Id id , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.ChangeDetail > callback ) { run ( callback , new com.google.gerrit.server.rpc.ChangeDetailFactory ( id ) ) ; }
com.google.gerrit.server.account.AccountSshKey create ( com.google.gerrit.server.account.AccountSshKey.Id id , java.lang.String encoded ) throws com.google.gerrit.common.errors.InvalidSshKeyException ;
public com.google.gerrit.extensions.client.SubmitType testSubmitType ( com.google.gerrit.extensions.common.TestSubmitRuleInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return testSubmitType.apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot test submit type" , e ) ; } }
public com.google.gerrit.server.project.ProjectControl validateFor ( final com.google.gerrit.client.reviewdb.Project.NameKey nameKey ) throws com.google.gerrit.server.project.NoSuchProjectException { final com.google.gerrit.server.project.ProjectControl c = controlFor ( nameKey ) ; if ( ! ( c.isVisible ( ) ) ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( nameKey ) ; } return c ; }
public void setMaxArity ( int max ) { if ( max < 8 ) throw new java.lang.IllegalStateException ( ( "invalid arity " + max ) ) ; if ( ( engine.aregs ) != null ) throw new java.lang.IllegalStateException ( "Prolog already initialized" ) ; engine.maxArity = max ; }
public void manualCertificationMatchesExternalId ( ) throws java.lang.Exception { addExternalId ( "foo" , "myId" , null ) ; assertNoProblems ( com.google.gerrit.gpg.testutil.TestKey.key5 ( ) ) ; }
public static java.lang.String refsUsers ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.REFS_USERS ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( accountId.get ( ) ) ) ; return r.toString ( ) ; }
private void checkPermission ( ) throws com.google.gerrit.common.errors.PermissionDeniedException { if ( ! ( currentUser.getCapabilities ( ) . canAccessDatabase ( ) ) ) { throw new com.google.gerrit.common.errors.PermissionDeniedException ( java.lang.String.format ( "%s does not have \"Perform Raw Query\" capability." , currentUser.getUserName ( ) ) ) ; } }
public void logout ( com.gitblit.models.UserModel user ) { }
public void setParents ( java.util.List < org.eclipse.jgit.revwalk.RevCommit > parents ) throws java.lang.Exception { commitBuilder.noParents ( ) ; for ( org.eclipse.jgit.revwalk.RevCommit p : parents ) { commitBuilder.parent ( p ) ; } }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.group.InternalGroup > member ( com.google.gerrit.reviewdb.client.Account.Id memberId ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.MEMBERS , memberId.toString ( ) ) ; }
public com.google.gerrit.server.patch.PatchListEntry get ( final java.lang.String fileName ) { final int index = search ( fileName ) ; return 0 <= index ? patches [ index ] : com.google.gerrit.server.patch.PatchListEntry.empty ( fileName ) ; }
private static org.apache.lucene.index.Term idTerm ( com.google.gerrit.reviewdb.client.AccountGroup group ) { return com.google.gerrit.lucene.LuceneGroupIndex.idTerm ( group.getGroupUUID ( ) ) ; }
public void testLinkify_SimpleHttp1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A http://go.here/ B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; assertNotSame ( o , n ) ; assertEquals ( "<p>A <a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a> B</p>" , n.asString ( ) ) ; }
public static com.google.gerrit.server.account.AuthRequest forExternalUser ( java.lang.String username ) { com.google.gerrit.reviewdb.client.AccountExternalId.Key i = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_EXTERNAL , username ) ; com.google.gerrit.server.account.AuthRequest r = new com.google.gerrit.server.account.AuthRequest ( i.get ( ) ) ; r.setUserName ( username ) ; return r ; }
void onDeleteEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.deleteEdit ( changeId ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; change.setLastSha1MergeTested ( null ) ; return change ; } else { return null ; } }
public void onSuccess ( com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.setAccountDiffPreference ( get ( ) ) ; cb.onSuccess ( result ) ; }
public void parse ( ) { generalPreferences = parse ( null ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getFileWebLink ( java.lang.String projectName , java.lang.String revision , java.lang.String fileName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s/+/%s/%s" , baseUrl , projectName , revision , fileName ) , Target.BLANK ) ; }
public void createBranch_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class ) ; }
private static java.lang.String queryOutgoing ( java.lang.String who ) { return "is:open owner:" + who ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.client.Gerrit.deleteSessionCookie ( ) ; hide ( ) ; }
public void contextDestroyed ( final javax.servlet.ServletContextEvent event ) { com.google.gerrit.server.Lifecycle.stop ( dbInjector , sysInjector , sshInjector , webInjector ) ; super . contextDestroyed ( event ) ; }
public void reviewersByEmailAreServedFromIndex ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isTrue ( ) ; com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo ( "Foo Bar" , "foo.bar@gerritcodereview.com" ) ; for ( com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of ( ReviewerState.CC , ReviewerState.REVIEWER ) ) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; com.google.gerrit.extensions.api.changes.AddReviewerInput input = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; input.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRfcAddressString ( acc ) ; input.state = state ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . addReviewer ( input ) ; notesMigration.setFailOnLoadForTest ( true ) ; try { com.google.gerrit.extensions.common.ChangeInfo info = com.google.common.collect.Iterables.getOnlyElement ( gApi.changes ( ) . query ( r.getChangeId ( ) ) . withOption ( ListChangesOption.DETAILED_LABELS ) . get ( ) ) ; com.google.common.truth.Truth.assertThat ( info.reviewers ) . isEqualTo ( com.google.common.collect.ImmutableMap.of ( state , com.google.common.collect.ImmutableList.of ( acc ) ) ) ; } finally { notesMigration.setFailOnLoadForTest ( false ) ; } } }
public void run ( ) { restClient.send ( event ) ; }
private void assertCanAccess ( com.google.gerrit.server.project.ProjectControl u ) { boolean access = u.asForProject ( ) . testOrFalse ( ProjectPermission.ACCESS ) ; com.google.common.truth.Truth.assertThat ( access ) . named ( "can access" ) . isTrue ( ) ; }
public boolean canFlushCaches ( ) { return ( canPerform ( GlobalCapability.FLUSH_CACHES ) ) || ( canAdministrateServer ( ) ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return requestUser ; }
protected io.searchbox.core.Bulk.Builder addActions ( io.searchbox.core.Bulk.Builder builder , com.google.gerrit.reviewdb.client.Change.Id c ) { return builder.addAction ( delete ( OPEN_CHANGES , c ) ) . addAction ( delete ( OPEN_CHANGES , c ) ) ; }
public static com.google.gerrit.server.ParamertizedString asis ( final java.lang.String constant ) { return new com.google.gerrit.server.ParamertizedString ( new com.google.gerrit.server.ParamertizedString.Constant ( constant ) ) ; }
public boolean allRefsAreVisible ( java.util.Set < java.lang.String > ignore ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ , ignore ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > publishedByPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id patchset ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
com.google.gwtexpui.globalkey.client.KeyCommandSet getKeysComment ( ) { return keysComment ; }
public synchronized void evictAllNoReindex ( ) { byId.clear ( ) ; }
public static void unsetForwardedEvent ( ) { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.FORWARDED_EVENT.remove ( ) ; }
public void replace ( com.google.gerrit.server.project.ProjectData projectState ) throws java.io.IOException { try { replace ( com.google.gerrit.lucene.LuceneProjectIndex.idTerm ( projectState ) , toDocument ( projectState ) ) . get ( ) ; } catch ( java.util.concurrent.ExecutionException | java.lang.InterruptedException e ) { throw new java.io.IOException ( e ) ; } }
com.google.gerrit.server.CurrentUser getCurrentUser ( com.google.gerrit.server.IdentifiedUser.GenericFactory userFactory ) { return userFactory.create ( ownerId ) ; }
public com.google.template.soy.data.SanitizedContent toSoy ( ) { finishActiveTag ( ) ; return com.google.template.soy.data.UnsafeSanitizedContentOrdainer.ordainAsSafe ( htmlBuf.toString ( ) , ContentKind.HTML ) ; }
void createGroup ( java.lang.String newName , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.reviewdb.client.AccountGroup.Id > callback ) ;
private java.lang.String getUsername ( ) { final java.lang.String user = gerritConfig.getString ( com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.ITS_NAME_BUGZILLA , null , com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.GERRIT_CONFIG_USERNAME ) ; return user ; }
public boolean containsComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { if ( containsCommentPublished ( c ) ) { return true ; } loadDraftComments ( c.getAuthor ( ) ) ; return draftCommentNotes.containsComment ( c ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.MyNativeString newPassword ) { label.setText ( newPassword.asString ( ) ) ; label.setVisible ( true ) ; delete.setVisible ( true ) ; }
public com.google.gerrit.reviewdb.client.Change change ( ) throws com.google.gwtorm.server.OrmException { if ( ( change ) == null ) { change = db.changes ( ) . get ( legacyId ) ; } return change ; }
private com.google.gerrit.extensions.restapi.Response < com.google.gerrit.server.change.ChangeJson.ChangeInfo > cache ( com.google.gerrit.server.change.ChangeJson.ChangeInfo res ) { return com.google.gerrit.extensions.restapi.Response.ok ( res ) . caching ( com.google.gerrit.extensions.restapi.CacheControl.PRIVATE ( 0 , java.util.concurrent.TimeUnit.SECONDS ) . setMustRevalidate ( ) ) ; }
protected final boolean in ( int line , org.eclipse.jgit.diff.Edit e ) { return ( ( getBegin ( e ) ) <= line ) && ( line < ( getEnd ( e ) ) ) ; }
protected static com.google.gerrit.pgm.util.Die abort ( ) { return new com.google.gerrit.pgm.util.Die ( "aborted by user" ) ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return res.getWriter ( ) ; }
public java.lang.String toString ( ) { return ( "Stream Events (" + ( currentUser.getAccount ( ) . getUserName ( ) ) ) + ")" ; }
private static java.lang.String fileName ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit commit ) throws java.io.IOException { org.eclipse.jgit.lib.AbbreviatedObjectId id = rw.getObjectReader ( ) . abbreviate ( commit , 8 ) ; return ( id.name ( ) ) + ".diff" ; }
public java.lang.Void call ( ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( com.google.gerrit.server.git.RequestState state = requestState ( caller ) ) { insertChange ( state ) ; } synchronizedIncrement ( newProgress ) ; return null ; }
public int getDelimiterUse ( int openerCount , int closerCount ) { return 1 ; }
public ApprovalCategoryValue.Id getApprovalCategoryValueId ( short value ) { return new com.google.gerrit.reviewdb.client.ApprovalCategoryValue.Id ( getApprovalCategoryId ( ) , value ) ; }
protected com.google.gerrit.client.account.AgreementPanel create ( ) { return new com.google.gerrit.client.account.AgreementPanel ( ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { publisher.onEvent ( event ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { BRANCH ( 7.0F ) ; }
static com.google.gerrit.client.changes.ChangeApi.Input create ( ) { return ( ( com.google.gerrit.client.changes.ChangeApi.Input ) ( createObject ( ) ) ) ; }
private static java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > sort ( java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) { java.util.Collections.sort ( comments , ChangeNotes.PLC_ORDER ) ; return comments ; }
public java.lang.String call ( ) throws java.lang.Exception { if ( check.equals ( Check.ACCESS ) ) return healthCheckAccess ( ) ; return healthCheckSysinfo ( ) ; }
private static boolean isValidRevision ( java.lang.String revision ) { return ( ( ( revision.indexOf ( ':' ) ) < 0 ) && ( ( revision.indexOf ( "^{" ) ) < 0 ) ) && ( ( revision.indexOf ( '@' ) ) < 0 ) ; }
public java.lang.String getDisplayString ( ) { return com.google.gerrit.client.FormatUtil.nameEmail ( com.google.gerrit.client.FormatUtil.asInfo ( info ) ) ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > ps , com.google.gerrit.common.data.LabelTypes labelTypes ) { addPatchSets ( a , ps , null , false , null , labelTypes ) ; }
public void execute ( java.lang.Runnable command ) { com.google.common.truth.Truth.assertThat ( command.toString ( ) ) . isEqualTo ( java.lang.String.format ( "[%s] Send event '%s' to target instance" , com.ericsson.gerrit.plugins.highavailability.event.EventHandlerTest.PLUGIN_NAME , null ) ) ; command.run ( ) ; }
public final native com.google.gerrit.client.diff.DisplaySide side ( ) ;
public void addChild ( final com.google.gerrit.sshd.commands.ProjectNode child ) { children.add ( child ) ; }
public void projectDetail ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { projectDetailFactory.create ( projectName ) . to ( callback ) ; }
public void remove ( ) { ref.compareAndSet ( item , null ) ; }
public com.google.gerrit.server.query.Predicate < T > getChild ( int i ) { return getChildren ( ) . get ( i ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstDefaultBase ( org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( null , newId , ws , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public boolean getDeny ( ) { return ( action ) == ( com.google.gerrit.common.data.PermissionRule.Action.DENY ) ; }
private void init ( net.codemirror.lib.LineCharacter anchor ) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble ( commentManager , cm ) ; add ( bubble ) ; cm.addWidget ( anchor , bubble.getElement ( ) , false ) ; }
com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.server.git.CodeReviewCommit c ) { return approvalsUtil.getSubmitter ( db.get ( ) , c.notes ( ) , c.patchsetId ) ; }
public com.google.gerrit.reviewdb.Patch.PatchType getPatchType ( ) { return patchType ; }
private java.lang.String newChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.GroupInfo in ) { return in.name ; }
public static com.google.gerrit.common.data.PermissionRule allow ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group , java.lang.String ref ) { return com.google.gerrit.server.project.testing.Util.grant ( project , permissionName , com.google.gerrit.server.project.testing.Util.newRule ( project , group ) , ref ) ; }
public void onSuccess ( final com.google.gerrit.client.patches.CommentDetail result ) { if ( ( rpcSequence ) == rpcseq ) { comments = result ; onResult ( ) ; } }
public com.google.gerrit.common.data.Capable canUpload ( ) { com.google.gerrit.common.data.Capable result = projectControl.canPushToAtLeastOneRef ( ) ; if ( result != ( com.google.gerrit.common.data.Capable.OK ) ) { return result ; } return com.google.gerrit.server.util.MagicBranch.checkMagicBranchRefs ( repo , project ) ; }
static void fireOnCallStart ( ) { for ( final com.google.gwtjsonrpc.client.RpcStatusListener l : com.google.gwtjsonrpc.client.JsonUtil.listeners ) { l.onCallStart ( ) ; } }
public void onShowView ( ) { if ( ( windowTitle ) != null ) { com.google.gerrit.client.Gerrit.setWindowTitle ( this , windowTitle ) ; } registerKeys ( ) ; }
public boolean equals ( java.lang.Object other ) { return ( other instanceof com.google.gerrit.server.permissions.LabelPermission.WithValue ) && ( label.equals ( ( ( com.google.gerrit.server.permissions.LabelPermission.WithValue ) ( other ) ) . label ) ) ; }
private void writeObject ( java.io.ObjectOutputStream out ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectIdSerializer.write ( out , prior ) ; org.eclipse.jgit.lib.ObjectIdSerializer.write ( out , next ) ; out.writeUTF ( strategyName ) ; }
private long getFirstTime ( ) { return get ( 0 ) . when.getTime ( ) ; }
protected void configureCommands ( ) { command ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscription.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.BranchManifest.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.TagManifest.class ) ; }
java.util.List < com.google.gerrit.extensions.common.ChangeInfo > submittedTogether ( ) throws com.google.gerrit.extensions.restapi.RestApiException ;
java.util.Set < java.lang.String > keySet ( ) { return java.util.Collections.unmodifiableSet ( atts.keySet ( ) ) ; }
private com.google.gerrit.acceptance.git.PushOneCommit.Result createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
public static com.google.gerrit.reviewdb.client.AccountDiffPreference getAccountDiffPreference ( ) { return com.google.gerrit.client.Gerrit.myAccountDiffPref ; }
public synchronized void stop ( ) { if ( ( ds ) instanceof org.apache.commons.dbcp.BasicDataSource ) { try { ( ( org.apache.commons.dbcp.BasicDataSource ) ( ds ) ) . close ( ) ; } catch ( java.sql.SQLException e ) { } } }
private com.google.gerrit.extensions.api.changes.ReviewInput createComment ( final java.lang.String commentTemplate ) { return new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . message ( ( ( com.criteo.gerrit.plugins.automerge.ReviewUpdater.commentsPrefix ) + ( getCommentFromFile ( commentTemplate ) ) ) ) ; }
public static void edit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . get ( cb ) ; }
public void visit ( org.pegdown.ast.ListItemNode node ) { wrapChildren ( "li" , node ) ; }
public static void display ( final com.google.gerrit.client.ui.Screen view ) { if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.body.remove ( com.google.gerrit.client.Gerrit.currentScreen ) ; } com.google.gerrit.client.Gerrit.currentScreen = view ; com.google.gerrit.client.Gerrit.body.add ( com.google.gerrit.client.Gerrit.currentScreen ) ; }
private E getLast ( ) { return get ( ( ( size ( ) ) - 1 ) ) ; }
private final native void setThemeRaw ( java.lang.String i ) ;
private void assertDeleteForbidden ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "Cannot delete tag" ) ; tag ( ) . delete ( ) ; }
public java.lang.Iterable < com.google.gerrit.sshd.SshKeyCacheEntry > get ( java.lang.String username ) { return cache.get ( username ) ; }
com.google.gerrit.server.permissions.ProjectControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.permissions.ProjectControl r = new com.google.gerrit.server.permissions.ProjectControl ( uploadGroups , receiveGroups , permissionFilter , changeControlFactory , permissionBackend , who , state ) ; r.allSections = allSections ; return r ; }
public void testPushForMaster ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit.Result r = pushTo ( "refs/for/master" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null ) ; }
private static java.lang.StringBuilder buildRefsPrefix ( java.lang.String prefix , int id ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( prefix ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( id ) ) ; r.append ( '/' ) ; return r ; }
public java.lang.String getEncodedKey ( ) { return getPublicKeyPart ( 1 , null ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , revision , fileName , side , line ) ; }
public void onFailure ( java.lang.Throwable caught ) { this . onFailure ( caught ) ; }
public com.google.gerrit.server.index.ChangeIndex getWriteIndex ( int version ) { return writeIndexes.get ( version ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > draft ( com.google.gerrit.reviewdb.Change.Id id , java.lang.String file , com.google.gerrit.reviewdb.Account.Id author ) throws com.google.gwtorm.client.OrmException ;
static void publish ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.publish ( id.get ( ) , revision , com.google.gerrit.client.change.DraftActions.cs ( id , draftButtons ) ) ; }
com.google.gerrit.server.patch.PatchScriptFactory create ( com.google.gerrit.server.project.ChangeControl control , java.lang.String fileName , @ com.google.inject.assistedinject.Assisted ( value = "patchSetA" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetA , @ com.google.inject.assistedinject.Assisted ( value = "patchSetB" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetB , com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs ) ;
public void setUp ( ) { checker = new com.google.gerrit.server.git.gpg.PublicKeyChecker ( ) ; }
public com.google.gerrit.extensions.common.ChangeInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.complementOf ( java.util.EnumSet.of ( ListChangesOption.CHECK ) ) ) ; }
public com.google.gerrit.server.change.PatchSetInserter setSendMail ( boolean sendMail ) { this . sendMail = sendMail ; return this ; }
void sendAsync ( ) { sendEmailsExecutor.submit ( this ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { if ( callback != null ) { callback.onSuccess ( result ) ; } hide ( ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { addTxt.setText ( "" ) ; addTxt.setFocus ( true ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { return controlFor ( project ) . isVisible ( ) ; }
public java.lang.String apply ( com.google.gerrit.acceptance.TestAccount in ) { return in.fullName ; }
private java.lang.String encoding ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.MoreObjects.firstNonNull ( req.getCharacterEncoding ( ) , "UTF-8" ) ; }
private com.google.gerrit.extensions.common.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.lang.String tag , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = com.google.gerrit.server.change.ChangeJson.getApprovalInfo ( id , value , tag , date ) ; accountLoader.put ( ai ) ; return ai ; }
public org.eclipse.jgit.lib.ObjectReader newReader ( ) { return repo.newObjectReader ( ) ; }
public java.lang.String getHostName ( javax.servlet.http.HttpServletRequest req ) { return "test-host" ; }
private static void logAndThrowSubmoduleException ( final java.lang.String errorMsg , final java.lang.Exception e ) throws com.google.gerrit.server.git.SubmoduleException { com.google.gerrit.server.git.SubmoduleOp.log.error ( errorMsg , e ) ; throw new com.google.gerrit.server.git.SubmoduleException ( errorMsg , e ) ; }
public final native void setActiveLine ( net.codemirror.lib.CodeMirror.LineHandle line ) ;
public static void deleteDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . delete ( cb ) ; }
public com.google.gerrit.extensions.client.EditPreferencesInfo getEditPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getEditPreferences.apply ( account ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot query edit preferences" , e ) ; } }
private static void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd , final java.lang.String why ) { cmd.setResult ( ReceiveCommand.Result.REJECTED_OTHER_REASON , why ) ; }
public final native void setOldViewportSize ( int lines ) ;
private int getRandomExecutionDelay ( com.googlesrouce.gerrit.plugins.github.git.GitJob job ) { java.util.Random rnd = new java.util.Random ( ( ( java.lang.System.currentTimeMillis ( ) ) + ( job.hashCode ( ) ) ) ) ; return rnd.nextInt ( config.jobExecTimeout ) ; }
private void enable ( final boolean on ) { showSiteHeader.setEnabled ( on ) ; useFlashClipboard.setEnabled ( on ) ; defaultContext.setEnabled ( on ) ; }
protected void preDisplay ( java.lang.String content ) { initEditor ( content ) ; }
protected com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > enforceVisibility ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > pred ) { return new com.google.gerrit.server.query.change.AndChangeSource ( com.google.common.collect.ImmutableList.of ( pred , new com.google.gerrit.server.query.change.IsVisibleToPredicate ( db , notesFactory , changeControlFactory , userProvider.get ( ) ) ) , start ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , caller ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { changeId = ( ( com.google.gerrit.client.changes.ChangeScreen ) ( newScreen ) ) . changeId ; return this ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.PUT , cb ) ; }
public final boolean requireXsrfValid ( ) { if ( isXsrfValid ( ) ) { return true ; } else { onFailure ( new java.lang.Exception ( com.google.gwtjsonrpc.client.JsonUtil.ERROR_INVALID_XSRF ) ) ; return false ; } }
private java.lang.String expand ( com.google.gerrit.common.data.ParameterizedString parameterizedRef , java.lang.String userName ) { return parameterizedRef.replace ( java.util.Collections.singletonMap ( "username" , userName ) ) ; }
protected void configure ( ) { listener ( ) . to ( com.google.gerrit.server.config.JGitWindowCacheConfiguration.class ) ; listener ( ) . to ( com.google.gerrit.server.cache.CachePool.class ) ; listener ( ) . to ( com.google.gerrit.server.git.WorkQueue.class ) ; }
private com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > submit ( java.util.concurrent.Callable < ? > task ) { return com.google.common.util.concurrent.Futures.makeChecked ( executor.submit ( task ) , com.google.gerrit.server.index.change.ChangeIndexer.MAPPER ) ; }
public java.lang.String getShortName ( ) { final java.lang.String n = get ( ) ; if ( n.startsWith ( com.google.gerrit.reviewdb.client.Branch.R_HEADS ) ) { return n.substring ( com.google.gerrit.reviewdb.client.Branch.R_HEADS.length ( ) ) ; } return n ; }
public int hashCode ( ) { return java.util.Objects.hash ( this ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { blurHint ( ) ; }
com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create ( com.google.gerrit.reviewdb.PatchSet.Id id ) ;
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testing.IndexVersions.getWithoutLatest ( com.google.gerrit.server.index.project.ProjectSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testing.IndexVersions.asConfigMap ( ProjectSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , com.google.gerrit.server.query.project.LuceneQueryProjectsTest.defaultConfig ( ) ) ; }
public int compare ( final com.google.gerrit.server.git.CodeReviewCommit a , final com.google.gerrit.server.git.CodeReviewCommit b ) { return ( a.originalOrder ) - ( b.originalOrder ) ; }
public static byte [ ] asByteArray ( org.eclipse.jgit.lib.ObjectLoader ldr ) throws java.io.IOException , org.eclipse.jgit.errors.LargeObjectException , org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes ( com.google.gerrit.server.patch.Text.bigFileThreshold ) ; }
public void preDisplay ( final com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > result ) { display ( com.google.gerrit.client.rpc.Natives.asList ( result ) ) ; enableForm ( ) ; }
public void update ( com.googlesource.gerrit.plugins.github.git.GitJobStatus.Code status ) { this . status = status ; this . shortDescription = status.name ( ) ; this . value = status.name ( ) ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (status:open OR status:merged)" ) ; org.junit.Assert.assertEquals ( query ( parse ( "status:new OR status:submitted OR status:draft OR status:merged" ) ) , rewrite.rewrite ( in , 0 ) ) ; }
void setResult ( org.eclipse.jgit.lib.ObjectId result ) { this . result = result.copy ( ) ; }
private java.lang.String expand ( java.lang.String parameterizedRef , java.lang.String userName ) { if ( parameterizedRef.contains ( "${" ) ) { return expand ( new com.google.gerrit.common.data.ParameterizedString ( parameterizedRef ) , userName ) ; } return parameterizedRef ; }
public boolean handles ( java.io.File srcFile ) { java.lang.String fileName = srcFile.getName ( ) ; return ( fileName.endsWith ( com.google.gerrit.server.plugins.JarPluginProvider.JAR_EXTENSION ) ) || ( fileName.endsWith ( ( ( com.google.gerrit.server.plugins.JarPluginProvider.JAR_EXTENSION ) + ".disabled" ) ) ) ; }
private void scheduleTask ( com.googlesource.gerrit.plugins.replication.PushOne pushOp , int delay , java.util.concurrent.TimeUnit unit ) { postEvent ( pushOp ) ; pool.schedule ( pushOp , delay , unit ) ; }
public final native void setTo ( net.codemirror.lib.LineCharacter to ) ;
public void start ( ) { java.lang.String msg = "error: That command is disabled on this server.\n\n" + "Please use the master server URL.\n" ; try { err.write ( msg.getBytes ( com.google.gerrit.sshd.commands.ENC ) ) ; err.flush ( ) ; } catch ( java.io.IOException e ) { } onExit ( 1 ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initMemberList ( ) ; }
public com.google.gerrit.extensions.api.changes.SubmittedTogetherInfo submittedTogether ( java.util.EnumSet < com.google.gerrit.extensions.api.changes.SubmittedTogetherOption > options ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return submittedTogether.apply ( change , options ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot query submittedTogether" , e ) ; } }
public com.googlesource.gerrit.plugins.lfs.LfsBackend getBackend ( ) { return cfg.getEnum ( "storage" , null , "backend" , LfsBackend.FS ) ; }
private static com.google.gwtexpui.safehtml.client.SafeHtml showTrailingWhitespace ( com.google.gwtexpui.safehtml.client.SafeHtml src ) { return src.replaceFirst ( "([ \t][ \t]*)(\r?\n?)$" , "<span class=\"gerrit-whitespaceerror\">$1</span>$2" ) ; }
public static com.google.gerrit.client.rpc.RestApi reviewers ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) ; }
private static com.google.common.collect.ImmutableList < org.eclipse.jgit.diff.Edit > deepCopyEdits ( java.util.List < org.eclipse.jgit.diff.Edit > edits ) { return edits.stream ( ) . map ( com.google.gerrit.server.patch.IntraLineDiffArgs :: copy ) . collect ( com.google.common.collect.ImmutableList.toImmutableList ( com.google.common.collect.ImmutableList ) ) ; }
protected static void usage ( ) { java.lang.String s = "Usage:\n" ; s += "java -cp $PLCAFEDIR/plcafe.jar" ; s += " com.googlecode.prolog_cafe.lang.PrologMain package:predicate\n" ; s += "java -cp $PLCAFEDIR/plcafe.jar" ; s += " com.googlecode.prolog_cafe.lang.PrologMain predicate\n" ; s += " package: package name\n" ; s += " predicate: predicate name (only atom)" ; java.lang.System.out.println ( s ) ; }
public void cleanup ( ) { db.close ( ) ; }
public void manualCertificationMatchesExternalId ( ) throws java.lang.Exception { addExternalId ( "foo" , "myId" , null ) ; com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create ( user ) ; assertNoProblems ( checker.check ( com.google.gerrit.gpg.testutil.TestKeys.key5 ( ) . getPublicKey ( ) ) ) ; }
protected void run ( ) { for ( com.googlesource.gerrit.plugins.replication.Destination d : config.getDestinations ( FilterType.ALL ) ) { if ( matches ( d.getRemoteConfig ( ) . getName ( ) ) ) { printRemote ( d ) ; } } }
public void onSuccess ( com.google.gwtjsonrpc.common.VoidResult result ) { }
public com.google.gerrit.extensions.api.projects.ProjectApi.ListBranchesRequest withStart ( int start ) { this . start = start ; return this ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > all ( org.eclipse.jgit.lib.ObjectId rev ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.externalids.ExternalIdReader.all ( repo , rev ) ; } }
public java.lang.String getName ( ) { return "REPO" ; }
public static synchronized void setClock ( java.sql.Timestamp ts ) { com.google.common.base.Preconditions.checkState ( ( ( com.google.gerrit.testutil.TestTimeUtil.clockMs ) != null ) , "call resetWithClockStep first" ) ; com.google.gerrit.testutil.TestTimeUtil.clockMs.set ( ts.getTime ( ) ) ; }
public final native void in_reply_to ( java.lang.String i ) ;
public void setSubmitRecords ( java.util.List < com.google.gerrit.common.data.SubmitRecord > records ) { submitRecords = records ; }
public static void publish ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "publish" ) . post ( in , cb ) ; }
public void onUpdate ( com.google.gerrit.server.git.ProjectConfig projectConfig , long newValue ) { }
public boolean containsComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { if ( containsCommentPublished ( c ) ) { return true ; } loadDraftComments ( c.getAuthor ( ) ) ; return draftCommentNotes.containsComment ( c ) ; }
private static boolean reindexAfterIndexUpdate ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "index" , null , "testReindexAfterUpdate" , true ) ; }
public void preDisplay ( final com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > result ) { enableForm ( true ) ; display ( com.google.gerrit.client.rpc.Natives.asList ( result ) ) ; }
public void setUp ( ) { easyMock = new org.easymock.EasyMockSupport ( ) ; storeMock = easyMock.createMock ( com.ericsson.gerrit.plugins.eventslog.EventStore.class ) ; listener = new com.ericsson.gerrit.plugins.eventslog.EventHandler ( storeMock ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { addMemberBox.setEnabled ( true ) ; addMemberBox.setText ( "" ) ; }
public static int toIndexTime ( java.sql.Timestamp ts ) { return ( ( int ) ( ( ts.getTime ( ) ) / 60000 ) ) ; }
public void noExternalIds ( ) throws java.lang.Exception { db.accountExternalIds ( ) . delete ( db.accountExternalIds ( ) . byAccount ( user.getAccountId ( ) ) ) ; reloadUser ( ) ; assertProblems ( com.google.gerrit.server.git.gpg.TestKey.key5 ( ) , ( "No identities found for user; check" + " http://test/#/settings/web-identities" ) ) ; }
public final java.util.List < com.google.gerrit.client.changes.ChangeInfo.ApprovalInfo > approvals ( ) { return _approvals ( ) . asList ( ) ; }
public void onSuccess ( final com.google.gerrit.client.data.PatchScript result ) { if ( ( rpcSequence ) == rpcseq ) { script = result ; onResult ( ) ; } }
public void newPatchSetByOtherOnReviewableChangeNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=OWNER" , other ) ; assertThat ( sender ) . notSent ( ) ; }
protected void checkCustom ( org.eclipse.jgit.lib.Repository repo , java.util.List < java.lang.String > problems ) { }
public java.util.concurrent.ExecutorService createEmailReviewCommentsExecutor ( ) { return com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService ( ) ; }
private void onDiscoveryFailure ( ) { showError ( ) ; enable ( true ) ; providerId.selectAll ( ) ; providerId.setFocus ( true ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "submit" ) . post ( in , cb ) ; }
public WorkQueue.Executor getBatchQueue ( ) { return batchExecutor ; }
public java.lang.String getUserName ( ) { return "plugin " + ( pluginName ) ; }
public java.util.concurrent.ExecutorService createDiffExecutor ( ) { return com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor ( ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.ACCOUNT_SEC.validateEmail ( magicToken , new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > ( ) { public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gwt.user.client.History.newItem ( Link.SETTINGS_CONTACT , true ) ; } } ) ; }
com.google.gerrit.server.plugins.ServerPlugin get ( java.io.File srcFile , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot , com.google.gerrit.server.plugins.ServerPluginProvider.PluginDescription pluginDescriptor ) throws com.google.gerrit.server.plugins.InvalidPluginException ;
public int getCardinality ( ) { return ( source ) != null ? source.getCardinality ( ) : limit ( ) ; }
public com.google.gerrit.extensions.webui.UiAction.Description setEnabled ( boolean enabled ) { this . enabled = enabled ; return this ; }
public void putApproval ( java.lang.String label , short value ) { approvals.put ( label , value ) ; }
void setSettings ( final com.google.gerrit.common.data.PatchScriptSettings s ) { settings = s ; }
private void setRefLogIdent ( final com.google.gerrit.client.reviewdb.ChangeApproval submitAudit ) { if ( submitAudit != null ) { branchUpdate.setRefLogIdent ( identifiedUserFactory.create ( submitAudit.getAccountId ( ) ) . toPersonIdent ( ) ) ; } }
public synchronized void deleteRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { repos.remove ( com.google.gerrit.testutil.InMemoryRepositoryManager.normalize ( name ) ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.CommitResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.project.FileResource ( parent.getProject ( ) , parent.getCommit ( ) , id.get ( ) ) ; }
public void addEventListener ( com.google.gerrit.common.EventListener listener , com.google.gerrit.server.CurrentUser user ) { }
static void invoke ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.client.actions.ActionInfo action , com.google.gerrit.client.rpc.RestApi api ) { com.google.gerrit.client.api.DefaultActions.invoke ( action , api , com.google.gerrit.client.api.DefaultActions.callback ( com.google.gerrit.common.PageLinks.toProject ( project ) ) ) ; }
protected com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.common.changes.ListChangesOption ... options ) throws java.io.IOException { return getChange ( adminSession , changeId , options ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; com.google.gerrit.client.diff.DiffInfo diffInfo = diff ; diff = null ; display ( diffInfo ) ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.client.Change.Id c ) { return ( "/c/" + c ) + "/" ; }
public final native void setScrollSetByOther ( boolean setByOther ) ;
static boolean traceServerMsg ( ) { return ( com.googlesource.gerrit.plugins.findowners.Config.TRACE_SERVER_MSG ) && ( com.googlesource.gerrit.plugins.findowners.Config.addDebugMsg ) ; }
public com.google.gerrit.client.rpc.RestApi data ( com.google.gwt.json.client.JSONObject obj ) { contentType = com.google.gwtjsonrpc.common.JsonConstants.JSON_REQ_CT ; contentData = obj.toString ( ) ; return this ; }
public com.google.gerrit.server.group.GroupOptionsInfo apply ( com.google.gerrit.server.group.GroupResource resource ) { return new com.google.gerrit.server.group.GroupOptionsInfo ( resource.getGroup ( ) ) ; }
public void remove ( ) { for ( java.lang.String name : names ) { registry.remove ( name ) ; } }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.httpd.UrlModule.toGerrit ( req.getRequestURI ( ) , req , rsp ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT , expectedError ) ; }
public void cancel ( ) { try { SshScopes.current.set ( context ) ; onExit ( 15 ) ; } finally { SshScopes.current.set ( null ) ; } }
private static dk.brics.automaton.RegExp toRegExp ( java.lang.String refPattern ) { if ( refPattern.startsWith ( RefRight.REGEX_PREFIX ) ) { refPattern = refPattern.substring ( 1 ) ; } return new dk.brics.automaton.RegExp ( refPattern ) ; }
public abstract com.google.protobuf.ByteString encode ( T obj ) ;
public static com.google.gerrit.acceptance.git.GitUtil.Commit createCommit ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent i , java.lang.String msg ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.GitUtil.createCommit ( git , i , msg , null ) ; }
public java.lang.String getReplacementString ( ) { return info.getName ( ) ; }
private static void assertNotOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { org.junit.Assert.assertFalse ( ( "NOT OWN " + ref ) , u.controlForRef ( ref ) . isOwner ( ) ) ; }
com.google.gerrit.server.index.ChangeIndexer create ( com.google.gerrit.server.index.ChangeIndex index ) ;
public void setLocalUser ( final java.lang.String localUser ) { if ( isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT ) ) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT , localUser ) ; externalId = key.get ( ) ; } }
public static com.google.gerrit.server.patch.PatchListKey againstParentNum ( int parentNum , org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( parentNum , newId , ws ) ; }
public void testSyncIndexTaskToString ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.SyncIndexTask syncIndexTask = indexEventHandler.new com.ericsson.gerrit.plugins.syncindex.IndexEventHandler.SyncIndexTask ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID , false ) ; com.google.common.truth.Truth.assertThat ( syncIndexTask.toString ( ) ) . isEqualTo ( java.lang.String.format ( "[%s] Index change %s in target instance" , com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.PLUGIN_NAME , com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID ) ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getPathSetWebLink ( java.lang.String projectName , java.lang.String commit ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProjectCommit , projectName , commit ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public com.google.gerrit.pgm.init.api.Section get ( java.lang.String name , java.lang.String subsection ) { return new com.google.gerrit.pgm.init.api.Section ( flags , site , ui , name , subsection ) ; }
public short normalize ( com.google.gerrit.reviewdb.ApprovalCategory.Id category , short score ) { return getRefControl ( ) . normalize ( category , score ) ; }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; return push.rm ( git , "refs/for/master" ) . getChangeId ( ) ; }
private com.google.gerrit.extensions.common.FixReplacementInfo createFixReplacementInfo ( ) { com.google.gerrit.extensions.common.FixReplacementInfo newFixReplacementInfo = new com.google.gerrit.extensions.common.FixReplacementInfo ( ) ; newFixReplacementInfo.replacement = "some replacement code" ; newFixReplacementInfo.range = createRange ( 3 , 12 , 15 , 4 ) ; return newFixReplacementInfo ; }
void createFileCommentEitorOnSideB ( ) { }
public void repeatedHashtag ( ) throws java.lang.Exception { java.lang.String commitMessage = "#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "Subject" , "Hashtag1" , "Hashtag2" ) ) ; }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { org.apache.lucene.search.BooleanQuery.setMaxClauseCount ( cfg.getInt ( "index" , "maxTerms" , org.apache.lucene.search.BooleanQuery.getMaxClauseCount ( ) ) ) ; return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) . separateChangeSubIndexes ( true ) . build ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( final com.google.gerrit.reviewdb.client.PatchSet.Id c ) { return com.google.gerrit.server.git.MergeUtil.getSubmitter ( db.get ( ) , c ) ; }
private com.google.gerrit.reviewdb.client.Change insertChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( project , userId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; return c ; }
java.lang.String years0MonthsAgo ( long years , java.lang.String yearLabel ) ;
public boolean isAccessTokenForUser ( java.lang.String username , java.lang.String accessToken ) { try { com.google.gson.JsonObject jsonWebToken = toJsonWebToken ( accessToken ) ; return username.equals ( getAttribute ( jsonWebToken , com.googlesource.gerrit.plugins.cfoauth.UAAClient.USER_NAME_ATTRIBUTE ) ) ; } catch ( com.googlesource.gerrit.plugins.cfoauth.UAAClientException e ) { return false ; } }
public static com.google.gerrit.server.mail.MailUtil.MailRecipients getRecipientsFromReviewers ( com.google.common.collect.Multimap < com.google.gerrit.server.notedb.ReviewerStateInternal , com.google.gerrit.reviewdb.client.Account.Id > reviewers ) { com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients ( ) ; recipients.reviewers.addAll ( reviewers.get ( com.google.gerrit.server.notedb.ReviewerStateInternal.REVIEWER ) ) ; recipients.cc.addAll ( reviewers.get ( com.google.gerrit.server.notedb.ReviewerStateInternal.CC ) ) ; return recipients ; }
public static com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle create ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) { return new com.google.gerrit.server.notedb.AutoValue_AbstractChangeNotes_LoadHandle ( walk , ( id != null ? id.copy ( ) : null ) ) ; }
public java.lang.String getPluginName ( java.io.File srcFile ) { return com.google.common.base.MoreObjects.firstNonNull ( getGerritPluginName ( srcFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcFile ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.server.query.change.ChangeData cd ) { return executor.submit ( deleteTask ( cd ) ) ; }
public void confirmForOtherUser_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = emailTokenVerifier.encode ( user.getId ( ) , "new.mail@example.com" ) ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/config/server/email.confirm" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gwtorm.server.OrmException { try { return qp.queryChanges ( p ) . changes ( ) ; } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags.apply ( change , input ) ; } catch ( com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post hashtags" , e ) ; } }
private java.io.FileNotFoundException badWebRoot ( java.net.URL u , java.lang.Throwable cause ) { java.io.FileNotFoundException notFound = badWebRoot ( u ) ; notFound.initCause ( cause ) ; return notFound ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getFromCookie ( javax.servlet.http.Cookie cookie ) { try { return new com.googlesource.gerrit.plugins.github.oauth.OAuthCookie ( decode ( cookie.getValue ( ) ) , cookie.getValue ( ) ) ; } catch ( com.googlesource.gerrit.plugins.github.oauth.OAuthTokenException e ) { return null ; } }
public com.google.gerrit.server.group.GroupJson.GroupInfo apply ( com.google.gerrit.server.group.GroupResource resource ) { return json.addOption ( com.google.gerrit.common.groups.ListGroupsOption.OWNER ) . format ( resource.getGroup ( ) ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > not ( com.google.gerrit.server.query.Predicate < T > that ) { if ( that instanceof com.google.gerrit.server.query.NotPredicate ) { return that.getChild ( 0 ) ; } return new com.google.gerrit.server.query.NotPredicate ( that ) ; }
public com.google.gerrit.server.query.InternalQuery < T > enforceVisibility ( boolean enforce ) { queryProcessor.enforceVisibility ( enforce ) ; return this ; }
protected abstract void authorizeUser ( com.google.gerrit.server.project.ProjectState state , com.google.gerrit.server.CurrentUser user ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized ;
void setNoFilters ( boolean no ) { input.filters = ( no ) ? com.google.gerrit.server.change.TestSubmitRule.Filters.SKIP : com.google.gerrit.server.change.TestSubmitRule.Filters.RUN ; }
private com.google.gerrit.server.CurrentUser getUser ( ) { return getRefControl ( ) . getUser ( ) ; }
protected void configure ( ) { listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.Lifecycle.class ) ; }
protected boolean useHtml ( ) { return true ; }
public com.google.gerrit.server.project.ChangeControl getReviewerControl ( ) { return change.getControl ( ) . forUser ( user ) ; }
private void apply ( com.google.gerrit.server.index.ChangeIndex i , com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { if ( delete ) { i.delete ( cd ) ; } else { i.replace ( cd ) ; } }
protected abstract org.eclipse.jgit.lib.CommitBuilder applyImpl ( org.eclipse.jgit.lib.ObjectInserter ins ) throws com.google.gwtorm.server.OrmException , java.io.IOException ;
public static java.lang.String refsDraftCommentsPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId.get ( ) ) . toString ( ) ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > username ( java.lang.String username ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.USERNAME , AccountQueryBuilder.FIELD_USERNAME , username ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.client.AccountExternalId result ) { display ( result ) ; }
public java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup > load ( java.lang.String name ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return groups.get ( db , new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( name ) ) ; } }
public java.util.Map < java.lang.String , com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo > apply ( com.google.gerrit.server.config.ConfigResource resource ) throws java.lang.IllegalAccessException , java.lang.NoSuchFieldException { java.util.Map < java.lang.String , com.google.gerrit.server.restapi.config.ListCapabilities.CapabilityInfo > output = new java.util.TreeMap < > ( ) ; collectCoreCapabilities ( output ) ; collectPluginCapabilities ( output ) ; return output ; }
public com.google.gerrit.server.git.BatchUpdate create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , java.sql.Timestamp when ) ;
public void want ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { if ( ( id != null ) && ( ! ( out.containsKey ( id ) ) ) ) { out.put ( id , groupCache.get ( id ) ) ; } }
public void set ( java.lang.String key , com.google.gson.JsonObject event ) throws java.io.IOException ;
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( getId ( ) ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { return abandon ( control , "" , NotifyHandling.ALL ) ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return format ( cd , null ) ; }
public java.lang.String getLinkName ( ) { return "readme" ; }
public void current ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testing.IndexVersions.CURRENT ) ) . containsExactly ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getLatest ( ) . getVersion ( ) ) ; }
void deleteBranch ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > ids , com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > > callback ) ;
private void checkLoaded ( ) { com.google.common.base.Preconditions.checkState ( isLoaded , "account not loaded yet" ) ; }
public static void deleteAssignee ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.AccountInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "assignee" ) . delete ( cb ) ; }
public boolean isDefaults ( ) { return RefNames.REFS_USER_DEFAULT.equals ( getRefName ( ) ) ; }
public void getCacheWithGerritPrefix ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( "/config/server/caches/gerrit-accounts" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; }
private static GarbageCollectorListener.Event createEvent ( final java.lang.String projectName , final java.util.Properties statistics ) { com.google.gerrit.extensions.events.GarbageCollectorListener.Event event = new com.google.gerrit.extensions.events.GarbageCollectorListener.Event ( ) { @ java.lang.Override public java.lang.String getProjectName ( ) { return projectName ; } @ java.lang.Override public java.util.Properties getStatistics ( ) { return statistics ; } } ; return event ; }
public void onSuccess ( final com.google.gerrit.reviewdb.AccountExternalId result ) { enableUI ( true ) ; display ( result ) ; }
public com.googlecode.prolog_cafe.lang.Term getSubmitRule ( ) { return submitRule ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentManager = new com.google.gerrit.client.diff.CommentManager ( this , base , revision , path , result.getCommentLinkProcessor ( ) ) ; setTheme ( result.getTheme ( ) ) ; display ( comments ) ; }
public java.lang.Iterable < com.google.gerrit.common.data.EditList.Hunk > getHunks ( ) { return new com.google.gerrit.common.data.EditList ( edits , getContext ( ) , a.size ( ) , b.size ( ) ) . getHunks ( ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( rebaseOp ) != null ) { rebaseOp.postUpdate ( ctx ) ; } }
protected void add ( com.google.gerrit.server.mail.RecipientType type , com.google.gerrit.server.mail.ChangeEmail.Watchers.List list ) { for ( com.google.gerrit.reviewdb.client.Account.Id user : list.accounts ) { add ( type , user ) ; } for ( com.google.gerrit.server.mail.Address addr : list.emails ) { add ( type , addr ) ; } }
com.google.gerrit.server.account.IncludingGroupMembership create ( java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupIds ) ;
com.google.gerrit.rules.PrologEnvironment create ( java.lang.ClassLoader cl ) ;
private static boolean isGoogleAccount ( final com.dyuproject.openid.OpenIdUser user ) { return user.getIdentity ( ) . startsWith ( ( ( com.google.gerrit.client.openid.OpenIdUtil.URL_GOOGLE ) + "?" ) ) ; }
public void invalidNonce ( ) throws java.lang.Exception { org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( "invalid-nonce" , com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) ) ; assertProblems ( cert , "Invalid nonce" ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.actions.ActionInfo > actionMap ) { actionMap.copyKeysIntoChildren ( "id" ) ; renderRevisionInfo ( changeInfo , actionMap ) ; }
public void set ( java.lang.String key , com.google.gson.JsonObject event ) throws java.io.IOException { java.nio.file.Path replicationStatusPath = getReplicationStatusPath ( key ) ; java.nio.file.Files.write ( replicationStatusPath , event.toString ( ) . getBytes ( ) , java.nio.file.StandardOpenOption.TRUNCATE_EXISTING , java.nio.file.StandardOpenOption.CREATE , java.nio.file.StandardOpenOption.WRITE ) ; }
protected org.apache.sshd.common.session.AbstractSession doCreateSession ( org.apache.sshd.common.io.IoSession ioSession ) throws java.lang.Exception { return new com.google.gerrit.sshd.GerritServerSession ( server , ioSession ) ; }
public static final native void defineVimEx ( java.lang.String name , java.lang.String prefix , java.lang.Runnable thunk ) ;
public com.googlesource.gerrit.plugins.rabbitmq.session.Session getSession ( ) { return session ; }
public static com.google.gerrit.common.data.GroupReference groupReference ( java.lang.String orgName ) { return new com.google.gerrit.common.data.GroupReference ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.uuid ( orgName ) , ( ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.NAME_PREFIX ) + orgName ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { hide ( ) ; }
private static final com.google.gwt.resources.client.ExternalTextResource findTheme ( com.google.gerrit.extensions.common.Theme theme ) { for ( com.google.gwt.resources.client.ExternalTextResource r : net.codemirror.theme.ThemeLoader.THEMES ) { if ( theme.name ( ) . toLowerCase ( ) . equals ( r.getName ( ) ) ) { return r ; } } return null ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doExternalSearch ( ) ; } }
public static void main ( java.lang.String [ ] argv ) throws java.lang.Exception { com.google.gerrit.gwtdebug.GerritSDMLauncher launcher = new com.google.gerrit.gwtdebug.GerritSDMLauncher ( ) ; launcher.mainImpl ( argv ) ; }
public static java.lang.String toPatch ( java.lang.String type , com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( type , diffBase , id.getParentKey ( ) , id.get ( ) , null , 0 ) ; }
public void testUndefinedFunctionName ( ) { com.google.gerrit.server.ParamertizedString p = new com.google.gerrit.server.ParamertizedString ( "${a.anUndefinedMethod}" ) ; assertEquals ( 1 , p.getParameterNames ( ) . size ( ) ) ; assertTrue ( p.getParameterNames ( ) . contains ( "a.anUndefinedMethod" ) ) ; }
public static void clearHttpPassword ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "password.http" ) . delete ( cb ) ; }
public org.eclipse.jgit.lib.PersonIdent getIdent ( ) { return new org.eclipse.jgit.lib.PersonIdent ( username , email ) ; }
private void showError ( ) { errorLine.setVisible ( true ) ; }
public void load ( org.eclipse.jgit.lib.Repository db ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Ref ref = db.getRef ( getRefName ( ) ) ; load ( db , ( ref != null ? ref.getObjectId ( ) : null ) ) ; }
private void superWindowResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( ( ( ChangeRebuilder.MAX_WINDOW_MS ) * 2 ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
public static boolean isInternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return ( uuid.get ( ) . startsWith ( "global:" ) ) || ( uuid.get ( ) . matches ( "[0-9a-f]{40}" ) ) ; }
public void listTagsOfNonExistingProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/projects/non-existing/tags" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public static void getUsername ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeString > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "username" ) . get ( cb ) ; }
private void readObject ( final java.io.ObjectInputStream in ) throws java.io.IOException { aId = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; bId = org.eclipse.jgit.lib.ObjectIdSerialization.readNotNull ( in ) ; }
public void invalidNonceNotChecked ( ) throws java.lang.Exception { checker = newChecker ( false ) ; org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( "invalid-nonce" , com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) ) ; assertProblems ( cert ) ; }
private int getVote ( com.google.gerrit.extensions.api.changes.ChangeApi change , java.lang.String label ) throws com.google.gerrit.extensions.restapi.RestApiException { return change.get ( java.util.EnumSet.of ( ListChangesOption.DETAILED_LABELS ) ) . labels.get ( label ) . all.get ( 0 ) . value ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { fetch = result.revision ( revision ) . fetch ( ) ; renderScheme ( ) ; }
com.google.gerrit.server.index.ChangeIndexer getChangeIndexer ( com.google.gerrit.server.index.ChangeIndexer.Factory factory , com.google.gerrit.server.index.IndexCollection indexes ) { return factory.create ( indexes ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) ; } catch ( com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
public com.google.gerrit.client.reviewdb.Account run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.accounts ( ) . get ( com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ) ; }
void addStates ( com.google.common.collect.Multimap < java.lang.String , com.googlesource.gerrit.plugins.replication.ReplicationState > states ) { stateMap.putAll ( states ) ; }
public void onFailure ( java.lang.Throwable caught ) { sendButton.setEnabled ( true ) ; cancelButton.setEnabled ( true ) ; super . onFailure ( caught ) ; }
private Change.Id getIdFromRequest ( java.lang.String path ) { java.lang.String changeId = path.substring ( ( ( path.lastIndexOf ( '/' ) ) + 1 ) ) ; return Change.Id.parse ( changeId ) ; }
private final native void setEndLine ( int el ) ;
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getCommentManager ( ) . commentNav ( cm , Direction.NEXT ) . run ( ) ; } }
public final java.lang.String getShortName ( ) { return ref ( ) . startsWith ( Branch.R_HEADS ) ? ref ( ) . substring ( Branch.R_HEADS.length ( ) ) : ref ( ) ; }
com.google.gerrit.server.change.ChangeInserter create ( org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk revWalk , com.google.gerrit.server.project.ProjectControl ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit rc ) ;
public < I > com.google.gerrit.server.index.FieldDef < I , T > build ( com.google.gerrit.server.index.FieldDef.GetterWithArgs < I , T > getter ) { return new com.google.gerrit.server.index.FieldDef ( name , type , stored , false , getter ) ; }
private boolean isRepo ( java.nio.file.Path p ) { java.lang.String name = p.getFileName ( ) . toString ( ) ; return ( ! ( name.equals ( Constants.DOT_GIT ) ) ) && ( name.endsWith ( Constants.DOT_GIT ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { walk.reset ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( newChange ( ) . getId ( ) , tip , walk , noteUtil , args.metrics ) ; }
public static boolean isMagic ( java.lang.String path ) { return com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG.equals ( path ) ; }
public org.eclipse.jgit.lib.ObjectInserter getInserter ( ) throws java.io.IOException { return this . getObjectInserter ( ) ; }
public com.google.gerrit.server.project.SubmitRuleEvaluator setRule ( @ com.google.gerrit.common.Nullable java.lang.String rule ) { this . rule = rule ; return this ; }
public com.google.gerrit.server.change.ChangeInserter setMessage ( com.google.gerrit.reviewdb.client.ChangeMessage changeMessage ) { this . changeMessage = changeMessage ; return this ; }
private java.lang.Iterable < com.google.gerrit.extensions.common.AccountInfo > getReviewers ( com.google.gerrit.acceptance.PushOneCommit.Result r , com.google.gerrit.extensions.client.ReviewerState state ) throws java.lang.Exception { return get ( r.getChangeId ( ) ) . reviewers.get ( state ) ; }
public void test ( ) throws java.lang.Exception { java.lang.String [ ] invalidFilenamePattern = new java.lang.String [ ] { "\\[|\\]|\\*|#" , "[%:@]" } ; org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.performValidation ( repo , c , invalidFilenamePattern ) ; java.util.Set < java.lang.String > expected = new java.util.HashSet < > ( ) ; for ( java.lang.String filenames : getInvalidFilenames ( ) ) { expected.add ( ( "ERROR: invalid characters found in filename: " + filenames ) ) ; } com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; }
protected com.google.gerrit.index.query.Predicate < com.google.gerrit.server.query.change.ChangeData > enforceVisibility ( com.google.gerrit.index.query.Predicate < com.google.gerrit.server.query.change.ChangeData > pred ) { return new com.google.gerrit.server.query.change.AndChangeSource ( pred , new com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate ( db , notesFactory , userProvider.get ( ) , permissionBackend ) , start ) ; }
private org.eclipse.jgit.lib.PersonIdent getCommitterIdent ( com.google.gerrit.server.IdentifiedUser user ) { return user.newCommitterIdent ( com.google.gerrit.common.TimeUtil.nowTs ( ) , tz ) ; }
public void deleteBranchByProjectOwnerForcePushBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockForcePush ( ) ; setApiUser ( user ) ; assertDeleteForbidden ( ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ; }
public static void publishEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit:publish" ) . post ( in , cb ) ; }
public void pushEntity ( ) { mv.visitVarInsn ( com.google.gwtorm.protobuf.ALOAD , 1 ) ; }
private static com.google.common.collect.Table < java.lang.String , com.google.gerrit.reviewdb.client.Account.Id , com.google.common.base.Optional < java.lang.Short > > approvals ( java.util.Comparator < java.lang.String > nameComparator ) { return com.google.common.collect.TreeBasedTable.create ( nameComparator , com.google.gerrit.reviewdb.server.ReviewDbUtil.intKeyOrdering ( ) ) ; }
private PushOneCommit.Result createChangeWithTopic ( ) throws java.lang.Exception { return pushFactory.create ( db , admin.getIdent ( ) , testRepo , "a message" , "a.txt" , "content\n" ) . to ( ( "refs/for/master/" + ( name ( "topic" ) ) ) ) ; }
void add ( org.pegdown.ast.RootNode node ) { for ( org.pegdown.ast.ReferenceNode ref : node.getReferences ( ) ) { java.lang.String id = com.google.gitiles.doc.MarkdownHelper.getInnerText ( ref ) ; references.put ( com.google.gitiles.doc.ReferenceMap.key ( id ) , ref ) ; } }
private static void setCompression ( final org.apache.sshd.SshServer daemon ) { daemon.setCompressionFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Compression > > asList ( new org.apache.sshd.common.compression.CompressionNone.Factory ( ) ) ) ; }
public void invalidNonce ( ) throws java.lang.Exception { org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( "invalid-nonce" , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; assertProblems ( cert , "Invalid nonce" ) ; }
public void run ( ) { cm.getInputField ( ) . blur ( ) ; clearActiveLine ( cm ) ; clearActiveLine ( otherCm ( cm ) ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { com.google.gerrit.client.Gerrit.display ( ( "change,publish," + ( patchSet.getId ( ) . toString ( ) ) ) , new com.google.gerrit.client.changes.PublishCommentScreen ( patchSet.getId ( ) ) ) ; }
protected com.google.inject.Injector createInjector ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; return com.google.gerrit.testutil.InMemoryModule.createInjector ( lifecycle , luceneConfig ) ; }
static com.google.gerrit.server.notedb.InsertedObject create ( int type , byte [ ] src , int off , int len ) { return com.google.gerrit.server.notedb.InsertedObject.create ( type , com.google.protobuf.ByteString.copyFrom ( src , off , len ) ) ; }
private static java.lang.String base ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { java.lang.String name = com.google.gwt.http.client.URL.encodePathSegment ( project.get ( ) ) ; return ( "/projects/" + name ) + "/dashboards/" ; }
public void update ( com.googlesource.gerrit.plugins.github.git.GitJobStatus.Code code , java.lang.String shortDescription , java.lang.String description ) { this . status = code ; this . shortDescription = shortDescription ; this . value = description ; }
public void run ( ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "<C-u>" ) ; }
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( dbProvider , account ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
public void zipFormatDisabled ( ) throws java.lang.Exception { archiveNotPermitted ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( 1 ) ; }
public void remove ( ) { descriptions.remove ( name ) ; registry.remove ( name ) ; }
private com.google.gerrit.server.query.change.InternalChangeQuery query ( ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) , ChangeField.MERGEABLE.getName ( ) ) ; return queryProvider.get ( ) . setRequestedFields ( fields ) ; }
public java.util.Optional < java.lang.String > getUserName ( ) { return java.util.Optional.of ( username ) ; }
java.lang.String process ( ) ;
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , c , user ) ; }
static com.google.gerrit.server.git.CodeReviewCommit noPatchSet ( ) { return com.google.gerrit.server.git.CodeReviewCommit.error ( CommitMergeStatus.NO_PATCH_SET ) ; }
public static void main ( java.lang.String [ ] args ) { try { new Main ( ) . invoke ( args ) ; } catch ( java.io.IOException e ) { java.lang.System.err.println ( e.getMessage ( ) ) ; java.lang.System.exit ( 1 ) ; } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void get ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.GET , cb ) ; }
public com.google.gerrit.acceptance.PushOneCommit.Result rm ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.rm ( git , fileName ) ; return execute ( git , ref ) ; }
static com.google.gerrit.server.notedb.NotesMigration allEnabled ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "notedb" , null , "write" , true ) ; return new com.google.gerrit.server.notedb.NotesMigration ( cfg ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( new com.google.gerrit.server.query.change.ChangeData ( change ) , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public final native void setActiveLine ( int line ) ;
protected void configureServlets ( ) { serve ( "/become" ) . with ( com.google.gerrit.server.http.BecomeAnyAccountLoginServlet.class ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
void setContext ( final int context ) { operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { getSkipManager ( ) . removeAll ( ) ; getSkipManager ( ) . render ( context , diff ) ; updateRenderEntireFile ( ) ; } } ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( changeId ) ) ; }
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publish.apply ( revision , new com.google.gerrit.server.change.PublishDraftPatchSet.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish draft patch set" , e ) ; } }
public final native void intralineDifference ( boolean i ) ;
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
public boolean equals ( java.lang.Object other ) { if ( other instanceof com.google.gerrit.server.query.change.ChangeStatusPredicate ) { final com.google.gerrit.server.query.change.ChangeStatusPredicate p = ( ( com.google.gerrit.server.query.change.ChangeStatusPredicate ) ( other ) ) ; return status.equals ( p.status ) ; } return false ; }
public com.google.reviewit.app.Preferences build ( ) { return new com.google.reviewit.app.Preferences ( showIntro , colorBackground , showPatchSets , showPositiveCodeReviewVotes , showNegativeCodeReviewVotes , showComments , showReviewers , commitMessageFontSize ) ; }
private void doReplay ( ) { org.easymock.classextension.EasyMock.replay ( mockDb , pc , pcf , grm ) ; }
private static boolean correctUser ( java.lang.String user , com.google.gerrit.httpd.WebSession session ) { com.google.gerrit.reviewdb.client.AccountExternalId.Key id = session.getLastLoginExternalId ( ) ; return ( id != null ) && ( id.equals ( new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_GERRIT , user ) ) ) ; }
private void ensureOptionsInitialized ( ) { if ( ( options ) == null ) { help = new com.google.gerrit.util.cli.CmdLineParser.HelpOption ( ) ; options = new java.util.ArrayList < org.kohsuke.args4j.spi.OptionHandler > ( ) ; addOption ( help , help ) ; } }
protected boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user ) { com.google.gerrit.server.project.ProjectState pe = projectCache.get ( project ) ; if ( pe == null ) { return false ; } return pe.controlFor ( user ) . isVisible ( ) ; }
public void entity ( java.lang.String entity ) { com.google.common.base.Preconditions.checkArgument ( com.google.gitiles.doc.html.HtmlBuilder.HTML_ENTITY.matcher ( entity ) . matches ( ) , "invalid entity %s" , entity ) ; finishActiveTag ( ) ; htmlBuf.append ( entity ) ; }
public void evict ( com.google.gerrit.reviewdb.Project p ) ;
public static void addOptions ( com.google.gerrit.plugin.client.rpc.RestApi call , java.util.EnumSet < com.googlesource.gerrit.plugins.xdocs.client.ListChangesOption > s ) { call.addParameterRaw ( "O" , java.lang.Integer.toHexString ( com.googlesource.gerrit.plugins.xdocs.client.ListChangesOption.toBits ( s ) ) ) ; }
public void addGlue ( ) { addSeparator ( ) . setStyleName ( "gerrit-FillMenuCenter" ) ; }
public com.google.gerrit.server.query.InternalQuery < T > setRequestedFields ( java.util.Set < java.lang.String > fields ) { queryProcessor.setRequestedFields ( fields ) ; return this ; }
public void onClick ( android.view.View v ) { disableButtons ( ) ; getSortActionHandler ( ) . skip ( ) ; animate ( changeBox , SortActionHandler.Action.SKIP ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.AccountGroup > ownedByGroup ( com.google.gerrit.reviewdb.AccountGroup.Id groupId ) throws com.google.gwtorm.client.OrmException ;
public com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context newContext ( com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > sf , com.google.gerrit.acceptance.SshSession s , com.google.gerrit.server.CurrentUser user ) { return new com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ( sf , s , user , com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { testEnv.getInjector ( ) . injectMembers ( this ) ; db = testEnv.getDb ( ) ; }
public void confirmInvalidToken_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = "invalidToken" ; adminSession.put ( "/config/server/email.confirm" , in ) . assertUnprocessableEntity ( ) ; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.extensions.common.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
public abstract com.google.gerrit.server.git.MergeTip run ( com.google.gerrit.server.git.CodeReviewCommit currentTip , java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.IntegrationException ;
com.googlesource.gerrit.plugins.replication.ReplicationState [ ] getStatesByRef ( java.lang.String ref ) { java.util.Collection < com.googlesource.gerrit.plugins.replication.ReplicationState > states = stateMap.get ( ref ) ; return states.toArray ( new com.googlesource.gerrit.plugins.replication.ReplicationState [ states.size ( ) ] ) ; }
public void defaultGpgCertificationMatchesEmail ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKey.key5 ( ) ; assertProblems ( com.google.gerrit.gpg.testutil.TestKey.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( "identities:\n" + " gerrit:user\n" ) + " username:user" ) ) ) ; addExternalId ( "test" , "test" , "test5@example.com" ) ; assertNoProblems ( key ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return ctl.getChange ( ) ; }
private boolean canEditAssignee ( ) { return ( ( ( isOwner ( ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getRefControl ( ) . canEditAssignee ( ) ) ) || ( isAssignee ( ) ) ; }
public static void unregisterAll ( ) { for ( com.google.gitiles.ArchiveFormat fmt : com.google.gitiles.ArchiveFormat.values ( ) ) { org.eclipse.jgit.api.ArchiveCommand.unregisterFormat ( fmt.getShortName ( ) ) ; } }
int getCookieAge ( final com.google.gerrit.httpd.WebSessionManager.Val val ) { if ( val.isPersistentCookie ( ) ) { return ( ( int ) ( self.getTimeToLive ( java.util.concurrent.TimeUnit.SECONDS ) ) ) ; } else { return - 1 ; } }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.Unified ( base , id.getParentKey ( ) , id.get ( ) , side , line ) ) ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Unignore" ) . setTitle ( "Unignore the change" ) . setVisible ( canUnignore ( rsrc ) ) ; }
public void starChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void run ( ) { switch ( getIntraLineStatus ( ) ) { case OFF : case OK : toggleShowIntraline ( ) ; break ; default : break ; } }
public void currentAndInvalid ( ) { assertIllegalArgument ( ( ( com.google.gerrit.testutil.IndexVersions.CURRENT ) + ",foo" ) , "Invalid value for test: foo" ) ; }
public java.util.List < com.google.gerrit.reviewdb.StarredChange > byAccount ( com.google.gerrit.reviewdb.Account.Id id ) { return byAccountId.get ( id ) . list ; }
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.server.git.ProjectConfig local , com.google.gerrit.reviewdb.client.AccountGroup ... memberOf ) { return user ( local , null , memberOf ) ; }
public abstract < T extends java.lang.Enum < ? > > T readEnum ( T def , java.lang.String fmt , java.lang.Object ... args ) ;
public void doChangeRestoreHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , java.lang.String reason , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.server.project.ChangeControl ctl ) ;
public void getTask_NotFound ( ) throws java.lang.Exception { userSession.get ( ( "/config/server/tasks/" + ( getLogFileCompressorTaskId ( ) ) ) ) . assertNotFound ( ) ; }
public void commentOnReviewableChangeByOtherCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( other , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . sent ( "comment" , sc ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer , other ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public void resetToDefaults ( ) { maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; copySelfOnEmail = false ; downloadUrl = null ; downloadCommand = null ; dateFormat = null ; timeFormat = null ; }
private void cherryPickRootOntoBranch ( com.google.gerrit.server.git.CodeReviewCommit n ) { n.setStatusCode ( CommitMergeStatus.CANNOT_CHERRY_PICK_ROOT ) ; }
protected com.google.gerrit.server.account.AccountState fromDocument ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( doc.getField ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . numericValue ( ) . intValue ( ) ) ; return accountCache.get ( ) . get ( id ) ; }
public void testToHeaderString_Email2 ( ) { org.junit.Assert.assertEquals ( "<a,b@a>" , com.google.gerrit.server.mail.AddressTest.format ( null , "a,b@a" ) ) ; }
public void visit ( org.pegdown.ast.ReferenceNode node ) { }
void start ( ) { oracle.requestSuggestions ( request , this ) ; }
public static java.lang.String toPatch ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , side , line ) ; }
private java.lang.String encoding ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.Objects.firstNonNull ( req.getCharacterEncoding ( ) , "UTF-8" ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , msgTxt , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public java.lang.String toString ( ) { return atts.get ( "dn" ) ; }
private java.io.Writer getWriter ( javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { return new java.io.OutputStreamWriter ( res.getOutputStream ( ) , res.getCharacterEncoding ( ) ) ; }
private static java.io.FileNotFoundException badSourceRoot ( java.net.URI u ) { return new java.io.FileNotFoundException ( ( "Cannot find source root from " + u ) ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { if ( ! ( discovering ) ) { providerId.setText ( identUrl ) ; form.submit ( ) ; } }
public void onLostFocus ( com.google.gwt.user.client.ui.Widget sender ) { if ( "" . equals ( irevTxtBox.getText ( ) ) ) { irevTxtBox.setText ( Util.C.defaultRevisionSpec ( ) ) ; irevTxtBox.addStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
public void includeNonExistingGroup ( ) throws java.lang.Exception { java.lang.String gx = createGroup ( "gx" ) ; try { gApi.groups ( ) . id ( gx ) . addGroups ( "non-existing" ) ; } catch ( com.google.gerrit.extensions.restapi.UnprocessableEntityException expecetd ) { } }
com.ericsson.gerrit.plugins.multimaster.IndexResponseHandler.IndexResult post ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpPost ( ( ( url ) + endpoint ) ) , new com.ericsson.gerrit.plugins.multimaster.IndexResponseHandler ( ) ) ; }
public boolean updateUserModels ( java.util.List < com.gitblit.models.UserModel > models ) { return false ; }
public void index ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { index ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.String comment ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , comment , null ) ; }
public static void putMessage ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String m , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > r ) { com.google.gerrit.client.changes.ChangeApi.change ( id.getParentKey ( ) . get ( ) ) . view ( "edit_message" ) . put ( m , r ) ; }
void applyDraft ( com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate ) throws com.google.gwtorm.server.OrmException { if ( ( c.getRevId ( ) ) == null ) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId ( c , cache , change , ps ) ; } draftUpdate.putComment ( c ) ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { hide ( ) ; }
public void parseReviewer ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Patch-Set: 1\n" ) + "Reviewer: Change Owner <1@gerrit>\n" ) + "CC: Other Account <2@gerrit>\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: 1@gerrit\n" ) ) ) ; }
public static org.eclipse.jgit.lib.Config newDefaultConfig ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( cfg ) ; return cfg ; }
public void add ( com.google.gerrit.lifecycle.LifecycleListener listener ) { manager.add ( listener ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( ( activePatchSetId ) > 0 ) && ( ( activePatchSetId ) < ( body.getWidgetCount ( ) ) ) ) { activate ( ( ( activePatchSetId ) + 1 ) ) ; } }
public void revisionTest ( ) throws java.lang.Exception { createChange ( ) ; com.google.gerrit.acceptance.RestResponse response = adminSession.post ( "/changes/1/revisions/1/cookbook~hello-revision" ) ; com.google.common.truth.Truth.assertThat ( response.getEntityContent ( ) ) . contains ( "Hello admin from change 1, patch set 1!" ) ; }
com.google.gerrit.httpd.rpc.patch.PatchScriptFactory create ( com.google.gerrit.reviewdb.Patch.Key patchKey , @ com.google.inject.assistedinject.Assisted ( value = "patchSetA" ) com.google.gerrit.reviewdb.PatchSet.Id patchSetA , @ com.google.inject.assistedinject.Assisted ( value = "patchSetB" ) com.google.gerrit.reviewdb.PatchSet.Id patchSetB , com.google.gerrit.common.data.PatchScriptSettings settings ) ;
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publish.apply ( revision , new com.google.gerrit.server.change.PublishDraftPatchSet.Input ( ) ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish draft patch set" , e ) ; } }
public void onSuccess ( java.lang.Boolean result ) { if ( result ) { link ( Util.C.groupTabAuditLog ( ) , auditLogTabToken , com.google.gerrit.reviewdb.client.AccountGroup.isInternalGroup ( group.getGroupUUID ( ) ) ) ; setToken ( token ) ; } display ( group , result ) ; }
public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent.setFileMode ( FileMode.REGULAR_FILE ) ; ent.setObjectId ( oid ) ; }
public static void detail ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.detail ( id ) . get ( cb ) ; }
public void projectDetail ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { projectDetailFactory.create ( projectName ) . to ( callback ) ; }
public boolean apply ( java.lang.String refPart ) { return refPart.endsWith ( ( "/" + ( changeId.get ( ) ) ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.ProjectInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return list ( this ) ; }
private short getDefaultContext ( ) { final int idx = defaultContext.getSelectedIndex ( ) ; if ( 0 <= idx ) { return java.lang.Short.parseShort ( defaultContext.getValue ( idx ) ) ; } return com.google.gerrit.client.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; }
public void flushCache_NotFound ( ) throws java.lang.Exception { adminSession.post ( "/config/server/caches/nonExisting/flush" ) . assertNotFound ( ) ; }
public void deleteBranchByAdmin ( ) throws java.lang.Exception { assertDeleteSucceeds ( ) ; }
private native void init ( java.lang.String hashtags ) ;
private static java.lang.String skip ( final java.lang.String prefix , final java.lang.String in ) { return in.substring ( prefix.length ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.ProblemInfo in ) { return in.message ; }
public com.google.gerrit.server.IdentifiedUser getUser ( ) { return getControl ( ) . getUser ( ) . asIdentifiedUser ( ) ; }
public final java.util.Set < java.lang.String > commandNames ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _commands ( ) ) ; }
public void testCreateLinkForWebUiDifferentUrlAndText ( ) { mockUnconnectableStoryboard ( ) ; replayMocks ( ) ; com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade itsFacade = createStoryboardItsFacade ( ) ; java.lang.String actual = itsFacade.createLinkForWebui ( "Test-Url" , "Test-Text" ) ; assertEquals ( "[Test-Url|Test-Text]" , actual ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( java.lang.Integer.MAX_VALUE ) ; }
public boolean isVisible ( ) { return ( ( user.isInternalUser ( ) ) || ( canPerformOnAnyRef ( Permission.READ ) ) ) && ( ! ( isHidden ( ) ) ) ; }
public void readCommentLinks ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit ( ) . add ( "project.config" , ( "[commentlink \"bugzilla\"]\n" + ( "\tmatch = \"(bug\\\\s+#?)(\\\\d+)\"\n" + "\tlink = http://bugs.example.com/show_bug.cgi?id=$2" ) ) ) . create ( ) ; com.google.gerrit.server.git.ProjectConfig cfg = read ( rev ) ; java.util.Collection < com.google.gerrit.server.project.CommentLinkInfoImpl > commentLinks = cfg.getCommentLinkSections ( ) ; com.google.common.truth.Truth.assertThat ( commentLinks ) . hasSize ( 1 ) ; com.google.gerrit.server.project.CommentLinkInfoImpl commentLink = commentLinks.iterator ( ) . next ( ) ; com.google.common.truth.Truth.assertThat ( commentLink.name ) . isEqualTo ( "bugzilla" ) ; com.google.common.truth.Truth.assertThat ( commentLink.match ) . isEqualTo ( "(bug\\s+#?)(\\d+)" ) ; com.google.common.truth.Truth.assertThat ( commentLink.link ) . isEqualTo ( "http://bugs.example.com/show_bug.cgi?id=$2" ) ; }
private com.google.gerrit.server.git.GroupList readGroupList ( ) throws java.io.IOException { return com.google.gerrit.server.git.GroupList.parse ( new com.google.gerrit.reviewdb.client.Project.NameKey ( project ) , readUTF8 ( GroupList.FILE_NAME ) , com.google.gerrit.server.git.GroupList.createLoggerSink ( GroupList.FILE_NAME , com.google.gerrit.pgm.init.api.AllProjectsConfig.log ) ) ; }
public java.util.List < com.google.gerrit.server.account.GetSshKeys.SshKeyInfo > apply ( com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException { return getSshKeys.get ( ) . apply ( rsrc ) ; }
public static void fetch ( org.eclipse.jgit.api.Git git , java.lang.String spec ) throws org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.api.FetchCommand fetch = git.fetch ( ) ; fetch.setRefSpecs ( new org.eclipse.jgit.transport.RefSpec ( spec ) ) ; fetch.call ( ) ; }
private PushOneCommit.Result createDraft ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , git ) ; return push.to ( "refs/drafts/master" ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.server.change.ChangeJson.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.postSignIn ( result ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; } finishModuleLoad ( ) ; }
public com.google.template.soy.data.SanitizedContent toSoy ( ) { finishActiveTag ( ) ; return com.google.template.soy.data.UnsafeSanitizedContentOrdainer.ordainAsSafe ( htmlBuf.toString ( ) , ContentKind.HTML ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , com.google.gerrit.server.events.ProjectEvent event ) { fireEvent ( projectName , event ) ; }
public static com.google.gerrit.client.reviewdb.Change.Id fromString ( final java.lang.String str ) { return new com.google.gerrit.client.reviewdb.Change.Id ( java.lang.Integer.parseInt ( str ) ) ; }
protected void formatChange ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "ReplacePatchSet" ) ) ; appendHtml ( soyHtmlTemplate ( "ReplacePatchSetHtml" ) ) ; }
public void visit ( org.commonmark.node.Code node ) { html.open ( "code" ) . appendAndEscape ( node.getLiteral ( ) ) . close ( "code" ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.common.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( change , event , db ) ; }
public void refresh ( ) { Util.DETAIL_SVC.changeDetail ( changeId , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.common.data.ChangeDetail > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.common.data.ChangeDetail r ) { display ( r ) ; } } ) ; }
public boolean canConnect ( org.apache.sshd.common.SshdSocketAddress address , org.apache.sshd.common.Session session ) { return false ; }
public com.google.gerrit.server.ParamertizedString.Builder replace ( ) { return new com.google.gerrit.server.ParamertizedString.Builder ( ) ; }
public boolean isVisible ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ; }
public void start ( ) { queue.getDefaultQueue ( ) . scheduleAtFixedRate ( cleaner , com.googlesource.gerrit.plugins.websession.flatfile.FlatFileWebSessionCacheCleaner.CleanerLifecycle.INITIAL_DELAY_MS , cleanupInterval , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
public static com.google.gerrit.client.GitwebLink getGitwebLink ( ) { com.google.gerrit.common.data.GitwebConfig gw = com.google.gerrit.client.Gerrit.getConfig ( ) . getGitwebLink ( ) ; return ( gw != null ) && ( ( gw.type ) != null ) ? new com.google.gerrit.client.GitwebLink ( gw ) : null ; }
private static synchronized void removeFromActive ( final com.google.gerrit.git.PushQueue.PushOp op ) { com.google.gerrit.git.PushQueue.active.remove ( op.uri ) ; }
private java.lang.String urlGet ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits" ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor ( project ) ; return ( projectControl.isReadable ( ) ) && ( ( ! ( projectControl.isHidden ( ) ) ) || ( config.replicateHiddenProjects ( ) ) ) ; }
public com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage apply ( com.google.gerrit.server.git.validators.CommitValidationMessage input ) { return new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage ( input.getMessage ( ) , input.isError ( ) ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String ref , org.eclipse.jgit.lib.ObjectId oldObjectId , org.eclipse.jgit.lib.ObjectId newObjectId ) { fire ( project , ref , oldObjectId , newObjectId , ReceiveCommand.Type.UPDATE ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; return modify ( edit , new com.google.gerrit.server.edit.tree.RestoreFileModification ( editCommit , file ) ) ; }
public static final javax.servlet.http.HttpServletRequest getCurrentRequest ( ) { return com.google.gwtjsonrpc.server.JsonServlet.perThreadRequest.get ( ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstParentNum ( int parentNum , org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( parentNum , newId , ws , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public static boolean isSignedIn ( ) { return ( com.google.gwt.user.client.Cookies.getCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ) != null ; }
void removeAll ( ) { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar.expandAll ( ) ; } skipBars = null ; } }
protected void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) { args.mergeTip.moveTipTo ( toMerge , toMerge ) ; toMerge.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; if ( ( signedInListener ) != null ) { com.google.gerrit.client.Gerrit.addSignedInListener ( signedInListener ) ; } }
private com.google.gerrit.reviewdb.server.ReviewDb unwrapDb ( ) { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get ( ) ; if ( db instanceof com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) { db = ( ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) ( db ) ) . unsafeGetDelegate ( ) ; } return db ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { detailCache.set ( result ) ; }
protected abstract com.google.inject.Injector createInjector ( ) ;
public com.googlecode.prolog_cafe.lang.PrologMachineCopy loadMachine ( java.lang.String name , java.io.InputStream in ) throws com.googlecode.prolog_cafe.compiler.CompileException { com.googlecode.prolog_cafe.lang.PrologMachineCopy pmc = consultRules ( name , new java.io.InputStreamReader ( in ) ) ; if ( pmc == null ) { throw new com.googlecode.prolog_cafe.compiler.CompileException ( ( "Cannot consult rules from the stream " + name ) ) ; } return pmc ; }
public boolean accept ( java.io.File pathname ) { java.lang.String n = pathname.getName ( ) ; return ( n.endsWith ( ".jar" ) ) && ( pathname.isFile ( ) ) ; }
public java.lang.Void call ( ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( com.google.gerrit.server.git.ReceiveCommits.RequestState state = requestState ( caller ) ) { insertChange ( state ) ; } com.google.gerrit.server.git.ReceiveCommits.synchronizedIncrement ( newProgress ) ; return null ; }
private static boolean wouldPushRef ( final org.spearce.jgit.transport.RemoteConfig cfg , final java.lang.String ref ) { for ( final org.spearce.jgit.transport.RefSpec s : cfg.getPushRefSpecs ( ) ) { if ( s.matchSource ( ref ) ) { return true ; } } return false ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return getControl ( ) . getChange ( ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > toList ( ) { java.util.List < com.google.gerrit.server.query.change.ChangeData > r = rs.toList ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : r ) { cd.cacheFromSource ( source ) ; } return r ; }
public void backupTimestampRefNameForUnsupportedNamespace ( ) throws java.lang.Exception { java.lang.String ref = "refs/changes/45/12345/1" ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.refprotection.BackupRef.get ( null , ref ) ) . isEqualTo ( ref ) ; }
protected static com.google.gerrit.server.query.QueryParseException error ( java.lang.String msg ) { return new com.google.gerrit.server.query.QueryParseException ( msg ) ; }
private static boolean isRewritePossible ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) { return ( ( p.getChildCount ( ) ) > 0 ) && ( ( ( p instanceof com.google.gerrit.server.query.AndPredicate ) || ( p instanceof com.google.gerrit.server.query.OrPredicate ) ) || ( p instanceof com.google.gerrit.server.query.NotPredicate ) ) ; }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; includeWatchers ( NotifyType.ALL_COMMENTS ) ; }
public void onSend ( ) { Util.MANAGE_SVC.cherryPickChange ( patchSet.getId ( ) , getMessageText ( ) , getDestinationBranch ( ) , createCallback ( ) ) ; }
final void setSubmitType ( com.google.gerrit.extensions.common.SubmitType t ) { setSubmitTypeRaw ( t.name ( ) ) ; }
com.google.gerrit.server.change.EmailReviewComments create ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id authorId , com.google.gerrit.reviewdb.client.ChangeMessage message , java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) ;
public int hashCode ( ) { return 31 + ( id ) ; }
public void copySettingsFrom ( final com.google.gerrit.reviewdb.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; useContentMerge = update.useContentMerge ; requireChangeID = update.requireChangeID ; submitType = update.submitType ; }
private < T extends com.google.gwt.event.shared.EventHandler > void fireEvent ( com.google.gwtjsonrpc.client.BaseRpcEvent < T > e ) { e.call = this ; com.google.gwtjsonrpc.client.JsonUtil.fireEvent ( e ) ; }
public java.lang.String toString ( ) { return ( ( ( "Range[" + ( base ) ) + "," ) + ( end ( ) ) ) + "]" ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( id.name ( ) ) ) ; }
public Response.Action getUploadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id , long size ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getUploadAction ( id , size ) ; action.header = java.util.Collections.singletonMap ( org.eclipse.jgit.util.HttpSupport.HDR_AUTHORIZATION , authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.UPLOAD , id ) ) ; return action ; }
public void preDisplay ( final com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > result ) { display ( com.google.gerrit.client.rpc.Natives.asList ( result ) ) ; enableForm ( ) ; }
private org.spearce.jgit.lib.PersonIdent toPersonIdent ( final com.google.gerrit.client.reviewdb.ChangeApproval audit ) { if ( audit == null ) { return null ; } return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newPersonIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; }
public void remove ( ) { registry.remove ( name ) ; }
public void markReady ( ) throws java.io.IOException ;
public boolean canUpdate ( ) { return canPerform ( Permission.PUSH ) ; }
public static java.lang.String toChangeQuery ( java.lang.String query , java.lang.String page ) { return ( ( "/q/" + ( com.google.gwtorm.client.KeyUtil.encode ( query ) ) ) + "," ) + page ; }
public void run ( ) { openIndex.close ( ) ; }
public final native double heightAtLine ( int line , java.lang.String mode ) ;
protected void onInsertComment ( final com.google.gerrit.client.patches.PatchLine line ) { final int row = getCurrentRow ( ) ; createCommentEditor ( ( row + 1 ) , 4 , line.getLineB ( ) , ( ( short ) ( 1 ) ) ) ; }
public void run ( ) { com.google.gerrit.server.git.PerThreadRequestScope ctx = new com.google.gerrit.server.git.PerThreadRequestScope ( ) ; com.google.gerrit.server.git.PerThreadRequestScope old = com.google.gerrit.server.git.PerThreadRequestScope.set ( ctx ) ; try { runPushOperation ( ) ; } finally { com.google.gerrit.server.git.PerThreadRequestScope.set ( old ) ; } }
public void onBrowserEvent ( final com.google.gwt.user.client.Event event ) { if ( ( com.google.gwt.user.client.DOM.eventGetType ( event ) ) == ( com.google.gwt.user.client.Event.ONCLICK ) ) { onClick ( event ) ; } }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { getBatchRefUpdate ( ) . addCommand ( cmd ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.highavailability.Configuration.class ) . in ( Scopes.SINGLETON ) ; install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.highavailability.index.IndexModule ( ) ) ; }
protected void configureServlets ( ) { if ( loggingEnabled ) { filter ( "/*" ) . through ( com.google.gerrit.pgm.http.jetty.GetUserFilter.class ) ; } }
static void unsetForwardedEvent ( ) { com.ericsson.gerrit.plugins.syncindex.Context.FORWARDED_EVENT.remove ( ) ; }
public boolean apply ( java.nio.file.Path p ) { return ! ( p.getFileName ( ) . toString ( ) . endsWith ( ".disabled" ) ) ; }
public void setNotify ( final com.google.gerrit.reviewdb.AccountProjectWatch.Type type , final boolean v ) { switch ( type ) { case NEW_CHANGES : notifySubmittedChanges = v ; break ; case SUBMITS : notifyNewChanges = v ; break ; case COMMENTS : notifyAllComments = v ; break ; } }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return user ; }
public final native void setLine ( int line ) ;
public void onSuccess ( final com.google.gerrit.common.data.AccountProjectWatchInfo result ) { addNew.setEnabled ( true ) ; nameBox.setEnabled ( true ) ; filterTxt.setEnabled ( true ) ; nameBox.setText ( "" ) ; watchesTab.insertWatch ( result ) ; }
public void reAddExistingGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; org.bouncycastle.openpgp.PGPPublicKey pk = key.getPublicKey ( ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 2 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 2 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; pk = org.bouncycastle.openpgp.PGPPublicKey.removeCertification ( pk , "foo:myId" ) ; info = gApi.accounts ( ) . self ( ) . addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 1 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 1 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfoImpl ( serverEnableSignedPush , resource.getControl ( ) , config , pluginConfigEntries , cfgFactory , allProjects , views ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.extensions.api.projects.ConfigInput input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user ( user ) . project ( rsrc.getNameKey ( ) ) . check ( ProjectPermission.WRITE_CONFIG ) ; return apply ( rsrc.getProjectState ( ) , input ) ; }
void doCommentAddedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , java.lang.String comment , java.util.Map < java.lang.String , java.lang.Short > approvals , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public void onFocus ( final com.google.gwt.user.client.ui.Widget sender ) { if ( ( currentRow ) < 0 ) { onDown ( ) ; } }
public com.google.gerrit.server.change.RebaseChangeOp setValidatePolicy ( com.google.gerrit.server.git.validators.CommitValidators.Policy validate ) { this . validate = validate ; return this ; }
void set ( java.lang.String section , java.lang.String subsection , java.lang.String name , java.lang.String value ) ;
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( "^WIP.*" , true ) ; }
private boolean isVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { if ( ( getChange ( ) . isPrivate ( ) ) && ( ! ( isPrivateVisible ( db , cd ) ) ) ) { return false ; } return isRefVisible ( ) ; }
public final native int length ( ) ;
private static com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput newComment ( java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c = new com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( c , path , side , line , message ) ; }
protected org.mortbay.jetty.AbstractConnector getConnector ( ) { return new org.mortbay.jetty.nio.SelectChannelConnector ( ) ; }
public static long getOpenBytes ( ) { return org.eclipse.jgit.storage.file.WindowCache.getInstance ( ) . getOpenBytes ( ) ; }
protected void display ( final com.google.gerrit.reviewdb.client.Account userAccount ) { super . display ( userAccount ) ; displayHasContact ( userAccount ) ; addressTxt.setText ( "" ) ; countryTxt.setText ( "" ) ; phoneTxt.setText ( "" ) ; faxTxt.setText ( "" ) ; }
protected void configureServlets ( ) { serveRegex ( "/index/\\d+$" ) . with ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexRestApiServlet.class ) ; serve ( "/event" ) . with ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServlet.class ) ; }
public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > listGpgKeys ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return gpgApiAdapter.listGpgKeys ( account ) ; } catch ( com.google.gerrit.server.GpgException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list GPG keys" , e ) ; } }
private com.google.gerrit.server.patch.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return new com.google.gerrit.server.patch.PatchListKey ( revisionIdA , revisionIdB , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE ) ; }
public void createBranch ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { gApi.projects ( ) . name ( project.get ( ) ) . branch ( "foo" ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; }
public void addReviewerByEmailToReviewableChangeInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; forAll ( ( adder ) -> { java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
void changeExternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.AccountGroup.ExternalNameKey bindTo , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) ;
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; com.google.gerrit.server.Lifecycle.start ( dbInjector , sysInjector , sshInjector , webInjector ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return "/admin/groups/" + ( id.toString ( ) ) ; }
Account.Id getAuthorId ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( getControl ( ) . getCurrentUser ( ) ) ) . getAccountId ( ) ; }
private java.io.File randomTargetFile ( ) { final java.io.File t = new java.io.File ( "target" ) ; return new java.io.File ( t , ( "random-name-" + ( java.util.UUID.randomUUID ( ) . toString ( ) ) ) ) ; }
public T decode ( byte [ ] buf ) { return decode ( com.google.protobuf.CodedInputStream.newInstance ( buf ) ) ; }
public static boolean isMagicBranch ( java.lang.String refName ) { return ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_DRAFT_CHANGE ) ) || ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_CHANGE ) ) ; }
public void testCreateProjectWithEmptyCommit ( ) throws java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.create_empty_commit = true ; session.put ( ( "/projects/" + newProjectName ) , in ) ; assertEmptyCommit ( newProjectName , "refs/heads/master" ) ; }
public boolean supportsDisplayNameChanges ( com.gitblit.models.UserModel user ) { return false ; }
public com.google.gerrit.extensions.restapi.BinaryResult patch ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPatch.apply ( revision ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get patch" , e ) ; } }
java.util.Map < java.lang.String , java.lang.Short > getLabels ( ) { return labels ; }
public synchronized com.google.gerrit.testutil.InMemoryRepositoryManager.Repo openRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException { return get ( name ) ; }
public final native void showTabs ( boolean s ) ;
public < T extends com.google.gwt.core.client.JavaScriptObject > void get ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.GET , cb ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box ) { diffTable.onRemoveDraftBox ( box ) ; }
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( com.google.gerrit.acceptance.TestAccount account , java.lang.String changeId , com.google.gerrit.extensions.client.ListChangesOption ... options ) throws java.io.IOException { return gApi.changes ( ) . id ( changeId ) . get ( options ) ; }
void registerReplyBox ( com.google.gerrit.client.diff.DraftBox box ) { replyBox = box ; box.registerReplyToBox ( this ) ; }
private void preMerge ( final com.google.gerrit.server.git.SubmitStrategy strategy , final java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run ( branchTip , toMerge ) ; refLogIdent = strategy.getRefLogIdent ( ) ; commits.putAll ( strategy.getNewCommits ( ) ) ; }
public int compare ( com.google.gerrit.server.account.GetEmails.EmailInfo a , com.google.gerrit.server.account.GetEmails.EmailInfo b ) { return a.email.compareTo ( b.email ) ; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.extensions.common.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
void notifyStarting ( final com.google.gerrit.server.git.PushOp op ) { synchronized ( pending ) { pending.remove ( op.getURI ( ) ) ; } }
public void setup ( ) { conn = org.mockito.Mockito.mock ( java.sql.Connection.class ) ; }
public com.google.gerrit.server.IdentifiedUser parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = _parse ( id ) ; if ( user == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Account Not Found: %s" , id ) ) ; } return user ; }
void set ( com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . changeId = changeId ; reviewerSuggestOracle.setChange ( changeId ) ; }
public org.eclipse.jgit.revwalk.RevWalk getRevWalk ( ) throws java.io.IOException { return this . getRevWalk ( ) ; }
protected boolean removeEldestEntry ( java.util.Map.Entry < java.lang.String , com.google.gerrit.client.projects.ConfigInfoCache.Entry > e ) { return ( size ( ) ) > ( com.google.gerrit.client.projects.ConfigInfoCache.LIMIT ) ; }
private com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( java.lang.String changeId , java.lang.String reviewer ) throws java.lang.Exception { com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; in.reviewer = reviewer ; return addReviewer ( changeId , in ) ; }
public void evict ( com.google.gerrit.reviewdb.StarredChange.Key key ) { byAccountId.remove ( key.getParentKey ( ) ) ; byChangeId.remove ( key.getChangeId ( ) ) ; }
public static native com.google.gerrit.client.account.AccountInfo create ( int id , java.lang.String name , java.lang.String email ) ;
private static com.google.common.base.Optional < com.google.gitiles.FormatType > set ( javax.servlet.http.HttpServletRequest req , com.google.common.base.Optional < com.google.gitiles.FormatType > format ) { req.setAttribute ( com.google.gitiles.FormatType.FORMAT_TYPE_ATTRIBUTE , format ) ; return format ; }
public static java.sql.Timestamp roundTimestampToSecond ( java.sql.Timestamp t ) { long milliseconds = ( ( t.getTime ( ) ) / 1000 ) * 1000 ; return new java.sql.Timestamp ( milliseconds ) ; }
public void testUpsertTwoNotExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE ) ; java.sql.PreparedStatement insert = stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; verifyIds ( insert , 1 , 2 ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { onOpenRow ( table.getCellForEvent ( event ) . getRowIndex ( ) ) ; }
public void allRefsVisibleWithRefsMetaConfig ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/meta/config" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/changes/02/2/1" , "refs/heads/branch" , "refs/heads/master" , "refs/meta/config" ) ; }
void cacheVisibleTo ( com.google.gerrit.server.CurrentUser user ) { visibleTo = user ; }
public com.google.gerrit.extensions.api.projects.BranchInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return resource ( ) . getBranchInfo ( ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot read branch" , e ) ; } }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) { return control.getNotes ( ) ; }
public void badParameters ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap < > ( ) ; params.put ( "t1" , "bad format" ) ; params.put ( "t2" , "bad format" ) ; com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( params ) ; }
public com.google.gwtexpui.safehtml.client.SafeHtml linkify ( ) { final java.lang.String part = "(?:" + ( ( ( "[a-zA-Z0-9$_+!*'%;:@=?#/~-]" + "|&(?!lt;|gt;)" ) + "|[.,](?!(?:\\s|$))" ) + ")" ) ; return replaceAll ( ( ( ( ( ( ( ( ( ( "(https?://" + part ) + "{2,}" ) + "(?:[(]" ) + part ) + "*" ) + "[)])*" ) + part ) + "*" ) + ")" ) , "<a href=\"$1\" target=\"_blank\" rel=\"nofollow\">$1</a>" ) ; }
public void setIncludes ( java.util.List < com.google.gerrit.reviewdb.client.AccountGroupById > i ) { includes = i ; }
public void flushAll_Forbidden ( ) throws java.lang.Exception { userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH_ALL ) ) . assertForbidden ( ) ; }
public void visit ( org.pegdown.ast.Node node ) { com.google.common.base.Preconditions.checkState ( false , "node %s unsupported" , node.getClass ( ) ) ; }
public void setStatus ( final com.google.gerrit.client.reviewdb.Change.Status newStatus ) { status = newStatus.getCode ( ) ; }
public Response.Action getDownloadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getDownloadAction ( id ) ; com.googlesource.gerrit.plugins.lfs.AuthInfo authInfo = authorizer.generateAuthInfo ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.DOWNLOAD , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.ExpiringAction ( action.href , authInfo ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
public void review ( final java.lang.String newStatus , final com.google.gerrit.client.reviewdb.Account.Id by ) { status = newStatus ; reviewedBy = by ; reviewedOn = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
public void removeApproval ( java.lang.String label ) { approvals.put ( label , com.google.common.base.Optional.< java.lang.Short > absent ( ) ) ; }
public void myStarredChangeIds ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > > callback ) { callback.onSuccess ( currentUser.get ( ) . getStarredChanges ( ) ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; return modify ( edit , new com.google.gerrit.server.edit.tree.RenameFileModification ( editCommit , file , newFile ) ) ; }
protected com.google.gerrit.client.admin.ProjectRightsPanel create ( ) { return new com.google.gerrit.client.admin.ProjectRightsPanel ( projectId ) ; }
public void run ( ) { resizePaddingOnOtherSide ( side , instance.getLineNumber ( handle ) ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSets ) == null ) { patchSets = db.patchSets ( ) . byChange ( legacyId ) . toList ( ) ; } return patchSets ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply ( com.google.gerrit.server.config.ConfigResource rsrc ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = gitMgr.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.PreferencesConfig.readDefaultPreferences ( git ) ; } }
public void setUp ( ) throws java.lang.Exception { setApiUser ( user ) ; user2 = accounts.user2 ( ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
private static java.lang.String id ( final java.lang.Integer id ) { return id != null ? com.google.gerrit.server.util.IdGenerator.format ( id ) : "" ; }
public void setContentLength ( int length ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( commit , otherCommit , submitType , contentMerge ) ; }
public final java.lang.String id_abbreviated ( ) { return new com.google.gerrit.reviewdb.client.Change.Key ( change_id ( ) ) . abbreviate ( ) ; }
public void listTagsWithoutOptions ( ) throws java.lang.Exception { createTags ( ) ; java.util.List < com.google.gerrit.extensions.api.projects.TagInfo > result = getTags ( ) . get ( ) ; assertTagList ( com.google.common.collect.FluentIterable.from ( com.google.gerrit.acceptance.rest.project.TagsIT.testTags ) , result ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return user ; }
public void accountTest ( ) throws java.lang.Exception { java.lang.String [ ] myTestEmails = new java.lang.String [ ] { "abc@g.com" , "abc+xyz@g.com" , "xyz@g.com" } ; for ( java.lang.String email : myTestEmails ) { com.google.gerrit.reviewdb.client.Account.Id id = accounts.create ( ( "User" + email ) , email , ( "FullName" + email ) ) . getId ( ) ; com.google.common.truth.Truth.assertThat ( accountCache.get ( id ) . getAccount ( ) . getPreferredEmail ( ) ) . isEqualTo ( email ) ; com.google.common.truth.Truth.assertThat ( db.accounts ( ) . get ( id ) . getPreferredEmail ( ) ) . isEqualTo ( email ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.change.ChangeKindCache.class ) . to ( com.google.gerrit.server.change.ChangeKindCacheImpl.class ) ; persist ( com.google.gerrit.server.change.ChangeKindCacheImpl.ID_CACHE , com.google.gerrit.server.change.ChangeKindCacheImpl.Key.class , com.google.gerrit.server.change.ChangeKind.class ) . maximumWeight ( ( 2 << 20 ) ) . weigher ( com.google.gerrit.server.change.ChangeKindCacheImpl.ChangeKindWeigher.class ) ; }
protected com.google.gerrit.pgm.init.ConsoleUI getConsoleUI ( ) { return com.google.gerrit.pgm.init.ConsoleUI.getInstance ( batchMode ) ; }
public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; }
public void run ( ) { doLog ( req , rsp ) ; }
public void rebase ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebaseChangeEdit.apply ( changeResource , null ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot rebase change edit" , e ) ; } }
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . < T > fromJson ( buildJsonRaw ( path ) , typeOfT ) ; }
public void onCreateAccount ( final com.google.gerrit.server.account.AuthRequest who , final com.google.gerrit.reviewdb.client.Account account ) { usernameCache.put ( who.getLocalUser ( ) , com.google.common.base.Optional.of ( account.getId ( ) ) ) ; }
public void doChangeRestoreHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , java.lang.String reason , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public java.lang.String getAuthorization ( ) { return isSignedIn ( ) ? "Bearer " + ( key.getToken ( ) ) : null ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS ) ; }
org.eclipse.jgit.lib.ObjectId getCommit ( ) { return commit ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { onSubmitResult ( result ) ; }
private void enableForm ( final boolean on ) { ownerTxtBox.setEnabled ( on ) ; descTxt.setEnabled ( on ) ; }
public void create ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply ( changeResource , null ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot create change edit" , e ) ; } }
public void upsertComments ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchLineComment c : comments ) { update.upsertComment ( c ) ; } db.patchComments ( ) . upsert ( comments ) ; }
public void execute ( java.lang.String issue , java.lang.Iterable < com.googlesource.gerrit.plugins.hooks.workflow.ActionRequest > actions ) { throw new java.lang.RuntimeException ( "unimplemented" ) ; }
public final native boolean isScrollSetByOther ( ) ;
private static com.google.gerrit.client.rpc.RestApi groups ( ) { return new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) ; }
public void reviewCurrent ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( com.google.gerrit.acceptance.api.revision.RevisionIT.approve ( ) ) ; }
com.google.gerrit.sshd.SshScope.Context set ( com.google.gerrit.sshd.SshScope.Context ctx ) { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.current.get ( ) ; com.google.gerrit.sshd.SshScope.current.set ( ctx ) ; return old ; }
public java.lang.String getDisplayString ( ) { return info.getName ( ) ; }
public void mine ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.MineResult > callback ) ;
public void allRefsVisibleWithRefsMetaConfig ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/meta/config" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/changes/01/1/meta" , "refs/changes/02/2/1" , "refs/changes/02/2/meta" , "refs/heads/branch" , "refs/heads/master" , "refs/meta/config" ) ; }
private boolean isRepo ( java.nio.file.Path p ) { return ( ! ( p.getFileName ( ) . toString ( ) . equals ( Constants.DOT_GIT ) ) ) && ( org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository ( p.toFile ( ) , FS.DETECTED ) ) ; }
public com.google.gwt.user.client.ui.MenuItem addItem ( final com.google.gwt.user.client.ui.MenuItem item ) { item.addStyleDependentName ( "NormalItem" ) ; return super . addItem ( item ) ; }
public java.lang.String src ( ) { return ( ( ( ( srcRepoKey ) + ":" ) + ( srcRef ) ) + ":" ) + ( xmlPath ) ; }
public void execute ( ) { insertNewDraft ( cm ) . run ( ) ; }
public < T > com.google.common.base.Optional < T > getResource ( java.lang.String resourcePath , java.lang.Class < ? extends T > resourceClass ) { return com.google.common.base.Optional.absent ( ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 ) ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultAccountGroupName ( ) . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( "" ) ; nameTxtBox.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void operationComplete ( org.apache.mina.core.future.IoFuture future ) { final com.google.gerrit.sshd.SshScope.Context ctx = new com.google.gerrit.sshd.SshScope.Context ( sd ) ; final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( ctx ) ; try { log.onLogout ( ) ; } finally { com.google.gerrit.sshd.SshScope.set ( old ) ; } }
protected Account ( ) { }
com.google.gerrit.client.diff.DraftBox addReplyBox ( ) { com.google.gerrit.client.diff.DraftBox box = getDiffScreen ( ) . addDraftBox ( getDiffScreen ( ) . createReply ( comment ) , getSide ( ) ) ; registerReplyBox ( box ) ; return box ; }
public void configureCmds ( ) { command ( "print" ) . to ( com.google.gerrit.plugins.PrintHelloWorldCommand.class ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ProjectMap map ) { callback.onSuggestionsReady ( req , new com.google.gerrit.client.ui.Response ( map.values ( ) . asList ( ) ) ) ; }
protected void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.AccountGroup > result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; }
public void reload ( ) { execResource ( com.google.gerrit.pgm.shell.JythonShell.STARTUP_RESOURCE ) ; execFile ( com.google.gerrit.launcher.GerritLauncher.getHomeDirectory ( ) , com.google.gerrit.pgm.shell.JythonShell.STARTUP_FILE ) ; }
protected void setApiHeaders ( javax.servlet.http.HttpServletResponse res , com.google.gitiles.FormatType type ) { setApiHeaders ( res , type.getMimeType ( ) ) ; }
public final boolean isHttpPasswordSettingsEnabled ( ) { if ( ( isLdap ( ) ) && ( isGitBasicAuth ( ) ) ) { return false ; } return true ; }
protected com.google.gerrit.reviewdb.AccountGroup missing ( final com.google.gerrit.reviewdb.AccountGroup.Id key ) { return missingGroup ( key ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.schema.SchemaVersion.class ) . annotatedWith ( com.google.gerrit.server.schema.Current.class ) . to ( info.C ) ; }
public void setPatchSets ( java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) { BRANCH ( d57655 ) ; }
public final native void scrollToY ( int y ) ;
private static java.lang.String findId ( final java.util.Collection < com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId > ids ) { for ( final com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId i : ids ) { if ( i.isScheme ( AccountExternalId.SCHEME_GERRIT ) ) { return i.getSchemeRest ( ) ; } } return null ; }
protected int findRow ( java.lang.Object id ) { com.google.gerrit.client.diff.FileInfo info = map.get ( ( ( java.lang.String ) ( id ) ) ) ; return info != null ? 1 + ( info._row ( ) ) : - 1 ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initMemberList ( ) ; }
public void onSuccess ( final com.google.gerrit.client.VoidResult result ) { saveOwner.setEnabled ( false ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.reviewdb.AccountDiffPreference > event ) { update ( event.getValue ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.server.plugins.ServerPluginProvider provider ) { return provider.getProviderPluginName ( ) ; }
public void defaultGpgCertificationMatchesEmail ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKey.key5 ( ) ; assertProblems ( com.google.gerrit.gpg.testutil.TestKey.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( "identities:\n" + " gerrit:user\n" ) + " username:user" ) ) ) ; addExternalId ( "test" , "test" , "test5@example.com" ) ; assertNoProblems ( key ) ; }
void resizePaddingWidget ( ) { paddingWidgetEle.getStyle ( ) . setHeight ( getOffsetHeight ( ) , Unit.PX ) ; }
public void setAssignee ( com.google.common.base.Optional < com.google.gerrit.reviewdb.client.Account.Id > assignee ) { this . assignee = assignee ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.reviewdb.client.AccountGroup item ) { return item.getId ( ) ; }
public void testIndexChangeThrowsException ( ) throws java.lang.Exception { setUpMocks ( com.ericsson.gerrit.plugins.multimaster.RestSessionTest.INDEX_OP , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.FAILED , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.EXCEPTION_MSG , com.ericsson.gerrit.plugins.multimaster.RestSessionTest.THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.index ( com.ericsson.gerrit.plugins.multimaster.RestSessionTest.CHANGE_NUMBER ) ) . isFalse ( ) ; }
public org.eclipse.jgit.revwalk.RevWalk getRevWalk ( ) throws java.io.IOException { initRepository ( ) ; return revWalk ; }
public void afterTest ( ) { notesMigration.resetFromEnv ( ) ; }
public int run ( ) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.server.config.GerritGlobalModule.createInjector ( ) ; com.google.inject.Injector sshInjector = createSshInjector ( sysInjector ) ; com.google.gerrit.server.Lifecycle.start ( sysInjector , sshInjector ) ; return never ( ) ; }
public void removed ( final com.google.gerrit.reviewdb.client.Account.Id deleter ) { removedBy = deleter ; removedOn = com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.now ( ) ; }
public static java.lang.String toChange2 ( com.google.gerrit.reviewdb.client.Change.Id c , java.lang.String p ) { return ( ( "/c2/" + c ) + "/" ) + p ; }
boolean handles ( java.io.File srcFile ) ;
private static void addFooter ( java.lang.StringBuilder sb , org.eclipse.jgit.revwalk.FooterKey footer , java.lang.Object value ) { sb.append ( footer.getName ( ) ) . append ( ": " ) . append ( value ) . append ( '\n' ) ; }
public final com.google.gerrit.server.index.Schema < V > getPrevious ( ) { if ( ( schemas.size ( ) ) <= 1 ) { return null ; } return com.google.common.collect.Iterables.get ( schemas.descendingMap ( ) . values ( ) , 1 ) ; }
public static void addSshKey ( java.lang.String account , java.lang.String sshPublicKey , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.account.SshKeyInfo > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "sshkeys" ) . post ( sshPublicKey , cb ) ; }
protected void assertSubmittedTogether ( java.lang.String chId , java.lang.String ... expected ) throws java.lang.Exception { java.util.EnumSet < com.google.gerrit.extensions.client.SubmittedTogetherOption > o = java.util.EnumSet.noneOf ( com.google.gerrit.extensions.client.SubmittedTogetherOption.class ) ; assertSubmittedTogether ( chId , o , expected ) ; }
public boolean deleteChangeFromIndex ( final int changeId ) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request ( ( ( "delete change " + changeId ) + " from index" ) ) { @ java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send ( ) throws java.io.IOException { return httpSession.delete ( buildIndexEndpoint ( changeId ) ) ; } } . execute ( ) ; }
public void voteOnBehalfOfWithCommentWritingJson ( ) throws java.lang.Exception { testVoteOnBehalfOfWithComment ( ) ; }
static java.lang.String encoding ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.Objects.firstNonNull ( req.getCharacterEncoding ( ) , "UTF-8" ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; engine.areg3 = this . areg3 ; engine.areg4 = this . areg4 ; }
protected java.lang.String getId ( com.google.gerrit.server.project.ProjectData projectState ) { return projectState.getProject ( ) . getName ( ) ; }
java.lang.String getPluginName ( java.io.File srcFile ) ;
final native void set_submittable ( boolean s ) ;
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAddReviewers ( reviewerIds , id , db , txn ) ; }
void addProjectWatch ( java.lang.String projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.AccountProjectWatchInfo > callback ) ;
public void init ( javax.servlet.FilterConfig cfg ) throws javax.servlet.ServletException { contextInitialized ( new javax.servlet.ServletContextEvent ( cfg.getServletContext ( ) ) ) ; init ( ) ; manager.start ( ) ; }
public void noCopyAllScoresIfNoChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result patchSet = readyPatchSetForNoChangeRebase ( ) ; rebase ( patchSet ) ; assertApproval ( patchSet , 0 ) ; }
public void run ( ) { com.google.gerrit.client.diff.DraftBox draftBox = ( ( com.google.gerrit.client.diff.DraftBox ) ( box ) ) ; if ( draftBox.isEdit ( ) ) { draftBox.editArea.setFocus ( true ) ; } }
public com.google.gerrit.client.diff.DiffApi webLinksOnly ( ) { call.addParameter ( "weblinks-only" , true ) ; return this ; }
public void onLoad ( com.google.gerrit.plugin.client.extension.Panel panel ) { panel.setWidget ( new com.googlesource.gerrit.plugins.cookbook.client.CookBookProfileExtension ( ) ) ; }
private int getSepPos ( java.lang.String fromTo ) { int sepPos = fromTo.indexOf ( com.googlesource.gerrit.plugins.github.GitHubConfig.FROM_TO_SEPARATOR ) ; if ( sepPos < 0 ) { throw new com.googlesource.gerrit.plugins.github.InvalidGitHubConfigException ( fromTo ) ; } return sepPos ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? executor.submit ( indexTask ( cd ) ) : com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public java.lang.String getAccessToken ( ) ;
private void submit ( ) { Util.MANAGE_SVC.submit ( patchSetId , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.common.data.ChangeDetail > ( ) { public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { saveStateOnUnload = false ; goChange ( ) ; } } ) ; }
public double doubleValue ( ) { return ( ( double ) ( this . val ) ) ; }
public void testUpdateNothing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { createClassUnderTest ( ) . update ( com.google.gwtorm.jdbc.TestJdbcAccess.NO_DATA ) ; }
public void deleteGpgKey ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKey.key1 ( ) ; java.lang.String id = key.getKeyIdString ( ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; addGpgKey ( key.getPublicKeyArmored ( ) ) ; assertKeys ( key ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . delete ( ) ; assertKeys ( ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int limit ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 , limit ) ; }
private com.google.gerrit.httpd.raw.StaticModule.Paths getPaths ( ) { if ( ( paths ) == null ) { paths = new com.google.gerrit.httpd.raw.StaticModule.Paths ( ) ; } return paths ; }
public void submit ( com.google.gerrit.extensions.api.changes.SubmitInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { submit.apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot submit change" , e ) ; } }
public void move ( com.google.gerrit.extensions.api.changes.MoveInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { move.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot move change" , e ) ; } }
private com.google.gerrit.pgm.Init.SiteRun createSiteRun ( final com.google.gerrit.pgm.Init.SiteInit init ) { return createSysInjector ( init ) . getInstance ( com.google.gerrit.pgm.Init.SiteRun.class ) ; }
private java.lang.String comparePattern ( ) { if ( getName ( ) . startsWith ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX ) ) { return getName ( ) . substring ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX.length ( ) ) ; } return getName ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( final com.google.gerrit.reviewdb.client.PatchSet.Id c ) { return approvalsUtil.getSubmitter ( db.get ( ) , c ) ; }
public void execute ( ) { for ( com.google.gerrit.client.diff.CommentBox box : allBoxes ) { box.resizePaddingWidget ( ) ; } }
protected com.google.common.base.Optional < com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken > createToken ( java.util.List < java.lang.String > values ) { return com.google.common.base.Optional.of ( new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken ( values.get ( 0 ) ) ) ; }
private org.eclipse.jgit.lib.PersonIdent createPersonIdent ( ) { return identifiedUser.get ( ) . newCommitterIdent ( serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ; }
public void setCookie ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , com.gitblit.models.UserModel user ) { }
public void addPublishedComments ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchLineComment c : comments ) { update.putComment ( c ) ; } db.patchComments ( ) . upsert ( comments ) ; }
boolean canAddPatchSet ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.ADD_PATCH_SET ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public void display ( final com.google.gerrit.client.groups.GroupMap groups ) { display ( groups , null ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.client.AccountExternalId result ) { display ( result ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { upLink.go ( ) ; }
private final native java.lang.String getRaw ( ) ;
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.Project > result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
private E getLast ( ) { return get ( ( ( size ( ) ) - 1 ) ) ; }
public static com.google.gerrit.client.ui.PagingHyperlink createPrev ( ) { return new com.google.gerrit.client.ui.PagingHyperlink ( Util.C.pagedListPrev ( ) ) ; }
public com.google.gerrit.server.cache.h2.H2CacheImpl.DiskStats diskStats ( ) { return store.diskStats ( ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; display ( diff ) ; }
void visit ( com.google.gitiles.doc.DivNode node ) ;
public void onSuccess ( com.google.gerrit.client.changes.PublishCommentScreen.ReviewInput result ) { if ( submit ) { submit ( ) ; } else { saveStateOnUnload = false ; goChange ( ) ; } }
public void testEvictGroupsByIncludeOK ( ) throws java.lang.Exception { setupMocks ( Constants.GROUPS_BYINCLUDE , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.GROUPS_BYINCLUDE , createMock ( AccountGroup.UUID.class ) ) ) . isTrue ( ) ; }
void deleteGroupIncludes ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , java.util.Set < com.google.gerrit.reviewdb.client.AccountGroupInclude.Key > keys , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) ;
public static void setHeaderVisible ( boolean visible ) { com.google.gerrit.client.Gerrit.topMenu.setVisible ( visible ) ; com.google.gerrit.client.Gerrit.siteHeader.setVisible ( ( visible && ( ( com.google.gerrit.client.Gerrit.myAccount ) != null ? com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences ( ) . isShowSiteHeader ( ) : true ) ) ) ; }
private boolean hasUpToDateCachedResource ( com.google.gerrit.httpd.plugins.Resource cachedResource , long lastUpdateTime ) { return ( cachedResource != null ) && ( cachedResource.isUnchanged ( lastUpdateTime ) ) ; }
public void setAction ( com.google.gerrit.common.data.PermissionRule.Action action ) { if ( action == null ) { throw new java.lang.NullPointerException ( "action" ) ; } setDeny ( ( action == ( com.google.gerrit.common.data.PermissionRule.Action.DENY ) ) ) ; }
public boolean equals ( final java.lang.Object obj ) { return ( obj instanceof com.google.gerrit.sshd.CommandName ) && ( value ( ) . equals ( ( ( com.google.gerrit.sshd.CommandName ) ( obj ) ) . value ( ) ) ) ; }
public java.util.List < org.eclipse.jgit.dircache.DirCacheEditor.PathEdit > getPathEdits ( org.eclipse.jgit.lib.Repository repository ) { org.eclipse.jgit.dircache.DirCacheEditor.DeletePath deletePathEdit = new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath ( filePath ) ; return java.util.Collections.singletonList ( deletePathEdit ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RESTORE_ENTRY , edit , file , null , null ) ; }
private void doAdd ( ) { addMember.fireEvent ( new com.google.gwt.event.dom.client.ClickEvent ( ) { } ) ; }
private void tearDown ( ) throws java.lang.Exception { stat.execute ( ( "DROP TABLE " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) ) ; BRANCH ( 6 ) ; com.ericsson.gerrit.plugins.eventslog.sql.cf0c7 Update ; com.ericsson.gerrit.plugins.eventslog.sql.to latest = ( stable ) - 2.14 ; com.ericsson.gerrit.plugins.eventslog.sql.to use ; }
com.google.gerrit.server.change.PatchSetInserter create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.revwalk.RevCommit commit ) ;
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , null , branch , null , null ) ; }
protected void assertSubmittedTogether ( java.lang.String chId , java.lang.String ... expected ) throws java.lang.Exception { java.util.EnumSet < com.google.gerrit.extensions.client.SubmittedTogetherOption > o = java.util.EnumSet.noneOf ( com.google.gerrit.extensions.client.SubmittedTogetherOption.class ) ; assertSubmittedTogether ( chId , o , expected ) ; }
public void linkifyAmpersand ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url?a&b" , "url" , "http://my/url?a&b" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url?a&b" ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://weird/htmlified/?url" , "url" , "http://weird/htmlified/?url" ) , com.google.common.collect.ImmutableMap.of ( "text" , "&lt;p&rt;" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://weird/htmlified/?url&lt;p&rt;" ) ) ; }
private static com.google.gerrit.server.git.CodeReviewCommit error ( com.google.gerrit.server.git.CommitMergeStatus s ) { com.google.gerrit.server.git.CodeReviewCommit r = new com.google.gerrit.server.git.CodeReviewCommit ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) ; r.statusCode = s ; return r ; }
public void currentPatchSetMissing ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( project , userId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; com.google.common.truth.Truth.assertThat ( checker.check ( c ) ) . containsExactly ( "Current patch set 1 not found" ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; hide ( ) ; }
private static java.lang.String findId ( java.util.Collection < com.google.gerrit.server.account.ExternalId > extIds ) { for ( com.google.gerrit.server.account.ExternalId extId : extIds ) { if ( extId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT ) ) { return extId.key ( ) . id ( ) ; } } return null ; }
public com.google.gerrit.server.change.MergeabilityChecker.Check addBranch ( com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { branches.add ( branch ) ; return this ; }
public com.google.gerrit.server.group.GroupJson.GroupInfo apply ( com.google.gerrit.server.group.IncludedGroupResource rsrc ) { return json.addOption ( com.google.gerrit.common.groups.ListGroupsOption.OWNER ) . format ( rsrc.getMemberDescription ( ) ) ; }
public void setUseContributorAgreements ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean u ) { useContributorAgreements = u ; }
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . < T > fromJson ( buildJsonRaw ( path ) , typeOfT ) ; }
com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create ( @ com.google.inject.assistedinject.Assisted ( value = "psIdNew" ) com.google.gerrit.reviewdb.PatchSet.Id psIdA , @ com.google.inject.assistedinject.Assisted ( value = "psIdOld" ) com.google.gerrit.reviewdb.PatchSet.Id psIdB , com.google.gerrit.reviewdb.AccountDiffPreference diffPrefs ) ;
public java.lang.Object getScreenCacheToken ( ) { return this ; }
protected void configure ( ) { factory ( ProjectControl.Factory.class ) ; bind ( ChangeControl.Factory.class ) ; }
public void setUp ( ) throws java.lang.Exception { project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; }
private static void addCommand ( com.google.gerrit.extensions.common.FetchInfo fetchInfo , java.lang.String commandName , java.lang.String c ) { if ( ( fetchInfo.commands ) == null ) { fetchInfo.commands = com.google.common.collect.Maps.newTreeMap ( ) ; } fetchInfo.commands.put ( commandName , c ) ; }
public void testCreateProjectWithEmptyCommit ( ) throws java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.server.project.CreateProject.Input in = new com.google.gerrit.server.project.CreateProject.Input ( ) ; in.createEmptyCommit = true ; adminSession.put ( ( "/projects/" + newProjectName ) , in ) ; assertEmptyCommit ( newProjectName , "refs/heads/master" ) ; }
private com.google.gerrit.reviewdb.SystemConfig getSystemConfig ( ) { return new com.google.gerrit.server.config.SystemConfigProvider ( db ) . get ( ) ; }
public java.util.List < com.google.gerrit.client.reviewdb.AccountExternalId > run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account.Id me = com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ; return db.accountExternalIds ( ) . byAccount ( me ) . toList ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , remotePeerProvider , null , id ) ; }
private void assertNotOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . isOwner ( ) ) . named ( ( "NOT OWN " + ref ) ) . isFalse ( ) ; }
public static java.lang.String toChangeQuery ( final java.lang.String query ) { return ( ( "q," + ( com.google.gwtorm.client.KeyUtil.encode ( query ) ) ) + "," ) + ( com.google.gerrit.common.PageLinks.TOP ) ; }
com.google.gerrit.server.change.RebaseChangeOp create ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet originalPatchSet , org.eclipse.jgit.lib.ObjectId baseCommitId ) ;
public java.lang.Object getScreenCacheToken ( ) { return new com.google.gerrit.client.changes.PublishCommentScreen.ScreenCacheToken ( patchSetId ) ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , false ) . run ( ) ; } }
void add ( com.google.gwt.user.client.ui.Widget widget ) { ( ( com.google.gwt.user.client.ui.HTMLPanel ) ( getWidget ( ) ) ) . add ( widget ) ; }
public final native void setSelection ( net.codemirror.lib.LineCharacter anchor , net.codemirror.lib.LineCharacter head ) ;
protected void configureServlets ( ) { }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { upToChange ( ) ; }
protected void configureServlets ( ) { install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderServletModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionModule ( ) ) ; }
private static boolean isControlBlockStart ( com.google.gerrit.server.patch.Text a , int idx ) { final java.lang.String l = a.getLine ( idx ) ; return com.google.gerrit.server.patch.PatchListCacheImpl.CONTROL_BLOCK_START_RE.matcher ( l ) . find ( ) ; }
protected java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > getProjectOwners ( ) { final com.google.gerrit.server.project.ProjectState r ; r = args.projectCache.get ( change.getProject ( ) ) ; return r != null ? r.getOwners ( ) : java.util.Collections.< com.google.gerrit.reviewdb.AccountGroup.UUID > emptySet ( ) ; }
public boolean isMatchable ( ) { return ( this ) instanceof com.google.gerrit.server.query.Matchable ; }
public com.google.common.base.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) throws java.io.IOException { return com.google.common.base.Optional.absent ( ) ; }
static java.lang.String computeCanonicalPath ( java.lang.String canonicalURL ) throws java.net.URISyntaxException { java.net.URI uri = new java.net.URI ( canonicalURL ) ; return uri.getPath ( ) . replaceAll ( "/$" , "" ) ; }
public void manualCertificationMatchesExternalId ( ) throws java.lang.Exception { addExternalId ( "foo" , "myId" , null ) ; assertNoProblems ( com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ) ; }
private void fireEvent ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.events.ProjectEvent event ) { for ( com.google.gerrit.common.ChangeHookRunner.EventListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( project , holder.user ) ) { holder.listener.onEvent ( event ) ; } } fireEventForUnrestrictedListeners ( event ) ; }
public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent.setFileMode ( mode ) ; ent.setObjectId ( oid ) ; }
abstract java.lang.Runnable toggleOpenBox ( final net.codemirror.lib.CodeMirror cm ) ;
protected void preDisplay ( final com.google.gerrit.common.data.AccountDashboardInfo r ) { display ( r ) ; }
public void stop ( ) { consoleReporter.stop ( ) ; }
private static boolean isRecognizedScheme ( com.google.gerrit.extensions.config.DownloadScheme scheme ) { return ( ( ( scheme instanceof com.googlesource.gerrit.plugins.download.scheme.SshScheme ) || ( scheme instanceof com.googlesource.gerrit.plugins.download.scheme.HttpScheme ) ) || ( scheme instanceof com.googlesource.gerrit.plugins.download.scheme.AnonymousHttpScheme ) ) || ( scheme instanceof com.googlesource.gerrit.plugins.download.scheme.GitScheme ) ; }
private com.google.gerrit.server.config.GetServerInfo.ServerInfo getServerConfig ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.get ( "/config/server/info/" ) ; r.assertOK ( ) ; return newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.server.config.GetServerInfo.ServerInfo.class ) ; }
public void evict ( final com.google.gerrit.reviewdb.Account.Id accountId ) { byId.remove ( accountId ) ; }
private static java.lang.String my ( org.eclipse.jgit.lib.Config cfg , java.lang.String subsection , java.lang.String key , java.lang.String defaultValue ) { java.lang.String value = cfg.getString ( com.google.gerrit.server.account.GetPreferences.MY , subsection , key ) ; return value != null ? value : defaultValue ; }
public void setStatus ( java.lang.String status ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.PutStatus.Input in = new com.google.gerrit.server.account.PutStatus.Input ( status ) ; try { putStatus.apply ( account , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot set status" , e ) ; } }
public boolean isExpandAllComments ( ) { return diffPrefs.isExpandAllComments ( ) ; }
public org.eclipse.jgit.lib.ObjectId getNewId ( ) { return newId ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { addComments ( revisionNumber , result ) ; update ( revisionNumber ) ; }
void setOptionFlagsHex ( java.lang.String hex ) { json.addOptions ( com.google.gerrit.extensions.common.ListChangesOption.fromBits ( java.lang.Integer.parseInt ( hex , 16 ) ) ) ; }
public com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > r00_ageToSortKey ( @ com.google.inject.name.Named ( value = "A" ) com.google.gerrit.server.query.change.AgePredicate a ) { java.lang.String cut = com.google.gerrit.server.ChangeUtil.sortKey ( a.getCut ( ) , java.lang.Integer.MAX_VALUE ) ; return and ( new com.google.gerrit.server.query.change.SortKeyPredicate.Before ( dbProvider , cut ) , a ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.DELETE , content , cb ) ; }
public java.lang.String Key ( ) { return ( ( name ) + "=" ) + ( remote ) ; }
public java.util.List < com.google.gerrit.common.data.AccountInfo > run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return suggestAccount ( db , query , active , limit ) ; }
public void addColumn ( java.lang.String content ) { if ( ! ( firstColumn ) ) { out.print ( columnSeparator ) ; } out.print ( com.google.gerrit.server.StringUtil.escapeString ( content ) ) ; firstColumn = false ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfo result ) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor ( result.commentlinks ( ) ) ; contentTable.setCommentLinkProcessor ( commentLinkProcessor ) ; }
public static java.lang.String linkify ( final java.lang.String in ) { return com.google.gerrit.client.ui.DomUtil.INSTANCE.linkify ( in ) ; }
public void addListener ( com.google.gerrit.client.rpc.CallbackGroup group ) { addListener ( group.add ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ) ; }
public void onSuccess ( final com.google.gerrit.client.data.AccountDashboardInfo r ) { display ( r ) ; }
public com.google.gerrit.server.account.AccountIdSet get ( final java.lang.String email ) { return cache.get ( email ) ; }
public com.google.gerrit.server.account.AccountState state ( ) { if ( ( state ) == null ) { state = accountCache.get ( getAccountId ( ) ) ; } return state ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; impl.display ( out ) ; }
public void setStatisticsEnabled ( boolean enableStatistics ) { self.setStatisticsEnabled ( enableStatistics ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.httpd.RequestCleanupFilter.class ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; addExtensionPoints ( info ) ; loadConfigInfo ( info , base ) ; }
void setUserAccountId ( com.google.gerrit.reviewdb.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null ) ; }
private static boolean isJsPlugin ( java.lang.String name ) { return com.google.gerrit.server.plugins.PluginLoader.isPlugin ( name , "js" ) ; }
static com.google.gerrit.client.account.AccountApi.GpgKeysInput add ( java.lang.String key ) { return com.google.gerrit.client.account.AccountApi.GpgKeysInput.createAdd ( com.google.gerrit.client.rpc.Natives.arrayOf ( key ) ) ; }
public void upsert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj , false ) ; } maybeFlush ( ) ; }
public static java.lang.Boolean isForwardedEvent ( ) { return com.ericsson.gerrit.plugins.highavailability.forwarder.Context.FORWARDED_EVENT.get ( ) ; }
public com.google.gerrit.sshd.SshKeyCacheEntryIterable missing ( java.lang.String username ) { return SshKeyCacheEntryIterable.EMPTY ; }
public void abandonReviewableChangeNotifyOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public static org.eclipse.jgit.transport.ReceiveCommand getCommand ( org.eclipse.jgit.lib.RefUpdate update , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { return new org.eclipse.jgit.transport.ReceiveCommand ( update.getOldObjectId ( ) , update.getNewObjectId ( ) , update.getName ( ) , type ) ; }
private com.google.gerrit.reviewdb.client.Change getChange ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( c.getChangeId ( ) ) ) ) ; }
private void display ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
private static void assertEquals ( byte [ ] exp , com.google.gwtorm.nosql.IndexKeyBuilder ic ) { com.google.gwtorm.nosql.IndexKeyBuilderTest.assertEquals ( com.google.gwtorm.nosql.IndexKeyBuilderTest.toString ( exp ) , com.google.gwtorm.nosql.IndexKeyBuilderTest.toString ( ic.toByteArray ( ) ) ) ; }
static void replyError ( javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg ) throws java.io.IOException { res.setStatus ( statusCode ) ; com.google.gerrit.httpd.restapi.RestApiServlet.replyText ( null , res , msg ) ; }
public com.google.gerrit.extensions.registration.DynamicMap < com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.account.AccountResource.GpgKey > > views ( ) { return views ; }
private void parseDelete ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef ( cmd.getRefName ( ) ) ; if ( ctl.canDelete ( ) ) { } else { com.google.gerrit.server.git.ReceiveCommits.reject ( cmd ) ; } }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( change , event , db ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( updated ( ) ) && ( fireEvent ) ) { hashtagsEdited.fire ( change , ctx.getAccountId ( ) , updatedHashtags , toAdd , toRemove , ctx.getWhen ( ) ) ; } }
public org.eclipse.jgit.lib.Config getProjectPluginConfig ( com.google.gerrit.server.project.ProjectState projectState , java.lang.String pluginName ) { return projectState.getConfig ( pluginName ) . get ( ) ; }
private com.google.gerrit.server.query.change.ChangeData changeData ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) { return cd != null ? cd : changeDataFactory.create ( db , this ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > submitRecords ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return cd.submitRecords ( com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS ) ; }
public com.google.gerrit.reviewdb.server.PatchSetAccess patchSets ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
private java.lang.String buildIndexEndpoint ( int changeId ) { return com.google.common.base.Joiner.on ( "/" ) . join ( pluginRelativePath , "index" , changeId ) ; }
public com.google.gerrit.server.index.FieldType < ? > getType ( ) { return type ; }
private void initChangeRepo ( ) throws java.io.IOException { if ( ( changeRepo ) == null ) { changeRepo = openRepo ( projectName ) ; } }
public java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCapabilities.CapabilityInfo > apply ( com.google.gerrit.server.config.ConfigResource resource ) throws java.lang.IllegalAccessException , java.lang.NoSuchFieldException { java.util.Map < java.lang.String , com.google.gerrit.server.config.ListCapabilities.CapabilityInfo > output = com.google.common.collect.Maps.newTreeMap ( ) ; collectCoreCapabilities ( output ) ; collectPluginCapabilities ( output ) ; return output ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "list" , true ) . get ( cb ) ; }
public java.lang.String get ( ) { return com.google.gerrit.reviewdb.SchemaVersion.Key.VALUE ; }
public void onSuccess ( java.lang.String result ) { textArea.setText ( result ) ; }
public int compare ( java.lang.String o1 , java.lang.String o2 ) { return com.google.gerrit.server.patch.PatchList.comparePaths ( o1 , o2 ) ; }
public void setPrivate ( boolean value ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private void initChannels ( ) { setChannelFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Channel > > asList ( new org.apache.sshd.server.channel.ChannelSession.Factory ( ) , new org.apache.sshd.server.channel.ChannelDirectTcpip.Factory ( ) ) ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , T > build ( com.google.gerrit.server.index.FieldDef.Getter < I , T > getter ) { return build ( ( in , a ) -> getter.get ( in ) ) ; }
private java.lang.String url ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits" ; }
private com.google.gerrit.server.account.AccountState state ( ) { if ( ( state ) == null ) { state = accountCache.get ( getAccountId ( ) ) ; } return state ; }
public com.googlesource.gerrit.plugins.hooks.HookArgs createArgs ( ) { return new com.googlesource.gerrit.plugins.hooks.HookArgs ( anonymousCowardName , urlProvider , metrics ) ; }
public com.google.gerrit.extensions.api.projects.ProjectApi create ( com.google.gerrit.extensions.api.projects.ProjectInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { return name ( in.name ) . create ( in ) ; }
public com.google.gerrit.server.project.ChangeControl getControl ( ) { return change.getControl ( ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return new com.google.gerrit.server.notedb.ChangeUpdate ( com.google.gerrit.server.notedb.ChangeNotesTest.SERVER_IDENT , repoManager , com.google.gerrit.server.notedb.NotesMigration.allEnabled ( ) , accountCache , null , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , stubChangeControl ( c , user ) , com.google.gerrit.server.util.TimeUtil.nowTs ( ) ) ; }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( project ) == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name ) ; } return projectJson.format ( project ) ; }
public void remove ( K key ) ;
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { r.add ( result ) ; hasDraftComments = ! ( result.isEmpty ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.mode.ModeInjector ( ) . add ( getContentType ( info.metaA ( ) ) ) . add ( getContentType ( info.metaB ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.overview.adjustGutters ( cmB ) ; }
public void flushAll_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH_ALL , java.util.Arrays.asList ( "projects" ) ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; }
public void onFailure ( final java.lang.Throwable caught ) { showSiteHeader.setValue ( ( ! val ) ) ; super . onFailure ( caught ) ; }
private PatchSet.Id nextPatchSetId ( com.google.gerrit.server.project.ChangeControl ctl ) throws java.lang.Exception { return com.google.gerrit.server.ChangeUtil.nextPatchSetId ( testRepo.getRepository ( ) , ctl.getChange ( ) . currentPatchSetId ( ) ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult patch ( java.lang.String path ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPatch.setPath ( path ) . apply ( revision ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get patch" , e ) ; } }
com.google.gerrit.server.git.BatchUpdate newBatchUpdate ( java.sql.Timestamp when ) { return batchUpdateFactory.create ( db , destBranch.getParentKey ( ) , when ) . setRepository ( repo , rw , inserter ) ; }
public void index ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.reviewdb.client.AccountGroup > i : getWriteIndexes ( ) ) { i.replace ( groupCache.get ( uuid ) ) ; } fireGroupIndexedEvent ( uuid.get ( ) ) ; }
void sync ( ) { dst.scrollToY ( align ( src.getScrollInfo ( ) . getTop ( ) ) ) ; }
public void before ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isTrue ( ) ; }
public void evict ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException { if ( accountId != null ) { byId.invalidate ( accountId ) ; index ( accountId ) ; } }
public void unblockMoreSpecificRef_Fails ( ) { com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/master" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
com.google.gerrit.client.GerritCssResource css ( ) ;
public void listTagsOfNonExistingProjectWithApi ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( "does-not-exist" ) . tags ( ) . get ( ) ; }
private java.util.List < com.google.gerrit.client.WebLinkInfo > getWebLinks ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { return diffInfo.unified_web_links ( ) ; }
public void threeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; com.google.common.truth.Truth.assertThat ( rewrite.rewrite ( in , com.google.gerrit.server.index.change.ChangeIndexRewriterTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ) . isEqualTo ( query ( in ) ) ; }
public com.google.gerrit.server.project.ProjectState get ( final com.google.gerrit.client.reviewdb.Project.NameKey projectName ) { return get0 ( projectName ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( deleteTask ( cd ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.deleteChange ( id.get ( ) , com.google.gerrit.client.change.DraftActions.mine ( draftButtons ) ) ; }
public void negativeStartCharacterResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , ( - 1 ) , 19 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public static com.google.gerrit.testutil.InMemoryDatabase newDatabase ( ) { return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( ) ) . getInstance ( com.google.gerrit.testutil.InMemoryDatabase.class ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.createGroupTitle ( ) ) ; addCreateGroupPanel ( ) ; }
public com.google.gerrit.reviewdb.AccountGroup lookup ( java.lang.String groupName ) ;
public void onSuccess ( T value ) { this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
public static boolean hasActive ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > p ) { return ( com.google.gerrit.server.query.QueryBuilder.find ( p , com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate.class , AccountField.ACTIVE.getName ( ) ) ) != null ; }
public static void createEdit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "create_edit" ) . post ( com.google.gwt.core.client.JavaScriptObject.createObject ( ) , cb ) ; }
private void initProjectLink ( com.google.gerrit.client.changes.ChangeInfo info ) { projectLink.setText ( info.project ( ) ) ; projectLink.setTargetHistoryToken ( com.google.gerrit.common.PageLinks.toChangeQuery ( com.google.gerrit.common.PageLinks.projectQuery ( info.project_name_key ( ) , info.status ( ) ) ) ) ; }
void onReviewerAdded ( com.google.gerrit.extensions.events.ReviewerAddedListener.Event event ) ;
public java.lang.String getPatchSetUrl ( java.lang.String project , java.lang.String commit ) { return java.lang.String.format ( placeHolderUrlProjectCommit , project , commit ) ; }
public com.google.gwtjsonrpc.client.VoidResult fromResult ( com.google.gwt.core.client.JavaScriptObject responseObject ) { return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toInstance ( user ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.fullTextSearchMaxMatches" , value = "2" ) } ) public void suggestReviewersFullTextSearchLimitMaxMatches ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "ser" , 3 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 2 ) ; }
private com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > submit ( java.util.concurrent.Callable < ? > task ) { return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.nonCancellationPropagating ( executor.submit ( task ) ) , com.google.gerrit.server.index.change.ChangeIndexer.MAPPER ) ; }
void bumpLastUpdatedOn ( boolean bump ) ;
public static synchronized java.net.InetSocketAddress getAddress ( ) { if ( ( ( com.google.gerrit.server.ssh.GerritSshDaemon.sshd ) != null ) && ( ( com.google.gerrit.server.ssh.GerritSshDaemon.preferredAddress ) == null ) ) { com.google.gerrit.server.ssh.GerritSshDaemon.preferredAddress = com.google.gerrit.server.ssh.GerritSshDaemon.computePreferredAddress ( ) ; } return com.google.gerrit.server.ssh.GerritSshDaemon.preferredAddress ; }
private java.lang.String parseBranch ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String branch = parseOneFooter ( commit , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_BRANCH ) ; return branch != null ? com.google.gerrit.reviewdb.client.RefNames.fullName ( branch ) : null ; }
private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableChange ( ) throws java.lang.Exception { return stageChange ( this :: stageReviewableChange ) ; }
public void start ( ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; display ( ) ; } } ) ; }
private com.google.gerrit.common.ChangeHookRunner.AuthorAttribute getAuthorAttribute ( final com.google.gerrit.reviewdb.Account account ) { com.google.gerrit.common.ChangeHookRunner.AuthorAttribute author = new com.google.gerrit.common.ChangeHookRunner.AuthorAttribute ( ) ; author.name = account.getFullName ( ) ; author.email = account.getPreferredEmail ( ) ; return author ; }
public java.lang.Object apply ( com.google.gerrit.server.group.MemberResource resource , com.google.gerrit.server.group.PutMembers.PutMember.Input input ) { return get.get ( ) . apply ( resource ) ; }
public void onSuccess ( final com.google.gerrit.client.groups.GroupInfo result ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toGroup ( result.getGroupId ( ) , AccountGroupScreen.MEMBERS ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( org.eclipse.jgit.revwalk.RevCommit commit ) throws java.io.IOException { return toSoyData ( commit , com.google.gitiles.CommitSoyData.KeySet.DEFAULT ) ; }
public com.google.gerrit.extensions.common.ChangeInfo check ( com.google.gerrit.extensions.api.changes.FixInput fix ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return check.apply ( change , fix ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check change" , e ) ; } }
public java.util.Map < java.lang.String , com.googlesrouce.gerrit.plugins.github.git.GHBranch > getBranches ( ) throws java.io.IOException { return ghRepository.getBranches ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onCollapseAll ( null ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > membersOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) ;
public void setUseSignedOffBy ( final boolean sbo ) { useSignedOffBy = sbo ; }
public WorkQueue.Executor getInteractiveQueue ( ) { return interactiveExecutor ; }
public void addBranch ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
public void revokedKeyDueToNoLongerBeingUsed ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add ( com.google.gerrit.gpg.testutil.TestKeys.revokedNoLongerUsedKey ( ) ) ; add ( com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; save ( ) ; assertProblems ( k , "Key is revoked (retired and no longer valid): test7 not used" ) ; }
public void testPushForMasterWithHashtagsNoteDbDisabled ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.junit.Assume.assumeThat ( notesMigration.enabled ( ) , org.hamcrest.Matchers.is ( false ) ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master%hashtag=tag1" ) ; r.assertErrorStatus ( "cannot add hashtags; noteDb is disabled" ) ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.FakeIndex.Source ( p ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > name ( java.lang.String name ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.NAME , GroupQueryBuilder.FIELD_NAME , name.toLowerCase ( java.util.Locale.US ) ) ; }
public void changeIsDeletedFromIndex ( ) throws java.lang.Exception { setupDeleteMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_IO_EXCEPTION ) ; verifyDelete ( ) ; }
private org.eclipse.jgit.lib.PersonIdent toCommitterIdent ( final com.google.gerrit.reviewdb.client.PatchSetApproval audit ) { if ( audit != null ) { return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newCommitterIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; } return myIdent ; }
public com.google.gerrit.server.project.ProjectState getParentState ( ) { if ( isAllProjects ) { return null ; } return projectCache.get ( getProject ( ) . getParent ( allProjectsName ) ) ; }
public void onSuccess ( com.google.gerrit.client.account.AccountCapabilities result ) { if ( result.canPerform ( com.google.gerrit.common.data.GlobalCapability.ADMINISTRATE_SERVER ) ) { com.google.gerrit.client.Gerrit.addLink ( menuBar , com.google.gerrit.client.Gerrit.C.menuPlugins ( ) , PageLinks.ADMIN_PLUGINS ) ; } }
public static void addSignedInListener ( final com.google.gerrit.client.SignedInListener l ) { if ( ! ( com.google.gerrit.client.Gerrit.signedInListeners.contains ( l ) ) ) { com.google.gerrit.client.Gerrit.signedInListeners.add ( l ) ; } }
public void formatChange ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( velocifyFile ( "Comment.vm" ) ) ; }
protected void configure ( ) { install ( com.google.gerrit.server.account.externalids.DisabledExternalIdCache.module ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.com.google.gerrit.client.changes.ChangeInfo result ) { changeInfo = result ; display ( event.getValue ( ) ) ; }
public java.lang.Object apply ( com.google.gerrit.server.plugins.PluginResource resource , com.google.gerrit.server.plugins.InstallPlugin.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , resource.getName ( ) ) . apply ( TopLevelResource.INSTANCE , input ) ; }
public final native boolean copySelfOnEmail ( ) ;
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return context.getCurrentUser ( ) ; }
public void update ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > instances ) { throw new java.lang.UnsupportedOperationException ( "do not call update; use ChangeContext#saveChange()" ) ; }
protected static java.lang.String getAccountNameEmail ( com.google.gerrit.reviewdb.client.Account.Id id ) { return java.lang.String.format ( "%s <%s>" , com.google.gerrit.server.group.db.AbstractGroupTest.getAccountName ( id ) , com.google.gerrit.server.group.db.AbstractGroupTest.getAccountEmail ( id ) ) ; }
public void rebuildAndCheckChanges ( com.google.gerrit.reviewdb.client.Change ... changeIds ) throws java.lang.Exception { rebuildAndCheckChanges ( java.util.Arrays.stream ( changeIds ) ) ; }
com.google.gerrit.server.git.MetaDataUpdate create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.Repository db ) ;
public void stop ( ) { refreshThread.stop = true ; try { refreshThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn ( "error stopping refresh thread" , e ) ; } openIndex.close ( ) ; closedIndex.close ( ) ; }
public boolean isVisible ( ) { return canPerform ( ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ; }
private void postEvent ( com.googlesource.gerrit.plugins.replication.PushOne pushOp ) { postEvent ( pushOp , null ) ; }
static com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusQueryShell.Identity create ( final java.sql.ResultSet rs , final java.lang.String name ) throws java.sql.SQLException { return new com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusQueryShell.Identity ( rs.findColumn ( name ) , name ) ; }
void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException ;
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , remotePeerProvider , dbProvider , id ) ; }
protected void onUnload ( ) { if ( ( com.google.gerrit.client.SignInDialog.current ) == ( this ) ) { com.google.gerrit.client.SignInDialog.unexportPostSignIn ( ) ; com.google.gerrit.client.SignInDialog.current = null ; } super . onUnload ( ) ; }
private java.io.File getPluginDataDir ( java.lang.String name ) { return new java.io.File ( dataDir , name ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.Project > result ) { if ( isAttached ( ) ) { projects.display ( result ) ; projects.finishDisplay ( true ) ; } }
void setTrees ( final org.eclipse.jgit.lib.ObjectId a , final org.eclipse.jgit.lib.ObjectId b ) { aId = a ; bId = b ; }
public void onChange ( com.google.gwt.user.client.ui.Widget sender ) { save.setEnabled ( true ) ; }
public void onSuccess ( final com.google.gerrit.client.data.ChangeDetail r ) { if ( isAttached ( ) ) { display ( r ) ; } }
AccountGroup.UUID parse ( java.lang.String id ) { return AccountGroup.UUID.parse ( id ) ; }
protected java.io.File newSitePath ( ) throws java.io.IOException { return new java.io.File ( createWorkRepository ( ) . getWorkDir ( ) , "test_site" ) ; }
public void testWithSectionOfNonexistingProject ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.fromText ( ( "\n" + ( ( ( "[submodule \"a\"]\n" + "path = a\n" ) + "url = ssh://non-localhost/a\n" ) + "branch = .\\n" ) ) ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; com.google.common.truth.Truth.assertThat ( res ) . isEmpty ( ) ; }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.deleteRevision ( id.get ( ) , revision , com.google.gerrit.client.change.DraftActions.cs ( id , draftButtons ) ) ; }
public void submit ( java.lang.Iterable < com.google.gerrit.common.data.SubmitRecord > submitRecords ) { status = com.google.gerrit.reviewdb.client.PatchLineComment.Status.SUBMITTED ; this . submitRecords = com.google.common.collect.ImmutableList.copyOf ( submitRecords ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( this . submitRecords.isEmpty ( ) ) ) , "no submit records specified at submit time" ) ; }
private void assertCreateFails ( java.lang.Class < ? extends com.google.gerrit.extensions.restapi.RestApiException > errType ) throws java.lang.Exception { assertCreateFails ( errType , null ) ; }
public void assertStatus ( int status ) throws java.lang.Exception { com.google.common.truth.Truth.assert_ ( ) . withFailureMessage ( java.lang.String.format ( "Expected status code %d" , status ) ) . that ( getStatusCode ( ) ) . isEqualTo ( status ) ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { com.google.gerrit.reviewdb.client.Change c = change ( ) ; notes = notesFactory.create ( db , c.getProject ( ) , c.getId ( ) ) ; } return notes ; }
abstract com.google.gerrit.server.mail.receive.MailMessage.Builder from ( java.lang.String val ) ;
int getHeaderHeight ( ) { int h = patchSetSelectBoxA.getOffsetHeight ( ) ; if ( header ) { h += diffHeaderRow.getOffsetHeight ( ) ; } return h ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { onCellDoubleClick ( 0 , com.google.gerrit.client.patches.SideBySideTable.B ) ; }
public abstract java.lang.Iterable < com.google.gerrit.reviewdb.Project.NameKey > byName ( java.lang.String prefix ) ;
public void onSuccess ( com.google.gerrit.client.account.Preferences prefs ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; enable ( true ) ; display ( prefs ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public java.util.List < com.google.gerrit.extensions.api.projects.TagInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return listTags ( this ) ; }
java.lang.String getRefName ( ) { return refName ; }
public com.google.gerrit.server.group.GroupInfo apply ( com.google.gerrit.server.group.IncludedGroupResource rsrc ) { return new com.google.gerrit.server.group.GroupInfo ( rsrc.getGroup ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . to ( com.google.gerrit.server.index.ChangeIndexerImpl.class ) ; bind ( com.google.gerrit.server.query.change.IndexRewrite.class ) . to ( com.google.gerrit.server.query.change.IndexRewriteImpl.class ) ; }
public void execute ( ) { commentManager.newDraftCallback ( cm ) . run ( ) ; }
private void subWindowResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > commit ( java.lang.String id ) { return new com.google.gerrit.server.query.change.ExactCommitPredicate ( id ) ; }
public void previous ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getPrevious ( ) ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testing.IndexVersions.PREVIOUS ) ) . containsExactly ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getPrevious ( ) . getVersion ( ) ) ; }
public void nonProjectEventNotPosted ( ) { config.setString ( com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE , com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO , com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.URL , com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL ) ; com.google.gerrit.server.events.Event nonProjectEvent = new com.google.gerrit.server.events.Event ( "non-project-event" ) { } ; eventHandler.onEvent ( nonProjectEvent ) ; org.mockito.Mockito.verifyZeroInteractions ( postTask ) ; }
public void testChangeOwner_OwnerACLGranted ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException , org.eclipse.jgit.errors.ConfigInvalidException { grantApproveToChangeOwner ( ) ; approve ( sessionOwner , createChange ( ) , HttpStatus.SC_OK ) ; }
public void onSuccess ( com.google.gerrit.client.account.Preferences prefs ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; display ( prefs ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public void execute ( ) { com.google.gwt.user.client.Window.scrollTo ( 0 , 0 ) ; message.setFocus ( true ) ; }
public final native int groupId ( ) ;
public void onFailure ( java.lang.Throwable err ) { getTab ( ) . setTitle ( Resources.M.conflictingChanges ( Resources.C.notAvailable ( ) ) ) ; getTab ( ) . setError ( err.getMessage ( ) ) ; }
public < T > T getResource ( java.lang.String resourcePath , java.lang.Class < ? extends T > resourceClass ) { return null ; }
public static com.google.web.bindery.event.shared.HandlerRegistration addHandler ( com.google.gerrit.reviewdb.client.Change.Id source , com.google.gerrit.client.changes.StarredChanges.ChangeStarHandler handler ) { return com.google.gerrit.client.changes.StarredChanges.eventBus.addHandlerToSource ( com.google.gerrit.client.changes.TYPE , source , handler ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
public static void deleteByBranch ( java.lang.String project , java.lang.String branch ) { com.googlesource.gerrit.plugins.repositoryuse.Usage.table.deleteByBranch ( project , branch ) ; com.googlesource.gerrit.plugins.repositoryuse.Usage.log.info ( java.lang.String.format ( "Deleting all uses: %s, %s" , project , branch ) ) ; }
void onOneNodeReplicated ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status ) { }
public com.google.gerrit.server.OutputFormat getFormat ( ) { return format ; }
public void visit ( org.pegdown.ast.BlockQuoteNode node ) { wrapChildren ( "blockquote" , node ) ; }
public com.google.gerrit.reviewdb.server.AccountGroupByIdAccess accountGroupById ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
void changeDefaultContext ( short newSetting , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public java.lang.String toString ( ) { return java.lang.String.format ( "Evict key '%s' from cache '%s' in target instance" , key , cacheName ) ; }
public void listBranchesOfEmptyProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.rest.project.BranchAssert.assertBranches ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "HEAD" , null , false ) , com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( RefNames.REFS_CONFIG , null , false ) ) , list ( ) . get ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.sshd.SshKeyCacheEntry > missing ( java.lang.String username ) { return java.util.Collections.emptyList ( ) ; }
public org.eclipse.jgit.lib.ObjectId getCommitId ( ) { return commit ; }
public void onSend ( ) { Util.MANAGE_SVC.cherryPickChange ( patchSet.getId ( ) , getMessageText ( ) , getDestinationBranch ( ) , createCallback ( ) ) ; }
private void initHttpd ( ) { webInjector = createWebInjector ( ) ; sysInjector.getInstance ( com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class ) . setHttpServletRequest ( webInjector.getProvider ( javax.servlet.http.HttpServletRequest.class ) ) ; httpdInjector = createHttpdInjector ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { final com.google.gerrit.reviewdb.PatchSet.Id id = patchKey.getParentKey ( ) ; com.google.gerrit.client.Gerrit.display ( ( "change,publish," + ( id.toString ( ) ) ) , new com.google.gerrit.client.changes.PublishCommentScreen ( id ) ) ; }
public void start ( ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; com.google.gerrit.sshd.commands.ListProjects.this . display ( ) ; } } ) ; }
void deleteDraftChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) ;
void load ( ) throws java.io.IOException { css = com.google.gerrit.httpd.HtmlDomUtil.readFile ( cssFile.path.getParentFile ( ) , cssFile.path.getName ( ) ) ; header = com.google.gerrit.httpd.template.SiteHeaderFooter.Template.readXml ( headerFile ) ; footer = com.google.gerrit.httpd.template.SiteHeaderFooter.Template.readXml ( footerFile ) ; }
public void deleteReviewerFromReviewableChangeByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; setEmailStrategy ( sc.owner , EmailStrategy.CC_ON_OWN_COMMENTS ) ; removeReviewer ( sc , extraReviewer , NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public com.google.gerrit.server.change.ChangeInserter setGroups ( java.lang.Iterable < java.lang.String > groups ) { patchSet.setGroups ( groups ) ; return this ; }
void renameGroup ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , java.lang.String newName , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.GroupDetail > callback ) ;
public synchronized com.google.gerrit.reviewdb.client.AccountSshKey addKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String pub ) throws com.google.gerrit.common.errors.InvalidSshKeyException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ; com.google.gerrit.reviewdb.client.AccountSshKey key = authorizedKeys.addKey ( pub ) ; commit ( authorizedKeys ) ; return key ; }
public void write ( int b ) throws java.io.IOException { actualBody.write ( b ) ; }
abstract boolean match ( com.google.gerrit.reviewdb.PatchSetApproval p , short value ) ;
public void sendError ( int sc , java.lang.String msg ) { status = sc ; }
public com.googlesrouce.gerrit.plugins.github.git.PagedIterable < com.googlesrouce.gerrit.plugins.github.git.GHMilestone > listMilestones ( com.googlesrouce.gerrit.plugins.github.git.GHIssueState state ) { return ghRepository.listMilestones ( state ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.ProjectRight > byApprovalCategory ( com.google.gerrit.client.reviewdb.ApprovalCategory.Id id ) throws com.google.gwtorm.client.OrmException ;
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toInstance ( user ) ; }
void setNoSignedOffBy ( boolean on ) { signedOffBy = com.google.gerrit.reviewdb.client.Project.InheritedBoolean.FALSE ; }
public java.lang.String getKeyIdString ( ) { return com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( getPublicKey ( ) . getKeyID ( ) ) ; }
public int intValue ( ) { return ( ( int ) ( val ) ) ; }
public final native void base_change ( java.lang.String b ) ;
private org.eclipse.jgit.lib.PersonIdent getRefLogIdent ( com.google.gerrit.server.IdentifiedUser user ) { return user.newRefLogIdent ( com.google.gerrit.server.util.TimeUtil.nowTs ( ) , tz ) ; }
public void setText ( final java.lang.String t ) { }
public static org.eclipse.jgit.transport.PushResult pushHead ( org.eclipse.jgit.junit.TestRepository < ? > testRepo , java.lang.String ref , boolean pushTags , boolean force ) throws org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.GitUtil.pushHead ( testRepo , ref , pushTags , force , null ) ; }
abstract int getCodeMirrorHeight ( ) ;
public java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSets ) == null ) { patchSets = db.patchSets ( ) . byChange ( legacyId ) . toList ( ) ; } return patchSets ; }
static void initialize ( org.eclipse.jgit.lib.Config cfg ) { cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter.MARKDOWN.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/x-markdown" ) ; cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter.PLAIN_TEXT.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/plain" ) ; }
public void testMIXED_NoFullNameUser ( ) { setFrom ( "MIXED" ) ; final java.lang.String email = "a.u.thor@test.example.com" ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( null , email ) ; org.easymock.EasyMock.replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create ( ) . from ( user ) ; org.junit.Assert.assertNotNull ( r ) ; org.junit.Assert.assertEquals ( "Anonymous Coward (Code Review)" , r.name ) ; org.junit.Assert.assertEquals ( ident.getEmailAddress ( ) , r.email ) ; org.easymock.EasyMock.verify ( accountCache ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( isSignedIn ( ) ) { return identified.create ( AccessPath.WEB , val.accountId ) ; } return anonymous ; }
private com.google.gerrit.reviewdb.client.PatchSet lookupCurrentPatchSet ( com.google.gerrit.server.project.ChangeControl changeControl ) throws com.google.gwtorm.server.OrmException { return patchSetUtil.current ( reviewDb.get ( ) , changeControl.getNotes ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; sshSession = new com.google.gerrit.acceptance.SshSession ( admin ) ; project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; com.google.gerrit.acceptance.git.ssh.GitUtil.initSsh ( admin ) ; com.google.gerrit.acceptance.git.ssh.GitUtil.createProject ( sshSession , project.get ( ) ) ; git = com.google.gerrit.acceptance.git.ssh.GitUtil.cloneProject ( ( ( ( sshSession.getUrl ( ) ) + "/" ) + ( project.get ( ) ) ) ) ; db = reviewDbProvider.open ( ) ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > isActive ( ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ACTIVE , "1" ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setWindowTitle ( Gerrit.C.menyMyDrafts ( ) ) ; setPageTitle ( Util.C.draftsHeading ( ) ) ; }
public boolean containsComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { if ( containsCommentPublished ( c ) ) { return true ; } loadDraftComments ( c.getAuthor ( ) ) ; return draftCommentNotes.containsComment ( c ) ; }
public com.google.gerrit.server.query.change.QueryOptions withLimit ( int newLimit ) { return com.google.gerrit.server.query.change.QueryOptions.create ( config ( ) , start ( ) , newLimit ) ; }
public static void deleteAssignee ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.AccountInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "assignee" ) . delete ( cb ) ; }
protected void ccExistingReviewers ( ) { ccApprovals ( false ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.LIST_SVC.myStarredChanges ( new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.data.SingleListChangeInfo > ( ) { public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; } } ) ; }
public java.util.Map < java.lang.Integer , com.googlesrouce.gerrit.plugins.github.git.GHMilestone > getMilestones ( ) throws java.io.IOException { return ghRepository.getMilestones ( ) ; }
public void addOtherUsersGpgKey_Conflict ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getId ( ) , new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( "foo:myId" ) ) ; db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( extId ) ) ; com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKeys.key5 ( ) ; addGpgKey ( key.getPublicKeyArmored ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( "GPG key already associated with another account" ) ; addGpgKey ( key.getPublicKeyArmored ( ) ) ; }
public static boolean isInvalidXSRF ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( JsonUtil.ERROR_INVALID_XSRF ) ) ; }
private com.google.gerrit.extensions.api.projects.TagApi tag ( ) throws java.lang.Exception { return gApi.projects ( ) . name ( project.get ( ) ) . tag ( TAG ) ; }
void onAddMe ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { java.lang.String accountId = java.lang.String.valueOf ( com.google.gerrit.client.Gerrit.getUserAccountInfo ( ) . _account_id ( ) ) ; addReviewer ( accountId , false ) ; }
public void testInsertNothing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { setup ( ) ; createClassUnderTest ( ) . insert ( com.google.gwtorm.jdbc.TestJdbcAccess.NO_DATA ) ; }
public final native void setWidth ( java.lang.String w ) ;
void patchSetDetail ( com.google.gerrit.reviewdb.PatchSet.Id key , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) ;
public java.lang.String getAlgorithm ( ) { return getPublicKeyPart ( 0 , "none" ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHIssueBuilder createIssue ( java.lang.String title ) { return ghRepository.createIssue ( title ) ; }
com.google.gerrit.server.update.BatchUpdate create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.sql.Timestamp when ) ;
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s" , baseUrl , projectName ) , Target.BLANK ) ; }
protected void onCellSingleClick ( int row , int column ) { super . onCellSingleClick ( row , column ) ; if ( ( column == 1 ) || ( column == 4 ) ) { onCellDoubleClick ( row , column ) ; } }
public java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > messages ( ) throws com.google.gwtorm.server.OrmException { if ( ( messages ) == null ) { messages = db.changeMessages ( ) . byChange ( legacyId ) . toList ( ) ; } return messages ; }
public static java.lang.String fullName ( java.lang.String ref ) { return ref.startsWith ( com.google.gerrit.reviewdb.client.RefNames.REFS ) ? ref : ( com.google.gerrit.reviewdb.client.RefNames.REFS_HEADS ) + ref ; }
void onLogin ( ) { async.append ( log ( ( "LOGIN FROM " + ( session.get ( ) . getRemoteAddressAsString ( ) ) ) ) ) ; audit ( "0" , "LOGIN" , new java.lang.String [ ] { } ) ; }
public void addFocusListener ( com.google.gwt.user.client.ui.FocusListener listener ) { if ( ( focusy ) != null ) { focusy.addFocusListener ( listener ) ; } }
public java.lang.String getRefName ( ) { return java.lang.String.format ( "%s/edit-%d" , com.google.gerrit.reviewdb.client.RefNames.refsUsers ( user.getAccountId ( ) ) , change.getId ( ) . get ( ) ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( goal ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( argNo ) , com.googlecode.prolog_cafe.lang.SymbolTerm.create ( flag ) } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.RepresentationException.REPRESENTATION_ERROR , args ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo c ) { project.setInnerText ( c.project ( ) ) ; com.google.gwtexpui.safehtml.client.SafeHtml.setInnerHTML ( filePath , com.google.gerrit.client.diff.Header.formatPath ( path , null , null ) ) ; }
public java.lang.String apply ( com.google.gerrit.server.git.gpg.TestKey in ) { return in.getKeyIdString ( ) ; }
public void getOpenChange_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , git ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; assertNotFound ( r.getCommitId ( ) ) ; }
public long getDateHeader ( java.lang.String name ) { java.lang.String v = getHeader ( name ) ; return v != null ? org.apache.http.client.utils.DateUtils.parseDate ( v ) . getTime ( ) : 0 ; }
public void run ( ) { try { wrapped.call ( ) ; } catch ( java.lang.RuntimeException e ) { throw e ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } }
boolean isAutoFlush ( ) ;
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , accessPath , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , remotePeerProvider , null , id ) ; }
void onIgnore ( com.google.gwt.event.dom.client.ClickEvent e ) { onIgnore ( updated ) ; hide ( ) ; }
public boolean canAdd ( final com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
public java.lang.String getChannel ( ) { return escape ( channel ) ; }
public void rebuildEmptySiteStartingWithNoteDbDisabed ( ) throws java.lang.Exception { assertNotesMigrationState ( NotesMigrationState.REVIEW_DB ) ; com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "RebuildNoteDb" , "-d" , sitePath , "--show-stack-trace" ) ; assertNotesMigrationState ( NotesMigrationState.READ_WRITE_NO_SEQUENCE ) ; }
com.google.gerrit.client.diff.DisplaySide displaySide ( com.google.gerrit.client.changes.CommentInfo info , com.google.gerrit.client.diff.DisplaySide forSide ) { if ( ( info.side ( ) ) == ( com.google.gerrit.extensions.client.Side.PARENT ) ) { return ( base ) == null ? DisplaySide.A : null ; } return forSide ; }
void onEdit ( com.google.gwt.event.dom.client.ClickEvent e ) { setEdit ( true ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.AccountGroup.Id > getByInclude ( final com.google.gerrit.reviewdb.AccountGroup.Id groupId ) { return byInclude.get ( groupId ) ; }
com.google.gerrit.server.account.IncludingGroupMembership create ( com.google.gerrit.server.IdentifiedUser user ) ;
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { return abandon ( control , msgTxt , NotifyHandling.ALL ) ; }
private java.lang.String urlPut ( ) { return ( ( ( ( ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/files/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ) + "/content" ; }
public static PatchSet.Id nextPatchSetId ( org.eclipse.jgit.lib.Repository git , com.google.gerrit.reviewdb.client.PatchSet.Id id ) { return com.google.gerrit.server.ChangeUtil.nextPatchSetId ( git.getAllRefs ( ) , id ) ; }
public void display ( com.google.gerrit.client.dashboards.DashboardList dashes ) { display ( dashes.asList ( ) ) ; }
public void run ( ) { if ( cm.extras ( ) . hasActiveLine ( ) ) { newDraft ( cm ) ; } }
com.google.gerrit.server.git.ReplaceOp create ( com.google.gerrit.server.util.RequestScopePropagator requestScopePropagator , com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Branch.NameKey dest , boolean checkMergedInto , @ com.google.inject.assistedinject.Assisted ( value = "priorPatchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId , @ com.google.inject.assistedinject.Assisted ( value = "priorCommit" ) org.eclipse.jgit.revwalk.RevCommit priorCommit , @ com.google.inject.assistedinject.Assisted ( value = "patchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , @ com.google.inject.assistedinject.Assisted ( value = "commit" ) org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.List < java.lang.String > groups , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.ReceiveCommits.MagicBranchInput magicBranch , @ com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate ) ;
java.util.Map < java.lang.String , com.codahale.metrics.Metric > getMetricMap ( ) { return registry.getMetrics ( ) ; }
private void initPath ( ) { filePath.setInnerText ( path ) ; }
public void testOnTime ( ) throws java.lang.Exception { org.joda.time.DateTime now = now ( ) ; com.google.common.truth.Truth.assertThat ( Verifier.onTime ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print ( now.plusMillis ( 1 ) ) ) ) . isTrue ( ) ; }
public int compare ( final com.google.gerrit.client.data.ApprovalDetail o1 , final com.google.gerrit.client.data.ApprovalDetail o2 ) { int cmp ; cmp = ( o2.hasNonZero ) - ( o1.hasNonZero ) ; if ( cmp != 0 ) return cmp ; return o1.sortOrder.compareTo ( o2.sortOrder ) ; }
public static com.google.gerrit.server.index.IndexConfig.Builder builder ( ) { return new com.google.gerrit.server.index.AutoValue_IndexConfig.Builder ( ) . maxLimit ( java.lang.Integer.MAX_VALUE ) . maxPages ( java.lang.Integer.MAX_VALUE ) . maxTerms ( com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS ) . separateChangeSubIndexes ( false ) ; }
public void testWarnExistingFaultyNameRuleBaseFile ( ) throws java.io.IOException { injectRuleBase ( "" , true ) ; replayMocks ( ) ; createRuleBase ( ) ; assertLogMessageContains ( "Please migrate" ) ; assertLogMessageContains ( "does not exist" ) ; }
private com.google.gerrit.prettify.common.EditList getEditList ( ) { return new com.google.gerrit.prettify.common.EditList ( edits , getContext ( ) , a.size ( ) , b.size ( ) ) ; }
private static java.lang.String getJsPluginPath ( com.google.gerrit.server.plugins.Plugin plugin ) { return java.lang.String.format ( "/plugins/%s/static/%s" , plugin.getName ( ) , plugin.getSrcFile ( ) . getName ( ) ) ; }
public void resetToDefaults ( ) { maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; copySelfOnEmail = false ; downloadUrl = null ; downloadCommand = null ; }
public void testIsEnabledUnknownEvent ( ) { com.google.gerrit.server.events.Event event = new com.google.gerrit.server.events.Event ( "foo" ) { } ; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig ( ) ; replayMocks ( ) ; assertFalse ( itsConfig.isEnabled ( event ) ) ; assertLogMessageContains ( "not recognised and ignored" ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( user.getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ; }
private static Rebuild.Input input ( java.lang.Boolean force ) { com.google.gerrit.server.group.Rebuild.Input input = new com.google.gerrit.server.group.Rebuild.Input ( ) ; input.force = force ; return input ; }
public com.google.gerrit.server.notedb.ChangeNotes getChangeNotes ( ) { return update.getChangeNotes ( ) ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( final com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.project.ChangeControl ( controlForRef ( change.getDest ( ) ) , change ) ; }
void scrollToPath ( java.lang.String path ) { com.google.gerrit.client.diff.FileInfo info = map.get ( path ) ; if ( info != null ) { movePointerTo ( ( 1 + ( info._row ( ) ) ) , true ) ; } }
private com.google.gerrit.server.index.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.IndexedChangeQuery ( index , p , limit ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.Branch > result ) { addBranch.setEnabled ( true ) ; nameTxtBox.setText ( "" ) ; irevTxtBox.setText ( "" ) ; branches.display ( result ) ; }
public void sendRedirect ( java.lang.String location ) throws java.io.IOException { this . status = SC_MOVED_TEMPORARILY ; super . setHeader ( "Location" , location ) ; }
void projectDetail ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
public void nullCommitMessage ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( null ) ) . isEmpty ( ) ; }
private java.lang.String createGroup ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; in.ownerId = "Administrators" ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.ChangeField.getFileParts ( object ) . contains ( value ) ; }
public void testToJsonWebToken ( ) throws java.lang.Exception { com.google.gson.JsonObject jsonWebToken = client.toJsonWebToken ( com.googlesource.gerrit.plugins.cfoauth.UAAClientTest.HS256_TEST_TOKEN ) ; assertEquals ( "marissa" , client.getAttribute ( jsonWebToken , "user_name" ) ) ; assertEquals ( "marissa@test.org" , client.getAttribute ( jsonWebToken , "email" ) ) ; assertEquals ( 1436232932L , client.getLongAttribute ( jsonWebToken , "exp" , 0 ) ) ; }
public java.util.List < T > query ( com.google.gerrit.server.query.Predicate < T > p ) throws com.google.gwtorm.server.OrmException { try { return queryProcessor.query ( p ) . entities ( ) ; } catch ( com.google.gerrit.index.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; return change ; } else { return null ; } }
public void onSuccess ( java.lang.Boolean result ) { display ( group , result ) ; }
public abstract java.util.List < com.google.gerrit.extensions.common.ProjectInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException ;
com.google.gerrit.httpd.rpc.project.ChangeProjectAccess create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.ObjectId base , @ com.google.inject.assistedinject.Assisted java.util.List < com.google.gerrit.common.data.AccessSection > sectionList , @ javax.annotation.Nullable java.lang.String message ) ;
void setShowWhitespaceErrors ( final boolean show ) { cm.operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { cm.setOption ( "showTrailingSpace" , show ) ; } } ) ; }
public static com.google.gerrit.reviewdb.client.Change newChange ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Account.Id userId ) { return com.google.gerrit.testutil.TestChanges.newChange ( project , userId , com.google.gerrit.testutil.TestChanges.nextChangeId.getAndIncrement ( ) ) ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision ) ; } }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String commit , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( commit ) . view ( action ) ; }
public final native void activeLine ( net.codemirror.lib.CodeMirror.LineHandle line ) ;
public com.google.gerrit.server.patch.IntraLineDiff.Status getStatus ( ) { return status ; }
void setParent ( com.google.gerrit.client.diff.SideBySide2 parent ) { this . parent = parent ; }
protected void postDisplay ( ) { com.google.gwt.user.client.History.newItem ( PageLinks.SETTINGS_CONTACT , true ) ; }
public void createBranchByProjectOwner ( ) throws java.lang.Exception { grantOwner ( ) ; setApiUser ( user ) ; assertCreateSucceeds ( ) ; }
public java.util.List < T > apply ( java.util.List < T > buffer ) { return transformBuffer ( buffer ) ; }
public static void createProject ( com.google.gerrit.acceptance.SshSession s , java.lang.String name ) throws com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.git.GitUtil.createProject ( s , name , null ) ; }
public void postEvent ( final com.google.gerrit.reviewdb.client.Change change , final com.google.gerrit.server.events.ChangeEvent event , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( change , event , db ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type ) ; }
private void assertNotBlocked ( java.lang.String p , java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . isBlocked ( p ) ) . named ( ( ( p + " is blocked for " ) + ref ) ) . isFalse ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit commit ) throws java.io.IOException { return toSoyData ( req , commit , com.google.gitiles.CommitSoyData.KeySet.DEFAULT ) ; }
public com.google.common.util.concurrent.CheckedFuture < com.google.gerrit.reviewdb.client.PatchSetApproval , com.google.gwtorm.server.OrmException > getAsync ( com.google.gerrit.reviewdb.client.PatchSetApproval.Key key ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public int compare ( com.google.gwtexpui.globalkey.client.KeyCommand arg0 , com.google.gwtexpui.globalkey.client.KeyCommand arg1 ) { if ( ( arg0.keyMask ) < ( arg1.keyMask ) ) { return - 1 ; } else if ( ( arg0.keyMask ) > ( arg1.keyMask ) ) { return 1 ; } return 0 ; }
com.google.gerrit.reviewdb.client.Change change ( ) { return control.getChange ( ) ; }
public boolean isDark ( ) { switch ( this ) { case MIDNIGHT : case NIGHT : case TWILIGHT : return true ; default : return false ; } }
public void check ( com.google.gerrit.server.permissions.ChangePermissionOrLabel perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( perm.toString ( ) ) ; } }
public boolean canSubmit ( ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return ( canPerform ( Permission.SUBMIT ) ) && ( canWrite ( ) ) ; }
void createSchema ( ) throws com.google.gwtorm.client.OrmException ;
public void index ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.reviewdb.client.AccountGroup > i : getWriteIndexes ( ) ) { i.replace ( groupCache.get ( uuid ) ) ; } }
public static synchronized java.util.Collection < java.security.PublicKey > getHostKeys ( ) { return com.google.gerrit.server.ssh.GerritSshDaemon.hostKeys ; }
private java.lang.String createChange ( com.google.gerrit.acceptance.TestAccount account ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , account.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
public void run ( ) { header.setReviewed ( ( ! ( header.isReviewed ( ) ) ) ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent changeMergedEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults.put ( changeMergedEvent.change.number , changeMergedEvent.newRev ) ; } }
public com.google.gerrit.extensions.restapi.BinaryResult apply ( com.google.gerrit.server.project.FileResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return getContent.get ( ) . apply ( rsrc.getNameKey ( ) , rsrc.getRef ( ) , rsrc.getPath ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.prettify.common.EditList.Hunk > getHunks ( ) { return new com.google.gerrit.prettify.common.EditList ( edits , getContext ( ) , a.size ( ) , b.size ( ) ) . getHunks ( ) ; }
static boolean doCheckBlockedKeywords ( com.google.gerrit.server.config.PluginConfig cfg ) { return ( cfg.getStringList ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN ) . length ) > 0 ; }
public void addChangeListener ( com.google.gerrit.common.ChangeListener listener , com.google.gerrit.server.IdentifiedUser user ) { listeners.put ( listener , new com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder ( listener , user ) ) ; }
public void suggestReviewersFullTextSearch ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "ser" , 5 ) ; org.junit.Assert.assertEquals ( 4 , reviewers.size ( ) ) ; }
protected static java.sql.Timestamp parse ( java.lang.String value ) throws com.google.gerrit.server.query.QueryParseException { try { return com.google.gwtjsonrpc.common.JavaSqlTimestampHelper.parseTimestamp ( value ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new com.google.gerrit.server.query.QueryParseException ( e.getMessage ( ) , e ) ; } }
private void displayView ( android.app.Fragment fragment ) { android.app.FragmentManager fragmentManager = getFragmentManager ( ) ; fragmentManager.beginTransaction ( ) . replace ( R.id.mainFrame , fragment ) . addToBackStack ( null ) . commit ( ) ; }
protected void assertServerStartupFails ( ) throws java.lang.Exception { try ( com.google.gerrit.acceptance.GerritServer server = startImpl ( ) ) { org.junit.Assert.fail ( "expected server startup to fail" ) ; } catch ( com.google.gerrit.acceptance.GerritServer e ) { } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
private java.lang.String urlEditFile ( ) { return ( ( urlEdit ( ) ) + "/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; ccExistingReviewers ( ) ; includeWatchers ( NotifyType.ALL_COMMENTS ) ; add ( RecipientType.TO , reviewers ) ; }
public void preDisplay ( com.google.gerrit.common.data.ProjectAccess access ) { edit ( access ) ; }
private void setupPostMocks ( boolean changeExist ) throws java.lang.Exception { setupPostMocks ( changeExist , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_ORM_EXCEPTION , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_IO_EXCEPTION ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( PatchSetDetailFactory.Factory.class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class ) ; }
public void setName ( final java.lang.String n ) { name = n ; }
public void onLostFocus ( com.google.gwt.user.client.ui.Widget sender ) { if ( "" . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( Util.C.defaultAccountName ( ) ) ; nameTxtBox.addStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
private void failAndThrow ( com.google.gerrit.reviewdb.client.Change change , java.lang.RuntimeException e ) { fail ( change , e ) ; throw e ; }
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { index ( newChangeData ( db , project , changeId ) ) ; }
public java.lang.String doProcess ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) { return null ; }
private void grantApproveToChangeOwner ( ) throws java.lang.Exception { grantLabel ( ( ( com.google.gerrit.common.data.Permission.LABEL ) + "Code-Review" ) , ( - 2 ) , 2 , project , "refs/heads/*" , false , SystemGroupBackend.CHANGE_OWNER ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult apply ( com.google.gerrit.server.account.AccountResource.Capability resource ) { return com.google.gerrit.extensions.restapi.BinaryResult.create ( "ok\n" ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { }
public void addReviewerToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public final java.lang.String max_value ( ) { return com.google.gerrit.common.data.LabelValue.formatValue ( value_set ( ) . last ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString user ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . username ( user.asString ( ) ) ; refreshHttpPassword ( ) ; }
public java.lang.String getText ( ) { java.lang.String s = nameTxtBox.getText ( ) ; if ( ( s == null ) || ( s.equals ( Util.C.defaultAccountName ( ) ) ) ) { s = "" ; } return s ; }
public void subsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "refs/changes/02/2/1" , "refs/changes/02/2/meta" , "refs/heads/branch" ) ; }
private void setupNavigationLink ( com.google.gerrit.client.ui.Hyperlink link , int skip ) { link.setTargetHistoryToken ( getTokenForScreen ( skip ) ) ; link.setVisible ( true ) ; }
ApprovalCategory.Id getCategoryId ( ) { return type.getCategory ( ) . getId ( ) ; }
public synchronized com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.server.account.AccountState state = byId.get ( accountId ) ; if ( state != null ) { return state ; } return com.google.gerrit.testutil.FakeAccountCache.newState ( new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) ; }
void set ( com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . changeId = changeId ; reviewerSuggestOracle.setChange ( changeId ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canCherryPick ( args.mergeSorter , args.repo , args.useContentMerge , mergeTip , args.rw , toMerge ) ; }
void destroy ( final net.sf.ehcache.Element cacheEntry ) { self.remove ( cacheEntry.getKey ( ) ) ; }
private boolean can ( com.google.gerrit.server.permissions.GlobalOrPluginPermission perm ) throws com.google.gerrit.server.permissions.PermissionBackendException { return user.getCapabilities ( ) . doCanForDefaultPermissionBackend ( perm ) ; }
public void run ( ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { reviewed.setValue ( true , true ) ; } navigate ( Direction.NEXT ) . run ( ) ; }
public void evict ( final com.google.gerrit.reviewdb.Account.Id accountId ) { byId.remove ( accountId ) ; }
private static boolean isEmptyPath ( java.lang.String path ) { return ( path.isEmpty ( ) ) || ( path.equals ( "/" ) ) ; }
private void fireEventForUnrestrictedListeners ( final com.google.gerrit.server.events.Event event ) { for ( com.google.gerrit.common.ChangeListener listener : unrestrictedListeners ) { listener.onEvent ( event ) ; } }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
private void fail ( com.google.gerrit.reviewdb.client.Change change , java.lang.Throwable t ) { ok.set ( false ) ; failed.update ( 1 ) ; }
protected void configure ( ) { propertyFactory = createMock ( Property.Factory.class ) ; bind ( Property.Factory.class ) . toInstance ( propertyFactory ) ; }
protected void configure ( ) { install ( new com.google.gerrit.server.rules.PrologModule.EnvironmentModule ( ) ) ; bind ( PrologEnvironment.Args.class ) ; }
public com.google.gerrit.server.git.ChangeReportFormatter.Input setSubject ( java.lang.String subject ) { this . subject = subject ; return this ; }
public java.lang.String toString ( ) { return ( "AccessSection[" + ( getName ( ) ) ) + "]" ; }
public com.google.gerrit.server.mail.receive.MailMessage.Builder addCc ( java.lang.String val ) { ccBuilder ( ) . add ( val ) ; return this ; }
public void resetToDefaults ( ) { defaultContext = com.google.gerrit.client.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; showSiteHeader = true ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setHeaderVisible ( false ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return getControl ( ) . getUser ( ) ; }
public final native boolean hasActiveLine ( ) ;
public void run ( ) { }
public void deleteBranch ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final java.util.Set < com.google.gerrit.reviewdb.client.Branch.NameKey > toRemove , final com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.client.Branch.NameKey > > callback ) { deleteBranchesFactory.create ( projectName , toRemove ) . to ( callback ) ; }
protected java.lang.String decode ( int s , int e ) { if ( ( charset ) == null ) { charset = com.google.gerrit.server.patch.Text.charset ( content , null ) ; } return org.eclipse.jgit.util.RawParseUtils.decode ( charset , content , s , e ) ; }
public java.lang.String process ( ) { return com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson ( event ) ; }
java.lang.String weeksAgo ( long weeks ) ;
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo result ) { display ( result ) ; }
void deleteBranch ( java.util.Set < com.google.gerrit.client.reviewdb.Branch.NameKey > ids , com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.client.reviewdb.Branch.NameKey > > callback ) ;
public com.google.gerrit.extensions.api.changes.ChangeApi create ( com.google.gerrit.extensions.common.ChangeInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.d47190 Revert ; }
public void parseFullTimestamp ( ) { org.junit.Assert.assertEquals ( "2006-01-02 10:04:05.999 -0500" , reformat ( "2006-01-02 15:04:05.999000000" ) ) ; }
public com.google.gerrit.acceptance.RangeSubject range ( ) { return com.google.gerrit.acceptance.RangeSubject.assertThat ( actual ( ) . range ) . named ( "range" ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { enableEdit ( true ) ; set ( result ) ; setEdit ( false ) ; if ( autoClosed ) { setOpen ( false ) ; } getCommentManager ( ) . setUnsaved ( this , false ) ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.reviewdb.client.Change change ) ;
public void configure ( ) { }
public java.lang.String replace ( final java.util.Map < java.lang.String , java.lang.String > params ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; for ( final com.google.gerrit.server.ParamertizedString.Format f : patternOps ) { f.format ( r , params ) ; } return r.toString ( ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { goChange ( ) ; }
protected void updateOwnerGroup ( com.google.gerrit.client.groups.GroupInfo ownerGroup ) { group.setOwnerUUID ( ownerGroup.getGroupUUID ( ) ) ; group.owner ( ownerGroup.name ( ) ) ; }
public void putApproval ( java.lang.String label , short value ) { approvals.put ( label , value ) ; }
protected void configure ( ) { cache ( com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.ORGS_CACHE_NAME , java.lang.String.class , com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.OrganizationStructure.class ) . expireAfterWrite ( com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.GROUPS_CACHE_TTL_MINS , java.util.concurrent.TimeUnit.MINUTES ) . loader ( com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.OrganisationLoader.class ) ; bind ( com.googlesource.gerrit.plugins.github.group.GitHubGroupsCache.class ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId getLabelId ( ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId ( getId ( ) ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public void upsertComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; com.google.common.base.Preconditions.checkArgument ( ( ( c.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) , "Cannot upsert a published comment into a ChangeDraftUpdate" ) ; upsertComments.add ( c ) ; }
public void setText ( java.lang.String text ) { focusHint ( ) ; super . setText ( text ) ; blurHint ( ) ; }
public void testUpsertNothing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.NO_DATA ) ; }
public java.lang.String getDisplayString ( ) { if ( branch.ref ( ) . startsWith ( Branch.R_HEADS ) ) { return branch.ref ( ) . substring ( Branch.R_HEADS.length ( ) ) ; } return branch.ref ( ) ; }
public ApprovalCategory.Id getCategoryId ( ) { return categoryId ; }
public org.eclipse.jgit.lib.RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( edit , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( file , content ) ) ; }
public int compare ( final com.google.gerrit.client.data.ApprovalDetail o1 , final com.google.gerrit.client.data.ApprovalDetail o2 ) { return o2.sortOrder.compareTo ( o1.sortOrder ) ; }
abstract java.lang.Runnable openCloseAll ( final net.codemirror.lib.CodeMirror cm ) ;
private void assertNoProblems ( com.google.gerrit.server.git.gpg.TestKey key ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( checker.check ( key.getPublicKey ( ) ) . getProblems ( ) ) . isEmpty ( ) ; }
public static final native java.lang.String escapeString ( java.lang.String val ) ;
protected boolean writeChanges ( ) { return writeChanges ; }
public boolean verify ( ) { return ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Verifier.onTime ( token.expiresAt ) ) && ( verifyTokenValues ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { showSiteHeader.setChecked ( ( ! val ) ) ; super . onFailure ( caught ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.builder ( ) . build ( ) ; }
public void removeCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self.removeCacheUsageListener ( cacheUsageListener ) ; }
public void run ( ) { header.prev.go ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( url ( list.get ( index ) ) ) ; }
private void assertProblems ( org.eclipse.jgit.transport.PushCertificate cert , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.CheckResult result = checker.check ( cert ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Unignore.Input input ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { if ( canUnignore ( rsrc ) ) { stars.unignore ( rsrc ) ; } return com.google.gerrit.extensions.restapi.Response.ok ( "" ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RESTORE_ENTRY , edit , file , null , null ) ; }
public void save ( java.lang.String message ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { save ( new org.eclipse.jgit.lib.PersonIdent ( "Gerrit Initialization" , "init@gerrit" ) , message ) ; }
protected static java.lang.String getGroupName ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return java.lang.String.format ( "Group <%s>" , uuid ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.PatchLineComment result ) { comment = result ; text.setReadOnly ( false ) ; discard.setEnabled ( true ) ; updateSavedAt ( ) ; }
public boolean isTokenValid ( final java.lang.String inputToken ) { return ( ( isSignedIn ( ) ) && ( ( val.getXsrfToken ( ) ) != null ) ) && ( val.getXsrfToken ( ) . equals ( inputToken ) ) ; }
java.io.File path ( final java.lang.String title , final java.lang.String name , final java.lang.String defValue ) { return resolve ( string ( title , name , defValue ) ) ; }
public void submit ( java.lang.Iterable < com.google.gerrit.common.data.SubmitRecord > submitRecords ) { status = Change.Status.SUBMITTED ; this . submitRecords = com.google.common.collect.ImmutableList.copyOf ( submitRecords ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( this . submitRecords.isEmpty ( ) ) ) , "no submit records specified at submit time" ) ; }
public void oldNameOfGroupMustBeSpecifiedForRename ( ) throws java.lang.Exception { createGroup ( groupUuid , groupName ) ; com.google.gerrit.reviewdb.client.AccountGroup.NameKey anotherName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "admins" ) ; expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.loadForRename ( repo , groupUuid , null , anotherName ) ; }
public void start ( ) { com.google.gerrit.sshd.commands.ShowCaches.serverStarted = java.lang.System.currentTimeMillis ( ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > iterateAllEntities ( ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
protected com.google.gitiles.DefaultAccess newAccess ( java.io.File basePath , java.lang.String canonicalBasePath , java.lang.String baseGitUrl , org.eclipse.jgit.transport.resolver.FileResolver < javax.servlet.http.HttpServletRequest > resolver , javax.servlet.http.HttpServletRequest req ) { return new com.google.gitiles.DefaultAccess ( basePath , canonicalBasePath , baseGitUrl , resolver , req ) ; }
public void onClick ( android.view.View v ) { display ( com.google.reviewit.UnifiedDiffFragment.class ) ; }
public boolean supportsTeamMembershipChanges ( ) { return false ; }
public final void reviewCategoryStrategy ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.ReviewCategoryStrategy s ) { reviewCategoryStrategyRaw ( ( s != null ? s.toString ( ) : null ) ) ; }
private synchronized void runHook ( java.io.File hook , java.util.List < java.lang.String > args ) { if ( hook.exists ( ) ) { hookQueue.execute ( new com.google.gerrit.common.ChangeHookRunner.AsyncHookTask ( null , hook , args ) ) ; } }
public void evict ( java.lang.String username ) { cache.remove ( username ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { if ( ( change ) != null ) { topicEdited.fire ( change , ctx.getUser ( ) . asIdentifiedUser ( ) . getAccount ( ) , oldTopicName ) ; } }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentLink" , pluginName , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
static void adviseThreadCount ( final int callerWants ) { final com.google.gerrit.git.WorkQueue.Executor p = com.google.gerrit.git.WorkQueue.getPool ( true ) ; p.setMaximumPoolSize ( ( 1 + callerWants ) ) ; p.setCorePoolSize ( ( 1 + callerWants ) ) ; }
public void listTagsOfNonExistingProject ( ) throws java.lang.Exception { adminSession.get ( "/projects/non-existing/tags" ) . assertNotFound ( ) ; }
private static void assertNotRef ( java.lang.String refName ) { org.junit.Assert.assertNull ( Change.Id.fromRef ( refName ) ) ; }
public void defaultSubmitTypeWhenNotConfigured ( ) { com.google.common.truth.Truth.assertThat ( repoCfg.getDefaultSubmitType ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "someProject" ) ) ) . isEqualTo ( SubmitType.MERGE_IF_NECESSARY ) ; }
public java.lang.Object apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( rsrc.getUser ( ) . getAccount ( ) . isActive ( ) ) { return com.google.gerrit.extensions.restapi.Response.ok ( "" ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; }
public com.google.gerrit.common.data.ApprovalType getApprovalType ( final com.google.gerrit.reviewdb.ApprovalCategory.Id id ) { return byCategory ( ) . get ( id ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( control , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public static void comments ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.ChangeApi.revision ( id ) . view ( "comments" ) . get ( cb ) ; }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; if ( ! ( a1.unify ( new com.googlecode.prolog_cafe.builtin.IntegerTerm ( engine.B0 ) , engine.trail ) ) ) { return engine.fail ( ) ; } return cont ; }
com.googlesource.gerrit.plugins.replication.Destination create ( com.googlesource.gerrit.plugins.replication.DestinationConfiguration config ) { return new com.googlesource.gerrit.plugins.replication.Destination ( injector , config , replicationUserFactory , pluginUser , gitRepositoryManager , groupBackend , stateLog , groupIncludeCache ) ; }
public Account.Id getAccountId ( ) { final com.google.gerrit.server.GerritCall c = com.google.gerrit.server.GerritJsonServlet.getCurrentCall ( ) ; return c != null ? c.getAccountId ( ) : null ; }
public void setUp ( ) { com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 10 , java.util.concurrent.TimeUnit.SECONDS ) ; changeCreatedOn = com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
public void error ( com.google.gerrit.server.git.ValidationError error ) { com.google.gerrit.server.account.VersionedAccountQueries.log.error ( ( ( ( "Error parsing file " + ( com.google.gerrit.server.git.QueryList.FILE_NAME ) ) + ": " ) + ( error.getMessage ( ) ) ) ) ; }
final native void setTitle ( java.lang.String t ) ;
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body ) throws java.lang.Exception { return writeCommit ( body , noteUtil.newIdent ( changeOwner.getAccount ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) , serverIdent , "Anonymous Coward" ) ) ; }
private void renderPluginLinks ( java.util.List < com.google.gerrit.client.DiffWebLinkInfo > links ) { if ( links != null ) { for ( com.google.gerrit.client.DiffWebLinkInfo webLink : links ) { linkPanel.add ( webLink.toAnchor ( ) ) ; } } }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.format ( rsrc ) ) ; }
private static org.apache.lucene.search.Query fullTextQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { return new org.apache.lucene.search.FuzzyQuery ( new org.apache.lucene.index.Term ( p.getField ( ) . getName ( ) , p.getValue ( ) ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.Change > iterateAllEntities ( ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.Account > load ( java.lang.Boolean key ) throws java.lang.Exception { return com.google.common.collect.ImmutableList.copyOf ( dbProvider.get ( ) . accounts ( ) . all ( ) ) ; }
java.util.List < com.google.gerrit.common.data.PermissionRule > getOverridden ( java.lang.String permissionName ) { return com.google.common.base.Objects.firstNonNull ( overridden.get ( permissionName ) , java.util.Collections.< com.google.gerrit.common.data.PermissionRule > emptyList ( ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > username ( java.lang.String username ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.USERNAME , AccountQueryBuilder.FIELD_USERNAME , username.toLowerCase ( ) ) ; }
private void updateRemoteExternalId ( com.google.gerrit.server.account.AuthResult arsp , java.lang.String remoteAuthToken ) throws com.google.gerrit.server.account.AccountException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { accountManager.updateLink ( arsp.getAccountId ( ) , new com.google.gerrit.server.account.AuthRequest ( ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_EXTERNAL , remoteAuthToken ) ) ) ; }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { final java.lang.String token = req.getPathInfo ( ) . substring ( 1 ) ; toGerrit ( token , req , rsp ) ; }
public static java.util.Set < java.lang.String > getPersonParts ( org.eclipse.jgit.lib.PersonIdent person ) { if ( person == null ) { return com.google.common.collect.ImmutableSet.of ( ) ; } return com.google.gerrit.server.index.SchemaUtil.getPersonParts ( person.getName ( ) , java.util.Collections.singleton ( person.getEmailAddress ( ) ) ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfo result ) { enableForm ( ) ; display ( result ) ; }
public static java.lang.String toAccountQuery ( final java.lang.String fullname ) { return ( ( "/q/owner:\"" + ( com.google.gwtorm.client.KeyUtil.encode ( fullname ) ) ) + "\"," ) + ( com.google.gerrit.common.PageLinks.TOP ) ; }
private java.util.Set < java.lang.String > getMyOrganisationsLoginsViaApi ( ) throws java.io.IOException { return getHub ( ) . getMyOrganizations ( ) . keySet ( ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , java.lang.Iterable < T > > buildRepeatable ( com.google.gerrit.server.index.FieldDef.Getter < I , java.lang.Iterable < T > > getter ) { return new com.google.gerrit.server.index.FieldDef ( name , type , stored , true , getter ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.change.GetChange.cache ( json.format ( rsrc ) ) ; }
public void go ( ) { errorDialog.hide ( ) ; super . go ( ) ; }
public void usernameEmailPatternWithRegex ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , "^refs/sb/${username}/heads/.*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , "d.v@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = user ( local , "dev@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotRead ( "refs/sb/dev@ger-rit.org/heads/foobar" , u ) ; assertCanRead ( "refs/sb/dev@ger-rit.org/heads/foobar" , d ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; }
abstract java.lang.Runnable newDraftCallback ( final net.codemirror.lib.CodeMirror cm ) ;
public void contextDestroyed ( final javax.servlet.ServletContextEvent event ) { com.google.gerrit.server.Lifecycle.stop ( dbInjector , sysInjector , sshInjector , webInjector ) ; super . contextDestroyed ( event ) ; }
public void commentOnWipChangeByOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . notSent ( ) ; }
protected void configure ( ) { factory ( RenameGroupOp.Factory.class ) ; factory ( MetaDataUpdate.InternalFactory.class ) ; bind ( MetaDataUpdate.Server.class ) ; }
private static com.google.gerrit.server.git.CommitMergeStatus getCommitMergeStatus ( org.eclipse.jgit.errors.NoMergeBaseException.MergeBaseFailureReason reason ) { switch ( reason ) { case MULTIPLE_MERGE_BASES_NOT_SUPPORTED : case TOO_MANY_MERGE_BASES : default : return CommitMergeStatus.MANUAL_RECURSIVE_MERGE ; case CONFLICTS_DURING_MERGE_BASE_CALCULATION : return CommitMergeStatus.PATH_CONFLICT ; } }
public void upsertComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { upsertDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; upsertPublishedComment ( comment ) ; } }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountInfo result ) { onCloseForm ( ) ; assigneeLink.setText ( result.name ( ) ) ; }
public com.google.gerrit.extensions.common.ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return format ( cd , com.google.common.base.Optional.< com.google.gerrit.reviewdb.client.PatchSet.Id > absent ( ) , true ) ; }
public boolean match ( com.google.gerrit.reviewdb.PatchSetApproval p , short value ) { return ( p.getValue ( ) ) == value ; }
protected com.google.gerrit.util.cli.CmdLineParser newCmdLineParser ( ) { return cmdLineParserFactory.create ( this ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.AccountGroup.Id result ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toAccountGroup ( result ) ) ; }
private void logCanceledWhileRunningException ( org.eclipse.jgit.errors.TransportException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( ( ( ( "Cannot replicate to " + ( uri ) ) + "." ) + " It was canceled while running" ) , e ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.accountSettingsHeading ( ) ) ; }
public static com.google.common.cache.CacheBuilder < java.lang.Object , java.lang.Object > newBuilder ( ) { return com.google.common.cache.CacheBuilder.newBuilder ( ) . maximumSize ( ( 1 << 10 ) ) . expireAfterWrite ( 30 , java.util.concurrent.TimeUnit.MINUTES ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return getProjectControl ( ) . getCurrentUser ( ) ; }
private void abandon ( java.lang.String changeId , com.google.gerrit.acceptance.TestAccount by , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.NotifyHandling notify ) throws java.lang.Exception { abandon ( changeId , by , EmailStrategy.ENABLED , notify ) ; }
public void testUsernameEmailPatternWithRegex ( ) { com.google.gerrit.server.project.Util.grant ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , "^refs/sb/${username}/heads/.*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , "d.v@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util.user ( local , "dev@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert.assertFalse ( "u can't read" , u.controlForRef ( "refs/sb/dev@ger-rit.org/heads/foobar" ) . isVisible ( ) ) ; org.junit.Assert.assertTrue ( "d can read" , d.controlForRef ( "refs/sb/dev@ger-rit.org/heads/foobar" ) . isVisible ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > draftByAuthor ( com.google.gerrit.reviewdb.client.Account.Id author ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public boolean isOk ( ) { return problems.isEmpty ( ) ; }
public void testEvictProjectListOK ( ) throws java.lang.Exception { setupMocks ( Constants.PROJECT_LIST , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.PROJECT_LIST , new java.lang.Object ( ) ) ) . isTrue ( ) ; }
org.kohsuke.args4j.spi.OptionHandler create ( com.google.gerrit.util.cli.CmdLineParser cmdLineParser , org.kohsuke.args4j.OptionDef optionDef , org.kohsuke.args4j.spi.Setter setter ) ;
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public com.google.gerrit.server.ssh.AbstractCommand create ( ) { return new com.google.gerrit.server.ssh.AdminFlushGroupCache ( ) ; }
public boolean updateTeamModels ( java.util.Collection < com.gitblit.models.TeamModel > arg0 ) { return false ; }
public void testCreateProjectWithNameMismatch_BadRequest ( ) throws java.io.IOException { com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.name = "otherName" ; com.google.gerrit.acceptance.RestResponse r = session.put ( "/projects/someName" , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_BAD_REQUEST , r.getStatusCode ( ) ) ; }
public void testPushForMasterWithApprovals_ValueOutOfRange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master/%l=Code-Review-3" ) ; r.assertErrorStatus ( "label \"Code-Review\": -3 is not a valid value" ) ; }
private final native void setStartLine ( int sl ) ;
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { event.preventDefault ( ) ; onLogin ( ) ; } }
private org.eclipse.jgit.transport.PushCertificate newSignedCert ( java.lang.String nonce , com.google.gerrit.gpg.testutil.TestKey signingKey ) throws java.lang.Exception { return newSignedCert ( nonce , signingKey , null ) ; }
static java.lang.String getDefaultTemplateMsgWithBursts ( java.lang.String rateLimitTypeName ) { return ( ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 0 ] ) + rateLimitTypeName ) + ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 2 ] ) ; }
protected void configureServlets ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.WebUiPlugin.class ) . toInstance ( new com.google.gerrit.extensions.webui.JavaScriptPlugin ( "automerger.js" ) ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.multimaster.Configuration.class ) . in ( Scopes.SINGLETON ) ; install ( new com.ericsson.gerrit.plugins.multimaster.forwarder.rest.RestEventForwarderModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.multimaster.event.EventModule ( ) ) ; install ( new com.ericsson.gerrit.plugins.multimaster.index.IndexModule ( ) ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . < T > fromJson ( buildJsonRaw ( path , "" ) , typeOfT ) ; }
private void logCanceledWhileRunningException ( org.eclipse.jgit.errors.TransportException e ) { HEAD ( ( 5723.0F - 2.15 ) ) ; com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( ( ( "Cannot replicate to " + ( uri ) ) + ". It was canceled while running" ) , e ) ; }
public void singleHashtagNumeric ( ) throws java.lang.Exception { java.lang.String commitMessage = "Subject\n\n#123\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "123" ) ) ; }
boolean isOwner ( final com.google.gerrit.server.account.GroupMembership groups ) { return com.google.common.collect.Iterables.any ( tree ( ) , new com.google.common.base.Predicate < com.google.gerrit.server.project.ProjectState > ( ) { @ java.lang.Override public boolean apply ( com.google.gerrit.server.project.ProjectState in ) { return groups.containsAnyOf ( in.localOwners ) ; } } ) ; }
public java.lang.Double get ( ) { return ( sys.getProcessCpuTime ( ) ) / 1.0E9 ; }
protected void configure ( ) { bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) ; }
com.google.gerrit.server.patch.PatchListKey toPatchListKey ( ) { return new com.google.gerrit.server.patch.PatchListKey ( oldId , parentNum , newId , whitespace ) ; }
public void remove ( ) { m.remove ( name.value ( ) , cmd ) ; }
public void update ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj , true ) ; } }
net.codemirror.lib.CodeMirror getCmA ( ) { return cmA ; }
public void display ( final java.lang.String commitMessage ) { display ( null , null , false , commitMessage ) ; }
public boolean isLoggedIn ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope ... scopes ) { return isLoggedIn ( new java.util.TreeSet < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > ( java.util.Arrays.asList ( scopes ) ) ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . screen ( "create" , new com.googlesource.gerrit.plugins.serviceuser.client.CreateServiceUserScreen.Factory ( ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo format ( com.google.gerrit.server.group.GroupResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo info = init ( rsrc.getGroup ( ) ) ; initMembersAndSubgroups ( rsrc , info ) ; return info ; }
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance ( com.google.gerrit.server.project.ProjectState projectState , java.lang.String pluginName ) { return projectState.getConfig ( ( pluginName + ( com.google.gerrit.server.config.PluginConfigFactory.EXTENSION ) ) ) . getWithInheritance ( ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { doLinkIdentity ( ) ; }
public java.util.Map < com.google.gerrit.reviewdb.Account.Id , com.google.gerrit.server.account.AccountState > getAll ( java.lang.Iterable < com.google.gerrit.reviewdb.Account.Id > accountIds ) { return byId.getAll ( accountIds ) ; }
public int nextChangeId ( ) throws com.google.gwtorm.server.OrmException { if ( ! ( migration.readChangeSequence ( ) ) ) { return db.get ( ) . nextChangeId ( ) ; } return changeSeq.next ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createForNew ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsers , change.getProject ( ) , change ) . load ( ) ; }
public void evictParentGroupsOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
public static com.google.gerrit.client.rpc.RestApi change ( int id ) { return new com.google.gerrit.client.rpc.RestApi ( "/changes/" ) . id ( java.lang.String.valueOf ( id ) ) ; }
public void addReviewerToWipChange ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
com.google.gerrit.server.permissions.PermissionBackend.ForChange asForChange ( com.google.gerrit.server.query.change.ChangeData cd ) { return new com.google.gerrit.server.project.ChangeControl.ForChangeImpl ( cd ) ; }
com.google.gerrit.server.git.SubmoduleOp create ( java.util.Set < com.google.gerrit.reviewdb.client.Branch.NameKey > updatedBranches , com.google.gerrit.server.git.MergeOpRepoManager orm ) ;
public void deleteBranch ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > toRemove , final com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > > callback ) { deleteBranchesFactory.create ( projectName , toRemove ) . to ( callback ) ; }
public java.lang.String getMessage ( ) { return escape ( message ) ; }
private com.google.gerrit.server.project.ChangeControl stubChangeControl ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.testutil.TestChanges.stubChangeControl ( repoManager , c , changeOwner ) ; }
public void testCreateGroupWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( server , user ) . put ( "/groups/newGroup" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
private java.lang.String newChange2 ( org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = HEAD ( 0 ) ; com.google.gerrit.acceptance.edit.Merge changes ; }
Account.Id getAccountId ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( getControl ( ) . getCurrentUser ( ) ) ) . getAccountId ( ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "unchanged" , unchanged ) . add ( "updated" , updated ) . add ( "deleted" , deleted ) . toString ( ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.put ( "/projects/newProject" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
private final void setSide ( com.google.gerrit.common.changes.Side side ) { setSideRaw ( side.toString ( ) ) ; }
private void insertDraftComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { createDraftUpdateIfNull ( ) ; draftUpdate.insertComment ( c ) ; }
protected void preDisplay ( com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.changes.ChangeList > result ) { display ( result ) ; }
public void testLinkify_AngleBrackets1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A <http://go.here/> B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( "<p>A &lt;<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>&gt; B</p>" ) ; }
public void evictGroupsMembers ( ) throws java.io.IOException , javax.servlet.ServletException { setUp ( Constants.GROUPS_MEMBERS ) ; servlet.doPost ( request , response ) ; verifyAll ( ) ; }
private void initUI ( ) { diffTable = new com.google.gerrit.client.patches.UnifiedDiffTable ( ) ; add ( diffTable ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.PatchScript result ) { if ( ( rpcSequence ) == rpcseq ) { onResult ( result , isFirst ) ; } }
public void caseSensitiveName ( ) throws java.lang.Exception { com.google.gitiles.IdentRevFilter filter = com.google.gitiles.IdentRevFilter.author ( "eSt" ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "est" , "null@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "Establish" , "null@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "tESt" , "null@google.com" ) ) ) ; org.junit.Assert.assertFalse ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "tesTing" , "null@google.com" ) ) ) ; }
public T get ( java.lang.String pluginName , java.lang.String exportName ) { return items.get ( new com.google.gerrit.extensions.registration.DynamicMap.NamePair ( pluginName , exportName ) ) ; }
public void setNotifyNewChanges ( final boolean a ) { notifyNewChanges = a ; }
public void testUpsertTwoBothExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; }
public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return this ; }
public final com.google.gerrit.client.projects.ConfigInfo.ConfigParameterValue values ( java.lang.String [ ] values ) { init ( ) ; for ( java.lang.String v : values ) { add_value ( v ) ; } return this ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toAccountGroup ( getRowItem ( row ) . getId ( ) ) ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult apply ( com.google.gerrit.server.project.FileResource rsrc ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return fileContentUtil.getContent ( rsrc.getProject ( ) . getProjectState ( ) , rsrc.getRev ( ) , rsrc.getPath ( ) ) ; }
public java.lang.String getChangeAvatarUrl ( com.google.gerrit.server.IdentifiedUser forUser ) { return replaceInUrl ( avatarChangeUrl , forUser.getUserName ( ) ) ; }
private static boolean isModify ( com.google.gerrit.server.diff.PatchListEntry content ) { switch ( content.getChangeType ( ) ) { case MODIFIED : case COPIED : case RENAMED : case REWRITE : return true ; case ADDED : case DELETED : default : return false ; } }
public final boolean isClientSslCertLdap ( ) { return ( authType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.CLIENT_SSL_CERT_LDAP ) ; }
public void indexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "file:a" ) ; com.google.common.truth.Truth.assertThat ( rewrite ( in ) ) . isEqualTo ( query ( in ) ) ; }
public com.google.gerrit.server.change.CommentInfo apply ( com.google.gerrit.server.change.DraftResource rsrc ) { return new com.google.gerrit.server.change.CommentInfo ( rsrc.getComment ( ) , null ) ; }
public boolean apply ( K in ) { return patchSets.containsKey ( func.apply ( in ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( headless ) ) ; }
public void stop ( ) { }
public void readCommentLinkRawHtml ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit ( ) . add ( "project.config" , ( "[commentlink \"bugzilla\"]\n" + ( "\tmatch = \"(bugs#?)(d+)\"\n" + "\thtml = http://bugs.example.com/show_bug.cgi?id=$2" ) ) ) . create ( ) ; com.google.gerrit.server.git.ProjectConfig cfg = read ( rev ) ; com.google.common.truth.Truth.assertThat ( cfg.getCommentLinkSections ( ) ) . isEmpty ( ) ; com.google.common.truth.Truth.assertThat ( cfg.getValidationErrors ( ) . stream ( ) . map ( ValidationError :: getMessage ) ) . containsExactly ( ( "project.config: Error in pattern \"(bugs#?)(d+)\" in commentlink.bugzilla.match: " + "Raw html replacement not allowed" ) ) ; }
private boolean search ( java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > ids ) { return user.getEffectiveGroups ( ) . containsAnyOf ( ids ) ; }
public java.lang.String getUserName ( ) { return username ; }
private static boolean match ( java.util.Set < com.google.gerrit.reviewdb.AccountGroup.UUID > groups , com.google.gerrit.common.data.PermissionRule rule ) { return groups.contains ( rule.getGroup ( ) . getUUID ( ) ) ; }
private static com.google.gerrit.extensions.common.InheritableBoolean asInheritableBoolean ( java.sql.ResultSet rs , java.lang.String col ) throws java.sql.SQLException { return "Y" . equals ( rs.getString ( col ) ) ? com.google.gerrit.extensions.common.InheritableBoolean.TRUE : com.google.gerrit.extensions.common.InheritableBoolean.INHERIT ; }
public java.sql.Timestamp apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return input.getGranted ( ) ; }
private void addMessage ( java.lang.String message ) { messages.add ( new com.google.gerrit.server.git.ReceiveCommits.Message ( message , false ) ) ; }
public void revokedByKeyNotPresentInStore ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add ( com.google.gerrit.gpg.testutil.TestKeys.revokedCompromisedKey ( ) ) ; save ( ) ; assertProblems ( k ) ; }
void onDeleteChange ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftChange ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , publish , deleteRevision , deleteChange ) ; } }
public void stop ( ) { com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.log.info ( "closing jgroups channel {}" , jgroupsConfig.clusterName ( ) ) ; channel.close ( ) ; peerInfo = java.util.Optional.empty ( ) ; peerAddress = null ; }
private static final native void init ( java.lang.String r ) ;
public void postEvent ( final com.google.gerrit.reviewdb.client.Change change , final com.google.gerrit.server.events.ChangeEvent event , final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( change , event , db ) ; }
abstract void setShowLineNumbers ( boolean b ) ;
com.google.gerrit.server.permissions.PermissionBackend.ForProject asForProject ( ) { return new com.google.gerrit.server.project.ProjectControl.ForProjectImpl ( ) ; }
public void run ( ) { java.lang.String t = newTheme.name ( ) . toLowerCase ( ) ; view.getEditor ( ) . setOption ( "theme" , t ) ; }
public void execute ( ) { final java.lang.String to = com.google.gwt.user.client.History.getToken ( ) ; new com.google.gerrit.client.auth.openid.OpenIdSignInDialog ( com.google.gerrit.common.auth.SignInMode.REGISTER , to , null ) . center ( ) ; }
private static void validateReindexerNotRunning ( com.google.gerrit.server.index.OnlineReindexer < ? , ? , ? > reindexer ) throws com.google.gerrit.lucene.ReindexerAlreadyRunningException { if ( ( reindexer != null ) && ( reindexer.isRunning ( ) ) ) { throw new com.google.gerrit.lucene.ReindexerAlreadyRunningException ( ) ; } }
private final native void setkeyMapTypeRaw ( java.lang.String i ) ;
public java.util.List < com.google.gerrit.common.data.SubmitRecord > getSubmitRecords ( ) { return submitRecords ; }
public com.google.gerrit.server.group.GroupJson.GroupInfo format ( com.google.gerrit.server.group.GroupResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.GroupJson.GroupInfo info = init ( rsrc.getGroup ( ) ) ; initMembersAndIncludes ( rsrc , info ) ; return info ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicMap.mapOf ( binder ( ) , com.google.gerrit.metrics.dropwizard.MetricResource.METRIC_KIND ) ; child ( com.google.gerrit.server.config.ConfigResource.CONFIG_KIND , "metrics" ) . to ( com.google.gerrit.metrics.dropwizard.MetricsCollection.class ) ; get ( com.google.gerrit.metrics.dropwizard.MetricResource.METRIC_KIND ) . to ( com.google.gerrit.metrics.dropwizard.GetMetric.class ) ; }
void setGerritSshDaemon ( final com.google.gerrit.server.ssh.GerritSshDaemon d ) { sshd = d ; }
protected < K , V > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > core ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type ) { return core ( com.google.inject.Key.get ( type ) , type ) ; }
public < K , V > com.google.common.cache.LoadingCache < K , V > build ( com.google.gerrit.server.cache.CacheBinding < K , V > def , com.google.common.cache.CacheLoader < K , V > loader ) { return create ( def , false ) . build ( loader ) ; }
public final com.google.gerrit.extensions.client.InheritableBoolean configured_value ( ) { return com.google.gerrit.extensions.client.InheritableBoolean.valueOf ( configured_valueRaw ( ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( c.getProject ( ) , c.getId ( ) , tip , walk , repoManager , noteUtil ) ; }
boolean needsCookieRefresh ( ) { return ( refreshCookieAt ) <= ( com.google.gerrit.httpd.WebSessionManager.now ( ) ) ; }
private void expandAll ( ) { hiddenSkipMap.remove ( cm.getLineHandle ( marker.find ( ) . getTo ( ) . getLine ( ) ) ) ; marker.clear ( ) ; widget.clear ( ) ; removeFromParent ( ) ; }
private java.lang.String escape ( java.lang.String str ) { if ( str != null ) { str = str.replace ( "\"" , "\\\"" ) ; } return str ; }
private synchronized void runHook ( java.io.File hook , java.util.List < java.lang.String > args ) { if ( hook.exists ( ) ) { hookQueue.execute ( new com.google.gerrit.common.ChangeHookRunner.AsyncHookTask ( null , hook , args ) ) ; } }
com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission , boolean isChangeOwner ) { if ( com.google.gerrit.common.data.Permission.hasRange ( permission ) ) { return toRange ( permission , access ( permission , isChangeOwner ) ) ; } return null ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { reviewedLink.go ( ) ; }
public com.google.gerrit.reviewdb.client.LabelId getLabelId ( ) { return key.categoryId ; }
public com.google.gerrit.server.schema.SchemaVersion get ( ) { return schemaVersion ; }
private void configureWebsessiosSection ( ) { ui.header ( "Websession section" ) ; promptAndSetString ( "Cleanup interval" , com.ericsson.gerrit.plugins.highavailability.WEBSESSION_SECTION , com.ericsson.gerrit.plugins.highavailability.CLEANUP_INTERVAL_KEY , com.ericsson.gerrit.plugins.highavailability.DEFAULT_CLEANUP_INTERVAL ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProject , projectName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public void testMIXED_NoFullNameUser ( ) { setFrom ( "MIXED" ) ; final java.lang.String email = "a.u.thor@test.example.com" ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( null , email ) ; org.easymock.EasyMock.replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create ( ) . from ( user ) ; assertNotNull ( r ) ; assertEquals ( "Anonymous Coward (Code Review)" , r.name ) ; assertEquals ( ident.getEmailAddress ( ) , r.email ) ; org.easymock.EasyMock.verify ( accountCache ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.README , getImageUrl ( ) , getBranchUrl ( projectName , Constants.HEAD ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
com.google.gerrit.server.patch.PublishComments create ( com.google.gerrit.reviewdb.PatchSet.Id patchSetId , java.lang.String messageText , java.util.Set < com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > approvals ) ;
void onDeleteChange ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftChange ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId ) ; } }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public java.lang.String toString ( ) { return ( ( ( "OAuthSession [token=" + ( tokenCache.get ( user ) ) ) + ", user=" ) + ( user ) ) + "]" ; }
public java.lang.String toString ( ) { return com.google.gerrit.server.git.gpg.Fingerprint.toString ( fp ) ; }
public com.google.gerrit.server.IdentifiedUser getReviewerUser ( ) { return user ; }
public com.google.gerrit.server.group.CreateGroup create ( com.google.gerrit.extensions.restapi.TopLevelResource root , java.lang.String name ) { return createGroup.create ( com.google.gerrit.server.util.Url.decode ( name ) ) ; }
private java.lang.String url ( com.google.gerrit.client.info.FileInfo info ) { return ( diffScreenType ) == ( com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF ) ? com.google.gerrit.client.Dispatcher.toUnified ( base , patchSetId , info.path ( ) ) : com.google.gerrit.client.Dispatcher.toSideBySide ( base , patchSetId , info.path ( ) ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.googlesource.gerrit.plugins.events.StreamEventListener.class ) ; bind ( com.googlesource.gerrit.plugins.events.EventStore.class ) . to ( com.googlesource.gerrit.plugins.events.fsstore.FsStore.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.ChangeListener.class ) . to ( com.googlesource.gerrit.plugins.events.CoreListener.class ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.deleteDocuments ( term ) ) ; }
private void setupPostMocks ( boolean changeExist , boolean ormException ) throws com.google.gwtorm.server.OrmException , java.io.IOException { setupPostMocks ( changeExist , ormException , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_IO_EXCEPTION ) ; }
private boolean canEditSshUserName ( ) { return com.google.gerrit.client.Gerrit.getConfig ( ) . canEdit ( Account.FieldName.USER_NAME ) ; }
public boolean canRead ( ) { return ( getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( ProjectState.READ_ONLY ) ) || ( canWrite ( ) ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { display ( result ) ; }
public void getDiffPreferencesOfNonExistingAccount_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , adminSession.get ( "/accounts/non-existing/preferences" ) . getStatusCode ( ) ) ; }
public static java.lang.String toProjectAdmin ( final com.google.gerrit.client.reviewdb.Project.Id id ) { return "admin,project," + ( id.toString ( ) ) ; }
public com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff ( org.eclipse.jgit.lib.ObjectId aId , com.google.gerrit.server.patch.Text aText , org.eclipse.jgit.lib.ObjectId bId , com.google.gerrit.server.patch.Text bText , java.util.List < org.eclipse.jgit.diff.Edit > edits ) ;
private org.joda.time.DateTime now ( ) { return org.joda.time.DateTime.now ( ) . toDateTime ( DateTimeZone.UTC ) ; }
protected com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > enforceVisibility ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > pred ) { return new com.google.gerrit.server.query.AndSource ( com.google.common.collect.ImmutableList.of ( pred , new com.google.gerrit.server.query.account.IsVisibleToPredicate ( accountControlFactory.get ( ) ) ) ) ; }
com.google.gerrit.server.git.receive.AsyncReceiveCommits create ( com.google.gerrit.server.project.ProjectControl projectControl , org.eclipse.jgit.lib.Repository repository , com.google.common.collect.SetMultimap < com.google.gerrit.server.notedb.ReviewerStateInternal , com.google.gerrit.reviewdb.client.Account.Id > extraReviewers ) ;
private void syncDisabledPlugins ( com.google.common.collect.Multimap < java.lang.String , java.nio.file.Path > jars ) { stopRemovedPlugins ( jars ) ; dropRemovedDisabledPlugins ( jars ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.Account.Id to ) { if ( ( ! ( emailOnlyAuthors ) ) || ( authors.contains ( to ) ) ) { super . add ( rt , to ) ; } }
public boolean ignored ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return stars.isIgnoredBy ( change.getId ( ) , change.getUser ( ) . getAccountId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot check if ignored" , e ) ; } }
public static com.google.gerrit.server.patch.IntraLineDiffArgs create ( com.google.gerrit.server.patch.Text aText , com.google.gerrit.server.patch.Text bText , java.util.List < org.eclipse.jgit.diff.Edit > edits , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId commit , java.lang.String path ) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffArgs ( aText , bText , edits , project , commit , path ) ; }
com.google.gerrit.server.git.MergeOp create ( com.google.gerrit.server.git.ChangeSet changes ) ;
public void setGroups ( java.lang.Iterable < java.lang.String > groups ) { this . groups = groups ; }
public void testOnlyVisibleGroupsReturned ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { java.util.Set < java.lang.String > expectedGroups = com.google.common.collect.Sets.newHashSet ( ) ; expectedGroups.add ( "Anonymous Users" ) ; expectedGroups.add ( "Registered Users" ) ; com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( user ) . get ( "/groups/" ) ; java.util.Map < java.lang.String , com.google.gerrit.acceptance.rest.group.GroupInfo > result = new com.google.gson.Gson ( ) . fromJson ( r.getReader ( ) , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , com.google.gerrit.acceptance.rest.group.GroupInfo > > ( ) { } . getType ( ) ) ; com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroups ( expectedGroups , result.keySet ( ) ) ; }
public static void fetch ( org.eclipse.jgit.junit.TestRepository < ? > testRepo , java.lang.String spec ) { }
protected java.lang.String cacheNameOf ( java.lang.String plugin , java.lang.String name ) { if ( "gerrit" . equals ( plugin ) ) { return name ; } else { return ( plugin + "." ) + name ; } }
public void postEvent ( final com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.ChangeEvent event ) { fireEvent ( branchName , event ) ; }
private static com.google.gerrit.reviewdb.client.RevId toRevId ( final org.eclipse.jgit.revwalk.RevCommit src ) { return new com.google.gerrit.reviewdb.client.RevId ( src.getId ( ) . name ( ) ) ; }
public static void included ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupList > callback ) { new com.google.gerrit.client.rpc.RestApi ( "groups" ) . id ( group.get ( ) ) . view ( "groups" ) . get ( callback ) ; }
public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.io.IOException { com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.parent = "non-existing-project" ; com.google.gerrit.acceptance.RestResponse r = session.put ( "/projects/child" , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_UNPROCESSABLE_ENTITY , r.getStatusCode ( ) ) ; }
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.io.InputStream raw ) throws java.io.IOException ;
public java.util.Set < com.google.gerrit.reviewdb.AccountGroup.Id > getEffectiveGroups ( ) { return java.util.Collections.unmodifiableSet ( effectiveGroups ) ; }
public void commit ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
private com.google.gerrit.extensions.client.GitBasicAuthPolicy getBasicAuthPolicy ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.extensions.client.GitBasicAuthPolicy defaultAuthPolicy = ( isLdapAuthType ( ) ) ? com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP : com.google.gerrit.extensions.client.GitBasicAuthPolicy.HTTP ; return cfg.getEnum ( "auth" , null , "gitBasicAuthPolicy" , defaultAuthPolicy ) ; }
private void enableForm ( final boolean on ) { descTxt.setEnabled ( on ) ; addMember.setEnabled ( on ) ; nameTxtBox.setEnabled ( on ) ; delMember.setEnabled ( on ) ; }
protected int getEventType ( ) { return com.ruesga.gerrit.plugins.fcm.rest.CloudNotificationEvents.TOPIC_CHANGED_EVENT ; }
public java.lang.String getUrl ( ) { return escape ( url ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( "Imagare Preferences" ) ; screen.show ( new com.googlesource.gerrit.plugins.imagare.client.ImagarePreferenceScreen ( enableImageServer ) ) ; }
public void setFile ( final java.lang.String pattern ) { file = pattern ; }
private static java.lang.String nextFunction ( ) { return "__gwtjsonrpc_callback" + ( ( com.google.gwtjsonrpc.client.CallbackHandle.callbackId ) ++ ) ; }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpDelete ( ( ( peerInfo.get ( ) . getDirectUrl ( ) ) + endpoint ) ) , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler ( ) ) ; }
private void writeObject ( final java.io.ObjectOutputStream out ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectIdSerialization.writeCanBeNull ( out , oldId ) ; org.eclipse.jgit.lib.ObjectIdSerialization.writeNotNull ( out , newId ) ; com.google.gerrit.server.ioutil.BasicSerialization.writeEnum ( out , whitespace ) ; }
private void setDefaultFields ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { setDefaultConfig ( filterConfig ) ; setDefaultRenderer ( filterConfig ) ; setDefaultUrls ( ) ; setDefaultAccess ( ) ; setDefaultVisbilityCache ( ) ; setDefaultTimeCache ( ) ; setDefaultBlameCache ( ) ; setDefaultGitwebRedirect ( ) ; }
public java.lang.String apply ( java.lang.String input ) { return input.toLowerCase ( ) ; }
protected java.nio.file.Path getResourcePath ( java.lang.String pathInfo ) throws java.io.IOException { return com.google.gerrit.launcher.GerritLauncher.getZipFileSystem ( zip ) . getPath ( ( "bower_components/" + pathInfo ) ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.ConfigInfo configInfo ) { display ( serviceUserInfo , configInfo.getAllowEmail ( ) ) ; }
static java.lang.String getDefaultTemplateMsg ( java.lang.String rateLimitTypeName ) { return ( ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 0 ] ) + rateLimitTypeName ) + ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 1 ] ) ; }
public void start ( ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; flush ( ) ; } } ) ; }
public java.io.Writer get ( ) { try { return new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( res.getOutputStream ( ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public com.google.gerrit.server.change.ListDraftComments list ( ) throws com.google.gerrit.extensions.restapi.AuthException { BRANCH ( ( f38c1c = com.google.gerrit.server.PatchLineCommentsUtil.draftByChangeAuthor ) ) ; checkIdentifiedUser ( ) ; return list ; }
public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent event ) { if ( patchTableHeader.listA.fileExists ) { onCellDoubleClick ( 0 , com.google.gerrit.client.patches.SideBySideTable.A ) ; } }
public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent event ) { if ( headerSideB.isFile ( ) ) { createFileCommentEditorOnSideB ( ) ; } }
public void put ( K key , V value ) { self.put ( key , value ) ; }
public abstract com.google.common.collect.ImmutableSet < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getIncludes ( ) ;
public void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , null ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.owner , sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.format ( rsrc ) ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( GroupDetailFactory.Factory.class ) ; factory ( MyGroupsFactory.Factory.class ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.client.Account result ) { if ( ! ( isAttached ( ) ) ) { return ; } display ( result ) ; haveAccount = true ; postLoad ( ) ; }
public void testChangeOwner_OwnerACLNotGranted ( ) throws java.lang.Exception { assertApproveFails ( user , createMyChange ( ) ) ; }
public void testContinueFromAfterNewline ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; iter.advance ( 4 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 2 , 2 ) , iter.advance ( 6 ) ) ; }
public boolean isCancelled ( ) { if ( cancelled ) { status = GitJobStatus.CANCELLED ; } return cancelled ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( isAttached ( ) ) { display ( result ) ; } }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; sshSession = new com.google.gerrit.acceptance.SshSession ( admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project1.get ( ) ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project2.get ( ) ) ; project3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p3" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project3.get ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.prettify.common.EditList.Hunk > getHunks ( ) { return new com.google.gerrit.prettify.common.EditList ( edits , getContext ( ) , a.size ( ) , b.size ( ) ) . getHunks ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
java.util.List < com.google.gerrit.extensions.common.ChangeInfo > query ( com.google.gerrit.extensions.api.changes.Changes.QueryParameter queryParameter ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public java.lang.String getEmailRegistrationToken ( ) { if ( ( emailToken ) == null ) { emailToken = tokenVerifier.encode ( user.getAccountId ( ) , addr ) ; } return emailToken ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { goChange ( ) ; }
private static boolean isBodyUTF8 ( final com.google.gwtjsonrpc.server.ActiveCall call ) { java.lang.String enc = call.httpRequest.getCharacterEncoding ( ) ; if ( enc == null ) { enc = "" ; } return enc.toLowerCase ( ) . contains ( JsonUtil.JSON_ENC.toLowerCase ( ) ) ; }
public static boolean isSystemGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return uuid.get ( ) . startsWith ( "global:" ) ; }
void evictSubgroupsOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.Unified ( baseId , id.getParentKey ( ) , id.get ( ) , line ) ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.change.GetChange.cache ( json.format ( rsrc ) ) ; }
boolean getReady ( java.lang.String indexName , int version ) { return cfg.getBoolean ( com.google.gerrit.lucene.GerritIndexStatus.SECTION , com.google.gerrit.lucene.GerritIndexStatus.indexDirName ( indexName , version ) , com.google.gerrit.lucene.GerritIndexStatus.KEY_READY , false ) ; }
public void parseDynamicBeans ( com.google.gerrit.util.cli.CmdLineParser clp ) { for ( java.util.Map.Entry < java.lang.String , com.google.gerrit.server.DynamicOptions.DynamicBean > e : beansByPlugin.entrySet ( ) ) { clp.parseWithPrefix ( e.getKey ( ) , e.getValue ( ) ) ; } }
protected void beforeTest ( org.junit.runner.Description description ) throws java.lang.Exception { locatePaths ( ) ; retrievePluginName ( ) ; buildPluginJar ( ) ; createTestSiteDirs ( ) ; copyJarToTestSite ( ) ; super . beforeTest ( description ) ; }
java.lang.String string ( final java.lang.String title , final java.lang.String name , final java.lang.String dv ) { return string ( title , name , dv , false ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; if ( ( header ) == null ) { onInitUI ( ) ; } }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config cfg = readConfig ( com.google.gerrit.server.account.WatchConfig.WATCH_CONFIG ) ; projectWatches = com.google.gerrit.server.account.WatchConfig.parse ( accountId , cfg , this ) ; }
public static com.google.gerrit.server.git.QueryList parse ( java.lang.String text , com.google.gerrit.server.git.ValidationError.Sink errors ) throws java.io.IOException { return new com.google.gerrit.server.git.QueryList ( com.google.gerrit.server.git.QueryList.parse ( text , com.google.gerrit.server.git.QueryList.FILE_NAME , errors ) ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
void setReviewed ( boolean r ) { reviewed.setValue ( r , true ) ; }
protected void addToString ( com.google.common.base.MoreObjects.ToStringHelper helper ) { helper.addValue ( psa ) ; }
public void sendError ( int sc , java.lang.String msg ) { status = sc ; }
public void execute ( ) { doBrowse ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { in.label ( id , v ) ; } }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > getPastAssignees ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPastAssignees.apply ( change ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get past assignees" , e ) ; } }
public void onNewProjectCreated ( com.google.gerrit.extensions.events.NewProjectCreatedListener.Event event ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , false ) ) { createProject ( uri , event.getHeadName ( ) ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.project.ProjectCache.class ) . toInstance ( projects ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) { return new com.google.gerrit.server.project.FileResource ( parent , id.get ( ) ) ; }
private void removeKeyHandlerRegs ( ) { for ( com.google.gwt.event.shared.HandlerRegistration h : handlers ) { h.removeHandler ( ) ; } handlers.clear ( ) ; }
void sideBySidePatchDetail ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.SideBySidePatchDetail > callback ) ;
void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
void format ( java.lang.StringBuilder b , java.util.Map < java.lang.String , java.lang.String > p ) { java.lang.String v = p.get ( name ) ; if ( v != null ) { b.append ( v ) ; } }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { onDown ( ) ; }
public void flushAll_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH_ALL ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
protected com.vmware.gerrit.owners.common.PathOwners createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.server.patch.PatchList patchList = StoredValues.PATCH_LIST.get ( engine ) ; org.eclipse.jgit.lib.Repository repository = StoredValues.REPOSITORY.get ( engine ) ; return new com.vmware.gerrit.owners.common.PathOwners ( resolver , db , repository , patchList ) ; }
public java.lang.String apply ( org.apache.lucene.index.IndexableField in ) { return in.stringValue ( ) ; }
com.google.gerrit.server.IdentifiedUser getUser ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( getControl ( ) . getUser ( ) ) ) ; }
private boolean canSkipValidation ( com.google.gerrit.server.config.PluginConfig config , java.lang.String validatorOp ) { return matchCriteria ( config , "skipValidation" , validatorOp , false ) ; }
private void incrementCurrentPatchSetFieldOnly ( com.google.gerrit.reviewdb.client.Change c ) { com.google.gerrit.testutil.TestChanges.incrementPatchSet ( c ) ; }
public boolean isNotify ( final com.google.gerrit.reviewdb.AccountProjectWatch.Type type ) { switch ( type ) { case NEW_CHANGES : return notifySubmittedChanges ; case SUBMITS : return notifyNewChanges ; case COMMENTS : return notifyAllComments ; } return false ; }
public boolean isShowAll ( ) { return all ; }
public static com.google.gerrit.client.rpc.RestApi editWithCommands ( int id ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameterTrue ( "download-commands" ) ; }
private boolean isGerritConfig ( javax.servlet.http.HttpServletRequest req ) throws java.io.IOException { java.io.File f = configFile ( req ) ; return gerrit_config_path.equals ( f.getCanonicalPath ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( ui ) ; bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
void set ( java.sql.PreparedStatement ps , int col , K value ) throws java.sql.SQLException { ps.setObject ( col , value ) ; }
protected void configure ( ) { install ( new com.google.inject.servlet.ServletModule ( ) { @ java.lang.Override protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) ; bind ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) . in ( com.google.inject.Scopes.SINGLETON ) ; serve ( "/" ) . with ( com.google.gerrit.server.http.HostPageServlet.class ) ; serve ( "/Gerrit" ) . with ( com.google.gerrit.server.http.LegacyGerritServlet.class ) ; serve ( "/cat/*" ) . with ( com.google.gerrit.server.http.CatServlet.class ) ; serve ( "/logout" ) . with ( com.google.gerrit.server.http.HttpLogoutServlet.class ) ; serve ( "/prettify/*" ) . with ( com.google.gerrit.server.http.PrettifyServlet.class ) ; serve ( "/signout" ) . with ( com.google.gerrit.server.http.HttpLogoutServlet.class ) ; serve ( "/ssh_info" ) . with ( com.google.gerrit.server.http.SshServlet.class ) ; serve ( "/static/*" ) . with ( com.google.gerrit.server.http.StaticServlet.class ) ; } } ) ; install ( new com.google.gerrit.server.rpc.UiRpcModule ( ) ) ; install ( new com.google.gerrit.server.config.GerritRequestModule ( ) ) ; bind ( com.google.gerrit.server.ssh.SshInfo.class ) . toProvider ( sshInfoProvider ) ; bind ( com.google.gerrit.client.data.GerritConfig.class ) . toProvider ( com.google.gerrit.server.config.GerritConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.account.AccountManager.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( java.net.SocketAddress.class ) . annotatedWith ( com.google.gerrit.server.RemotePeer.class ) . toProvider ( com.google.gerrit.server.http.HttpRemotePeerProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.http.WebSession.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.http.WebSessionManager.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . toProvider ( com.google.gerrit.server.http.HttpCurrentUserProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toProvider ( com.google.gerrit.server.http.HttpIdentifiedUserProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.ChangeMessage in ) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = in.getPatchSetId ( ) ; if ( psId == null ) { return true ; } return ( upToCurrent.apply ( psId ) ) && ( patchSets.containsKey ( psId ) ) ; }
public java.io.InputStream getResourceInputStream ( java.lang.String resourcePath ) throws java.io.IOException { return null ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.reviewdb.PatchSet.Id currentPatchSetId = patchSetsBlock.getCurrentPatchSet ( ) . getId ( ) ; com.google.gerrit.client.Gerrit.display ( ( "change,publish," + ( currentPatchSetId.toString ( ) ) ) , new com.google.gerrit.client.changes.PublishCommentScreen ( currentPatchSetId ) ) ; }
public int getSizeBasedOnAccuracy ( int statisticsAccuracy ) throws java.lang.IllegalArgumentException , java.lang.IllegalStateException , net.sf.ehcache.CacheException { return self ( ) . getSizeBasedOnAccuracy ( statisticsAccuracy ) ; }
private void assertProblems ( com.google.gerrit.gpg.testutil.TestKey tk , java.lang.String ... expected ) throws java.lang.Exception { if ( ( expected.length ) == 0 ) { throw new java.lang.IllegalArgumentException ( "Use assertNoProblems" ) ; } assertProblems ( tk.getPublicKey ( ) , expected ) ; }
public com.google.common.util.concurrent.CheckedFuture < com.google.gerrit.reviewdb.client.Change , com.google.gwtorm.server.OrmException > getAsync ( com.google.gerrit.reviewdb.client.Change.Id key ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
void onReplyDone ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReplyBox ( getOriginal ( ) , "Done" , false ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( action ) ; }
public java.lang.String toString ( ) { final org.apache.sshd.server.session.ServerSession session = context.session ; final java.lang.String who = session.getUsername ( ) ; return ( ( ( getFullCommandLine ( ) ) + " (" ) + who ) + ")" ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { result.init ( ) ; change = result ; }
public static com.google.gerrit.pgm.util.ConsoleUI getInstance ( ) { return com.google.gerrit.pgm.util.ConsoleUI.getInstance ( false ) ; }
public void testChangeOwner_OwnerACLGranted ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException , org.eclipse.jgit.errors.ConfigInvalidException { grantApproveToChangeOwner ( ) ; approve ( sessionOwner , createChange ( ) , HttpStatus.SC_OK ) ; }
private static final native void nativeInstall ( java.lang.String name , com.google.gwtjsonrpc.client.CallbackHandle < ? > imp ) ;
public void testNameEscaperEscapesSpacesWithPercentInsteadOfPlus ( ) throws java.lang.Exception { assertEquals ( "foo+bar" , com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo+bar" ) ) ; assertEquals ( "foo%20bar" , com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo bar" ) ) ; assertEquals ( "foo%2520bar" , com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo%20bar" ) ) ; }
java.lang.String guessName ( ) { return com.google.gerrit.client.api.PluginName.PluginNameMoz.guessName ( com.google.gerrit.client.api.PluginName.makeException ( ) ) ; }
public void testChangeOwner_NotOwnerACLGranted ( ) throws java.lang.Exception { grantApproveToChangeOwner ( ) ; assertApproveFails ( user2 , createMyChange ( ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void get ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.GET , cb ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHRepository forkTo ( com.googlesrouce.gerrit.plugins.github.git.GHOrganization org ) throws java.io.IOException { return ghRepository.forkTo ( org ) ; }
public final native net.codemirror.lib.CodeMirror.LineHandle activeLine ( ) ;
static com.google.gerrit.server.notedb.RevisionNoteMap emptyMap ( ) { return new com.google.gerrit.server.notedb.RevisionNoteMap ( org.eclipse.jgit.notes.NoteMap.newEmptyMap ( ) , com.google.common.collect.ImmutableMap.< com.google.gerrit.reviewdb.client.RevId , com.google.gerrit.server.notedb.RevisionNote > of ( ) ) ; }
int getCookieAge ( ) { return ( ( int ) ( ( ( refreshCookieAt ) - ( java.lang.System.currentTimeMillis ( ) ) ) / 1000L ) ) ; }
public com.google.gerrit.extensions.common.CommitInfo apply ( com.google.gerrit.server.project.CommitResource rsrc ) { return com.google.gerrit.server.project.GetCommit.toCommitInfo ( rsrc.getCommit ( ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < com.google.gerrit.reviewdb.client.PatchSet , com.google.gwtorm.server.OrmException > getAsync ( com.google.gerrit.reviewdb.client.PatchSet.Id key ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHHook createWebHook ( java.net.URL url , java.util.Collection < com.googlesrouce.gerrit.plugins.github.git.GHEvent > events ) throws java.io.IOException { return ghRepository.createWebHook ( url , events ) ; }
private java.lang.String group ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput ( ) ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public void visit ( org.pegdown.ast.ParaNode node ) { wrapChildren ( "p" , node ) ; }
public com.google.gerrit.extensions.common.GroupInfo format ( com.google.gerrit.server.group.GroupResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo info = init ( rsrc.getGroup ( ) ) ; initMembersAndIncludes ( rsrc , info ) ; return info ; }
protected void configure ( ) { install ( new com.googlesource.gerrit.plugins.download.command.DownloadCommandsModule ( ) ) ; install ( new com.googlesource.gerrit.plugins.download.scheme.SchemeModule ( ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gwt.user.client.History.newItem ( Link.SETTINGS_CONTACT , true ) ; }
public void setNotify ( com.google.gerrit.extensions.api.changes.NotifyHandling notify ) { this . notify = notify ; }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentlink" , getCommentLinkName ( ) , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
private com.google.gerrit.sshd.commands.QueryShell.Factory shellFactory ( ) { return dbInjector.createChildInjector ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( com.google.gerrit.sshd.commands.QueryShell.Factory.class ) ; } } ) . getInstance ( com.google.gerrit.sshd.commands.QueryShell.Factory.class ) ; }
public com.google.gerrit.solr.SolrChangeIndex getChangeIndex ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.IndexCollection indexes , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.solr.SolrChangeIndex ( cfg , fillArgs , sitePaths , indexes , com.google.gerrit.server.index.ChangeSchemas.getLatestRelease ( ) , base ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHRef [ ] getRefs ( java.lang.String refType ) throws java.io.IOException { return ghRepository.getRefs ( refType ) ; }
java.lang.String get ( java.lang.String section , java.lang.String subsection , java.lang.String name ) ;
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.project.ProjectResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list ; }
void onAllNodesReplicated ( int totalPushTasksCount ) { }
boolean match ( java.lang.String refName ) { return pattern ( ) . matcher ( refName ) . find ( ) ; }
public boolean isGitBasichAuth ( ) { return gitBasicAuth ; }
public void commit ( ) throws com.google.gwtorm.server.OrmException { delegate.commit ( ) ; }
private java.util.List < com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope > scopesForKey ( java.lang.String baseScopeKey ) { return com.google.common.base.Objects.firstNonNull ( config.scopes.get ( baseScopeKey ) , com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.DEFAULT_SCOPES ) ; }
public boolean canSeeMember ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( ( ( user ) instanceof com.google.gerrit.server.IdentifiedUser ) && ( ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) . equals ( id ) ) ) { return true ; } return canSeeMembers ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo prefs ) { com.google.gerrit.client.Gerrit.setUserPreferences ( prefs ) ; }
public void setBranches ( java.util.List < com.google.gerrit.reviewdb.Branch > branches ) { this . branches = branches ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , remotePeerProvider , dbProvider , id , null ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) ;
private com.google.gerrit.common.data.GroupReference getMyGroup ( ) { com.google.gerrit.common.data.GroupDescription.Basic g = groupBackend.get ( AccountGroup.UUID.parse ( ( "user:" + ( username ) ) ) ) ; return config.resolve ( com.google.gerrit.common.data.GroupReference.forGroup ( g ) ) ; }
public java.lang.String getServletPath ( ) { return ( ( javax.servlet.http.HttpServletRequest ) ( getRequest ( ) ) ) . getRequestURI ( ) ; }
com.google.gerrit.server.git.receive.AsyncReceiveCommits create ( com.google.gerrit.server.project.ProjectControl projectControl , org.eclipse.jgit.lib.Repository repository , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.receive.MessageSender messageSender , com.google.common.collect.SetMultimap < com.google.gerrit.server.notedb.ReviewerStateInternal , com.google.gerrit.reviewdb.client.Account.Id > extraReviewers ) ;
com.google.gerrit.acceptance.PushOneCommit create ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.PersonIdent i , org.eclipse.jgit.api.Git git , @ com.google.inject.assistedinject.Assisted ( value = "subject" ) java.lang.String subject , @ com.google.inject.assistedinject.Assisted ( value = "fileName" ) java.lang.String fileName , @ com.google.inject.assistedinject.Assisted ( value = "content" ) java.lang.String content , @ com.google.inject.assistedinject.Assisted ( value = "changeId" ) java.lang.String changeId ) ;
public void onSuccess ( com.google.gerrit.client.reviewdb.Account result ) { com.google.gwt.core.client.GWT.log ( ( "yay, i am " + ( result.getPreferredEmail ( ) ) ) , null ) ; com.google.gwt.core.client.GWT.log ( ( "created on " + ( result.getRegisteredOn ( ) ) ) , null ) ; }
public static void grant ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.common.data.AccessSection section , java.lang.String permission , com.google.gerrit.common.data.GroupReference ... groupList ) { com.google.gerrit.server.schema.AclUtil.grant ( config , section , permission , false , groupList ) ; }
public final com.google.common.collect.ImmutableSortedMap < java.lang.Integer , com.google.gerrit.server.index.Schema < V > > getSchemas ( ) { return schemas ; }
private static void addMenuLink ( com.google.gerrit.client.ui.LinkMenuBar m , com.google.gerrit.client.extensions.TopMenuItem item ) { if ( item.getUrl ( ) . contains ( com.google.gerrit.client.Gerrit.PROJECT_NAME_MENU_VAR ) ) { com.google.gerrit.client.Gerrit.addProjectLink ( m , item ) ; } else { com.google.gerrit.client.Gerrit.addExtensionLink ( m , item ) ; } }
public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key.toPatchListKey ( ) , project ) ; return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary ( patchList ) ; }
com.google.gerrit.server.notedb.ChangeDraftUpdate createDraftUpdateIfNull ( ) { if ( ( draftUpdate ) == null ) { draftUpdate = draftUpdateFactory.create ( ctl , when ) ; } return draftUpdate ; }
public final com.google.gerrit.extensions.common.SubmitType submit_type ( ) { return com.google.gerrit.extensions.common.SubmitType.valueOf ( submit_typeRaw ( ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byExactTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( new com.google.gerrit.server.query.change.ExactTopicPredicate ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , topic ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public void setIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
java.lang.String globalRulesFileName ( ) { return java.lang.String.format ( com.googlesource.gerrit.plugins.its.base.ItsHookModule.CONFIG_FILE_NAME , "" ) ; }
public void testParse_Email2 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "a@b" ) ; org.junit.Assert.assertNull ( a.name ) ; org.junit.Assert.assertEquals ( "a@b" , a.email ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.config.ConfigResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; }
public void setUpMocks ( ) { id = Change.Id.parse ( java.lang.Integer.toString ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID ) ) ; indexEventHandler = new com.ericsson.gerrit.plugins.syncindex.IndexEventHandler ( com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) , com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.PLUGIN_NAME , restSessionMock ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNewRight ( ) ; }
public static void get ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String dashboardId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + ( com.google.gerrit.client.dashboards.DashboardList.encodeDashboardId ( dashboardId ) ) ) ) . get ( callback ) ; }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > release ( com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > ... fields ) { return com.google.gerrit.server.index.ChangeSchemas.release ( java.util.Arrays.asList ( fields ) ) ; }
public AccountGroup.Id getAdminGroupId ( ) { return sConfig.adminGroupId ; }
public net.sf.ehcache.statistics.LiveCacheStatistics getLiveCacheStatistics ( ) throws java.lang.IllegalStateException { return self ( ) . getLiveCacheStatistics ( ) ; }
private void postLoad ( ) { if ( ( haveAccount ) && ( haveEmails ) ) { updateEmailList ( ) ; registerNewEmail.setEnabled ( true ) ; } display ( ) ; }
public void resetToDefaults ( ) { defaultContext = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.changes.ChangeList.next ( query , start , pageSize , loadCallback ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.acceptance.AccountCreator.class ) ; }
public com.google.common.collect.ImmutableCollection < com.google.gerrit.server.query.change.ChangeData > changes ( ) { return changeData ; }
public void insertComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { insertDraftComment ( comment ) ; } else { insertPublishedComment ( comment ) ; } }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.server.notedb.rebuild.OnlineNoteDbMigrator.class ) ; }
private void doAllPushTasksCompleted ( ) { pushResultProcessing.onAllNodesReplicated ( totalPushTasksCount ) ; allPushTasksFinished.countDown ( ) ; }
public void upsert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj , false ) ; } }
public java.lang.Iterable < com.google.gerrit.server.project.ProjectState > parents ( ) { return com.google.common.collect.Iterables.skip ( tree ( ) , 1 ) ; }
public static com.google.gerrit.client.rpc.RestApi editWithCommands ( int id ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "download-commands" , true ) ; }
private static java.lang.String addDeletedKey ( java.util.List < com.google.common.base.Optional < com.google.gerrit.reviewdb.client.AccountSshKey > > keys ) { keys.add ( com.google.common.base.Optional.< com.google.gerrit.reviewdb.client.AccountSshKey > absent ( ) ) ; return ( AuthorizedKeys.DELETED_KEY_COMMENT ) + "\n" ; }
private static void setChangeTable ( org.eclipse.jgit.lib.Config cfg , java.util.List < java.lang.String > changeTable ) { if ( changeTable != null ) { com.google.gerrit.server.account.PreferencesConfig.unsetSection ( cfg , UserConfigSections.CHANGE_TABLE ) ; cfg.setStringList ( UserConfigSections.CHANGE_TABLE , null , com.google.gerrit.server.git.UserConfigSections.CHANGE_TABLE_COLUMN , changeTable ) ; } }
public void onSuccess ( com.google.gerrit.common.data.ListBranchesResult result ) { display ( result.getBranches ( ) ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.SubmittedTogetherInfo info = apply ( resource , options ) ; if ( options.isEmpty ( ) ) { return info.changes ; } return info ; }
private void assertMigratedCleanly ( com.google.gerrit.server.group.db.GroupBundle noteDbBundle , com.google.gerrit.server.group.db.GroupBundle expectedReviewDbBundle ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.group.db.GroupBundle.compare ( expectedReviewDbBundle , noteDbBundle ) ) . isEmpty ( ) ; }
public void indexerThrowsIOExceptionTryingToIndexChange ( ) throws java.lang.Exception { setupPostMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_ORM_EXCEPTION , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.THROW_IO_EXCEPTION ) ; verifyPost ( ) ; }
public void deleteGroups ( java.lang.String ... groups ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteGroups.apply ( rsrc , AddIncludedGroups.Input.fromGroups ( java.util.Arrays.asList ( groups ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete group members" , e ) ; } }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.DELETE , cb ) ; }
com.google.gerrit.server.git.receive.AsyncReceiveCommits create ( com.google.gerrit.server.project.ProjectControl projectControl , org.eclipse.jgit.lib.Repository repository ) ;
private void createEditCommand ( ) { cmd = new org.eclipse.jgit.transport.ReceiveCommand ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) , newCommit , com.google.gerrit.server.edit.ChangeEditUtil.editRefName ( currentUser.getAccountId ( ) , change.getId ( ) , newPatchSet.getId ( ) ) ) ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; install ( getIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; }
private static void save ( java.lang.StringBuilder b , javax.servlet.http.HttpServletRequest r , java.lang.String n ) { final java.lang.String v = r.getParameter ( n ) ; if ( v != null ) { com.google.gerrit.server.OpenIdLoginServlet.append ( b , n , v ) ; } }
long startsWith ( ) default 0 ;
public void blockRule_ParentBlocksChild ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/tags/*" ) ; com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/tags/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/tags/V10" , u ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount admin = accounts.admin ( ) ; adminSession = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; userSession = new com.google.gerrit.acceptance.RestSession ( server , user ) ; com.google.gerrit.acceptance.git.GitUtil.initSsh ( admin ) ; sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; project = "p" ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project , null , true ) ; }
public void testRightEventAndNotForwarded ( ) throws java.lang.Exception { setUpMocks ( true ) ; eventHandler.onEvent ( event ) ; org.mockito.Mockito.verify ( restSession ) . send ( event ) ; }
public com.google.gerrit.httpd.raw.Label polygerritComponents ( ) { return new com.google.gerrit.httpd.raw.Label ( "polygerrit-ui" , "polygerrit_components.bower_components.zip" ) ; }
T get ( javax.servlet.http.HttpServletRequest req ) ;
public void setAccount ( com.google.gerrit.reviewdb.client.Account account ) { checkLoaded ( ) ; this . account = com.google.common.base.Preconditions.checkNotNull ( account ) ; this . registeredOn = account.getRegisteredOn ( ) ; }
public static void loadJARs ( java.nio.file.Path ... jars ) { com.google.gerrit.common.IoUtil.loadJARs ( java.util.Arrays.asList ( jars ) ) ; }
public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { if ( ( event.getNativeKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE ) ) { suggestBox.setText ( "" ) ; com.google.gwt.event.logical.shared.CloseEvent.fire ( this , this ) ; } }
public static void add ( com.google.gerrit.client.changes.ChangeInfo info ) { com.google.gerrit.client.projects.ConfigInfoCache.instance.changeToProject.put ( info.legacy_id ( ) . get ( ) , info.project ( ) ) ; }
private void addFilter ( final com.google.gerrit.httpd.AllRequestFilter filter ) { filters.add ( filter ) ; }
com.google.gwtexpui.globalkey.client.KeyCommandSet getKeysComment ( ) { return keysComment ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.reviewdb.client.Change.Id id ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.server.index.ChangeField.LEGACY_ID2.getName ( ) , id.get ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , remotePeerProvider , dbProvider , id , caller ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.Branch > result ) { addBranch.setEnabled ( true ) ; nameTxtBox.setText ( "" ) ; irevTxtBox.setText ( "" ) ; branches.display ( result ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , null , db , id , null ) ; }
public void run ( ) { getSkipManager ( ) . removeAll ( ) ; getSkipManager ( ) . render ( context , diff ) ; updateRenderEntireFile ( ) ; }
void onExpandAllComments ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.expandAllComments ( e.getValue ( ) ) ; view.setExpandAllComments ( prefs.expandAllComments ( ) ) ; }
public java.io.InputStream getInputStream ( com.google.gerrit.server.plugins.PluginEntry entry ) throws java.io.IOException { return new java.io.FileInputStream ( getResourceFile ( entry.getName ( ) ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.AccountSshKey > result ) { keys.display ( result ) ; keys.finishDisplay ( true ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getKnownGroups ( ) { java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > g = com.google.common.collect.Sets.newHashSet ( groups ) ; g.retainAll ( projectCache.guessRelevantGroupUUIDs ( ) ) ; return g ; }
public boolean canAddRefs ( ) { return ( canPerformOnAnyRef ( ApprovalCategory.PUSH_HEAD , ApprovalCategory.PUSH_HEAD_CREATE ) ) || ( isOwnerAnyRef ( ) ) ; }
com.google.gerrit.server.project.SubmitRuleEvaluator create ( com.google.gerrit.server.query.change.ChangeData cd ) ;
public static java.lang.Iterable < java.lang.Object [ ] > configs ( ) { org.eclipse.jgit.lib.Config defaultConfig = new com.google.gerrit.acceptance.AbstractDaemonTest.NamedConfig ( "default" ) ; return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { defaultConfig } } ) ; }
private void setAuthorNameText ( com.google.gerrit.client.account.AccountInfo author , java.lang.String nameText ) { avatar = new com.google.gerrit.client.AvatarImage ( author , 26 ) ; name.setInnerText ( nameText ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.NativeMap < com.googlesource.gerrit.plugins.serviceuser.client.ServiceUserInfo > info ) { display ( info ) ; }
java.lang.String patchSkipRegion ( @ com.google.gerrit.client.patches.PluralCount int lineCnt ) ;
public void onEvent ( final com.google.gerrit.server.events.Event event ) { offer ( event ) ; }
void onAddAccountsToGroup ( com.google.gerrit.reviewdb.client.Account.Id actor , java.util.Collection < com.google.gerrit.reviewdb.client.AccountGroupMember > added ) ;
protected void run ( ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.UnloggedFailure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; }
public static com.google.gerrit.server.mail.MailUtil.MailRecipients getRecipientsFromReviewers ( com.google.common.collect.Multimap < com.google.gerrit.server.notedb.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ) { com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients ( ) ; recipients.reviewers.addAll ( reviewers.get ( ReviewerState.REVIEWER ) ) ; recipients.cc.addAll ( reviewers.get ( ReviewerState.CC ) ) ; return recipients ; }
public static void display ( final java.lang.String historyToken , final boolean go ) { com.google.gwt.user.client.History.newItem ( historyToken , go ) ; if ( ( ! go ) && ( ( com.google.gerrit.client.Gerrit.historyHooks ) != null ) ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( historyToken ) ; } }
private com.google.gerrit.server.config.GetServerInfo.SuggestInfo getSuggestInfo ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.server.config.GetServerInfo.SuggestInfo info = new com.google.gerrit.server.config.GetServerInfo.SuggestInfo ( ) ; info.from = cfg.getInt ( "suggest" , "from" , 0 ) ; return info ; }
public com.google.gerrit.server.group.MembersCollection.MemberInfo apply ( com.google.gerrit.server.group.MemberResource resource ) { return com.google.gerrit.server.group.MembersCollection.parse ( resource.getMember ( ) . getAccount ( ) ) ; }
protected com.google.gerrit.acceptance.GerritServer startServer ( org.eclipse.jgit.lib.Config cfg , boolean memory ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( cfg , memory ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.reviewdb.AccountGroup ... memberOf ) { com.google.gerrit.reviewdb.ReviewDb db = null ; com.google.gerrit.server.account.GroupCache groupCache = null ; java.lang.String canonicalWebUrl = "http://localhost" ; com.google.gerrit.server.project.RefControl.Factory refControlFactory = new com.google.gerrit.server.project.RefControl.Factory ( ) { @ java.lang.Override public com.google.gerrit.server.project.RefControl create ( final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String ref ) { return new com.google.gerrit.server.project.RefControl ( projectControl , ref ) ; } } ; return new com.google.gerrit.server.project.ProjectControl ( java.util.Collections.< com.google.gerrit.reviewdb.AccountGroup.UUID > emptySet ( ) , java.util.Collections.< com.google.gerrit.reviewdb.AccountGroup.UUID > emptySet ( ) , db , groupCache , canonicalWebUrl , refControlFactory , new com.google.gerrit.server.project.RefControlTest.MockUser ( memberOf ) , newProjectState ( ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm xor ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) ^ ( t.intValue ( ) ) ) ) ; }
public static com.google.gerrit.client.rpc.RestApi edit ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit" ) ; }
public void operationComplete ( org.apache.mina.core.future.IoFuture future ) { final com.google.gerrit.sshd.SshScopes.Context old = SshScopes.current.get ( ) ; try { SshScopes.current.set ( ctx ) ; log.onLogout ( ) ; } finally { SshScopes.current.set ( old ) ; } }
public static com.google.gerrit.reviewdb.server.ReviewDb unwrapDb ( com.google.gerrit.reviewdb.server.ReviewDb db ) { if ( db instanceof com.google.gerrit.reviewdb.server.DisabledChangesReviewDbWrapper ) { return ( ( com.google.gerrit.reviewdb.server.DisabledChangesReviewDbWrapper ) ( db ) ) . unsafeGetDelegate ( ) ; } return db ; }
private final native void setLine ( int line ) ;
public com.google.gerrit.server.git.BatchUpdate addOp ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.server.git.BatchUpdate.Op op ) { ops.put ( id , op ) ; return this ; }
private static native com.google.gerrit.client.account.AccountApi.GpgKeysInput createAdd ( com.google.gwt.core.client.JsArrayString keys ) ;
public void onFailure ( java.lang.Throwable caught ) { }
public com.google.gerrit.extensions.api.projects.ProjectApi.ListBranchesRequest withRegex ( java.lang.String regex ) { this . regex = regex ; return this ; }
public com.google.gerrit.server.query.change.ListChanges addQuery ( java.lang.String query ) { if ( ( queries ) == null ) { queries = com.google.common.collect.Lists.newArrayList ( ) ; } queries.add ( query ) ; return this ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( id , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public boolean canUpdate ( ) { if ( ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) && ( ! ( getProjectControl ( ) . isOwner ( ) ) ) ) { return false ; } return canPerform ( Permission.PUSH ) ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; factory ( NoteDbUpdateManager.Factory.class ) ; }
public boolean containsHeader ( java.lang.String name ) { return ! ( headers.get ( name ) . isEmpty ( ) ) ; }
void onRemoveDraftBox ( com.google.gerrit.client.diff.DraftBox box ) { getPanelFromSide ( box.getSide ( ) ) . onRemoveDraftBox ( box ) ; }
protected void closePopup ( ) { popup.hide ( ) ; }
public void testGcNotAllowed_Forbidden ( ) throws java.lang.Exception { userSession.post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . assertForbidden ( ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet ( java.lang.String changeId ) throws com.google.gwtorm.server.OrmException { return db.patchSets ( ) . get ( com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( changeId ) ) ) . currentPatchSetId ( ) ) ; }
public com.google.gwtorm.jdbc.TestJdbcAccess.Data get ( com.google.gwtorm.jdbc.TestJdbcAccess.Data.DataKey key ) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString user ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . username ( user.asString ( ) ) ; refreshHttpPassword ( ) ; }
public void setSearchIndex ( com.google.gerrit.server.index.ChangeIndex index ) { searchIndex.set ( index ) ; }
public com.google.gerrit.server.CurrentUser get ( ) { return session.get ( ) . getCurrentUser ( ) ; }
com.google.gerrit.server.IdentifiedUser provideCurrentUser ( com.google.gerrit.server.CurrentUser user ) { if ( user.isIdentifiedUser ( ) ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) ; } throw new com.google.inject.ProvisionException ( com.google.gerrit.common.errors.NotSignedInException.MESSAGE , new com.google.gerrit.common.errors.NotSignedInException ( ) ) ; }
public final native void setScrollSetAt ( double when ) ;
public final native net.codemirror.lib.CodeMirror.FromTo getViewport ( ) ;
protected void assertBadQuery ( com.google.gerrit.extensions.api.changes.Changes.QueryRequest query ) throws java.lang.Exception { try { query.get ( ) ; org.junit.Assert.fail ( ( "expected BadRequestException for query: " + query ) ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) { } }
java.util.Optional < com.google.gerrit.server.group.InternalGroup > getInternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid ) ;
public long getMinValue ( ) { return com.google.gerrit.server.ChangeUtil.parseSortKey ( getValue ( ) ) ; }
public java.util.concurrent.Callable < ? > indexTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return new java.util.concurrent.Callable < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void call ( ) { return null ; } } ; }
protected void preDisplay ( final com.google.gerrit.common.data.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; this . preDisplay ( result , this ) ; }
java.lang.String keyReload ( ) ;
public void beforeTest ( ) throws java.lang.Exception { if ( com.google.gerrit.testutil.GerritServerTests.isNoteDbTestEnabled ( ) ) { com.google.gerrit.server.notedb.ConfigNotesMigration.setAllEnabledConfig ( config ) ; } }
public void addListener ( com.google.gerrit.client.rpc.CallbackGroup group ) { addListener ( group.add ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > uuid ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.UUID , GroupQueryBuilder.FIELD_UUID , uuid.get ( ) ) ; }
public org.eclipse.jgit.lib.Repository openRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException { return openRepository ( basePath , name ) ; }
com.google.gerrit.server.git.EmailMerge create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id submitter , com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) ;
public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer ) . cc ( sc.ccerByEmail ) . notTo ( sc.owner , sc.starrer ) ; } ) ; }
public void stop ( ) { refreshThread.stop = true ; try { refreshThread.join ( ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn ( "error stopping refresh thread" , e ) ; } openIndex.close ( ) ; closedIndex.close ( ) ; }
public com.google.gerrit.server.events.TrackingIdAttribute asTrackingIdAttribute ( com.google.gerrit.reviewdb.TrackingId id ) { com.google.gerrit.server.events.TrackingIdAttribute a = new com.google.gerrit.server.events.TrackingIdAttribute ( ) ; a.system = id.getSystem ( ) ; a.id = id.getTrackingId ( ) ; return a ; }
void replicate ( java.lang.String ref ) { if ( replication.isEnabled ( ) ) { replication.scheduleUpdate ( projectName , ref ) ; } }
public synchronized com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return byId.get ( accountId ) ; }
java.lang.String getId ( ) { return comment.getKey ( ) . get ( ) ; }
public java.lang.String getLocalUser ( ) { if ( getExternalId ( ) . startsWith ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT ) ) { return getExternalId ( ) . substring ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT.length ( ) ) ; } return null ; }
public static boolean isCommentUrl ( java.lang.String str , java.lang.String changeUrl , com.google.gerrit.reviewdb.client.Comment comment ) { return ( str.equals ( ( ( ( com.google.gerrit.server.mail.receive.ParserUtil.filePath ( changeUrl , comment ) ) + "@" ) + ( comment.lineNbr ) ) ) ) || ( str.equals ( ( ( ( com.google.gerrit.server.mail.receive.ParserUtil.filePath ( changeUrl , comment ) ) + "@a" ) + ( comment.lineNbr ) ) ) ) ; }
protected void configure ( ) { install ( new com.google.gerrit.server.index.IndexModule ( 1 ) ) ; bind ( com.google.gerrit.server.index.IndexConfig.class ) . toInstance ( com.google.gerrit.server.index.IndexConfig.createDefault ( ) ) ; bind ( com.google.gerrit.server.index.change.ChangeIndex.class ) . toInstance ( new com.google.gerrit.server.index.change.DummyChangeIndex ( ) ) ; }
public boolean enableDefaultUi ( ) { return ! ( headless ) ; }
private java.lang.String getComment ( com.google.gerrit.server.events.ChangeAttribute change , com.google.gerrit.server.events.ChangeEvent hook , com.google.gerrit.server.events.AccountAttribute who , java.lang.String what ) { return ( ( ( ( ( getCommentPrefix ( change ) ) + "change " ) + what ) + " [by " ) + who ) + "]" ; }
public static com.google.common.cache.CacheBuilder < java.lang.Object , java.lang.Object > newBuilder ( ) { return com.google.common.cache.CacheBuilder.newBuilder ( ) . maximumWeight ( ( 10 << 10 ) ) ; }
public javax.naming.directory.DirContext run ( ) throws javax.naming.NamingException { return new javax.naming.directory.InitialDirContext ( env ) ; }
public synchronized com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.server.account.AccountState state = getIfPresent ( accountId ) ; if ( state != null ) { return state ; } return com.google.gerrit.testutil.FakeAccountCache.newState ( new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.server.util.TimeUtil.nowTs ( ) ) ) ; }
private static void addLink ( final com.google.gerrit.client.ui.LinkMenuBar m , final java.lang.String text , final java.lang.String historyToken ) { m.addItem ( new com.google.gerrit.client.ui.LinkMenuItem ( text , historyToken ) ) ; }
private static int version ( com.google.gerrit.server.index.Index < ? , ? > i ) { return i.getSchema ( ) . getVersion ( ) ; }
public static void doSignOut ( ) { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.OPENIDUSER_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenus ( ) ; }
public static org.eclipse.jgit.internal.storage.dfs.InMemoryRepository newRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.testutil.InMemoryRepositoryManager.Repo ( name ) ; }
protected void configureServlets ( ) { serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.ldap.LoginRedirectServlet.class ) ; install ( new com.google.gerrit.httpd.rpc.RpcServletModule ( com.google.gerrit.httpd.rpc.UiRpcModule.PREFIX ) { @ java.lang.Override protected void configureServlets ( ) { rpc ( com.google.gerrit.httpd.auth.ldap.UserPassAuthServiceImpl.class ) ; } } ) ; }
com.googlesource.gerrit.plugins.reviewersbyblame.ReviewersByBlame create ( org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , int maxReviewers , org.eclipse.jgit.lib.Repository repo ) ;
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.DELETE , cb ) ; }
public void testQueueShouldNotBeEmptyWhenOneEventSubmitted ( ) { asyncListener.onChangeEvent ( event ) ; org.junit.Assert.assertFalse ( asyncListener.getQueue ( ) . isEmpty ( ) ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > or ( com.google.gerrit.server.query.Predicate < T > ... that ) { if ( ( that.length ) == 1 ) { return that [ 0 ] ; } return new com.google.gerrit.server.query.OrPredicate ( that ) ; }
public com.google.gerrit.extensions.common.ProjectInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc ) { return json.format ( rsrc.getControl ( ) ) ; }
public void all ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testing.IndexVersions.ALL ) ) . containsExactlyElementsIn ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getSchemas ( ) . keySet ( ) ) . inOrder ( ) ; }
void setOpen ( boolean open ) { resizePaddingWidget ( ) ; setRangeHighlight ( open ) ; getCm ( ) . focus ( ) ; }
private void expandAll ( ) { expandSideAll ( ) ; otherBar.expandSideAll ( ) ; manager.remove ( this , otherBar ) ; }
java.lang.String getProjectUrl ( java.lang.String projectName ) ;
public void start ( ) { updateConfiguration ( ) ; }
public abstract void execute ( ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException ;
public java.lang.String getRefName ( ) { return ( org.eclipse.jgit.lib.Constants.R_HEADS ) + ( change.branch ) ; }
public void execute ( ) { showError ( ) ; enable ( true ) ; providerId.selectAll ( ) ; providerId.setFocus ( true ) ; }
public com.google.gerrit.extensions.common.CommentInfo apply ( com.google.gerrit.server.change.CommentResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.get ( ) . format ( rsrc.getComment ( ) ) ; }
void addFileComment ( com.google.gerrit.client.diff.CommentBox box ) { boxes.add ( box ) ; body.add ( box ) ; table.updateFileCommentVisibility ( false ) ; }
public void evict ( com.google.gerrit.reviewdb.AccountGroup group ) ;
public static java.lang.String escape ( final java.lang.String in ) { return com.google.gerrit.client.ui.DomUtil.INSTANCE.escape ( in ) ; }
public com.google.gerrit.extensions.client.DiffPreferencesInfo apply ( com.google.gerrit.server.config.ConfigResource configResource ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.restapi.config.GetDiffPreferences.readFromGit ( gitManager , allUsersName , null ) ; }
public void setTag ( final java.lang.String tagName ) { this . tagName = tagName ; }
public com.google.gerrit.reviewdb.client.AccountSshKey getKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , int seq ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return read ( accountId ) . getKey ( seq ) ; }
private int getMyTotalHeight ( ) { int total = 0 ; for ( com.google.gerrit.client.diff.CommentBox box : comments ) { total += ( box.getOffsetHeight ( ) ) + 5 ; } return total ; }
public com.google.gerrit.server.query.QueryResult < T > query ( com.google.gerrit.server.query.Predicate < T > query ) throws com.google.gerrit.index.query.QueryParseException , com.google.gwtorm.server.OrmException { return query ( com.google.common.collect.ImmutableList.of ( query ) ) . get ( 0 ) ; }
public void options ( com.google.gerrit.extensions.common.GroupOptionsInfo options ) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply ( rsrc , options ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put group options" , e ) ; } }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 ) ; }
public static com.google.gerrit.server.config.PluginConfig getEmptyPluginConfig ( ) { return new com.google.gerrit.server.config.PluginConfig ( "" , new org.eclipse.jgit.lib.Config ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup ( ) ; if ( group == null ) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException ( ) ; } return com.google.common.base.Strings.nullToEmpty ( group.getDescription ( ) ) ; }
private void injectMode ( java.lang.String type , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > cb ) { new net.codemirror.lib.ModeInjector ( ) . add ( type ) . inject ( cb ) ; }
public java.util.List < com.google.gerrit.extensions.common.EmailInfo > getEmails ( ) { return getEmails.apply ( account ) ; }
public com.google.gerrit.server.CurrentUser runAs ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id , @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , caller ) ; }
boolean visibleForReplication ( ) { return ( ( getCurrentUser ( ) ) instanceof com.google.gerrit.server.ReplicationUser ) && ( ( ( com.google.gerrit.server.ReplicationUser ) ( getCurrentUser ( ) ) ) . isEverythingVisible ( ) ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.client.admin.GroupAdminServiceImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) . getDatabase ( ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > isNotActive ( ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ACTIVE , "0" ) ; }
public void onFailure ( java.lang.Throwable caught ) { enable ( true ) ; super . onFailure ( caught ) ; }
public boolean isVisible ( com.google.gerrit.reviewdb.client.Account account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( reviewDbProvider , account.getId ( ) ) ; return changeControl.forUser ( who ) . isVisible ( reviewDbProvider.get ( ) ) ; }
protected void configureServlets ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.WebUiPlugin.class ) . toInstance ( new com.google.gerrit.extensions.webui.GwtPlugin ( "imagare" ) ) ; }
public final native net.codemirror.lib.LineCharacter getFrom ( ) ;
public static com.google.gerrit.server.group.db.InternalGroupUpdate.Builder builder ( ) { return new com.google.gerrit.server.group.db.AutoValue_InternalGroupUpdate.Builder ( ) ; }
public com.google.gerrit.extensions.api.projects.Projects.ListParameter withPrefix ( java.lang.String prefix ) { this . prefix = prefix ; return this ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; }
public boolean isAllowed ( final com.google.gerrit.reviewdb.ApprovalCategory.Id id ) { final java.util.Set < com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > s = getAllowed ( id ) ; return ( s != null ) && ( ! ( s.isEmpty ( ) ) ) ; }
private static boolean isMaybeHTML ( java.lang.String text ) { return com.google.gerrit.httpd.restapi.RestApiServlet.IS_HTML.matcher ( text ) . find ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.common.data.PatchScriptSettings > event ) { update ( event.getValue ( ) ) ; }
public Project.SubmitType getSubmitType ( ) { return submitType ; }
public void onFailure ( final java.lang.Throwable caught ) { enableUI ( true ) ; if ( caught instanceof com.google.gerrit.common.errors.InvalidUserNameException ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidUserName ( ) ) . center ( ) ; } else { super . onFailure ( caught ) ; } }
private boolean isVisible ( final com.google.gerrit.reviewdb.client.Project.NameKey project , com.googlesource.gerrit.plugins.replication.ReplicationState ... states ) { HEAD ( 398143 ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) . getDatabase ( ) ) ; }
public void updateRepo ( com.google.gerrit.server.update.BatchUpdate.RepoContext ctx ) throws java.lang.Exception { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( masterCommit.getId ( ) , branchCommit.getId ( ) , "refs/heads/master" ) ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > topic ( java.lang.String topic ) { return new com.google.gerrit.server.query.change.TopicPredicate ( topic ) ; }
private com.google.gerrit.extensions.auth.oauth.OAuthUserInfo getAsOAuthUserInfo ( com.googlesource.gerrit.plugins.cfoauth.AccessToken accessToken , java.lang.String displayName ) { return new com.google.gerrit.extensions.auth.oauth.OAuthUserInfo ( accessToken.getExternalId ( ) , accessToken.getUserName ( ) , accessToken.getEmailAddress ( ) , displayName , null ) ; }
public void myAccount ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.reviewdb.client.Account > callback ) { callback.onSuccess ( currentUser.get ( ) . getAccount ( ) ) ; }
public void inheritRead_OverrideWithDeny ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; assertAccessDenied ( user ( local ) ) ; }
public com.googlecode.prolog_cafe.lang.Operation jtry9 ( com.googlecode.prolog_cafe.lang.Operation p , com.googlecode.prolog_cafe.lang.Operation next ) { return jtry ( p , next , new com.googlecode.prolog_cafe.lang.ChoicePointFrame.S8 ( this ) ) ; }
java.lang.String yearsMonthsAgo ( long years , java.lang.String yearLabel , long months , java.lang.String monthLabel ) ;
public com.googlecode.prolog_cafe.lang.NumberTerm log ( ) { if ( ( this . val ) == 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "undefined" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( java.lang.Math.log ( this . doubleValue ( ) ) ) ; }
public void commentOnReview ( java.lang.String project , int number , java.lang.String commentTemplate ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gerrit.server.update.UpdateException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput comment = createComment ( commentTemplate ) ; applyComment ( project , number , comment ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > isInactive ( ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ACTIVE , "0" ) ; }
protected PushOneCommit.Result pushTo ( java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , git ) ; return push.to ( ref ) ; }
void onAddMe ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { java.lang.String accountId = java.lang.String.valueOf ( com.google.gerrit.client.Gerrit.getUserAccountInfo ( ) . _accountId ( ) ) ; addReviewer ( accountId , false ) ; }
protected com.google.gwtjsonrpc.server.ActiveCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse resp ) { return new com.google.gwtjsonrpc.server.ActiveCall ( req , resp ) ; }
public void setUp ( ) throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager ( ) ; db = com.google.gerrit.testutil.InMemoryDatabase.newDatabase ( lifecycle ) ; lifecycle.start ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit commit , org.eclipse.jgit.util.GitDateFormatter df ) throws java.io.IOException { return toSoyData ( req , commit , com.google.gitiles.CommitSoyData.KeySet.DEFAULT , df ) ; }
com.google.gerrit.server.change.EmailReviewComments create ( com.google.gerrit.extensions.api.changes.NotifyHandling notify , com.google.common.collect.Multimap < com.google.gerrit.extensions.api.changes.RecipientType , com.google.gerrit.reviewdb.client.Account.Id > accountsToNotify , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.server.IdentifiedUser user , com.google.gerrit.reviewdb.client.ChangeMessage message , java.util.List < com.google.gerrit.reviewdb.client.Comment > comments ) ;
public com.google.gerrit.extensions.common.ProjectInfo get ( ) { com.google.common.base.Preconditions.checkNotNull ( project ) ; return projectJson.format ( project ) ; }
private void parse ( com.google.gitiles.doc.MarkdownConfig cfg , java.lang.String markdown ) { node = com.google.gitiles.doc.GitilesMarkdown.parse ( cfg , markdown ) ; extractSiteTitle ( ) ; extractRefLinks ( markdown ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( userPopup.isShowing ( ) ) { userPopup.hide ( ) ; } else { userPopup.showRelativeTo ( l ) ; } }
public void setUp ( ) throws java.lang.Exception { local = new com.google.gerrit.server.git.ProjectConfig ( localKey ) ; local.createInMemory ( ) ; util.add ( local ) ; }
public void emptyResultIfInvalid ( ) { java.util.Collection < com.google.gerrit.common.data.SubmitRecord > submitRecords = new java.util.ArrayList < > ( ) ; submitRecords.add ( com.google.gerrit.common.data.SubmitRecordTest.NOT_READY_RECORD ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.common.data.SubmitRecord.findOkRecord ( submitRecords ) . isPresent ( ) ) . isFalse ( ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { if ( screen.isCurrentView ( ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( screen.getChangeId ( ) ) ) ; } }
void unifiedPatchDetail ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.UnifiedPatchDetail > callback ) ;
public void createNewChange ( ) throws java.lang.Exception { assertChange ( newChangeInfo ( ChangeStatus.NEW ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gwt.user.client.History.newItem ( Link.SETTINGS_AGREEMENTS ) ; }
public java.util.List < java.lang.String > getUsernamesForRepositoryRole ( java.lang.String role ) { return null ; }
public com.google.gwt.user.client.ui.MenuItem addItem ( final com.google.gwt.user.client.ui.MenuItem item ) { item.addStyleDependentName ( "NormalItem" ) ; return super . addItem ( item ) ; }
public AccountGroup.UUID getGroupUUID ( ) { return getGroup ( ) . getGroupUUID ( ) ; }
void onOpenForm ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { onOpenForm ( ) ; }
java.io.File getSrcJar ( ) { return getSrcFile ( ) . toFile ( ) ; }
public com.gitblit.models.UserModel getUserModel ( char [ ] cookie ) { return null ; }
public static void removeSignedInListener ( final com.google.gerrit.client.SignedInListener l ) { com.google.gerrit.client.Gerrit.signedInListeners.remove ( l ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( updated ( ) ) && ( fireEvent ) ) { hashtagsEdited.fire ( change , ctx.getAccount ( ) , updatedHashtags , toAdd , toRemove , ctx.getWhen ( ) ) ; } }
public org.scribe.oauth.OAuthService createService ( org.scribe.model.OAuthConfig config ) { return new com.googlesource.gerrit.plugins.oauth.CasApi.CasOAuthService ( this , config ) ; }
public int getCardinality ( ) { return ( source ) != null ? source.getCardinality ( ) : limit ( ) ; }
public com.google.gitiles.doc.MarkdownToHtml setImageLoader ( com.google.gitiles.doc.ImageLoader img ) { imageLoader = img ; return this ; }
public java.util.List < org.eclipse.jgit.revwalk.FooterLine > commitFooters ( com.google.gerrit.server.git.GitRepositoryManager repoManager , com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitFooters ) == null ) { loadCommitData ( repoManager , db ) ; } return commitFooters ; }
void display ( com.google.gwt.core.client.JsArrayString values ) { int row = 1 ; for ( java.lang.String v : com.google.gerrit.client.rpc.Natives.asList ( values ) ) { populate ( row , v ) ; row ++ ; } }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) ; bind ( com.google.gerrit.server.git.GitProjectImporter.class ) ; }
public com.googlesrouce.gerrit.plugins.github.git.PagedIterable < com.googlesrouce.gerrit.plugins.github.git.GHCommit > listCommits ( ) { return ghRepository.listCommits ( ) ; }
public static void all ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.dashboards.DashboardList > > callback ) { new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
void myDrafts ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.client.reviewdb.PatchLineComment > > callback ) ;
public void addReviewers ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet ps , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > wantReviewers ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > existing = com.google.common.collect.Sets.< com.google.gerrit.reviewdb.client.Account.Id > newHashSet ( ) ; addReviewers ( change , ps , info , wantReviewers , existing ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , final com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , c , allUsers , user ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.Account result ) { registerNewEmail.setEnabled ( true ) ; onSaveSuccess ( result ) ; }
public void reset ( ) { result.clear ( ) ; start = 0 ; more = true ; page = 0 ; }
public java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > getNameKeys ( ) throws com.google.gerrit.server.permissions.PermissionBackendException { return permissionBackend.currentUser ( ) . filter ( ProjectPermission.ACCESS , parents ( ) ) . stream ( ) . sorted ( ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public static boolean hasRange ( java.lang.String varName ) { return com.google.gerrit.common.data.GlobalCapability.QUERY_LIMIT.equalsIgnoreCase ( varName ) ; }
public org.kohsuke.github.GitHub login ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken authToken ) throws java.io.IOException { this . token = authToken ; this . hub = org.kohsuke.github.GitHub.connectUsingOAuth ( authToken.access_token ) ; return this . hub ; }
public static com.google.gerrit.client.changes.ChangeInfo.RevisionInfo fromEdit ( com.google.gerrit.client.changes.ChangeInfo.EditInfo edit ) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revisionInfo = ( ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo ) ( createObject ( ) ) ) ; revisionInfo.takeFromEdit ( edit ) ; return revisionInfo ; }
static void deleteSessionCookie ( ) { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.added support ; com.google.gerrit.client.whitespace ignore ; com.google.gerrit.client.Gerrit.xsrfToken = null ; }
public void testKeyIdToString ( ) throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) . getPublicKey ( ) ; org.junit.Assert.assertEquals ( "46328A8C" , com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyID ( ) ) ) ; }
public void execute ( ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { execute ( BatchUpdateListener.NONE ) ; }
private void deployPlugin ( ) throws java.io.IOException , java.lang.InterruptedException { locatePaths ( ) ; retrievePluginName ( ) ; buildPluginJar ( ) ; createTestSite ( ) ; copyJarToTestSite ( ) ; }
public void cleanup ( ) { db.close ( ) ; }
public com.google.gwtorm.server.ResultSet < T > read ( ) throws com.google.gwtorm.server.OrmException { try { return readImpl ( ) ; } catch ( com.google.gwtorm.server.OrmRuntimeException err ) { com.google.common.base.Throwables.propagateIfInstanceOf ( err.getCause ( ) , com.google.gwtorm.server.OrmException.class ) ; throw new com.google.gwtorm.server.OrmException ( err ) ; } }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.Change > all ( ) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void pushBypassPrivateByDefaultEnabled ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( createChange ( "refs/for/master%remove-private" ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( false ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.ReviewDb > db , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , null , db , id ) ; }
private com.google.gerrit.extensions.common.ChangeInfo detailedChange ( java.lang.String changeId ) throws java.lang.Exception { return gApi.changes ( ) . id ( changeId ) . get ( java.util.EnumSet.of ( ListChangesOption.DETAILED_LABELS ) ) ; }
protected void configureCommands ( ) { command ( com.googlesource.gerrit.plugins.cookbook.PrintHelloWorldCommand.class ) ; alias ( "say-hello" , com.googlesource.gerrit.plugins.cookbook.PrintHelloWorldCommand.class ) ; }
public void setSubmitType ( final com.google.gerrit.reviewdb.client.Project.SubmitType type ) { submitType = type ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.Change.Id c ) { return "change," + ( c.toString ( ) ) ; }
public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; }
protected void configureServlets ( ) { serve ( "/become" ) . with ( com.google.gerrit.httpd.auth.become.BecomeAnyAccountLoginServlet.class ) ; }
public void update ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > instances ) { throw new java.lang.UnsupportedOperationException ( "do not call update; use ChangeContext#saveChange()" ) ; }
com.google.gerrit.server.change.AbandonOp create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Account account , @ com.google.inject.assistedinject.Assisted java.lang.String msgTxt , @ com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling , @ com.google.inject.assistedinject.Assisted com.google.common.collect.ListMultimap < com.google.gerrit.extensions.api.changes.RecipientType , com.google.gerrit.reviewdb.client.Account.Id > accountsToNotify ) ;
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { moveToNextChunk ( getCurrentRow ( ) ) ; }
private boolean canSeeMembers ( ) { return ( group.isVisibleToAll ( ) ) || ( isOwner ( ) ) ; }
public void addReviewer ( java.lang.String reviewer ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; in.reviewer = reviewer ; addReviewer ( in ) ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { return format ( new com.google.gerrit.server.query.change.ChangeData ( id ) ) ; }
public int compare ( final com.google.gerrit.client.data.ChangeInfo o1 , final com.google.gerrit.client.data.ChangeInfo o2 ) { return ( o1.getId ( ) . get ( ) ) - ( o2.getId ( ) . get ( ) ) ; }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.server.query.change.ChangeData > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return index.getSource ( p , opts ) ; }
private static java.lang.String queryInComing ( java.lang.String who ) { return ( ( "is:open reviewer:" + who ) + " -owner:" ) + who ; }
long getCut ( ) { return cut ; }
protected java.lang.Object getRowItemKey ( com.google.gerrit.client.diff.FileInfo item ) { return item.path ( ) ; }
abstract void onOneNodeReplicated ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status ) ;
public void getIfPresentInvalidKeyTest ( ) throws java.lang.Exception { loadKeyToCacheDir ( com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebSessionCacheTest.INVALID_KEY ) ; java.nio.file.Path path = websessionDir.resolve ( com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebSessionCacheTest.INVALID_KEY ) ; com.google.common.truth.Truth.assertThat ( cache.getIfPresent ( path ) ) . isNull ( ) ; }
public void cleanup ( ) { db.close ( ) ; }
void setUpPatchSetNav ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeInfo.RevisionInfo > list ) { patchSetSelectBoxA.setUpPatchSetNav ( list ) ; patchSetSelectBoxB.setUpPatchSetNav ( list ) ; }
public java.lang.Object apply ( com.google.gerrit.server.account.AccountResource rsrc ) { if ( rsrc.getUser ( ) . getAccount ( ) . isActive ( ) ) { return com.google.gerrit.extensions.restapi.BinaryResult.create ( "ok\n" ) ; } return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
private void logWarn ( java.lang.String msg ) { if ( com.google.gerrit.server.git.MergeOp.log.isWarnEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.warn ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) ) ; } }
public void setUp ( ) throws java.lang.Exception { admins = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "Administrators" ) ) . getGroupUUID ( ) ; setUpPermissions ( ) ; setUpChanges ( ) ; }
public com.google.gerrit.server.plugins.InstallPlugin create ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , com.google.gerrit.extensions.restapi.Url.decode ( id ) , true ) ; }
private org.apache.lucene.search.Query prefixQuery ( com.google.gerrit.server.index.IndexPredicate < V > p ) { return new org.apache.lucene.search.PrefixQuery ( new org.apache.lucene.index.Term ( p.getField ( ) . getName ( ) , p.getValue ( ) ) ) ; }
public java.util.Set < com.google.gerrit.reviewdb.Project.NameKey > getWatchedProjects ( ) { return java.util.Collections.emptySet ( ) ; }
public void evict ( com.google.gerrit.reviewdb.AccountProjectWatch.Key key ) { byAccountId.remove ( key.getParentKey ( ) ) ; byProjectName.remove ( key.getProjectName ( ) ) ; }
protected void configure ( ) { bindScope ( com.google.inject.servlet.RequestScoped.class , PerThreadRequestScope.REQUEST ) ; bind ( com.google.gerrit.server.project.PerRequestProjectControlCache.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . toInstance ( remoteUser ) ; }
protected void doPost ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) { process ( req , rsp , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation.INDEX ) ; }
public java.lang.String getName ( ) { return ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.NAME_PREFIX ) + ( orgName ) ; }
public int compare ( com.google.gerrit.extensions.common.ChangeInfo c1 , com.google.gerrit.extensions.common.ChangeInfo c2 ) { return ( c1._number ) - ( c2._number ) ; }
synchronized void clean ( int expect ) { if ( ( ( self ) == null ) && ( ( pending ) == 0 ) ) { start = java.lang.System.currentTimeMillis ( ) ; } pending = expect ; ensureScheduled ( ) ; }
public final com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy commentVisibilityStrategy ( ) { java.lang.String s = commentVisibilityStrategyRaw ( ) ; return s != null ? com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf ( s ) : null ; }
private void assertProblems ( com.google.gerrit.gpg.testutil.TestKey tk , java.lang.String first , java.lang.String ... rest ) { assertProblems ( tk.getPublicKey ( ) , first , rest ) ; }
public void deleteBranch ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > toRemove , final com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.Branch.NameKey > > callback ) { deleteBranchesFactory.create ( projectName , toRemove ) . to ( callback ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , id ) ; }
static byte [ ] toByteArray ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String pat ) { return ( ( ( project.toString ( ) ) + ':' ) + pat ) . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; }
private void enable ( final boolean on ) { showSiteHeader.setEnabled ( on ) ; defaultContext.setEnabled ( on ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { throw new com.google.inject.OutOfScopeException ( "No user on email thread" ) ; }
com.google.gerrit.extensions.common.WebLinkInfo getPathSetWebLink ( final java.lang.String projectName , final java.lang.String commit ) ;
public java.lang.String toString ( ) { return ( "Label[" + ( name ) ) + ']' ; }
public UiAction.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Edit Assignee" ) . setVisible ( rsrc.permissions ( ) . testOrFalse ( ChangePermission.EDIT_ASSIGNEE ) ) ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig ) ) ; }
public boolean isBlocked ( java.lang.String permissionName ) { return ! ( doCanPerform ( permissionName , true ) ) ; }
private boolean match ( java.lang.String destBranch , java.lang.String refPattern ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( refPattern ) . match ( destBranch , getCurrentUser ( ) . getUserName ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { com.google.gwt.core.client.GWT.log ( "ChangeTable.onSignIn myStarredChangeIds failed" , caught ) ; }
public boolean isTokenValid ( final java.lang.String inputToken ) { return ( isSignedIn ( ) ) && ( key.getToken ( ) . equals ( inputToken ) ) ; }
public static void detail ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "detail" ) . get ( cb ) ; }
public void confirmInvalidToken_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = "invalidToken" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/config/server/email.confirm" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; }
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.RebuildNotedbIT.runGerrit ( "init" , "-d" , sitePath.getPath ( ) , "--batch" , "--no-auto-start" , "--skip-plugins" , "--show-stack-trace" ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int limit ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , 0 , limit ) ; }
public void hashtagsWithAccentedCharacters ( ) throws java.lang.Exception { java.lang.String commitMessage = "Jag #måste #öva på min #Svenska!\n\n" + "Jag behöver en #läkare." ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "måste" , "öva" , "Svenska" , "läkare" ) ) ; }
public static < T > com.google.inject.binder.LinkedBindingBuilder < T > bind ( com.google.inject.Binder binder , com.google.inject.TypeLiteral < T > type , com.google.inject.name.Named name ) { return binder.bind ( type ) . annotatedWith ( name ) ; }
private static com.google.gerrit.extensions.common.ApprovalInfo fromApprovalInfo ( com.google.gerrit.server.change.ChangeJson.ApprovalInfo ai ) { com.google.gerrit.extensions.common.ApprovalInfo ao = new com.google.gerrit.extensions.common.ApprovalInfo ( ) ; ao.value = ai.value ; ao.date = ai.date ; com.google.gerrit.server.api.changes.ChangeInfoMapper.fromAccount ( ai , ao ) ; return ao ; }
public com.google.gerrit.server.account.AccountSshKey create ( com.google.gerrit.server.account.AccountSshKey.Id id , java.lang.String encoded ) { return new com.google.gerrit.server.account.AccountSshKey ( id , encoded ) ; }
public void setCurrentFilePaths ( java.util.List < java.lang.String > filePaths ) { currentFiles = filePaths ; }
private void checkPreconditions ( javax.servlet.http.HttpServletRequest req ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { if ( "*" . equals ( req.getHeader ( "If-None-Match" ) ) ) { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( "Resource already exists" ) ; } }
public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey ) ; try { return readPatchList ( key , repo ) ; } finally { repo.close ( ) ; } }
public void testCreateProjectHttpWithUnreasonableName_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( ( "/projects/" + ( com.google.gerrit.extensions.restapi.Url.encode ( name ( "invalid/../name" ) ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_BAD_REQUEST ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.Comment c ) { verifyComment ( c ) ; delete.add ( com.google.gerrit.server.notedb.ChangeDraftUpdate.key ( c ) ) ; }
public void testLinkify_Parens1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A (http://go.here/) B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; assertNotSame ( o , n ) ; assertEquals ( "A (<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>) B" , n.asString ( ) ) ; }
protected com.google.gerrit.server.query.Predicate < T > postRewrite ( com.google.gerrit.server.query.Predicate < T > pred ) { return pred ; }
public org.apache.sshd.server.Command createCommand ( final java.lang.String requestCommand ) { return new com.google.gerrit.sshd.CommandFactoryProvider.Trampoline ( requestCommand ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; }
private void uncacheSshKeys ( final java.lang.String userName ) { if ( userName != null ) { server.getSshKeysCache ( ) . remove ( userName ) ; } }
private int countMagicFiles ( java.util.List < com.google.gerrit.server.patch.PatchListEntry > entries ) { int count = 0 ; for ( com.google.gerrit.server.patch.PatchListEntry e : entries ) { if ( com.google.gerrit.reviewdb.client.Patch.isMagic ( e.getNewName ( ) ) ) { count ++ ; } } return count ; }
public void assertMessage ( java.lang.String expectedMessage ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; org.junit.Assert.assertTrue ( message ( refUpdate ) , message ( refUpdate ) . toLowerCase ( ) . contains ( expectedMessage.toLowerCase ( ) ) ) ; }
private boolean exists ( ) { return ( comment.getKey ( ) . get ( ) ) != null ; }
java.util.Set < java.lang.String > keySet ( ) { return java.util.Collections.unmodifiableSet ( atts.keySet ( ) ) ; }
public com.google.gerrit.server.project.ProjectState getParentState ( ) { if ( isAllProjects ) { return null ; } return projectCache.get ( getProject ( ) . getParent ( allProjectsName ) ) ; }
public void removeProjectEvents ( java.lang.String project ) throws java.sql.SQLException { execute ( java.lang.String.format ( "DELETE FROM %s WHERE project = '%s'" , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , project ) ) ; }
private com.google.common.collect.ImmutableList < com.google.gerrit.extensions.common.CommitInfo > log ( ) throws java.lang.Exception { return com.google.gerrit.server.group.db.testing.GroupTestUtil.log ( repo , com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPNAMES ) ; }
private com.google.gwtexpui.safehtml.client.SafeHtmlBuilder formatHashtags ( com.google.gerrit.client.changes.ChangeInfo info ) { if ( ( info.hashtags ( ) ) != null ) { return formatHashtags ( info.hashtags ( ) ) ; } return new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; }
public java.lang.String getRefName ( ) { return refUpdate.refName ; }
public java.util.Map < java.lang.String , java.lang.Short > votes ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listVotes.apply ( reviewer ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list votes" , e ) ; } }
public final native boolean edit ( ) ;
private org.eclipse.jgit.lib.Config config ( org.junit.runner.Description description ) { com.google.gerrit.acceptance.GerritConfigs cfgs = description.getAnnotation ( com.google.gerrit.acceptance.GerritConfigs.class ) ; com.google.gerrit.acceptance.GerritConfig cfg = description.getAnnotation ( com.google.gerrit.acceptance.GerritConfig.class ) ; if ( ( cfgs != null ) && ( cfg != null ) ) { throw new java.lang.IllegalStateException ( "Use either @GerritConfigs or @GerritConfig not both" ) ; } if ( cfgs != null ) { return com.google.gerrit.acceptance.ConfigAnnotationParser.parse ( baseConfig , cfgs ) ; } else if ( cfg != null ) { return com.google.gerrit.acceptance.ConfigAnnotationParser.parse ( baseConfig , cfg ) ; } else { return baseConfig ; } }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { removeUI ( ) ; }
void rebaseChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public void addHeader ( java.lang.String name , java.lang.String value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
void revertChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public com.googlecode.prolog_cafe.lang.NumberTerm shiftRight ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) > > ( t.intValue ( ) ) ) ) ; }
private PushOneCommit.Result createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "edit" , null , revision , fileName , null , line ) ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { this . context = sshScope.newContext ( session.getAttribute ( SshSession.KEY ) , "" ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
public boolean isVisible ( ) { return canPerform ( ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ; }
public com.google.gwtexpui.safehtml.client.SafeHtml linkify ( ) { return replaceAll ( ( "(https?://" + ( ( ( ( ( "[a-zA-Z0-9$_.+!*',%;:@&=?#/-]{2,}" + "([(]" ) + "[a-zA-Z0-9$_.+!*',%;:@&=?#/-]*" ) + "[)])*" ) + "[a-zA-Z0-9$_.+!*',%;:@&=?#/-]*" ) + ")" ) ) , "<a href=\"$1\">$1</a>" ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( project ( ) . get ( ) , filter ( ) ) ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( ( ( com.google.gerrit.client.reviewdb.AccountGroup.Id ) ( key ) ) ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_OK , null ) ; }
public static boolean isStreamingResponse ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.Objects.firstNonNull ( ( ( java.lang.Boolean ) ( req.getAttribute ( com.google.gitiles.BaseServlet.STREAMING_ATTRIBUTE ) ) ) , false ) ; }
public static boolean isOAuthFinal ( javax.servlet.http.HttpServletRequest request ) { return ( com.google.common.base.Strings.emptyToNull ( request.getParameter ( "code" ) ) ) != null ; }
public void setHeader ( java.lang.String name , java.lang.String value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private void publishDrafts ( ) throws com.google.gwtorm.client.OrmException { for ( final com.google.gerrit.reviewdb.PatchLineComment c : drafts ) { c.setStatus ( PatchLineComment.Status.PUBLISHED ) ; c.updated ( ) ; } db.patchComments ( ) . update ( drafts ) ; }
private void infoRow ( final int row , final java.lang.String name ) { info.setText ( row , labelIdx , name ) ; info.getCellFormatter ( ) . addStyleName ( row , 0 , "header" ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.Change > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change.Id > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void setSampledStatisticsEnabled ( boolean enableStatistics ) { self.setSampledStatisticsEnabled ( enableStatistics ) ; }
private static boolean isGoogleAccount ( final com.dyuproject.openid.OpenIdUser user ) { return user.getClaimedId ( ) . startsWith ( ( ( com.google.gerrit.client.openid.OpenIdUtil.URL_GOOGLE ) + "?" ) ) ; }
private int search ( java.lang.String fileName ) { com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty ( fileName ) ; return java.util.Arrays.binarySearch ( patches , 0 , patches.length , want , com.google.gerrit.server.patch.PatchList.PATCH_CMP ) ; }
public boolean canAddPatchSet ( ) { return getRefControl ( ) . canUpload ( ) ; }
private static boolean isSafe ( org.spearce.jgit.lib.RepositoryConfig cfg , java.lang.String type , boolean def ) { return cfg.getBoolean ( com.google.gerrit.server.MimeUtilFileTypeRegistry.SECTION_MIMETYPE , type , com.google.gerrit.server.MimeUtilFileTypeRegistry.KEY_SAFE , def ) ; }
public void onFailure ( java.lang.Throwable err ) { relatedChangesTab.setTitle ( Resources.M.relatedChanges ( Resources.C.notAvailable ( ) ) ) ; relatedChangesTab.setError ( err.getMessage ( ) ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.fullTextSearchMaxMatches" , value = "2" ) } ) public void suggestReviewersFullTextSearchLimitMaxMatches ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "ser" , 3 ) ; org.junit.Assert.assertEquals ( 2 , reviewers.size ( ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > externalId ( java.lang.String externalId ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EXTERNAL_ID , externalId ) ; }
public com.google.gerrit.extensions.api.changes.ChangeApi id ( java.lang.String project , int id ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void testEventSentFailed ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( false , "Error" , false ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public java.util.List < com.google.gerrit.reviewdb.AccountProjectWatch > byProject ( com.google.gerrit.reviewdb.Project.NameKey name ) { return byProjectName.get ( name ) . list ; }
private void initMac ( ) { setMacFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Mac > > asList ( new org.apache.sshd.common.mac.HMACMD5.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA1.Factory ( ) , new org.apache.sshd.common.mac.HMACMD596.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA196.Factory ( ) ) ) ; }
private static java.lang.String addEndSlash ( java.lang.String input ) { return input.endsWith ( "/" ) ? input : input.concat ( "/" ) ; }
private boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( canAbandon ( db ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { com.googlecode.prolog_cafe.lang.SymbolTerm.create ( message ) } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.InternalException.INTERNAL_ERROR , args ) ; }
public static com.google.gerrit.extensions.client.GeneralPreferencesInfo readDefaultPreferences ( org.eclipse.jgit.lib.Repository allUsersRepo ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.account.PreferencesConfig.parse ( com.google.gerrit.server.account.PreferencesConfig.readDefaultConfig ( allUsersRepo ) , null , null ) ; }
private WorkQueue.Executor getExecutor ( ) { return queue.getQueue ( user.get ( ) . getCapabilities ( ) . getQueueType ( ) ) ; }
final native void set_revision_number ( int n ) ;
public void run ( ) { apply.run ( ) ; }
public static void defaultDashboard ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + "default" ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
public int getEffectiveMaxBatchChangesLimit ( com.google.gerrit.server.CurrentUser user ) { if ( user.getCapabilities ( ) . canPerform ( com.google.gerrit.common.data.GlobalCapability.BATCH_CHANGES_LIMIT ) ) { return user.getCapabilities ( ) . getRange ( com.google.gerrit.common.data.GlobalCapability.BATCH_CHANGES_LIMIT ) . getMax ( ) ; } return systemMaxBatchChanges ; }
public void onSuccess ( final com.google.gerrit.client.groups.GroupInfo result ) { addIncludeBox.setEnabled ( true ) ; addIncludeBox.setText ( "" ) ; includes.insert ( result ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toEditScreen ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( result.legacyId ( ) , 1 ) , "project.config" ) ) ; }
public com.google.gerrit.extensions.common.ChangeInfo check ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return check.apply ( change ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check change" , e ) ; } }
public static com.google.gerrit.reviewdb.client.Change newChange ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.IdentifiedUser user ) { return com.google.gerrit.testutil.TestChanges.newChange ( project , user , com.google.gerrit.testutil.TestChanges.nextChangeId.getAndIncrement ( ) ) ; }
java.nio.file.Path targetPath ( com.google.gerrit.httpd.raw.BuildSystem.Label l ) ;
javax.servlet.http.HttpServlet getPolyGerritUiIndexServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.SingleFileServlet ( cache , polyGerritBasePath ( ) . resolve ( "index.html" ) , isDev ( ) ) ; }
private java.lang.String createMyChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , user.getIdent ( ) , git ) ; return push.to ( "refs/for/master" ) . getChangeId ( ) ; }
public void returnDefaultforNullMap ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( null ) ) . isEqualTo ( com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.defaultQuery ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; panel = new com.google.gerrit.client.account.ContactPanelFull ( ) { @ java.lang.Override void display ( ) { com.google.gerrit.client.account.MyContactInformationScreen.this . display ( ) ; } } ; add ( panel ) ; }
protected void onOpenItem ( final com.google.gerrit.client.reviewdb.Project item ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Link.toProjectAdmin ( item.getId ( ) ) ) ; }
private com.google.gerrit.common.changes.Side getSideFromCm ( net.codemirror.lib.CodeMirror cm ) { return cm == ( cmA ) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION ; }
public static java.lang.String toChangeQuery ( final java.lang.String query ) { return com.google.gerrit.common.PageLinks.toChangeQuery ( query , com.google.gerrit.common.PageLinks.TOP ) ; }
private void wantGroup ( final com.google.gerrit.client.reviewdb.AccountGroup.Id id ) { groups.put ( id , null ) ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException ;
public java.lang.String onSubmit ( java.lang.String newCommitMessage , org.eclipse.jgit.revwalk.RevCommit original , org.eclipse.jgit.revwalk.RevCommit mergeTip , com.google.gerrit.server.project.ChangeControl ctl ) { return ( newCommitMessage + "Custom: " ) + ( ctl.getChange ( ) . getDest ( ) . get ( ) ) ; }
public void cancel ( ) { final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( context ) ; try { onExit ( com.google.gerrit.sshd.BaseCommand.STATUS_CANCEL ) ; } finally { com.google.gerrit.sshd.SshScope.set ( old ) ; } }
public static final native net.codemirror.lib.LineCharacter pos ( int line , int ch ) ;
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { upToChange ( ) ; }
public void onSend ( ) { Util.MANAGE_SVC.revertChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public org.eclipse.jgit.lib.ObjectId getCommitId ( ) { return commit ; }
protected boolean hasDifferences ( final com.google.gerrit.common.data.PatchScript script ) { boolean hasEdits = ! ( script.getEdits ( ) . isEmpty ( ) ) ; boolean hasMeta = ! ( script.getPatchHeader ( ) . isEmpty ( ) ) ; return hasEdits || hasMeta ; }
protected void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.Project > result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; }
public void renameGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , final java.lang.String newName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.GroupDetail > callback ) { renameGroupFactory.create ( groupId , newName ) . to ( callback ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( goal ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( argNo ) , new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( e ) } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.JavaException.JAVA_ERROR , args ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType ) ; display ( result ) ; }
public void previous ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getPrevious ( ) ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testutil.IndexVersions.PREVIOUS ) ) . containsExactly ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getPrevious ( ) . getVersion ( ) ) ; }
public com.google.gerrit.server.query.InternalQuery < T > noFields ( ) { queryProcessor.setRequestedFields ( com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; return this ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString user ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( user.asString ( ) ) ; refreshHttpPassword ( ) ; }
public void updateRepo ( com.google.gerrit.server.update.BatchUpdate.RepoContext ctx ) throws java.io.IOException { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( oldId , newId , dest ) ) ; }
protected void updateMessageID ( ) throws javax.mail.MessagingException { if ( ( messageID ) != null ) { setHeader ( "Message-ID" , messageID ) ; } else { super . updateMessageID ( ) ; } }
public void evictGroupsMembers ( ) throws java.io.IOException , javax.servlet.ServletException { configureMocksFor ( Constants.GROUPS_MEMBERS ) ; servlet.doPost ( request , response ) ; verifyAll ( ) ; }
public void suggestReviewersMaxNbrSuggestions ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "user" , 5 ) ; org.junit.Assert.assertEquals ( 2 , reviewers.size ( ) ) ; }
private com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > submit ( java.util.concurrent.Callable < ? > task ) { return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.nonCancellationPropagating ( executor.submit ( task ) ) , com.google.gerrit.server.index.change.ChangeIndexer.MAPPER ) ; }
public boolean isVisible ( ) { return ( ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAnyRef ( Permission.READ ) ) ) && ( ! ( isHidden ( ) ) ) ; }
public final native void set_edit ( com.google.gerrit.client.changes.ChangeInfo.EditInfo edit ) ;
public void addReviewerToWipChange ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
private static java.lang.String readCSS ( ) { if ( ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.css ) != null ) { return com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.css ; } try { return com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.readCss ( new java.util.concurrent.atomic.AtomicBoolean ( ) ) ; } catch ( java.io.IOException err ) { return "" ; } }
com.google.gerrit.server.IdentifiedUser getUser ( ) { return getControl ( ) . getUser ( ) . asIdentifiedUser ( ) ; }
private void review ( java.lang.String changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy strategy ) throws java.lang.Exception { review ( changeId , strategy , null ) ; }
public void testLinkify_Parens1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A (http://go.here/) B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( "<p>A (<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>) B</p>" , n.asString ( ) ) ; }
public static void markPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private" ) . put ( cb ) ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "list" , true ) . get ( cb ) ; }
public static com.google.gerrit.testutil.InMemoryDatabase newDatabase ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) { return com.google.gerrit.testutil.InMemoryModule.createInjector ( lifecycle ) . getInstance ( com.google.gerrit.testutil.InMemoryDatabase.class ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , true ) ; }
public void onSuccess ( com.google.gerrit.client.access.ProjectAccessInfo result ) { if ( result.isOwner ( ) ) { table.setWidget ( row , column , getHeadRevisionWidget ( rev ) ) ; } else { table.setText ( row , 3 , rev ) ; } }
public void run ( ) { cmB.operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { apply.run ( ) ; } } ) ; }
public com.google.gerrit.server.change.PatchSetInserter setRefControl ( com.google.gerrit.server.project.RefControl refControl ) { this . refControl = refControl ; return this ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { closePopup ( ) ; }
public void testDeleteOneExisting ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 1 ) ; createClassUnderTest ( ) . delete ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; }
private PatchSet.Id nextPatchSetId ( com.google.gerrit.server.project.ChangeControl ctl ) { return com.google.gerrit.server.ChangeUtil.nextPatchSetId ( ctl.getChange ( ) . currentPatchSetId ( ) ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT , java.lang.String additionalQueryString ) throws java.lang.Exception { return com.google.gitiles.ServletTest.newGson ( ) . fromJson ( buildJsonRaw ( path , additionalQueryString ) , typeOfT ) ; }
public java.util.List < com.google.gerrit.common.data.PermissionRule > getPermission ( java.lang.String permissionName ) { java.util.List < com.google.gerrit.common.data.PermissionRule > r = permissions.get ( permissionName ) ; return r != null ? r : java.util.Collections.< com.google.gerrit.common.data.PermissionRule > emptyList ( ) ; }
private int getInt ( final org.spearce.jgit.transport.RemoteConfig rc , final org.spearce.jgit.lib.RepositoryConfig cfg , final java.lang.String name , final int defValue ) { return cfg.getInt ( "remote" , rc.getName ( ) , name , defValue ) ; }
public final native int context ( ) ;
protected void configure ( ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; }
static org.apache.lucene.index.Term intTerm ( java.lang.String name , int value ) { org.apache.lucene.util.BytesRefBuilder builder = new org.apache.lucene.util.BytesRefBuilder ( ) ; org.apache.lucene.util.NumericUtils.intToPrefixCodedBytes ( value , 0 , builder ) ; return new org.apache.lucene.index.Term ( name , builder.get ( ) ) ; }
final void setSubmitType ( com.google.gerrit.extensions.common.SubmitType t ) { setSubmitTypeRaw ( t.name ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacy_id ( ) ) ) ; hide ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { header.reviewedAndNext ( ) . run ( ) ; }
private boolean failAuthentication ( com.google.gerrit.httpd.ProjectBasicAuthFilter.Response rsp , java.lang.String username ) throws java.io.IOException { com.google.gerrit.httpd.ProjectBasicAuthFilter.log.warn ( "Authentication failed for {}: password does not match the one stored in Gerrit" , username ) ; rsp.sendError ( javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED ) ; return false ; }
public com.google.gerrit.reviewdb.server.ChangeAccess changes ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
public java.lang.String getCommand ( java.lang.String url ) { return ( "git fetch " + url ) + " ${ref} && git format-patch -1 --stdout FETCH_HEAD" ; }
public static < T > com.google.gwt.user.client.rpc.AsyncCallback < T > emptyCallback ( ) { return new com.google.gwt.user.client.rpc.AsyncCallback < T > ( ) { @ java.lang.Override public void onSuccess ( T result ) { } @ java.lang.Override public void onFailure ( java.lang.Throwable err ) { } } ; }
public void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) { toMerge.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; args.mergeTip.moveTipTo ( toMerge , toMerge ) ; acceptMergeTip ( args.mergeTip ) ; }
private static org.eclipse.jgit.lib.Config updateConfig ( org.eclipse.jgit.lib.Config cfg ) { cfg.setInt ( "index" , null , "maxPages" , 10 ) ; return cfg ; }
public void testInsertOne ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.PreparedStatement insert = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . insert ( oneRow ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( insert ) ; }
private static boolean isGerritServer ( com.google.gerrit.client.account.AccountInfo account ) { return ( ( account._account_id ( ) ) == 0 ) && ( Util.C.messageNoAuthor ( ) . equals ( account.name ( ) ) ) ; }
public void add ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String command ) { commands.put ( project , command ) ; }
public void upsert ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > instances ) { throw new java.lang.UnsupportedOperationException ( ( "do not call upsert; either use InsertChangeOp for insertion, or" + " ChangeContext#saveChange() for update" ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { cbox.setEnabled ( true ) ; info.getWatch ( ) . setNotify ( type , oldVal ) ; cbox.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
private boolean isProjectStatePermittingWrite ( ) { return getProjectControl ( ) . getProject ( ) . getState ( ) . permitsWrite ( ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; hide ( ) ; }
void suggestProjectNameKey ( java.lang.String query , int limit , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > > callback ) ;
public com.google.common.collect.ImmutableMap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSet > getPatchSets ( ) { return state.patchSets ( ) ; }
private com.google.inject.Key < com.googlesource.gerrit.plugins.quota.UsageDataEventCreator > creatorKey ( java.lang.String kind ) { com.google.inject.Key < com.googlesource.gerrit.plugins.quota.UsageDataEventCreator > pushCreatorKey = com.google.inject.Key.get ( new com.google.inject.TypeLiteral < com.googlesource.gerrit.plugins.quota.UsageDataEventCreator > ( ) { } , com.google.inject.name.Names.named ( kind ) ) ; return pushCreatorKey ; }
public void parseReviewer ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( ( ( ( "\n" + "Branch: refs/heads/master\n" ) + "Change-id: I577fb248e474018276351785930358ec0450e9f7\n" ) + "Patch-set: 1\n" ) + "Reviewer: Change Owner <1@gerrit>\n" ) + "CC: Other Account <2@gerrit>\n" ) + "Subject: This is a test change\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( "\n" + "Patch-set: 1\n" ) + "Reviewer: 1@gerrit\n" ) ) ) ; }
private static void checkRequiredMenuItemField ( java.lang.String value , java.lang.String name ) throws com.google.gerrit.extensions.restapi.BadRequestException { if ( com.google.common.base.Strings.isNullOrEmpty ( value ) ) { throw new com.google.gerrit.extensions.restapi.BadRequestException ( ( name + " for menu item is required" ) ) ; } }
void sideBySidePatchDetail ( com.google.gerrit.client.reviewdb.Patch.Key key , java.util.List < com.google.gerrit.client.reviewdb.PatchSet.Id > versions , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.SideBySidePatchDetail > callback ) ;
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( ( available ) && ( session.isOpen ( ) ) ) { session.publish ( gson.toJson ( event ) ) ; } }
public void onExit ( int rc ) { exit.onExit ( translateExit ( rc ) ) ; log ( rc ) ; }
public void branchAlreadyExists_Conflict ( ) throws java.lang.Exception { assertCreateSucceeds ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.config.SitePaths.class ) ; }
public void onHistoryChanged ( final java.lang.String historyToken ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( historyToken ) ; }
public void batchAbandon ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { batchAbandon ( project , user , controls , "" , NotifyHandling.ALL ) ; }
java.util.Collection < com.google.gerrit.common.data.GroupReference > suggest ( java.lang.String name ) ;
private static org.eclipse.jgit.revwalk.RevCommit lookupCommit ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId ( patchSet ) ; return com.google.gerrit.server.edit.ChangeEditModifier.lookup ( repository , patchSetCommitId ) ; }
protected void set ( int newValue ) { checkSequenceValue ( newValue ) ; seq = newValue ; }
private static com.google.common.base.Optional < org.eclipse.jgit.lib.ObjectId > metaId ( org.eclipse.jgit.lib.ObjectId id ) { return com.google.common.base.Optional.of ( id ) ; }
public void createDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.MethodNotAllowedException.class , "draft workflow is disabled" ) ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { return format ( new com.google.gerrit.server.query.change.ChangeData ( id ) ) ; }
static com.google.gerrit.client.projects.ProjectApi.StringMap create ( ) { return ( ( com.google.gerrit.client.projects.ProjectApi.StringMap ) ( createObject ( ) ) ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return apply ( rsrc.getControl ( ) , rsrc.getPath ( ) , input.content ) ; }
public void validKey ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultRuleError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError ( err ) ; } }
public boolean allowsEdit ( final com.google.gerrit.reviewdb.Account.FieldName field ) { switch ( field ) { case FULL_NAME : return ( accountFullName ) == null ; case SSH_USER_NAME : return ( accountSshUserName ) == null ; default : return true ; } }
private static com.google.common.base.Optional < org.eclipse.jgit.lib.ObjectId > noMetaId ( ) { return com.google.common.base.Optional.absent ( ) ; }
private void setDefaultFields ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { setDefaultConfig ( filterConfig ) ; setDefaultRenderer ( filterConfig ) ; setDefaultUrls ( ) ; setDefaultAccess ( ) ; setDefaultVisibilityCache ( ) ; setDefaultTimeCache ( ) ; setDefaultBlameCache ( ) ; setDefaultGitwebRedirect ( ) ; }
public void removeFromNonExistingGroup_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( DELETE ( "/groups/non-existing/members/admin" ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > published ( com.google.gerrit.reviewdb.PatchSet.Id patchset ) throws com.google.gwtorm.client.OrmException ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { addMember.fireEvent ( new com.google.gwt.event.dom.client.ClickEvent ( ) { } ) ; } }
public java.util.List < com.google.gerrit.extensions.common.GroupInfo > includedGroups ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listGroups.apply ( rsrc ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot list included groups" , e ) ; } }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( getRefControl ( ) . forUser ( who ) , getChange ( ) ) ; }
protected void setDownloadHeaders ( javax.servlet.http.HttpServletResponse res , java.lang.String filename , java.lang.String contentType ) { res.setContentType ( contentType ) ; res.setHeader ( com.google.common.net.HttpHeaders.CONTENT_DISPOSITION , ( "attachment; filename=" + filename ) ) ; setCacheHeaders ( res ) ; }
final native void add_member ( java.lang.String n ) ;
public void evict ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( headless ) ) ; }
public void invalidateAll ( ) { java.io.File [ ] files = dir.listFiles ( ) ; if ( files != null ) { for ( java.io.File f : files ) { deleteFile ( f ) ; } } }
public boolean handles ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return com.google.gerrit.reviewdb.client.AccountGroup.isInternalGroup ( uuid ) ; }
public com.google.gerrit.server.change.ChangeEdits.Create post ( com.google.gerrit.server.change.ChangeResource parent ) throws com.google.gerrit.extensions.restapi.RestApiException { return createFactory.create ( parent.getChange ( ) , null ) ; }
public com.google.gerrit.server.account.AccountInfo apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountInfo.Loader loader = infoFactory.create ( true ) ; com.google.gerrit.server.account.AccountInfo info = loader.get ( rsrc.getUser ( ) . getAccountId ( ) ) ; loader.fill ( ) ; return info ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { topic.onEdit ( ) ; }
public final boolean isRepeatable ( ) { return true ; }
private static com.google.gerrit.extensions.auth.oauth.OAuthUserInfo getAsOAuthUserInfo ( java.lang.String username ) { return new com.google.gerrit.extensions.auth.oauth.OAuthUserInfo ( ( ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_EXTERNAL ) + username ) , username , null , null , null ) ; }
public void noDate ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.String > params = new java.util.HashMap < > ( ) ; com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( params ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public void put ( K key , V value ) { cache.put ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) , new com.google.gerrit.ehcache.SerializableProtobuf < V > ( value , valueCodec ) ) ; }
protected java.lang.String getName ( ) { return com.google.common.base.Objects.firstNonNull ( name , com.google.gerrit.testutil.ConfigSuite.DEFAULT ) ; }
public void onFailure ( final java.lang.Throwable caught ) { text.setReadOnly ( false ) ; save.setEnabled ( true ) ; discard.setEnabled ( true ) ; super . onFailure ( caught ) ; }
private java.lang.String getChangeId ( org.eclipse.jgit.revwalk.RevCommit c ) throws java.lang.Exception { return com.google.gerrit.acceptance.GitUtil.getChangeId ( testRepo , c ) . get ( ) ; }
private static com.google.gerrit.server.index.QueryOptions options ( int start , int limit ) { return com.google.gerrit.server.index.change.IndexedChangeQuery.createOptions ( com.google.gerrit.server.index.change.ChangeIndexRewriterTest.CONFIG , start , limit , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
void onDeleteEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteChangeEdit ( ) ) ) { com.google.gerrit.client.change.EditActions.deleteEdit ( changeId ) ; } }
com.google.gerrit.reviewdb.client.Change getChange ( ) { return ins.getChange ( ) ; }
public void run ( ) { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine ( cm ) ; if ( group != null ) { group.openCloseAll ( ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
com.googlesource.gerrit.plugins.webhooks.PostTask create ( @ com.google.inject.assistedinject.Assisted ( value = "url" ) java.lang.String url , @ com.google.inject.assistedinject.Assisted ( value = "body" ) java.lang.String body ) ;
public void evictByUsername ( java.lang.String username ) { byName.remove ( username ) ; }
public abstract com.google.common.collect.ImmutableList < java.lang.String > cc ( ) ;
private org.eclipse.jgit.lib.ObjectId getCurrentRevisionId ( java.lang.String changeId ) throws com.google.gwtorm.server.OrmException { return org.eclipse.jgit.lib.ObjectId.fromString ( getCurrentPatchSet ( changeId ) . getRevision ( ) . get ( ) ) ; }
void setOpen ( boolean open ) { resizePaddingWidget ( ) ; }
private java.lang.String readFile ( java.io.File f ) throws java.io.IOException { return f.exists ( ) ? com.google.common.io.Files.toString ( f , com.google.common.base.Charsets.UTF_8 ) : null ; }
public void execute ( ) { deferred = null ; operation ( new java.lang.Runnable ( ) { public void run ( ) { for ( java.lang.Runnable thunk : list ) { thunk.run ( ) ; } } } ) ; }
public java.io.InputStream getInputStream ( com.google.gerrit.server.plugins.PluginEntry entry ) throws java.io.IOException { throw new java.io.FileNotFoundException ( "Empty plugin" ) ; }
private static java.nio.file.Path getSourseRootOrNull ( ) { try { return com.google.gerrit.launcher.GerritLauncher.resolveInSourceRoot ( "." ) ; } catch ( java.io.FileNotFoundException e ) { return null ; } }
protected void preDisplay ( final com.google.gerrit.common.data.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; this . preDisplay ( result , this ) ; }
public com.google.gerrit.server.patch.PatchListEntry get ( java.lang.String fileName ) { final int index = search ( fileName ) ; return 0 <= index ? patches [ index ] : com.google.gerrit.server.patch.PatchListEntry.empty ( fileName ) ; }
public void defaultDashboardDoesNotExist ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . dashboard ( "default" ) . get ( ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( revision , null ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft ps" , e ) ; } }
public com.google.gerrit.reviewdb.client.Change get ( com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
protected java.util.Map < com.google.gerrit.reviewdb.client.Account.Id , com.google.gerrit.server.IdentifiedUser > createValue ( com.googlecode.prolog_cafe.lang.Prolog engine ) { return com.google.common.collect.Maps.newHashMap ( ) ; }
public boolean isEnabled ( ) { return ( enabled ) && ( isVisible ( ) ) ; }
public boolean allRefsAreVisibleExcept ( java.util.Set < java.lang.String > except ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ , except ) ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.client.Account.Id > starredBy ( ) throws com.google.gwtorm.server.OrmException { if ( ( starredByUser ) == null ) { starredByUser = starredChangesUtil.byChange ( legacyId ) ; } return starredByUser ; }
private boolean failAuthentication ( com.google.gerrit.httpd.ProjectBasicAuthFilter.Response rsp , java.lang.String username ) throws java.io.IOException { com.google.gerrit.httpd.ProjectBasicAuthFilter.log.warn ( ( "Authentication failed for {}: password does not match the one" + " stored in Gerrit" ) , username ) ; rsp.sendError ( javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED ) ; return false ; }
protected void configureServlets ( ) { install ( new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderServletModule ( ) ) ; if ( config.websession ( ) . synchronize ( ) ) { install ( new com.ericsson.gerrit.plugins.highavailability.websession.file.FileBasedWebsessionModule ( ) ) ; } }
private void renderSubmitType ( java.lang.String action ) { try { com.google.gerrit.extensions.client.SubmitType type = com.google.gerrit.extensions.client.SubmitType.valueOf ( action ) ; submitActionText.setInnerText ( com.google.gerrit.client.admin.Util.toLongString ( type ) ) ; } catch ( java.lang.IllegalArgumentException e ) { submitActionText.setInnerText ( action ) ; } }
public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy getCommentVisibilityStrategy ( ) { if ( ( commentVisibilityStrategy ) == null ) { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.EXPAND_MOST_RECENT ; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf ( commentVisibilityStrategy ) ; }
void setWidget ( net.codemirror.lib.LineWidget widget ) { this . widget = widget ; }
public void setHeader ( java.lang.String name , java.lang.String value ) { headers.removeAll ( name ) ; addHeader ( name , value ) ; }
java.lang.String needApproval ( java.lang.String categoryName ) ;
public void setUp ( ) throws java.lang.Exception { java.lang.String name = name ( "user42" ) ; user42 = accounts.create ( name , ( name + "@example.com" ) , "User 42" ) ; }
public com.google.gerrit.server.WebLinks get ( ) { com.google.gerrit.server.WebLinks webLinks = new com.google.gerrit.server.WebLinks ( patchSetLinks , projectLinks ) ; return webLinks ; }
public final native com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo > > pluginConfigParameters ( ) ;
private static native java.lang.String toString ( java.sql.Timestamp ts ) ;
private com.google.gerrit.httpd.resources.Resource getAsHtmlResource ( byte [ ] html , int lastModified ) { return new com.google.gerrit.httpd.resources.SmallResource ( html ) . setContentType ( "text/html" ) . setCharacterEncoding ( java.nio.charset.StandardCharsets.UTF_8.name ( ) ) . setLastModified ( lastModified ) ; }
public static < T extends com.google.gwt.core.client.JavaScriptObject , M extends com.google.gerrit.client.rpc.NativeMap < T > > com.google.gwtjsonrpc.common.AsyncCallback < M > copyKeysIntoChildren ( com.google.gwtjsonrpc.common.AsyncCallback < M > callback ) { return com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( "name" , callback ) ; }
private static void assertName ( java.lang.String expectedNewName , com.google.gerrit.server.patch.PatchListEntry e ) { org.junit.Assert.assertEquals ( expectedNewName , e.getNewName ( ) ) ; org.junit.Assert.assertNull ( e.getOldName ( ) ) ; }
private java.lang.String getReplyCommentName ( ) { return "savedReplyComment-" + ( changeId.toString ( ) ) ; }
public final void setConfiguredValue ( com.google.gerrit.reviewdb.client.Project.InheritableBoolean v ) { setConfiguredValueRaw ( v.name ( ) ) ; }
protected void configure ( ) { bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( new org.eclipse.jgit.lib.Config ( ) ) ; bind ( com.google.gerrit.reviewdb.SystemConfig.class ) . toInstance ( systemConfig ) ; bind ( com.google.gerrit.server.config.AuthConfig.class ) ; }
private void assertCanUpdate ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canUpdate ( ) ) . named ( ( "can update " + ref ) ) . isTrue ( ) ; }
private static java.lang.String status ( com.google.gerrit.reviewdb.client.Change.Status status ) { switch ( status ) { case ABANDONED : return "status:abandoned" ; case MERGED : return "status:merged" ; case NEW : default : return "status:open" ; } }
public void addOption ( com.google.gerrit.common.groups.ListGroupsOption o ) { options.add ( o ) ; }
public com.google.gerrit.server.change.CommentInfo apply ( com.google.gerrit.server.change.CommentResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountInfo.Loader accountLoader = accountLoaderFactory.create ( true ) ; com.google.gerrit.server.change.CommentInfo ci = new com.google.gerrit.server.change.CommentInfo ( rsrc.getComment ( ) , accountLoader ) ; accountLoader.fill ( ) ; return ci ; }
public void createTempDirectory ( ) throws java.lang.Exception { sitePath = com.google.gerrit.acceptance.TempFileUtil.createTempDirectory ( ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) . to ( com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.class ) ; }
public final void dateFormat ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DateFormat f ) { dateFormatRaw ( ( f != null ? f.toString ( ) : null ) ) ; }
public void setPatchSets ( java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > patchSets ) { this . patchSets = patchSets ; }
public void getDiffPreferences ( ) throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = gApi.config ( ) . server ( ) . getDefaultDiffPreferences ( ) ; assertPrefsEqual ( result , com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults ( ) ) ; }
public abstract java.util.concurrent.Callable < ? > indexTask ( com.google.gerrit.server.query.change.ChangeData cd ) ;
void setProjectState ( com.google.gerrit.server.project.ProjectState projectState ) { this . projectState = projectState ; }
private void popup ( com.google.gerrit.client.account.AccountInfo account , boolean addPopup ) { if ( addPopup ) { com.google.gerrit.client.AvatarImage.PopupHandler popupHandler = new com.google.gerrit.client.AvatarImage.PopupHandler ( account , this ) ; addMouseOverHandler ( popupHandler ) ; addMouseOutHandler ( popupHandler ) ; } }
public void onEvent ( com.google.gerrit.server.events.Event event ) { for ( com.googlesource.gerrit.plugins.rabbitmq.message.Publisher publisher : publishers ) { publisher.onEvent ( event ) ; } }
final void download_scheme ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme s ) { download_scheme0 ( s.name ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , null ) ; }
private com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( java.lang.String changeId , java.lang.String reviewer ) throws java.lang.Exception { com.google.gerrit.extensions.api.changes.AddReviewerInput in = new com.google.gerrit.extensions.api.changes.AddReviewerInput ( ) ; in.reviewer = reviewer ; return addReviewer ( changeId , in ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForRef user ( com.google.gerrit.server.CurrentUser user ) { return forUser ( user ) . asForRef ( ) ; }
public void removed ( final com.google.gerrit.reviewdb.client.Account.Id deleter ) { removedBy = deleter ; removedOn = com.google.gerrit.reviewdb.client.AccountGroupIncludeByUuidAudit.now ( ) ; }
public static void myOwned ( java.lang.String groupName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupMap > cb ) { com.google.gerrit.client.groups.GroupMap.myOwnedGroups ( ) . addParameter ( "q" , groupName ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( cb ) ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canFastForward ( args.mergeSorter , mergeTip , args.rw , toMerge ) ; }
public static com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ( java.lang.String orgName ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( ( ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.UUID_PREFIX ) + orgName ) ) ; }
public long getTail ( ) throws java.io.IOException { if ( ( getHead ( ) ) == 0 ) { return 0 ; } long tail = stores.tail.spinGet ( com.googlesource.gerrit.plugins.events.fsstore.FsStore.MAX_GET_SPINS ) ; return tail < 1 ? 1 : tail ; }
public boolean isValid ( com.google.gerrit.reviewdb.client.Patch patch ) { return ! ( patch.isReviewedByCurrentUser ( ) ) ; }
com.googlesource.gerrit.plugins.findowners.OwnersDb get ( org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { return get ( repo , changeData , changeData.currentPatchSet ( ) . getId ( ) . get ( ) ) ; }
public void evictAll ( ) { byName.removeAll ( ) ; }
protected static com.google.gerrit.server.query.PredicateTest.TestPredicate f ( java.lang.String name , java.lang.String value ) { return new com.google.gerrit.server.query.PredicateTest.TestPredicate ( name , value ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return "/admin/groups/" + ( id.toString ( ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public java.lang.String getUrl ( ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; com.google.gerrit.server.config.ConfigSection dbs = new com.google.gerrit.server.config.ConfigSection ( cfg , "database" ) ; b.append ( "jdbc:mariadb://" ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.hostname ( dbs.optional ( "hostname" ) ) ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.port ( dbs.optional ( "port" ) ) ) ; b.append ( "/" ) ; b.append ( dbs.required ( "database" ) ) ; return b.toString ( ) ; }
public com.google.gerrit.reviewdb.client.ChangeMessage get ( com.google.gerrit.reviewdb.client.ChangeMessage.Key id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void commentOnReviewableChangeByOwnerNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public final com.google.gerrit.common.changes.Side side ( ) { java.lang.String s = sideRaw ( ) ; return s != null ? com.google.gerrit.common.changes.Side.valueOf ( s ) : com.google.gerrit.common.changes.Side.REVISION ; }
public void go ( ) { com.google.gerrit.client.Dispatcher.patch ( getTargetHistoryToken ( ) , patchKey , patchIndex , parentPatchTable ) ; }
public void testFindInDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( ( - 1 ) , mapper.lineOnOther ( Side.PARENT , 9 ) ) ; }
public void deleteWatchedProjects ( java.util.List < com.google.gerrit.extensions.client.ProjectWatchInfo > in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteWatchedProjects.apply ( account , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete watched projects" , e ) ; } }
public void onSuccess ( java.util.List < com.google.gerrit.reviewdb.client.Change > changes ) { for ( com.google.gerrit.reviewdb.client.Change c : changes ) { executor.submit ( new com.google.gerrit.server.index.change.ReindexAfterUpdate.Index ( event , c.getId ( ) ) ) ; } }
void test ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder ) throws java.lang.Exception ;
void onReply ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReplyBox ( getOriginal ( ) , "" , true ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , starredChangesCache , accountProjectWatchCache , remotePeerProvider , null , id ) ; }
public java.lang.String toString ( ) { return ( "CurrentUser[" + ( getAccountId ( ) ) ) + "]" ; }
private static boolean isPluginNameSane ( java.lang.String pluginName ) { return com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT.or ( com.google.common.base.CharMatcher.is ( '-' ) ) . matchesAllOf ( pluginName ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > andActive ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > p ) { return com.google.gerrit.server.query.Predicate.and ( p , com.google.gerrit.server.query.account.AccountPredicates.isActive ( ) ) ; }
private static synchronized com.google.gerrit.git.WorkQueue.Executor getDefaultQueue ( ) { if ( ( com.google.gerrit.git.WorkQueue.defaultQueue ) == null ) { com.google.gerrit.git.WorkQueue.defaultQueue = com.google.gerrit.git.WorkQueue.createQueue ( 1 ) ; } return com.google.gerrit.git.WorkQueue.defaultQueue ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.cancelUnsavedChanges ( ) ) ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } }
void expandBefore ( int cnt ) { expandSideBefore ( cnt ) ; otherBar.expandSideBefore ( cnt ) ; }
public void createNewDraftChange ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isTrue ( ) ; assertCreateSucceeds ( newChangeInput ( ChangeStatus.DRAFT ) ) ; }
public void close ( ) { if ( ( reader ) != null ) { reader.close ( ) ; reader = null ; notes = null ; } }
public void testUpdateOne ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 ) ; createClassUnderTest ( ) . update ( oneRow ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( update ) ; }
private java.util.Collection < com.google.gerrit.reviewdb.RefRight > getWildProjectRights ( ) { final com.google.gerrit.server.project.ProjectState s = projectCache.get ( wildProject ) ; return s != null ? s.getLocalRights ( ) : java.util.Collections.< com.google.gerrit.reviewdb.RefRight > emptyList ( ) ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = new com.google.gerrit.testutil.TestNotesMigration ( ) ; }
public void setCurrentFilePaths ( java.util.List < java.lang.String > filePaths ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet ( ) ; if ( ps != null ) { files.put ( ps.getPatchSetId ( ) , com.google.common.collect.ImmutableList.copyOf ( filePaths ) ) ; } }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { this . session = session ; }
public void rebuildAndCheckAllChanges ( ) throws java.lang.Exception { rebuildAndCheckChanges ( com.google.common.collect.Iterables.transform ( getUnwrappedDb ( ) . changes ( ) . all ( ) , com.google.gerrit.reviewdb.server.ReviewDbUtil.changeIdFunction ( ) ) ) ; }
public void onSuccess ( java.lang.String result ) { text.setText ( result ) ; onCancel ( null ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.AccountExternalId > result ) { com.google.gerrit.reviewdb.AccountExternalId id = null ; for ( com.google.gerrit.reviewdb.AccountExternalId i : result ) { if ( i.isScheme ( com.google.gerrit.reviewdb.AccountExternalId.SCHEME_USERNAME ) ) { id = i ; break ; } } display ( id ) ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { return ( ( "/c/" + ( ps.getParentKey ( ) ) ) + "/" ) + ( ps.getId ( ) ) ; }
void onReply ( com.google.gwt.event.dom.client.ClickEvent e ) { replyAction.onReply ( ) ; }
public void addReviewerByEmailToReviewableChangeInReviewDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; forAll ( ( adder ) -> { java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
com.googlesource.gerrit.plugins.replication.PushAll create ( java.lang.String urlMatch , com.googlesource.gerrit.plugins.replication.ReplicationState state ) ;
public java.lang.String describeForException ( ) { if ( ( forUser ) == ( com.google.gerrit.server.permissions.LabelPermission.ForUser.ON_BEHALF_OF ) ) { return "labelAs " + ( name ) ; } return "label " + ( name ) ; }
public static void resetCurrentMillisSupplier ( ) { com.google.gerrit.common.TimeUtil.currentMillisSupplier = com.google.gerrit.common.TimeUtil.SYSTEM_CURRENT_MILLIS_SUPPLIER ; }
public void testValidateRefPatternsOK ( ) throws java.lang.Exception { com.google.gerrit.server.project.RefControl.validateRefPattern ( "refs/*" ) ; com.google.gerrit.server.project.RefControl.validateRefPattern ( "^refs/heads/*" ) ; com.google.gerrit.server.project.RefControl.validateRefPattern ( "^refs/tags/[0-9a-zA-Z-_.]+" ) ; com.google.gerrit.server.project.RefControl.validateRefPattern ( "refs/heads/review/${username}/*" ) ; }
void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public com.google.gerrit.server.change.PatchSetInserter setValidatePolicy ( com.google.gerrit.server.git.validators.CommitValidators.Policy validate ) { this . validatePolicy = com.google.common.base.Preconditions.checkNotNull ( validate ) ; return this ; }
public void ownerProject ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { onCallback ( result ) ; }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.httpd.UrlModule.toGerrit ( ( "/register" + ( req.getPathInfo ( ) ) ) , req , rsp ) ; }
void destroy ( final com.google.gerrit.httpd.WebSessionManager.Key key ) { self.invalidate ( key.token ) ; }
void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey newGroupName ) throws java.io.IOException ;
com.google.gerrit.httpd.raw.FontsServlet getFontsServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet ( cache , getPaths ( ) . buckOut ) ; }
public void setUp ( ) throws java.lang.Exception { configMock = createNiceMock ( com.google.gerrit.server.config.PluginConfig.class ) ; cfgFactoryMock = createMock ( com.google.gerrit.server.config.PluginConfigFactory.class ) ; org.easymock.EasyMock.expect ( cfgFactoryMock.getFromGerritConfig ( pluginName , true ) ) . andStubReturn ( configMock ) ; }
public void resetHtml ( final com.google.gerrit.client.ui.FancyFlexTable.MyFlexTable myTable , final com.google.gwtexpui.safehtml.client.SafeHtml body ) { com.google.gwtexpui.safehtml.client.SafeHtml.set ( com.google.gerrit.client.ui.FancyFlexTableImpl.getBodyElement ( myTable ) , body ) ; }
private java.util.List < com.google.gerrit.extensions.api.projects.TagInfo > getTags ( ) throws java.lang.Exception { return gApi.projects ( ) . name ( project.get ( ) ) . tags ( ) . get ( ) ; }
private static com.google.gerrit.server.account.WatchConfig.NotifyValue parseNotifyValue ( java.lang.String notifyValue ) throws org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.account.WatchConfig.NotifyValue.parse ( new com.google.gerrit.reviewdb.client.Account.Id ( 1000000 ) , "project" , notifyValue ) ; }
private void fireEvent ( final com.google.gerrit.reviewdb.Change change , final com.google.gerrit.common.ChangeHookRunner.ChangeEvent event ) { for ( com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( change , holder.user ) ) { holder.listener.onChangeEvent ( event ) ; } } }
public void rebuildAndCheckAllChanges ( ) throws java.lang.Exception { rebuildAndCheckChanges ( getUnwrappedDb ( ) . changes ( ) . all ( ) . toList ( ) . stream ( ) . map ( Change :: getId ) ) ; }
public void writeTo ( java.io.OutputStream os ) throws java.io.IOException { object.copyTo ( os ) ; }
public java.sql.Timestamp getMaxTimestamp ( ) { return new java.sql.Timestamp ( java.lang.Long.MAX_VALUE ) ; }
private static boolean autoReindexIfStale ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "index" , null , "testAutoReindexIfStale" , true ) ; }
public boolean enabled ( ) { return ( writeChanges ( ) ) || ( readChanges ( ) ) ; }
public void execute ( ) { file.setFocus ( true ) ; }
protected com.google.inject.binder.LinkedBindingBuilder < com.google.gerrit.lifecycle.LifecycleListener > listener ( ) { final java.lang.annotation.Annotation id = com.google.inject.internal.UniqueAnnotations.create ( ) ; return bind ( com.google.gerrit.lifecycle.LifecycleListener.class ) . annotatedWith ( id ) ; }
public boolean isCommitted ( ) { return false ; }
private com.google.gerrit.reviewdb.SchemaVersion getSchemaVersion ( final com.google.gerrit.reviewdb.ReviewDb db ) { try { return db.schemaVersion ( ) . get ( new com.google.gerrit.reviewdb.SchemaVersion.Key ( ) ) ; } catch ( com.google.gwtorm.client.OrmException e ) { return null ; } }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
public PatchSet.Id getPatchSetId ( ) throws java.io.IOException { init ( ) ; return patchSet.getId ( ) ; }
public void setUp ( ) throws java.lang.Exception { new com.google.gerrit.testutil.InMemoryModule ( ) . inject ( this ) ; }
public java.sql.Timestamp getCreatedOn ( ) { return createdOn ; }
public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage ( com.google.gerrit.server.update.BatchUpdate.ChangeContext ctx , java.lang.String body , @ com.google.gerrit.common.Nullable java.lang.String tag ) { return com.google.gerrit.server.ChangeMessagesUtil.newMessage ( ctx.getChange ( ) . currentPatchSetId ( ) , ctx.getUser ( ) , ctx.getWhen ( ) , body , tag ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testutil.IndexVersions.getWithoutLatest ( com.google.gerrit.server.index.project.ProjectSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testutil.IndexVersions.asConfigMap ( ProjectSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , defaultConfig ( ) ) ; }
void addLabel ( final java.lang.String token ) { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote.parse ( token ) ; customLabels.put ( v.getLabel ( ) , v.getValue ( ) ) ; }
public int getCost ( ) { return 2 ; }
private void assertCannotUpload ( com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.canPushToAtLeastOneRef ( ) ) . named ( "cannot upload" ) . isNotEqualTo ( Capable.OK ) ; }
protected com.google.gerrit.server.index.QueryOptions createOptions ( com.google.gerrit.server.index.IndexConfig indexConfig , int start , int limit , java.util.Set < java.lang.String > requestedFields ) { return com.google.gerrit.server.index.QueryOptions.create ( indexConfig , start , limit , requestedFields ) ; }
private static java.net.URL toURL ( java.nio.file.Path jarPath ) throws com.googlecode.prolog_cafe.compiler.CompileException { try { return jarPath.toUri ( ) . toURL ( ) ; } catch ( java.net.MalformedURLException e ) { throw new com.googlecode.prolog_cafe.compiler.CompileException ( ( "Cannot create URL for " + jarPath ) , e ) ; } }
public com.google.gerrit.extensions.common.ChangeInfo check ( com.google.gerrit.extensions.api.changes.FixInput fix ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return check.apply ( change , fix ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check change" , e ) ; } }
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.NoteDbMode.readWrite ( ) ) . isFalse ( ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; notesMigration.setAllEnabled ( false ) ; }
public void extend ( org.commonmark.parser.Parser.Builder builder ) { builder.customBlockParserFactory ( new com.google.gitiles.doc.MultiColumnExtension.DivParserFactory ( ) ) ; }
private static java.lang.StringBuilder buildRefsPrefix ( java.lang.String prefix , int id ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( prefix ) ; r.append ( com.google.gerrit.reviewdb.client.RefNames.shard ( id ) ) ; r.append ( '/' ) ; return r ; }
public void testGcNotAllowed_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , new com.google.gerrit.acceptance.RestSession ( server , accounts.create ( "user" , "user@example.com" , "User" ) ) . post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) ; }
public com.google.gerrit.common.data.GerritConfig get ( ) { return create ( ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { rebuild ( db , id ) ; } return null ; }
public void testEvictGroupsByIncludeOK ( ) throws java.lang.Exception { setupMocks ( Constants.GROUPS_BYINCLUDE , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.GROUPS_BYINCLUDE , createMock ( AccountGroup.UUID.class ) ) ) . isTrue ( ) ; }
private void abandon ( java.lang.String changeId , com.google.gerrit.acceptance.TestAccount by , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.NotifyHandling notify ) throws java.lang.Exception { abandon ( changeId , by , EmailStrategy.ENABLED , notify ) ; }
void onReplyDone ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( replyBox ) == null ) { com.google.gerrit.client.diff.DraftBox box = getDiffView ( ) . addReply ( getOriginal ( ) , "Done" , true ) ; registerReplyBox ( box ) ; } else { openReplyBox ( ) ; } }
protected void createProject ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws com.google.gerrit.extensions.restapi.RestApiException { createProject ( name , parent , true ) ; }
public static void display ( final java.lang.String historyToken , final boolean go ) { com.google.gwt.user.client.History.newItem ( historyToken , go ) ; if ( ( ! go ) && ( ( com.google.gerrit.client.Gerrit.historyHooks ) != null ) ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( historyToken ) ; } }
protected com.google.gerrit.server.update.Context newContext ( ) { return new com.google.gerrit.server.update.NoteDbBatchUpdate.ContextImpl ( ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { generation = g ; save.setEnabled ( ( ! ( cm.isClean ( g ) ) ) ) ; }
public static void comments ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.ChangeApi.revision ( id ) . view ( "comments" ) . get ( cb ) ; }
private com.google.gerrit.reviewdb.client.AccountSshKey getKey ( int seq ) { checkLoaded ( ) ; com.google.common.base.Optional < com.google.gerrit.reviewdb.client.AccountSshKey > key = keys.get ( ( seq - 1 ) ) ; return key.orNull ( ) ; }
com.google.gwtjsonrpc.client.CallbackHandle < com.google.gerrit.client.openid.DiscoveryResult > discover ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.openid.DiscoveryResult > callback ) ;
public void delete ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { delete ( changeDataFactory.create ( db , change ) ) ; }
public void run ( ) { runImp ( ) ; }
public final boolean canEdit ( com.google.gerrit.reviewdb.client.Account.FieldName f ) { return editableAccountFields ( ) . contains ( f ) ; }
public void save ( ) { lastUpdated = new java.util.Date ( ) ; com.googlesource.gerrit.plugins.repositoryuse.Ref.table.insertOrUpdate ( this ) ; com.googlesource.gerrit.plugins.repositoryuse.Ref.log.info ( java.lang.String.format ( "Saving Ref: %s, %s, %s" , project , ref , commit ) ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithTopic ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String topic ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , topic ) ; }
com.google.gerrit.reviewdb.AccountProjectWatchAccess accountProjectWatches ( ) ;
public void testParse_NameEmail5 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "A U Thor <author@example.com>" ) ; assertEquals ( "A U Thor" , a.name ) ; assertEquals ( "author@example.com" , a.email ) ; }
public static void createEdit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "create_edit" ) . post ( com.google.gwt.core.client.JavaScriptObject.createObject ( ) , cb ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.updateDocument ( term , doc ) ) ; }
public static final javax.servlet.http.HttpServletResponse getCurrentResponse ( ) { return com.google.gwtjsonrpc.server.JsonServlet.perThreadResponse.get ( ) ; }
private com.google.gerrit.client.ui.Screen select ( ) { java.lang.String p = "change,publish," ; if ( token.startsWith ( p ) ) return new com.google.gerrit.client.changes.PublishCommentScreen ( PatchSet.Id.parse ( com.google.gerrit.client.HistoryHandler.skip ( p , token ) ) ) ; return new com.google.gerrit.client.NotFoundScreen ( ) ; }
public void increasePushTaskCount ( ) { countingLock.lock ( ) ; try { ( totalPushTasksCount ) ++ ; } finally { countingLock.unlock ( ) ; } }
public java.sql.Connection getConnection ( java.lang.String username , java.lang.String password ) throws java.sql.SQLException { return java.sql.DriverManager.getConnection ( url , username , password ) ; }
public void shouldDispatchEvent ( ) { listenerMock.onEvent ( event ) ; replayAll ( ) ; broker.fireEventForUnrestrictedListeners ( event ) ; verifyAll ( ) ; }
public void putReviewer ( com.google.gerrit.reviewdb.client.Account.Id reviewer , com.google.gerrit.server.notedb.ReviewerState type ) { com.google.common.base.Preconditions.checkArgument ( ( type != ( ReviewerState.REMOVED ) ) , "invalid ReviewerType" ) ; reviewers.put ( reviewer , type ) ; }
public java.lang.String getHostName ( javax.servlet.http.HttpServletRequest req ) { return "test-host" ; }
public void want ( final java.lang.Iterable < com.google.gerrit.reviewdb.Account.Id > ids ) { for ( final com.google.gerrit.reviewdb.Account.Id id : ids ) { want ( id ) ; } }
public static < T > void setOf ( com.google.inject.Binder binder , java.lang.Class < T > member ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder , com.google.inject.TypeLiteral.get ( member ) ) ; }
public boolean accept ( java.io.File dir , java.lang.String name ) { return name.matches ( ( ( "^" + ( remove ) ) + "$" ) ) ; }
boolean isReviewed ( ) { return reviewed.getValue ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { l.setVisible ( false ) ; edit.setVisible ( false ) ; input.setVisible ( true ) ; save.setVisible ( true ) ; cancel.setVisible ( true ) ; }
public void setUp ( ) throws java.lang.Exception { admins = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "Administrators" ) ) . getGroupUUID ( ) ; setUpPermissions ( ) ; setUpChanges ( ) ; }
public final native void showWhitespaceErrors ( boolean s ) ;
void reload ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( changeId ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > getPastAssignees ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPastAssignees.apply ( change ) . value ( ) ; } catch ( java.lang.Exception e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get past assignees" , e ) ; } }
public com.google.gerrit.server.project.ProjectState get ( final com.google.gerrit.client.reviewdb.Project.Id projectId ) { return get0 ( projectId ) ; }
public void assertNoChangeRef ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ) { com.google.common.truth.Truth.assertThat ( repo.exactRef ( com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( changeId ) ) ) . isNull ( ) ; } }
private java.lang.String getRevision ( ) { return ( ( getRevisionA ( ) ) + "<->" ) + ( getRevisionB ( ) ) ; }
private static boolean isVisible ( com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psd , com.google.gerrit.server.project.ProjectControl ctl ) throws com.google.gwtorm.server.OrmException { return ctl.controlFor ( psd.data ( ) . notes ( ) ) . isPatchVisible ( psd.patchSet ( ) , psd.data ( ) ) ; }
public com.google.gerrit.server.change.ChangeJson addOption ( com.google.gerrit.common.changes.ListChangesOption o ) { options.add ( o ) ; return this ; }
public synchronized com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.server.account.AccountState state = byId.get ( accountId ) ; if ( state != null ) { return state ; } return com.google.gerrit.testing.FakeAccountCache.newState ( new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) ; }
void addApproval ( com.google.gerrit.server.change.ChangeJson.ApprovalInfo ai ) { if ( ( all ) == null ) { all = com.google.common.collect.Lists.newArrayList ( ) ; } all.add ( ai ) ; }
public int compare ( final com.google.gerrit.client.reviewdb.Project a , final com.google.gerrit.client.reviewdb.Project b ) { return a.getName ( ) . compareTo ( b.getName ( ) ) ; }
public void testFindInDeleteGap ( ) { com.google.gerrit.client.diff.LineMapper mapper = new com.google.gerrit.client.diff.LineMapper ( ) ; mapper.appendDelete ( 10 ) ; org.junit.Assert.assertEquals ( ( - 1 ) , mapper.lineOnOther ( Side.PARENT , 9 ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm sqrt ( ) { if ( ( this . val ) < 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "undefined" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( java.lang.Math.sqrt ( this . doubleValue ( ) ) ) ; }
private static java.lang.String last ( java.nio.file.Path dir ) { return dir.getName ( ( ( dir.getNameCount ( ) ) - 1 ) ) . toString ( ) ; }
private void openRepository ( ) throws com.google.gerrit.git.InvalidRepositoryException , com.google.gwtjsonrpc.server.XsrfException , com.google.gwtorm.client.OrmException { db = com.google.gerrit.server.GerritServer.getInstance ( ) . getRepositoryCache ( ) . get ( projectName ) ; }
public java.lang.String toString ( ) { return ( ( ( "GitHubLogin [token=" + ( token ) ) + ", myself=" ) + ( myself ) ) + "]" ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doLinkIdentity ( ) ; }
private com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String triplet , java.util.EnumSet < com.google.gerrit.extensions.common.ListChangesOption > s ) throws com.google.gerrit.extensions.restapi.RestApiException { return gApi.changes ( ) . id ( triplet ) . get ( s ) ; }
protected void configure ( ) { listener ( ) . to ( JettyServer.Lifecycle.class ) ; }
private void edit ( ) { text.setText ( comment.getMessage ( ) ) ; stateEdit ( true ) ; text.setFocus ( true ) ; }
protected java.nio.file.attribute.FileTime getLastModifiedTime ( java.nio.file.Path p ) { return com.google.gerrit.httpd.raw.DirectoryGwtUiServlet.NOW ; }
public com.google.common.collect.Table < com.google.gerrit.reviewdb.client.PatchSet.Id , java.lang.String , com.google.gerrit.reviewdb.client.PatchLineComment > getDraftPsComments ( com.google.gerrit.reviewdb.client.Account.Id author ) throws com.google.gwtorm.server.OrmException { loadDraftComments ( author ) ; return draftCommentNotes.getDraftPsComments ( ) ; }
public java.lang.String toString ( ) { return "Replicate All Projects" ; }
public java.sql.Timestamp getWhen ( ) { return when ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
com.google.gerrit.server.change.EmailReviewComments create ( com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notify , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.client.Account.Id authorId , com.google.gerrit.reviewdb.client.ChangeMessage message , java.util.List < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) ;
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.extensions.common.ListChangesOption ... options ) throws java.io.IOException { return getChange ( adminSession , changeId , options ) ; }
public com.google.gerrit.server.project.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfo ( resource.getControl ( ) , config , pluginConfigEntries , cfgFactory , views ) ; }
public void pushWithPrivateByDefaultDisabled ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( createChange ( project2 ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( false ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( new com.google.gerrit.server.query.change.ChangeData ( change ) , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public static final native void defineVimEx ( java.lang.String name , java.lang.String prefix , java.lang.Runnable thunk ) ;
public void addNonExistingMember_NotFound ( ) throws java.lang.Exception { int status = adminSession.put ( "/groups/Administrators/members/non-existing" ) . getStatusCode ( ) ; com.google.common.truth.Truth.assertThat ( status ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private final native java.lang.String downloadSchemeRaw ( ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
public long getLongParameter ( java.lang.String name , long defaultValue ) { return config.getLong ( RTCItsFacade.ITS_NAME_RTC , null , getParamName ( name ) , defaultValue ) ; }
public void warning ( java.lang.String msg ) { info ( msg ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.reviewdb.client.Project item ) { return item.getNameKey ( ) ; }
public boolean contains ( int idx ) ;
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.DraftActions.publish ( changeId , revision ) ; }
public boolean containsHeader ( java.lang.String name ) { return false ; }
public com.google.gerrit.extensions.common.DiffInfo diff ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDiff.apply ( file ) . value ( ) ; } catch ( java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve diff" , e ) ; } }
HEAD ( com.google.gerrit.server.change.c40c5c Merge ) { }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { if ( getUser ( ) . equals ( who ) ) { return this ; } return new com.google.gerrit.server.project.ChangeControl ( changeDataFactory , getRefControl ( ) . forUser ( who ) , notes ) ; }
public void restoreFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; modifyTree ( repository , edit , new com.google.gerrit.server.edit.tree.RestoreFileModification ( editCommit , file ) ) ; }
void setFocus ( final boolean take ) { text.setFocus ( take ) ; }
protected void configureCommands ( ) { command ( com.googlesource.gerrit.plugins.adminconsole.ShowAccountCommand.class ) ; alias ( "show-account" , com.googlesource.gerrit.plugins.adminconsole.ShowAccountCommand.class ) ; alias ( "show-repo-account-access" , com.googlesource.gerrit.plugins.adminconsole.ShowRepoAccountAccessCommand.class ) ; alias ( "show-repo-access" , com.googlesource.gerrit.plugins.adminconsole.ShowRepoAccessCommand.class ) ; }
public java.lang.String [ ] apply ( java.util.Collection < java.lang.String > values ) { return values.toArray ( new java.lang.String [ 0 ] ) ; }
public void addTreeModification ( com.google.gerrit.server.edit.tree.TreeModification treeModification ) { com.google.common.base.Preconditions.checkNotNull ( treeModification , "treeModification must not be null" ) ; treeModifications.add ( treeModification ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "submit" ) . post ( in , cb ) ; }
private com.google.gerrit.extensions.client.ChangeKind getChangeKind ( java.lang.String changeId ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes ( ) . id ( changeId ) . get ( java.util.EnumSet.of ( ListChangesOption.CURRENT_REVISION ) ) ; return c.revisions.get ( c.currentRevision ) . kind ; }
private void assertCannotUpdate ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { boolean update = u.asForProject ( ) . ref ( ref ) . testOrFalse ( RefPermission.UPDATE ) ; com.google.common.truth.Truth.assertThat ( update ) . named ( ( "cannot update " + ref ) ) . isFalse ( ) ; }
public ServiceUserResource.SshKey parse ( com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public com.google.gerrit.server.change.ChangeInserter setDraft ( ) { change.setStatus ( Change.Status.DRAFT ) ; patchSet.setDraft ( true ) ; return this ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission perm ) { return ! ( label ( perm.permissionName ( ) ) . isEmpty ( ) ) ; }
public com.google.gerrit.extensions.api.changes.ReviewResult review ( com.google.gerrit.extensions.api.changes.ReviewInput in ) { }
public void defaultGpgCertificationMatchesEmail ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; assertProblems ( com.google.gerrit.server.git.gpg.TestKey.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( "identities:\n" + " gerrit:user\n" ) + " username:user" ) ) ) ; addExternalId ( "test" , "test" , "test5@example.com" ) ; assertNoProblems ( key ) ; }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public void advertiseRefs ( org.eclipse.jgit.transport.BaseReceivePack rp ) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { com.google.gerrit.server.git.receive.ReceiveCommitsAdvertiseRefsHook.Result r = advertiseRefs ( com.google.gerrit.server.git.receive.HookUtil.ensureAllRefsAdvertised ( rp ) ) ; rp.setAdvertisedRefs ( r.allRefs ( ) , r.additionalHaves ( ) ) ; }
private boolean refUpdated ( org.eclipse.jgit.lib.RefUpdate.Result result ) { return ( result == ( RefUpdate.Result.NEW ) ) || ( result == ( RefUpdate.Result.FORCED ) ) ; }
public void testAcrossMultipleLines ( ) { com.google.gerrit.client.diff.SideBySide2.EditIterator iter = new com.google.gerrit.client.diff.SideBySide2.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 2 , 2 ) , iter.advance ( 10 ) ) ; }
public void includeNonExistingGroup ( ) throws java.lang.Exception { java.lang.String gx = group ( "gx" ) ; try { gApi.groups ( ) . id ( gx ) . addGroups ( "non-existing" ) ; } catch ( com.google.gerrit.extensions.restapi.UnprocessableEntityException expecetd ) { } }
protected void onResize ( final int width , final int height ) { center ( ) ; }
public com.google.gerrit.extensions.common.SshKeyInfo apply ( com.google.gerrit.reviewdb.client.AccountSshKey key ) { return com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo ( key ) ; }
abstract void createFileCommentEitorOnSideB ( ) ;
public void refsDraftCommentsPrefix ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.RefNames.refsDraftCommentsPrefix ( accountId ) ) . isEqualTo ( "refs/draft-comments/23/1011123/" ) ; }
public com.google.gerrit.reviewdb.Project getProject ( ) { return getProjectState ( ) . getProject ( ) ; }
private java.lang.String urlPublishEdit ( ) { return ( ( ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/publish/" ; }
public void matchingNames ( ) { matches ( "a.1234567890123.deleted" ) ; matches ( "aa.1234567890123.deleted" ) ; matches ( "a.b.c.1234567890123.deleted" ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( link ( getRowItem ( row ) ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNew ( ) ; }
public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentlink" , getCommentLinkName ( ) , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
private static void doCreateTable ( java.sql.Statement stmt ) throws java.sql.SQLException { stmt.executeUpdate ( ( "CREATE TABLE IF NOT EXISTS ACCOUNT_PATCH_REVIEWS (" + ( ( ( ( ( ( "ACCOUNT_ID INTEGER DEFAULT 0 NOT NULL, " + "CHANGE_ID INTEGER DEFAULT 0 NOT NULL, " ) + "PATCH_SET_ID INTEGER DEFAULT 0 NOT NULL, " ) + "FILE_NAME VARCHAR(255) DEFAULT '' NOT NULL, " ) + "CONSTRAINT PRIMARY_KEY_ACCOUNT_PATCH_REVIEWS " ) + "PRIMARY KEY (ACCOUNT_ID, CHANGE_ID, PATCH_SET_ID, FILE_NAME)" ) + ")" ) ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public static void updated ( final com.google.gerrit.reviewdb.client.Change c ) { c.setLastUpdatedOn ( new java.sql.Timestamp ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( c ) ; }
public static com.google.gerrit.client.change.Hashtags.Input create ( java.lang.String hashtag ) { com.google.gerrit.client.change.Hashtags.Input input = createObject ( ) . cast ( ) ; input.init ( hashtag ) ; return input ; }
private void logCanceledWhileRunningException ( org.eclipse.jgit.errors.TransportException e ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info ( ( ( ( "Cannot replicate to " + ( uri ) ) + "." ) + " It was canceled while running" ) , e ) ; }
public void doChangeRestoreHook ( com.google.gerrit.reviewdb.Change change , com.google.gerrit.reviewdb.Account account , java.lang.String reason , com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException ;
public void setFieldReference ( final com.google.gwtorm.schema.ColumnModel cm ) { col = cm ; ( columnIdx ) ++ ; }
private com.google.gerrit.acceptance.RestResponse publishChange ( java.lang.String changeId ) throws java.lang.Exception { return adminSession.post ( ( ( "/changes/" + changeId ) + "/publish" ) ) ; }
public void testCreateProjectHttpWhenProjectAlreadyExists_Conflict ( ) throws java.lang.Exception { adminSession.put ( ( "/projects/" + ( allProjects.get ( ) ) ) ) . assertConflict ( ) ; }
public com.google.gerrit.server.IdentifiedUser getUser ( ) { return ctl.getUser ( ) . asIdentifiedUser ( ) ; }
public static void refreshMenuBar ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( true ) ; }
void setName ( java.lang.String name ) { try { this . name = name ; id = java.net.URLEncoder.encode ( name , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { com.google.gerrit.server.project.ListProjects.log.warn ( "Cannot UTF-8 encode project id" , e ) ; } }
public com.google.gerrit.extensions.webui.UiAction.Description setVisible ( boolean visible ) { this . visible = visible ; return this ; }
public void close ( ) throws java.io.IOException { out.write ( html.substring ( ( gt + 1 ) ) . getBytes ( com.google.common.base.Charsets.UTF_8 ) ) ; out.close ( ) ; }
public void preDisplay ( final java.util.List < com.google.gerrit.common.data.AccountProjectWatchInfo > result ) { watchesTab.display ( result ) ; }
void onExpandAfter ( com.google.gwt.event.dom.client.ClickEvent e ) { expandAfter ( ) ; otherBar.expandAfter ( ) ; cm.focus ( ) ; }
public void evict ( com.google.gerrit.reviewdb.AccountProjectWatch.Key key ) ;
public int hashCode ( ) { return java.util.Objects.hash ( status , labels , errorMessage ) ; }
public static synchronized void useSystemTime ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; }
protected abstract void onLoad ( org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public final native boolean isDisabled ( ) ;
public static com.google.gerrit.server.index.FieldDef.Builder < java.lang.Integer > intRange ( java.lang.String name ) { return new com.google.gerrit.server.index.FieldDef.Builder ( FieldType.INTEGER_RANGE , name ) . stored ( ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setTitleText ( Util.C.allOpenChanges ( ) ) ; }
public void execute ( ) { final java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL ( ) ; Window.Location.assign ( ( base + "__BecomeAnyAccount" ) ) ; }
public void clear ( ) { waitForEmails ( ) ; synchronized ( messages ) { messages.clear ( ) ; } }
private void display ( final com.google.gerrit.client.reviewdb.AccountGeneralPreferences p ) { showSiteHeader.setValue ( p.isShowSiteHeader ( ) ) ; displayDefaultContext ( p.getDefaultContext ( ) ) ; }
private void addComment ( com.google.gerrit.server.data.ChangeAttribute change , java.lang.String comment ) throws java.io.IOException { java.lang.String gitComment = change.subject ; java.lang.String [ ] issues = getIssueIds ( gitComment ) ; for ( java.lang.String issue : issues ) { its.addComment ( issue , comment ) ; } }
private java.lang.String path ( java.io.File file ) { try { return file.getCanonicalPath ( ) ; } catch ( java.io.IOException err ) { return file.getAbsolutePath ( ) ; } }
public void noRevisionOptions ( ) throws java.lang.Exception { com.google.gerrit.server.change.ChangeJson.ChangeInfo c = getChange ( changeId ) ; org.junit.Assert.assertNull ( c.current_revision ) ; org.junit.Assert.assertNull ( c.revisions ) ; }
public void testlinkifyMessageUrlAndChangeId ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url/I0123456789" , "url" , "http://my/url/I0123456789" ) , com.google.common.collect.ImmutableMap.of ( "text" , " is not change " ) , com.google.common.collect.ImmutableMap.of ( "text" , "I0123456789" , "url" , "http://test-host-review/foo/#/q/I0123456789,n,z" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url/I0123456789 is not change I0123456789" ) ) ; }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > queryChanges ( java.lang.String projectName ) throws com.google.gerrit.extensions.restapi.BadRequestException , java.io.IOException ;
public com.google.gerrit.reviewdb.AccountGroup get ( final com.google.gerrit.reviewdb.AccountGroup.NameKey name ) { return byName.get ( name ) ; }
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; com.google.gerrit.server.Lifecycle.start ( dbInjector , sysInjector , sshInjector , webInjector ) ; }
public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { if ( ( event.getNativeKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE ) ) { suggestBox.setText ( "" ) ; com.google.gwt.event.logical.shared.CloseEvent.fire ( this , this ) ; } }
public final void update ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doUpdate ( instances , null ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo prefs ) { com.google.gerrit.client.Gerrit.setUserPreferences ( prefs ) ; enable ( true ) ; display ( prefs ) ; }
private java.lang.String urlDelete ( com.google.gerrit.reviewdb.client.Change c ) { return ( ( ( ( "/changes/" + ( c.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/files/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
private static void initLogSystem ( final java.io.File logdir ) { final org.apache.log4j.Logger root = org.apache.log4j.LogManager.getRootLogger ( ) ; root.removeAllAppenders ( ) ; root.addAppender ( com.google.gerrit.server.util.SystemLog.createAppender ( logdir , com.google.gerrit.pgm.util.ErrorLogFile.LOG_NAME , new org.apache.log4j.PatternLayout ( "[%d] %-5p %c %x: %m%n" ) ) ) ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { patchSetInserter.updateChange ( ctx ) ; rebasedPatchSet = patchSetInserter.getPatchSet ( ) ; }
private java.lang.String comparePattern ( ) { if ( getRefPattern ( ) . startsWith ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX ) ) { return getRefPattern ( ) . substring ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX.length ( ) ) ; } return getRefPattern ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; addExtensionPoints ( info , initCurrentRevision ( info ) ) ; loadConfigInfo ( info , base ) ; }
public boolean execute ( ) { if ( ( prefs.syntaxHighlighting ( ) ) && ( isAttached ( ) ) ) { setSyntaxHighlighting ( prefs.syntaxHighlighting ( ) ) ; } return false ; }
public java.lang.String getString ( java.lang.String fieldName ) { return getOptionalString ( fieldName ) . orElse ( "" ) ; }
public void testValidateBadRefPatternDanglingCharacter ( ) throws java.lang.Exception { com.google.gerrit.server.project.RefControl.validateRefPattern ( "^refs/heads/tmp/sdk/[0-9]{3,3}_R[1-9][A-Z][0-9]{3,3}*" ) ; }
void onExpandBefore ( com.google.gwt.event.dom.client.ClickEvent e ) { otherBar.expandBefore ( ) ; expandBefore ( ) ; cm.focus ( ) ; }
public void onSuccess ( final com.google.gerrit.common.data.GroupDetail groupDetail ) { saveName.setEnabled ( false ) ; setPageTitle ( Util.M.group ( groupDetail.group.getName ( ) ) ) ; display ( groupDetail ) ; }
public void testDefaultValue ( ) { com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.doCheckBlockedKeywords ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.getEmptyPluginConfig ( ) ) ) . isFalse ( ) ; }
public void run ( ) { switch ( getIntraLineStatus ( ) ) { case OFF : case OK : toggleShowIntraline ( ) ; break ; default : break ; } }
private void addGroup ( ) { com.google.gerrit.common.data.GroupReference ref = groupToAdd.getValue ( ) ; if ( ref != null ) { addGroup ( ref ) ; } else { groupToAdd.setFocus ( true ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public static com.google.inject.Key < org.apache.sshd.server.CommandFactory.Command > key ( final com.google.gerrit.sshd.CommandName name ) { return com.google.inject.Key.get ( CommandFactory.Command.class , name ) ; }
private void setNew ( com.google.gerrit.reviewdb.Change c , com.google.gerrit.reviewdb.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
public void setUp ( ) throws java.lang.Exception { new com.google.gerrit.testutil.InMemoryModule ( ) . inject ( this ) ; }
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.server.account.AccountState > i : getWriteIndexes ( ) ) { i.replace ( byIdCache.get ( id ) ) ; } }
public void onSuccess ( final com.google.gerrit.reviewdb.client.PatchLineComment result ) { enableButtons ( true ) ; notifyDraftDelta ( 1 ) ; createEditor ( result ) . setOpen ( false ) ; }
public com.google.gerrit.client.account.AgreementInfo run ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.account.AgreementInfo i = new com.google.gerrit.client.account.AgreementInfo ( ) ; i.load ( com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) , db ) ; return i ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; addExtensionPoints ( info ) ; loadConfigInfo ( info , base ) ; }
public void onDraftPublished ( com.google.gerrit.extensions.events.DraftPublishedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo c = event.getChange ( ) ; onEvent ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c.project ) , c._number , event.getWho ( ) . email ) ; }
private void autoReindexIfStale ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { if ( autoReindexIfStale ) { @ java.lang.SuppressWarnings ( value = "unused" ) java.util.concurrent.Future < ? > possiblyIgnoredError = reindexIfStale ( uuid ) ; } }
void setResult ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.server.update.NoteDbBatchUpdate.ChangeResult result ) { com.google.gerrit.server.update.NoteDbBatchUpdate.ChangeResult old = results.putIfAbsent ( id , result ) ; com.google.common.base.Preconditions.checkArgument ( ( old == null ) , "result for change %s already set: %s" , id , old ) ; }
public com.google.gitiles.GitilesView.Builder setRepositoryName ( java.lang.String repositoryName ) { if ( ( type ) == ( com.google.gitiles.GitilesView.Type.HOST_INDEX ) ) { throw new java.lang.IllegalStateException ( java.lang.String.format ( "cannot set repository name on %s view" , type ) ) ; } this . repositoryName = com.google.common.base.Preconditions.checkNotNull ( repositoryName ) ; return this ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Unmark private" ) . setTitle ( "Unmark change as private" ) . setVisible ( rsrc.getControl ( ) . isOwner ( ) ) ; }
public java.lang.String describeForException ( ) { return "label " + ( label ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { b.setEnabled ( true ) ; super . onFailure ( caught ) ; }
private void fMilliseconds ( final java.lang.String name , final float ms ) { p.println ( java.lang.String.format ( " %1$-12s: %2$6.2f ms" , name , ms ) ) ; }
public void setAllowRegisterNewEmail ( final boolean r ) { allowRegisterNewEmail = r ; }
public void suggestReviewersMaxNbrSuggestions ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "user" , 5 ) ; org.junit.Assert.assertEquals ( 2 , reviewers.size ( ) ) ; }
public void pushWithPrivateByDefaultDisabled ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( createChange ( ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( false ) ; }
protected void configure ( ) { factory ( ChangeDetailFactory.Factory.class ) ; factory ( PatchSetDetailFactory.Factory.class ) ; factory ( PatchSetPublishDetailFactory.Factory.class ) ; factory ( SubmitAction.Factory.class ) ; }
public void postRun ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.InitStep step : steps ) { if ( ( step instanceof com.google.gerrit.pgm.init.InitPlugins ) && ( flags.skipPlugins ) ) { continue ; } step.postRun ( ) ; } }
public boolean isSubmit ( ) { return com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId.SUBMIT.get ( ) . equals ( getLabelId ( ) . get ( ) ) ; }
HEAD ( ) { }
public java.util.List < com.googlesource.gerrit.plugins.gitblit.MenuEntry > getEntries ( ) { return java.util.Arrays.asList ( ( ( userProvider.get ( ) ) instanceof com.google.gerrit.server.AnonymousUser ? restrictedMenuEntries : fullMenuEntries ) ) ; }
public com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData apply ( com.google.gerrit.server.plugins.JarScanner.ClassData classData ) { return new com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData ( classData.className , classData.annotationValue , classData.interfaces ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.POST , cb ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.account.AccountCapabilities > cb , java.lang.String ... filter ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/self/capabilities" ) . addParameter ( "q" , filter ) . get ( cb ) ; }
public void run ( ) { if ( cm.hasActiveLine ( ) ) { newDraft ( cm ) ; } }
default java.lang.String describeForException ( ) { return toString ( ) . toLowerCase ( java.util.Locale.US ) . replace ( '_' , ' ' ) ; }
public void run ( ) { ( header.hasPrev ( ) ? header.prev : header.up ) . go ( ) ; }
private void initUserAuth ( final com.google.gerrit.server.GerritServer srv ) { setUserAuthFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.server.UserAuth > > asList ( new org.apache.sshd.server.auth.UserAuthPublicKey.Factory ( ) ) ) ; setPublickeyAuthenticator ( new com.google.gerrit.server.ssh.DatabasePubKeyAuth ( srv ) ) ; }
public void afterTest ( ) { }
public com.google.gerrit.client.rpc.RestApi data ( java.lang.String data ) { contentType = "text/plain; charset=utf-8" ; contentData = data ; return this ; }
private void publishMessageOnly ( ) throws com.google.gwtorm.client.OrmException { message ( null ) ; }
public final java.lang.String id_abbreviated ( ) { return new com.google.gerrit.reviewdb.client.Change.Key ( id ( ) ) . abbreviate ( ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) ;
public boolean hasTeamAccess ( java.lang.String repositoryName ) { for ( com.gitblit.models.TeamModel team : teams ) { if ( team.hasRepository ( repositoryName ) ) { return true ; } } return false ; }
void onRevert ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.RevertAction.call ( cherrypick , changeId , revision , project , subject ) ; }
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; manager.start ( ) ; }
void onLogout ( ) { async.append ( log ( "LOGOUT" ) ) ; audit ( context.get ( ) , "0" , "LOGOUT" ) ; }
private PatchSet.Id getPatchSetId ( com.google.gerrit.acceptance.git.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( c.getChangeId ( ) ) ) ) . currentPatchSetId ( ) ; }
public void negativeStartLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( ( - 1 ) , 2 , 19 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( ( ( java.lang.String ) ( key ) ) ) ; }
public void setAuthorNameText ( final java.lang.String nameText ) { header.setText ( 0 , 0 , nameText ) ; }
void submit ( com.googlesource.gerrit.plugins.hooks.HookArgs args ) { queue.submit ( path , args ) ; }
public void onFailure ( java.lang.Throwable caught ) { enable ( true ) ; super . onFailure ( caught ) ; }
protected void configure ( ) { install ( new com.google.inject.servlet.ServletModule ( ) { @ java.lang.Override protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.httpd.RequestCleanupFilter.class ) ; } } ) ; bind ( com.google.gerrit.server.util.RequestScopePropagator.class ) . to ( com.google.gerrit.server.util.GuiceRequestScopePropagator.class ) ; if ( wantSSL ) { install ( new com.google.gerrit.httpd.RequireSslFilter.Module ( ) ) ; } switch ( authConfig.getAuthType ( ) ) { case HTTP : case HTTP_LDAP : install ( new com.google.gerrit.httpd.auth.container.HttpAuthModule ( ) ) ; break ; case CLIENT_SSL_CERT_LDAP : install ( new com.google.gerrit.httpd.auth.container.HttpsClientSslCertModule ( ) ) ; break ; case LDAP : case LDAP_BIND : install ( new com.google.gerrit.httpd.auth.ldap.LdapAuthModule ( ) ) ; break ; case DEVELOPMENT_BECOME_ANY_ACCOUNT : install ( new com.google.inject.servlet.ServletModule ( ) { @ java.lang.Override protected void configureServlets ( ) { serve ( "/become" ) . with ( com.google.gerrit.httpd.auth.become.BecomeAnyAccountLoginServlet.class ) ; } } ) ; break ; case OPENID : case CUSTOM_EXTENSION : break ; default : throw new com.google.inject.ProvisionException ( ( "Unsupported loginType: " + ( authConfig.getAuthType ( ) ) ) ) ; } install ( new com.google.gerrit.httpd.UrlModule ( urlConfig ) ) ; install ( new com.google.gerrit.httpd.rpc.UiRpcModule ( ) ) ; install ( new com.google.gerrit.server.config.GerritRequestModule ( ) ) ; install ( new com.google.gerrit.httpd.GitOverHttpServlet.Module ( ) ) ; bind ( com.google.gerrit.httpd.GitWebConfig.class ) . toInstance ( gitWebConfig ) ; if ( ( gitWebConfig.getGitwebCGI ( ) ) != null ) { install ( new com.google.gerrit.httpd.gitweb.GitWebModule ( ) ) ; } bind ( com.google.gerrit.server.contact.ContactStore.class ) . toProvider ( com.google.gerrit.server.contact.ContactStoreProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.httpd.GerritConfigProvider.class ) ; bind ( com.google.gerrit.common.data.GerritConfig.class ) . toProvider ( com.google.gerrit.httpd.GerritConfigProvider.class ) ; bind ( com.google.gerrit.server.account.AccountManager.class ) ; bind ( com.google.gerrit.server.CurrentUser.class ) ; factory ( ChangeUserName.Factory.class ) ; factory ( ClearPassword.Factory.class ) ; factory ( CmdLineParser.Factory.class ) ; factory ( GeneratePassword.Factory.class ) ; bind ( java.net.SocketAddress.class ) . annotatedWith ( com.google.gerrit.server.RemotePeer.class ) . toProvider ( com.google.gerrit.httpd.HttpRemotePeerProvider.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . toProvider ( com.google.gerrit.httpd.HttpCurrentUserProvider.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toProvider ( com.google.gerrit.httpd.HttpIdentifiedUserProvider.class ) ; }
public void validCert ( ) throws java.lang.Exception { org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( validNonce ( ) , com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) ) ; assertProblems ( cert ) ; }
public java.lang.String toString ( ) { return toHeaderString ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { reviewers.onOpenForm ( ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public boolean supportsTeamMembershipChanges ( com.gitblit.models.TeamModel team ) { return false ; }
public void doClaSignupHook ( com.google.gerrit.reviewdb.Account account , com.google.gerrit.reviewdb.ContributorAgreement cla ) ;
public com.googlesrouce.gerrit.plugins.github.git.GHContent getFileContent ( java.lang.String path , java.lang.String ref ) throws java.io.IOException { return ghRepository.getFileContent ( path , ref ) ; }
public final native void matchBrackets ( boolean m ) ;
protected void bindOneDelete ( java.sql.PreparedStatement ps , com.google.gwtorm.jdbc.TestJdbcAccess.Data entity ) throws java.sql.SQLException { ps.setInt ( 1 , entity.id ) ; }
protected void onUnload ( ) { super . onUnload ( ) ; closePopup ( ) ; }
public void addCollaborators ( com.googlesrouce.gerrit.plugins.github.git.GHUser ... users ) throws java.io.IOException { ghRepository.addCollaborators ( users ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result deleteFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.DELETE_ENTRY , edit , file , null , null ) ; }
public java.lang.String getAvatarUrl ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return getAvatar.apply ( account ) . location ( ) ; }
public boolean enabled ( ) { return ( writeChanges ( ) ) || ( readChanges ( ) ) ; }
private void initEditor ( java.lang.String content ) { cm = net.codemirror.lib.CodeMirror.create ( editor , getConfig ( ) ) ; cm.setValue ( content ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
java.lang.String idFromHeader ( org.pegdown.ast.HeaderNode header ) { return ids.get ( header ) ; }
public void addIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { done.setEnabled ( true ) ; setOpen ( false ) ; getCommentManager ( ) . addDraftBox ( getCm ( ) . side ( ) , result ) ; }
public static void add ( com.google.gerrit.reviewdb.client.Change.Id change , com.google.gerrit.client.changes.ChangeInfo.RevisionInfo info ) { com.google.gerrit.client.changes.RevisionInfoCache.IMPL.psToCommit.put ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( change , info._number ( ) ) , info.name ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupOptions ( ) ; initGroupType ( ) ; initExternal ( ) ; }
void setToRetry ( ) { retrying = true ; ( retryCount ) ++ ; }
private static int getInt ( org.eclipse.jgit.transport.RemoteConfig rc , org.eclipse.jgit.lib.Config cfg , java.lang.String name , int defValue ) { return cfg.getInt ( "remote" , rc.getName ( ) , name , defValue ) ; }
public void setup ( com.gitblit.IStoredSettings settings ) { }
public static boolean isDisabled ( org.eclipse.jgit.lib.Config cfg ) { return ( "" . equals ( cfg.getString ( "gitweb" , null , "url" ) ) ) || ( "" . equals ( cfg.getString ( "gitweb" , null , "cgi" ) ) ) ; }
public com.google.gerrit.extensions.common.AccountInfo apply ( com.google.gerrit.reviewdb.client.Account.Id id ) { return accountLoader.get ( id ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE_STARRED ) ; }
public void onClose ( com.google.gwt.event.logical.shared.CloseEvent < com.google.gwt.user.client.ui.PopupPanel > event ) { view.getCmB ( ) . focus ( ) ; popup = null ; current = null ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { patchSetInserter.postUpdate ( ctx ) ; }
private void subSecondResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( 100 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
private com.google.gerrit.server.patch.PatchListKey keyFor ( final com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace ) { return new com.google.gerrit.server.patch.PatchListKey ( aId , bId , whitespace ) ; }
protected Account.Id getAccountId ( ) { return session.getAttribute ( SshUtil.CURRENT_ACCOUNT ) ; }
java.util.Collection < com.google.gerrit.reviewdb.client.AccountGroup.UUID > subgroupsOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) ;
public void cleanupIndex ( ) { com.google.gerrit.elasticsearch.ElasticQueryChangesTest.node.client ( ) . admin ( ) . indices ( ) . prepareDelete ( "gerrit" ) . execute ( ) ; com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes ( ) ; }
public com.google.gerrit.server.query.Predicate < T > parse ( java.lang.String query ) throws com.google.gerrit.server.query.QueryParseException { if ( com.google.common.base.Strings.isNullOrEmpty ( query ) ) { throw new com.google.gerrit.server.query.QueryParseException ( "query is empty" ) ; } return toPredicate ( com.google.gerrit.server.query.QueryParser.parse ( query ) ) ; }
private void allowTagDeletion ( ) throws java.lang.Exception { removePermission ( Permission.PUSH , project , "refs/tags/*" ) ; grant ( Permission.PUSH , project , "refs/tags/*" , true , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public void testKeyToString ( ) throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) . getPublicKey ( ) ; org.junit.Assert.assertEquals ( ( "46328A8C Testuser One <test1@example.com>" + " (04AE A7ED 2F82 1133 E5B1 28D1 ED06 25DC 4632 8A8C)" ) , com.google.gerrit.gpg.PublicKeyStore.keyToString ( key ) ) ; }
public void destroy ( ) { com.googlesource.gerrit.plugins.github.oauth.OAuthFilter.log.info ( "Init" ) ; }
public com.google.gerrit.server.account.AuthMethod getAuthMethod ( ) ;
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException , java.io.IOException { index ( newChangeData ( db , change ) ) ; }
private static boolean isNotSignedIn ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NotSignedInException.MESSAGE ) ) ; }
private com.google.gerrit.server.change.ChangeJson.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.server.change.ChangeJson.ApprovalInfo ai = new com.google.gerrit.server.change.ChangeJson.ApprovalInfo ( id ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
private void bindSkipLine ( int row , final int skipCnt ) { final com.google.gwt.user.client.ui.FlowPanel skipPanel = new com.google.gwt.user.client.ui.FlowPanel ( ) ; skipPanel.add ( new com.google.gwt.user.client.ui.InlineLabel ( PatchUtil.M.patchSkipRegion ( skipCnt ) ) ) ; table.setWidget ( row , 1 , skipPanel ) ; }
public boolean setTeamnamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > teamnames ) { return false ; }
private static boolean isTag ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { return cmd.getRefName ( ) . startsWith ( Constants.R_TAGS ) ; }
public boolean setUsernamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > usernames ) { return false ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return getProjectControl ( ) . getCurrentUser ( ) ; }
public final AccountGroup.UUID getOwnerUUID ( ) { java.lang.String owner = owner_uuid ( ) ; if ( owner != null ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( com.google.gwt.http.client.URL.decodePathSegment ( owner ) ) ; } return null ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.Event event ) { }
void createOrEditFileComment ( com.google.gerrit.client.diff.DisplaySide side ) { getPanelFromSide ( side ) . createOrEditFileComment ( ) ; updateFileCommentVisibility ( false ) ; }
public java.util.List < org.eclipse.jgit.diff.Edit > getEdits ( ) { return edits ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( ( - 1 ) ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( box.getText ( ) ) ) { box.setText ( Util.C.defaultProjectName ( ) ) ; box.addStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err ) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord ( ) ; rec.status = SubmitRecord.Status.RULE_ERROR ; rec.errorMessage = err ; return java.util.Collections.singletonList ( rec ) ; }
public java.util.Enumeration getInitParameterNames ( ) { return java.util.Collections.enumeration ( java.util.Collections.emptyList ( ) ) ; }
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { movePointerTo ( row ) ; }
private static boolean preferUnified ( ) { return ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) && ( DiffView.UNIFIED_DIFF.equals ( com.google.gerrit.client.Gerrit.getUserAccount ( ) . getGeneralPreferences ( ) . getDiffView ( ) ) ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.Change change ) ;
public com.google.gerrit.server.index.Schema.Builder < T > add ( com.google.gerrit.server.index.Schema < T > schema ) { this . fields.addAll ( schema.getFields ( ) . values ( ) ) ; return this ; }
public static java.lang.String mediumFormat ( final java.util.Date dt ) { if ( dt == null ) { return "" ; } com.google.gerrit.client.FormatUtil.ensureInited ( ) ; return com.google.gerrit.client.FormatUtil.dtfmt.format ( new java.util.Date ( dt.getTime ( ) ) ) ; }
private void redisplay ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
private void indent ( int depth ) { for ( int i = 0 ; i < depth ; i ++ ) { out.print ( " " ) ; } }
static com.google.gerrit.pgm.util.Die die ( java.lang.String why ) { return new com.google.gerrit.pgm.util.Die ( why ) ; }
public void commentOnReviewableChangeByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setEmailStrategy ( sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
void addGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { initialGroups.add ( id ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.common.data.AccountProjectWatchInfo > result ) { watches.display ( result ) ; }
private void clearForm ( ) { usernameTxt.setValue ( "" ) ; sshKeyTxt.setValue ( "" ) ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int start , int limit ) throws com.google.gerrit.server.query.QueryParseException ;
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.String [ ] > getParameterMap ( ) { return java.util.Collections.unmodifiableMap ( com.google.common.collect.Maps.transformValues ( parameters.asMap ( ) , com.google.gitiles.FakeHttpServletRequest.STRING_COLLECTION_TO_ARRAY ) ) ; }
abstract java.lang.Runnable toggleOpenBox ( final net.codemirror.lib.CodeMirror cm ) ;
public com.google.gerrit.extensions.client.InheritableBoolean apply ( com.google.gerrit.reviewdb.client.Project input ) { return input.getRejectImplicitMerges ( ) ; }
public final native net.codemirror.lib.KeyMap on ( java.lang.String key , boolean b ) ;
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( filterTxt.getText ( ) ) ) { filterTxt.setText ( Util.C.defaultFilter ( ) ) ; filterTxt.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
private final native void commentVisibilityStrategyRaw ( java.lang.String s ) ;
public com.google.gerrit.sshd.SshSession get ( ) { return com.google.gerrit.sshd.SshScope.getContext ( ) . session ; }
private static boolean isControlBlockStart ( com.google.gerrit.server.diff.Text a , int idx ) { return com.google.gerrit.server.patch.IntraLineLoader.CONTROL_BLOCK_START_RE.matcher ( a.getString ( idx ) ) . find ( ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; }
public boolean isVisible ( ) { return ( visibleForReplication ( ) ) || ( canPerformOnAnyRef ( ApprovalCategory.READ , ( ( short ) ( 1 ) ) ) ) ; }
public void build ( com.google.gerrit.httpd.raw.Label l ) throws com.google.gerrit.httpd.raw.BuildFailureException , java.io.IOException { throw new com.google.gerrit.httpd.raw.BuildFailureException ( "not implemented yet." . getBytes ( ) ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.Class < T > classOfT , java.lang.String additionalQueryString ) throws java.lang.Exception { return com.google.gitiles.ServletTest.newGson ( ) . fromJson ( buildJsonRaw ( path , additionalQueryString ) , classOfT ) ; }
public static synchronized void cleanup ( ) throws java.io.IOException { for ( java.io.File dir : com.google.gerrit.testutil.TempFileUtil.allDirsCreated ) { com.google.gerrit.testutil.TempFileUtil.recursivelyDelete ( dir ) ; } com.google.gerrit.testutil.TempFileUtil.allDirsCreated.clear ( ) ; }
protected com.google.gerrit.client.api.ExtensionPanel createExtensionPoint ( com.google.gerrit.client.GerritUiExtensionPoint extensionPoint ) { com.google.gerrit.client.api.ExtensionPanel extensionPanel = new com.google.gerrit.client.api.ExtensionPanel ( extensionPoint ) ; extensionPanel.putObject ( GerritUiExtensionPoint.Key.ACCOUNT_INFO , com.google.gerrit.client.Gerrit.getUserAccountInfo ( ) ) ; return extensionPanel ; }
protected void onOpenItem ( final com.google.gerrit.client.data.ChangeInfo c ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Link.toChange ( c ) , new com.google.gerrit.client.changes.ChangeScreen ( c ) ) ; }
private void parseComments ( ) throws java.io.IOException , java.text.ParseException , org.eclipse.jgit.errors.ConfigInvalidException { commentNoteMap = com.google.gerrit.server.notedb.CommentsInNotesUtil.parseCommentsFromNotes ( repo , com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( changeId ) , walk , changeId , commentsForBase , commentsForPs ) ; }
int getCookieAge ( ) { return ( ( int ) ( ( ( refreshCookieAt ) - ( java.lang.System.currentTimeMillis ( ) ) ) / 1000L ) ) ; }
public static void ensureConsistentWithGroupNameNotes ( org.eclipse.jgit.lib.Repository allUsersRepo , com.google.gerrit.server.group.InternalGroup group ) throws java.io.IOException { java.util.List < com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo > problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes ( allUsersRepo , group.getName ( ) , group.getGroupUUID ( ) ) ; problems.forEach ( com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker :: logConsistencyProblem ) ; }
public com.google.gerrit.extensions.common.ChangeInfo check ( com.google.gerrit.extensions.api.changes.FixInput fix ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return check.apply ( change , fix ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check change" , e ) ; } }
public static void store ( final com.google.gerrit.client.reviewdb.Account account , final com.google.gerrit.client.reviewdb.ContactInformation info ) throws com.google.gerrit.client.rpc.ContactInformationStoreException { com.google.gerrit.server.EncryptedContactStore.getInstance ( ) . storeImpl ( account , info ) ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "list" , true ) . get ( cb ) ; }
public void current ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.testutil.IndexVersionsTest.get ( com.google.gerrit.testutil.IndexVersions.CURRENT ) ) . containsExactly ( com.google.gerrit.testutil.IndexVersionsTest.SCHEMA_DEF.getLatest ( ) . getVersion ( ) ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
public void start ( ) { consoleReporter.start ( 1 , java.util.concurrent.TimeUnit.MINUTES ) ; }
org.eclipse.jgit.lib.Repository getChangeRepo ( ) throws java.io.IOException { initChangeRepo ( ) ; return changeRepo.repo ; }
public com.google.gerrit.server.project.ProjectState get ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) ;
public void visit ( org.pegdown.ast.HtmlBlockNode node ) { }
public void close ( ) { for ( com.google.gerrit.server.git.MergeOpRepoManager.OpenRepo repo : openRepos.values ( ) ) { repo.close ( ) ; } }
private com.google.gerrit.extensions.api.changes.ReviewInput createComment ( final java.lang.String commentTemplate ) { return new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . message ( getCommentFromFile ( commentTemplate ) ) ; }
public void testUpsertTwoSecondExistsing ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 0 , 1 ) ; java.sql.PreparedStatement insert = stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS ) ; verifyIds ( insert , 1 ) ; }
static java.io.File getDir ( com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { return new java.io.File ( sitePaths.index_dir , java.lang.String.format ( "%s%04d" , com.google.gerrit.lucene.LuceneVersionManager.CHANGES_PREFIX , schema.getVersion ( ) ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.PublishCommentScreen.ReviewInput result ) { if ( submit ) { submit ( ) ; } else { saveStateOnUnload = false ; goChange ( ) ; } }
public boolean canUpdate ( ) { if ( ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) && ( ! ( projectControl.isOwner ( ) ) ) ) { return false ; } return canPerform ( Permission.PUSH ) ; }
com.google.gerrit.server.CurrentUser getUser ( ) { return getControl ( ) . getUser ( ) ; }
public void onMouseUp ( final com.google.gwt.event.dom.client.MouseUpEvent e ) { on ( e ) ; }
org.pegdown.ast.ReferenceNode get ( org.pegdown.ast.SuperNode keyNode , java.lang.String text ) { java.lang.String id = ( keyNode != null ) ? com.google.gitiles.doc.MarkdownHelper.getInnerText ( keyNode ) : text ; return references.get ( com.google.gitiles.doc.ReferenceMap.key ( id ) ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAddReviewers ( reviewerIds , change.currentPatchSetId ( ) , db , txn ) ; }
DiffInfo.IntraLineStatus getIntraLineStatus ( ) { return diff.intraline_status ( ) ; }
private static native java.lang.String showTrailingWhitespace ( java.lang.String src ) ;
protected void configure ( ) { factory ( ChangeResource.Factory.class ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
java.lang.String getPath ( ) { return path ; }
public void run ( ) { renderSkips ( context ) ; }
public boolean yesno ( boolean def , java.lang.String msg ) { return ui.yesno ( def , msg ) ; }
public static java.lang.String refsStarredChanges ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES , changeId.get ( ) ) ; r.append ( accountId.get ( ) ) ; return r.toString ( ) ; }
public java.lang.String doProcess ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) { return com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson ( event ) ; }
public void modifyFile ( java.lang.String filePath , com.google.gerrit.extensions.restapi.RawInput newContent ) throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPut.apply ( changeResource.getControl ( ) , filePath , newContent ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot modify file of change edit" , e ) ; } }
public void stop ( ) { running = false ; int discarded = config.shutdown ( ) ; if ( discarded > 0 ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn ( java.lang.String.format ( "Cancelled %d replication events during shutdown" , discarded ) ) ; } }
private boolean canCreateCommit ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { if ( canUpdate ( ) ) { return true ; } else if ( isMergedIntoBranchOrTag ( repo , commit ) ) { return true ; } return false ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; change.setLastSha1MergeTested ( null ) ; return change ; } else { return null ; } }
public java.lang.String apply ( com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType notify ) { return notify.name ( ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String ref , org.eclipse.jgit.lib.ObjectId oldObjectId , org.eclipse.jgit.lib.ObjectId newObjectId , com.google.gerrit.reviewdb.client.Account updater ) { fire ( project , ref , oldObjectId , newObjectId , ReceiveCommand.Type.UPDATE , util.accountInfo ( updater ) ) ; }
com.google.gerrit.server.index.ChangeIndexer create ( com.google.gerrit.server.index.IndexCollection indexes ) ;
public void destroy ( ) { org.apache.sshd.server.Command cmd = atomicCmd.getAndSet ( null ) ; if ( cmd != null ) { cmd.destroy ( ) ; } }
public void onSignOut ( ) { }
public boolean isInGroup ( final com.google.gerrit.client.reviewdb.Account.Id accountId , final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { if ( ( isAnonymousUsers ( groupId ) ) || ( isRegisteredUsers ( groupId ) ) ) { return true ; } return getGroups ( accountId ) . contains ( groupId ) ; }
public com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Change.Id , java.lang.String > getProblems ( ) { return com.google.common.collect.ImmutableMultimap.copyOf ( problems ) ; }
public void changeAssigneeOnReviewableChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; assign ( sc , sc.owner , other ) ; sender.clear ( ) ; assign ( sc , sc.owner , sc.assignee ) ; assertThat ( sender ) . sent ( "setassignee" , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , other ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . to ( sc.assignee ) ; }
public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { subname = filterTxt.getValue ( ) ; onLoad ( ) ; }
java.util.Set < org.eclipse.jgit.lib.ObjectId > getAlreadyAccepted ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { if ( ( alreadyAccepted ) == null ) { alreadyAccepted = com.google.gerrit.server.git.strategy.SubmitDryRun.getAlreadyAccepted ( repo ) ; } return alreadyAccepted ; }
private void writeObject ( final java.io.ObjectOutputStream out ) throws java.io.IOException { out.writeUTF ( token ) ; }
public void execute ( ) { commentManager.insertNewDraft ( cm ) . run ( ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName.class ) . toProvider ( com.google.inject.util.Providers.of ( getConfiguredSecureStoreClass ( ) ) ) ; }
public final int hashCode ( ) { return java.util.Objects.hash ( readChanges ( ) , rawWriteChangesSetting ( ) , readChangeSequence ( ) , changePrimaryStorage ( ) , disableChangeReviewDb ( ) , fuseUpdates ( ) , failOnLoad ( ) ) ; }
public boolean shouldPublish ( ) { return config.isEnabled ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsers , change.getProject ( ) , change ) ; }
public final short changesPerPage ( ) { short changePerPage = get ( "changes_per_page" , AccountGeneralPreferences.DEFAULT_PAGESIZE ) ; return 0 < changePerPage ? changePerPage : com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DEFAULT_PAGESIZE ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.AccountExternalId > result ) { identites.display ( result ) ; identites.finishDisplay ( true ) ; }
public void run ( ) { closedIndex.close ( ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { return new NrtFuture ( writer.deleteDocuments ( term ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doChangeUserName ( ) ; }
public boolean match ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws com.google.gwtorm.server.OrmException { try { return groupControlFactory.controlFor ( user , group.getGroupUUID ( ) ) . isVisible ( ) ; } catch ( com.google.gerrit.common.errors.NoSuchGroupException e ) { return false ; } }
void onEditMode ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { fileTableMode = FileTable.Mode.EDIT ; refreshFileTable ( ) ; editMode.setVisible ( false ) ; addFile.setVisible ( true ) ; reviewMode.setVisible ( true ) ; }
public void testUsernameEmailPatternWithRegex ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.project.Util.DEVS , "^refs/sb/${username}/heads/.*" ) ; com.google.gerrit.server.project.ProjectControl u = util.user ( local , "d.v@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; com.google.gerrit.server.project.ProjectControl d = util.user ( local , "dev@ger-rit.org" , com.google.gerrit.server.project.Util.DEVS ) ; org.junit.Assert.assertFalse ( "u can't read" , u.controlForRef ( "refs/sb/dev@ger-rit.org/heads/foobar" ) . isVisible ( ) ) ; org.junit.Assert.assertTrue ( "d can read" , d.controlForRef ( "refs/sb/dev@ger-rit.org/heads/foobar" ) . isVisible ( ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountExternalIdInfo > getExternalIds ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return getExternalIds.apply ( account ) ; }
private java.lang.String problemsForSubmittingChangeset ( com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.server.git.ChangeSet cs , com.google.gerrit.server.IdentifiedUser identifiedUser ) { BRANCH ( 5.0 ) ; }
public void testVerifyAgainstDifferentOperation ( ) throws java.lang.Exception { java.lang.String token = auth.generateToken ( "o" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) , 1 ) ; com.google.common.truth.Truth.assertThat ( auth.verifyAgainstToken ( token , "p" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) ) ) . isFalse ( ) ; }
public void run ( ) { fixScroll ( cmA ) ; }
public void run ( ) throws com.google.gerrit.plugins.Failure { parseCommandLine ( ) ; final java.io.PrintWriter stdout = toPrintWriter ( out ) ; stdout.println ( "Hello world!" ) ; stdout.flush ( ) ; }
protected void rcptToAuthors ( final com.google.gerrit.server.mail.RecipientType rt ) { for ( final com.google.gerrit.reviewdb.client.Account.Id id : authors ) { add ( rt , id ) ; } }
public com.google.gerrit.server.change.PatchSetInserter setRefControl ( com.google.gerrit.server.project.RefControl refControl ) { this . refControl = refControl ; return this ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > toList ( ) { java.util.List < com.google.gerrit.server.query.change.ChangeData > r = rs.toList ( ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : r ) { cd.cacheFromSource ( source ) ; } return r ; }
private com.google.gerrit.server.change.ChangeJson.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value ) { com.google.gerrit.server.change.ChangeJson.ApprovalInfo ai = new com.google.gerrit.server.change.ChangeJson.ApprovalInfo ( id ) ; ai.value = value ; accountLoader.put ( ai ) ; return ai ; }
public java.util.Map < java.lang.String , com.google.gitiles.RepositoryDescription > listRepositories ( java.util.Set < java.lang.String > branches ) { return java.util.Collections.emptyMap ( ) ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; factory ( DraftCommentNotes.Factory.class ) ; factory ( NoteDbUpdateManager.Factory.class ) ; }
protected java.lang.String getSourceUri ( ) { return gitHubRepository.cloneUrl ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; }
protected void init ( ) throws com.google.gerrit.server.mail.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; bccWatches ( NotifyType.ALL_COMMENTS ) ; bccWatches ( NotifyType.SUBMITTED_CHANGES ) ; }
private int getRandomExecutionDelay ( com.googlesrouce.gerrit.plugins.github.git.GitJob job ) { java.util.Random rnd = new java.util.Random ( ( ( java.lang.System.currentTimeMillis ( ) ) + ( job.hashCode ( ) ) ) ) ; return rnd.nextInt ( com.googlesrouce.gerrit.plugins.github.git.JobExecutor.MAX_EXEC_TIMEOUT_SECS ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; if ( ( c.getRevId ( ) ) == null ) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId ( c , cache , change , ps ) ; } update.putComment ( c ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.sql.Timestamp o ) { sb.append ( '"' ) ; sb.append ( com.google.gwtjsonrpc.client.JavaSqlTimestamp_JsonSerializer.toString ( o ) ) ; sb.append ( '"' ) ; }
com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) ;
public void setUpMocks ( ) { servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet ( indexerMock ) ; uuid = AccountGroup.UUID.parse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServletTest.UUID ) ; org.mockito.Mockito.when ( requestMock.getPathInfo ( ) ) . thenReturn ( ( "/index/group/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServletTest.UUID ) ) ) ; }
public < T > T execute ( com.google.gerrit.server.update.RetryHelper.Action < T > action ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return execute ( action , null ) ; }
public boolean canAbandon ( ) { return ( ( isOwner ( ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public void emptyExceptSubject ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( newChange ( ) , changeOwner ) ; update.setSubject ( "Create change" ) ; update.commit ( ) ; com.google.common.truth.Truth.assertThat ( update.getRevision ( ) ) . isNotNull ( ) ; }
public void onSuccess ( final com.google.gerrit.client.data.GerritConfig result ) { com.google.gerrit.client.rpc.Common.setGerritConfig ( result ) ; onModuleLoad2 ( ) ; }
protected void initPatchSetListForTableHeader ( ) { psListOfHeaderA = new com.google.gerrit.client.patches.PatchSetSelectBox ( PatchSetSelectBox.Side.A , PatchScreen.Type.SIDE_BY_SIDE ) ; psListOfHeaderB = new com.google.gerrit.client.patches.PatchSetSelectBox ( PatchSetSelectBox.Side.B , PatchScreen.Type.SIDE_BY_SIDE ) ; }
public static java.lang.String createCommit ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent i , java.lang.String msg ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.GitUtil.createCommit ( git , i , msg , true , false ) ; }
public void onSuccess ( com.google.gerrit.client.changes.CommentInfo result ) { enableEdit ( true ) ; set ( result ) ; setEdit ( false ) ; if ( autoClosed ) { setOpen ( false ) ; } getDiffScreen ( ) . updateUnsaved ( this , false ) ; }
public com.google.gerrit.reviewdb.Account get ( final com.google.gerrit.reviewdb.Account.Id id ) { want ( id ) ; return out.get ( id ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
com.google.gerrit.httpd.rpc.project.ReviewProjectAccess create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Project.NameKey projectName , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId base , @ com.google.inject.assistedinject.Assisted java.util.List < com.google.gerrit.common.data.AccessSection > sectionList , @ com.google.gerrit.common.Nullable java.lang.String message ) ;
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { new com.google.gerrit.client.auth.openid.OpenIdSignInDialog ( com.google.gerrit.common.auth.SignInMode.LINK_IDENTIY , null ) . center ( ) ; }
public boolean isInternal ( ) { return ( getGroup ( ) ) instanceof com.google.gerrit.common.data.GroupDescription.Internal ; }
private boolean shouldReplicate ( final com.google.gerrit.reviewdb.client.Project.NameKey project ) { }
public void updateSchema ( com.google.gwtorm.server.StatementExecutor e ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public void removeHandler ( ) { com.google.gwtexpui.globalkey.client.GlobalKey.keys.remove ( set ) ; }
protected void configure ( ) { listener ( ) . to ( com.google.gerrit.sshd.SshDaemon.class ) ; }
public void visibleProjectDetails ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ProjectDetail > > callback ) { visibleProjectDetailsFactory.create ( ) . to ( callback ) ; }
void at ( int line ) { at ( net.codemirror.lib.CodeMirror.pos ( line ) , net.codemirror.lib.CodeMirror.pos ( ( line + 1 ) ) ) ; }
protected com.google.gerrit.client.patches.MyFlexTable createFlexTable ( ) { return new com.google.gerrit.client.patches.AbstractPatchContentTable.DoubleClickFlexTable ( ) ; }
private void assertCanUpload ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canUpload ( ) ) . named ( ( "can upload " + ref ) ) . isTrue ( ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { doAddNew ( ) ; }
protected void onOpenRow ( final int row ) { if ( row > 0 ) { com.google.gerrit.reviewdb.RefRight right = getRowItem ( row ) ; rightEditor.load ( right , groups.get ( right.getAccountGroupId ( ) ) ) ; } }
private static com.google.gwt.user.client.ui.ListBox newInheritedBooleanBox ( ) { com.google.gwt.user.client.ui.ListBox box = new com.google.gwt.user.client.ui.ListBox ( ) ; for ( com.google.gerrit.extensions.common.InheritableBoolean b : com.google.gerrit.extensions.common.InheritableBoolean.values ( ) ) { box.addItem ( b.name ( ) , b.name ( ) ) ; } return box ; }
public static com.google.inject.Key < org.apache.sshd.server.CommandFactory.Command > key ( final com.google.gerrit.sshd.CommandName parent , final java.lang.String name ) { return com.google.inject.Key.get ( CommandFactory.Command.class , com.google.gerrit.sshd.Commands.named ( parent , name ) ) ; }
public java.lang.String getSshKey ( ) { return ( sshKey ) != null ? ( sshKey.getSshPublicKey ( ) ) + "\n" : null ; }
private void banner ( ) { java.lang.System.err.format ( "Gerrit Code Review %s - Interactive Prolog Shell" , com.google.gerrit.common.Version.getVersion ( ) ) ; java.lang.System.err.println ( ) ; java.lang.System.err.println ( ( "(type Ctrl-D or \"halt.\" to exit," + " \"[\'path/to/file.pl\'].\" to load a file)" ) ) ; java.lang.System.err.println ( ) ; java.lang.System.err.flush ( ) ; }
protected void onLoad ( ) { com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { message.setFocus ( true ) ; } } ) ; }
protected void configure ( ) { filterRegex ( ".*\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; }
public void loadGerritConfig ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.GerritConfig > callback ) { callback.onSuccess ( server.getGerritConfig ( ) ) ; }
public int getCardinality ( ) { return source.getCardinality ( ) ; }
void addRight ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gerrit.reviewdb.ApprovalCategory.Id categoryId , java.lang.String groupName , short min , short max , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
default com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > keyPredicate ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) { return com.google.gerrit.server.query.project.ProjectPredicates.name ( nameKey ) ; }
private static void checkCounterDescription ( com.google.gerrit.metrics.Description desc ) { com.google.common.base.Preconditions.checkArgument ( ( ! ( desc.isGauge ( ) ) ) , "counters must not be gauge" ) ; }
public void createMergeChange ( ) throws java.lang.Exception { changeInTwoBranches ( "a.txt" , "b.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "master" , "branchA" , ChangeStatus.NEW ) ; assertCreateSucceeds ( in ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.PatchLineComment > result ) { if ( ! ( result.isEmpty ( ) ) ) { bindDrafts ( result ) ; } }
public void removeCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self.removeCacheUsageListener ( cacheUsageListener ) ; }
com.google.gerrit.server.query.change.ChangeData createOnlyWhenNotedbDisabled ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id id ) ;
boolean isOwner ( ) { return ( ( isDeclaredOwner ( ) ) && ( ! ( controlForRef ( "refs/*" ) . isBlocked ( Permission.OWNER ) ) ) ) || ( isAdmin ( ) ) ; }
public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy legacyItsAssociationPolicy = gerritConfig.getEnum ( "commentLink" , getCommentLinkName ( ) , "association" , ItsAssociationPolicy.OPTIONAL ) ; return getPluginConfigEnum ( "association" , legacyItsAssociationPolicy ) ; }
public com.google.common.collect.ImmutableList < com.google.gerrit.reviewdb.client.AccountGroup > getAll ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.ImmutableList.copyOf ( db.accountGroups ( ) . all ( ) ) ; }
private void setPaddingHeight ( int height ) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx ( wrapper.element , height ) ; wrapper.widget.changed ( ) ; }
public void onCallStart ( ) ;
void replicate ( java.lang.String ref ) { replication.fire ( projectName , ref ) ; }
private java.lang.String getPassword ( ) { final java.lang.String pass = gerritConfig.getString ( com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.ITS_NAME_BUGZILLA , null , com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.GERRIT_CONFIG_PASSWORD ) ; return pass ; }
public void setFocus ( boolean focused ) { suggestBox.setFocus ( focused ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { if ( actionId.canInheritFromWildProject ( ) ) { return filter ( projectControl.getProjectState ( ) . getInheritedRights ( ) , actionId ) ; } else { return java.util.Collections.emptyList ( ) ; } }
public void listTagsOfNonVisibleBranch ( ) throws java.lang.Exception { grant ( Permission.SUBMIT , project , "refs/for/refs/heads/master" ) ; grant ( Permission.SUBMIT , project , "refs/for/refs/heads/hidden" ) ; grant ( Permission.CREATE , project , "refs/tags/*" ) ; grant ( Permission.PUSH , project , "refs/tags/*" ) ; com.google.gerrit.acceptance.PushOneCommit.Tag tag1 = new com.google.gerrit.acceptance.PushOneCommit.Tag ( "v1.0" ) ; com.google.gerrit.acceptance.PushOneCommit push1 = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; push1.setTag ( tag1 ) ; com.google.gerrit.acceptance.PushOneCommit.Result r1 = push1.to ( "refs/for/master%submit" ) ; r1.assertOkStatus ( ) ; pushTo ( "refs/heads/hidden" ) ; com.google.gerrit.acceptance.PushOneCommit.Tag tag2 = new com.google.gerrit.acceptance.PushOneCommit.Tag ( "v2.0" ) ; com.google.gerrit.acceptance.PushOneCommit push2 = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; push2.setTag ( tag2 ) ; com.google.gerrit.acceptance.PushOneCommit.Result r2 = push2.to ( "refs/for/hidden%submit" ) ; r2.assertOkStatus ( ) ; java.util.List < com.google.gerrit.extensions.api.projects.TagInfo > result = getTags ( ) ; com.google.common.truth.Truth.assertThat ( result ) . hasSize ( 2 ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag1.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . revision ) . isEqualTo ( r1.getCommitId ( ) . getName ( ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 1 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag2.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 1 ) . revision ) . isEqualTo ( r2.getCommitId ( ) . getName ( ) ) ; blockRead ( project , "refs/heads/hidden" ) ; result = getTags ( ) ; com.google.common.truth.Truth.assertThat ( result ) . hasSize ( 1 ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . ref ) . isEqualTo ( ( "refs/tags/" + ( tag1.name ) ) ) ; com.google.common.truth.Truth.assertThat ( result.get ( 0 ) . revision ) . isEqualTo ( r1.getCommitId ( ) . getName ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { changeScreen.update ( result ) ; }
public java.io.PrintWriter getWriter ( ) throws java.io.IOException { return new java.io.PrintWriter ( outputStream ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { deleteTask ( cd ) . call ( ) ; } catch ( java.lang.RuntimeException e ) { throw e ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.index.ChangeIndexer.MAPPER.apply ( e ) ; } }
protected com.google.gerrit.pgm.CmdLineParser newCmdLineParserInstance ( java.lang.Object bean ) { return new com.google.gerrit.pgm.CmdLineParser ( bean ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.Change change ) ;
public void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
public abstract int getCost ( ) ;
public com.google.gerrit.server.query.change.QueryOptions withStart ( int newStart ) { return com.google.gerrit.server.query.change.QueryOptions.create ( config ( ) , newStart , limit ( ) ) ; }
public com.google.gerrit.extensions.auth.oauth.OAuthUserInfo getUserInfo ( com.google.gerrit.extensions.auth.oauth.OAuthToken token ) throws java.io.IOException { return getAsOAuthUserInfo ( uaaClient.toAccessToken ( token.getToken ( ) ) ) ; }
private void stubExecuteBatchException ( java.lang.String command , java.sql.SQLException e ) throws java.sql.SQLException { java.sql.PreparedStatement ps = setupPreparedStatementException ( e ) ; org.mockito.Mockito.stub ( conn.prepareStatement ( command ) ) . toReturn ( ps ) ; }
public final com.google.common.collect.ImmutableMap < java.lang.String , com.google.gerrit.server.index.FieldDef < T , ? > > getFields ( ) { return fields ; }
public boolean supportsCookies ( ) { return false ; }
public void log ( final org.eclipse.jetty.server.Request req , final org.eclipse.jetty.server.Response rsp ) { com.google.inject.servlet.GuiceHelper.runInContext ( req , rsp , new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { doLog ( req , rsp ) ; } } ) ; }
public void emptyResultIfInvalid ( ) { java.util.Collection < com.google.gerrit.common.data.SubmitRecord > submitRecords = new java.util.ArrayList < > ( ) ; submitRecords.add ( com.google.gerrit.common.data.SubmitRecordTest.NOT_READY_RECORD ) ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.common.data.SubmitRecord.findOkRecord ( submitRecords ) . isPresent ( ) ) . isFalse ( ) ; }
public com.google.gerrit.server.query.change.ListChanges setFormat ( com.google.gerrit.server.OutputFormat fmt ) { this . format = fmt ; return this ; }
protected void configureServlets ( ) { serveRegex ( "/index/\\d+$" ) . with ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexRestApiServlet.class ) ; }
public void putRobotComment ( com.google.gerrit.reviewdb.client.RobotComment c ) { verifyComment ( c ) ; createRobotCommentUpdateIfNull ( ) ; robotCommentUpdate.putComment ( c ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; }
private org.eclipse.jgit.lib.ObjectInserter getInseter ( ) { if ( ( inserter ) == null ) { inserter = git.newObjectInserter ( ) ; } return inserter ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > getChangesByTopic ( java.lang.String topic ) { try { return queryProvider.get ( ) . byTopicOpen ( topic ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gwtorm.server.OrmRuntimeException ( e ) ; } }
public final native void setCursor ( net.codemirror.lib.LineCharacter lineCh ) ;
private void downloadOptionalLibraries ( ) { createDownloader ( ) . setRequired ( false ) . setName ( "Bouncy Castle Crypto v144" ) . setJarUrl ( "http://www.bouncycastle.org/download/bcprov-jdk16-144.jar" ) . setSHA1 ( "6327a5f7a3dc45e0fd735adb5d08c5a74c05c20c" ) . download ( ) ; loadSiteLib ( ) ; }
private static java.lang.String changePermissionName ( com.google.gerrit.server.permissions.ChangePermission changePermission ) { return com.google.gerrit.server.permissions.DefaultPermissionMappings.changePermissionName ( changePermission ) . orElseThrow ( ( ) -> new java.lang.IllegalStateException ( ) ) ; }
public void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.client.AccountExternalId > result ) { com.google.gerrit.reviewdb.client.AccountExternalId id = null ; for ( com.google.gerrit.reviewdb.client.AccountExternalId i : result ) { if ( i.isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME ) ) { id = i ; break ; } } display ( id ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byProjectOpen ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( com.google.gerrit.server.query.change.InternalChangeQuery.project ( projectName ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public static java.lang.String getJarPluginName ( java.io.File srcFile ) throws java.io.IOException { try ( java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( srcFile ) ) { return jarFile.getManifest ( ) . getMainAttributes ( ) . getValue ( "Gerrit-PluginName" ) ; } }
public static java.lang.String generateRandomKey ( ) { final byte [ ] r = new byte [ 26 ] ; new java.security.SecureRandom ( ) . nextBytes ( r ) ; return com.google.gwtjsonrpc.server.XsrfUtil.encodeBase64 ( r ) ; }
public void multipleHashtags ( ) throws java.lang.Exception { java.lang.String commitMessage = "#Subject\n\n#Hashtag\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "Subject" , "Hashtag" ) ) ; }
protected java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > listComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return db.get ( ) . patchComments ( ) . draftByPatchSetAuthor ( rsrc.getPatchSet ( ) . getId ( ) , rsrc.getAccountId ( ) ) ; }
private void openFooter ( ) { body.append ( "--\n" ) ; }
public void evictAfterRename ( final com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) { byName.remove ( oldName ) ; }
private com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.StarredChange > starredQuery ( ) throws com.google.gwtorm.server.OrmException { return dbProvider.get ( ) . starredChanges ( ) . byAccount ( getAccountId ( ) ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.client.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
public static java.lang.String toChangeInEditMode ( com.google.gerrit.reviewdb.client.Change.Id c ) { return ( "/c/" + c ) + ",edit/" ; }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public java.sql.Timestamp fromJson ( final java.lang.Object o ) { if ( o != null ) { return java.sql.Timestamp.valueOf ( ( ( java.lang.String ) ( o ) ) ) ; } return null ; }
private boolean canUnignore ( com.google.gerrit.server.change.ChangeResource rsrc ) { return ( ! ( rsrc.isUserOwner ( ) ) ) && ( isIgnored ( rsrc ) ) ; }
public void sendErrorThrowsIOException ( ) throws java.lang.Exception { rsp.sendError ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND , "Error trying to find a change \n" ) ; org.easymock.EasyMock.expectLastCall ( ) . andThrow ( new java.io.IOException ( "someError" ) ) ; setupPostMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.THROW_ORM_EXCEPTION ) ; verifyPost ( ) ; }
private void autoReindexIfStale ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( autoReindexIfStale ) { @ java.lang.SuppressWarnings ( value = "unused" ) java.util.concurrent.Future < ? > possiblyIgnoredError = reindexIfStale ( id ) ; } }
public java.lang.Iterable < com.google.gerrit.sshd.SshKeyCacheEntry > get ( java.lang.String username ) { return cache.get ( username ) . getSshKeyCacheEntries ( ) ; }
java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > putGpgKeys ( java.util.List < java.lang.String > add ) throws com.google.gerrit.extensions.restapi.RestApiException ;
com.google.gerrit.server.change.RebaseChangeOp create ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet originalPatchSet , @ com.google.gerrit.common.Nullable java.lang.String baseCommitish ) ;
public void onSuccess ( com.google.gerrit.client.changes.SubmitInfo result ) { saveStateOnUnload = false ; goChange ( ) ; }
public static void fireShowChange ( com.google.gerrit.client.changes.ChangeInfo change , com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev ) { com.google.gerrit.client.api.ApiGlue.fireEvent ( "showchange" , change , rev ) ; }
private void commit ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys ) throws java.io.IOException { try ( com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.get ( ) . create ( allUsersName , userFactory.create ( authorizedKeys.accountId ) ) ) { authorizedKeys.commit ( md ) ; } }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , caller ) ; }
HEAD ( com.google.gerrit.prettify.common.f4c716 Gave ) { }
public static < T > com.google.inject.binder.LinkedBindingBuilder < T > bind ( com.google.inject.Binder binder , java.lang.Class < T > type , com.google.inject.name.Named name ) { return com.google.gerrit.extensions.registration.DynamicSet.bind ( binder , com.google.inject.TypeLiteral.get ( type ) ) ; }
public void run ( ) { widget.setVisible ( true ) ; }
public com.google.gerrit.client.account.SshKeyList run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return new com.google.gerrit.client.account.SshKeyList ( db.accountSshKeys ( ) . byAccount ( com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ) . toList ( ) ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.patch.PatchDetailServiceImpl ( server ) ; }
public void fooBarSubdirText ( ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = buildText ( "/foo/bar/" ) ; org.junit.Assert.assertEquals ( "repo\n" , new java.lang.String ( res.getActualBody ( ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; }
public void parse ( ) { generalPreferences = parseGeneralPreferences ( null ) ; diffPreferences = parseDiffPreferences ( null ) ; }
public void setStatus ( com.google.gerrit.reviewdb.client.Change.Status status ) { com.google.common.base.Preconditions.checkArgument ( ( status != ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.MERGED ) ) , "use submit(Iterable<PatchSetApproval>)" ) ; this . status = status ; }
public void addChange ( java.lang.String id , java.util.Map < com.google.gerrit.reviewdb.client.Change.Id , com.google.gerrit.server.change.ChangeResource > changes , com.google.gerrit.server.project.ProjectControl projectControl ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.sshd.BaseCommand.UnloggedFailure , com.google.gwtorm.server.OrmException { addChange ( id , changes , projectControl , true ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg ) throws java.io.IOException { com.google.gerrit.httpd.restapi.RestApiServlet.replyError ( req , res , statusCode , msg , CacheControl.NONE ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.setStatus ( Change.Status.ABANDONED ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } else { return null ; } }
public com.google.gerrit.server.plugins.ServerPlugin get ( java.io.File srcFile , org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot , com.google.gerrit.server.plugins.PluginDescription pluginDescription ) throws com.google.gerrit.server.plugins.InvalidPluginException { return providerOf ( srcFile ) . get ( srcFile , snapshot , pluginDescription ) ; }
public void deleteExternalIds ( final java.util.Set < com.google.gerrit.reviewdb.client.AccountExternalId.Key > keys , final com.google.gwt.user.client.rpc.AsyncCallback < java.util.Set < com.google.gerrit.reviewdb.client.AccountExternalId.Key > > callback ) { deleteExternalIdsFactory.create ( keys ) . to ( callback ) ; }
public void onSend ( ) { Util.MANAGE_SVC.revertChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public void run ( ) { cm.getInputField ( ) . blur ( ) ; clearActiveLine ( cm ) ; clearActiveLine ( otherCm ( cm ) ) ; }
public void deleteFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.edit.ChangeEdit changeEdit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { modifyTree ( repository , changeEdit , new com.google.gerrit.server.edit.tree.DeleteFileModification ( file ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm and ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) & ( t.intValue ( ) ) ) ) ; }
public void evictGroupsMembers ( ) throws java.lang.Exception { configureMocksFor ( Constants.GROUPS_MEMBERS ) ; servlet.doPost ( request , response ) ; }
private static void assertParseNotifyValueFails ( java.lang.String notifyValue ) { try { com.google.gerrit.server.account.WatchConfigTest.parseNotifyValue ( notifyValue ) ; org.junit.Assert.fail ( ( "expected ConfigInvalidException for notifyValue: " + notifyValue ) ) ; } catch ( org.eclipse.jgit.errors.ConfigInvalidException e ) { } }
public void testTagBr ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.br ( ) ) ; org.junit.Assert.assertEquals ( "<br />" , b.asString ( ) ) ; }
boolean isReviewed ( ) { return reviewed.getValue ( ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change.setTopic ( com.google.common.base.Strings.emptyToNull ( newTopicName ) ) ; return change ; }
public int nextChangeId ( ) throws com.google.gwtorm.server.OrmException { return db.get ( ) . nextChangeId ( ) ; }
protected void initPatchSetListForTableHeader ( ) { psListOfHeaderA = new com.google.gerrit.client.patches.PatchSetSelectBox ( PatchSetSelectBox.Side.A , PatchScreen.Type.SIDE_BY_SIDE ) ; psListOfHeaderB = new com.google.gerrit.client.patches.PatchSetSelectBox ( PatchSetSelectBox.Side.B , PatchScreen.Type.SIDE_BY_SIDE ) ; }
private java.lang.String extractWhat ( com.google.gerrit.sshd.DispatchCommand dcmd , boolean hideSensitive ) { if ( dcmd == null ) { return "Command was already destroyed" ; } return hideSensitive ? dcmd.getFormattedMaskedArguments ( "." ) : extractWhat ( dcmd ) ; }
void updateRefreshCookieAt ( final com.google.gerrit.server.http.WebSessionManager.Val val ) { final long now = java.lang.System.currentTimeMillis ( ) ; val.refreshCookieAt = now + ( ( self.getTimeToIdle ( java.util.concurrent.TimeUnit.MILLISECONDS ) ) / 2 ) ; }
void addGroupInclude ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , java.lang.String groupName , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.GroupDetail > callback ) ;
public java.lang.String value ( ) { return name ; }
public void putApproval ( java.lang.String label , short value ) { approvals.put ( label , value ) ; }
public void changeAssigneeOnReviewableChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; assign ( sc , sc.owner , other ) ; sender.clear ( ) ; assign ( sc , sc.owner , assignee ) ; assertThat ( sender ) . sent ( "setassignee" , sc ) . notTo ( sc.owner , sc.reviewer , sc.ccer , sc.starrer , other ) . to ( sc.reviewerByEmail ) . cc ( sc.ccerByEmail ) . to ( assignee ) ; }
private void enableForm ( final boolean on ) { submitType.setEnabled ( on ) ; ownerTxtBox.setEnabled ( on ) ; descTxt.setEnabled ( on ) ; }
public void start ( final int delay , final java.util.concurrent.TimeUnit unit ) { workQueue.getDefaultQueue ( ) . schedule ( this , delay , unit ) ; }
private java.lang.String prefixRef ( java.lang.String ref ) { return ref.startsWith ( org.eclipse.jgit.lib.Constants.R_HEADS ) ? ref : ( org.eclipse.jgit.lib.Constants.R_HEADS ) + ref ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
private java.lang.String urlCreateEdit ( ) { return ( ( ( "/changes/" + ( change.getChangeId ( ) ) ) + "/revisions/" ) + ( ps.getPatchSetId ( ) ) ) + "/create_edit" ; }
protected com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return currentUser.get ( ) ; }
private static final native com.google.gwtjsonrpc.client.JsonCall.RpcResult parse ( java.lang.String json ) ;
private static void assertOkStatus ( org.eclipse.jgit.transport.PushResult result , java.lang.String ref ) { com.google.gerrit.acceptance.git.ssh.PushForReviewIT.assertStatus ( Status.OK , null , result , ref ) ; }
public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey ) ; try { return readPatchList ( key , repo ) ; } finally { repo.close ( ) ; } }
protected void createProject ( java.lang.String name , com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws com.google.gerrit.extensions.restapi.RestApiException { createProject ( name , parent , true ) ; }
com.google.gerrit.sshd.DispatchCommand create ( java.util.Map < java.lang.String , com.google.inject.Provider < org.apache.sshd.server.Command > > map ) ;
public int hashCode ( ) { return value.hashCode ( ) ; }
private void init ( com.googlesource.gerrit.plugins.github.oauth.GitHubLogin initValues ) { this . hub = initValues.hub ; this . token = initValues.token ; }
com.google.gerrit.acceptance.PushOneCommit create ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.PersonIdent i , org.eclipse.jgit.api.Git git , @ com.google.inject.assistedinject.Assisted ( value = "subject" ) java.lang.String subject , @ com.google.inject.assistedinject.Assisted ( value = "fileName" ) java.lang.String fileName , @ com.google.inject.assistedinject.Assisted ( value = "content" ) java.lang.String content ) ;
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; }
boolean isStale ( ) { return ( time ) != ( path.lastModified ( ) ) ; }
public void advertiseRefs ( org.eclipse.jgit.transport.BaseReceivePack rp ) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { allRefs = com.google.gerrit.server.git.receive.HookUtil.ensureAllRefsAdvertised ( rp ) ; }
private void setNotesMigrationState ( com.google.gerrit.server.notedb.NotesMigrationState state ) throws java.lang.Exception { gerritConfig.load ( ) ; com.google.gerrit.server.notedb.ConfigNotesMigration.setConfigValues ( gerritConfig , state.migration ( ) ) ; gerritConfig.save ( ) ; }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) { com.google.common.base.Preconditions.checkNotNull ( project ) ; return projectJson.format ( project ) ; }
public void onFailure ( java.lang.Throwable caught ) { enable ( true ) ; super . onFailure ( caught ) ; }
public void setFileHistory ( final java.lang.String pattern ) { fileHistory = pattern ; }
public static org.eclipse.jgit.lib.Config defaultConfig ( ) { return com.google.gerrit.server.query.change.AbstractQueryChangesTest.updateConfig ( new org.eclipse.jgit.lib.Config ( ) ) ; }
public boolean isMaxPositive ( final com.google.gerrit.client.reviewdb.ChangeApproval ca ) { return ( maxPositive ) == ( ca.getValue ( ) ) ; }
public boolean verify ( ) { return ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.Verifier.onTime ( token.expiresAt ) ) && ( verifyTokenValues ( ) ) ; }
public void setStatus ( int sc ) { status = sc ; }
public void zeroEndLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 2 , 0 , 10 ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
void setCurrentUrl ( com.google.gerrit.client.changes.DownloadUrlLink link ) { urls.setVisible ( true ) ; copyLabel.setText ( ( ( "git fetch " + ( link.urlData ) ) + " && git format-patch -1 --stdout FETCH_HEAD" ) ) ; }
public void setPatchSet ( final com.google.gerrit.reviewdb.PatchSet ps ) { patchSet = ps ; }
public void pruneSchema ( com.google.gwtorm.server.StatementExecutor e , java.util.List < java.lang.String > pruneList ) throws com.google.gwtorm.server.OrmException { }
private static com.google.gerrit.server.query.change.QueryOptions options ( int start , int limit ) { return com.google.gerrit.server.query.change.QueryOptions.create ( com.google.gerrit.server.index.change.IndexRewriterTest.CONFIG , start , limit , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
public java.lang.String getToken ( com.google.gwtjsonrpc.client.JsonDefTarget proxy ) { return com.google.gwt.user.client.Cookies.getCookie ( "GerritAccount" ) ; }
public static java.util.Set < java.lang.String > getPersonParts ( java.lang.String name , java.lang.Iterable < java.lang.String > emails ) { com.google.common.base.Splitter at = com.google.common.base.Splitter.on ( '@' ) ; com.google.common.base.Splitter s = com.google.common.base.Splitter.on ( com.google.common.base.CharMatcher.anyOf ( "@.- " ) ) . omitEmptyStrings ( ) ; java.util.HashSet < java.lang.String > parts = new java.util.HashSet < > ( ) ; for ( java.lang.String email : emails ) { if ( email == null ) { continue ; } java.lang.String lowerEmail = email.toLowerCase ( ) ; parts.add ( lowerEmail ) ; com.google.common.collect.Iterables.addAll ( parts , at.split ( lowerEmail ) ) ; com.google.common.collect.Iterables.addAll ( parts , s.split ( lowerEmail ) ) ; } if ( name != null ) { com.google.common.collect.Iterables.addAll ( parts , s.split ( name.toLowerCase ( ) ) ) ; } return parts ; }
public int run ( ) throws java.lang.Exception { com.google.gerrit.server.GerritServer.getInstance ( false ) ; com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; return 0 ; }
public static void includedIn ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.IncludedInInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "in" ) . get ( cb ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > draft ( com.google.gerrit.reviewdb.PatchSet.Id patchset , com.google.gerrit.reviewdb.Account.Id author ) throws com.google.gwtorm.client.OrmException ;
public void listEmptyGroupMembers ( ) throws java.lang.Exception { group ( "empty" , "Administrators" ) ; com.google.common.truth.Truth.assertThat ( GET ( "/groups/empty/members/" ) ) . isEmpty ( ) ; }
public static com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > allAsList ( java.util.List < ? extends com.google.common.util.concurrent.ListenableFuture < ? > > futures ) { return com.google.common.util.concurrent.Futures.makeChecked ( com.google.common.util.concurrent.Futures.allAsList ( futures ) , com.google.gerrit.server.index.change.ChangeIndexer.MAPPER ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { queryList = com.google.gerrit.server.git.QueryList.parse ( readUTF8 ( QueryList.FILE_NAME ) , com.google.gerrit.server.git.QueryList.createLoggerSink ( QueryList.FILE_NAME , com.google.gerrit.server.account.VersionedAccountQueries.log ) ) ; }
public void addChangeListener ( com.google.gerrit.common.ChangeListener listener , com.google.gerrit.server.CurrentUser user ) { listeners.put ( listener , new com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder ( listener , user ) ) ; }
public void advertiseRefs ( org.eclipse.jgit.transport.UploadSession us ) { throw new java.lang.UnsupportedOperationException ( "ReceiveCommitsAdvertiseRefsHook cannot be used for UploadSession" ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testutil.IndexVersions.getWithoutLatest ( AccountSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testutil.IndexVersions.asConfigMap ( AccountSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , defaultConfig ( ) ) ; }
private void invalidUserName ( ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidUserName ( ) ) . center ( ) ; }
void onScheme ( com.google.gwt.event.dom.client.ChangeEvent event ) { renderCommands ( ) ; if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { saveScheme ( ) ; } }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Unmark private" ) . setTitle ( "Unmark change as private" ) . setVisible ( ( ( rsrc.getChange ( ) . isPrivate ( ) ) && ( canDeletePrivate ( rsrc ) ) ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { cm.setCursor ( net.codemirror.lib.LineCharacter.create ( line ) ) ; cm.scrollToY ( java.lang.Math.max ( 0 , ( height - ( scrollbarHeight / 2 ) ) ) ) ; cm.focus ( ) ; }
private final native void setInReplyTo ( java.lang.String in_reply_to ) ;
public void onSuccess ( com.google.gwtjsonrpc.common.VoidResult result ) { if ( ( com.google.gerrit.client.changes.StarredChanges.next ) != null ) { com.google.gerrit.client.changes.StarredChanges.start ( ) ; } else { com.google.gerrit.client.changes.StarredChanges.busy = false ; } }
public void setId ( java.lang.String id ) { this . id = id ; }
public static com.google.common.collect.ImmutableList < com.google.gerrit.gpg.testutil.TestKey > allValidKeys ( ) { return com.google.common.collect.ImmutableList.of ( com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithExpiration ( ) , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithSecondUserId ( ) ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , revision , fileName , side , line ) ; }
public static void restoreTime ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; }
void addReviewers ( com.google.gerrit.reviewdb.Change.Id id , java.util.List < java.lang.String > reviewers , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ReviewerResult > callback ) ;
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withOptions ( com.google.gerrit.extensions.common.ListChangesOption ... options ) { this . options.addAll ( java.util.Arrays.asList ( options ) ) ; return this ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , starredChangesCache , remotePeerProvider , null , id ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? executor.submit ( deleteTask ( cd ) ) : com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
private void display ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result , subname ) ; groups.finishDisplay ( ) ; }
public void pushWithPrivateByDefaultEnabled ( ) throws java.lang.Exception { setPrivateByDefault ( project2 , InheritableBoolean.TRUE ) ; com.google.common.truth.Truth.assertThat ( createChange ( project2 ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( true ) ; }
private void commit ( ) throws java.io.IOException { writer.commit ( ) ; searcherManager.maybeRefresh ( ) ; }
protected java.util.List < java.lang.String > getInstallPlugins ( ) { return null ; }
public static org.eclipse.jgit.transport.PushResult pushHead ( org.eclipse.jgit.api.Git git , java.lang.String ref , boolean pushTags ) throws org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.GitUtil.pushHead ( git , ref , pushTags , false ) ; }
private static java.lang.String notTrusted ( com.google.gerrit.gpg.testutil.TestKey k ) { return ( "Certification by " + ( com.google.gerrit.gpg.PublicKeyStore.keyToString ( k.getPublicKey ( ) ) ) ) + " is valid, but key is not trusted" ; }
public void testInsertNothing ( ) throws com.google.gwtorm.server.OrmException { setup ( ) ; createClassUnderTest ( ) . insert ( noData ) ; }
void onOpenForm ( ) { com.google.gwt.user.client.ui.UIObject.setVisible ( form , true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( error , false ) ; openForm.setVisible ( false ) ; suggestBox.setFocus ( true ) ; }
public boolean handles ( java.io.File srcFile ) { return srcFile.getName ( ) . toLowerCase ( ) . endsWith ( com.googlesource.gerrit.plugins.scripting.scala.ScalaPluginProvider.SCALA_EXTENSION ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; engine.areg3 = this . areg3 ; engine.areg4 = this . areg4 ; engine.areg5 = this . areg5 ; engine.areg6 = this . areg6 ; }
public net.sf.ehcache.statistics.sampled.SampledCacheStatistics getSampledCacheStatistics ( ) { return self ( ) . getSampledCacheStatistics ( ) ; }
protected static org.eclipse.jgit.lib.Config wholeTopicEnabledConfig ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "change" , null , "submitWholeTopic" , true ) ; return cfg ; }
com.googlesource.gerrit.plugins.hooks.HookResult run ( com.googlesource.gerrit.plugins.hooks.HookArgs args ) { return executor.submit ( path , args ) ; }
public void onShowView ( ) { if ( ( windowTitle ) != null ) { com.google.gerrit.client.Gerrit.setWindowTitle ( this , windowTitle ) ; } }
public void onFailure ( java.lang.Throwable caught ) { b.setEnabled ( true ) ; super . onFailure ( caught ) ; }
private void uncacheSshKeys ( final java.lang.String userName ) { sshKeyCache.evict ( userName ) ; }
public void addClickListener ( com.google.gwt.user.client.ui.ClickListener listener ) { addMember.addClickListener ( listener ) ; }
private com.google.gerrit.server.project.ChangeControl forUser ( com.google.gerrit.server.CurrentUser who ) { if ( getUser ( ) . equals ( who ) ) { return this ; } return new com.google.gerrit.server.project.ChangeControl ( changeDataFactory , approvalsUtil , refControl.forUser ( who ) , notes , patchSetUtil ) ; }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass ( com.google.gerrit.acceptance.Description testDesc , java.lang.String configName ) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description ( configName , true , ( ( testDesc.getTestClass ( ) . getAnnotation ( com.google.gerrit.acceptance.NoHttpd.class ) ) == null ) , null , null ) ; }
public boolean canDeleteDraft ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( isOwner ( ) ) && ( isVisible ( db ) ) ; }
java.lang.String inline ( @ javax.annotation.Nullable java.lang.String markdownPath , java.lang.String imagePath ) { java.lang.String data = inlineMaybe ( markdownPath , imagePath ) ; if ( data != null ) { return data ; } return FilterImageDataUri.INSTANCE.getInnocuousOutput ( ) ; }
private static org.eclipse.jgit.revwalk.RevCommit lookup ( org.eclipse.jgit.lib.Repository repository , org.eclipse.jgit.lib.ObjectId commitId ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( repository ) ) { return revWalk.parseCommit ( commitId ) ; } }
public boolean isVisible ( ) { return ( projectControl.visibleForReplication ( ) ) || ( canPerform ( Permission.READ ) ) ; }
public void execute ( ) { com.google.gerrit.client.Gerrit.doSignIn ( ) ; }
private com.google.gerrit.server.plugins.PluginEntry resourceOf ( java.util.jar.JarEntry jarEntry ) throws java.io.IOException { return new com.google.gerrit.server.plugins.PluginEntry ( jarEntry.getName ( ) , jarEntry.getTime ( ) , jarEntry.getSize ( ) , attributesOf ( jarEntry ) ) ; }
public com.google.gerrit.sshd.SshSession get ( ) { return com.google.gerrit.sshd.SshScope.getContext ( ) . getSession ( ) ; }
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.ReindexIT.runGerrit ( "init" , "-d" , sitePath.toString ( ) , "--batch" , "--no-auto-start" , "--skip-plugins" , "--show-stack-trace" ) ; }
private void configureDefaultSubmitType ( java.lang.String projectFilter , com.google.gerrit.extensions.common.SubmitType submitType ) { cfg.setString ( RepositoryConfig.SECTION_NAME , projectFilter , RepositoryConfig.DEFAULT_SUBMIT_TYPE_NAME , submitType.toString ( ) ) ; }
java.lang.String version ( ) ;
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteTag.apply ( resource ( ) , new com.google.gerrit.server.project.DeleteTag.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( e.getMessage ( ) ) ; } }
public void putReviewer ( com.google.gerrit.reviewdb.client.Account.Id reviewer , com.google.gerrit.server.notedb.ReviewerState type ) { com.google.common.base.Preconditions.checkArgument ( ( type != ( ReviewerState.REMOVED ) ) , "invalid ReviewerType" ) ; reviewers.put ( reviewer , type ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) . to ( com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.class ) ; }
public com.google.gerrit.reviewdb.AccountGroup createEntry ( final com.google.gerrit.reviewdb.AccountGroup.Id key ) throws java.lang.Exception { return lookup ( key ) ; }
void inc ( ) { mv.visitVarInsn ( com.google.gwtorm.protobuf.ILOAD , sizeVar ) ; mv.visitInsn ( com.google.gwtorm.protobuf.IADD ) ; mv.visitVarInsn ( com.google.gwtorm.protobuf.ISTORE , sizeVar ) ; }
private java.lang.String urlPut ( com.google.gerrit.reviewdb.client.Change c ) { return ( urlDelete ( c ) ) + "/content" ; }
public static boolean readWrite ( ) { return com.google.gerrit.testutil.NoteDbMode.get ( ) . readWrite ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( ( ( com.google.gerrit.client.reviewdb.Account.Id ) ( key ) ) ) ; }
private static boolean isRejected ( com.google.gerrit.client.changes.ChangeInfo.LabelInfo label , com.google.gerrit.client.changes.ChangeInfo.ApprovalInfo ai ) { return ( ( label.rejected ( ) ) != null ) && ( ( label.rejected ( ) . _account_id ( ) ) == ( ai._account_id ( ) ) ) ; }
public void setHeader ( java.lang.String name , java.lang.String value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected void configureServlets ( ) { serveRegex ( ( ( "^" + ( XDocServlet.PATH_PREFIX ) ) + "(.+)?$" ) ) . with ( com.googlesource.gerrit.plugins.xdocs.XDocServlet.class ) ; }
void set ( com.google.gerrit.client.changes.ChangeInfo info ) { this . changeId = info.legacy_id ( ) ; display ( info ) ; reviewerSuggestOracle.setChange ( changeId ) ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public boolean allRefsAreVisible ( ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ ) ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo prefs ) { com.google.gerrit.client.Gerrit.myPrefs = prefs ; onModuleLoad2 ( result ) ; }
public void assertMessage ( java.lang.String expectedMessage ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; com.google.common.truth.Truth.assertThat ( message ( refUpdate ) . toLowerCase ( ) ) . contains ( expectedMessage.toLowerCase ( ) ) ; }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; updateRenderEntireFile ( ) ; }
public void testContainsWithEmpty ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; com.google.common.truth.Truth.assertThat ( ds ) . doesNotContain ( 2 ) ; }
public java.util.Optional < com.google.gerrit.reviewdb.client.AccountGroup > load ( com.google.gerrit.reviewdb.client.AccountGroup.Id key ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return groups.get ( db , key ) ; } }
public void testParse_NameEmail4 ( ) { final com.google.gerrit.server.mail.Address a = com.google.gerrit.server.mail.Address.parse ( "A U Thor<author@example.com>" ) ; org.junit.Assert.assertEquals ( "A U Thor" , a.name ) ; org.junit.Assert.assertEquals ( "author@example.com" , a.email ) ; }
public java.lang.String toString ( ) { return "hook " + ( hook.getName ( ) ) ; }
private static java.lang.String getURLEncoded ( java.lang.String url ) { try { return java.net.URLEncoder.encode ( url , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { return null ; } }
public void sendBytes ( byte [ ] what ) { rp.sendBytes ( what ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.Change > get ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return cache.get ( name ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.git.SearchingChangeCacheImpl.log.warn ( ( "Cannot fetch changes for " + name ) , e ) ; return java.util.Collections.emptyList ( ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.ReviewDb > db , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , null , db , id ) ; }
public com.google.gerrit.server.update.RetryHelper.Options.Builder timeout ( long timeout , java.util.concurrent.TimeUnit unit ) { return timeoutMs ( unit.toMillis ( timeout ) ) ; }
public void setPatchKey ( final com.google.gerrit.client.reviewdb.Patch.Key id ) { patchKey = id ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.reviewdb.client.Change change ) { return delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public void initSshModule ( java.lang.String pluginName ) { command = com.google.gerrit.sshd.Commands.named ( pluginName ) ; }
protected void configure ( ) { install ( new com.google.gerrit.server.index.IndexModule ( 1 ) ) ; bind ( com.google.gerrit.server.index.ChangeIndex.class ) . toInstance ( new com.google.gerrit.server.index.DummyIndex ( ) ) ; }
com.google.gerrit.server.notedb.DraftCommentNotes create ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) ;
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
public void remove ( ) { }
void createOrEditFileComment ( com.google.gerrit.client.diff.SideBySide2.DisplaySide side ) { getPanelFromSide ( side ) . createOrEditFileComment ( ) ; updateFileCommentVisibility ( false ) ; }
private void checkNotDefined ( java.lang.String name ) { if ( registry.getNames ( ) . contains ( name ) ) { throw new java.lang.IllegalStateException ( java.lang.String.format ( "metric %s already defined" , name ) ) ; } }
public com.google.gerrit.extensions.common.MergeableInfo mergeable ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return mergeable.apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check mergeability" , e ) ; } }
public static void fireChangeStarEvent ( com.google.gerrit.reviewdb.client.Change.Id id , boolean starred ) { com.google.gerrit.client.changes.StarredChanges.eventBus.fireEventFromSource ( new com.google.gerrit.client.changes.StarredChanges.ChangeStarEvent ( id , starred ) , id ) ; }
public void invalidNonceNotChecked ( ) throws java.lang.Exception { checker = newChecker ( false ) ; org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( "invalid-nonce" , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; assertProblems ( cert ) ; }
private void parseUpdate ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { if ( ( com.google.gerrit.server.git.ReceiveCommits.isHead ( cmd ) ) && ( canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD , com.google.gerrit.reviewdb.ApprovalCategory.PUSH_HEAD_UPDATE ) ) ) { } else { com.google.gerrit.server.git.ReceiveCommits.reject ( cmd ) ; } }
private void index ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { for ( com.google.gerrit.server.index.group.GroupIndex groupIndex : indexCollection.getWriteIndexes ( ) ) { groupIndex.replace ( group ) ; } }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.client.Gerrit.display ( ( "change,publish," + ( patchSet.getId ( ) . toString ( ) ) ) , new com.google.gerrit.client.changes.PublishCommentScreen ( patchSet.getId ( ) ) ) ; }
public static void getContent ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String filename , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.String > cb ) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs ( id , filename ) . get ( com.google.gerrit.client.changes.ChangeFileApi.wrapper ( cb ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change ) { return updateAsync ( change , false ) ; }
private static java.lang.String queryIncoming ( java.lang.String who ) { return ( ( ( ( ( "is:open ((reviewer:" + who ) + " -owner:" ) + who ) + " -star:ignore) OR assignee:" ) + who ) + ")" ; }
private E getLast ( ) { return get ( ( ( size ( ) ) - 1 ) ) ; }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { if ( acct != null ) { synchronized ( com.google.gerrit.server.ssh.SshUtil.keys ) { com.google.gerrit.server.ssh.SshUtil.keys.remove ( acct.getPreferredEmail ( ) ) ; } } }
protected void configure ( ) { bind ( com.google.gerrit.server.index.ChangeIndex.class ) . toInstance ( ChangeIndex.DISABLED ) ; bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . toInstance ( ChangeIndexer.DISABLED ) ; bind ( com.google.gerrit.server.query.change.IndexRewrite.class ) . toInstance ( IndexRewrite.DISABLED ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { createCommentEditor ( row , column , line , side ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return json.format ( rsrc ) ; }
public void onHistoryChanged ( final java.lang.String token ) { final com.google.gerrit.client.ui.Screen s = select ( token ) ; if ( s != null ) { com.google.gerrit.client.Gerrit.display ( s ) ; } else { } }
public boolean execute ( ) { java.lang.String t = message.getText ( ) ; if ( t != null ) { message.setCursorPos ( t.length ( ) ) ; } return false ; }
void index ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation ) throws java.io.IOException { indexer.index ( uuid ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug ( "Group {} successfully indexed" , uuid ) ; }
public static com.google.gerrit.elasticsearch.ElasticIndexModule latestVersionWithoutOnlineUpgrade ( ) { return new com.google.gerrit.elasticsearch.ElasticIndexModule ( null , 0 , false ) ; }
static com.google.gerrit.client.download.DownloadUrlLink.KnownScheme get ( java.lang.String name ) { for ( com.google.gerrit.client.download.DownloadUrlLink.KnownScheme s : com.google.gerrit.client.download.DownloadUrlLink.KnownScheme.values ( ) ) { if ( s.name.equals ( name ) ) { return s ; } } return null ; }
public void doAction ( com.google.gerrit.server.IdentifiedUser user , com.googlesource.gerrit.plugins.github.oauth.GitHubLogin hubLogin , javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse resp , com.googlesource.gerrit.plugins.github.wizard.ControllerErrors errors ) throws java.io.IOException , javax.servlet.ServletException { }
public static com.google.gerrit.server.account.AuthRequest forUser ( final java.lang.String username ) { return new com.google.gerrit.server.account.AuthRequest ( ( ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT ) + username ) ) ; }
public void testMIXED_FullyConfiguredUser ( ) { setFrom ( "MIXED" ) ; final java.lang.String name = "A U. Thor" ; final java.lang.String email = "a.u.thor@test.example.com" ; final com.google.gerrit.reviewdb.client.Account.Id user = user ( name , email ) ; org.easymock.EasyMock.replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create ( ) . from ( user ) ; assertNotNull ( r ) ; assertEquals ( ( name + " (Code Review)" ) , r.name ) ; assertEquals ( ident.getEmailAddress ( ) , r.email ) ; org.easymock.EasyMock.verify ( accountCache ) ; }
public void addRemoveMember ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount u = accounts.create ( "user" , "user@example.com" , "Full Name" ) ; com.google.gerrit.acceptance.RestResponse r = PUT ( "/groups/Administrators/members/user" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_CREATED , r.getStatusCode ( ) ) ; com.google.gerrit.acceptance.rest.account.AccountInfo ai = new com.google.gson.Gson ( ) . fromJson ( r.getReader ( ) , new com.google.gson.reflect.TypeToken < com.google.gerrit.acceptance.rest.account.AccountInfo > ( ) { } . getType ( ) ) ; com.google.gerrit.acceptance.rest.account.AccountAssert.assertAccountInfo ( u , ai ) ; assertMembers ( "Administrators" , admin , u ) ; r.consume ( ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_NO_CONTENT , DELETE ( "/groups/Administrators/members/user" ) ) ; assertMembers ( "Administrators" , admin ) ; }
public void setDisplayPersonNameInReviewCategory ( final boolean displayPersonNameInReviewCategory ) { this . displayPersonNameInReviewCategory = displayPersonNameInReviewCategory ; }
public void onSuccess ( com.google.gerrit.client.groups.GroupList result ) { includes.display ( result.asList ( ) ) ; }
public java.util.Map < java.lang.String , java.util.List < com.google.gerrit.extensions.common.RobotCommentInfo > > robotComments ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listRobotComments.apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve robot comments" , e ) ; } }
public final native boolean allow_drafts ( ) ;
public java.lang.String getUrl ( ) { final java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; final com.google.gerrit.server.config.ConfigSection dbs = new com.google.gerrit.server.config.ConfigSection ( cfg , "database" ) ; b.append ( "jdbc:mysql://" ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.hostname ( dbs.optional ( "hostname" ) ) ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.port ( dbs.optional ( "port" ) ) ) ; b.append ( "/" ) ; b.append ( dbs.required ( "database" ) ) ; return b.toString ( ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.IntegrationException { return args.mergeUtil.canMerge ( args.mergeSorter , args.repo , mergeTip , toMerge ) ; }
protected boolean canPerform ( final com.google.gerrit.client.data.ProjectCache.Entry project , final com.google.gerrit.client.reviewdb.ApprovalCategory.Id actionId , final short val ) { return com.google.gerrit.client.rpc.BaseServiceImplementation.canPerform ( getGroups ( ) , project , actionId , val ) ; }
public void testUpdateOne ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE , 1 ) ; createClassUnderTest ( ) . update ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.DELETE , cb ) ; }
public long getTimeToIdle ( final java.util.concurrent.TimeUnit unit ) { final long idle = self.getCacheConfiguration ( ) . getTimeToIdleSeconds ( ) ; return unit.convert ( idle , java.util.concurrent.TimeUnit.SECONDS ) ; }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange ( com.google.gerrit.acceptance.PushOneCommit.Result pr ) throws java.io.IOException { return getChange ( pr.getChangeId ( ) , com.google.gerrit.common.changes.ListChangesOption.DETAILED_LABELS ) ; }
protected com.google.gerrit.client.account.SshKeyPanel createWidget ( ) { return new com.google.gerrit.client.account.SshKeyPanel ( ) ; }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.Change change ) throws com.google.gerrit.server.project.NoSuchChangeException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( change ) ) ; }
public static com.google.gerrit.server.query.change.QueryOptions oneResult ( ) { return com.google.gerrit.server.query.change.QueryOptions.create ( com.google.gerrit.server.index.IndexConfig.createDefault ( ) , 0 , 1 ) ; }
public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags.apply ( change , input ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post hashtags" , e ) ; } }
public void configure ( ) { factory ( OnlineReindexer.Factory.class ) ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Unmute" ) . setTitle ( "Unmute the change" ) . setVisible ( ( ( ! ( rsrc.isUserOwner ( ) ) ) && ( isUnMuteable ( rsrc ) ) ) ) ; }
public com.google.gitiles.doc.html.HtmlBuilder space ( ) { finishActiveTag ( ) ; htmlBuf.append ( ' ' ) ; return this ; }
public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) { return display ( null ) ; }
protected < F > void factory ( final java.lang.Class < F > factory ) { factory ( com.google.inject.Key.get ( factory ) , factory ) ; }
public < T > T get ( org.eclipse.jgit.lib.Config.SectionParser < T > parser ) { return secureConfig.get ( parser ) ; }
public static java.lang.String toPatchUnified ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , diffBase , id ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initPath ( ) ; setHeaderVisible ( false ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { fetch = result.revision ( revision ) . fetch ( ) ; renderScheme ( ) ; }
public com.google.gson.Gson get ( ) { return new com.google.gson.GsonBuilder ( ) . registerTypeAdapter ( com.google.common.base.Supplier.class , new com.google.gerrit.server.events.SupplierSerializer ( ) ) . create ( ) ; }
public void tearDown ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZoneProperty ) ; java.util.TimeZone.setDefault ( systemTimeZone ) ; }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { showSiteHeader.setChecked ( account.isShowSiteHeader ( ) ) ; setDefaultContext ( account.getDefaultContext ( ) ) ; }
private com.google.gerrit.server.edit.tree.TreeModification toTreeModification ( com.google.gerrit.reviewdb.client.FixReplacement ... fixReplacements ) throws java.lang.Exception { return fixReplacementInterpreter.toTreeModification ( repository , projectState , patchSetCommitId , com.google.common.collect.ImmutableList.copyOf ( fixReplacements ) ) ; }
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { index ( newChangeData ( db , project , changeId ) ) ; }
public static void clearHttpPassword ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "password.http" ) . delete ( cb ) ; }
public com.google.gerrit.acceptance.RestResponse get ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet ( ( "http://localhost:8080/a" + endPoint ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( get ) ) ; }
public final boolean isLdap ( ) { return ( ( authType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.LDAP ) ) || ( ( authType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.LDAP_BIND ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.PatchLineComment > result ) { if ( ! ( result.isEmpty ( ) ) ) { bindDrafts ( result ) ; } }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toInstance ( user ) ; }
public com.google.gerrit.server.project.ProjectControl controlFor ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchProjectException { final com.google.gerrit.server.project.ProjectState p = projectCache.get ( nameKey ) ; if ( p == null ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( nameKey ) ; } return p.controlFor ( user ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { }
public void setStatisticsEnabled ( boolean enableStatistics ) { self ( ) . setStatisticsEnabled ( enableStatistics ) ; }
public static void updated ( com.google.gerrit.reviewdb.client.Change c ) { c.setLastUpdatedOn ( com.google.gerrit.server.util.TimeUtil.nowTs ( ) ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( c ) ; }
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withQuery ( java.lang.String query ) { this . query = query ; return this ; }
public com.google.gerrit.httpd.WebSessionManager.Val getIfPresent ( java.lang.Object key ) { if ( key instanceof java.lang.String ) { java.io.File f = new java.io.File ( dir , ( ( java.lang.String ) ( key ) ) ) ; return readFile ( f ) ; } return null ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { throw new com.google.inject.OutOfScopeException ( "No user on email thread" ) ; }
private boolean has ( com.google.gerrit.extensions.common.ListChangesOption option ) { return options.contains ( option ) ; }
public static java.lang.String toAccountQuery ( final java.lang.String fullname ) { java.lang.String query = ( com.google.gerrit.common.PageLinks.op ( "owner" , fullname ) ) + " status:open" ; return com.google.gerrit.common.PageLinks.toChangeQuery ( query , com.google.gerrit.common.PageLinks.TOP ) ; }
public static java.lang.String toPatchUnified ( final com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , null , id ) ; }
public void listBranchesOfEmptyProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.rest.project.BranchAssert.assertBranches ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "refs/meta/config" , null , false ) ) , list ( ) . get ( ) ) ; }
public void saveDraft ( final com.google.gerrit.reviewdb.client.PatchLineComment comment , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.reviewdb.client.PatchLineComment > callback ) { saveDraftFactory.create ( comment ) . to ( callback ) ; }
int getRawId ( ) { return accountId.get ( ) ; }
public int getSizeBasedOnAccuracy ( int statisticsAccuracy ) throws java.lang.IllegalArgumentException , java.lang.IllegalStateException , net.sf.ehcache.CacheException { return self ( ) . getSizeBasedOnAccuracy ( statisticsAccuracy ) ; }
protected void onExit ( final int rc ) { eventListenerRegistration.remove ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; delete.add ( com.google.gerrit.server.notedb.ChangeDraftUpdate.key ( c ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
void index ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation ) throws java.io.IOException { indexer.index ( uuid ) ; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.debug ( "Group {} successfully indexed" , uuid ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { if ( ! ( discovering ) ) { providerId.setText ( identUrl ) ; form.submit ( ) ; } }
PatchSet.Id getBase ( ) { return base ; }
void setEnabled ( boolean on ) { com.google.gwt.user.client.DOM.setElementPropertyBoolean ( list.getElement ( ) , "disabled" , ( ! on ) ) ; }
protected void configure ( ) { }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change" , e ) ; } }
protected com.google.gwtjsonrpc.server.XsrfUtil xsrfInit ( ) throws com.google.gwtjsonrpc.server.XsrfException { return new com.google.gwtjsonrpc.server.XsrfUtil ( ) ; }
public net.sf.ehcache.statistics.LiveCacheStatistics getLiveCacheStatistics ( ) throws java.lang.IllegalStateException { return self.getLiveCacheStatistics ( ) ; }
private void checkNotDefined ( java.lang.String name ) { if ( registry.getNames ( ) . contains ( name ) ) { throw new java.lang.IllegalStateException ( java.lang.String.format ( "metric %s already defined" , name ) ) ; } }
protected abstract T updateProjectConfig ( com.google.gerrit.server.CurrentUser user , com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public synchronized void evictAll ( ) { byId.clear ( ) ; byUsername.clear ( ) ; }
private static java.lang.String path ( java.io.File file ) { try { return file.getCanonicalPath ( ) ; } catch ( java.io.IOException err ) { return file.getAbsolutePath ( ) ; } }
protected void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.TestDatabase.drop ( db ) ; super . tearDown ( ) ; }
public boolean isAllowRegisterNewEmail ( ) { return allowRegisterNewEmail ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public final void side ( com.google.gerrit.extensions.common.Side side ) { sideRaw ( side.toString ( ) ) ; }
private static org.spearce.jgit.transport.URIish expandURI ( org.spearce.jgit.transport.URIish uri , final com.google.gerrit.client.reviewdb.Project.NameKey project ) { uri = uri.setPath ( com.google.gerrit.git.PushQueue.replace ( uri.getPath ( ) , "name" , project.get ( ) ) ) ; return uri ; }
protected < T > T buildJson ( java.lang.String path , java.lang.Class < T > classOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . fromJson ( buildJsonRaw ( path ) , classOfT ) ; }
public com.google.gerrit.server.ParamertizedString.Builder replace ( ) { return new com.google.gerrit.server.ParamertizedString.Builder ( ) ; }
void onRemove ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.Iterable < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
com.googlesource.gerrit.plugins.findowners.OwnersDb get ( com.google.gerrit.server.account.AccountCache accountCache , com.google.gerrit.server.account.Accounts accounts , org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { return get ( accountCache , accounts , repo , changeData , changeData.currentPatchSet ( ) . getId ( ) . get ( ) ) ; }
public void execute ( com.google.gerrit.server.git.BatchUpdate.Listener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.git.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener ) ; }
protected void configure ( ) { bindConstant ( ) . annotatedWith ( com.google.inject.name.Names.named ( "HEADLESS" ) ) . to ( headless ) ; }
public com.google.gerrit.server.group.GroupInfo apply ( com.google.gerrit.server.group.IncludedGroupResource rsrc ) { return new com.google.gerrit.server.group.GroupInfo ( rsrc.getMemberDescription ( ) ) ; }
public static com.google.gerrit.reviewdb.client.Change.Status changeStatus2Status ( com.google.gerrit.extensions.common.ChangeStatus status ) { if ( status != null ) { return com.google.gerrit.server.api.changes.ChangeInfoMapper.MAP.inverse ( ) . get ( status ) ; } return com.google.gerrit.reviewdb.client.Change.Status.NEW ; }
public com.googlesrouce.gerrit.plugins.github.git.PagedIterable < com.googlesrouce.gerrit.plugins.github.git.GHCommitStatus > listCommitStatuses ( java.lang.String sha1 ) throws java.io.IOException { return ghRepository.listCommitStatuses ( sha1 ) ; }
public void onSuccess ( com.google.gerrit.client.change.RelatedChanges.RelatedInfo result ) { render ( revision , result.changes ( ) ) ; }
public void onSuccess ( java.lang.Void result ) { net.codemirror.lib.Loader.initDisableUnwantedKeys ( ) ; cb.onSuccess ( null ) ; }
protected java.util.Set < com.google.gerrit.reviewdb.Account.Id > createEntry ( final java.lang.String key ) throws java.lang.Exception { return lookup ( key ) ; }
void setAutoFlush ( boolean autoFlush ) throws com.google.gwtorm.client.OrmException ;
private void initUI ( ) { groups = new com.google.gerrit.client.admin.GroupListScreen.GroupTable ( ) ; groups.setSavePointerId ( Link.ADMIN_GROUPS ) ; add ( groups ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , null , db , id , null ) ; }
public void getTask_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.get ( ( "/config/server/tasks/" + ( getLogFileCompressorTaskId ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public void unstarChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
protected com.google.gerrit.reviewdb.client.Change newChange ( ) { return com.google.gerrit.testutil.TestChanges.newChange ( project , changeOwner.getAccountId ( ) ) ; }
public void onSend ( ) { java.lang.String topic = newTopic.getText ( ) ; Util.DETAIL_SVC.alterTopic ( change.getId ( ) , topic , getMessageText ( ) , createCallback ( ) ) ; }
public void pushWithPrivateByDefaultEnabled ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( createChange ( ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( true ) ; }
public java.lang.String getSchemeRest ( ) { java.lang.String id = getExternalId ( ) ; int c = id.indexOf ( ':' ) ; return 0 < c ? id.substring ( ( c + 1 ) ) : null ; }
private static final java.lang.String getPluginName ( ) { return ( com.google.gerrit.client.api.ApiGlue.pluginName ) != null ? com.google.gerrit.client.api.ApiGlue.pluginName : com.google.gerrit.client.api.PluginName.get ( ) ; }
public void check ( com.google.gerrit.server.permissions.GlobalOrPluginPermission perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( perm.describeForException ( ) ) + " not permitted" ) ) ; } }
public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentlink" , getCommentLinkName ( ) , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
public void execute ( ) { try { onResult ( lastScript , false ) ; } finally { RpcStatus.INSTANCE.onRpcComplete ( null ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; }
com.google.gwtorm.client.ResultSet < com.google.gwtorm.data.TestPerson > notPerson ( com.google.gwtorm.data.TestPerson.Key key , int age ) throws com.google.gwtorm.client.OrmException ;
protected boolean useHtml ( ) { return false ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > description ( java.lang.String description ) { return new com.google.gerrit.server.query.project.ProjectPredicates.ProjectPredicate ( com.google.gerrit.server.index.project.ProjectField.DESCRIPTION , description ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , id ) ; }
private static void assertErrorStatus ( org.eclipse.jgit.transport.PushResult result , java.lang.String expectedMessage , java.lang.String ref ) { com.google.gerrit.acceptance.git.ssh.PushForReviewIT.assertStatus ( Status.REJECTED_OTHER_REASON , expectedMessage , result , ref ) ; }
public com.google.gerrit.extensions.api.changes.Changes.QueryRequest withOption ( com.google.gerrit.extensions.common.ListChangesOption options ) { this . options.add ( options ) ; return this ; }
public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet ( ) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId ( ) ; return com.google.common.base.Preconditions.checkNotNull ( state.patchSets ( ) . get ( psId ) , "missing current patch set %s" , psId.get ( ) ) ; }
public java.lang.String call ( ) throws java.lang.Exception { doPerformAction ( issueKey , actionName ) ; return issueKey ; }
public void run ( ) { renderSkips ( context ) ; }
public void doGet ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { if ( ! ( isAllowed ( req ) ) ) { res.setStatus ( HttpServletResponse.SC_FORBIDDEN ) ; return ; } streamFile ( req , res ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , T > build ( com.google.gerrit.server.index.FieldDef.Getter < I , T > getter ) { return new com.google.gerrit.server.index.FieldDef ( name , type , stored , false , getter ) ; }
private static java.lang.String getContentPath ( java.lang.String url ) { return ( url + ( url.endsWith ( "/" ) ? com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.CONTENT_PATH : "/" + ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.CONTENT_PATH ) ) ) + "/" ; }
public java.lang.Object getScreenCacheToken ( ) { return anchor ; }
public void pushColumnIndex ( ) { mv.visitVarInsn ( com.google.gwtorm.jdbc.gen.ILOAD , colvar ) ; }
public void dashboardDoesNotExist ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . dashboard ( "dashboard" ) . get ( ) ; }
com.codahale.metrics.Gauge < V > gauge ( final java.lang.Runnable trigger ) { return new com.codahale.metrics.Gauge < V > ( ) { @ java.lang.Override public com.google.gerrit.metrics.dropwizard.V getValue ( ) { trigger.run ( ) ; return value ; } } ; }
private com.google.gerrit.server.index.change.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.change.IndexedChangeQuery ( index , p , com.google.gerrit.server.index.change.IndexRewriterTest.options ( 0 , limit ) ) ; }
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withOptions ( java.util.EnumSet < com.google.gerrit.extensions.common.ListChangesOption > options ) { this . options = options ; return this ; }
public static void createProject ( com.google.gerrit.acceptance.SshSession s , java.lang.String name ) throws com.jcraft.jsch.JSchException , java.io.IOException { s.exec ( ( ( "gerrit create-project --empty-commit --name \"" + name ) + "\"" ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { dialogBox.center ( ) ; dialogBox.show ( ) ; usernameTxt.setFocus ( true ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.Permission.isLabel ( permission ) ) { return toRange ( permission , access ( permission ) ) ; } return null ; }
com.googlesource.gerrit.plugins.replication.PushAll create ( java.lang.String urlMatch ) ;
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
private static IdentifiedUser.GenericFactory userFactory ( com.googlecode.prolog_cafe.lang.Prolog engine ) { com.google.gerrit.rules.PrologEnvironment env = ( ( com.google.gerrit.rules.PrologEnvironment ) ( engine.control ) ) ; return env.getInjector ( ) . getInstance ( IdentifiedUser.GenericFactory.class ) ; }
public static com.google.gerrit.client.rpc.RestApi editWithCommands ( int id ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "download-commands" , true ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > equalsName ( java.lang.String name ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.NAME_PART , AccountQueryBuilder.FIELD_NAME , name.toLowerCase ( ) ) ; }
com.google.gerrit.httpd.raw.FontsServlet getFontsServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet ( cache , getPaths ( ) . buckOut ) ; }
public Account.Id lookup ( final java.lang.String accountName ) { return usernameCache.get ( accountName ) ; }
public java.lang.String getTrackingId ( ) { return key.trackingId.get ( ) ; }
public long getTimeToIdle ( java.util.concurrent.TimeUnit unit ) ;
org.eclipse.jgit.lib.ObjectId getObjectId ( java.lang.String refName ) throws java.io.IOException { return cmds.getObjectId ( repo , refName ) ; }
void addQuery ( java.lang.String name ) { if ( ( query ) == null ) { query = com.google.common.collect.Sets.newHashSet ( ) ; } com.google.common.collect.Iterables.addAll ( query , com.google.gerrit.server.OptionUtil.splitOptionValue ( name ) ) ; }
public java.util.Set < java.lang.String > getEmailAddresses ( ) { if ( ! ( loadedAllEmails ) ) { validEmails.addAll ( realm.getEmailAddresses ( this ) ) ; loadedAllEmails = true ; } return validEmails ; }
protected com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > enforceVisibility ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > pred ) { return new com.google.gerrit.server.query.AndSource ( pred , new com.google.gerrit.server.query.account.AccountIsVisibleToPredicate ( accountControlFactory.get ( ) ) ) ; }
public java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > onCommitReceived ( com.google.gerrit.server.events.CommitReceivedEvent receiveEvent ) throws com.google.gerrit.server.git.validators.CommitValidationException { return validCommit ( receiveEvent.command , receiveEvent.commit ) ; }
java.lang.String getMessage ( ) { return ( replyBox ) != null ? replyBox.getMessage ( ) : null ; }
public com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( java.lang.String in ) { }
protected void onLoad ( ) { super . onLoad ( ) ; query = new com.google.gerrit.client.admin.ProjectTagsScreen.Query ( match ) . start ( start ) . run ( ) ; savedPanel = TAGS ; }
public void testDeleteOneExisting ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.PreparedStatement delete = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 1 ) ; createClassUnderTest ( ) . delete ( oneRow ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( delete ) ; }
public void center ( ) { super . center ( ) ; com.google.gwtexpui.globalkey.client.GlobalKey.dialog ( this ) ; signin.setFocus ( true ) ; }
boolean isStale ( ) { return ( lastModified ) != ( src.lastModified ( ) ) ; }
protected final java.lang.String getConfiguredSecureStoreClass ( ) { HEAD ( bf3756 ) ; com.google.gerrit.pgm.util.Merge changes ; }
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo p ) { this . display ( p.my ( ) ) ; widget.setEnabled ( true ) ; }
public void suggestReviewersNoResult3 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public org.apache.sshd.server.FileSystemView createFileSystemView ( java.lang.String userName ) { return new org.apache.sshd.server.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
void setPluginName ( @ com.google.gerrit.extensions.annotations.PluginName java.lang.String name ) { this . command = com.google.gerrit.sshd.Commands.named ( name ) ; }
private static void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd , final java.lang.String why ) { cmd.setResult ( ReceiveCommand.Result.REJECTED_OTHER_REASON , why ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm log ( ) { if ( ( this . val ) == 0 ) throw new com.googlecode.prolog_cafe.lang.EvaluationException ( "undefined" ) ; return new com.googlecode.prolog_cafe.lang.DoubleTerm ( java.lang.Math.log ( this . val ) ) ; }
public void testCreatePermissionOnlyProject ( ) throws java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.server.project.CreateProject.Input in = new com.google.gerrit.server.project.CreateProject.Input ( ) ; in.permissionsOnly = true ; adminSession.put ( ( "/projects/" + newProjectName ) , in ) ; assertHead ( newProjectName , RefNames.REFS_CONFIG ) ; }
void onExpandAll ( com.google.gwt.event.dom.client.ClickEvent e ) { manager.remove ( this , otherBar ) ; otherBar.expandAll ( ) ; expandAll ( ) ; cm.focus ( ) ; }
private static boolean isGetOrHead ( javax.servlet.http.HttpServletRequest req ) { return ( "GET" . equals ( req.getMethod ( ) ) ) || ( "HEAD" . equals ( req.getMethod ( ) ) ) ; }
com.google.gerrit.client.reviewdb.Account byOpenidIdentity ( com.google.gerrit.client.reviewdb.Account.OpenId key ) throws com.google.gwtorm.client.OrmException ;
void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) { java.util.SortedMap < java.lang.Integer , com.google.gerrit.client.diff.SideBySideCommentGroup > map = map ( side ) ; if ( ( map.get ( line ) ) == group ) { map.remove ( line ) ; } }
default void onRemove ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.server.account.externalids.ExternalId extId ) throws java.io.IOException { onRemove ( newNotesRev , java.util.Collections.singleton ( extId ) ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { return filter ( projectControl.getProjectState ( ) . getInheritedRights ( ) , actionId ) ; }
public void display ( com.google.gerrit.client.groups.GroupList groups ) { display ( groups.asList ( ) , null ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { star.setValue ( ( ! ( star.getValue ( ) ) ) , true ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.Change > byOwnerOpen ( com.google.gerrit.client.reviewdb.Account.Id id ) throws com.google.gwtorm.client.OrmException ;
public void testInsertOne ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . insert ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; }
public java.lang.String getETag ( ) { return change.getETag ( ) ; }
public com.google.gerrit.server.plugins.Plugin.ApiType getApiType ( ) { try { return com.google.gerrit.server.plugins.Plugin.getApiType ( manifest ) ; } catch ( com.google.gerrit.server.plugins.InvalidPluginException e ) { return null ; } }
public static com.google.gerrit.extensions.common.BanCommitInput fromCommits ( java.lang.String firstCommit , java.lang.String ... moreCommits ) { return com.google.gerrit.extensions.common.BanCommitInput.fromCommits ( com.google.common.collect.Lists.asList ( firstCommit , moreCommits ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject msg ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( changeId ) ) ; hide ( ) ; }
void addError ( java.lang.String error ) { messages.add ( new com.google.gerrit.server.git.ReceiveCommits.Message ( error , true ) ) ; }
public void execute ( ) { for ( final com.google.gwt.user.client.ui.Widget w : panel ) { if ( w instanceof com.google.gerrit.client.ui.ComplexDisclosurePanel ) { expand ( ( ( com.google.gerrit.client.ui.ComplexDisclosurePanel ) ( w ) ) ) ; } } }
public void onFailure ( final java.lang.Throwable caught ) { showSiteHeader.setValue ( ( ! val ) ) ; super . onFailure ( caught ) ; }
public void operationComplete ( org.apache.mina.core.future.IoFuture future ) { final com.google.gerrit.sshd.SshScope.Context ctx = new com.google.gerrit.sshd.SshScope.Context ( sd ) ; final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( ctx ) ; try { log.onLogout ( ) ; } finally { com.google.gerrit.sshd.SshScope.set ( old ) ; } }
public void set ( com.googlecode.prolog_cafe.lang.Prolog engine , T obj ) { engine.getHashManager ( ) . put ( key , new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( obj ) ) ; }
public java.lang.String process ( ) { return null ; }
private void initSignatures ( ) { setSignatureFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Signature > > asList ( new org.apache.sshd.common.signature.SignatureDSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureRSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory ( ) ) ) ; }
protected void beforeTest ( org.junit.runner.Description description ) throws java.lang.Exception { deployPlugin ( ) ; super . beforeTest ( description ) ; }
public com.google.gerrit.client.rpc.RestApi data ( com.google.gwt.json.client.JSONObject obj ) { contentType = com.google.gwtjsonrpc.common.JsonConstants.JSON_REQ_CT ; contentData = obj.toString ( ) ; return this ; }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return user.equals ( input.getAccountId ( ) ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
private java.lang.String quoteForPerl ( java.io.File value ) { return quoteForPerl ( value.getAbsolutePath ( ) ) ; }
public java.util.List < com.google.gerrit.server.account.AccountState > byExternalId ( java.lang.String externalId ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.account.AccountPredicates.externalId ( externalId ) ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHPersonSet < com.googlesrouce.gerrit.plugins.github.git.GHUser > getCollaborators ( ) throws java.io.IOException { return ghRepository.getCollaborators ( ) ; }
private static boolean isJsonBody ( com.google.gwt.http.client.Response res ) { return com.google.gerrit.client.rpc.RestApi.isContentType ( res , JsonConstants.JSON_TYPE ) ; }
public java.lang.String getToken ( com.google.gwtjsonrpc.client.JsonDefTarget proxy ) { return com.google.gwt.user.client.Cookies.getCookie ( com.google.gerrit.client.Gerrit.SESSION_COOKIE ) ; }
public void addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.d47190 Revert ; }
public void setValue ( final com.google.gerrit.reviewdb.client.AccountDiffPreference dp ) { listenablePrefs.set ( dp ) ; display ( ) ; }
public abstract boolean match ( java.lang.String ref , java.lang.String username ) ;
public void put ( K key , V value ) { cache.put ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) , new com.google.gerrit.ehcache.SerializableProtobuf < V > ( value , valueCodec ) ) ; }
public static com.google.gitiles.BaseServlet notFoundServlet ( ) { return new com.google.gitiles.BaseServlet ( null ) { @ java.lang.Override public void service ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) { res.setStatus ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND ) ; } } ; }
private final native void setEndCh ( int ec ) ;
public boolean createProject ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String head ) { boolean success = false ; for ( org.eclipse.jgit.transport.URIish uri : getURIs ( project , false ) ) { success &= createProject ( uri , head ) ; } return success ; }
private com.google.gerrit.extensions.common.Theme getSelectedTheme ( ) { return com.google.gerrit.extensions.common.Theme.valueOf ( theme.getValue ( theme.getSelectedIndex ( ) ) ) ; }
private static java.lang.String now ( ) { return new java.text.SimpleDateFormat ( "YYYYMMdd:HHmm" ) . format ( new java.util.Date ( ) ) ; }
private com.google.gerrit.extensions.api.projects.TagInfo getTag ( java.lang.String ref ) throws java.lang.Exception { return gApi.projects ( ) . name ( project.get ( ) ) . tag ( ref ) . get ( ) ; }
private final native void set_submittable ( boolean x ) ;
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo.EditInfo result ) { fetch = result.fetch ( ) ; renderScheme ( ) ; }
public void sendError ( int sc ) { status = sc ; }
private com.google.gerrit.acceptance.GerritServer startImpl ( @ com.google.gerrit.common.Nullable com.google.inject.Module testSysModule ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( serverDesc , baseConfig , sitePaths.site_path , testSysModule ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s:%s > %s" , projectEvent.type , projectEvent.getProjectNameKey ( ) . get ( ) , url ) ; }
private boolean isAllProjects ( com.google.gerrit.server.project.ProjectResource rsrc ) { return rsrc.getControl ( ) . getProject ( ) . getNameKey ( ) . equals ( allProjectsName ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { userNameTxt.setEnabled ( true ) ; changeUserName.setEnabled ( false ) ; if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setSshUserName ( newSshUserName ) ; } }
protected void format ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( velocifyFile ( "AddKey.vm" ) ) ; }
public void testParseMissingSha ( ) throws java.lang.Exception { assertNull ( parser.parse ( "deadbeef" ) ) ; assertNull ( parser.parse ( "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) ) ; }
private java.lang.String urlGet ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits" ; }
public void resetHtml ( final com.google.gerrit.client.ui.FancyFlexTable.MyFlexTable myTable , final java.lang.String body ) { com.google.gwt.user.client.DOM.setInnerHTML ( com.google.gerrit.client.ui.FancyFlexTableImpl.getBodyElement ( myTable ) , body ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( headless ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; } }
private int getPermittedLimit ( ) { return userProvider.get ( ) . getCapabilities ( ) . getRange ( GlobalCapability.QUERY_LIMIT ) . getMax ( ) ; }
public final com.google.gerrit.server.index.Schema.Builder < T > remove ( com.google.gerrit.server.index.FieldDef < T , ? > ... fields ) { this . fields.removeAll ( java.util.Arrays.asList ( fields ) ) ; return this ; }
private ProjectResetter.Builder builder ( @ com.google.gerrit.common.Nullable com.google.gerrit.acceptance.AccountCreator accountCreator , @ com.google.gerrit.common.Nullable com.google.gerrit.server.account.AccountCache accountCache , @ com.google.gerrit.common.Nullable com.google.gerrit.server.project.ProjectCache projectCache ) { return new com.google.gerrit.acceptance.ProjectResetter.Builder ( repoManager , new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , accountCreator , accountCache , projectCache ) ; }
public com.google.gerrit.reviewdb.client.AccountGroup getAccountGroup ( ) { return group ; }
private static boolean skip ( java.lang.String name ) { return ( ( name.startsWith ( "refs/changes/" ) ) || ( name.startsWith ( GitRepositoryManager.REFS_CACHE_AUTOMERGE ) ) ) || ( com.google.gerrit.server.util.MagicBranch.isMagicBranch ( name ) ) ; }
public static void getHttpPassword ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeString > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "password.http" ) . get ( cb ) ; }
public void shouldNotDispatchForwardedEvents ( ) { com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; try { broker.fireEventForUnrestrictedListeners ( event ) ; } finally { com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; } org.mockito.Mockito.verifyZeroInteractions ( listenerMock ) ; }
public boolean allowsEdit ( com.google.gerrit.reviewdb.client.Account.FieldName field ) { return false ; }
public com.google.gerrit.pgm.init.LibraryDownloader get ( ) { return new com.google.gerrit.pgm.init.LibraryDownloader ( ui , site ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.DraftResource rsrc , com.google.gerrit.server.change.DeleteDraft.Input input ) throws com.google.gwtorm.server.OrmException { db.get ( ) . patchComments ( ) . delete ( java.util.Collections.singleton ( rsrc.getComment ( ) ) ) ; return new java.lang.Object ( ) ; }
public void testBackreference ( ) { org.junit.Assert.assertEquals ( "<a href=\"/bug?id=123\">issue 123</a>" , new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "(bug|issue)\\s*([0-9]+)" , "/bug?id=$2" ) . replace ( "issue 123" ) ) ; }
private com.google.gerrit.server.group.InternalGroup toInternalGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( ) . get ( uuid ) . orElse ( null ) ; }
protected void configure ( ) { bind ( com.google.inject.Key.get ( javax.sql.DataSource.class , com.google.inject.name.Names.named ( "ReviewDb" ) ) ) . toProvider ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; listener ( ) . to ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) ; }
public java.lang.String toString ( ) { return ( ( com.google.gerrit.server.query.IntPredicate.getOperator ( ) ) + ":" ) + ( com.google.gerrit.server.query.IntPredicate.getValue ( ) ) ; }
public void suggestReviewer ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String query , int limit , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ReviewerInfo > > callback ) { callback.onSuccess ( java.util.Collections.< com.google.gerrit.common.data.ReviewerInfo > emptyList ( ) ) ; }
private java.util.Optional < com.google.gerrit.server.group.InternalGroup > toInternalGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( ) . get ( uuid ) ; }
private boolean canSeeMembers ( ) { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( group ) ; return ( ( accountGroup != null ) && ( accountGroup.isVisibleToAll ( ) ) ) || ( isOwner ( ) ) ; }
public java.sql.Timestamp getMaxTimestamp ( ) { return com.google.gerrit.server.ChangeUtil.timeFromSortKey ( getValue ( ) ) ; }
private void superWindowResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( ( ( com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS ) * 2 ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
public void createProjectHttpWithUnreasonableName_BadRequest ( ) throws java.lang.Exception { adminRestSession.put ( ( "/projects/" + ( com.google.gerrit.extensions.restapi.Url.encode ( name ( "invalid/../name" ) ) ) ) ) . assertBadRequest ( ) ; }
public void createExtraAccount ( ) throws java.lang.Exception { extraReviewer = accounts.create ( "extraReviewer" , "extraReviewer@example.com" , "extraReviewer" ) ; extraCcer = accounts.create ( "extraCcer" , "extraCcer@example.com" , "extraCcer" ) ; }
void createNewProject ( java.lang.String projectName , java.lang.String parentName , boolean emptyCommit , boolean permissionsOnly , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public void postUpdateImpl ( com.google.gerrit.server.update.BatchUpdate.Context ctx ) throws com.google.gwtorm.server.OrmException { if ( ( rebaseOp ) != null ) { rebaseOp.postUpdate ( ctx ) ; } }
public static void putMessage ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String m , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > r ) { com.google.gerrit.client.changes.ChangeApi.change ( id.get ( ) ) . view ( "edit_message" ) . put ( m , r ) ; }
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.DraftActions.publish ( changeId , revision ) ; }
public java.lang.String [ ] getParameterValues ( java.lang.String name ) { return com.google.gerrit.util.http.testutil.FakeHttpServletRequest.STRING_COLLECTION_TO_ARRAY.apply ( parameters.get ( name ) ) ; }
com.google.gwt.resources.client.CssResource css ( ) ;
abstract java.lang.Runnable openCloseAll ( final net.codemirror.lib.CodeMirror cm ) ;
private static java.lang.String swfUrl ( ) { if ( ( com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl ) == null ) { com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl = ( com.google.gwt.core.client.GWT.getModuleBaseURL ( ) ) + "gwtexpui_clippy1.cache.swf" ; } return com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl ; }
public org.eclipse.jgit.lib.BatchRefUpdate getBatchRefUpdate ( ) throws java.io.IOException { initRepository ( ) ; if ( ( batchRefUpdate ) == null ) { batchRefUpdate = repo.getRefDatabase ( ) . newBatchUpdate ( ) ; } return batchRefUpdate ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { createFileCommentEditorOnSideA ( ) ; }
private com.google.gerrit.extensions.common.EditInfo toEditInfo ( boolean files ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( ( files ? urlGetFiles ( ) : urlEdit ( ) ) ) ; return readContentFromJson ( r , com.google.gerrit.extensions.common.EditInfo.class ) ; }
public void put ( com.google.gerrit.server.change.AccountInfo info ) { provided.add ( info ) ; }
private static com.google.gerrit.client.rpc.RestApi api ( int id , java.lang.String commit , java.lang.String action ) { return new com.google.gerrit.client.rpc.RestApi ( ( ( ( ( ( "/changes/" + id ) + "/revisions/" ) + commit ) + "/" ) + action ) ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; if ( ( c.getRevId ( ) ) == null ) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId ( c , cache , change , ps ) ; } update.insertComment ( c ) ; }
private com.google.gerrit.server.git.MergeTip cherryPickUnbornRoot ( com.google.gerrit.server.git.CodeReviewCommit n ) { com.google.gerrit.server.git.MergeTip mergeTip = new com.google.gerrit.server.git.MergeTip ( n , com.google.common.collect.Lists.newArrayList ( n ) ) ; n.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; return mergeTip ; }
public void listBranchesOfNonExistingProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( GET ( "/projects/non-existing/branches" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getAllRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { return filter ( getProjectState ( ) . getAllRights ( actionId , true ) ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { com.google.gerrit.client.Gerrit.postSignIn ( result ) ; hide ( ) ; if ( ac != null ) { ac.onSuccess ( null ) ; } }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.group.InternalGroup > subgroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.SUBGROUPS , subgroupUuid.get ( ) ) ; }
private java.lang.String urlEditMessage ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edit:message" ; }
public static com.google.common.collect.ImmutableList < com.google.gerrit.gpg.testutil.TestKey > allValidKeys ( ) { return com.google.common.collect.ImmutableList.of ( com.google.gerrit.gpg.testutil.TestKeys.key1 ( ) , com.google.gerrit.gpg.testutil.TestKeys.key2 ( ) , com.google.gerrit.gpg.testutil.TestKeys.key5 ( ) ) ; }
public void testChangeEventShouldBeQueuedWhenSubmitted ( ) { asyncListener.onChangeEvent ( event ) ; org.junit.Assert.assertEquals ( event , asyncListener.getQueue ( ) . peek ( ) ) ; }
public java.lang.Integer get ( ) { return org.eclipse.jgit.internal.storage.file.WindowCacheStatAccessor.getOpenFiles ( ) ; }
public void createEmptyChange_MissingBranch ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = new com.google.gerrit.extensions.common.ChangeInfo ( ) ; ci.project = project.get ( ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "branch must be non-empty" ) ; }
public static native void go ( java.lang.String t ) ;
public void startLineGreaterThanEndLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 20 , 2 , 19 , 10 ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public void setControl ( com.google.gerrit.server.project.ChangeControl control ) { this . control = control ; }
public void exec ( com.googlesrouce.gerrit.plugins.github.git.GitImportJob job ) { executor.execute ( job ) ; }
protected void configure ( ) { command ( "git-lfs-authenticate" ) . to ( com.google.gerrit.sshd.plugin.LfsPluginAuthCommand.class ) ; com.google.gerrit.extensions.registration.DynamicItem.itemOf ( binder ( ) , com.google.gerrit.sshd.plugin.LfsPluginAuthCommand.LfsSshPluginAuth.class ) ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , allUsers , c.getProject ( ) , c ) . load ( ) ; }
public void testGcWithoutCapability_Error ( ) throws java.lang.Exception { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession ( server , user ) ; s.exec ( "gerrit gc --all" ) ; assertError ( "Capability runGC is required to access this resource" , s.getError ( ) ) ; s.close ( ) ; }
public java.util.Set < com.google.gerrit.reviewdb.Account.Id > missing ( final java.lang.String key ) { return java.util.Collections.emptySet ( ) ; }
private void ensurePermitted ( com.google.gerrit.server.project.ChangeControl changeControl ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gwtorm.server.OrmException { if ( ! ( changeControl.canAddPatchSet ( reviewDb.get ( ) ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( "Adding patch sets and hence creation or" + " modification of change edits is not permitted." ) ) ; } }
private com.google.gerrit.acceptance.RestResponse POST ( java.lang.String endPoint , com.google.gerrit.acceptance.rest.group.MembersInput mi ) throws java.io.IOException { return session.post ( endPoint , mi ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return json.format ( rsrc ) ; }
private boolean isSearcherCurrent ( ) { try { return reopenThread.waitForGeneration ( gen , 0 ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.SubIndex.log.warn ( "Interrupted waiting for searcher generation" , e ) ; return false ; } }
public void doCommentAddedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , java.lang.String comment , java.util.Map < java.lang.String , java.lang.Short > approvals , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps ) { addPatchSets ( a , ps , null , false , null ) ; }
com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.client.reviewdb.Account.Id id ) ;
abstract com.google.gerrit.server.mail.receive.MailMessage.Builder htmlContent ( java.lang.String val ) ;
protected void configure ( ) { bind ( com.google.gerrit.server.query.change.ChangeQueryRewriter.class ) . to ( com.google.gerrit.server.index.IndexRewriteImpl.class ) ; bind ( com.google.gerrit.server.index.IndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.IndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.cancelUnsavedChanges ( ) ) ) ) { upToChange ( ) ; } }
public boolean canRead ( ) { return ( getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( Project.State.READ_ONLY ) ) || ( canWrite ( ) ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.ExternalNameKey > lookupGroups ( java.lang.String name ) ;
public void currentPatchSetMissing ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange ( project , userId ) ; db.changes ( ) . insert ( java.util.Collections.singleton ( c ) ) ; assertProblems ( c , "Current patch set 1 not found" ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box , com.google.gerrit.common.changes.Side side ) { diffTable.addFileCommentBox ( box , side ) ; }
private void postMessage ( java.lang.String changeId , java.lang.String msg ) throws java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = msg ; adminSession.post ( ( ( "/changes/" + changeId ) + "/revisions/1/review" ) , in ) . consume ( ) ; }
com.googlesource.gerrit.plugins.replication.PushAll create ( java.lang.String urlMatch , com.googlesource.gerrit.plugins.replication.ReplicationFilter filter , com.googlesource.gerrit.plugins.replication.ReplicationState state ) ;
private void removeChangeIdLock ( com.google.gerrit.reviewdb.client.Change.Id id ) { synchronized ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.changeIdLocks ) { com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.changeIdLocks.remove ( id ) ; } }
public java.lang.String getRefName ( ) { return null ; }
private void insertEmptyLines ( net.codemirror.lib.CodeMirror cm , int nextLine , int cnt ) { addPaddingWidget ( cm , DiffTable.style.padding ( ) , ( nextLine - 1 ) , cnt , Unit.EM , null ) ; }
public org.apache.sshd.common.file.SshFile getFile ( java.lang.String file ) { return null ; }
public void addReviewerToReviewableWipChange ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
private void createTestSiteDirs ( ) throws java.io.IOException { com.google.gerrit.server.config.SitePaths sitePath = new com.google.gerrit.server.config.SitePaths ( testSite ) ; pluginsSitePath = java.nio.file.Files.createDirectories ( sitePath.plugins_dir ) ; java.nio.file.Files.createDirectories ( sitePath.tmp_dir ) ; }
public java.lang.String getPluginName ( java.nio.file.Path srcPath ) { return com.google.common.base.MoreObjects.firstNonNull ( getGerritPluginName ( srcPath ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcPath ) ) ; }
public com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) { com.google.gerrit.reviewdb.Account.Id id = byName.get ( username ) ; return id != null ? get ( id ) : null ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.accounts.Accounts.class ) . to ( com.google.gerrit.server.api.accounts.AccountsImpl.class ) ; factory ( AccountApiImpl.Factory.class ) ; }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , false , expectedStatus ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForUser ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Account.Id owner ) throws java.lang.Exception { return newChange ( repo , null , owner , null , null , null ) ; }
private com.google.gerrit.reviewdb.client.Change getChange ( java.lang.String changeId ) throws java.lang.Exception { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( changeId ) ) ) ; }
private int getMyTotalHeight ( ) { int total = 0 ; for ( com.google.gerrit.client.diff.CommentBox box : comments ) { total += box.getOffsetHeight ( ) ; } return total ; }
private int getRandomExecutionDelay ( com.googlesrouce.gerrit.plugins.github.git.GitJob job ) { java.util.Random rnd = new java.util.Random ( ( ( java.lang.System.currentTimeMillis ( ) ) + ( job.hashCode ( ) ) ) ) ; return rnd.nextInt ( config.getJobExecTimeout ( ) ) ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public boolean isOwner ( ) { return ( canPerformOnAllRefs ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
private boolean canAddRefs ( ) { return ( canPerformOnAnyRef ( Permission.CREATE ) ) || ( isOwnerAnyRef ( ) ) ; }
public org.eclipse.jgit.revwalk.RevCommit createRef ( java.lang.String refName ) throws java.io.IOException { if ( com.google.common.base.Objects.equal ( src , revision ) ) { return revision ; } return updateRef ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) , src , refName ) ; }
private static byte [ ] toBytes ( com.google.gerrit.extensions.restapi.BinaryResult content ) throws java.lang.Exception { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; content.writeTo ( os ) ; return os.toByteArray ( ) ; }
public static com.google.gerrit.testutil.InMemoryDatabase newDatabase ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) { com.google.inject.Injector injector = com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( ) ) ; lifecycle.add ( injector ) ; return injector.getInstance ( com.google.gerrit.testutil.InMemoryDatabase.class ) ; }
public void visit ( com.google.gitiles.doc.NamedAnchorNode node ) { if ( outputNamedAnchor ) { html.open ( "a" ) . attribute ( "name" , node.name ) . close ( "a" ) ; } }
public Response.Action getUploadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id , long size ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getUploadAction ( id , size ) ; com.googlesource.gerrit.plugins.lfs.AuthInfo authInfo = authorizer.generateAuthInfo ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.UPLOAD , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.ExpiringAction ( action.href , authInfo ) ; }
public static org.commonmark.node.Node parse ( byte [ ] md ) { return com.google.gitiles.doc.GitilesMarkdown.parse ( org.eclipse.jgit.util.RawParseUtils.decode ( md ) ) ; }
private void extractMailExample ( java.lang.String orig ) throws java.lang.Exception { java.io.File ex = new java.io.File ( site.mail_dir , ( orig + ".example" ) ) ; com.google.gerrit.pgm.init.InitUtil.extract ( ex , com.google.gerrit.server.mail.OutgoingEmail.class , orig ) ; com.google.gerrit.pgm.init.InitUtil.chmod ( 292 , ex ) ; }
public final native com.google.gwt.core.client.JsArrayString diff_header ( ) ;
public void onFailure ( java.lang.Throwable caught ) { deleteIdentity.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.reviewdb.client.Change change ) { return index ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public com.google.gerrit.server.project.ProjectState get ( final com.google.gerrit.client.reviewdb.Project.NameKey projectName ) { return get0 ( projectName ) ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultProjectName ( ) . equals ( nameBox.getText ( ) ) ) { nameBox.setText ( "" ) ; nameBox.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , null , db , id , null ) ; }
public com.google.gerrit.server.query.Predicate < T > copy ( java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { return this ; }
public static com.google.gerrit.common.data.PermissionRule allow ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group , java.lang.String ref , boolean exclusive ) { return com.google.gerrit.server.project.testing.Util.grant ( project , permissionName , com.google.gerrit.server.project.testing.Util.newRule ( project , group ) , ref , exclusive ) ; }
public void setUpTestRepo ( ) throws java.lang.Exception { testRepo = new org.eclipse.jgit.junit.TestRepository ( repo ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; }
protected void configureCommands ( ) { command ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscription.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.BranchManifest.class ) ; }
public void setup ( ) throws java.lang.Exception { testAccount = accounts.create ( "someUser" ) ; }
protected abstract T updateProjectConfig ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
com.google.gerrit.server.workflow.FunctionState create ( com.google.gerrit.client.reviewdb.Change c , java.util.Collection < com.google.gerrit.client.reviewdb.ChangeApproval > all ) ;
public static void setHeaderVisible ( boolean visible ) { com.google.gerrit.client.Gerrit.topMenu.setVisible ( visible ) ; com.google.gerrit.client.Gerrit.siteHeader.setVisible ( ( visible && ( ( com.google.gerrit.client.Gerrit.myAccount ) != null ? com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences ( ) . isShowSiteHeader ( ) : true ) ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; }
private void display ( final com.google.gerrit.client.data.SideBySidePatchDetail detail ) { sbsTable.setAccountInfoCache ( detail.getAccounts ( ) ) ; sbsTable.display ( detail ) ; }
public void groupCannotBeRenamedToNull ( ) throws java.lang.Exception { createGroup ( groupUuid , groupName ) ; expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.loadForRename ( repo , groupUuid , groupName , null ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , com.google.gerrit.reviewdb.client.Account updater ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE , util.accountInfo ( updater ) ) ; }
private void setupCommonMocks ( ) { org.easymock.EasyMock.expect ( itsConfig.isEnabled ( org.easymock.EasyMock.anyObject ( com.google.gerrit.server.events.Event.class ) ) ) . andReturn ( true ) . anyTimes ( ) ; }
public void setNodeCoherent ( boolean b ) throws java.lang.UnsupportedOperationException { self ( ) . setNodeCoherent ( b ) ; }
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.neckCut ( ) ; return cont ; }
public void run ( ) { updateActiveLine ( cm ) . run ( ) ; }
public static com.google.gwt.user.client.Element set ( final com.google.gwt.user.client.Element e , final com.google.gwtexpui.safehtml.client.SafeHtml str ) { com.google.gwt.user.client.DOM.setInnerHTML ( e , str.asString ( ) ) ; return e ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > draftByPatchSetAuthor ( com.google.gerrit.reviewdb.client.PatchSet.Id patchset , com.google.gerrit.reviewdb.client.Account.Id author ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit ) { com.google.common.base.Preconditions.checkArgument ( ( maxLimit > 0 ) , "maxLimit must be positive: %s" , maxLimit ) ; return new com.google.gerrit.server.index.AutoValue_IndexConfig ( maxLimit ) ; }
public final AccountGroup.UUID getOwnerUUID ( ) { java.lang.String owner = owner_id ( ) ; if ( owner != null ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( com.google.gwt.http.client.URL.decodePathSegment ( owner ) ) ; } return null ; }
public static com.google.gerrit.client.rpc.RestApi editWithCommands ( int id ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "download-commands" , true ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > topic ( java.lang.String topic ) { return new com.google.gerrit.server.query.change.TopicPredicate ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , topic ) ; }
public com.googlesource.gerrit.plugins.hooks.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentLink" , pluginName , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
void bind ( final net.sf.ehcache.Ehcache ehcache ) { cache.bind ( ehcache ) ; }
void finish ( ) { id = com.google.gerrit.server.util.Url.encode ( name ) ; }
private void cherryPickRootOntoBranch ( com.google.gerrit.server.git.CodeReviewCommit n ) { n.setStatusCode ( CommitMergeStatus.CANNOT_CHERRY_PICK_ROOT ) ; }
public static void main ( final java.lang.String [ ] argv ) throws java.lang.Exception { java.lang.System.exit ( com.google.gerrit.main.GerritLauncher.mainImpl ( argv ) ) ; }
public void setUpConfig ( ) throws java.lang.Exception { config.setInt ( "index" , null , "maxPages" , 10 ) ; }
public void testWithSectionOfNonexistingProject ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.fromText ( ( "\n" + ( ( ( "[submodule \"a\"]\n" + "path = a\n" ) + "url = ssh://non-localhost/a\n" ) + "branch = .\\n" ) ) ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; com.google.common.truth.Truth.assertThat ( res ) . isEmpty ( ) ; }
public void setMessage ( java.lang.String message ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getFromUser ( java.lang.String username ) { try { return new com.googlesource.gerrit.plugins.github.oauth.OAuthCookie ( username , encode ( username ) ) ; } catch ( com.googlesource.gerrit.plugins.github.oauth.OAuthTokenException e ) { return null ; } }
public static void all ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.MemberList > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( group.get ( ) ) . view ( "members" ) . get ( callback ) ; }
public void execute ( ) { if ( ( box.getValue ( ) . trim ( ) . length ( ) ) == 0 ) { widget.setEnabled ( false ) ; } }
public final native void setScrollSetByOther ( boolean setByOther ) ;
static void invoke ( com.google.gerrit.client.changes.ChangeInfo change , com.google.gerrit.client.actions.ActionInfo action , com.google.gerrit.client.rpc.RestApi api ) { com.google.gerrit.client.api.DefaultActions.invoke ( action , api , com.google.gerrit.client.api.DefaultActions.callback ( com.google.gerrit.common.PageLinks.toChange ( change.legacyId ( ) ) ) ) ; }
public final java.util.Set < java.lang.String > permitted_labels ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _permitted_labels ( ) ) ; }
public final native net.codemirror.lib.KeyMap remove ( java.lang.String key ) ;
public boolean isEnableSignedPush ( ) { return getInheritableBoolean ( new com.google.common.base.Function < com.google.gerrit.reviewdb.client.Project , com.google.gerrit.extensions.client.InheritableBoolean > ( ) { @ java.lang.Override public com.google.gerrit.extensions.client.InheritableBoolean apply ( com.google.gerrit.reviewdb.client.Project input ) { return input.getEnableSignedPush ( ) ; } } ) ; }
private java.lang.String healthCheckAccess ( ) throws java.io.IOException { client ( ) . sysInfo ( ) ; final java.lang.String result = ( "{\"status\"=\"ok\",\"username\"=\"" + ( getUsername ( ) ) ) + "\"}" ; log.debug ( "Health check on access result: {}" , result ) ; return result ; }
private void initNoteDb ( ) { ui.message ( ( "Use experimental NoteDb for change metadata?\n" + ( ( " NoteDb is not recommended for production servers." + " Please familiarize yourself with the documentation:\n" ) + " https://gerrit-review.googlesource.com/Documentation/dev-note-db.html\n" ) ) ) ; if ( ! ( ui.yesno ( false , "Enable" ) ) ) { return ; } org.eclipse.jgit.lib.Config defaultConfig = new org.eclipse.jgit.lib.Config ( ) ; NotesMigrationState.FINAL.setConfigValues ( defaultConfig ) ; for ( java.lang.String name : defaultConfig.getNames ( com.google.gerrit.server.notedb.NotesMigration.SECTION_NOTE_DB , com.google.gerrit.server.notedb.NoteDbTable.CHANGES.key ( ) ) ) { noteDbChanges.set ( name , defaultConfig.getString ( com.google.gerrit.server.notedb.NotesMigration.SECTION_NOTE_DB , com.google.gerrit.server.notedb.NoteDbTable.CHANGES.key ( ) , name ) ) ; } }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.common.data.AccountInfo acct ) { return com.google.gerrit.common.PageLinks.toAccountDashboard ( acct.getId ( ) ) ; }
java.lang.String getSecure ( java.lang.String name ) { return flags.sec.getString ( section , null , name ) ; }
private void assertDeleteForbidden ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "delete not permitted" ) ; tag ( ) . delete ( ) ; }
public void testCreateProjectHttpWhenProjectAlreadyExists_PreconditionFailed ( ) throws java.lang.Exception { adminSession.putWithHeader ( ( "/projects/" + ( allProjects.get ( ) ) ) , new org.apache.http.message.BasicHeader ( com.google.common.net.HttpHeaders.IF_NONE_MATCH , "*" ) ) . assertPreconditionFailed ( ) ; }
public boolean nameIsId ( ) { return ( org.eclipse.jgit.lib.AbbreviatedObjectId.isId ( name ) ) && ( ( org.eclipse.jgit.lib.AbbreviatedObjectId.fromString ( name ) . prefixCompare ( id ) ) == 0 ) ; }
public boolean isValid ( final com.google.gerrit.client.reviewdb.Account.Id accountId , final com.google.gerrit.client.data.ApprovalType at , final com.google.gerrit.server.workflow.FunctionState state ) { return false ; }
protected com.google.gerrit.server.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse resp ) { return callFactory.get ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSetInfo getPatchSetInfo ( ) { return patchSetInfo ; }
public java.util.List < com.google.gitiles.blame.Region > load ( com.google.gitiles.blame.BlameCacheImpl.Key key ) throws java.io.IOException { return com.google.gitiles.blame.BlameCacheImpl.loadBlame ( key ) ; }
public java.lang.String getMessage ( ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; return message ( refUpdate ) ; }
public java.lang.String getName ( java.lang.String anonymousCowardName ) { if ( ( fullName ) != null ) { return fullName ; } if ( ( preferredEmail ) != null ) { return preferredEmail ; } return getNameEmail ( anonymousCowardName ) ; }
public java.lang.String getPluginName ( java.io.File srcFile ) { return providerOf ( srcFile ) . getPluginName ( srcFile ) ; }
void setContext ( com.google.gerrit.reviewdb.server.ReviewDb db , java.sql.Timestamp ts , com.google.gerrit.server.IdentifiedUser caller ) { this . db = db ; this . ts = ts ; this . caller = caller ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig , notesMigration ) ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.notedb.ChangeNotes notes ) ;
private void doReplay ( ) { org.easymock.EasyMock.replay ( schemaFactory , schema , subscriptions , urlProvider , repoManager , replication ) ; }
com.google.gerrit.server.change.SetAssigneeOp create ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) ;
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change ( ) ; return ( change != null ) && ( status.equals ( change.getStatus ( ) ) ) ; }
protected void assertBadQuery ( java.lang.Object query ) throws java.lang.Exception { try { query ( query ) ; org.junit.Assert.fail ( ( "expected BadRequestException for query: " + query ) ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) { } }
public void deleteEmailEventually ( java.lang.String messageId ) { synchronized ( pendingDeletion ) { pendingDeletion.add ( messageId ) ; } }
public boolean isVisible ( ) { return ( ( visibleForReplication ( ) ) || ( canPerformOnAnyRef ( Permission.READ ) ) ) && ( ! ( isHidden ( ) ) ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , new com.googlesource.gerrit.plugins.examples.wuichangescreenbelowchangeinfoblock.client.ExampleChangeScreenExtension.Factory ( ) ) ; }
public int run ( ) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.server.config.GerritGlobalModule.createInjector ( ) ; com.google.inject.Injector sshInjector = createSshInjector ( sysInjector ) ; com.google.gerrit.server.Lifecycle.start ( sysInjector , sshInjector ) ; return never ( ) ; }
private static boolean isJson ( byte [ ] raw , int offset ) { return ( ( raw [ offset ] ) == '{' ) || ( ( raw [ offset ] ) == '[' ) ; }
public final native double defaultCharWidth ( ) ;
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > byChange ( com.google.gerrit.reviewdb.client.Change.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public java.util.List < com.google.gerrit.client.reviewdb.AccountSshKey > run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.accountSshKeys ( ) . byAccount ( com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ) . toList ( ) ; }
public com.google.gerrit.sshd.SshScope.Context get ( ) { return com.google.gerrit.sshd.SshScope.getContext ( ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( account , com.google.common.collect.ImmutableSet.of ( ) , com.google.common.collect.ImmutableSet.of ( ) , new java.util.HashMap < > ( ) ) ; }
void addLine ( int line ) { dst.addLine ( line , src.getLine ( line ) ) ; }
protected void set ( int newValue ) { seq = newValue ; }
public void commentOnReview ( java.lang.String project , int number , java.lang.String commentTemplate ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.project.NoSuchChangeException , com.google.gerrit.server.update.UpdateException , com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.extensions.api.changes.ReviewInput comment = createComment ( commentTemplate ) ; applyComment ( project , number , comment ) ; }
public void testOne ( ) { com.google.common.truth.Truth.assertThat ( cfg.getString ( "x" , null , "y" ) ) . isEqualTo ( "z" ) ; }
public boolean login ( javax.servlet.ServletRequest request , javax.servlet.ServletResponse response , com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope ... scopes ) throws java.io.IOException { return login ( ( ( javax.servlet.http.HttpServletRequest ) ( request ) ) , ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) , scopes ) ; }
public void flushCache_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/accounts/flush" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
public void exec ( com.googlesrouce.gerrit.plugins.github.git.GitJob job ) { executor.schedule ( requestScopePropagator.wrap ( job ) , getRandomExecutionDelay ( job ) , java.util.concurrent.TimeUnit.SECONDS ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ( userPopup.isShowing ( ) ) && ( userPopup.isVisible ( ) ) ) { userPopup.hide ( ) ; } else { userPopup.showRelativeTo ( l ) ; } }
public org.eclipse.jgit.lib.ObjectId getOldId ( ) { return oldId ; }
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.NoteDbMode.get ( ) ) . isNotEqualTo ( NoteDbMode.CHECK ) ; }
public void onMouseOut ( com.google.gwt.event.dom.client.MouseOutEvent event ) { popup.setVisible ( false ) ; popup.clear ( ) ; }
public java.lang.String apply ( com.google.gerrit.reviewdb.client.AccountProjectWatch in ) { return in.getProjectNameKey ( ) . get ( ) ; }
protected void setupSoyContext ( ) { super . setupSoyContext ( ) ; soyContext.put ( "inlineCommentGroups" , getCommentGroupsTemplateData ( ) ) ; }
public void deleteAll ( ) throws java.io.IOException { openIndex.deleteAll ( ) ; }
private boolean isDeclaredOwner ( ) { if ( ( declaredOwner ) == null ) { declaredOwner = user.memberOfAny ( state.getAllOwners ( ) ) ; } return declaredOwner ; }
public void maybeFossilCollectIndexRow ( long now , byte [ ] key , com.google.gwtorm.nosql.IndexRow r ) throws com.google.gwtorm.client.OrmException { if ( ( ( r.getTimestamp ( ) ) + ( db.getMaxFossilAge ( ) ) ) <= now ) { delete ( key ) ; } }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { getBatchRefUpdate ( ) . addCommand ( cmd ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > published ( com.google.gerrit.reviewdb.Patch.Key patch ) throws com.google.gwtorm.client.OrmException ;
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; } else { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeQuery ( "status:open" ) ) ; } }
com.google.gerrit.server.schema.Schema_77.LegacyLabelType byId ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id ) { return byId.get ( id.get ( ) ) ; }
int getHeaderHeight ( ) { int h = patchSetSelectBoxA.getOffsetHeight ( ) ; if ( header ) { h += diffHeaderRow.getOffsetHeight ( ) ; } return h ; }
public final java.lang.String cloneCommand ( java.lang.String commandName , java.lang.String project ) { return cloneCommand ( commandName ) . replaceAll ( "\\$\\{project\\}" , project ) ; }
private void assertDeleteForbidden ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.AuthException.class ) ; exception.expectMessage ( "delete not permitted" ) ; branch ( ) . delete ( ) ; }
public int run ( ) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.server.config.GerritGlobalModule.createInjector ( ) ; com.google.inject.Injector sshInjector = createSshInjector ( sysInjector ) ; com.google.gerrit.server.Lifecycle.start ( sysInjector , sshInjector ) ; return never ( ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > allExternalMembers ( ) { try { return external.get ( com.google.gerrit.server.account.GroupIncludeCacheImpl.EXTERNAL_NAME ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.account.GroupIncludeCacheImpl.log.warn ( "Cannot load set of non-internal groups" , e ) ; return java.util.Collections.emptySet ( ) ; } }
public boolean setUsernamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > usernames ) { return false ; }
public void setFunctionName ( java.lang.String functionName ) { this . functionName = functionName ; }
public void putApproval ( java.lang.String label , short value ) { putApprovalFor ( getUser ( ) . getAccountId ( ) , label , value ) ; }
public com.google.gerrit.server.git.receive.ReceiveCommits getReceiveCommits ( ) { return rc ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( com.google.gerrit.server.notedb.ChangeNotesTest.SERVER_IDENT , repoManager , com.google.gerrit.server.notedb.NotesMigration.allEnabled ( ) , accountCache , null , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , c , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , user ) ; }
private void initDisplayControls ( ) { final com.google.gwt.user.client.ui.FlowPanel displayControls = new com.google.gwt.user.client.ui.FlowPanel ( ) ; displayControls.setStyleName ( "gerrit-PatchScreen-DisplayControls" ) ; add ( displayControls ) ; displayControls.add ( createShowFullFiles ( ) ) ; displayControls.add ( createIgnoreWhitespace ( ) ) ; }
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.ChangeActions.publish ( changeId , revision , publish , deleteRevision ) ; }
public static com.google.gerrit.server.index.FieldDef.Builder < byte [ ] > storedOnly ( java.lang.String name ) { return new com.google.gerrit.server.index.FieldDef.Builder ( FieldType.STORED_ONLY , name ) . stored ( ) ; }
private com.google.gerrit.server.account.WatchConfig.NotifyValue parseNotifyValue ( java.lang.String notifyValue ) { return com.google.gerrit.server.account.WatchConfig.NotifyValue.parse ( new com.google.gerrit.reviewdb.client.Account.Id ( 1000000 ) , "project" , notifyValue , this ) ; }
private void merge ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { revision ( r ) . review ( com.google.gerrit.extensions.api.changes.ReviewInput.approve ( ) ) ; revision ( r ) . submit ( ) ; }
public void onFailure ( java.lang.Throwable err ) { com.google.gerrit.client.change.RelatedChangesTab tab = tabs.get ( com.google.gerrit.client.change.RelatedChanges.RELATED_CHANGES ) ; tab.setTitle ( Resources.M.relatedChanges ( "na" ) ) ; tab.setError ( err.getMessage ( ) ) ; }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) { commands.add ( cmd ) ; }
protected void assertBadQuery ( com.google.gerrit.extensions.api.changes.Changes.QueryRequest query ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; query.get ( ) ; }
public com.google.common.truth.ComparableSubject < ? , java.sql.Timestamp > creationDate ( ) { isNotNull ( ) ; com.google.gerrit.extensions.common.GitPerson gitPerson = actual ( ) ; return com.google.common.truth.Truth.assertThat ( gitPerson.date ) . named ( "creationDate" ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForCommit ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { return newChange ( repo , commit , null , null , null , null ) ; }
public final short changesPerPage ( ) { short changesPerPage = get ( "changes_per_page" , AccountGeneralPreferences.DEFAULT_PAGESIZE ) ; return 0 < changesPerPage ? changesPerPage : com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DEFAULT_PAGESIZE ; }
public void insertItem ( final com.google.gerrit.client.ui.LinkMenuItem i , int beforeIndex ) { insert ( i , beforeIndex ) ; }
protected void configure ( ) { bind ( com.googlesource.gerrit.plugins.replication.Destination.class ) . toInstance ( this ) ; bind ( org.eclipse.jgit.transport.RemoteConfig.class ) . toInstance ( remote ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . build ( PushOne.Factory.class ) ) ; }
public boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return ( canPerform ( Permission.SUBMIT , isChangeOwner ) ) && ( canWrite ( ) ) ; }
void setMaxHeight ( int height ) { maxHeight = height ; if ( ( view ) != null ) { view.setHeight ( ( height + "px" ) ) ; view.movePointerTo ( view.selectedRow , true ) ; } }
public void setStatus ( com.google.gerrit.reviewdb.client.Change.Status status ) { com.google.common.base.Preconditions.checkArgument ( ( status != ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.SUBMITTED ) ) , "use submit(Iterable<PatchSetApproval>)" ) ; this . status = status ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( name , id , type , peeledId , peeledType ) ; }
public void sendError ( int sc ) { status = sc ; }
public long getElapsed ( ) { return ( java.lang.System.currentTimeMillis ( ) ) - ( when ) ; }
public Change.Key getChangeKey ( ) { return new com.google.gerrit.reviewdb.client.Change.Key ( change.get ( ) . id ) ; }
public void removeApprovalFor ( com.google.gerrit.reviewdb.client.Account.Id reviewer , java.lang.String label ) { approvals.put ( label , reviewer , com.google.common.base.Optional.< java.lang.Short > absent ( ) ) ; }
public com.google.common.base.Optional < com.google.gerrit.server.query.change.ChangeData.ChangedLines > changedLines ( ) throws com.google.gwtorm.server.OrmException { if ( ( changedLines ) == null ) { changedLines = computeChangedLines ( ) ; } return changedLines ; }
private com.google.gerrit.server.project.ProjectState newProjectState ( com.google.gerrit.server.git.ProjectConfig local ) { add ( local ) ; return all.get ( local.getProject ( ) . getNameKey ( ) ) ; }
private static long initialDelay ( java.lang.String startTime , java.lang.String interval ) throws org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.config.ScheduleConfigTest.config ( startTime , interval ) . getInitialDelay ( ) ; }
private static boolean isTextBody ( com.google.gwt.http.client.Response res ) { return com.google.gerrit.client.rpc.RestApi.isContentType ( res , "text/plain" ) ; }
private void fireEvent ( final com.google.gerrit.reviewdb.Change change , final com.google.gerrit.server.events.ChangeEvent event ) { for ( com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values ( ) ) { if ( isVisibleTo ( change , holder.user ) ) { holder.listener.onChangeEvent ( event ) ; } } }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.server.index.change.FakeChangeIndex.Source ( p ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.AccountGroup > result ) { if ( isAttached ( ) ) { groups.display ( result ) ; groups.finishDisplay ( true ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; setTitleText ( Gerrit.C.notFoundTitle ( ) ) ; add ( new com.google.gwt.user.client.ui.Label ( Gerrit.C.notFoundBody ( ) ) ) ; }
protected boolean isPatchSet ( ) { return false ; }
public void run ( ) { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine ( cm ) ; if ( group != null ) { group.openCloseLast ( ) ; } }
private static java.lang.String name ( java.nio.file.Path dir ) { return dir.getFileName ( ) . toString ( ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( goal ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( argNo ) , com.googlecode.prolog_cafe.lang.SymbolTerm.create ( domain ) , culprit } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.IllegalDomainException.DOMAIN_ERROR , args ) ; }
public void onSuccess ( com.google.gerrit.client.access.ProjectAccessInfo result ) { isOwner = result.isOwner ( ) ; enableForm ( ) ; saveProject.setVisible ( isOwner ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes ( ) ) { i.replace ( cd ) ; } fireChangeIndexedEvent ( cd ) ; }
static void initialize ( org.eclipse.jgit.lib.Config cfg ) { cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter.MARKDOWN.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/x-markdown" ) ; cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter.PLAIN_TEXT.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/plain" ) ; }
public void modifyFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.edit.ChangeEdit changeEdit , java.lang.String filePath , com.google.gerrit.extensions.restapi.RawInput newContent ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { modifyTree ( repository , changeEdit , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( filePath , newContent ) ) ; }
public com.google.gerrit.server.git.ChangeReportFormatter.Input setWorkInProgress ( boolean wip ) { this . wip = wip ; return this ; }
java.lang.String getTitle ( int count ) { }
public com.googlecode.prolog_cafe.lang.NumberTerm multiply ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) return t.multiply ( this ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) * ( t.intValue ( ) ) ) ) ; }
public int getSizeBasedOnAccuracy ( int statisticsAccuracy ) throws java.lang.IllegalArgumentException , java.lang.IllegalStateException , net.sf.ehcache.CacheException { return self.getSizeBasedOnAccuracy ( statisticsAccuracy ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { onSubmitResult ( result ) ; }
public void testEndsBeforeNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 , 3 ) , iter.advance ( 3 ) ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_SPACE_CHANGE ) ; } else { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; } refresh ( false ) ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; com.google.common.truth.Truth.assertThat ( rewrite.rewrite ( in , com.google.gerrit.server.index.change.IndexRewriterTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ) . isEqualTo ( query ( in ) ) ; }
com.googlesource.gerrit.plugins.hooks.HookResult run ( java.lang.String projectName , com.googlesource.gerrit.plugins.hooks.HookArgs args ) { return executor.submit ( projectName , path , args ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
protected void configure ( ) { bind ( ProjectControl.GenericFactory.class ) ; factory ( ProjectControl.AssistedFactory.class ) ; bind ( ChangeControl.Factory.class ) ; }
public int hashCode ( ) { return ( 127 * ( "value" . hashCode ( ) ) ) ^ ( value ( ) . hashCode ( ) ) ; }
public static com.google.gerrit.server.account.externalids.ExternalId create ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email , @ com.google.gerrit.common.Nullable java.lang.String hashedPassword ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings.emptyToNull ( email ) , com.google.common.base.Strings.emptyToNull ( hashedPassword ) ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project1.get ( ) ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project2.get ( ) ) ; project3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p3" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project3.get ( ) ) ; }
protected com.google.gwt.user.client.ui.Panel getButtonPanel ( ) { if ( ( buttons ) == null ) { buttons = new com.google.gwt.user.client.ui.FlowPanel ( ) ; buttons.setStyleName ( "gerrit-CommentPanel-Buttons" ) ; content.add ( buttons ) ; } return buttons ; }
public void onFailure ( java.lang.Throwable err ) { relatedChangesTab.setTitle ( Resources.M.relatedChanges ( "na" ) ) ; relatedChangesTab.setError ( err.getMessage ( ) ) ; }
public void addGpgKey ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) ; java.lang.String id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyId ( ) ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( key.getPublicKeyArmored ( ) ) ) . get ( id ) ; info.id = id ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , info ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ) ; org.bouncycastle.openpgp.PGPPublicKey stored = getOnlyKeyFromStore ( key ) ; com.google.common.truth.Truth.assertThat ( stored.getFingerprint ( ) ) . isEqualTo ( key.getPublicKey ( ) . getFingerprint ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.setEnableReviewerByEmail ( true ) ; saveProjectConfig ( project , cfg ) ; }
private static long initialDelay ( java.lang.String startTime , java.lang.String interval ) { return com.google.gerrit.server.config.ScheduleConfig.builder ( com.google.gerrit.server.config.ScheduleConfigTest.config ( startTime , interval ) , "section" , "subsection" ) . setNow ( com.google.gerrit.server.config.ScheduleConfigTest.NOW ) . build ( ) . getInitialDelay ( ) ; }
public boolean isConnectivityRequested ( com.google.gerrit.pgm.util.ConsoleUI ui , java.lang.String url ) { com.googlesource.gerrit.plugins.hooks.its.InitIts.YesNoEnum wantToTest = ui.readEnum ( com.googlesource.gerrit.plugins.hooks.its.InitIts.YesNoEnum.N , "Test connectivity to %s" , url ) ; return wantToTest == ( com.googlesource.gerrit.plugins.hooks.its.InitIts.YesNoEnum.Y ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( rsrc , new com.google.gerrit.server.group.Index.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot index group" , e ) ; } }
public final native double getHeight ( ) ;
private com.google.gerrit.server.account.AccountInfo GET_ONE ( java.lang.String endpoint ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( endpoint ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; return newGson ( ) . fromJson ( r.getReader ( ) , com.google.gerrit.server.account.AccountInfo.class ) ; }
public void onGitReferenceUpdated ( com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event ) { if ( event.getRefName ( ) . startsWith ( "refs/changes/" ) ) { cache.invalidate ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( false ) ) ; }
public void commentOnReviewableChangeByOwnerCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setEmailStrategy ( sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( false ) ) ; }
public void printJson ( final java.lang.StringBuilder sb , final T o ) { sb.append ( "{" ) ; printJsonImpl ( 0 , sb , o ) ; sb.append ( "}" ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s => %s" , src ( ) , dest ( ) ) ; }
public org.eclipse.jgit.lib.ObjectId insert ( int objectType , long length , java.io.InputStream in ) throws java.io.IOException { return com.google.gerrit.server.git.MergeUtil.createRandomObjectId ( ) ; }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( accountCache , accounts , key , repository , project , branch , files ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig ( com.google.gerrit.server.account.PreferencesConfig.PREFERENCES_CONFIG ) ; }
static java.lang.String timeout ( int expirationSeconds ) { return com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now ( ) . plusSeconds ( expirationSeconds ) ) ; }
public void pushWithInvalidChangeId ( ) throws java.lang.Exception { }
protected abstract void render ( com.google.gerrit.common.data.PatchScript script ) ;
public void onSuccess ( com.google.gerrit.reviewdb.client.Account result ) { registerNewEmail.setEnabled ( true ) ; onSaveSuccess ( com.google.gerrit.client.FormatUtil.asInfo ( result ) ) ; if ( onSave != null ) { onSave.onSuccess ( result ) ; } }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameter ( "list" , true ) . get ( cb ) ; }
public void setPrivate ( boolean value , @ com.google.gerrit.common.Nullable java.lang.String message ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void indexerThrowsIOExceptionTryingToIndexChange ( ) throws java.lang.Exception { setupPostMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.DO_NOT_THROW_ORM_EXCEPTION , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.THROW_IO_EXCEPTION ) ; syncIndexRestApiServlet.doPost ( req , rsp ) ; org.mockito.Mockito.verify ( rsp ) . sendError ( javax.servlet.http.HttpServletResponse.SC_CONFLICT , "io-error" ) ; }
void submit ( java.lang.String projectName , com.googlesource.gerrit.plugins.hooks.HookArgs args ) { queue.submit ( projectName , path , args ) ; }
public final java.util.Set < java.lang.String > labels ( ) { return com.google.gerrit.client.rpc.Natives.keys ( labels0 ( ) ) ; }
public java.util.Set < java.lang.String > getEmailAddresses ( ) { return state ( ) . getEmailAddresses ( ) ; }
public com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.project.ProjectResource , ? > create ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( id.toString ( ) . equals ( "default" ) ) { return createDefault.get ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public void execute ( ) { content.setFocus ( true ) ; }
void downloadRequired ( ) { this . required = true ; download ( ) ; }
public java.util.Optional < com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request > doProcess ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) { return java.util.Optional.of ( new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request ( com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson ( event ) ) ) ; }
public java.lang.Boolean run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAbandonChange ( message , change , patchSetId , cmsg , db , txn ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { showAddKeyBlock ( false ) ; }
private static com.google.gerrit.client.rpc.RestApi api ( int id , java.lang.String action ) { return new com.google.gerrit.client.rpc.RestApi ( ( ( ( "/changes/" + id ) + "/" ) + action ) ) ; }
protected void configure ( ) { post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "say-hello" ) . to ( com.googlesource.gerrit.plugins.cookbook.HelloWorldAction.class ) ; }
public com.googlecode.prolog_cafe.lang.PrologMachineCopy loadMachine ( java.lang.String name , java.io.InputStream in ) throws com.googlecode.prolog_cafe.exceptions.CompileException { com.googlecode.prolog_cafe.lang.PrologMachineCopy pmc = consultRules ( name , new java.io.InputStreamReader ( in ) ) ; if ( pmc == null ) { throw new com.googlecode.prolog_cafe.exceptions.CompileException ( ( "Cannot consult rules from the stream " + name ) ) ; } return pmc ; }
public abstract java.util.Set < com.google.gerrit.reviewdb.Project.NameKey > getWatchedProjects ( ) ;
private com.google.gerrit.server.mail.Address computeFrom ( ) { if ( ( fromId ) != null ) { return toAddress ( fromId ) ; } final org.spearce.jgit.lib.PersonIdent pi = server.newGerritPersonIdent ( ) ; return new com.google.gerrit.server.mail.Address ( pi.getName ( ) , pi.getEmailAddress ( ) ) ; }
public final void commentVisibilityStrategy ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy s ) { commentVisibilityStrategyRaw ( ( s != null ? s.toString ( ) : null ) ) ; }
public static java.io.File getDistributionArchive ( ) throws java.io.FileNotFoundException { if ( ( com.google.gerrit.main.GerritLauncher.myArchive ) == null ) { com.google.gerrit.main.GerritLauncher.myArchive = com.google.gerrit.main.GerritLauncher.locateMyArchive ( ) ; } return com.google.gerrit.main.GerritLauncher.myArchive ; }
java.io.File getSrcJar ( ) { return getSrcFile ( ) ; }
private void setStarred ( final boolean s ) { if ( s ) { Gerrit.ICONS.starFilled ( ) . applyTo ( starChange ) ; } else { Gerrit.ICONS.starOpen ( ) . applyTo ( starChange ) ; } starred = s ; }
public boolean canConnect ( org.apache.sshd.common.SshdSocketAddress address , org.apache.sshd.common.Session session ) { return false ; }
public boolean isAllProjects ( ) { return allProjectsName.equals ( project.getNameKey ( ) ) ; }
private static void ensureInited ( ) { if ( ( com.google.gerrit.client.FormatUtil.dtfmt ) == null ) { com.google.gerrit.client.FormatUtil.setPreferences ( com.google.gerrit.client.Gerrit.getUserPreferences ( ) ) ; } }
private static com.google.gerrit.reviewdb.server.ReviewDb unwrap ( com.google.gerrit.reviewdb.server.ReviewDb db ) { if ( db instanceof com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) { db = ( ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) ( db ) ) . unsafeGetDelegate ( ) ; } return db ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change" , e ) ; } }
public void mergeReview ( com.google.gerrit.extensions.common.ChangeInfo info ) throws java.lang.Exception { submitter.apply ( getRevisionResource ( info.project , info._number ) , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) ) ; }
private java.lang.String getRtcPassword ( ) { return gerritConfig.getString ( com.googlesource.gerrit.plugins.hooks.rtc.RTCItsFacade.ITS_NAME_RTC , null , com.googlesource.gerrit.plugins.hooks.rtc.RTCItsFacade.GERRIT_CONFIG_RTC_PASSWORD ) ; }
public com.google.gerrit.server.project.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfo ( resource.getControl ( ) , config , views ) ; }
static void pair ( com.google.gerrit.client.diff.SideBySideCommentGroup a , com.google.gerrit.client.diff.SideBySideCommentGroup b ) { a.peer = b ; b.peer = a ; }
public static org.eclipse.jgit.internal.storage.dfs.InMemoryRepository newRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.testutil.InMemoryRepositoryManager.Repo ( name ) ; }
public void deleteReviewerFromReviewableChangeNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; removeReviewer ( sc , extraReviewer , NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
com.google.gerrit.server.index.change.ChangeIndexer getChangeIndexer ( @ com.google.gerrit.server.index.IndexExecutor ( value = com.google.gerrit.server.git.QueueProvider.QueueType.INTERACTIVE ) com.google.common.util.concurrent.ListeningExecutorService executor , com.google.gerrit.server.index.change.ChangeIndexer.Factory factory , com.google.gerrit.server.index.IndexCollection indexes ) { return factory.create ( executor , indexes ) ; }
public void assertCanDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException , com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ;
protected void configure ( ) { bind ( com.google.inject.Key.get ( javax.sql.DataSource.class , com.google.inject.name.Names.named ( "ReviewDb" ) ) ) . toProvider ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; listener ( ) . to ( com.google.gerrit.httpd.ReviewDbDataSourceProvider.class ) ; }
public int getCost ( ) { return 2 ; }
void setSecure ( java.lang.String name , java.lang.String value ) { if ( value != null ) { flags.sec.setString ( section , null , name , value ) ; } else { flags.sec.unset ( section , null , name ) ; } }
public com.google.gerrit.extensions.common.GpgKeyInfo apply ( com.google.gerrit.server.account.AccountResource.GpgKey rsrc ) throws java.io.IOException { return com.google.gerrit.server.account.GpgKeys.toJson ( rsrc.getKeyRing ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( activePatchSetId ) > 1 ) { activate ( ( ( activePatchSetId ) - 1 ) ) ; } }
public WorkQueue.Executor get ( ) { com.google.gerrit.server.git.WorkQueue.Executor executor ; if ( user.isBatchUser ( ) ) { executor = queues.getBatchQueue ( ) ; } else { executor = queues.getInteractiveQueue ( ) ; } return executor ; }
protected void doLogout ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { super . doLogout ( req , rsp ) ; oauthSession.get ( ) . logout ( ) ; }
public com.google.gerrit.server.config.PluginConfig get ( java.lang.String pluginName ) { return new com.google.gerrit.server.config.PluginConfig ( pluginName , cfg ) ; }
public com.google.common.collect.ImmutableListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > getApprovals ( ) { return state.approvals ( ) ; }
public java.util.List < com.google.gitiles.blame.Region > call ( ) throws java.io.IOException { return com.google.gitiles.blame.BlameCacheImpl.loadBlame ( key , repo ) ; }
protected void applyDataRowStyle ( final int newRow ) { table.getCellFormatter ( ) . addStyleName ( newRow , com.google.gerrit.client.ui.FancyFlexTable.C_ARROW , com.google.gerrit.client.ui.FancyFlexTable.S_ICON_CELL ) ; }
private static short value ( java.lang.String value ) { if ( value.startsWith ( "+" ) ) { value = value.substring ( 1 ) ; } return java.lang.Short.parseShort ( value ) ; }
void replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { writer.updateDocument ( term , doc ) ; }
public java.util.List < java.lang.String > getGroups ( ) { return com.google.gerrit.reviewdb.client.PatchSet.splitGroups ( groups ) ; }
public void onFailure ( final java.lang.Throwable caught ) { text.setReadOnly ( false ) ; save.setEnabled ( saveOn ) ; discard.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , null , db , id , null ) ; }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision ) { com.google.gerrit.client.changes.ChangeApi.deleteRevision ( id.get ( ) , revision , com.google.gerrit.client.change.DraftActions.cs ( id ) ) ; }
private boolean canRead ( com.google.gerrit.server.notedb.ChangeNotes notes ) throws com.google.gerrit.server.permissions.PermissionBackendException { return permissionBackend.user ( user ) . change ( notes ) . database ( db ) . test ( ChangePermission.READ ) ; }
private void fail ( java.lang.Throwable t ) { com.google.gerrit.pgm.RebuildNotedb.log.error ( ( "Failed to rebuild change " + ( changeId ) ) , t ) ; ok.set ( false ) ; failedTask.update ( 1 ) ; }
protected com.google.gerrit.acceptance.GerritServer startServer ( org.eclipse.jgit.lib.Config cfg , boolean memory , boolean enableHttpd ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( cfg , memory , enableHttpd ) ; }
public RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RESTORE_ENTRY , edit , file , null ) ; }
public void onFailure ( java.lang.Throwable caught ) { com.google.gerrit.client.change.ChangeScreen.logger.log ( java.util.logging.Level.SEVERE , ( "Loading file list and inline comments failed: " + ( caught.getMessage ( ) ) ) ) ; loadConfigInfo ( info , rev ) ; }
void insert ( org.apache.lucene.document.Document doc ) throws java.io.IOException { writer.addDocument ( doc ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( getChangeId ( ) ) ; }
public void onMouseOut ( com.google.gwt.event.dom.client.MouseOutEvent event ) { hideFullScreenIcon ( ) ; }
public void evict ( java.lang.String username ) { if ( username != null ) { self.remove ( username ) ; } }
public boolean isOwner ( ) { return ( canPerform ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public java.lang.String format ( ) { final java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m.append ( formatValue ( ) ) ; m.append ( ' ' ) ; m.append ( getName ( ) ) ; return m.toString ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { command.execute ( ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { return filter ( getProjectState ( ) . getInheritedRights ( actionId ) ) ; }
private final native void setMessage ( java.lang.String message ) ;
HEAD ( com.google.gerrit.sshd.commands.c65126 PolyGerrit ) { }
public com.google.gwtorm.data.TestAddress.Key key ( ) { return city ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { setReviewedByCurrentUser ( event.getValue ( ) ) ; }
public void run ( ) { setVisibleA ( ( ! ( isVisibleA ( ) ) ) ) ; }
public java.util.Set < java.lang.String > getEmailAddresses ( ) { if ( ( emailAddresses ) == null ) { emailAddresses = state ( ) . getEmailAddresses ( ) ; } return emailAddresses ; }
protected void bindOneUpdate ( java.sql.PreparedStatement ps , com.google.gwtorm.jdbc.TestJdbcAccess.Data entity ) throws java.sql.SQLException { ps.setInt ( 1 , entity.id ) ; }
public java.lang.Thread newThread ( final java.lang.Runnable task ) { final java.lang.Thread t = parent.newThread ( task ) ; t.setPriority ( java.lang.Thread.MIN_PRIORITY ) ; return t ; }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder defaults ( ) { return com.google.gerrit.server.project.SubmitRuleOptions.builder ( ) . allowClosed ( false ) . skipFilters ( false ) . rule ( null ) ; }
private static com.google.gerrit.server.config.ScheduleConfig config ( java.lang.String startTime , java.lang.String interval ) throws org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config rc = com.google.gerrit.server.config.ScheduleConfigTest.readConfig ( java.text.MessageFormat.format ( "[section \"subsection\"]\nstartTime = {0}\ninterval = {1}\n" , startTime , interval ) ) ; return new com.google.gerrit.server.config.ScheduleConfig ( rc , "section" , "subsection" , com.google.gerrit.server.config.ScheduleConfigTest.NOW ) ; }
private com.google.gerrit.reviewdb.client.Account getAccount ( com.google.gerrit.extensions.common.AccountInfo info ) { return accounts.get ( new com.google.gerrit.reviewdb.client.Account.Id ( info._accountId ) ) . getAccount ( ) ; }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException { return parse ( TopLevelResource.INSTANCE , com.google.gerrit.extensions.restapi.IdString.fromUrl ( java.lang.Integer.toString ( id.get ( ) ) ) ) ; }
protected void onCellSingleClick ( int row , int column ) { onOpenRow ( row ) ; }
public static com.google.gerrit.extensions.client.EditPreferencesInfo readDefaultEditPreferences ( org.eclipse.jgit.lib.Repository allUsersRepo ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.account.PreferencesConfig.parseEditPreferences ( com.google.gerrit.server.account.PreferencesConfig.readDefaultConfig ( allUsersRepo ) , null , null ) ; }
public void putComment ( com.google.gerrit.reviewdb.client.Comment c ) { verifyComment ( c ) ; put.add ( c ) ; }
public java.util.List < com.googlesource.gerrit.plugins.replication.Destination > getDestinations ( ) { return destinations ; }
private boolean canRead ( final com.google.gerrit.reviewdb.Change c ) { try { return changeControlFactory.controlFor ( c ) . isVisible ( ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { return false ; } }
public com.google.gerrit.extensions.restapi.BinaryResult content ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getContent.apply ( file ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve file content" , e ) ; } }
public void onOpen ( final com.google.gwt.user.client.ui.DisclosureEvent event ) { if ( ( infoTable ) == null ) { ensureLoaded ( ) ; } }
private static void assertNotOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { org.junit.Assert.assertFalse ( ( "NOT OWN " + ref ) , u.controlForRef ( ref ) . isOwner ( ) ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHHook getHook ( int id ) throws java.io.IOException { return ghRepository.getHook ( id ) ; }
public static org.eclipse.jgit.lib.ObjectId readNotNull ( final java.io.InputStream in ) throws java.io.IOException { final byte [ ] b = new byte [ 20 ] ; org.eclipse.jgit.util.NB.readFully ( in , b , 0 , 20 ) ; return org.eclipse.jgit.lib.ObjectId.fromRaw ( b ) ; }
public T decode ( com.google.protobuf.CodedInputStream in ) throws java.io.IOException { T obj = newInstance ( ) ; mergeFrom ( in , obj ) ; return obj ; }
public int compare ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a , com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b ) { return ( a._number ( ) ) - ( b._number ( ) ) ; }
public com.google.gerrit.server.ParamertizedString.Builder replace ( final java.lang.String name , final java.lang.String value ) { return new com.google.gerrit.server.ParamertizedString.Builder ( ) . replace ( name , value ) ; }
public void error ( com.google.gerrit.server.git.ValidationError error ) { log.error ( ( message + ( error.getMessage ( ) ) ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { submitOnSelection = false ; if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { if ( nameTxt.isSuggestionListShowing ( ) ) { submitOnSelection = true ; } else { doAddNew ( ) ; } } }
public int getEffectiveMaxBatchChangesLimit ( com.google.gerrit.server.CurrentUser user ) { com.google.gerrit.server.account.CapabilityControl cap = user.getCapabilities ( ) ; if ( cap.hasExplicitRange ( com.google.gerrit.common.data.GlobalCapability.BATCH_CHANGES_LIMIT ) ) { return cap.getRange ( com.google.gerrit.common.data.GlobalCapability.BATCH_CHANGES_LIMIT ) . getMax ( ) ; } return systemMaxBatchChanges ; }
java.lang.String needApproval ( java.lang.String categoryName , java.lang.String value , java.lang.String valueName ) ;
private PatchSet.Id getCurrentPatchSetId ( java.lang.String changeId ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( changeId ) ) ) . currentPatchSetId ( ) ; }
void setReplyBox ( com.google.gerrit.client.diff.DraftBox box ) { replyBox = box ; box.setReplyToBox ( this ) ; }
public void onSuccess ( java.lang.Void result ) { net.codemirror.theme.ThemeLoader.loadTheme ( prefs.theme ( ) , themeCallback ) ; group2.done ( ) ; group3.done ( ) ; }
private void addExtensionPoints ( ) { addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER , headerExtension ) ; addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS , headerExtensionRight ) ; addExtensionPoint ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK , changeExtension ) ; }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { return addDraftBox ( com.google.gerrit.client.changes.CommentInfo.createLine ( path , getSideFromCm ( cm ) , ( line + 1 ) , null , null ) ) ; }
public com.google.gerrit.server.query.change.ChangeData apply ( com.google.gerrit.server.query.change.ChangeData input ) { input.cacheFromSource ( source ) ; return input ; }
public void evictGroupsMembers ( ) throws java.lang.Exception { configureMocksFor ( Constants.GROUPS_MEMBERS ) ; servlet.doPost ( request , response ) ; }
public void run ( ) { if ( ! ( session.isOpen ( ) ) ) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.info ( "#start: try to reconnect" ) ; session.connect ( ) ; } }
public void onSuccess ( final com.google.gerrit.common.data.CommentDetail result ) { if ( ( rpcSequence ) == rpcseq ) { comments = result ; onResult ( ) ; } }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , true , expectedStatus ) ; }
public boolean isVisible ( ) { return isOwner ( ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.server.UrlRewriteFilter.class ) ; filter ( "/*" ) . through ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) ; bind ( com.google.inject.Key.get ( com.google.gwtexpui.server.CacheControlFilter.class ) ) . in ( Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.GerritCall.class ) ; serve ( "/Gerrit" , "/Gerrit/*" ) . with ( com.google.gerrit.server.HostPageServlet.class ) ; serve ( "/prettify/*" ) . with ( com.google.gerrit.server.PrettifyServlet.class ) ; serve ( "/login" ) . with ( com.google.gerrit.server.OpenIdLoginServlet.class ) ; serve ( "/ssh_info" ) . with ( com.google.gerrit.server.ssh.SshServlet.class ) ; serve ( "/cat/*" ) . with ( com.google.gerrit.server.CatServlet.class ) ; serve ( "/static/*" ) . with ( com.google.gerrit.server.StaticServlet.class ) ; rpc ( com.google.gerrit.server.AccountServiceImpl.class ) ; rpc ( com.google.gerrit.server.AccountSecurityImpl.class ) ; rpc ( com.google.gerrit.server.GroupAdminServiceImpl.class ) ; rpc ( com.google.gerrit.server.ChangeDetailServiceImpl.class ) ; rpc ( com.google.gerrit.server.ChangeListServiceImpl.class ) ; rpc ( com.google.gerrit.server.ChangeManageServiceImpl.class ) ; rpc ( com.google.gerrit.server.OpenIdServiceImpl.class ) ; rpc ( com.google.gerrit.server.patch.PatchDetailServiceImpl.class ) ; rpc ( com.google.gerrit.server.ProjectAdminServiceImpl.class ) ; rpc ( com.google.gerrit.server.SuggestServiceImpl.class ) ; rpc ( com.google.gerrit.server.SystemInfoServiceImpl.class ) ; bind ( RegisterNewEmailSender.Factory.class ) . toProvider ( com.google.inject.assistedinject.FactoryProvider.newFactory ( RegisterNewEmailSender.Factory.class , com.google.gerrit.server.mail.RegisterNewEmailSender.class ) ) ; if ( com.google.gerrit.server.BecomeAnyAccountLoginServlet.isAllowed ( ) ) { serve ( "/become" ) . with ( com.google.gerrit.server.BecomeAnyAccountLoginServlet.class ) ; } }
private void upToChange ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
private com.google.gerrit.server.config.GetServerInfo.ReceiveInfo getReceiveInfo ( ) { com.google.gerrit.server.config.GetServerInfo.ReceiveInfo info = new com.google.gerrit.server.config.GetServerInfo.ReceiveInfo ( ) ; info.enableSignedPush = enableSignedPush ; return info ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = createChange ( ) ; changeId = changeResult.getChangeId ( ) ; }
public static void schedule ( final java.lang.Runnable task , final long delay , final java.util.concurrent.TimeUnit unit ) { com.google.gerrit.git.WorkQueue.getPool ( true ) . schedule ( task , delay , unit ) ; }
public void createBranchByAdminCreateReferenceBlocked ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateSucceeds ( ) ; }
private com.google.gerrit.client.rpc.RestApi reviewed ( ) { return com.google.gerrit.client.changes.ChangeApi.revision ( patchSetId ) . view ( "files" ) . id ( path ) . view ( "reviewed" ) ; }
public < T extends java.lang.Enum < ? > > T select ( final java.lang.String title , final java.lang.String name , final T defValue ) { return select ( title , name , defValue , false ) ; }
private com.google.gerrit.common.changes.Side getSideFromCm ( net.codemirror.lib.CodeMirror cm ) { return cm == ( cmA ) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION ; }
public java.lang.String apply ( com.google.gerrit.server.change.ChangeResource rsrc ) { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig ( rsrc.getControl ( ) . getProjectControl ( ) . getProjectState ( ) , pluginName ) ; return cfg.getString ( "changeInfo" ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > any ( ) { return ( ( com.google.gerrit.server.query.Predicate < T > ) ( com.google.gerrit.server.query.Predicate.Any.INSTANCE ) ) ; }
public void setUseContentMerge ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean cm ) { useContentMerge = cm ; }
default void onRemove ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey ) throws java.io.IOException { onRemove ( newNotesRev , accountId , java.util.Collections.singleton ( extIdKey ) ) ; }
public void createBranchByAdminCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { change = db.changes ( ) . get ( legacyId ) ; return change ; }
public void testAppend_double ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.append ( 0.0 ) ) ; org.junit.Assert.assertEquals ( "0.0" , b.asString ( ) ) ; }
private void fireChangeIndexedEvent ( com.google.gerrit.server.query.change.ChangeData change ) { for ( com.google.gerrit.server.extensions.events.ChangeIndexedListener listener : indexedListener ) { listener.onChangeIndexed ( change ) ; } }
public com.google.gerrit.server.plugins.InstallPlugin create ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , com.google.gerrit.server.plugins.PluginsCollection.decode ( id ) ) ; }
public final boolean contains ( int line ) { return ( ( getFrom ( ) ) <= line ) && ( line < ( getTo ( ) ) ) ; }
public synchronized java.util.List < com.google.gerrit.server.plugins.Plugin > getPlugins ( ) { return com.google.common.collect.Lists.newArrayList ( running.values ( ) ) ; }
public final java.lang.String getPassword ( ) { return password ; }
public boolean canWrite ( ) { return getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( ProjectState.ACTIVE ) ; }
private static org.antlr.runtime.tree.Tree parse ( java.lang.String str ) throws com.google.gerrit.server.query.QueryParseException { return com.google.gerrit.server.query.QueryParser.parse ( str ) ; }
public void noNotificationForDraftChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "draft change" , "a" , "a1" ) . to ( "refs/for/master%draft" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
private java.util.jar.Manifest getPluginManifest ( com.google.gerrit.server.plugins.PluginScanner scanner ) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.plugins.InvalidPluginException ( "Cannot get plugin manifest" , e ) ; } }
abstract com.google.gerrit.server.project.ChangeControl control ( ) ;
public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; updateParents ( ) ; }
private java.lang.String comparePattern ( ) { if ( getName ( ) . startsWith ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX ) ) { return getName ( ) . substring ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX.length ( ) ) ; } return getName ( ) ; }
protected void configureServlets ( ) { bind ( com.google.gerrit.sshd.QueueProvider.class ) . to ( com.google.gerrit.sshd.CommandExecutorQueueProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; filterRegex ( com.google.gerrit.pgm.http.jetty.ProjectQoSFilter.FILTER_RE ) . through ( com.google.gerrit.pgm.http.jetty.ProjectQoSFilter.class ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNewBranch ( ) ; } }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doCreateGroup ( ) ; }
static synchronized void notifyStarting ( final com.google.gerrit.git.PushOp op ) { com.google.gerrit.git.PushQueue.pending.remove ( op.getURI ( ) ) ; }
public final com.google.gerrit.server.query.Predicate < T > getChild ( int i ) { return children.get ( i ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
private static int now ( ) { return ( ( int ) ( ( java.lang.System.currentTimeMillis ( ) ) / 1000L ) ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.ChangeListener.class ) . to ( com.googlesource.gerrit.plugins.reviewers.ChangeEventListener.class ) ; factory ( DefaultReviewers.Factory.class ) ; factory ( ReviewersConfig.Factory.class ) ; }
public synchronized void stop ( ) { if ( ( ds ) != null ) { closeDataSource ( ds ) ; } }
private org.pegdown.ast.RootNode parseMarkdown ( java.lang.String md ) { return new org.pegdown.PegDownProcessor ( ( ( org.pegdown.Extensions.ALL ) & ( ~ ( org.pegdown.Extensions.HARDWRAPS ) ) ) ) . parseMarkdown ( md.toCharArray ( ) ) ; }
public void testGcWithoutCapability_Error ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession ( server , accounts.create ( "user" , "user@example.com" , "User" ) ) ; s.exec ( "gerrit gc --all" ) ; assertError ( "Capability runGC is required to access this resource" , s.getError ( ) ) ; s.close ( ) ; }
public void GetDiffPreferences ( ) throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = get ( ) ; assertPrefsEqual ( result , com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults ( ) ) ; }
private boolean canSkipRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "skipRef" , ref , true ) ; }
public java.lang.String apply ( java.lang.String in ) { return in.replace ( "/" , "." ) ; }
public void createProjectFoo ( ) throws java.lang.Exception { java.lang.String name = name ( "foo" ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( name ) . get ( ) . name ) ; }
private boolean isEmpty ( ) { if ( ! ( migration.writeChanges ( ) ) ) { return true ; } return ( ( changeUpdates.isEmpty ( ) ) && ( draftUpdates.isEmpty ( ) ) ) && ( toDelete.isEmpty ( ) ) ; }
public static void removeRpcStatusListener ( final com.google.gwtjsonrpc.client.RpcStatusListener l ) { com.google.gwtjsonrpc.client.JsonUtil.listeners.remove ( l ) ; }
public void asyncStarredChanges ( ) { if ( ( ( starredChanges ) == null ) && ( ( starredChangesUtil ) != null ) ) { starredQuery = starredChangesUtil.query ( accountId ) ; } }
java.lang.String notSupported ( java.lang.String url ) ;
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance ( com.google.gerrit.server.project.ProjectState projectState , java.lang.String pluginName ) { return projectState.getConfig ( pluginName ) . getWithInheritance ( ) ; }
static org.eclipse.jgit.storage.file.FileBasedConfig loadGerritIndexConfig ( com.google.gerrit.server.config.SitePaths sitePaths ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig ( new java.io.File ( sitePaths.index_dir , "gerrit_index.config" ) , org.eclipse.jgit.util.FS.detect ( ) ) ; cfg.load ( ) ; return cfg ; }
public void setTitleText ( final java.lang.String text ) { com.google.gwt.user.client.DOM.setInnerText ( headerText , text ) ; }
public long getContentLength ( ) { return buf.length ( ) ; }
public java.lang.String getBaseGerritUrl ( javax.servlet.http.HttpServletRequest req ) { return "http://test-host-review/foo/" ; }
public void shouldIndexInRemoteOnChangeIndexedEvent ( ) throws java.lang.Exception { indexEventHandler.onChangeIndexed ( id.get ( ) ) ; org.mockito.Mockito.verify ( restSessionMock ) . index ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID ) ; }
public static com.google.gerrit.reviewdb.client.PatchSet newPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id id , org.eclipse.jgit.lib.ObjectId revision , com.google.gerrit.reviewdb.client.Account.Id userId ) { return com.google.gerrit.testutil.TestChanges.newPatchSet ( id , revision.name ( ) , userId ) ; }
private com.google.inject.Injector createSshInjector ( ) { return sysInjector.createChildInjector ( new com.google.gerrit.server.ssh.SshDaemonModule ( ) ) ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { return ( ( "/c/" + ( ps.getParentKey ( ) ) ) + "/" ) + ( ps.getId ( ) ) ; }
protected void formatChange ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( velocifyFile ( "ReplacePatchSet.vm" ) ) ; }
boolean visibleForReplication ( ) { return ( ( user ) instanceof com.google.gerrit.server.ReplicationUser ) && ( ( ( com.google.gerrit.server.ReplicationUser ) ( user ) ) . isEverythingVisible ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSet > iterateAllEntities ( ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return ( canPerform ( Permission.SUBMIT ) ) && ( canWrite ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; display ( pubDetail ) ; }
abstract java.lang.Runnable newDraftCallback ( final net.codemirror.lib.CodeMirror cm ) ;
public java.io.InputStream getInput ( ) { return in ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { strings.put ( tb , tb.getText ( ) ) ; }
public void testCreateProjectHttpWithNameMismatch_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = name ( "otherName" ) ; adminSession.put ( ( "/projects/" + ( name ( "someName" ) ) ) , in ) . assertBadRequest ( ) ; }
protected PushOneCommit.Result createChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) , testRepo ) ; return push.to ( "refs/for/master" ) ; }
public com.google.gerrit.server.group.AddMembers.PutMember create ( final com.google.gerrit.server.group.GroupResource group , final java.lang.String id ) { return new com.google.gerrit.server.group.AddMembers.PutMember ( put , com.google.gerrit.extensions.restapi.Url.decode ( id ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.init.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; }
private void assertMergeable ( com.google.gerrit.server.query.change.ChangeData change , boolean expected ) throws java.lang.Exception { change.setMergeable ( null ) ; com.google.common.truth.Truth.assertThat ( change.isMergeable ( ) ) . isEqualTo ( expected ) ; }
public org.eclipse.jgit.lib.ObjectId getOldId ( ) { refreshObjectIds ( ) ; return oldId ; }
public void onSend ( ) { Util.MANAGE_SVC.createNewPatchSet ( patchSetId , getMessageText ( ) , createCallback ( ) ) ; }
private void configureRequestScope ( ) { bind ( com.google.gerrit.server.IdentifiedUser.class ) . toProvider ( com.google.gerrit.server.ssh.SshCurrentUserProvider.class ) . in ( SshScopes.REQUEST ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . to ( com.google.gerrit.server.IdentifiedUser.class ) ; }
protected final void setRefLogIdent ( com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval ) { if ( ( ( refLogIdent ) == null ) && ( submitApproval != null ) ) { refLogIdent = args.identifiedUserFactory.create ( submitApproval.getAccountId ( ) ) . newRefLogIdent ( ) ; } }
java.lang.String projectName ( ) ;
public void testSimpleAdvance ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 , 1 ) , iter.advance ( 1 ) ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getKnownGroups ( ) { java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groups = com.google.common.collect.Sets.newHashSet ( ) ; for ( com.google.gerrit.server.account.GroupMembership m : memberships.values ( ) ) { groups.addAll ( m.getKnownGroups ( ) ) ; } return groups ; }
void initMeter ( ) { if ( ( meter ) == null ) { meter = new com.google.gwtexpui.progress.client.ProgressBar ( Util.M.loadingPatchSet ( psid.get ( ) ) ) ; myBody.clear ( ) ; myBody.add ( meter ) ; } updateMeter ( ) ; }
public void testWarnNonExistingRuleBase ( ) { replayMocks ( ) ; createRuleBase ( ) ; assertLogMessageContains ( "does not exist" ) ; }
com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther ( com.google.gerrit.client.diff.DisplaySide side , int line ) { return getChunkManager ( ) . getLineMapper ( ) . lineOnOther ( side , line ) ; }
public com.google.gerrit.reviewdb.client.PatchLineComment apply ( com.google.gerrit.server.notedb.RevisionNoteData.Comment c ) { com.google.gerrit.reviewdb.client.PatchLineComment plc = c.export ( ) ; plc.setStatus ( status ) ; return plc ; }
public org.eclipse.jgit.transport.UploadPack create ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.lib.Repository repo ) { org.eclipse.jgit.transport.UploadPack up = new org.eclipse.jgit.transport.UploadPack ( repo ) ; up.setPackConfig ( packConfig ) ; return up ; }
public void blockOwnerProject ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.DEVS , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
public void startCharGreaterThanEndCharForSameLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 11 , 13 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
final native void set_commit ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo c ) ;
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.ReviewDb > db , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , null , db , id ) ; }
public void testGcNotAllowed_Forbidden ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( userSession.post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
public org.eclipse.jgit.lib.PersonIdent newCommitter ( ) { return newIdent ( getUser ( ) . getAccount ( ) ) ; }
public void onSignOut ( ) { if ( isRequiresSignIn ( ) ) { com.google.gwt.user.client.History.newItem ( PageLinks.ALL_OPEN ) ; } }
public void commentOnReviewableChangeByOther ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setApiUser ( other ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( "comment" , sc ) . notTo ( other ) . to ( sc.owner ) . to ( sc.reviewerByEmail ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps ) { addPatchSets ( a , ps , null ) ; }
private void rollback ( ) { for ( com.googlesrouce.gerrit.plugins.github.git.ImportStep importStep : importSteps ) { importStep.rollback ( ) ; } }
void onPublishEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.publishEdit ( changeId , publishEdit , rebaseEdit , deleteEdit ) ; }
protected com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext startServer ( @ com.google.gerrit.common.Nullable com.google.inject.Module testSysModule ) throws java.lang.Exception { return new com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext ( startImpl ( testSysModule ) ) ; }
public void onCallStart ( ) { if ( ( ++ ( activeCalls ) ) == 1 ) { loading.setVisible ( true ) ; } }
public final void addLineClass ( int line , net.codemirror.lib.CodeMirror.LineClassWhere where , java.lang.String className ) { addLineClassNative ( line , where.name ( ) . toLowerCase ( ) , className ) ; }
public boolean canSeeGroup ( com.google.gerrit.reviewdb.AccountGroup.Id id ) { return isVisible ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountPreferencesInfo prefs ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; enable ( true ) ; display ( prefs ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public static void deleteEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . delete ( cb ) ; }
public final native boolean hasActiveLine ( ) ;
public java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > byEmail ( java.lang.String email ) throws java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }
public final java.util.Set < java.lang.String > labels ( ) { return all_labels ( ) . keySet ( ) ; }
private static void install ( com.google.gwt.core.client.JavaScriptObject cb , com.google.gwt.core.client.JavaScriptObject p ) { try { com.google.gerrit.client.api.ApiGlue.pluginName = com.google.gerrit.client.api.PluginName.get ( ) ; com.google.gerrit.client.api.ApiGlue.invoke ( cb , p ) ; } finally { com.google.gerrit.client.api.ApiGlue.pluginName = null ; } }
public void onSuccess ( java.lang.String result ) { type = result ; injectMode ( result , modeInjectorCb ) ; }
public void onSuccess ( com.google.gerrit.client.changes.SubmitInfo result ) { saveStateOnUnload = false ; goChange ( ) ; }
public void run ( ) { resizePaddingOnOtherSide ( side , instance.getLineNumber ( handle ) ) ; }
private void detach ( ) { if ( ( lineWidget ) != null ) { lineWidget.clear ( ) ; lineWidget = null ; } manager.clearLine ( cm.side ( ) , line ) ; removeFromParent ( ) ; }
com.google.gerrit.client.reviewdb.Account byLocalId ( com.google.gerrit.client.reviewdb.Account.Id key ) throws com.google.gwtorm.client.OrmException ;
public static com.google.gerrit.client.ui.AccountLink link ( final com.google.gerrit.common.data.AccountInfoCache cache , final com.google.gerrit.reviewdb.client.Account.Id id ) { final com.google.gerrit.common.data.AccountInfo ai = cache.get ( id ) ; return ai != null ? new com.google.gerrit.client.ui.AccountLink ( ai ) : null ; }
public static com.google.gerrit.server.account.ExternalId createWithEmail ( com.google.gerrit.server.account.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String email ) { return new com.google.gerrit.server.account.AutoValue_ExternalId ( key , accountId , email , null ) ; }
protected void assertResultEquals ( com.google.gerrit.reviewdb.client.Change expected , com.google.gerrit.extensions.common.ChangeInfo actual ) { com.google.common.truth.Truth.assertThat ( actual._number ) . isEqualTo ( expected.getId ( ) . get ( ) ) ; }
protected void ccExistingReviewers ( ) { try { for ( com.google.gerrit.reviewdb.client.Account.Id id : getReviewers ( ) . get ( ReviewerState.REVIEWER ) ) { add ( RecipientType.CC , id ) ; } } catch ( com.google.gwtorm.server.OrmException err ) { com.google.gerrit.server.mail.ChangeEmail.log.warn ( "Cannot CC users that commented on updated change" , err ) ; } }
public com.google.gerrit.server.query.change.ListChanges addQuery ( java.lang.String query ) { if ( ( queries ) == null ) { queries = com.google.common.collect.Lists.newArrayList ( ) ; } queries.add ( query ) ; return this ; }
public static java.lang.String createCommit ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent i , java.lang.String msg ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.ssh.GitUtil.createCommit ( git , i , msg , true ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.AccountSshKey > getKeys ( ) { checkLoaded ( ) ; return com.google.common.collect.Lists.newArrayList ( com.google.common.base.Optional.presentInstances ( keys ) ) ; }
public java.lang.String toString ( ) { return ( getClass ( ) . getSimpleName ( ) ) + ( ids ( ) ) ; }
void build ( com.google.gerrit.httpd.raw.BuildSystem.Label l ) throws com.google.gerrit.httpd.raw.BuildSystem.BuildFailureException , java.io.IOException ;
public java.util.SortedSet < ? extends com.google.gerrit.sshd.commands.TreeFormatter.TreeNode > getChildren ( ) { return children ; }
public void shouldNotDispatchForwardedEvents ( ) { replayAll ( ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; try { broker.fireEventForUnrestrictedListeners ( event ) ; } finally { com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; } verifyAll ( ) ; }
private static dk.brics.automaton.RegExp toRegExp ( java.lang.String refPattern ) { if ( refPattern.startsWith ( RefRight.REGEX_PREFIX ) ) { refPattern = refPattern.substring ( 1 ) ; } return new dk.brics.automaton.RegExp ( refPattern ) ; }
public static com.google.common.collect.ImmutableList < com.google.gerrit.server.git.gpg.TestKey > allValidKeys ( ) { return com.google.common.collect.ImmutableList.of ( com.google.gerrit.server.git.gpg.TestKey.key1 ( ) , com.google.gerrit.server.git.gpg.TestKey.key2 ( ) , com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ) ; }
public void byId ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user = newAccount ( "user" ) ; assertQuery ( "9999999" ) ; assertQuery ( currentUserInfo._accountId , currentUserInfo ) ; assertQuery ( user._accountId , user ) ; setAnonymous ( ) ; assertQuery ( "9999999" ) ; }
protected void onOpenRow ( final int row ) { super . onOpenRow ( row ) ; openRow ( getRowItem ( row ) . name ( ) ) ; }
public void resetTime ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZone ) ; }
com.googlesource.gerrit.plugins.webhooks.EventProcessor create ( com.google.gerrit.server.events.ProjectEvent event ) ;
public void testExpiredTime ( ) throws java.lang.Exception { org.joda.time.DateTime now = now ( ) ; com.google.common.truth.Truth.assertThat ( Verifier.onTime ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print ( now.minusMillis ( 1 ) ) ) ) . isFalse ( ) ; }
public boolean canSubmitAs ( ) { return canPerform ( Permission.SUBMIT_AS ) ; }
final void setUseContributorAgreements ( com.google.gerrit.extensions.common.InheritableBoolean v ) { setUseContributorAgreementsRaw ( v.name ( ) ) ; }
public com.google.gerrit.server.project.ListProjects setMatchPrefix ( java.lang.String prefix ) { this . matchPrefix = prefix ; return this ; }
public static void deleteRevision ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.revision ( id , commit ) . delete ( cb ) ; }
private void writeFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { res.setStatus ( HttpServletResponse.SC_NO_CONTENT ) ; streamRequestToFile ( req , resolveFile ( req ) ) ; }
public java.lang.String getAutomergeLabel ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String automergeLabel = getConfig ( ) . getString ( "global" , null , "automergeLabel" ) ; return automergeLabel != null ? automergeLabel : "Verified" ; }
private java.lang.String peeled ( java.lang.String refName ) throws java.io.IOException { return org.eclipse.jgit.lib.ObjectId.toString ( repo.getRepository ( ) . peel ( repo.getRepository ( ) . getRef ( refName ) ) . getPeeledObjectId ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , base ) ; }
public int getInt ( java.lang.String name , int defaultValue ) { return getValue ( name , new com.google.common.base.Function < java.lang.String , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer apply ( java.lang.String stringVal ) { return java.lang.Integer.parseInt ( stringVal ) ; } } , defaultValue ) ; }
public void onFailure ( final java.lang.Throwable caught ) { k.getWatch ( ) . setNotifySubmittedChanges ( oldVal ) ; notifySubmittedChanges.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
protected void set ( java.lang.String newValue ) { branchName = newValue ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { ownerId = ( ( com.google.gerrit.client.changes.AccountDashboardScreen ) ( newScreen ) ) . ownerId ; return this ; }
protected void onLoad ( ) { super . onLoad ( ) ; add ( new com.google.gerrit.client.api.ExtensionPanel ( com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN_BOTTOM ) ) ; display ( com.google.gerrit.client.Gerrit.getUserAccount ( ) ) ; display ( ) ; }
public com.google.gerrit.server.index.FieldType < ? > getType ( ) { return def.getType ( ) ; }
private static java.lang.ClassLoader threadCL ( ) { try { return java.lang.Thread.currentThread ( ) . getContextClassLoader ( ) ; } catch ( java.lang.SecurityException e ) { return com.google.gwtorm.jdbc.Database.class . getClassLoader ( ) ; } }
public java.util.List < com.google.gwtexpui.safehtml.client.RegexFindReplace > getCommentLinks ( ) { return commentLinks ; }
public void validateLocalDomain ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( validator.isValid ( "foo@bar.local" ) ) . isTrue ( ) ; }
Change.Id parse ( java.lang.String id ) { return Change.Id.parse ( id ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( "Imagare Preferences" ) ; screen.show ( new com.googlesource.gerrit.plugins.imagare.client.ImagarePreferenceScreen ( ) ) ; }
private static < K , V > com.google.inject.Key < com.google.gerrit.server.cache.EntryCreator < K , V > > newKey ( ) { return ( ( com.google.inject.Key < com.google.gerrit.server.cache.EntryCreator < K , V > > ) ( info.newKeyImpl ( ) ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { saveName.setEnabled ( false ) ; setPageTitle ( Util.M.group ( newName ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; } else { com.google.gerrit.client.Gerrit.display ( PageLinks.ALL_OPEN ) ; } }
static void setView ( javax.servlet.http.HttpServletRequest req , com.google.gitiles.GitilesView view ) { req.setAttribute ( com.google.gitiles.ViewFilter.VIEW_ATTIRBUTE , view ) ; }
private java.lang.String getValue ( final org.eclipse.jgit.lib.Config config , final java.lang.String section , final java.lang.String setting , final java.lang.String fallback ) { final java.lang.String result = config.getString ( section , null , setting ) ; return result == null ? fallback : result ; }
public static void publish ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "publish" ) . post ( in , cb ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( newUserName ) ; userNameLbl.setText ( newUserName ) ; userNameLbl.setVisible ( true ) ; userNameTxt.setVisible ( false ) ; setUserName.setVisible ( false ) ; }
public com.google.gerrit.reviewdb.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { projectName } ; }
public void refsDraftCommentsPrefix ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.RefNames.refsDraftCommentsPrefix ( accountId ) ) . isEqualTo ( "refs/draft-comments/23/1011123-" ) ; }
public final boolean isCustomExtension ( ) { return ( authType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.CUSTOM_EXTENSION ) ; }
public void run ( ) { try { executePredicate ( ) ; } catch ( com.googlecode.prolog_cafe.lang.PrologException e ) { java.lang.System.out.println ( e.toString ( ) ) ; } catch ( java.lang.Exception e ) { printStackTrace ( e ) ; } stop ( ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { return client ( ) . issueExists ( issueKey ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.AccountSshKey > result ) { keys.display ( result ) ; if ( result.isEmpty ( ) ) { showAddKeyBlock ( true ) ; } }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; }
private java.lang.Class < T > generate ( com.google.gwtorm.schema.sql.SqlDialect dialect , final com.google.gwtorm.server.GeneratedClassLoader loader ) throws com.google.gwtorm.client.OrmException { return ( ( java.lang.Class < T > ) ( new com.google.gwtorm.jdbc.gen.SchemaGen ( loader , schemaModel , dialect ) . create ( ) ) ) ; }
public int compare ( eu.medsea.mimeutil.MimeType a , eu.medsea.mimeutil.MimeType b ) { return ( b.getSpecificity ( ) ) - ( a.getSpecificity ( ) ) ; }
boolean isHtmlAllowed ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter formatter ) { return cfg.getBoolean ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , formatter.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_ALLOW_HTML , false ) ; }
private void checkNotSlaveMode ( ) throws com.google.gerrit.common.Die { org.eclipse.jgit.lib.Config cfg = dbInjector.getInstance ( com.google.inject.Key.get ( org.eclipse.jgit.lib.Config.class , com.google.gerrit.server.config.GerritServerConfig.class ) ) ; if ( cfg.getBoolean ( "container" , "slave" , false ) ) { throw die ( "Cannot run reindex in slave mode" ) ; } }
public static void topMenus ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.TopMenuList > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/config/server/top-menus" ) . get ( cb ) ; }
protected abstract void doRun ( ) throws java.io.IOException , org.eclipse.jgit.lfs.errors.LfsException ;
private static boolean isLdapUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return uuid.get ( ) . startsWith ( com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID ) ; }
public void onSizeChanged ( ) { root.relayout ( ) ; }
Change.Id getChangeId ( ) { return changeId ; }
public void onSuccess ( java.lang.String result ) { type = result ; injectMode ( result , modeInjectorCb ) ; }
public void init ( javax.servlet.FilterConfig config ) { }
public void destroySite ( ) throws java.lang.Exception { if ( ( sitePath ) != null ) { com.google.gerrit.acceptance.TempFileUtil.cleanup ( ) ; } }
public void commit ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
public void testWithSectionToOtherServer ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject ( "a" ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.fromText ( ( ( ( ( "" + ( ( "[submodule \"a\"]" + "path = a" ) + "url = ssh://non-localhost/" ) ) + ( p1.get ( ) ) ) + "\n" ) + "branch = ." ) ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; com.google.common.truth.Truth.assertThat ( res ) . isEmpty ( ) ; }
private boolean isRelevantRef ( com.googlesource.gerrit.plugins.refprotection.Event event ) { return ( ! ( isNewRef ( event ) ) ) && ( ( event.getRefName ( ) . startsWith ( org.eclipse.jgit.lib.Constants.R_HEADS ) ) || ( event.getRefName ( ) . startsWith ( org.eclipse.jgit.lib.Constants.R_TAGS ) ) ) ; }
public void run ( ) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( change ) ; try { index.replace ( cd ) ; } catch ( java.io.IOException e ) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error ( "Error indexing change" , e ) ; } }
public void operationComplete ( org.apache.sshd.common.future.CloseFuture future ) { connected.decrementAndGet ( ) ; if ( sd.isAuthenticationError ( ) ) { sshLog.onAuthFail ( sd ) ; } }
public void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey newGroupName ) { byName.invalidate ( newGroupName.get ( ) ) ; }
private java.lang.String timeout ( int expirationSeconds ) { return com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.DATE_TIME.print ( now ( ) . plusSeconds ( expirationSeconds ) ) ; }
void init ( java.lang.String name , com.google.gerrit.server.query.Predicate < T > [ ] args ) { this . name = name ; this . children = java.util.Arrays.asList ( args ) ; }
private void doVerify ( ) { org.easymock.EasyMock.verify ( schemaFactory , schema , subscriptions , urlProvider , repoManager , gitRefUpdated ) ; }
private void renderDownload ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { downloadAction = new com.google.gerrit.client.change.DownloadAction ( info.legacy_id ( ) , info.project ( ) , info.revision ( revision ) , style , headerLine , download ) ; }
public scala.reflect.internal.util.SourceFile apply ( java.io.File scalaFile ) { try { return new scala.reflect.internal.util.BatchSourceFile ( scalaFile.getName ( ) , readScalaFile ( scalaFile ) ) ; } catch ( java.io.IOException e ) { throw new java.lang.IllegalArgumentException ( ( "Cannot load scala file " + scalaFile ) , e ) ; } }
private com.google.gerrit.server.project.RefControl getRefControl ( ) { return refControl ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( mySubname.equals ( subname ) ) { display ( result ) ; } }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { return abandon ( control , "" , NotifyHandling.ALL ) ; }
private void extractMailExample ( java.lang.String orig ) throws java.lang.Exception { java.nio.file.Path ex = site.mail_dir.resolve ( ( orig + ".example" ) ) ; com.google.gerrit.pgm.init.api.InitUtil.extract ( ex , com.google.gerrit.server.mail.OutgoingEmail.class , orig ) ; com.google.gerrit.common.FileUtil.chmod ( 292 , ex ) ; }
private java.sql.Timestamp getSubmittedOn ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.common.base.Optional < com.google.gerrit.reviewdb.client.PatchSetApproval > s = cd.getSubmitApproval ( ) ; return s.isPresent ( ) ? s.get ( ) . getGranted ( ) : null ; }
private void beforeTest ( org.eclipse.jgit.lib.Config cfg ) throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start ( cfg ) ; server.getTestInjector ( ) . injectMembers ( this ) ; }
public com.google.gerrit.reviewdb.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { submodule } ; }
public com.google.gerrit.reviewdb.client.Change change ( ) throws com.google.gwtorm.server.OrmException { if ( ( change ) == null ) { change = db.changes ( ) . get ( legacyId ) ; } return change ; }
public void testVerifyAgainstToken ( ) throws java.lang.Exception { java.lang.String token = auth.generateToken ( "o" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) , 1 ) ; com.google.common.truth.Truth.assertThat ( auth.verifyAgainstToken ( token , "o" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) ) ) . isTrue ( ) ; }
public void addReviewerToReviewableChangeInReviewDb ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( sc.owner , sc.starrer ) ; } ) ; }
public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { commitMessageBlock.setVisible ( true ) ; commitMessageBlock.display ( result.getInfo ( ) . getMessage ( ) ) ; }
public void initSshModule ( java.lang.String pluginName ) { command = com.google.gerrit.sshd.Commands.named ( pluginName ) ; }
public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doPublishComments ( psid , message , approvals , db , txn ) ; }
public static com.google.gerrit.server.account.ExternalId createEmail ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String email ) { return com.google.gerrit.server.account.ExternalId.createWithEmail ( com.google.gerrit.server.account.ExternalId.SCHEME_MAILTO , email , accountId , email ) ; }
private int getWrapAroundDiffChunkIndex ( int index ) { return ( index + ( diffChunks.size ( ) ) ) % ( diffChunks.size ( ) ) ; }
void fireGitRefUpdatedEvent ( org.eclipse.jgit.lib.RefUpdate ru ) { gitRefUpdated.fire ( projectName , ru ) ; }
protected void configure ( ) { bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( cfg ) ; }
void write ( java.io.Writer w ) throws java.io.IOException { w.write ( value ) ; }
public void onRemove ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) { }
public static com.google.gerrit.server.account.ExternalId create ( com.google.gerrit.server.account.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email , @ com.google.gerrit.common.Nullable java.lang.String hashedPassword ) { return new com.google.gerrit.server.account.AutoValue_ExternalId ( key , accountId , email , hashedPassword ) ; }
public static java.lang.String linkify ( final java.lang.String in ) { return com.google.gerrit.client.ui.DomUtil.INSTANCE.linkify ( in ) ; }
private static boolean isDateField ( java.lang.String name ) { return ( "lastUpdated" . equals ( name ) ) || ( "grantedOn" . equals ( name ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , groupIncludeCache , remotePeerProvider , dbProvider , id ) ; }
public com.google.gerrit.extensions.api.changes.ChangeApi rebase ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return changes.id ( rebase.apply ( revision , null ) . _number ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.EmailException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot rebase ps" , e ) ; } }
void updateRefreshCookieAt ( final com.google.gerrit.server.http.WebSessionManager.Val val ) { final long now = java.lang.System.currentTimeMillis ( ) ; val.refreshCookieAt = now + ( ( self.getTimeToIdle ( java.util.concurrent.TimeUnit.MILLISECONDS ) ) / 2 ) ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted ) ;
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount ( com.google.gerrit.reviewdb.server.ReviewDb db , org.kohsuke.github.GHPullRequestCommitDetail.Authorship author ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException { return getOrRegisterAccount ( db , author.getName ( ) , author.getName ( ) , author.getEmail ( ) ) ; }
public void onError ( final com.google.gwt.http.client.Request request , final java.lang.Throwable exception ) { callback.onFailure ( exception ) ; }
public java.lang.String getImageUrl ( ) { return myImageUrl ; }
public abstract org.eclipse.jgit.lib.Repository createRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws com.google.gerrit.server.git.RepositoryCaseMismatchException , java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException ;
public com.google.gerrit.reviewdb.client.AccountGroupIncludeByUuidAudit.Key getKey ( ) { return key ; }
public final AccountGroup.UUID getGroupUUID ( ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( com.google.gwt.http.client.URL.decodePathSegment ( id ( ) ) ) ; }
static boolean onTime ( java.lang.String dateTime ) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now ( ) ) ; return ( now.compareTo ( dateTime ) ) <= 0 ; }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.server.account.AccountState > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneAccountIndex.QuerySource ( opts , queryBuilder.toQuery ( p ) , new org.apache.lucene.search.Sort ( new org.apache.lucene.search.SortField ( com.google.gerrit.lucene.LuceneAccountIndex.ID_SORT_FIELD , SortField.Type.LONG , true ) ) ) ; }
public void listNonExistingGroupMembers_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/groups/non-existing/members/" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.ChangeActions.delete ( changeId , revision , publish , deleteRevision ) ; } }
public void matchesName ( ) throws java.lang.Exception { com.google.gitiles.IdentRevFilter filter = com.google.gitiles.IdentRevFilter.author ( "eSt" ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "eSt" , "null@google.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "eStablish" , "null@google.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "teSt" , "null@google.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "teSting" , "null@google.com" ) ) ) ; }
public void onClose ( com.google.gwt.event.logical.shared.CloseEvent < com.google.gwt.user.client.ui.PopupPanel > event ) { if ( ( popup ) == p ) { popup = null ; } }
public static java.util.Set < java.lang.String > getChangedPaths ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit c ) throws java.io.IOException { java.util.Map < java.lang.String , org.eclipse.jgit.lib.ObjectId > content = com.googlesource.gerrit.plugins.uploadvalidator.CommitUtils.getChangedContent ( repo , c ) ; return content.keySet ( ) ; }
void onAllNodesReplicated ( int totalPushTasksCount ) { if ( totalPushTasksCount == 0 ) { return ; } writeStdOut ( "----------------------------------------------" ) ; if ( hasError.get ( ) ) { writeStdOut ( "Replication completed with some errors!" ) ; } else { writeStdOut ( "Replication completed successfully!" ) ; } }
public void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public com.google.gwtorm.server.Access < ? , ? > [ ] allRelations ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
private static long initialDelay ( java.lang.String startTime , java.lang.String interval ) { return new com.google.gerrit.server.config.ScheduleConfig ( com.google.gerrit.server.config.ScheduleConfigTest.config ( startTime , interval ) , "section" , "subsection" , com.google.gerrit.server.config.ScheduleConfigTest.NOW ) . getInitialDelay ( ) ; }
private void setNew ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
public java.lang.String getReplacementString ( ) { return java.lang.String.valueOf ( change.legacyId ( ) . get ( ) ) ; }
private void add ( final javax.mail.Message.RecipientType rt , final com.google.gerrit.client.reviewdb.UserIdentity who ) throws javax.mail.MessagingException { if ( ( who != null ) && ( ( who.getAccount ( ) ) != null ) ) { add ( rt , who.getAccount ( ) ) ; } }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupType ( ) ; initMemberList ( ) ; initExternal ( ) ; }
public void evaluate ( ) throws java.lang.Throwable { beforeTest ( com.google.gerrit.acceptance.AbstractDaemonTest.config ( description ) ) ; base.evaluate ( ) ; afterTest ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.PUT , cb ) ; }
public void setStars ( com.google.common.collect.Multimap < com.google.gerrit.reviewdb.client.Account.Id , java.lang.String > stars ) { this . stars = com.google.common.collect.ImmutableMultimap.copyOf ( stars ) ; }
private static boolean isValidParameterName ( java.lang.String name ) { return ( com.google.common.base.CharMatcher.JAVA_LETTER_OR_DIGIT.or ( com.google.common.base.CharMatcher.is ( '-' ) ) . matchesAllOf ( name ) ) && ( ! ( name.startsWith ( "-" ) ) ) ; }
private static boolean isModify ( com.google.gerrit.server.patch.PatchListEntry content ) { switch ( content.getChangeType ( ) ) { case MODIFIED : case COPIED : case RENAMED : return true ; case ADDED : case DELETED : default : return false ; } }
public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.parent = "non-existing-project" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/child" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; }
public boolean match ( java.lang.String ref , java.lang.String username ) { return this . matcher.match ( ref , username ) ; }
public boolean isAllowGoogleAccountUpgrade ( ) { return sConfig.allowGoogleAccountUpgrade ; }
public com.google.gerrit.extensions.api.config.ConsistencyCheckInfo checkConsistency ( com.google.gerrit.extensions.api.config.ConsistencyCheckInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return checkConsistency.get ( ) . apply ( new com.google.gerrit.server.config.ConfigResource ( ) , in ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check consistency" , e ) ; } }
private void initMacs ( final org.eclipse.jgit.lib.Config cfg ) { setMacFactories ( com.google.gerrit.sshd.SshDaemon.filter ( cfg , "mac" , new org.apache.sshd.common.mac.HMACMD5.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA1.Factory ( ) , new org.apache.sshd.common.mac.HMACMD596.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA196.Factory ( ) ) ) ; }
public void run ( ) { reviewed.setValue ( ( ! ( reviewed.getValue ( ) ) ) , true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { activate ( patchSetId ) ; }
protected void init ( ) throws com.google.gerrit.server.mail.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; bccWatches ( NotifyType.ALL_COMMENTS ) ; }
boolean isStale ( ) throws java.io.IOException { return ! ( time.equals ( java.nio.file.Files.getLastModifiedTime ( path ) ) ) ; }
public abstract com.google.gerrit.reviewdb.client.Change getChange ( ) ;
private void put ( final com.google.gerrit.reviewdb.ActiveSession as ) throws com.google.gwtorm.client.OrmException { schema.activeSessions ( ) . upsert ( java.util.Arrays.asList ( as ) ) ; cache.put ( schema.activeSessions ( ) . primaryKey ( as ) , as ) ; }
public java.util.List < com.google.gerrit.extensions.common.GroupInfo > apply ( com.google.gerrit.server.group.GroupResource rsrc ) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException , com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.GroupDescription.Internal group = rsrc.asInternalGroup ( ) . orElseThrow ( MethodNotAllowedException :: new ) ; return getDirectSubgroups ( group , rsrc.getControl ( ) ) ; }
public final java.lang.String metaVar ( ) { return metaVar ; }
boolean isDraft ( ) { return cmd.getRefName ( ) . startsWith ( MagicBranch.NEW_DRAFT_CHANGE ) ; }
private void fetchRefsMetaConfig ( ) throws java.lang.Exception { git ( ) . fetch ( ) . setRefSpecs ( new org.eclipse.jgit.transport.RefSpec ( "refs/meta/config:refs/meta/config" ) ) . call ( ) ; testRepo.reset ( "refs/meta/config" ) ; }
public java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return reviewersUtil.suggestReviewers ( null , this , rsrc.getControl ( ) , getVisibility ( rsrc ) , true ) ; }
private static java.lang.String queryIncoming ( java.lang.String who ) { return ( ( ( "is:open reviewer:" + who ) + " -owner:" ) + who ) + " -star:ignore" ; }
private void removeAllChildren ( com.google.gwt.user.client.Element el ) { for ( int i = ( com.google.gwt.user.client.DOM.getChildCount ( el ) ) - 1 ; i >= 0 ; i -- ) { el.removeChild ( com.google.gwt.user.client.DOM.getChild ( el , i ) ) ; } }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , true , expectedStatus ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.AccountExternalId > getExternalIds ( com.google.gerrit.acceptance.TestAccount account ) throws java.lang.Exception { return db.accountExternalIds ( ) . byAccount ( account.getId ( ) ) . toList ( ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( java.lang.String ignore ) throws java.lang.Exception { return getConfig ( ignore , true , true ) ; }
void doLinkIdentity ( ) { final com.google.gerrit.client.SignInDialog d = new com.google.gerrit.client.SignInDialog ( SignInDialog.Mode.LINK_IDENTIY ) ; d.center ( ) ; }
protected void expand ( final com.google.gerrit.client.ui.ComplexDisclosurePanel w ) { final com.google.gerrit.client.changes.MessagePanel mp = ( ( com.google.gerrit.client.changes.MessagePanel ) ( w.getContent ( ) ) ) ; w.setOpen ( mp.isRecent ) ; }
protected void configure ( ) { factory ( SaveDraft.Factory.class ) ; }
default java.lang.String closestMatch ( @ javax.annotation.Nonnull final java.lang.String baseBranch , @ javax.annotation.Nonnull final java.lang.String branchOptionOne , @ javax.annotation.Nonnull final java.lang.String branchOptionTwo ) { return ( org.apache.commons.lang3.StringUtils.getLevenshteinDistance ( branchOptionOne , baseBranch ) ) > ( org.apache.commons.lang3.StringUtils.getLevenshteinDistance ( branchOptionTwo , baseBranch ) ) ? branchOptionTwo : branchOptionOne ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; if ( isInvalidSshKey ( caught ) ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidSshKeyError ( ) ) . center ( ) ; } else { super . onFailure ( caught ) ; } }
public void afterTest ( ) { com.google.gerrit.testutil.NoteDbMode.resetFromEnv ( notesMigration ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.ssh.SshKeyCache.class ) . to ( com.google.gerrit.server.ssh.NoSshKeyCache.class ) ; }
public void write ( org.eclipse.jgit.lib.CommitBuilder commit ) { }
private com.google.gerrit.reviewdb.server.ReviewDb openUnderlyingReviewDb ( com.google.gerrit.acceptance.GerritServer server ) throws java.lang.Exception { return server.getTestInjector ( ) . getInstance ( com.google.inject.Key.get ( new com.google.inject.TypeLiteral < com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > > ( ) { } , com.google.gerrit.server.schema.ReviewDbFactory.class ) ) . open ( ) ; }
protected void preDisplay ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { display ( result ) ; }
public com.google.gerrit.server.account.GetEmails.EmailInfo apply ( com.google.gerrit.server.account.AccountResource.Email rsrc ) { com.google.gerrit.server.account.GetEmails.EmailInfo e = new com.google.gerrit.server.account.GetEmails.EmailInfo ( ) ; e.email = rsrc.getEmail ( ) ; e.preferred ( rsrc.getUser ( ) . getAccount ( ) . getPreferredEmail ( ) ) ; return e ; }
private static com.google.gerrit.reviewdb.client.Project.InheritedBoolean asInheritedBoolean ( java.sql.ResultSet rs , java.lang.String col ) throws java.sql.SQLException { return "Y" . equals ( rs.getString ( col ) ) ? com.google.gerrit.reviewdb.client.Project.InheritedBoolean.TRUE : com.google.gerrit.reviewdb.client.Project.InheritedBoolean.INHERIT ; }
public void stop ( ) { indexManager.stop ( ) ; for ( com.google.gerrit.server.index.IndexDefinition < ? , ? , ? > def : defs ) { def.getIndexCollection ( ) . stop ( ) ; } }
public void onRefresh ( ) { getApp ( ) . getQueryHandler ( ) . reset ( ) ; display ( true ) ; }
protected void doGet ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { render ( req , res , "gitiles.repositoryIndex" , buildData ( req ) ) ; }
public void testChangeEventShouldBeSentToExecutor ( ) { asyncListener.onChangeEvent ( event ) ; verify ( executor ) . submit ( org.mockito.Matchers.any ( ChangeListenerAsyncDecorator.ChangeRunner.class ) ) ; }
boolean isHtmlAllowed ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.Formatter formatter ) { return cfg.getBoolean ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , formatter.name ( ) , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_ALLOW_HTML , false ) ; }
public java.lang.String toString ( ) { if ( commandPrefix.isEmpty ( ) ) return commandLine ; else return ( ( commandPrefix ) + " " ) + ( commandLine ) ; }
private PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) != null ) ? base : revision ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void get ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.GET , cb ) ; }
private void createReplyEditor ( ) { final com.google.gerrit.reviewdb.client.PatchLineComment newComment = newComment ( ) ; newComment.setMessage ( "" ) ; createEditor ( newComment ) . setFocus ( true ) ; }
void deleteRight ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.util.Set < com.google.gerrit.reviewdb.RefRight.Key > ids , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.sidePanel.adjustGutters ( cmB ) ; }
public void onSuccess ( final com.google.gerrit.reviewdb.PatchLineComment result ) { enable ( true ) ; notifyDraftDelta ( 1 ) ; createEditor ( result ) . setOpen ( false ) ; }
public void schemaThrowsExceptionWhenLookingUpForChange ( ) throws java.lang.Exception { setupPostMocks ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.CHANGE_EXISTS , com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServletTest.THROW_ORM_EXCEPTION ) ; verifyPost ( ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProjectBranch , projectName , branchName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
static java.nio.file.Path getDir ( com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { return sitePaths.index_dir.resolve ( java.lang.String.format ( "%s%04d" , com.google.gerrit.lucene.LuceneVersionManager.CHANGES_PREFIX , schema.getVersion ( ) ) ) ; }
private java.lang.String urlCreateEdit ( ) { return ( ( ( "/changes/" + ( change.getChangeId ( ) ) ) + "/revisions/" ) + ( ps.getPatchSetId ( ) ) ) + "/create_edit" ; }
private int reductionLimit ( com.googlecode.prolog_cafe.lang.Predicate goal ) { if ( "com.googlecode.prolog_cafe.builtin.PRED_consult_stream_2" . equals ( goal.getClass ( ) . getName ( ) ) ) { return compileLimit ; } return reductionLimit ; }
private com.google.gerrit.server.git.MetaDataUpdate newMetaDataUpdate ( ) { com.google.gerrit.server.git.MetaDataUpdate u = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , project , repo , null ) ; org.eclipse.jgit.lib.PersonIdent author = new org.eclipse.jgit.lib.PersonIdent ( "J. Author" , "author@example.com" , com.google.gerrit.common.TimeUtil.nowTs ( ) , com.google.gerrit.server.git.VersionedMetaDataTest.TZ ) ; u.getCommitBuilder ( ) . setAuthor ( author ) ; u.getCommitBuilder ( ) . setCommitter ( new org.eclipse.jgit.lib.PersonIdent ( "M. Committer" , "committer@example.com" , author.getWhen ( ) , author.getTimeZone ( ) ) ) ; return u ; }
protected static boolean isNoSuchEntity ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NoSuchEntityException.MESSAGE ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > apply ( com.google.gerrit.server.query.change.QueryResult in ) { return in.changes ( ) ; }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.client.data.AccountInfo acct ) { return "dashboard," + ( acct.getId ( ) . get ( ) ) ; }
public void run ( ) { closedIndex.close ( ) ; }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.server.config.MasterNodeStartup.OnStart.class ) ; }
public com.google.gerrit.sshd.SshKeyCacheEntryCollection missing ( com.google.gerrit.reviewdb.Account.Username username ) { return new com.google.gerrit.sshd.SshKeyCacheEntryCollection ( SshKeyCacheEntryCollection.Type.INVALID_USER ) ; }
protected void configure ( ) { bind ( java.nio.file.Path.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.config.SitePaths.class ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.reviewdb.client.Project.NameKey project = result.project_name_key ( ) ; com.google.gerrit.client.projects.ConfigInfoCache.get ( project , configCallback ) ; }
public java.lang.String toString ( ) { return ( type ) + "" ; }
public java.util.Set < java.lang.String > getHashtags ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getHashtags.apply ( change ) . value ( ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get hashtags" , e ) ; } }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { if ( acct != null ) { synchronized ( com.google.gerrit.server.ssh.SshUtil.keys ) { com.google.gerrit.server.ssh.SshUtil.keys.remove ( acct.getPreferredEmail ( ) ) ; } } }
public static void drafts ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . get ( cb ) ; }
public void setFullName ( final java.lang.String name ) { fullName = name ; }
public com.googlecode.prolog_cafe.lang.NumberTerm add ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) return t.add ( this ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) + ( t.intValue ( ) ) ) ) ; }
void registerReplyToBox ( com.google.gerrit.client.diff.PublishedBox box ) { replyToBox = box ; }
public java.lang.Object apply ( com.google.gerrit.server.change.ReviewerResource resource ) throws com.google.gerrit.extensions.restapi.BadRequestException , java.lang.Exception { throw new com.google.gerrit.extensions.restapi.BadRequestException ( "Not yet implemented" ) ; }
public static < T > com.google.inject.binder.LinkedBindingBuilder < T > bind ( com.google.inject.Binder binder , java.lang.Class < T > type ) { return com.google.gerrit.extensions.registration.DynamicSet.bind ( binder , com.google.inject.TypeLiteral.get ( type ) ) ; }
public void parseMissingSha ( ) throws java.lang.Exception { org.junit.Assert.assertNull ( parser.parse ( "deadbeef" ) ) ; org.junit.Assert.assertNull ( parser.parse ( "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef" ) ) ; }
void visibleProjects ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.Project > > callback ) ;
private java.lang.String getComment ( com.google.gerrit.server.events.ChangeAttribute change , com.google.gerrit.server.events.ChangeEvent hook , com.google.gerrit.server.events.AccountAttribute who , java.lang.String what ) { return ( ( ( ( ( getCommentPrefix ( change ) ) + "change " ) + what ) + " [by " ) + ( formatAccountAttribute ( who ) ) ) + "]" ; }
private static int checkLimit ( int limit , java.lang.String name ) { if ( limit == 0 ) { return java.lang.Integer.MAX_VALUE ; } com.google.common.base.Preconditions.checkArgument ( ( limit > 0 ) , "%s must be positive: %s" , name , limit ) ; return limit ; }
public java.util.Set < com.google.gerrit.reviewdb.AccountGroup.Id > getEffectiveGroups ( ) { return authConfig.getAnonymousGroups ( ) ; }
public org.apache.sshd.server.CommandFactory.Command get ( ) { return com.google.gerrit.server.ssh.SshScopes.getContext ( ) . command ; }
protected void configureServlets ( ) { serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.ldap.LdapLoginServlet.class ) ; }
protected java.lang.String getName ( ) { return hook.getName ( ) ; }
public static com.google.gerrit.client.rpc.RestApi comments ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "comments" ) ; }
public int weigh ( com.google.gerrit.server.change.MergeabilityCache.EntryKey k , java.lang.Boolean v ) { return ( ( 16 + ( 2 * ( 16 + 20 ) ) ) + ( 4 * 8 ) ) + 1 ; }
public java.nio.file.Path targetPath ( com.google.gerrit.httpd.raw.Label l ) { return sourceRoot.resolve ( "bazel-bin" ) . resolve ( l.pkg ) . resolve ( l.name ) ; }
public void assertCanDelete ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { assertIsNotAllProjects ( rsrc ) ; }
protected void configureServlets ( ) { serveRegex ( "/index/\\d+$" ) . with ( com.ericsson.gerrit.plugins.multimaster.SyncIndexRestApiServlet.class ) ; }
private boolean canPushWithForce ( ) { if ( ( RefNames.REFS_CONFIG.equals ( refName ) ) && ( ! ( projectControl.isOwner ( ) ) ) ) { return false ; } return canForcePerform ( Permission.PUSH ) ; }
public static java.util.List < com.google.gerrit.pgm.init.InitPlugins.PluginData > listPlugins ( com.google.gerrit.server.config.SitePaths site ) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins ( site , false ) ; }
protected void format ( ) { appendText ( getNameFor ( fromId ) ) ; appendText ( ( ( " has abandoned change " + ( change.getKey ( ) . abbreviate ( ) ) ) + ":\n" ) ) ; appendText ( "\n" ) ; formatCoverLetter ( ) ; }
private com.googlesource.gerrit.plugins.replication.ReplicationFileBasedConfig loadConfig ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { }
public boolean isOwner ( ) { return ( isDeclaredOwner ( ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public Response.Action getDownloadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getDownloadAction ( id ) ; action.header = java.util.Collections.singletonMap ( org.eclipse.jgit.util.HttpSupport.HDR_AUTHORIZATION , authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.DOWNLOAD , id , expirationSeconds ) ) ; return action ; }
public void onSuccess ( T value ) { this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , com.google.gerrit.server.query.change.ChangeData cd ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.server.query.change.LegacyChangeIdPredicate.idField ( schema ) . getName ( ) , cd.getId ( ) . get ( ) ) ; }
public void onSignOut ( ) ;
public void listenTo ( final com.google.gwt.user.client.ui.CheckBox cb ) { cb.addValueChangeHandler ( this ) ; }
public Project.NameKey get ( ) { return name ; }
void visibleProjects ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectList > callback ) ;
public boolean isSubmit ( ) { return LabelId.SUBMIT.get ( ) . equals ( getLabel ( ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.PUT , cb ) ; }
private static org.apache.lucene.index.Term intTerm ( java.lang.String name , int value ) { org.apache.lucene.util.BytesRef bytes = new org.apache.lucene.util.BytesRef ( org.apache.lucene.util.NumericUtils.BUF_SIZE_INT ) ; org.apache.lucene.util.NumericUtils.intToPrefixCodedBytes ( value , 0 , bytes ) ; return new org.apache.lucene.index.Term ( name , bytes ) ; }
void expandAll ( ) { clearMarkerAndWidget ( ) ; removeFromParent ( ) ; updateSelection ( ) ; }
public void testAcrossNewline ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 , 1 ) , iter.advance ( 5 ) ) ; }
private void addExtensionPoint ( com.google.gerrit.client.GerritUiExtensionPoint extensionPoint , com.google.gwt.user.client.ui.Panel p ) { com.google.gerrit.client.api.ExtensionPanel extensionPanel = new com.google.gerrit.client.api.ExtensionPanel ( extensionPoint ) ; extensionPanel.putInt ( GerritUiExtensionPoint.Key.CHANGE_ID , changeId.get ( ) ) ; p.add ( extensionPanel ) ; }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; for ( net.codemirror.lib.CodeMirror cm : getCms ( ) ) { cm.adjustHeight ( height ) ; } }
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.RestApi.isNotFound ( caught ) ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . username ( null ) ; display ( ) ; } else { super . onFailure ( caught ) ; } }
public static org.eclipse.jgit.lib.Config defaultConfig ( ) { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; config.setBoolean ( "user" , null , "readGroupsFromNoteDb" , false ) ; return config ; }
protected void init ( ) throws com.google.gerrit.server.mail.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; bccWatchesNotifyAllComments ( ) ; bccWatchesNotifySubmittedChanges ( ) ; }
private void copyNewLib ( com.google.gerrit.server.config.SitePaths sitePaths , java.io.File newSecureStoreFile ) throws java.io.IOException { com.google.gerrit.pgm.SwitchSecureStore.log.info ( "Copy new SecureStore ({}) into lib/ directory" , newSecureStoreFile.getName ( ) ) ; com.google.common.io.Files.copy ( newSecureStoreFile , new java.io.File ( sitePaths.lib_dir , newSecureStoreFile.getName ( ) ) ) ; }
public java.lang.Integer apply ( com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest in ) { return in.change.getId ( ) . get ( ) ; }
private static java.lang.String today ( ) { return new java.text.SimpleDateFormat ( "YYYYMMdd" ) . format ( new java.util.Date ( ) ) ; }
public void visit ( org.pegdown.ast.AutoLinkNode node ) { java.lang.String url = node.getText ( ) ; html.open ( "a" ) . attribute ( "href" , url ) . appendAndEscape ( url ) . close ( "a" ) ; }
public void onOpen ( com.google.gwt.event.logical.shared.OpenEvent < com.google.gwt.user.client.ui.DisclosurePanel > event ) { activate ( patchSetId ) ; }
public void put ( K key , V value ) { self.put ( key , value ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { rebuild ( change , null ) ; return null ; }
public void onFailure ( final java.lang.Throwable caught ) { k.getWatch ( ) . setNotifyAllComments ( oldVal ) ; notifyAllComments.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; return change ; } else { return null ; } }
public void handle ( net.codemirror.lib.CodeMirror cm ) { save.setEnabled ( ( ! ( cm.isClean ( generation ) ) ) ) ; }
public void cache ( final com.google.gerrit.reviewdb.Change c ) { changeOpen = c.open ; changeSortKey = c.sortKey ; }
public com.google.gerrit.server.index.FieldDef < T , ? > getField ( ) { return field ; }
void inc ( ) { mv.visitVarInsn ( com.google.gwtorm.protobuf.ILOAD , sizeVar ) ; mv.visitInsn ( com.google.gwtorm.protobuf.IADD ) ; mv.visitVarInsn ( com.google.gwtorm.protobuf.ISTORE , sizeVar ) ; }
public void replace ( byte [ ] key , byte [ ] data ) throws com.google.gwtorm.client.OrmException { upsert ( key , data ) ; }
public void preDisplay ( com.google.gerrit.client.info.AccountPreferencesInfo prefs ) { display ( prefs ) ; }
protected void openRow ( java.lang.String projectName ) { nameBox.setText ( projectName ) ; doAddNew ( ) ; }
public void remove ( ) { m.remove ( name.value ( ) , cmd ) ; }
private static void base64 ( javax.servlet.http.HttpServletResponse res , com.google.gerrit.extensions.restapi.BinaryResult bin ) { res.setContentType ( "text/plain; charset=ISO-8859-1" ) ; res.setHeader ( "X-FYI-Content-Encoding" , "base64" ) ; res.setHeader ( "X-FYI-Content-Type" , bin.getContentType ( ) ) ; }
public boolean matches ( com.google.gerrit.server.account.ExternalId extId ) { return matches ( extId.key ( ) . get ( ) ) ; }
static java.nio.file.Path getDir ( com.google.gerrit.server.config.SitePaths sitePaths , java.lang.String prefix , com.google.gerrit.server.index.Schema < ? > schema ) { return sitePaths.index_dir.resolve ( java.lang.String.format ( "%s%04d" , prefix , schema.getVersion ( ) ) ) ; }
public boolean apply ( com.google.gerrit.extensions.api.projects.CommentLinkInfo input ) { return input.name.equals ( commentLinkName ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( filterTxt.getText ( ) ) ) { filterTxt.setText ( Util.C.defaultFilter ( ) ) ; filterTxt.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder ( org.eclipse.jgit.lib.Config config , java.lang.String section ) { return com.google.gerrit.server.config.ScheduleConfig.builder ( config , section , null ) ; }
public void start ( ) { pushAll.create ( null ) . start ( 30 , java.util.concurrent.TimeUnit.SECONDS ) ; submit.create ( ) . start ( 15 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public void close ( ) throws java.sql.SQLException { ds.close ( ) ; }
private void assertNotFound ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { userSession.get ( ( ( ( "/projects/" + ( project.get ( ) ) ) + "/commits/" ) + ( id.name ( ) ) ) ) . assertNotFound ( ) ; }
public org.parboiled.Rule [ ] blockPluginRules ( ) { return new org.parboiled.Rule [ ] { cols ( ) , hr ( ) , note ( ) , toc ( ) } ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public void validKey ( ) throws java.lang.Exception { assertNoProblems ( com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; }
public abstract org.eclipse.jgit.lib.Repository openMetadataRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException ;
public void extend ( org.commonmark.parser.Parser.Builder builder ) { builder.customDelimiterProcessor ( new com.google.gitiles.doc.SmartQuotedExtension.QuotedProcessor ( SINGLE , '\'' ) ) ; builder.customDelimiterProcessor ( new com.google.gitiles.doc.SmartQuotedExtension.QuotedProcessor ( DOUBLE , '"' ) ) ; }
public void testBadEventAndNotForwarded ( ) throws java.lang.Exception { setUpMocks ( false ) ; eventHandler.onEvent ( event ) ; org.mockito.Mockito.verifyZeroInteractions ( restSession ) ; }
boolean isModified ( java.io.File jar ) { return ( snapshot.lastModified ( ) ) != ( jar.lastModified ( ) ) ; }
public void setAssignee ( com.google.common.base.Optional < com.google.gerrit.reviewdb.client.Account.Id > assignee ) { this . assignee = assignee ; }
public void onShowView ( ) { super . onShowView ( ) ; filterTxt.setFocus ( true ) ; }
public void invalidNonceNotChecked ( ) throws java.lang.Exception { checker = newChecker ( false ) ; org.eclipse.jgit.transport.PushCertificate cert = newSignedCert ( "invalid-nonce" , com.google.gerrit.gpg.testutil.TestKeys.validKeyWithoutExpiration ( ) ) ; assertNoProblems ( cert ) ; }
public void setDateHeader ( java.lang.String name , long value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void basicTextFormattingWorks ( ) throws java.io.IOException { java.lang.String raw = "_italic_ *bold* `monospace`" ; java.lang.String formatted = "<em>italic</em> <strong>bold</strong> <code>monospace</code>" ; org.junit.Assert.assertEquals ( 1 , org.apache.commons.lang.StringUtils.countMatches ( formatter.format ( null , null , null , null , cfg , raw ) , formatted ) ) ; }
public void subsetOfBranchesVisibleIncludingHead ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/changes/01/1/meta" , "refs/heads/master" ) ; }
public final void downloadCommand ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadCommand d ) { downloadCommandRaw ( ( d != null ? d.toString ( ) : null ) ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return canCherryPick ( mergeTip , toMerge ) ; }
public static int getOpenFiles ( ) { return org.eclipse.jgit.storage.file.WindowCache.getInstance ( ) . getOpenFiles ( ) ; }
public void onFailure ( java.lang.Throwable err ) { if ( com.google.gerrit.client.changes.SubmitFailureDialog.isConflict ( err ) ) { new com.google.gerrit.client.changes.SubmitFailureDialog ( err.getMessage ( ) ) . center ( ) ; } else { super . onFailure ( err ) ; } goChange ( ) ; }
public com.google.gerrit.extensions.client.ProjectState getState ( ) { return control.getProject ( ) . getState ( ) ; }
protected abstract void configureCmds ( ) ;
public void setSecure ( java.lang.String name , java.lang.String value ) { if ( value != null ) { flags.sec.setString ( section , subsection , name , value ) ; } else { flags.sec.unset ( section , subsection , name ) ; } }
private static com.google.gerrit.server.git.PerThreadRequestScope requireContext ( ) { final com.google.gerrit.server.git.PerThreadRequestScope ctx = com.google.gerrit.server.git.PerThreadRequestScope.current.get ( ) ; if ( ctx == null ) { throw new com.google.inject.OutOfScopeException ( "Not in command/request" ) ; } return ctx ; }
public void testlinkifyMessageNoMatch ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "some message text" ) ) , l.linkify ( com.google.gitiles.FakeHttpServletRequest.newRequest ( ) , "some message text" ) ) ; }
public void deactivateSelf ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; exception.expectMessage ( "cannot deactivate own account" ) ; gApi.accounts ( ) . self ( ) . setActive ( false ) ; }
public T decode ( com.google.protobuf.ByteString buf ) { try { return decode ( buf.newCodedInput ( ) ) ; } catch ( java.io.IOException err ) { throw new java.lang.RuntimeException ( "Cannot decode message" , err ) ; } }
private static void dispatchHistoryHooks ( final java.lang.String historyToken ) { final java.lang.String url = ( ( Window.Location.getPath ( ) ) + "#" ) + historyToken ; for ( final com.google.gwt.core.client.JavaScriptObject hook : com.google.gerrit.client.Gerrit.historyHooks ) { com.google.gerrit.client.Gerrit.callHistoryHook ( hook , url ) ; } }
public void setNonExistingParent_UnprocessibleEntity ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( ( ( "/projects/" + ( project.get ( ) ) ) + "/parent" ) , newParentInput ( "non-existing" ) ) ; r.assertUnprocessableEntity ( ) ; r.consume ( ) ; }
public java.util.Collection < com.google.gerrit.client.reviewdb.ProjectRight > getRights ( ) { return rights ; }
java.lang.String groupMemberPattern ( ) { return "(memberUid=${username})" ; }
private org.eclipse.jgit.revwalk.RevCommit getRemoteHead ( ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ; org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { return rw.parseCommit ( repo.getRef ( "refs/heads/master" ) . getObjectId ( ) ) ; } }
public void unblockMoreSpecificRefInLocal_Fails ( ) { com.google.gerrit.server.project.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/master" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
public void onFailure ( java.lang.Throwable caught ) { query = new com.google.gerrit.client.admin.ProjectBranchesScreen.Query ( ) . start ( start ) . run ( ) ; super . onFailure ( caught ) ; }
public com.google.gerrit.server.project.ChangeControl getChangeControl ( ) { return ctl ; }
public java.util.List < java.lang.String > currentFilePaths ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet ( ) ; if ( ps == null ) { return null ; } return filePaths ( currentPatchSet ) ; }
void addOption ( com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o ) { options.add ( o ) ; }
void onDeleteEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteChangeEdit ( ) ) ) { com.google.gerrit.client.change.EditActions.deleteEdit ( changeId ) ; } }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; ccExistingReviewers ( ) ; includeWatchers ( NotifyType.ALL_COMMENTS ) ; add ( RecipientType.TO , reviewers ) ; removeUsersThatIgnoredTheChange ( ) ; }
protected void configure ( ) { post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "automerge-change" ) . to ( com.googlesource.gerrit.plugins.automerger.AutomergeChangeAction.class ) ; post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , "config-downstream" ) . to ( com.googlesource.gerrit.plugins.automerger.ConfigDownstreamAction.class ) ; }
public void evict ( final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { byId.remove ( groupId ) ; }
public int compare ( com.google.gerrit.client.changes.CommentInfo o1 , com.google.gerrit.client.changes.CommentInfo o2 ) { return o1.updated ( ) . compareTo ( o2.updated ( ) ) ; }
public void setChangeMessage ( final com.google.gerrit.reviewdb.client.ChangeMessage cm ) { changeMessage = cm ; }
void init ( com.google.gerrit.client.change.ChangeScreen2.Style style ) { this . style = style ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public com.google.gerrit.extensions.common.MergeableInfo mergeableOtherBranches ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { mergeable.setOtherBranches ( true ) ; return mergeable.apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check mergeability" , e ) ; } }
public static void getSshKeys ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JsArray < com.google.gerrit.client.account.SshKeyInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "sshkeys" ) . get ( cb ) ; }
protected void configure ( ) { delete ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND ) . to ( com.googlesource.gerrit.plugins.deleteproject.DeleteProject.class ) ; }
protected void doDelete ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse rsp ) { if ( ! ( allowDelete ) ) { sendError ( rsp , javax.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED , java.lang.String.format ( "cannot delete %s from index" , indexName ) ) ; } else { process ( req , rsp , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.AbstractIndexRestApiServlet.Operation.DELETE ) ; } }
public int getMinDelimiterCount ( ) { return 1 ; }
public void execute ( ) { for ( com.google.gerrit.client.diff.SidePanel.GutterWrapper info : gutters ) { adjustGutter ( info ) ; } }
public void testLinkify_AngleBrackets1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A <http://go.here/> B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; assertNotSame ( o , n ) ; assertEquals ( "A &lt;<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>&gt; B" , n.asString ( ) ) ; }
public boolean isValidAuthorization ( java.lang.String keyIn ) ;
private void initChangeRepo ( ) throws java.io.IOException { if ( ( changeRepo ) == null ) { changeRepo = openRepo ( projectName ) ; } }
public void add ( final java.lang.Runnable task ) { synchronized ( cleanup ) { cleanup.add ( task ) ; } }
public java.lang.String toString ( ) { return ( "index(" + ( pred ) ) + ")" ; }
private Account.Id userNoLookup ( final java.lang.String name , final java.lang.String email ) { final com.google.gerrit.server.account.AccountState s = makeUser ( name , email ) ; return s.getAccount ( ) . getId ( ) ; }
com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patch ) ;
private java.util.List < com.google.gerrit.reviewdb.PatchLineComment > drafts ( ) throws com.google.gwtorm.client.OrmException { return db.patchComments ( ) . draftByPatchSetAuthor ( patchSetId , user.getAccountId ( ) ) . toList ( ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( account , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > of ( ) , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountExternalId > of ( ) , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountProjectWatch > of ( ) ) ; }
public void visit ( org.pegdown.ast.MailLinkNode node ) { java.lang.String addr = node.getText ( ) ; html.open ( "a" ) . attribute ( "href" , ( "mailto:" + addr ) ) . appendAndEscape ( addr ) . close ( "a" ) ; }
public void moveTipTo ( com.google.gerrit.server.git.CodeReviewCommit newTip , java.lang.String mergedFrom ) { branchTip = newTip ; mergeResults.put ( mergedFrom , newTip.getName ( ) ) ; }
public void deleteAllowedWithDeletePermission ( ) throws java.lang.Exception { grant ( Permission.DELETE , project , "refs/*" , true ) ; assertDeleteRef ( org.eclipse.jgit.transport.RemoteRefUpdate.Status.OK ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType , result.canModifyState , result.canModifyMaxObjectSizeLimit ) ; display ( result ) ; }
abstract com.google.gerrit.client.diff.DiffScreen getDiffScreen ( ) ;
public static void setTimeForTesting ( ) { com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; }
public void onUpdate ( com.google.gerrit.server.git.ProjectConfig projectConfig , java.lang.String newValue ) { }
public void preDisplay ( final com.google.gerrit.reviewdb.client.Account result ) { display ( result.getGeneralPreferences ( ) ) ; }
private void group ( java.lang.String name ) throws java.io.IOException { com.google.gerrit.acceptance.rest.group.GroupInput in = new com.google.gerrit.acceptance.rest.group.GroupInput ( ) ; session.put ( ( "/groups/" + name ) , in ) . consume ( ) ; }
protected com.google.gerrit.server.project.ProjectData fromDocument ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey ( doc.getField ( com.google.gerrit.server.index.project.ProjectField.NAME.getName ( ) ) . stringValue ( ) ) ; return projectCache.get ( ) . get ( nameKey ) . toProjectData ( ) ; }
com.google.common.util.concurrent.ListenableFuture < ? > insert ( org.apache.lucene.document.Document doc ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.addDocument ( doc ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setShowSiteHeader ( val ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm floatIntPart ( ) { throw new com.googlecode.prolog_cafe.lang.IllegalTypeException ( "float" , this ) ; }
public java.lang.String toString ( ) { return "hook " + ( hook.getName ( ) ) ; }
private static com.google.gerrit.server.IdentifiedUser checkUser ( com.google.gerrit.server.project.ProjectControl ctl ) { com.google.common.base.Preconditions.checkArgument ( ctl.getCurrentUser ( ) . isIdentifiedUser ( ) , "only IdentifiedUser may create change" ) ; return ( ( com.google.gerrit.server.IdentifiedUser ) ( ctl.getCurrentUser ( ) ) ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( ( subscribedToEvents.isEmpty ( ) ) || ( subscribedToEvents.contains ( event.getType ( ) ) ) ) { offer ( event ) ; } }
boolean canEnableRenderEntireFile ( com.google.gerrit.client.account.DiffPreferences prefs ) { return ( ( fileSize.compareTo ( com.google.gerrit.client.diff.SideBySide.FileSize.HUGE ) ) < 0 ) || ( ( ( prefs.context ( ) ) != ( com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT ) ) && ( ( prefs.context ( ) ) < 100 ) ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.server.validators.ProjectCreationValidationListener.class ) . to ( com.googlesource.gerrit.plugins.quota.MaxRepositoriesQuotaValidator.class ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public void copySettingsFrom ( final com.google.gerrit.reviewdb.client.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; useContentMerge = update.useContentMerge ; requireChangeID = update.requireChangeID ; submitType = update.submitType ; state = update.state ; }
public void onKeyUp ( com.google.gwt.event.dom.client.KeyUpEvent event ) { subname = filterTxt.getValue ( ) ; refresh ( ) ; }
public boolean apply ( com.google.gerrit.server.project.ListBranches.BranchInfo info ) { return info.ref.equals ( b.ref ) ; }
public void run ( ) { onDestroy ( ) ; }
public java.lang.String toString ( ) { return atts.get ( "dn" ) ; }
public static final com.google.gwtjsonrpc.server.ActiveCall getCurrentCall ( ) { return com.google.gwtjsonrpc.server.JsonServlet.perThreadCall.get ( ) ; }
public java.util.Map < com.google.gerrit.reviewdb.Account.Id , com.google.gerrit.server.account.AccountState > getAll ( java.lang.Iterable < com.google.gerrit.reviewdb.Account.Id > accountIds ) ;
private static java.lang.String startTime ( final java.util.Date when ) { return com.google.gerrit.sshd.commands.ShowQueue.format ( when , ( ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) - ( when.getTime ( ) ) ) ) ; }
public void stop ( ) { org.apache.log4j.LogManager.getLogger ( ReplicationQueue.repLog.getName ( ) ) . removeAllAppenders ( ) ; }
public void patchSetDetail2 ( com.google.gerrit.reviewdb.client.PatchSet.Id baseId , com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail.create ( baseId , id , diffPrefs ) . to ( callback ) ; }
public void tearDown ( ) throws java.io.IOException { com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { switch ( event.getCharCode ( ) ) { case com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER : doSearch ( ) ; break ; case com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE : searchBox.setText ( "" ) ; searchBox.setFocus ( false ) ; break ; } }
public void update ( com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.Code status ) { this . status = status ; this . shortDescription = status.name ( ) ; this . value = status.name ( ) ; }
public static com.google.gerrit.common.data.GerritConfig getConfig ( ) { return com.google.gerrit.client.Gerrit.myConfig ; }
public com.googlesource.gerrit.plugins.verifystatus.server.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { categoryId } ; }
public java.util.regex.Pattern load ( java.lang.String regex ) throws java.lang.Exception { return java.util.regex.Pattern.compile ( regex ) ; }
com.google.gerrit.server.project.ProjectControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.project.ProjectControl r = state.controlFor ( who ) ; r.allSections = allSections ; return r ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > inname ( java.lang.String name ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.NAME_PART , GroupQueryBuilder.FIELD_INNAME , name.toLowerCase ( java.util.Locale.US ) ) ; }
private boolean canSkipRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "skipRef" , ref , true ) ; }
public void run ( ) { getSkipManager ( ) . removeAll ( ) ; getSkipManager ( ) . render ( context , diff ) ; updateRenderEntireFile ( ) ; }
public abstract void handleEmails ( ) ;
public java.util.List < com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update > getUpdates ( ) { com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update update = new com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update ( ) { public java.lang.String getRefName ( ) { return ref ; } } ; return com.google.common.collect.ImmutableList.of ( update ) ; }
protected void rcptToAuthors ( final com.google.gerrit.server.mail.RecipientType rt ) { for ( final com.google.gerrit.reviewdb.client.Account.Id id : authors ) { add ( rt , id ) ; } }
public com.google.gerrit.extensions.client.DiffPreferencesInfo setDefaultDiffPreferences ( com.google.gerrit.extensions.client.DiffPreferencesInfo in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setDiffPreferences.apply ( new com.google.gerrit.server.config.ConfigResource ( ) , in ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set default diff preferences" , e ) ; } }
public com.google.gerrit.server.project.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.google.gerrit.server.project.ConfigInfo ( resource.getControl ( ) , config , pluginConfigEntries , cfgFactory , allProjects , views ) ; }
public boolean isOwner ( ) { return ( canPerform ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public java.text.DateFormat get ( ) { return new java.text.SimpleDateFormat ( "yyyy-MM-dd" ) ; }
public static java.lang.String refsDraftCommentsPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsDraftCommentsPrefix ( accountId ) . toString ( ) ; }
public void removeAssignee ( ) { this . assignee = com.google.common.base.Optional.absent ( ) ; }
public static java.lang.String getUserName ( java.util.Collection < com.google.gerrit.server.account.ExternalId > ids ) { for ( com.google.gerrit.server.account.ExternalId extId : ids ) { if ( extId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME ) ) { return extId.key ( ) . id ( ) ; } } return null ; }
public java.lang.String getContentType ( ) { return response.getFirstHeader ( "X-FYI-Content-Type" ) . getValue ( ) ; }
public void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.Gerrit.addSignedInListener ( signedInListener ) ; }
public void run ( ) { java.lang.String rev = java.lang.String.valueOf ( revision.get ( ) ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( changeId , rev ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , rev , openReplyBox ) ) ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( conflictingChangesTab ) == null ) { conflictingChangesTab = createTab ( Resources.C.conflictingChanges ( ) , Resources.C.conflictingChangesTooltip ( ) ) ; conflictingChangesTab.registerKeys ( ) ; } return conflictingChangesTab ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.reviewdb.client.Account.Id id ) { return create ( AccessPath.UNKNOWN , null , id ) ; }
public com.google.gerrit.server.project.ChangeControl getControl ( ) { return rev.getControl ( ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { if ( c.getStatus ( ) . isOpen ( ) ) { c.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( c ) ; } return c ; }
static void fireDialogVisible ( boolean visible ) { com.google.gwtexpui.user.client.UserAgent.bus.fireEvent ( new com.google.gwtexpui.user.client.DialogVisibleEvent ( visible ) ) ; }
private java.lang.String link ( final com.google.gerrit.reviewdb.client.Project item ) { return com.google.gerrit.client.Dispatcher.toProjectAdmin ( item.getNameKey ( ) , ProjectScreen.INFO ) ; }
public void addEventListener ( com.google.gerrit.common.EventListener listener , com.google.gerrit.server.CurrentUser user ) { }
private java.util.Collection < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( ) { return filter ( projectControl.getProjectState ( ) . getInheritedRights ( ) ) ; }
public void onSuccess ( final com.google.gerrit.client.groups.MemberInfo memberInfo ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toGroup ( getGroupUUID ( ) , AccountGroupScreen.MEMBERS ) ) ; }
protected void configure ( ) { listener ( ) . to ( LocalDiskRepositoryManager.Lifecycle.class ) ; }
public java.lang.String getUrl ( com.google.gerrit.reviewdb.client.Account account , int imageSize ) ;
private void setNew ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( java.lang.String content , com.google.gerrit.client.rpc.HttpCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { if ( ( cell != 1 ) && ( ( getRowItem ( row ) ) != null ) ) { movePointerTo ( row ) ; } }
public void add ( final com.google.gerrit.lifecycle.LifecycleListener listener ) { listeners.put ( listener , true ) ; }
com.google.gerrit.server.util.RequestContext provideRequestContext ( @ com.google.inject.name.Named ( value = com.google.gerrit.server.util.ThreadLocalRequestContext.FALLBACK ) com.google.gerrit.server.util.RequestContext fallback ) { return com.google.common.base.Objects.firstNonNull ( com.google.gerrit.server.util.ThreadLocalRequestContext.local.get ( ) , fallback ) ; }
private void checkRequestScope ( ) { if ( ( dbProvider ) == null ) { throw new com.google.inject.OutOfScopeException ( "Not in request scoped user" ) ; } }
public java.util.Collection < com.google.gerrit.server.index.ChangeIndex > getWriteIndexes ( ) { return java.util.Collections.unmodifiableCollection ( writeIndexes.values ( ) ) ; }
static com.google.gerrit.pgm.util.Die die ( java.lang.String why , java.lang.Throwable cause ) { return new com.google.gerrit.pgm.util.Die ( why , cause ) ; }
public void testDeleteOneNotExisting ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 0 ) ; try { createClassUnderTest ( ) . delete ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; org.junit.Assert.fail ( "missing OrmConcurrencyException" ) ; } catch ( com.google.gwtorm.client.OrmConcurrencyException e ) { } }
public void evict ( final java.lang.String email ) { cache.remove ( email ) ; }
private static boolean isGerritServer ( com.google.gerrit.client.account.AccountInfo account ) { return ( ( account._accountId ( ) ) == 0 ) && ( Util.C.messageNoAuthor ( ) . equals ( account.name ( ) ) ) ; }
private com.google.gerrit.server.project.ChangeControl reload ( com.google.gerrit.server.project.ChangeControl ctl ) throws java.lang.Exception { return changeControlFactory.controlFor ( db , ctl.getChange ( ) . getProject ( ) , ctl.getId ( ) , ctl.getUser ( ) ) ; }
public static org.eclipse.jgit.lib.Config defaultConfig ( ) { return com.google.gerrit.server.query.IndexConfig.createForLucene ( ) ; }
public java.lang.String getAuthorizationUrl ( com.googlesource.gerrit.plugins.oauth.OAuthConfig config ) { return java.lang.String.format ( com.googlesource.gerrit.plugins.oauth.GitLabApi.AUTHORIZE_URL , rootUrl , config.getApiKey ( ) , config.getCallback ( ) ) ; }
private static org.eclipse.jgit.diff.RawTextComparator comparatorFor ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws ) { switch ( ws ) { case IGNORE_ALL_SPACE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL ; case IGNORE_SPACE_AT_EOL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING ; case IGNORE_SPACE_CHANGE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE ; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT ; } }
public void setChangedLines ( int insertions , int deletions ) { changedLines = com.google.common.base.Optional.of ( new com.google.gerrit.server.query.change.ChangeData.ChangedLines ( insertions , deletions ) ) ; }
public com.google.gerrit.reviewdb.Account get ( final com.google.gerrit.reviewdb.Account.Id id ) { want ( id ) ; return out.get ( id ) ; }
public java.util.List < org.apache.lucene.document.Document > call ( ) throws com.google.gwtorm.server.OrmException { return doRead ( ) ; }
public void onFailure ( java.lang.Throwable e ) { com.google.gerrit.client.rpc.GerritCallback.showFailure ( e ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( rsrc , new com.google.gerrit.server.group.Index.Input ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index group" , e ) ; } }
public java.util.Map < java.lang.String , com.google.gerrit.extensions.common.GpgKeyInfo > putGpgKeys ( java.util.List < java.lang.String > add ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private void forAll ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Tester tester ) throws java.lang.Exception { for ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder : com.google.common.collect.ImmutableList.of ( singly ( ) , batch ( ) ) ) { tester.test ( adder ) ; } }
static java.lang.String getDefaultTemplateMsgWithBursts ( java.lang.String rateLimitTypeName ) { return ( ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 0 ] ) + rateLimitTypeName ) + ( com.googlesource.gerrit.plugins.quota.RateMsgHelper.DEFAULT_TEMPLATE_MSG_PARTS [ 2 ] ) ; }
void onOpenForm ( ) { com.google.gwt.user.client.ui.UIObject.setVisible ( form , true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( error , false ) ; addReviewerIcon.setVisible ( false ) ; suggestBox.setFocus ( true ) ; }
protected void configureServlets ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.httpd.AllRequestFilter.class ) ; filter ( "/*" ) . through ( com.google.gerrit.httpd.AllRequestFilter.FilterProxy.class ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput createRobotCommentInput ( ) { com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = createRobotCommentInputWithMandatoryFields ( ) ; in.url = "http://www.happy-robot.com" ; in.properties = new java.util.HashMap < > ( ) ; in.properties.put ( "key1" , "value1" ) ; in.properties.put ( "key2" , "value2" ) ; return in ; }
boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return canPerform ( Permission.SUBMIT , isChangeOwner ) ; }
public static org.eclipse.jgit.lib.Config submitWholeTopicEnabled ( ) { return submitWholeTopicEnabledConfig ( ) ; }
public void setText ( final java.lang.String t ) { text.setText ( t ) ; }
void onReviewMode ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { fileTableMode = FileTable.Mode.REVIEW ; refreshFileTable ( ) ; editMode.setVisible ( true ) ; addFile.setVisible ( false ) ; reviewMode.setVisible ( false ) ; }
com.google.gerrit.client.diff.Scrollbar getScrollbar ( ) { return scrollbar ; }
private java.lang.String getGerritUrl ( ) { if ( ( server.getCanonicalURL ( ) ) != null ) { return server.getCanonicalURL ( ) ; } return myUrl ; }
public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockCreateReference ( ) ; setApiUser ( user ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class ) ; }
public void setUp ( ) throws java.lang.Exception { gerritConfig = new org.eclipse.jgit.storage.file.FileBasedConfig ( sitePaths.gerrit_config.toFile ( ) , org.eclipse.jgit.util.FS.detect ( ) ) ; }
public void run ( ) { if ( ! ( session.isOpen ( ) ) ) { com.googlesource.gerrit.plugins.rabbitmq.message.MessagePublisher.LOGGER.info ( "#start: try to reconnect" ) ; session.connect ( ) ; } }
public final void setOwnerUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { owner_id ( com.google.gwt.http.client.URL.encodePathSegment ( uuid.get ( ) ) ) ; }
private void initEditor ( java.lang.String content ) { cm = net.codemirror.lib.CodeMirror.create ( editor , getConfig ( ) ) ; cm.setValue ( content ) ; }
protected static org.eclipse.jgit.lib.Config submitByRebaseConifg ( ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "change" , null , "submitWholeTopic" , true ) ; cfg.setEnum ( "project" , null , "submitType" , SubmitType.REBASE_IF_NECESSARY ) ; return cfg ; }
public void markReady ( boolean ready ) throws java.io.IOException { com.google.gerrit.lucene.AbstractLuceneIndex.setReady ( sitePaths , name , schema.getVersion ( ) , ready ) ; }
void changeShowSiteHeader ( boolean show , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > gerritCallback ) ;
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.sidePanel.adjustGutters ( cmB ) ; }
protected void add ( com.google.gerrit.server.mail.RecipientType type , com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List list ) { for ( com.google.gerrit.reviewdb.client.Account.Id user : list.accounts ) { add ( type , user ) ; } for ( com.google.gerrit.server.mail.Address addr : list.emails ) { add ( type , addr ) ; } }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply ( com.google.gerrit.server.config.ConfigResource rsrc ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = gitMgr.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.PreferencesConfig.readDefaultGeneralPreferences ( git ) ; } }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) { com.google.common.base.Preconditions.checkNotNull ( project ) ; return projectJson.format ( project ) ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( ) throws com.google.gerrit.server.git.MergeException { return submitStrategyFactory.create ( destProject.getSubmitType ( ) , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch , destProject.isUseContentMerge ( ) ) ; }
public void run ( ) { cm.vim ( ) . handleKey ( "/" ) ; }
public void testParseBad ( ) throws java.io.IOException { com.google.gerrit.server.git.ValidationError.Sink sink = org.easymock.EasyMock.createNiceMock ( ValidationError.Sink.class ) ; org.easymock.EasyMock.replay ( sink ) ; new com.google.gerrit.server.git.DestinationList ( ) . parseLabel ( com.google.gerrit.server.git.DestinationListTest.LABEL , com.google.gerrit.server.git.DestinationListTest.L_BAD , sink ) ; }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException ;
public java.lang.String apply ( java.lang.String in ) { return in ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = new com.google.gerrit.testutil.TestNotesMigration ( ) . setAllEnabled ( com.google.gerrit.testutil.GerritServerTests.isNoteDbTestEnabled ( ) ) ; }
protected void configure ( ) { if ( ! ( groupsMigration.disableGroupReviewDb ( ) ) ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.server.audit.group.GroupAuditListener.class ) . to ( com.google.gerrit.server.group.DbGroupMemberAuditListener.class ) ; } }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( createPathFilter ( ) ) ; serveRegex ( "^(/)$" , "^(/[^+].*)" ) . with ( com.google.gitiles.GitilesServlet.class ) ; }
public Change.Id apply ( com.google.gerrit.server.query.change.ChangeData cd ) { return cd.getId ( ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { renderSubmitType ( result.asString ( ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.create ( db , project , patchSetId.getParentKey ( ) ) . load ( ) ; return approvalsUtil.getSubmitter ( db , notes , patchSetId ) ; }
private void verifyComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) { com.google.common.base.Preconditions.checkArgument ( comment.getAuthor ( ) . equals ( accountId ) , ( "The author for the following comment does not match the author of" + " this ChangeDraftUpdate (%s): %s" ) , accountId , comment ) ; }
protected void loadNext ( ) { Util.LIST_SVC.allOpenNext ( pos , pageSize , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.data.SingleListChangeInfo > ( ) { public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; } } ) ; }
void addOption ( com.google.gerrit.common.changes.ListChangesOption o ) { json.addOption ( o ) ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision ) ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { event.getValue ( ) . setSubmitTypeRecord ( com.google.gerrit.common.data.SubmitTypeRecord.OK ( Project.SubmitType.valueOf ( result.asString ( ) ) ) ) ; }
private void alias ( final java.lang.String from , final java.lang.String to ) { commands.put ( to , commands.get ( from ) ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( com.google.gerrit.common.data.GroupDescription.Basic group ) { return new com.google.gerrit.server.account.GroupControl ( user.get ( ) , group ) ; }
static com.google.gerrit.server.notedb.InsertedObject create ( int type , java.io.InputStream in ) throws java.io.IOException { return com.google.gerrit.server.notedb.InsertedObject.create ( type , com.google.protobuf.ByteString.readFrom ( in ) ) ; }
public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return null ; }
public void signRequest ( com.googlesource.gerrit.plugins.oauth.Token accessToken , com.googlesource.gerrit.plugins.oauth.OAuthRequest request ) { request.addQuerystringParameter ( OAuthConstants.ACCESS_TOKEN , accessToken.getToken ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.extensions.restapi.TopLevelResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; }
public void submit ( java.lang.Iterable < com.google.gerrit.common.data.SubmitRecord > submitRecords ) { status = com.google.gerrit.reviewdb.client.PatchLineComment.Status.SUBMITTED ; this . submitRecords = com.google.common.collect.ImmutableList.copyOf ( submitRecords ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( this . submitRecords.isEmpty ( ) ) ) , "no submit records specified at submit time" ) ; }
protected void configureCommands ( ) { command ( "print" ) . to ( com.google.gerrit.plugins.PrintHelloWorldCommand.class ) ; }
private void fill ( com.google.gerrit.server.change.AccountInfo info , com.google.gerrit.reviewdb.client.Account account ) { info.name = account.getFullName ( ) ; if ( detailed ) { info._account_id = account.getId ( ) . get ( ) ; info.email = account.getPreferredEmail ( ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; initParent ( ) ; initRights ( ) ; }
protected void ccAllApprovals ( ) { try { for ( com.google.gerrit.reviewdb.client.Account.Id id : getReviewers ( ) . values ( ) ) { add ( RecipientType.CC , id ) ; } } catch ( com.google.gwtorm.server.OrmException err ) { com.google.gerrit.server.mail.ChangeEmail.log.warn ( "Cannot CC users that reviewed updated change" , err ) ; } }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.lucene.LuceneIndexModule.SingleVersionListener.class ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; return modify ( edit , new com.google.gerrit.server.edit.tree.RenameFileModification ( editCommit , file , newFile ) ) ; }
private void toggleShowIntraline ( ) { prefs.intralineDifference ( ( ! ( prefs.intralineDifference ( ) ) ) ) ; setShowIntraline ( prefs.intralineDifference ( ) ) ; prefsAction.update ( ) ; }
Account.Id parse ( java.lang.String id ) { return Account.Id.parse ( id ) ; }
public static java.sql.Timestamp roundToSecond ( java.sql.Timestamp t ) { return new java.sql.Timestamp ( ( ( ( t.getTime ( ) ) / 1000 ) * 1000 ) ) ; }
com.google.gerrit.server.project.ProjectControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.project.ProjectControl r = new com.google.gerrit.server.project.ProjectControl ( uploadGroups , receiveGroups , permissionFilter , changeControlFactory , permissionBackend , who , state ) ; r.allSections = allSections ; return r ; }
public synchronized javax.sql.DataSource get ( ) { return ds ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.client.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( systemConfig , remotePeerProvider , dbProvider , id ) ; }
protected void configure ( ) { persist ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE , Project.NameKey.class , java.util.concurrent.atomic.AtomicLong.class ) . loader ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class ) . expireAfterWrite ( 1 , java.util.concurrent.TimeUnit.DAYS ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.delete ( cd ) ; } }
void createGroup ( java.lang.String newName , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.reviewdb.client.AccountGroup.Id > callback ) ;
private static int deny ( com.google.gerrit.common.data.PermissionRule a ) { return a.getDeny ( ) ? 1 : 0 ; }
public static com.google.gerrit.client.rpc.RestApi self ( ) { return new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . view ( "self" ) ; }
void onShow ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
org.parboiled.Rule Term ( ) { return Sequence ( Factor ( ) , ZeroOrMore ( AnyOf ( "*/" ) , Factor ( ) ) ) ; }
public void display ( final com.google.gerrit.reviewdb.client.Change chg , final com.google.gerrit.reviewdb.client.PatchSetInfo info , final com.google.gerrit.common.data.AccountInfoCache acc ) { infoBlock.display ( chg , acc ) ; messageBlock.display ( info.getMessage ( ) ) ; }
private java.io.File configFile ( javax.servlet.http.HttpServletRequest req ) { return new java.io.File ( site_path , req.getPathInfo ( ) ) ; }
public com.google.gerrit.extensions.common.GpgKeyInfo apply ( com.google.gerrit.gpg.server.GpgKey rsrc ) throws java.io.IOException { return com.google.gerrit.gpg.server.GpgKeys.toJson ( rsrc.getKeyRing ( ) ) ; }
public void onSend ( ) { Util.MANAGE_SVC.revertChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public static com.google.gerrit.server.index.IndexConfig.Builder builder ( ) { return new com.google.gerrit.server.index.AutoValue_IndexConfig.Builder ( ) . maxLimit ( java.lang.Integer.MAX_VALUE ) . maxPages ( java.lang.Integer.MAX_VALUE ) . maxTerms ( com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS ) ; }
public boolean canRunReceivePack ( ) { return com.google.gerrit.common.CollectionsUtil.isAnyIncludedIn ( receiveGroups , getEffectiveUserGroups ( ) ) ; }
protected void display ( com.google.gerrit.client.info.AccountInfo account ) { currentEmail = account.email ( ) ; nameTxt.setText ( account.name ( ) ) ; save.setEnabled ( false ) ; new com.google.gerrit.client.ui.OnEditEnabler ( save , nameTxt ) ; }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > query ( com.google.gerrit.extensions.api.changes.Changes.QueryParameter queryParameter ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public static com.google.gerrit.common.data.PermissionRule blockLabel ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String labelName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group , java.lang.String ref ) { return com.google.gerrit.server.project.testing.Util.blockLabel ( project , labelName , ( - 1 ) , 1 , group , ref ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; }
public void copySettingsFrom ( final com.google.gerrit.reviewdb.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; submitType = update.submitType ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated , boolean ignoreRebaseEmptyPatchSet ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , ignoreRebaseEmptyPatchSet ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNewTag ( ) ; }
protected org.eclipse.jgit.junit.TestRepository < ? > createProjectWithPush ( java.lang.String name ) throws java.lang.Exception { return createProjectWithPush ( name , null ) ; }
public void addGpgKey ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) ; java.lang.String id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyId ( ) ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( key.getPublicKeyArmored ( ) ) ) . get ( id ) ; info.id = id ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , info ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ) ; org.bouncycastle.openpgp.PGPPublicKey stored = getOnlyKeyFromStore ( key ) ; com.google.common.truth.Truth.assertThat ( stored.getFingerprint ( ) ) . isEqualTo ( key.getPublicKey ( ) . getFingerprint ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
void setContext ( final int context ) { operation ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { renderSkips ( context ) ; } } ) ; }
void downloadRequired ( ) { this . required = true ; download ( ) ; }
protected void onExit ( int rc ) { eventListenerRegistration.remove ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
protected abstract T updateProjectConfig ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public void remove ( byte [ ] fingerprint ) { com.google.gerrit.server.git.gpg.Fingerprint fp = new com.google.gerrit.server.git.gpg.Fingerprint ( fingerprint ) ; toAdd.remove ( fp ) ; toRemove.add ( fp ) ; }
private void insertEmptyLines ( net.codemirror.lib.CodeMirror cm , int nextLine , int cnt ) { addPaddingWidget ( cm , diffTable.style.padding ( ) , ( nextLine - 1 ) , cnt , Unit.EM , null ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId getLabelId ( ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId ( name ) ; }
public void noCache ( ) { httpResponse.setHeader ( "Cache-Control" , "no-cache" ) ; httpResponse.setDateHeader ( "Expires" , java.lang.System.currentTimeMillis ( ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm max ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) return t.max ( this ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( java.lang.Math.max ( this . val , t.intValue ( ) ) ) ; }
protected com.google.gerrit.server.index.QueryOptions createOptions ( com.google.gerrit.server.index.IndexConfig indexConfig , int start , int limit , java.util.Set < java.lang.String > requestedFields ) { return com.google.gerrit.server.index.change.IndexedChangeQuery.createOptions ( indexConfig , start , limit , requestedFields ) ; }
public boolean isVisible ( ) { if ( ( isVisible ) == null ) { isVisible = ( ( getUser ( ) . isInternalUser ( ) ) || ( canPerform ( Permission.READ ) ) ) && ( canRead ( ) ) ; } return isVisible ; }
protected java.lang.Class < ? extends com.google.inject.Provider < java.lang.String > > provider ( ) { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class ; }
void onRemoveDraftBox ( com.google.gerrit.client.diff.DraftBox box , com.google.gerrit.common.changes.Side side ) { getPanelFromSide ( side ) . onRemoveDraftBox ( box ) ; }
private java.lang.String urlGetFiles ( ) { return ( ( ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edits/" ) + "0" ) + "/files/" ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.List < com.google.gerrit.server.query.change.ChangeData > tmp = com.google.common.collect.ImmutableList.of ( cd ) ; return formatList2 ( com.google.common.collect.ImmutableList.of ( tmp ) ) . get ( 0 ) . get ( 0 ) ; }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return com.google.gerrit.server.group.GetGroup.parse ( resource.getControl ( ) . getGroup ( ) ) ; }
public void setPreferredEmail ( final java.lang.String addr ) { if ( ( addr != null ) && ( addr.contains ( "@" ) ) ) { sshUserName = addr.substring ( 0 , addr.indexOf ( '@' ) ) . toLowerCase ( ) ; } else { sshUserName = null ; } preferredEmail = addr ; }
protected void configure ( ) { factory ( AddReviewer.Factory.class ) ; factory ( RemoveReviewer.Factory.class ) ; factory ( PatchScriptFactory.Factory.class ) ; factory ( SaveDraft.Factory.class ) ; }
public io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings createPluginSettings ( ) { return new io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings ( pluginUserName , branch , fileRef , localFilePath , allowMaintainersSubmit , autoAddReviewers , autoSubmit , dislikeWarnings ) ; }
public com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( ) { return com.google.gerrit.common.data.GroupDescriptions.toAccountGroup ( getGroup ( ) ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { return this ; }
void setExpandAllComments ( boolean b ) { for ( com.google.gerrit.client.diff.PublishedBox box : published.values ( ) ) { box.setOpen ( b ) ; } }
public boolean canRunUploadPack ( ) { return isAnyIncludedIn ( uploadGroups , user.getEffectiveGroups ( ) ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > inname ( java.lang.String name ) { return new com.google.gerrit.server.query.project.ProjectPredicates.ProjectPredicate ( com.google.gerrit.server.index.project.ProjectField.NAME_PART , name.toLowerCase ( java.util.Locale.US ) ) ; }
private com.google.gwtorm.schema.java.JavaColumnModel collectionColumn ( final com.google.gwtorm.schema.java.JavaColumnModel f , final java.lang.Class < ? > valClazz ) throws com.google.gwtorm.client.OrmException { return new com.google.gwtorm.schema.java.JavaColumnModel ( f.getPathToFieldName ( ) , f.getColumnID ( ) , valClazz ) ; }
protected void format ( ) { appendText ( getNameFor ( fromId ) ) ; appendText ( ( ( " has abandoned change " + ( change.getChangeId ( ) ) ) + ":\n" ) ) ; appendText ( "\n" ) ; formatCoverLetter ( ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > name ( java.lang.String name ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.NAME , GroupQueryBuilder.FIELD_NAME , name.toLowerCase ( java.util.Locale.US ) ) ; }
public void onSuccess ( final com.google.gerrit.client.account.ExternalIdDetail result ) { identites.display ( result ) ; }
public final native int update_delay ( ) ;
public java.lang.String apply ( com.google.gerrit.server.project.ProjectResource resource ) { com.google.gerrit.reviewdb.client.Project project = resource.getControl ( ) . getProject ( ) ; return com.google.common.base.Strings.nullToEmpty ( project.getDescription ( ) ) ; }
javax.servlet.http.HttpServlet getGwtUiServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { if ( ( warFs ) != null ) { return new com.google.gerrit.httpd.raw.WarGwtUiServlet ( cache , warFs ) ; } else { return new com.google.gerrit.httpd.raw.DeveloperGwtUiServlet ( cache , unpackedWar ) ; } }
org.parboiled.Rule Number ( ) { return OneOrMore ( CharRange ( '0' , '9' ) ) ; }
private boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
com.google.gerrit.acceptance.PushOneCommit create ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.PersonIdent i , org.eclipse.jgit.api.Git git ) ;
public void testCreateGroupWhenGroupAlreadyExists_Conflict ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/groups/Administrators" ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_CONFLICT ) ; }
public void doClaSignupHook ( com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.common.data.ContributorAgreement cla ) ;
public com.google.template.soy.data.SanitizedContent toSoyHtml ( org.commonmark.node.Node node ) { if ( node == null ) { return null ; } toc.setRoot ( node ) ; node.accept ( this ) ; return html.toSoy ( ) ; }
public boolean updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws com.google.gwtorm.server.OrmException { ctx.getChange ( ) . setStatus ( Change.Status.MERGED ) ; ctx.getUpdate ( ctx.getChange ( ) . currentPatchSetId ( ) ) . fixStatus ( Change.Status.MERGED ) ; return true ; }
private com.google.gerrit.acceptance.TestAccount createAccount ( java.lang.String name , java.lang.String group ) throws java.lang.Exception { name = name ( name ) ; return accounts.create ( name , ( name + "@example.com" ) , ( name + " full name" ) , group ) ; }
private com.google.gerrit.server.project.ProjectControl newProjectControl ( ) throws java.lang.Exception { return projectControlFactory.controlFor ( project.getName ( ) , user ) ; }
public com.googlecode.prolog_cafe.lang.Term getMessageTerm ( ) { com.googlecode.prolog_cafe.lang.Term [ ] args = new com.googlecode.prolog_cafe.lang.Term [ ] { new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( goal ) , new com.googlecode.prolog_cafe.lang.IntegerTerm ( argNo ) , com.googlecode.prolog_cafe.lang.SymbolTerm.create ( type ) , culprit } ; return new com.googlecode.prolog_cafe.lang.StructureTerm ( com.googlecode.prolog_cafe.lang.IllegalTypeException.TYPE_ERROR , args ) ; }
private void configureRequestScope ( ) { }
public com.google.gerrit.server.IdentifiedUser getIdentifiedUser ( ) { com.google.common.base.Preconditions.checkNotNull ( user ) ; return user.asIdentifiedUser ( ) ; }
private void enable ( boolean enabled ) { commitMessage.setEnabled ( enabled ) ; commit.setEnabled ( enabled ) ; }
public java.lang.String getUserName ( ) { return null ; }
private boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH ) ) && ( getProjectControl ( ) . getProject ( ) . getState ( ) . permitsWrite ( ) ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
public boolean supportsCredentialChanges ( com.gitblit.models.UserModel user ) { return false ; }
public final short changesPerPage ( ) { return get ( "changes_per_page" , AccountGeneralPreferences.DEFAULT_PAGESIZE ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { new com.google.gitiles.dev.DevServer ( com.google.gitiles.GitilesConfig.loadDefault ( ) ) . start ( ) ; }
public void testCreatePermissionOnlyProject ( ) throws java.io.IOException { final java.lang.String newProjectName = "newProject" ; com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.permissions_only = true ; session.put ( ( "/projects/" + newProjectName ) , in ) ; assertHead ( newProjectName , GitRepositoryManager.REF_CONFIG ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = new com.google.gerrit.testutil.InMemoryDatabase ( ) ; }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.storage.dfs.DfsRepository > ( new org.eclipse.jgit.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo.getRepository ( ) ) ; }
public void setRegisterKeys ( final boolean on ) { myTable.setRegisterKeys ( on ) ; }
public com.google.gerrit.server.change.ChangeInserter setGroups ( java.lang.Iterable < java.lang.String > groups ) { patchSet.setGroups ( groups ) ; return this ; }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.server.project.ChangeControl control ) { return changeResourceFactory.create ( control ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSetApproval > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSetApproval.Key > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { return ghMembershipProvider.get ( user.getUserName ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.systemstatus.ServerInformation.class ) . toInstance ( srvInfo ) ; }
private void afterTest ( ) throws java.lang.Exception { db.close ( ) ; sshSession.close ( ) ; server.stop ( ) ; com.google.gerrit.acceptance.TempFileUtil.cleanup ( ) ; }
public void setPreferredEmail ( final java.lang.String addr ) { if ( ( addr != null ) && ( addr.contains ( "@" ) ) ) { sshUserName = addr.substring ( 0 , addr.indexOf ( '@' ) ) . toLowerCase ( ) ; } else { sshUserName = null ; } preferredEmail = addr ; }
private void checkLog ( ) { checkRevision ( ) ; }
public boolean setTeamnamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > teamnames ) { return false ; }
public void setAllowed ( java.util.Map < com.google.gerrit.reviewdb.ApprovalCategory.Id , java.util.Set < com.google.gerrit.reviewdb.ApprovalCategoryValue.Id > > allowed ) { this . allowed = allowed ; }
public PatchSet.Id getPatchSetId ( ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( commit.getChangeId ( ) ) ) ) . currentPatchSetId ( ) ; }
public void onSuccess ( com.google.gerrit.client.access.ProjectAccessInfo result ) { if ( result.isOwner ( ) ) { table.setWidget ( row , column , getHeadRevisionWidget ( rev ) ) ; } else { table.setText ( row , 3 , rev ) ; } }
private static void save ( com.dyuproject.openid.UrlEncodedParameterMap b , javax.servlet.http.HttpServletRequest r , java.lang.String n ) { final java.lang.String v = r.getParameter ( n ) ; if ( v != null ) { b.put ( n , v ) ; } }
void setToRetry ( ) { retrying = true ; }
public void shouldNotHavePushTask ( ) { org.junit.Assert.assertFalse ( replicationState.hasPushTask ( ) ) ; }
public final com.google.gerrit.client.diff.DiffInfo.IntraLineStatus intraline_status ( ) { java.lang.String s = intraline_statusRaw ( ) ; return s != null ? com.google.gerrit.client.diff.DiffInfo.IntraLineStatus.valueOf ( s ) : com.google.gerrit.client.diff.DiffInfo.IntraLineStatus.OFF ; }
public void stop ( ) { for ( com.google.gerrit.reviewdb.server.ReviewDb db : dbs ) { db.close ( ) ; } }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , com.google.gerrit.client.diff.SideBySide2.Direction.NEXT ) . run ( ) ; } }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > description ( java.lang.String description ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.DESCRIPTION , GroupQueryBuilder.FIELD_DESCRIPTION , description ) ; }
public java.lang.Boolean apply ( java.lang.String stringVal ) { return java.lang.Boolean.parseBoolean ( stringVal ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String ref , org.eclipse.jgit.lib.ObjectId oldObjectId , org.eclipse.jgit.lib.ObjectId newObjectId ) { fire ( project , ref , oldObjectId , newObjectId , ReceiveCommand.Type.UPDATE ) ; }
private void insertEmptyLines ( net.codemirror.lib.CodeMirror cm , int nextLine , int cnt ) { addPaddingWidget ( cm , DiffTable.style.padding ( ) , ( nextLine - 1 ) , ( 1.1 * cnt ) , Unit.EM , null ) ; }
abstract Patch.Key key ( ) ;
private boolean canSeeMembers ( ) { if ( ( group ) instanceof com.google.gerrit.common.data.GroupDescription.Internal ) { return ( ( ( com.google.gerrit.common.data.GroupDescription.Internal ) ( group ) ) . isVisibleToAll ( ) ) || ( isOwner ( ) ) ; } return false ; }
public boolean exists ( java.lang.String issueKey ) throws java.io.IOException { return execute ( ( ) -> client ( ) . issueExists ( issueKey ) ) ; }
static void initialize ( org.eclipse.jgit.lib.Config cfg ) { cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , MarkdownFormatter.NAME , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/x-markdown" ) ; cfg.setString ( com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER , PlainTextFormatter.NAME , com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE , "text/plain" ) ; }
public < I > com.google.gerrit.server.index.FieldDef < I , T > build ( com.google.gerrit.server.index.FieldDef.GetterWithArgs < I , T > getter ) { return new com.google.gerrit.server.index.FieldDef ( name , type , stored , false , getter ) ; }
public com.google.gerrit.server.change.ChangeInserter setDraft ( boolean draft ) { this . draft = draft ; return this ; }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return ApprovalCategory.SUBMIT_ID.equals ( input.getCategoryId ( ) . get ( ) ) ; }
void changeProjectAccess ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String baseRevision , java.lang.String message , java.util.List < com.google.gerrit.common.data.AccessSection > sections , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) ;
void init ( com.google.gerrit.client.change.ChangeScreen2.Style style , com.google.gwt.dom.client.Element reviewersText ) { this . style = style ; this . reviewersText = reviewersText ; }
private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableChange ( ) throws java.lang.Exception { return stageChange ( this :: stageReviewableChange ) ; }
private boolean isEditable ( com.google.gerrit.client.diff.FileInfo info ) { java.lang.String status = info.status ( ) ; return ( status == null ) || ( ! ( ChangeType.DELETED.matches ( status ) ) ) ; }
public boolean allRefsAreVisible ( ) { return ( visibleForReplication ( ) ) || ( canPerformOnAllRefs ( Permission.READ ) ) ; }
private com.google.gerrit.server.project.ChangeControl reload ( com.google.gerrit.server.project.ChangeControl ctl ) throws java.lang.Exception { return changeControlFactory.controlFor ( db , ctl.getChange ( ) . getProject ( ) , ctl.getId ( ) , ctl.getUser ( ) ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { if ( ( change ) != null ) { topicEdited.fire ( change , ctx.getAccount ( ) , oldTopicName , ctx.getWhen ( ) ) ; } }
public void get ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts ( ) . id ( "admin" ) . get ( ) ; org.junit.Assert.assertEquals ( "Administrator" , info.name ) ; org.junit.Assert.assertEquals ( "admin@example.com" , info.email ) ; org.junit.Assert.assertEquals ( "admin" , info.username ) ; }
public com.google.gerrit.extensions.registration.DynamicSet < T > . ReloadableHandle replace ( com.google.inject.Key < T > newKey , T newItem ) { if ( ref.compareAndSet ( item , newItem ) ) { return new ReloadableHandle ( ref , newKey , newItem ) ; } return null ; }
public java.util.Iterator < com.google.gerrit.server.query.change.ChangeData > iterator ( ) { return com.google.common.collect.Iterables.concat ( results ) . iterator ( ) ; }
public void onSend ( ) { Util.MANAGE_SVC.revertChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public static void getMessage ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.String > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id.getParentKey ( ) . get ( ) ) . view ( "edit:message" ) . get ( com.google.gerrit.client.changes.ChangeFileApi.wrapper ( cb ) ) ; }
public int hashCode ( ) { return status.hashCode ( ) ; }
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.ChangeActions.publish ( changeId , revision , publish , deleteRevision ) ; }
protected com.google.gson.JsonElement buildJson ( java.lang.String path , java.lang.String additionalQueryString ) throws java.lang.Exception { return new com.google.gson.JsonParser ( ) . parse ( buildJsonRaw ( path , additionalQueryString ) ) ; }
public com.google.gerrit.extensions.common.ChangeInfo addChangeActions ( com.google.gerrit.extensions.common.ChangeInfo to , com.google.gerrit.server.project.ChangeControl ctl ) { java.util.List < com.google.gerrit.extensions.api.changes.ActionVisitor > visitors = visitors ( ) ; to.actions = toActionMap ( ctl , visitors , copy ( visitors , to ) ) ; return to ; }
com.google.gerrit.server.permissions.PermissionBackend.ForChange asForChange ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd , @ com.google.gerrit.common.Nullable com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) { return new com.google.gerrit.server.project.ChangeControl.ForChangeImpl ( cd , db ) ; }
public void parse ( ) { projectWatches = com.google.gerrit.server.account.WatchConfig.parse ( accountId , cfg , validationErrorSink ) ; }
private net.codemirror.lib.CodeMirror otherCM ( net.codemirror.lib.CodeMirror me ) { return me == ( cmA ) ? cmB : cmA ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { r.add ( result ) ; history.addComments ( id , result ) ; }
public void onSuccess ( com.google.gerrit.client.account.AccountCapabilities result ) { if ( result.canPerform ( com.google.gerrit.common.data.GlobalCapability.ADMINISTRATE_SERVER ) ) { com.google.gerrit.client.Gerrit.addLink ( menuBar , com.google.gerrit.client.Gerrit.C.menuPlugins ( ) , PageLinks.ADMIN_PLUGINS ) ; } }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction ( id , result , path , style , editButton , replyButton ) ; edit.onEdit ( ) ; }
public void run ( ) throws java.lang.Exception { ui.message ( "\n" ) ; ui.header ( "GitBlit Integration" ) ; if ( ui.yesno ( true , "Do you want to use GitBlit as your GitWeb viewer ?" ) ) { configureGitBlit ( ) ; } }
public void onMouseOut ( com.google.gwt.event.dom.client.MouseOutEvent event ) { popup.setVisible ( false ) ; popup.clear ( ) ; hideFullScreenIcon ( ) ; }
private boolean canSkipValidation ( com.google.gerrit.server.config.PluginConfig config , java.lang.String validatorOp ) { return matchCriteria ( config , "skipValidation" , validatorOp , false ) ; }
boolean isExpired ( ) { return ( java.lang.System.currentTimeMillis ( ) ) > ( ( expiresAt ) * 1000 ) ; }
public com.google.gerrit.reviewdb.server.AccountDiffPreferenceAccess accountDiffPreferences ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { ensureLoaded ( result ) ; }
void finish ( ) { id = com.google.common.base.Joiner.on ( '~' ) . join ( com.google.gerrit.server.util.Url.encode ( project ) , com.google.gerrit.server.util.Url.encode ( branch ) , com.google.gerrit.server.util.Url.encode ( changeId ) ) ; }
void onOneNodeReplicated ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status ) { }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; engine.areg3 = this . areg3 ; engine.areg4 = this . areg4 ; engine.areg5 = this . areg5 ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public void noHashtags ( ) throws java.lang.Exception { java.lang.String commitMessage = "Subject\n\nLine 1\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . isEmpty ( ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
public void apply ( org.eclipse.jgit.dircache.DirCacheEntry ent ) { ent.setFileMode ( FileMode.REGULAR_FILE ) ; ent.setObjectId ( oid ) ; }
public void refsDraftComments ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( accountId , changeId ) ) . isEqualTo ( "refs/draft-comments/23/1011123/67473" ) ; }
public boolean hasChange ( ) { return ( change ) != null ; }
public void shouldThrowAnExceptionIfAnErrorOccurCreatingSharedDirectory ( ) throws java.lang.Exception { java.io.File configuredDirectory = tempFolder.newFile ( ) ; org.mockito.Mockito.when ( configMock.main ( ) . sharedDirectory ( ) ) . thenReturn ( configuredDirectory.getAbsolutePath ( ) ) ; module.getSharedDirectory ( ) ; }
protected java.io.File path ( java.io.File sitePath , com.google.gerrit.httpd.GitWebConfig gitWebConfig ) { return new java.io.File ( sitePath , "GerritSite.css" ) ; }
public java.util.Map < java.lang.String , java.util.List < com.google.gerrit.extensions.common.CommentInfo > > comments ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return listComments.apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get comments" , e ) ; } }
public void revokedByKeyNotPresentInStore ( ) throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add ( com.google.gerrit.gpg.testutil.TestKeys.revokedCompromisedKey ( ) ) ; save ( ) ; assertProblems ( k , "Key is revoked (key material has been compromised): test6 compromised" ) ; }
protected org.eclipse.jgit.lib.ObjectInserter delegate ( ) { return inserter ; }
public void assertErrorStatus ( ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; com.google.common.truth.Truth.assertThat ( refUpdate.getStatus ( ) ) . named ( message ( refUpdate ) ) . isEqualTo ( Status.REJECTED_OTHER_REASON ) ; }
public final native com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.info.ActionInfo > actions ( ) ;
public com.google.gerrit.server.project.RefControl controlForRef ( java.lang.String refName ) { return new com.google.gerrit.server.project.RefControl ( this , refName ) ; }
public void copySettingsFrom ( final com.google.gerrit.reviewdb.client.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; useContentMerge = update.useContentMerge ; requireChangeID = update.requireChangeID ; submitType = update.submitType ; state = update.state ; maxObjectSizeLimit = update.maxObjectSizeLimit ; }
public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; factory ( NoteDbBatchUpdate.AssistedFactory.class ) ; }
public void testVerifyAgainstDifferentOperation ( ) throws java.lang.Exception { java.lang.String token = auth.generateToken ( "o" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) , 1 ) ; com.google.common.truth.Truth.assertThat ( auth.verifyAgainstToken ( token , "p" , org.eclipse.jgit.lfs.lib.LongObjectId.zeroId ( ) ) ) . isFalse ( ) ; }
protected static java.lang.String getGroupName ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return java.lang.String.format ( "Group <%s>" , uuid ) ; }
public com.google.gerrit.server.ssh.Command createCommand ( final java.lang.String requestCommand ) { final com.google.gerrit.server.ssh.DispatchCommand c = dispatcher.get ( ) ; c.setCommandLine ( requestCommand ) ; return c ; }
public void run ( ) { try { running = true ; task.run ( ) ; } finally { running = false ; } }
public final void ignoreWhitespace ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace i ) { setIgnoreWhitespaceRaw ( i.toString ( ) ) ; }
public final Project.NameKey getNameKey ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( getName ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { setOpen ( ( ! ( isOpen ( ) ) ) ) ; callback.run ( ) ; }
public void execute ( ) { for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l.onSignIn ( ) ; } }
public boolean canPerform ( java.lang.String permissionName ) { return ! ( access ( permissionName ) . isEmpty ( ) ) ; }
public com.google.gerrit.extensions.api.changes.Changes.QueryParameter withLimit ( int limit ) { this . limit = limit ; return this ; }
public final com.google.gerrit.client.projects.ConfigInfo.ConfigParameterValue value ( java.lang.String v ) { set_value ( v ) ; return this ; }
protected void onCellSingleClick ( int row , int column ) { if ( ( column == 1 ) || ( column == 3 ) ) { onCellDoubleClick ( row , column ) ; } }
boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return canPerform ( Permission.SUBMIT , isChangeOwner ) ; }
public void visit ( org.commonmark.node.HtmlBlock node ) { }
public void setUseSignedOffBy ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean sbo ) { useSignedOffBy = sbo ; }
private void setNew ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
private java.lang.String createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
public void review ( com.google.gerrit.extensions.api.changes.ReviewInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.apply ( revision , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot post review" , e ) ; } }
private static java.lang.String decode ( java.lang.String str ) { try { return java.net.URLDecoder.decode ( str , com.google.common.base.Charsets.UTF_8.name ( ) ) ; } catch ( java.io.UnsupportedEncodingException e ) { return str ; } }
public static void createGroup ( java.lang.String groupName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( groupName ) . ifNoneMatch ( ) . put ( in , cb ) ; }
public static com.google.gerrit.server.account.AuthRequest forEmail ( java.lang.String email ) { com.google.gerrit.server.account.AuthRequest r = new com.google.gerrit.server.account.AuthRequest ( ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_MAILTO , email ) ) ; r.setEmailAddress ( email ) ; return r ; }
public static boolean isLegalReviewerGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID ) { return ! ( ( AccountGroup.ANONYMOUS_USERS.equals ( groupUUID ) ) || ( AccountGroup.REGISTERED_USERS.equals ( groupUUID ) ) ) ; }
public final com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat timeFormat ( ) { java.lang.String s = timeFormatRaw ( ) ; return s != null ? com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat.valueOf ( s ) : null ; }
public void backupRefNameForUnsupportedNamespace ( ) throws java.lang.Exception { java.lang.String ref = "refs/changes/45/12345/1" ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.refprotection.BackupRef.get ( ref ) ) . isEqualTo ( ref ) ; }
public com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff ( com.google.gerrit.server.patch.IntraLineDiffKey key ) ;
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
private void setNew ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
protected abstract java.lang.String readStringImpl ( java.lang.String def , java.lang.String fmt , java.lang.Object ... args ) ;
public void evictInclude ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
public void addIntHeader ( java.lang.String name , int value ) { headers.put ( name , java.lang.Integer.toString ( value ) ) ; }
protected void deny ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permission , com.google.gerrit.reviewdb.client.AccountGroup.UUID id , java.lang.String ref ) throws java.lang.Exception { com.google.gerrit.server.project.Util.deny ( project , permission , id , ref ) ; saveProjectConfig ( project ) ; }
public int compare ( final com.google.gerrit.reviewdb.client.PatchSetApproval a , final com.google.gerrit.reviewdb.client.PatchSetApproval b ) { return a.getGranted ( ) . compareTo ( b.getGranted ( ) ) ; }
public boolean enterSSLVerify ( com.google.gerrit.pgm.init.api.Section section ) { return ( com.googlesource.gerrit.plugins.hooks.its.InitIts.TrueFalseEnum.TRUE ) == ( section.select ( "Verify SSL Certificates" , "sslVerify" , com.googlesource.gerrit.plugins.hooks.its.InitIts.TrueFalseEnum.TRUE ) ) ; }
void onQuote ( com.google.gwt.event.dom.client.ClickEvent e ) { e.stopPropagation ( ) ; if ( ! ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ) { com.google.gerrit.client.Gerrit.doSignIn ( getCommentManager ( ) . getDiffScreen ( ) . getToken ( ) ) ; } addReplyBox ( true ) ; }
public com.google.gerrit.server.project.SubmitRuleEvaluator setOptions ( com.google.gerrit.server.project.SubmitRuleOptions opts ) { checkNotStarted ( ) ; if ( opts != null ) { optsBuilder = opts.toBuilder ( ) ; } else { optsBuilder = com.google.gerrit.server.project.SubmitRuleOptions.defaults ( ) ; } return this ; }
public void abandonReviewableChangeNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
com.google.gerrit.sshd.SshScope.Context newContext ( com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > sf , com.google.gerrit.sshd.SshSession s , java.lang.String cmd ) { return new com.google.gerrit.sshd.SshScope.Context ( sf , s , cmd , java.lang.System.currentTimeMillis ( ) ) ; }
public java.lang.String describeForException ( ) { return "label " + ( label ( ) ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { deleteAsync ( cd ) . checkedGet ( ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "quota" ) . to ( com.googlesource.gerrit.plugins.quota.GetQuota.class ) ; }
public long getDateHeader ( java.lang.String name ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected java.lang.String getTaskDescription ( ) { java.lang.StringBuilder m = new java.lang.StringBuilder ( ) ; m.append ( getFormattedMaskedArguments ( " " ) ) ; return m.toString ( ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initPath ( ) ; setHeaderVisible ( false ) ; setWindowTitle ( com.google.gerrit.client.diff.FileInfo.getFileName ( path ) ) ; }
com.google.gerrit.httpd.raw.PolyGerritUiServlet getPolyGerritUiBowerServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.PolyGerritUiServlet ( cache , polyGerritBasePath ( ) . resolveSibling ( "bower_components" ) ) ; }
private void configureCacheSection ( ) { ui.header ( "Cache section" ) ; promptAndSetString ( "Cache thread pool size" , com.ericsson.gerrit.plugins.highavailability.CACHE_SECTION , com.ericsson.gerrit.plugins.highavailability.THREAD_POOL_SIZE_KEY , com.ericsson.gerrit.plugins.highavailability.Setup.str ( com.ericsson.gerrit.plugins.highavailability.DEFAULT_THREAD_POOL_SIZE ) ) ; }
public void manualCertificationDoesNotExternalId ( ) throws java.lang.Exception { addExternalId ( "foo" , "otherId" , null ) ; assertProblems ( com.google.gerrit.server.git.gpg.TestKey.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( ( "identities:\n" + " foo:otherId\n" ) + " gerrit:user\n" ) + " username:user" ) ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwtjsonrpc.common.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.DELETE , cb ) ; }
public static synchronized void useSystemTime ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; }
public void close ( ) { rs.close ( ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.Change > query ( com.google.gerrit.reviewdb.ReviewDb db , int slim , java.lang.String sortKey ) throws com.google.gwtorm.client.OrmException { return db.changes ( ) . allOpenPrev ( sortKey , slim ) ; }
public void testInvalidSchemeWithBackreference ( ) { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( ".*(script:[^;]*)" , "java$1" ) . replace ( "Look at this script: alert(1);" ) ; org.junit.Assert.fail ( "Expected IllegalStateException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public void setUseContributorAgreements ( final boolean u ) { useContributorAgreements = u ; }
public static void setAccountDiffPreference ( com.google.gerrit.reviewdb.client.AccountDiffPreference accountDiffPref ) { com.google.gerrit.client.Gerrit.myAccountDiffPref = accountDiffPref ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , caller ) ; }
com.google.gerrit.server.git.AbandonOp create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Account account , @ com.google.inject.assistedinject.Assisted java.lang.String msgTxt , @ com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling ) ;
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( storeName ) ; }
java.lang.String pluginRulesFileName ( ) { return java.lang.String.format ( com.googlesource.gerrit.plugins.its.base.ItsHookModule.CONFIG_FILE_NAME , ( "-" + ( pluginName ) ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { header.reviewedAndNext ( ) . run ( ) ; }
private com.google.gerrit.server.plugins.JarScanner createJarScanner ( java.io.File srcJar ) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return new com.google.gerrit.server.plugins.JarScanner ( srcJar ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.server.plugins.InvalidPluginException ( ( "Cannot scan plugin file " + srcJar ) , e ) ; } }
public java.lang.String getDisplayString ( ) { return ( ( java.lang.String.valueOf ( change.legacy_id ( ) . get ( ) ) ) + ": " ) + ( change.subject ( ) ) ; }
private static com.google.gerrit.reviewdb.client.Change newChange ( ) { return com.google.gerrit.testutil.TestChanges.newChange ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , new com.google.gerrit.reviewdb.client.Account.Id ( 12345 ) ) ; }
public void checkChanges ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change.Id > changeIds ) throws java.lang.Exception { checkActual ( readExpected ( changeIds ) , new java.util.ArrayList < java.lang.String > ( ) ) ; }
public com.google.gerrit.client.diff.DiffApi ignoreWhitespace ( com.google.gerrit.client.diff.DiffApi.IgnoreWhitespace w ) { if ( ( w != null ) && ( w != ( com.google.gerrit.client.diff.DiffApi.IgnoreWhitespace.NONE ) ) ) { call.addParameter ( "ignore-whitespace" , w ) ; } return this ; }
public void onShowView ( ) { super . onShowView ( ) ; if ( ( cmA ) != null ) { cmA.refresh ( ) ; } if ( ( cmB ) != null ) { cmB.refresh ( ) ; } }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSave ( null ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; setHashtags ( update ) ; setTopic ( update ) ; }
void evictAllNoReindex ( ) ;
public void testEvictCacheThrowsException ( ) throws java.lang.Exception { setupMocks ( Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON2 , false , true ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON ) ) . isFalse ( ) ; }
private java.util.List < com.google.gerrit.server.diff.PatchListEntry > getPatches ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) throws java.lang.Exception { return patchListCache.get ( getKey ( revisionIdA , revisionIdB ) , project ) . getPatches ( ) ; }
private static boolean isStateChange ( javax.servlet.http.HttpServletRequest req ) { java.lang.String method = req.getMethod ( ) ; return ! ( ( "GET" . equals ( method ) ) || ( "HEAD" . equals ( method ) ) ) ; }
void setShowTabs ( boolean b ) { if ( b ) { diffTable.addStyleName ( DiffTable.style.showTabs ( ) ) ; } else { diffTable.removeStyleName ( DiffTable.style.showTabs ( ) ) ; } }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo ( java.lang.String operation , org.eclipse.jgit.lfs.lib.AnyLongObjectId id , int expirationSeconds ) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken ( operation , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.AuthInfo ( processor.serialize ( token ) , token.expiresAt ) ; }
public void put ( K key , V value ) ;
public com.google.gerrit.server.account.AccountGroupCollection get ( final com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey externalName ) { return byExternalName.get ( externalName ) ; }
public void testCreateProjectWithNonExistingOwner_UnprocessableEntity ( ) throws java.io.IOException { com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput in = new com.google.gerrit.acceptance.rest.project.CreateProjectIT.ProjectInput ( ) ; in.owners = java.util.Collections.singletonList ( "non-existing-group" ) ; com.google.gerrit.acceptance.RestResponse r = session.put ( "/projects/newProject" , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_UNPROCESSABLE_ENTITY , r.getStatusCode ( ) ) ; }
public boolean canRunReceivePack ( ) { return com.google.gerrit.common.CollectionsUtil.isAnyIncludedIn ( receiveGroups , getEffectiveUserGroups ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.common.data.EditList.Hunk > getHunks ( ) { return new com.google.gerrit.common.data.EditList ( edits , getContext ( ) , a.size ( ) , b.size ( ) ) . getHunks ( ) ; }
public void start ( ) { graphiteReporter.start ( 1 , java.util.concurrent.TimeUnit.MINUTES ) ; }
private void initChannels ( ) { setChannelFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Channel > > asList ( new org.apache.sshd.server.channel.ChannelSession.Factory ( ) , new org.apache.sshd.common.forward.TcpipServerChannel.DirectTcpipFactory ( ) ) ) ; }
private static org.eclipse.jgit.revwalk.RevCommit lookupCommit ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId ( patchSet ) ; try ( org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( repository ) ) { return revWalk.parseCommit ( patchSetCommitId ) ; } }
public void assertNoChangeRef ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openMetadataRepository ( project ) ) { com.google.common.truth.Truth.assertThat ( repo.exactRef ( com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( changeId ) ) ) . isNull ( ) ; } }
public void putApproval ( java.lang.String label , short value ) { approvals.put ( label , com.google.common.base.Optional.of ( value ) ) ; }
public java.util.Set < com.google.gerrit.reviewdb.ApprovalCategory.Id > getApprovalCategories ( ) { return byCategory ( ) . keySet ( ) ; }
public boolean canRemoveGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return isOwner ( ) ; }
private void postRPC ( ) { if ( ( ( mySigned ) != null ) && ( ( available ) != null ) ) { display ( ) ; } }
void authenticationSuccess ( java.lang.String user , com.google.gerrit.server.CurrentUser id ) { username = user ; identity = id ; authError = null ; }
java.util.Optional < java.util.Map < java.lang.String , com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit > > getRatelimits ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.Type type ) { if ( ( rateLimits ) != null ) { return java.util.Optional.ofNullable ( rateLimits.row ( type ) ) ; } return java.util.Optional.empty ( ) ; }
public void negativeEndCharacterResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 2 , 19 , ( - 1 ) ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.lang.String o ) { sb.append ( escapeString ( o ) ) ; }
public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider ( ) { return com.google.inject.util.Providers.of ( db ) ; }
public abstract void stop ( ) ;
public static com.google.gerrit.server.account.ExternalId.Key create ( @ com.google.gerrit.common.Nullable java.lang.String scheme , java.lang.String id ) { return new com.google.gerrit.server.account.AutoValue_ExternalId_Key ( scheme , id ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return getProjectControl ( ) . isOwner ( ) ; } return canPerform ( Permission.SUBMIT ) ; }
private void injectMode ( com.google.gerrit.client.diff.DiffInfo diffInfo , com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > cb ) { new net.codemirror.lib.ModeInjector ( ) . add ( getContentType ( diffInfo.meta_a ( ) ) ) . add ( getContentType ( diffInfo.meta_b ( ) ) ) . inject ( cb ) ; }
public com.google.gerrit.extensions.common.AccountInfo apply ( com.google.gerrit.reviewdb.client.Account.Id id ) { return accountLoader.get ( id ) ; }
public void resetToDefaults ( ) { maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; copySelfOnEmail = false ; displayPatchSetsInReverseOrder = false ; downloadUrl = null ; downloadCommand = null ; dateFormat = null ; timeFormat = null ; }
public void testTagBr ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.br ( ) ) ; org.junit.Assert.assertEquals ( "<br />" , b.asString ( ) ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( newUserName ) ; userNameLbl.setText ( newUserName ) ; userNameLbl.setVisible ( true ) ; userNameTxt.setVisible ( false ) ; setUserName.setVisible ( false ) ; }
public static com.google.gerrit.common.data.PermissionRule newRule ( com.google.gerrit.server.git.ProjectConfig project , com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID ) { com.google.gerrit.common.data.GroupReference group = new com.google.gerrit.common.data.GroupReference ( groupUUID , groupUUID.get ( ) ) ; group = project.resolve ( group ) ; return new com.google.gerrit.common.data.PermissionRule ( group ) ; }
public void onSend ( ) { Util.MANAGE_SVC.abandonChange ( patchSet.getId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
void audit ( com.google.gerrit.sshd.SshScope.Context ctx , java.lang.Object result , com.google.gerrit.sshd.DispatchCommand cmd ) { audit ( ctx , result , extractWhat ( cmd ) , extractParameters ( cmd ) ) ; }
protected void configure ( ) { factory ( AbandonedSender.Factory.class ) ; factory ( CommentSender.Factory.class ) ; }
com.google.gerrit.server.change.PatchSetInserter create ( com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.lib.ObjectId commitId ) ;
final native void add_value ( java.lang.String v ) ;
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( id ) ) ; hide ( ) ; }
public void insert ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Account account ) throws com.google.gwtorm.server.OrmException , java.io.IOException { db.accounts ( ) . insert ( com.google.common.collect.ImmutableSet.of ( account ) ) ; createUserBranchIfNeeded ( account ) ; }
synchronized void clean ( int expect ) { if ( ( ( self ) == null ) && ( ( pending ) == 0 ) ) { start = com.google.gerrit.server.util.TimeUtil.nowMs ( ) ; } pending = expect ; ensureScheduled ( ) ; }
public java.util.Set < com.google.gerrit.reviewdb.Account > call ( ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.client.OrmException { return listAccounts ( groupUUID , new java.util.HashSet < com.google.gerrit.reviewdb.AccountGroup.UUID > ( ) ) ; }
public synchronized com.google.gerrit.server.account.AccountState getIfPresent ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return byId.get ( accountId ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.cache.h2.DefaultCacheFactory.class ) ; bind ( com.google.gerrit.server.cache.MemoryCacheFactory.class ) . to ( com.google.gerrit.server.cache.h2.DefaultCacheFactory.class ) ; bind ( com.google.gerrit.server.cache.PersistentCacheFactory.class ) . to ( com.google.gerrit.server.cache.h2.H2CacheFactory.class ) ; listener ( ) . to ( com.google.gerrit.server.cache.h2.H2CacheFactory.class ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { setReviewedByCurrentUser ( event.getValue ( ) ) ; }
private static void assertToNotifyValue ( java.lang.String filter , java.util.Set < com.google.gerrit.server.account.WatchConfig.NotifyType > notifyTypes , java.lang.String expectedNotifyValue ) { com.google.gerrit.server.account.WatchConfig.NotifyValue nv = com.google.gerrit.server.account.WatchConfig.NotifyValue.create ( filter , notifyTypes ) ; com.google.common.truth.Truth.assertThat ( nv.toString ( ) ) . isEqualTo ( expectedNotifyValue ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.RevisionResource > list ( ) throws com.google.gerrit.extensions.restapi.AuthException { return new com.google.gerrit.server.change.Files.List ( ) ; }
private int getBackendSupportedLimit ( ) { return indexConfig.getMaxLimit ( ) ; }
public com.google.gerrit.server.WebLinks get ( ) { com.google.gerrit.server.WebLinks webLinks = new com.google.gerrit.server.WebLinks ( patchSetLinks ) ; return webLinks ; }
private void parse ( java.lang.String markdown ) { node = com.google.gitiles.doc.GitilesMarkdown.parse ( markdown ) ; extractSiteTitle ( ) ; extractRefLinks ( markdown ) ; }
public org.eclipse.jgit.lib.PersonIdent newPersonIdent ( ) { return newPersonIdent ( new java.util.Date ( ) , java.util.TimeZone.getDefault ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > all ( org.eclipse.jgit.lib.ObjectId rev ) throws java.io.IOException { checkReadEnabled ( ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ) { return all ( repo , rev ) ; } }
public org.eclipse.jgit.lib.ObjectReader newReader ( ) { return new com.google.gerrit.server.notedb.InMemoryInserter.Reader ( ) ; }
public void execute ( ) { resizePaddingWidget ( ) ; }
public void evict ( final com.google.gerrit.client.reviewdb.AccountGroup group ) { byId.remove ( group.getId ( ) ) ; byName.remove ( group.getNameKey ( ) ) ; }
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.io.IOException { index ( changeDataFactory.create ( db , project , changeId ) ) ; }
protected void formatChange ( ) { appendText ( getNameFor ( fromId ) ) ; appendText ( ( ( " has abandoned change " + ( change.getKey ( ) . abbreviate ( ) ) ) + ":\n" ) ) ; appendText ( "\n" ) ; formatCoverLetter ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.postSignIn ( result ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; } finishModuleLoad ( ) ; }
public com.google.gerrit.server.git.MergeSuperSet setMergeOpRepoManager ( com.google.gerrit.server.git.MergeOpRepoManager orm ) { com.google.common.base.Preconditions.checkState ( ( ( this . orm ) == null ) ) ; this . orm = com.google.common.base.Preconditions.checkNotNull ( orm ) ; return this ; }
public void visit ( org.pegdown.ast.AutoLinkNode node ) { java.lang.String url = node.getText ( ) ; html.open ( "a" ) . attribute ( "href" , href ( url ) ) . appendAndEscape ( url ) . close ( "a" ) ; }
public void onSuccess ( com.google.gerrit.client.account.EditPreferences r ) { prefs = r ; com.google.gerrit.extensions.client.EditPreferencesInfo global = new com.google.gerrit.extensions.client.EditPreferencesInfo ( ) ; r.copyTo ( global ) ; com.google.gerrit.client.Gerrit.setEditPreferences ( global ) ; onLoad2 ( ) ; }
static void setForwardedEvent ( java.lang.Boolean b ) { com.ericsson.gerrit.plugins.syncindex.Context.FORWARDED_EVENT.set ( b ) ; }
public void listNonExistingGroupMembers_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( ( ( "/groups/" + ( name ( "non-existing" ) ) ) + "/members/" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
abstract java.lang.Runnable openCloseAll ( final net.codemirror.lib.CodeMirror cm ) ;
public com.googlecode.prolog_cafe.builtin.Operation exec ( com.googlecode.prolog_cafe.builtin.Prolog engine ) { engine.setB0 ( ) ; com.googlecode.prolog_cafe.builtin.Term a1 ; a1 = arg1 ; a1 = a1.dereference ( ) ; engine.setException ( a1 ) ; return cont ; }
public static com.google.gerrit.client.rpc.RestApi reviewer ( int id , int reviewer ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) . id ( reviewer ) ; }
boolean needsCookieRefresh ( ) { return ( refreshCookieAt ) <= ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) ; }
public void deleteBranch_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; assertDeleteForbidden ( ) ; }
private void appendLineText ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final int lineNumberMinusOne , final com.google.gerrit.client.patches.PatchLine.Type type , final com.google.gerrit.common.data.SparseFileContent src , final int i ) { appendLineText ( m , lineNumberMinusOne , type , src.get ( i ) ) ; }
public void setGroupReference ( java.lang.String name , com.google.gerrit.common.data.GroupReference value ) { setString ( name , value.toConfigValue ( ) ) ; }
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.DraftActions.publish ( changeId , revision ) ; }
public void setSpellCheck ( boolean spell ) { com.google.gwt.user.client.DOM.setElementPropertyBoolean ( getElement ( ) , "spellcheck" , spell ) ; }
protected void configure ( ) { factory ( AddReviewer.Factory.class ) ; factory ( PatchScriptFactory.Factory.class ) ; factory ( SaveDraft.Factory.class ) ; }
private static java.lang.String getJsPluginPath ( com.google.gerrit.server.plugins.Plugin plugin ) { return java.lang.String.format ( "%s/static/%s" , plugin.getName ( ) , plugin.getSrcFile ( ) . getName ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { setUpChanges ( ) ; setUpPermissions ( ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { indexAsync ( cd ) . checkedGet ( ) ; }
public void execute ( java.lang.Runnable command ) { command.run ( ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.query.change.ChangeData.sortApprovals ( approvalsMap ( db ) . values ( ) ) ; }
public com.google.gerrit.server.query.Predicate < T > copy ( java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { return new com.google.gerrit.server.query.OrPredicate ( children ) ; }
void onRebaseEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.rebaseEdit ( changeId ) ; }
protected void preDisplay ( final com.google.gerrit.client.data.ChangeDetail r ) { setStarred ( r.isStarred ( ) ) ; display ( r ) ; }
public void newPatchSetOnWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%wip" , sc.owner ) ; assertThat ( sender ) . notSent ( ) ; }
public void onUnload ( ) { com.google.gerrit.client.Gerrit.removeSignedInListener ( signedInListener ) ; super . onUnload ( ) ; }
public void onSignOut ( ) { actionsPanel.clear ( ) ; actionsPanel.setVisible ( false ) ; }
public void onSend ( ) { Util.MANAGE_SVC.abandonChange ( getPatchSetId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public boolean hasGroup ( com.google.gerrit.reviewdb.AccountGroup.UUID uuid ) { return groupsByUUID.containsKey ( uuid ) ; }
public org.eclipse.jgit.lib.Config getConfig ( ) { return config ; }
public void cleanup ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; db.close ( ) ; }
public int next ( ) throws com.google.gwtorm.server.OrmException { counterLock.lock ( ) ; try { if ( ( counter ) >= ( limit ) ) { acquire ( ) ; } return ( counter ) ++ ; } finally { counterLock.unlock ( ) ; } }
public boolean canForwardX11 ( org.apache.sshd.server.session.ServerSession session ) { return false ; }
public void onSignIn ( ) { }
void addRight ( com.google.gerrit.reviewdb.Project.NameKey projectName , com.google.gerrit.reviewdb.ApprovalCategory.Id categoryId , java.lang.String groupName , java.lang.String refName , short min , short max , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) ;
public long getId ( ) { return org.eclipse.jgit.util.NB.decodeInt64 ( fp , 12 ) ; }
protected java.io.File getSitePath ( ) { java.io.File path = sitePath.getAbsoluteFile ( ) ; if ( "." . equals ( path.getName ( ) ) ) { path = path.getParentFile ( ) ; } return path ; }
public T call ( ) throws java.lang.Exception { com.google.gerrit.server.util.RequestContext old = local.setContext ( context ) ; try { return callable.call ( ) ; } finally { local.setContext ( old ) ; } }
private boolean list ( ) { for ( com.google.gerrit.server.index.IndexDefinition < ? , ? , ? > def : indexDefs ) { java.lang.System.out.format ( "%s\n" , def.getName ( ) ) ; } return true ; }
public boolean canSubmit ( ) { return canPerform ( ApprovalCategory.SUBMIT , ( ( short ) ( 1 ) ) ) ; }
public void incrementBy ( long delta ) { com.google.common.base.Preconditions.checkArgument ( ( delta >= 0 ) , "counter delta must be >= 0" ) ; metric.mark ( delta ) ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.account.AccountCapabilities > cb , java.lang.String ... filter ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/self/capabilities" ) . addParameter ( "q" , filter ) . get ( cb ) ; }
public java.util.List < org.eclipse.jgit.revwalk.FooterLine > commitFooters ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitFooters ) == null ) { loadCommitData ( ) ; } return commitFooters ; }
private void add ( com.google.gerrit.client.change.ActionButton b ) { ( ( com.google.gwt.user.client.ui.FlowPanel ) ( getWidget ( ) ) ) . add ( b ) ; }
public void batchAbandon ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { batchAbandon ( project , user , controls , msgTxt , NotifyHandling.ALL ) ; }
public void onSuccess ( final java.lang.Object result ) { refresh ( ) ; }
protected void onExit ( final int rc ) { hooks.removeChangeListener ( listener ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
private static java.util.List < com.google.gerrit.common.auth.openid.OpenIdProviderPattern > toPatterns ( org.eclipse.jgit.lib.Config cfg , java.lang.String name ) { java.lang.String [ ] s = cfg.getStringList ( "auth" , null , name ) ; if ( ( s.length ) == 0 ) { s = new java.lang.String [ ] { "http://" , "https://" } ; } java.util.List < com.google.gerrit.common.auth.openid.OpenIdProviderPattern > r = new java.util.ArrayList < com.google.gerrit.common.auth.openid.OpenIdProviderPattern > ( ) ; for ( java.lang.String pattern : s ) { r.add ( com.google.gerrit.common.auth.openid.OpenIdProviderPattern.create ( pattern ) ) ; } return java.util.Collections.unmodifiableList ( r ) ; }
protected void onMovePointerTo ( java.lang.String projectName ) { if ( ( ! ( projectsPopup.isPopingUp ( ) ) ) || ( "" . equals ( sugestParent.getText ( ) ) ) ) { sugestParent.setText ( projectName ) ; } }
public void onSuccess ( com.google.gerrit.client.groups.GroupList result ) { cb.onSuccess ( ( ! ( result.asList ( ) . isEmpty ( ) ) ) ) ; }
void populateDownloadCommandLinks ( com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo schemeInfo ) { commands.clear ( ) ; for ( com.google.gerrit.client.config.DownloadInfo.DownloadCommandInfo cmd : getCommands ( schemeInfo ) ) { commands.add ( new com.google.gerrit.client.download.DownloadCommandLink ( copyLabel , cmd ) ) ; } commands.select ( ) ; }
public void run ( ) { int v = prefs.tabSize ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "tabSize" , v ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "tabSize" , v ) ; }
private void createHeaderLogo ( ) { final com.google.gwt.user.client.ui.FlowPanel headerLogo = new com.google.gwt.user.client.ui.FlowPanel ( ) ; headerLogo.setStyleName ( "gerrit-OpenID-logobox" ) ; headerLogo.add ( icons.openidLogo ( ) . createImage ( ) ) ; formBody.add ( headerLogo ) ; }
public void onFailure ( final java.lang.Throwable caught ) { enableUI ( true ) ; if ( InvalidUserNameException.MESSAGE.equals ( caught.getMessage ( ) ) ) { invalidUserName ( ) ; } else { super . onFailure ( caught ) ; } }
public void completeRewriteIncludesNewline ( ) throws java.lang.Exception { java.lang.String a = "abc1\n" ; java.lang.String b = "def2\n" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.patch.IntraLineLoaderTest.intraline ( a , b ) ) . isEqualTo ( com.google.gerrit.server.patch.IntraLineLoaderTest.wordEdit ( 0 , 5 , 0 , 5 ) ) ; }
public java.lang.String toString ( ) { return ( ( state ( ) ) + "," ) + ( account ( ) ) ; }
public java.util.List < java.lang.String > getTeamNamesForRepositoryRole ( java.lang.String role ) { return null ; }
public void listNonEmptyGroupIncludes ( ) throws java.lang.Exception { group ( "gx" , "Administrators" ) ; group ( "gy" , "Administrators" ) ; PUT ( "/groups/Administrators/groups/gx" ) ; PUT ( "/groups/Administrators/groups/gy" ) ; assertIncludes ( GET ( "/groups/Administrators/groups/" ) , "gx" , "gy" ) ; }
public static java.lang.String toPublish ( com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { com.google.gerrit.reviewdb.client.Change.Id c = ps.getParentKey ( ) ; return ( ( ( "/c/" + c ) + "/" ) + ( ps.get ( ) ) ) + ",publish" ; }
public final native net.codemirror.lib.CodeMirror.LineHandle activeLine ( ) ;
public void setAccessKey ( char key ) { suggestBox.setAccessKey ( key ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , account , com.google.common.collect.ImmutableSet.of ( ) , new java.util.HashMap < > ( ) , com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults ( ) ) ; }
com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.server.notedb.ChangeNotes notes ) { return changeControlFactory.create ( controlForRef ( notes.getChange ( ) . getDest ( ) ) , notes ) ; }
public com.google.gerrit.extensions.common.ChangeInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.allOf ( com.google.gerrit.extensions.common.ListChangesOption.class ) ) ; }
public com.google.gerrit.server.util.ManualRequestContext openAs ( com.google.gerrit.reviewdb.client.Account.Id userId ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.util.ManualRequestContext ( identifiedUserFactory.create ( userId ) , schemaFactory , requestContext ) ; }
com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException ;
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( db , repoManager , migration , allUsersProvider , change ) ; }
private final native com.google.gwt.core.client.JavaScriptObject detailed_labels0 ( ) ;
private static java.lang.String findId ( final java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids ) { for ( final com.google.gerrit.reviewdb.client.AccountExternalId i : ids ) { if ( i.isScheme ( AccountExternalId.SCHEME_GERRIT ) ) { return i.getSchemeRest ( ) ; } } return null ; }
public static void clearHttpPassword ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "password.http" ) . delete ( cb ) ; }
private void writeFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { res.setStatus ( HttpServletResponse.SC_NO_CONTENT ) ; streamRequestToFile ( req , configFile ( req ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { k.getWatch ( ) . setNotifyNewChanges ( oldVal ) ; notifyNewChanges.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
public java.lang.String getCommentLinkName ( ) { java.lang.String ret ; ret = gerritConfig.getString ( pluginName , null , "commentlink" ) ; if ( ret == null ) { ret = pluginName ; } return ret ; }
public static com.google.gerrit.pgm.util.ConsoleUI getInstance ( final boolean batchMode ) { java.io.Console console = ( batchMode ) ? null : java.lang.System.console ( ) ; return console != null ? new com.google.gerrit.pgm.util.ConsoleUI.Interactive ( console ) : new com.google.gerrit.pgm.util.ConsoleUI.Batch ( ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( account , new com.google.gerrit.server.account.Index.Input ( ) ) ; } catch ( java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index account" , e ) ; } }
public static com.google.gerrit.lucene.LuceneIndexModule latestVersionWithOnlineUpgrade ( ) { return new com.google.gerrit.lucene.LuceneIndexModule ( null , 0 , true ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( revision , oldRevision , path ) ; }
protected java.nio.file.Path getResourcePath ( java.lang.String pathInfo ) throws java.io.IOException { if ( ( fonts ) == null ) { throw new java.io.IOException ( ( ( "No fonts found: " + ( zip ) ) + ". Run `buck build //polygerrit-ui:fonts`?" ) ) ; } return fonts.resolve ( pathInfo ) ; }
public void noRevisionOptions ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo c = info ( changeId ) ; org.junit.Assert.assertNull ( c.currentRevision ) ; org.junit.Assert.assertNull ( c.revisions ) ; }
public void run ( ) { try { wrapped.call ( ) ; } catch ( java.lang.Exception e ) { com.google.common.base.Throwables.throwIfUnchecked ( e ) ; throw new java.lang.RuntimeException ( e ) ; } }
public void myExternalIds ( com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.client.AccountExternalId > > callback ) { externalIdDetailFactory.create ( ) . to ( callback ) ; }
private void checkHostIndex ( ) { checkView ( ( ( hostName ) != null ) , "missing hostName on %s view" , type ) ; checkView ( ( ( servletPath ) != null ) , "missing hostName on %s view" , type ) ; }
public com.google.gerrit.server.project.ListProjects setShowDescription ( boolean show ) { this . showDescription = show ; return this ; }
public com.google.gerrit.server.schema.Schema_77.LegacyLabelType byLabel ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId labelId ) { com.google.gerrit.server.schema.Schema_77.LegacyLabelType t = byId.get ( labelId.get ( ) ) ; return t != null ? t : ( ( com.google.gerrit.server.schema.Schema_77.LegacyLabelType ) ( super . byLabel ( labelId ) ) ) ; }
static com.google.gerrit.reviewdb.server.ReviewDb unwrap ( com.google.gerrit.reviewdb.server.ReviewDb db ) { if ( db instanceof com.google.gerrit.server.git.BatchUpdateReviewDb ) { db = ( ( com.google.gerrit.server.git.BatchUpdateReviewDb ) ( db ) ) . unsafeGetDelegate ( ) ; } return com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb ( db ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public void testGcAll ( ) throws com.jcraft.jsch.JSchException , java.io.IOException { java.lang.String response = sshSession.exec ( "gerrit gc --all" ) ; org.junit.Assert.assertFalse ( sshSession.hasError ( ) ) ; assertNoError ( response ) ; assertHasPackFile ( allProjects , project1 , project2 , project3 ) ; }
public void onSuccess ( final com.google.gerrit.client.data.AccountDashboardInfo r ) { if ( isAttached ( ) ) { display ( r ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
public org.eclipse.jgit.revwalk.RevCommit createRef ( java.lang.String refName ) { return null ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment ( java.lang.String name , java.io.InputStream in ) throws com.googlecode.prolog_cafe.exceptions.CompileException { com.googlecode.prolog_cafe.lang.PrologMachineCopy pmc = rulesCache.loadMachine ( name , in ) ; return envFactory.create ( pmc ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type ) ; }
public void put ( K key , V value ) { self.put ( new net.sf.ehcache.Element ( key , value ) ) ; }
public java.lang.String toString ( ) { return ( "index(" + ( source ) ) + ")" ; }
public com.google.common.collect.ImmutableMap < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , com.google.common.collect.ImmutableSet < com.google.gerrit.server.account.WatchConfig.NotifyType > > getProjectWatches ( ) { if ( ( projectWatches ) == null ) { parse ( ) ; } return projectWatches ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.query.change.ChangeData cd ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.lucene.QueryBuilder.ID_FIELD , cd.getId ( ) . get ( ) ) ; }
public java.util.Collection < com.google.gerrit.client.reviewdb.ProjectRight > getWildcardRights ( ) { return get ( ProjectRight.WILD_PROJECT ) . getRights ( ) ; }
public V get ( K key ) { com.google.gerrit.ehcache.SerializableProtobuf < V > val = cache.get ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) ) ; return val != null ? val.toObject ( valueCodec , valueProvider ) : null ; }
void setHideEmptyPane ( boolean hide ) { if ( ( changeType ) == ( com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED ) ) { setVisibleA ( ( ! hide ) ) ; } else if ( ( changeType ) == ( com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED ) ) { setVisibleB ( ( ! hide ) ) ; } }
public static boolean isRef ( java.lang.String name ) { return ( com.google.gerrit.reviewdb.client.PatchSet.Id.fromRef ( name ) ) != null ; }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; includeWatchers ( NotifyType.ABANDONED_CHANGES ) ; }
public void validateLocalDomain ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.mail.OutgoingEmailValidator.isValid ( "foo@bar.local" ) ) . isTrue ( ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm not ( ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , this ) ; }
public static com.google.gerrit.client.rpc.RestApi edit ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edits" ) . id ( "0" ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > owner ( java.lang.String owner ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.OWNER_UUID , GroupQueryBuilder.FIELD_OWNER , owner ) ; }
public void parseReviewer ( ) throws java.lang.Exception { assertParseSucceeds ( ( "Update change\n" + ( ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: Change Owner <1@gerrit>\n" ) + "CC: Other Account <2@gerrit>\n" ) ) ) ; assertParseFails ( ( "Update change\n" + ( ( "\n" + "Patch-Set: 1\n" ) + "Reviewer: 1@gerrit\n" ) ) ) ; }
public void testUnsetForwardedEvent ( ) throws java.lang.Exception { com.ericsson.gerrit.plugins.syncindex.Context.setForwardedEvent ( true ) ; com.ericsson.gerrit.plugins.syncindex.Context.unsetForwardedEvent ( ) ; com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.syncindex.Context.isForwardedEvent ( ) ) . isFalse ( ) ; }
public void addReviewerByEmailToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( email ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
boolean hasNext ( ) { return hasNext ; }
public com.google.gerrit.extensions.common.WebLinkInfo getPathSetWebLink ( java.lang.String projectName , java.lang.String commit ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProjectCommit , projectName , commit ) , Target.BLANK ) ; }
protected void onUnload ( ) { if ( ( recenter ) != null ) { com.google.gwt.user.client.Window.removeWindowResizeListener ( recenter ) ; recenter = null ; } super . onUnload ( ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply ( rsrc , new com.google.gerrit.gpg.server.DeleteGpgKey.Input ( ) ) ; } catch ( org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete GPG key" , e ) ; } }
private void setName ( boolean open ) { name.setInnerText ( ( open ? com.google.gerrit.client.change.Message.authorName ( info ) : com.google.gerrit.client.change.Message.elide ( com.google.gerrit.client.change.Message.authorName ( info ) , 20 ) ) ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change" , e ) ; } }
public void testNameEscaperDoesNotEscapeSlashes ( ) throws java.lang.Exception { assertEquals ( "foo/bar" , com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo/bar" ) ) ; }
public void testEvictGroupsOK ( ) throws java.lang.Exception { setupMocks ( Constants.GROUPS , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.ID_RESPONSE , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.GROUPS , createMock ( AccountGroup.Id.class ) ) ) . isTrue ( ) ; }
protected abstract T decode ( com.google.protobuf.CodedInputStream in ) ;
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { db.accountProjectWatches ( ) . update ( java.util.Collections.singleton ( watch ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
protected com.google.gerrit.client.account.ContactPanel create ( ) { return new com.google.gerrit.client.account.ContactPanel ( this ) ; }
public void isEnabledForAllRefsByDefault ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + "blockedFileExtension = jar" ) ) ; assertThat ( config.isEnabledForRef ( projectName , "anyRef" ) ) . isTrue ( ) ; }
private static boolean preferUnified ( ) { return DiffView.UNIFIED_DIFF.equals ( com.google.gerrit.client.Gerrit.getUserPreferences ( ) . diffView ( ) ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.Project project , java.lang.String hash , java.lang.String name , com.google.gerrit.server.git.GitRepositoryManager gitRepoManager ) { project.setRevision ( hash ) ; if ( ! ( org.eclipse.jgit.lib.ObjectId.isId ( name ) ) ) { project.setUpstream ( name ) ; } return true ; }
public static void doSignOut ( ) { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.AUTH_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenus ( ) ; }
public static < V > com.google.gerrit.server.index.Schema < V > schema ( com.google.gerrit.server.index.FieldDef < V , ? > ... fields ) { return com.google.gerrit.server.index.SchemaUtil.schema ( com.google.common.collect.ImmutableList.copyOf ( fields ) ) ; }
final void setRequireChangeId ( com.google.gerrit.reviewdb.client.Project.InheritableBoolean v ) { setRequireChangeIdRaw ( v.name ( ) ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { return controlFor ( project ) . isVisible ( ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return ( ! ( args.mergeUtil.hasMissingDependencies ( args.mergeSorter , toMerge ) ) ) && ( args.mergeUtil.canCherryPick ( args.mergeSorter , args.repo , mergeTip , args.rw , toMerge ) ) ; }
public void setUseContributorAgreements ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean u ) { useContributorAgreements = u ; }
public final native boolean hasVimSearchHighlight ( ) ;
public void hide ( final boolean autoClosed ) { impl.visible ( false ) ; super . hide ( autoClosed ) ; }
private void initDownloadAction ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { downloadAction = new com.google.gerrit.client.change.DownloadAction ( info.legacy_id ( ) , info.project ( ) , info.revision ( revision ) , style , headerLine , download ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; } }
private com.google.gerrit.server.git.MergeTip cherryPickUnbornRoot ( com.google.gerrit.server.git.CodeReviewCommit n ) { com.google.gerrit.server.git.MergeTip mergeTip = new com.google.gerrit.server.git.MergeTip ( n , com.google.common.collect.Lists.newArrayList ( n ) ) ; n.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; return mergeTip ; }
public java.lang.Object apply ( com.google.gerrit.server.change.DraftResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return new com.google.gerrit.server.change.GetDraft.Comment ( rsrc.getComment ( ) ) ; }
public void testStringNUL ( ) { com.google.gwtorm.nosql.IndexKeyBuilder ib = new com.google.gwtorm.nosql.IndexKeyBuilder ( ) ; ib.add ( " " ) ; com.google.gwtorm.nosql.IndexKeyBuilderTest.assertEquals ( new byte [ ] { 0 , ( ( byte ) ( 255 ) ) } , ib ) ; }
public boolean supportsCookies ( ) { return false ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo setPreferences ( com.google.gerrit.extensions.client.GeneralPreferencesInfo in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setPreferences.apply ( account , in ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set preferences" , e ) ; } }
public static org.eclipse.jgit.lib.Config noteDbEnabled ( ) { @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.setBoolean ( "notedb" , null , "write" , true ) ; cfg.setBoolean ( "notedb" , "comments" , "read" , true ) ; return cfg ; }
public boolean canForgeGerritServerIdentity ( ) { return canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.FORGE_IDENTITY , com.google.gerrit.reviewdb.ApprovalCategory.FORGE_SERVER ) ; }
public static java.lang.String toUnified ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , diffBase , revision , fileName , null , 0 ) ; }
private void addExternalId ( java.lang.String scheme , java.lang.String id , java.lang.String email ) throws java.lang.Exception { externalIdsUpdateFactory.create ( ) . insert ( db , com.google.gerrit.server.account.ExternalId.createWithEmail ( scheme , id , user.getAccountId ( ) , email ) ) ; reloadUser ( ) ; }
public void rebuildEmptySiteStartingWithNoteDbEnabled ( ) throws java.lang.Exception { initSite ( ) ; setNotesMigrationState ( NotesMigrationState.NOTE_DB_UNFUSED ) ; com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "RebuildNoteDb" , "-d" , sitePath , "--show-stack-trace" ) ; }
public final native net.codemirror.lib.CodeMirror.LineHandle getActiveLine ( ) ;
public static < T > com.google.inject.binder.LinkedBindingBuilder < T > bind ( com.google.inject.Binder binder , com.google.inject.TypeLiteral < T > type ) { return binder.bind ( type ) . annotatedWith ( com.google.inject.internal.UniqueAnnotations.create ( ) ) ; }
void expandAll ( ) { clearMarkerAndWidget ( ) ; removeFromParent ( ) ; }
public java.net.SocketAddress get ( ) { return session.getRemoteAddress ( ) ; }
private void initDownloadAction ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { downloadAction = new com.google.gerrit.client.change.DownloadAction ( info , revision , style , headerLine , download ) ; }
protected static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments args , com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) { if ( ! ( args.allowsDrafts ) ) { return com.google.gerrit.server.query.Predicate.and ( p , com.google.gerrit.server.query.Predicate.not ( new com.google.gerrit.server.query.change.ChangeStatusPredicate ( Change.Status.DRAFT ) ) ) ; } return p ; }
public void onWindowResized ( final int width , final int height ) { onResize ( width , height ) ; }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction ( id , result , path , style.replyBox ( ) , null , icon ) ; edit.onEdit ( ) ; }
public boolean isVisible ( ) { if ( ( isVisible ) == null ) { isVisible = ( ( ( getCurrentUser ( ) ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerform ( Permission.READ ) ) ) && ( canRead ( ) ) ; } return isVisible ; }
private com.google.gerrit.client.patches.CommentEditorPanel createEditor ( final com.google.gerrit.reviewdb.client.PatchLineComment newComment ) { int row = rowOf ( getElement ( ) ) ; int column = columnOf ( getElement ( ) ) ; return createCommentEditor ( ( row + 1 ) , column , newComment ) ; }
public boolean supportsCredentialChanges ( ) { return false ; }
public com.google.template.soy.data.SanitizedContent toSoyHtml ( org.pegdown.ast.RootNode node ) { if ( node == null ) { return null ; } toc.setRoot ( node ) ; node.accept ( this ) ; return html.toSoy ( ) ; }
protected void configure ( ) { persist ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE , com.google.gerrit.reviewdb.client.Project.NameKey.class , java.util.concurrent.atomic.AtomicLong.class ) . loader ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class ) . expireAfterWrite ( 1 , java.util.concurrent.TimeUnit.DAYS ) ; bind ( com.googlesource.gerrit.plugins.quota.RepoSizeCache.class ) . to ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.class ) ; }
private void verifyDelete ( ) throws java.io.IOException , javax.servlet.ServletException { syncIndexRestApiServlet.doDelete ( req , rsp ) ; verifyAll ( ) ; }
public boolean nameIsId ( ) { return ( org.eclipse.jgit.lib.AbbreviatedObjectId.isId ( name ) ) && ( ( org.eclipse.jgit.lib.AbbreviatedObjectId.fromString ( name ) . prefixCompare ( id ) ) == 0 ) ; }
public void insert ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Account account ) throws com.google.gwtorm.server.OrmException { db.accounts ( ) . insert ( com.google.common.collect.ImmutableSet.of ( account ) ) ; }
public void abandonReviewableChangeByOtherCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( other ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
protected void configureCommands ( ) { command ( com.googlesource.gerrit.plugins.forcedraft.ForceDraft.class ) ; }
public boolean isVisible ( ) { return ( ( user.isInternalUser ( ) ) || ( canPerformOnAnyRef ( Permission.READ ) ) ) && ( ! ( isHidden ( ) ) ) ; }
public static com.google.gerrit.server.git.ProjectConfig read ( com.google.gerrit.server.git.MetaDataUpdate update ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.ProjectConfig r = new com.google.gerrit.server.git.ProjectConfig ( update.getProjectName ( ) ) ; r.load ( update ) ; return r ; }
public void setTimeForTesting ( ) { systemTimeZone = java.lang.System.setProperty ( "user.timezone" , "US/Eastern" ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > list ) { for ( final com.google.gerrit.reviewdb.client.Account.Id id : list ) { add ( rt , id ) ; } }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( isAdmin ( ) ) ; }
private static java.lang.UnsupportedOperationException noInterpreter ( java.lang.Throwable why ) { final java.lang.String msg = "Cannot create Python interpreter" ; return com.google.gerrit.pgm.shell.JythonShell.noShell ( msg , why ) ; }
private void checkPreconditions ( javax.servlet.http.HttpServletRequest req , com.google.gerrit.extensions.restapi.RestResource rsrc ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { if ( "*" . equals ( req.getHeader ( "If-None-Match" ) ) ) { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( ) ; } }
public java.lang.String getToken ( ) { return isSignedIn ( ) ? val.getXsrfToken ( ) : null ; }
private static void checkRequiredMenuItemField ( java.lang.String value , java.lang.String name ) throws com.google.gerrit.extensions.restapi.BadRequestException { if ( com.google.gerrit.server.account.PreferencesConfig.isNullOrEmpty ( value ) ) { throw new com.google.gerrit.extensions.restapi.BadRequestException ( ( name + " for menu item is required" ) ) ; } }
public int getContext ( ) { return settings.getContext ( ) ; }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > release ( com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > ... fields ) { return new com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > ( true , java.util.Arrays.asList ( fields ) ) ; }
public java.lang.String apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException { com.google.gerrit.common.data.GroupDescription.Internal group = resource.asInternalGroup ( ) . orElseThrow ( MethodNotAllowedException :: new ) ; return com.google.common.base.Strings.nullToEmpty ( group.getDescription ( ) ) ; }
private void appendLineText ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m , final int lineNumberMinusOne , final com.google.gerrit.client.patches.PatchLine.Type type , final com.google.gerrit.prettify.common.SparseHtmlFile src , final int i ) { appendLineText ( m , lineNumberMinusOne , type , src.getSafeHtmlLine ( i ) ) ; }
public static java.lang.String toChange ( com.google.gerrit.reviewdb.client.Change.Id c , java.lang.String p ) { return ( ( "/c/" + c ) + "/" ) + p ; }
public void onSubmit ( final com.google.gwt.user.client.ui.FormPanel.SubmitEvent event ) { event.cancel ( ) ; final java.lang.String addr = inEmail.getText ( ) . trim ( ) ; if ( ! ( addr.contains ( "@" ) ) ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidUserEmail ( ) ) . center ( ) ; return ; } inEmail.setEnabled ( false ) ; register.setEnabled ( false ) ; Util.ACCOUNT_SEC.registerEmail ( addr , new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.reviewdb.client.Account > ( ) { public void onSuccess ( com.google.gerrit.reviewdb.client.Account currentUser ) { box.hide ( ) ; if ( ( com.google.gerrit.client.Gerrit.getConfig ( ) . getAuthType ( ) ) == ( com.google.gerrit.reviewdb.client.AuthType.DEVELOPMENT_BECOME_ANY_ACCOUNT ) ) { currentEmail = addr ; if ( ( emailPick.getItemCount ( ) ) == 0 ) { onSaveSuccess ( currentUser ) ; } else { save.setEnabled ( true ) ; } updateEmailList ( ) ; } } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { inEmail.setEnabled ( true ) ; register.setEnabled ( true ) ; if ( caught.getMessage ( ) . startsWith ( EmailException.MESSAGE ) ) { final com.google.gerrit.client.ErrorDialog d = new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) . substring ( EmailException.MESSAGE.length ( ) ) ) ; d.setText ( Util.C.errorDialogTitleRegisterNewEmail ( ) ) ; d.center ( ) ; } else { super . onFailure ( caught ) ; } } } ) ; }
public org.parboiled.Rule [ ] blockPluginRules ( ) { return new org.parboiled.Rule [ ] { toc ( ) , note ( ) } ; }
public boolean canInheritFromWildProject ( ) { if ( com.google.gerrit.reviewdb.ApprovalCategory.OWN.equals ( this ) ) { return false ; } return true ; }
public com.google.gerrit.server.project.ChangeControl getUserControl ( ) { return getControl ( ) . forUser ( user ) ; }
public void stop ( ) { running = false ; int discarded = config.shutdown ( ) ; if ( discarded > 0 ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn ( java.lang.String.format ( "Canceled %d replication events during shutdown" , discarded ) ) ; } }
private void readObject ( final java.io.ObjectInputStream in ) throws java.io.IOException { token = in.readUTF ( ) ; }
public final native void setActiveLine ( int line ) ;
public final com.google.gerrit.server.index.Schema < V > get ( int version ) { com.google.gerrit.server.index.Schema < V > schema = schemas.get ( version ) ; com.google.common.base.Preconditions.checkArgument ( ( schema != null ) , "Unrecognized %s schema version: %s" , name , version ) ; return schema ; }
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; manager.start ( ) ; }
private boolean isInteralGroup ( final com.google.gerrit.client.groups.GroupInfo groupInfo ) { return ( groupInfo != null ) && ( groupInfo.url ( ) . startsWith ( ( "#" + ( com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) ) ) ) ; }
final native void add_branch ( java.lang.String b ) ;
public com.google.gerrit.client.reviewdb.AccountAgreement.Status getStatus ( ) { return com.google.gerrit.client.reviewdb.AccountAgreement.Status.forCode ( status ) ; }
public boolean getBoolean ( java.lang.String name , boolean defaultValue ) { return getValue ( name , new com.google.common.base.Function < java.lang.String , java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean apply ( java.lang.String stringVal ) { return java.lang.Boolean.parseBoolean ( stringVal ) ; } } , defaultValue ) ; }
public static java.lang.String toAccountQuery ( final java.lang.String fullname ) { java.lang.String query = ( com.google.gerrit.common.PageLinks.op ( "owner" , fullname ) ) + " status:open" ; return com.google.gerrit.common.PageLinks.toChangeQuery ( query , com.google.gerrit.common.PageLinks.TOP ) ; }
public com.google.gerrit.metrics.Counter newCounter ( java.lang.String name , com.google.gerrit.metrics.Description desc ) { com.google.gerrit.metrics.Counter m = root.newCounter ( ( ( prefix ) + name ) , desc ) ; cleanup.add ( m ) ; return m ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSetApproval > byPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void run ( ) { java.lang.String token = host.getToken ( ) ; if ( cm.hasActiveLine ( ) ) { net.codemirror.lib.CodeMirror.LineHandle handle = cm.activeLine ( ) ; int line = ( cm.getLineNumber ( handle ) ) + 1 ; token += ( "@" + ( ( cm.side ( ) ) == ( DisplaySide.A ) ? "a" : "" ) ) + line ; } com.google.gerrit.client.Gerrit.doSignIn ( token ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.ServiceUserInfo info ) { display ( info ) ; }
public void sendAsync ( ) { sendEmailsExecutor.submit ( this ) ; }
public void close ( ) { if ( closeRepo ) { revWalk.close ( ) ; inserter.close ( ) ; repo.close ( ) ; } }
public boolean isSubmit ( ) { return com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId.SUBMIT.get ( ) . equals ( getLabelId ( ) . get ( ) ) ; }
public static void deleteChange ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . delete ( cb ) ; }
public void testRightEventBitItIsForwarded ( ) throws java.lang.Exception { setUpMocks ( false , true ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; verifyAll ( ) ; }
public abstract void renameColumn ( java.sql.Statement stmt , java.lang.String tableName , java.lang.String fromColumn , com.google.gwtorm.schema.ColumnModel col ) throws java.sql.SQLException ;
public java.util.List < com.google.gerrit.server.patch.PatchListEntry > getPatches ( ) { return java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( patches ) ) ; }
public void setMinusOne ( java.lang.String project , int number , java.lang.String commentTemplate ) throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ReviewInput message = createComment ( commentTemplate ) . label ( "Code-Review" , ( - 1 ) ) ; applyComment ( project , number , message ) ; }
private static boolean isEncodedBase64 ( com.google.gwt.http.client.Response res ) { return ( "base64" . equals ( res.getHeader ( "X-FYI-Content-Encoding" ) ) ) && ( com.google.gerrit.client.rpc.RestApi.isTextBody ( res ) ) ; }
public void invalidGitUrlLink ( ) throws java.lang.Exception { repo.branch ( "master" ) . commit ( ) . add ( "README.md" , "[c](git://example.com/repo/..)" ) . create ( ) ; java.lang.String html = buildHtml ( "/repo/+doc/master/README.md" ) ; com.google.common.truth.Truth.assertThat ( html ) . contains ( "<a href=\"#zSoyz\">c</a>" ) ; }
public static void createEdit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "create_edit" ) . post ( com.google.gwt.core.client.JavaScriptObject.createObject ( ) , cb ) ; }
com.google.gerrit.server.project.ChangeControl forUser ( com.google.gerrit.server.CurrentUser who ) { if ( getUser ( ) . equals ( who ) ) { return this ; } return new com.google.gerrit.server.project.ChangeControl ( changeDataFactory , approvalsUtil , getRefControl ( ) . forUser ( who ) , notes , patchSetUtil ) ; }
public void testPushDraftChangeMagic_Blocked ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master%draft" ) ; r.assertErrorStatus ( "cannot upload drafts" ) ; }
boolean hasNext ( ) { return hasNext ; }
public java.lang.String apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup ( ) ; if ( group == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } return com.google.common.base.Strings.nullToEmpty ( group.getDescription ( ) ) ; }
protected static java.io.Writer newWriter ( java.io.OutputStream os , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { return new java.io.OutputStreamWriter ( os , res.getCharacterEncoding ( ) ) ; }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user instanceof com.google.gerrit.server.IdentifiedUser ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) . toString ( ) ; } return user.toString ( ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( key , value , granted ) ; }
private void setRefLogIdent ( final com.google.gerrit.client.reviewdb.ChangeApproval submitAudit ) { if ( submitAudit != null ) { branchUpdate.setRefLogIdent ( identifiedUserFactory.create ( submitAudit.getAccountId ( ) ) . newPersonIdent ( ) ) ; } }
void changeSshUserName ( java.lang.String newName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
private void assertCreateFails ( com.google.gerrit.extensions.common.ChangeInfo in , java.lang.Class < ? extends com.google.gerrit.extensions.restapi.RestApiException > errType , java.lang.String errSubstring ) throws java.lang.Exception { exception.expect ( errType ) ; exception.expectMessage ( errSubstring ) ; gApi.changes ( ) . create ( in ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.client.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( systemConfig , null , null , id ) ; }
public void reindexEmptySiteWithRecheckMergeable ( ) throws java.lang.Exception { initSite ( ) ; com.google.gerrit.acceptance.pgm.ReindexIT.runGerrit ( "reindex" , "-d" , sitePath.toString ( ) , "--show-stack-trace" , "--recheck-mergeable" ) ; }
public WorkQueue.Executor createEmailReviewCommentsExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "sendemail" , null , "threadPoolSize" , 1 ) ; return queues.createQueue ( poolSize , "EmailReviewComments" ) ; }
public com.google.gerrit.common.data.LabelType byId ( java.lang.String id ) { return byId ( ) . get ( id ) ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.reviewdb.client.Change.Id id ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.lucene.QueryBuilder.ID_FIELD , id.get ( ) ) ; }
public java.lang.String getPluginName ( java.io.File srcFile ) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull ( getGerritPluginName ( srcFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcFile ) ) ; }
public void write ( int c ) throws java.io.IOException { osWriter.write ( c ) ; osWriter.flush ( ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { return new com.google.gerrit.server.notedb.ChangeNotesParser ( newChange ( ) . getId ( ) , tip , walk , noteUtil , args.metrics ) ; }
private boolean sshEnabled ( ) { return downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.SSH ) ; }
private void postInitPlugins ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.InitStep initStep : pluginLoader.getInitSteps ( ) ) { initStep.postRun ( ) ; } }
public void remove ( K key ) { self.remove ( key ) ; }
public void noNotificationForChangeThatIsTurnedPrivateForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; BRANCH ( efc835 ) ; com.google.gerrit.acceptance.server.project.Fix notifications ; com.google.gerrit.acceptance.server.project.comments on ; com.google.gerrit.acceptance.server.project.patch sets ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%private" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHContent getReadme ( ) throws java.lang.Exception { return ghRepository.getReadme ( ) ; }
public void tearDown ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return user ; }
public static final void uploadImage ( java.lang.String imageData , java.lang.String fileName ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploader.uploadImage ( "All-Projects" , imageData , fileName ) ; }
public com.googlesource.gerrit.plugins.lfs.LfsBackend getBackend ( ) { return cfg.getEnum ( "storage" , null , "backend" , LfsBackend.FS ) ; }
public void deleteGroups ( java.lang.String ... groups ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteGroups.apply ( rsrc , AddIncludedGroups.Input.fromGroups ( java.util.Arrays.asList ( groups ) ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete group members" , e ) ; } }
public int hashCode ( ) { return java.util.Objects.hash ( change.getId ( ) , changeMessages.keySet ( ) , patchSets.keySet ( ) , patchSetApprovals.keySet ( ) , patchLineComments.keySet ( ) ) ; }
public void matchesEmailDomain ( ) throws java.lang.Exception { com.google.gitiles.IdentRevFilter filter = com.google.gitiles.IdentRevFilter.author ( "eSt" ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "null@eSt.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "null@eStablish.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "null@teSt.com" ) ) ) ; org.junit.Assert.assertTrue ( filter.matchesPerson ( new org.eclipse.jgit.lib.PersonIdent ( "null" , "null@teSting.com" ) ) ) ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( conflictingChangesTab ) == null ) { conflictingChangesTab = createTab ( Resources.C.conflictingChanges ( ) , Resources.C.conflictingChangesTooltip ( ) ) ; conflictingChangesTab.registerKeys ( ) ; } return conflictingChangesTab ; }
public com.google.gerrit.server.query.Predicate < T > parse ( final java.lang.String query ) throws com.google.gerrit.server.query.QueryParseException { return toPredicate ( com.google.gerrit.server.query.QueryParser.parse ( query ) ) ; }
protected void formatChange ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "Merged" ) ) ; }
private boolean isProjectStatePermittingRead ( ) { return ( getProjectControl ( ) . getProject ( ) . getState ( ) . equals ( ProjectState.READ_ONLY ) ) || ( isProjectStatePermittingWrite ( ) ) ; }
public Response.Action getDownloadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getDownloadAction ( id ) ; com.googlesource.gerrit.plugins.lfs.LfsAuthTokenHandler.Token token = authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.DOWNLOAD , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.ExpiringAction ( action.href , token ) ; }
private static < T > com.google.gwtorm.jdbc.gen.GeneratedClassLoader newLoader ( final java.lang.Class < T > type ) { return new com.google.gwtorm.jdbc.gen.GeneratedClassLoader ( type.getClassLoader ( ) ) ; }
private final native void setThemeRaw ( java.lang.String i ) ;
private static com.google.gerrit.server.query.change.ChangeData change ( java.lang.String ... files ) { java.util.Arrays.sort ( files ) ; com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData ( new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) ) ; cd.setCurrentFilePaths ( files ) ; return cd ; }
public Response.Action getUploadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id , long size ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getUploadAction ( id , size ) ; com.googlesource.gerrit.plugins.lfs.LfsAuthTokenHandler.Token token = authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.UPLOAD , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.ExpiringAction ( action.href , token ) ; }
void onMatchBrackets ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.matchBrackets ( e.getValue ( ) ) ; if ( ( view ) != null ) { view.getEditor ( ) . setOption ( "matchBrackets" , prefs.matchBrackets ( ) ) ; } }
protected java.util.Set < com.google.gerrit.reviewdb.AccountGroup.Id > missing ( final java.lang.String key ) { return java.util.Collections.emptySet ( ) ; }
public void testOwnerGroupsWhenNotConfigured ( ) { com.google.common.truth.Truth.assertThat ( repoCfg.getOwnerGroups ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "someProject" ) ) ) . isEqualTo ( new java.lang.String [ ] { } ) ; }
private void failAndThrow ( com.google.gerrit.reviewdb.client.Change change , java.lang.RuntimeException e ) { fail ( change , e ) ; throw e ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > allApprovals ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.ImmutableList.copyOf ( allApprovalsMap ( db ) . values ( ) ) ; }
protected static com.google.gerrit.server.query.change.ChangeData newChangeData ( com.google.gerrit.server.mail.EmailArguments ea , com.google.gerrit.reviewdb.client.Change.Id id ) { return ea.changeDataFactory.create ( ea.db.get ( ) , id ) ; }
private static void initDisableUnwantedKeys ( ) { for ( java.lang.String s : new java.lang.String [ ] { "C" , "J" , "K" , "O" , "R" , "U" , "Ctrl-C" , "Enter" } ) { net.codemirror.lib.CodeMirror.disableUnwantedKey ( "vim" , s ) ; } }
public java.util.List < com.google.gerrit.common.data.SubmitRecord > getSubmitRecords ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return canSubmit ( db , patchSet , null , false , true ) ; }
public void resetDomainValidator ( ) throws java.lang.Exception { java.lang.Class < ? > c = java.lang.Class.forName ( "org.apache.commons.validator.routines.DomainValidator" ) ; java.lang.reflect.Field f = c.getDeclaredField ( "inUse" ) ; f.setAccessible ( true ) ; f.setBoolean ( c , false ) ; }
protected static java.lang.String padTwo ( final int v ) { if ( v < 10 ) { return "0" + v ; } else { return java.lang.String.valueOf ( v ) ; } }
private org.eclipse.jgit.revwalk.RevWalk getRevWalk ( ) throws java.io.IOException { initRepository ( ) ; return revWalk ; }
void setLimit ( int n ) { if ( n < 0 ) { limit = 10 ; } else if ( n == 0 ) { limit = com.google.gerrit.server.account.SuggestAccounts.MAX_RESULTS ; } else { limit = java.lang.Math.min ( n , com.google.gerrit.server.account.SuggestAccounts.MAX_RESULTS ) ; } }
private GitilesView.Builder parseNoCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) { return com.google.gitiles.GitilesView.repositoryIndex ( ) . setRepositoryName ( repoName ) ; }
public static com.google.gerrit.client.DiffObject autoMerge ( ) { return new com.google.gerrit.client.DiffObject ( null ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.change.ChangeIndexer.IndexTask ( project , id ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
protected void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.Account.Id to ) { if ( ( ! ( emailOnlyAuthors ) ) || ( authors.contains ( to ) ) ) { super . add ( rt , to ) ; } }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.notedb.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ApprovalsUtil.getReviewers ( allApprovals ( ) ) ; }
protected java.lang.String getCoverLetter ( ) { if ( ( changeMessage ) != null ) { final java.lang.String txt = changeMessage.getMessage ( ) ; if ( txt != null ) { return txt.trim ( ) ; } } return "" ; }
private org.eclipse.jgit.lib.PersonIdent getSubmitterIdent ( ) { org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get ( ) ; return args.caller.newCommitterIdent ( serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ; }
public void testCreateProjectWithNameMismatch_BadRequest ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "otherName" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/someName" , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_BAD_REQUEST , r.getStatusCode ( ) ) ; }
public static com.google.gerrit.server.account.externalids.ExternalId createWithEmail ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings.emptyToNull ( email ) , null ) ; }
private java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > listRemote ( org.eclipse.jgit.transport.Transport tn ) throws org.eclipse.jgit.errors.NotSupportedException , org.eclipse.jgit.errors.TransportException { org.eclipse.jgit.transport.FetchConnection fc = tn.openFetch ( ) ; try { return fc.getRefsMap ( ) ; } finally { fc.close ( ) ; } }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , false , expectedStatus ) ; }
public void onFailure ( final java.lang.Throwable caught ) { enableButtons ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) . center ( ) ; }
private static final native void init ( java.lang.String d , java.lang.String e , java.lang.String r , java.lang.String o ) ;
public void parseInvalidNotifyValue ( ) { com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* [] illegal-characters-at-the-end" ) ; com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* [INVALID]" ) ; com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* [ALL_COMMENTS, UNKNOWN]" ) ; com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* [ALL_COMMENTS NEW_CHANGES]" ) ; com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* [ALL_COMMENTS, NEW_CHANGES" ) ; com.google.gerrit.server.account.WatchConfigTest.assertParseNotifyValueFails ( "* ALL_COMMENTS, NEW_CHANGES]" ) ; }
private static void assertDeleted ( java.lang.String expectedNewName , com.google.gerrit.server.patch.PatchListEntry e ) { com.google.gerrit.acceptance.server.change.PatchListCacheIT.assertName ( expectedNewName , e ) ; org.junit.Assert.assertEquals ( ChangeType.DELETED , e.getChangeType ( ) ) ; }
void unstarChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public java.util.List < com.google.gerrit.server.git.ValidationError > getValidationErrors ( ) { if ( ( validationErrors ) != null ) { return java.util.Collections.unmodifiableList ( validationErrors ) ; } else { return java.util.Collections.emptyList ( ) ; } }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; return update ; }
public void asyncExec ( final java.lang.Runnable task ) { executor.schedule ( task , 0 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > delete ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.DELETE , "/" ) ) ; }
protected abstract com.google.inject.Injector createInjector ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) ;
public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.parent = "non-existing-project" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/child" , in ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_UNPROCESSABLE_ENTITY , r.getStatusCode ( ) ) ; }
protected com.google.gerrit.acceptance.RestResponse execute ( org.apache.http.client.fluent.Request request ) throws java.io.IOException { return new com.google.gerrit.acceptance.RestResponse ( executor.execute ( request ) . returnResponse ( ) ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { return org.kohsuke.github.GitHub.connectUsingOAuth ( config.gitHubApiUrl , token.accessToken ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = createBareRepository ( ) ; util = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.lib.Repository > ( db ) ; }
public boolean apply ( K in ) { com.google.gerrit.reviewdb.client.PatchSet.Id psId = func.apply ( in ) ; return ( upToCurrent.apply ( psId ) ) && ( patchSets.containsKey ( psId ) ) ; }
protected void configureServlets ( ) { serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.ldap.LoginRedirectServlet.class ) ; install ( new com.google.gerrit.httpd.rpc.RpcServletModule ( com.google.gerrit.httpd.rpc.UiRpcModule.PREFIX ) { @ java.lang.Override protected void configureServlets ( ) { rpc ( com.google.gerrit.httpd.auth.ldap.UserPassAuthServiceImpl.class ) ; } } ) ; }
public void setFieldReference ( final com.google.gwtorm.schema.ColumnModel cm , boolean incr ) { col = cm ; if ( incr ) { ( columnIdx ) ++ ; } }
public static java.lang.String getPluginName ( java.io.File srcFile ) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull ( com.google.gerrit.server.plugins.PluginLoader.getGerritPluginName ( srcFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcFile ) ) . toLowerCase ( ) ; }
public static void addOptions ( com.google.gerrit.client.rpc.RestApi call , java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > s ) { call.addParameterRaw ( "O" , java.lang.Integer.toHexString ( com.google.gerrit.extensions.client.ListChangesOption.toBits ( s ) ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { if ( screen.isCurrentView ( ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; } }
public void testCreateGroupWithoutCapability_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( server , user ) . put ( "/groups/newGroup" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
public java.util.List < com.google.gitiles.blame.Region > load ( com.google.gitiles.blame.BlameCacheImpl.Key key ) throws java.io.IOException { return loadBlame ( key ) ; }
private com.google.gerrit.server.account.AuthResult auth ( final com.google.gerrit.reviewdb.client.AccountExternalId account ) { if ( account != null ) { return new com.google.gerrit.server.account.AuthResult ( account.getAccountId ( ) , null , false ) ; } return null ; }
protected void assertBadQuery ( java.lang.Object query ) throws java.lang.Exception { try { newQuery ( query ) . get ( ) ; org.junit.Assert.fail ( ( "expected BadRequestException for query: " + query ) ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) { } }
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( com.google.gerrit.reviewdb.client.Account.Id id ) { return asAccountAttribute ( accountCache.get ( id ) . getAccount ( ) ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( RegisterNewEmailSender.Factory.class ) ; }
public java.lang.String getHttpUrl ( com.google.gerrit.acceptance.GerritServer server ) { java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; b.append ( "http://" ) ; b.append ( username ) ; b.append ( ":" ) ; b.append ( httpPassword ) ; b.append ( ( "@localhost:" + ( server.getHttpPort ( ) ) ) ) ; return b.toString ( ) ; }
public java.util.concurrent.atomic.AtomicLong load ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository git = gitManager.openRepository ( project ) ; try { return new java.util.concurrent.atomic.AtomicLong ( com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.getDiskUsage ( git.getDirectory ( ) ) ) ; } finally { git.close ( ) ; } }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE_DRAFTS , true ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.IndexTask ( id ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void listEmptyGroupMembers ( ) throws java.lang.Exception { group ( "empty" , "Administrators" ) ; org.junit.Assert.assertTrue ( GET ( "/groups/empty/members/" ) . isEmpty ( ) ) ; }
private void hookDoesNotModify ( final java.lang.String in ) throws java.lang.Exception { assertEquals ( in , call ( in ) ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( id ) ; return result ; }
private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableChange ( ) throws java.lang.Exception { return stageChange ( this :: stageReviewableChange ) ; }
static void deleteEdit ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... editButtons ) { com.google.gerrit.client.changes.ChangeApi.deleteEdit ( id.get ( ) , com.google.gerrit.client.change.EditActions.cs ( id , editButtons ) ) ; }
public java.lang.String getAuthorizationUrl ( ) { return oauth.getAuthorizationUrl ( oauth.getScope ( com.google.common.collect.Sets.newHashSet ( config.getDefaultScopes ( ) ) ) , null ) ; }
com.google.gerrit.server.mail.send.AddReviewerSender create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.extensions.api.changes.NotifyHandling notify ) ;
public com.google.gerrit.common.data.GroupList get ( ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException { final java.lang.Iterable < com.google.gerrit.reviewdb.client.AccountGroup > groups = groupCache.all ( ) ; return createGroupList ( filterGroups ( groups ) ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm or ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , this ) ; }
protected void configure ( ) { factory ( AddReviewer.Factory.class ) ; factory ( CommentDetailFactory.Factory.class ) ; factory ( PatchScriptFactory.Factory.class ) ; factory ( SaveDraft.Factory.class ) ; }
public static com.google.gerrit.client.reviewdb.SystemConfig create ( ) { final com.google.gerrit.client.reviewdb.SystemConfig r = new com.google.gerrit.client.reviewdb.SystemConfig ( ) ; r.singleton = new com.google.gerrit.client.reviewdb.SystemConfig.Key ( ) ; r.maxSessionAge = ( 12 * 60 ) * 60 ; return r ; }
public com.google.gerrit.server.project.ListProjects setFormat ( com.google.gerrit.server.OutputFormat fmt ) { this . format = fmt ; return this ; }
protected abstract com.google.gerrit.client.patches.PatchScreen.Type getPatchScreenType ( ) ;
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { switch ( event.getCharCode ( ) ) { case com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER : doSearch ( ) ; break ; case com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE : searchBox.setText ( "" ) ; searchBox.setFocus ( false ) ; break ; } }
public static void get ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfoCache.Entry > cb ) { com.google.gerrit.client.projects.ConfigInfoCache.instance.getImpl ( name , cb ) ; }
public static void updated ( final com.google.gerrit.reviewdb.Change c ) { c.resetLastUpdatedOn ( ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( c ) ; }
java.lang.String delete ( ) ;
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "edit" , null , revision , fileName , null , 0 ) ; }
public boolean isGenericAddress ( com.google.gerrit.reviewdb.Account.Id fromId ) { return ( from ( fromId ) ) != ( srvAddr ) ; }
java.lang.String patchWindowTitle ( int id , java.lang.String file ) ;
public com.google.gerrit.server.notedb.ChangeNotes createForBatchUpdate ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load ( ) ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getUpdate ( ) . setTopic ( magicBranch.topic ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForCommit ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { return newChange ( repo , commit , null , null , null , null ) ; }
public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "newProjectName" ; in.parent = "non-existing-project" ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.UnprocessableEntityException.class ) ; }
public void execute ( com.google.gerrit.server.update.BatchUpdateListener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
void downloadOptional ( ) { this . required = false ; download ( ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { if ( screen.isCurrentView ( ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId ) ) ; } }
public void setSHA1 ( final java.lang.String sha1 ) { this . sha1 = sha1 ; }
public static void comments ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "comments" ) . get ( cb ) ; }
private java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupsOf ( com.google.gerrit.reviewdb.client.Account account ) { return userFactory.create ( account.getId ( ) ) . getEffectiveGroups ( ) . getKnownGroups ( ) ; }
private com.google.common.collect.SetMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.server.index.RefState > parseStates ( com.google.gerrit.server.query.change.ChangeData cd ) { return parseStates ( cd.getRefStates ( ) ) ; }
public java.util.List < com.google.gerrit.common.data.SubmitRecord > canSubmit ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return canSubmit ( db , patchSet , null , false , false ) ; }
public com.google.gerrit.server.ReviewerSet reviewers ( ) throws com.google.gwtorm.server.OrmException { return approvalsUtil.getReviewers ( notes ( ) , approvals ( ) . values ( ) ) ; }
protected void onCellSingleClick ( int row , int column ) { if ( ( com.google.gerrit.client.ui.NavigationTable.getRowItem ( row ) ) != null ) { movePointerTo ( row ) ; } }
public com.google.gerrit.server.project.ProjectState getParentState ( ) { if ( isAllProjects ) { return null ; } com.google.gerrit.reviewdb.Project.NameKey parentName = getProject ( ) . getParent ( ) ; if ( parentName == null ) { parentName = allProjectsName ; } return projectCache.get ( parentName ) ; }
private void clear ( ) { body.clear ( ) ; patchSetPanels.clear ( ) ; setRegisterKeys ( false ) ; }
static com.google.gerrit.server.query.change.ChangeData createForTest ( com.google.gerrit.reviewdb.client.Change.Id id ) { return new com.google.gerrit.server.query.change.ChangeData ( null , null , null , null , null , null , id ) ; }
private com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context newRequestContext ( com.google.gerrit.acceptance.TestAccount account ) { return atrScope.newContext ( reviewDbProvider , new com.google.gerrit.acceptance.SshSession ( server , admin ) , identifiedUserFactory.create ( com.google.inject.util.Providers.of ( db ) , account.getId ( ) ) ) ; }
private java.util.Map < java.lang.String , com.google.gitiles.RefServlet.RefJsonData > buildRefJson ( java.lang.String path ) throws java.lang.Exception { return buildJson ( path , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , com.google.gitiles.RefServlet.RefJsonData > > ( ) { } ) ; }
private void display ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { table.setAccountInfoCache ( result.getAccounts ( ) ) ; drafts.display ( result.getChanges ( ) ) ; table.finishDisplay ( true ) ; }
void message ( java.lang.String msg ) ;
public static final void uploadImage ( java.lang.String imageData ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploader.uploadImage ( "All-Projects" , imageData ) ; }
public void suggestReviewersMaxNbrSuggestions ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "user" , 5 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 2 ) ; }
private javax.servlet.http.Cookie getGerritCookie ( javax.servlet.http.HttpServletRequest httpRequest ) { for ( javax.servlet.http.Cookie cookie : httpRequest.getCookies ( ) ) { if ( cookie.getName ( ) . equalsIgnoreCase ( com.googlesource.gerrit.plugins.github.oauth.OAuthFilter.GERRIT_COOKIE_NAME ) ) { return cookie ; } } return null ; }
public com.google.gerrit.server.notedb.ChangeNotes getNotes ( ) { return notes ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeList result ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeList > wrapped = com.google.gwt.core.client.JsArray.createArray ( 1 ) . cast ( ) ; wrapped.push ( result ) ; callback.onSuccess ( wrapped ) ; }
boolean canPerform ( java.lang.String permissionName ) { return doCanPerform ( permissionName , false ) ; }
com.google.gerrit.client.reviewdb.Project byId ( com.google.gerrit.client.reviewdb.Project.Id id ) throws com.google.gwtorm.client.OrmException ;
private static com.google.gerrit.client.rpc.RestApi change ( int id ) { return new com.google.gerrit.client.rpc.RestApi ( "/changes/" ) . id ( java.lang.String.valueOf ( id ) ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . addParameterTrue ( "all" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
private boolean canRead ( org.eclipse.jgit.lib.ObjectId revId ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit ( revId ) ; return projectControl.canReadCommit ( db.get ( ) , rw , commit ) ; } }
private void autoReindexIfStale ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { autoReindexIfStale ( cd.project ( ) , cd.getId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
boolean isLoggedIn ( ) { return tokenCache.has ( user ) ; }
private org.eclipse.jgit.lib.PersonIdent newRefLogIdent ( ) { com.google.gerrit.server.CurrentUser u = user.get ( ) ; if ( u.isIdentifiedUser ( ) ) { return u.asIdentifiedUser ( ) . newRefLogIdent ( ) ; } else { return serverIdent.get ( ) ; } }
private java.lang.String trimUpToChar ( java.lang.String string , char ch ) { if ( ( string.indexOf ( ch ) ) >= 0 ) { string = string.substring ( 0 , string.indexOf ( ch ) ) ; } return string ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "edit" , com.google.gerrit.client.DiffObject.base ( ) , revision , fileName , null , line ) ; }
void onRenderEntireFile ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.renderEntireFile ( e.getValue ( ) ) ; view.updateRenderEntireFile ( ) ; }
public com.google.gerrit.gpg.server.GpgKeys.ListGpgKeys list ( ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.gpg.server.GpgKeys.checkEnabled ( ) ; return new com.google.gerrit.gpg.server.GpgKeys.ListGpgKeys ( ) ; }
public void valid ( final com.google.gerrit.common.data.LabelType lt , final boolean v ) { valid.put ( com.google.gerrit.server.workflow.FunctionState.id ( lt ) , v ) ; }
public static java.lang.String refsDraftComments ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId.get ( ) ) ; r.append ( changeId.get ( ) ) ; return r.toString ( ) ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission perm ) { com.google.gerrit.common.data.PermissionRange r = label ( perm.permissionName ( ) . get ( ) ) ; return ( ( r.getMin ( ) ) < 0 ) || ( ( r.getMax ( ) ) > 0 ) ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch , destProject.isUseContentMerge ( ) ) ; }
protected void rcptToAuthors ( final com.google.gerrit.server.mail.RecipientType rt ) { for ( final com.google.gerrit.reviewdb.Account.Id id : authors ) { add ( rt , id ) ; } }
public boolean isRefVisible ( ) { return getRefControl ( ) . isVisible ( ) ; }
public void onShowView ( ) { super . onShowView ( ) ; cmA.refresh ( ) ; cmB.refresh ( ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byProjectOpen ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( com.google.gerrit.server.query.change.InternalChangeQuery.project ( projectName ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstParentNum ( int parentNum , org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( parentNum , newId , ws , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public com.google.gerrit.server.data.AccountAttribute get ( ) { return eventFactory.asAccountAttribute ( new com.google.gerrit.reviewdb.client.Account.Id ( account._accountId ) ) ; }
private com.google.gerrit.server.project.ProjectControl user ( com.google.gerrit.reviewdb.AccountGroup ... memberOf ) { com.google.gwtorm.client.SchemaFactory < com.google.gerrit.reviewdb.ReviewDb > schema = null ; com.google.gerrit.server.account.GroupCache groupCache = null ; java.lang.String canonicalWebUrl = "http://localhost" ; com.google.gerrit.server.project.RefControl.Factory refControlFactory = new com.google.gerrit.server.project.RefControl.Factory ( ) { @ java.lang.Override public com.google.gerrit.server.project.RefControl create ( final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String ref ) { return new com.google.gerrit.server.project.RefControl ( projectControl , ref ) ; } } ; return new com.google.gerrit.server.project.ProjectControl ( java.util.Collections.< com.google.gerrit.reviewdb.AccountGroup.UUID > emptySet ( ) , java.util.Collections.< com.google.gerrit.reviewdb.AccountGroup.UUID > emptySet ( ) , schema , groupCache , canonicalWebUrl , refControlFactory , new com.google.gerrit.server.project.RefControlTest.MockUser ( memberOf ) , newProjectState ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { text.setReadOnly ( false ) ; save.setEnabled ( saveOn ) ; cancel.setEnabled ( true ) ; discard.setEnabled ( true ) ; super . onFailure ( caught ) ; }
protected Project.NameKey getProjectName ( ) { return draftsProject ; }
public void close ( ) { com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination ( executor , java.lang.Long.MAX_VALUE , java.util.concurrent.TimeUnit.SECONDS ) ; try { openIndex.close ( ) ; } finally { closedIndex.close ( ) ; } }
public static void stopCommonServer ( ) throws java.lang.Exception { if ( ( com.google.gerrit.acceptance.AbstractDaemonTest.commonServer ) != null ) { com.google.gerrit.acceptance.AbstractDaemonTest.commonServer.stop ( ) ; com.google.gerrit.acceptance.AbstractDaemonTest.commonServer = null ; } com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; }
public synchronized void evict ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { byId.remove ( accountId ) ; }
public static java.lang.String toUnified ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , diffBase , revision , fileName , null , 0 ) ; }
private static java.lang.String getGerritPluginName ( java.io.File srcFile ) throws java.io.IOException { java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( srcFile ) ; try { return jarFile.getManifest ( ) . getMainAttributes ( ) . getValue ( "Gerrit-PluginName" ) ; } finally { jarFile.close ( ) ; } }
private boolean isMember ( com.google.gerrit.reviewdb.client.AccountGroup parent , com.google.gerrit.common.data.GroupDescription.Basic member ) throws com.google.gwtorm.server.OrmException { return groups.isIncluded ( dbProvider.get ( ) , parent.getId ( ) , member.getGroupUUID ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { admins = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "Administrators" ) ) . getGroupUUID ( ) ; setUpChanges ( ) ; setUpPermissions ( ) ; }
boolean isLineStart ( int b ) { return ( b == 0 ) || ( ( charAt ( ( b - 1 ) ) ) == '\n' ) ; }
public void run ( ) { try { serverStarted.await ( ) ; } catch ( java.lang.InterruptedException e ) { throw new java.lang.RuntimeException ( e ) ; } catch ( java.util.concurrent.BrokenBarrierException e ) { throw new java.lang.RuntimeException ( e ) ; } }
private static boolean match ( java.lang.String value , java.lang.String pattern , boolean refMatcher ) { if ( refMatcher ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( pattern ) . match ( value , null ) ; } else { return java.util.regex.Pattern.matches ( pattern , value ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , com.google.inject.util.Providers.of ( remotePeer ) , null , id ) ; }
private static org.apache.lucene.index.Term intTerm ( java.lang.String name , int value ) { org.apache.lucene.util.BytesRefBuilder builder = new org.apache.lucene.util.BytesRefBuilder ( ) ; org.apache.lucene.util.NumericUtils.intToPrefixCodedBytes ( value , 0 , builder ) ; return new org.apache.lucene.index.Term ( name , builder.get ( ) ) ; }
protected void onOpenRow ( final int row ) { super . onOpenRow ( row ) ; nameBox.setText ( getRowItem ( row ) . getName ( ) ) ; doAddNew ( ) ; }
void setCurrentCommand ( com.google.gerrit.client.download.DownloadCommandLink cmd ) { currentCommand = cmd ; update ( ) ; }
protected abstract void handleEmails ( ) ;
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.server.AccessPath accessPath , final com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , accessPath , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , remotePeerProvider , dbProvider , id ) ; }
public void addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postReviewers.get ( ) . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.EmailException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
private void fail ( java.lang.Throwable t ) { com.google.gerrit.pgm.RebuildNotedb.log.error ( ( "Failed to rebuild change " + ( c.getId ( ) ) ) , t ) ; ok.set ( false ) ; failedTask.update ( 1 ) ; }
private boolean isPatchSet ( ) { return ( this ) instanceof com.google.gerrit.server.notedb.rebuild.PatchSetEvent ; }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; return push.rm ( git , "refs/for/master" ) . getChangeId ( ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.dashboards.DashboardInfo item ) { return item.name ( ) ; }
public com.google.gerrit.extensions.registration.DynamicSet < T > get ( ) { return new com.google.gerrit.extensions.registration.DynamicSet < T > ( com.google.gerrit.extensions.registration.DynamicSetProvider.find ( injector , type ) ) ; }
public void onRpcComplete ( final com.google.gwtjsonrpc.client.event.RpcCompleteEvent event ) { if ( ( -- ( activeCalls ) ) == 0 ) { loading.setVisible ( false ) ; } }
public boolean createProject ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String head ) { boolean success = false ; for ( org.eclipse.jgit.transport.URIish uri : getURIs ( project , FilterType.PROJECT_CREATION ) ) { success &= createProject ( uri , head ) ; } return success ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public org.eclipse.jgit.lib.ObjectInserter getObjectInserter ( ) throws java.io.IOException { initRepository ( ) ; return inserter ; }
void addRight ( com.google.gerrit.client.reviewdb.Project.Id projectId , com.google.gerrit.client.reviewdb.ApprovalCategory.Id categoryId , java.lang.String groupName , short min , short max , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.admin.ProjectDetail > callback ) ;
public static void delete ( int id , java.lang.String path , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.editFile ( id , path ) . delete ( cb ) ; }
public void onUnload ( ) { if ( ( regFocus ) != null ) { regFocus.removeHandler ( ) ; regFocus = null ; } }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public java.util.concurrent.Callable < java.lang.Void > indexTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return new com.google.gerrit.server.index.ChangeIndexerImpl.Task ( cd , false ) ; }
public com.google.gerrit.extensions.common.CommitInfo apply ( com.google.gerrit.server.project.CommitResource rsrc ) { org.eclipse.jgit.revwalk.RevCommit c = rsrc.getCommit ( ) ; com.google.gerrit.extensions.common.CommitInfo info = com.google.gerrit.server.project.GetCommit.toCommitInfo ( c ) ; return info ; }
private void logWarn ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.MergeOp.log.isWarnEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.warn ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) , t ) ; } }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.Event event ) { }
protected void configure ( ) { bind ( com.google.gerrit.server.ssh.SshInfo.class ) . to ( com.google.gerrit.server.ssh.NoSshInfo.class ) ; bind ( com.google.gerrit.server.ssh.SshKeyCache.class ) . to ( com.google.gerrit.server.ssh.NoSshKeyCache.class ) ; }
public static void merge ( final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { if ( com.google.gerrit.git.MergeQueue.start ( branch ) ) { try { com.google.gerrit.git.MergeQueue.mergeImpl ( branch ) ; } finally { com.google.gerrit.git.MergeQueue.finish ( branch ) ; } } }
void setPluginName ( @ com.google.gerrit.extensions.annotations.PluginName java.lang.String name , final java.lang.String descr ) { this . command = com.google.gerrit.sshd.Commands.named ( name ) ; }
public com.google.gerrit.server.project.SubmitRuleOptions.Builder toBuilder ( ) { return com.google.gerrit.server.project.SubmitRuleOptions.builder ( ) . allowClosed ( allowClosed ( ) ) . skipFilters ( skipFilters ( ) ) . rule ( rule ( ) ) ; }
public static void setup ( ) { com.google.gerrit.server.events.EventTypes.register ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServletTest.RefReplicationDoneEvent.TYPE , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EventRestApiServletTest.RefReplicationDoneEvent.class ) ; com.google.gwtorm.client.KeyUtil.setEncoderImpl ( new com.google.gwtorm.server.StandardKeyEncoder ( ) ) ; }
public Change.Key getChangeKey ( ) { return null ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated ) ; }
public static void replyError ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , int statusCode , java.lang.String msg , @ com.google.gerrit.common.Nullable java.lang.Throwable err ) throws java.io.IOException { com.google.gerrit.httpd.restapi.RestApiServlet.replyError ( req , res , statusCode , msg , CacheControl.NONE , err ) ; }
void onRefReplicatedToAllNodes ( java.lang.String project , java.lang.String ref , int nodesCount ) { com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent event = new com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent ( project , ref , nodesCount ) ; postEvent ( project , event ) ; }
public abstract Change.Key getChangeKey ( ) ;
private boolean canEditFullName ( ) { return com.google.gerrit.client.Gerrit.getServerInfo ( ) . auth ( ) . canEdit ( Account.FieldName.FULL_NAME ) ; }
public com.google.gerrit.server.plugins.PluginResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.plugins.Plugin p = loader.get ( id.get ( ) ) ; if ( p == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.plugins.PluginResource ( p ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , com.google.gerrit.extensions.restapi.ResourceConflictException.class , expectedError ) ; }
public void registerKeys ( ) { super . registerKeys ( ) ; regNavigation = com.google.gwtexpui.globalkey.client.GlobalKey.add ( keysNavigation ) ; regAction = com.google.gwtexpui.globalkey.client.GlobalKey.add ( keysAction ) ; }
private com.google.gerrit.server.index.PredicateWrapper wrap ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.PredicateWrapper ( index , p ) ; }
private int getInt ( java.lang.String name , java.lang.String setting , int def ) { return config.getInt ( "cache" , name , setting , def ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( id , line ) : new com.google.gerrit.client.diff.SideBySide ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
com.google.gerrit.server.patch.PatchListKey toPatchListKey ( ) { return new com.google.gerrit.server.patch.PatchListKey ( oldId , parentNum , newId , whitespace , PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public java.lang.Void call ( ) throws java.io.IOException { for ( com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes ( ) ) { i.delete ( id ) ; } fireChangeDeletedFromIndexEvent ( id ) ; return null ; }
java.lang.String descriptionNotifications ( ) ;
public void setUp ( ) throws java.lang.Exception { db = new com.google.gwtorm.nosql.heap.MemoryDatabase < com.google.gwtorm.data.PhoneBookDb > ( com.google.gwtorm.data.PhoneBookDb.class ) ; openSchemas = new java.util.ArrayList < com.google.gwtorm.data.PhoneBookDb > ( ) ; }
private void fastForwardTagToExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , false , expectedStatus ) ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) { throw new java.lang.UnsupportedOperationException ( ) ; }
com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission , boolean isChangeOwner ) { if ( com.google.gerrit.common.data.Permission.hasRange ( permission ) ) { return toRange ( permission , access ( permission , isChangeOwner ) ) ; } return null ; }
public void onLoad ( ) { super . onLoad ( ) ; refresh ( true ) ; }
public boolean canEditAssignee ( ) { return ( ( ( isOwner ( ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( getRefControl ( ) . canEditAssignee ( ) ) ) || ( isAssignee ( ) ) ; }
public com.google.gerrit.client.diff.DiffApi base ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { call.addParameter ( "base" , id.get ( ) ) ; return this ; }
protected void configure ( ) { if ( recheckMergeable ) { install ( new com.google.gerrit.pgm.Reindex.MergeabilityModule ( ) ) ; } else { bind ( com.google.gerrit.server.change.MergeabilityChecker.class ) . toProvider ( com.google.inject.util.Providers.< com.google.gerrit.server.change.MergeabilityChecker > of ( null ) ) ; } }
public com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > approvalsMap ( ) throws com.google.gwtorm.server.OrmException { if ( ( allApprovals ) == null ) { allApprovals = approvalsUtil.byChange ( db , notes ( ) ) ; } return allApprovals ; }
boolean setToRetry ( ) { retrying = true ; ( retryCount ) ++ ; return ( retryCount ) <= ( maxRetries ) ; }
private long getDiskUsage ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository git = gitManager.openRepository ( project ) ; try { java.io.File gitDir = git.getDirectory ( ) ; return getDiskUsage ( gitDir ) ; } finally { git.close ( ) ; } }
public void abandonReviewableChangeNotifyOwnerCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
void setHideEmptyPane ( boolean hide ) { if ( ( changeType ) == ( com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED ) ) { setVisibleA ( ( ! hide ) ) ; } else if ( ( changeType ) == ( com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED ) ) { setVisibleB ( ( ! hide ) ) ; } }
com.google.gitiles.CommitData.Builder setRevWalk ( org.eclipse.jgit.revwalk.RevWalk walk ) { this . walk = com.google.common.base.Preconditions.checkNotNull ( walk , "walk" ) ; return this ; }
public void go ( ) { com.google.gerrit.client.Dispatcher.patch ( getTargetHistoryToken ( ) , patchKey , patchIndex , patchSetDetail , parentPatchTable , topView ) ; }
public void assertMessage ( java.lang.String expectedMessage ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; com.google.common.truth.Truth.assertThat ( message ( refUpdate ) . toLowerCase ( ) ) . named ( message ( refUpdate ) ) . contains ( expectedMessage.toLowerCase ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; createProject ( project2.get ( ) ) ; }
public void defaultDashboardDoesNotExist ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . defaultDashboard ( ) . get ( ) ; }
public void removeHandler ( ) { com.google.gwtexpui.globalkey.client.GlobalKey.keys.remove ( key ) ; com.google.gwtexpui.globalkey.client.GlobalKey.keyApplication.add ( key ) ; }
private void autoFlush ( ) throws java.io.IOException { if ( autoCommit ) { manualFlush ( ) ; } }
private void assertIsUnhealthy ( ) throws java.io.IOException { javax.servlet.http.HttpServletResponse responseMock = mock ( javax.servlet.http.HttpServletResponse.class ) ; servlet.doGet ( null , responseMock ) ; org.mockito.Mockito.verify ( responseMock ) . sendError ( javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE ) ; }
protected void configure ( ) { bind ( com.googlesource.gerrit.plugins.verifystatus.server.schema.SchemaVersion.class ) . to ( SchemaVersion.C ) ; bind ( com.google.gerrit.metrics.MetricMaker.class ) . to ( com.google.gerrit.metrics.DisabledMetricMaker.class ) ; }
public void setUp ( ) throws java.lang.Exception { allowGlobalCapabilities ( com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , GlobalCapability.CREATE_GROUP ) ; allowGlobalCapabilities ( com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , GlobalCapability.CREATE_PROJECT ) ; }
private static long upperLimit ( long unit ) { long limit = unit + ( unit / 2 ) ; return limit ; }
protected void configure ( ) { factory ( PatchScriptFactory.Factory.class ) ; factory ( SaveDraft.Factory.class ) ; }
protected net.codemirror.lib.LineWidget getSelfWidget ( ) { return selfWidget ; }
public void testParentHashCode ( ) { final long id = 21281821821821881L ; final com.google.gwtorm.client.LongKeyTestCase.Parent p = new com.google.gwtorm.client.LongKeyTestCase.Parent ( id ) ; assertEquals ( ( ( int ) ( id ) ) , p.hashCode ( ) ) ; }
public void listTagsOfNonVisibleProject ( ) throws java.lang.Exception { blockRead ( project , "refs/*" ) ; userSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/tags" ) ) . assertNotFound ( ) ; }
private com.google.gerrit.server.IdentifiedUser reloadUser ( ) { accountCache.evict ( userId ) ; user = userFactory.create ( com.google.inject.util.Providers.of ( db ) , userId ) ; return user ; }
public boolean canForgeCommitter ( ) { if ( ( canForgeCommitter ) == null ) { canForgeCommitter = canPerform ( Permission.FORGE_COMMITTER ) ; } return canForgeCommitter ; }
public java.lang.String getDisplayString ( ) { return branch.getName ( ) ; }
private com.google.gerrit.server.git.ProjectConfig read ( org.eclipse.jgit.revwalk.RevCommit rev ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.ProjectConfig cfg = new com.google.gerrit.server.git.ProjectConfig ( new com.google.gerrit.reviewdb.Project.NameKey ( "test" ) ) ; cfg.load ( db , rev ) ; return cfg ; }
public static com.google.gerrit.server.git.ValidationError.Sink createLoggerSink ( java.lang.String message , org.slf4j.Logger log ) { return new com.google.gerrit.server.git.ValidationError.Sink ( ) { @ java.lang.Override public void error ( com.google.gerrit.server.git.ValidationError error ) { log.error ( ( message + ( error.getMessage ( ) ) ) ) ; } } ; }
public java.lang.Object apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.server.project.GarbageCollect.Input input ) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getNameKey ( ) ; if ( input.async ) { return applyAsync ( project , input ) ; } else { return applySync ( project , input ) ; } }
void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
void stop ( ) ;
public void onFailure ( java.lang.Throwable caught ) { addBranch.setEnabled ( true ) ; com.google.gerrit.client.admin.ProjectBranchesScreen.selectAllAndFocus ( nameTxtBox ) ; new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) . center ( ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { return execute ( org.apache.http.client.fluent.Request.Delete ( ( ( ( url ) + "/a" ) + endPoint ) ) ) ; HEAD ( 49 [ Merge ] ) ; }
private java.lang.String indent ( int spaces ) { if ( spaces == 0 ) { return "" ; } else { return java.lang.String.format ( ( ( "%" + spaces ) + "s" ) , " " ) ; } }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( id ) ) ; }
protected void createProject ( com.google.gerrit.extensions.api.projects.ProjectInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { gApi.projects ( ) . create ( in ) ; }
public static boolean canRead ( final com.google.gerrit.client.reviewdb.Account.Id who , final com.google.gerrit.client.reviewdb.Project.NameKey projectKey ) { final com.google.gerrit.client.data.ProjectCache.Entry e = com.google.gerrit.client.rpc.Common.getProjectCache ( ) . get ( projectKey ) ; return com.google.gerrit.client.rpc.BaseServiceImplementation.canRead ( who , e ) ; }
private static java.lang.String resolveHttpUrl ( java.lang.String remoteUrl ) { return com.google.gitiles.PathServlet.VERBATIM_SUBMODULE_URL_PATTERN.matcher ( remoteUrl ) . matches ( ) ? remoteUrl : null ; }
public void setJarUrl ( final java.lang.String url ) { this . jarUrl = url ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( nextToken , true ) ; }
public void setName ( final java.lang.String name ) { this . name = name ; }
public void stop ( ) { if ( ( threadPool ) != null ) { threadPool.unregisterWorkQueue ( ) ; threadPool = null ; } }
private static void mainImpl ( final java.lang.String [ ] argv ) throws com.google.gwtjsonrpc.server.XsrfException , com.google.gwtorm.client.OrmException { com.google.gerrit.server.GerritServer.getInstance ( ) ; com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; }
public static com.google.gerrit.client.rpc.RestApi reviewer ( int id , java.lang.String reviewer ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) . id ( reviewer ) ; }
private static native java.lang.String go ( com.google.gwt.core.client.JavaScriptObject ctx , java.lang.String srcText , java.lang.String srcType , int tabSize ) ;
public com.google.gerrit.extensions.restapi.BinaryResult apply ( com.google.gerrit.server.project.FileResource rsrc ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return fileContentUtil.getContent ( rsrc.getProject ( ) . getProjectState ( ) , rsrc.getRev ( ) , rsrc.getPath ( ) , null ) ; }
public static void get ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path , com.google.gerrit.client.rpc.HttpCallback < com.google.gerrit.client.rpc.NativeString > cb ) { com.google.gerrit.client.changes.ChangeEditApi.get ( id , path , false , cb ) ; }
public void setMessage ( final java.lang.String message ) { this . message = message ; }
public void checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , long expectedKeyId , java.util.List < java.lang.String > problems ) { }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change c ) { if ( c.getStatus ( ) . isOpen ( ) ) { c.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( c ) ; } return c ; }
private static boolean eq ( final java.lang.String a , final java.lang.String b ) { if ( ( a == null ) && ( b == null ) ) { return true ; } return a != null ? a.equals ( b ) : false ; }
public void setMaxDatabaseSize ( int size ) { if ( ( engine.aregs ) != null ) throw new java.lang.IllegalStateException ( "Prolog already initialized" ) ; if ( ( engine.internalDB ) != null ) engine.internalDB.maxContents = size ; else engine.internalDB = new com.googlecode.prolog_cafe.lang.InternalDatabase ( size ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; groups = new com.google.gerrit.client.admin.GroupTable ( false ) ; add ( groups ) ; }
public com.google.gerrit.extensions.common.ChangeInfo check ( com.google.gerrit.extensions.api.changes.FixInput fix ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return check.apply ( change , fix ) . value ( ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check change" , e ) ; } }
public com.google.gerrit.server.notedb.NoteDbUpdateManager.Result rebuildEvenIfReadOnly ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { return rebuild ( db , changeId , false ) ; }
public void getOpenChange_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) ) . to ( git , "refs/for/master" ) ; r.assertOkStatus ( ) ; assertNotFound ( r.getCommitId ( ) ) ; }
public void evict ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { if ( accountId != null ) { byId.invalidate ( accountId ) ; } }
public final native boolean syntaxHighlighting ( ) ;
void init ( com.google.gerrit.client.change.ChangeScreen2.Style style , com.google.gwt.dom.client.Element statusText ) { this . style = style ; this . statusText = statusText ; }
public void testHashCodeWhenNull ( ) { final com.google.gwtorm.client.StringKeyTestCase.Parent p = new com.google.gwtorm.client.StringKeyTestCase.Parent ( null ) ; assertEquals ( 0 , p.hashCode ( ) ) ; }
protected abstract com.google.gerrit.server.git.MergeTip _run ( com.google.gerrit.server.git.CodeReviewCommit currentTip , java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.IntegrationException ;
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { setOpen ( ( ! ( isOpen ( ) ) ) ) ; resizePaddingWidget ( ) ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; final java.io.PrintWriter stdout = toPrintWriter ( out ) ; try { impl.display ( stdout ) ; } finally { stdout.flush ( ) ; } }
protected com.google.gwtorm.schema.SchemaModel getSchemaModel ( ) { return schemaModel ; }
protected void configure ( ) { listener ( ) . to ( LocalDiskRepositoryManager.Lifecycle.class ) ; listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( WorkQueue.Lifecycle.class ) ; listener ( ) . to ( com.google.gerrit.server.config.GerritGlobalModule.VelocityLifecycle.class ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; new com.google.gerrit.testutil.InMemoryModule ( ) . inject ( this ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box , com.google.gerrit.common.changes.Side side ) { diffTable.addFileCommentBox ( box , side ) ; }
public void onPreReceive ( final org.spearce.jgit.transport.ReceivePack arg0 , final java.util.Collection < org.spearce.jgit.transport.ReceiveCommand > commands ) { parseCommands ( commands ) ; createNewChanges ( rp ) ; appendPatchSets ( rp.getRevWalk ( ) ) ; }
public final void addLineClass ( int line , net.codemirror.lib.CodeMirror.LineClassWhere where , java.lang.String className ) { addLineClassNative ( line , where.name ( ) . toLowerCase ( ) , className ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.Branch > result ) { enableForm ( true ) ; branches.display ( result ) ; branches.finishDisplay ( true ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { event.stopPropagation ( ) ; event.preventDefault ( ) ; form.submit ( ) ; } }
private static com.google.gerrit.client.rpc.RestApi editMessage ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit:message" ) ; }
public com.google.gerrit.server.account.GroupControl controlFor ( final com.google.gerrit.reviewdb.client.AccountGroup group ) { return new com.google.gerrit.server.account.GroupControl ( groupCache , user.get ( ) , group ) ; }
public void projectDetail ( final com.google.gerrit.client.reviewdb.Project.Id projectId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.admin.ProjectDetail > callback ) { projectDetailFactory.create ( projectId ) . to ( callback ) ; }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , true , expectedStatus ) ; }
public com.google.gerrit.extensions.common.ChangeInfo format ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return format ( cd , com.google.common.base.Optional.< com.google.gerrit.reviewdb.client.PatchSet.Id > absent ( ) ) ; }
void addBranch ( com.google.gerrit.client.reviewdb.Project.Id project , java.lang.String branchName , java.lang.String startingRevision , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.client.reviewdb.Branch > > callback ) ;
public final native java.lang.String uuid ( ) ;
public static java.lang.String toChangeQuery ( java.lang.String query , java.lang.String page ) { query = com.google.gwtorm.client.KeyUtil.encode ( query ) . replaceAll ( "%3[Aa]" , ":" ) ; return ( ( "/q/" + query ) + "," ) + page ; }
void clearRange ( ) { if ( ( rangeMarker ) != null ) { rangeMarker.clear ( ) ; } }
< I > com.google.gerrit.extensions.restapi.RestModifyView < P , I > delete ( P parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException ;
void removeAll ( ) { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar.expandSideAll ( ) ; } getOverviewBar ( ) . refresh ( ) ; skipBars = null ; line0 = null ; } }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( AccessPath.UNKNOWN , authConfig , canonicalUrl , realm , accountCache , null , null , id ) ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( final java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , java.util.Collections.< org.eclipse.jgit.diff.Edit > emptyList ( ) ) ; }
public void testCreateProjectWhenProjectAlreadyExists_Conflict ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/All-Projects" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_CONFLICT , r.getStatusCode ( ) ) ; }
synchronized com.google.gerrit.sshd.SshScope.Context subContext ( com.google.gerrit.sshd.SshSession newSession , java.lang.String newCommandLine ) { com.google.gerrit.sshd.SshScope.Context ctx = new com.google.gerrit.sshd.SshScope.Context ( this , newSession , newCommandLine ) ; cleanup.add ( ctx.cleanup ) ; return ctx ; }
protected void onOpenRow ( final int row ) { if ( row > 0 ) { movePointerTo ( row ) ; } com.google.gwt.user.client.History.newItem ( link ( getRowItem ( row ) ) ) ; }
private static final native void init ( java.lang.String d , java.lang.String e , java.lang.String m , java.lang.String t , java.lang.String r , java.lang.String o ) ;
private void insertEmptyLines ( net.codemirror.lib.CodeMirror cm , int nextLine , int cnt ) { addPaddingWidget ( cm , diffTable.style.padding ( ) , ( nextLine - 1 ) , cnt , Unit.EM ) ; }
private java.lang.String newChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
protected org.eclipse.jgit.lib.ObjectId pushChangeTo ( org.eclipse.jgit.junit.TestRepository < ? > repo , java.lang.String branch ) throws java.lang.Exception { return pushChangeTo ( repo , branch , "some change" ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( com.google.gerrit.server.query.change.InternalChangeQuery.topic ( topic ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public static native net.codemirror.lib.CodeMirror create ( com.google.gerrit.client.diff.DisplaySide side , com.google.gwt.dom.client.Element parent , net.codemirror.lib.Configuration cfg ) ;
public synchronized com.google.gerrit.metrics.Counter0 newCounter ( java.lang.String name , com.google.gerrit.metrics.Description desc ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkCounterDescription ( desc ) ; define ( name , desc ) ; return newCounterImpl ( name , desc.isRate ( ) ) ; }
private static boolean autoReindexIfStale ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "index" , null , "autoReindexIfStale" , true ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId getLabelId ( ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId ( ( ( id ) != null ? id : name ) ) ; }
private void redisplay ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
private static com.google.gerrit.client.rpc.RestApi revision ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String type ) { return com.google.gerrit.client.changes.ChangeApi.revision ( id ) . view ( type ) ; }
public void run ( ) { for ( ; ; ) { try { if ( done.await ( checkFrequencyMillis , java.util.concurrent.TimeUnit.MILLISECONDS ) ) { return ; } } catch ( java.lang.InterruptedException e ) { } loader.rescan ( false ) ; } }
protected abstract java.lang.String prettify ( java.lang.String html ) ;
protected void configure ( ) { bind ( com.google.gerrit.server.query.change.ChangeQueryRewriter.class ) . to ( com.google.gerrit.server.index.IndexRewriteImpl.class ) ; bind ( com.google.gerrit.server.query.change.BasicChangeRewrites.class ) ; bind ( com.google.gerrit.server.index.IndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.IndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
public java.lang.String call ( ) throws java.lang.Exception { log.debug ( "Adding comment {} to issue {}" , comment , issueKey ) ; client ( ) . addComment ( issueKey , com.atlassian.jira.rest.client.api.domain.Comment.valueOf ( comment ) ) ; log.debug ( "Added comment {} to issue {}" , comment , issueKey ) ; return issueKey ; }
protected < P extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ChildCollectionBinder < P > child ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < P > > type , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ChildCollectionBinder < P > ( view ( type , com.google.gerrit.extensions.restapi.RestApiModule.GET , name ) ) ; }
public boolean getIfPresent ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.common.SubmitType submitType , java.lang.String mergeStrategy ) { return cache.getIfPresent ( new com.google.gerrit.server.change.MergeabilityCacheImpl.EntryKey ( commit , com.google.gerrit.server.change.MergeabilityCacheImpl.toId ( intoRef ) , submitType , mergeStrategy , null , null , null ) ) ; }
protected void resetHtml ( com.google.gwtexpui.safehtml.client.SafeHtml body ) { currentRow = - 1 ; super . resetHtml ( body ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Object > apply ( java.lang.Boolean indexUpdated ) throws java.lang.Exception { if ( ! indexUpdated ) { return ( ( com.google.common.util.concurrent.ListenableFuture < java.lang.Object > ) ( indexer.indexAsync ( change ) ) ) ; } return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.SystemInfoServiceImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) ) ; }
public void nullCommitMessage ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( null ) ) ) ) . isEmpty ( ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval apply ( com.google.gerrit.reviewdb.client.PatchSetApproval in ) { if ( in.getPatchSetId ( ) . equals ( psId ) ) { return in ; } else { return new com.google.gerrit.reviewdb.client.PatchSetApproval ( psId , in ) ; } }
char charAt ( int idx ) { return content.charAt ( idx ) ; }
public boolean exists ( final java.lang.String issueKey ) throws java.io.IOException { return execute ( new java.util.concurrent.Callable < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean call ( ) throws java.lang.Exception { return client ( ) . issueExists ( issueKey ) ; } } ) ; }
void onFollowUp ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( followUpAction ) == null ) { followUpAction = new com.google.gerrit.client.change.FollowUpAction ( followUp , project , branch , topic , key ) ; } followUpAction.show ( ) ; }
private org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException { initRepository ( ) ; return repo ; }
public org.eclipse.jgit.revwalk.RevWalk getRevWalk ( ) throws java.io.IOException { initRepository ( ) ; return revWalk ; }
public void testOne ( ) { org.junit.Assert.assertEquals ( "z" , serverConfig.getString ( "x" , null , "y" ) ) ; }
public com.google.gerrit.server.query.change.ChangeData apply ( com.google.gerrit.server.notedb.ChangeNotes notes ) { return changeDataFactory.create ( db , notes.getChange ( ) ) ; }
private com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context newRequestContext ( com.google.gerrit.acceptance.TestAccount account ) { return atrScope.newContext ( reviewDbProvider , new com.google.gerrit.acceptance.SshSession ( server , account ) , identifiedUserFactory.create ( com.google.inject.util.Providers.of ( db ) , account.getId ( ) ) ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "newProject" ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.AuthException.class ) ; }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.deleteChange ( id.get ( ) , com.google.gerrit.client.change.ChangeActions.mine ( draftButtons ) ) ; }
public void onChangeIndexed ( com.google.gerrit.server.query.change.ChangeData cd ) { executeIndexTask ( cd.getId ( ) , false ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
public int getCardinality ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
abstract com.google.gerrit.server.mail.receive.MailMessage.Builder from ( java.lang.String val ) ;
public void setPatchSet ( final com.google.gerrit.reviewdb.PatchSet ps ) { patchSet = ps ; }
protected void configure ( ) { listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( WorkQueue.Lifecycle.class ) ; listener ( ) . to ( com.google.gerrit.server.config.GerritGlobalModule.VelocityLifecycle.class ) ; }
private boolean checkAndUpdateArrows ( ) { if ( ( numSkipLines ) <= ( com.google.gerrit.client.diff.SkipBar.UP_DOWN_THRESHOLD ) ) { upArrow.addStyleName ( style.noExpand ( ) ) ; downArrow.addStyleName ( style.noExpand ( ) ) ; return false ; } return true ; }
void onExpandAfter ( com.google.gwt.event.dom.client.ClickEvent e ) { otherBar.expandAfter ( ) ; expandAfter ( ) ; cm.focus ( ) ; }
public static java.lang.String toChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id ps ) { return ( ( "/c/" + ( ps.getParentKey ( ) ) ) + "/" ) + ( ps.get ( ) ) ; }
public com.google.gwtorm.jdbc.Database < com.google.gerrit.reviewdb.server.ReviewDb > get ( ) { try { return new com.google.gwtorm.jdbc.Database < com.google.gerrit.reviewdb.server.ReviewDb > ( datasource , com.google.gerrit.reviewdb.server.ReviewDb.class ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.inject.ProvisionException ( "Cannot create ReviewDb" , e ) ; } }
protected void enableButtons ( final boolean on ) { for ( com.google.gwt.user.client.ui.Widget w : getButtonPanel ( ) ) { if ( w instanceof com.google.gwt.user.client.ui.Button ) { ( ( com.google.gwt.user.client.ui.Button ) ( w ) ) . setEnabled ( on ) ; } } }
private static void assertChildren ( java.lang.String o , com.google.gerrit.server.query.Predicate < java.lang.String > p , final java.util.List < com.google.gerrit.server.query.Predicate < java.lang.String > > l ) { org.junit.Assert.assertEquals ( ( o + " did not affect child" ) , l , p.getChildren ( ) ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.CommitResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.project.FileResource ( parent.getProject ( ) , parent.getCommit ( ) . getName ( ) , id.get ( ) ) ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { }
public final native java.lang.String link_name ( ) ;
default com.google.gerrit.server.notedb.ChangeNotes getNotes ( ) { return com.google.common.base.Preconditions.checkNotNull ( getControl ( ) . getNotes ( ) ) ; }
private com.google.common.util.concurrent.ListeningExecutorService newExecutor ( ) { if ( ( threads ) > 0 ) { return com.google.common.util.concurrent.MoreExecutors.listeningDecorator ( workQueue.createQueue ( threads , "RebuildChange" ) ) ; } else { return com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService ( ) ; } }
public void byId ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user = newAccount ( "user" ) ; assertQuery ( "9999999" ) ; assertQuery ( currentUserInfo._accountId , currentUserInfo ) ; assertQuery ( user._accountId , user ) ; setAnonymous ( ) ; assertQuery ( "9999999" ) ; }
protected PushOneCommit.Result pushTo ( java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , ref ) ; }
public void execute ( ) { if ( message.getValue ( ) . startsWith ( "LGTM" ) ) { for ( java.lang.Runnable r : lgtm ) { r.run ( ) ; } } }
public com.google.gerrit.server.project.SubmitRuleOptions.Builder toBuilder ( ) { return com.google.gerrit.server.project.SubmitRuleOptions.builder ( ) . fastEvalLabels ( fastEvalLabels ( ) ) . allowClosed ( allowClosed ( ) ) . skipFilters ( skipFilters ( ) ) . rule ( rule ( ) ) ; }
public abstract java.lang.String getNextSequenceValueSql ( java.lang.String seqname ) ;
public void setPrivate ( boolean value ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( ( ( requestId ) != null ) && ( com.google.gerrit.server.update.BatchUpdate.log.isDebugEnabled ( ) ) ) { com.google.gerrit.server.update.BatchUpdate.log.debug ( ( ( requestId ) + msg ) , args ) ; } }
public boolean isOwnerOf ( com.google.gerrit.common.data.AccessSection section ) { return getOwnerOf ( ) . contains ( section.getRefPattern ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.permissions.PermissionBackend.class ) . to ( com.google.gerrit.server.project.DefaultPermissionBackend.class ) . in ( Scopes.SINGLETON ) ; bind ( ProjectControl.GenericFactory.class ) ; factory ( ProjectControl.AssistedFactory.class ) ; bind ( ChangeControl.GenericFactory.class ) ; bind ( ChangeControl.Factory.class ) ; }
private boolean nameEqualsAbbreviated ( org.eclipse.jgit.lib.ObjectId other ) { return org.eclipse.jgit.lib.AbbreviatedObjectId.isId ( name ) ? ( org.eclipse.jgit.lib.AbbreviatedObjectId.fromString ( name ) . prefixCompare ( other ) ) == 0 : false ; }
public com.google.gerrit.server.ssh.DispatchCommand get ( ) { return new com.google.gerrit.server.ssh.DispatchCommand ( dispatcherName , getMap ( ) ) ; }
void invalidUserName ( ) { userNameTxt.setFocus ( true ) ; new com.google.gerrit.client.ErrorDialog ( Util.C.invalidSshUserName ( ) ) . center ( ) ; }
public void getNonExistingChildProject_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , GET ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/children/non-existing" ) ) . getStatusCode ( ) ) ; }
private com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData load ( int expectedValue ) throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d = new com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData ( ) ; d.load ( repo ) ; com.google.common.truth.Truth.assertThat ( d.getValue ( ) ) . isEqualTo ( expectedValue ) ; return d ; }
public void singleHashtagNumeric ( ) throws java.lang.Exception { java.lang.String commitMessage = "Subject\n\n#123\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "123" ) ) ; }
protected void focusHint ( ) { if ( hintOn ) { super . setText ( "" ) ; hintOn = false ; if ( ( getHintStyleName ( ) ) != null ) { removeStyleName ( getHintStyleName ( ) ) ; } } }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( cd , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void requestSuggestions ( com.google.gerrit.client.ui.Request req , com.google.gerrit.client.ui.Callback cb ) { com.google.gerrit.client.ui.RemoteSuggestOracle.Query q = new com.google.gerrit.client.ui.RemoteSuggestOracle.Query ( req , cb ) ; if ( ( query ) == null ) { q.start ( ) ; } query = q ; }
public void upsert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj ) ; } }
private com.google.gerrit.extensions.common.ChangeInput newChangeInput ( ) { com.google.gerrit.extensions.common.ChangeInput in = new com.google.gerrit.extensions.common.ChangeInput ( ) ; in.branch = "master" ; in.subject = "test" ; in.project = project.get ( ) ; return in ; com.google.gerrit.acceptance.api.accounts.a9e025 Merge ; com.google.gerrit.acceptance.api.accounts.into stable ; }
private java.lang.String trimFromChar ( java.lang.String string , char ch ) { if ( ( string.lastIndexOf ( ch ) ) >= 0 ) { string = string.substring ( ( ( string.lastIndexOf ( ch ) ) + 1 ) ) ; } return string ; }
public java.lang.String format ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.IOException ;
protected void preDisplay ( final com.google.gerrit.common.data.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; display ( result ) ; }
private java.util.Set < java.security.PublicKey > getPeerKeys ( ) { com.google.gerrit.sshd.DatabasePubKeyAuth.PeerKeyCache p = peerKeyCache ; if ( ! ( p.isCurrent ( ) ) ) { p = p.reload ( ) ; peerKeyCache = p ; } return p.keys ; HEAD ( a4b4ea ) ; }
private com.google.gerrit.reviewdb.AccountDiffPreference.Whitespace getIgnoreWhitespace ( ) { final int sel = ignoreWhitespace.getSelectedIndex ( ) ; if ( 0 <= sel ) { return com.google.gerrit.reviewdb.AccountDiffPreference.Whitespace.valueOf ( ignoreWhitespace.getValue ( sel ) ) ; } return value.getWhitespace ( ) ; }
public java.lang.String getNextSequenceValueSql ( final java.lang.String seqname ) { return seqname ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toEditScreen ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( result.legacyId ( ) , 1 ) , "project.config" ) ) ; }
public void start ( final org.apache.sshd.server.Environment env ) { startThread ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { runImp ( ) ; } } ) ; }
private com.google.gerrit.server.index.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.IndexedChangeQuery ( index , p , limit ) ; }
public java.lang.String getUrl ( java.lang.String project ) { return "repo download " + project ; }
public void done ( ) { finalAdded = true ; applyAllSuccess ( ) ; }
static com.google.gerrit.server.git.CodeReviewCommit error ( final com.google.gerrit.server.git.CommitMergeStatus s ) { final com.google.gerrit.server.git.CodeReviewCommit r = new com.google.gerrit.server.git.CodeReviewCommit ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) ; r.statusCode = s ; return r ; }
public static java.lang.String refsStarredChanges ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES , changeId.get ( ) ) ; r.append ( accountId.get ( ) ) ; return r.toString ( ) ; }
private void setupDefaultOperations ( ) { new org.eclipse.example.calc.internal.operations.Equals ( ) ; new org.eclipse.example.calc.internal.operations.Minus ( ) ; new org.eclipse.example.calc.internal.operations.Plus ( ) ; new org.eclipse.example.calc.internal.operations.Square ( ) ; new org.eclipse.example.calc.internal.Divide ( ) ; new org.eclipse.example.calc.internal.Multiply ( ) ; }
public static com.google.common.base.Function < com.google.gerrit.reviewdb.client.Change , com.google.gerrit.reviewdb.client.Change.Id > changeIdFunction ( ) { return com.google.gerrit.reviewdb.server.ReviewDbUtil.CHANGE_ID_FUNCTION ; }
public static java.lang.String toAccountQuery ( java.lang.String fullname , com.google.gerrit.reviewdb.client.Change.Status status ) { return com.google.gerrit.common.PageLinks.toChangeQuery ( ( ( ( com.google.gerrit.common.PageLinks.op ( "owner" , fullname ) ) + " " ) + ( com.google.gerrit.common.PageLinks.status ( status ) ) ) , com.google.gerrit.common.PageLinks.TOP ) ; }
public com.google.gerrit.server.mail.MergeFailSender create ( com.google.gerrit.reviewdb.client.Change change ) ;
public void clear ( ) { set ( cssText , headerHtml , footerHtml ) ; }
static java.nio.file.Path getZipPath ( java.nio.file.Path buckOut ) { if ( buckOut == null ) { return null ; } return buckOut.resolve ( "gen" ) . resolve ( "polygerrit-ui" ) . resolve ( "polygerrit_components" ) . resolve ( "polygerrit_components.bower_components.zip" ) ; }
public boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( canAbandon ( db ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
public boolean isAuthSupported ( ) { return isAuthRequired ( ) ; }
public void fooSubdirText ( ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = buildText ( "/foo/" ) ; org.junit.Assert.assertEquals ( "bar/repo\n" , new java.lang.String ( res.getActualBody ( ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; }
private void release ( ) { tw.release ( ) ; }
com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.PatchSet patch ) ;
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.PatchLineComment > draft ( com.google.gerrit.client.reviewdb.Patch.Id patch , com.google.gerrit.client.reviewdb.Account.Id author ) throws com.google.gwtorm.client.OrmException ;
com.google.gerrit.server.mail.RevertedSender create ( com.google.gerrit.reviewdb.client.Change change ) ;
public final native void setPath ( java.lang.String path ) ;
public void options ( com.google.gerrit.extensions.common.GroupOptionsInfo options ) throws com.google.gerrit.extensions.restapi.RestApiException { try { putOptions.apply ( rsrc , options ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put group options" , e ) ; } }
private com.google.gerrit.server.change.ChangeJson newChangeJson ( ) { return jsonFactory.create ( java.util.EnumSet.of ( ListChangesOption.CHECK ) ) ; }
public void addPatchSets ( com.google.gerrit.server.data.ChangeAttribute ca , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.client.PatchSet.Id , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSetApproval > > approvals , com.google.gerrit.common.data.LabelTypes labelTypes ) { addPatchSets ( ca , ps , approvals , false , null , labelTypes ) ; }
protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result , subname ) ; groups.finishDisplay ( ) ; }
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change ) { return com.google.common.util.concurrent.Futures.makeChecked ( executor.submit ( new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change ) ) , com.google.gerrit.server.change.MergeabilityChecker.MAPPER ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.setAccountDiffPreference ( getValue ( ) ) ; setEnabled ( true ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > get ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.GET , name ) ) ; }
protected void writeOne ( java.lang.CharSequence line ) throws java.io.IOException { writer.print ( line ) ; }
public com.google.gerrit.gpg.PublicKeyChecker disableTrust ( ) { store = null ; trusted = null ; return this ; }
protected void onLoad ( ) { super . onLoad ( ) ; com.google.gerrit.client.changes.ChangeList.next ( query , start , pageSize , ChangeTable.OPTIONS , loadCallback ( ) ) ; }
private static java.lang.String url ( com.google.gerrit.reviewdb.client.PatchSet.Id ps , com.google.gerrit.client.changes.CommentInfo info ) { return com.google.gerrit.client.Dispatcher.toPatch ( null , ps , info.path ( ) ) ; }
private void addComment ( com.google.gerrit.acceptance.PushOneCommit.Result r , java.lang.String message ) throws java.lang.Exception { addComment ( r , message , false , false ) ; }
private static void h ( final java.lang.StringBuilder r , final com.google.gerrit.client.reviewdb.PatchSet ps ) { com.google.gerrit.client.data.GitwebLink.var ( r , "h" , ps.getRevision ( ) ) ; }
protected void removeCookie ( final java.lang.String name ) { final javax.servlet.http.Cookie c = new javax.servlet.http.Cookie ( name , "" ) ; c.setMaxAge ( 0 ) ; com.google.gwtjsonrpc.server.JsonServlet.getCurrentCall ( ) . httpResponse.addCookie ( c ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , name ( "u" ) , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public java.lang.String toString ( ) { return body ; }
private void loadPatchSets ( final com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { detail.setPatchSets ( db.patchSets ( ) . byChange ( changeId ) . toList ( ) ) ; }
public void submit ( com.google.gerrit.extensions.api.changes.SubmitInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { submit.get ( ) . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot submit change" , e ) ; } }
public static long parseSortKey ( java.lang.String sortKey ) { if ( "z" . equals ( sortKey ) ) { return java.lang.Long.MAX_VALUE ; } return java.lang.Long.parseLong ( sortKey.substring ( 0 , 8 ) , 16 ) ; }
public static void deleteDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . delete ( cb ) ; }
com.google.gerrit.server.change.ReviewerResource create ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.IdentifiedUser user ) ;
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( "^WIP.*" , true , true ) ; }
public void testIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "file:a" ) ; assertEquals ( query ( in ) , rewrite ( in ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.data.ChangeInfo > result ) { starred.display ( result ) ; table.finishDisplay ( ) ; }
public void onRpcStart ( final com.google.gwtjsonrpc.client.event.RpcStartEvent event ) { if ( ( ++ ( activeCalls ) ) == 1 ) { if ( ( com.google.gerrit.client.RpcStatus.hideDepth ) == 0 ) { loading.setVisible ( true ) ; } } }
private native void panel ( java.lang.String i , com.google.gwt.core.client.JavaScriptObject e ) ;
public com.google.gerrit.client.reviewdb.Change.Id getKey ( ) { return changeId ; }
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) { if ( ( com.google.gerrit.server.query.change.IsReviewedPredicate.getField ( schema ) ) == ( com.google.gerrit.server.index.ChangeField.LEGACY_REVIEWED ) ) { return new com.google.gerrit.server.query.change.LegacyIsReviewedPredicate ( ) ; } return com.google.gerrit.server.query.Predicate.not ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ) ; }
public void tearDown ( ) throws java.lang.Exception { revWalk.release ( ) ; super . tearDown ( ) ; }
protected void preDisplay ( java.lang.String content ) { setShowTabs ( prefs.showTabs ( ) ) ; initEditor ( content ) ; }
protected static void usage ( ) { java.lang.System.err.println ( "Usage:" ) ; java.lang.System.err.println ( " java -jar cafeteria.jar package:predicate" ) ; java.lang.System.err.println ( " java -jar cafeteria.jar predicate" ) ; java.lang.System.err.println ( " package: package name\n" ) ; java.lang.System.err.println ( " predicate: predicate name (only atom)" ) ; }
java.lang.Runnable toggleReviewed ( ) { return ( ) -> { reviewed.setValue ( ( ! ( reviewed.getValue ( ) ) ) , true ) ; } ; }
public synchronized void start ( ) { com.google.gerrit.server.plugins.PluginLoader.log.info ( ( "Loading plugins from " + ( pluginsDir.getAbsolutePath ( ) ) ) ) ; rescan ( false ) ; scanner.start ( ) ; }
public void checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , long expectedKeyId , java.lang.String expectedUserId , java.util.List < java.lang.String > problems ) { }
public short getMaxAutomergeVote ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { return ( ( short ) ( getConfig ( ) . getInt ( "global" , "maxAutomergeVote" , 1 ) ) ) ; }
public void testCreateLinkForWebUiNullText ( ) { mockUnconnectableStoryboard ( ) ; replayMocks ( ) ; com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade itsFacade = createStoryboardItsFacade ( ) ; java.lang.String actual = itsFacade.createLinkForWebui ( "Test-Url" , null ) ; assertEquals ( "[Test-Url]" , actual ) ; }
public void deleteNotAllowedWithOnlyPushPermission ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , "refs/*" , false ) ; assertDeleteRef ( org.eclipse.jgit.transport.RemoteRefUpdate.Status.REJECTED_OTHER_REASON ) ; }
public void setUp ( ) throws java.lang.Exception { project = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p" ) ; com.google.gerrit.acceptance.GitUtil.createProject ( sshSession , project.get ( ) ) ; setUpChanges ( ) ; setUpPermissions ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; addExtensionPoints ( info ) ; loadConfigInfo ( info , base ) ; }
protected void updateChangeImpl ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { }
public org.eclipse.jgit.lib.ObjectId getRevision ( ) { return revision.copy ( ) ; }
public void testWikify_OneParagraph1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A\nB" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; assertNotSame ( o , n ) ; assertEquals ( "<p>A\nB</p>" , n.asString ( ) ) ; }
public void testFormat ( ) { assertEquals ( "0000000f" , com.google.gerrit.server.util.IdGenerator.format ( 15 ) ) ; assertEquals ( "801234ab" , com.google.gerrit.server.util.IdGenerator.format ( - 2146290517 ) ) ; assertEquals ( "deadbeef" , com.google.gerrit.server.util.IdGenerator.format ( - 559038737 ) ) ; }
public void normalize ( final com.google.gerrit.common.data.ApprovalType at , final com.google.gerrit.reviewdb.PatchSetApproval ca ) { applyTypeFloor ( at , ca ) ; applyRightFloor ( ca ) ; }
private static java.lang.String fullName ( java.lang.String branch ) { if ( branch.startsWith ( Constants.R_HEADS ) ) { return branch ; } else { return ( org.eclipse.jgit.lib.Constants.R_HEADS ) + branch ; } }
public com.google.gerrit.common.data.LabelType byLabel ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId labelId ) { com.google.gerrit.common.data.LabelType t = byId ( ) . get ( labelId.get ( ) ) ; return t != null ? t : byLabel ( ) . get ( labelId.get ( ) . toLowerCase ( ) ) ; }
public void run ( ) { processCommands ( commands ) ; }
public static java.lang.String toProjectDashboard ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String dashboardId ) { return ( ( ( com.google.gerrit.common.PageLinks.PROJECTS ) + ( projectName.get ( ) ) ) + ( com.google.gerrit.common.PageLinks.DASHBOARDS ) ) + dashboardId ; }
public static com.google.gerrit.lucene.LuceneIndexModule singleVersionWithExplicitVersions ( java.util.Map < java.lang.String , java.lang.Integer > versions , int threads ) { return new com.google.gerrit.lucene.LuceneIndexModule ( versions , threads ) ; }
private org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer.getInstance ( ) ; final com.google.gwtorm.client.SchemaFactory < com.google.gerrit.client.reviewdb.ReviewDb > rdf = gs.getDatabase ( ) ; return new com.google.gerrit.client.changes.ChangeDetailServiceImpl ( rdf ) ; }
private void initAllUsersRepo ( ) throws java.io.IOException { if ( ( allUsersRepo ) == null ) { allUsersRepo = openRepo ( allUsersName ) ; } }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , false , expectedStatus ) ; }
private void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( com.google.gerrit.server.git.MergeOp.log.isDebugEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.debug ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) , args ) ; } }
private void logWarn ( java.lang.String msg ) { if ( com.google.gerrit.server.git.MergeOp.log.isWarnEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.warn ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) ) ; } }
public void stop ( ) { index.close ( ) ; }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > list ( ) { namesUpdateLock.lock ( ) ; try { com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor visitor = new com.google.gerrit.server.git.LocalDiskRepositoryManager.ProjectVisitor ( basePath ) ; scanProjects ( visitor ) ; return java.util.Collections.unmodifiableSortedSet ( visitor.found ) ; } finally { namesUpdateLock.unlock ( ) ; } }
private static java.util.List < com.googlecode.prolog_cafe.lang.Term > eval ( com.google.gerrit.server.project.SubmitRuleEvaluator evaluator ) throws com.google.gerrit.server.project.RuleEvalException { return evaluator.evaluate ( ) . toJava ( ) ; }
com.google.gerrit.server.IdentifiedUser getUser ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( getControl ( ) . getCurrentUser ( ) ) ) ; }
private void initAllUsersRepo ( ) throws java.io.IOException { if ( ( allUsersRepo ) == null ) { allUsersRepo = openRepo ( allUsersName , true ) ; } }
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( final com.google.gerrit.reviewdb.Account account ) { com.google.gerrit.server.events.AccountAttribute who = new com.google.gerrit.server.events.AccountAttribute ( ) ; who.name = account.getFullName ( ) ; who.email = account.getPreferredEmail ( ) ; return who ; }
public void onSuccess ( T value ) { if ( failed ) { return ; } this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
private com.google.gerrit.acceptance.GerritServer startImpl ( @ com.google.gerrit.common.Nullable com.google.inject.Module testSysModule , java.lang.String ... additionalArgs ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( serverDesc , baseConfig , sitePaths.site_path , testSysModule , additionalArgs ) ; }
private boolean isHidden ( ) { return getProject ( ) . getState ( ) . equals ( com.google.gerrit.extensions.client.ProjectState.HIDDEN ) ; }
public synchronized java.util.Optional < com.google.gerrit.server.account.AccountState > maybeGet ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return java.util.Optional.ofNullable ( byId.get ( accountId ) ) ; }
private boolean isNoteDbEnabled ( org.eclipse.jgit.lib.Config cfg ) { return migration.readChanges ( ) ; }
private com.google.gitiles.doc.MarkdownToHtml file ( java.lang.String path ) { return new com.google.gitiles.doc.MarkdownToHtml ( com.google.gitiles.GitilesView.doc ( ) . copyFrom ( view ) . setPathPart ( path ) . build ( ) , config ) ; }
com.google.gerrit.server.git.NotesBranchUtil create ( org.eclipse.jgit.lib.Repository db , org.eclipse.jgit.lib.ObjectInserter inserter ) ;
public void invalidate ( final com.google.gerrit.client.reviewdb.Project p ) { if ( p != null ) { auto.remove ( p.getNameKey ( ) ) ; auto.remove ( p.getId ( ) ) ; } }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change change ) { return notesFactory.create ( change ) ; }
public final native java.lang.String name ( ) ;
protected void display ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { table.setAccountInfoCache ( result.getAccounts ( ) ) ; drafts.display ( result.getChanges ( ) ) ; table.finishDisplay ( true ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( revision.getParentKey ( ) , revision.getId ( ) ) ) ; }
public void set ( final T value ) { oldValue = com.google.gerrit.client.ui.ListenableOldValue.get ( ) ; super . set ( value ) ; oldValue = null ; }
boolean visibleForReplication ( ) { return ( ( getCurrentUser ( ) ) instanceof com.google.gerrit.server.ReplicationUser ) && ( ( ( com.google.gerrit.server.ReplicationUser ) ( getCurrentUser ( ) ) ) . isEverythingVisible ( ) ) ; }
public static void query ( java.lang.String query , java.util.Set < com.google.gerrit.extensions.client.ListChangesOption > options , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeList > callback ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeList.newQuery ( query ) ; com.google.gerrit.client.changes.ChangeList.addOptions ( call , options ) ; call.get ( callback ) ; }
public void init ( final javax.servlet.FilterConfig config ) { this . config = config ; }
java.lang.Runnable openCloseAll ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine ( cm ) ; if ( group != null ) { group.openCloseAll ( ) ; } } } ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) ; com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.server.git.validators.CommitValidationListener.class ) ; factory ( CommitValidators.Factory.class ) ; install ( new com.google.gerrit.server.git.GitModule ( ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( new com.google.gerrit.server.query.change.ExactTopicPredicate ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , topic ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { submitOnSelection = false ; if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { if ( nameTxt.isSuggestionListShowing ( ) ) { submitOnSelection = true ; } else { doAddNew ( ) ; } } }
private static void addLink ( final com.google.gerrit.client.ui.LinkMenuBar m , final java.lang.String text , final java.lang.String historyToken ) { m.addItem ( new com.google.gerrit.client.ui.LinkMenuItem ( text , historyToken ) ) ; }
public void listBranchesOfNonVisibleProject_NotFound ( ) throws java.lang.Exception { blockRead ( project , "refs/*" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , userSession.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/branches" ) ) . getStatusCode ( ) ) ; }
protected void configureServlets ( ) { rpc ( com.google.gerrit.httpd.rpc.SystemInfoServiceImpl.class ) ; install ( new com.google.gerrit.httpd.rpc.account.AccountModule ( ) ) ; install ( new com.google.gerrit.httpd.rpc.project.ProjectModule ( ) ) ; }
public static com.google.gerrit.server.project.SubmitRuleOptions.Builder defaults ( ) { return com.google.gerrit.server.project.SubmitRuleOptions.builder ( ) . fastEvalLabels ( false ) . allowClosed ( false ) . skipFilters ( false ) . rule ( null ) ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( searchBox.getText ( ) ) ) { searchBox.setText ( Gerrit.C.searchHint ( ) ) ; searchBox.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public java.util.List < com.google.gerrit.extensions.webui.TopMenu.MenuEntry > apply ( com.google.gerrit.server.config.ConfigResource resource ) { java.util.List < com.google.gerrit.extensions.webui.TopMenu.MenuEntry > entries = com.google.common.collect.Lists.newArrayList ( ) ; for ( com.google.gerrit.extensions.webui.TopMenu extension : extensions ) { entries.addAll ( extension.getEntries ( ) ) ; } return entries ; }
public void setId ( java.lang.String id ) { this . id = ( id != null ) ? com.google.gerrit.common.data.LabelType.checkId ( id ) : null ; }
public void onSuccess ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.account.ProjectWatchInfo > watchedProjects ) { display ( ) ; watchesTab.display ( watchedProjects ) ; }
private com.google.gerrit.server.CurrentUser getUser ( ) { return user ; }
public java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.fullName ( change.branch ) ; }
private static java.lang.String getUrl ( java.lang.String pluginName , int changeId , java.lang.Integer patchSetIdA , int patchSetIdB , java.lang.String fileName ) { return ( com.googlesource.gerrit.plugins.xdocs.SideBySideDiffPreviewWebLink.getUrl ( pluginName , changeId , patchSetIdA , patchSetIdB , fileName ) ) + ",unified" ; }
public void upsert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { upsertOne ( obj ) ; } }
public java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > filter ( java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > refs ) { return filter ( refs , false ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.project.ProjectResource > list ( ) { return list ; }
public static java.lang.String toPatchUnified ( final com.google.gerrit.reviewdb.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , id ) ; }
private java.lang.String readContentFromJson ( com.google.gerrit.acceptance.RestResponse r ) throws java.io.IOException { com.google.gson.stream.JsonReader jsonReader = new com.google.gson.stream.JsonReader ( r.getReader ( ) ) ; jsonReader.setLenient ( true ) ; return newGson ( ) . fromJson ( jsonReader , java.lang.String.class ) ; }
protected com.google.gitiles.FakeHttpServletResponse buildText ( java.lang.String path ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = buildResponse ( path , "format=text" , javax.servlet.http.HttpServletResponse.SC_OK ) ; org.junit.Assert.assertEquals ( "text/plain" , res.getHeader ( com.google.common.net.HttpHeaders.CONTENT_TYPE ) ) ; return res ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > onePredicate ( com.google.gerrit.server.query.change.LabelPredicate.Args args , java.lang.String label , int expVal ) { if ( expVal != 0 ) { return com.google.gerrit.server.query.change.LabelPredicate.equalsLabelPredicate ( args , label , expVal ) ; } return com.google.gerrit.server.query.change.LabelPredicate.noLabelQuery ( args , label ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { c.setCurrentPatchSet ( psInfo ) ; com.google.gerrit.server.ChangeUtil.updated ( c ) ; return c ; }
public void run ( ) { c.close ( ) ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (status:open OR status:merged)" ) ; org.junit.Assert.assertEquals ( query ( parse ( "status:new OR status:submitted OR status:draft OR status:merged" ) ) , rewrite.rewrite ( in ) ) ; }
public org.eclipse.jgit.lib.ObjectId getCommitId ( ) { return commit.getCommit ( ) . getId ( ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info ) ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { input.setFocus ( false ) ; show.setVisible ( true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; }
public void remove ( ) { if ( ! ( m.remove ( name.value ( ) , commandProvider ) ) ) { throw new java.lang.IllegalStateException ( java.lang.String.format ( "can not unregister command: %s" , name.value ( ) ) ) ; } }
public com.google.gerrit.server.change.ChangeEdits.Create create ( com.google.gerrit.server.change.ChangeResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException { return createFactory.create ( parent.getChange ( ) , id.get ( ) ) ; }
public void downloadOptional ( ) { this . required = false ; download ( ) ; }
protected void configure ( ) { bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( new org.eclipse.jgit.lib.Config ( ) ) ; bind ( com.google.gerrit.reviewdb.SystemConfig.class ) . toInstance ( systemConfig ) ; bind ( com.google.gerrit.server.config.AuthConfig.class ) ; bind ( com.google.gerrit.server.AnonymousUser.class ) ; }
public java.lang.String getCookie ( com.gitblit.models.UserModel model ) { return model.cookie ; }
public com.google.gerrit.server.notedb.NoteDbUpdateManager stage ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { return delegate.stage ( db , changeId ) ; }
public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { return groupMembershipFactory.create ( user.state ( ) . getInternalGroups ( ) ) ; }
void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) { java.util.SortedMap < java.lang.Integer , com.google.gerrit.client.diff.SideBySideCommentGroup > map = map ( side ) ; if ( ( map.get ( line ) ) == group ) { map.remove ( line ) ; } }
public void getCacheWithGerritPrefix ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( "/config/server/caches/gerrit-accounts" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; }
private static java.lang.String nameOf ( java.io.File jar ) { return com.google.gerrit.server.plugins.PluginLoader.nameOf ( jar.getName ( ) ) ; }
public void execute ( ) { content.setFocus ( true ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return getUser ( ) . equals ( user ) ? this : forUser ( user ) . asForChange ( cd , db ) ; }
void listBranches ( com.google.gerrit.client.reviewdb.Project.Id project , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.client.reviewdb.Branch > > callback ) ;
public com.google.gerrit.extensions.api.changes.Changes changes ( ) { return changes.get ( ) ; }
public void onPluginLoad ( ) { com.google.gerrit.plugin.client.Plugin.get ( ) . panel ( GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_COMMIT_INFO_BLOCK , new com.googlesource.gerrit.plugins.zuul.client.LabelPanel.Factory ( ) ) ; }
public void setUp ( ) { validator = new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeValidator ( null , new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE ) , null , null ) ; }
void onExpandAllComments ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.expandAllComments ( e.getValue ( ) ) ; view.getCommentManager ( ) . setExpandAllComments ( prefs.expandAllComments ( ) ) ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = notesFactory.create ( change ( ) ) ; } return notes ; }
public com.google.gerrit.server.patch.PatchList get ( final com.google.gerrit.client.reviewdb.Change change , final com.google.gerrit.client.reviewdb.PatchSet patchSet ) { return get ( change , patchSet , com.google.gerrit.client.data.PatchScriptSettings.Whitespace.IGNORE_NONE ) ; }
public void onSuccess ( final com.google.gerrit.client.account.AgreementInfo result ) { agreements.display ( result ) ; agreements.finishDisplay ( true ) ; }
public static org.commonmark.node.Node parse ( java.lang.String md ) { return md != null ? com.google.gitiles.doc.GitilesMarkdown.PARSER.parse ( md ) : null ; }
public com.google.gerrit.common.data.ReviewerResult call ( ) throws java.lang.Exception { com.google.gerrit.common.data.ReviewerResult result = removeReviewerFactory.create ( changeId , reviewerId ) . call ( ) ; result.setChange ( changeDetailFactory.create ( changeId ) . call ( ) ) ; return result ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; refresh ( ) ; }
public void evict ( final com.google.gerrit.client.reviewdb.Account.Id accountId ) { if ( accountId != null ) { self.remove ( accountId ) ; } }
private static java.lang.String format ( final java.lang.String name , final java.lang.String email ) { try { return new com.google.gerrit.server.mail.Address ( name , email ) . toHeaderString ( ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.RuntimeException ( "Cannot encode address" , e ) ; } }
private final native net.codemirror.lib.LineCharacter setLine ( int line ) ;
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.change.IndexRewriter.class ) ; listener ( ) . to ( com.google.gerrit.server.index.change.ChangeIndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
protected void configure ( ) { factory ( AbandonChange.Factory.class ) ; factory ( AddReviewer.Factory.class ) ; factory ( CommentDetailFactory.Factory.class ) ; factory ( PatchScriptFactory.Factory.class ) ; factory ( SaveDraft.Factory.class ) ; }
public void throwBadRequestTriggerOnBadQuery ( ) throws java.lang.Exception { setUpClient ( ) ; java.lang.String badQuery = "bad query" ; easyMock.resetAll ( ) ; easyMock.replayAll ( ) ; store.queryChangeEvents ( badQuery ) ; easyMock.verifyAll ( ) ; }
public void init ( ) throws java.io.IOException { super . init ( ) ; testRepo = new org.eclipse.jgit.junit.TestRepository ( repo ) ; validator = new com.googlesource.gerrit.plugins.uploadvalidator.DuplicatePathnameValidator ( null , null , null ) ; validator.setLocale ( java.util.Locale.ENGLISH ) ; }
private static boolean isNoSuchGroup ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . startsWith ( NoSuchGroupException.MESSAGE ) ) ; }
public void noHeadText ( ) throws java.lang.Exception { setUpSimpleRefs ( ) ; com.google.gitiles.FakeHttpServletResponse res = buildText ( "/repo/+refs/HEAD" ) ; org.junit.Assert.assertEquals ( "" , res.getActualBodyString ( ) ) ; }
public boolean isVisible ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) && ( ! ( isDraftVisible ( db ) ) ) ) { return false ; } return isRefVisible ( ) ; }
public void onDraftPublished ( com.google.gerrit.extensions.events.DraftPublishedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo c = event.getChange ( ) ; onEvent ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c.project ) , c._number , event.getWho ( ) . email ) ; }
private static com.jcraft.jsch.KeyPair genSshKey ( ) throws com.jcraft.jsch.JSchException { com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch ( ) ; return com.jcraft.jsch.KeyPair.genKeyPair ( jsch , KeyPair.RSA ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { change.nextPatchSetId ( ) ; return change ; }
public java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > getCcOnly ( ) { final java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > cc = new java.util.HashSet < com.google.gerrit.reviewdb.client.Account.Id > ( this . cc ) ; cc.removeAll ( reviewers ) ; return java.util.Collections.unmodifiableSet ( cc ) ; }
private java.util.List < com.google.gerrit.extensions.api.projects.DashboardInfo > dashboards ( ) throws java.lang.Exception { return gApi.projects ( ) . name ( project.get ( ) ) . dashboards ( ) . get ( ) ; }
public void shouldIndexInRemoteOnChangeIndexedEvent ( ) throws java.lang.Exception { org.easymock.EasyMock.expect ( restClientMock.index ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID ) ) . andReturn ( true ) ; replayAll ( ) ; indexEventHandler.onChangeIndexed ( cd ) ; verifyAll ( ) ; }
public void listOneGroupMember ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( GET_ONE ( "/groups/Administrators/members/admin" ) . name , admin.fullName ) ; }
public java.lang.String getUrl ( java.lang.String project ) { final java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r.append ( "repo download " ) ; r.append ( project ) ; return r.toString ( ) ; }
public java.util.Collection < com.google.gerrit.common.data.LabelType > getLabelSections ( ) { return labelSections.values ( ) ; }
protected final void logWarn ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.isWarnEnabled ( ) ) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.warn ( ( ( ( "[" + ( args.submissionId ) ) + "]" ) + msg ) , t ) ; } }
public final java.lang.String usage ( ) { return usage ; }
private com.google.reviewit.app.Gerrit getGerrit ( ) { if ( ( gerrit ) == null ) { gerrit = new com.google.reviewit.app.Gerrit ( getConfigManager ( ) ) ; } return gerrit ; }
private static int checkLimit ( int limit , java.lang.String name , int defaultValue ) { if ( limit == 0 ) { return defaultValue ; } com.google.common.base.Preconditions.checkArgument ( ( limit > 0 ) , "%s must be positive: %s" , name , limit ) ; return limit ; }
public Project.NameKey getProjectNameKey ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( refUpdate.project ) ; }
private static boolean isAllowed ( com.google.gerrit.gpg.CheckResult result , java.util.Collection < org.eclipse.jgit.transport.ReceiveCommand > commands ) { if ( com.google.gerrit.gpg.SignedPushPreReceiveHook.onlyMagicBranches ( commands ) ) { return result.isOk ( ) ; } else { return result.isTrusted ( ) ; } }
public static void createGroup ( java.lang.String groupName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( groupName ) . ifNoneMatch ( ) . data ( in ) . put ( cb ) ; }
public com.google.gerrit.server.project.RefControl create ( final com.google.gerrit.server.project.ProjectControl projectControl , final java.lang.String ref ) { return new com.google.gerrit.server.project.RefControl ( systemConfig , projectControl , ref ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.ACCOUNT_SVC.myAgreements ( new com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.account.AgreementInfo > ( ) { public void onSuccess ( final com.google.gerrit.client.account.AgreementInfo result ) { agreements.display ( result ) ; } } ) ; }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( action ) ; }
com.google.gerrit.lucene.LuceneChangeIndex getIndex ( com.google.gerrit.lucene.LuceneChangeIndex.Factory factory , com.google.gerrit.server.config.SitePaths sitePaths ) { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = ( ( singleVersion ) != null ) ? com.google.gerrit.server.index.ChangeSchemas.get ( singleVersion ) : com.google.gerrit.server.index.ChangeSchemas.getLatest ( ) ; return factory.create ( schema , base ) ; }
private void setStyleName ( final int row , final int col , final java.lang.String name ) { getFlexCellFormatter ( ) . setStyleName ( row , col , name ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult patch ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPatch.get ( ) . apply ( revision ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get patch" , e ) ; } }
private void assertGone ( javax.servlet.http.HttpServletRequest req ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse ( ) ; servlet.service ( req , res ) ; org.junit.Assert.assertEquals ( javax.servlet.http.HttpServletResponse.SC_GONE , res.getStatus ( ) ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.setAccountDiffPreference ( diffPref ) ; setEnabled ( true ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithStatus ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Change.Status status ) throws java.lang.Exception { return newChange ( repo , null , null , null , status , null ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.ChangeMessage input ) { return ( ( input.getAuthor ( ) ) == null ) && ( ( input.getWrittenOn ( ) . getTime ( ) ) >= ( before.getTime ( ) ) ) ; }
public void printJson ( final java.lang.StringBuffer sb , final java.util.Date o ) { sb.append ( '"' ) ; sb.append ( o ) ; sb.append ( '"' ) ; }
public void setPushCertificate ( java.lang.String cert ) { com.google.gerrit.server.change.b5 ReceiveCommits ; java.util.Set push ; on ( sets ) ; pushCert = cert ; }
public void testDefaultBehaviour ( ) { com.google.gerrit.common.data.GitWebType gitWebType = com.google.gerrit.common.data.GitWebType.fromName ( null ) ; org.junit.Assert.assertEquals ( "a/b" , gitWebType.replacePathSeparator ( "a/b" ) ) ; }
void merge ( com.google.gerrit.server.git.MergeOp.Factory mof , com.google.gerrit.reviewdb.client.Branch.NameKey branch ) ;
public static com.google.gerrit.client.rpc.RestApi vote ( int id , int reviewer , java.lang.String vote ) { return com.google.gerrit.client.changes.ChangeApi.reviewer ( id , reviewer ) . view ( "votes" ) . id ( vote ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.get ( ) . apply ( revision , null ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft ps" , e ) ; } }
protected java.lang.String getGerritUrl ( ) { return args.urlProvider.get ( ) ; }
private GitilesView.Builder parseRefsCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) { return com.google.gitiles.GitilesView.refs ( ) . setRepositoryName ( repoName ) . setPathPart ( path ) ; }
private org.eclipse.jgit.errors.ConfigInvalidException parseException ( java.lang.String fmt , java.lang.Object ... args ) { return new org.eclipse.jgit.errors.ConfigInvalidException ( ( ( ( "Change " + ( change.getId ( ) ) ) + ": " ) + ( java.lang.String.format ( fmt , args ) ) ) ) ; }
private com.google.gerrit.extensions.client.Comment.Range toRange ( com.google.gerrit.reviewdb.client.Comment.Range commentRange ) { com.google.gerrit.extensions.client.Comment.Range range = null ; if ( commentRange != null ) { range = new com.google.gerrit.extensions.client.Comment.Range ( ) ; range.startLine = commentRange.startLine ; range.startCharacter = commentRange.startChar ; range.endLine = commentRange.endLine ; range.endCharacter = commentRange.endChar ; } return range ; }
private java.lang.Class < ? > loadClass ( ) throws com.google.gwtorm.client.OrmException { try { return java.lang.Class.forName ( implClassName , false , classLoader ) ; } catch ( java.lang.ClassNotFoundException err ) { throw new com.google.gwtorm.client.OrmException ( "Cannot load generated class" , err ) ; } }
PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) != null ) ? base : revision ; }
public java.lang.String apply ( com.google.gerrit.server.git.CodeReviewCommit in ) { return in.getChange ( ) . getKey ( ) . abbreviate ( ) ; }
private boolean error ( java.lang.String msg , java.lang.Throwable t ) { problem ( msg ) ; com.google.gerrit.server.change.ConsistencyChecker.log.warn ( ( "Error in consistency check of change " + ( change.getId ( ) ) ) , t ) ; return false ; }
private void saveProjectConfig ( com.google.gerrit.server.git.ProjectConfig cfg ) throws java.lang.Exception { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create ( allProjects ) ; try { cfg.commit ( md ) ; } finally { md.close ( ) ; } }
public java.lang.String getHeader ( java.lang.String name ) { java.lang.String headerValue = headers.get ( name ) ; if ( headerValue != null ) { return headerValue ; } else { return super . getHeader ( name ) ; } }
protected com.google.gerrit.server.change.ChangeInserter newChange ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , null ) ; }
public static void ensureAllPatchSetsLoaded ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( db ) ; } }
private boolean canSkipValidation ( com.google.gerrit.server.config.PluginConfig config , java.lang.String validatorOp ) { return matchCriteria ( config , "skipValidation" , validatorOp , false ) ; }
protected void onOpenItem ( final com.google.gerrit.client.data.ChangeInfo c ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Link.toChange ( c ) , false ) ; com.google.gerrit.client.Gerrit.display ( new com.google.gerrit.client.changes.ChangeScreen ( c ) ) ; }
public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change ( dbProvider ) ; return ( change != null ) && ( ( change.getLastUpdatedOn ( ) . getTime ( ) ) < ( cut ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { super . onFailure ( caught ) ; enableForm ( ) ; }
public static void testMerge ( com.google.gerrit.server.git.MergeOp.Factory opFactory , com.google.gerrit.reviewdb.Change change ) { opFactory.create ( change.getDest ( ) ) . verifyMergeability ( change ) ; }
public boolean isConnectivityRequested ( com.google.gerrit.pgm.util.ConsoleUI ui , java.lang.String url ) { return ui.yesno ( false , "Test connectivity to %s" , url ) ; }
protected java.lang.Iterable < com.google.gerrit.sshd.SshKeyCacheEntry > missing ( final java.lang.String username ) { return java.util.Collections.emptyList ( ) ; }
private static void addFooter ( java.lang.StringBuilder sb , org.eclipse.jgit.revwalk.FooterKey footer , java.lang.Object value ) { sb.append ( footer.getName ( ) ) . append ( ": " ) . append ( value ) . append ( '\n' ) ; }
public void basePathWhenNotConfigured ( ) { com.google.common.truth.Truth.assertThat ( ( ( java.lang.Object ) ( repoCfg.getBasePath ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "someProject" ) ) ) ) ) . isNull ( ) ; }
public static com.google.gerrit.client.rpc.RestApi reviewers ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated , boolean ignoreUnchangedPatchSet ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , ignoreUnchangedPatchSet ) ; }
public void initFs ( ) throws java.io.IOException { uuid.initFs ( ) ; head.initFs ( ( ( long ) ( 0 ) ) ) ; tail.initFs ( ( ( long ) ( 1 ) ) ) ; }
protected void display ( final com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; }
public java.lang.String toString ( ) { try { return toHeaderString ( ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.RuntimeException ( "Cannot encode address" , e ) ; } }
public void setProject ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern.isEmpty ( ) ) ) ) { project = pattern ; } }
public void onActivityCreated ( android.os.Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; com.google.reviewit.app.Change change = getApp ( ) . getSortActionHandler ( ) . getCurrentChange ( ) ; setTitle ( getString ( R.string.abandon_change_title , change.info._number ) ) ; init ( change ) ; }
private PatchSet.Id getPatchSetId ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( db.changes ( ) . byKey ( new com.google.gerrit.reviewdb.client.Change.Key ( c.getChangeId ( ) ) ) ) . currentPatchSetId ( ) ; }
static com.google.gerrit.server.project.SectionMatcher wrap ( com.google.gerrit.common.data.AccessSection section ) { java.lang.String ref = section.getName ( ) ; if ( com.google.gerrit.common.data.AccessSection.isValid ( ref ) ) { return com.google.gerrit.server.project.SectionMatcher.wrap ( ref , section ) ; } else { return null ; } }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > apply ( java.util.List < ? > input ) throws java.lang.Exception { com.google.gerrit.pgm.RebuildNotedb.execute ( bru , repo ) ; com.google.gerrit.pgm.RebuildNotedb.execute ( bruAllUsers , allUsersRepo ) ; mpm.end ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public void stop ( ) { openIndex.close ( ) ; closedIndex.close ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { event.stopPropagation ( ) ; if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSearch ( ) ; } }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > replace ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
void maybeRegisterRenderEntireFileKeyMap ( net.codemirror.lib.CodeMirror cm ) { if ( prefs.renderEntireFile ( ) ) { cm.addKeyMap ( com.google.gerrit.client.diff.DiffScreen.RENDER_ENTIRE_FILE_KEYMAP ) ; } }
public void shouldThrowAnExceptionIfAnErrorOccurCreatingSharedDirectory ( ) throws java.lang.Exception { java.io.File configuredDirectory = tempFolder.newFile ( ) ; org.mockito.Mockito.when ( configMock.main ( ) . sharedDirectory ( ) ) . thenReturn ( configuredDirectory.getAbsolutePath ( ) ) ; module.getSharedDirectory ( configMock ) ; }
private void setupDefaultOperations ( ) { new org.eclipse.example.calc.internal.operations.Equals ( ) ; new org.eclipse.example.calc.internal.operations.Minus ( ) ; new org.eclipse.example.calc.internal.operations.Plus ( ) ; new org.eclipse.example.calc.internal.Divide ( ) ; new org.eclipse.example.calc.internal.operations.Square ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( 1 ) ; }
private static com.google.gerrit.common.data.PermissionRule deny ( com.google.gerrit.common.data.GroupReference group ) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule ( group ) ; rule.setDeny ( true ) ; return rule ; }
public void putApproval ( java.lang.String label , short value ) { approvals.put ( label.toLowerCase ( ) , value ) ; }
public static void query ( java.lang.String query , java.util.EnumSet < com.google.gerrit.extensions.client.ListChangesOption > options , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeList > callback ) { com.google.gerrit.client.rpc.RestApi call = com.google.gerrit.client.changes.ChangeList.newQuery ( query ) ; com.google.gerrit.client.changes.ChangeList.addOptions ( call , options ) ; call.get ( callback ) ; }
void abandonChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public boolean canPublish ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) && ( isOwner ( ) ) ) && ( isVisible ( db ) ) ; }
public void run ( ) { if ( ! ( prefs.renderEntireFile ( ) ) ) { cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; } cmA.refresh ( ) ; cmB.refresh ( ) ; }
protected Project.NameKey getProjectName ( ) { return com.google.gerrit.server.notedb.ChangeNotes.getProjectName ( getChange ( ) ) ; }
default com.google.common.collect.ImmutableSet < com.google.gerrit.server.account.externalids.ExternalId > byEmail ( java.lang.String email ) throws java.io.IOException { return byEmails ( email ) . get ( email ) ; }
public boolean canPerform ( java.lang.String permissionName ) { if ( GlobalCapability.ADMINISTRATE_SERVER.equals ( permissionName ) ) { return canAdministrateServer ( ) ; } else { return ! ( access ( permissionName ) . isEmpty ( ) ) ; } }
< I > com.google.gerrit.extensions.restapi.RestModifyView < P , I > create ( P parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public com.google.gerrit.server.CurrentUser getUser ( ) { return user ; }
public java.util.List < com.google.gerrit.extensions.api.projects.TagInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return listTags ( ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = cd.change ( dbProvider ) ; return ( change != null ) && ( ( change.getSortKey ( ) . compareTo ( getValue ( ) ) ) < 0 ) ; }
private static boolean isInvalidXSRF ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwt.user.client.rpc.InvocationException ) && ( caught.getMessage ( ) . equals ( JsonConstants.ERROR_INVALID_XSRF ) ) ; }
public com.google.gerrit.pgm.init.api.AllProjectsConfig load ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { java.io.File path = getPath ( ) ; if ( path != null ) { try ( org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository ( path ) ) { load ( repo ) ; } } return this ; }
private static java.lang.StackTraceElement [ ] getTrace ( com.google.gwt.core.client.JavaScriptException err ) { com.google.gwt.core.client.impl.StackTraceCreator.fillInStackTrace ( err ) ; return err.getStackTrace ( ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change.Id id ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.change.ChangeIndexer.DeleteTask ( id ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
protected void approve ( java.lang.String id ) throws java.lang.Exception { gApi.changes ( ) . id ( id ) . revision ( "current" ) . review ( new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . label ( "Code-Review" , 2 ) ) ; }
public static java.lang.String toPatchSideBySide ( final com.google.gerrit.client.reviewdb.Patch.Id id ) { return com.google.gerrit.client.Link.toPatch ( "sidebyside" , id ) ; }
public void setPatchSetId ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { com.google.common.base.Preconditions.checkArgument ( ( ( psId == null ) || ( psId.getParentKey ( ) . equals ( getChange ( ) . getKey ( ) ) ) ) ) ; this . psId = psId ; }
public void stop ( ) { openIndex.close ( ) ; closedIndex.close ( ) ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { setApiHeaders ( req , res , com.google.gitiles.FormatType.TEXT ) ; return res.getWriter ( ) ; }
public java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > onCommitReceived ( com.google.gerrit.server.events.CommitReceivedEvent receiveEvent ) throws com.google.gerrit.server.git.validators.CommitValidationException { throw new com.google.gerrit.server.git.validators.CommitValidationException ( com.googlesource.gerrit.plugins.readonly.ReadOnly.READ_ONLY_MSG ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail detail ) { com.google.gerrit.client.changes.ChangeDetailCache.setChangeDetail ( detail ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.Change change ) { return create ( refControl , notesFactory.create ( db , change ) ) ; }
public boolean hasTrailingEdit ( int idx ) ;
public void onFailure ( java.lang.Throwable caught ) { loadSubmitType ( canSubmit ) ; }
public com.google.gerrit.reviewdb.client.Change change ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( change ) == null ) { change = db.get ( ) . changes ( ) . get ( legacyId ) ; } return change ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.account ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.account ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( gStarting ) ; }
public com.google.gerrit.pgm.util.LibraryDownloader setJarUrl ( final java.lang.String url ) { this . jarUrl = url ; return this ; }
com.google.gerrit.server.query.change.ChangeData convert ( com.google.gerrit.reviewdb.client.PatchSet t ) { return new com.google.gerrit.server.query.change.ChangeData ( t.getId ( ) . getParentKey ( ) ) ; }
public void panel ( com.google.gerrit.client.GerritUiExtensionPoint extensionPoint , com.google.gerrit.plugin.client.extension.Panel.EntryPoint entry ) { panel ( extensionPoint.name ( ) , com.google.gerrit.plugin.client.Plugin.wrap ( entry ) ) ; }
com.google.gerrit.gpg.GerritPushCertificateChecker create ( com.google.gerrit.server.IdentifiedUser expectedUser , boolean checkNonce ) ;
public void onUnload ( ) { super . onUnload ( ) ; if ( ( headerClick ) != null ) { headerClick.removeHandler ( ) ; headerClick = null ; } }
static com.google.gerrit.server.account.externalids.ExternalId create ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email , @ com.google.gerrit.common.Nullable java.lang.String hashedPassword , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId blobId ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings.emptyToNull ( email ) , com.google.common.base.Strings.emptyToNull ( hashedPassword ) , blobId ) ; }
private java.util.List < com.google.gerrit.server.patch.PatchListEntry > getCurrentPatches ( java.lang.String changeId ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( getKey ( null , getCurrentRevisionId ( changeId ) ) ) . getPatches ( ) ; }
private static javax.net.ssl.SSLSocketFactory sslFactory ( final boolean verify ) { if ( verify ) { return ( ( javax.net.ssl.SSLSocketFactory ) ( javax.net.ssl.SSLSocketFactory.getDefault ( ) ) ) ; } else { return ( ( javax.net.ssl.SSLSocketFactory ) ( com.google.gerrit.util.ssl.BlindSSLSocketFactory.getDefault ( ) ) ) ; } }
protected final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers ( com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch watch = new com.google.gerrit.server.mail.ProjectWatch ( args , project , projectState , changeData ) ; return watch.getWatchers ( type ) ; }
private void assertCanSubmit ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canSubmit ( ) ) . named ( ( "can submit " + ref ) ) . isTrue ( ) ; }
public static net.codemirror.lib.LineCharacter create ( int line , int ch ) { net.codemirror.lib.LineCharacter lineCh = createObject ( ) . cast ( ) ; return lineCh.setLine ( line ) . setCh ( ch ) ; }
void select ( com.google.gerrit.client.change.ReplyBox.LabelRadioButton b ) { selected = b ; labelsTable.setText ( row , labelHelpColumn , ( ( b.value ) != 0 ? b.text : "" ) ) ; }
public void setFocus ( boolean focused ) { focusy.setFocus ( focused ) ; }
void registerKeys ( ) { register = true ; if ( ( table ) != null ) { table.setRegisterKeys ( true ) ; } }
public com.google.gerrit.server.query.Predicate < T > copy ( final java.util.Collection < ? extends com.google.gerrit.server.query.Predicate < T > > children ) { return new com.google.gerrit.server.query.AndPredicate < T > ( children ) ; }
public static org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when , org.eclipse.jgit.lib.PersonIdent serverIdent , java.lang.String anonymousCowardName ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
void replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { writer.updateDocument ( term , doc ) ; commit ( ) ; }
protected com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { return com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle.create ( com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk ( repo ) , readRef ( repo ) ) ; }
public java.lang.String id ( ) { return java.lang.Integer.toString ( change.getChange ( ) . getId ( ) . get ( ) ) ; }
private void logWarn ( java.lang.String msg , java.lang.Throwable t ) { if ( com.google.gerrit.server.git.MergeOp.log.isWarnEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.warn ( ( ( ( "[" + ( submissionId ) ) + "]" ) + msg ) , t ) ; } }
private void assertBadRequest ( com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest < com.google.gerrit.extensions.api.projects.TagInfo > req ) throws java.lang.Exception { try { req.get ( ) ; org.junit.Assert.fail ( "Expected BadRequestException" ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException e ) { } }
public void noVerificationTest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c = createChange ( ) ; java.util.Map < java.lang.String , com.googlesource.gerrit.plugins.verifystatus.common.VerificationInfo > infos = getVerifications ( c ) ; com.google.common.truth.Truth.assertThat ( infos ) . hasSize ( 0 ) ; }
private void asScript ( final org.w3c.dom.Element scriptNode ) { scriptNode.removeAttribute ( "id" ) ; scriptNode.setAttribute ( "type" , "text/javascript" ) ; scriptNode.setAttribute ( "language" , "javascript" ) ; }
private void setNew ( com.google.gerrit.reviewdb.Change c , com.google.gerrit.reviewdb.ChangeMessage msg ) { sendMergeFail ( c , msg , true ) ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; install ( new com.google.gerrit.pgm.util.BatchGitModule ( ) ) ; install ( new com.google.gerrit.server.notedb.NoteDbModule ( ) ) ; bind ( com.google.gerrit.server.notedb.NotesMigration.class ) . toInstance ( com.google.gerrit.server.notedb.NotesMigration.allEnabled ( ) ) ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( final java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , java.util.Collections.< org.eclipse.jgit.diff.Edit > emptyList ( ) , 0 , 0 , 0 ) ; }
private java.lang.String createMyChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , user.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
private void onPatchSetCreated ( final com.google.gerrit.server.events.PatchSetCreatedEvent event ) { com.google.gerrit.server.data.ChangeAttribute change = event.change.get ( ) ; if ( ! ( atomicityHelper.isAtomicReview ( change ) ) ) { return ; } processNewAtomicPatchSet ( change ) ; }
private static java.lang.String getPrefixedName ( java.lang.String prefix , java.lang.String name ) { return ( "--" + prefix ) + name ; }
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance ( com.google.gerrit.server.project.ProjectState projectState , java.lang.String pluginName ) { return projectState.getConfig ( ( pluginName + ( com.google.gerrit.server.config.PluginConfigFactory.EXTENSION ) ) ) . getWithInheritance ( ) ; }
boolean isVisible ( ) { if ( ( isVisible ) == null ) { isVisible = ( ( getUser ( ) . isInternalUser ( ) ) || ( canPerform ( Permission.READ ) ) ) && ( isProjectStatePermittingRead ( ) ) ; } return isVisible ; }
public com.google.gerrit.server.project.ChangeControl getControl ( ) { return getChangeResource ( ) . getControl ( ) ; }
protected PushOneCommit.Result createChange ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
public void listBranchesOfEmptyProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.rest.project.BranchAssert.assertBranches ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "HEAD" , null , false ) , com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "refs/meta/config" , null , false ) ) , list ( ) . get ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { save.setEnabled ( true ) ; registerNewEmail.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public java.lang.String nullToEmpty ( java.lang.String str ) { return str == null ? "" : str ; }
protected org.eclipse.jgit.junit.TestRepository < ? > createProjectWithPush ( java.lang.String name , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws java.lang.Exception { return createProjectWithPush ( name , parent , getSubmitType ( ) ) ; }
public com.google.gerrit.reviewdb.client.CurrentSchemaVersion getSchemaVersion ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.server.ReviewDb c = open ( ) ; try { return c.schemaVersion ( ) . get ( new com.google.gerrit.reviewdb.client.CurrentSchemaVersion.Key ( ) ) ; } finally { c.close ( ) ; } }
protected void onLoad ( ) { enableForm ( false ) ; saveProject.setEnabled ( false ) ; super . onLoad ( ) ; refresh ( ) ; }
com.google.gerrit.lucene.LuceneChangeIndex create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String base ) ;
public static java.lang.String toProjectAdmin ( final com.google.gerrit.client.reviewdb.Project.Id id , final java.lang.String tab ) { return ( ( "admin,project," + ( id.toString ( ) ) ) + "," ) + tab ; }
public com.google.gerrit.client.data.GerritConfig get ( ) { try { return create ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.inject.ProvisionException ( "Cannot construct GerritConfig" , e ) ; } }
com.google.gerrit.client.reviewdb.Branch byId ( com.google.gerrit.client.reviewdb.Branch.Id id ) throws com.google.gwtorm.client.OrmException ;
private java.lang.String newChange ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push.to ( git , "refs/for/master" ) . getChangeId ( ) ; }
com.google.gerrit.server.change.ChangeEdits.Create create ( com.google.gerrit.reviewdb.client.Change change , java.lang.String path ) ;
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.AccountSecurityImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) ) ; }
private static java.util.List < com.google.gwtorm.schema.ColumnModel > sortColumns ( java.util.Collection < com.google.gwtorm.schema.ColumnModel > cols ) { java.util.ArrayList < com.google.gwtorm.schema.ColumnModel > list = new java.util.ArrayList < com.google.gwtorm.schema.ColumnModel > ( cols ) ; java.util.Collections.sort ( list , com.google.gwtorm.schema.java.ProtoFileGenerator.COLUMN_COMPARATOR ) ; return list ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > commit ( org.eclipse.jgit.lib.ObjectId id ) { return new com.google.gerrit.server.query.change.ExactCommitPredicate ( id ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "a.b" , value = "c" ) } ) public void testMultiple ( ) { com.google.common.truth.Truth.assertThat ( serverConfig.getString ( "x" , null , "y" ) ) . isEqualTo ( "z" ) ; com.google.common.truth.Truth.assertThat ( serverConfig.getString ( "a" , null , "b" ) ) . isEqualTo ( "c" ) ; }
com.google.gerrit.client.reviewdb.Branch byName ( com.google.gerrit.client.reviewdb.Branch.NameKey name ) throws com.google.gwtorm.client.OrmException ;
public void setActive ( boolean active ) { myTable.setActive ( active ) ; }
public void sendBytes ( byte [ ] what ) { rp.sendBytes ( what ) ; }
private boolean matches ( com.google.gwtorm.nosql.IndexFunction < T > f , T obj , byte [ ] exp ) { return ( f.includes ( obj ) ) && ( java.util.Arrays.equals ( exp , indexRowKey ( f , obj ) ) ) ; }
com.googlesource.gerrit.plugins.importer.GerritApi create ( java.lang.String url , java.lang.String user , java.lang.String pass ) { if ( url == null ) { return localApi ; } else { return new com.googlesource.gerrit.plugins.importer.RemoteApi ( url , user , pass ) ; } }
public void warning ( java.lang.String msg ) { java.lang.System.err.println ( msg ) ; java.lang.System.err.flush ( ) ; }
public void nullCommitMessage ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( null ) ) . isEmpty ( ) ; }
java.util.Set < com.google.gerrit.server.account.externalids.ExternalId > all ( org.eclipse.jgit.lib.ObjectId rev ) throws java.io.IOException { checkReadEnabled ( ) ; try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsersName ) ) { return com.google.gerrit.server.account.externalids.ExternalIdReader.all ( repo , rev ) ; } }
public int getTabIndex ( ) { return focusy.getTabIndex ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo c ) { project.setInnerText ( c.project ( ) ) ; com.google.gwtexpui.safehtml.client.SafeHtml.setInnerHTML ( filePath , com.google.gerrit.client.diff.Header.formatPath ( path , null , null ) ) ; }
public boolean isVisibleToAll ( ) { return true ; }
public void parseInvalidPrimaryStorage ( ) { try { com.google.gerrit.server.notedb.NoteDbChangeState.parse ( new com.google.gerrit.reviewdb.client.Change.Id ( 1 ) , "X" ) ; com.google.common.truth.Truth.assert_ ( ) . fail ( "expected parse to fail" ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( accountId , getChange ( ) . getId ( ) ) ; }
private void loadAccountsSection ( org.eclipse.jgit.lib.Config rc , java.util.Map < java.lang.String , com.google.gerrit.common.data.GroupReference > groupsByName ) { accountsSection = new com.google.gerrit.server.git.AccountsSection ( ) ; accountsSection.setSameGroupVisibility ( loadPermissionRules ( rc , com.google.gerrit.server.git.ProjectConfig.ACCOUNTS , null , com.google.gerrit.server.git.ProjectConfig.KEY_SAME_GROUP_VISIBILITY , groupsByName , false ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( java.lang.String ignore ) throws java.lang.Exception { return getConfig ( ignore , true ) ; }
private GitilesView.Builder parseDescribeCommand ( javax.servlet.http.HttpServletRequest req , java.lang.String repoName , java.lang.String path ) { if ( com.google.gitiles.ViewFilter.isEmptyOrSlash ( path ) ) { return null ; } return com.google.gitiles.GitilesView.describe ( ) . setRepositoryName ( repoName ) . setPathPart ( path ) ; }
void addLine ( int line ) { dst.addLine ( line , src.getLine ( line ) ) ; }
public void flush_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH , java.util.Arrays.asList ( "projects" ) ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
private com.google.gerrit.extensions.common.SubmitType getSubmitType ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.server.project.SubmitRuleEvaluator ( cd ) . getSubmitType ( ) ; if ( ( r.status ) != ( SubmitTypeRecord.Status.OK ) ) { return null ; } return r.type ; }
private static void assertExpectedIdsUsed ( java.sql.PreparedStatement statement , int ... ids ) throws java.sql.SQLException { for ( int id : ids ) { org.mockito.Mockito.verify ( statement ) . setInt ( 1 , id ) ; } }
private void fail ( com.google.gerrit.reviewdb.client.Change change , java.lang.Throwable t ) { com.google.gerrit.pgm.Reindex.log.error ( ( "Failed to index change " + ( change.getId ( ) ) ) , t ) ; ok.set ( false ) ; failed.update ( 1 ) ; }
private final native void setId ( java.lang.String id ) ;
private void assertNoMembers ( java.lang.String group ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( gApi.groups ( ) . id ( group ) . members ( ) . isEmpty ( ) ) ; }
javax.servlet.http.HttpServlet getPolyGerritUiIndexServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.SingleFileServlet ( cache , polyGerritBasePath ( ) . resolve ( "index.html" ) , getPaths ( ) . isDev ( ) ) ; }
public com.google.gerrit.acceptance.PushOneCommit.Result rm ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.rm ( git , fileName ) ; return execute ( git , ref ) ; }
public final boolean submittable ( ) { init ( ) ; getMissingLabelIndex ( ) ; return _submittable ( ) ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( relatedChangesTab ) == null ) { relatedChangesTab = createTab ( Resources.C.relatedChanges ( ) , Resources.C.relatedChangesTooltip ( ) ) ; } return relatedChangesTab ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAddReviewers ( reviewerIds , id , db , txn ) ; }
protected void configure ( ) { install ( copyConfigModule ) ; install ( cm ) ; install ( sm ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) , new com.google.gerrit.client.change.ChangeScreen2 ( changeId , null , null , false , true ) ) ; }
protected boolean canPerform ( final com.google.gerrit.client.data.ProjectCache.Entry project , final com.google.gerrit.client.reviewdb.ApprovalCategory.Id actionId , final short val ) { return com.google.gerrit.client.rpc.BaseServiceImplementation.canPerform ( getGroups ( ) , project , actionId , val , false ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > project ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) { return new com.google.gerrit.server.query.change.ProjectPredicate ( projectName.get ( ) ) ; }
public com.google.gerrit.client.admin.PermissionEditor create ( int index ) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor ( projectAccess.getProjectName ( ) , readOnly , value , projectAccess.getLabelTypes ( ) ) ; permissionContainer.insert ( subEditor , index ) ; return subEditor ; }
java.lang.Runnable toggleA ( ) { return ( ) -> { setVisibleA ( ( ! ( isVisibleA ( ) ) ) ) ; } ; }
public void testExclamationMark ( ) { com.google.gerrit.common.data.GitWebType gitWebType = com.google.gerrit.common.data.GitWebType.fromName ( null ) ; gitWebType.setPathSeparator ( '!' ) ; org.junit.Assert.assertEquals ( "a!b" , gitWebType.replacePathSeparator ( "a/b" ) ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ProjectEvent ) { database.storeEvent ( ( ( com.google.gerrit.server.events.ProjectEvent ) ( event ) ) ) ; } }
public void basicTextFormattingWorks ( ) throws java.io.IOException { java.lang.String raw = "_italic_ *bold* `monospace`" ; java.lang.String formatted = "<em>italic</em> <strong>bold</strong> <code>monospace</code>" ; org.junit.Assert.assertEquals ( org.apache.commons.lang.StringUtils.countMatches ( formatter.format ( null , null , null , null , cfg , raw ) , formatted ) , 1 ) ; }
private org.eclipse.jgit.lib.ObjectInserter getObjectInserter ( ) throws java.io.IOException { initRepository ( ) ; return inserter ; }
public java.lang.Void call ( ) throws java.lang.Exception { rebuild ( change , bru , bruForDrafts , changeRepo , allUsersRepo ) ; return null ; }
public com.google.gerrit.client.ErrorDialog setText ( final java.lang.String t ) { BRANCH ( bf5cfe ) ; com.google.gerrit.client.Fix error ; com.google.gerrit.client.not honoring ; com.google.gerrit.client.line breaks ; text.setText ( t ) ; return this ; }
public void testDefaultBehaviour ( ) { com.google.gerrit.common.data.GitWebType gitWebType = com.google.gerrit.common.data.GitWebType.fromName ( null ) ; assertEquals ( "a/b" , gitWebType.replacePathSeparator ( "a/b" ) ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > get ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ReadViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.GET , "/" ) ) ; }
public void onValueChange ( final com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { com.google.gerrit.client.Gerrit.display ( event.getValue ( ) ) ; }
java.lang.String getAvatarUrl ( ) throws com.google.gerrit.extensions.restapi.RestApiException ;
private static final native void init ( java.lang.String d , java.lang.String e , java.lang.String t , java.lang.String r , java.lang.String o ) ;
com.google.gerrit.server.project.ProjectState create ( com.google.gerrit.reviewdb.Project project , java.util.Collection < com.google.gerrit.reviewdb.RefRight > localRights , com.google.gerrit.server.project.ProjectState.InheritedRights inheritedRights ) ;
void onDeleteChange ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteChange ( ) ) ) { com.google.gerrit.client.change.ChangeActions.delete ( changeId , deleteChange ) ; } }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public final boolean showWhitespaceErrors ( ) { return get ( "show_whitespace_errors" , true ) ; }
private static java.lang.String status ( com.google.gerrit.reviewdb.client.Change.Status status ) { switch ( status ) { case ABANDONED : return "status:abandoned" ; case MERGED : return "status:merged" ; case NEW : case SUBMITTED : default : return "status:open" ; } }
protected com.google.gwt.user.client.ui.Panel getButtonPanel ( ) { if ( ( buttons ) == null ) { buttons = new com.google.gwt.user.client.ui.FlowPanel ( ) ; buttons.setStyleName ( Gerrit.RESOURCES.css ( ) . commentPanelButtons ( ) ) ; content.add ( buttons ) ; } return buttons ; }
java.lang.Runnable toggleA ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { setVisibleA ( ( ! ( isVisibleA ( ) ) ) ) ; } } ; }
private static com.google.gerrit.reviewdb.AuthType toType ( final org.eclipse.jgit.lib.Config cfg ) { if ( com.google.gerrit.server.config.AuthConfig.isBecomeAnyoneEnabled ( ) ) { return com.google.gerrit.reviewdb.AuthType.DEVELOPMENT_BECOME_ANY_ACCOUNT ; } return com.google.gerrit.server.config.ConfigUtil.getEnum ( cfg , "auth" , null , "type" , AuthType.OPENID ) ; }
public void run ( ) { try { java.nio.file.Files.walkFileTree ( gitDir.toPath ( ) , new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover ( ) ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn ( "Exception occured while trying to delete trash folders" , e ) ; } }
void setReviewed ( boolean reviewed ) { checkBox.setValue ( true , true ) ; }
public final java.lang.String [ ] aliases ( ) { return new java.lang.String [ 0 ] ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.accounts.Accounts.class ) . to ( com.google.gerrit.server.api.accounts.AccountsImpl.class ) ; factory ( AccountApiImpl.Factory.class ) ; factory ( GpgKeyApiImpl.Factory.class ) ; }
void sendError ( int status , java.lang.String message ) throws java.io.IOException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.log.error ( message ) ; res.setStatus ( status ) ; gson.toJson ( new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.Error ( message ) , getWriter ( ) ) ; getWriter ( ) . flush ( ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
private void deleteDraftChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.IOException { try { changeUtil.deleteDraftChange ( patchSetId ) ; } catch ( com.google.gerrit.server.project.NoSuchChangeException e ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( e.getMessage ( ) ) ; } }
public final boolean isOpen ( ) { switch ( getStatus ( ) ) { case NEW : case SUBMITTED : case DRAFT : return true ; default : return false ; } }
public static com.google.gerrit.extensions.common.PathSubject assertThat ( java.nio.file.Path path ) { return com.google.common.truth.Truth.assertAbout ( com.google.gerrit.extensions.common.PathSubject.PATH_SUBJECT_FACTORY ) . that ( path ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.reviewdb.client.Change change ) { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet patchset ) { if ( patchset.isDraft ( ) ) { patchset.setDraft ( false ) ; } return null ; }
public com.google.gerrit.client.data.AccountInfo getOwner ( ) { return owner ; }
public void addRelatedLink ( java.lang.String issueId , java.net.URL relatedUrl , java.lang.String description ) throws java.io.IOException { if ( log.isDebugEnabled ( ) ) { log.debug ( "addRelatedLink({},{},{})" , new java.lang.Object [ ] { issueId , relatedUrl , description } ) ; } }
private < S extends com.google.gwt.event.shared.EventHandler > void fireEvent ( com.google.gwtjsonrpc.client.BaseRpcEvent < S > e ) { e.call = this ; com.google.gwtjsonrpc.client.JsonUtil.fireEvent ( e ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = com.google.gerrit.testutil.InMemoryDatabase.newDatabase ( ) ; }
private static void assertNotRefPart ( java.lang.String refName ) { org.junit.Assert.assertNull ( Account.Id.fromRefPart ( refName ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; }
private com.google.gitiles.doc.MarkdownToHtml readme ( com.google.gitiles.GitilesView v ) { return new com.google.gitiles.doc.MarkdownToHtml ( v , config ) . setReadme ( true ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.server.http.RequestCleanupFilter.class ) ; filter ( "/*" ) . through ( com.google.gerrit.server.http.UrlRewriteFilter.class ) ; }
public < K , V > com.google.common.cache.Cache < K , V > build ( com.google.gerrit.server.cache.CacheBinding < K , V > def ) { return com.github.benmanes.caffeine.guava.CaffeinatedGuava.build ( create ( def , false ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { dialogBox.hide ( ) ; usernameTxt.setValue ( "" ) ; sshKeyTxt.setValue ( "" ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.git.RefCache refs ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change , false , refs ) . load ( ) ; }
public java.lang.String getText ( ) { java.lang.String s = nameTxtBox.getText ( ) ; if ( ( s == null ) || ( s.equals ( Util.C.defaultAccountName ( ) ) ) ) { s = "" ; } return s ; }
public void addChangeMessage ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , com.google.gerrit.reviewdb.client.ChangeMessage changeMessage ) throws com.google.gwtorm.server.OrmException { if ( changeMessage != null ) { update.setChangeMessage ( changeMessage.getMessage ( ) ) ; db.changeMessages ( ) . insert ( java.util.Collections.singleton ( changeMessage ) ) ; } }
public void clear ( ) { setCat ( null ) ; setName ( Util.C.defaultAccountGroupName ( ) ) ; setReference ( "" ) ; }
public static java.lang.String toPatch ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.config.SitePaths.class ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "repo" ) ) ) ; }
public void onReloadPlugin ( com.google.gerrit.server.plugins.Plugin oldPlugin , com.google.gerrit.server.plugins.Plugin newPlugin ) { com.google.inject.servlet.GuiceFilter filter = load ( newPlugin ) ; if ( filter != null ) { plugins.put ( newPlugin.getName ( ) , filter ) ; } }
public void suggestReviewersNoResult1 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( admin ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
private boolean isLdapUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return ( helper.hasLdapConfiguration ( ) ) && ( uuid.get ( ) . startsWith ( com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID ) ) ; }
Project.NameKey getProjectName ( ) { return project.getProject ( ) . getNameKey ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSave ( ) ; }
public void batchAbandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { batchAbandon ( updateFactory , project , user , controls , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
private static void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd ) { com.google.gerrit.server.git.ReceiveCommits.reject ( cmd , "prohibited by Gerrit" ) ; }
public com.google.gerrit.server.patch.PatchList get ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException ;
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; refresh ( false ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.Lifecycle.class ) ; }
private static int find ( java.lang.String [ ] files , java.lang.String p ) { int r = java.util.Arrays.binarySearch ( files , p ) ; return r < 0 ? - ( r + 1 ) : r ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.account.AccountProjectWatchInfo > result ) { watches.display ( result ) ; watches.finishDisplay ( true ) ; }
public void cleanup ( ) { sshSession.close ( ) ; db.close ( ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { this . ghLoginProvider = new com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.Provider ( ) ; }
protected void run ( ) { for ( com.googlesource.gerrit.plugins.replication.Destination d : config.getDestinations ( FilterType.ALL ) ) { if ( matches ( d.getRemoteConfig ( ) . getName ( ) ) ) { printRemote ( d , detail ) ; } } }
public com.google.gerrit.server.plugins.PluginResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.plugins.Plugin p = loader.get ( id.get ( ) ) ; if ( p == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return new com.google.gerrit.server.plugins.PluginResource ( p ) ; }
public void index ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { indexAsync ( change ) . checkedGet ( ) ; }
public final java.lang.Short value ( ) { return value ; }
public void preDisplay ( final java.util.List < com.google.gerrit.common.data.GroupDetail > result ) { groups.display ( result ) ; }
public boolean canRebase ( ) { return ( isOwner ( ) ) || ( getRefControl ( ) . canSubmit ( ) ) ; }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > developer ( com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > ... fields ) { return new com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > ( false , java.util.Arrays.asList ( fields ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( true ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byProjectCommit ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String hash ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( com.google.gerrit.server.query.change.InternalChangeQuery.project ( project ) , com.google.gerrit.server.query.change.InternalChangeQuery.commit ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , hash ) ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initUUID ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupOptions ( ) ; initGroupType ( ) ; }
private void removeAccountIdLock ( com.google.gerrit.reviewdb.client.Account.Id id ) { synchronized ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.accountIdLocks ) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.accountIdLocks.remove ( id ) ; } }
public final java.lang.String getName ( ) { return name ; }
private void setDefaultFields ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { setDefaultConfig ( filterConfig ) ; setDefaultRenderer ( filterConfig ) ; setDefaultUrls ( ) ; setDefaultAccess ( ) ; setDefaultVisibilityCache ( ) ; setDefaultTimeCache ( ) ; setDefaultBlameCache ( ) ; setDefaultGitwebRedirect ( ) ; setDefaultDateFormatterBuilder ( ) ; }
java.net.SocketAddress getRemoteAddress ( ) { return remoteAddress ; }
public void setValue ( T value ) { asEditor ( ) . setValue ( value ) ; }
public com.googlesource.gerrit.plugins.github.oauth.GitHubLogin get ( javax.servlet.http.HttpServletRequest request ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin login = super . get ( request ) ; login.initOAuthCookie ( request ) ; return login ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( java.lang.String ignore ) throws java.lang.Exception { return getConfig ( ignore , true , true ) ; }
public static java.lang.String toPatch ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , side , line ) ; }
public void display ( java.lang.String commitMessage , com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor ) { display ( null , null , false , commitMessage , commentLinkProcessor ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , 0 , null ) ; }
public void put ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , com.google.gerrit.common.data.GroupReference reference ) { byUUID.put ( uuid , reference ) ; }
public boolean equals ( final java.lang.Object obj ) { if ( obj instanceof com.google.gerrit.reviewdb.TrackingId ) { final com.google.gerrit.reviewdb.TrackingId tr = ( ( com.google.gerrit.reviewdb.TrackingId ) ( obj ) ) ; return tr.key.equals ( tr.key ) ; } return false ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return getRefControl ( ) . getUser ( ) ; }
private void blockCreateReference ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( allProjects ) . getConfig ( ) ; com.google.gerrit.server.project.Util.block ( cfg , Permission.CREATE , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/*" ) ; saveProjectConfig ( allProjects , cfg ) ; }
public static < T > com.google.gerrit.rules.StoredValue < T > create ( java.lang.Class < T > clazz ) { return new com.google.gerrit.rules.StoredValue < T > ( new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( clazz ) ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchProjectException { return shouldReplicate ( controlFor ( project ) ) ; }
private org.eclipse.jgit.lib.Repository openRepository ( com.google.gerrit.server.project.ProjectState project ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { return repoManager.openRepository ( project.getProject ( ) . getNameKey ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.rules.RulesCache.class ) ; factory ( PrologEnvironment.Factory.class ) ; }
public void run ( ) { header.setReviewed ( ( ! ( header.isReviewed ( ) ) ) ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; schema = new com.google.gwtorm.schema.java.JavaSchemaModel ( com.google.gwtorm.data.PhoneBookDb.class ) ; people = schema.getRelation ( "people" ) ; }
public java.lang.String getName ( ) { return new com.google.gerrit.server.AccountInfo ( getAccount ( ) ) . getName ( anonymousCowardName ) ; }
java.util.Set < com.google.gerrit.server.change.SuggestedReviewer > suggestReviewers ( com.google.gerrit.reviewdb.client.Change.Id changeId , java.lang.String query , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > candidates ) ;
protected void formatChange ( ) throws com.google.gerrit.server.mail.EmailException { appendText ( velocifyFile ( "Comment.vm" ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( java.lang.String hash ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , hash ) ) ; }
public void setFileHistory ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern.isEmpty ( ) ) ) ) { fileHistory = pattern ; } }
void manualFlush ( ) throws java.io.IOException { flush ( true , true ) ; if ( autoCommit ) { commit ( ) ; } }
private void logDebug ( java.lang.String msg , java.lang.Throwable t ) { if ( ( ( requestId ) != null ) && ( com.google.gerrit.server.update.BatchUpdate.log.isDebugEnabled ( ) ) ) { com.google.gerrit.server.update.BatchUpdate.log.debug ( ( ( requestId ) + msg ) , t ) ; } }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { return addDraftBox ( com.google.gerrit.client.changes.CommentInfo.createLine ( path , getSideFromCm ( cm ) , ( line + 1 ) , null , null ) ) ; }
public void setStarredBy ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Account.Id > starredByUser ) { this . starredByUser = starredByUser ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.Permission.isLabel ( permission ) ) { return com.google.gerrit.server.project.RefControl.toRange ( permission , access ( permission ) ) ; } return null ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "Administrators" ) ; session = new com.google.gerrit.acceptance.RestSession ( admin ) ; db = reviewDbProvider.open ( ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.Class < T > classOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . fromJson ( buildJsonRaw ( path , "" ) , classOfT ) ; }
private void deleteDraftComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { createDraftUpdateIfNull ( c ) ; draftUpdate.deleteComment ( c ) ; }
public void removeKeyboardListener ( com.google.gwt.user.client.ui.KeyboardListener listener ) { focusy.removeKeyboardListener ( listener ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( new com.google.gerrit.server.config.AllUsersName ( com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT ) , account , com.google.common.collect.ImmutableSet.of ( ) , com.google.common.collect.ImmutableSet.of ( ) , new java.util.HashMap < > ( ) ) ; }
public void includeExistingGroup_OK ( ) throws java.lang.Exception { group ( "newGroup" ) ; PUT ( "/groups/Administrators/groups/newGroup" ) . consume ( ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , PUT ( "/groups/Administrators/groups/newGroup" ) . getStatusCode ( ) ) ; }
private static void addApproval ( com.google.gerrit.extensions.common.LabelInfo label , com.google.gerrit.extensions.common.ApprovalInfo approval ) { if ( ( label.all ) == null ) { label.all = com.google.common.collect.Lists.newArrayList ( ) ; } label.all.add ( approval ) ; }
public void doChangeRestoredHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , java.lang.String reason , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
private void assertParseSucceeds ( java.lang.String body ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( writeCommit ( body ) ) ) { parser.parseAll ( ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( topic.canEdit ( ) ) { topic.onEdit ( ) ; } }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( new com.google.gerrit.server.query.change.ChangeData ( change ) , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { movePointerTo ( row ) ; }
private static void assertNotUsed ( java.sql.PreparedStatement insert ) { org.mockito.Mockito.verifyZeroInteractions ( insert ) ; }
private static com.google.gerrit.server.query.change.RegexPathPredicate predicate ( java.lang.String pattern ) { return new com.google.gerrit.server.query.change.RegexPathPredicate ( ChangeQueryBuilder.FIELD_PATH , pattern ) ; }
private void log ( final int rc ) { synchronized ( this ) { if ( ! ( logged ) ) { ctx.finished = java.lang.System.currentTimeMillis ( ) ; log.onExecute ( ctx , commandLine , rc ) ; logged = true ; } } }
public com.google.gerrit.pgm.util.LibraryDownloader setSHA1 ( final java.lang.String sha1 ) { this . sha1 = sha1 ; return this ; }
public void testCreateSchema_DefaultAccess_Administrators ( ) throws com.google.gwtorm.client.OrmException { db.create ( ) ; final com.google.gerrit.reviewdb.SystemConfig config = getSystemConfig ( ) ; assertDefaultRight ( config.adminGroupId , ApprovalCategory.READ , 1 , 1 ) ; }
public void abandon ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange ( ) ; gApi.changes ( ) . id ( ( "p~master~" + ( r.getChangeId ( ) ) ) ) . abandon ( ) ; }
public void createProjectDuplicate ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "baz" ; gApi.projects ( ) . create ( in ) ; gApi.projects ( ) . create ( in ) ; }
public java.util.List < com.gitblit.models.TeamModel > getAllTeams ( ) { return java.util.Collections.emptyList ( ) ; }
com.googlesrouce.gerrit.plugins.github.git.ReplicateProjectStep create ( @ com.google.inject.assistedinject.Assisted ( value = "organisation" ) java.lang.String organisation , @ com.google.inject.assistedinject.Assisted ( value = "name" ) java.lang.String repository , @ com.google.inject.assistedinject.Assisted com.googlesource.gerrit.plugins.github.oauth.GitHubLogin ghLogin ) ;
public void getTagOfNonVisibleProjectWithApi ( ) throws java.lang.Exception { blockRead ( project , "refs/*" ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . tag ( "tag" ) . get ( ) ; }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( key , repository , branch , files ) ; }
public void submit ( ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.SubmitInput in = new com.google.gerrit.extensions.api.changes.SubmitInput ( ) ; in.waitForMerge = true ; submit ( in ) ; }
public java.lang.String getServletPath ( ) { return ( ( javax.servlet.http.HttpServletRequest ) ( getRequest ( ) ) ) . getRequestURI ( ) . substring ( contextPath.length ( ) ) ; }
private void ensureOptionsInitialized ( ) { if ( ( optionsList ) == null ) { help = new com.google.gerrit.util.cli.CmdLineParser.HelpOption ( ) ; optionsList = com.google.common.collect.Lists.newArrayList ( ) ; addOption ( help , help ) ; } }
protected void init ( ) throws com.google.gerrit.common.errors.EmailException { super . init ( ) ; ccAllApprovals ( ) ; bccStarredBy ( ) ; includeWatchers ( NotifyType.ABANDONED_CHANGES ) ; includeWatchers ( NotifyType.ALL_COMMENTS ) ; }
public boolean isPatchVisible ( com.google.gerrit.reviewdb.client.PatchSet ps , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { if ( ( ps.isDraft ( ) ) && ( ! ( isDraftVisible ( db ) ) ) ) { return false ; } return isVisible ( db ) ; }
protected abstract Project.NameKey getProjectName ( ) ;
com.google.gerrit.server.git.EmailMerge create ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id submitter ) ;
public void postEvent ( com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( event , db ) ; }
public int hashCode ( ) { return ( ( categoryId.hashCode ( ) ) * 31 ) + ( value ) ; }
public void addMembersWithAtSign ( ) throws java.lang.Exception { java.lang.String g = createGroup ( "users" ) ; com.google.gerrit.acceptance.TestAccount u10 = accounts.create ( "u10" , "u10@example.com" , "Full Name 10" ) ; com.google.gerrit.acceptance.TestAccount u11_at = accounts.create ( "u11@something" , "u11@example.com" , "Full Name 11 With At" ) ; com.google.gerrit.acceptance.TestAccount u11 = accounts.create ( "u11" , "u11.another@example.com" , "Full Name 11 Without At" ) ; gApi.groups ( ) . id ( g ) . addMembers ( u10.username , u11_at.username ) ; assertMembers ( g , u10 , u11_at ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; bind ( com.google.gerrit.server.git.GitProjectImporter.class ) ; }
protected Account.Id getAccountId ( ) { com.google.gerrit.server.CurrentUser u = currentUser.get ( ) ; if ( u.isIdentifiedUser ( ) ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( u ) ) . getAccountId ( ) ; } return null ; }
public void onFailure ( java.lang.Throwable caught ) { if ( ( ! ( isNoSuchEntity ( caught ) ) ) && ( ( rpcSequence ) == rpcseq ) ) { super . onFailure ( caught ) ; } }
protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.Project > result ) { projects.display ( result ) ; projects.finishDisplay ( true ) ; }
private com.google.gerrit.extensions.common.FixReplacementInfo toFixReplacementInfo ( com.google.gerrit.reviewdb.client.FixReplacement fixReplacement ) { com.google.gerrit.extensions.common.FixReplacementInfo fixReplacementInfo = new com.google.gerrit.extensions.common.FixReplacementInfo ( ) ; fixReplacementInfo.range = toRange ( fixReplacement.range ) ; fixReplacementInfo.replacement = fixReplacement.replacement ; return fixReplacementInfo ; }
public static java.lang.String cacheNameOf ( java.lang.String plugin , java.lang.String name ) { if ( "gerrit" . equals ( plugin ) ) { return name ; } else { return ( plugin + "-" ) + name ; } }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return new com.google.gerrit.server.index.IndexConfig ( java.lang.Integer.MAX_VALUE ) ; }
protected final void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.isDebugEnabled ( ) ) { com.google.gerrit.server.git.strategy.SubmitStrategyOp.log.debug ( ( ( ( "[" + ( this . args.submissionId ) ) + "]" ) + msg ) , args ) ; } }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { change.setCurrentPatchSet ( patchSetInfoFactory.get ( newCommit , ps.getId ( ) ) ) ; return change ; }
public void onSuccess ( final java.util.List < com.google.gerrit.client.reviewdb.AccountSshKey > result ) { keys.display ( result ) ; keys.finishDisplay ( true ) ; if ( result.isEmpty ( ) ) { showAddKeyBlock ( true ) ; } }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , null , null , true ) ; }
public com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData apply ( com.google.gerrit.server.plugins.JarScanner.ClassData classData ) { return new com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData ( classData.className , classData.annotationValue , classData.interfaces ) ; }
private static int posInt ( final org.spearce.jgit.transport.RemoteConfig rc , final org.spearce.jgit.lib.RepositoryConfig cfg , final java.lang.String name , final int defValue ) { return java.lang.Math.max ( 0 , cfg.getInt ( "remote" , rc.getName ( ) , name , defValue ) ) ; }
com.google.gerrit.server.git.CreateCodeReviewNotes create ( com.google.gerrit.reviewdb.server.ReviewDb reviewDb , org.eclipse.jgit.lib.Repository db ) ;
, @ com.google.gerrit.acceptance.GerritConfig ( name = "a.b" , value = "c" ) } ) public void testMultiple ( ) { org.junit.Assert.assertEquals ( "z" , serverConfig.getString ( "x" , null , "y" ) ) ; org.junit.Assert.assertEquals ( "c" , serverConfig.getString ( "a" , null , "b" ) ) ; }
public void nonExistingConfig ( ) { com.google.gerrit.server.project.ProjectState state = projectCache.get ( project ) ; org.junit.Assert.assertEquals ( "" , state.getConfig ( "test.config" ) . get ( ) . toText ( ) ) ; }
com.google.gerrit.server.query.change.ChangeData convert ( com.google.gerrit.reviewdb.client.Change t ) { return new com.google.gerrit.server.query.change.ChangeData ( t ) ; }
public void setUp ( ) throws java.lang.Exception { admins = groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( "Administrators" ) ) . getGroupUUID ( ) ; setUpPermissions ( ) ; setUpChanges ( ) ; atrScope.disableDb ( ) ; }
protected void doStart ( ) throws java.lang.Exception { setClassLoader ( new com.google.gerrit.gwtdebug.GerritDebugLauncher.MyWebAppContext.MyLoader ( ) ) ; super . doStart ( ) ; }
com.google.gerrit.testutil.InMemoryDatabase getInMemoryDatabase ( @ com.google.gerrit.server.schema.Current com.google.gerrit.server.schema.SchemaVersion schemaVersion , com.google.gerrit.server.schema.SchemaCreator schemaCreator ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.testutil.InMemoryDatabase ( schemaVersion , schemaCreator ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { return new com.google.gerrit.server.notedb.ChangeNotesParser ( newChange ( ) , tip , walk , repoManager ) ; }
public com.google.gerrit.pgm.util.LibraryDownloader setName ( final java.lang.String name ) { this . name = name ; return this ; }
public void run ( ) { this . handleEmails ( ) ; }
public static org.apache.lucene.index.Term idTerm ( com.google.gerrit.reviewdb.client.Change.Id id ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.server.index.change.ChangeField.LEGACY_ID.getName ( ) , id.get ( ) ) ; }
protected java.lang.String getRefName ( ) { return "refs/my/config" ; }
private void setListBox ( final com.google.gwt.user.client.ui.ListBox f , final short defaultValue , final short currentValue ) { setListBox ( f , java.lang.String.valueOf ( defaultValue ) , java.lang.String.valueOf ( currentValue ) ) ; }
com.google.gerrit.extensions.auth.oauth.OAuthToken getAccessToken ( com.google.gerrit.extensions.auth.oauth.OAuthToken requestToken , com.google.gerrit.extensions.auth.oauth.OAuthVerifier verifier ) ;
protected void setDownloadHeaders ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String filename , java.lang.String contentType ) { res.setContentType ( contentType ) ; res.setHeader ( com.google.common.net.HttpHeaders.CONTENT_DISPOSITION , ( "attachment; filename=" + filename ) ) ; setCacheHeaders ( req , res ) ; }
private native < V > void copy ( java.util.Map < java.lang.String , V > r , com.google.gwt.core.client.JavaScriptObject jsObject ) ;
private static final native void init ( java.lang.String r , java.lang.String o ) ;
public com.google.gerrit.server.group.GetGroup.GroupInfo apply ( final com.google.gerrit.server.group.IncludedGroupResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return com.google.gerrit.server.group.GetGroup.parse ( resource.getControl ( ) . getGroup ( ) ) ; }
public void mergeReview ( com.google.gerrit.extensions.common.ChangeInfo info ) throws java.lang.Exception { final com.google.gerrit.extensions.api.changes.SubmitInput input = new com.google.gerrit.extensions.api.changes.SubmitInput ( ) ; input.waitForMerge = true ; final com.google.gerrit.server.change.RevisionResource r = getRevisionResource ( info.project , info._number ) ; submitter.apply ( r , input ) ; }
public void testExclamationMark ( ) { com.google.gerrit.common.data.GitWebType gitWebType = com.google.gerrit.common.data.GitWebType.fromName ( null ) ; gitWebType.setPathSeparator ( '!' ) ; assertEquals ( "a!b" , gitWebType.replacePathSeparator ( "a/b" ) ) ; }
private void fireEventForUnrestrictedListeners ( com.google.gerrit.server.events.Event event ) { for ( com.google.gerrit.common.EventListener listener : unrestrictedListeners ) { listener.onEvent ( event ) ; } }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { if ( screen.isCurrentView ( ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( screen.getChangeId ( ) ) ) ; } }
private void doList ( ) throws com.google.gerrit.server.ssh.Failure { for ( final java.lang.String name : cacheNames ( ) ) { p.print ( name ) ; p.print ( '\n' ) ; } p.flush ( ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > cansee ( com.google.gerrit.server.query.account.AccountQueryBuilder.Arguments args , com.google.gerrit.server.notedb.ChangeNotes changeNotes ) { return new com.google.gerrit.server.query.account.CanSeeChangePredicate ( args.db , args.permissionBackend , args.userFactory , changeNotes ) ; }
public void configure ( ) { install ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override public void configure ( ) { factory ( OnlineReindexer.Factory.class ) ; } } ) ; listener ( ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; }
private com.google.gerrit.server.account.AccountState toAccountState ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( doc.getField ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . numericValue ( ) . intValue ( ) ) ; return accountCache.get ( id ) ; }
protected java.lang.String getQueryPattern ( final java.lang.String query ) { return ( "(" + ( com.google.gwtexpui.safehtml.client.HighlightSuggestOracle.escape ( query ) ) ) + ")" ; }
public static com.google.gitiles.BaseServlet notFoundServlet ( ) { return new com.google.gitiles.BaseServlet ( null ) { private static final long serialVersionUID = 1L ; @ java.lang.Override public void service ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) { res.setStatus ( javax.servlet.http.HttpServletResponse.SC_NOT_FOUND ) ; } } ; }
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( conflictingChangesTab ) == null ) { conflictingChangesTab = createTab ( Resources.C.conflictingChanges ( ) , Resources.C.conflictingChangesTooltip ( ) ) ; conflictingChangesTab.registerKeys ( ) ; } return conflictingChangesTab ; }
public final native int patch_set ( ) ;
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( getChange ( ) . getId ( ) ) ; }
public void testOpenSchema ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema1 = open ( ) ; assertNotNull ( schema1 ) ; final com.google.gwtorm.data.PhoneBookDb schema2 = open ( ) ; assertNotNull ( schema2 ) ; assertNotSame ( schema1 , schema2 ) ; }
public void setFullName ( final java.lang.String name ) { fullName = ( name != null ) ? name.trim ( ) : null ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute ca , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.PatchSet.Id , java.util.Collection < com.google.gerrit.reviewdb.PatchSetApproval > > approvals ) { addPatchSets ( ca , ps , approvals , false , null ) ; }
public void messagesNotReturnedByDefault ( ) throws com.google.gerrit.extensions.restapi.RestApiException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) ; postMessage ( changeId , "Some nits need to be fixed." ) ; com.google.gerrit.extensions.common.ChangeInfo c = getChange ( ( "p~master~" + changeId ) ) ; org.junit.Assert.assertNull ( c.messages ) ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = notesFactory.create ( db , project , legacyId ) ; } return notes ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gwtorm.server.OrmException { try { return qp.queryChanges ( p ) . changes ( ) ; } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public java.util.Optional < com.google.gerrit.server.account.AccountState > load ( com.google.gerrit.reviewdb.client.Account.Id who ) throws java.lang.Exception { return java.util.Optional.ofNullable ( accounts.get ( who ) ) ; }
protected void onCellSingleClick ( int row , int column ) { if ( ( column == 1 ) || ( column == 4 ) ) { onCellDoubleClick ( row , column ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( config , false , false ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; install ( new com.google.gerrit.lifecycle.LifecycleModule ( ) { @ java.lang.Override protected void configure ( ) { listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.Lifecycle.class ) ; } } ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > delete ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.DELETE , name ) ) ; }
public int next ( ) { return com.google.gerrit.server.util.IdGenerator.mix ( com.google.gerrit.server.util.IdGenerator.salt , gen.getAndIncrement ( ) ) ; }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( id == null ) { return null ; } return asAccountAttribute ( accountCache.get ( id ) . getAccount ( ) ) ; }
public void testInalidPathSeparator ( ) { for ( char c : com.google.gerrit.httpd.GitWebConfigTest.SOME_INVALID_CHARACTERS.toCharArray ( ) ) { assertFalse ( ( "invalid character accepted: " + c ) , com.google.gerrit.httpd.GitWebConfig.isValidPathSeparator ( c ) ) ; } }
public final void delete ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doDelete ( instances , null ) ; }
public org.eclipse.jgit.lib.BatchRefUpdate getBatchRefUpdate ( ) throws java.io.IOException { initRepository ( ) ; if ( ( batchRefUpdate ) == null ) { batchRefUpdate = repo.getRefDatabase ( ) . newBatchUpdate ( ) ; } return batchRefUpdate ; }
private java.lang.String comparePattern ( ) { if ( getRefPattern ( ) . startsWith ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX ) ) { return getRefPattern ( ) . substring ( com.google.gerrit.common.data.AccessSection.REGEX_PREFIX.length ( ) ) ; } return getRefPattern ( ) ; }
public com.google.gerrit.server.update.RepoView getRepoView ( ) throws java.io.IOException { initRepository ( ) ; return this . repoView ; }
public void markReady ( boolean ready ) throws java.io.IOException { com.google.gerrit.lucene.AbstractLuceneIndex.setReady ( sitePaths , schema.getVersion ( ) , ready ) ; }
public java.lang.String getShortName ( ) { final java.lang.String n = getName ( ) ; if ( n.startsWith ( "refs/heads/" ) ) { return n.substring ( "refs/heads/" . length ( ) ) ; } return n ; }
com.google.gwt.resources.client.DataResource soy ( ) ;
public static com.google.gerrit.server.account.externalids.ExternalId create ( com.google.gerrit.server.account.externalids.ExternalId.Key key , com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.gerrit.common.Nullable java.lang.String email , @ com.google.gerrit.common.Nullable java.lang.String hashedPassword ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( key , accountId , com.google.common.base.Strings.emptyToNull ( email ) , com.google.common.base.Strings.emptyToNull ( hashedPassword ) ) ; }
public com.google.gerrit.server.config.PluginConfig getFromGerritConfig ( java.lang.String pluginName ) { return new com.google.gerrit.server.config.PluginConfig ( pluginName , cfg ) ; }
public java.util.List < java.lang.String > getUsernamesForRepositoryRole ( java.lang.String role ) { return java.util.Collections.emptyList ( ) ; }
com.google.gerrit.httpd.rpc.project.ChangeProjectAccess create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.ObjectId base , @ com.google.inject.assistedinject.Assisted java.util.List < com.google.gerrit.common.data.AccessSection > sectionList , @ javax.annotation.Nullable java.lang.String message ) ;
public < K , V > com.google.common.cache.LoadingCache < K , V > build ( com.google.gerrit.server.cache.CacheBinding < K , V > def , com.google.common.cache.CacheLoader < K , V > loader ) { return com.github.benmanes.caffeine.guava.CaffeinatedGuava.build ( create ( def , false ) , loader ) ; }
public void dashboardDoesNotExist ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . dashboard ( "my:dashboard" ) . get ( ) ; }
protected com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context setApiUserAnonymous ( ) { return atrScope.newContext ( reviewDbProvider , null , anonymousUser.get ( ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { enableForm ( true ) ; saveName.setEnabled ( false ) ; saveOwner.setEnabled ( false ) ; saveDesc.setEnabled ( false ) ; display ( result ) ; }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.io.IOException ;
public static boolean isNameAlreadyUsed ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NameAlreadyUsedException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NameAlreadyUsedException.MESSAGE ) ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; hide ( ) ; }
public static java.lang.String refsStarredChanges ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES , accountId ) ; r.append ( changeId.get ( ) ) ; return r.toString ( ) ; }
public void put ( com.google.gerrit.extensions.auth.oauth.OAuthUserInfo user , com.google.gerrit.extensions.auth.oauth.OAuthToken accessToken ) { cache.put ( com.google.common.base.Preconditions.checkNotNull ( user.getUserName ( ) ) , encrypt ( com.google.common.base.Preconditions.checkNotNull ( accessToken ) ) ) ; }
public void stop ( ) { async.close ( ) ; }
void setSubmitEnabled ( boolean ok ) { submit.setVisible ( ( ok && ( canSubmit ) ) ) ; }
protected void renderHtml ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String templateName , java.util.Map < java.lang.String , ? > soyData ) throws java.io.IOException { renderer.render ( res , templateName , startHtmlResponse ( req , res , soyData ) ) ; }
int weigh ( ) { return ( resource.length ( ) ) * 2 ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return changeControlFactory.create ( controlForRef ( change.getDest ( ) ) , change.getProject ( ) , change.getId ( ) ) ; }
private java.util.List < com.google.gerrit.server.patch.PatchListEntry > getPatches ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( getKey ( revisionIdA , revisionIdB ) ) . getPatches ( ) ; }
public void testProjectRecreationAfterRestart ( ) throws java.lang.Exception { repoManager.createRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "a" ) ) ; com.google.gerrit.server.git.LocalDiskRepositoryManager newRepoManager = new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , cfg ) ; newRepoManager.start ( ) ; newRepoManager.createRepository ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "a" ) ) ; }
public boolean supportsEmailAddressChanges ( com.gitblit.models.UserModel user ) { return false ; }
protected int getEnd ( org.eclipse.jgit.diff.Edit e ) { return e.getEndA ( ) ; }
public Project.NameKey getProjectName ( ) { com.google.gerrit.reviewdb.client.Project project = projectControl.getProjectState ( ) . getProject ( ) ; return project.getNameKey ( ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( c.getProject ( ) , c.getId ( ) , tip , walk , repoManager , noteUtil , args.metrics ) ; }
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInput content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
public static void parentCandidates ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "PARENT_CANDIDATES" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
com.google.gerrit.server.change.ReviewerResource create ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.reviewdb.client.Account.Id id ) ;
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
public static com.google.gerrit.client.rpc.RestApi revision ( int id , java.lang.String revision ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( revision ) ; }
protected java.io.Writer startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return com.google.gitiles.BaseServlet.newWriter ( req , res ) ; }
public final native void scrollToY ( int y ) ;
public int getStatus ( ) { return status ; }
private static java.lang.String nextFunction ( ) { return ( "__gwtjsonrpc_callback" + ( com.google.gwtjsonrpc.client.CallbackHandle.cbgen ) ) + ( ( com.google.gwtjsonrpc.client.CallbackHandle.callbackId ) ++ ) ; }
public static com.google.gerrit.client.changes.QueryScreen forQuery ( java.lang.String query ) { return com.google.gerrit.client.changes.QueryScreen.forQuery ( query , PageLinks.TOP ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > insert ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
com.google.gerrit.server.mail.MergeFailSender create ( com.google.gerrit.reviewdb.client.Change.Id id ) ;
void removeAll ( ) { if ( ( skipBars ) != null ) { for ( com.google.gerrit.client.diff.SkipBar bar : skipBars ) { bar.expandSideAll ( ) ; } skipBars = null ; line0 = null ; } }
public void testCreateDatabaseHandle ( ) throws java.lang.Exception { assertNotNull ( db ) ; }
private static void reject ( final org.eclipse.jgit.transport.ReceiveCommand cmd , final java.lang.String why ) { cmd.setResult ( ReceiveCommand.Result.REJECTED_OTHER_REASON , why ) ; }
void onShow ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canMerge ( args.mergeSorter , args.repo , mergeTip , toMerge ) ; }
public boolean canSeeMember ( com.google.gerrit.reviewdb.client.Account.Id id ) { if ( ( user.isIdentifiedUser ( ) ) && ( ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) . equals ( id ) ) ) { return true ; } return canSeeMembers ( ) ; }
public com.google.gerrit.server.IdentifiedUser getUser ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( ctl.getCurrentUser ( ) ) ) ; }
protected < T > T buildJson ( java.lang.String path , com.google.gson.reflect.TypeToken < T > typeOfT ) throws java.lang.Exception { return buildJson ( path , typeOfT , "" ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( ( openSchemas ) != null ) { for ( com.google.gwtorm.data.PhoneBookDb schema : openSchemas ) { schema.close ( ) ; } openSchemas = null ; } super . tearDown ( ) ; }
public void setValue ( final short v ) { value = v ; granted = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , base ) ; loadRevisionInfo ( ) ; }
public com.google.gwtorm.client.SchemaFactory < com.google.gerrit.reviewdb.ReviewDb > get ( ) { return ds ; }
protected void configure ( ) { bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.Lifecycle.class ) ; }
void applyFailed ( ) { com.google.gwt.user.client.rpc.AsyncCallback < T > cb = delegate ; if ( cb != null ) { delegate = null ; result = null ; cb.onFailure ( failedThrowable ) ; } }
private void loadDefaults ( ) { approvals = com.google.common.collect.ImmutableListMultimap.of ( ) ; reviewers = com.google.common.collect.ImmutableSetMultimap.of ( ) ; submitRecords = com.google.common.collect.ImmutableList.of ( ) ; changeMessages = com.google.common.collect.ImmutableList.of ( ) ; }
< A extends com.google.gwtorm.client.Access < ? , ? > > java.lang.Class < A > create ( com.google.gwtorm.server.GeneratedClassLoader loader , com.google.gwtorm.schema.RelationModel rm ) throws com.google.gwtorm.client.OrmException ;
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "init" , "-d" , sitePath.getPath ( ) , "--batch" , "--no-auto-start" , "--skip-plugins" , "--show-stack-trace" ) ; }
public java.util.Map < java.lang.String , java.lang.String > getMergeResults ( ) { return this . mergeResults ; }
public int getCost ( ) { return com.google.gerrit.server.query.change.ChangeCosts.cost ( ChangeCosts.TR_SCAN , ChangeCosts.CARD_TRACKING_IDS ) ; }
private void deletePatchSet ( java.lang.String changeId , com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { gApi.changes ( ) . id ( changeId ) . revision ( ps.getId ( ) . get ( ) ) . delete ( ) ; }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.CreateRequest input ) { return ( input.change ) != null ; }
private static final native void init ( java.lang.String e , java.lang.String r , java.lang.String o ) ;
private com.google.gerrit.client.change.RelatedChangesTab getTab ( ) { if ( ( cherryPicksTab ) == null ) { cherryPicksTab = createTab ( Resources.C.cherryPicks ( ) , Resources.C.cherryPicksTooltip ( ) ) ; cherryPicksTab.registerKeys ( ) ; cherryPicksTab.setShowBranches ( true ) ; } return cherryPicksTab ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; local = new com.google.gerrit.server.git.ProjectConfig ( localKey ) ; local.createInMemory ( ) ; util.add ( local ) ; }
public void stop ( ) { if ( ( queue ) != null ) { queue.unregisterWorkQueue ( ) ; queue.shutdownNow ( ) ; queue = null ; } }
public void onHeadUpdated ( com.google.gerrit.extensions.events.HeadUpdatedListener.Event event ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , FilterType.ALL ) ) { updateHead ( uri , event.getNewHeadName ( ) ) ; } }
public static java.lang.String getToken ( final javax.servlet.http.HttpServletRequest req ) { java.lang.String token = req.getPathInfo ( ) ; if ( com.google.common.base.Strings.isNullOrEmpty ( token ) ) { return com.google.gerrit.httpd.LoginUrlToken.DEFAULT_TOKEN ; } else { return com.google.common.base.CharMatcher.is ( '/' ) . trimLeadingFrom ( token ) ; } }
private static com.google.gerrit.server.git.CodeReviewCommit parse ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId id ) throws java.io.IOException , org.eclipse.jgit.errors.IncorrectObjectTypeException , org.eclipse.jgit.errors.MissingObjectException { return ( ( com.google.gerrit.server.git.CodeReviewCommit ) ( rw.parseCommit ( id ) ) ) ; }
public void onLoad ( ) { super . onLoad ( ) ; if ( useLoadPrev ) { loadPrev ( ) ; } else { loadNext ( ) ; } }
private com.google.gerrit.reviewdb.server.ReviewDb db ( ) { return ( cd ) != null ? cd.db ( ) : null ; }
private void initDownloadAction ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { downloadAction = new com.google.gerrit.client.change.DownloadAction ( info.legacy_id ( ) , info.project ( ) , info.revision ( revision ) , style , headerLine , download ) ; }
protected java.lang.String prettify ( java.lang.String html ) { return prettyPrintOne ( html , settings ) ; }
public static com.google.gerrit.lucene.LuceneIndexModule singleVersionAllLatest ( int threads ) { return new com.google.gerrit.lucene.LuceneIndexModule ( com.google.common.collect.ImmutableMap.< java.lang.String , java.lang.Integer > of ( ) , threads ) ; }
public void put ( final com.google.gerrit.server.patch.DiffCacheKey k , final com.google.gerrit.server.patch.DiffCacheContent c ) { self.put ( new net.sf.ehcache.Element ( k , c ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , null ) ; }
private boolean isRelevantRef ( com.google.gerrit.server.events.RefUpdatedEvent event ) { return ( ! ( isNewRef ( event ) ) ) && ( ( event.getRefName ( ) . startsWith ( org.eclipse.jgit.lib.Constants.R_HEADS ) ) || ( event.getRefName ( ) . startsWith ( org.eclipse.jgit.lib.Constants.R_TAGS ) ) ) ; }
public final boolean required ( ) { return required ; }
public com.google.gwtexpui.safehtml.client.SafeHtml linkify ( ) { return replaceAll ( "(https?://[a-zA-Z0-9$_.+!*',%;:@&=?#/()-]{1,}[a-zA-Z0-9$_.+!*',%;:@&=?#/-])" , "<a href=\"$1\">$1</a>" ) ; }
public void setPreferredEmail ( final java.lang.String addr ) { preferredEmail = addr ; }
private void addComment ( com.google.gerrit.acceptance.PushOneCommit.Result r , java.lang.String message ) throws java.lang.Exception { addComment ( r , message , false ) ; }
public void testReplaceSortKeyPredicate_NoSortKey ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p = parse ( "foo:a bar:b OR (foo:b bar:a)" ) ; assertSame ( p , com.google.gerrit.server.index.IndexedChangeQuery.replaceSortKeyPredicates ( p , "1234" ) ) ; }
java.net.URL getBaseUrl ( ) { return baseUrl ; }
public java.lang.String getChangeId ( ) { return commit.getChangeId ( ) ; }
private void saveProjectConfig ( com.google.gerrit.server.git.ProjectConfig cfg ) throws java.lang.Exception { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create ( project ) ; try { cfg.commit ( md ) ; } finally { md.close ( ) ; } }
public void commentOnReviewableChangeByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; setEmailStrategy ( sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( id ) : new com.google.gerrit.client.diff.SideBySide ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
public void message ( java.lang.String msg ) { java.lang.System.err.println ( msg ) ; java.lang.System.err.flush ( ) ; }
public final native void setMessage ( java.lang.String value ) ;
public void setLinkName ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name.isEmpty ( ) ) ) ) { this . name = name ; } }
void setDisableSshd ( final boolean arg ) { sshd = false ; }
public com.google.gerrit.util.http.testutil.FakeHttpServletRequest setPathInfo ( java.lang.String path ) { this . path = com.google.common.base.Preconditions.checkNotNull ( path ) ; return this ; }
public void evict ( final java.lang.String email ) { if ( ( email != null ) && ( ! ( email.isEmpty ( ) ) ) ) { self.remove ( email ) ; } }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { if ( screen.isCurrentView ( ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; } }
public void postRun ( ) throws java.lang.Exception ;
private java.util.Optional < java.lang.String > getUserName ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return accountCache.maybeGet ( accountId ) . map ( AccountState :: getUserName ) . orElse ( java.util.Optional.empty ( ) ) ; }
private void initChangeRepo ( ) throws java.io.IOException { if ( ( changeRepo ) == null ) { changeRepo = openRepo ( projectName ) ; } }
private int find ( java.util.List < T > list , java.lang.String p ) { int r = java.util.Collections.binarySearch ( com.google.common.collect.Lists.transform ( list , this ) , p ) ; return r < 0 ? - ( r + 1 ) : r ; }
public int run ( ) throws java.lang.Exception { final com.google.gerrit.server.GerritServer gs = com.google.gerrit.server.GerritServer.getInstance ( false ) ; gs.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; return 0 ; }
com.google.common.collect.ImmutableList < com.google.gerrit.reviewdb.client.ChangeMessage > buildAllMessages ( ) { return com.google.common.collect.ImmutableList.copyOf ( com.google.common.collect.Lists.reverse ( allChangeMessages ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( revision.getParentKey ( ) , java.lang.String.valueOf ( revision.get ( ) ) ) ) ; }
private boolean can ( com.google.gerrit.server.permissions.LabelPermission perm ) { return ! ( label ( perm.permissionName ( ) . get ( ) ) . isEmpty ( ) ) ; }
public com.google.gerrit.server.git.MultiProgressMonitor.Task beginSubTask ( final java.lang.String subTask , final int subTaskWork ) { com.google.gerrit.server.git.MultiProgressMonitor.Task task = new com.google.gerrit.server.git.MultiProgressMonitor.Task ( subTaskWork ) ; tasks.put ( subTask , task ) ; return task ; }
public java.util.Set < java.lang.String > getMyOrganisationsLogins ( ) throws java.io.IOException { if ( isLoggedIn ( ) ) { return getHub ( ) . getMyOrganizations ( ) . keySet ( ) ; } else { return java.util.Collections.emptySet ( ) ; } }
com.google.gerrit.server.query.change.ChangeData create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id id ) ;
private static void assertChildren ( java.lang.String o , com.google.gerrit.server.query.Predicate < java.lang.String > p , final java.util.List < com.google.gerrit.server.query.Predicate < java.lang.String > > l ) { assertEquals ( ( o + " did not affect child" ) , l , p.getChildren ( ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( change , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return changeControlFactory.create ( controlForRef ( change.getDest ( ) ) , change ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexGroupTask ) ) { return false ; } com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexGroupTask other = ( ( com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexGroupTask ) ( obj ) ) ; return ( groupUUID ) == ( other.groupUUID ) ; }
public void removeProjectEvents ( java.lang.String project ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds.getConnection ( ) ; java.sql.Statement stat = conn.createStatement ( ) ) { stat.execute ( java.lang.String.format ( "DELETE FROM %s WHERE project = '%s'" , com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME , project ) ) ; } }
private void initCompression ( boolean enableCompression ) { java.util.List < org.apache.sshd.common.NamedFactory < org.apache.sshd.common.compression.Compression > > compressionFactories = com.google.common.collect.Lists.newArrayList ( ) ; compressionFactories.add ( BuiltinCompressions.none ) ; if ( enableCompression ) { compressionFactories.add ( BuiltinCompressions.zlib ) ; } setCompressionFactories ( compressionFactories ) ; }
public boolean canRebase ( com.google.gerrit.server.change.RevisionResource r ) { return canRebase ( r.getChange ( ) . getProject ( ) , r.getPatchSet ( ) , r.getChange ( ) . getDest ( ) ) ; }
public void createTempDirectory ( ) throws java.lang.Exception { sitePath = com.google.gerrit.testutil.TempFileUtil.createTempDirectory ( ) . toPath ( ) ; }
protected Project.NameKey getProjectName ( ) { return getChange ( ) . getProject ( ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.ChangeMessage > messages ( ) throws com.google.gwtorm.server.OrmException { if ( ( messages ) == null ) { messages = cmUtil.byChange ( db , notes ) ; } return messages ; }
private void addLabelDelta ( java.lang.String name , short value ) { labelDelta.add ( new com.google.gerrit.server.util.LabelVote ( name , value ) . format ( ) ) ; }
public static void all ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.dashboards.DashboardList > > callback ) { new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
private java.lang.String getUsername ( ) { final java.lang.String user = gerritConfig.getString ( pluginName , null , com.googlesource.gerrit.plugins.hooks.jira.JiraItsFacade.GERRIT_CONFIG_USERNAME ) ; return user ; }
private com.google.gerrit.server.git.MergeTip cherryPickUnbornRoot ( com.google.gerrit.server.git.CodeReviewCommit n ) { com.google.gerrit.server.git.MergeTip mergeTip = com.google.gerrit.server.git.MergeTip.from ( n , com.google.common.collect.Lists.newArrayList ( n ) ) ; n.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; return mergeTip ; }
private void setColumnHeader ( final int col , final java.lang.String text ) { setText ( 0 , col , text ) ; setStyleName ( 0 , col , "gerrit-ChangeTable-ColumnHeader" ) ; }
private void blockForcePush ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( allProjects ) . getConfig ( ) ; com.google.gerrit.server.project.Util.block ( cfg , Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) . setForce ( true ) ; saveProjectConfig ( allProjects , cfg ) ; }
public void onSuccess ( com.google.gwt.core.client.JsArrayString result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId.getParentKey ( ) , java.lang.String.valueOf ( psId.get ( ) ) ) ) ; }
public void movePointerTo ( final com.google.gerrit.reviewdb.client.Patch.Key k ) { myTable.movePointerTo ( k ) ; }
public void testToHeaderString_NameEmail5 ( ) { assertEquals ( "\"A \\\" C\" <a@a>" , com.google.gerrit.server.mail.AddressTest.format ( "A \" C" , "a@a" ) ) ; }
private void loadConfig ( java.lang.String configFilename ) throws java.lang.Exception { pushConfig ( configFilename ) ; configLoader = new com.googlesource.gerrit.plugins.automerger.ConfigLoader ( gApi , allProjectsName , "automerger" , canonicalWebUrl , cfgFactory ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.changeMetaRef ( getChangeId ( ) ) ; }
private static boolean toBoolean ( java.lang.Boolean b ) { if ( b == null ) { return false ; } return b.booleanValue ( ) ; }
public Project.NameKey getProjectNameKey ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change.project ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { return getRefControl ( ) . getRange ( permission , isOwner ( ) ) ; }
private java.lang.String getUrl ( ) { final java.lang.String url = gerritConfig.getString ( pluginName , null , com.googlesource.gerrit.plugins.its.jira.JiraItsFacade.GERRIT_CONFIG_URL ) ; return url ; }
void onAddGroupByClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.common.data.GroupReference ref = groupToAdd.getValue ( ) ; if ( ref != null ) { addGroup ( ref ) ; } else { groupToAdd.setFocus ( true ) ; } }
public void stop ( ) { graphiteReporter.stop ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( ( - 1 ) ) ; }
public final native java.lang.String refName ( ) ;
com.google.gerrit.server.git.GitModules create ( com.google.gerrit.reviewdb.client.Branch.NameKey project , java.lang.String submissionId , com.google.gerrit.server.git.MergeOpRepoManager m ) ;
com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.server.git.CodeReviewCommit c ) { return approvalsUtil.getSubmitter ( db.get ( ) , c.notes , c.patchsetId ) ; }
public void deleteFile ( java.lang.String filePath ) throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditDeleteContent.apply ( changeResource.getControl ( ) , filePath ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete file of change edit" , e ) ; } }
private void testPushForMaster ( com.google.gerrit.acceptance.git.PushForReviewIT.Protocol p ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { selectProtocol ( p ) ; com.google.gerrit.acceptance.git.PushOneCommit.Result r = pushTo ( "refs/for/master" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null ) ; }
com.google.gson.JsonElement call ( java.lang.String method ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return call ( method , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) ; }
public void deleteWatchedProjects ( java.util.List < com.google.gerrit.extensions.client.ProjectWatchInfo > in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteWatchedProjects.apply ( account , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete watched projects" , e ) ; } }
private static java.lang.String getGerritUrl ( java.lang.String canonicalWebUrl ) { if ( canonicalWebUrl != null ) { return com.google.common.base.CharMatcher.is ( '/' ) . trimTrailingFrom ( canonicalWebUrl ) ; } else { return "http://" + ( com.google.gerrit.server.git.validators.CommitValidators.getGerritHost ( canonicalWebUrl ) ) ; } }
public java.lang.Object getUserKey ( ) { com.google.gerrit.server.CurrentUser user = userProvider.get ( ) ; if ( user instanceof com.google.gerrit.server.IdentifiedUser ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) ; } else { return anonymousCowardName ; } }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction ( curr , result , path , style , editButton , replyButton ) ; edit.onEdit ( ) ; }
protected void tearDown ( ) throws java.lang.Exception { walk.release ( ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.setTopic ( com.google.common.base.Strings.emptyToNull ( newTopicName ) ) ; return change ; } return null ; }
public void createProjectFooWithGitSuffix ( ) throws java.lang.Exception { java.lang.String name = "foo" ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( ( name + ".git" ) ) . get ( ) . name ) ; }
public void run ( ) { if ( isNew ( ) ) { cancel.setVisible ( ( ! ( isDirty ( ) ) ) ) ; } expandText ( ) ; }
public void add ( final com.google.inject.Injector ... injectors ) { for ( final com.google.inject.Injector i : injectors ) { add ( i ) ; } }
private static com.google.gerrit.server.query.change.RegexFilePredicate predicate ( java.lang.String pattern ) { return new com.google.gerrit.server.query.change.RegexFilePredicate ( null , null , pattern ) ; }
public java.lang.String getParameter ( int i ) { java.lang.String ret = "" ; if ( ( chopped.length ) > i ) { ret = chopped [ i ] ; } return ret ; }
void operation ( java.lang.Runnable apply ) { cmA.operation ( ( ) -> { cmB.operation ( apply :: run ) ; } ) ; }
public java.lang.String getName ( ) { return getAccount ( ) . getName ( anonymousCowardName ) ; }
public static com.google.gerrit.common.data.SubmitTypeRecord defaultTypeError ( ) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( com.google.gerrit.server.project.SubmitRuleEvaluator.DEFAULT_MSG ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.editor.EditScreen ( id , line ) ) ; }
public final void addLineClass ( net.codemirror.lib.CodeMirror.LineHandle line , net.codemirror.lib.CodeMirror.LineClassWhere where , java.lang.String className ) { addLineClassNative ( line , where.name ( ) . toLowerCase ( ) , className ) ; }
protected void onUnload ( ) { super . onUnload ( ) ; if ( saveStateOnUnload ) { com.google.gerrit.client.changes.PublishCommentScreen.lastState = new com.google.gerrit.client.changes.PublishCommentScreen.SavedState ( this ) ; } }
public java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > load ( java.lang.String username ) throws java.lang.Exception { return java.util.Optional.ofNullable ( externalIds.get ( ExternalId.Key.create ( com.google.gerrit.server.account.externalids.ExternalId.SCHEME_GERRIT , username ) ) ) . map ( ExternalId :: accountId ) ; }
public void onlyDateNoTime ( ) throws java.lang.Exception { java.lang.String query = queryMaker.formQueryFromRequestParameters ( com.google.common.collect.ImmutableMap.of ( com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.T1 , "2013-10-10" , com.ericsson.gerrit.plugins.eventslog.sql.QueryMakerTest.T2 , "2014-10-10" ) ) ; com.google.common.truth.Truth.assertThat ( query ) . isNotEqualTo ( defaultQuery ) ; }
private static java.util.Set < java.lang.String > getLabelNames ( com.google.gerrit.client.info.ChangeInfo change ) { return new java.util.TreeSet < java.lang.String > ( change.labels ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.project.ProjectResource , ? > create ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( id.equals ( "default" ) ) { return createDefault.get ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
private java.lang.String getManifestProject ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String manifestProject = getConfig ( ) . getString ( "global" , null , "manifestProject" ) ; if ( manifestProject == null ) { throw new org.eclipse.jgit.errors.ConfigInvalidException ( "manifestProject not specified." ) ; } return manifestProject ; }
public com.google.gerrit.client.reviewdb.Account run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.accounts ( ) . byId ( com.google.gerrit.client.rpc.RpcUtil.getAccountId ( ) ) ; }
public void setAccessKey ( char key ) { focusy.setAccessKey ( key ) ; }
protected void createFileCommentEditorOnSideB ( ) { createCommentEditor ( ( ( R_HEAD ) + 1 ) , com.google.gerrit.client.patches.SideBySideTable.B , com.google.gerrit.client.patches.R_HEAD , com.google.gerrit.client.patches.FILE_SIDE_B ) ; return ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getUpdate ( ps.getId ( ) ) . setTopic ( magicBranch.topic ) ; }
public java.util.Optional < com.google.gerrit.server.account.AccountState > maybeGet ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { try { return byId.get ( accountId ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.account.AccountCacheImpl.log.warn ( ( "Cannot load AccountState for ID " + accountId ) , e ) ; return null ; } }
public static void display ( final com.google.gerrit.client.Screen view ) { if ( ( com.google.gerrit.client.Gerrit.currentScreen ) != null ) { com.google.gerrit.client.Gerrit.body.remove ( com.google.gerrit.client.Gerrit.currentScreen ) ; } com.google.gerrit.client.Gerrit.currentScreen = view ; com.google.gerrit.client.Gerrit.body.add ( com.google.gerrit.client.Gerrit.currentScreen , DockPanel.CENTER ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm toFloat ( ) { return new com.googlecode.prolog_cafe.lang.DoubleTerm ( ( ( double ) ( this . val ) ) ) ; }
public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage ( ) { java.lang.System.out.println ( "😛 test" ) ; com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder ( ) ; expect.id ( ( "<CAM7sg=3meaAVUxW3KXeJEVs8sv_ADw1BnvpcHHiYVR2TQQi__w" + "@mail.gmail.com>" ) ) . from ( new com.google.gerrit.server.mail.Address ( "Patrick Hiesel" , "hiesel@google.com" ) ) . addTo ( new com.google.gerrit.server.mail.Address ( "Patrick Hiesel" , "hiesel@google.com" ) ) . textContent ( "Contains unwanted attachment" ) . htmlContent ( "<div dir=\"ltr\">Contains unwanted attachment</div>" ) . subject ( "Test Subject" ) . addAdditionalHeader ( "MIME-Version: 1.0" ) . dateReceived ( new org.joda.time.DateTime ( 2016 , 10 , 25 , 9 , 11 , 35 , 0 , org.joda.time.DateTimeZone.UTC ) ) ; return expect.build ( ) ; }
public void evict ( java.lang.String username ) { self.remove ( username ) ; }
private com.google.gerrit.extensions.common.ChangeInfo getWithLabels ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { return get ( r.getChangeId ( ) , ListChangesOption.LABELS , ListChangesOption.DETAILED_LABELS ) ; }
public void setUp ( ) { easyMock = new org.easymock.EasyMockSupport ( ) ; storeMock = easyMock.createMock ( com.ericsson.gerrit.plugins.eventslog.EventStore.class ) ; poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock ( 1 ) ; listener = new com.ericsson.gerrit.plugins.eventslog.EventHandler ( storeMock , poolMock ) ; }
protected abstract void run ( final java.lang.String [ ] args ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure , java.io.IOException ;
public void setChange ( final com.google.gerrit.reviewdb.Change change ) { this . change = change ; this . currentPatchSetId = change.currentPatchSetId ( ) ; }
public int compare ( @ javax.annotation.Nullable org.eclipse.jgit.lib.Ref left , @ javax.annotation.Nullable org.eclipse.jgit.lib.Ref right ) { int l = ( isHead ( left ) ) ? 1 : 0 ; int r = ( isHead ( right ) ) ? 1 : 0 ; return l - r ; }
public void putApproval ( java.lang.String label , short value ) { putApprovalFor ( getUser ( ) . getAccountId ( ) , label , value ) ; }
private java.lang.String url ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r ) { return com.google.gerrit.common.PageLinks.toChange ( changeId , java.lang.String.valueOf ( r._number ( ) ) ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( account , new com.google.gerrit.server.account.Index.Input ( ) ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index account" , e ) ; } }
public void testToString ( ) { org.junit.Assert.assertEquals ( "-author:bob" , com.google.gerrit.server.query.Predicate.not ( com.google.gerrit.server.query.NotPredicateTest.f ( "author" , "bob" ) ) . toString ( ) ) ; }
public static void deleteEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . delete ( cb ) ; }
public void onUnload ( ) { super . onUnload ( ) ; if ( ( messageClick ) != null ) { messageClick.removeHandler ( ) ; messageClick = null ; } }
protected java.nio.file.attribute.FileTime getLastModifiedTime ( java.nio.file.Path p ) { try { return java.nio.file.Files.getLastModifiedTime ( p ) ; } catch ( java.io.IOException e ) { return java.nio.file.attribute.FileTime.fromMillis ( 0 ) ; } }
public static java.lang.String getGerritJarPluginName ( java.io.File srcFile ) throws java.io.IOException { java.util.jar.JarFile jarFile = new java.util.jar.JarFile ( srcFile ) ; try { return jarFile.getManifest ( ) . getMainAttributes ( ) . getValue ( "Gerrit-PluginName" ) ; } finally { jarFile.close ( ) ; } }
public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; validate ( ) ; setAccount ( ) ; }
public final java.lang.String readString ( java.lang.String def , java.lang.String fmt , java.lang.Object ... args ) { if ( ( def != null ) && ( def.isEmpty ( ) ) ) { def = null ; } return readStringImpl ( def , fmt , args ) ; }
protected void configureCommands ( ) { command ( "start" ) . to ( com.googlesource.gerrit.plugins.replication.StartCommand.class ) ; }
public V get ( K key ) { com.google.gerrit.ehcache.SerializableProtobuf < V > val = cache.get ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) ) ; return val != null ? val.toObject ( valueCodec , valueProvider ) : null ; }
java.lang.String getRemoteEmail ( javax.servlet.http.HttpServletRequest req ) { if ( ( emailHeader ) != null ) { return com.google.common.base.Strings.emptyToNull ( req.getHeader ( emailHeader ) ) ; } else { return null ; } }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; setTopic ( update ) ; setStatus ( update ) ; }
public void emptyExceptSubject ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate ( newChange ( ) , changeOwner ) ; update.setSubjectForCommit ( "Create change" ) ; update.commit ( ) ; com.google.common.truth.Truth.assertThat ( update.getRevision ( ) ) . isNotNull ( ) ; }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.client.reviewdb.Account.Id acct ) { return "dashboard," + ( acct.get ( ) ) ; }
public com.google.gerrit.server.patch.PatchList createEntry ( final com.google.gerrit.server.patch.PatchListKey key ) throws java.lang.Exception { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey.get ( ) ) ; try { return readPatchList ( key , repo ) ; } finally { repo.close ( ) ; } }
protected final com.google.gerrit.pgm.CmdLineParser newCmdLineParser ( ) { final com.google.gerrit.pgm.CmdLineParser parser = new com.google.gerrit.pgm.CmdLineParser ( this ) ; for ( com.google.gerrit.server.ssh.commands.CmdOption c : optionList ) { parser.addOption ( c , c ) ; } return parser ; }
void insert ( org.apache.lucene.document.Document doc ) throws java.io.IOException { writer.addDocument ( doc ) ; commit ( ) ; }
void onRevert ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.RevertAction.call ( revert , changeId , revision , project , subject ) ; }
public void onDoubleClick ( com.google.gwt.event.dom.client.DoubleClickEvent arg0 ) { editArea.setText ( contentPanelMessage.getText ( ) ) ; setEdit ( ( ! ( isEdit ( ) ) ) ) ; runClickCallback ( ) ; }
public boolean apply ( com.google.gerrit.extensions.common.ProjectInfo info ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( ( ( info.name ) != null ? info.name : com.google.gerrit.extensions.restapi.Url.decode ( info.id ) ) ) . equals ( p ) ; }
private static com.google.gerrit.client.rpc.RestApi detail ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "detail" ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.io.IOException ;
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( cd.change ( ) . getLastUpdatedOn ( ) . getTime ( ) ) <= ( cut.getTime ( ) ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; }
boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return ( canPerform ( Permission.SUBMIT , isChangeOwner ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
private java.lang.String encode ( java.lang.String segment ) { if ( type ( ) . urlEncode ( ) ) { return com.google.gwt.http.client.URL.encodeQueryString ( type ( ) . replacePathSeparator ( segment ) ) ; } else { return segment ; } }
public void listOneIncludeMember ( ) throws java.lang.Exception { group ( "gx" , "Administrators" ) ; group ( "gy" , "Administrators" ) ; PUT ( "/groups/Administrators/groups/gx" ) ; PUT ( "/groups/Administrators/groups/gy" ) ; org.junit.Assert.assertEquals ( GET_ONE ( "/groups/Administrators/groups/gx" ) . name , "gx" ) ; }
void setLineNumber ( com.google.gerrit.client.diff.DisplaySide side , int cmLine , int line ) { setLineNumber ( side , cmLine , java.lang.String.valueOf ( line ) , UnifiedTable.style.unifiedLineNumber ( ) ) ; }
public void merge ( com.google.gerrit.server.git.MergeOp.Factory mof , com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { if ( start ( branch ) ) { mergeImpl ( mof , branch ) ; } }
public void setUp ( ) { synchronized ( java.util.TimeZone.class ) { systemTimeZone = java.util.TimeZone.getDefault ( ) ; java.util.TimeZone.setDefault ( java.util.TimeZone.getTimeZone ( "GMT-5:00" ) ) ; format = new java.text.SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss.SSS Z" ) ; } }
public boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public static java.lang.String refsDraftCommentsPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId ) . toString ( ) ; }
public com.google.gerrit.server.mail.CommentSender create ( com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notify , com.google.gerrit.reviewdb.client.Change change ) ;
public void allRefsVisibleWithRefsMetaConfig ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/meta/config" ) ; assertRefs ( "HEAD" , "refs/changes/01/1/1" , "refs/changes/02/2/1" , "refs/heads/branch" , "refs/heads/master" ) ; }
public static void draft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . get ( cb ) ; }
java.lang.String patchPageTitle ( int id , java.lang.String path ) ;
private boolean match ( java.lang.String destBranch , java.lang.String refPattern ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( refPattern ) . match ( destBranch , this . getRefControl ( ) . getCurrentUser ( ) . getUserName ( ) ) ; }
private boolean canSkipRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "skipRef" , ref , true ) ; }
public void close ( ) throws java.io.IOException { rw.release ( ) ; repo.close ( ) ; }
public final boolean requireXsrfValid ( ) { if ( isXsrfValid ( ) ) { return true ; } else { onFailure ( new java.lang.Exception ( com.google.gwtjsonrpc.common.JsonConstants.ERROR_INVALID_XSRF ) ) ; return false ; } }
public void onSuccess ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
public static java.lang.String refsDraftComments ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId ) ; r.append ( changeId.get ( ) ) ; return r.toString ( ) ; }
public void testParentHashCode ( ) { final java.lang.String str = "foo" ; final com.google.gwtorm.client.StringKeyTestCase.Parent p = new com.google.gwtorm.client.StringKeyTestCase.Parent ( str ) ; assertEquals ( str.hashCode ( ) , p.hashCode ( ) ) ; }
public java.lang.String getBaseGerritUrl ( javax.servlet.http.HttpServletRequest req ) { return "http://test-host-review/foo/" ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.ProjectRight > byProject ( com.google.gerrit.client.reviewdb.Project.Id id ) throws com.google.gwtorm.client.OrmException ;
private static < T , K extends com.google.gwtorm.client.Key < ? > > com.google.common.util.concurrent.CheckedFuture < T , com.google.gwtorm.server.OrmException > emptyFuture ( ) { return com.google.common.util.concurrent.Futures.immediateCheckedFuture ( null ) ; }
public java.lang.String format ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) { return ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( raw ) ) ) + "</pre>" ; }
public abstract boolean writeChanges ( ) ;
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > put ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.PUT , name ) ) ; }
public void repeatedHashtag ( ) throws java.lang.Exception { java.lang.String commitMessage = "#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1" ; com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "Subject" , "Hashtag1" , "Hashtag2" ) ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.server.query.change.ChangeData > i : getWriteIndexes ( ) ) { i.replace ( cd ) ; } fireChangeIndexedEvent ( cd ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info ) ; }
public void emptySoy ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( ) , buildBranchesSoyData ( ) ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( ) , buildTagsSoyData ( ) ) ; }
private void assertBodyEquals ( java.lang.String expected , org.eclipse.jgit.lib.ObjectId commitId ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = parseCommit ( commitId ) ; org.junit.Assert.assertEquals ( expected , commit.getFullMessage ( ) ) ; }
private java.net.URI [ ] listenURLs ( final org.eclipse.jgit.lib.Config cfg ) { java.lang.String [ ] urls = cfg.getStringList ( "httpd" , null , "listenurl" ) ; if ( ( urls.length ) == 0 ) { urls = new java.lang.String [ ] { "http://*:8080/" } ; } final java.net.URI [ ] r = new java.net.URI [ urls.length ] ; for ( int i = 0 ; i < ( r.length ) ; i ++ ) { final java.lang.String s = urls [ i ] ; try { r [ i ] = new java.net.URI ( s ) ; } catch ( java.net.URISyntaxException e ) { throw new java.lang.IllegalArgumentException ( ( "Invalid httpd.listenurl " + s ) , e ) ; } } return r ; }
private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy ( com.google.gerrit.extensions.client.SubmitType submitType , org.eclipse.jgit.lib.BatchRefUpdate branchUpdate ) throws com.google.gerrit.server.git.MergeException , com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , branchUpdate , getAlreadyAccepted ( branchTip ) , destBranch ) ; }
com.google.gerrit.extensions.api.changes.ChangeApi id ( java.lang.String triplet ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public final native boolean showWhitespaceErrors ( ) ;
private void display ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab.display ( result , subname ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content ) ; renderLinks ( editFileInfo , diffLinks ) ; editFileInfo = null ; diffLinks = null ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.RevisionResource > list ( ) throws com.google.gerrit.extensions.restapi.AuthException { checkIdentifiedUser ( ) ; return list.get ( ) ; }
public void doChangeRestoredHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , java.lang.String reason , com.google.gerrit.reviewdb.server.ReviewDb db ) { }
private org.eclipse.jgit.lib.Repository openRepository ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return repoManager.openRepository ( name ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException err ) { com.google.gerrit.common.ChangeHookRunner.log.warn ( ( "Cannot open repository " + ( name.get ( ) ) ) , err ) ; return null ; } }
public static java.lang.String messageUUID ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { final byte [ ] raw = new byte [ 8 ] ; com.google.gerrit.server.ChangeUtil.fill ( raw , db ) ; return org.eclipse.jgit.util.Base64.encodeBytes ( raw ) ; }
public static org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when , org.eclipse.jgit.lib.PersonIdent serverIdent , java.lang.String anonymousCowardName ) { return new org.eclipse.jgit.lib.PersonIdent ( author.getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public void mergeByOtherNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; merge ( sc.changeId , other , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
private void blockCreateReference ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; com.google.gerrit.server.project.Util.block ( cfg , Permission.CREATE , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/*" ) ; saveProjectConfig ( project , cfg ) ; }
public com.google.gerrit.server.notedb.DraftCommentNotes create ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.notedb.DraftCommentNotes ( repoManager , draftsProject , change , accountId ) ; }
private com.google.gerrit.metrics.dropwizard.MetricJson toJson ( java.lang.String q , com.codahale.metrics.Metric m ) { return dataOnly ? new com.google.gerrit.metrics.dropwizard.MetricJson ( m ) : new com.google.gerrit.metrics.dropwizard.MetricJson ( m , metrics.getAnnotations ( q ) ) ; }
void onRefReplicatedToAllNodes ( java.lang.String project , java.lang.String ref , int nodesCount ) { com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent event = new com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent ( project , ref , nodesCount ) ; postEvent ( project , ref , event ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.PatchLineComment > published ( com.google.gerrit.client.reviewdb.Patch.Id id ) throws com.google.gwtorm.client.OrmException ;
void setDisableHttpd ( final boolean arg ) { httpd = false ; }
public void removeFromNonExistingGroup_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , DELETE ( "/groups/non-existing/members/admin" ) ) ; }
public static void deleteRevision ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.revision ( id , commit ) . delete ( cb ) ; }
protected void configure ( ) { cache ( com.google.gerrit.server.git.ChangeCache.ID_CACHE , Project.NameKey.class , new com.google.inject.TypeLiteral < java.util.List < com.google.gerrit.reviewdb.client.Change > > ( ) { } ) . maximumWeight ( 1024 ) . loader ( com.google.gerrit.server.git.ChangeCache.Loader.class ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change c ) { if ( c.getStatus ( ) . isOpen ( ) ) { if ( setStatusNew ) { c.setStatus ( Change.Status.NEW ) ; } com.google.gerrit.server.ChangeUtil.updated ( c ) ; } return c ; }
protected void preDisplay ( com.google.gerrit.common.data.GroupList result ) { addPanel.setVisible ( result.isCanCreateGroup ( ) ) ; groups.display ( result.getGroups ( ) ) ; groups.finishDisplay ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , AccessPath.UNKNOWN , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , null , db , id ) ; }
protected void configure ( ) { listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( LocalDiskRepositoryManager.Lifecycle.class ) ; }
private java.lang.String getBaseName ( java.lang.String project ) { int i = project.lastIndexOf ( '/' ) ; if ( i < 0 ) { return project ; } else { return project.substring ( ( i + 1 ) ) ; } }
public void flushCacheWithGerritPrefix ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.post ( "/config/server/caches/gerrit-accounts/flush" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_OK , r.getStatusCode ( ) ) ; }
public void testIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "file:a" ) ; org.junit.Assert.assertEquals ( query ( in ) , rewrite ( in ) ) ; }
public com.google.inject.Module create ( ) throws com.google.gerrit.server.plugins.InvalidPluginException { com.google.common.base.Preconditions.checkState ( ( ( command ) != null ) , "pluginName must be provided" ) ; return this ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithStatus ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Change.Status status ) throws java.lang.Exception { return newChange ( repo , null , null , null , status , null ) ; }
private com.google.gerrit.common.data.PermissionRule rule ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.reviewdb.AccountGroup group ) { return new com.google.gerrit.common.data.PermissionRule ( config.resolve ( group ) ) ; }
public static com.google.gerrit.plugin.client.rpc.RestApi change ( java.lang.String id ) { return new com.google.gerrit.plugin.client.rpc.RestApi ( "/changes/" ) . id ( id ) ; }
private org.eclipse.jgit.lib.Repository openRepository ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) { try { return repoManager.openRepository ( name ) ; } catch ( java.io.IOException err ) { com.google.gerrit.common.ChangeHookRunner.log.warn ( ( "Cannot open repository " + ( name.get ( ) ) ) , err ) ; return null ; } }
public void starChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public com.google.gerrit.extensions.api.accounts.Accounts accounts ( ) { return accounts.get ( ) ; }
private static boolean isOff ( java.lang.String listenHostname ) { return ( ( "off" . equalsIgnoreCase ( listenHostname ) ) || ( "none" . equalsIgnoreCase ( listenHostname ) ) ) || ( "no" . equalsIgnoreCase ( listenHostname ) ) ; }
protected void run ( ) { loader.rescan ( ) ; }
public com.google.gerrit.server.project.ListProjects setMatchPrefix ( java.lang.String prefix ) { this . matchPrefix = prefix ; return this ; }
private < S extends java.lang.Comparable < ? > > com.google.common.collect.Ordering < S > createOrdering ( ) { if ( nullsLast ) { return com.google.common.collect.Ordering.natural ( ) . nullsLast ( ) ; } else { return com.google.common.collect.Ordering.natural ( ) . nullsFirst ( ) ; } }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Mute" ) . setTitle ( "Mute the change to unhighlight it in the dashboard" ) . setVisible ( ( ( ! ( rsrc.isUserOwner ( ) ) ) && ( isMuteable ( rsrc ) ) ) ) ; }
protected < K extends java.io.Serializable , V extends java.io.Serializable > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > disk ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type ) { return disk ( com.google.inject.Key.get ( type ) ) ; }
protected com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext startServer ( ) throws java.lang.Exception { return new com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext ( startImpl ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { buttonClicked = true ; if ( callback != null ) { callback.onSuccess ( result ) ; } hide ( ) ; }
protected com.google.gwtjsonrpc.server.SignedToken createXsrfSignedToken ( ) throws com.google.gwtjsonrpc.server.XsrfException { try { return com.google.gerrit.server.GerritServer.getInstance ( ) . getXsrfToken ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gwtjsonrpc.server.XsrfException ( "Cannot configure GerritServer" , e ) ; } }
public com.google.gerrit.extensions.restapi.BinaryResult submitPreview ( ) throws com.google.gerrit.extensions.restapi.RestApiException { submitPreview.setFormat ( "zip" ) ; return submitPreview.apply ( revision ) ; }
void onRevert ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.RevertAction.call ( revert , changeId , revision , subject ) ; }
public org.kohsuke.github.GHMyself getMyself ( ) throws java.io.IOException { if ( isLoggedIn ( ) ) { return getHub ( ) . getMyself ( ) ; } else { return null ; } }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; }
private java.util.Map < java.lang.String , com.google.gerrit.extensions.common.LabelInfo > getChangeLabels ( java.lang.String changeId ) throws java.lang.Exception { return gApi.changes ( ) . id ( changeId ) . get ( java.util.EnumSet.of ( com.google.gerrit.extensions.client.ListChangesOption.DETAILED_LABELS ) ) . labels ; }
private boolean canRead ( org.eclipse.jgit.lib.ObjectId revId ) throws java.io.IOException { try ( org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit ( revId ) ; return projectControl.canReadCommit ( db , rw , commit ) ; } }
public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) { return fileApi.create ( files.get ( ) . parse ( revision , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; index = new com.google.gerrit.server.index.FakeIndex ( FakeIndex.V2 ) ; com.google.gerrit.server.index.IndexCollection indexes = new com.google.gerrit.server.index.IndexCollection ( ) ; indexes.setSearchIndex ( index ) ; queryBuilder = new com.google.gerrit.server.index.FakeQueryBuilder ( indexes ) ; }
private void testCopyLocal ( ) { org.easymock.EasyMock.expect ( cfgMock.getCopyLocal ( ) ) . andReturn ( true ) . once ( ) ; org.easymock.EasyMock.expect ( cfgMock.getLocalStoreUrl ( ) ) . andReturn ( com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_LOCAL_PATH ) . once ( ) ; }
public java.lang.String getCoverLetter ( ) { if ( ( changeMessage ) != null ) { final java.lang.String txt = changeMessage.getMessage ( ) ; if ( txt != null ) { return txt.trim ( ) ; } } return "" ; }
private com.google.gerrit.server.group.GroupResource check ( java.lang.String urlId , com.google.gerrit.server.account.GroupControl ctl ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ctl.isVisible ( ) ) { return new com.google.gerrit.server.group.GroupResource ( ctl ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( urlId ) ; }
protected void runImpl ( ) throws java.io.IOException { closeDb ( ) ; final org.spearce.jgit.transport.UploadPack up = new org.spearce.jgit.transport.UploadPack ( repo ) ; up.upload ( in , out , err ) ; }
void moveUp ( int row ) { swap ( ( row - 1 ) , row ) ; }
public void onFailure ( java.lang.Exception reason ) { net.codemirror.lib.Loader.error ( reason ) ; callback.onFailure ( reason ) ; }
public void putComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { verifyComment ( c ) ; com.google.common.base.Preconditions.checkArgument ( ( ( c.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) , "Cannot insert a published comment into a ChangeDraftUpdate" ) ; put.put ( com.google.gerrit.server.notedb.ChangeDraftUpdate.key ( c ) , c ) ; }
com.google.gerrit.server.git.SubmoduleOp create ( com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , org.eclipse.jgit.revwalk.RevCommit mergeTip , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.Repository db , com.google.gerrit.reviewdb.client.Project destProject , java.util.List < com.google.gerrit.reviewdb.client.Change > submitted , java.util.Map < com.google.gerrit.reviewdb.client.Change.Id , com.google.gerrit.server.git.CodeReviewCommit > commits ) ;
protected void configure ( ) { factory ( ChangeResource.Factory.class ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; }
public int next ( ) { return com.google.gerrit.server.util.IdGenerator.mix ( com.google.gerrit.server.util.IdGenerator.salt , gen.getAndIncrement ( ) ) ; }
public com.google.gerrit.server.CurrentUser get ( ) { final com.google.gerrit.client.reviewdb.Account.Id id = call.getAccountId ( ) ; return id != null ? new com.google.gerrit.server.IdentifiedUser ( id ) : CurrentUser.ANONYMOUS ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Index.Input input ) throws java.io.IOException { indexer.index ( rsrc.getChange ( ) ) ; return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
public void close ( ) { com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination ( executor , java.lang.Long.MAX_VALUE , java.util.concurrent.TimeUnit.SECONDS ) ; try { openIndex.close ( ) ; } finally { closedIndex.close ( ) ; } }
public void notACommit ( final org.eclipse.jgit.lib.ObjectId id , final java.lang.String message ) { ignoredObjectIds.add ( id ) ; }
public final void insert ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doInsert ( instances , null ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
protected void configure ( ) { cache ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.CACHE_NAME , java.lang.String.class , java.util.regex.Pattern.class ) . loader ( com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.Loader.class ) ; bind ( com.google.gerrit.server.git.TagCache.class ) ; }
public boolean canSeeGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return canSeeMembers ( ) ; }
public void onCellClicked ( com.google.gwt.user.client.ui.SourcesTableEvents sender , int row , int cell ) { if ( ( getRowItem ( row ) ) != null ) { movePointerTo ( row ) ; } }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content.text ( ) ) ; content = null ; }
private void allowForcePushOnRefsTags ( ) throws java.lang.Exception { removePushFromRefsTags ( ) ; grant ( Permission.PUSH , project , "refs/tags/*" , true , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
void showTable ( ) { myBody.clear ( ) ; myBody.add ( table ) ; table.finishDisplay ( false ) ; }
protected com.google.gerrit.client.ui.Screen createScreen ( ) { return ( info ) != null ? new com.google.gerrit.client.changes.ChangeScreen ( info ) : new com.google.gerrit.client.changes.ChangeScreen ( id ) ; }
private static com.google.inject.Binding < com.google.gerrit.util.cli.OptionHandlerFactory < ? > > cast ( com.google.inject.Binding < ? > e ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) com.google.inject.Binding < com.google.gerrit.util.cli.OptionHandlerFactory < ? > > b = ( ( com.google.inject.Binding < com.google.gerrit.util.cli.OptionHandlerFactory < ? > > ) ( e ) ) ; return b ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( cd , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > getForOpenChange ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c , user ) ; return cs.changes ( ) . asList ( ) ; }
java.lang.Runnable signInCallback ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { java.lang.String token = host.getToken ( ) ; if ( cm.extras ( ) . hasActiveLine ( ) ) { token += "@" + ( getTokenSuffixForActiveLine ( cm ) ) ; } com.google.gerrit.client.Gerrit.doSignIn ( token ) ; } } ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { saveStateOnUnload = false ; goChange ( ) ; }
public java.lang.String asText ( ) { return asText ( "Name" , "Query" , queriesByName ) ; }
private boolean canRegisterNewEmail ( ) { return com.google.gerrit.client.Gerrit.getConfig ( ) . canEdit ( Account.FieldName.REGISTER_NEW_EMAIL ) ; }
private void setModeHeader ( javax.servlet.http.HttpServletResponse res , com.google.gitiles.PathServlet.FileType type ) { res.setHeader ( com.google.gitiles.PathServlet.MODE_HEADER , java.lang.String.format ( "%06o" , type.mode.getBits ( ) ) ) ; }
private static com.google.gerrit.extensions.common.AccountInfo fromAcountInfo ( com.google.gerrit.extensions.common.AccountInfo i ) { com.google.gerrit.extensions.common.AccountInfo ai = new com.google.gerrit.extensions.common.AccountInfo ( ) ; com.google.gerrit.server.api.changes.ChangeInfoMapper.fromAccount ( i , ai ) ; return ai ; }
public void testNonIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a OR foo:b" ) ; assertEquals ( in , rewrite ( in ) ) ; }
public void indexChangeOnNonVisibleBranch ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; blockRead ( project , "refs/heads/master" ) ; userSession.post ( ( ( "/changes/" + changeId ) + "/index/" ) ) . assertNotFound ( ) ; }
public java.lang.String getPluginName ( java.io.File srcFile ) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull ( getGerritPluginName ( srcFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcFile ) ) . toLowerCase ( ) ; }
public com.google.gerrit.reviewdb.client.Account getNewAssignee ( ) { return newAssignee ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { dialogBox.hide ( ) ; usernameTxt.setValue ( "" ) ; sshKeyTxt.setValue ( "" ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { createCommentEditor ( suggestRow , column , line , side ) ; }
com.google.gerrit.server.rpc.project.ProjectDetailFactory create ( com.google.gerrit.client.reviewdb.Project.Id id ) ;
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( patchSetId ) , new com.google.gerrit.client.changes.ChangeScreen ( patchSetId ) ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > and ( final com.google.gerrit.server.query.Predicate < T > ... that ) { if ( ( that.length ) == 1 ) { return that [ 0 ] ; } return new com.google.gerrit.server.query.AndPredicate < T > ( that ) ; }
private org.eclipse.jgit.errors.ConfigInvalidException parseException ( java.lang.String fmt , java.lang.Object ... args ) { return com.google.gerrit.server.notedb.ChangeNotes.parseException ( changeId , fmt , args ) ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (status:open OR status:merged)" ) ; assertEquals ( query ( parse ( "status:new OR status:submitted OR status:draft OR status:merged" ) ) , rewrite.rewrite ( in ) ) ; }
public com.google.gerrit.common.data.GroupReference resolve ( com.google.gerrit.reviewdb.AccountGroup group ) { return resolve ( com.google.gerrit.common.data.GroupReference.forGroup ( group ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initRealmProperties ( ) ; initMemberList ( ) ; }
public static org.eclipse.jgit.internal.storage.dfs.InMemoryRepository newRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.testutil.InMemoryRepositoryManager.Repo ( com.google.gerrit.testutil.NoteDbMode.newNotesMigrationFromEnv ( ) , name ) ; }
public void suggestReviewersNoResult1 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public void createProjectFoo ( ) throws com.google.gerrit.extensions.restapi.RestApiException { gApi.projects ( ) . name ( "foo" ) . create ( ) ; }
public java.util.List < com.google.gerrit.common.data.SubmitRecord > canSubmit ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.PatchSet patchSet ) { return canSubmit ( db , patchSet , null ) ; }
public java.lang.String getChangeMessageThreadId ( ) throws com.google.gerrit.common.errors.EmailException { return velocify ( ( "<gerrit.${change.createdOn.time}.$change.key.get()" + "@$email.gerritHost>" ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.groupListTitle ( ) ) ; initPageHeader ( ) ; groups = new com.google.gerrit.client.admin.GroupTable ( true , com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) ; add ( groups ) ; }
protected com.google.gerrit.server.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse resp ) { return new com.google.gerrit.server.GerritCall ( server , req , resp ) ; }
private void clearMarkerAndWidget ( ) { marker.clear ( ) ; if ( ( widget ) != null ) { widget.clear ( ) ; } else { cm.removeLineClass ( 0 , LineClassWhere.WRAP , DiffTable.style.hideNumber ( ) ) ; } }
public void changeDetail ( final com.google.gerrit.client.reviewdb.Change.Id id , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.ChangeDetail > callback ) { run ( callback , changeDetail.create ( id ) ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( select ( ) ) ; }
protected void set ( int newValue ) { checkSequenceValue ( newValue ) ; seq = newValue ; }
protected Project.NameKey createProject ( java.lang.String nameSuffix , com.google.gerrit.reviewdb.client.Project.NameKey parent ) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject ( nameSuffix , parent , true ) ; }
private boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( canAbandon ( db ) ) && ( refControl.asForRef ( ) . testOrFalse ( RefPermission.CREATE_CHANGE ) ) ) && ( getProjectControl ( ) . getProjectState ( ) . statePermitsWrite ( ) ) ; }
public static java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > parseAfterShardedRefPart ( java.lang.String name ) { java.lang.Integer id = com.google.gerrit.reviewdb.client.RefNames.parseAfterShardedRefPart ( name ) ; return java.util.Optional.ofNullable ( id ) . map ( com.google.gerrit.reviewdb.client.Account.Id :: new ) ; }
public com.google.gerrit.reviewdb.client.PatchSet update ( com.google.gerrit.reviewdb.client.PatchSet patchset ) { if ( patchset.isDraft ( ) ) { patchset.setDraft ( false ) ; return patchset ; } return null ; }
public java.util.List < com.google.gerrit.client.reviewdb.AccountSshKey > run ( com.google.gerrit.client.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return db.accountSshKeys ( ) . byAccount ( com.google.gerrit.client.rpc.Common.getAccountId ( ) ) . toList ( ) ; }
public static java.lang.String createCommit ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent i , java.lang.String msg ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.GitUtil.createCommit ( git , i , msg , true ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { r.add ( result ) ; hasDraftComments = ! ( result.isEmpty ( ) ) ; }
com.google.gerrit.acceptance.server.mail.StagedChange stage ( com.google.gerrit.server.account.WatchConfig.NotifyType ... watches ) throws java.lang.Exception ;
public static com.google.gerrit.server.patch.PatchListKey againstCommit ( org.eclipse.jgit.lib.AnyObjectId otherCommitId , org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace ) { return new com.google.gerrit.server.patch.PatchListKey ( otherCommitId , newId , whitespace , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
private void touchChange ( ) { try { com.google.gerrit.server.ChangeUtil.touch ( change , db ) ; } catch ( com.google.gwtorm.client.OrmException e ) { } }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return notes.getChange ( ) ; }
public void testNoAdvance ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 0 , 0 ) , iter.advance ( 0 ) ) ; }
protected void beforeInit ( com.google.gerrit.pgm.BaseInit.SiteInit init ) throws java.lang.Exception { }
private static com.google.gerrit.client.reviewdb.ApprovalCategoryValue value ( final com.google.gerrit.client.reviewdb.ApprovalCategory cat , final int value , final java.lang.String name ) { return new com.google.gerrit.client.reviewdb.ApprovalCategoryValue ( new com.google.gerrit.client.reviewdb.ApprovalCategoryValue.Key ( cat.getId ( ) , ( ( short ) ( value ) ) ) , name ) ; }
public final native void setCh ( int ch ) ;
private void log ( final int rc ) { if ( logged.compareAndSet ( false , true ) ) { log.onExecute ( rc ) ; } }
public void execute ( java.lang.String sql ) throws com.google.gwtorm.client.OrmException { try { stmt.execute ( sql ) ; } catch ( java.sql.SQLException e ) { throw new com.google.gwtorm.client.OrmException ( ( "Cannot apply SQL\n" + sql ) , e ) ; } }
public static java.lang.String fullName ( java.lang.String ref ) { return ( ref.startsWith ( com.google.gerrit.reviewdb.client.RefNames.REFS ) ? "" : com.google.gerrit.reviewdb.client.RefNames.REFS_HEADS ) + ref ; }
private void generateProxyMethods ( final com.google.gwt.core.ext.TreeLogger logger , final com.google.gwt.user.rebind.SourceWriter srcWriter ) { final com.google.gwt.core.ext.typeinfo.JMethod [ ] methodList = svcInf.getOverridableMethods ( ) ; for ( final com.google.gwt.core.ext.typeinfo.JMethod m : methodList ) { generateProxyMethod ( logger , m , srcWriter ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; listener ( ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.Lifecycle.class ) ; }
public void logout ( ) { if ( ( val ) != null ) { manager.destroy ( key ) ; key = null ; val = null ; saveCookie ( "" , 0 ) ; } }
private void assertError ( java.lang.String expectedError , java.lang.String response ) { org.junit.Assert.assertTrue ( response , response.contains ( expectedError ) ) ; }
public void testReplaceEscaping ( ) { org.junit.Assert.assertEquals ( "<a href=\"a&quot;&amp;&#39;&lt;&gt;b\">find</a>" , new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "find" , "a\"&\'<>b" ) . replace ( "find" ) ) ; }
private boolean sshEnabled ( ) { return ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.SSH ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.DEFAULT_DOWNLOADS ) ) ; }
public void testFirstParentAltersId ( ) throws java.lang.Exception { assertEquals ( ( "a\n" + ( "\n" + "Change-Id: I7fc3876fee63c766a2063df97fbe04a2dddd8d7c\n" ) ) , call ( "a\n" ) ) ; setHEAD ( ) ; assertEquals ( ( "a\n" + ( "\n" + "Change-Id: I51e86482bde7f92028541aaf724d3a3f996e7ea2\n" ) ) , call ( "a\n" ) ) ; }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo.getRepository ( ) ) ; }
private java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > getBlameJson ( java.lang.String path ) throws java.lang.Exception { return buildJson ( path , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > > ( ) { } . getType ( ) ) ; }
public com.google.gerrit.extensions.common.DiffInfo diff ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDiff.get ( ) . apply ( file ) . value ( ) ; } catch ( java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve diff" , e ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; groups = new com.google.gerrit.client.admin.GroupTable ( true ) ; add ( groups ) ; }
protected void configureServlets ( ) { bind ( com.googlesource.gerrit.plugins.manager.AvailablePluginsCollection.class ) ; bind ( com.googlesource.gerrit.plugins.manager.repository.PluginsRepository.class ) . to ( com.googlesource.gerrit.plugins.manager.repository.JenkinsCiPluginsRepository.class ) ; serve ( "/available*" ) . with ( com.googlesource.gerrit.plugins.manager.PluginManagerRestApiServlet.class ) ; filterRegex ( ".*\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; }
public com.google.gerrit.server.git.WorkQueue.Executor createQueue ( int poolsize , java.lang.String prefix ) { final com.google.gerrit.server.git.WorkQueue.Executor r = new com.google.gerrit.server.git.WorkQueue.Executor ( poolsize , prefix ) ; r.setContinueExistingPeriodicTasksAfterShutdownPolicy ( false ) ; r.setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; queues.add ( r ) ; return r ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > put ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.PUT , "/" ) ) ; }
private com.google.gerrit.reviewdb.client.Change newChange ( ) { return com.google.gerrit.testutil.TestChanges.newChange ( project , changeOwner ) ; }
public static com.google.gerrit.elasticsearch.ElasticIndexModule latestVersionWithOnlineUpgrade ( ) { return new com.google.gerrit.elasticsearch.ElasticIndexModule ( null , 0 ) ; }
private static java.util.List < com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > > none ( ) { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > any = any ( ) ; return com.google.common.collect.ImmutableList.of ( not ( any ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = new com.google.gwtorm.nosql.heap.MemoryDatabase < com.google.gwtorm.data.PhoneBookDb > ( com.google.gwtorm.data.PhoneBookDb.class ) ; openSchemas = new java.util.ArrayList < com.google.gwtorm.data.PhoneBookDb > ( ) ; }
private org.eclipse.jgit.lib.PersonIdent toCommitterIdent ( final com.google.gerrit.reviewdb.PatchSetApproval audit ) { if ( audit != null ) { return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newCommitterIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; } return myIdent ; }
public void display ( java.lang.String commitMessage , com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor ) { display ( null , null , null , false , commitMessage , commentLinkProcessor ) ; }
public static com.google.gwtjsonrpc.client.event.Type < com.google.gwtjsonrpc.client.event.RpcCompleteHandler > getType ( ) { if ( ( com.google.gwtjsonrpc.client.event.RpcCompleteEvent.TYPE ) == null ) { com.google.gwtjsonrpc.client.event.RpcCompleteEvent.TYPE = new com.google.gwtjsonrpc.client.event.Type < com.google.gwtjsonrpc.client.event.RpcCompleteHandler > ( ) ; com.google.gwtjsonrpc.client.event.RpcCompleteEvent.INSTANCE = new com.google.gwtjsonrpc.client.event.RpcCompleteEvent ( ) ; } return com.google.gwtjsonrpc.client.event.RpcCompleteEvent.TYPE ; }
< I > com.google.gerrit.extensions.restapi.RestModifyView < P , I > post ( P parent ) throws com.google.gerrit.extensions.restapi.RestApiException ;
private static void validateReindexerNotRunning ( com.google.gerrit.server.index.OnlineReindexer < ? , ? , ? > reindexer ) throws com.google.gerrit.lucene.ReindexerAlreadyRunningException { if ( ( reindexer != null ) && ( reindexer.isRunning ( ) ) ) { throw new com.google.gerrit.lucene.ReindexerAlreadyRunningException ( ) ; } }
public static com.google.gerrit.common.data.SubmitTypeRecord OK ( com.google.gerrit.extensions.client.SubmitType type ) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord ( ) ; r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK ; r.type = type ; return r ; }
public void deleteAll ( ) throws java.io.IOException { openIndex.deleteAll ( ) ; closedIndex.deleteAll ( ) ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute ca , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps , java.util.Map < com.google.gerrit.reviewdb.PatchSet.Id , java.util.Collection < com.google.gerrit.reviewdb.PatchSetApproval > > approvals ) { addPatchSets ( ca , ps , approvals , false , null ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { addRight.setEnabled ( true ) ; nameTxt.setText ( "" ) ; referenceTxt.setText ( "" ) ; display ( result ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeResource resource , com.google.gerrit.server.change.ChangeEdits.Put.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { putEdit.apply ( resource.getControl ( ) , path , input.content ) ; return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
public com.google.gerrit.reviewdb.AccountGroup lookup ( final java.lang.String groupName ) { return byName.get ( new com.google.gerrit.reviewdb.AccountGroup.NameKey ( groupName ) ) ; }
private java.util.List < com.google.gerrit.server.notedb.rebuild.Event > events ( com.google.gerrit.server.notedb.rebuild.Event ... es ) { return com.google.common.collect.Lists.newArrayList ( es ) ; }
public void testThatNullBasePathThrowsAnException ( ) { new com.google.gerrit.server.git.LocalDiskRepositoryManager ( site , new org.eclipse.jgit.lib.Config ( ) , createNiceMock ( com.google.gerrit.server.notedb.NotesMigration.class ) ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.Unified ( base , com.google.gerrit.client.DiffObject.patchSet ( id.getParentKey ( ) ) , id.get ( ) , side , line ) ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
private static boolean isNotSignedIn ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NotSignedInException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NotSignedInException.MESSAGE ) ) ; }
protected < T > T buildJson ( java.lang.String path , java.lang.reflect.Type typeOfT ) throws java.lang.Exception { return new com.google.gson.Gson ( ) . < T > fromJson ( buildJsonRaw ( path , "" ) , typeOfT ) ; }
public boolean usePool ( ) { }
public java.util.List < org.eclipse.jgit.revwalk.FooterLine > commitFooters ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitFooters ) == null ) { loadCommitData ( ) ; } return commitFooters ; }
public static java.lang.String toChange ( final com.google.gerrit.client.reviewdb.Change.Id c ) { return "change," + ( c.get ( ) ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultRuleError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError ( err ) ; } }
public void tearDown ( ) throws java.lang.Exception { walk.release ( ) ; }
public void createProjectFooWithGitSuffix ( ) throws java.lang.Exception { java.lang.String name = "foo" ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . name ( ( name + ".git" ) ) . create ( ) . get ( ) . name ) ; }
private PushOneCommit.Result createDraft ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/drafts/master" ) ; }
org.eclipse.jgit.lib.ObjectId getChangeMetaId ( ) { return changeMetaId ; }
com.google.gerrit.extensions.client.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.DisplaySide side ) { if ( ( ( side == ( DisplaySide.A ) ) && ( base.isBaseOrAutoMerge ( ) ) ) || ( base.isParent ( ) ) ) { return com.google.gerrit.extensions.client.Side.PARENT ; } return com.google.gerrit.extensions.client.Side.REVISION ; }
public com.google.gerrit.server.project.ProjectState getParentState ( ) { if ( isAllProjects ) { return null ; } com.google.gerrit.reviewdb.client.Project.NameKey parentName = getProject ( ) . getParent ( ) ; if ( parentName == null ) { parentName = allProjectsName ; } return projectCache.get ( parentName ) ; }
public void tearDown ( ) { plugin.stop ( env ) ; env.onStopPlugin ( plugin ) ; }
private void removeAllChildren ( com.google.gwt.user.client.Element el ) { for ( int i = ( com.google.gwt.user.client.DOM.getChildCount ( el ) ) - 1 ; i >= 0 ; i -- ) { com.google.gwt.user.client.DOM.removeChild ( el , com.google.gwt.user.client.DOM.getChild ( el , i ) ) ; } }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user.isIdentifiedUser ( ) ) { return user.getAccountId ( ) . toString ( ) ; } return user.toString ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsersProvider , change ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( edit.getEditCommit ( ) . copy ( ) , org.eclipse.jgit.lib.ObjectId.zeroId ( ) , edit.getRefName ( ) ) ) ; }
void addDep ( com.google.gerrit.server.notedb.rebuild.Event e ) { deps.add ( e ) ; }
public com.google.gerrit.extensions.client.ChangeKind getChangeKind ( @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , repo , cd , patch ) ; }
private void assertNoProblems ( com.google.gerrit.server.notedb.ChangeNotes notes , @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( checker.check ( controlForNotes ( notes ) , fix ) . problems ( ) ) . isEmpty ( ) ; }
private short getContext ( ) { final int sel = context.getSelectedIndex ( ) ; if ( 0 <= sel ) { return java.lang.Short.parseShort ( context.getValue ( sel ) ) ; } return getValue ( ) . getContext ( ) ; }
public boolean canRebase ( ) { return rebaseChange.get ( ) . canRebase ( revision ) ; }
public boolean canRestore ( ) { return ( canAbandon ( ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
public void testParentHashCode ( ) { final int id = 42 ; final com.google.gwtorm.client.IntKeyTestCase.Parent p = new com.google.gwtorm.client.IntKeyTestCase.Parent ( id ) ; assertEquals ( id , p.hashCode ( ) ) ; }
void save ( ) throws java.io.IOException { cfg.save ( ) ; }
public final void upsert ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doUpsert ( instances , null ) ; }
public static boolean isNoSuchAccount ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NoSuchAccountException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . startsWith ( NoSuchAccountException.MESSAGE ) ) ; }
private java.util.Optional < com.google.gerrit.common.data.GroupReference > loadGroup ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.lang.Exception { return com.google.gerrit.server.group.db.GroupNameNotes.loadOneGroupReference ( repo , groupName.get ( ) ) ; }
java.lang.String getRemoteUser ( javax.servlet.http.HttpServletRequest req ) { java.lang.String remoteUser = com.google.gerrit.httpd.RemoteUserUtil.getRemoteUser ( req , loginHeader ) ; return userNameToLowerCase ? remoteUser.toLowerCase ( java.util.Locale.US ) : remoteUser ; }
private void assertProblems ( com.google.gerrit.gpg.testutil.TestKey tk , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = new com.google.gerrit.gpg.PublicKeyChecker ( ) . check ( tk.getPublicKey ( ) , store ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public com.google.gerrit.solr.SolrChangeIndex getChangeIndex ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg , com.google.gerrit.server.config.SitePaths sitePaths , com.google.gerrit.server.index.IndexCollection indexes , com.google.gerrit.server.index.FieldDef.FillArgs fillArgs ) throws java.io.IOException { return new com.google.gerrit.solr.SolrChangeIndex ( cfg , fillArgs , sitePaths , indexes , com.google.gerrit.server.index.ChangeSchemas.getLatestRelease ( ) ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse ( id.get ( ) ) ; if ( rsrc == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; } return rsrc ; }
public int getCost ( ) { return com.google.gerrit.server.query.change.ChangeCosts.cost ( ChangeCosts.IDS_MEMORY , getCardinality ( ) ) ; }
public void listBranchesOfNonVisibleProject_NotFound ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { blockRead ( project , "refs/*" ) ; com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession ( accounts.create ( "user" , "user@example.com" , "User" ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , session.get ( ( ( "/projects/" + ( project.get ( ) ) ) + "/branches" ) ) . getStatusCode ( ) ) ; }
public int compare ( com.google.gerrit.common.data.AccessSection a , com.google.gerrit.common.data.AccessSection b ) { return compare ( a.getRefPattern ( ) , b.getRefPattern ( ) ) ; }
public void assertEquals ( java.lang.String str ) { printWriter.flush ( ) ; junit.framework.TestCase.assertEquals ( stringWriter.toString ( ) , str ) ; }
private boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( isOwner ( ) ) || ( isReviewer ( db , cd ) ) ) || ( getRefControl ( ) . canViewDrafts ( ) ) ; }
private void allowTagCreation ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType ) throws java.lang.Exception { grant ( tagType.createPermission , project , "refs/tags/*" , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public void onFailure ( java.lang.Throwable err ) { if ( com.google.gerrit.client.changes.SubmitFailureDialog.isConflict ( err ) ) { new com.google.gerrit.client.changes.SubmitFailureDialog ( err.getMessage ( ) ) . center ( ) ; redisplay ( ) ; } else { super . onFailure ( err ) ; } }
protected void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.Project > result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
private void deactivate ( ) { if ( ( activePatchSetId ) != ( - 1 ) ) { com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel patchSetPanel = patchSetPanels.get ( activePatchSetId ) ; patchSetPanel.setActive ( false ) ; activePatchSetId = - 1 ; } }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getUpdate ( ps.getId ( ) ) . setTopic ( magicBranch.topic ) ; }
private static java.lang.String describe ( com.google.gerrit.server.CurrentUser user ) { if ( user.isIdentifiedUser ( ) ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( user ) ) . getAccountId ( ) . toString ( ) ; } return user.toString ( ) ; }
public com.google.gerrit.server.change.PatchSetInserter setCheckAddPatchSetPermission ( boolean checkAddPatchSetPermission ) { BRANCH ( 43.0F ) ; }
private com.google.gerrit.extensions.api.changes.NotifyHandling defaultNotify ( com.google.gerrit.server.project.ChangeControl control ) { return control.getChange ( ) . hasReviewStarted ( ) ? com.google.gerrit.extensions.api.changes.NotifyHandling.ALL : com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ; }
public com.google.gerrit.pgm.init.LibraryDownloader get ( ) { return new com.google.gerrit.pgm.init.LibraryDownloader ( reload , ui , site ) ; }
public void cleanup ( ) { org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; db.close ( ) ; }
private static void validateDiffMode ( com.googlesource.gerrit.plugins.xdocs.XDocServlet.ResourceKey key , com.googlesource.gerrit.plugins.xdocs.formatter.Formatters.FormatterProvider formatter , eu.medsea.mimeutil.MimeType mimeType ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( ( ( key.diffMode ) != ( DiffMode.NO_DIFF ) ) && ( ( key.revisionB ) == null ) ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( ) ; } }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
java.lang.Runnable toggleOpenBox ( final net.codemirror.lib.CodeMirror cm ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine ( cm ) ; if ( group != null ) { group.openCloseLast ( ) ; } } } ; }
public void doRefUpdatedHook ( final com.google.gerrit.reviewdb.client.Branch.NameKey refName , final org.eclipse.jgit.lib.RefUpdate refUpdate , final com.google.gerrit.reviewdb.client.Account account ) { doRefUpdatedHook ( refName , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , account ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { cm.setCursor ( net.codemirror.lib.LineCharacter.create ( line ) ) ; cm.scrollToY ( java.lang.Math.max ( 0 , ( height - ( 0.5 * scrollbarHeight ) ) ) ) ; cm.focus ( ) ; }
public java.util.List < java.lang.String > currentFilePaths ( ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet ( ) ; if ( ps == null ) { return null ; } return filePaths ( currentPatchSet ) ; }
public void close ( ) throws java.io.IOException { rw.close ( ) ; repo.close ( ) ; }
public void printJson ( final java.lang.StringBuffer sb , final java.lang.String o ) { sb.append ( escapeString ( o ) ) ; }
public java.lang.String render ( java.lang.Integer object ) { if ( 0 <= object ) { return "+" + object ; } else { return java.lang.String.valueOf ( object ) ; } }
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
void onLogout ( ) { async.append ( log ( "LOGOUT" ) ) ; audit ( context.get ( ) , "0" , "LOGOUT" , new java.lang.String [ ] { } ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.client.ui.SuggestServiceImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) . getDatabase ( ) ) ; }
public java.util.List < com.google.gerrit.common.data.GroupReference > run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return suggestAccountGroup ( db , query , limit ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount admin = accounts.create ( "admin" , "Administrators" ) ; session = new com.google.gerrit.acceptance.RestSession ( admin ) ; }
protected com.google.gerrit.server.IdentifiedUser user ( com.google.gerrit.acceptance.TestAccount testAccount ) { return identifiedUserFactory.create ( com.google.inject.util.Providers.of ( db ) , testAccount.getId ( ) ) ; }
public void listChildrenOfNonExistingProject_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , GET ( "/projects/non-existing/children/" ) . getStatusCode ( ) ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createForNew ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change ) . load ( ) ; }
com.google.gerrit.server.query.change.ChangeData convert ( com.google.gerrit.reviewdb.client.PatchSetApproval t ) { return new com.google.gerrit.server.query.change.ChangeData ( t.getPatchSetId ( ) . getParentKey ( ) ) ; }
private boolean canCreateCommit ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevCommit commit ) { if ( canUpdate ( ) ) { return true ; } else if ( isMergedIntoBranchOrTag ( db , repo , commit ) ) { return true ; } return false ; }
public void review ( com.google.gerrit.extensions.api.changes.ReviewInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get ( ) . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException | com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post review" , e ) ; } }
protected static boolean isNoSuchEntity ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NoSuchEntityException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NoSuchEntityException.MESSAGE ) ) ; }
private org.eclipse.jetty.util.thread.ThreadPool threadPool ( org.eclipse.jgit.lib.Config cfg ) { org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool ( ) ; pool.setName ( "HTTP" ) ; pool.setMinThreads ( 2 ) ; pool.setMaxThreads ( 10 ) ; pool.setMaxQueued ( 50 ) ; return pool ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithTopic ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String topic ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , topic ) ; }
public void setUp ( ) { listenerMock = createMock ( com.google.gerrit.common.EventListener.class ) ; com.google.gerrit.extensions.registration.DynamicSet < com.google.gerrit.common.EventListener > listeners = com.google.gerrit.extensions.registration.DynamicSet.emptySet ( ) ; listeners.add ( listenerMock ) ; broker = new com.ericsson.gerrit.plugins.syncevents.SyncEventBroker ( null , listeners , null , null ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( com.google.gerrit.server.query.change.InternalChangeQuery.schema ( indexes ) , id.name ( ) ) ) ; }
private com.google.gerrit.server.git.MetaDataUpdate newMetaDataUpdate ( ) { com.google.gerrit.server.git.MetaDataUpdate u = new com.google.gerrit.server.git.MetaDataUpdate ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED , project , repo , null ) ; org.eclipse.jgit.lib.PersonIdent author = new org.eclipse.jgit.lib.PersonIdent ( "J. Author" , "author@example.com" , com.google.gerrit.common.TimeUtil.nowTs ( ) , com.google.gerrit.server.git.VersionedMetaDataTest.TZ ) ; u.getCommitBuilder ( ) . setAuthor ( author ) ; u.getCommitBuilder ( ) . setCommitter ( new org.eclipse.jgit.lib.PersonIdent ( "M. Committer" , "committer@example.com" , author.getWhen ( ) , author.getTimeZone ( ) ) ) ; return u ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > answer ( ) throws java.lang.Throwable { return new com.google.gwtorm.server.ListResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > ( com.google.common.collect.Lists.newArrayList ( comments ) ) ; }
private static void execute ( org.eclipse.jgit.lib.BatchRefUpdate bru , org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { bru.execute ( rw , NullProgressMonitor.INSTANCE ) ; } finally { rw.release ( ) ; } }
public void onTimeout ( org.eclipse.jetty.continuation.Continuation self ) { com.google.gerrit.server.git.WorkQueue.Executor executor = getExecutor ( ) ; executor.remove ( this ) ; }
java.lang.String getToken ( ) { return isSignedIn ( ) ? key.token : null ; }
private void blockForcePush ( ) throws java.lang.Exception { block ( Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/tags/*" ) . setForce ( true ) ; }
public java.util.concurrent.Callable < java.lang.Void > indexTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return new com.google.gerrit.server.index.ChangeIndexerImpl.Task ( cd ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > approvals ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.ImmutableList.copyOf ( approvalsMap ( db ) . values ( ) ) ; }
private void upsertDraftComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { createDraftUpdateIfNull ( c ) ; draftUpdate.upsertComment ( c ) ; }
public com.google.gerrit.reviewdb.Project.SubmitType getSubmitType ( ) { return com.google.gerrit.reviewdb.Project.SubmitType.forCode ( submitType ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config cfg = readConfig ( com.google.gerrit.server.account.WatchConfig.WATCH_CONFIG ) ; projectWatches = com.google.gerrit.server.account.WatchConfig.parse ( accountId , cfg ) ; }
public void onRpcStart ( final com.google.gwtjsonrpc.client.event.RpcStartEvent event ) { if ( ( ++ ( activeCalls ) ) == 1 ) { if ( ( com.google.gerrit.client.RpcStatus.hideDepth ) == 0 ) { loading.setVisible ( true ) ; } } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { rights.showInherited ( showInherited.isChecked ( ) ) ; }
public void merge ( final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { if ( start ( branch ) ) { try { mergeImpl ( branch ) ; } finally { finish ( branch ) ; } } }
public static void getDefault ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + "default" ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
public java.util.Collection < com.google.gerrit.server.index.ChangeIndex > getWriteIndexes ( ) { return java.util.Collections.unmodifiableCollection ( writeIndexes.values ( ) ) ; }
private com.google.gerrit.server.IdentifiedUser addUser ( java.lang.String name ) throws java.lang.Exception { com.google.gerrit.server.account.AuthRequest req = com.google.gerrit.server.account.AuthRequest.forUser ( name ) ; com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate ( req ) . getAccountId ( ) ; return userFactory.create ( com.google.inject.util.Providers.of ( db ) , id ) ; }
protected < K , V > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > core ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type ) { return core ( com.google.inject.Key.get ( type ) ) ; }
private com.google.gerrit.client.diff.DraftBox addNewDraft ( net.codemirror.lib.CodeMirror cm , int line ) { com.google.gerrit.common.changes.Side side = getSideFromCm ( cm ) ; com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.create ( path , side , ( line + 1 ) , null , null ) ; return addDraftBox ( info , false ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( cd.isFromSource ( source ) ) || ( pred.match ( cd ) ) ; }
public void removeApproval ( java.lang.String label ) { removeApprovalFor ( getUser ( ) . getAccountId ( ) , label ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.Project.NameKey in ) { return a.run ( in.get ( ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNewInclude ( oracle ) ; }
com.google.gerrit.lucene.LuceneChangeIndex create ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , boolean readOnly ) ;
public java.lang.String changeClosed ( com.google.gerrit.server.git.ChangeReportFormatter.Input input ) { return java.lang.String.format ( "change %s closed" , com.google.gerrit.server.ChangeUtil.formatChangeUrl ( canonicalWebUrl , input.getChange ( ) ) ) ; }
public final void removeLineClass ( net.codemirror.lib.CodeMirror.LineHandle line , net.codemirror.lib.CodeMirror.LineClassWhere where , java.lang.String className ) { removeLineClassNative ( line , where.name ( ) . toLowerCase ( ) , className ) ; }
public com.google.gerrit.server.change.PatchSetInserter setMessage ( com.google.gerrit.reviewdb.client.ChangeMessage changeMessage ) { this . changeMessage = changeMessage ; return this ; }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ) ; return push.rm ( git , "refs/for/master" ) . getChangeId ( ) ; }
java.util.Map < java.lang.String , com.google.gerrit.extensions.common.FileInfo > toFileInfoMap ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return toFileInfoMap ( change , patchSet , null ) ; }
private static void a ( final java.lang.StringBuffer r , final java.lang.String where ) { com.google.gerrit.client.data.GitwebLink.var ( r , "a" , where ) ; }
private void configureRequestScope ( ) { bind ( org.apache.sshd.server.CommandFactory.Command.class ) . toProvider ( new com.google.inject.Provider < org.apache.sshd.server.CommandFactory.Command > ( ) { @ java.lang.Override public org.apache.sshd.server.CommandFactory.Command get ( ) { return com.google.gerrit.server.ssh.SshScopes.getContext ( ) . command ; } } ) . in ( SshScopes.REQUEST ) ; }
private static com.google.gerrit.common.data.LabelType category ( int pos , java.lang.String id , java.lang.String name , com.google.gerrit.common.data.LabelValue ... values ) { com.google.gerrit.common.data.LabelType type = new com.google.gerrit.common.data.LabelType ( name , java.util.Arrays.asList ( values ) ) ; type.setId ( id ) ; return type ; }
public void testHashCodeWhenNull ( ) { final com.google.gwtorm.client.IntKeyTestCase.Parent p = new com.google.gwtorm.client.IntKeyTestCase.Parent ( 0 ) ; assertEquals ( 0 , p.hashCode ( ) ) ; }
public io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder setBranch ( final java.lang.String branch ) { this . branch = io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder.addEndSlash ( io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder.reduceWildcard ( branch ) ) ; return this ; }
public com.google.gerrit.server.notedb.NoteDbUpdateManager.Result rebuild ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { return rebuild ( db , changeId , true ) ; }
protected abstract int getEnd ( org.eclipse.jgit.diff.Edit e ) ;
public void createProjectFoo ( ) throws java.lang.Exception { java.lang.String name = "foo" ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . name ( name ) . create ( ) . get ( ) . name ) ; }
public com.google.gerrit.server.CurrentUser get ( ) { final com.google.gerrit.client.reviewdb.Account.Id id = call.getAccountId ( ) ; return id != null ? identified.create ( id ) : anonymous ; }
public void onLoad ( ) { super . onLoad ( ) ; refresh ( ) ; }
private com.google.inject.Injector createHttpdInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( new com.google.gerrit.pgm.http.jetty.JettyModule ( new com.google.gerrit.pgm.http.jetty.JettyEnv ( webInjector ) ) ) ; return sysInjector.createChildInjector ( modules ) ; }
public static com.google.common.collect.FluentIterable < com.google.gerrit.reviewdb.client.Account.Id > ids ( com.google.gerrit.acceptance.TestAccount ... accounts ) { return com.google.gerrit.acceptance.TestAccount.ids ( java.util.Arrays.asList ( accounts ) ) ; }
private boolean allRefsAreVisible ( java.util.Set < java.lang.String > ignore ) { return ( user.isInternalUser ( ) ) || ( canPerformOnAllRefs ( Permission.READ , ignore ) ) ; }
private com.google.gerrit.extensions.api.changes.DraftInput newDraft ( java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.DraftInput d = new com.google.gerrit.extensions.api.changes.DraftInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( d , path , side , line , message ) ; }
public java.lang.String getName ( ) { if ( ( fullName ) != null ) { return fullName ; } if ( ( preferredEmail ) != null ) { return preferredEmail ; } return "GerritAccount #" + ( accountId.get ( ) ) ; }
public void run ( ) { try { synchronized ( list ) { list.add ( this ) ; } runImp ( ) ; } finally { synchronized ( list ) { list.remove ( this ) ; } } }
private void hideTextBox ( ) { if ( ( textBox ) != null ) { textBox.setText ( textLabel.getText ( ) ) ; textBox.removeFromParent ( ) ; textBox = null ; } textLabel.setVisible ( true ) ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.server.project.RefControl ctl , com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps , org.eclipse.jgit.revwalk.RevCommit rc , com.google.gerrit.reviewdb.client.PatchSetInfo psi ) ;
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps ) { addPatchSets ( a , ps , null , false , null ) ; }
public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { java.lang.String username = user.getUserName ( ) ; if ( com.google.common.base.Strings.isNullOrEmpty ( username ) ) { return com.google.gerrit.server.account.GroupMembership.EMPTY ; } else { return ghMembershipProvider.get ( username ) ; } }
private void checkProjectInSource ( com.googlesource.gerrit.plugins.importer.ImportProject.Input input , org.eclipse.jgit.lib.ProgressMonitor pm ) throws com.google.gerrit.extensions.restapi.BadRequestException , java.io.IOException { pm.beginTask ( "Check source project" , 1 ) ; api.getProject ( srcProject.get ( ) ) ; com.googlesource.gerrit.plugins.importer.ProgressMonitorUtil.updateAndEnd ( pm ) ; }
public void submitToEmptyRepo ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( git ) ; submit ( change.getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( getRemoteHead ( ) . getId ( ) ) . isEqualTo ( change.getCommitId ( ) ) ; }
public void emptyCommitMessage ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( "" ) ) ) ) . isEmpty ( ) ; }
private static java.lang.String emptyToNull ( java.lang.String str ) { return ( str == null ) || ( str.isEmpty ( ) ) ? null : str ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , allUsers , noteUtil , c.getProject ( ) , c ) . load ( ) ; }
public java.lang.String getName ( ) { return name.get ( ) ; }
protected void onExit ( final int rc ) { com.google.gerrit.sshd.commands.ead StreamEvents ; com.google.gerrit.sshd.commands.Fix NPE ; com.google.gerrit.sshd.commands.invoking the ; with ( ( -- ( help ) ) ) ; removeEventListenerRegistration ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
private static com.google.gerrit.server.account.WatchConfig.NotifyValue parseNotifyValue ( java.lang.String notifyValue ) throws org.eclipse.jgit.errors.ConfigInvalidException { return com.google.gerrit.server.account.WatchConfig.NotifyValue.parse ( new com.google.gerrit.reviewdb.client.Account.Id ( 1000000 ) , "project" , notifyValue ) ; }
public static com.google.gwtexpui.user.client.Type < com.google.gwtexpui.user.client.DialogVisibleHandler > getType ( ) { if ( ( com.google.gwtexpui.user.client.DialogVisibleEvent.TYPE ) == null ) { com.google.gwtexpui.user.client.DialogVisibleEvent.TYPE = new com.google.gwtexpui.user.client.Type < com.google.gwtexpui.user.client.DialogVisibleHandler > ( ) ; } return com.google.gwtexpui.user.client.DialogVisibleEvent.TYPE ; }
public void execute ( com.google.gerrit.server.update.BatchUpdateListener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
private static com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput newComment ( java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c = new com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( c , path , side , line , message ) ; }
public void setUp ( ) throws java.lang.Exception { block ( Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/drafts/*" ) ; }
public void testNonIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a OR foo:b" ) ; org.junit.Assert.assertEquals ( in , rewrite ( in ) ) ; }
private static boolean isVisible ( com.google.gerrit.server.change.RelatedChangesSorter.PatchSetData psd , com.google.gerrit.server.project.ProjectControl ctl ) throws com.google.gwtorm.server.OrmException { return ctl.controlFor ( psd.data ( ) . change ( ) ) . isPatchVisible ( psd.patchSet ( ) , psd.data ( ) ) ; }
public boolean allRefsAreVisible ( ) { return allRefsAreVisibleExcept ( java.util.Collections.< java.lang.String > emptySet ( ) ) ; }
void applySuccess ( ) { com.google.gwt.user.client.rpc.AsyncCallback < T > cb = delegate ; if ( cb != null ) { delegate = null ; cb.onSuccess ( result ) ; result = null ; } }
public void run ( ) { for ( ; ; ) { try { if ( done.await ( checkFrequencyMillis , java.util.concurrent.TimeUnit.MILLISECONDS ) ) { return ; } } catch ( java.lang.InterruptedException e ) { } loader.rescan ( ) ; } }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , java.lang.Exception { return new com.google.gerrit.server.group.GroupInfo ( resource.getControl ( ) . getGroup ( ) ) ; }
static boolean parseBoolean ( java.lang.String s ) { return ( null != s ) && ( ( ( s.equals ( "1" ) ) || ( s.equalsIgnoreCase ( "yes" ) ) ) || ( java.lang.Boolean.parseBoolean ( s ) ) ) ; }
public com.google.gerrit.server.account.GroupMembership membershipsOf ( com.google.gerrit.server.IdentifiedUser user ) { java.lang.String username = user.getUserName ( ) ; if ( com.google.common.base.Strings.isNullOrEmpty ( username ) ) { return com.google.gerrit.server.account.GroupMembership.EMPTY ; } return ghMembershipProvider.get ( username ) ; }
public void printJson ( final java.lang.StringBuffer sb , final com.google.gwtjsonrpc.client.VoidResult o ) { sb.append ( "{}" ) ; }
public void createBranch ( ) throws java.lang.Exception { allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/*" ) ; gApi.projects ( ) . name ( project.get ( ) ) . branch ( "foo" ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; }
private static com.google.gerrit.client.rpc.RestApi group ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) { return new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( group.get ( ) ) ; }
public static com.google.inject.Key < org.apache.sshd.server.CommandFactory.Command > key ( final java.lang.String name ) { return com.google.inject.Key.get ( CommandFactory.Command.class , com.google.gerrit.server.ssh.Commands.named ( name ) ) ; }
void onExpandAll ( com.google.gwt.event.dom.client.ClickEvent e ) { manager.remove ( this , otherBar ) ; otherBar.expandAll ( ) ; expandAll ( ) ; cm.focus ( ) ; }
void onIgnoreWhitespace ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ChangeEvent e ) { prefs.ignoreWhitespace ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.valueOf ( ignoreWhitespace.getValue ( ignoreWhitespace.getSelectedIndex ( ) ) ) ) ; view.reloadDiffInfo ( ) ; }
public static com.google.gerrit.server.git.validators.CommitValidationResult newFailure ( java.lang.String why ) { return new com.google.gerrit.server.git.validators.CommitValidationResult ( false , why ) ; }
void setChange ( com.google.gerrit.reviewdb.client.Change c ) { change = c ; }
public void deleteDocuments ( org.apache.lucene.index.Term term ) throws java.io.IOException { super . deleteDocuments ( term ) ; autoFlush ( ) ; }
public java.lang.String getNextSequenceValueSql ( final java.lang.String seqname ) { return "SELECT NEXT VALUE FOR " + seqname ; }
protected synchronized void handleEmails ( ) { }
public void startEventRecorder ( ) { eventRecorder = eventRecorderFactory.create ( user ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.server.config.FactoryModule ( ) { @ java.lang.Override protected void configure ( ) { factory ( SaveDraft.Factory.class ) ; } } ) ; rpc ( com.google.gerrit.httpd.rpc.patch.PatchDetailServiceImpl.class ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( 1 ) ; }
public void setPatchSetId ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) { com.google.common.base.Preconditions.checkArgument ( ( ( psId == null ) || ( psId.getParentKey ( ) . equals ( getChange ( ) . getId ( ) ) ) ) ) ; this . psId = psId ; }
private static boolean isNotSignedIn ( java.lang.Throwable caught ) { return ( com.google.gerrit.client.rpc.RestApi.isNotSignedIn ( caught ) ) || ( ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NotSignedInException.MESSAGE ) ) ) ; }
public com.google.gwtjsonrpc.server.MethodHandle getMethod ( ) { if ( ( com.google.gerrit.httpd.rpc.GerritJsonServlet.currentMethod.get ( ) ) == null ) { return super . getMethod ( ) ; } else { return com.google.gerrit.httpd.rpc.GerritJsonServlet.currentMethod.get ( ) ; } }
public com.google.gerrit.server.project.ProjectState checkedGet ( com.google.gerrit.reviewdb.client.Project.NameKey projectName ) throws java.io.IOException ;
public boolean isUseContributorAgreements ( ) { return getInheritableBoolean ( new com.google.common.base.Function < com.google.gerrit.reviewdb.client.Project , com.google.gerrit.extensions.client.InheritableBoolean > ( ) { @ java.lang.Override public com.google.gerrit.extensions.client.InheritableBoolean apply ( com.google.gerrit.reviewdb.client.Project input ) { return input.getUseContributorAgreements ( ) ; } } ) ; }
protected com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.change.RevisionResource , com.google.gerrit.extensions.common.TestSubmitRuleInput > createView ( ) { return view.get ( ) ; }
public void testToString ( ) { assertEquals ( "-author:bob" , com.google.gerrit.server.query.Predicate.not ( com.google.gerrit.server.query.NotPredicateTest.f ( "author" , "bob" ) ) . toString ( ) ) ; }
public java.lang.String getSecure ( java.lang.String name ) { return flags.sec.getString ( section , subsection , name ) ; }
void onLineNumbers ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.hideLineNumbers ( e.getValue ( ) ) ; view.setShowLineNumbers ( prefs.hideLineNumbers ( ) ) ; }
public boolean handles ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return com.google.gerrit.server.auth.ldap.LdapGroupBackend.isLdapUUID ( uuid ) ; }
public org.eclipse.jgit.lib.ObjectId apply ( org.eclipse.jgit.lib.Ref ref ) { if ( ( ref.getPeeledObjectId ( ) ) != null ) { return ref.getPeeledObjectId ( ) ; } else { return ref.getObjectId ( ) ; } }
private boolean sshdOff ( ) { org.eclipse.jgit.lib.Config cfg = cfgInjector.getInstance ( com.google.inject.Key.get ( org.eclipse.jgit.lib.Config.class , com.google.gerrit.server.config.GerritServerConfig.class ) ) ; return new com.google.gerrit.server.ssh.SshAddressesModule ( ) . getListenAddresses ( cfg ) . isEmpty ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; repository = createWorkRepository ( ) ; }
void close ( ) { ins.close ( ) ; rw.close ( ) ; repo.close ( ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.client.AccountGroup.Id id ) { return ( com.google.gerrit.common.PageLinks.ADMIN_GROUPS ) + ( id.toString ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( curr.getParentKey ( ) ) ) ; }
private java.lang.String formatLabelValue ( short value ) { if ( value > 0 ) { return "+" + value ; } else { return java.lang.Short.toString ( value ) ; } }
public java.lang.Object apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.Index.Input input ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException { indexer.index ( rsrc.getChange ( ) ) . get ( ) ; return com.google.gerrit.extensions.restapi.Response.none ( ) ; }
java.util.Optional < com.google.gerrit.server.group.InternalGroup > getInternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid ) ;
private static com.google.gerrit.client.rpc.RestApi editFile ( int id , java.lang.String path ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . id ( path ) ; }
public abstract T get ( I input , com.google.gerrit.server.index.FieldDef.FillArgs args ) throws com.google.gwtorm.server.OrmException ;
private com.google.gerrit.server.events.DependencyAttribute newDependsOn ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.PatchSet ps ) { com.google.gerrit.server.events.DependencyAttribute d = newDependencyAttribute ( c , ps ) ; d.isCurrentPatchSet = c.currPatchSetId ( ) . equals ( ps.getId ( ) ) ; return d ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( ) throws java.io.IOException { return commit ( com.google.common.base.Preconditions.checkNotNull ( updateFactory , "MetaDataUpdate.Factory" ) . create ( change.getProject ( ) ) ) ; }
private static PatchSet.Id toPsId ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String psIdStr ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , ( psIdStr.equals ( "edit" ) ? 0 : java.lang.Integer.parseInt ( psIdStr ) ) ) ; }
private void renderInput ( org.asciidoctor.Options options , java.lang.String inputFile ) { org.asciidoctor.Asciidoctor asciidoctor = org.asciidoctor.internal.JRubyAsciidoctor.create ( ) ; asciidoctor.renderFile ( new java.io.File ( inputFile ) , options ) ; }
com.google.gerrit.server.api.projects.DashboardApiImpl create ( com.google.gerrit.server.project.ProjectResource project , java.lang.String name ) ;
public static void includedIn ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.IncludedInInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "in" ) . get ( cb ) ; }
protected void setUp ( ) throws java.lang.Exception { com.google.gwtorm.client.KeyUtil.setEncoderImpl ( new com.google.gwtorm.server.StandardKeyEncoder ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { changeScreen.display ( result ) ; }
private static boolean isCodeReview ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id ) { return ( "CRVW" . equals ( id.get ( ) ) ) || ( "Code-Review" . equalsIgnoreCase ( id.get ( ) ) ) ; }
public boolean accept ( java.io.File pathname ) { return ( pathname.isFile ( ) ) && ( pathname.getName ( ) . endsWith ( ".jar" ) ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( java.lang.Integer.MAX_VALUE ) ; }
protected void assertServerStartupFails ( ) throws java.lang.Exception { try ( com.google.gerrit.acceptance.GerritServer server = startImpl ( ) ) { org.junit.Assert.fail ( "expected server startup to fail" ) ; } catch ( com.google.gerrit.acceptance.GerritServer e ) { } }
public Project.NameKey getProjectNameKey ( ) { return null ; }
public void setPrologClassLoader ( com.googlecode.prolog_cafe.lang.PrologClassLoader cl ) { if ( ( engine.aregs ) != null ) throw new java.lang.IllegalStateException ( "Prolog already initialized" ) ; engine.pcl = cl ; }
private org.eclipse.jgit.errors.ConfigInvalidException parseException ( java.lang.String fmt , java.lang.Object ... args ) { return new org.eclipse.jgit.errors.ConfigInvalidException ( ( ( ( "Change " + ( changeId ) ) + ": " ) + ( java.lang.String.format ( fmt , args ) ) ) ) ; }
void start ( ) { if ( ( request.getQuery ( ) ) == null ) { request.setQuery ( "" ) ; } oracle.requestSuggestions ( request , this ) ; }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > invalidResult ( com.googlecode.prolog_cafe.lang.Term rule , com.googlecode.prolog_cafe.lang.Term record ) { return invalidResult ( rule , record , null ) ; }
public void setEmail ( java.lang.String email ) { this . email = email ; this . gravatar = generateGravatar ( email ) ; }
private void setNew ( com.google.gerrit.reviewdb.Change c , com.google.gerrit.reviewdb.ChangeMessage msg ) { sendMergeFail ( c , msg , true , true ) ; }
private void assertParseSucceeds ( java.lang.String body ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( writeCommit ( body ) ) ) { parser.parseAll ( ) ; } }
public java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > filter ( java.util.Map < java.lang.String , org.eclipse.jgit.lib.Ref > refs , org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions opts ) throws com.google.gerrit.server.permissions.PermissionBackendException { return refFilterFactory.create ( getUser ( ) , getProjectState ( ) ) . filter ( refs , repo , opts ) ; }
public void init ( ) throws java.io.IOException { repoFolder = java.io.File.createTempFile ( "Git" , "" ) ; repoFolder.delete ( ) ; repo = com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.createNewRepository ( repoFolder ) ; initValidator ( ) ; }
public void remove ( com.google.gerrit.common.data.AccessSection section ) { accessSections.remove ( section.getRefPattern ( ) ) ; }
public void run ( ) { int w = cm.getGutterElement ( ) . getOffsetWidth ( ) ; getElement ( ) . getStyle ( ) . setPaddingLeft ( w , Unit.PX ) ; setVisible ( true ) ; }
public void stop ( ) { if ( ( manager ) != null ) { manager.stop ( ) ; sysInjector = null ; sshInjector = null ; manager = null ; } }
public java.lang.String format ( com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.IOException { return Asciidoctor.Factory.create ( com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class . getClassLoader ( ) ) . convert ( raw , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) ; }
public void deleteAll ( ) throws java.io.IOException { openIndex.deleteAll ( ) ; closedIndex.deleteAll ( ) ; }
public void stop ( ) { executor.shutdown ( ) ; executor.unregisterWorkQueue ( ) ; executor = null ; }
public synchronized com.google.gerrit.metrics.Timer0 newTimer ( java.lang.String name , com.google.gerrit.metrics.Description desc ) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkTimerDescription ( desc ) ; define ( name , desc ) ; return newTimerImpl ( name ) ; }
public void index ( com.google.gerrit.reviewdb.client.Account.Id id ) throws java.io.IOException { for ( com.google.gerrit.server.index.Index < ? , com.google.gerrit.server.account.AccountState > i : indexes.getWriteIndexes ( ) ) { i.replace ( byIdCache.get ( id ) ) ; } }
void onAutoHideDiffTableHeader ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.autoHideDiffTableHeader ( ( ! ( e.getValue ( ) ) ) ) ; view.setAutoHideDiffHeader ( ( ! ( e.getValue ( ) ) ) ) ; view.resizeCodeMirror ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( ( - 1 ) ) ; }
public abstract java.lang.String getCommand ( java.lang.String url ) ;
private void assertMyMetaData ( int expectedValue , java.lang.String ... expectedLog ) throws java.lang.Exception { com.google.gerrit.server.git.VersionedMetaDataTest.MyMetaData d = load ( expectedValue ) ; com.google.common.truth.Truth.assertThat ( log ( d ) ) . containsExactlyElementsIn ( java.util.Arrays.asList ( expectedLog ) ) . inOrder ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( false ) ) ; }
public boolean apply ( com.google.gerrit.server.project.ProjectState input ) { return input.getProject ( ) . getNameKey ( ) . equals ( rsrc.getNameKey ( ) ) ; }
private static void addFooter ( java.lang.StringBuilder sb , org.eclipse.jgit.revwalk.FooterKey footer , java.lang.Object value ) { com.google.gerrit.server.notedb.ChangeUpdate.addFooter ( sb , footer ) . append ( value ) . append ( '\n' ) ; }
boolean isOk ( ) { return problems.isEmpty ( ) ; }
public static com.google.gerrit.client.diff.DiffApi diff ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String path ) { return new com.google.gerrit.client.diff.DiffApi ( com.google.gerrit.client.changes.ChangeApi.revision ( id ) . view ( "files" ) . id ( path ) . view ( "diff" ) ) ; }
public static java.lang.String encode ( java.lang.String component ) { try { return java.net.URLEncoder.encode ( component , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.RuntimeException ( "JVM must support UTF-8" , e ) ; } }
public void onSend ( ) { Util.MANAGE_SVC.restoreChange ( getPatchSetId ( ) , getMessageText ( ) , createCallback ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE , true ) ; } else { com.google.gerrit.client.Gerrit.display ( PageLinks.ALL_OPEN , true ) ; } }
public void testDiffDeserializer ( ) { assertNotNull ( "edit deserializer" , new org.eclipse.jgit.diff.EditDeserializer ( ) ) ; }
private com.google.gerrit.server.index.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int limit ) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.IndexedChangeQuery ( null , index , p , limit ) ; }
public static com.google.gerrit.client.rpc.RestApi reviewer ( int id , int reviewer ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) . id ( reviewer ) ; }
public boolean canSee ( final com.google.gerrit.reviewdb.client.Account otherUser ) { return canSee ( otherUser.getId ( ) ) ; }
public final java.io.File getCommentPath ( java.lang.String fileName ) { return new java.io.File ( templatesPath.getPath ( ) , fileName ) ; BRANCH ( f1d0f4 ) ; com.criteo.gerrit.plugins.automerge.Format all ; files ( ( ( ( google ) - ( java ) ) - ( format ) ) ) ; }
public Change.Id apply ( java.lang.String changeId ) { return Change.Id.parse ( changeId ) ; }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.Change change ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.client.OrmException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( change ) , db.get ( ) ) ; }
public static native void refresh ( ) ;
public final native java.lang.String projectName ( ) ;
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo info ) { info.init ( ) ; addExtensionPoints ( info ) ; initCurrentRevision ( info ) ; loadConfigInfo ( info , base ) ; }
protected java.lang.String prettify ( java.lang.String html , java.lang.String type ) { return com.google.gerrit.prettify.client.ClientSideFormatter.go ( com.google.gerrit.prettify.client.ClientSideFormatter.prettify.getContext ( ) , html , type , diffPrefs.getTabSize ( ) ) ; }
public Change.Key getChangeKey ( ) { return new com.google.gerrit.reviewdb.client.Change.Key ( change.id ) ; }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( com.google.gitiles.HostIndexServletTest.NAME ) ) ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
private void removeChangeIdLock ( com.google.gerrit.reviewdb.client.Change.Id id ) { synchronized ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.changeIdLocks ) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.changeIdLocks.remove ( id ) ; } }
void onAdd ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { java.lang.String reviewer = suggestBox.getText ( ) ; if ( ! ( reviewer.isEmpty ( ) ) ) { addReviewer ( reviewer , false ) ; } }
public static com.google.gitiles.FakeHttpServletRequest newRequest ( ) { return new com.google.gitiles.FakeHttpServletRequest ( com.google.gitiles.TestGitilesUrls.URLS.getHostName ( null ) , 80 , "" , com.google.gitiles.FakeHttpServletRequest.SERVLET_PATH , "" ) ; }
private static java.lang.String getAbbrRevId ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId revId ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader ( ) ; try { return reader.abbreviate ( revId ) . name ( ) ; } finally { reader.release ( ) ; } }
private boolean isCurrentIndexVersionLatest ( ) { return ( ( reindexer ) == null ) || ( ( reindexer.getVersion ( ) ) <= ( indexes.getSearchIndex ( ) . getSchema ( ) . getVersion ( ) ) ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewedBy = cd.reviewedBy ( ) ; return ! ( reviewedBy.isEmpty ( ) ) ? reviewedBy.contains ( id ) : ( id ) == ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ; }
com.google.gerrit.server.index.account.AccountIndexer create ( com.google.gerrit.server.index.account.AccountIndexCollection indexes ) ;
public void copy ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { db.patchSetApprovals ( ) . insert ( getForPatchSet ( db , ctl , psId ) ) ; }
public void setDeny ( boolean newDeny ) { action = com.google.gerrit.common.data.PermissionRule.Action.DENY ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_OK ) ; }
public void onSuccess ( com.google.gerrit.common.data.AgreementInfo result ) { if ( isAttached ( ) ) { mySigned = new java.util.HashSet < java.lang.String > ( result.accepted ) ; postRPC ( ) ; } }
private java.lang.String url ( com.google.gerrit.client.info.ChangeInfo.RevisionInfo r ) { return com.google.gerrit.common.PageLinks.toChange ( changeId , r.id ( ) ) ; }
private void cancel ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { callback ( req , rsp ) ; }
private java.lang.String format ( java.lang.String s ) { if ( ( s.length ( ) ) < ( permissionGroupWidth ) ) { return s ; } else { return s.substring ( 0 , permissionGroupWidth ) ; } }
private void setRefLogIdent ( final com.google.gerrit.reviewdb.PatchSetApproval submitAudit ) { if ( submitAudit != null ) { branchUpdate.setRefLogIdent ( identifiedUserFactory.create ( submitAudit.getAccountId ( ) ) . newRefLogIdent ( ) ) ; } }
private void assertProblems ( com.google.gerrit.gpg.testutil.TestKey tk , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = new com.google.gerrit.gpg.PublicKeyChecker ( ) . check ( tk.getPublicKey ( ) ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( change , new com.google.gerrit.server.change.Index.Input ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index change" , e ) ; } }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , true , expectedStatus ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > getPastAssignees ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPastAssignees.apply ( change ) . value ( ) ; } catch ( java.lang.Exception e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get past assignees" , e ) ; } }
public void mergeByOtherCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS , com.google.gerrit.server.account.WatchConfig.NotifyType.SUBMITTED_CHANGES ) ; setEmailStrategy ( other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; merge ( sc.changeId , other , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public static void ensureAllPatchSetsLoaded ( java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( ) ; } }
protected void configure ( ) { bind ( ProjectControl.GenericFactory.class ) ; factory ( ProjectControl.AssistedFactory.class ) ; bind ( ChangeControl.GenericFactory.class ) ; bind ( ChangeControl.Factory.class ) ; }
void resizeCodeMirror ( ) { if ( ! ( prefs.renderEntireFile ( ) ) ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.sidePanel.adjustGutters ( cmB ) ; } }
public int getSpecificity ( ) { return specificity ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( ) throws java.lang.Exception { return getConfig ( "^WIP.*" , true ) ; }
protected abstract T updateProjectConfig ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.common.errors.PermissionDeniedException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public com.google.gerrit.extensions.registration.DynamicItem < T > get ( ) { return new com.google.gerrit.extensions.registration.DynamicItem < T > ( key , com.google.gerrit.extensions.registration.DynamicItemProvider.find ( injector , type ) , "gerrit" ) ; }
public java.lang.String getAvatarUrl ( ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void postUpdate ( com.google.gerrit.server.git.BatchUpdate.Context ctx ) { if ( ( change ) != null ) { topicEdited.fire ( change , ctx.getUser ( ) . asIdentifiedUser ( ) . getAccount ( ) , oldTopicName , ctx.getWhen ( ) ) ; } }
protected static boolean is_claimID ( final java.lang.String url ) { return url.contains ( ".claimid.com/" ) ; }
public java.util.Set < com.google.gerrit.reviewdb.client.Change.Id > clearStarredChanges ( ) { abortStarredChanges ( ) ; starredChanges = null ; return starredChanges ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.io.IOException { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( oldId , newId , dest ) ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , com.google.gerrit.server.events.Event event ) ;
boolean contains ( int b , int e , char c ) { for ( ; b < e ; b ++ ) { if ( ( charAt ( b ) ) == c ) { return true ; } } return false ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; bind ( com.google.gerrit.server.extensions.events.GitReferenceUpdated.class ) . toInstance ( GitReferenceUpdated.DISABLED ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; }
private java.util.Optional < com.google.gerrit.server.group.InternalGroup > toInternalGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( ) . getInternalGroup ( uuid ) ; }
public void stop ( ) { synchronized ( lock ) { if ( ( manager ) != null ) { manager.shutdown ( ) ; } } }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getLocalRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { return filter ( projectControl.getProjectState ( ) . getLocalRights ( ) , actionId ) ; }
protected com.google.gerrit.client.reviewdb.ReviewDb openReviewDb ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { try { return com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) ; } catch ( com.google.gwtorm.client.OrmException e ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 1 , "fatal: Gerrit database is offline" ) ; } }
public void close ( ) { walk ( ) . close ( ) ; }
private static java.lang.String toPatch ( java.lang.String type , com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( type , diffBase , id.getParentKey ( ) , id.get ( ) ) ; }
void onEdit ( ) { if ( canEdit ) { show.setVisible ( false ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , true ) ; input.setText ( text.getText ( ) ) ; input.setFocus ( true ) ; } }
private static long lastUpdatedMs ( com.google.gerrit.reviewdb.client.Change c ) { return c.getLastUpdatedOn ( ) . getTime ( ) ; }
void onRebaseEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.rebaseEdit ( changeId , publishEdit , rebaseEdit , deleteEdit ) ; }
public void setUp ( ) throws java.lang.Exception { project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; createProject ( project2.get ( ) ) ; project3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p3" ) ; createProject ( project3.get ( ) ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , 0 ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , side , line ) ; }
private void index ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { if ( ( indexCollection.getSearchIndex ( ) ) != null ) { indexCollection.getSearchIndex ( ) . replace ( group ) ; } }
public boolean canForgeGerritServerIdentity ( ) { return canPerform ( Permission.FORGE_SERVER ) ; }
public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) . center ( ) ; }
public void createProjectFoo ( ) throws java.lang.Exception { java.lang.String name = "foo" ; org.junit.Assert.assertEquals ( name , gApi.projects ( ) . name ( name ) . create ( ) . get ( ) . name ) ; }
private final native void setLine ( int line ) ;
private ProjectResetter.Builder builder ( ) { return builder ( null , null , null ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , null , null ) ; }
public java.util.List < T > toList ( ) { final java.util.List < T > r = items ; if ( r == null ) { throw new java.lang.IllegalStateException ( "Results already obtained" ) ; } items = null ; return r ; }
public boolean allowsEdit ( com.google.gerrit.reviewdb.client.Account.FieldName field ) { return ( field == ( com.google.gerrit.reviewdb.client.Account.FieldName.USER_NAME ) ) || ( editableAccountFields.contains ( field ) ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , null , branch , null , null ) ; }
public com.google.gerrit.server.plugins.InstallPlugin create ( com.google.gerrit.extensions.restapi.TopLevelResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , com.google.gerrit.server.util.Url.decode ( id ) ) ; }
public com.google.gerrit.extensions.client.SubmitType testSubmitType ( com.google.gerrit.extensions.common.TestSubmitRuleInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return testSubmitType.get ( ) . apply ( revision , in ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot test submit type" , e ) ; } }
public static com.google.gerrit.client.config.ServerInfo getServerInfo ( ) { return com.google.gerrit.client.Gerrit.myServerInfo ; }
public static void getConfig ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfo > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) . view ( "config" ) . get ( cb ) ; }
public java.lang.String toProject ( final com.google.gerrit.client.reviewdb.Project.NameKey project ) { final java.lang.StringBuffer r = new java.lang.StringBuffer ( ) ; com.google.gerrit.client.data.GitwebLink.p ( r , project ) ; com.google.gerrit.client.data.GitwebLink.a ( r , "summary" ) ; return ( baseUrl ) + r ; }
java.lang.String publishComments ( int change , int ps ) ;
public void stop ( ) { if ( ( pool ) != null ) { pool.unregisterWorkQueue ( ) ; pool = null ; } }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > apply ( java.util.List < ? > input ) throws java.lang.Exception { com.google.gerrit.pgm.RebuildNotedb.execute ( bru , repo ) ; com.google.gerrit.pgm.RebuildNotedb.execute ( bruAllUsers , allUsersRepo ) ; mpm.end ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public void configure ( ) { bind ( com.google.gerrit.server.index.VersionManager.class ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; listener ( ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; if ( onlineUpgrade ) { listener ( ) . to ( com.google.gerrit.server.index.OnlineUpgrader.class ) ; } }
public com.google.gerrit.reviewdb.client.Change readChange ( ) throws com.google.gwtorm.server.OrmException { return db.changes ( ) . get ( update.getChange ( ) . getId ( ) ) ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( final java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , java.util.Collections.< org.eclipse.jgit.diff.Edit > emptyList ( ) , 0 , 0 ) ; }
public void testAppend_float ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; assertSame ( b , b.append ( 0.0F ) ) ; assertEquals ( "0.0" , b.asString ( ) ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { if ( ! ( ReviewAssistant.realUser ) ) { return pluginUser ; } else { return identifiedUserFactory.create ( change.getOwner ( ) ) ; } }
public void delete ( int id ) throws java.io.IOException { java.lang.String idString = java.lang.Integer.toString ( id ) ; delete ( idString , openIndex ) ; delete ( idString , closedIndex ) ; }
public void onSuccess ( com.google.gerrit.client.config.ServerInfo info ) { com.google.gerrit.client.Gerrit.myServerInfo = info ; onModuleLoad2 ( result ) ; }
public final com.google.gerrit.server.index.SiteIndexer < K , V , I > getSiteIndexer ( ) { return siteIndexer.get ( ) ; }
protected void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.git.IntegrationException { args.mergeTip.moveTipTo ( amendGitlink ( toMerge ) , toMerge ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountExternalIdInfo > getExternalIds ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getExternalIds.apply ( account ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get external IDs" , e ) ; } }
public static com.google.gwtexpui.safehtml.client.PrettyFormatter newFormatter ( java.lang.String lang ) { return com.google.gwtexpui.safehtml.client.PrettyFormatter.Pretty.loaded ? new com.google.gwtexpui.safehtml.client.PrettyFormatter.Pretty ( lang ) : new com.google.gwtexpui.safehtml.client.PrettyFormatter.PassThrough ( ) ; }
public void start ( final org.apache.sshd.server.Environment env ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; validate ( ) ; setAccount ( ) ; } } ) ; }
public void setTitleText ( final java.lang.String text ) { headerText.setText ( text ) ; }
public static < T > com.google.gerrit.server.query.Predicate < T > not ( final com.google.gerrit.server.query.Predicate < T > that ) { if ( that instanceof com.google.gerrit.server.query.NotPredicate ) { return that.getChild ( 0 ) ; } return new com.google.gerrit.server.query.NotPredicate < T > ( that ) ; }
public java.lang.String getLine ( final int i ) { return getLines ( i , ( i + 1 ) ) ; }
private static java.nio.file.Path getDeveloperBuckOut ( ) { try { return com.google.gerrit.launcher.GerritLauncher.getDeveloperBuckOut ( ) ; } catch ( java.io.FileNotFoundException e ) { return null ; } }
public RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RESTORE_ENTRY , edit , file , null ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId ) ) ; }
public void assertMessage ( java.lang.String expectedMessage ) { org.eclipse.jgit.transport.RemoteRefUpdate refUpdate = result.getRemoteUpdate ( ref ) ; com.google.common.truth.Truth.assertThat ( message ( refUpdate ) . toLowerCase ( ) ) . named ( message ( refUpdate ) ) . contains ( expectedMessage.toLowerCase ( ) ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { if ( ( token ) == null ) { return null ; } else { return org.kohsuke.github.GitHub.connectUsingOAuth ( config.gitHubApiUrl , token.accessToken ) ; } }
void onReply ( com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { replyAction.onReply ( ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public static java.lang.String refsStarredChangesPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_STARRED_CHANGES , accountId ) . toString ( ) ; }
public java.lang.String format ( java.lang.String projectName , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) throws java.io.IOException ;
abstract com.google.gerrit.server.mail.receive.MailMessage.Builder id ( java.lang.String val ) ;
private void readGroupList ( ) throws java.io.IOException { groupList = com.google.gerrit.server.git.GroupList.parse ( readUTF8 ( GroupList.FILE_NAME ) , this ) ; }
public static com.google.gerrit.server.query.change.InternalChangeQuery query ( com.google.gerrit.server.query.change.InternalChangeQuery q ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) , ChangeField.MERGEABLE.getName ( ) ) ; return q.setRequestedFields ( fields ) ; }
void onReload ( com.google.gwt.event.dom.client.ClickEvent e ) { e.preventDefault ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
Account.Id getAuthorId ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( getControl ( ) . getCurrentUser ( ) ) ) . getAccountId ( ) ; }
public static java.lang.String toPatch ( java.lang.String type , com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( type , diffBase , id.getParentKey ( ) , id.get ( ) , null , 0 ) ; }
java.util.Optional < com.google.gerrit.server.account.AccountState > maybeGet ( com.google.gerrit.reviewdb.client.Account.Id accountId ) ;
public final boolean isHttpPasswordSettingsEnabled ( ) { if ( ( isGitBasicAuth ( ) ) && ( ( gitBasicAuthPolicy ( ) ) == ( com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP ) ) ) { return false ; } return true ; }
public void display ( final java.lang.String commitMessage ) { display ( null , null , commitMessage ) ; }
public void setTimeForTesting ( ) { Merge ( com.google.gerrit.server.query.change.I7aeb7d2e , com.google.gerrit.server.query.change.Ie93003f9 , com.google.gerrit.server.query.change.I16cdc920 ) ; resetTimeWithClockStep ( 1 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
private static void updateUiLink ( java.lang.String token ) { com.google.gerrit.client.Gerrit.uiSwitcherLink.setHref ( com.google.gerrit.client.Gerrit.getUiSwitcherUrl ( token ) ) ; }
public static void updated ( com.google.gerrit.reviewdb.client.Change c ) { c.setLastUpdatedOn ( com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( c ) ; }
private void initProviderJce ( ) { setKeyExchangeFactories ( NamedFactory.Utils.setUpTransformedFactories ( true , java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( BuiltinDHFactories.dhg1 ) ) , ServerBuilder.DH2KEX ) ) ; setKeyExchangeFactories ( org.apache.sshd.server.ServerBuilder.setUpDefaultKeyExchanges ( true ) ) ; setRandomFactory ( new org.apache.sshd.common.random.SingletonRandomFactory ( org.apache.sshd.common.random.JceRandomFactory.INSTANCE ) ) ; }
private void uncacheSshKeys ( final java.lang.String userName ) { if ( userName != null ) { sshKeyCache.evict ( userName ) ; } }
private void initChangeRepo ( ) throws java.io.IOException { if ( ( changeRepo ) == null ) { changeRepo = openRepo ( projectName , true ) ; } }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction ( id , result , path , style.replyBox ( ) , editButton , replyButton ) ; edit.onEdit ( ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; }
public static com.google.common.collect.FluentIterable < java.lang.String > names ( com.google.gerrit.acceptance.TestAccount ... accounts ) { return com.google.gerrit.acceptance.TestAccount.names ( java.util.Arrays.asList ( accounts ) ) ; }
public void onOk ( ) { deleteBranches ( ids ) ; }
private static java.nio.file.FileSystem newZipFileSystem ( java.nio.file.Path zip ) throws java.io.IOException { return java.nio.file.FileSystems.newFileSystem ( java.net.URI.create ( ( "jar:" + ( zip.toUri ( ) ) ) ) , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.patch.PatchDetailServiceImpl ( com.google.gerrit.server.GerritServer.getInstance ( ) . getDatabase ( ) ) ; }
void onLogin ( ) { async.append ( log ( ( "LOGIN FROM " + ( session.get ( ) . getRemoteAddressAsString ( ) ) ) ) ) ; audit ( context.get ( ) , "0" , "LOGIN" , new java.lang.String [ ] { } ) ; }
java.lang.String getAuthorizationUrl ( com.google.gerrit.extensions.auth.oauth.OAuthToken requestToken ) ;
private boolean isDraftVisible ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( isOwner ( ) ) || ( isReviewer ( db ) ) ; }
public static < T > com.google.gerrit.extensions.registration.DynamicSet < T > emptySet ( ) { return new com.google.gerrit.extensions.registration.DynamicSet < T > ( java.util.Collections.< java.util.concurrent.atomic.AtomicReference < com.google.inject.Provider < T > > > emptySet ( ) ) ; }
com.google.gerrit.server.project.SubmitRuleEvaluator create ( com.google.gerrit.server.CurrentUser user , com.google.gerrit.server.query.change.ChangeData cd ) ;
protected void submit ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.SubmitInput input ) throws java.lang.Exception { submit ( changeId , input , null , null ) ; }
private void removeIdLock ( T id ) { synchronized ( idLocks ) { idLocks.remove ( id ) ; } }
private com.google.gerrit.server.project.ProjectControl user ( java.lang.String name , com.google.gerrit.reviewdb.client.AccountGroup ... memberOf ) { com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > schema = null ; com.google.gerrit.server.account.GroupCache groupCache = null ; java.lang.String canonicalWebUrl = "http://localhost" ; return new com.google.gerrit.server.project.ProjectControl ( java.util.Collections.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet ( ) , java.util.Collections.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > emptySet ( ) , projectCache , sectionSorter , canonicalWebUrl , new com.google.gerrit.server.project.RefControlTest.MockUser ( name , memberOf ) , newProjectState ( ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , true ) ; }
private static com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > release ( java.util.Collection < com.google.gerrit.server.index.FieldDef < com.google.gerrit.server.query.change.ChangeData , ? > > fields ) { return new com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > ( true , fields ) ; }
com.google.gerrit.sshd.DispatchCommand create ( java.lang.String prefix , java.util.Map < java.lang.String , com.google.inject.Provider < org.apache.sshd.server.Command > > map ) ;
public com.google.gerrit.extensions.api.projects.Projects projects ( ) { return projects.get ( ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in ) ; }
protected abstract void encode ( T obj , com.google.protobuf.CodedOutputStream out ) ;
public void onEvent ( com.google.gerrit.server.events.Event event ) { pool.execute ( new com.ericsson.gerrit.plugins.eventslog.EventHandler.StoreEventTask ( ( ( com.google.gerrit.server.events.ProjectEvent ) ( event ) ) ) ) ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = notesFactory.create ( db , change ( ) ) ; } return notes ; }
void setPrivate ( boolean value ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; bind ( com.google.gerrit.server.IdentifiedUser.class ) . toInstance ( user ) ; bind ( com.google.gerrit.server.config.AllUsersName.class ) . toProvider ( allUsers ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = cd.change ( dbProvider ) ; return ( change != null ) && ( ( change.getSortKey ( ) . compareTo ( getValue ( ) ) ) > 0 ) ; }
public static java.lang.String toPatch ( final java.lang.String type , final com.google.gerrit.client.reviewdb.Patch.Id id ) { return ( ( "patch," + type ) + "," ) + ( id.toString ( ) ) ; }
public void deleteAllowedWithForcePushPermission ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , "refs/*" , true ) ; assertDeleteRef ( org.eclipse.jgit.transport.RemoteRefUpdate.Status.OK ) ; }
private com.google.gerrit.server.project.ChangeControl control ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id id ) throws com.google.gerrit.server.project.NoSuchChangeException { return changeControlFactory.controlFor ( change , genericUserFactory.create ( id ) ) ; }
public void newPatchSetByOtherOnReviewableChangeNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=OWNER" , other ) ; assertThat ( sender ) . notSent ( ) ; }
com.google.gitiles.CommitData.Builder setArchiveFormat ( com.google.gitiles.ArchiveFormat archiveFormat ) { this . archiveFormat = com.google.common.base.Preconditions.checkNotNull ( archiveFormat , "archiveFormat" ) ; return this ; }
private static void asScript ( final org.w3c.dom.Element scriptNode ) { scriptNode.removeAttribute ( "id" ) ; scriptNode.setAttribute ( "type" , "text/javascript" ) ; scriptNode.setAttribute ( "language" , "javascript" ) ; }
public void onExit ( int rc , java.lang.String exitMessage ) { exit.onExit ( translateExit ( rc ) , exitMessage ) ; log ( rc ) ; }
private void writeToResponse ( javax.servlet.http.HttpServletResponse res , java.io.InputStream inputStream ) throws java.io.IOException { try ( java.io.OutputStream out = res.getOutputStream ( ) ; java.io.InputStream in = inputStream ) { com.google.common.io.ByteStreams.copy ( in , out ) ; } }
public void testReplaceEscaping ( ) { assertEquals ( "<a href=\"a&quot;&amp;&#39;&lt;&gt;b\">find</a>" , new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "find" , "a\"&\'<>b" ) . replace ( "find" ) ) ; }
public boolean isHidden ( ) { return getProject ( ) . getState ( ) . equals ( com.google.gerrit.extensions.client.ProjectState.HIDDEN ) ; }
protected void preDisplay ( final java.util.List < com.google.gerrit.client.reviewdb.AccountGroup > result ) { groups.display ( result ) ; groups.finishDisplay ( true ) ; }
private void checkNotUsed ( final java.lang.String n ) throws com.google.gwtorm.client.OrmException { if ( allNames.contains ( n ) ) { throw new com.google.gwtorm.client.OrmException ( ( ( "Name " + n ) + " already used" ) ) ; } }
public void testCreateLinkForWebUiSameUrlAndText ( ) { mockUnconnectableStoryboard ( ) ; replayMocks ( ) ; com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade itsFacade = createStoryboardItsFacade ( ) ; java.lang.String actual = itsFacade.createLinkForWebui ( "Test-Url" , "Test-Url" ) ; assertEquals ( "[Test-Url]" , actual ) ; }
protected com.google.gerrit.server.index.QueryOptions createOptions ( com.google.gerrit.server.index.IndexConfig indexConfig , int start , int limit , java.util.Set < java.lang.String > requestedFields ) { return com.google.gerrit.server.index.change.IndexedChangeQuery.createOptions ( indexConfig , start , ( limit + 1 ) , requestedFields ) ; }
public void sendRedirect ( java.lang.String msg ) { status = SC_FOUND ; committed = true ; }
public java.lang.String apply ( com.google.gerrit.server.account.AccountResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceNotFoundException { return rsrc.getUser ( ) . state ( ) . getUserName ( ) . orElseThrow ( ResourceNotFoundException :: new ) ; }
public boolean isContextLine ( ) { return ( ! ( isModifiedLine ( ) ) ) || ( ( ( endIdx ) + 1 ) < ( curIdx ) ) ; }
private void assertParseSucceeds ( org.eclipse.jgit.revwalk.RevCommit commit ) throws java.lang.Exception { try ( com.google.gerrit.server.notedb.ChangeNotesParser parser = newParser ( commit ) ) { parser.parseAll ( ) ; } }
private java.util.List < com.google.gerrit.common.data.SubmitRecord > ruleError ( java.lang.String err ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultRuleError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError ( err ) ; } }
private java.lang.String getProjectName ( ) { return control.getProjectControl ( ) . getProjectState ( ) . getProject ( ) . getName ( ) ; }
void deleteAll ( ) throws java.io.IOException { writer.deleteAll ( ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstDefaultBase ( org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( null , newId , ws , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.delete ( urlEdit ( ) ) ; org.junit.Assert.assertEquals ( org.apache.http.HttpStatus.SC_NOT_FOUND , r.getStatusCode ( ) ) ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( db , repoManager , migration , allUsersProvider , change ) . load ( ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( accountId , getId ( ) ) ; }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.notedb.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return approvalsUtil.getReviewers ( notes ( ) , approvals ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.project.ProjectResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list ; }
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { deleteAsync ( cd ) . checkedGet ( ) ; }
public void testEscapeFirstChar ( ) { assertEquals ( com.google.gerrit.server.StringUtil.escapeString ( "\tLeading tab" ) , "\\tLeading tab" ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( author , getChangeId ( ) ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.AccountServiceImpl ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( false , false ) ) ; }
public void testNextAddressId ( ) throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = openAndCreate ( ) ; final int a = schema.nextAddressId ( ) ; final int b = schema.nextAddressId ( ) ; assertTrue ( ( a != b ) ) ; }
public static boolean isInvalidXSRF ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwt.user.client.rpc.InvocationException ) && ( caught.getMessage ( ) . equals ( JsonUtil.ERROR_INVALID_XSRF ) ) ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public static com.google.gerrit.common.data.LabelValue fromApprovalCategoryValue ( com.google.gerrit.reviewdb.client.ApprovalCategoryValue acv ) { return new com.google.gerrit.common.data.LabelValue ( acv.getValue ( ) , acv.getName ( ) ) ; }
public void delete ( int id ) throws java.io.IOException { }
public int getMaxAge ( ) { return ( maxAge ) * 5 ; }
public void downloadRequired ( ) { this . required = true ; download ( ) ; }
private boolean match ( java.lang.String destBranch , java.lang.String refPattern ) { return com.google.gerrit.server.project.RefPatternMatcher.getMatcher ( refPattern ) . match ( destBranch , getUser ( ) . getUserName ( ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.reviewdb.client.Change change ) ;
public java.lang.Object apply ( com.google.gerrit.extensions.restapi.TopLevelResource resource ) throws java.io.UnsupportedEncodingException { format = com.google.gerrit.server.OutputFormat.JSON ; return display ( null ) ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval copy ( com.google.gerrit.reviewdb.client.PatchSetApproval src , com.google.gerrit.server.project.ChangeControl ctl ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval ( src.getPatchSetId ( ) , src ) ; }
public final java.lang.String name ( ) { return name ; }
private static void assertOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { assertTrue ( ( "OWN " + ref ) , u.controlForRef ( ref ) . isOwner ( ) ) ; }
void autoOpen ( ) { if ( ( commentList ) == null ) { autoOpen = true ; history.load ( info._revisionNumber ( ) ) ; } else if ( ! ( commentList.isEmpty ( ) ) ) { setOpen ( true ) ; } }
void close ( ) ;
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { fireEvent ( change , event , db ) ; }
protected void onClick ( final com.google.gwt.user.client.Event event ) { com.google.gwt.user.client.History.newItem ( getTargetHistoryToken ( ) , false ) ; com.google.gerrit.client.Gerrit.display ( createScreen ( ) ) ; com.google.gwt.user.client.DOM.eventPreventDefault ( event ) ; }
protected final < T > org.easymock.Capture < T > createCapture ( ) { return org.easymock.EasyMock.newCapture ( ) ; }
private net.sf.ehcache.constructs.blocking.SelfPopulatingCache startCacheSshKeys ( ) { final net.sf.ehcache.Cache dc = com.google.gerrit.server.GerritServer.cacheMgr.getCache ( "sshkeys" ) ; final net.sf.ehcache.constructs.blocking.SelfPopulatingCache r ; r = new net.sf.ehcache.constructs.blocking.SelfPopulatingCache ( dc , new com.google.gerrit.server.ssh.SshKeyCacheEntryFactory ( ) ) ; com.google.gerrit.server.GerritServer.cacheMgr.replaceCacheWithDecoratedCache ( dc , r ) ; return r ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( change , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void testBackreference ( ) { assertEquals ( "<a href=\"/bug?id=123\">issue 123</a>" , new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "(bug|issue)\\s*([0-9]+)" , "/bug?id=$2" ) . replace ( "issue 123" ) ) ; }
public boolean get ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.client.SubmitType submitType , java.lang.String mergeStrategy , com.google.gerrit.reviewdb.client.Branch.NameKey dest , org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db ) { throw new java.lang.UnsupportedOperationException ( "Mergeability checking disabled" ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; }
public boolean isBlocked ( java.lang.String permissionName ) { return ! ( doCanPerform ( permissionName , true ) ) ; }
public com.google.gerrit.server.query.change.SortKeyPredicate.After copy ( java.lang.String newValue ) { return new com.google.gerrit.server.query.change.SortKeyPredicate.After ( dbProvider , newValue ) ; }
public void addPatchSets ( com.google.gerrit.server.data.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.client.PatchSet > ps , com.google.gerrit.common.data.LabelTypes labelTypes ) { addPatchSets ( a , ps , null , false , null , labelTypes ) ; }
com.google.gerrit.server.notedb.ChangeUpdate create ( com.google.gerrit.server.notedb.ChangeNotes notes , @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account.Id accountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when , java.util.Comparator < java.lang.String > labelNameComparator ) ;
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { getBatchRefUpdate ( ) . addCommand ( cmd ) ; }
private static java.lang.String shortenSubject ( java.lang.String subject ) { if ( ( subject.length ( ) ) < 73 ) { return subject ; } else { return ( subject.substring ( 0 , 69 ) ) + "..." ; } }
private void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( com.google.gerrit.server.git.SubmoduleOp.log.isDebugEnabled ( ) ) { com.google.gerrit.server.git.SubmoduleOp.log.debug ( ( ( ( "[" + ( orm.getSubmissionId ( ) ) ) + "]" ) + msg ) , args ) ; } }
public com.google.gerrit.extensions.common.MergeableInfo mergeable ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return mergeable.get ( ) . apply ( revision ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot check mergeability" , e ) ; } }
private void newChangeFooter ( ) { openFooter ( ) ; if ( ( changeUrl ( ) ) != null ) { body.append ( "View this change at " ) ; body.append ( changeUrl ( ) ) ; body.append ( "\n" ) ; } }
void updateContact ( java.lang.String fullName , java.lang.String emailAddr , com.google.gerrit.reviewdb.client.ContactInformation info , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.reviewdb.client.Account > callback ) ;
private void grantForcePush ( ) throws java.lang.Exception { grant ( Permission.PUSH , project , "refs/heads/*" , true , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS ) ; }
private static java.lang.String formatLabelValue ( short value ) { if ( value > 0 ) { return "+" + value ; } else { return java.lang.Short.toString ( value ) ; } }
private static com.google.gerrit.server.notedb.ChangeNotesParser.ApprovalKey create ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String label , @ com.google.gerrit.common.Nullable java.lang.String tag ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeNotesParser_ApprovalKey ( psId , accountId , label , tag ) ; }
private java.util.Iterator < org.bouncycastle.openpgp.PGPSignature > getSignaturesForId ( org.bouncycastle.openpgp.PGPPublicKey key , java.lang.String userId ) { return com.google.common.base.MoreObjects.firstNonNull ( key.getSignaturesForID ( userId ) , java.util.Collections.emptyIterator ( ) ) ; }
public java.lang.String commitMessage ( com.google.gerrit.server.git.GitRepositoryManager repoManager , com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitMessage ) == null ) { loadCommitData ( repoManager , db ) ; } return commitMessage ; }
com.google.gerrit.client.reviewdb.Account byId ( com.google.gerrit.client.reviewdb.Account.Id key ) throws com.google.gwtorm.client.OrmException ;
public void abandonReviewableChangeNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public void doPatchsetCreatedHook ( com.google.gerrit.reviewdb.Change change , com.google.gerrit.reviewdb.PatchSet patchSet , com.google.gerrit.reviewdb.ReviewDb db ) { }
private void onReply ( ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { replyAction.onReply ( ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public T open ( ) throws com.google.gwtorm.client.OrmException { return implFactory.open ( ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return userFactory.create ( user ) ; }
public void onSuccess ( final com.google.gerrit.common.data.HostPageData result ) { com.google.gerrit.client.Gerrit.myConfig = result.config ; if ( ( result.userAccount ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.userAccount ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( gStarting ) ; }
void onUnmarkPrivate ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.ChangeActions.unmarkPrivate ( changeId , unmarkPrivate ) ; }
public void setTabIndex ( int index ) { focusy.setTabIndex ( index ) ; }
private static boolean autoReindexIfStale ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "index" , null , "autoReindexIfStale" , false ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.RevisionResource > list ( ) { return list.get ( ) ; }
public void configureCommands ( ) { command ( "print" ) . to ( com.google.gerrit.plugins.PrintHelloWorldCommand.class ) ; }
public void modifyFile ( java.lang.String filePath , com.google.gerrit.extensions.restapi.RawInput newContent ) throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPut.apply ( changeResource.getControl ( ) , filePath , newContent ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot modify file of change edit" , e ) ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString b64 ) { wrapped.onSuccess ( com.google.gerrit.client.changes.ChangeFileApi.b64decode ( b64.asString ( ) ) ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.fetch ( git , ( ( com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG ) + ":refs/heads/config" ) ) ; testRepo.reset ( "refs/heads/config" ) ; }
public void testInvalidSchemeWithBackreference ( ) { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( ".*(script:[^;]*)" , "java$1" ) . replace ( "Look at this script: alert(1);" ) ; fail ( "Expected IllegalStateException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public static java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > fromRefSuffix ( java.lang.String name ) { java.lang.Integer id = com.google.gerrit.reviewdb.client.RefNames.parseRefSuffix ( name ) ; return java.util.Optional.ofNullable ( id ) . map ( com.google.gerrit.reviewdb.client.Account.Id :: new ) ; }
public void checkChanges ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change.Id > changeIds ) throws java.lang.Exception { checkActual ( readExpected ( changeIds ) ) ; }
public void addTo ( org.eclipse.jgit.lib.BatchRefUpdate bru ) { com.google.common.base.Preconditions.checkState ( ( ! ( isEmpty ( ) ) ) , "no commands to add" ) ; for ( org.eclipse.jgit.transport.ReceiveCommand cmd : commands.values ( ) ) { bru.addCommand ( cmd ) ; } }
public void execute ( ) { if ( ( ( selfWidget ) == null ) || ( ( widgetManager ) == null ) ) { throw new java.lang.IllegalStateException ( "resizePaddingWidget() called before setting up widgets" ) ; } selfWidget.changed ( ) ; widgetManager.resizePaddingWidget ( ) ; }
private static java.lang.String checkName ( java.lang.String name ) { com.google.common.base.CharMatcher m = com.google.common.base.CharMatcher.anyOf ( "abcdefghijklmnopqrstuvwxyz0123456789_" ) ; com.google.common.base.Preconditions.checkArgument ( m.matchesAllOf ( name ) , "illegal field name: %s" , name ) ; return name ; }
public boolean isEnabled ( java.lang.String project ) { return true ; }
public static java.lang.String getPluginName ( java.io.File srcFile ) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull ( com.google.gerrit.server.plugins.PluginLoader.getGerritPluginName ( srcFile ) , com.google.gerrit.server.plugins.PluginLoader.nameOf ( srcFile ) ) . toLowerCase ( ) ; }
public boolean enabled ( ) { return ( ( ( writeChanges ( ) ) || ( readChanges ( ) ) ) || ( writeAccounts ( ) ) ) || ( readAccounts ( ) ) ; }
private static void cancel ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.server.rpc.OpenIdServiceImpl.callback ( req , rsp ) ; }
public static boolean isDefaultDashboard ( java.lang.String id ) { return ( id != null ) && ( id.equals ( com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME ) ) ; }
public void setFile ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern.isEmpty ( ) ) ) ) { file = pattern ; } }
java.lang.String changeWithNoRevisions ( int changeId ) { }
public void configure ( ) { factory ( OnlineReindexer.Factory.class ) ; listener ( ) . to ( com.google.gerrit.lucene.LuceneVersionManager.class ) ; }
protected java.lang.Integer getValueInt ( com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { return ChangeField.ADDED.get ( changeData , null ) ; }
private java.util.List < com.google.gerrit.reviewdb.client.Change.Id > getForOpenChange ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c ) ; return cs.ids ( ) . asList ( ) ; }
java.lang.String revisions ( int currentlyViewedPatchSet , int currentPatchSet ) ;
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byCommit ( org.eclipse.jgit.lib.ObjectId id ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.commit ( org.eclipse.jgit.lib.AbbreviatedObjectId.fromObjectId ( id ) ) ) ; }
public void setUpMocks ( ) { servlet = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet ( indexerMock ) ; id = Account.Id.parse ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ; org.mockito.Mockito.when ( requestMock.getPathInfo ( ) ) . thenReturn ( ( "/index/account/" + ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServletTest.ACCOUNT_NUMBER ) ) ) ; }
public static com.google.gerrit.client.rpc.RestApi editWithCommands ( int id ) { return com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameterTrue ( "download-commands" ) ; }
private static java.lang.String getUserName ( java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids ) { for ( com.google.gerrit.reviewdb.client.AccountExternalId id : ids ) { if ( id.isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME ) ) { return id.getSchemeRest ( ) ; } } return null ; }
private void blockForcePush ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; com.google.gerrit.server.project.Util.block ( cfg , Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) . setForce ( true ) ; saveProjectConfig ( project , cfg ) ; }
public void testEmptyQuery ( ) throws com.google.gwtorm.schema.QueryParseException { assertNull ( parse ( "" ) ) ; }
public void createProjectFooBar ( ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "bar" ; gApi.projects ( ) . name ( "foo" ) . create ( in ) ; }
private boolean inProject ( final com.google.gerrit.reviewdb.Change change ) { if ( ( projectControl ) == null ) { return true ; } return projectControl.getProject ( ) . getNameKey ( ) . equals ( change.getProject ( ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSetApproval copy ( com.google.gerrit.reviewdb.client.PatchSetApproval src , com.google.gerrit.server.project.ChangeControl ctl ) { com.google.gerrit.reviewdb.client.PatchSetApproval dest = new com.google.gerrit.reviewdb.client.PatchSetApproval ( src.getPatchSetId ( ) , src ) ; dest.cache ( ctl.getChange ( ) ) ; return dest ; }
public int getCost ( ) { return 2 ; }
com.google.gerrit.extensions.client.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) == null ) ? com.google.gerrit.extensions.client.Side.PARENT : com.google.gerrit.extensions.client.Side.REVISION ; }
public void doChangeAbandonedHook ( com.google.gerrit.reviewdb.Change change , com.google.gerrit.reviewdb.Account account , java.lang.String reason , com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException ;
private void assertGone ( javax.servlet.http.HttpServletRequest req ) throws java.lang.Exception { com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse ( ) ; servlet.service ( req , res ) ; assertEquals ( javax.servlet.http.HttpServletResponse.SC_GONE , res.getStatus ( ) ) ; }
public com.google.gerrit.server.account.AccountInfo apply ( com.google.gerrit.server.group.MemberResource resource , com.google.gerrit.server.group.AddMembers.PutMember.Input input ) throws com.google.gwtorm.server.OrmException { return get.get ( ) . apply ( resource ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; config = new org.eclipse.jgit.lib.Config ( ) ; ident = new org.eclipse.jgit.lib.PersonIdent ( "NAME" , "e@email" , 0 , 0 ) ; accountCache = org.easymock.EasyMock.createStrictMock ( com.google.gerrit.server.account.AccountCache.class ) ; }
private void assertIsHealthy ( ) { javax.servlet.http.HttpServletResponse responseMock = mock ( javax.servlet.http.HttpServletResponse.class ) ; servlet.doGet ( null , responseMock ) ; org.mockito.Mockito.verify ( responseMock ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
public void onUnload ( ) { if ( ( regSignOut ) != null ) { regSignOut.removeHandler ( ) ; regSignOut = null ; } super . onUnload ( ) ; }
public void markKeyInvalid ( com.google.gerrit.reviewdb.client.Account.Id accountId , int seq ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ) { if ( authorizedKeys.markKeyInvalid ( seq ) ) { commit ( authorizedKeys ) ; } } }
public void testGcWithoutCapability_Error ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession ( accounts.create ( "user" , "user@example.com" , "User" ) ) ; s.exec ( "gerrit gc --all" ) ; assertError ( "fatal: user does not have \"runGC\" capability." , s.getError ( ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { super . onFailure ( caught ) ; enable ( false ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForUser ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Account.Id owner ) throws java.lang.Exception { return newChange ( repo , null , owner , null , null , null ) ; }
private void validateReindexerNotRunning ( ) throws com.google.gerrit.lucene.ReindexerAlreadyRunningException { if ( ( ( reindexer ) != null ) && ( reindexer.isRunning ( ) ) ) { throw new com.google.gerrit.lucene.ReindexerAlreadyRunningException ( ) ; BRANCH ( 84694 ) ; com.google.gerrit.lucene.c Set ; com.google.gerrit.lucene.dev - plugins.txt = com.google.gerrit.lucene.$missing$ ; } }
public void onRevisionCreated ( com.google.gerrit.extensions.events.RevisionCreatedListener.Event event ) { com.google.gerrit.extensions.common.ChangeInfo c = event.getChange ( ) ; onEvent ( new com.google.gerrit.reviewdb.client.Project.NameKey ( c.project ) , c._number , event.getWho ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; com.google.gerrit.server.project.Util.block ( cfg , Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/drafts/*" ) ; saveProjectConfig ( project , cfg ) ; }
public void onMouseMove ( com.google.gwt.event.dom.client.MouseMoveEvent arg0 ) { resizePaddingWidget ( ) ; }
private InternalGroupCreation.Builder getPrefilledGroupCreationBuilder ( ) { return com.google.gerrit.server.group.db.InternalGroupCreation.builder ( ) . setGroupUUID ( groupUuid ) . setNameKey ( groupName ) . setId ( groupId ) . setCreatedOn ( com.google.gerrit.common.TimeUtil.nowTs ( ) ) ; }
public void run ( ) throws java.lang.Exception { processor.setOutput ( out , QueryProcessor.OutputFormat.TEXT ) ; parseCommandLine ( ) ; verifyCommandLine ( ) ; processor.query ( com.google.gerrit.sshd.commands.Query.join ( query , " " ) ) ; }
private void add ( final com.google.gerrit.server.mail.RecipientType rt , final com.google.gerrit.reviewdb.UserIdentity who ) { if ( ( who != null ) && ( ( who.getAccount ( ) ) != null ) ) { add ( rt , who.getAccount ( ) ) ; } }
com.google.gerrit.httpd.raw.BuildSystem.Label gwtZipLabel ( java.lang.String agent ) ;
public com.google.gerrit.server.project.ChangeControl validateFor ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.server.CurrentUser user ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl ctl = changeFinder.findOne ( changeId , user ) ; return validateFor ( ctl.getChange ( ) , user ) ; }
public boolean canRunReceivePack ( ) { for ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group : receiveGroups ) { if ( match ( group ) ) { return true ; } } return false ; }
public static void detail ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "detail" ) . get ( cb ) ; }
public int compareTo ( com.google.gerrit.client.diff.SideBySideCommentGroup o ) { if ( ( side ) == ( o.side ) ) { return ( line ) - ( o.line ) ; } else { throw new java.lang.IllegalStateException ( "Cannot compare SideBySideCommentGroup with different sides" ) ; } }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.setStatus ( Change.Status.SUBMITTED ) ; change.setLastUpdatedOn ( timestamp ) ; com.google.gerrit.server.ChangeUtil.computeSortKey ( change ) ; return change ; } return null ; }
public java.lang.String call ( ) throws java.lang.Exception { if ( check.equals ( Check.ACCESS ) ) return healthCheckAccess ( ) ; else return healthCheckSysinfo ( ) ; }
private static < K , V > com.google.common.cache.CacheBuilder < K , V > newCacheBuilder ( ) { com.google.common.cache.CacheBuilder builder = com.google.common.cache.CacheBuilder.newBuilder ( ) ; return builder ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( baseId , id , line ) : new com.google.gerrit.client.diff.SideBySide ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
public io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.PluginSettingsBuilder setFileRef ( final java.lang.String fileRef ) { this . fileRef = fileRef.replace ( io.fd.maintainer.plugin.service.dto.PluginBranchSpecificSettings.HEAD_PART , "" ) ; return this ; }
private final native void setCh ( int ch ) ;
public static com.google.gerrit.client.DiffObject base ( ) { return new com.google.gerrit.client.DiffObject ( null ) ; }
private PatchSet.Id getPatchSetId ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return getChange ( c ) . currentPatchSetId ( ) ; }
private com.google.gerrit.server.git.validators.CommitValidators forMergedCommits ( com.google.gerrit.server.project.RefControl refControl ) { return new com.google.gerrit.server.git.validators.CommitValidators ( com.google.common.collect.ImmutableList.of ( new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator ( refControl ) , new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator ( refControl , canonicalWebUrl ) , new com.google.gerrit.server.git.validators.CommitValidators.CommitterUploaderValidator ( refControl , canonicalWebUrl ) ) ) ; }
com.google.gerrit.client.reviewdb.AccountGroup byGroupId ( com.google.gerrit.client.reviewdb.AccountGroup.Id id ) throws com.google.gwtorm.client.OrmException ;
private boolean canUploadMerges ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH_MERGE ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
private java.util.Collection < com.google.gerrit.extensions.common.AccountInfo > suggestAccounts ( com.google.gerrit.server.change.SuggestReviewers suggestReviewers , com.google.gerrit.server.ReviewersUtil.VisibilityControl visibilityControl ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.index.account.AccountIndex searchIndex = indexes.getSearchIndex ( ) ; if ( searchIndex != null ) { return suggestAccountsFromIndex ( suggestReviewers ) ; } return suggestAccountsFromDb ( suggestReviewers , visibilityControl ) ; }
public com.google.gerrit.reviewdb.Project.NameKey getProjectNameKey ( ) { return new com.google.gerrit.reviewdb.Project.NameKey ( projectName ) ; }
public static boolean isRefsEdit ( java.lang.String ref ) { return ( ref.startsWith ( com.google.gerrit.reviewdb.client.RefNames.REFS_USERS ) ) && ( ref.contains ( com.google.gerrit.reviewdb.client.RefNames.EDIT_PREFIX ) ) ; }
com.google.gerrit.server.changedetail.RestoreChange create ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String changeComment ) ;
protected java.lang.String getCookie ( final java.lang.String name ) { return com.google.gwtjsonrpc.server.JsonServlet.< com.google.gwtjsonrpc.server.ActiveCall > getCurrentCall ( ) . getCookie ( name ) ; }
com.google.gerrit.client.reviewdb.Project byName ( com.google.gerrit.client.reviewdb.Project.NameKey name ) throws com.google.gwtorm.client.OrmException ;
public static < T > com.google.gerrit.server.query.Predicate < T > and ( final com.google.gerrit.server.query.Predicate < T > ... that ) { return new com.google.gerrit.server.query.AndPredicate < T > ( that ) ; }
private com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > cache ( com.google.gerrit.extensions.common.ChangeInfo res ) { return com.google.gerrit.extensions.restapi.Response.ok ( res ) . caching ( com.google.gerrit.extensions.restapi.CacheControl.PRIVATE ( 0 , java.util.concurrent.TimeUnit.SECONDS ) . setMustRevalidate ( ) ) ; }
public RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY , edit , file , content ) ; }
public void setUp ( ) throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager ( ) ; com.google.gerrit.testutil.InMemoryModule.createInjector ( lifecycle ) . injectMembers ( this ) ; lifecycle.start ( ) ; }
public static void deleteChange ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . delete ( cb ) ; }
void doLinkIdentity ( ) { final com.google.gerrit.client.SignInDialog d = new com.google.gerrit.client.SignInDialog ( SignInDialog.Mode.LINK_IDENTIY , new com.google.gerrit.client.rpc.GerritCallback < java.lang.Object > ( ) { public void onSuccess ( final java.lang.Object result ) { refresh ( ) ; } } ) ; d.center ( ) ; }
java.util.List < com.google.gerrit.extensions.common.ChangeInfo > submittedTogether ( java.util.EnumSet < com.google.gerrit.extensions.client.SubmittedTogetherOption > o ) throws com.google.gerrit.extensions.restapi.RestApiException ;
public void copyAllScoresIfNoChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result patchSet = readyPatchSetForNoChangeRebase ( ) ; codeReview.setCopyAllScoresIfNoChange ( true ) ; saveLabelConfig ( ) ; rebase ( patchSet ) ; assertApproval ( patchSet , 1 ) ; }
void onMatchBrackets ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { prefs.matchBrackets ( e.getValue ( ) ) ; view.getEditor ( ) . setOption ( "matchBrackets" , prefs.matchBrackets ( ) ) ; }
public static java.lang.String refsDraftCommentsPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId.get ( ) ) . toString ( ) ; }
public static com.google.gerrit.extensions.client.Side fromShort ( short s ) { switch ( s ) { case 0 : return com.google.gerrit.extensions.client.Side.PARENT ; case 1 : return com.google.gerrit.extensions.client.Side.REVISION ; } return null ; }
public final native com.google.gwt.core.client.JavaScriptObject has_use_signed_off_by ( ) ;
public com.google.gerrit.extensions.api.projects.Projects.ListRequest withAll ( ) { this . all = true ; return this ; }
private static java.lang.String replace ( java.lang.String project , java.lang.String input ) { return input.replace ( "${project}" , project ) ; }
private void grantDelete ( ) throws java.lang.Exception { allow ( Permission.DELETE , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/tags/*" ) ; }
protected void set ( java.lang.String newValue ) { uuid = newValue ; }
private static void runGerrit ( java.lang.String ... args ) throws java.lang.Exception { org.junit.Assert.assertEquals ( 0 , com.google.gerrit.launcher.GerritLauncher.mainImpl ( args ) ) ; }
void evictAfterRename ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName , com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName ) throws java.io.IOException ;
void onBeginNegotiate ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.Project project , java.lang.String remoteHost , org.eclipse.jgit.transport.UploadPack up , java.util.Collection < ? extends org.eclipse.jgit.lib.ObjectId > wants , int cntOffered ) throws com.google.gerrit.server.validators.ValidationException ;
protected com.google.gerrit.reviewdb.client.Change newChange ( ) { return com.google.gerrit.testutil.TestChanges.newChange ( project , changeOwner ) ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( null , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , allUsers , c ) . load ( ) ; }
private static long round ( long n , long unit ) { long rounded = ( n + ( unit / 2 ) ) / unit ; return rounded ; }
static boolean dryRun ( com.google.gerrit.server.git.strategy.SubmitDryRun.Arguments args , com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.IntegrationException { return ( ! ( args.mergeUtil.hasMissingDependencies ( args.mergeSorter , toMerge ) ) ) && ( args.mergeUtil.canMerge ( args.mergeSorter , args.repo , mergeTip , toMerge ) ) ; }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > post ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.POST , "/" ) ) ; }
private static java.lang.String toPatch ( java.lang.String type , com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( type , diffBase , id.getParentKey ( ) , id.get ( ) ) ; }
private static void dispatchHistoryHooks ( java.lang.String token ) { if ( ( com.google.gerrit.client.Gerrit.signInAnchor ) != null ) { com.google.gerrit.client.Gerrit.signInAnchor.setHref ( com.google.gerrit.client.Gerrit.loginRedirect ( token ) ) ; } com.google.gerrit.client.api.ApiGlue.fireEvent ( "history" , token ) ; }
public void testNonIndexPredicate ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "foo:a" ) ; assertSame ( in , rewrite ( in ) ) ; }
public org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException { initRepository ( ) ; return repo ; }
void setLineNumberEmpty ( com.google.gerrit.client.diff.DisplaySide side , int cmLine ) { setLineNumber ( side , cmLine , "&nbsp;" , UnifiedTable.style.unifiedLineNumberEmpty ( ) ) ; }
public static org.apache.lucene.index.Term idTerm ( int id ) { return com.google.gerrit.lucene.QueryBuilder.intTerm ( com.google.gerrit.lucene.QueryBuilder.ID_FIELD , id ) ; }
private static java.lang.String formatLabelValue ( short value ) { if ( value > 0 ) { return "+" + value ; } else { return java.lang.Short.toString ( value ) ; } }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) { change.setStatus ( Change.Status.NEW ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; return change ; } else { return null ; } }
void onPreUpload ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.Project project , java.lang.String remoteHost , org.eclipse.jgit.transport.UploadPack up , java.util.Collection < ? extends org.eclipse.jgit.lib.ObjectId > wants , java.util.Collection < ? extends org.eclipse.jgit.lib.ObjectId > haves ) throws com.google.gerrit.server.validators.ValidationException ;
public void login ( com.google.gerrit.server.account.AuthResult res , com.google.gerrit.server.account.AuthMethod meth , boolean rememberMe ) ;
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.setCurrentPatchSet ( result.info ) ; change.setStatus ( Change.Status.MERGED ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; } return change ; }
private void removePushFromRefsTags ( ) throws java.lang.Exception { removePermission ( Permission.PUSH , project , "refs/tags/*" ) ; }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; bind ( com.google.gerrit.server.CurrentUser.class ) . toInstance ( user ) ; }
private java.util.Map < java.lang.String , com.google.gitiles.RefServlet.RefJsonData > buildRefJson ( java.lang.String path ) throws java.lang.Exception { return buildJson ( path , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , com.google.gitiles.RefServlet.RefJsonData > > ( ) { } . getType ( ) ) ; }
public static void rebaseEdit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit:rebase" ) . post ( in , cb ) ; }
public void onRpcComplete ( final com.google.gwtjsonrpc.client.event.RpcCompleteEvent event ) { if ( ( -- ( activeCalls ) ) == 0 ) { loading.setVisible ( false ) ; } }
public void setBranch ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern.isEmpty ( ) ) ) ) { branch = pattern ; } }
boolean canSubmit ( boolean isChangeOwner ) { if ( RefNames.REFS_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return canPerform ( Permission.SUBMIT , isChangeOwner ) ; }
