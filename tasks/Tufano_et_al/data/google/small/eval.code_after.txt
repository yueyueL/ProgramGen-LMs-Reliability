public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { commitMessageBlock.setVisible ( true ) ; commitMessageBlock.display ( result.getInfo ( ) . getMessage ( ) ) ; }
public static void grant ( com.google.gerrit.server.project.ProjectConfig config , com.google.gerrit.common.data.AccessSection section , java.lang.String permission , boolean force , com.google.gerrit.common.data.GroupReference ... groupList ) { com.google.gerrit.server.schema.AclUtil.grant ( config , section , permission , force , null , groupList ) ; }
private < T > void failure ( com.google.gerrit.client.rpc.CallbackGroup.CallbackGlue w , java.lang.Throwable caught ) { if ( ! ( failed ) ) { failed = true ; failedThrowable = caught ; } remaining.remove ( w ) ; apply ( ) ; }
private void infoRow ( final int row , final java.lang.String name ) { info.setText ( row , labelIdx , name ) ; info.getCellFormatter ( ) . addStyleName ( row , 0 , "header" ) ; }
public byte [ ] readFile ( java.lang.String repoName , java.lang.String ref , java.lang.String path ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.lib.Repository repo ; repo = openRepository ( repoName ) ; return com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob ( repo , ( ( ref + ":" ) + path ) ) ; }
public int hashCode ( ) { return ( ( com.google.gerrit.server.query.ObjectIdPredicate.getOperator ( ) . hashCode ( ) ) * 31 ) + ( id.hashCode ( ) ) ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( final com.google.gerrit.reviewdb.client.Project.SubmitType submitType ) throws com.google.gerrit.server.git.MergeException { return submitStrategyFactory.create ( submitType , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch , destProject.isUseContentMerge ( ) ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.securestore.SecureStoreClassName.class ) . toProvider ( com.google.inject.util.Providers.of ( getConfiguredSecureStoreClass ( ) ) ) ; }
public void indexChange ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; adminRestSession.post ( ( ( "/changes/" + changeId ) + "/index/" ) ) . assertNoContent ( ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.replace ( cd ) ; } fireChangeIndexedEvent ( cd ) ; }
public void patchSetDetail2 ( com.google.gerrit.reviewdb.client.PatchSet.Id baseId , com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail.create ( baseId , id , diffPrefs ) . to ( callback ) ; }
private void assertKeys ( com.google.gerrit.gpg.testutil.TestKey ... expectedKeys ) throws java.lang.Exception { assertKeys ( java.util.Arrays.asList ( expectedKeys ) ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChangeEdit.apply ( changeResource , new com.google.gerrit.extensions.common.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete change edit" , e ) ; } }
public static java.lang.String toAccountQuery ( final java.lang.String fullname ) { java.lang.String query = ( com.google.gerrit.common.PageLinks.op ( "owner" , fullname ) ) + " status:open" ; return com.google.gerrit.common.PageLinks.toChangeQuery ( query , com.google.gerrit.common.PageLinks.TOP ) ; }
public org.eclipse.jgit.revwalk.RevCommit commitAt ( org.eclipse.jgit.lib.ObjectId expected ) throws java.io.IOException { if ( java.util.Objects.equals ( src , expected ) ) { return revision ; } return updateRef ( com.google.common.base.MoreObjects.firstNonNull ( expected , org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) , src , getRefName ( ) ) ; }
public void execute ( ) { getElement ( ) . getStyle ( ) . setPaddingLeft ( cm.getGutterElement ( ) . getOffsetWidth ( ) , Unit.PX ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.extensions.api.projects.ConfigInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ! ( rsrc.getControl ( ) . isOwner ( ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "restricted to project owner" ) ; } return apply ( rsrc.getProjectState ( ) , input ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > removeAllAsync ( ) { self.removeAll ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.AccountGroup.UUID in ) { return ! ( com.google.gerrit.server.group.SystemGroupBackend.isSystemGroup ( in ) ) ; }
public static com.google.gerrit.client.ui.AccountLinkPanel link ( com.google.gerrit.common.data.AccountInfoCache cache , com.google.gerrit.reviewdb.client.Account.Id id ) { com.google.gerrit.client.info.AccountInfo ai = cache.get ( id ) ; return ai != null ? new com.google.gerrit.client.ui.AccountLinkPanel ( ai ) : null ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , final com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , migration , c , allUsers , user ) ; }
public com.google.gerrit.common.data.AccessSection getLocal ( java.lang.String name ) { for ( com.google.gerrit.common.data.AccessSection s : local ) { if ( s.getName ( ) . equals ( name ) ) { return s ; } } return null ; }
private static org.eclipse.jgit.lib.ObjectId emptyTree ( org.eclipse.jgit.lib.ObjectInserter ins ) throws java.io.IOException { return ins.insert ( Constants.OBJ_TREE , new byte [ ] { } ) ; }
public java.lang.String getLocalUser ( ) { if ( externalId.isScheme ( com.google.gerrit.server.account.externalids.ExternalId.SCHEME_GERRIT ) ) { return externalId.id ( ) ; } return null ; }
private static java.lang.String refEventKey ( java.lang.String type , java.lang.String project , java.lang.String ref ) { return java.lang.String.format ( "%s-%s-%s" , type , project , ref ) ; }
java.lang.String changesStartedBy ( java.lang.String fullName ) ;
private void initPatchSet ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSet ) == null ) { patchSet = cd.currentPatchSet ( ) ; } }
public com.google.gerrit.client.admin.AccessSectionEditor create ( int index ) { com.google.gerrit.client.admin.AccessSectionEditor subEditor = new com.google.gerrit.client.admin.AccessSectionEditor ( value ) ; subEditor.setEditing ( editing ) ; container.insert ( subEditor , index ) ; return subEditor ; }
public void testChangeOwner_OwnerACLNotGranted ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException , org.eclipse.jgit.errors.ConfigInvalidException { approve ( sessionOwner , createMyChange ( ) , HttpStatus.SC_FORBIDDEN ) ; }
private static com.google.gerrit.extensions.api.changes.ReviewInput approve ( ) { return new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . message ( "Looks good!" ) . label ( "Code-Review" , 2 ) ; }
public void destroy ( ) { java.util.concurrent.Future < ? > future = task.getAndSet ( null ) ; if ( ( future != null ) && ( ! ( future.isDone ( ) ) ) ) { future.cancel ( true ) ; } }
com.google.gerrit.server.change.PatchSetInserter create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.revwalk.RevCommit commit ) ;
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( change , new com.google.gerrit.server.change.Index.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot index change" , e ) ; } }
public void start ( ) { for ( com.google.gerrit.index.IndexDefinition < ? , ? , ? > def : defs ) { start ( def ) ; } }
public com.google.gerrit.server.git.CodeReviewCommit run ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; return _run ( mergeTip , toMerge ) ; }
public final native java.lang.String setName ( java.lang.String n ) ;
public final boolean submittable ( ) { init ( ) ; getMissingLabelIndex ( ) ; return _submittable ( ) ; }
private void doReplay ( ) { mockMaker.replay ( ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( ) { return com.google.gerrit.index.query.Predicate.not ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ) ; }
private void on ( final com.google.gwt.event.dom.client.KeyPressEvent e ) { descAction.setEnabled ( ( ( com.google.gwt.user.client.ui.TextBoxBase ) ( e.getSource ( ) ) ) . isEnabled ( ) ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
public final boolean isHttpPasswordSettingsEnabled ( ) { if ( ( isGitBasicAuth ( ) ) && ( ( gitBasicAuthPolicy ( ) ) == ( com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP ) ) ) { return false ; } return true ; }
public com.google.gerrit.common.data.GroupDetail call ( ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException { control = groupControl.validateFor ( groupId ) ; java.util.List < com.google.gerrit.reviewdb.client.AccountGroupMember > members = loadMembers ( ) ; java.util.List < com.google.gerrit.reviewdb.client.AccountGroupById > includes = loadIncludes ( ) ; return new com.google.gerrit.common.data.GroupDetail ( members , includes ) ; }
final java.lang.String get ( com.google.gerrit.prettify.common.SparseFileContent src , com.google.gerrit.prettify.common.EditList.Hunk hunk ) { return src.get ( getCur ( hunk ) ) ; }
public void pushForMaster ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultProjectName ( ) . equals ( box.getText ( ) ) ) { box.setText ( "" ) ; box.removeStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
public java.lang.String getReplacementString ( ) { return java.lang.String.valueOf ( change.legacyId ( ) . get ( ) ) ; }
private void updateForm ( ) { branchTable.updateDeleteButton ( ) ; addBranch.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
private static java.net.URL toURL ( java.nio.file.Path jarPath ) throws com.googlecode.prolog_cafe.compiler.CompileException { try { return jarPath.toUri ( ) . toURL ( ) ; } catch ( java.net.MalformedURLException e ) { throw new com.googlecode.prolog_cafe.compiler.CompileException ( ( "Cannot create URL for " + jarPath ) , e ) ; } }
public void zeroStartCharacterResultsInValidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 0 , 19 , 10 ) ; com.google.gerrit.extensions.common.testing.RangeSubject.assertThat ( range ) . isValid ( ) ; }
public static java.lang.String name ( com.google.gerrit.reviewdb.client.Account acct ) { return com.google.gerrit.client.FormatUtil.name ( com.google.gerrit.client.FormatUtil.asInfo ( acct ) ) ; }
com.google.gerrit.server.project.SubmitRuleEvaluator create ( com.google.gerrit.server.project.SubmitRuleOptions options ) ;
protected com.google.gwtjsonrpc.server.ActiveCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse resp ) { return new com.google.gerrit.server.GerritCall ( server , req , resp ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; bind ( com.google.gerrit.pgm.init.Browser.class ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { put ( content , com.google.gerrit.client.rpc.RestApi.wrap ( cb ) ) ; }
protected void loadPrev ( ) { Util.LIST_SVC.allOpenPrev ( pos , pageSize , loadCallback ( ) ) ; }
public java.lang.String getHeader ( java.lang.String name ) { return com.google.common.collect.Iterables.getFirst ( headers.get ( com.google.common.base.Preconditions.checkNotNull ( name.toLowerCase ( ) ) ) , null ) ; }
public boolean yesno ( java.lang.Boolean def , java.lang.String fmt , java.lang.Object ... args ) { return def != null ? def : true ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setHeaderVisible ( false ) ; setWindowTitle ( com.google.gerrit.client.info.FileInfo.getFileName ( path ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.http.jetty.JettyEnv.class ) . toInstance ( env ) ; bind ( com.google.gerrit.pgm.http.jetty.JettyServer.class ) ; listener ( ) . to ( JettyServer.Lifecycle.class ) ; install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . build ( com.google.gerrit.pgm.http.jetty.HttpLog.HttpLogFactory.class ) ) ; }
public void nonExistentNotesRefIsEquivalentToNotAnyExistingGroups ( ) throws java.lang.Exception { com.google.common.collect.ImmutableList < com.google.gerrit.common.data.GroupReference > allGroups = com.google.gerrit.server.group.db.GroupNameNotes.loadAllGroups ( repo ) ; com.google.common.truth.Truth.assertThat ( allGroups ) . isEmpty ( ) ; }
public void mergeFrom ( byte [ ] data , T obj ) { mergeFrom ( data , 0 , data.length , obj ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getFileWebLink ( java.lang.String projectName , java.lang.String revision , java.lang.String fileName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.PREVIEW , getImageUrl ( ) , getFileUrl ( projectName , revision , fileName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public void run ( ) throws java.lang.Exception { try { preRun ( ) ; parseArguments ( ) ; this . run ( ) ; } finally { postRun ( ) ; } }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.lib.ModeInjector ( ) . add ( getContentType ( info.meta_a ( ) ) ) . add ( getContentType ( info.meta_b ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . addParameterTrue ( "all" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
final native void setId ( java.lang.String i ) ;
public com.google.gerrit.reviewdb.AccountDiffPreference getAccountDiffPreference ( ) { return com.google.gerrit.server.util.FutureUtil.get ( accountDiffPreferencesCache.get ( getAccountId ( ) ) ) ; }
default void onRemove ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.server.account.externalids.ExternalId extId ) throws java.io.IOException { onRemove ( oldNotesRev , newNotesRev , java.util.Collections.singleton ( extId ) ) ; }
public void run ( ) { fixScroll ( cmB ) ; }
public com.googlesource.gerrit.plugins.lfs.AuthInfo generateAuthInfo ( java.lang.String operation , org.eclipse.jgit.lfs.lib.AnyLongObjectId id , int expirationSeconds ) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken ( operation , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.AuthInfo ( processor.serialize ( token ) , token.expiresAt ) ; }
public com.google.gerrit.server.cache.NamedCacheBinding maxAge ( long duration , java.util.concurrent.TimeUnit durationUnits ) ;
public void uuidOfNewGroupMustNotBeNull ( ) throws java.lang.Exception { expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.forNewGroup ( repo , null , groupName ) ; }
void setChangeInfo ( com.google.gerrit.client.changes.ChangeInfo info ) { project.setInnerText ( info.project ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.C.accountSettingsHeading ( ) ) ; }
public void includedInDetail ( final com.google.gerrit.reviewdb.client.Change.Id id , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.IncludedInDetail > callback ) { includedInDetail.create ( id ) . to ( callback ) ; }
public void start ( final org.apache.sshd.server.Environment env ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; com.google.gerrit.sshd.commands.AdminReplicate.this . schedule ( ) ; } } ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { final boolean isReviewed = ! ( reviewedPanels.getValue ( ) ) ; reviewedPanels.setValue ( isReviewed ) ; reviewedPanels.setReviewedByCurrentUser ( isReviewed ) ; }
public void onSuccess ( com.google.gerrit.client.data.ChangeDetail result ) { onSubmitResult ( result ) ; }
public static com.google.gerrit.lucene.LuceneIndexModule singleVersionWithExplicitVersions ( java.util.Map < java.lang.String , java.lang.Integer > versions , int threads , boolean slave ) { return new com.google.gerrit.lucene.LuceneIndexModule ( versions , threads , false , slave ) ; }
public void onUpdate ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) { }
public static com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ( java.lang.String orgName ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( ( ( UUID_PREFIX ) + orgName ) ) ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "ALL" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
static final boolean isTrashFolderName ( java.lang.String fName ) { return ( com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TRASH_1.matcher ( fName ) . matches ( ) ) || ( com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TRASH_2.matcher ( fName ) . matches ( ) ) ; }
protected com.google.inject.Injector getInjector ( ) { init ( ) ; return webInjector ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { reviewedPanels.go ( ) ; }
private void checkLoaded ( ) { com.google.common.base.Preconditions.checkState ( ( ( keys ) != null ) , "SSH keys not loaded yet" ) ; }
void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) { java.util.SortedMap < java.lang.Integer , com.google.gerrit.client.diff.CommentGroup > map = map ( side ) ; if ( ( map.get ( line ) ) == group ) { map.remove ( line ) ; } }
private static int nullToZero ( java.lang.Integer i ) { return i != null ? i.intValue ( ) : 0 ; }
private void assertNotBlocked ( java.lang.String p , java.lang.String ref , com.google.gerrit.server.permissions.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canPerform ( p ) ) . named ( ( ( p + " is blocked for " ) + ref ) ) . isTrue ( ) ; }
public static < V > com.google.gerrit.index.Schema < V > schema ( java.util.Collection < com.google.gerrit.index.FieldDef < V , ? > > fields ) { return new com.google.gerrit.index.Schema ( com.google.common.collect.ImmutableList.copyOf ( fields ) ) ; }
protected java.util.concurrent.Callable < ? > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return com.google.common.util.concurrent.Callables.returning ( null ) ; }
void update ( final com.google.gerrit.common.data.ChangeDetail detail ) { detailCache.set ( detail ) ; }
public java.lang.String createLinkForWebui ( java.lang.String url , java.lang.String text ) { return ( ( url + " (" ) + text ) + ")" ; }
public void onFailure ( java.lang.Throwable caught ) { files.showError ( caught ) ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.extensions.client.SubmitType submitType , com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commits , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.lang.String submissionId ) ;
private static byte [ ] decodeBase64 ( final java.lang.String s ) { return org.apache.commons.codec.binary.Base64.decodeBase64 ( com.google.gwtjsonrpc.server.SignedToken.toBytes ( s ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.projects.Projects.class ) . to ( com.google.gerrit.server.api.projects.ProjectsImpl.class ) ; factory ( BranchApiImpl.Factory.class ) ; factory ( ProjectApiImpl.Factory.class ) ; factory ( ChildProjectApiImpl.Factory.class ) ; }
public void show ( ) { super . show ( ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { username.setFocus ( true ) ; } } ) ; }
public static com.google.gerrit.server.workflow.CategoryFunction forCategory ( final com.google.gerrit.reviewdb.ApprovalCategory category ) { final com.google.gerrit.server.workflow.CategoryFunction r = com.google.gerrit.server.workflow.CategoryFunction.all.get ( category.getFunctionName ( ) ) ; return r != null ? r : new com.google.gerrit.server.workflow.NoOpFunction ( ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.AccountProjectWatch > getNotificationFilters ( ) { if ( ( notificationFilters ) == null ) { notificationFilters = com.google.gerrit.server.util.FutureUtil.get ( accountProjectWatchCache.byAccount ( getAccountId ( ) ) ) ; } return notificationFilters ; }
public static java.lang.String toPatch ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
public com.google.gerrit.server.change.MergeabilityChecker.Check addBranch ( com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { branches.add ( branch ) ; return this ; }
public org.eclipse.jgit.lib.Config getConfig ( ) { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; config.setStringList ( "gitiles" , null , "allowOriginRegex" , com.google.common.collect.ImmutableList.of ( "http://localhost" ) ) ; return config ; }
public com.google.gerrit.server.data.AccountAttribute asAccountAttribute ( org.eclipse.jgit.lib.PersonIdent ident ) { com.google.gerrit.server.data.AccountAttribute who = new com.google.gerrit.server.data.AccountAttribute ( ) ; who.name = ident.getName ( ) ; who.email = ident.getEmailAddress ( ) ; return who ; }
public void updateComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) { updateDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; updatePublishedComment ( comment ) ; } }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { final int sel = ws.getSelectedIndex ( ) ; if ( 0 <= sel ) { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.valueOf ( ws.getValue ( sel ) ) ) ; refresh ( false ) ; } }
public com.google.gerrit.server.notedb.DraftCommentNotes create ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.notedb.DraftCommentNotes ( repoManager , migration , draftsProject , commentsUtil , changeId , accountId ) ; }
public final boolean isHttpPasswordSettingsEnabled ( ) { return ( ( gitBasicAuthPolicy ( ) ) == ( com.google.gerrit.extensions.client.GitBasicAuthPolicy.HTTP ) ) || ( ( gitBasicAuthPolicy ( ) ) == ( com.google.gerrit.extensions.client.GitBasicAuthPolicy.HTTP_LDAP ) ) ; }
public com.google.gerrit.server.api.projects.ListRefsRequest < com.google.gerrit.extensions.api.projects.BranchInfo > branches ( ) { return new com.google.gerrit.server.api.projects.ListRefsRequest < com.google.gerrit.extensions.api.projects.BranchInfo > ( ) { @ java.lang.Override public java.util.List < com.google.gerrit.extensions.api.projects.BranchInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return listBranches ( this ) ; } } ; }
public void handle ( net.codemirror.lib.CodeMirror instance ) ;
public com.google.gerrit.server.CurrentUser getUser ( ) { return get ( com.google.gerrit.acceptance.InProcessProtocol.Context.USER_KEY , null ) ; }
public com.google.gerrit.server.project.ProjectControl validateFor ( final com.google.gerrit.client.reviewdb.Project.NameKey nameKey ) throws com.google.gerrit.server.project.NoSuchProjectException { return validateFor ( nameKey , com.google.gerrit.server.project.ProjectControl.VISIBLE ) ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.io.IOException ;
public java.util.Map < com.google.gerrit.reviewdb.Account.Id , com.google.gerrit.server.account.AccountState > getAll ( java.lang.Iterable < com.google.gerrit.reviewdb.Account.Id > accountIds ) { return byId.getAll ( accountIds ) ; }
public void run ( ) { cm.vim ( ) . handleKey ( "<C-u>" ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( isSignedIn ( ) ) { return identified.create ( AccessPath.WEB , val.accountId ) ; } return anonymous ; }
protected void configureServlets ( ) { serve ( "/show" ) . with ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscriptionServlet.class ) ; serve ( "/branch" ) . with ( com.amd.gerrit.plugins.manifestsubscription.BranchManifestServlet.class ) ; serve ( "/tag" ) . with ( com.amd.gerrit.plugins.manifestsubscription.TagManifestServlet.class ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gwt.user.client.Window.Location.assign ( ( ( com.google.gerrit.client.Gerrit.loginRedirect ( com.google.gwt.user.client.History.getToken ( ) ) ) + "?link" ) ) ; }
public com.google.gerrit.server.change.ChangeInserter setGroups ( java.util.List < java.lang.String > groups ) { com.google.common.base.Preconditions.checkNotNull ( groups , "groups may not be empty" ) ; com.google.common.base.Preconditions.checkState ( ( ( patchSet ) == null ) , "setGroups(Iterable<String>) only valid before creating change" ) ; this . groups = groups ; return this ; }
public final native net.codemirror.lib.CodeMirror side ( com.google.gerrit.client.diff.DisplaySide side ) ;
public void delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { deleteTask ( cd ) . call ( ) ; } catch ( java.lang.RuntimeException e ) { throw e ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.index.ChangeIndexer.MAPPER.apply ( e ) ; } }
public java.lang.String toString ( ) { return predicate.toString ( ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type , com.google.gerrit.reviewdb.client.Account updater ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type , util.accountInfo ( updater ) ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor ( project ) ; return ( shouldReplicate ( projectControl ) ) && ( ( PushOne.ALL_REFS.equals ( ref ) ) || ( projectControl.controlForRef ( ref ) . isVisible ( ) ) ) ; }
private void appendChangeRequestAndFooter ( ) { if ( ( changeUrl ( ) ) != null ) { body.append ( "To perform this review, please visit\n\n " ) ; body.append ( changeUrl ( ) ) ; body.append ( "\n\n" ) ; openFooter ( ) ; } }
protected boolean canPerform ( final com.google.gerrit.client.reviewdb.ApprovalCategory.Id actionId , final short val ) { return currentUser.canPerform ( cachedProj , actionId , val ) ; }
public abstract long getMaxValue ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema ) ;
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.projectNameKey ( ) , result.legacyId ( ) ) ) ; }
public final net.codemirror.lib.Extras extras ( ) { return net.codemirror.lib.Extras.get ( this ) ; }
public org.eclipse.jgit.revwalk.RevCommit getCommit ( ) { return commit ; }
public void onRemoval ( K key , V value , com.github.benmanes.caffeine.cache.RemovalCause cause ) { guavalistener.onRemoval ( com.google.common.cache.RemovalNotification.create ( key , value , com.google.common.cache.RemovalCause.valueOf ( cause.name ( ) ) ) ) ; }
public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData ( ) { return metaData ; }
protected static com.google.gerrit.common.Die die ( java.lang.String why ) { return new com.google.gerrit.common.Die ( why ) ; }
public boolean isOAuthLogin ( javax.servlet.http.HttpServletRequest request ) { return ( request.getRequestURI ( ) . indexOf ( GitHubOAuthConfig.OAUTH_LOGIN ) ) >= 0 ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeWithStatus ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Change.Status status ) throws java.lang.Exception { return newChange ( repo , null , null , status , null ) ; }
private com.google.gwtexpui.safehtml.client.SafeHtml showTrailingWhitespace ( com.google.gwtexpui.safehtml.client.SafeHtml src ) { final java.lang.String r = "<span class=\"wse\">$1</span>$2" ; src = src.replaceAll ( "([ \t][ \t]*)(\r?(</span>)?\n)" , r ) ; src = src.replaceFirst ( "([ \t][ \t]*)(\r?(</span>)?\n?)$" , r ) ; return src ; }
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProject , projectName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public boolean isVisible ( ) { return ( group.isVisibleToAll ( ) ) || ( isOwner ( ) ) ; }
protected void insertRow ( final int row ) { super . insertRow ( row ) ; final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter ( ) ; defaultStyle ( row , fmt ) ; }
public void start ( ) { com.google.gerrit.sshd.commands.ShowCaches.serverStarted = com.google.gerrit.common.TimeUtil.nowMs ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNew ( ) ; }
public Response.Action getUploadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id , long size ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getUploadAction ( id , size ) ; com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.AuthInfo authInfo = authorizer.generateAuthInfo ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.UPLOAD , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.ExpiringAction ( action.href , authInfo ) ; }
public boolean canAddMember ( final com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
private static final java.lang.String [ ] stringCollectionToArray ( java.util.Collection < java.lang.String > values ) { return values.toArray ( new java.lang.String [ 0 ] ) ; }
protected void configure ( ) { bind ( com.google.gerrit.rules.RulesCache.class ) ; factory ( PrologEnvironment.Factory.class ) ; }
public boolean isOwner ( ) { return ( ( isDeclaredOwner ( ) ) && ( ! ( controlForRef ( "refs/*" ) . isBlocked ( Permission.OWNER ) ) ) ) || ( user.getCapabilities ( ) . isAdmin_DoNotUse ( ) ) ; }
public static com.google.gerrit.server.workflow.CategoryFunction forCategory ( final com.google.gerrit.reviewdb.ApprovalCategory category ) { final com.google.gerrit.server.workflow.CategoryFunction r = com.google.gerrit.server.workflow.CategoryFunction.all.get ( category.getFunctionName ( ) ) ; return r != null ? r : new com.google.gerrit.server.workflow.NoOpFunction ( ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( final com.google.gerrit.server.patch.PatchListKey key ) { return com.google.gerrit.server.util.FutureUtil.get ( patchListCache.get ( key ) ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.server.change.ChangeJson.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public void testCreateProjectHttpWithUnreasonableName_BadRequest ( ) throws java.lang.Exception { adminRestSession.put ( ( "/projects/" + ( com.google.gerrit.extensions.restapi.Url.encode ( name ( "invalid/../name" ) ) ) ) ) . assertBadRequest ( ) ; }
public static com.google.gerrit.client.rpc.RestApi detail ( @ com.google.gerrit.common.Nullable java.lang.String project , int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( project , id , "detail" ) ; }
com.google.gerrit.lucene.LuceneChangeIndex getIndex ( com.google.gerrit.lucene.LuceneChangeIndex.Factory factory ) { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = ( ( singleVersion ) != null ) ? com.google.gerrit.server.index.change.ChangeSchemas.get ( singleVersion ) : com.google.gerrit.server.index.change.ChangeSchemas.getLatest ( ) ; return factory.create ( schema , base ) ; }
protected java.util.List < java.lang.String > getInstallPlugins ( ) { return installPlugins ; }
public void postEvent ( final com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.Event event ) { fireEvent ( branchName , event ) ; }
public abstract T newInstance ( ) ;
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit ) { if ( maxLimit == 0 ) { maxLimit = java.lang.Integer.MAX_VALUE ; } else { com.google.common.base.Preconditions.checkArgument ( ( maxLimit > 0 ) , "maxLimit must be positive: %s" , maxLimit ) ; } return new com.google.gerrit.server.index.AutoValue_IndexConfig ( maxLimit ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProject , projectName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > evictAsync ( final com.google.gerrit.reviewdb.Project p ) { if ( p != null ) { return byName.removeAsync ( p.getNameKey ( ) ) ; } return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public com.google.gerrit.client.data.PatchScriptSettings.Whitespace getWhitespace ( ) { return whitespace ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision ) ; } }
public com.google.gerrit.server.account.GroupMembership getEffectiveGroups ( ) { return new com.google.gerrit.server.account.ListGroupMembership ( java.util.Collections.singleton ( SystemGroupBackend.ANONYMOUS_USERS ) ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.cancelUnsavedChanges ( ) ) ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } }
public void tearDown ( ) throws java.lang.Exception { if ( ( lifecycle ) != null ) { lifecycle.stop ( ) ; } com.google.gerrit.testing.InMemoryDatabase.drop ( db ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( revision.getParentKey ( ) , java.lang.String.valueOf ( revision.get ( ) ) ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { return source.read ( ) ; }
public int nextAccountId ( ) { throw new com.google.gerrit.testing.DisabledReviewDb.Disabled ( ) ; }
com.googlesource.gerrit.plugins.replication.Destination create ( com.googlesource.gerrit.plugins.replication.DestinationConfiguration config ) { return new com.googlesource.gerrit.plugins.replication.Destination ( injector , config , replicationUserFactory , pluginUser , gitRepositoryManager , permissionBackend , userProvider , projectCache , groupBackend , stateLog , groupIncludeCache , eventDispatcher ) ; }
public void run ( ) { writeEvents ( ) ; }
public void execute ( ) { if ( ( cmA ) != null ) { cmA.setOption ( "viewportMargin" , 10 ) ; } if ( ( cmB ) != null ) { cmB.setOption ( "viewportMargin" , 10 ) ; } resizeCodeMirror ( ) ; }
public void backupTimestampRefNameForTag ( ) throws java.lang.Exception { java.lang.String name = com.googlesource.gerrit.plugins.refprotection.BackupRef.get ( null , "refs/tags/v1.0" ) ; java.lang.String expected_prefix = ( BackupRef.R_BACKUPS ) + "tags/v1.0-" ; com.google.common.truth.Truth.assertThat ( name ) . startsWith ( expected_prefix ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo apply ( com.google.gerrit.extensions.webui.WebLink webLink ) { return ( ( com.google.gerrit.extensions.webui.PatchSetWebLink ) ( webLink ) ) . getPatchSetWebLink ( project.get ( ) , commit ) ; }
public void remove ( com.google.gerrit.extensions.api.changes.DeleteReviewerInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteReviewer.apply ( reviewer , input ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot remove reviewer" , e ) ; } }
protected void preDisplay ( final com.google.gerrit.client.changes.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; display ( result ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete change" , e ) ; } }
private com.google.gerrit.server.notedb.ChangeBundle readBundleUnchecked ( com.google.gerrit.reviewdb.client.Change.Id id ) { try { return bundleReader.fromReviewDb ( getUnwrappedDb ( ) , id ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gwtorm.server.OrmRuntimeException ( e ) ; } }
public void onSuccess ( com.google.gerrit.common.data.ProjectAccess access ) { enable ( true ) ; commitMessage.setText ( "" ) ; displayReadOnly ( access ) ; }
private void bind ( final java.lang.String cmd , final java.lang.Class < ? extends com.google.gerrit.server.ssh.AbstractCommand > imp ) { commands.put ( cmd , injector.getProvider ( imp ) ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProjectBranch , projectName , branchName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
protected void preDisplay ( com.google.gerrit.client.groups.GroupList result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; }
abstract boolean isSideBySide ( ) ;
public void noNotificationForWipChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES , NotifyType.ALL_COMMENTS ) ) ; com.google.gerrit.server.project.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; sender.clear ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "wip change" , "a" , "a1" ) . to ( "refs/for/master%wip" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
java.lang.String blockedOn ( java.lang.String labelName ) ;
static com.google.gerrit.client.reviewdb.Account newInstance ( int rawId ) { com.google.gerrit.client.reviewdb.Account a = new com.google.gerrit.client.reviewdb.Account ( ) ; a.oldAccountId = new com.google.gerrit.client.reviewdb.Account.Id ( rawId ) ; return a ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , msgTxt , defaultNotify ( control ) , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public void execute ( ) { ac.onSuccess ( null ) ; }
public void run ( ) throws java.lang.Exception { try { preRun ( ) ; parseCommandLine ( ) ; this . run ( ) ; } finally { postRun ( ) ; } }
public com.google.gerrit.server.cache.NamedCacheBinding timeToIdle ( long duration , java.util.concurrent.TimeUnit durationUnits ) ;
public static void filter ( final com.google.gwtexpui.globalkey.client.KeyCommandFilter filter ) { com.google.gwtexpui.globalkey.client.GlobalKey.active.filter ( filter ) ; if ( ( com.google.gwtexpui.globalkey.client.GlobalKey.active ) != ( com.google.gwtexpui.globalkey.client.GlobalKey.global ) ) { com.google.gwtexpui.globalkey.client.GlobalKey.global.filter ( filter ) ; } }
java.lang.String diffHeader ( ) ;
private void assertParseWithEqualsFails ( java.lang.String value ) { try { com.google.gerrit.server.util.LabelVote.parseWithEquals ( value ) ; com.google.common.truth.Truth.assert_ ( ) . fail ( "expected IllegalArgumentException when parsing \"%s\"" , value ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( projectState , accountCache , emails , key , repository , changeData , branch , files ) ; }
public void remove ( ) { for ( java.lang.String name : names ) { descriptions.remove ( name ) ; registry.remove ( name ) ; } }
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { adminRestSession.delete ( urlEdit ( ) ) . assertNotFound ( ) ; }
public void setTitleText ( final java.lang.String text ) { titleText = text ; titleWidget = null ; if ( ( titleRow ) >= 0 ) { parent.table.setText ( titleRow , 0 , titleText ) ; } }
public java.lang.Boolean call ( ) throws java.io.IOException { return isVisible ( repo , walk , id , java.util.Arrays.asList ( knownReachable ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { publishedBaseAll = result ; publishedBase = sort ( result.get ( path ) ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , com.google.gerrit.server.events.RefEvent event ) { }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { com.google.gerrit.httpd.UrlModule.toGerrit ( target , req , rsp ) ; }
boolean isModified ( java.nio.file.Path jar ) { return snapshot.isModified ( jar.toFile ( ) ) ; }
com.google.gerrit.server.notedb.ChangeNotes getNotes ( ) ;
public com.google.gerrit.extensions.api.projects.BranchApi branch ( java.lang.String ref ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return branchApi.create ( checkExists ( ) , ref ) ; }
public static int getBinaryVersion ( ) { return com.google.gerrit.server.schema.SchemaVersion.guessVersion ( com.google.gerrit.server.schema.SchemaVersion.C ) ; }
public void run ( ) { cm.setCursor ( cm.getCursor ( ) ) ; cm.execCommand ( "clearSearch" ) ; cm.vim ( ) . handleEx ( "nohlsearch" ) ; }
private java.lang.String link ( final com.google.gerrit.client.projects.ProjectInfo item ) { return com.google.gerrit.client.Dispatcher.toProject ( item.name_key ( ) ) ; }
private void commit ( org.eclipse.jgit.lib.PersonIdent ident , java.lang.String subject ) throws java.lang.Exception { commitBuilder ( ) . ident ( ident ) . message ( ( ( ( subject + " (" ) + ( java.lang.System.nanoTime ( ) ) ) + ")" ) ) . create ( ) ; }
private static java.lang.reflect.Method getDefaultConfig ( java.lang.Class < ? > clazz ) { return com.google.gerrit.testing.ConfigSuite.getAnnotatedMethod ( clazz , com.google.gerrit.testing.ConfigSuite.Default.class ) ; }
private static java.lang.String queryWorkInProgress ( java.lang.String who ) { return "is:open is:wip owner:" + who ; }
public void inheritRead_OverrideWithDeny ( ) { com.google.gerrit.server.project.testing.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.testing.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; assertAccessDenied ( user ( local ) ) ; }
public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return this ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.googlesource.gerrit.plugins.events.StreamEventListener.class ) ; bind ( com.googlesource.gerrit.plugins.events.EventStore.class ) . to ( com.googlesource.gerrit.plugins.events.fsstore.FsStore.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.ChangeListener.class ) . to ( com.googlesource.gerrit.plugins.events.CoreListener.class ) ; }
protected void configureServlets ( ) { bind ( com.googlesource.gerrit.plugins.manager.AvailablePluginsCollection.class ) ; bind ( com.googlesource.gerrit.plugins.manager.repository.PluginsRepository.class ) . to ( com.googlesource.gerrit.plugins.manager.repository.JenkinsCiPluginsRepository.class ) ; serve ( "/available*" ) . with ( com.googlesource.gerrit.plugins.manager.PluginManagerRestApiServlet.class ) ; filterRegex ( ".*\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; }
void setRoot ( org.pegdown.ast.RootNode doc ) { root = doc ; hasToc = null ; ids = com.google.common.collect.HashBiMap.create ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsersProvider , change.getProject ( ) , change ) ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( com.google.gerrit.server.git.MetaDataUpdate md ) throws java.io.IOException { throw new java.lang.UnsupportedOperationException ( "use commit()" ) ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( com.google.gwt.core.client.GWT.getHostPageBaseURL ( ) , NativeString.TYPE ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.Plugin.init ( ) ; com.google.gerrit.client.api.ApiGlue.addHistoryHook ( ) ; }
protected com.google.inject.Injector createInjector ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; luceneConfig.setInt ( "index" , "lucene" , "testVersion" , 14 ) ; return com.google.gerrit.testutil.InMemoryModule.createInjector ( lifecycle , luceneConfig ) ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; } catch ( java.nio.file.NoSuchFileException e ) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND ; } }
protected void setCacheHeaders ( javax.servlet.http.HttpServletResponse res ) { long now = java.lang.System.currentTimeMillis ( ) ; res.setDateHeader ( com.google.common.net.HttpHeaders.EXPIRES , now ) ; res.setDateHeader ( com.google.common.net.HttpHeaders.DATE , now ) ; res.setHeader ( com.google.common.net.HttpHeaders.CACHE_CONTROL , "private, max-age=0, must-revalidate" ) ; }
com.google.gerrit.httpd.rpc.account.CreateGroup create ( java.lang.String groupName ) ;
private static void assertName ( java.lang.String expectedNewName , com.google.gerrit.server.patch.PatchListEntry e ) { com.google.common.truth.Truth.assertThat ( e.getNewName ( ) ) . isEqualTo ( expectedNewName ) ; com.google.common.truth.Truth.assertThat ( e.getOldName ( ) ) . isNull ( ) ; }
public java.lang.String getUrl ( ) { final java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; final com.google.gerrit.server.config.ConfigSection dbs = new com.google.gerrit.server.config.ConfigSection ( cfg , "database" ) ; b.append ( "jdbc:sap://" ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.hostname ( dbs.required ( "hostname" ) ) ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.port ( dbs.optional ( "port" ) ) ) ; java.lang.String database = dbs.optional ( "database" ) ; if ( ! ( com.google.common.base.Strings.isNullOrEmpty ( database ) ) ) { b.append ( "?databaseName=" ) . append ( database ) ; } return b.toString ( ) ; }
public boolean setUsernamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > usernames ) { return false ; }
public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockCreateReference ( ) ; setApiUser ( user ) ; assertCreateFails ( testBranch , com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public com.google.gerrit.extensions.api.accounts.GpgKeyApi gpgKey ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return gpgApiAdapter.gpgKey ( account , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( id ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot get PGP key" , e ) ; } }
public static java.lang.Integer getLimit ( java.lang.String fieldName , com.google.gerrit.index.query.Predicate < ? > p ) { com.google.gerrit.index.query.IntPredicate < ? > ip = com.google.gerrit.index.query.QueryBuilder.find ( p , com.google.gerrit.index.query.IntPredicate.class , fieldName ) ; return ip != null ? ip.intValue ( ) : null ; }
public void run ( ) { ( hasPrev ? prev : up ) . go ( ) ; }
private void removeOldEvents ( ) { try { sqlClient.removeOldEvents ( ) ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn ( "Cannot remove old entries from database" , e ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.schema.DataSourceType.class ) . toInstance ( dst ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return java.util.Objects.equals ( input.getAccountId ( ) , accountId ) ; }
java.lang.String getToken ( ) { return isSignedIn ( ) ? key.token : null ; }
public static void doNotInherit ( com.google.gerrit.server.project.ProjectConfig project , java.lang.String permissionName , java.lang.String ref ) { project.getAccessSection ( ref , true ) . getPermission ( permissionName , true ) . setExclusiveGroup ( true ) ; }
public char getClosingCharacter ( ) { return delim ; }
public boolean supportsRoleChanges ( com.gitblit.models.UserModel user , com.gitblit.Constants.Role role ) { return false ; }
int getBegin ( com.google.gerrit.prettify.common.BaseEdit edit ) { return edit.getBeginB ( ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.rules.PredicateProvider.class ) . to ( com.vmware.gerrit.owners.OwnerPredicateProvider.class ) . asEagerSingleton ( ) ; }
public void assertSchemaVersion ( ) throws com.google.gwtorm.server.OrmException { com.google.common.truth.Truth.assertThat ( getSchemaVersion ( ) . versionNbr ) . isEqualTo ( com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion ( ) ) ; }
public com.google.gerrit.client.admin.PermissionEditor create ( int index ) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor ( projectAccess.getProjectName ( ) , readOnly , value ) ; permissionContainer.insert ( subEditor , index ) ; return subEditor ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; if ( isInvalidSshKey ( caught ) ) { new com.google.gerrit.client.ErrorDialog ( Util.C.invalidSshKeyError ( ) ) . center ( ) ; } else { super . onFailure ( caught ) ; } }
public boolean canRemoveMember ( com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
public void run ( com.google.gerrit.server.project.ProjectState project , com.google.gerrit.server.CurrentUser user ) throws java.io.IOException , org.eclipse.jgit.lfs.errors.LfsException { context.sendResponse ( handler.verifyLocks ( project.getProject ( ) . getNameKey ( ) , user ) ) ; }
protected void configure ( ) { install ( new com.google.gerrit.server.index.IndexModule ( 1 ) ) ; bind ( com.google.gerrit.server.index.IndexConfig.class ) . toInstance ( com.google.gerrit.server.index.IndexConfig.createDefault ( ) ) ; bind ( com.google.gerrit.server.index.change.ChangeIndex.class ) . toInstance ( new com.google.gerrit.server.index.change.DummyChangeIndex ( ) ) ; }
public boolean setUsernamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > usernames ) { return false ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { addReviewerIcon.setVisible ( true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; suggestBox.setFocus ( false ) ; suggestBox.setText ( "" ) ; suggestBox.setServeSuggestionsOnOracle ( false ) ; }
byte [ ] toByteArray ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { return ( ( ( project.toString ( ) ) + ':' ) + ( pattern ( ) ) ) . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ; }
public void setReady ( java.lang.String indexName , int version , boolean ready ) { cfg.setBoolean ( com.google.gerrit.index.GerritIndexStatus.SECTION , com.google.gerrit.index.GerritIndexStatus.indexDirName ( indexName , version ) , com.google.gerrit.index.GerritIndexStatus.KEY_READY , ready ) ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , allUsers , c ) . load ( ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { java.lang.String url = getBranchUrl ( projectName , branchName ) ; return url == null ? null : new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.README , getImageUrl ( ) , url , Target.SELF ) ; }
protected void postRun ( ) { closeDb ( ) ; }
public static com.google.gerrit.common.data.PermissionRule rule ( com.google.gerrit.server.project.ProjectConfig config , com.google.gerrit.common.data.GroupReference group ) { return new com.google.gerrit.common.data.PermissionRule ( config.resolve ( group ) ) ; }
public void update ( com.googlesource.gerrit.plugins.github.git.GitJobStatus.Code code , java.lang.String shortDescription , java.lang.String description ) { this . status = code ; this . shortDescription = shortDescription ; this . value = description ; }
public void servletPathMatchesRequestPath ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s" , "/c" , "/s" ) ) ) . isNull ( ) ; }
boolean isVisible ( ) { return ( popup ) != null ; }
public com.google.gerrit.reviewdb.SystemConfig getSystemConfig ( ) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.ReviewDb c = open ( ) ; try { return c.systemConfig ( ) . get ( new com.google.gerrit.reviewdb.SystemConfig.Key ( ) ) ; } finally { c.close ( ) ; } }
private void execute ( java.lang.String query ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds.getConnection ( ) ; java.sql.Statement stat = conn.createStatement ( ) ) { stat.execute ( query ) ; } }
protected void configure ( ) { bind ( ChangeIndex.Manager.class ) . toInstance ( ChangeIndex.Manager.DISABLED ) ; bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . toInstance ( ChangeIndexer.DISABLED ) ; bind ( com.google.gerrit.server.query.change.IndexRewrite.class ) . toInstance ( IndexRewrite.DISABLED ) ; }
protected < T > T buildJson ( com.google.gson.reflect.TypeToken < T > typeOfT , java.lang.String path , java.lang.String queryString ) throws java.lang.Exception { return com.google.gitiles.ServletTest.newGson ( ) . fromJson ( buildJsonRaw ( path , queryString ) , typeOfT.getType ( ) ) ; }
void deleteGroupMembers ( com.google.gerrit.client.reviewdb.AccountGroup.Id groupId , java.util.Set < com.google.gerrit.client.reviewdb.AccountGroupMember.Key > keys , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
private org.apache.lucene.search.Query prefixQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { return new org.apache.lucene.search.PrefixQuery ( new org.apache.lucene.index.Term ( p.getField ( ) . getName ( ) , p.getValue ( ) ) ) ; }
public com.google.gerrit.index.query.Matchable < T > asMatchable ( ) { com.google.common.base.Preconditions.checkState ( isMatchable ( ) , "not matchable" ) ; return ( ( com.google.gerrit.index.query.Matchable < T > ) ( this ) ) ; }
public void linkifyMessageUrlAndChangeId ( ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS , config ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url/I0123456789" , "url" , "http://my/url/I0123456789" ) , com.google.common.collect.ImmutableMap.of ( "text" , " is not change " ) , com.google.common.collect.ImmutableMap.of ( "text" , "I0123456789" , "url" , "http://test-host-review/foo/#/q/I0123456789,n,z" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url/I0123456789 is not change I0123456789" ) ) ; }
public void delete ( ) { com.googlesource.gerrit.plugins.repositoryuse.Usage.log.debug ( java.lang.String.format ( "Deleting Usage: %s, %s, %s" , project , branch , destination ) ) ; com.googlesource.gerrit.plugins.repositoryuse.Usage.table.delete ( this ) ; }
public void listChildrenOfNonExistingProject_NotFound ( ) throws java.lang.Exception { try { gApi.projects ( ) . name ( "non-existing" ) . child ( "children" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException e ) { com.google.common.truth.Truth.assertThat ( e.getMessage ( ) ) . contains ( "non-existing" ) ; } }
com.google.gerrit.httpd.rpc.patch.AddReviewerHandler create ( com.google.gerrit.reviewdb.Change.Id changeId , java.util.Collection < java.lang.String > reviewers , boolean confirmed ) ;
public java.io.File getSrcFile ( ) { return srcFile ; }
private void render ( ) { final java.sql.Timestamp on = comment.getWrittenOn ( ) ; savedAt.setText ( PatchUtil.M.draftSaved ( new java.util.Date ( on.getTime ( ) ) ) ) ; renderedPanel.update ( comment ) ; stateEdit ( false ) ; }
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > latest ( com.google.gerrit.reviewdb.client.Change c ) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet ( c.currentPatchSetId ( ) ) ; ps.setCreatedOn ( c.getLastUpdatedOn ( ) ) ; return com.google.common.collect.ImmutableList.of ( ps ) ; }
private java.lang.String urlPublish ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edit:publish" ; }
public static java.lang.String toEditScreen ( @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toEditScreen ( project , revision , fileName , 0 ) ; }
public void modifyFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.notedb.ChangeNotes notes , java.lang.String filePath , com.google.gerrit.extensions.restapi.RawInput newContent ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , notes , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( filePath , newContent ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setHeaderVisible ( false ) ; add ( ( diffTable = new com.google.gerrit.client.diff.DiffTable ( ) ) ) ; }
public static com.google.gerrit.reviewdb.CurrentSchemaVersion create ( ) { final com.google.gerrit.reviewdb.CurrentSchemaVersion r = new com.google.gerrit.reviewdb.CurrentSchemaVersion ( ) ; r.singleton = new com.google.gerrit.reviewdb.CurrentSchemaVersion.Key ( ) ; return r ; }
private java.lang.String trimTrailingSlash ( java.lang.String url ) { return com.google.common.base.CharMatcher.is ( '/' ) . trimTrailingFrom ( url ) ; }
public void pushBypassPrivateByDefaultInherited ( ) throws java.lang.Exception { setPrivateByDefault ( project1 , InheritableBoolean.TRUE ) ; com.google.common.truth.Truth.assertThat ( createChange ( project2 ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isTrue ( ) ; }
public void run ( ) { boolean s = prefs.showWhitespaceErrors ( ) ; for ( net.codemirror.lib.CodeMirror cm : view.getCms ( ) ) { cm.setOption ( "showTrailingSpace" , s ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( ui ) ; bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
public final native void addWidget ( net.codemirror.lib.Pos pos , com.google.gwt.dom.client.Element node ) ;
final void setSubmitType ( com.google.gerrit.extensions.client.SubmitType t ) { setSubmitTypeRaw ( t.name ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { switch ( event.getCharCode ( ) ) { case com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER : doSearch ( ) ; break ; case com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE : searchBox.setText ( "" ) ; searchBox.setFocus ( false ) ; break ; } }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo.IncludedInInfo r ) { com.google.gerrit.common.data.IncludedInDetail result = new com.google.gerrit.common.data.IncludedInDetail ( ) ; result.setBranches ( toList ( r.branches ( ) ) ) ; result.setTags ( toList ( r.tags ( ) ) ) ; loadTable ( result ) ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.r1 = this . r1 ; engine.r2 = this . r2 ; }
private void verifyResponseIsOK ( ) throws java.lang.Exception { servlet.doPost ( request , response ) ; org.mockito.Mockito.verify ( response ) . setStatus ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
public void onSubmit ( final com.google.gwt.user.client.ui.FormPanel.SubmitEvent event ) { event.cancel ( ) ; final java.lang.String addr = inEmail.getText ( ) . trim ( ) ; if ( ! ( addr.contains ( "@" ) ) ) { return ; } inEmail.setEnabled ( false ) ; register.setEnabled ( false ) ; Util.ACCOUNT_SEC.registerEmail ( addr , new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > ( ) { public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { box.hide ( ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { inEmail.setEnabled ( true ) ; register.setEnabled ( true ) ; super . onFailure ( caught ) ; } } ) ; }
private com.google.gerrit.acceptance.RestResponse POST ( java.lang.String endPoint ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminRestSession.post ( endPoint ) ; r.consume ( ) ; return r ; }
private void checkHostIndex ( ) { checkView ( ( ( hostName ) != null ) , "missing hostName on %s view" , type ) ; checkView ( ( ( servletPath ) != null ) , "missing hostName on %s view" , type ) ; }
public void center ( ) { show ( ) ; closey.setFocus ( true ) ; }
void onAbandon ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( abandonAction ) == null ) { abandonAction = new com.google.gerrit.client.change.AbandonAction ( abandon , project , changeId ) ; } abandonAction.show ( ) ; }
public void onError ( com.google.gwt.resources.client.ResourceException e ) { cb.onFailure ( e ) ; }
public T call ( ) throws java.lang.Exception { if ( callerContext == ( local.getContext ( ) ) ) { return callable.call ( ) ; } else { return wrapped.call ( ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doExternalSearch ( ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.AddBranchResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
com.google.gerrit.server.mail.AddReviewerSender create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.extensions.api.changes.NotifyHandling notify ) ;
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , branch , null , null ) ; }
private com.google.gerrit.server.index.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { return query ( p , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ; }
public void putComments ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchLineComment c : comments ) { update.putComment ( c ) ; } db.patchComments ( ) . upsert ( comments ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.sql.Date o ) { sb.append ( '"' ) ; sb.append ( com.google.gwtjsonrpc.client.JavaSqlDate_JsonSerializer.toString ( o.getTime ( ) ) ) ; sb.append ( '"' ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.ProjectRight > byCategoryGroup ( com.google.gerrit.client.reviewdb.ApprovalCategory.Id cat , com.google.gerrit.client.reviewdb.AccountGroup.Id group ) throws com.google.gwtorm.client.OrmException ;
public void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public long getMinValue ( ) { return 0 ; }
void changeProjectAccess ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String baseRevision , java.lang.String message , java.util.List < com.google.gerrit.common.data.AccessSection > sections , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) ;
public void testToHeaderString_NameEmail3 ( ) { com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.mail.AddressTest.format ( "A B. C" , "a@a" ) ) . isEqualTo ( "\"A B. C\" <a@a>" ) ; }
public final boolean intralineDifference ( ) { return get ( "intraline_difference" , true ) ; }
public boolean isNotify ( com.google.gerrit.server.account.WatchConfig.NotifyType type ) { return ( types.contains ( type ) ) || ( types.contains ( NotifyType.ALL ) ) ; }
public abstract java.util.Iterator < java.util.Map.Entry < byte [ ] , byte [ ] > > scan ( byte [ ] fromKey , byte [ ] toKey , int limit ) throws com.google.gwtorm.client.OrmException ;
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create ( java.lang.String filename , int patchSetId , java.lang.Integer line , com.google.gerrit.extensions.client.Side side , com.google.common.hash.HashCode message , com.google.gerrit.reviewdb.client.Comment.Range range ) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry ( filename , patchSetId , line , side , message , range ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( c.getProject ( ) , c.getId ( ) , tip , walk , repoManager , noteUtil ) ; }
protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.PluginName.class ) . toInstance ( name ) ; }
public static java.lang.String toUnified ( @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , project , diffBase , revision , fileName , null , 0 ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( ) . run ( ) ; }
public void setup ( ) throws java.lang.Exception { testRepo = cloneProject ( project , user ) ; initialHead = getRemoteHead ( ) ; }
private static java.lang.String ensureSlash ( java.lang.String in ) { if ( ( in != null ) && ( ! ( in.endsWith ( "/" ) ) ) ) { return in + "/" ; } return in ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onOpenRow ( getRow ( selectedRow ) ) ; }
public final com.google.gerrit.server.git.MergeTip run ( final com.google.gerrit.server.git.CodeReviewCommit currentTip , final java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; return _run ( currentTip , toMerge ) ; }
public org.apache.http.impl.client.CloseableHttpClient get ( ) { return org.apache.http.impl.client.HttpClients.custom ( ) . setConnectionManager ( create ( socketMgr.get ( ) ) ) . setDefaultRequestConfig ( customRequestConfig ( ) ) . setServiceUnavailableRetryStrategy ( customServiceUnavailRetryStrategy ( ) ) . build ( ) ; }
private boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( ( isOwner ( ) ) || ( isReviewer ( db , cd ) ) ) || ( getRefControl ( ) . canViewDrafts ( ) ) ; }
public com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId getLabelId ( ) { return new com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId ( ( ( id ) != null ? id : name ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo > result ) { if ( ! ( result.isEmpty ( ) ) ) { display ( patchsetId , result ) ; } }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { reviewedPanels.go ( ) ; }
public void onSuccess ( com.google.gerrit.client.account.EditPreferences p ) { com.google.gerrit.client.Gerrit.setEditPreferences ( p.copyTo ( new com.google.gerrit.extensions.client.EditPreferencesInfo ( ) ) ) ; }
void onClose ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.cancelUnsavedChanges ( ) ) ) ) { upToChange ( ) ; } }
private void initDisplayControls ( ) { final com.google.gwt.user.client.ui.Grid displayControls = new com.google.gwt.user.client.ui.Grid ( 0 , 5 ) ; displayControls.setStyleName ( "gerrit-PatchScreen-DisplayControls" ) ; add ( displayControls ) ; createIgnoreWhitespace ( displayControls , 0 , 0 ) ; createContext ( displayControls , 0 , 2 ) ; }
public boolean isNotify ( final com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) { switch ( type ) { case NEW_CHANGES : return notifyNewChanges ; case NEW_PATCHSETS : return notifyNewPatchSets ; case ALL_COMMENTS : return notifyAllComments ; case SUBMITTED_CHANGES : return notifySubmittedChanges ; case ALL : break ; } return false ; }
public boolean match ( T object ) throws com.google.gwtorm.server.OrmException { java.lang.Integer valueInt = getValueInt ( object ) ; if ( valueInt == null ) { return false ; } return ( valueInt >= ( range.min ) ) && ( valueInt <= ( range.max ) ) ; }
private void logError ( java.lang.String msg ) { logError ( msg , null ) ; }
public void close ( ) { com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination ( executor , java.lang.Long.MAX_VALUE , java.util.concurrent.TimeUnit.SECONDS ) ; try { openIndex.close ( ) ; } finally { closedIndex.close ( ) ; } }
public boolean containsComment ( com.google.gerrit.reviewdb.client.Comment c ) { for ( com.google.gerrit.reviewdb.client.Comment existing : comments.values ( ) ) { if ( c.key.equals ( existing.key ) ) { return true ; } } return false ; }
public void projectDetail ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { projectDetailFactory.create ( projectName ) . to ( callback ) ; }
private com.google.gerrit.server.project.ChangeControl stubChangeControl ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.testutil.TestChanges.stubChangeControl ( repoManager , migration , c , allUsers , changeOwner ) ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int start , int limit ) throws com.google.gerrit.server.query.QueryParseException ;
public void visibleGroups ( final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.GroupList > callback ) { visibleGroupsFactory.create ( ) . to ( callback ) ; }
private java.lang.String getCommentPrefix ( com.google.gerrit.server.data.ChangeAttribute change ) { return ( getChangeIdUrl ( change ) ) + " | " ; }
public com.google.gerrit.server.notedb.ChangeUpdate getUpdate ( ) { return update ; }
public boolean handles ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return uuid.get ( ) . startsWith ( com.googlesource.gerrit.plugins.github.group.GitHubGroup.UUID_PREFIX ) ; }
public boolean canUploadMerges ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH_MERGE ) ) && ( canWrite ( ) ) ; }
public boolean isAutoGroup ( final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { return ( isAnonymousUsers ( groupId ) ) || ( isRegisteredUsers ( groupId ) ) ; }
public void add ( final java.lang.Runnable task ) { synchronized ( cleanup ) { if ( run ) { throw new java.lang.IllegalStateException ( "Request has already been cleaned up" ) ; } cleanup.add ( task ) ; } }
public boolean hidden ( ) { return false ; }
com.google.gerrit.acceptance.PushOneCommit create ( com.google.gerrit.reviewdb.server.ReviewDb db , org.eclipse.jgit.lib.PersonIdent i , org.eclipse.jgit.api.Git git , @ com.google.inject.assistedinject.Assisted ( value = "subject" ) java.lang.String subject , @ com.google.inject.assistedinject.Assisted ( value = "fileName" ) java.lang.String fileName , @ com.google.inject.assistedinject.Assisted ( value = "content" ) java.lang.String content , @ com.google.inject.assistedinject.Assisted ( value = "changeId" ) java.lang.String changeId ) ;
public void addIntHeader ( java.lang.String name , int value ) { headers.put ( name , java.lang.Integer.toString ( value ) ) ; }
public com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > getReviewDbProvider ( ) { return dbProviderProvider.get ( ) ; }
public void assertDeletePermission ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.AuthException { if ( ! ( canDelete ( rsrc ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "not allowed to delete project" ) ; } }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) throws com.google.gwtorm.server.OrmException { if ( ( notes ) == null ) { notes = notesFactory.create ( change ( ) ) ; } return notes ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.reviewdb.client.Change.Id cid , org.eclipse.jgit.revwalk.RevCommit rc , java.lang.String refName ) ;
void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException ;
public void setUp ( ) { org.mockito.Mockito.when ( configuration.jgroups ( ) ) . thenReturn ( jgroupsConfig ) ; finder = new com.ericsson.gerrit.plugins.highavailability.peers.jgroups.InetAddressFinder ( configuration ) ; }
private static com.google.gerrit.client.rpc.RestApi group ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) { return com.google.gerrit.client.groups.GroupApi.group ( group.get ( ) ) ; }
protected void configureServlets ( ) { filter ( "/*" ) . through ( com.google.gerrit.httpd.RequestCleanupFilter.class ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final java.util.HashSet < com.google.gerrit.reviewdb.RefRight.Key > refRightIds = rights.getRefRightIdsChecked ( ) ; doDeleteRefRights ( refRightIds ) ; }
private java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > suggestReviewers ( java.lang.String changeId , java.lang.String query , int n ) throws java.lang.Exception { return gApi.changes ( ) . id ( changeId ) . suggestReviewers ( query ) . withLimit ( n ) . get ( ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacy_id ( ) ) ) ; }
private void setRejectImplicitMerges ( ) throws java.lang.Exception { com.google.gerrit.server.project.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.getProject ( ) . setBooleanConfig ( BooleanProjectConfig.REJECT_IMPLICIT_MERGES , InheritableBoolean.TRUE ) ; saveProjectConfig ( project , cfg ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; resizeBoxPaddings ( ) ; }
public static boolean isDefaultDashboard ( @ com.google.gerrit.common.Nullable com.google.gerrit.extensions.restapi.IdString id ) { return ( id != null ) && ( com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard ( id.toString ( ) ) ) ; }
public boolean canForwardX11 ( org.apache.sshd.server.session.ServerSession session ) { return false ; }
public boolean equals ( final java.lang.Object o ) { return ( ( getClass ( ) ) == ( o.getClass ( ) ) ) && ( sha1.equals ( ( ( com.google.gerrit.client.reviewdb.PatchContent.Key ) ( o ) ) . sha1 ) ) ; }
public void setSizeBarInChangeTable ( boolean sizeBarInChangeTable ) { this . sizeBarInChangeTable = sizeBarInChangeTable ; }
public boolean equals ( com.google.gerrit.server.diff.CharText a , int ai , com.google.gerrit.server.diff.CharText b , int bi ) { return ( a.charAt ( ai ) ) == ( b.charAt ( bi ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { updateDeleteButton ( ) ; super . onFailure ( caught ) ; }
public com.googlesource.gerrit.plugins.replication.Destination.QueueInfo getQueueInfo ( ) { synchronized ( stateLock ) { return new com.googlesource.gerrit.plugins.replication.Destination.QueueInfo ( pending , inFlight ) ; } }
public org.eclipse.jgit.lib.RefUpdate.Result deleteFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( edit , new com.google.gerrit.server.edit.tree.DeleteFileModification ( file ) ) ; }
private static boolean isBecomeAnyoneEnabled ( ) { try { return java.lang.Boolean.getBoolean ( "com.google.gerrit.httpd.auth.become" ) ; } catch ( java.lang.SecurityException se ) { return false ; } }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.AccountSshKey > valid ( com.google.gerrit.client.reviewdb.Account.Id id ) throws com.google.gwtorm.client.OrmException ;
private com.google.gwtexpui.clippy.client.CopyableLabel getCommitLabel ( com.google.gerrit.client.info.ChangeInfo.CommitInfo c ) { com.google.gwtexpui.clippy.client.CopyableLabel copyLabel ; copyLabel = new com.google.gwtexpui.clippy.client.CopyableLabel ( c.commit ( ) ) ; copyLabel.setTitle ( c.subject ( ) ) ; copyLabel.setStyleName ( style.clippy ( ) ) ; return copyLabel ; }
private com.google.gerrit.server.patch.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return new com.google.gerrit.server.patch.PatchListKey ( revisionIdA , revisionIdB , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE ) ; }
private void expandAll ( ) { expandSideAll ( ) ; otherBar.expandSideAll ( ) ; manager.remove ( this , otherBar ) ; }
public void setSerializableCommentLinks ( java.util.List < com.google.gerrit.common.data.GerritConfig.CommentLink > commentLinks ) { findReplaceLinks = null ; this . commentLinks = java.util.Collections.unmodifiableList ( commentLinks ) ; }
com.google.gerrit.server.auth.ldap.Helper.LdapSchema getSchema ( javax.naming.directory.DirContext ctx ) { if ( ( ldapSchema ) == null ) { synchronized ( this ) { if ( ( ldapSchema ) == null ) { ldapSchema = new com.google.gerrit.server.auth.ldap.Helper.LdapSchema ( ctx ) ; } } } return ldapSchema ; }
public int hashCode ( ) { return java.util.Objects.hash ( formatter , project , resource , revId , metaConfigRevId , parentsHash , revIdB , diffMode ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.create ( options ) . format ( rsrc ) ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { cm.adjustHeight ( header.getOffsetHeight ( ) ) ; }
public com.google.gerrit.acceptance.PushOneCommit setParent ( org.eclipse.jgit.revwalk.RevCommit parent ) throws java.lang.Exception { commitBuilder.noParents ( ) ; commitBuilder.parent ( parent ) ; return this ; }
protected void display ( com.google.gerrit.client.info.AccountInfo account ) { super . display ( account ) ; if ( "" . equals ( nameTxt.getText ( ) ) ) { nameTxt.setFocus ( true ) ; save.setEnabled ( true ) ; } }
public final native boolean lineWrapping ( ) ;
public WorkQueue.Executor createReceiveCommitsExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "receive" , null , "threadPoolSize" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) ) ; return queues.createQueue ( poolSize , "ReceiveCommits" ) ; }
protected static com.google.gerrit.index.query.QueryParseException error ( java.lang.String msg , java.lang.Throwable why ) { return new com.google.gerrit.index.query.QueryParseException ( msg , why ) ; }
private void assertNoProblems ( org.eclipse.jgit.transport.PushCertificate cert ) { com.google.gerrit.gpg.CheckResult result = checker.check ( cert ) . getCheckResult ( ) ; org.junit.Assert.assertEquals ( java.util.Collections.emptyList ( ) , result.getProblems ( ) ) ; }
public java.lang.String getServletPath ( ) { return ( ( javax.servlet.http.HttpServletRequest ) ( getRequest ( ) ) ) . getRequestURI ( ) . substring ( contextPath.length ( ) ) ; }
public int compare ( com.google.gerrit.extensions.common.ChangeInfo c1 , com.google.gerrit.extensions.common.ChangeInfo c2 ) { int compareResult = c1.branch.compareTo ( c2.branch ) ; if ( compareResult == 0 ) { return java.lang.Integer.compare ( c1._number , c2._number ) ; } return compareResult ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { keys.deleteChecked ( ) ; }
public org.eclipse.jgit.lib.ReflogReader getReflogReader ( java.lang.String refName ) throws java.io.IOException { return ( exactRef ( refName ) ) != null ? delegate.getReflogReader ( refName ) : null ; }
com.googlesource.gerrit.plugins.reviewers.AddReviewersByConfiguration create ( com.google.gerrit.extensions.common.ChangeInfo changeInfo , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) ;
public boolean isOwner ( ) { return ( controlForRef ( RefRight.ALL ) . isOwner ( ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public void deleteVote ( com.google.gerrit.extensions.api.changes.DeleteVoteInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply ( new com.google.gerrit.server.change.VoteResource ( reviewer , input.label ) , input ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete vote" , e ) ; } }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { showSiteHeader.setChecked ( account.isShowSiteHeader ( ) ) ; setDefaultContext ( account.getDefaultContext ( ) ) ; }
public void testInitialValueNotNull ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.multimaster.forwarder.Context.isForwardedEvent ( ) ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.multimaster.forwarder.Context.isForwardedEvent ( ) ) . isFalse ( ) ; }
public static com.google.gerrit.server.diff.IntraLineDiffArgs create ( com.google.gerrit.server.diff.Text aText , com.google.gerrit.server.diff.Text bText , java.util.List < org.eclipse.jgit.diff.Edit > edits , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId commit , java.lang.String path ) { return new com.google.gerrit.server.diff.AutoValue_IntraLineDiffArgs ( aText , bText , com.google.gerrit.server.diff.IntraLineDiffArgs.deepCopyEdits ( edits ) , project , commit , path ) ; }
protected com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) { final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call = new com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall ( session.get ( ) , req , new com.google.gerrit.httpd.rpc.AuditedHttpServletResponse ( rsp ) ) ; com.google.gerrit.httpd.rpc.GerritJsonServlet.currentCall.set ( call ) ; return call ; }
public com.google.gerrit.server.index.QueryOptions withLimit ( int newLimit ) { return com.google.gerrit.server.index.QueryOptions.create ( config ( ) , start ( ) , newLimit , fields ( ) ) ; }
public static < T > com.google.gerrit.server.CurrentUser.PropertyKey < T > create ( ) { return new com.google.gerrit.server.CurrentUser.PropertyKey < > ( ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getParentWebLink ( java.lang.String projectName , java.lang.String commit ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s/+/%s" , baseUrl , projectName , commit ) , target ) ; }
protected void onExit ( final int rc ) { exit.onExit ( rc ) ; cleanup.run ( ) ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; factory ( GarbageCollection.Factory.class ) ; }
public void testLinkify_Parens1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A (http://go.here/) B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( ( "<p>A (<a href=\"http://go.here/\" target=\"_blank\" rel=\"nofollow\"" + ">http://go.here/</a>) B</p>" ) ) ; }
public void pushBypassPrivateByDefaultEnabled ( ) throws java.lang.Exception { setPrivateByDefault ( project2 , InheritableBoolean.TRUE ) ; com.google.common.truth.Truth.assertThat ( createChange ( project2 , "refs/for/master%remove-private" ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isFalse ( ) ; }
public void setState ( final com.google.gerrit.extensions.api.projects.ProjectState newState ) { state = newState ; }
public final native boolean is_edit ( ) ;
public synchronized javax.sql.DataSource get ( ) { if ( ! ( init ) ) { com.google.gerrit.pgm.util.SiteLibraryLoaderUtil.loadSiteLib ( libdir ) ; init = true ; } return super . get ( ) ; }
java.lang.String diffBaseParent ( int parentNum ) ;
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > equalsName ( java.lang.String name ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.NAME_PART , AccountQueryBuilder.FIELD_NAME , name.toLowerCase ( ) ) ; }
abstract com.google.gerrit.server.ReviewerByEmailSet pendingReviewersByEmail ( ) ;
public boolean isPureMetaChange ( com.google.gerrit.common.data.PatchScript script ) { return ( ! ( hasEdits ( script ) ) ) && ( hasMeta ( script ) ) ; }
public java.lang.Long call ( ) throws java.io.IOException , java.lang.InterruptedException { return writer.updateDocument ( term , doc ) ; }
private boolean isLive ( final java.io.File entry ) { final java.lang.String name = entry.getName ( ) ; return ( ( ErrorLogFile.LOG_NAME.equals ( name ) ) || ( "sshd_log" . equals ( name ) ) ) || ( name.endsWith ( ".pid" ) ) ; }
public org.parboiled.Rule colsTag ( ) { return string ( "|||---|||" ) ; }
public com.google.gerrit.extensions.auth.oauth.OAuthToken getAccessToken ( com.google.gerrit.extensions.auth.oauth.OAuthVerifier rv ) { return com.googlesource.gerrit.plugins.cfoauth.CFOAuthService.getAsOAuthToken ( uaaClient.getAccessToken ( rv.getValue ( ) ) ) ; }
com.google.gerrit.server.account.GroupMembers create ( ) ;
public void postEvent ( final com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.Event event ) { fireEvent ( branchName , event ) ; }
void refresh ( ) { if ( header ) { net.codemirror.lib.CodeMirror cm = getDiffScreen ( ) . getCmFromSide ( DisplaySide.A ) ; diffHeaderText.getStyle ( ) . setMarginLeft ( cm.getGutterElement ( ) . getOffsetWidth ( ) , Unit.PX ) ; } }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme > getDownloadSchemes ( ) { return downloadSchemes ; }
public void deleteBranchByUserWithForcePushPermission ( ) throws java.lang.Exception { grantForcePush ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( testBranch ) ; }
public java.lang.String toString ( ) { return com.google.gerrit.server.git.gpg.Fingerprint.toString ( fp ) ; }
protected com.google.gerrit.git.RepositoryCache getRepositoryCache ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { final com.google.gerrit.git.RepositoryCache rc = getGerritServer ( ) . getRepositoryCache ( ) ; if ( rc == null ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 128 , "fatal: Gerrit repositories are not available" , new java.lang.IllegalStateException ( "gerrit.basePath not set" ) ) ; } return rc ; }
public void validNewChange ( ) throws java.lang.Exception { assertNoProblems ( insertChange ( ) , null ) ; }
com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) ;
public void init ( javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { for ( com.google.gerrit.httpd.AllRequestFilter f : filters ) { f.init ( config ) ; } }
public com.google.gerrit.server.project.ListProjects setFormat ( com.google.gerrit.server.OutputFormat fmt ) { this . format = fmt ; return this ; }
public void printJson ( java.io.PrintWriter out ) { new com.google.gson.Gson ( ) . toJson ( this , com.googlesource.gerrit.plugins.github.git.GitJobStatus.class , new com.google.gson.stream.JsonWriter ( out ) ) ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( ( ( com.google.gerrit.client.reviewdb.Project.NameKey ) ( key ) ) ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > getForOpenChange ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c , user ) ; return cs.changes ( ) . asList ( ) ; }
void deleteDraftChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) ;
com.google.gerrit.server.permissions.ProjectRef getRuleProps ( com.google.gerrit.common.data.PermissionRule rule ) { return ruleProps.get ( rule ) ; }
public boolean getIfPresent ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.client.SubmitType submitType , java.lang.String mergeStrategy ) { return cache.getIfPresent ( new com.google.gerrit.server.change.MergeabilityCacheImpl.EntryKey ( commit , com.google.gerrit.server.change.MergeabilityCacheImpl.toId ( intoRef ) , submitType , mergeStrategy ) ) ; }
public void tearDown ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZoneProperty ) ; java.util.TimeZone.setDefault ( systemTimeZone ) ; }
private com.google.gerrit.server.query.change.ChangeData getChange ( org.eclipse.jgit.lib.ObjectId c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( queryProvider.get ( ) . byCommit ( c ) ) ; }
private com.google.gerrit.server.change.ChangeJson changeJson ( ) { return changeJsonFactory.noOptions ( ) ; }
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { changeToProject.put ( id , result.project ( ) ) ; getImpl ( result.project ( ) , cb ) ; }
private static void assertChildren ( java.lang.String o , com.google.gerrit.index.query.Predicate < java.lang.String > p , java.util.List < ? extends com.google.gerrit.index.query.Predicate < java.lang.String > > l ) { org.junit.Assert.assertEquals ( ( o + " did not affect child" ) , l , p.getChildren ( ) ) ; }
public java.lang.String getReplacementString ( ) { return com.google.gerrit.client.FormatUtil.nameEmail ( com.google.gerrit.client.FormatUtil.asInfo ( info ) ) ; }
public static com.google.gerrit.client.rpc.RestApi self ( ) { return new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . view ( "self" ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { rights.showInherited ( showInherited.isChecked ( ) ) ; }
public static java.lang.String getUserName ( java.util.Collection < com.google.gerrit.server.account.ExternalId > ids ) { for ( com.google.gerrit.server.account.ExternalId extId : ids ) { if ( extId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME ) ) { return extId.key ( ) . id ( ) ; } } return null ; }
public void configure ( ) { bind ( com.google.gerrit.server.notedb.MutableNotesMigration.class ) ; bind ( com.google.gerrit.server.notedb.NotesMigration.class ) . to ( com.google.gerrit.server.notedb.MutableNotesMigration.class ) ; }
private final native java.lang.String dateRaw ( ) ;
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.mode.ModeInjector ( ) . add ( getContentType ( info.metaA ( ) ) ) . add ( getContentType ( info.metaB ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
private void failAndThrow ( java.lang.Error e ) { fail ( e ) ; throw e ; }
private com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change , boolean force ) { return com.google.common.util.concurrent.Futures.makeChecked ( executor.submit ( new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change , force ) ) , com.google.gerrit.server.change.MergeabilityChecker.MAPPER ) ; }
Account.Id getAuthorId ( ) { return comment.author.getId ( ) ; }
private < T > boolean isEnum ( org.kohsuke.args4j.spi.Setter < T > setter ) { return java.lang.Enum.class . isAssignableFrom ( setter.getType ( ) ) ; }
private boolean canEditAssignee ( ) { return ( ( ( isOwner ( ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( refControl.canPerform ( Permission.EDIT_ASSIGNEE ) ) ) || ( isAssignee ( ) ) ; }
public void createBranchByAdminCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateFails ( testBranch , com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > in = result.get ( path ) ; if ( in != null ) { addAllToCommentList ( in , toDrafts ) ; } }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.overview.refresh ( ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.PUT , content , cb ) ; }
public void testUpsertNothing ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { createClassUnderTest ( ) . upsert ( noData ) ; }
private void visitChildren ( org.commonmark.node.Node node ) { for ( org.commonmark.node.Node c = node.getFirstChild ( ) ; c != null ; c = c.getNext ( ) ) { c.accept ( this ) ; } }
public void onFailure ( java.lang.Throwable e ) { enableEdit ( true ) ; super . onFailure ( e ) ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return format ( changeDataFactory.create ( db.get ( ) , change ) ) ; }
public static com.google.gerrit.common.data.SubmitTypeRecord defaultTypeError ( ) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( com.google.gerrit.server.project.SubmitRuleEvaluator.DEFAULT_MSG ) ; }
private void doQuery ( ) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.documentation.DocScreen.URI ) ; call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( query ) ) ; call.get ( loadCallback ( ) ) ; }
static void deleteSessionCookie ( ) { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.myAccountDiffPref = null ; com.google.gerrit.client.Gerrit.authorization = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; com.google.gwt.user.client.Cookies.removeCookie ( "GerritAccount" ) ; }
public void rollback ( ) throws com.google.gwtorm.server.OrmException { if ( inTransaction ) { inTransaction = false ; } else { delegate.rollback ( ) ; } }
public void testGetCommentNotExisting ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; comments.parse ( revRes1 , com.google.gerrit.extensions.restapi.IdString.fromUrl ( "BadComment" ) ) ; }
public void onFailure ( final java.lang.Throwable caught ) { text.setReadOnly ( false ) ; save.setEnabled ( true ) ; discard.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public void subsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "refs/changes/02/2/1" , "refs/changes/02/2/meta" , "refs/heads/branch" ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
private boolean activeForEmail ( com.google.gerrit.server.config.PluginConfig config , java.lang.String email ) { return matchCriteria ( config , "email" , email , true , false ) ; }
void suggestAccount ( java.lang.String query , java.lang.Boolean enabled , int limit , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.AccountInfo > > callback ) ;
public void onFailure ( final java.lang.Throwable caught ) { com.google.gwt.core.client.GWT.log ( "Unexpected failure from validating account" , caught ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; showInitialScreen ( ) ; }
void updateSchema ( com.google.gwtorm.client.StatementExecutor e ) throws com.google.gwtorm.client.OrmException ;
private java.lang.String id ( java.lang.String refName ) throws java.io.IOException { return org.eclipse.jgit.lib.ObjectId.toString ( repo.getRepository ( ) . exactRef ( refName ) . getObjectId ( ) ) ; }
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.NoteDbMode.readWrite ( ) ) . isFalse ( ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; notesMigration.setAllEnabled ( false ) ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.reviewdb.client.Change.Id cid , org.eclipse.jgit.revwalk.RevCommit rc , java.lang.String refName ) ;
public void copySettingsFrom ( final com.google.gerrit.reviewdb.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; useContentMerge = update.useContentMerge ; requireChangeID = update.requireChangeID ; submitType = update.submitType ; }
public com.google.gerrit.server.project.RefControl controlForRef ( com.google.gerrit.reviewdb.Branch.NameKey ref ) { return controlForRef ( ref.get ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment.Key > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.reviewdb.server.DisabledChangesReviewDbWrapper.MSG ) ; }
protected void setTitleWest ( final com.google.gwt.user.client.ui.Widget w ) { header.setWidget ( 0 , com.google.gerrit.client.ui.Screen.Cols.West.ordinal ( ) , w ) ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid ) ;
public com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( com.google.gerrit.server.git.CodeReviewCommit c ) { return approvalsUtil.getSubmitter ( db.get ( ) , c.notes ( ) , c.getPatchsetId ( ) ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , side , line ) ; }
public com.googlesource.gerrit.plugins.cookbook.Description getDescription ( com.google.gerrit.server.project.ProjectResource resource ) { return new com.googlesource.gerrit.plugins.cookbook.Description ( ) . setLabel ( "Say hello" ) . setTitle ( "Say hello in different languages" ) . setVisible ( ( ( user.get ( ) ) instanceof com.google.gerrit.server.IdentifiedUser ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gerrit.client.rpc.HttpCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.config.CapabilityDefinition.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.Exports.named ( MonitoringCapability.ID ) ) . to ( com.googlesource.gerrit.plugins.javamelody.MonitoringCapability.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.TopMenu.class ) . to ( com.googlesource.gerrit.plugins.javamelody.MonitoringTopMenu.class ) ; }
public void saveDraft ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > onSave ) { if ( ( isOpen ( ) ) && ( text.isVisible ( ) ) ) { onSave ( onSave ) ; } else { onSave.onSuccess ( VoidResult.INSTANCE ) ; } }
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body ) throws java.lang.Exception { return writeCommit ( body , com.google.gerrit.server.notedb.ChangeNoteUtil.newIdent ( changeOwner.getAccount ( ) , com.google.gerrit.common.TimeUtil.nowTs ( ) , serverIdent , "Anonymous Coward" ) ) ; }
public void addOp ( com.google.gerrit.server.update.BatchUpdate bu , com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { bu.addRepoOnlyOp ( new com.google.gerrit.server.git.SubmoduleOp.GitlinkOp ( branch ) ) ; }
static com.google.gerrit.client.account.AccountApi.GpgKeysInput delete ( java.lang.Iterable < java.lang.String > fingerprints ) { return com.google.gerrit.client.account.AccountApi.GpgKeysInput.createWithDelete ( com.google.gerrit.client.rpc.Natives.arrayOf ( fingerprints ) ) ; }
public com.google.gerrit.extensions.api.changes.IncludedInInfo includedIn ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return includedIn.apply ( change ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Could not extract IncludedIn data" , e ) ; } }
public void setUp ( ) throws java.lang.Exception { project = createProject ( name ( "p" ) ) ; branch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( project , "test" ) ; branch ( ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; }
public java.lang.String getName ( ) { return getParameter ( 0 ) ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . addParameterTrue ( "all" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
private com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo getPeerInfo ( ) throws com.ericsson.gerrit.plugins.highavailability.forwarder.rest.PeerInfoNotAvailableException { com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo info = peerInfo.get ( ) . orElse ( null ) ; if ( info == null ) { throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.PeerInfoNotAvailableException ( ) ; } return info ; }
private com.google.gerrit.extensions.common.DiffInfo.ContentEntry entry ( ) { com.google.gerrit.extensions.common.DiffInfo.ContentEntry e = new com.google.gerrit.extensions.common.DiffInfo.ContentEntry ( ) ; lines.add ( e ) ; return e ; }
private javax.servlet.http.Cookie getGerritCookie ( javax.servlet.http.HttpServletRequest httpRequest ) { for ( javax.servlet.http.Cookie cookie : httpRequest.getCookies ( ) ) { if ( cookie.getName ( ) . equalsIgnoreCase ( com.googlesource.gerrit.plugins.github.oauth.OAuthFilter.GERRIT_COOKIE_NAME ) ) { return cookie ; } } return null ; }
private com.google.gerrit.server.query.change.ChangeData changeData ( com.google.gerrit.reviewdb.server.ReviewDb db , @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd ) { return cd != null ? cd : changeDataFactory.create ( db , getChange ( ) ) ; }
public boolean isAutomaticMembership ( ) { return ( automaticMembership ) || ( ( externalName ) != null ) ; }
public void assertCanDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException , com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { if ( db.submoduleSubscriptions ( ) . bySubmoduleProject ( project.getNameKey ( ) ) . iterator ( ) . hasNext ( ) ) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException ( "Project is subscribed by other projects." ) ; } }
private com.google.gerrit.server.git.GroupList readGroupList ( ) throws java.io.IOException { return com.google.gerrit.server.git.GroupList.parse ( readUTF8 ( GroupList.FILE_NAME ) , com.google.gerrit.server.git.GroupList.createLoggerSink ( GroupList.FILE_NAME , com.google.gerrit.pgm.init.api.AllProjectsConfig.log ) ) ; }
public com.google.gerrit.client.admin.PermissionRuleEditor create ( int index ) { com.google.gerrit.client.admin.PermissionRuleEditor subEditor = new com.google.gerrit.client.admin.PermissionRuleEditor ( readOnly , groupInfo , section , value , validRange ) ; ruleContainer.insert ( subEditor , index ) ; return subEditor ; }
private static java.util.List < java.lang.Integer > get ( java.lang.String value ) { return com.google.gerrit.testing.IndexVersions.get ( ChangeSchemaDefinitions.INSTANCE , "test" , value ) ; }
public int getCost ( ) { return 1 ; }
public com.google.gerrit.server.change.ChangeInserter setTopic ( java.lang.String topic ) { com.google.common.base.Preconditions.checkState ( ( ( change ) == null ) , "setTopic(String) only valid before creating change" ) ; this . topic = topic ; return this ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( draft , null ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft" , e ) ; } }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.CreateGroup.Input input ) throws com.google.gerrit.extensions.restapi.ResourceConflictException { throw new com.google.gerrit.extensions.restapi.ResourceConflictException ( "Group already exists" ) ; }
private void edit ( ) { if ( ! ( isOpen ( ) ) ) { setOpen ( true ) ; } text.setText ( comment.getMessage ( ) ) ; expandText ( ) ; stateEdit ( true ) ; text.setFocus ( true ) ; }
public void nameEscaperDoesNotEscapeSlashes ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gitiles.GitilesUrls.escapeName ( "foo/bar" ) ) . isEqualTo ( "foo/bar" ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentManager = new com.google.gerrit.client.diff.CommentManager ( this , base , revision , path , result.getCommentLinkProcessor ( ) ) ; setTheme ( result.getTheme ( ) ) ; display ( comments ) ; }
private boolean canUploadMerges ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH_MERGE ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
private void display ( com.google.gerrit.client.info.ChangeInfo info ) { hashtagsText.setInnerSafeHtml ( formatHashtags ( info ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo detail ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply ( rsrc ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot retrieve group" , e ) ; } }
public boolean enableGwtUi ( ) { return ( ! ( headless ) ) && ( enableGwtUi ) ; }
public com.google.common.collect.SetMultimap < com.google.gerrit.server.ApprovalsUtil.ReviewerState , com.google.gerrit.reviewdb.client.Account.Id > reviewers ( ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ApprovalsUtil.getReviewers ( allApprovals ( ) ) ; }
public void testContainsFalseWithSingleElement ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; com.google.common.truth.Truth.assertThat ( ds.contains ( 3 ) ) . isFalse ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > removeAsync ( final K key ) { if ( key != null ) { self.remove ( key ) ; } return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
private void fireEventForUnrestrictedListeners ( final com.google.gerrit.server.events.Event event ) { for ( com.google.gerrit.common.EventListener listener : unrestrictedListeners ) { listener.onEvent ( event ) ; } }
public boolean apply ( com.google.gerrit.server.account.externalids.ExternalId externalId ) { return externalId.key ( ) . get ( ) . startsWith ( IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX ) ; }
public void setIntHeader ( java.lang.String name , int value ) { headers.removeAll ( name.toLowerCase ( ) ) ; addIntHeader ( name , value ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( name , version , pluginFile ) ; }
public java.lang.String getStory ( final java.lang.String id ) throws java.io.IOException { return getData ( ( ( ( ( this . baseUrl ) + ( com.googlesource.gerrit.plugins.its.storyboard.StoryboardClient.STORIES_ENDPOINT ) ) + "/" ) + ( getStoryId ( id ) ) ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( mySubname.equals ( subname ) ) { display ( result ) ; } }
public static com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ( java.lang.String orgName ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( ( ( UUID_PREFIX ) + orgName ) ) ; }
public static java.util.Set < java.lang.String > getNameParts ( java.lang.String name ) { return com.google.gerrit.index.SchemaUtil.getNameParts ( name , java.util.Collections.emptySet ( ) ) ; }
org.parboiled.Rule Factor ( ) { return firstOf ( Number ( ) , sequence ( '(' , Expression ( ) , ')' ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.plugins.StartPluginListener.class ) . annotatedWith ( com.google.inject.internal.UniqueAnnotations.create ( ) ) . to ( com.google.gerrit.sshd.SshPluginStarterCallback.class ) ; listener ( ) . to ( com.google.gerrit.sshd.SshLog.class ) ; listener ( ) . to ( com.google.gerrit.sshd.SshDaemon.class ) ; }
public com.google.gerrit.server.change.ListRevisionComments list ( ) { return list ; }
private void updatePatchSetRef ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { testRepo.update ( ps.getId ( ) . toRefName ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( ps.getRevision ( ) . get ( ) ) ) ; }
public com.google.gwtexpui.safehtml.client.SafeHtml linkify ( ) { final java.lang.String part = "(?:" + ( ( ( "[a-zA-Z0-9$_+!*'%;:@=?#/~-]" + "|&(?!lt;|gt;)" ) + "|[.,](?!(?:\\s|$))" ) + ")" ) ; return replaceAll ( ( ( ( ( ( ( ( ( ( "(https?://" + part ) + "{2,}" ) + "(?:[(]" ) + part ) + "*" ) + "[)])*" ) + part ) + "*" ) + ")" ) , "<a href=\"$1\" target=\"_blank\">$1</a>" ) ; }
private void preMerge ( final com.google.gerrit.server.git.strategy.SubmitStrategy strategy , final java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run ( branchTip , toMerge ) ; refLogIdent = strategy.getRefLogIdent ( ) ; commits.putAll ( strategy.getNewCommits ( ) ) ; }
public void setContactFiled ( java.sql.Timestamp ts ) { contactFiledOn = ts ; }
public void deleteDraftChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gwtjsonrpc.common.VoidResult > callback ) { deleteDraftChangeFactory.create ( patchSetId ) . to ( callback ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t instanceof com.googlecode.prolog_cafe.lang.DoubleTerm ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) << ( t.intValue ( ) ) ) ) ; }
java.lang.String description ( ) default "" ;
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.dashboards.DashboardInfo item ) { return item.id ( ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( new com.google.gerrit.server.query.change.ChangeData ( change ) , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public void check ( com.google.gerrit.server.permissions.ChangePermissionOrLabel perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( perm.describeForException ( ) ) + " not permitted" ) ) ; } }
public void createOtherAndGrantPermissions ( ) throws java.lang.Exception { other = accountCreator.create ( "other" , "other@example.com" , "other" ) ; grant ( project , "refs/*" , Permission.FORGE_COMMITTER , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
private void log ( final int rc ) { if ( logged.compareAndSet ( false , true ) ) { log.onExecute ( rc ) ; } }
void onReplace ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public synchronized void stop ( ) { if ( ( acceptor ) != null ) { try { acceptor.dispose ( ) ; com.google.gerrit.server.ssh.GerritSshDaemon.log.info ( "Stopped Gerrit SSHD" ) ; } finally { acceptor = null ; } } }
public void evictSubgroupsOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
protected void configure ( ) { listener ( ) . to ( LocalDiskRepositoryManager.Lifecycle.class ) ; listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( WorkQueue.Lifecycle.class ) ; listener ( ) . to ( com.google.gerrit.server.config.GerritGlobalModule.VelocityLifecycle.class ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName ) ; }
void onSubmit ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.SubmitAction.call ( changeInfo , changeInfo.revision ( revision ) ) ; }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content , editFileInfo , patchSetDiffInfo ) ; content = null ; editFileInfo = null ; patchSetDiffInfo = null ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( nameBox.getText ( ) ) ) { nameBox.setText ( Util.C.defaultProjectName ( ) ) ; nameBox.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public static com.google.gerrit.client.rpc.RestApi drafts ( @ com.google.gerrit.common.Nullable java.lang.String project , int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( project , id , "drafts" ) ; }
public org.eclipse.jgit.lib.Repository openRepository ( com.google.gerrit.reviewdb.client.Project.NameKey name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException { return openRepository ( basePath , name ) ; }
public void getNonExistingChildProject_NotFound ( ) throws java.lang.Exception { assertChildNotFound ( allProjects , "non-existing" ) ; }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , true , expectedStatus ) ; }
public void deleteTags ( com.google.gerrit.extensions.api.projects.DeleteTagsInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteTags.apply ( checkExists ( ) , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete tags" , e ) ; } }
public java.lang.String getRefPatternForDisplay ( ) { return key.refPattern.get ( ) ; }
private void initPatchSet ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSet ) == null ) { patchSet = cd.currentPatchSet ( ) ; if ( ( patchSet ) == null ) { throw new com.google.gwtorm.server.OrmException ( "No patch set found" ) ; } } }
protected java.lang.Integer getValueInt ( com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { return ChangeField.DELTA.get ( changeData , null ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canMerge ( args.mergeSorter , args.repo , mergeTip , toMerge ) ; }
public void addGpgKey ( ) throws java.lang.Exception { com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key1 ( ) ; java.lang.String id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyId ( ) ) ; addExternalIdEmail ( admin , "test1@example.com" ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( key.getPublicKeyArmored ( ) ) ) . get ( id ) ; info.id = id ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , info ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertKeyEquals ( key , gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ) ; org.bouncycastle.openpgp.PGPPublicKey stored = getOnlyKeyFromStore ( key ) ; com.google.common.truth.Truth.assertThat ( stored.getFingerprint ( ) ) . isEqualTo ( key.getPublicKey ( ) . getFingerprint ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; exception.expectMessage ( id ) ; gApi.accounts ( ) . self ( ) . gpgKey ( id ) . get ( ) ; }
private void initSshd ( ) { sshInjector = createSshInjector ( ) ; sysInjector.getInstance ( com.google.gerrit.server.plugins.PluginGuiceEnvironment.class ) . setSshInjector ( sshInjector ) ; manager.add ( sshInjector ) ; }
public final native void expandAllComments ( java.lang.Boolean e ) ;
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; }
public void setCurrentPatchSetDetail ( com.google.gerrit.client.data.PatchSetDetail d ) { currentDetail = d ; }
private void deleteRef ( java.lang.String refName ) throws java.lang.Exception { org.eclipse.jgit.lib.RefUpdate ru = testRepo.getRepository ( ) . updateRef ( refName , true ) ; ru.setForceUpdate ( true ) ; com.google.common.truth.Truth.assertThat ( ru.delete ( ) ) . isEqualTo ( RefUpdate.Result.FORCED ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpDelete delete = new org.apache.http.client.methods.HttpDelete ( ( ( ( url ) + "/a" ) + endPoint ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( delete ) ) ; }
static final com.google.gerrit.client.rpc.NativeString wrap ( java.lang.String s ) { return com.google.gerrit.client.rpc.NativeString.wrap0 ( com.google.gerrit.client.rpc.NativeString.TYPE , s ) ; }
void onAddGroupByClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.common.data.GroupReference ref = groupToAdd.getValue ( ) ; if ( ref != null ) { addGroup ( ref ) ; } else { groupToAdd.setFocus ( true ) ; } }
public void consume ( ) throws java.io.IOException , java.lang.IllegalStateException { java.io.Reader reader = getReader ( ) ; if ( reader != null ) { while ( ( reader.read ( ) ) != ( - 1 ) ) ; } }
public java.lang.String toString ( ) { return com.google.common.base.MoreObjects.toStringHelper ( this ) . add ( "project" , project ) . add ( "branch" , branch ) . toString ( ) ; }
public com.google.gerrit.server.account.AccountLimits create ( com.google.gerrit.server.CurrentUser user ) { return new com.google.gerrit.server.account.AccountLimits ( projectCache , user ) ; }
public void setParentName ( java.lang.String n ) { parent = ( n != null ) ? new com.google.gerrit.reviewdb.Project.NameKey ( n ) : null ; }
private void setRefLogIdent ( final com.google.gerrit.reviewdb.PatchSetApproval submitAudit ) { if ( submitAudit != null ) { branchUpdate.setRefLogIdent ( identifiedUserFactory.create ( submitAudit.getAccountId ( ) ) . newRefLogIdent ( ) ) ; } }
public boolean isValid ( ) { return ( seq ) > 0 ; }
public static com.google.gerrit.client.changes.QueryScreen forQuery ( java.lang.String query , int start ) { return new com.google.gerrit.client.changes.QueryScreen ( com.google.gwtorm.client.KeyUtil.encode ( query ) , start ) ; }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.newIdent ( author , when , serverIdent , anonymousCowardName ) ; }
public void rebase ( com.google.gerrit.extensions.api.changes.RebaseInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply ( change , in ) ; } catch ( com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot rebase change" , e ) ; } }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.index.project.ProjectData > name ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) { return new com.google.gerrit.index.project.ProjectPredicate ( com.google.gerrit.index.project.ProjectField.NAME , nameKey.get ( ) ) ; }
com.google.gerrit.prettify.client.PrettyFormatter.Tag pop ( java.lang.StringBuilder buf , java.lang.String html ) { return this ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > isVisibleToAll ( ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.IS_VISIBLE_TO_ALL , "1" ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.M.changesOpenInProject ( projectKey.get ( ) ) ) ; }
public com.google.gerrit.server.project.RefControl controlForRef ( java.lang.String refName ) { return new com.google.gerrit.server.project.RefControl ( this , refName ) ; }
public final void adjustHeight ( int localHeader ) { int rest = ( ( com.google.gerrit.client.Gerrit.getHeaderFooterHeight ( ) ) + localHeader ) + 5 ; setHeight ( ( ( com.google.gwt.user.client.Window.getClientHeight ( ) ) - rest ) ) ; }
public void go ( ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) , createScreen ( ) ) ; }
private boolean canImport ( ) { return ( permissionBackend.user ( userProvider ) . testOrFalse ( new com.google.gerrit.extensions.api.access.PluginPermission ( pluginName , ImportCapability.ID ) ) ) || ( permissionBackend.user ( userProvider ) . testOrFalse ( com.google.gerrit.server.permissions.GlobalPermission.ADMINISTRATE_SERVER ) ) ; }
private org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public java.util.List < org.pegdown.ast.Node > parse ( org.parboiled.support.StringBuilderVar body ) { if ( ( parser ) == null ) { parser = com.google.gitiles.doc.GitilesMarkdown.newParser ( parseTimeout ) ; } return parser.parseMarkdown ( body.getChars ( ) ) . getChildren ( ) ; }
public com.google.gerrit.server.change.ChangeInserter setFireRevisionCreated ( boolean fireRevisionCreated ) { this . fireRevisionCreated = fireRevisionCreated ; return this ; }
public java.lang.String getRefName ( ) { return refName ; }
public void newPatchSetByOtherOnReviewableChangeNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; pushTo ( sc , "refs/for/master%notify=NONE" , other ) ; assertThat ( sender ) . notSent ( ) ; }
public static void restore ( int id , java.lang.String path , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create ( ) ; in.restorePath ( path ) ; com.google.gerrit.client.changes.ChangeApi.edit ( id ) . post ( in , cb ) ; }
java.util.Collection < com.google.gerrit.client.reviewdb.ProjectRight > getWildcardRights ( ) { return get ( wildProject ) . getLocalRights ( ) ; }
public static com.google.gwtexpui.safehtml.client.SafeHtml get ( com.google.gwt.dom.client.Element e ) { return new com.google.gwtexpui.safehtml.client.SafeHtmlString ( e.getInnerHTML ( ) ) ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; } catch ( java.nio.file.NoSuchFileException e ) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND ; } }
public void go ( ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) , new com.google.gerrit.client.changes.AccountDashboardScreen ( accountId ) ) ; }
private void loadAndDisplay ( ) { loadAndDisplay ( false ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountInfo result ) { onCloseForm ( ) ; setAssignee ( null ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.change.IndexRewriter.class ) ; listener ( ) . to ( com.google.gerrit.server.index.change.ChangeIndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
public void expiredKeyIsExpired ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.expiredKey ( ) , "Key is expired" ) ; }
public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doPublishComments ( psid , message , approvals , db , txn ) ; }
private void padLineNumber ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTd ( ) ; m.setStyleName ( Gerrit.RESOURCES.css ( ) . lineNumber ( ) ) ; m.closeTd ( ) ; }
private com.google.gerrit.reviewdb.AccountDiffPreference.Whitespace getIgnoreWhitespace ( ) { final int sel = ignoreWhitespace.getSelectedIndex ( ) ; if ( 0 <= sel ) { return com.google.gerrit.reviewdb.AccountDiffPreference.Whitespace.valueOf ( ignoreWhitespace.getValue ( sel ) ) ; } return value.getWhitespace ( ) ; }
private java.lang.String getAccessTokenAttribute ( java.lang.String tokenResponse ) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { com.google.gson.JsonObject json = getAsJsonObject ( tokenResponse ) ; java.lang.String accessToken = getAttribute ( json , com.googlesource.gerrit.plugins.cfoauth.UAAClient.ACCESS_TOKEN_ATTRIBUTE ) ; if ( accessToken == null ) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException ( "Can't extract a token: missing or invalid 'access_token' attribute" ) ; } return accessToken ; }
private void writeFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { res.setStatus ( HttpServletResponse.SC_NO_CONTENT ) ; streamRequestToFile ( req , resolvePath ( req ) . toFile ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doRemove ( ad , remove ) ; }
public boolean handles ( java.nio.file.Path srcPath ) { return srcPath.getFileName ( ) . toString ( ) . endsWith ( com.googlesource.gerrit.plugins.cookbook.pluginprovider.HelloSshPluginProvider.SSH_EXT ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > equalsNameIcludingSecondaryEmails ( java.lang.String name ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.NAME_PART , AccountQueryBuilder.FIELD_NAME , name.toLowerCase ( ) ) ; }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { try { return list.get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn ( "Cannot list available projects" , e ) ; return java.util.Collections.emptySortedSet ( ) ; } }
public void onEvent ( com.google.gerrit.server.events.Event event ) { queue.add ( event ) ; executor.submit ( new ChangeRunner ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser get ( ) { return createNew ( com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider.FAKE_EMAIL ) ; }
public synchronized java.util.List < com.googlesource.gerrit.plugins.replication.Destination > getDestinations ( com.googlesource.gerrit.plugins.replication.FilterType filterType ) { reloadIfNeeded ( ) ; return currentConfig.getDestinations ( filterType ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.AccountCapabilities ac ) { boolean isAdmin = ac.canPerform ( "administrateServer" ) ; display ( serviceUserInfo , ( ( configInfo.getAllowEmail ( ) ) || isAdmin ) , ( ( configInfo.getAllowOwner ( ) ) || isAdmin ) ) ; }
public com.google.gerrit.server.WebLinks get ( ) { return new com.google.gerrit.server.WebLinks ( patchSetLinks , fileLinks , projectLinks , branchLinks ) ; }
public static com.google.gerrit.index.FieldDef.Builder < java.lang.Integer > integer ( java.lang.String name ) { return new com.google.gerrit.index.FieldDef.Builder ( FieldType.INTEGER , name ) ; }
protected java.lang.Object createServiceHandle ( ) { return service ; }
public com.google.gerrit.reviewdb.server.PatchSetAccess patchSets ( ) { throw new com.google.gerrit.testing.DisabledReviewDb.Disabled ( ) ; }
com.google.gerrit.extensions.client.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.DisplaySide side ) { if ( ( ( side == ( DisplaySide.A ) ) && ( base.isBaseOrAutoMerge ( ) ) ) || ( base.isParent ( ) ) ) { return com.google.gerrit.extensions.client.Side.PARENT ; } return com.google.gerrit.extensions.client.Side.REVISION ; }
public void onSuccess ( final com.google.gerrit.common.data.ChangeDetail result ) { if ( result != null ) { detailCache.set ( result ) ; } else { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; } }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.extensions.restapi.TopLevelResource > list ( ) { if ( hasQuery ) { return queryProjects.get ( ) ; } return list.get ( ) . setFormat ( OutputFormat.JSON ) ; }
public void start ( ) { queue.getDefaultQueue ( ) . scheduleAtFixedRate ( compresser , 1 , 24 , java.util.concurrent.TimeUnit.HOURS ) ; }
public boolean allowsEdit ( com.google.gerrit.extensions.client.AccountFieldName field ) { return editableAccountFields.contains ( field ) ; }
com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther ( com.google.gerrit.client.diff.DisplaySide side , int line ) { return mapper.lineOnOther ( side , line ) ; }
private boolean isNewRef ( com.google.gerrit.server.events.RefUpdatedEvent event ) { return event.refUpdate.oldRev.equals ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) . getName ( ) ) ; }
public static void defaultDashboard ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + "default" ) ) . addParameterTrue ( "inherited" ) . get ( callback ) ; }
private boolean isHttpEnabled ( ) { return ( downloadConfig.getDownloadSchemes ( ) . contains ( CoreDownloadSchemes.ANON_HTTP ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( CoreDownloadSchemes.HTTP ) ) ; }
public void run ( ) { fixScroll ( cmA ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { return abandon ( control , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public final com.google.gerrit.index.Schema.Builder < T > add ( com.google.gerrit.index.FieldDef < T , ? > ... fields ) { this . fields.addAll ( java.util.Arrays.asList ( fields ) ) ; return this ; }
protected void formatChange ( ) { formatSalutation ( ) ; formatChangeDetail ( ) ; appendText ( "\n" ) ; appendText ( ( ( " " + ( getPullUrl ( ) ) ) + "\n" ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet ( java.lang.String changeId ) throws java.lang.Exception { return com.google.common.collect.Iterables.getOnlyElement ( queryProvider.get ( ) . byKeyPrefix ( changeId ) ) . currentPatchSet ( ) ; }
public void onSubmit ( final com.google.gwt.user.client.ui.FormPanel.SubmitEvent event ) { event.cancel ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { showCLA ( cla ) ; }
private static com.google.gerrit.server.notedb.ChangeDraftUpdate.Key key ( com.google.gerrit.reviewdb.client.Comment c ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeDraftUpdate_Key ( c.revId , c.key ) ; }
public abstract void display ( com.google.gerrit.common.data.CommentDetail comments , boolean expandComments ) ;
synchronized com.google.gerrit.sshd.SshScope.Context subContext ( com.google.gerrit.sshd.SshSession newSession , java.lang.String newCommandLine ) { com.google.gerrit.sshd.SshScope.Context ctx = new com.google.gerrit.sshd.SshScope.Context ( this , newSession , newCommandLine ) ; cleanup.add ( ctx.cleanup ) ; return ctx ; }
private void resetTimeWithClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { systemTimeZone = java.lang.System.setProperty ( "user.timezone" , "US/Eastern" ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( clockStep , clockStepUnit ) ; org.eclipse.jgit.util.SystemReader.setInstance ( null ) ; }
static void savePublic ( final org.eclipse.jgit.storage.file.FileBasedConfig sec ) throws java.io.IOException { if ( com.google.gerrit.common.FileUtil.modified ( sec ) ) { sec.save ( ) ; } }
public com.google.gerrit.server.CurrentUser runAs ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id , @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , caller ) ; }
public static java.lang.String toGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , java.lang.String panel ) { return ( ( com.google.gerrit.client.Dispatcher.toGroup ( uuid ) ) + "," ) + panel ; }
protected void onLoad ( ) { super . onLoad ( ) ; add ( new com.google.gerrit.client.api.ExtensionPanel ( com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN_BOTTOM ) ) ; display ( com.google.gerrit.client.Gerrit.getUserAccount ( ) ) ; display ( ) ; }
public com.google.gerrit.server.change.PatchSetInserter setValidatePolicy ( com.google.gerrit.server.change.PatchSetInserter.ValidatePolicy validate ) { this . validatePolicy = com.google.common.base.Preconditions.checkNotNull ( validate ) ; return this ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
private boolean can ( com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm ) throws com.google.gerrit.server.permissions.PermissionBackendException { if ( ( cap ) == null ) { cap = capabilityFactory.create ( user ) ; } return cap.doCanForDefaultPermissionBackend ( perm ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { throw new com.google.inject.OutOfScopeException ( "No user during ChangeIndexer" ) ; }
public void setBranch ( java.lang.String str ) { branch = str ; }
protected void configureServlets ( ) { serve ( "/say-hello/*" ) . with ( com.googlesource.gerrit.plugins.cookbook.HelloWorldServlet.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.WebUiPlugin.class ) . toInstance ( new com.google.gerrit.extensions.webui.JavaScriptPlugin ( "hello.js" ) ) ; }
private void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public void onSuccess ( final com.google.gerrit.client.data.ChangeDetail r ) { if ( isAttached ( ) ) { display ( r ) ; } }
public void center ( ) { super . center ( ) ; com.google.gwtexpui.globalkey.client.GlobalKey.dialog ( this ) ; message.setFocus ( true ) ; }
public void cleanupIndex ( ) { if ( ( com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo ) != null ) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes ( com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node , com.google.gerrit.elasticsearch.ElasticQueryChangesTest.INDEX_NAME ) ; com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes ( ) ; } }
public com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup create ( final com.google.gerrit.server.group.GroupResource group , final java.lang.String id ) { return new com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup ( put , com.google.gerrit.extensions.restapi.Url.decode ( id ) ) ; }
public UiAction.Description getDescription ( com.google.gerrit.server.change.RevisionResource resource ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Cherry Pick" ) . setTitle ( "Cherry pick change to a different branch" ) . setVisible ( resource.getControl ( ) . getProjectControl ( ) . canUpload ( ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final java.util.HashSet < com.google.gerrit.reviewdb.RefRight.Key > refRightIds = rights.getRefRightIdsChecked ( ) ; doDeleteRefRights ( refRightIds ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupOptions ( ) ; initGroupType ( ) ; initMemberList ( ) ; initIncludeList ( ) ; initExternal ( ) ; }
protected java.util.List < java.lang.Integer > query ( java.lang.Object query ) throws java.lang.Exception { return com.google.gerrit.server.query.change.AbstractQueryChangesTest.query ( newQuery ( query ) ) ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < com.google.gwt.user.client.ui.SuggestOracle.Suggestion > event ) { if ( submitOnSelection ) { submitOnSelection = false ; doAddNew ( ) ; } }
private com.google.gerrit.server.notedb.ChangeNotes newChange ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , c ) . load ( ) ; }
public void doFilter ( javax.servlet.ServletRequest req , javax.servlet.ServletResponse res , javax.servlet.FilterChain chain ) throws java.io.IOException , javax.servlet.ServletException { filter.doFilter ( req , res , chain ) ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( ) throws com.google.gerrit.server.git.MergeException { return submitStrategyFactory.create ( destProject.getSubmitType ( ) , db , repo , rw , inserter , CAN_MERGE , alreadyAccepted , destBranch , destProject.isUseContentMerge ( ) ) ; }
protected void configureServlets ( ) { filter ( "/" ) . through ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.class ) ; serve ( "/login" , "/login/*" ) . with ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertLoginServlet.class ) ; }
public static com.google.gerrit.index.FieldDef.Builder < java.lang.String > exact ( java.lang.String name ) { return new com.google.gerrit.index.FieldDef.Builder ( FieldType.EXACT , name ) ; }
public java.lang.String getPluginName ( java.nio.file.Path srcPath ) { java.lang.String name = srcPath.getFileName ( ) . toString ( ) ; return name.substring ( 0 , ( ( name.length ( ) ) - ( com.googlesource.gerrit.plugins.cookbook.pluginprovider.HelloSshPluginProvider.SSH_EXT.length ( ) ) ) ) ; }
public void set ( F1 field1 , V value ) { BucketedCallback < V > . ValueGauge cell = com.google.gerrit.metrics.dropwizard.CallbackMetricImpl1.Impl1.getOrCreate ( field1 ) ; cell.value = value ; cell.set = true ; }
protected boolean onSave ( org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { saveConfig ( ProjectConfig.PROJECT_CONFIG , cfg ) ; saveGroupList ( ) ; return true ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision , publish , deleteRevision , deleteChange ) ; } }
private java.lang.String urlEdit2 ( ) { return ( "/changes/" + ( change2.getChangeId ( ) ) ) + "/edit/" ; }
private static com.google.gerrit.client.rpc.RestApi call ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String commit , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "revisions" ) . id ( commit ) . view ( action ) ; }
public final boolean siteHasUsernames ( ) { if ( ( ( isCustomExtension ( ) ) && ( ( httpPasswordUrl ( ) ) != null ) ) && ( ! ( canEdit ( AccountFieldName.USER_NAME ) ) ) ) { return false ; } return true ; }
public void isEnabledForSingleRef ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + ( " ref = refs/heads/anyref\n" + " blockedFileExtension = jar" ) ) ) ; com.google.common.truth.Truth.assertThat ( config.isEnabledForRef ( projectName , "refs/heads/anyref" , "blockedFileExtension" ) ) . isTrue ( ) ; }
public void createMergeChange_Conflicts ( ) throws java.lang.Exception { changeInTwoBranches ( "branchA" , "shared.txt" , "branchB" , "shared.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "branchA" , "branchB" , "" ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.RestApiException.class , "merge conflict" ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.sql.Timestamp o ) { sb.append ( '"' ) ; sb.append ( com.google.gwtjsonrpc.client.JavaSqlTimestamp_JsonSerializer.toString ( o ) ) ; sb.append ( '"' ) ; }
public void nonexistentEmail ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.UnprocessableEntityException.class ) ; exception.expectMessage ( "cannot find account doesnotexist@invalid.com" ) ; com.google.gerrit.extensions.api.config.AccessCheckInput in = new com.google.gerrit.extensions.api.config.AccessCheckInput ( ) ; in.account = "doesnotexist@invalid.com" ; in.permission = "rebase" ; in.ref = "refs/heads/master" ; gApi.projects ( ) . name ( normalProject.get ( ) ) . checkAccess ( in ) ; }
public void setNew_MethodNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = "newUsername" ; adminRestSession.put ( ( ( "/accounts/" + ( admin.username ) ) + "/username" ) , in ) . assertMethodNotAllowed ( ) ; }
public void setAuthorNameText ( final java.lang.String authorEmail , final java.lang.String nameText ) { header.setWidget ( 0 , 0 , new com.google.gerrit.client.AvatarImage ( authorEmail , 26 ) ) ; header.setText ( 0 , 1 , nameText ) ; }
static java.lang.String editRefPrefix ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { return java.lang.String.format ( "%s/edit-%d/" , com.google.gerrit.reviewdb.client.RefNames.refsUsers ( accountId ) , changeId.get ( ) ) ; }
public org.scribe.model.Verb getAccessTokenVerb ( ) { return org.scribe.model.Verb.POST ; }
public void execute ( ) { editArea.setFocus ( true ) ; if ( len > 0 ) { editArea.setCursorPos ( len ) ; } }
public void check ( com.google.gerrit.server.permissions.RefPermission perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( ( perm.describeForException ( ) ) + " not permitted for " ) + ( getRefName ( ) ) ) ) ; } }
public synchronized com.google.gerrit.git.WorkQueue.Executor getDefaultQueue ( ) { if ( ( defaultQueue ) == null ) { defaultQueue = createQueue ( 1 , "WorkQueue" ) ; } return defaultQueue ; }
protected void configure ( ) { bind ( com.google.gerrit.server.schema.DataSourceType.class ) . toInstance ( dst ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { if ( getCurrentUser ( ) . equals ( who ) ) { return this ; } return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , changeDataFactory , getRefControl ( ) . forUser ( who ) , notes ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( formatter , project , resource , revId , metaConfigRevId ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { save.setEnabled ( true ) ; }
private java.util.Collection < com.google.gerrit.server.index.account.AccountIndex > getWriteIndexes ( ) { if ( ( indexes ) != null ) { return indexes.getWriteIndexes ( ) ; } return ( index ) != null ? java.util.Collections.singleton ( index ) : com.google.common.collect.ImmutableSet.< com.google.gerrit.server.index.account.AccountIndex > of ( ) ; }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.reviewdb.Account.Id acct ) { return "/dashboard/" + ( acct.toString ( ) ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Link.toAccountGroup ( getRowItem ( row ) . getId ( ) ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply ( rsrc ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot retrieve group" , e ) ; } }
private java.lang.String urlEditFile ( ) { return ( ( urlEdit ( ) ) + "/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
com.googlesrouce.gerrit.plugins.github.git.GitClone create ( @ com.google.inject.assistedinject.Assisted ( value = "organisation" ) java.lang.String organisation , @ com.google.inject.assistedinject.Assisted ( value = "name" ) java.lang.String repository , @ com.google.inject.assistedinject.Assisted ( value = "description" ) java.lang.String description , @ com.google.inject.assistedinject.Assisted ( value = "username" ) java.lang.String username ) ;
public void setTitleText ( final java.lang.String text ) { com.google.gwt.user.client.DOM.setInnerText ( headerText , text ) ; }
private boolean canUnignore ( com.google.gerrit.server.change.ChangeResource rsrc ) { return ( ! ( rsrc.isUserOwner ( ) ) ) && ( isIgnored ( rsrc ) ) ; }
public java.lang.String getCookie ( com.gitblit.models.UserModel model ) { return model.cookie ; }
public void setName ( java.lang.String name ) { this . name = name ; }
void setUpBlameIconA ( net.codemirror.lib.CodeMirror cm , boolean isBase , com.google.gerrit.reviewdb.client.PatchSet.Id rev , java.lang.String path ) { patchSetSelectBoxA.setUpBlame ( cm , isBase , rev , path ) ; }
public void addEventListener ( com.google.gerrit.common.EventListener listener , com.google.gerrit.server.CurrentUser user ) ;
public < K , V > com.google.common.cache.Cache < K , V > build ( com.google.gerrit.server.cache.CacheBinding < K , V > def ) { return com.github.benmanes.caffeine.guava.CaffeinatedGuava.build ( create ( def , false ) ) ; }
public com.google.common.collect.ImmutableSortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { return com.google.common.collect.ImmutableSortedSet.of ( ) ; }
public void setNotify ( final com.google.gerrit.reviewdb.AccountProjectWatch.NotifyType type , final boolean v ) { switch ( type ) { case NEW_CHANGES : notifyNewChanges = v ; break ; case ALL_COMMENTS : notifyAllComments = v ; break ; case SUBMITTED_CHANGES : notifySubmittedChanges = v ; break ; } }
public Project.NameKey getProjectNameKey ( ) { return null ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId ) ;
public com.google.gerrit.server.update.BatchUpdate addOp ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.server.update.BatchUpdateOp op ) { com.google.common.base.Preconditions.checkArgument ( ( ! ( op instanceof com.google.gerrit.server.update.InsertChangeOp ) ) , "use insertChange" ) ; com.google.common.base.Preconditions.checkNotNull ( op ) ; ops.put ( id , op ) ; return this ; }
private static PatchSet.Id toPsId ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String psIdStr ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , ( psIdStr.equals ( "edit" ) ? 0 : java.lang.Integer.parseInt ( psIdStr ) ) ) ; }
abstract boolean isSideBySide ( ) ;
protected org.eclipse.jgit.lfs.server.LargeFileRepository getRepository ( ) { return repository ; }
public void resetToDefaults ( ) { defaultContext = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; copySelfOnEmail = false ; downloadUrl = null ; downloadCommand = null ; }
private void mustBeInsideTable ( org.pegdown.ast.Node node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; luceneConfig.setInt ( "index" , "lucene" , "testVersion" , 14 ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig ) ) ; }
private boolean canRunReceivePack ( ) { for ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group : receiveGroups ) { if ( match ( group ) ) { return true ; } } return false ; }
private void grant ( com.google.gerrit.reviewdb.Project.NameKey project , com.google.gerrit.reviewdb.ApprovalCategory.Id categoryId , com.google.gerrit.reviewdb.AccountGroup.UUID group , java.lang.String ref , int maxValue ) { grant ( project , categoryId , group , ref , maxValue , maxValue ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , branch , null , null ) ; }
protected static java.lang.String textFooterForChange ( int changeNumber , java.lang.String timestamp ) { return ( ( ( ( ( ( "Gerrit-Change-Number: " + changeNumber ) + "\n" ) + "Gerrit-PatchSet: 1\n" ) + "Gerrit-MessageType: comment\n" ) + "Gerrit-Comment-Date: " ) + timestamp ) + "\n" ; }
com.google.gerrit.server.change.CommentJson setFillAccounts ( boolean fillAccounts ) { this . fillAccounts = fillAccounts ; return this ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { addRight.setEnabled ( true ) ; nameTxt.setText ( "" ) ; referenceTxt.setText ( "" ) ; display ( result ) ; }
public java.util.List < org.eclipse.jgit.dircache.DirCacheEditor.PathEdit > getPathEdits ( org.eclipse.jgit.lib.Repository repository , org.eclipse.jgit.revwalk.RevCommit baseCommit ) { org.eclipse.jgit.dircache.DirCacheEditor.PathEdit changeContentEdit = new com.google.gerrit.server.edit.tree.ChangeFileContentModification.ChangeContent ( filePath , newContent , repository ) ; return java.util.Collections.singletonList ( changeContentEdit ) ; }
public int run ( ) throws java.lang.Exception { com.google.gerrit.server.ssh.GerritSshDaemon.startSshd ( ) ; return never ( ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.changes.ChangeInfo item ) { return item.legacyId ( ) ; }
public final native java.lang.String replyTooltip ( ) ;
public void testLinkify_TrailingComma ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A http://go.here/, B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( ( "A <a href=\"http://go.here/\" target=\"_blank\" rel=\"nofollow\"" + ">http://go.here/</a>, B" ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; com.google.gerrit.client.Gerrit.doSignIn ( com.google.gwt.user.client.History.getToken ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.ChangeResource > list ( ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void copyStoredValues ( com.google.gerrit.rules.PrologEnvironment child ) { storedValues.putAll ( child.storedValues ) ; setCleanup ( child.cleanup ) ; }
protected void preRun ( ) throws com.google.gerrit.server.ssh.Failure { super . preRun ( ) ; db = openReviewDb ( ) ; }
boolean yesno ( boolean defaultValue , java.lang.String message ) ;
public com.google.gerrit.server.account.GroupMembership getEffectiveGroups ( ) { return com.google.gerrit.server.account.GroupMembership.EMPTY ; }
public static java.lang.String getSecureStoreClassName ( final java.nio.file.Path sitePath ) { if ( sitePath != null ) { return com.google.gerrit.server.config.GerritServerConfigModule.getSecureStoreFromGerritConfig ( sitePath ) ; } java.lang.String secureStoreProperty = java.lang.System.getProperty ( "gerrit.secure_store_class" ) ; return com.google.gerrit.server.config.GerritServerConfigModule.nullToDefault ( secureStoreProperty ) ; }
public void flush ( ) { synchronized ( byAccount ) { byAccount.clear ( ) ; } synchronized ( this ) { trustedIds = null ; } }
void finish ( ) { id = com.google.gerrit.server.util.Url.encode ( name ) ; }
com.google.gerrit.server.change.ChangeInserter create ( org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk revWalk , com.google.gerrit.server.project.ProjectControl ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit rc ) ;
public static com.google.gerrit.server.index.FieldDef.Builder < java.sql.Timestamp > timestamp ( java.lang.String name ) { return new com.google.gerrit.server.index.FieldDef.Builder ( FieldType.TIMESTAMP , name ) ; }
public void markReady ( boolean ready ) throws java.io.IOException { openIndex.markReady ( ready ) ; }
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; manager.start ( ) ; }
void setStartSide ( com.google.gerrit.client.diff.DisplaySide startSide ) { this . startSide = startSide ; }
public static void capabilities ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.config.CapabilityInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/config/server/capabilities/" ) . get ( cb ) ; }
protected com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) { final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call = new com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall ( session.get ( ) , req , rsp ) ; com.google.gerrit.httpd.rpc.GerritJsonServlet.currentCall.set ( call ) ; return call ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput createRobotCommentInput ( ) { com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = createRobotCommentInputWithMandatoryFields ( ) ; in.url = "http://www.happy-robot.com" ; in.properties = new java.util.HashMap < > ( ) ; in.properties.put ( "key1" , "value1" ) ; in.properties.put ( "key2" , "value2" ) ; return in ; }
void setOpen ( boolean open ) { com.google.gwt.user.client.ui.UIObject.setVisible ( summary , ( ! open ) ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( p_view , open ) ; super . setOpen ( open ) ; }
public int compare ( final com.google.gerrit.client.reviewdb.PatchSetApproval a , final com.google.gerrit.client.reviewdb.PatchSetApproval b ) { return a.getGranted ( ) . compareTo ( b.getGranted ( ) ) ; }
public void stop ( ) { running = false ; int discarded = config.shutdown ( ) ; if ( discarded > 0 ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn ( java.lang.String.format ( "Cancelled %d replication events during shutdown" , discarded ) ) ; } }
private com.google.gerrit.server.diff.PatchList listFor ( com.google.gerrit.server.diff.PatchListKey key ) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return patchListCache.get ( key , notes.getProjectName ( ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? executor.submit ( indexTask ( cd ) ) : com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public static com.google.gwt.event.shared.HandlerRegistration addRpcStartHandler ( com.google.gwtjsonrpc.client.RpcStartHandler h ) { return com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.addHandler ( com.google.gwtjsonrpc.client.RpcStartEvent.getType ( ) , h ) ; }
public boolean canConnect ( com.google.gerrit.sshd.Type type , org.apache.sshd.common.util.net.SshdSocketAddress address , org.apache.sshd.common.session.Session session ) { return false ; }
public void testLinkify_Parens1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A (http://go.here/) B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( "<p>A (<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>) B</p>" ) ; }
private static int checkLimit ( int limit , java.lang.String name ) { if ( limit == 0 ) { return java.lang.Integer.MAX_VALUE ; } com.google.common.base.Preconditions.checkArgument ( ( limit > 0 ) , "%s must be positive: %s" , name , limit ) ; return limit ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = com.google.gerrit.testing.NoteDbMode.newNotesMigrationFromEnv ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { event.preventDefault ( ) ; password.selectAll ( ) ; password.setFocus ( true ) ; } }
static void unmarkPrivate ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.unmarkPrivate ( project.get ( ) , id.get ( ) , com.google.gerrit.client.change.ChangeActions.cs ( project , id , draftButtons ) ) ; }
public boolean match ( java.lang.String ref , com.google.gerrit.server.CurrentUser user ) { return pattern.matcher ( ref ) . matches ( ) ; }
void newDraftOnGutterClick ( net.codemirror.lib.CodeMirror cm , java.lang.String gutterClass , int line ) { if ( ! ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ) { signInCallback ( cm ) . run ( ) ; } else { insertNewDraft ( cm.side ( ) , line ) ; } }
public synchronized void schedule ( int idx , com.googlesource.gerrit.plugins.github.git.GitJob pullRequestImportJob ) { jobs.put ( idx , pullRequestImportJob ) ; executor.exec ( pullRequestImportJob ) ; }
private synchronized com.google.gitiles.Linkifier linkifier ( ) { if ( ( linkifier ) == null ) { com.google.common.base.Preconditions.checkState ( ( ( urls ) != null ) , "GitilesUrls not yet set" ) ; linkifier = new com.google.gitiles.Linkifier ( urls ) ; } return linkifier ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res , java.lang.String contentType ) throws java.io.IOException { setApiHeaders ( res , contentType ) ; return res.getWriter ( ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return canPerform ( Permission.SUBMIT ) ; }
void addReplyBox ( ) { getCommentManager ( ) . addDraftBox ( getCm ( ) . side ( ) , com.google.gerrit.client.changes.CommentInfo.createReply ( comment ) ) . setEdit ( true ) ; }
protected final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers ( com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch watch = new com.google.gerrit.server.mail.ProjectWatch ( args , project , projectState , changeData ) ; return watch.getWatchers ( type ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box ) { getPanelFromSide ( box.getCm ( ) . side ( ) ) . addFileComment ( box ) ; }
com.google.gerrit.server.git.EmailMerge create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id submitter , com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notifyHandling ) ;
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = newChangeData ( db , project , changeId ) ; index ( cd ) ; com.google.gerrit.server.index.change.ChangeIndexer.autoReindexIfStale ( cd ) ; }
public java.util.List < com.googlesource.gerrit.plugins.github.git.GHContent > getDirectoryContent ( java.lang.String path ) throws java.io.IOException { return ghRepository.getDirectoryContent ( path ) ; }
public java.util.Map < java.lang.String , java.util.Map > getBranches ( ) { return ( ( java.util.Map < java.lang.String , java.util.Map > ) ( config.getOrDefault ( "branches" , java.util.Collections.emptyMap ( ) ) ) ) ; }
public static java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > tryParse ( java.lang.String str ) { try { return java.util.Optional.of ( new com.google.gerrit.reviewdb.client.Account.Id ( java.lang.Integer.parseInt ( str ) ) ) ; } catch ( java.lang.NumberFormatException e ) { return java.util.Optional.empty ( ) ; } }
private boolean hasMeta ( com.google.gerrit.common.data.PatchScript script ) { return ! ( script.getPatchHeader ( ) . isEmpty ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.account.AccountInfo result ) { cb.onSuccess ( com.google.gerrit.client.rpc.Natives.arrayOf ( result ) ) ; }
public void listOneGroupMember ( ) throws java.io.IOException { org.junit.Assert.assertEquals ( GET_ONE ( "/groups/Administrators/members/admin" ) . name , admin.fullName ) ; }
public void submitToEmptyRepo ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( ) ; submit ( change.getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( getRemoteHead ( ) . getId ( ) ) . isEqualTo ( change.getCommit ( ) ) ; }
public void visit ( org.pegdown.ast.TableRowNode node ) { mustBeInsideTable ( node ) ; table.startRow ( ) ; wrapChildren ( "tr" , node ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.server.ChangeListServiceImpl ( ) ; }
private void addReviewerToReviewableChangeInNoteDb ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; }
public void onBrowserEvent ( final com.google.gwt.user.client.Event event ) { if ( ( ( com.google.gwt.user.client.DOM.eventGetType ( event ) ) == ( com.google.gwt.user.client.Event.ONCLICK ) ) && ( com.google.gerrit.client.ui.LinkMenuItem.impl.handleAsClick ( event ) ) ) { com.google.gwt.user.client.DOM.eventPreventDefault ( event ) ; go ( ) ; } }
public void onCreateAccount ( final com.google.gerrit.server.account.AuthRequest who , final com.google.gerrit.reviewdb.Account account ) { java.lang.String name = who.getLocalUser ( ) ; com.google.gerrit.server.util.FutureUtil.waitFor ( usernameCache.putAsync ( name , account.getId ( ) ) ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; detailCache.refresh ( ) ; }
public boolean canForceUpdate ( ) { return ( ( canPushWithForce ( ) ) || ( canDelete ( ) ) ) && ( canWrite ( ) ) ; }
public final Change.Id legacyId ( ) { return new com.google.gerrit.reviewdb.client.Change.Id ( _number ( ) ) ; }
void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) { java.util.SortedMap < java.lang.Integer , com.google.gerrit.client.diff.CommentGroup > map = map ( side ) ; if ( ( map.get ( line ) ) == group ) { map.remove ( line ) ; } }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { getRepoView ( ) . getCommands ( ) . add ( cmd ) ; }
private com.google.gerrit.acceptance.GerritServer startImpl ( @ com.google.gerrit.common.Nullable com.google.inject.Module testSysModule ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( serverDesc , baseConfig , sitePaths.site_path , testSysModule ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return com.google.gerrit.server.project.FileResource.create ( repoManager , parent.getProjectState ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( parent.getRevision ( ) ) , id.get ( ) ) ; }
public int hashCode ( ) { return uuid.hashCode ( ) ; }
private void setClean ( boolean clean ) { save.setEnabled ( ( ! clean ) ) ; dirty.getStyle ( ) . setVisibility ( ( ! clean ? com.google.gwt.dom.client.Style.Visibility.VISIBLE : com.google.gwt.dom.client.Style.Visibility.HIDDEN ) ) ; }
public static void drop ( final com.google.gerrit.testutil.InMemoryDatabase db ) { if ( db != null ) { db.drop ( ) ; } }
public void deleteBranchByRestWithFullName ( ) throws java.lang.Exception { grantDelete ( ) ; assertDeleteByRestSucceeds ( testBranch , testBranch.get ( ) ) ; }
private static java.lang.String encoding ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.MoreObjects.firstNonNull ( req.getCharacterEncoding ( ) , java.nio.charset.StandardCharsets.UTF_8.name ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.gpg.testutil.TestKey in ) { return com.google.common.io.BaseEncoding.base16 ( ) . encode ( in.getPublicKey ( ) . getFingerprint ( ) ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id action ) { if ( action.canInheritFromWildProject ( ) ) { return com.google.gerrit.server.project.ProjectState.filter ( getInheritedRights ( ) , action ) ; } return java.util.Collections.emptyList ( ) ; }
private static native < T extends com.google.gwt.core.client.JavaScriptObject > T parseObject ( com.google.gwt.core.client.JavaScriptObject p , java.lang.String s ) ;
public void testEvictGroupsByIncludeOK ( ) throws java.lang.Exception { setupMocks ( Constants.GROUPS_BYINCLUDE , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.OK_RESPONSE , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.GROUPS_BYINCLUDE , org.mockito.Mockito.mock ( AccountGroup.UUID.class ) ) ) . isTrue ( ) ; }
public java.util.Optional < com.google.gerrit.server.account.AccountState > maybeGet ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { try { return byId.get ( accountId ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.account.AccountCacheImpl.log.warn ( ( "Cannot load AccountState for ID " + accountId ) , e ) ; return null ; } }
public java.util.Set < java.lang.String > getEmailAddresses ( ) { if ( ( emailAddresses ) == null ) { emailAddresses = getAccountState ( ) . getEmailAddresses ( ) ; } return emailAddresses ; }
public int getTaskId ( ) { return taskId ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , allUsersProvider , change ) ; }
public com.google.gerrit.extensions.api.changes.ChangeApi create ( com.google.gerrit.extensions.common.ChangeInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void setUseContentMerge ( final com.google.gerrit.reviewdb.client.Project.InheritedBoolean cm ) { useContentMerge = cm ; }
protected void configure ( ) { factory ( ReviewerResource.Factory.class ) ; factory ( AccountInfo.Loader.Factory.class ) ; factory ( EmailReviewComments.Factory.class ) ; factory ( ChangeInserter.Factory.class ) ; factory ( PatchSetInserter.Factory.class ) ; }
public void execute ( ) { com.google.gerrit.client.Gerrit.doSignIn ( null ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( server , admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project1.get ( ) ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project2.get ( ) ) ; session = new com.google.gerrit.acceptance.RestSession ( server , admin ) ; }
boolean isCurrent ( ) { return ( modified ) == ( com.google.gerrit.common.FileUtil.lastModified ( path ) ) ; }
public final java.lang.String getUrl ( java.lang.String project ) { return url ( ) . replaceAll ( "\\$\\{project\\}" , project ) ; }
public void refsDraftComments ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( accountId , changeId ) ) . isEqualTo ( "refs/draft-comments/23/1011123/67473" ) ; }
public final native java.lang.String inheritedValue ( ) ;
private void doList ( ) throws com.google.gerrit.sshd.commands.UnloggedFailure { for ( java.lang.String name : cacheNames ( ) ) { stderr.print ( name ) ; stderr.print ( '\n' ) ; } stderr.flush ( ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { saveButton.setEnabled ( false ) ; onSave ( ) ; }
protected final java.lang.String getConfiguredSecureStoreClass ( ) { return com.google.gerrit.server.config.GerritServerConfigModule.getSecureStoreClassName ( sitePath ) ; }
protected com.google.gson.GsonBuilder createGsonBuilder ( ) { final com.google.gson.GsonBuilder g = super . createGsonBuilder ( ) ; g.registerTypeAdapter ( org.spearce.jgit.diff.Edit.class , new com.google.gerrit.server.http.EditDeserializer ( ) ) ; return g ; }
private boolean isSuccessful ( org.apache.http.HttpResponse response ) { int sc = response.getStatusLine ( ) . getStatusCode ( ) ; return ( sc == ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ) || ( sc == ( javax.servlet.http.HttpServletResponse.SC_OK ) ) ; }
private void checkValidAnnotations ( ) { if ( ( ( configs ( ) ) != null ) && ( ( config ( ) ) != null ) ) { throw new java.lang.IllegalStateException ( "Use either @GerritConfigs or @GerritConfig not both" ) ; } }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; }
private void display ( final com.google.gerrit.client.data.UnifiedPatchDetail detail ) { diffTable.setPatchKey ( detail.getPatch ( ) . getKey ( ) ) ; diffTable.setAccountInfoCache ( detail.getAccounts ( ) ) ; diffTable.display ( detail.getLines ( ) ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ListBranchesResult result ) { enableForm ( true ) ; display ( result.getBranches ( ) ) ; addPanel.setVisible ( result.getCanAdd ( ) ) ; }
protected void configureServlets ( ) { serveRegex ( "/index/\\d+$" ) . with ( com.ericsson.gerrit.plugins.highavailability.SyncIndexRestApiServlet.class ) ; }
public void run ( ) { lastFocused = cm ; updateActiveLine ( cm ) . run ( ) ; }
public void put ( com.google.gerrit.server.account.AccountInfo info ) { if ( detailed ) { info._accountId = info._id.get ( ) ; } provided.add ( info ) ; }
abstract boolean isModified ( com.google.gerrit.prettify.common.EditList.Hunk hunk ) ;
protected void migrateData ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws java.sql.SQLException { try ( java.sql.Statement stmt = newStatement ( db ) ) { stmt.execute ( "CREATE INDEX patch_sets_byRevision ON patch_sets (revision)" ) ; } }
public void testEvictCacheOK ( ) throws java.lang.Exception { setupMocks ( Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON2 , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.OK_RESPONSE , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.DEFAULT , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON ) ) . isTrue ( ) ; }
private int getPermittedLimit ( ) { if ( enforceVisibility ) { return userProvider.get ( ) . getCapabilities ( ) . getRange ( GlobalCapability.QUERY_LIMIT ) . getMax ( ) ; } return java.lang.Integer.MAX_VALUE ; }
public void generatePreparedStatementSet ( final com.google.gwtorm.server.CodeGenSupport cgs ) { cgs.pushSqlHandle ( ) ; cgs.pushColumnIndex ( ) ; cgs.pushFieldValue ( ) ; cgs.invokePreparedStatementSet ( getJavaSqlTypeAlias ( ) ) ; }
public void onSuccess ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > result ) { branches = com.google.gerrit.client.rpc.Natives.asList ( result ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public void commentOnReviewableChangeByOwnerNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public void selectHttpUrl ( ) throws java.io.IOException , java.net.URISyntaxException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.transport.CredentialsProvider.setDefault ( new org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider ( admin.username , admin.httpPassword ) ) ; selectProtocol ( Protocol.HTTP ) ; }
public static java.lang.String mediumFormat ( final java.util.Date dt ) { return dt != null ? com.google.gerrit.client.FormatUtil.dtfmt.format ( dt ) : "" ; }
public void testDeleteOneExisting ( ) throws com.google.gwtorm.server.OrmException , java.sql.SQLException { java.sql.PreparedStatement delete = stubStatementWithUpdateCounts ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 1 ) ; createClassUnderTest ( ) . delete ( oneRow ) ; com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly ( delete ) ; }
public void testChangeDeletedFromIndexOK ( ) throws java.lang.Exception { setUpMocksForIndex ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.DELETE_OP , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.EMPTY_MSG , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( eventForwarder.deleteChangeFromIndex ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.CHANGE_NUMBER ) ) . isTrue ( ) ; }
public void deleteBranchByProjectOwnerForcePushBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockForcePush ( ) ; setApiUser ( user ) ; assertDeleteForbidden ( testBranch ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Dispatcher.toAccountGroup ( getRowItem ( row ) . getId ( ) ) ) ; }
public void addMembers ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , java.util.Collection < ? extends com.google.gerrit.reviewdb.client.Account.Id > newMemberIds ) throws com.google.gwtorm.server.OrmException , java.io.IOException { groupsUpdateProvider.get ( ) . addGroupMembers ( db.get ( ) , groupUuid , com.google.common.collect.ImmutableSet.copyOf ( newMemberIds ) ) ; }
public void setGranted ( java.util.Date when ) { if ( when instanceof java.sql.Timestamp ) { granted = ( ( java.sql.Timestamp ) ( when ) ) ; } else { granted = new java.sql.Timestamp ( when.getTime ( ) ) ; } }
private void fail ( java.lang.Throwable t ) { com.google.gerrit.index.SiteIndexer.log.error ( ( "Failed to index " + ( desc ) ) , t ) ; ok.set ( false ) ; }
private static com.google.gson.GsonBuilder gerritDefaultGsonBuilder ( ) { final com.google.gson.GsonBuilder g = defaultGsonBuilder ( ) ; g.registerTypeAdapter ( org.eclipse.jgit.diff.Edit.class , new com.google.gerrit.httpd.rpc.EditDeserializer ( ) ) ; return g ; }
com.google.gerrit.server.notedb.RobotCommentUpdate create ( com.google.gerrit.reviewdb.client.Change change , @ com.google.inject.assistedinject.Assisted ( value = "effective" ) com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.inject.assistedinject.Assisted ( value = "real" ) com.google.gerrit.reviewdb.client.Account.Id realAccountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onCollapseAll ( null ) ; }
public void commentOnReviewableChangeByOwnerNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; review ( sc.owner , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; }
public void setReplyLabel ( java.lang.String r ) { replyLabel = r ; }
public org.eclipse.jgit.lib.ObjectId getNewId ( ) { refreshObjectIds ( ) ; return newId ; }
public void createBranch_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; assertCreateFails ( testBranch , com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
protected void loadNext ( ) { com.google.gerrit.client.changes.ChangeList.next ( query , pageSize , pos , loadCallback ( ) ) ; }
public com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > approvalsMap ( ) throws com.google.gwtorm.server.OrmException { if ( ( allApprovals ) == null ) { allApprovals = approvalsUtil.byChange ( db , notes ( ) ) ; } return allApprovals ; }
com.google.gerrit.server.account.AccountState getEvenIfMissing ( com.google.gerrit.reviewdb.client.Account.Id accountId ) ;
public static java.lang.String toChangeQuery ( final java.lang.String query ) { return ( ( "q," + ( com.google.gwtorm.client.KeyUtil.encode ( query ) ) ) + "," ) + ( com.google.gerrit.common.PageLinks.TOP ) ; }
public void suggestReviewersNoResult3 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSet > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSet.Id > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.reviewdb.server.DisabledChangesReviewDbWrapper.MSG ) ; }
public boolean containsHeader ( java.lang.String name ) { return headers.containsKey ( name.toLowerCase ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { generation = g ; save.setEnabled ( ( ! ( cm.isClean ( g ) ) ) ) ; }
public void run ( ) throws java.lang.Exception { impl.display ( stdout ) ; }
public void setUseSignedOffBy ( final com.google.gerrit.extensions.common.InheritableBoolean sbo ) { useSignedOffBy = sbo ; }
public GroupDescription.Basic getGroup ( ) { return control.getGroup ( ) ; }
public static com.google.gerrit.server.index.IndexModule.IndexType getIndexType ( com.google.inject.Injector injector ) { org.eclipse.jgit.lib.Config cfg = injector.getInstance ( com.google.inject.Key.get ( org.eclipse.jgit.lib.Config.class , com.google.gerrit.server.config.GerritServerConfig.class ) ) ; return cfg.getEnum ( "index" , null , "type" , com.google.gerrit.server.index.IndexModule.IndexType.SQL ) ; }
com.google.gerrit.httpd.raw.PolyGerritUiServlet getPolyGerritUiServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.PolyGerritUiServlet ( cache , polyGerritBasePath ( ) ) ; }
private void configureWebsessionsSection ( ) { ui.header ( "Websession section" ) ; promptAndSetString ( "Cleanup interval" , com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION , com.ericsson.gerrit.plugins.highavailability.Configuration.CLEANUP_INTERVAL_KEY , com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLEANUP_INTERVAL ) ; }
public void postRun ( com.google.inject.Injector injector ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.api.InitStep step : steps ) { if ( ( step instanceof com.google.gerrit.pgm.init.InitPlugins ) && ( flags.skipPlugins ) ) { continue ; } injector.injectMembers ( step ) ; step.postRun ( ) ; } }
public void confirmForOtherUser_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = emailTokenVerifier.encode ( user.getId ( ) , "new.mail@example.com" ) ; adminRestSession.put ( "/config/server/email.confirm" , in ) . assertUnprocessableEntity ( ) ; }
public com.google.gerrit.server.git.ProjectConfig getConfig ( ) { return config ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { scriptSettings.setContext ( com.google.gerrit.client.reviewdb.AccountGeneralPreferences.WHOLE_FILE_CONTEXT ) ; } else { initContextLines ( ) ; } refresh ( false ) ; }
public void testCreateGroupWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( server , user ) . put ( "/groups/newGroup" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
public void upsert ( final java.lang.Iterable < T > instances ) throws com.google.gwtorm.server.OrmException { java.util.Collection < T > inserts = attemptUpdate ( instances ) ; if ( inserts != null ) { insert ( inserts ) ; } }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { return create ( refControl , notesFactory.create ( db , project , changeId ) ) ; }
private void display ( final java.util.List < com.google.gerrit.reviewdb.Branch > listBranches ) { branches.display ( listBranches ) ; delBranch.setVisible ( branches.hasBranchCanDelete ( ) ) ; }
com.google.gerrit.server.notedb.ChangeDraftUpdate create ( com.google.gerrit.server.notedb.ChangeNotes notes , @ com.google.inject.assistedinject.Assisted ( value = "effective" ) com.google.gerrit.reviewdb.client.Account.Id accountId , @ com.google.inject.assistedinject.Assisted ( value = "real" ) com.google.gerrit.reviewdb.client.Account.Id realAccountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when ) ;
protected java.io.File path ( java.io.File etc , com.google.gerrit.httpd.GitWebConfig gitWebConfig ) { return gitWebConfig.getGitwebCSS ( ) ; }
public void setAssignee ( com.google.gerrit.reviewdb.client.Account.Id assignee ) { com.google.common.base.Preconditions.checkArgument ( ( assignee != null ) , "use removeAssignee" ) ; this . assignee = java.util.Optional.of ( assignee ) ; }
private final native java.sql.Timestamp _getCts ( ) ;
void onRebase ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.RebaseAction.call ( rebase , project , changeInfo.branch ( ) , changeId , revision ) ; }
protected com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.SingleListChangeInfo > loadCallback ( ) { return new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.data.SingleListChangeInfo > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; } } ; }
public void performAction ( final java.lang.String issueKey , final java.lang.String actionName ) throws java.io.IOException { execute ( ( ) -> { log.debug ( "Performing action {} on issue {}" , actionName , issueKey ) ; doPerformAction ( issueKey , actionName ) ; return issueKey ; } ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.replace ( cd ) ; } }
protected void onInitUI ( ) { super . onInitUI ( ) ; add ( new com.google.gerrit.client.ui.SmallHeading ( AdminConstants.I.headingAuditLog ( ) ) ) ; auditEventTable = new com.google.gerrit.client.admin.AccountGroupAuditLogScreen.AuditEventTable ( ) ; add ( auditEventTable ) ; }
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { adminSession.delete ( urlEdit ( ) ) . assertNotFound ( ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.updateNumberOfPatchSets ( newPatchSet.getPatchSetId ( ) ) ; return change ; } else { return null ; } }
public abstract long interval ( ) ;
private static org.apache.lucene.document.Field.Store store ( com.google.gerrit.server.index.FieldDef < ? , ? > f ) { return f.isStored ( ) ? org.apache.lucene.document.Field.Store.YES : org.apache.lucene.document.Field.Store.NO ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( baseId , id , line ) : new com.google.gerrit.client.diff.SideBySide ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
public static void drop ( com.google.gerrit.testing.InMemoryDatabase db ) { if ( db != null ) { db.drop ( ) ; } }
public void testProjectNotFound ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection > sectionsToReturn = new java.util.HashMap < > ( ) ; sectionsToReturn.put ( "a" , new com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection ( "ssh://localhost/a" , "a" , "." ) ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expectedSubscriptions = java.util.Collections.emptySet ( ) ; execute ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "super-project" ) , "refs/heads/master" ) , sectionsToReturn , new java.util.HashMap < java.lang.String , java.lang.String > ( ) , expectedSubscriptions ) ; }
public com.google.gerrit.reviewdb.client.Change change ( ) throws com.google.gwtorm.server.OrmException { if ( ( ( change ) == null ) && ( lazyLoad ) ) { reloadChange ( ) ; } return change ; }
public static void main ( final java.lang.String [ ] argv ) throws java.lang.Exception { if ( Main.onSupportedJavaVersion ( ) ) { com.google.gerrit.launcher.GerritLauncher.main ( argv ) ; } else { java.lang.System.exit ( 1 ) ; } }
public void add ( com.google.gerrit.extensions.events.LifecycleListener listener ) { listeners.add ( com.google.inject.util.Providers.of ( listener ) ) ; }
private void initChannels ( ) { setChannelFactories ( ServerBuilder.DEFAULT_CHANNEL_FACTORIES ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return ( canPerform ( Permission.SUBMIT ) ) && ( canWrite ( ) ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "newProject" ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.AuthException.class ) ; }
public void setCanOverride ( boolean canOverride ) { this . canOverride = canOverride ; }
static org.eclipse.jgit.lib.Config parse ( org.eclipse.jgit.lib.Config base , com.google.gerrit.acceptance.GerritConfig annotation ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( base ) ; com.google.gerrit.acceptance.ConfigAnnotationParser.parseAnnotation ( cfg , annotation ) ; return cfg ; }
com.google.gerrit.client.diff.DraftBox addReplyBox ( ) { com.google.gerrit.client.diff.DraftBox box = parent.addDraftBox ( parent.createReply ( comment ) , getSide ( ) ) ; registerReplyBox ( box ) ; return box ; }
private com.google.gerrit.index.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.index.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return rewrite.rewrite ( in , opts ) ; }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction ( curr , result , path , style , editButton , replyButton ) ; edit.onEdit ( ) ; }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; diffTable.overview.refresh ( ) ; }
public com.google.gwt.event.shared.HandlerRegistration addOpenHandler ( final com.google.gwt.event.logical.shared.OpenHandler < com.google.gwt.user.client.ui.DisclosurePanel > h ) { return main.addOpenHandler ( h ) ; }
public boolean allowsEdit ( com.google.gerrit.reviewdb.client.Account.FieldName field ) { return ( field == ( com.google.gerrit.reviewdb.client.Account.FieldName.USER_NAME ) ) || ( editableAccountFields.contains ( field ) ) ; }
public T decode ( com.google.protobuf.CodedInputStream in ) { T obj = newInstance ( ) ; mergeFrom ( in , obj ) ; return obj ; }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , false , false , expectedStatus ) ; }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentlink" , getCommentLinkName ( ) , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.git.ChainedReceiveCommands cmds ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change , false , cmds ) . load ( ) ; }
private static dk.brics.automaton.RegExp toRegExp ( java.lang.String refPattern ) { if ( com.google.gerrit.server.project.RefControl.isRE ( refPattern ) ) { refPattern = refPattern.substring ( 1 ) ; } return new dk.brics.automaton.RegExp ( refPattern , dk.brics.automaton.RegExp.NONE ) ; }
private com.google.gerrit.server.project.ProjectData toProjectData ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey ( doc.getField ( com.google.gerrit.server.index.project.ProjectField.NAME.getName ( ) ) . stringValue ( ) ) ; return projectCache.get ( ) . get ( nameKey ) . toProjectData ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSign ( ) ; }
void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.ChangeEvent event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public int compare ( com.google.gerrit.client.changes.CommentInfo o1 , com.google.gerrit.client.changes.CommentInfo o2 ) { return o1.updated ( ) . compareTo ( o2.updated ( ) ) ; }
public com.google.gerrit.gpg.CheckResult checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key , int depth ) { return com.google.gerrit.gpg.CheckResult.ok ( ) ; }
public com.google.common.collect.ImmutableSet < java.lang.String > getHashtags ( ) { return com.google.common.collect.ImmutableSortedSet.copyOf ( hashtags ) ; }
protected void preDisplay ( com.google.gerrit.client.changes.ChangeList result ) { display ( result ) ; }
public static org.eclipse.jgit.revwalk.RevTree automerge ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit b , org.eclipse.jgit.merge.ThreeWayMergeStrategy mergeStrategy ) throws java.io.IOException { return com.google.gerrit.server.patch.PatchListLoader.automerge ( repo , rw , b , mergeStrategy , true ) ; }
public void copy ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { copy ( db , ctl , ps , java.util.Collections.< com.google.gerrit.reviewdb.client.PatchSetApproval > emptyList ( ) ) ; }
public boolean isIgnoreWhitespace ( ) { return ( diffPrefs.ignoreWhitespace ) != ( com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace.IGNORE_NONE ) ; }
public void gerritConfig ( final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.GerritConfig > callback ) { callback.onSuccess ( config.get ( ) ) ; }
com.google.gerrit.server.index.account.AccountIndexer getAccountIndexer ( com.google.gerrit.server.index.account.AccountIndexerImpl.Factory factory , com.google.gerrit.server.index.account.AccountIndexCollection indexes ) { return factory.create ( indexes ) ; }
private org.kohsuke.args4j.spi.OptionHandler findHandler ( java.lang.String name ) { if ( ( options ) == null ) { options = com.google.gerrit.util.cli.CmdLineParser.index ( parser.optionsList ) ; } return options.get ( name ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.config.CapabilityInfo > result ) { capabilityMap = result ; }
public void batchAbandon ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { batchAbandon ( project , user , controls , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
private org.eclipse.jgit.lib.Repository getRepository ( ) { try { return args.server.openRepository ( projectName ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException e ) { return null ; } }
private static final native com.google.gwt.core.client.JavaScriptObject projectAction ( java.lang.String id ) ;
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.ConfigInfo info ) { display ( info ) ; }
public void setLocalUser ( java.lang.String localUser ) { if ( externalId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT ) ) { externalId = ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT , localUser ) ; } }
public java.lang.String getLabel ( ) { return com.google.gerrit.common.data.Permission.extractLabel ( getName ( ) ) ; }
private final native void _setCts ( java.sql.Timestamp ts ) ;
public void visit ( org.commonmark.node.StrongEmphasis node ) { wrapChildren ( "strong" , node ) ; }
private void logRetry ( java.lang.String cause ) { com.ericsson.gerrit.plugins.highavailability.HttpClientProvider.log.debug ( ( ( ( "Retrying request to '" + ( cfg.getUrl ( ) ) ) + "' Cause: " ) + cause ) ) ; }
private java.util.Set < com.google.gerrit.reviewdb.client.Change.Status > status ( java.lang.String query ) throws com.google.gerrit.server.query.QueryParseException { return com.google.gerrit.server.index.change.ChangeIndexRewriter.getPossibleStatus ( parse ( query ) ) ; }
private org.eclipse.jgit.lib.ObjectId parseObjectId ( java.lang.String objIdStr , java.lang.String desc ) { try { return org.eclipse.jgit.lib.ObjectId.fromString ( objIdStr ) ; } catch ( java.lang.IllegalArgumentException e ) { problem ( java.lang.String.format ( "Invalid revision on %s: %s" , desc , objIdStr ) ) ; return null ; } }
public void listBranchesOfNonExistingProject_NotFound ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( "non-existing" ) . branches ( ) . get ( ) ; }
protected com.google.gerrit.sshd.SshScope.Context continuingContext ( com.google.gerrit.sshd.SshScope.Context ctx ) { return new com.google.gerrit.sshd.SshScope.Context ( ctx , ctx.getSession ( ) , ctx.getCommandLine ( ) ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) ;
protected void submit ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.SubmitInput input ) throws java.lang.Exception { submit ( changeId , input , null , null , true ) ; }
public Change.Id getId ( ) { return change.getId ( ) ; }
public com.google.gitiles.GitilesView.Builder setOldRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case DIFF : case LOG : this . oldRevision = revision ; return this ; default : throw new java.lang.IllegalStateException ( java.lang.String.format ( "cannot set old revision on %s view" , type ) ) ; } }
public boolean isMultiValued ( ) { return false ; }
public void run ( ) { openIndex.close ( ) ; }
public void evaluate ( ) throws java.lang.Throwable { boolean mem = ( description.getAnnotation ( com.google.gerrit.acceptance.UseLocalDisk.class ) ) == null ; beforeTest ( config ( description ) , mem ) ; base.evaluate ( ) ; afterTest ( ) ; }
public void onSignOut ( ) { super . onSignOut ( ) ; if ( ( starChange ) != null ) { starChange.setVisible ( false ) ; } }
com.google.gerrit.common.EventListener getEventListener ( ) ;
com.google.gerrit.server.mail.CommentSender create ( com.google.gerrit.reviewdb.client.Change.Id id ) ;
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( dbProvider , account ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
private net.sf.ehcache.constructs.blocking.SelfPopulatingCache startCacheSshKeys ( ) { final net.sf.ehcache.Cache dc = com.google.gerrit.server.GerritServer.cacheMgr.getCache ( "sshkeys" ) ; final net.sf.ehcache.constructs.blocking.SelfPopulatingCache r ; r = new net.sf.ehcache.constructs.blocking.SelfPopulatingCache ( dc , new com.google.gerrit.server.ssh.SshKeyCacheEntryFactory ( db ) ) ; com.google.gerrit.server.GerritServer.cacheMgr.replaceCacheWithDecoratedCache ( dc , r ) ; return r ; }
private static java.util.List < org.eclipse.jgit.diff.Edit > asList ( org.eclipse.jgit.diff.Edit [ ] l ) { return java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( l ) ) ; }
private void open ( java.lang.String path ) { hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toEditScreen ( project , new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , revision._number ( ) ) , path ) ) ; }
private boolean inProject ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Project project ) { if ( projectControl != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( project.getNameKey ( ) ) ; } return true ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toEditScreen ( revision , fileName , 0 ) ; }
public com.google.gerrit.server.patch.PatchListEntry get ( final java.lang.String fileName ) { final int index = search ( fileName ) ; return 0 <= index ? patches.get ( index ) : com.google.gerrit.server.patch.PatchListEntry.empty ( fileName ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return user ( ) . equals ( user ) ? this : forUser ( user ) . asForChange ( cd , db ) ; }
protected com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { return changeDataFactory.create ( db , project , psId.getParentKey ( ) ) . patchSet ( psId ) ; }
void addLabel ( final java.lang.String token ) { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote.parseWithEquals ( token ) ; com.google.gerrit.common.data.LabelType.checkName ( v.label ( ) ) ; customLabels.put ( v.label ( ) , v.value ( ) ) ; }
public final native void setCh ( int ch ) ;
public static void setBackground ( android.view.View view , android.graphics.drawable.Drawable drawable ) { view.setBackground ( drawable ) ; }
public static void putMessage ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String m , com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.editMessage ( project , id ) . put ( m , cb ) ; }
public java.util.Set < java.lang.String > getNames ( ) { return cfg.getNames ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName , true ) ; }
public void consume ( ) throws java.io.IOException , java.lang.IllegalStateException { java.io.Reader reader = getReader ( ) ; if ( reader != null ) { while ( ( reader.read ( ) ) != ( - 1 ) ) { } } }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , "" , 0 ) ; }
public java.lang.String commitMessage ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitMessage ) == null ) { if ( ! ( loadCommitData ( ) ) ) { return null ; } } return commitMessage ; }
protected static com.google.gerrit.server.group.db.AuditLogFormatter getAuditLogFormatter ( ) { return com.google.gerrit.server.group.db.AuditLogFormatter.create ( com.google.gerrit.server.group.db.AbstractGroupTest :: getAccount , com.google.gerrit.server.group.db.AbstractGroupTest :: getGroup , com.google.gerrit.server.group.db.AbstractGroupTest.SERVER_ID ) ; }
public static com.google.gerrit.client.GitwebLink getGitwebLink ( ) { com.google.gerrit.common.data.GitwebConfig gw = com.google.gerrit.client.Gerrit.getConfig ( ) . getGitwebLink ( ) ; return ( gw != null ) && ( ( gw.type ) != null ) ? new com.google.gerrit.client.GitwebLink ( gw ) : null ; }
private boolean isStarred ( final com.google.gerrit.reviewdb.client.Change ac ) { return control.getCurrentUser ( ) . getStarredChanges ( ) . contains ( ac.getId ( ) ) ; }
private java.lang.String getImageUrl ( ) { return ( "plugins/" + ( pluginName ) ) + "/static/readme.png" ; }
private boolean canUpload ( ) { return projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH ) ; }
public static com.google.gerrit.client.reviewdb.Patch.Key parse ( final java.lang.String str ) { final com.google.gerrit.client.reviewdb.Patch.Key r = new com.google.gerrit.client.reviewdb.Patch.Key ( ) ; r.fromString ( str ) ; return r ; }
private boolean canPerform ( java.lang.String permissionName , boolean isChangeOwner ) { return doCanPerform ( permissionName , isChangeOwner , false ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box ) { diffTable.onRemoveDraftBox ( box ) ; }
public void testGetComment ( ) throws java.lang.Exception { assertGetComment ( revRes1 , plc1 , plc1.getKey ( ) . get ( ) ) ; assertGetComment ( revRes1 , null , "BadComment" ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( ) . get ( uuid ) ; }
public com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Change.Id , java.lang.String > getProblems ( ) { return com.google.common.collect.ImmutableMultimap.copyOf ( problems ) ; }
public static void commitWithLinks ( @ com.google.gerrit.common.Nullable java.lang.String project , int changeId , java.lang.String revision , com.google.gerrit.client.rpc.CallbackGroup.Callback < com.google.gerrit.client.info.ChangeInfo.CommitInfo > callback ) { com.google.gerrit.client.changes.ChangeApi.revision ( project , changeId , revision ) . view ( "commit" ) . addParameterTrue ( "links" ) . get ( callback ) ; }
public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) { return fileApi.create ( files.parse ( revision , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ) ; }
private void asScript ( final org.w3c.dom.Element scriptNode ) { scriptNode.setAttribute ( "type" , "text/javascript" ) ; scriptNode.setAttribute ( "language" , "javascript" ) ; }
public java.nio.file.Path getBasePath ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return basePath ; }
public boolean isValid ( ) { return ( valid ) && ( id.isValid ( ) ) ; }
com.google.gitiles.CommitSoyData setLinkifier ( @ javax.annotation.Nullable com.google.gitiles.Linkifier linkifier ) { this . linkifier = linkifier ; return this ; }
public static com.google.gerrit.client.rpc.RestApi detail ( @ com.google.gerrit.common.Nullable java.lang.String project , int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( project , id , "detail" ) ; }
public static void updateImpl ( final java.lang.String token ) { com.google.gwt.user.client.History.newItem ( token , false ) ; com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( token ) ; }
public void cancel ( ) { synchronized ( this ) { final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( context ) ; try { onExit ( com.google.gerrit.sshd.BaseCommand.STATUS_CANCEL ) ; } finally { com.google.gerrit.sshd.SshScope.set ( old ) ; } } }
private void fastForwardTagToNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , true , false , expectedStatus ) ; }
public void testEndsOnNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 ) , iter.advance ( 4 ) ) ; }
private java.lang.String group ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
java.lang.Iterable < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > createIterable ( com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data ... data ) { java.util.List < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > list = java.util.Arrays.asList ( data ) ; return new com.google.gwtorm.server.ListResultSet ( list ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
private static com.google.gerrit.client.rpc.RestApi call ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( action ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { fileList.display ( result ) ; }
protected java.util.concurrent.Callable < java.lang.Void > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return new com.google.gerrit.server.index.ChangeIndexerImpl.Task ( cd , true ) ; }
public static PatchSet.Id nextPatchSetId ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id.getParentKey ( ) , ( ( id.get ( ) ) + 1 ) ) ; }
private com.google.gerrit.extensions.api.changes.ChangeApi changeApi ( com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.extensions.restapi.RestApiException { return gApi.changes ( ) . id ( patchSet.getId ( ) . getParentKey ( ) . get ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return queryProvider.get ( ) . byTopicOpen ( topic ) ; }
final native void message ( java.lang.String m ) ;
private final native void setLine ( int line ) ;
private void tearDown ( ) throws java.lang.Exception { stat.execute ( ( "DROP TABLE " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) ) ; store.stop ( ) ; }
public void createProjectFoo ( ) throws java.lang.Exception { java.lang.String name = name ( "foo" ) ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( name ) . get ( ) . name ) ; }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err ) { return typeError ( err , null ) ; }
private void setNew ( com.google.gerrit.server.git.CodeReviewCommit c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c.notes ( ) , msg , true ) ; }
public void testEntityNbsp ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.nbsp ( ) ) ; org.junit.Assert.assertEquals ( "&nbsp;" , b.asString ( ) ) ; }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content ) ; content = null ; }
private static void assertRef ( int changeId , java.lang.String refName ) { com.google.common.truth.Truth.assertThat ( Change.Id.fromRef ( refName ) ) . isEqualTo ( new com.google.gerrit.reviewdb.client.Change.Id ( changeId ) ) ; }
public static com.criteo.gerrit.plugins.automerge.Change from ( com.google.gerrit.server.data.ChangeAttribute changeAttribute ) { return new com.criteo.gerrit.plugins.automerge.Change ( changeAttribute.project , changeAttribute.number , changeAttribute.id , changeAttribute.topic , changeAttribute.branch ) ; }
public abstract void setList ( java.lang.String section , java.lang.String subsection , java.lang.String name , java.util.List < java.lang.String > values ) ;
private static com.google.gerrit.client.rpc.RestApi call ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , java.lang.String commit , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "revisions" ) . id ( commit ) . view ( action ) ; }
public void returnDefaultforNullMap ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( null ) ) . isEqualTo ( com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.defaultQuery ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( "Reviewers" ) ; screen.show ( new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen ( com.google.gwt.http.client.URL.decodeQueryString ( screen.getToken ( 1 ) ) ) ) ; }
public java.lang.String getAvatarUrl ( int size ) throws com.google.gerrit.extensions.restapi.RestApiException { getAvatar.setSize ( size ) ; return getAvatar.apply ( account ) . location ( ) ; }
public void setChangeId ( final com.google.gerrit.reviewdb.client.Change.Id changeId ) { }
private PatchSet.Id getPatchSetId ( org.eclipse.jgit.lib.ObjectId c ) throws com.google.gwtorm.server.OrmException { return getChange ( c ) . change ( ) . currentPatchSetId ( ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( change.getStatus ( ) ) == ( Change.Status.NEW ) ) { change.setStatus ( Change.Status.SUBMITTED ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; } return change ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , com.google.gerrit.extensions.restapi.ResourceConflictException.class , expectedError ) ; }
public void execute ( ) { message.setFocus ( true ) ; }
public void message ( java.lang.String message ) { }
protected java.lang.String getRefName ( ) { return ref ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = new com.google.gerrit.testutil.TestNotesMigration ( ) ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public static void detail ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.detail ( project , id ) . get ( cb ) ; }
java.lang.String patchSet ( ) ;
public static org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.dircache.DirCacheEntry [ ] entries , org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.lib.Repository > repo ) throws java.lang.Exception { return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.makeCommit ( rw , entries , repo , ( ( org.eclipse.jgit.revwalk.RevCommit [ ] ) ( null ) ) ) ; }
public void setUUID ( com.google.gerrit.reviewdb.AccountGroup.UUID newUUID ) { uuid = ( newUUID != null ) ? newUUID.get ( ) : null ; }
public void onSuccess ( com.google.gerrit.client.account.DiffPreferences result ) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = new com.google.gerrit.extensions.client.DiffPreferencesInfo ( ) ; result.copyTo ( p ) ; com.google.gerrit.client.Gerrit.setDiffPreferences ( p ) ; }
private void setListIdHeader ( ) throws com.google.gerrit.common.errors.EmailException { setVHeader ( "List-Id" , "<$email.listId.replace('@', '.')>" ) ; if ( ( getSettingsUrl ( ) ) != null ) { setVHeader ( "List-Unsubscribe" , "<$email.settingsUrl>" ) ; } }
public com.google.gerrit.acceptance.PushOneCommit.Result to ( java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.add ( git , fileName , content ) ; return execute ( ref ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( key , project ) ; }
void onFollowUp ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( followUpAction ) == null ) { followUpAction = new com.google.gerrit.client.change.FollowUpAction ( followUp , project , branch , topic , key ) ; } followUpAction.show ( ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; refresh ( ) ; }
protected com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId id ) { return com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle.create ( com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk ( repo ) , id ) ; }
public java.util.List < com.google.gerrit.server.patch.PatchListEntry > getPatches ( ) { return java.util.Collections.unmodifiableList ( patches ) ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig.sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.contactstore ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.user ( config , rs ) ; }
public java.lang.String toString ( ) { return ( "AccessSection[" + ( getName ( ) ) ) + "]" ; }
public com.google.gerrit.extensions.api.plugins.Plugins.ListRequest all ( ) { this . all = true ; return this ; }
void projectDetail ( com.google.gerrit.client.reviewdb.Project.NameKey projectName , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.admin.ProjectDetail > callback ) ;
com.google.gerrit.testutil.InMemoryDatabase getInMemoryDatabase ( com.google.gerrit.server.schema.SchemaCreator schemaCreator ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.testutil.InMemoryDatabase ( schemaCreator ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.GerritApi.class ) . to ( com.google.gerrit.server.api.GerritApiImpl.class ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; }
public int getCount ( ) { synchronized ( this ) { return count ; } }
public java.lang.String permissionName ( ) { return name ; }
public void error ( com.google.gerrit.server.git.ValidationError error ) { if ( ( validationErrors ) == null ) { validationErrors = new java.util.ArrayList < > ( 4 ) ; } validationErrors.add ( error ) ; }
protected void onExit ( final int rc ) { exit.onExit ( rc ) ; if ( ( cleanup ) != null ) { cleanup.run ( ) ; } }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return getUser ( ) . equals ( user ) ? this : forUser ( user ) . asForChange ( cd , db ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , id , null ) ; }
public java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { return reviewersUtil.suggestReviewers ( this , rsrc.getControl ( ) , getVisibility ( rsrc ) , true ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return session.get ( ) . getCurrentUser ( ) ; }
public void loadGerritConfig ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.GerritConfig > callback ) { callback.onSuccess ( config ) ; }
public void delete ( com.google.gerrit.reviewdb.client.Change.Id id ) throws java.io.IOException ;
public java.lang.String getName ( ) { return null ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , null , db , id , null ) ; }
public static java.lang.String cleanupHashtag ( java.lang.String hashtag ) { hashtag = com.google.gerrit.server.change.HashtagsUtil.LEADER.trimLeadingFrom ( hashtag ) ; hashtag = com.google.common.base.CharMatcher.WHITESPACE.trimTrailingFrom ( hashtag ) ; return hashtag ; }
private void assertMessage ( java.lang.String expected , java.lang.String actual ) { com.google.common.truth.Truth.assertThat ( actual ) . isEqualTo ( ( "Patch Set 1:\n\n" + expected ) ) ; }
public final native int to ( ) ;
public synchronized java.io.PrintWriter getWriter ( ) { com.google.common.base.Preconditions.checkState ( ( ( outputStream ) == null ) , "getOutputStream() already called" ) ; if ( ( writer ) == null ) { writer = new java.io.PrintWriter ( actualBody ) ; } return writer ; }
public static void permissions ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { com.google.gerrit.client.projects.ProjectMap.projects ( ) . addParameterRaw ( "type" , "PERMISSIONS" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
public final native void line ( int n ) ;
public java.lang.String toString ( ) { return ( ( ( "@" + ( com.google.gerrit.server.ssh.CommandName.class . getName ( ) ) ) + "(value=" ) + ( value ( ) ) ) + ")" ; }
com.google.gitiles.CommitSoyData setRevWalk ( @ javax.annotation.Nullable org.eclipse.jgit.revwalk.RevWalk walk ) { this . walk = walk ; return this ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return change.getChange ( ) ; }
public void testCreateProjectWithNonExistingOwner_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = name ( "newProjectName" ) ; in.owners = java.util.Collections.singletonList ( "non-existing-group" ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.UnprocessableEntityException.class ) ; }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; }
public boolean canAddMember ( ) { return isOwner ( ) ; }
protected void configure ( ) { listener ( ) . to ( CachePool.Lifecycle.class ) ; }
public int getChangeId ( ) { return changeId.get ( ) ; }
public void show ( ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( this , true ) ; super . show ( ) ; }
public void testDefaultIsMIXED ( ) { org.junit.Assert.assertTrue ( ( ( create ( ) ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.PatternGen ) ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ProjectList result ) { projects.display ( result.getProjects ( ) ) ; projects.finishDisplay ( ) ; }
public static void unmarkPrivate ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.config.AuthConfig.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
void onRestore ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( restoreAction ) == null ) { restoreAction = new com.google.gerrit.client.change.RestoreAction ( restore , project , changeId ) ; } restoreAction.show ( ) ; }
public static com.google.gerrit.client.rpc.RestApi hashtags ( @ com.google.gerrit.common.Nullable java.lang.String project , int changeId ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , changeId ) . view ( "hashtags" ) ; }
public void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.InMemoryDatabase.drop ( db ) ; }
public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey ) ) { return readPatchList ( key , repo ) ; } }
private void addExternalId ( java.lang.String scheme , java.lang.String id , java.lang.String email ) throws java.lang.Exception { externalIdsUpdateFactory.create ( ) . insert ( com.google.gerrit.server.account.externalids.ExternalId.createWithEmail ( scheme , id , user.getAccountId ( ) , email ) ) ; reloadUser ( ) ; }
private com.google.gerrit.acceptance.RestResponse POST ( java.lang.String endPoint ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.post ( endPoint ) ; r.consume ( ) ; return r ; }
public com.google.gerrit.server.query.change.ChangeData getChange ( ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( queryProvider.get ( ) . byKeyPrefix ( changeId ) ) ; }
public void hashWithoutHashtag ( ) throws java.lang.Exception { java.lang.String commitMessage = "Subject\n\n# Text" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . isEmpty ( ) ; }
public static final void uploadImage ( java.lang.String imageData ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploader.uploadImage ( imageData , null ) ; }
public void remove ( com.google.gerrit.common.data.AccessSection section ) { if ( section != null ) { accessSections.remove ( section.getName ( ) ) ; } }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( project , psId ) ) ; }
void sendError ( int status , com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.Error error ) throws java.io.IOException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.log.error ( error.message ) ; res.setStatus ( status ) ; gson.toJson ( error , getWriter ( ) ) ; getWriter ( ) . flush ( ) ; }
final native void setToken ( java.lang.String token ) ;
private org.eclipse.jgit.lib.ObjectId createCommit ( com.google.gerrit.server.IdentifiedUser me , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.revwalk.RevCommit revision , org.eclipse.jgit.lib.ObjectId tree ) throws java.io.IOException { return createCommit ( me , inserter , revision , tree , revision.getFullMessage ( ) ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { try { return com.google.gerrit.server.index.change.ChangeField.getAuthorParts ( object ) . contains ( getValue ( ) . toLowerCase ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public void multipleHashtags ( ) throws java.lang.Exception { java.lang.String commitMessage = "#Subject\n\n#Hashtag\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "Subject" , "Hashtag" ) ) ; }
public void execute ( ) { com.google.gerrit.client.Gerrit.doSignIn ( ) ; }
void onChangeIndexed ( int id ) ;
java.nio.file.Path getSharedDirectory ( ) throws java.io.IOException { java.nio.file.Path sharedDirectoryPath = config.main ( ) . sharedDirectory ( ) ; java.nio.file.Files.createDirectories ( sharedDirectoryPath ) ; return sharedDirectoryPath ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) { return notes ; }
public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.PutActive.Input input ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return setInactiveFlag.activate ( rsrc.getUser ( ) . getAccountId ( ) ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
protected void preDisplay ( final com.google.gerrit.client.data.ChangeDetail r ) { display ( r ) ; }
static void noCache ( javax.servlet.http.HttpServletResponse res ) { res.setHeader ( "Expires" , "Fri, 01 Jan 1980 00:00:00 GMT" ) ; res.setHeader ( "Pragma" , "no-cache" ) ; res.setHeader ( "Cache-Control" , "no-cache, must-revalidate" ) ; res.setHeader ( "Content-Disposition" , "attachment" ) ; }
static com.google.gerrit.client.changes.ChangeApi.Input create ( ) { return ( ( com.google.gerrit.client.changes.ChangeApi.Input ) ( createObject ( ) ) ) ; }
public void start ( ) { if ( ( graphiteReporter ) != null ) { graphiteReporter.start ( rate , com.googlesource.gerrit.plugins.metricsreporters.GerritGraphiteReporter.DEFAULT_RATE_UNIT ) ; } }
public static com.criteo.gerrit.plugins.automerge.Change from ( com.google.gerrit.extensions.common.ChangeInfo changeInfo ) { return new com.criteo.gerrit.plugins.automerge.Change ( changeInfo.project , changeInfo._number , changeInfo.id , changeInfo.topic , changeInfo.branch ) ; }
public java.lang.Class < ? > create ( com.google.gwtorm.server.GeneratedClassLoader loader , com.google.gwtorm.schema.RelationModel rm ) throws com.google.gwtorm.client.OrmException { return new com.google.gwtorm.jdbc.AccessGen ( loader , rm , dialect ) . create ( ) ; }
public static com.google.gerrit.client.rpc.RestApi edit ( @ com.google.gerrit.common.Nullable java.lang.String project , int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "edit" ) ; }
final native void topic ( java.lang.String t ) ;
public static boolean useRecursiveMerge ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "core" , null , "useRecursiveMerge" , true ) ; }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) ;
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( account ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
private static org.eclipse.jgit.revwalk.RevCommit lookupCommit ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId ( patchSet ) ; return com.google.gerrit.server.edit.ChangeEditModifier.lookupCommit ( repository , patchSetCommitId ) ; }
java.lang.String projects ( ) ;
public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key.toPatchListKey ( ) , project ) ; return toDiffSummary ( patchList ) ; }
public void onChangeDeleted ( int id ) { executeIndexTask ( id , true ) ; }
public void run ( ) { reviewed.setValue ( ( ! ( reviewed.getValue ( ) ) ) , true ) ; }
public AccountGroup.UUID getGroupUUID ( ) { return getGroup ( ) . getGroupUUID ( ) ; }
public void setVisible ( final boolean show ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( this , show ) ; super . setVisible ( show ) ; }
public static com.google.gerrit.client.rpc.RestApi hashtag ( @ com.google.gerrit.common.Nullable java.lang.String project , int changeId , java.lang.String hashtag ) { return com.google.gerrit.client.changes.ChangeApi.change ( project , changeId ) . view ( "hashtags" ) . id ( hashtag ) ; }
public void go ( ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) ) ; }
private static java.lang.String replace ( java.lang.String project , java.lang.String input ) { return input.replace ( "${project}" , project ) ; }
protected java.lang.String prettify ( java.lang.String html , java.lang.String type ) { return com.google.gerrit.prettify.client.ClientSideFormatter.go ( html , type , settings.getTabSize ( ) ) ; }
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String pluginName ) throws com.google.gerrit.server.project.NoSuchProjectException { return getPluginConfig ( projectName , pluginName ) . getWithInheritance ( false ) ; }
protected boolean writeChanges ( ) { return writeChanges ; }
public java.lang.Boolean apply ( com.googlesource.gerrit.plugins.lfs.locks.LfsLock input ) { return input.owner.name.equals ( user.getUserName ( ) . get ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.ChangeInfo input ) { return input.changeId ; }
public void setUp ( ) throws java.lang.Exception { org.eclipse.jgit.internal.storage.dfs.DfsRepository r = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ; repo = new org.eclipse.jgit.junit.TestRepository ( r ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { if ( ( submitter ) != null ) { return identifiedUserFactory.create ( submitter ) . getRealUser ( ) ; } throw new com.google.inject.OutOfScopeException ( "No user on email thread" ) ; }
private static java.lang.String id ( final int id ) { return com.google.gerrit.server.util.IdGenerator.format ( id ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSave ( ) ; }
com.google.gitiles.doc.Navbar setMarkdown ( byte [ ] md ) { if ( ( md != null ) && ( ( md.length ) > 0 ) ) { parse ( org.eclipse.jgit.util.RawParseUtils.decode ( md ) ) ; } return this ; }
private com.google.gerrit.server.query.change.InternalChangeQuery query ( ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) ) ; return queryProvider.get ( ) . setRequestedFields ( fields ) ; }
public void setChangeId ( java.lang.String changeId ) { java.lang.String old = getChange ( ) . getKey ( ) . get ( ) ; com.google.common.base.Preconditions.checkArgument ( old.equals ( changeId ) , "The Change-Id was already set to %s, so we cannot set this Change-Id: %s" , old , changeId ) ; this . changeId = changeId ; }
private void initCodeRepo ( ) throws java.io.IOException { if ( ( codeRepo ) == null ) { codeRepo = openRepo ( projectName ) ; } }
public com.google.gerrit.server.project.TagResource parse ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return new com.google.gerrit.server.project.TagResource ( resource.getControl ( ) , list.get ( ) . get ( resource , id ) ) ; }
protected abstract org.eclipse.jgit.lib.CommitBuilder applyImpl ( org.eclipse.jgit.lib.ObjectInserter ins ) throws com.google.gwtorm.server.OrmException , java.io.IOException ;
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { return getRange ( permission , false ) ; }
public static void ensureAllPatchSetsLoaded ( java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( ) ; } }
public com.google.gerrit.extensions.client.EditPreferencesInfo setEditPreferences ( com.google.gerrit.extensions.client.EditPreferencesInfo in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setEditPreferences.apply ( account , in ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set edit preferences" , e ) ; } }
private java.lang.String getPassword ( ) { return gerritConfig.getString ( pluginName , null , com.googlesource.gerrit.plugins.hooks.jira.JiraItsFacade.GERRIT_CONFIG_PASSWORD ) ; }
public static java.lang.String toEditScreen ( @ com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toEditScreen ( project , revision , fileName , 0 ) ; }
private boolean checkConnection ( ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.debug ( "Checking database connection..." ) ; try { eventsDb.queryOne ( ) ; return true ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.error ( "Problem checking database connection" , e ) ; return false ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public com.google.gerrit.server.config.ConfigResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource root , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( id.get ( ) . equals ( "server" ) ) { return new com.google.gerrit.server.config.ConfigResource ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public com.google.gerrit.server.change.PatchSetInserter setSshInfo ( com.google.gerrit.server.ssh.SshInfo sshInfo ) { this . sshInfo = sshInfo ; return this ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.HtmlTemplate.init ( ) ; com.google.gerrit.client.api.Plugin.init ( ) ; }
private com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig getConfig ( java.lang.String defaultConfig ) throws org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , defaultConfig ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; return config ; }
public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; }
private void openLine ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTr ( ) ; m.setAttribute ( "valign" , "top" ) ; m.openTd ( ) ; m.setStyleName ( com.google.gerrit.client.patches.S_ICON_CELL ) ; m.closeTd ( ) ; }
public void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo.getRepository ( ) ) ; }
protected abstract void onLoad ( org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public java.lang.String getProjectDescription ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { try ( org.eclipse.jgit.lib.Repository e = openRepository ( name ) ) { return getProjectDescription ( e ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( config , false , false ) ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > name ( java.lang.String name ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.NAME , GroupQueryBuilder.FIELD_NAME , name ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return deleteContent.apply ( rsrc , path ) ; }
public static void editWithFiles ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( project , id ) . addParameterTrue ( "list" ) . get ( cb ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange change ( com.google.gerrit.server.notedb.ChangeNotes notes ) { return new com.google.gerrit.server.permissions.FailedPermissionBackend.FailedChange ( message , cause ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; Util.LIST_SVC.myDraftChanges ( loadCallback ( ) ) ; }
public com.google.gerrit.extensions.common.CommentInfo apply ( com.google.gerrit.server.change.CommentResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.get ( ) . format ( rsrc.getComment ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; createProject ( project2.get ( ) ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , 0 , null , null ) ; user = null ; }
protected java.lang.String getNextSequenceValueSql ( final java.lang.String seqname ) { return ( "SELECT nextval('" + seqname ) + "')" ; }
protected void doCreateTable ( java.sql.Statement stmt ) throws java.sql.SQLException { stmt.executeUpdate ( ( "CREATE TABLE IF NOT EXISTS account_patch_reviews (" + ( ( ( ( ( ( "account_id INTEGER DEFAULT 0 NOT NULL, " + "change_id INTEGER DEFAULT 0 NOT NULL, " ) + "patch_set_id INTEGER DEFAULT 0 NOT NULL, " ) + "file_name VARCHAR(4096) DEFAULT '' NOT NULL, " ) + "CONSTRAINT primary_key_account_patch_reviews " ) + "PRIMARY KEY (change_id, patch_set_id, account_id, file_name)" ) + ")" ) ) ) ; }
com.google.gerrit.git.PatchSetImporter create ( com.google.gerrit.client.reviewdb.ReviewDb dstDb , org.spearce.jgit.revwalk.RevCommit srcCommit , com.google.gerrit.client.reviewdb.PatchSet dstPatchSet , boolean isNewPatchSet ) ;
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { publishedBase = sort ( result.get ( path ) ) ; }
public void setAction ( com.google.gerrit.common.data.PermissionRule.Action action ) { if ( action == null ) { throw new java.lang.NullPointerException ( "action" ) ; } this . action = action ; }
public int get ( ) { return start ; }
public boolean isBatch ( ) { return true ; }
public void run ( ) throws java.lang.Exception { this . service ( ) ; }
public boolean dryRun ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canCherryPick ( args.mergeSorter , args.repo , mergeTip , args.rw , toMerge ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
public final native java.lang.String url ( ) ;
public static boolean isOAuthFinal ( javax.servlet.http.HttpServletRequest request ) { return ( com.google.common.base.Strings.emptyToNull ( request.getParameter ( "code" ) ) ) != null ; }
