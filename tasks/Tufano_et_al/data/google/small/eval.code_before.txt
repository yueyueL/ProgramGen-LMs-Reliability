public void onSuccess ( com.google.gerrit.common.data.PatchSetDetail result ) { commitMessageBlock.display ( result.getInfo ( ) . getMessage ( ) ) ; }
public static void grant ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.common.data.AccessSection section , java.lang.String permission , boolean force , com.google.gerrit.common.data.GroupReference ... groupList ) { com.google.gerrit.server.schema.AclUtil.grant ( config , section , permission , force , null , groupList ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( ! ( failed ) ) { failed = true ; failedThrowable = caught ; } remaining.remove ( this ) ; this . applyAllFailed ( ) ; }
private void infoRow ( final int row , final java.lang.String name ) { info.setText ( row , 0 , name ) ; info.getCellFormatter ( ) . addStyleName ( row , 0 , "header" ) ; }
public byte [ ] readFile ( java.lang.String repoName , java.lang.String ref , java.lang.String path ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { org.eclipse.jgit.lib.Repository repo ; repo = openRepository ( repoName ) ; return com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.readBlob ( repo , ( ( ref + ":" ) + path ) ) ; }
public int hashCode ( ) { return ( ( getOperator ( ) . hashCode ( ) ) * 31 ) + ( id.hashCode ( ) ) ; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy ( ) throws com.google.gerrit.server.git.MergeException { return submitStrategyFactory.create ( destProject.getSubmitType ( ) , db , repo , rw , inserter , canMergeFlag , getAlreadyAccepted ( branchTip ) , destBranch , destProject.isUseContentMerge ( ) ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; }
public void indexChange ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; adminSession.post ( ( ( "/changes/" + changeId ) + "/index/" ) ) . assertNoContent ( ) ; }
public void index ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.replace ( cd ) ; } }
public void patchSetDetail2 ( com.google.gerrit.reviewdb.client.PatchSet.Id baseId , com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetDetail > callback ) { patchSetDetail.create ( baseId , id , diffPrefs ) . to ( callback ) ; }
private void assertKeys ( com.google.gerrit.server.git.gpg.TestKey ... expectedKeys ) throws java.lang.Exception { assertKeys ( java.util.Arrays.asList ( expectedKeys ) ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChangeEdit.apply ( changeResource , new com.google.gerrit.server.change.DeleteChangeEdit.Input ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete change edit" , e ) ; } }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.reviewdb.client.Account.Id acct ) { return "/dashboard/" + ( acct.toString ( ) ) ; }
public org.eclipse.jgit.revwalk.RevCommit commitAt ( org.eclipse.jgit.lib.ObjectId expected ) throws java.io.IOException { if ( com.google.common.base.Objects.equal ( src , expected ) ) { return revision ; } return updateRef ( com.google.common.base.MoreObjects.firstNonNull ( expected , org.eclipse.jgit.lib.ObjectId.zeroId ( ) ) , src , getRefName ( ) ) ; }
void setWidget ( net.codemirror.lib.LineWidget widget ) { this . widget = widget ; addStyleName ( style.isLineWidget ( ) ) ; }
public com.google.gerrit.extensions.api.projects.ConfigInfo apply ( com.google.gerrit.server.project.ProjectResource rsrc , com.google.gerrit.extensions.api.projects.ConfigInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ! ( rsrc.getControl ( ) . isOwner ( ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( "restricted to project owner" ) ; } return apply ( rsrc.getControl ( ) , input ) ; }
public void removeAll ( ) { self.removeAll ( ) ; }
private java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > groupsOf ( com.google.gerrit.reviewdb.client.Account.Id account ) { return userFactory.create ( account ) . getEffectiveGroups ( ) . getKnownGroups ( ) ; }
public static com.google.gerrit.client.ui.AccountLinkPanel link ( com.google.gerrit.common.data.AccountInfoCache cache , com.google.gerrit.reviewdb.client.Account.Id id ) { com.google.gerrit.client.account.AccountInfo ai = cache.get ( id ) ; return ai != null ? new com.google.gerrit.client.ui.AccountLinkPanel ( ai ) : null ; }
public void testGetComment ( ) throws java.lang.Exception { com.google.gerrit.server.change.CommentsTest.assertGetComment ( injector , revRes1 , plc1 , plc1.getKey ( ) . get ( ) ) ; com.google.gerrit.server.change.CommentsTest.assertGetComment ( injector , revRes1 , null , "BadComment" ) ; }
public boolean isOwnerOf ( com.google.gerrit.common.data.AccessSection section ) { return getOwnerOf ( ) . contains ( section.getRefPattern ( ) ) ; }
public org.eclipse.jgit.revwalk.RevCommit commitAt ( org.eclipse.jgit.lib.ObjectId revision ) { return null ; }
public java.lang.String getLocalUser ( ) { if ( externalId.isScheme ( com.google.gerrit.server.account.ExternalId.SCHEME_GERRIT ) ) { return externalId.id ( ) ; } return null ; }
private static java.lang.String key ( java.lang.String type , java.lang.String project , java.lang.String ref ) { return java.lang.String.format ( "%s-%s-%s" , type , project , ref ) ; }
java.lang.String changesUploadedBy ( java.lang.String fullName ) ;
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( err ) ; } }
public com.google.gerrit.client.admin.AccessSectionEditor create ( int index ) { com.google.gerrit.client.admin.AccessSectionEditor subEditor = new com.google.gerrit.client.admin.AccessSectionEditor ( value ) ; container.insert ( subEditor , index ) ; return subEditor ; }
public void testChangeOwner_OwnerACLNotGranted ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException , org.eclipse.jgit.errors.ConfigInvalidException { approve ( sessionOwner , createChange ( ) , HttpStatus.SC_FORBIDDEN ) ; }
private static com.google.gerrit.extensions.api.changes.ReviewInput makeReview ( ) { com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "Looks good!" ; in.labels = com.google.common.collect.Maps.newHashMap ( ) ; in.labels.put ( "Code-Review" , ( ( short ) ( 2 ) ) ) ; return in ; }
public void destroy ( ) { if ( ( ( task ) != null ) && ( ! ( task.isDone ( ) ) ) ) { task.cancel ( true ) ; } }
com.google.gerrit.server.change.PatchSetInserter create ( org.eclipse.jgit.lib.Repository git , org.eclipse.jgit.revwalk.RevWalk revWalk , com.google.gerrit.server.project.ChangeControl ctl , org.eclipse.jgit.revwalk.RevCommit commit ) ;
public void index ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply ( change , new com.google.gerrit.server.change.Index.Input ( ) ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot index change" , e ) ; } }
public void start ( ) { for ( com.google.gerrit.server.index.IndexDefinition < ? , ? , ? > def : defs ) { start ( def ) ; } }
public com.google.gerrit.server.git.CodeReviewCommit run ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; return _run ( mergeTip , toMerge ) ; }
public final native java.lang.String set_name ( java.lang.String n ) ;
public final boolean submittable ( ) { init ( ) ; return _submittable ( ) ; }
private void doVerify ( ) { org.easymock.EasyMock.verify ( schemaFactory , schema , subscriptions , urlProvider , repoManager , gitRefUpdated ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > create ( ) { return com.google.gerrit.server.query.Predicate.not ( new com.google.gerrit.server.query.change.IsReviewedPredicate ( com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED ) ) ; }
private void on ( final com.google.gwt.user.client.ui.Widget sender ) { descAction.setEnabled ( ( ( com.google.gwt.user.client.ui.TextBoxBase ) ( sender ) ) . isEnabled ( ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
public final boolean isHttpPasswordSettingsEnabled ( ) { if ( ( isLdap ( ) ) && ( isGitBasicAuth ( ) ) ) { return false ; } return true ; }
public com.google.gerrit.common.data.GroupDetail call ( ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException { control = groupControl.validateFor ( groupId ) ; com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail ( ) ; detail.setMembers ( loadMembers ( ) ) ; detail.setIncludes ( loadIncludes ( ) ) ; return detail ; }
protected final boolean in ( int line , org.eclipse.jgit.diff.Edit e ) { return ( ( getBegin ( e ) ) <= line ) && ( line < ( getEnd ( e ) ) ) ; }
public void testPushForMaster ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/for/master" ) ; r.assertOkStatus ( ) ; r.assertChange ( Change.Status.NEW , null ) ; }
default void onCreate ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.server.account.externalids.ExternalId extId ) throws java.io.IOException { onCreate ( newNotesRev , java.util.Collections.singleton ( extId ) ) ; }
public void onFocus ( com.google.gwt.user.client.ui.Widget sender ) { if ( Util.C.defaultProjectName ( ) . equals ( box.getText ( ) ) ) { box.setText ( "" ) ; box.removeStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
public java.lang.String getDisplayString ( ) { return ( ( java.lang.String.valueOf ( change.legacyId ( ) . get ( ) ) ) + ": " ) + ( change.subject ( ) ) ; }
private void enableForm ( ) { branchTable.updateDeleteButton ( ) ; addBranch.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
private static java.net.URL toURL ( java.io.File jarFile ) throws com.googlecode.prolog_cafe.compiler.CompileException { try { return jarFile.toURI ( ) . toURL ( ) ; } catch ( java.net.MalformedURLException e ) { throw new com.googlecode.prolog_cafe.compiler.CompileException ( ( "Cannot create URL for " + jarFile ) , e ) ; } }
public void zeroStartCharacterResultsInValidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 0 , 19 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isValid ( ) ; }
public static java.lang.String name ( final com.google.gerrit.reviewdb.client.Account acct ) { return com.google.gerrit.client.FormatUtil.name ( new com.google.gerrit.common.data.AccountInfo ( acct ) ) ; }
com.google.gerrit.server.project.SubmitRuleEvaluator create ( com.google.gerrit.server.query.change.ChangeData cd ) ;
protected java.lang.String xsrfUser ( final com.google.gwtjsonrpc.server.ActiveCall call ) { final java.lang.String idstr = com.google.gwtjsonrpc.client.CookieAccess.getTokenText ( Gerrit.ACCOUNT_COOKIE ) ; return idstr != null ? "account" + idstr : "anonymous" ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; bind ( com.google.gerrit.pgm.init.Browser.class ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void delete ( com.google.gwt.core.client.JavaScriptObject content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendJSON ( com.google.gwt.http.client.RequestBuilder.DELETE , content , cb ) ; }
public void onSuccess ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; }
public java.lang.String getHeader ( java.lang.String name ) { return com.google.common.collect.Iterables.getFirst ( headers.get ( com.google.common.base.Preconditions.checkNotNull ( name ) ) , null ) ; }
protected java.lang.String readStringImpl ( java.lang.String def , java.lang.String fmt , java.lang.Object ... args ) { return def ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setHeaderVisible ( false ) ; setWindowTitle ( com.google.gerrit.client.diff.FileInfo.getFileName ( path ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.http.jetty.JettyEnv.class ) . toInstance ( env ) ; bind ( com.google.gerrit.pgm.http.jetty.JettyServer.class ) ; listener ( ) . to ( JettyServer.Lifecycle.class ) ; }
public void nonExistentNotesRefIsEquivalentToNotAnyExistingGroups ( ) throws java.lang.Exception { com.google.common.collect.ImmutableSet < com.google.gerrit.common.data.GroupReference > allGroups = com.google.gerrit.server.group.db.GroupNameNotes.loadAllGroupReferences ( repo ) ; com.google.common.truth.Truth.assertThat ( allGroups ) . isEmpty ( ) ; }
public T decode ( byte [ ] data ) { return decode ( data , 0 , data.length ) ; }
public java.lang.String getTarget ( ) { return Target.BLANK ; }
public void run ( ) { SshScopes.current.set ( ctx ) ; try { synchronized ( list ) { list.add ( cmd ) ; } runImp ( ) ; } finally { synchronized ( list ) { list.remove ( cmd ) ; } } }
public void run ( ) { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
final native void set_id ( java.lang.String i ) ;
public com.google.gerrit.reviewdb.AccountDiffPreference getAccountDiffPreference ( ) { com.google.gerrit.reviewdb.AccountDiffPreference diffPref = accountDiffPreferencesCache.get ( getAccountId ( ) ) ; if ( diffPref == null ) { diffPref = com.google.gerrit.reviewdb.AccountDiffPreference.createDefault ( getAccountId ( ) ) ; } return diffPref ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.AuthInfo generateAuthInfo ( java.lang.String operation , org.eclipse.jgit.lfs.lib.AnyLongObjectId id , int expirationSeconds ) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken token = new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken ( operation , id , expirationSeconds ) ; return new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.AuthInfo ( processor.serialize ( token ) , token.expiresAt ) ; }
public com.google.gerrit.server.cache.NamedCacheBinding timeToIdle ( long duration , java.util.concurrent.TimeUnit durationUnits ) ;
public void uuidOfNewGroupMustNotBeNull ( ) throws java.lang.Exception { expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup ( repo , null , groupName ) ; }
void set ( com.google.gerrit.client.changes.ChangeInfo info ) { project.setInnerText ( info.project ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setTitleText ( Util.C.accountSettingsHeading ( ) ) ; }
public void includedInDetail ( final com.google.gerrit.reviewdb.client.Change.Id id , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.IncludedInDetail > callback ) { includedInDetail.create ( id ) . to ( callback ) ; }
public void start ( ) { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; com.google.gerrit.sshd.commands.AdminReplicate.this . schedule ( ) ; } } ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { setReviewedByCurrentUser ( true ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { actionsPanel.remove ( b ) ; fireOnSuggestRefresh ( ) ; }
public static com.google.gerrit.lucene.LuceneIndexModule singleVersionWithExplicitVersions ( java.util.Map < java.lang.String , java.lang.Integer > versions , int threads ) { return new com.google.gerrit.lucene.LuceneIndexModule ( versions , threads , false ) ; }
public void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public static com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ( java.lang.String orgName ) { return new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( ( ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.UUID_PREFIX ) + orgName ) ) ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "ALL" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . send ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
static final boolean isTrashFolderName ( java.lang.String fName ) { return com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TRASH.matcher ( fName ) . matches ( ) ; }
protected com.google.inject.Injector getInjector ( ) { return webInjector ; }
public void onFailure ( java.lang.Throwable arg0 ) { }
private void checkLoaded ( ) { com.google.common.base.Preconditions.checkNotNull ( keys , "SSH keys not loaded yet" ) ; }
abstract void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line , com.google.gerrit.client.diff.CommentGroup group ) ;
private static int nullToZero ( java.lang.Integer i ) { return i != null ? i : 0 ; }
private void assertBlocked ( java.lang.String p , java.lang.String ref , com.google.gerrit.server.permissions.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . isBlocked ( p ) ) . named ( ( ( p + " is blocked for " ) + ref ) ) . isTrue ( ) ; }
public static < V > com.google.gerrit.server.index.Schema < V > schema ( java.util.Collection < com.google.gerrit.server.index.FieldDef < V , ? > > fields ) { return new com.google.gerrit.server.index.Schema ( com.google.common.collect.ImmutableList.copyOf ( fields ) ) ; }
public java.lang.Void call ( ) { return null ; }
void update ( final com.google.gerrit.common.data.ChangeDetail detail ) { display ( detail ) ; patchSetsBlock.setRegisterKeys ( true ) ; }
public java.lang.String createLinkForWebui ( java.lang.String url , java.lang.String text ) { return ( ( ( "[" + text ) + "|" ) + url ) + "]" ; }
public void onFailure ( java.lang.Throwable caught ) { }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commits , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.lang.String submissionId ) ;
private static byte [ ] decodeBase64 ( final java.lang.String s ) { return org.apache.commons.codec.binary.Base64.decodeBase64 ( com.google.gwtjsonrpc.server.XsrfUtil.toBytes ( s ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.projects.Projects.class ) . to ( com.google.gerrit.server.api.projects.ProjectsImpl.class ) ; factory ( BranchApiImpl.Factory.class ) ; factory ( ProjectApiImpl.Factory.class ) ; }
public void show ( ) { super . show ( ) ; com.google.gwt.user.client.DeferredCommand.addCommand ( new com.google.gwt.user.client.Command ( ) { @ java.lang.Override public void execute ( ) { username.setFocus ( true ) ; } } ) ; }
public static com.google.gerrit.server.workflow.CategoryFunction forCategory ( final com.google.gerrit.reviewdb.ApprovalCategory category ) { final com.google.gerrit.server.workflow.CategoryFunction r = com.google.gerrit.server.workflow.CategoryFunction.forName ( category.getFunctionName ( ) ) ; return r != null ? r : new com.google.gerrit.server.workflow.NoOpFunction ( ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.AccountProjectWatch > getNotificationFilters ( ) { if ( ( notificationFilters ) == null ) { notificationFilters = accountProjectWatchCache.byAccount ( getAccountId ( ) ) ; } return notificationFilters ; }
public static java.lang.String toPatch ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , null , 0 ) ; }
private com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change , boolean force ) { return com.google.common.util.concurrent.Futures.makeChecked ( executor.submit ( new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change , force ) ) , com.google.gerrit.server.change.MergeabilityChecker.MAPPER ) ; }
public org.eclipse.jgit.lib.Config getConfig ( ) { return new org.eclipse.jgit.lib.Config ( ) ; }
public com.google.gerrit.server.events.AccountAttribute asAccountAttribute ( org.eclipse.jgit.lib.PersonIdent ident ) { com.google.gerrit.server.events.AccountAttribute who = new com.google.gerrit.server.events.AccountAttribute ( ) ; who.name = ident.getName ( ) ; who.email = ident.getEmailAddress ( ) ; return who ; }
public void deleteComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { deleteDraftComment ( comment ) ; } else { throw new java.lang.IllegalArgumentException ( "Cannot delete a published comment." ) ; } }
public void onSuccess ( final com.google.gerrit.client.patches.CommentDetail result ) { if ( ( rpcSequence ) == rpcseq ) { comments = result ; onResult ( ) ; } }
public com.google.gerrit.server.notedb.DraftCommentNotes create ( com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.notedb.DraftCommentNotes ( repoManager , migration , draftsProject , changeId , accountId ) ; }
public final boolean isHttpPasswordSettingsEnabled ( ) { return ( gitBasicAuthPolicy ( ) ) != ( com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP ) ; }
public com.google.gerrit.server.api.projects.ListBranchesRequest branches ( ) { return new com.google.gerrit.server.api.projects.ListBranchesRequest ( ) { @ java.lang.Override public java.util.List < com.google.gerrit.extensions.api.projects.BranchInfo > get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return listBranches ( this ) ; } } ; }
public final native net.codemirror.lib.CodeMirror side ( com.google.gerrit.client.diff.DisplaySide side ) ;
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return get ( com.google.gerrit.acceptance.InProcessProtocol.Context.USER_KEY , null ) ; }
public com.google.gerrit.server.project.ProjectControl validateFor ( final com.google.gerrit.client.reviewdb.Project.NameKey nameKey ) throws com.google.gerrit.server.project.NoSuchProjectException { final com.google.gerrit.server.project.ProjectControl c = controlFor ( nameKey ) ; if ( ! ( c.isVisible ( ) ) ) { throw new com.google.gerrit.server.project.NoSuchProjectException ( nameKey ) ; } return c ; }
com.google.gerrit.reviewdb.client.AccountGroup get ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) ;
public com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) { com.google.gerrit.reviewdb.Account.Id id = byName.get ( new com.google.gerrit.reviewdb.Account.Username ( username ) ) ; return id != null ? byId.get ( id ) : null ; }
public void run ( ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "<C-u>" ) ; }
com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return isSignedIn ( ) ? identified.create ( val.accountId ) : anonymous ; }
protected void configureServlets ( ) { }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { final java.lang.String to = com.google.gwt.user.client.History.getToken ( ) ; new com.google.gerrit.client.auth.openid.OpenIdSignInDialog ( com.google.gerrit.common.auth.SignInMode.LINK_IDENTIY , to , null ) . center ( ) ; }
public com.google.gerrit.server.change.ChangeInserter setGroups ( java.lang.Iterable < java.lang.String > groups ) { com.google.common.base.Preconditions.checkState ( ( ( patchSet ) == null ) , "setGroups(Iterable<String>) only valid before creating change" ) ; this . groups = groups ; return this ; }
public static native net.codemirror.lib.CodeMirror create ( com.google.gerrit.client.diff.DisplaySide side , com.google.gwt.dom.client.Element parent , net.codemirror.lib.Configuration cfg ) ;
public void delete ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { deleteAsync ( change ) . checkedGet ( ) ; }
public java.lang.String toString ( ) { return query.toString ( ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE ) ; }
public java.lang.Boolean call ( ) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectControl projectControl = controlFor ( project ) ; return ( projectControl.isVisible ( ) ) && ( ( PushOne.ALL_REFS.equals ( ref ) ) || ( projectControl.controlForRef ( ref ) . isVisible ( ) ) ) ; }
private void newChangeFooter ( ) { if ( ( changeUrl ( ) ) != null ) { openFooter ( ) ; body.append ( "View this change at " ) ; body.append ( changeUrl ( ) ) ; body.append ( "\n" ) ; } }
protected boolean canPerform ( final com.google.gerrit.client.reviewdb.ApprovalCategory.Id actionId , final short val ) { return canPerform ( cachedProj , actionId , val ) ; }
public abstract long getMinValue ( ) ;
public void onSuccess ( com.google.gerrit.client.info.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.legacyId ( ) ) ) ; }
public final native net.codemirror.lib.CodeMirror side ( com.google.gerrit.client.diff.DisplaySide side ) ;
public org.eclipse.jgit.lib.ObjectId getCommitId ( ) { return commit ; }
public int weigh ( K key , V value ) { return 1 ; }
public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData ( ) { return com.googlesource.gerrit.plugins.quota.Publisher.KIND ; }
protected static com.google.gerrit.pgm.util.Die die ( java.lang.String why ) { return new com.google.gerrit.pgm.util.Die ( why ) ; }
public boolean isOAuthLogout ( javax.servlet.http.HttpServletRequest request ) { return ( request.getRequestURI ( ) . indexOf ( OAuthConfig.OAUTH_LOGOUT ) ) >= 0 ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForBranch ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String branch ) throws java.lang.Exception { return newChange ( repo , null , null , branch , null , null ) ; }
private com.google.gwtexpui.safehtml.client.SafeHtml showTrailingWhitespace ( com.google.gwtexpui.safehtml.client.SafeHtml src ) { final java.lang.String r = "<span class=\"wse\">$1</span>$2" ; src = src.replaceAll ( "([ \t][ \t]*)(\r?\n)" , r ) ; src = src.replaceFirst ( "([ \t][ \t]*)(\r?\n?)$" , r ) ; return src ; }
public java.lang.String getLinkName ( ) { return name ; }
public boolean isVisible ( ) { return isOwner ( ) ; }
void createFileCommentEitorOnSideA ( ) { }
public void start ( ) { com.google.gerrit.sshd.commands.ShowCaches.serverStarted = com.google.gerrit.server.util.TimeUtil.nowMs ( ) ; }
public void onSelection ( com.google.gwt.event.logical.shared.SelectionEvent < com.google.gwt.user.client.ui.SuggestOracle.Suggestion > event ) { if ( submitOnSelection ) { submitOnSelection = false ; doAddNew ( ) ; } }
public Response.Action getUploadAction ( org.eclipse.jgit.lfs.lib.AnyLongObjectId id , long size ) { org.eclipse.jgit.lfs.server.Response.Action action = super . getUploadAction ( id , size ) ; action.header = java.util.Collections.singletonMap ( org.eclipse.jgit.util.HttpSupport.HDR_AUTHORIZATION , authorizer.generateToken ( com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.UPLOAD , id , expirationSeconds ) ) ; return action ; }
public boolean canRemove ( final com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
public java.lang.String [ ] apply ( java.util.Collection < java.lang.String > values ) { return values.toArray ( new java.lang.String [ 0 ] ) ; }
protected void configure ( ) { factory ( PrologEnvironment.Factory.class ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public static com.google.gerrit.server.workflow.CategoryFunction forName ( final java.lang.String functionName ) { return com.google.gerrit.server.workflow.CategoryFunction.all.get ( functionName ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( final com.google.gerrit.server.patch.PatchListKey key ) { return patchListCache.get ( key ) ; }
java.lang.Object apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return cache ( json.format ( rsrc ) ) ; }
public void testCreateProjectHttpWithUnreasonableName_BadRequest ( ) throws java.lang.Exception { adminSession.put ( ( "/projects/" + ( com.google.gerrit.extensions.restapi.Url.encode ( name ( "invalid/../name" ) ) ) ) ) . assertBadRequest ( ) ; }
public static void detail ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.detail ( id ) . get ( cb ) ; }
com.google.gerrit.lucene.LuceneChangeIndex getIndex ( com.google.gerrit.lucene.LuceneChangeIndex.Factory factory ) { com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema = ( ( singleVersion ) != null ) ? com.google.gerrit.server.index.ChangeSchemas.get ( singleVersion ) : com.google.gerrit.server.index.ChangeSchemas.getLatest ( ) ; return factory.create ( schema , base ) ; }
public void message ( java.lang.String msg ) { java.lang.System.err.println ( msg ) ; java.lang.System.err.flush ( ) ; }
public void postEvent ( final com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.ChangeEvent event ) { fireEvent ( branchName , event ) ; }
protected abstract T decode ( com.google.protobuf.CodedInputStream in ) ;
public static com.google.gerrit.server.index.IndexConfig create ( int maxLimit ) { com.google.common.base.Preconditions.checkArgument ( ( maxLimit > 0 ) , "maxLimit must be positive: %s" , maxLimit ) ; return new com.google.gerrit.server.index.AutoValue_IndexConfig ( maxLimit ) ; }
public java.lang.String getProjectUrl ( java.lang.String project ) { return java.lang.String.format ( placeHolderUrlProject , project ) ; }
public void evict ( final com.google.gerrit.reviewdb.Project p ) { if ( p != null ) { byName.remove ( p.getNameKey ( ) ) ; } }
public com.google.gerrit.client.patches.PatchScriptSettings.Whitespace getWhitespace ( ) { return whitespace ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.DraftActions.delete ( changeId , revision ) ; }
public com.google.gerrit.server.account.GroupMembership getEffectiveGroups ( ) { return new com.google.gerrit.server.account.ListGroupMembership ( java.util.Collections.singleton ( AccountGroup.ANONYMOUS_USERS ) ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public void tearDown ( ) throws java.lang.Exception { if ( ( lifecycle ) != null ) { lifecycle.stop ( ) ; } com.google.gerrit.testutil.InMemoryDatabase.drop ( db ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( revision.getParentKey ( ) , java.lang.String.valueOf ( revision.get ( ) ) ) ) ; }
public void close ( ) { for ( com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > rs : results ) { rs.close ( ) ; } }
public int nextAccountId ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
com.googlesource.gerrit.plugins.replication.Destination create ( com.googlesource.gerrit.plugins.replication.DestinationConfiguration config ) { return new com.googlesource.gerrit.plugins.replication.Destination ( injector , config , replicationUserFactory , pluginUser , gitRepositoryManager , permissionBackend , groupBackend , stateLog , groupIncludeCache , eventDispatcher ) ; }
HEAD ( com.google.gerrit.sshd.commands.c65126 PolyGerrit ) { }
public void execute ( ) { if ( ( cmA ) != null ) { cmA.setOption ( "viewportMargin" , 10 ) ; } if ( ( cmB ) != null ) { cmB.setOption ( "viewportMargin" , 10 ) ; } }
public void backupRefNameForTag ( ) throws java.lang.Exception { java.lang.String name = com.googlesource.gerrit.plugins.refprotection.BackupRef.get ( "refs/tags/v1.0" ) ; java.lang.String expected_prefix = ( BackupRef.R_BACKUPS ) + "tags/v1.0-" ; com.google.common.truth.Truth.assertThat ( name ) . startsWith ( expected_prefix ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo apply ( com.google.gerrit.extensions.webui.WebLink webLink ) { return ( ( com.google.gerrit.extensions.webui.PatchSetWebLink ) ( webLink ) ) . getPathSetWebLink ( project.get ( ) , commit ) ; }
public void remove ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteReviewer.apply ( reviewer , null ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot remove reviewer" , e ) ; } }
public void onSuccess ( final com.google.gerrit.client.changes.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; display ( result ) ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteChange.apply ( change , null ) ; } catch ( com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete change" , e ) ; } }
public void checkChanges ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change.Id > changeIds ) throws java.lang.Exception { checkActual ( readExpected ( changeIds ) , new java.util.ArrayList < java.lang.String > ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.ProjectAccess access ) { commitMessage.setText ( "" ) ; edit ( access ) ; enable ( true ) ; }
public com.google.gerrit.server.ssh.AbstractCommand create ( ) { return new com.google.gerrit.server.ssh.AdminReplicate ( ) ; }
public java.lang.String getBranchUrl ( java.lang.String projectName , java.lang.String branchName ) { return java.lang.String.format ( placeHolderUrlProjectBranch , projectName , branchName ) ; }
protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; }
abstract com.google.gerrit.client.diff.SkipManager getSkipManager ( ) ;
public void noNotificationForWipChangesForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_CHANGES , NotifyType.ALL_COMMENTS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; sender.clear ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "wip change" , "a" , "a1" ) . to ( "refs/for/master%wip" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
java.lang.String removeHashtag ( java.lang.String name ) ;
static com.google.gerrit.client.reviewdb.Account getInstance ( int rawId ) { com.google.gerrit.client.reviewdb.Account a = new com.google.gerrit.client.reviewdb.Account ( ) ; a.accountId = new com.google.gerrit.client.reviewdb.Account.Id ( rawId ) ; return a ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , msgTxt , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
public void execute ( ) { d.callback.onSuccess ( null ) ; }
public void run ( ) throws java.lang.Exception { try { preRun ( ) ; parseArguments ( ) ; this . run ( ) ; } finally { postRun ( ) ; } }
public com.google.gerrit.server.cache.NamedCacheBinding timeToLive ( int duration , java.util.concurrent.TimeUnit durationUnits ) ;
public static void filter ( final com.google.gwtexpui.globalkey.client.KeyCommandFilter filter ) { com.google.gwtexpui.globalkey.client.GlobalKey.keys.filter ( filter ) ; }
java.lang.String diff ( ) ;
private void assertParseWithEqualsFails ( java.lang.String value ) { try { com.google.gerrit.server.util.LabelVote.parseWithEquals ( value ) ; org.junit.Assert.fail ( ( ( "expected IllegalArgumentException when parsing \"" + value ) + "\"" ) ) ; } catch ( java.lang.IllegalArgumentException e ) { } }
public com.googlesource.gerrit.plugins.findowners.OwnersDb call ( ) { com.googlesource.gerrit.plugins.findowners.Cache.log.trace ( ( "Create new OwnersDb, key=" + key ) ) ; return new com.googlesource.gerrit.plugins.findowners.OwnersDb ( accountCache , emails , key , repository , changeData , project , branch , files ) ; }
public void remove ( ) { for ( java.lang.String name : names ) { registry.remove ( name ) ; } }
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { adminSession.delete ( urlEdit ( ) ) . assertNotFound ( ) ; }
public void setTitleText ( final java.lang.String text ) { titleText = text ; if ( ( titleRow ) >= 0 ) { parent.table.setText ( titleRow , 0 , titleText ) ; } }
public java.lang.Boolean call ( ) throws java.io.IOException { return isVisible ( repo , walk , id ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { publishedBase = sort ( result.get ( path ) ) ; }
public void removeEventListener ( com.google.gerrit.common.EventListener listener ) { }
protected void doGet ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) throws java.io.IOException { toGerrit ( target , req , rsp ) ; }
boolean isModified ( java.nio.file.Path jar ) { return ( snapshot.lastModified ( ) ) != ( com.google.gerrit.common.FileUtil.lastModified ( jar ) ) ; }
default com.google.gerrit.reviewdb.client.Change getChange ( ) { return com.google.common.base.Preconditions.checkNotNull ( getControl ( ) . getChange ( ) ) ; }
public com.google.gerrit.extensions.api.projects.BranchApi branch ( java.lang.String ref ) { return branchApi.create ( project , ref ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.schema.SchemaVersion.class ) . annotatedWith ( com.google.gerrit.server.schema.Current.class ) . to ( com.google.gerrit.server.schema.SchemaVersion.C ) ; }
public void run ( ) { cm.vim ( ) . handleKey ( "/" ) ; }
private java.lang.String link ( final com.google.gerrit.client.projects.ProjectInfo item ) { return com.google.gerrit.client.Dispatcher.toProjectAdmin ( item.name_key ( ) , ProjectScreen.INFO ) ; }
private void commit ( org.eclipse.jgit.lib.PersonIdent ident , java.lang.String subject ) throws java.lang.Exception { commitBuilder ( ) . ident ( ident ) . message ( subject ) . create ( ) ; }
private static java.lang.reflect.Method getDefaultConfig ( java.lang.Class < ? > clazz ) { return com.google.gerrit.testutil.ConfigSuite.getAnnotatedMethod ( clazz , com.google.gerrit.testutil.ConfigSuite.Default.class ) ; }
private static java.lang.String queryOutgoing ( java.lang.String who ) { return "is:open owner:" + who ; }
public void inheritRead_OverrideWithDeny ( ) { com.google.gerrit.server.project.Util.allow ( parent , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; com.google.gerrit.server.project.Util.deny ( local , com.google.gerrit.common.data.Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/*" ) ; assertAccessDenied ( user ( local ) ) ; }
public org.apache.sshd.common.file.FileSystemView createFileSystemView ( org.apache.sshd.common.Session session ) throws java.io.IOException { return new org.apache.sshd.common.file.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( org.apache.sshd.common.file.SshFile baseDir , java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.googlesource.gerrit.plugins.events.StreamEventListener.class ) ; bind ( com.googlesource.gerrit.plugins.events.EventStore.class ) . to ( com.googlesource.gerrit.plugins.events.MemStore.class ) ; com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.ChangeListener.class ) . to ( com.googlesource.gerrit.plugins.events.CoreListener.class ) ; }
protected void configureServlets ( ) { install ( new com.google.gerrit.extensions.restapi.RestApiModule ( ) { @ java.lang.Override protected void configure ( ) { filterRegex ( ".*\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; } } ) ; }
void setRoot ( org.pegdown.ast.RootNode doc ) { root = doc ; hasToc = null ; }
public com.google.gerrit.server.notedb.ChangeNotes createForNew ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( db , repoManager , migration , allUsersProvider , change ) ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( ) throws java.io.IOException { return commit ( com.google.common.base.Preconditions.checkNotNull ( updateFactory , "MetaDataUpdate.Factory" ) . create ( getChange ( ) . getProject ( ) , getUser ( ) ) ) ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.ApiGlue.addHistoryHook ( ) ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; luceneConfig.setInt ( "index" , "lucene" , "testVersion" , 14 ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig ) ) ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( java.nio.file.Files.getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; }
protected void setCacheHeaders ( javax.servlet.http.HttpServletResponse res ) { long now = java.lang.System.currentTimeMillis ( ) ; res.setDateHeader ( "Expires" , now ) ; res.setDateHeader ( "Date" , now ) ; res.setHeader ( "Cache-Control" , "private, max-age=0, must-revalidate" ) ; }
com.google.gerrit.httpd.rpc.account.CreateGroup create ( java.lang.String newName ) ;
private static void assertName ( java.lang.String expectedNewName , com.google.gerrit.server.diff.PatchListEntry e ) { com.google.common.truth.Truth.assertThat ( e.getNewName ( ) ) . isEqualTo ( expectedNewName ) ; com.google.common.truth.Truth.assertThat ( e.getOldName ( ) ) . isNull ( ) ; }
public java.lang.String getUrl ( ) { final java.lang.StringBuilder b = new java.lang.StringBuilder ( ) ; final com.google.gerrit.server.config.ConfigSection dbs = new com.google.gerrit.server.config.ConfigSection ( cfg , "database" ) ; b.append ( "jdbc:sap://" ) ; b.append ( com.google.gerrit.server.schema.JdbcUtil.hostname ( dbs.required ( "hostname" ) ) ) ; int instance = java.lang.Integer.parseInt ( dbs.required ( "instance" ) ) ; java.lang.String port = ( "3" + ( java.lang.String.format ( "%02d" , instance ) ) ) + "15" ; b.append ( com.google.gerrit.server.schema.JdbcUtil.port ( port ) ) ; return b.toString ( ) ; }
public boolean isInternalAccount ( java.lang.String username ) { return false ; }
public void createBranchByAdminCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public com.google.gerrit.extensions.api.accounts.GpgKeyApi gpgKey ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return gpgApiAdapter.gpgKey ( account , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( id ) ) ; } catch ( com.google.gerrit.server.GpgException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get PGP key" , e ) ; } }
public static java.lang.Integer getLimit ( java.lang.String fieldName , com.google.gerrit.server.query.Predicate < ? > p ) { com.google.gerrit.server.query.IntPredicate < ? > ip = com.google.gerrit.server.query.QueryBuilder.find ( p , com.google.gerrit.server.query.IntPredicate.class , fieldName ) ; return ip != null ? ip.intValue ( ) : null ; }
boolean isReviewed ( ) { return reviewed.getValue ( ) ; }
private void closeStatement ( java.sql.Statement stat ) { if ( stat != null ) { try { stat.close ( ) ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn ( "Cannot close statement" , e ) ; } } }
protected void configure ( ) { bind ( java.nio.file.Path.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return com.google.common.base.Objects.equal ( input.getAccountId ( ) , accountId ) ; }
boolean isTokenValid ( final java.lang.String keyIn ) { return ( isSignedIn ( ) ) && ( key ( ) . token.equals ( keyIn ) ) ; }
public static void doNotInherit ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , java.lang.String ref ) { project.getAccessSection ( ref , true ) . getPermission ( permissionName , true ) . setExclusiveGroup ( true ) ; }
public char getClosingDelimiterChar ( ) { return delim ; }
public boolean setUsernamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > usernames ) { return false ; }
int getBegin ( org.eclipse.jgit.diff.Edit edit ) { return edit.getBeginB ( ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.rules.PredicateProvider.class ) . to ( com.vmware.gerrit.owners.OwnerPredicateProvider.class ) ; }
public void assertSchemaVersion ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion act = getSchemaVersion ( ) ; org.junit.Assert.assertEquals ( com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion ( ) , act.versionNbr ) ; }
public com.google.gerrit.client.admin.PermissionEditor create ( int index ) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor ( readOnly , value ) ; permissionContainer.insert ( subEditor , index ) ; return subEditor ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public boolean canAddGroup ( final com.google.gerrit.reviewdb.AccountGroup.Id id ) { return isOwner ( ) ; }
public void run ( com.google.gerrit.server.project.ProjectState project , com.google.gerrit.server.CurrentUser user ) throws java.io.IOException , org.eclipse.jgit.lfs.errors.LfsException { context.sendResponse ( handler.verifyLocks ( project.getProject ( ) . getName ( ) , user ) ) ; }
protected void configure ( ) { install ( new com.google.gerrit.server.index.IndexModule ( 1 ) ) ; bind ( com.google.gerrit.server.index.IndexConfig.class ) . toInstance ( com.google.gerrit.server.index.IndexConfig.createDefault ( ) ) ; bind ( com.google.gerrit.server.index.ChangeIndex.class ) . toInstance ( new com.google.gerrit.server.index.DummyIndex ( ) ) ; }
public boolean supportsRoleChanges ( com.gitblit.models.UserModel user , com.gitblit.Constants.Role role ) { return false ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { addReviewerIcon.setVisible ( true ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; suggestBox.setFocus ( false ) ; suggestBox.setText ( "" ) ; }
boolean match ( java.lang.String refName ) { return pattern ( ) . matcher ( refName ) . find ( ) ; }
void setReady ( java.lang.String indexName , int version , boolean ready ) { cfg.setBoolean ( com.google.gerrit.lucene.GerritIndexStatus.SECTION , com.google.gerrit.lucene.GerritIndexStatus.indexDirName ( indexName , version ) , com.google.gerrit.lucene.GerritIndexStatus.KEY_READY , ready ) ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , allUsers , c ) . load ( ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink ( java.lang.String projectName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( com.googlesource.gerrit.plugins.xdocs.XDocWebLink.README , getImageUrl ( ) , getBranchUrl ( projectName , Constants.HEAD ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
protected void postRun ( ) { }
public static com.google.gerrit.common.data.PermissionRule rule ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.common.data.GroupReference group ) { return new com.google.gerrit.common.data.PermissionRule ( config.resolve ( group ) ) ; }
public void update ( com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.Code code , java.lang.String shortDescription , java.lang.String description ) { this . status = code ; this . shortDescription = shortDescription ; this . value = description ; }
public void servletPathMatchesRequestPath ( ) { org.junit.Assert.assertEquals ( null , com.google.gerrit.util.http.RequestUtil.getEncodedPathInfo ( mockRequest ( "/c/s" , "/c" , "/s" ) ) ) ; }
java.lang.String getMessage ( ) { return ( replyBox ) != null ? replyBox.getMessage ( ) : null ; }
public com.google.gerrit.reviewdb.SystemConfig getSystemConfig ( ) { return new com.google.gerrit.server.config.SystemConfigProvider ( this , new com.google.inject.Provider < com.google.gerrit.server.schema.SchemaVersion > ( ) { public com.google.gerrit.server.schema.SchemaVersion get ( ) { return schemaVersion ; } } ) . get ( ) ; }
public void queryOne ( ) throws java.sql.SQLException { try ( java.sql.Connection conn = ds.getConnection ( ) ; java.sql.Statement stat = conn.createStatement ( ) ) { stat.executeQuery ( ( ( "SELECT * FROM " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) + " LIMIT 1" ) ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.index.ChangeIndex.class ) . toInstance ( ChangeIndex.DISABLED ) ; bind ( com.google.gerrit.server.index.ChangeIndexer.class ) . toInstance ( ChangeIndexer.DISABLED ) ; bind ( com.google.gerrit.server.query.change.IndexRewrite.class ) . toInstance ( IndexRewrite.DISABLED ) ; }
protected < T > T buildJson ( java.lang.String path , com.google.gson.reflect.TypeToken < T > typeOfT , java.lang.String additionalQueryString ) throws java.lang.Exception { return com.google.gitiles.ServletTest.newGson ( ) . fromJson ( buildJsonRaw ( path , additionalQueryString ) , typeOfT.getType ( ) ) ; }
void deleteGroupMembers ( java.util.Set < com.google.gerrit.client.reviewdb.AccountGroupMember.Key > keys , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
private org.apache.lucene.search.Query prefixQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { return new org.apache.lucene.search.PrefixQuery ( new org.apache.lucene.index.Term ( p.getOperator ( ) , p.getValue ( ) ) ) ; }
public com.google.gerrit.server.query.Matchable < T > asMatchable ( ) { com.google.common.base.Preconditions.checkState ( isMatchable ( ) , "not matchable" ) ; return ( ( com.google.gerrit.server.query.Matchable < T > ) ( this ) ) ; }
public void linkifyMessageUrlAndChangeId ( ) throws java.lang.Exception { com.google.gitiles.Linkifier l = new com.google.gitiles.Linkifier ( TestGitilesUrls.URLS ) ; org.junit.Assert.assertEquals ( com.google.common.collect.ImmutableList.of ( com.google.common.collect.ImmutableMap.of ( "text" , "http://my/url/I0123456789" , "url" , "http://my/url/I0123456789" ) , com.google.common.collect.ImmutableMap.of ( "text" , " is not change " ) , com.google.common.collect.ImmutableMap.of ( "text" , "I0123456789" , "url" , "http://test-host-review/foo/#/q/I0123456789,n,z" ) ) , l.linkify ( com.google.gitiles.LinkifierTest.REQ , "http://my/url/I0123456789 is not change I0123456789" ) ) ; }
public void delete ( ) { com.googlesource.gerrit.plugins.repositoryuse.Usage.table.delete ( this ) ; com.googlesource.gerrit.plugins.repositoryuse.Usage.log.info ( java.lang.String.format ( "Deleting Usage: %s, %s, %s" , project , branch , destination ) ) ; }
public void listChildrenOfNonExistingProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( GET ( "/projects/non-existing/children/" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
com.google.gerrit.httpd.rpc.patch.AddReviewerHandler create ( com.google.gerrit.reviewdb.Change.Id changeId , java.util.Collection < java.lang.String > nameOrEmails ) ;
java.io.File getSrcJar ( ) { return srcFile ; }
private void updateSavedAt ( ) { final java.sql.Timestamp on = comment.getWrittenOn ( ) ; savedAt.setText ( PatchUtil.M.draftSaved ( new java.util.Date ( on.getTime ( ) ) ) ) ; }
private static java.util.List < com.google.gerrit.reviewdb.client.PatchSet > latest ( com.google.gerrit.reviewdb.client.Change c ) { return com.google.common.collect.ImmutableList.of ( new com.google.gerrit.reviewdb.client.PatchSet ( c.currentPatchSetId ( ) ) ) ; }
private java.lang.String urlPublish ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/publish_edit" ; }
public static java.lang.String toUnified ( com.google.gerrit.client.DiffObject diffBase , com.google.gerrit.reviewdb.client.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , diffBase , id ) ; }
public void modifyFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.project.ChangeControl changeControl , java.lang.String filePath , com.google.gerrit.extensions.restapi.RawInput newContent ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , changeControl , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( filePath , newContent ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; add ( ( diffTable = new com.google.gerrit.client.diff.DiffTable ( ) ) ) ; }
public static com.google.gerrit.reviewdb.SchemaVersion create ( ) { final com.google.gerrit.reviewdb.SchemaVersion r = new com.google.gerrit.reviewdb.SchemaVersion ( ) ; r.singleton = new com.google.gerrit.reviewdb.SchemaVersion.Key ( ) ; return r ; }
private java.lang.String dropTrailingSlash ( java.lang.String url ) { return url.endsWith ( "/" ) ? url.substring ( 0 , ( ( url.length ( ) ) - 1 ) ) : url ; }
public void pushBypassPrivateByDefaultInherited ( ) throws java.lang.Exception { setPrivateByDefault ( project1 , InheritableBoolean.TRUE ) ; com.google.common.truth.Truth.assertThat ( createChange ( project2 ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( true ) ; }
public void run ( ) { boolean s = prefs.showWhitespaceErrors ( ) ; view.getCmFromSide ( DisplaySide.A ) . setOption ( "showTrailingSpace" , s ) ; view.getCmFromSide ( DisplaySide.B ) . setOption ( "showTrailingSpace" , s ) ; }
public void reload ( ) { com.google.gerrit.pgm.Init.super . loadSiteLib ( ) ; }
public final native void addWidget ( net.codemirror.lib.LineCharacter pos , com.google.gwt.dom.client.Element node , boolean scrollIntoView ) ;
final void setState ( com.google.gerrit.extensions.api.projects.ProjectState s ) { setStateRaw ( s.name ( ) ) ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Gerrit.C.searchHint ( ) . equals ( searchBox.getText ( ) ) ) { searchBox.setText ( "" ) ; searchBox.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public void onSuccess ( final com.google.gerrit.common.data.IncludedInDetail result ) { loadTable ( result ) ; }
static com.googlecode.prolog_cafe.lang.ChoicePointFrame S0 ( com.googlecode.prolog_cafe.lang.Operation cont ) { com.googlecode.prolog_cafe.lang.ChoicePointFrame r = new com.googlecode.prolog_cafe.lang.ChoicePointFrame ( ) ; r.cont = cont ; return r ; }
public void evictGroupsByInclude ( ) throws java.io.IOException , javax.servlet.ServletException { configureMocksFor ( Constants.GROUPS_BYINCLUDE ) ; servlet.doPost ( request , response ) ; verifyAll ( ) ; }
public void onSubmit ( final com.google.gwt.user.client.ui.FormSubmitEvent event ) { event.setCancelled ( true ) ; final java.lang.String addr = inEmail.getText ( ) . trim ( ) ; if ( ! ( addr.contains ( "@" ) ) ) { return ; } inEmail.setEnabled ( false ) ; register.setEnabled ( false ) ; Util.ACCOUNT_SEC.registerEmail ( addr , new com.google.gerrit.client.rpc.GerritCallback < com.google.gwtjsonrpc.client.VoidResult > ( ) { public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { box.hide ( ) ; } @ java.lang.Override public void onFailure ( final java.lang.Throwable caught ) { inEmail.setEnabled ( true ) ; register.setEnabled ( true ) ; super . onFailure ( caught ) ; } } ) ; }
private com.google.gerrit.acceptance.RestResponse POST ( java.lang.String endPoint ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.post ( endPoint ) ; r.consume ( ) ; return r ; }
private void checkHostIndex ( ) { com.google.common.base.Preconditions.checkState ( ( ( hostName ) != null ) , "missing hostName on %s view" , type ) ; com.google.common.base.Preconditions.checkState ( ( ( servletPath ) != null ) , "missing hostName on %s view" , type ) ; }
public void center ( ) { show ( ) ; }
void onFollowUp ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( followUpAction ) == null ) { followUpAction = new com.google.gerrit.client.change.FollowUpAction ( followUp , project , branch , topic , key ) ; } followUpAction.show ( ) ; }
public void onError ( com.google.gwt.resources.client.ResourceException e ) { net.codemirror.lib.Loader.error ( e ) ; }
public T call ( ) throws java.lang.Exception { return wrapped.call ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { setExternalGroup ( key ) ; }
public void listBranches ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { listBranchesFactory.create ( projectName ) . to ( callback ) ; }
com.google.gerrit.server.mail.AddReviewerSender create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id ) ;
protected com.google.gerrit.server.change.ChangeInserter newChangeWithTopic ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , java.lang.String topic ) throws java.lang.Exception { return newChange ( repo , null , null , null , null , topic ) ; }
private com.google.gerrit.server.index.IndexedChangeQuery query ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) throws com.google.gerrit.server.query.QueryParseException { return query ( p , IndexRewriteImpl.MAX_LIMIT ) ; }
public void insertComments ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeUpdate update , java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > comments ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.reviewdb.client.PatchLineComment c : comments ) { update.insertComment ( c ) ; } db.patchComments ( ) . insert ( comments ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.sql.Date o ) { sb.append ( '"' ) ; sb.append ( o ) ; sb.append ( '"' ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.ProjectRight > byGroup ( com.google.gerrit.client.reviewdb.AccountGroup.Id id ) throws com.google.gwtorm.client.OrmException ;
public void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) { }
public java.sql.Timestamp getMinTimestamp ( ) { return new java.sql.Timestamp ( 0 ) ; }
void suggestParentCandidates ( com.google.gwtjsonrpc.common.AsyncCallback < java.util.List < com.google.gerrit.reviewdb.client.Project > > callback ) ;
public void testToHeaderString_NameEmail3 ( ) { org.junit.Assert.assertEquals ( "\"A B. C\" <a@a>" , com.google.gerrit.server.mail.AddressTest.format ( "A B. C" , "a@a" ) ) ; }
public final native boolean intralineDifference ( ) ;
public boolean isNotify ( com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) { return ( types.contains ( type ) ) || ( types.contains ( NotifyType.ALL ) ) ; }
public abstract java.lang.Iterable < java.util.Map.Entry < byte [ ] , byte [ ] > > scan ( byte [ ] fromKey , byte [ ] toKey ) throws com.google.gwtorm.client.OrmException ;
private static com.google.gerrit.server.change.PostReview.CommentSetEntry create ( com.google.gerrit.reviewdb.client.Patch.Key key , java.lang.Integer line , com.google.gerrit.extensions.client.Side side , com.google.common.hash.HashCode message , com.google.gerrit.reviewdb.client.CommentRange range ) { return new com.google.gerrit.server.change.AutoValue_PostReview_CommentSetEntry ( key , line , side , message , range ) ; }
private com.google.gerrit.server.notedb.ChangeNotesParser newParser ( org.eclipse.jgit.lib.ObjectId tip ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange ( ) ; return new com.google.gerrit.server.notedb.ChangeNotesParser ( c.getProject ( ) , c.getId ( ) , tip , walk , repoManager , changeNoteUtil , commentsUtil ) ; }
protected void configure ( ) { bind ( java.lang.String.class ) . annotatedWith ( com.google.gerrit.server.plugins.PluginName.class ) . toInstance ( name ) ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toEditScreen ( revision , fileName , 0 ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public void setup ( ) throws java.lang.Exception { testRepo = cloneProject ( project , user ) ; }
public com.google.gerrit.server.query.change.ListChanges andDefaultField ( java.lang.String defaultField ) { this . defaultField = defaultField ; return this ; }
protected java.lang.Object getRowItemKey ( com.google.gerrit.client.change.RelatedChanges.ChangeAndCommit item ) { return item.id ( ) ; }
public final com.google.gerrit.server.git.CodeReviewCommit run ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; return _run ( mergeTip , toMerge ) ; }
public org.apache.http.impl.client.CloseableHttpClient get ( ) { return org.apache.http.impl.client.HttpClients.custom ( ) . setConnectionManager ( customConnectionManager ( ) ) . setDefaultRequestConfig ( customRequestConfig ( ) ) . setServiceUnavailableRetryStrategy ( customServiceUnavailRetryStrategy ( ) ) . build ( ) ; }
private boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( isOwner ( ) ) || ( isReviewer ( db , cd ) ) ; }
public ApprovalCategory.Id getApprovalCategoryId ( ) { return new com.google.gerrit.reviewdb.client.ApprovalCategory.Id ( getId ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo > result ) { if ( ! ( result.isEmpty ( ) ) ) { display ( result ) ; } }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( baseId , id , line ) : new com.google.gerrit.client.diff.SideBySide ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
public void onSuccess ( com.google.gwtjsonrpc.common.VoidResult result ) { }
public void onSuccess ( com.google.gerrit.client.VoidResult n ) { prefs.copyTo ( com.google.gerrit.client.Gerrit.getEditPreferences ( ) ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( cm.isClean ( generation ) ) || ( com.google.gwt.user.client.Window.confirm ( EditConstants.I.discardUnsavedChanges ( ) ) ) ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; } }
private void initDisplayControls ( ) { final com.google.gwt.user.client.ui.Grid displayControls = new com.google.gwt.user.client.ui.Grid ( 0 , 4 ) ; displayControls.setStyleName ( "gerrit-PatchScreen-DisplayControls" ) ; add ( displayControls ) ; createIgnoreWhitespace ( displayControls , 0 , 0 ) ; createContext ( displayControls , 0 , 2 ) ; }
public boolean isNotify ( final com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) { switch ( type ) { case NEW_CHANGES : return notifyNewChanges ; case ALL_COMMENTS : return notifyAllComments ; case SUBMITTED_CHANGES : return notifySubmittedChanges ; case ALL : break ; } return false ; }
public boolean match ( T object ) throws com.google.gwtorm.server.OrmException { int valueInt = getValueInt ( object ) ; return ( valueInt >= ( range.min ) ) && ( valueInt <= ( range.max ) ) ; }
private static com.google.gerrit.reviewdb.client.RevId toRevId ( final org.eclipse.jgit.revwalk.RevCommit src ) { return new com.google.gerrit.reviewdb.client.RevId ( src.getId ( ) . name ( ) ) ; }
public void run ( ) { closedIndex.close ( ) ; }
public boolean containsComment ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { for ( com.google.gerrit.reviewdb.client.PatchLineComment existing : comments.values ( ) ) { if ( c.getKey ( ) . equals ( existing.getKey ( ) ) ) { return true ; } } return false ; }
public void projectAccess ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) { projectAccessFactory.create ( projectName ) . to ( callback ) ; }
private com.google.gerrit.server.project.ChangeControl stubChangeControl ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.testutil.TestChanges.stubChangeControl ( repoManager , c , allUsers , changeOwner ) ; }
public void run ( ) { if ( cm.hasVimSearchHighlight ( ) ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "n" ) ; } else { diffChunkNav ( cm , false ) . run ( ) ; } }
com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , int start ) throws com.google.gerrit.server.query.QueryParseException ;
public void visibleGroups ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.GroupList > callback ) { visibleGroupsFactory.create ( ) . to ( callback ) ; }
private java.lang.String getCommentPrefix ( com.google.gerrit.server.events.ChangeAttribute change ) { return ( getChangeIdUrl ( change ) ) + " | " ; }
public com.google.gerrit.server.notedb.ChangeUpdate getChangeUpdate ( ) { return update ; }
public boolean handles ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return uuid.get ( ) . startsWith ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.UUID_PREFIX ) ; }
public boolean canUploadMerges ( ) { return projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH_MERGE ) ; }
public boolean isInGroup ( final com.google.gerrit.client.reviewdb.Account.Id accountId , final com.google.gerrit.client.reviewdb.AccountGroup.Id groupId ) { final java.util.Set < com.google.gerrit.client.reviewdb.AccountGroup.Id > m = getGroups ( accountId ) ; return m.contains ( groupId ) ; }
public void add ( final java.lang.Runnable task ) { synchronized ( cleanup ) { cleanup.add ( task ) ; } }
public boolean multiValued ( ) { return false ; }
public com.google.gerrit.acceptance.PushOneCommit.Result to ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.add ( git , fileName , content ) ; return execute ( git , ref ) ; }
public void setHeader ( java.lang.String name , java.lang.String value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public T call ( ) throws java.lang.Exception { com.google.gerrit.server.util.RequestContext old = local.setContext ( context ) ; try { return callable.call ( ) ; } finally { local.setContext ( old ) ; } }
protected boolean isAllProjects ( com.google.gerrit.server.project.ProjectResource rsrc ) { return rsrc.getControl ( ) . getProject ( ) . getNameKey ( ) . equals ( allProjectsName ) ; }
void setChange ( com.google.gerrit.reviewdb.client.Change c ) { change = c ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.server.project.RefControl ctl , com.google.gerrit.reviewdb.client.Change.Id cid , org.eclipse.jgit.revwalk.RevCommit rc ) ;
void evict ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException ;
public void setUp ( ) { org.mockito.Mockito.when ( configuration.peerInfoJGroups ( ) ) . thenReturn ( jgroupsConfig ) ; finder = new com.ericsson.gerrit.plugins.highavailability.peers.jgroups.InetAddressFinder ( configuration ) ; }
private static com.google.gerrit.client.rpc.RestApi group ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) { return new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( group.get ( ) ) ; }
protected void configureServlets ( ) { serve ( "/become" ) . with ( com.google.gerrit.httpd.auth.become.BecomeAnyAccountLoginServlet.class ) ; }
public void onChange ( final com.google.gwt.event.dom.client.ChangeEvent event ) { updateCategorySelection ( ) ; }
private java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > suggestReviewers ( java.lang.String changeId , java.lang.String query , int n ) throws java.io.IOException { return suggestReviewers ( adminSession , changeId , query , n ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { sent = true ; hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( result.legacy_id ( ) ) ) ; }
private void setRejectImplicitMerges ( ) throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.getProject ( ) . setBooleanConfig ( BooleanProjectConfig.REJECT_IMPLICIT_MERGES , InheritableBoolean.TRUE ) ; saveProjectConfig ( project , cfg ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleReviewed ( ) . run ( ) ; }
public com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.project.ProjectResource , ? > create ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( id.toString ( ) . equals ( "default" ) ) { return createDefault.get ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
private void initTcpIpForwardFilter ( ) { setTcpIpForwardFilter ( new org.apache.sshd.server.TcpIpForwardFilter ( ) { @ java.lang.Override public boolean canConnect ( java.net.InetSocketAddress address , org.apache.sshd.server.session.ServerSession session ) { return false ; } @ java.lang.Override public boolean canListen ( java.net.InetSocketAddress address , org.apache.sshd.server.session.ServerSession session ) { return false ; } } ) ; }
public boolean equals ( final java.lang.Object o ) { return ( o instanceof com.google.gerrit.client.reviewdb.PatchContent.Key ) && ( sha1.equals ( ( ( com.google.gerrit.client.reviewdb.PatchContent.Key ) ( o ) ) . sha1 ) ) ; }
public void setShowUsernameInReviewCategory ( final boolean showUsernameInReviewCategory ) { this . showUserInReview = showUsernameInReviewCategory ; }
public boolean equals ( com.google.gerrit.server.patch.CharText a , int ai , com.google.gerrit.server.patch.CharText b , int bi ) { return ( a.charAt ( ai ) ) == ( b.charAt ( bi ) ) ; }
public int compare ( com.google.gerrit.reviewdb.AccountExternalId a , com.google.gerrit.reviewdb.AccountExternalId b ) { return emailOf ( a ) . compareTo ( emailOf ( b ) ) ; }
private static int getInt ( org.eclipse.jgit.transport.RemoteConfig rc , org.eclipse.jgit.lib.Config cfg , java.lang.String name , int defValue ) { return cfg.getInt ( "remote" , rc.getName ( ) , name , defValue ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY , edit , file , null , content ) ; }
private static boolean isBecomeAnyoneEnabled ( ) { try { java.lang.String s = "com.google.gerrit.server.http.BecomeAnyAccountLoginServlet" ; return java.lang.Boolean.getBoolean ( s ) ; } catch ( java.lang.SecurityException se ) { return false ; } }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.AccountSshKey > byAccount ( com.google.gerrit.client.reviewdb.Account.Id id ) throws com.google.gwtorm.client.OrmException ;
private com.google.gwtexpui.clippy.client.CopyableLabel getCommitLabel ( com.google.gerrit.client.changes.ChangeInfo.CommitInfo c ) { com.google.gwtexpui.clippy.client.CopyableLabel copyLabel ; copyLabel = new com.google.gwtexpui.clippy.client.CopyableLabel ( c.commit ( ) ) ; copyLabel.setTitle ( c.subject ( ) ) ; copyLabel.setStyleName ( style.clippy ( ) ) ; return copyLabel ; }
private com.google.gerrit.server.patch.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return new com.google.gerrit.server.patch.PatchListKey ( project , revisionIdA , revisionIdB , com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.IGNORE_NONE ) ; }
void expandAll ( ) { expandSideAll ( ) ; otherBar.expandSideAll ( ) ; }
public void setCommentLinks ( final java.util.List < com.google.gwtexpui.safehtml.client.RegexFindReplace > cl ) { commentLinks = cl ; }
naming.LdapSchema getSchema ( javax.naming.directory.DirContext ctx ) { if ( ( ldapSchema ) == null ) { synchronized ( this ) { if ( ( ldapSchema ) == null ) { ldapSchema = new naming.LdapSchema ( ctx ) ; } } } return ldapSchema ; }
public int hashCode ( ) { return java.util.Objects.hash ( formatter , project , resource , revId , metaConfigRevId , parentsHash ) ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.format ( rsrc ) ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { adjustCodeMirrorHeight ( ) ; }
public void setParent ( org.eclipse.jgit.revwalk.RevCommit parent ) throws java.lang.Exception { commitBuilder.noParents ( ) ; commitBuilder.parent ( parent ) ; }
protected void display ( final com.google.gerrit.reviewdb.client.Account userAccount ) { super . display ( userAccount ) ; if ( "" . equals ( nameTxt.getText ( ) ) ) { nameTxt.setFocus ( true ) ; save.setEnabled ( true ) ; } }
private final native java.lang.String themeRaw ( ) ;
public com.google.gerrit.server.git.WorkQueue.Executor getReceiveCommitsExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "receive" , null , "threadPoolSize" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) ) ; return queues.createQueue ( poolSize , "ReceiveCommits" ) ; }
protected static com.google.gerrit.server.query.QueryParseException error ( java.lang.String msg , java.lang.Throwable why ) { return new com.google.gerrit.server.query.QueryParseException ( msg , why ) ; }
private void assertProblems ( org.eclipse.jgit.transport.PushCertificate cert , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = checker.check ( cert ) . getCheckResult ( ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public java.lang.String getServletPath ( ) { return ( ( javax.servlet.http.HttpServletRequest ) ( getRequest ( ) ) ) . getRequestURI ( ) ; }
public int compare ( com.google.gerrit.extensions.common.ChangeInfo c1 , com.google.gerrit.extensions.common.ChangeInfo c2 ) { return c1.branch.compareTo ( c2.branch ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { keys.deleteCurrent ( ) ; }
public org.eclipse.jgit.lib.ReflogReader getReflogReader ( java.lang.String refName ) throws java.io.IOException { return ( getRef ( refName ) ) != null ? delegate.getReflogReader ( refName ) : null ; }
com.googlesource.gerrit.plugins.reviewers.AddReviewersByConfiguration create ( com.google.gerrit.reviewdb.client.Change change , java.util.Set < com.google.gerrit.reviewdb.client.Account.Id > reviewers ) ;
private boolean canPerformOnAnyRef ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId , short requireValue ) { return canPerform ( actionId , requireValue , null ) ; }
public void deleteVote ( com.google.gerrit.extensions.api.changes.DeleteVoteInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply ( new com.google.gerrit.server.change.VoteResource ( reviewer , input.label ) , input ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete vote" , e ) ; } }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { setDefaultContext ( account.getDefaultContext ( ) ) ; }
public void testInitialValueNotNull ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.multimaster.Context.isForwardedEvent ( ) ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( com.ericsson.gerrit.plugins.multimaster.Context.isForwardedEvent ( ) ) . isFalse ( ) ; }
public static com.google.gerrit.server.patch.IntraLineDiffArgs create ( com.google.gerrit.server.patch.Text aText , com.google.gerrit.server.patch.Text bText , java.util.List < org.eclipse.jgit.diff.Edit > edits , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.ObjectId commit , java.lang.String path ) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffArgs ( aText , bText , com.google.gerrit.server.patch.IntraLineDiffArgs.deepCopyEdits ( edits ) , project , commit , path ) ; }
protected com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) { final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call = new com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall ( session.get ( ) , req , rsp ) ; com.google.gerrit.httpd.rpc.GerritJsonServlet.currentCall.set ( call ) ; return call ; }
public com.google.gerrit.server.query.change.QueryOptions withLimit ( int newLimit ) { return com.google.gerrit.server.query.change.QueryOptions.create ( config ( ) , start ( ) , newLimit , fields ( ) ) ; }
public abstract java.util.Collection < com.google.gerrit.reviewdb.client.AccountProjectWatch > getNotificationFilters ( ) ;
public com.google.gerrit.extensions.common.WebLinkInfo getPatchSetWebLink ( java.lang.String projectName , java.lang.String commit ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , null , java.lang.String.format ( "%s/%s/+/%s" , baseUrl , projectName , commit ) , target ) ; }
public void setSession ( final org.apache.sshd.server.session.ServerSession session ) { this . session = session ; }
public void configure ( ) { install ( dbInjector.getInstance ( com.google.gerrit.pgm.util.BatchProgramModule.class ) ) ; install ( new com.google.gerrit.server.index.DummyIndexModule ( ) ) ; factory ( ChangeResource.Factory.class ) ; }
public void testLinkify_Parens1 ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A (http://go.here/) B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( "<p>A (<a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>) B</p>" ) ; }
public void pushBypassPrivateByDefaultEnabled ( ) throws java.lang.Exception { setPrivateByDefault ( project2 , InheritableBoolean.TRUE ) ; com.google.common.truth.Truth.assertThat ( createChange ( project2 , "refs/for/master%remove-private" ) . getChange ( ) . change ( ) . isPrivate ( ) ) . isEqualTo ( false ) ; }
public void setUseContentMerge ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean cm ) { useContentMerge = cm ; }
public final native boolean edit ( ) ;
public synchronized javax.sql.DataSource get ( ) { if ( ! ( init ) ) { loadSiteLib ( ) ; init = true ; } return super . get ( ) ; }
java.lang.String publishComments ( java.lang.String changeId , int ps ) ;
static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > equalsName ( java.lang.String name ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.NAME_PART , AccountQueryBuilder.FIELD_NAME , name ) ; }
abstract boolean hasReviewStarted ( ) ;
protected boolean hasDifferences ( final com.google.gerrit.common.data.PatchScript script ) { boolean hasEdits = ! ( script.getEdits ( ) . isEmpty ( ) ) ; boolean hasMeta = ! ( script.getPatchHeader ( ) . isEmpty ( ) ) ; return hasEdits || hasMeta ; }
com.google.common.util.concurrent.ListenableFuture < ? > replace ( org.apache.lucene.index.Term term , org.apache.lucene.document.Document doc ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.updateDocument ( term , doc ) ) ; }
private boolean isLive ( final java.io.File entry ) { final java.lang.String name = entry.getName ( ) ; return ( ErrorLogFile.LOG_NAME.equals ( name ) ) || ( name.endsWith ( ".pid" ) ) ; }
public org.parboiled.Rule whitespace ( ) { return zeroOrMore ( anyOf ( " \t" ) ) ; }
public com.google.gerrit.extensions.auth.oauth.OAuthToken getAccessToken ( com.google.gerrit.extensions.auth.oauth.OAuthVerifier rv ) { return getAsOAuthToken ( uaaClient.getAccessToken ( rv.getValue ( ) ) ) ; }
com.google.gerrit.server.account.GroupMembersFactory create ( com.google.gerrit.reviewdb.Project.NameKey project , com.google.gerrit.reviewdb.AccountGroup.UUID groupUUID ) ;
private void fireEventForUnrestrictedListeners ( final com.google.gerrit.server.events.ChangeEvent event ) { for ( com.google.gerrit.common.ChangeListener listener : unrestrictedListeners ) { listener.onChangeEvent ( event ) ; } }
int getHeaderHeight ( ) { int h = patchSetSelectBoxA.getOffsetHeight ( ) ; if ( header ) { h += diffHeaderRow.getOffsetHeight ( ) ; } return h ; }
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme > getDownloadScheme ( ) { return downloadSchemes ; }
public void deleteBranchByUserWithForcePushPermission ( ) throws java.lang.Exception { grantForcePush ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( ) ; }
public long getId ( ) { return java.nio.ByteBuffer.wrap ( fp ) . getLong ( 12 ) ; }
protected com.google.gerrit.git.RepositoryCache getRepositoryCache ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { final com.google.gerrit.git.RepositoryCache rc = getGerritServer ( ) . getRepositoryCache ( ) ; if ( rc == null ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 128 , "fatal: Gerrit repositories are not available" , new java.lang.IllegalStateException ( "git_base_path not set in system_config" ) ) ; } return rc ; }
public void validNewChange ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = insertChange ( ) ; insertPatchSet ( c ) ; incrementPatchSet ( c ) ; insertPatchSet ( c ) ; assertProblems ( c ) ; }
java.lang.String getBranchUrl ( java.lang.String projectName , java.lang.String branchName ) ;
public void init ( javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { }
public com.google.gerrit.server.project.ListProjects setShowTree ( boolean show ) { this . showTree = show ; return this ; }
public void printJson ( java.io.PrintWriter out ) { new com.google.gson.Gson ( ) . toJson ( this , com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.class , new com.google.gson.stream.JsonWriter ( out ) ) ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( key ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > getForOpenChange ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c ) ; return cs.changes ( ) . asList ( ) ; }
void revertChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
com.google.gerrit.server.project.ProjectRef getRuleProps ( com.google.gerrit.common.data.PermissionRule rule ) { return ruleProps.get ( rule ) ; }
public boolean getIfPresent ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.common.SubmitType submitType , java.lang.String mergeStrategy ) { return cache.getIfPresent ( new com.google.gerrit.server.change.MergeabilityCacheImpl.EntryKey ( commit , com.google.gerrit.server.change.MergeabilityCacheImpl.toId ( intoRef ) , submitType , mergeStrategy ) ) ; }
public void tearDown ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZone ) ; }
private com.google.gerrit.server.query.change.ChangeData getChange ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( queryProvider.get ( ) . byKeyPrefix ( c.getChangeId ( ) ) ) ; }
private com.google.gerrit.server.change.ChangeJson changeJson ( ) { return changeJsonFactory.create ( java.util.EnumSet.noneOf ( com.google.gerrit.extensions.client.ListChangesOption.class ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { changeToProject.put ( id , result.project ( ) ) ; getImpl ( result.project ( ) , cb ) ; }
private static void assertChildren ( java.lang.String o , com.google.gerrit.server.query.Predicate < java.lang.String > p , java.util.List < ? extends com.google.gerrit.server.query.Predicate < java.lang.String > > l ) { org.junit.Assert.assertEquals ( ( o + " did not affect child" ) , l , p.getChildren ( ) ) ; }
public java.lang.String getReplacementString ( ) { return com.google.gerrit.client.FormatUtil.nameEmail ( info ) ; }
public static com.google.gerrit.client.rpc.RestApi self ( ) { return com.google.gerrit.client.account.AccountApi.accounts ( ) . view ( "self" ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { rights.showInherited ( show.isChecked ( ) ) ; }
public static java.lang.String getUserName ( java.util.Collection < com.google.gerrit.reviewdb.client.AccountExternalId > ids ) { for ( com.google.gerrit.reviewdb.client.AccountExternalId id : ids ) { if ( id.isScheme ( com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME ) ) { return id.getSchemeRest ( ) ; } } return null ; }
public com.google.gerrit.server.notedb.NotesMigration setFrom ( com.google.gerrit.server.notedb.NotesMigration other ) { throw new java.lang.UnsupportedOperationException ( ( ( getClass ( ) . getSimpleName ( ) ) + " is read-only" ) ) ; }
private final native com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JavaScriptObject > _permitted_labels ( ) ;
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo info ) { new net.codemirror.mode.ModeInjector ( ) . add ( getContentType ( info.meta_a ( ) ) ) . add ( getContentType ( info.meta_b ( ) ) ) . inject ( com.google.gerrit.client.rpc.CallbackGroup.< java.lang.Void > emptyCallback ( ) ) ; }
private void failAndThrow ( java.lang.RuntimeException e ) { fail ( e ) ; throw e ; }
public com.google.common.util.concurrent.CheckedFuture < java.lang.Boolean , java.io.IOException > updateAsync ( com.google.gerrit.reviewdb.client.Change change ) { return com.google.common.util.concurrent.Futures.makeChecked ( executor.submit ( new com.google.gerrit.server.change.MergeabilityChecker.ChangeUpdateTask ( schemaFactory , change ) ) , com.google.gerrit.server.change.MergeabilityChecker.MAPPER ) ; }
Account.Id getAuthorId ( ) { return comment.getAuthor ( ) ; }
private boolean isEnum ( final org.kohsuke.args4j.spi.Setter setter ) { return java.lang.Enum.class . isAssignableFrom ( setter.getType ( ) ) ; }
private boolean canEditAssignee ( ) { return ( ( ( isOwner ( ) ) || ( getProjectControl ( ) . isOwner ( ) ) ) || ( refControl.canEditAssignee ( ) ) ) || ( isAssignee ( ) ) ; }
public void createBranchByAdminCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { blockCreateReference ( ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > m ) { drafts = m.get ( path ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box ) { diffTable.addFileCommentBox ( box ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.POST , cb ) ; }
public void testUpsertOneNotExisting ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE ) ; java.sql.PreparedStatement insert = stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.INSERT , 1 ) ; createClassUnderTest ( ) . upsert ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; verifyIds ( insert , 1 ) ; }
private void wrapText ( java.lang.String tag , org.pegdown.ast.TextNode node ) { html.open ( tag ) . appendAndEscape ( node.getText ( ) ) . close ( tag ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { removeUI ( ) ; }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return format ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public static com.google.gerrit.common.data.SubmitTypeRecord defaultTypeError ( ) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( "Error evaluating project rules, check server log" ) ; }
private void doQuery ( ) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( "Documentation" ) ; call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( query ) ) ; call.get ( loadCallback ( ) ) ; }
static void deleteSessionCookie ( ) { com.google.gerrit.client.Gerrit.myAccount = null ; com.google.gerrit.client.Gerrit.myAccountDiffPref = null ; com.google.gerrit.client.Gerrit.accessToken = null ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; com.google.gwt.user.client.Cookies.removeCookie ( "GerritAccount" ) ; }
public void rollback ( ) throws com.google.gwtorm.server.OrmException { delegate.rollback ( ) ; }
public void testGetComment ( ) throws java.lang.Exception { assertGetComment ( revRes1 , plc1 , plc1.getKey ( ) . get ( ) ) ; assertGetComment ( revRes1 , null , "BadComment" ) ; }
void onSave ( ) { }
public void subsetOfBranchesVisibleNotIncludingHead ( ) throws java.lang.Exception { deny ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/master" ) ; allow ( Permission.READ , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS , "refs/heads/branch" ) ; assertRefs ( "refs/changes/02/2/1" , "refs/heads/branch" ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( id ) ) ; }
private boolean canSkipRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "skipRef" , ref , true ) ; }
void suggestAccount ( java.lang.String query , int limit , com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.AccountInfo > > callback ) ;
public void onFailure ( final java.lang.Throwable caught ) { com.google.gwt.core.client.GWT.log ( "Unexpected failure from validating account" , caught ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; finishModuleLoad ( ) ; }
void updateSchema ( ) throws com.google.gwtorm.client.OrmException ;
private java.lang.String id ( java.lang.String refName ) throws java.io.IOException { return org.eclipse.jgit.lib.ObjectId.toString ( repo.getRepository ( ) . getRef ( refName ) . getObjectId ( ) ) ; }
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( com.google.gerrit.testutil.GerritServerTests.isNoteDbTestEnabled ( ) ) . isFalse ( ) ; notesMigration.setAllEnabled ( false ) ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.server.project.RefControl ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit rc ) ;
public void copySettingsFrom ( final com.google.gerrit.reviewdb.Project update ) { description = update.description ; useContributorAgreements = update.useContributorAgreements ; useSignedOffBy = update.useSignedOffBy ; requireChangeID = update.requireChangeID ; submitType = update.submitType ; }
public boolean isOwner ( ) { return ( canPerform ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchLineComment > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment.Key > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
protected void insertTitleWidget ( final com.google.gwt.user.client.ui.Widget w ) { header.insert ( w , 0 ) ; }
void evictAfterRename ( com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName ) throws java.io.IOException ;
public com.google.gerrit.reviewdb.client.PatchSetApproval getSubmitter ( final com.google.gerrit.reviewdb.client.PatchSet.Id c ) { return com.google.gerrit.server.git.MergeUtil.getSubmitter ( db.get ( ) , c ) ; }
public static java.lang.String toUnified ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "unified" , diffBase , revision , fileName ) ; }
public com.googlesource.gerrit.plugins.cookbook.Description getDescription ( com.google.gerrit.server.change.RevisionResource resource ) { return new com.googlesource.gerrit.plugins.cookbook.Description ( ) . setLabel ( "Say hello" ) . setTitle ( "Say hello in different languages" ) . setVisible ( ( ( user.get ( ) ) instanceof com.google.gerrit.server.IdentifiedUser ) ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.webui.TopMenu.class ) . to ( com.googlesource.gerrit.plugins.javamelody.MonitoringTopMenu.class ) ; }
public void saveDraft ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > onSave ) { if ( ( isOpen ( ) ) && ( text.isVisible ( ) ) ) { onSave ( onSave ) ; } else { onSave.onSuccess ( VoidResult.INSTANCE ) ; } }
private org.eclipse.jgit.revwalk.RevCommit writeCommit ( java.lang.String body ) throws java.lang.Exception { return writeCommit ( body , com.google.gerrit.server.notedb.ChangeNoteUtil.newIdent ( changeOwner.getAccount ( ) , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , serverIdent , "Anonymous Coward" ) ) ; }
public void addOp ( com.google.gerrit.server.git.BatchUpdate bu , com.google.gerrit.reviewdb.client.Branch.NameKey branch ) { bu.addRepoOnlyOp ( new com.google.gerrit.server.git.SubmoduleOp.GitlinkOp ( branch ) ) ; }
static com.google.gerrit.client.account.AccountApi.GpgKeysInput remove ( java.lang.Iterable < java.lang.String > fingerprints ) { return com.google.gerrit.client.account.AccountApi.GpgKeysInput.createRemove ( com.google.gerrit.client.rpc.Natives.arrayOf ( fingerprints ) ) ; }
public com.google.gerrit.extensions.api.changes.IncludedInInfo includedIn ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return includedIn.apply ( change ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Could not extract IncludedIn data" , e ) ; } }
public void setUp ( ) throws java.lang.Exception { branch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( project , "test" ) ; branch ( ) . create ( new com.google.gerrit.extensions.api.projects.BranchInput ( ) ) ; }
public java.lang.String getName ( ) { java.lang.String ret = "" ; if ( ( chopped.length ) > 0 ) { ret = chopped [ 0 ] ; } return ret ; }
public static void all ( com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . addParameterTrue ( "all" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
private com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo getPeerInfo ( ) throws com.ericsson.gerrit.plugins.highavailability.forwarder.rest.PeerInfoNotAvailableException { com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo info = peerInfo.get ( ) . orNull ( ) ; if ( info == null ) { throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.PeerInfoNotAvailableException ( ) ; } return info ; }
private com.google.gerrit.server.change.GetDiff.ContentEntry entry ( ) { com.google.gerrit.server.change.GetDiff.ContentEntry e = new com.google.gerrit.server.change.GetDiff.ContentEntry ( ) ; lines.add ( e ) ; return e ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { cookieProvider.init ( ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , getRefControl ( ) . forUser ( who ) , getChange ( ) ) ; }
public boolean isAutomaticMembership ( ) { return automaticMembership ; }
public void assertCanDelete ( com.google.gerrit.reviewdb.client.Project project ) throws com.google.gwtorm.server.OrmException , com.googlesource.gerrit.plugins.deleteproject.database.CannotDeleteProjectException { if ( db.submoduleSubscriptions ( ) . bySubmoduleProject ( project.getNameKey ( ) ) . iterator ( ) . hasNext ( ) ) { throw new com.googlesource.gerrit.plugins.deleteproject.database.CannotDeleteProjectException ( "Project is subscribed by other projects." ) ; } }
public void error ( com.google.gerrit.server.git.ValidationError error ) { com.google.gerrit.pgm.init.api.AllProjectsConfig.log.error ( ( ( ( "Error parsing file " + ( com.google.gerrit.server.git.GroupList.FILE_NAME ) ) + ": " ) + ( error.getMessage ( ) ) ) ) ; }
public com.google.gerrit.client.admin.PermissionRuleEditor create ( int index ) { com.google.gerrit.client.admin.PermissionRuleEditor subEditor = new com.google.gerrit.client.admin.PermissionRuleEditor ( readOnly , section , value , validRange ) ; ruleContainer.insert ( subEditor , index ) ; return subEditor ; }
private static java.util.List < java.lang.Integer > get ( java.lang.String value ) { return com.google.gerrit.testutil.IndexVersions.get ( ChangeSchemaDefinitions.INSTANCE , "test" , value ) ; }
public boolean hasChange ( ) { return true ; }
public com.google.gerrit.server.change.ChangeInserter setDraft ( boolean draft ) { change.setStatus ( ( draft ? Change.Status.DRAFT : Change.Status.NEW ) ) ; patchSet.setDraft ( draft ) ; return this ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( draft , null ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft" , e ) ; } }
public java.lang.Object apply ( com.google.gerrit.server.group.GroupResource resource , com.google.gerrit.server.group.CreateGroup.Input input ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( "Resource already exists" ) ; }
private void edit ( ) { text.setText ( comment.getMessage ( ) ) ; expandText ( ) ; stateEdit ( true ) ; text.setFocus ( true ) ; }
public void nameEscaperDoesNotEscapeSlashes ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo/bar" ) ) . isEqualTo ( "foo/bar" ) ; }
private PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) != null ) ? base : revision ; }
private boolean canUploadMerges ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( getRefName ( ) ) ) ) . canPerform ( Permission.PUSH_MERGE ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
private void display ( com.google.gerrit.client.changes.ChangeInfo info ) { hashtagsText.setInnerSafeHtml ( formatHashtags ( info ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo detail ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDetail.apply ( rsrc ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve group" , e ) ; } }
public boolean enableDefaultUi ( ) { return ( ! ( headless ) ) && ( ! ( enablePolyGerrit ) ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.PatchSetApproval > allApprovals ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.ImmutableList.copyOf ( allApprovalsMap ( db ) . values ( ) ) ; }
public void testContainsFalseWithSingleElement ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; com.google.common.truth.Truth.assertThat ( ds ) . doesNotContain ( 3 ) ; }
public void remove ( final K key ) { if ( key != null ) { self.remove ( key ) ; } }
private void fireEventForUnrestrictedListeners ( final com.google.gerrit.server.events.ChangeEvent event ) { for ( com.google.gerrit.common.ChangeListener listener : unrestrictedListeners ) { listener.onChangeEvent ( event ) ; } }
public boolean apply ( com.google.gerrit.server.account.ExternalId externalId ) { return externalId.key ( ) . get ( ) . startsWith ( IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX ) ; }
public void setIntHeader ( java.lang.String name , int value ) { headers.removeAll ( name ) ; addIntHeader ( name , value ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( name , version , pluginFile ) ; }
public java.lang.String getStory ( final java.lang.String issueId ) throws java.io.IOException { return getData ( ( ( ( ( this . baseUrl ) + ( com.googlesource.gerrit.plugins.its.storyboard.StoryboardClient.STORIES_ENDPOINT ) ) + "/" ) + issueId ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { display ( result ) ; }
public static com.google.gerrit.common.data.GroupReference groupReference ( java.lang.String orgName ) { return new com.google.gerrit.common.data.GroupReference ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.uuid ( orgName ) , ( ( com.googlesource.gerrit.plugins.github.group.GitHubOrganisationGroup.NAME_PREFIX ) + orgName ) ) ; }
public static java.util.Set < java.lang.String > getNameParts ( java.lang.String name ) { return com.google.gerrit.server.index.SchemaUtil.getNameParts ( name , java.util.Collections.emptySet ( ) ) ; }
org.parboiled.Rule Factor ( ) { return FirstOf ( Number ( ) , Sequence ( '(' , Expression ( ) , ')' ) ) ; }
protected void configure ( ) { listener ( ) . to ( com.google.gerrit.sshd.SshLog.class ) ; listener ( ) . to ( com.google.gerrit.sshd.SshDaemon.class ) ; }
public com.google.gerrit.server.change.ListComments list ( ) { BRANCH ( ( f38c1c = com.google.gerrit.server.PatchLineCommentsUtil.draftByChangeAuthor ) ) ; return list ; }
private void updatePatchSetRef ( com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { repo.update ( ps.getId ( ) . toRefName ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( ps.getRevision ( ) . get ( ) ) ) ; }
public com.google.gwtexpui.safehtml.client.SafeHtml linkify ( ) { final java.lang.String part = "(?:" + ( ( "[a-zA-Z0-9$_.+!*',%;:@=?#/~-]" + "|&(?!lt;|gt;)" ) + ")" ) ; return replaceAll ( ( ( ( ( ( ( ( ( ( "(https?://" + part ) + "{2,}" ) + "(?:[(]" ) + part ) + "*" ) + "[)])*" ) + part ) + "*" ) + ")" ) , "<a href=\"$1\" target=\"_blank\">$1</a>" ) ; }
private void preMerge ( final com.google.gerrit.server.git.SubmitStrategy strategy , final java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run ( branchTip , toMerge ) ; refLogIdent = strategy.getRefLogIdent ( ) ; commits.putAll ( strategy.getNewCommits ( ) ) ; }
public void setContactFiled ( ) { contactFiledOn = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
public void deleteDraftChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) { deleteDraftChangeFactory.create ( patchSetId ) . to ( callback ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) << ( t.intValue ( ) ) ) ) ; }
java.lang.String name ( ) default "" ;
private java.lang.String link ( final com.google.gerrit.client.dashboards.DashboardInfo item ) { return "/dashboard/?" + ( item.parameters ( ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return indexAsync ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public void check ( com.google.gerrit.server.permissions.ChangePermissionOrLabel perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( perm.describeForException ( ) ) + " denied" ) ) ; } }
public void createOtherAndGrantPermissions ( ) throws java.lang.Exception { other = accounts.create ( "other" , "other@example.com" , "other" ) ; grant ( project , "refs/*" , Permission.FORGE_COMMITTER , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
private void log ( final int rc ) { synchronized ( this ) { if ( ! ( logged ) ) { log.onExecute ( rc ) ; logged = true ; } } }
void onReplace ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void stop ( ) { if ( ( acceptor ) != null ) { try { acceptor.dispose ( ) ; } finally { acceptor = null ; } } }
public void evictMembersOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
protected void configure ( ) { listener ( ) . to ( LocalDiskRepositoryManager.Lifecycle.class ) ; listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( WorkQueue.Lifecycle.class ) ; }
public static java.lang.String toPatchSideBySide2 ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "cm" , diffBase , revision , fileName ) ; }
void onSubmit ( com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.SubmitAction.call ( changeId , revision ) ; }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content ) ; content = null ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { if ( "" . equals ( box.getText ( ) ) ) { box.setText ( Util.C.defaultProjectName ( ) ) ; box.addStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public static void edit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . get ( cb ) ; }
private java.io.File gitDirOf ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new java.io.File ( getBasePath ( ) , name.get ( ) ) ; }
public void getNonExistingChildProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( GET ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/children/non-existing" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , false , expectedStatus ) ; }
public void deleteTags ( com.google.gerrit.extensions.api.projects.DeleteTagsInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteTags.apply ( checkExists ( ) , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete tags" , e ) ; } }
public java.lang.String getRefPattern ( ) { return key.refPattern.get ( ) ; }
private void initPatchSet ( ) throws com.google.gwtorm.server.OrmException { if ( ( patchSet ) == null ) { patchSet = cd.currentPatchSet ( ) ; } }
protected int getValueInt ( com.google.gerrit.server.query.change.ChangeData changeData ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData.ChangedLines changedLines = changeData.changedLines ( ) ; return ( changedLines.insertions ) + ( changedLines.deletions ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canMerge ( args.mergeSorter , args.repo , args.useContentMerge , mergeTip , toMerge ) ; }
public void addOtherUsersGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getId ( ) , new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( "foo:myId" ) ) ; db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( extId ) ) ; com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( "GPG key already associated with another account" ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; }
private void initSshd ( ) { sshInjector = createSshInjector ( ) ; manager.add ( sshInjector ) ; }
public final native void retainHeader ( boolean r ) ;
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { hide ( ) ; }
public int compare ( final com.google.gerrit.client.data.ChangeInfo o1 , final com.google.gerrit.client.data.ChangeInfo o2 ) { return ( o1.getId ( ) . get ( ) ) - ( o2.getId ( ) . get ( ) ) ; }
private void deleteRef ( java.lang.String refName ) throws java.lang.Exception { org.eclipse.jgit.lib.RefUpdate ru = repo.getRepository ( ) . updateRef ( refName , true ) ; ru.setForceUpdate ( true ) ; com.google.common.truth.Truth.assertThat ( ru.delete ( ) ) . isEqualTo ( RefUpdate.Result.FORCED ) ; }
public com.google.gerrit.acceptance.RestResponse delete ( java.lang.String endPoint ) throws java.io.IOException { org.apache.http.client.methods.HttpDelete delete = new org.apache.http.client.methods.HttpDelete ( ( "http://localhost:8080/a" + endPoint ) ) ; return new com.google.gerrit.acceptance.RestResponse ( getClient ( ) . execute ( delete ) ) ; }
static com.google.gerrit.client.rpc.NativeString wrap ( java.lang.String value ) { com.google.gerrit.client.rpc.NativeString ns = ( ( com.google.gerrit.client.rpc.NativeString ) ( createObject ( ) ) ) ; ns.set ( value ) ; return ns ; }
void onAddGroupByClick ( com.google.gwt.event.dom.client.ClickEvent event ) { addGroup ( ) ; }
public java.io.Reader getReader ( ) throws java.io.IOException , java.lang.IllegalStateException { java.io.Reader reader = new java.io.InputStreamReader ( response.getEntity ( ) . getContent ( ) ) ; reader.skip ( JSON_MAGIC.length ) ; return reader ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "project" , project ) . add ( "branch" , branch ) . toString ( ) ; }
public com.google.gerrit.server.account.CapabilityControl create ( com.google.gerrit.server.CurrentUser user ) { return new com.google.gerrit.server.account.CapabilityControl ( projectCache , user ) ; }
public void setParent ( final com.google.gerrit.reviewdb.Project.NameKey parentProjectName ) { parent = parentProjectName ; }
private void setRefLogIdent ( final com.google.gerrit.reviewdb.PatchSetApproval submitAudit ) { if ( submitAudit != null ) { branchUpdate.setRefLogIdent ( identifiedUserFactory.create ( submitAudit.getAccountId ( ) ) . newPersonIdent ( ) ) ; } }
private void checkSequenceValue ( int s ) { if ( s < 1 ) { throw new java.lang.IllegalArgumentException ( ( "invalid sequence number " + s ) ) ; } }
public static com.google.gerrit.client.changes.QueryScreen forQuery ( java.lang.String query , java.lang.String position ) { return new com.google.gerrit.client.changes.QueryScreen ( com.google.gwtorm.client.KeyUtil.encode ( query ) , position ) ; }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( author.getFullName ( ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.AccountInfo > getPastAssignees ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPastAssignees.apply ( change ) . value ( ) ; } catch ( java.lang.Exception e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get past assignees" , e ) ; } }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > name ( com.google.gerrit.reviewdb.client.Project.NameKey nameKey ) { return new com.google.gerrit.server.query.project.ProjectPredicates.ProjectPredicate ( com.google.gerrit.server.index.project.ProjectField.NAME , nameKey.get ( ) ) ; }
com.google.gerrit.prettify.common.PrettyFormatter.Tag pop ( java.lang.StringBuilder buf , java.lang.String html ) { return this ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > isVisibleToAll ( ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.IS_VISIBLE_TO_ALL , "1" ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; setTitleText ( Util.M.changesOpenInProject ( projectKey.get ( ) ) ) ; }
public com.google.gerrit.server.project.ChangeControl controlFor ( final com.google.gerrit.reviewdb.Change change ) { return new com.google.gerrit.server.project.ChangeControl ( this , change ) ; }
public final native void setHeight ( java.lang.String h ) ;
protected void onClick ( final com.google.gwt.user.client.Event event ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) , createScreen ( ) ) ; com.google.gwt.user.client.DOM.eventPreventDefault ( event ) ; }
private boolean canImport ( ) { com.google.gerrit.server.account.CapabilityControl ctl = userProvider.get ( ) . getCapabilities ( ) ; return ( ctl.canAdministrateServer ( ) ) || ( ctl.canPerform ( ( ( ( pluginName ) + "-" ) + ( ImportCapability.ID ) ) ) ) ; }
private org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( author.getFullName ( ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public java.util.List < org.pegdown.ast.Node > parse ( org.parboiled.support.StringBuilderVar body ) { if ( ( parser ) == null ) { parser = com.google.gitiles.doc.GitilesMarkdown.newParser ( ) ; } return parser.parseMarkdown ( body.getChars ( ) ) . getChildren ( ) ; }
public com.google.gerrit.server.change.ChangeInserter setRunHooks ( boolean runHooks ) { this . runHooks = runHooks ; return this ; }
public java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.fullName ( change.get ( ) . branch ) ; }
public void newPatchSetByOwnerOnReviewableChangeToWip ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%wip" , sc.owner ) ; assertThat ( sender ) . notSent ( ) ; }
public static void restore ( int id , java.lang.String path , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.Input in = com.google.gerrit.client.changes.ChangeEditApi.Input.create ( ) ; in.restore_path ( path ) ; com.google.gerrit.client.changes.ChangeApi.edit ( id ) . post ( in , cb ) ; }
public java.util.Collection < com.google.gerrit.client.reviewdb.ProjectRight > getWildcardRights ( ) { return get ( wildProject ) . getRights ( ) ; }
public static com.google.gwtexpui.safehtml.client.SafeHtml get ( final com.google.gwt.user.client.Element e ) { return new com.google.gwtexpui.safehtml.client.SafeHtmlString ( com.google.gwt.user.client.DOM.getInnerHTML ( e ) ) ; }
public com.google.gerrit.httpd.raw.ResourceServlet.Resource call ( ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource ( getLastModifiedTime ( p ) , com.google.gerrit.httpd.raw.ResourceServlet.contentType ( p.toString ( ) ) , java.nio.file.Files.readAllBytes ( p ) ) ; }
protected com.google.gerrit.client.ui.Screen createScreen ( ) { return new com.google.gerrit.client.changes.AccountDashboardScreen ( accountId ) ; }
private void display ( ) { display ( false ) ; }
public void onSuccess ( com.google.gerrit.client.info.AccountInfo result ) { onCloseForm ( ) ; assigneeLink.setText ( "" ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.index.change.IndexRewriter.class ) ; bind ( com.google.gerrit.server.index.IndexCollection.class ) ; listener ( ) . to ( com.google.gerrit.server.index.IndexCollection.class ) ; factory ( ChangeIndexer.Factory.class ) ; }
public void expiredKey ( ) throws java.lang.Exception { assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.key3 ( ) , "Key is expired" ) ; }
public java.lang.Boolean run ( com.google.gerrit.client.reviewdb.ReviewDb db , com.google.gwtorm.client.Transaction txn , boolean retry ) throws com.google.gwtorm.client.OrmException { return doAbandonChange ( message , change , patchSetId , cmsg , db , txn ) ; }
private void padLineNumber ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTd ( ) ; m.setStyleName ( "LineNumber" ) ; m.closeTd ( ) ; }
private com.google.gerrit.common.data.PatchScriptSettings.Whitespace getIgnoreWhitespace ( ) { final int sel = ignoreWhitespace.getSelectedIndex ( ) ; if ( 0 <= sel ) { return com.google.gerrit.common.data.PatchScriptSettings.Whitespace.valueOf ( ignoreWhitespace.getValue ( sel ) ) ; } return value.getWhitespace ( ) ; }
java.lang.String getAttribute ( com.google.gson.JsonObject json , java.lang.String name ) { com.google.gson.JsonPrimitive prim = getAsJsonPrimitive ( json , name ) ; return ( prim != null ) && ( prim.isString ( ) ) ? prim.getAsString ( ) : null ; }
private void writeFile ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { res.setStatus ( HttpServletResponse.SC_NO_CONTENT ) ; streamRequestToFile ( req , resolveFile ( req ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doRemove ( ad ) ; }
public boolean handles ( java.io.File srcFile ) { return srcFile.getName ( ) . endsWith ( com.googlesource.gerrit.plugins.cookbook.pluginprovider.HelloSshPluginProvider.SSH_EXT ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > equalsName ( java.lang.String name ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.NAME_PART , AccountQueryBuilder.FIELD_NAME , name.toLowerCase ( ) ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { try { return list.get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn ( "Cannot list available projects" , e ) ; return java.util.Collections.emptyList ( ) ; } }
public void onChangeEvent ( com.google.gerrit.server.events.ChangeEvent event ) { queue.add ( event ) ; executor.submit ( new ChangeRunner ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser get ( ) { return createNew ( ) ; }
public synchronized java.util.List < com.googlesource.gerrit.plugins.replication.Destination > getDestinations ( ) { reloadIfNeeded ( ) ; return currentConfig.getDestinations ( ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.AccountCapabilities ac ) { display ( serviceUserInfo , ( ( configInfo.getAllowEmail ( ) ) || ( ac.canPerform ( "administrateServer" ) ) ) ) ; }
public com.google.gerrit.server.WebLinks get ( ) { com.google.gerrit.server.WebLinks webLinks = new com.google.gerrit.server.WebLinks ( patchSetLinks , projectLinks , branchLinks ) ; return webLinks ; }
public static com.google.gerrit.server.index.FieldDef.Builder < java.lang.Integer > integer ( java.lang.String name ) { return new com.google.gerrit.server.index.FieldDef.Builder ( FieldType.INTEGER , name ) ; }
protected abstract java.lang.Object createServiceHandle ( ) throws java.lang.Exception ;
public com.google.gerrit.reviewdb.server.PatchSetAccess patchSets ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
com.google.gerrit.extensions.client.Side getStoredSideFromDisplaySide ( com.google.gerrit.client.diff.DisplaySide side ) { if ( ( side == ( DisplaySide.A ) ) && ( ( ( base ) == null ) || ( ( base.get ( ) ) < 0 ) ) ) { return com.google.gerrit.extensions.client.Side.PARENT ; } return com.google.gerrit.extensions.client.Side.REVISION ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( PageLinks.MINE ) ; }
protected java.lang.String getRefName ( ) { return GitRepositoryManager.REF_CONFIG ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.extensions.restapi.TopLevelResource > list ( ) { return list.get ( ) . setFormat ( OutputFormat.JSON ) ; }
public void start ( ) { queue.getDefaultQueue ( ) . scheduleWithFixedDelay ( compresser , 1 , 24 , java.util.concurrent.TimeUnit.HOURS ) ; }
public boolean allowsEdit ( com.google.gerrit.reviewdb.client.Account.FieldName field ) { return editableAccountFields.contains ( field ) ; }
private PatchSet.Id getPatchSetIdFromSide ( com.google.gerrit.client.diff.DisplaySide side ) { return ( side == ( DisplaySide.A ) ) && ( ( base ) != null ) ? base : revision ; }
private boolean isNewRef ( com.googlesource.gerrit.plugins.refprotection.Event event ) { return event.getOldObjectId ( ) . equals ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) . getName ( ) ) ; }
public static void defaultDashboard ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.client.dashboards.DashboardInfo > callback ) { new com.google.gerrit.client.rpc.RestApi ( ( ( com.google.gerrit.client.dashboards.DashboardList.base ( project ) ) + "default" ) ) . get ( callback ) ; }
private boolean isHttpEnabled ( ) { return ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.ANON_HTTP ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.HTTP ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.project.ChangeControl control , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { return abandon ( control , msgTxt , NotifyHandling.ALL ) ; }
public final com.google.gerrit.server.index.Schema.Builder < T > add ( com.google.gerrit.server.index.FieldDef < T , ? > ... fields ) { this . fields.addAll ( java.util.Arrays.asList ( fields ) ) ; return this ; }
protected void format ( ) { formatSalutation ( ) ; formatChangeDetail ( ) ; appendText ( "\n" ) ; appendText ( ( ( " " + ( getPullUrl ( ) ) ) + "\n" ) ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet ( java.lang.String changeId ) throws java.lang.Exception { return db.patchSets ( ) . get ( getChange ( changeId ) . currentPatchSetId ( ) ) ; }
public void onSubmit ( com.google.gwt.user.client.ui.FormSubmitEvent event ) { event.setCancelled ( true ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSign ( ) ; }
private static com.google.gerrit.server.notedb.ChangeDraftUpdate.Key key ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { return new com.google.gerrit.server.notedb.AutoValue_ChangeDraftUpdate_Key ( c.getRevId ( ) , c.getKey ( ) ) ; }
public abstract void display ( com.google.gerrit.common.data.CommentDetail comments ) ;
synchronized com.google.gerrit.sshd.SshScope.Context subContext ( com.google.gerrit.sshd.SshSession newSession , java.lang.String newCommandLine ) { return new com.google.gerrit.sshd.SshScope.Context ( this , newSession , newCommandLine ) ; }
public void setTimeForTesting ( ) { systemTimeZone = java.lang.System.setProperty ( "user.timezone" , "US/Eastern" ) ; com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep ( 1 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
static void savePublic ( final org.eclipse.jgit.storage.file.FileBasedConfig sec ) throws java.io.IOException { if ( com.google.gerrit.pgm.init.InitUtil.modified ( sec ) ) { sec.save ( ) ; } }
public com.google.gerrit.server.CurrentUser runAs ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id , @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , accountCache , groupBackend , com.google.inject.util.Providers.of ( remotePeer ) , null , id , caller ) ; }
public static java.lang.String toGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , java.lang.String panel ) { return ( ( "/admin/groups/uuid-" + ( uuid.toString ( ) ) ) + "," ) + panel ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( com.google.gerrit.client.Gerrit.getUserAccount ( ) ) ; display ( ) ; }
public com.google.gerrit.server.change.PatchSetInserter setValidateForReceiveCommits ( boolean validate ) { this . validateForReceiveCommits = validate ; return this ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onExpandAll ( null ) ; }
private boolean can ( com.google.gerrit.extensions.api.access.GlobalOrPluginPermission perm ) throws com.google.gerrit.server.permissions.PermissionBackendException { return user.getCapabilities ( ) . doCanForDefaultPermissionBackend ( perm ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { throw new com.google.inject.OutOfScopeException ( "No user during ChangeIndexer" ) ; }
public void setBranch ( final java.lang.String pattern ) { branch = pattern ; }
protected void configureServlets ( ) { serve ( "/say-hello/*" ) . with ( com.googlesource.gerrit.plugins.cookbook.HelloWorldServlet.class ) ; }
public void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . notSent ( ) ; } ) ; }
public void onLoad ( ) { setTitleText ( ( "Change " + ( changeId.get ( ) ) ) ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; message.setFocus ( true ) ; }
public void cleanupIndex ( ) { com.google.gerrit.elasticsearch.ElasticQueryChangesTest.node.client ( ) . admin ( ) . indices ( ) . prepareDelete ( com.google.gerrit.elasticsearch.ElasticQueryChangesTest.INDEX_NAME ) . execute ( ) ; com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes ( ) ; }
public com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup create ( final com.google.gerrit.server.group.GroupResource group , final java.lang.String id ) { return new com.google.gerrit.server.group.AddIncludedGroups.PutIncludedGroup ( put , com.google.gerrit.server.util.Url.decode ( id ) ) ; }
public boolean isEnabled ( com.google.gerrit.server.change.RevisionResource resource ) { return resource.getControl ( ) . getProjectControl ( ) . canUpload ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.common.data.ProjectDetail > event ) { display ( event.getValue ( ) ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupType ( ) ; initMemberList ( ) ; initExternal ( ) ; }
protected java.util.List < com.google.gerrit.extensions.common.ChangeInfo > query ( java.lang.Object query ) throws java.lang.Exception { return query ( newQuery ( query ) ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNew ( ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , c ) . load ( ) ; }
public void contextInitialized ( final javax.servlet.ServletContextEvent event ) { super . contextInitialized ( event ) ; init ( ) ; manager.start ( ) ; }
private org.eclipse.jgit.lib.PersonIdent toCommitterIdent ( final com.google.gerrit.reviewdb.client.PatchSetApproval audit ) { if ( audit != null ) { return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newCommitterIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; } return myIdent ; }
protected void configureServlets ( ) { filter ( "/" ) . through ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.class ) ; serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertLoginServlet.class ) ; }
public static com.google.gerrit.server.index.FieldDef.Builder < java.lang.String > exact ( java.lang.String name ) { return new com.google.gerrit.server.index.FieldDef.Builder ( FieldType.EXACT , name ) ; }
public java.lang.String getPluginName ( java.io.File srcFile ) { java.lang.String srcFileName = srcFile.getName ( ) ; return srcFileName.substring ( 0 , ( ( srcFileName.length ( ) ) - ( com.googlesource.gerrit.plugins.cookbook.pluginprovider.HelloSshPluginProvider.SSH_EXT.length ( ) ) ) ) ; }
public void set ( F1 field1 , V value ) { com.google.gerrit.metrics.dropwizard.CallbackMetricImpl1.Impl1.getOrCreate ( field1 ) . value = value ; }
protected boolean onSave ( org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { throw new java.lang.UnsupportedOperationException ( ) ; }
void onRebaseEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.rebaseEdit ( changeId ) ; }
private java.lang.String urlDelete ( com.google.gerrit.reviewdb.client.Change c ) { return ( ( ( ( "/changes/" + ( c.getChangeId ( ) ) ) + "/edits/" ) + 0 ) + "/files/" ) + ( com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME ) ; }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( action ) ; }
public final boolean siteHasUsernames ( ) { if ( ( ( isCustomExtension ( ) ) && ( ( httpPasswordUrl ( ) ) != null ) ) && ( ! ( canEdit ( FieldName.USER_NAME ) ) ) ) { return false ; } return true ; }
public void isEnabledForSingleRef ( ) throws java.lang.Exception { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = getConfig ( ( "[plugin \"uploadvalidator\"]\n" + ( " ref = refs/heads/anyref\n" + " blockedFileExtension = jar" ) ) ) ; assertThat ( config.isEnabledForRef ( projectName , "refs/heads/anyref" ) ) . isTrue ( ) ; }
public void createMergeChange_Conflicts ( ) throws java.lang.Exception { changeInTwoBranches ( "shared.txt" , "shared.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "master" , "branchA" , ChangeStatus.NEW ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.RestApiException.class , "merge conflict" ) ; }
public void printJson ( final java.lang.StringBuilder sb , final java.sql.Timestamp o ) { sb.append ( '"' ) ; sb.append ( o ) ; sb.append ( '"' ) ; }
public void nonexistentEmail ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.UnprocessableEntityException.class ) ; exception.expectMessage ( "cannot find account doesnotexist@invalid.com" ) ; gApi.projects ( ) . name ( normalProject.get ( ) ) . checkAccess ( new com.google.gerrit.extensions.api.config.AccessCheckInput ( "doesnotexist@invalid.com" , null ) ) ; }
public void setNew_MethodNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = "newUsername" ; adminSession.put ( ( ( "/accounts/" + ( admin.username ) ) + "/username" ) , in ) . assertMethodNotAllowed ( ) ; }
protected void setDateText ( final java.lang.String dateText ) { header.setText ( 0 , 2 , dateText ) ; }
static java.lang.String editRefName ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { return java.lang.String.format ( "%s/edit-%d" , com.google.gerrit.reviewdb.client.RefNames.refsUsers ( accountId ) , changeId.get ( ) ) ; }
public com.googlesource.gerrit.plugins.oauth.Verb getAccessTokenVerb ( ) { return Verb.POST ; }
public boolean execute ( ) { editArea.setCursorPos ( msg.length ( ) ) ; return false ; }
public void check ( com.google.gerrit.server.permissions.RefPermission perm ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException { if ( ! ( can ( perm ) ) ) { throw new com.google.gerrit.extensions.restapi.AuthException ( ( ( perm.describeForException ( ) ) + " not permitted" ) ) ; } }
private static synchronized com.google.gerrit.git.WorkQueue.Executor getDefaultQueue ( ) { if ( ( com.google.gerrit.git.WorkQueue.defaultQueue ) == null ) { com.google.gerrit.git.WorkQueue.defaultQueue = com.google.gerrit.git.WorkQueue.createQueue ( 1 , "WorkQueue" ) ; } return com.google.gerrit.git.WorkQueue.defaultQueue ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
public com.google.gerrit.server.project.ChangeControl forUser ( final com.google.gerrit.server.CurrentUser who ) { return new com.google.gerrit.server.project.ChangeControl ( approvalsUtil , changeDataFactory , getRefControl ( ) . forUser ( who ) , notes ) ; }
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( formatter , project , resource , revId ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setShowSiteHeader ( val ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; }
private java.util.Collection < com.google.gerrit.server.index.account.AccountIndex > getWriteIndexes ( ) { return ( indexes ) != null ? indexes.getWriteIndexes ( ) : java.util.Collections.singleton ( index ) ; }
public static java.lang.String toAccountDashboard ( final com.google.gerrit.reviewdb.Account.Id acct ) { return "dashboard," + ( acct.toString ( ) ) ; }
protected void onOpenItem ( final com.google.gerrit.client.reviewdb.AccountGroup item ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.Link.toAccountGroup ( item.getId ( ) ) ) ; }
public com.google.gerrit.extensions.common.GroupInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply ( rsrc ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve group" , e ) ; } }
private java.lang.String urlPublishEdit ( ) { return ( urlDeleteEdit ( ) ) + "/publish/" ; }
com.googlesrouce.gerrit.plugins.github.git.GitClone create ( @ com.google.inject.assistedinject.Assisted ( value = "organisation" ) java.lang.String organisation , @ com.google.inject.assistedinject.Assisted ( value = "name" ) java.lang.String repository ) ;
public void setTitleText ( final java.lang.String text ) { com.google.gwt.user.client.DOM.setInnerText ( headerElem , text ) ; }
public com.google.gerrit.server.change.Description getDescription ( com.google.gerrit.server.change.ChangeResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Unignore" ) . setTitle ( "Unignore the change" ) . setVisible ( ( ( ! ( rsrc.isUserOwner ( ) ) ) && ( isIgnored ( rsrc ) ) ) ) ; }
public java.lang.String getCookie ( com.gitblit.models.UserModel model ) { return null ; }
void visit ( com.google.gitiles.doc.DivNode node ) ;
int getHeaderHeight ( ) { int h = patchSetSelectBoxA.getOffsetHeight ( ) ; if ( header ) { h += diffHeaderRow.getOffsetHeight ( ) ; } return h ; }
public void addChangeListener ( com.google.gerrit.common.ChangeListener listener , com.google.gerrit.server.CurrentUser user ) ;
public < K , V > com.google.common.cache.Cache < K , V > build ( com.google.gerrit.server.cache.CacheBinding < K , V > def ) { return create ( def , false ) . build ( ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { return java.util.Collections.emptySet ( ) ; }
public void setNotifyAllComments ( final boolean a ) { notifyAllComments = a ; }
public Change.Key getChangeKey ( ) { return null ; }
void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid ) throws java.io.IOException ;
public com.google.gerrit.server.update.BatchUpdate addOp ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gerrit.server.update.BatchUpdate.Op op ) { com.google.common.base.Preconditions.checkArgument ( ( ! ( op instanceof com.google.gerrit.server.update.BatchUpdate.InsertChangeOp ) ) , "use insertChange" ) ; com.google.common.base.Preconditions.checkNotNull ( op ) ; ops.put ( id , op ) ; return this ; }
private static PatchSet.Id str2PatchSetId ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String ps ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id , java.lang.Integer.parseInt ( ps.replaceFirst ( "\\+$" , "" ) ) , ps.endsWith ( "+" ) ) ; }
abstract void setShowLineNumbers ( boolean b ) ;
protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository ( ) { return repository ; }
public void resetToDefaults ( ) { defaultContext = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_CONTEXT ; maximumPageSize = com.google.gerrit.reviewdb.AccountGeneralPreferences.DEFAULT_PAGESIZE ; showSiteHeader = true ; useFlashClipboard = true ; downloadUrl = null ; downloadCommand = null ; }
public void visit ( org.pegdown.ast.TableRowNode node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; table.startRow ( ) ; wrapChildren ( "tr" , node ) ; }
protected com.google.inject.Injector createInjector ( com.google.gerrit.lifecycle.LifecycleManager lifecycle ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; luceneConfig.setInt ( "index" , "lucene" , "testVersion" , 14 ) ; return com.google.gerrit.testutil.InMemoryModule.createInjector ( lifecycle , luceneConfig ) ; }
private boolean canRunUploadPack ( ) { for ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group : uploadGroups ) { if ( match ( group ) ) { return true ; } } return false ; }
private void grant ( com.google.gerrit.reviewdb.Project.NameKey project , com.google.gerrit.reviewdb.ApprovalCategory.Id categoryId , com.google.gerrit.reviewdb.AccountGroup.Id group , java.lang.String ref , int maxValue ) { grant ( project , categoryId , group , ref , maxValue , maxValue ) ; }
protected com.google.gerrit.server.change.ChangeInserter newChangeForUser ( org.eclipse.jgit.junit.TestRepository < com.google.gerrit.testutil.InMemoryRepositoryManager.Repo > repo , com.google.gerrit.reviewdb.client.Account.Id owner ) throws java.lang.Exception { return newChange ( repo , null , owner , null , null , null ) ; }
protected static java.lang.String textFooterForChange ( java.lang.String changeId , java.lang.String timestamp ) { return ( ( ( ( ( ( "Gerrit-Change-Id: " + changeId ) + "\n" ) + "Gerrit-PatchSet: 1\n" ) + "Gerrit-MessageType: comment\n" ) + "Gerrit-Comment-Date: " ) + timestamp ) + "\n" ; }
com.google.gerrit.extensions.common.CommentInfo format ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { return format ( c , true ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { addRight.setEnabled ( true ) ; nameTxt.setText ( "" ) ; display ( result ) ; }
public java.util.List < org.eclipse.jgit.dircache.DirCacheEditor.PathEdit > getPathEdits ( org.eclipse.jgit.lib.Repository repository ) { org.eclipse.jgit.dircache.DirCacheEditor.PathEdit changeContentEdit = new com.google.gerrit.server.edit.tree.ChangeFileContentModification.ChangeContent ( filePath , newContent , repository ) ; return java.util.Collections.singletonList ( changeContentEdit ) ; }
public static void main ( final java.lang.String [ ] argv ) throws com.google.gwtjsonrpc.server.XsrfException , com.google.gwtorm.client.OrmException , java.net.SocketException { com.google.gerrit.server.ssh.GerritSshDaemon.startSshd ( ) ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.changes.ChangeInfo item ) { return item.legacy_id ( ) ; }
public final native int large_change ( ) ;
public void testLinkify_TrailingComma ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A http://go.here/, B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( "A <a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>, B" ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; com.google.gerrit.client.Gerrit.doSignIn ( ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.change.ChangeResource > list ( ) { throw new java.lang.IllegalStateException ( "not yet implemented" ) ; }
public void copyStoredValues ( com.google.gerrit.rules.PrologEnvironment child ) { storedValues.putAll ( child.storedValues ) ; }
protected abstract java.lang.String parseCommandLine ( java.lang.String [ ] args ) throws com.google.gerrit.server.ssh.Failure ;
boolean yesno ( boolean def , java.lang.String msg ) ;
public java.util.Set < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getEffectiveGroups ( ) { return java.util.Collections.emptySet ( ) ; }
public static java.lang.String getSecureStoreClassName ( final java.io.File sitePath ) { if ( sitePath != null ) { return com.google.gerrit.server.config.GerritServerConfigModule.getSecureStoreFromGerritConfig ( sitePath ) ; } java.lang.String secureStoreProperty = java.lang.System.getProperty ( "gerrit.secure_store_class" ) ; return com.google.gerrit.server.config.GerritServerConfigModule.nullToDefault ( secureStoreProperty ) ; }
public void flush ( ) { synchronized ( byAccount ) { byAccount.clear ( ) ; } }
void finish ( ) throws java.io.UnsupportedEncodingException { id = java.net.URLEncoder.encode ( name , "UTF-8" ) ; }
com.google.gerrit.server.change.ChangeInserter create ( com.google.gerrit.server.project.ProjectControl ctl , com.google.gerrit.reviewdb.client.Change c , org.eclipse.jgit.revwalk.RevCommit rc ) ;
public final boolean isRepeatable ( ) { return false ; }
public void run ( ) { openIndex.close ( ) ; }
public void contextDestroyed ( final javax.servlet.ServletContextEvent event ) { com.google.gerrit.server.Lifecycle.stop ( dbInjector , sysInjector , sshInjector , webInjector ) ; super . contextDestroyed ( event ) ; }
com.google.gerrit.client.account.DiffPreferences getPrefs ( ) { return prefs ; }
public static void capabilities ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.config.CapabilityInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "config/server/capabilities" ) . get ( cb ) ; }
protected com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall createActiveCall ( final javax.servlet.http.HttpServletRequest req , final javax.servlet.http.HttpServletResponse rsp ) { return new com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall ( session.get ( ) , req , rsp ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry entry ) { addExtensionPoints ( info , rev , entry ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput createRobotCommentInput ( ) { com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = new com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput ( ) ; in.robotId = "happyRobot" ; in.robotRunId = "1" ; in.url = "http://www.happy-robot.com" ; in.line = 1 ; in.message = "nit: trailing whitespace" ; in.path = com.google.gerrit.acceptance.PushOneCommit.FILE_NAME ; return in ; }
public void onMouseMove ( com.google.gwt.event.dom.client.MouseMoveEvent event ) { resizePaddingWidget ( ) ; }
public int compare ( final com.google.gerrit.client.reviewdb.ChangeApproval a , final com.google.gerrit.client.reviewdb.ChangeApproval b ) { return a.getGranted ( ) . compareTo ( b.getGranted ( ) ) ; }
public void stop ( ) { running = false ; int discarded = config.shutdown ( ) ; if ( discarded > 0 ) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.log.warn ( java.lang.String.format ( "Cancelled %d replication events during shutdown" , discarded ) ) ; } }
private com.google.gerrit.server.patch.PatchList listFor ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( key , notes.getProjectName ( ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > index ( com.google.gerrit.server.query.change.ChangeData cd ) { return executor.submit ( indexTask ( cd ) ) ; }
public static void addRpcStatusListener ( final com.google.gwtjsonrpc.client.RpcStatusListener l ) { assert ! ( com.google.gwtjsonrpc.client.JsonUtil.listeners.contains ( l ) ) ; com.google.gwtjsonrpc.client.JsonUtil.listeners.add ( l ) ; }
public boolean canListen ( org.apache.sshd.common.SshdSocketAddress address , org.apache.sshd.common.Session session ) { return false ; }
public void testLinkify_Parens ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_WikifyTest.html ( "A http://go.here/#m() B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.wikify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( "<p>A <a href=\"http://go.here/#m()\" target=\"_blank\">http://go.here/#m()</a> B</p>" , n.asString ( ) ) ; }
public static com.google.gerrit.server.index.IndexConfig fromConfig ( org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.create ( cfg.getInt ( "index" , null , "maxLimit" , java.lang.Integer.MAX_VALUE ) ) ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = com.google.gerrit.testutil.NoteDbMode.newNotesMigrationFromEnv ( ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { event.preventDefault ( ) ; password.selectAll ( ) ; password.setFocus ( true ) ; } }
static void publish ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.publish ( id.get ( ) , revision , com.google.gerrit.client.change.ChangeActions.cs ( id , draftButtons ) ) ; }
public boolean match ( java.lang.String ref , java.lang.String username ) { return pattern.matcher ( ref ) . matches ( ) ; }
void newDraftOnGutterClick ( net.codemirror.lib.CodeMirror cm , java.lang.String gutterClass , int line ) { insertNewDraft ( cm.side ( ) , line ) ; }
public synchronized void schedule ( int idx , com.googlesrouce.gerrit.plugins.github.git.GitJob pullRequestImportJob ) { jobs.put ( idx , pullRequestImportJob ) ; executor.exec ( pullRequestImportJob ) ; }
private static java.lang.String getGerritUrl ( org.eclipse.jgit.lib.Config config ) throws javax.servlet.ServletException { java.lang.String gerritUrl = config.getString ( "gitiles" , null , "gerritUrl" ) ; if ( gerritUrl == null ) { throw new javax.servlet.ServletException ( "gitiles.gerritUrl not set" ) ; } return gerritUrl ; }
protected java.io.PrintWriter startRenderText ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { setApiHeaders ( res , com.google.gitiles.FormatType.TEXT ) ; return res.getWriter ( ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return getProjectControl ( ) . isOwner ( ) ; } return canPerform ( Permission.SUBMIT ) ; }
com.google.gerrit.client.diff.DraftBox addReplyBox ( ) { com.google.gerrit.client.diff.DraftBox box = getCommentManager ( ) . addDraftBox ( getCommentManager ( ) . createReply ( comment ) , getCm ( ) . side ( ) ) ; registerReplyBox ( box ) ; return box ; }
protected final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatches ( com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch watch = new com.google.gerrit.server.mail.ProjectWatch ( args , project , projectState , changeData ) ; return watch.getWatches ( type ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box ) { getPanelFromSide ( box.getSide ( ) ) . addFileComment ( box ) ; }
com.google.gerrit.server.git.EmailMerge create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId , com.google.gerrit.reviewdb.client.Account.Id submitter ) ;
public void index ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = newChangeData ( db , project , changeId ) ; index ( cd ) ; com.google.gerrit.server.index.change.ChangeIndexer.reindexAfterIndexUpdate ( cd ) ; }
public java.util.List < com.googlesrouce.gerrit.plugins.github.git.GHContent > getDirectoryContent ( java.lang.String path ) throws java.io.IOException { return ghRepository.getDirectoryContent ( path ) ; }
public java.util.Map < java.lang.String , java.util.Map > getBranches ( ) { return ( ( java.util.Map < java.lang.String , java.util.Map > ) ( config.get ( "branches" ) ) ) ; }
public static java.util.Optional < com.google.gerrit.reviewdb.client.Account.Id > parse ( java.lang.String str ) { try { return java.util.Optional.of ( new com.google.gerrit.reviewdb.client.Account.Id ( java.lang.Integer.parseInt ( str ) ) ) ; } catch ( java.lang.NumberFormatException e ) { return java.util.Optional.empty ( ) ; } }
protected boolean hasDifferences ( final com.google.gerrit.common.data.PatchScript script ) { boolean hasEdits = ! ( script.getEdits ( ) . isEmpty ( ) ) ; boolean hasMeta = ! ( script.getPatchHeader ( ) . isEmpty ( ) ) ; return hasEdits || hasMeta ; }
public void onSuccess ( com.google.gerrit.client.groups.MemberInfo result ) { cb.onSuccess ( com.google.gerrit.client.rpc.Natives.arrayOf ( result ) ) ; }
public void listOneGroupMember ( ) throws java.io.IOException { org.junit.Assert.assertEquals ( GET_ONE ( "/groups/Administrators/members/admin" ) . name , "admin" ) ; }
public void submitToEmptyRepo ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange ( ) ; submit ( change.getChangeId ( ) ) ; com.google.common.truth.Truth.assertThat ( getRemoteHead ( ) . getId ( ) ) . isEqualTo ( change.getCommitId ( ) ) ; }
public void visit ( org.pegdown.ast.TableRowNode node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; table.startRow ( ) ; wrapChildren ( "tr" , node ) ; }
protected java.lang.Object createServiceHandle ( ) throws java.lang.Exception { return new com.google.gerrit.client.changes.ChangeListServiceImpl ( ) ; }
public void addReviewerToReviewableChangeInReviewDb ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
public void onBrowserEvent ( final com.google.gwt.user.client.Event event ) { if ( ( ( com.google.gwt.user.client.DOM.eventGetType ( event ) ) == ( com.google.gwt.user.client.Event.ONCLICK ) ) && ( com.google.gerrit.client.ui.LinkMenuItem.impl.handleAsClick ( event ) ) ) { onClick ( event ) ; } }
public void onCreateAccount ( final com.google.gerrit.server.account.AuthRequest who , final com.google.gerrit.reviewdb.Account account ) { usernameCache.put ( who.getLocalUser ( ) , account.getId ( ) ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; refresh ( ) ; }
public boolean canForceUpdate ( ) { return ( canPushWithForce ( ) ) || ( canDelete ( ) ) ; }
public final Change.Id legacy_id ( ) { return new com.google.gerrit.reviewdb.client.Change.Id ( _number ( ) ) ; }
void clearLine ( com.google.gerrit.client.diff.DisplaySide side , int line ) { map ( side ) . remove ( line ) ; }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { initRepository ( ) ; repoView.getCommands ( ) . add ( cmd ) ; }
private com.google.gerrit.acceptance.GerritServer startImpl ( ) throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start ( serverDesc , baseConfig , sitePaths.site_path ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return com.google.gerrit.server.project.FileResource.create ( repoManager , parent.getControl ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( parent.getRevision ( ) ) , id.get ( ) ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "AuditEvent UUID:%s, SID:%s, TS:%d, who:%s, what:%s" , uuid.get ( ) , sessionId , when , who , what ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { generation = g ; save.setEnabled ( ( ! ( cm.isClean ( g ) ) ) ) ; }
public static void drop ( final com.google.gerrit.testutil.TestDatabase db ) { if ( db != null ) { db.drop ( ) ; } }
public void deleteBranchByUserWithDeletePermission ( ) throws java.lang.Exception { grantDelete ( ) ; setApiUser ( user ) ; assertDeleteSucceeds ( ) ; }
private java.lang.String encoding ( javax.servlet.http.HttpServletRequest req ) { return com.google.common.base.MoreObjects.firstNonNull ( req.getCharacterEncoding ( ) , "UTF-8" ) ; }
public java.lang.String apply ( com.google.gerrit.server.git.gpg.TestKey in ) { return com.google.common.io.BaseEncoding.base16 ( ) . encode ( in.getPublicKey ( ) . getFingerprint ( ) ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( ) { if ( isSpecialWildProject ( ) ) { return java.util.Collections.emptyList ( ) ; } return inheritedRights.get ( ) ; }
private static native < T extends com.google.gwt.core.client.JavaScriptObject > T parse0 ( com.google.gwt.core.client.JavaScriptObject p , java.lang.String s ) ;
public void testEvictGroupsMembersOK ( ) throws java.lang.Exception { setupMocks ( Constants.GROUPS_MEMBERS , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.EMPTY_JSON , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.GROUPS_MEMBERS , createMock ( AccountGroup.UUID.class ) ) ) . isTrue ( ) ; }
public com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { try { return byId.get ( accountId ) . orElse ( null ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.account.AccountCacheImpl.log.warn ( ( "Cannot load AccountState for ID " + accountId ) , e ) ; return null ; } }
public com.google.gerrit.reviewdb.AccountDiffPreference getAccountDiffPreference ( ) { com.google.gerrit.reviewdb.AccountDiffPreference diffPref = accountDiffPreferencesCache.get ( getAccountId ( ) ) ; if ( diffPref == null ) { diffPref = com.google.gerrit.reviewdb.AccountDiffPreference.createDefault ( getAccountId ( ) ) ; } return diffPref ; }
public java.lang.Runnable getRunnable ( ) { return runnable ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , change ) ; }
HEAD ( com.google.gerrit.extensions.api.changes.b3f1de dev ) { }
public void setUseContentMerge ( final boolean cm ) { useContentMerge = cm ; }
protected void configure ( ) { factory ( ReviewerResource.Factory.class ) ; factory ( AccountInfo.Loader.Factory.class ) ; factory ( EmailReviewComments.Factory.class ) ; factory ( PatchSetInserter.Factory.class ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { com.google.gerrit.client.Gerrit.doSignIn ( null ) ; }
public void setUp ( ) throws java.lang.Exception { admin = accounts.create ( "admin" , "admin@example.com" , "Administrator" , "Administrators" ) ; com.google.gerrit.acceptance.SshSession sshSession = new com.google.gerrit.acceptance.SshSession ( admin ) ; project1 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p1" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project1.get ( ) ) ; project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.git.GitUtil.createProject ( sshSession , project2.get ( ) ) ; session = new com.google.gerrit.acceptance.RestSession ( admin ) ; }
boolean isCurrent ( ) { return ( path.lastModified ( ) ) == ( modified ) ; }
public final java.lang.String getUrl ( java.lang.String project ) { return url ( ) . replace ( "${project}" , project ) ; }
public void refsDraftComments ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( accountId , changeId ) ) . isEqualTo ( "refs/draft-comments/23/1011123-67473" ) ; }
public final native java.lang.String inherited_value ( ) ;
private void doList ( ) { for ( final java.lang.String name : cacheNames ( ) ) { stderr.print ( name ) ; stderr.print ( '\n' ) ; } stderr.flush ( ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { saveButton.setEnabled ( false ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( sitePath ) ; }
protected com.google.gson.GsonBuilder createGsonBuilder ( ) { final com.google.gson.GsonBuilder g = super . createGsonBuilder ( ) ; g.registerTypeAdapter ( org.spearce.jgit.diff.Edit.class , new com.google.gerrit.server.rpc.EditDeserializer ( ) ) ; return g ; }
private boolean isSuccessful ( org.apache.http.HttpResponse response ) { return ( response.getStatusLine ( ) . getStatusCode ( ) ) == ( javax.servlet.http.HttpServletResponse.SC_NO_CONTENT ) ; }
private org.eclipse.jgit.lib.Config buildConfig ( org.eclipse.jgit.lib.Config baseConfig ) { if ( ( ( configs ( ) ) != null ) && ( ( config ( ) ) != null ) ) { throw new java.lang.IllegalStateException ( "Use either @GerritConfigs or @GerritConfig not both" ) ; } if ( ( configs ( ) ) != null ) { return com.google.gerrit.acceptance.ConfigAnnotationParser.parse ( baseConfig , configs ( ) ) ; } else if ( ( config ( ) ) != null ) { return com.google.gerrit.acceptance.ConfigAnnotationParser.parse ( baseConfig , config ( ) ) ; } else { return baseConfig ; } }
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; enable ( true ) ; }
private void display ( final com.google.gerrit.client.data.UnifiedPatchDetail detail ) { diffTable.setAccountInfoCache ( detail.getAccounts ( ) ) ; diffTable.display ( detail.getLines ( ) ) ; }
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.Branch > result ) { enableForm ( true ) ; branches.display ( result ) ; }
protected void configureServlets ( ) { serveRegex ( "/index/\\d+$" ) . with ( com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.class ) ; }
public void run ( ) { lastFocused = cm ; }
public void put ( com.google.gerrit.server.account.AccountInfo info ) { if ( detailed ) { info._account_id = info._id.get ( ) ; } provided.add ( info ) ; }
protected abstract java.lang.String getStyleName ( ) ;
protected void migrateData ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws java.sql.SQLException { try ( java.sql.Statement stmt = newStatement ( db ) ) { stmt.execute ( ( "CREATE INDEX patch_sets_byRevision" + " ON patch_sets (revision)" ) ) ; } }
public void testEvictAccountsOK ( ) throws java.lang.Exception { setupMocks ( Constants.ACCOUNTS , com.ericsson.gerrit.plugins.evictcache.RestSessionTest.ID_RESPONSE , true , false ) ; com.google.common.truth.Truth.assertThat ( restClient.evict ( com.ericsson.gerrit.plugins.evictcache.RestSessionTest.SOURCE_NAME , Constants.ACCOUNTS , createMock ( Account.Id.class ) ) ) . isTrue ( ) ; }
protected int getPermittedLimit ( ) { return java.lang.Integer.MAX_VALUE ; }
public void generatePreparedStatementSet ( final com.google.gwtorm.jdbc.gen.CodeGenSupport cgs ) { cgs.pushSqlHandle ( ) ; cgs.pushColumnIndex ( ) ; cgs.pushFieldValue ( ) ; cgs.invokePreparedStatementSet ( getJavaSqlTypeAlias ( ) ) ; }
public void onSuccess ( com.google.gerrit.common.data.ListBranchesResult result ) { branches = result.getBranches ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { onReply ( null ) ; }
public void commentOnReviewableChangeByOwnerNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public void selectHttpUrl ( ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { selectProtocol ( Protocol.HTTP ) ; }
public static java.lang.String mediumFormat ( final java.util.Date dt ) { return com.google.gerrit.client.FormatUtil.dtfmt.format ( dt ) ; }
public void testDeleteOneNotExisting ( ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { stubExecuteBatchOK ( com.google.gwtorm.jdbc.TestJdbcAccess.DELETE , 0 ) ; try { createClassUnderTest ( ) . delete ( com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW ) ; org.junit.Assert.fail ( "missing OrmConcurrencyException" ) ; } catch ( com.google.gwtorm.client.OrmConcurrencyException e ) { } }
public void testChangeDeletedFromIndexOK ( ) throws java.lang.Exception { setUpMocks ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.DELETE_OP , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.EMPTY_MSG , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( eventForwarder.deleteChangeFromIndex ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestEventForwarderTest.CHANGE_NUMBER ) ) . isTrue ( ) ; }
public void deleteBranchByProjectOwnerForcePushBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockForcePush ( ) ; setApiUser ( user ) ; assertDeleteForbidden ( ) ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( com.google.gerrit.client.HistoryHandler.toAccountGroup ( getRowItem ( row ) . getId ( ) ) ) ; }
public void addMembers ( com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , java.util.Collection < ? extends com.google.gerrit.reviewdb.client.Account.Id > newMemberIds ) throws com.google.gwtorm.server.OrmException , java.io.IOException { groupsUpdateProvider.get ( ) . addGroupMembers ( db.get ( ) , groupId , com.google.common.collect.ImmutableSet.copyOf ( newMemberIds ) ) ; }
public void setGranted ( java.sql.Timestamp ts ) { granted = ts ; }
private void fail ( java.lang.Throwable t ) { com.google.gerrit.server.index.SiteIndexer.log.error ( ( "Failed to index " + ( desc ) ) , t ) ; ok.set ( false ) ; }
protected com.google.gson.GsonBuilder createGsonBuilder ( ) { final com.google.gson.GsonBuilder g = super . createGsonBuilder ( ) ; g.registerTypeAdapter ( org.eclipse.jgit.diff.Edit.class , new com.google.gerrit.httpd.rpc.EditDeserializer ( ) ) ; return g ; }
com.google.gerrit.server.notedb.RobotCommentUpdate create ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id accountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { star.setValue ( ( ! ( star.getValue ( ) ) ) , true ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public void commentOnReviewableChangeByOther ( ) throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; review ( other , sc.changeId , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.ENABLED ) ; assertThat ( sender ) . sent ( "comment" , sc ) . notTo ( other ) . to ( sc.owner ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . bcc ( sc.starrer ) . bcc ( com.google.gerrit.server.account.WatchConfig.NotifyType.ALL_COMMENTS ) ; }
public void setChangeScreen ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.ChangeScreen ui ) { this . changeScreen = ui ; }
public org.eclipse.jgit.lib.ObjectId getNewId ( ) { return newId ; }
public void createBranch_Forbidden ( ) throws java.lang.Exception { setApiUser ( user ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
protected void loadNext ( ) { Util.LIST_SVC.allQueryNext ( query , pos , pageSize , loadCallback ( ) ) ; }
public com.google.common.collect.ListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > allApprovalsMap ( ) throws com.google.gwtorm.server.OrmException { if ( ( allApprovals ) == null ) { allApprovals = approvalsUtil.byChange ( db , notes ( ) ) ; } return allApprovals ; }
com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) ;
public static java.lang.String toChangeQuery ( final java.lang.String query ) { return ( "q," + ( com.google.gwtorm.client.KeyUtil.encode ( query ) ) ) + ",n,z" ; }
public void suggestReviewersNoResult3 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.PatchSet > get ( java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchSet.Id > keys ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void addIntHeader ( java.lang.String name , int value ) { headers.put ( name , java.lang.Integer.toString ( value ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( revision.getParentKey ( ) ) ) ; }
public void start ( org.apache.sshd.server.Environment env ) throws java.io.IOException { startThread ( new com.google.gerrit.sshd.commands.CommandRunnable ( ) { @ java.lang.Override public void run ( ) throws java.lang.Exception { parseCommandLine ( impl ) ; impl.display ( out ) ; } } ) ; }
public void setUseSignedOffBy ( final com.google.gerrit.reviewdb.client.Project.InheritableBoolean sbo ) { useSignedOffBy = sbo ; }
public java.lang.String getName ( ) { return control.getGroup ( ) . getName ( ) ; }
public static boolean isEnabled ( com.google.inject.Injector injector ) { return injector.getInstance ( com.google.inject.Key.get ( org.eclipse.jgit.lib.Config.class , com.google.gerrit.server.config.GerritServerConfig.class ) ) . getBoolean ( "index" , null , "enabled" , false ) ; }
com.google.gerrit.httpd.raw.BowerComponentsServlet getBowerComponentsServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.BowerComponentsServlet ( cache , getPaths ( ) . buckOut ) ; }
private void configureWebsessiosSection ( ) { ui.header ( "Websession section" ) ; promptAndSetString ( "Cleanup interval" , com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION , com.ericsson.gerrit.plugins.highavailability.Configuration.CLEANUP_INTERVAL_KEY , com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLEANUP_INTERVAL ) ; }
public void postRun ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.api.InitStep step : steps ) { if ( ( step instanceof com.google.gerrit.pgm.init.InitPlugins ) && ( flags.skipPlugins ) ) { continue ; } step.postRun ( ) ; } }
public void confirmForOtherUser_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.server.config.ConfirmEmail.Input in = new com.google.gerrit.server.config.ConfirmEmail.Input ( ) ; in.token = emailTokenVerifier.encode ( user.getId ( ) , "new.mail@example.com" ) ; adminSession.put ( "/config/server/email.confirm" , in ) . assertUnprocessableEntity ( ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getLocalRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id action ) { return com.google.gerrit.server.project.ProjectState.filter ( getLocalRights ( ) , action ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { final int sel = ws.getSelectedIndex ( ) ; if ( 0 <= sel ) { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.valueOf ( ws.getValue ( sel ) ) ) ; refresh ( false ) ; } }
public void testCreateGroupWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( user ) . put ( "/groups/newGroup" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
protected void doUpsert ( final java.lang.Iterable < T > instances , final com.google.gwtorm.jdbc.JdbcTransaction txn ) throws com.google.gwtorm.client.OrmException { java.util.Collection < T > inserts = attemptUpdate ( instances ) ; if ( inserts != null ) { doInsert ( inserts , txn ) ; } }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.server.notedb.ChangeNotes notes ) ;
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.Branch > result ) { enableForm ( true ) ; branches.display ( result ) ; }
com.google.gerrit.server.notedb.ChangeDraftUpdate create ( com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.Account.Id accountId , org.eclipse.jgit.lib.PersonIdent authorIdent , java.util.Date when ) ;
protected java.io.File path ( java.io.File sitePath , com.google.gerrit.httpd.GitWebConfig gitWebConfig ) { return gitWebConfig.getGitwebCSS ( ) ; }
public void setAssignee ( com.google.gerrit.reviewdb.client.Account.Id assignee ) { com.google.common.base.Preconditions.checkArgument ( ( assignee != null ) , "use removeAssignee" ) ; this . assignee = com.google.common.base.Optional.of ( assignee ) ; }
private final native java.sql.Timestamp _get_cts ( ) ;
void onRebase ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.RebaseAction.call ( changeId , revision ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { final com.google.gerrit.client.changes.AllSingleListScreen o = ( ( com.google.gerrit.client.changes.AllSingleListScreen ) ( newScreen ) ) ; useLoadPrev = o.useLoadPrev ; pos = o.pos ; return this ; }
public java.lang.String call ( ) throws java.lang.Exception { log.debug ( "Performing action {} on issue {}" , actionName , issueKey ) ; doPerformAction ( issueKey , actionName ) ; return issueKey ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.server.query.change.ChangeData cd ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( cd , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
protected void onInitUI ( ) { super . onInitUI ( ) ; add ( new com.google.gerrit.client.ui.SmallHeading ( Util.C.headingAuditLog ( ) ) ) ; auditEventTable = new com.google.gerrit.client.admin.AccountGroupAuditLogScreen.AuditEventTable ( ) ; add ( auditEventTable ) ; }
public void deletingNonExistingEditRest ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = adminSession.delete ( urlEdit ( ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( org.apache.http.HttpStatus.SC_NOT_FOUND ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; return change ; } else { return null ; } }
public static com.google.gerrit.server.config.ScheduleConfig.Builder builder ( org.eclipse.jgit.lib.Config config , java.lang.String section ) { return com.google.gerrit.server.config.ScheduleConfig.builder ( config , section , null ) ; }
private static Field.Store store ( com.google.gerrit.server.index.FieldDef < ? , ? > f ) { return f.isStored ( ) ? Field.Store.YES : Field.Store.NO ; }
public void onSuccess ( ) { com.google.gerrit.client.patches.UnifiedPatchScreen.TopView top = com.google.gerrit.client.Gerrit.getPatchScreenTopView ( ) ; com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.patches.UnifiedPatchScreen ( id , top , baseId ) ) ; }
public static void drop ( com.google.gerrit.testutil.InMemoryDatabase db ) { if ( db != null ) { db.drop ( ) ; } }
public void testProjectNotFound ( ) throws java.lang.Exception { java.util.Map < java.lang.String , com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection > sectionsToReturn = new java.util.HashMap < > ( ) ; sectionsToReturn.put ( "a" , new com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection ( "ssh://localhost/a" , "a" , "." ) ) ; execute ( new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "super-project" ) , "refs/heads/master" ) , sectionsToReturn , new java.util.HashMap < java.lang.String , java.lang.String > ( ) , new java.util.ArrayList < com.google.gerrit.reviewdb.client.SubmoduleSubscription > ( ) ) ; }
public com.google.gerrit.reviewdb.client.Change change ( ) throws com.google.gwtorm.server.OrmException { if ( ( change ) == null ) { reloadChange ( ) ; } return change ; }
public static void main ( final java.lang.String [ ] argv ) throws java.lang.Exception { com.google.gerrit.main.GerritLauncher.main ( argv ) ; }
public void add ( final com.google.gerrit.lifecycle.LifecycleListener listener ) { listeners.put ( listener , true ) ; }
private void initChannels ( ) { setChannelFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Channel > > asList ( new org.apache.sshd.server.channel.ChannelSession.Factory ( ) , new org.apache.sshd.common.forward.TcpipServerChannel.DirectTcpipFactory ( ) ) ) ; }
public boolean canSubmit ( ) { if ( GitRepositoryManager.REF_CONFIG.equals ( refName ) ) { return projectControl.isOwner ( ) ; } return canPerform ( Permission.SUBMIT ) ; }
public void testCreateChildProjectUnderNonExistingParent_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.parent = "non-existing-project" ; com.google.gerrit.acceptance.RestResponse r = adminSession.put ( "/projects/child" , in ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_UNPROCESSABLE_ENTITY ) ; }
public void setId ( java.lang.String id ) { this . id = com.google.gerrit.common.data.LabelType.checkId ( id ) ; }
static org.eclipse.jgit.lib.Config parse ( com.google.gerrit.acceptance.GerritConfig annotation ) { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; com.google.gerrit.acceptance.ConfigAnnotationParser.parse ( cfg , annotation ) ; return cfg ; }
com.google.gerrit.client.diff.DraftBox addReplyBox ( ) { com.google.gerrit.client.diff.DraftBox box = parent.addDraftBox ( parent.createReply ( comment ) ) ; registerReplyBox ( box ) ; return box ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return rewrite.rewrite ( in , opts ) ; }
public void onSuccess ( java.lang.String result ) { com.google.gwt.user.client.Window.alert ( result ) ; }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; }
public void addEventHandler ( final com.google.gwt.user.client.ui.DisclosureHandler handler ) { main.addEventHandler ( handler ) ; }
public boolean allowsEdit ( com.google.gerrit.reviewdb.client.Account.FieldName field ) { return editableAccountFields.contains ( field ) ; }
public void encode ( T obj , final byte [ ] data , int offset , int length ) { encode ( obj , com.google.protobuf.CodedOutputStream.newInstance ( data , offset , length ) ) ; }
private void fastForwardTagToNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , true , expectedStatus ) ; }
public java.util.regex.Pattern getIssuePattern ( ) { java.util.regex.Pattern ret = null ; java.lang.String match = gerritConfig.getString ( "commentlink" , pluginName , "match" ) ; if ( match != null ) { ret = java.util.regex.Pattern.compile ( match ) ; } return ret ; }
public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change.getProject ( ) , change , false ) . load ( ) ; }
private static dk.brics.automaton.RegExp toRegExp ( java.lang.String refPattern ) { if ( com.google.gerrit.server.project.RefControl.isRE ( refPattern ) ) { refPattern = refPattern.substring ( 1 ) ; } return new dk.brics.automaton.RegExp ( refPattern ) ; }
private com.google.gerrit.server.project.ProjectState toProjectState ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey ( doc.getField ( com.google.gerrit.server.index.project.ProjectField.NAME.getName ( ) ) . stringValue ( ) ) ; return projectCache.get ( ) . get ( nameKey ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { showCLA ( cla ) ; }
public void postEvent ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public void run ( ) { paddingOtherside.getStyle ( ) . setHeight ( box.getOffsetHeight ( ) , Unit.PX ) ; }
public com.google.gerrit.gpg.CheckResult checkCustom ( org.bouncycastle.openpgp.PGPPublicKey key ) { return com.google.gerrit.gpg.CheckResult.ok ( ) ; }
public com.google.common.collect.ImmutableSet < java.lang.String > getHashtags ( ) { return hashtags ; }
protected void preDisplay ( final com.google.gerrit.common.data.SingleListChangeInfo result ) { display ( result ) ; }
public static org.eclipse.jgit.revwalk.RevTree automerge ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.revwalk.RevCommit b ) throws java.io.IOException { return com.google.gerrit.server.patch.PatchListLoader.automerge ( repo , rw , b , true ) ; }
public void copy ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps ) throws com.google.gwtorm.server.OrmException { db.patchSetApprovals ( ) . insert ( getForPatchSet ( db , ctl , ps ) ) ; }
public boolean isIgnoreWhitespace ( ) { return ( diffPrefs.getIgnoreWhitespace ( ) ) != ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.IGNORE_NONE ) ; }
public void gerritConfig ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.GerritConfig > callback ) { callback.onSuccess ( config.get ( ) ) ; }
com.google.gerrit.server.index.account.AccountIndexer getAccountIndexer ( com.google.gerrit.server.index.account.AccountIndexer.Factory factory , com.google.gerrit.server.index.account.AccountIndexCollection indexes ) { return factory.create ( indexes ) ; }
private org.kohsuke.args4j.spi.OptionHandler findHandler ( java.lang.String name ) { if ( ( options ) == null ) { options = com.google.gerrit.util.cli.CmdLineParser.index ( parser.options ) ; } return options.get ( name ) ; }
public void preDisplay ( com.google.gerrit.common.data.ProjectAccess access ) { displayReadOnly ( access ) ; }
public void batchAbandon ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.server.CurrentUser user , java.util.Collection < com.google.gerrit.server.project.ChangeControl > controls , java.lang.String msgTxt ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { batchAbandon ( project , user , controls , msgTxt , NotifyHandling.ALL ) ; }
private org.eclipse.jgit.lib.Repository getRepository ( ) { try { return server.openRepository ( projectName ) ; } catch ( org.eclipse.jgit.errors.RepositoryNotFoundException e ) { return null ; } }
private static final native com.google.gwt.core.client.JavaScriptObject get ( java.lang.String id ) ;
public void onSuccess ( com.googlesource.gerrit.plugins.serviceuser.client.MessagesInfo info ) { display ( info ) ; }
public boolean isScheme ( final java.lang.String scheme ) { return getExternalId ( ) . startsWith ( scheme ) ; }
public java.lang.String getLabel ( ) { return isLabel ( ) ? getName ( ) . substring ( Permission.LABEL.length ( ) ) : null ; }
private final native void _set_cts ( java.sql.Timestamp ts ) ;
public void visit ( org.pegdown.ast.AutoLinkNode node ) { java.lang.String url = node.getText ( ) ; html.open ( "a" ) . attribute ( "href" , href ( url ) ) . appendAndEscape ( url ) . close ( "a" ) ; }
private void logRetry ( java.lang.String cause ) { com.ericsson.gerrit.plugins.syncindex.HttpClientProvider.log.debug ( ( ( ( "Retrying request to '" + ( cfg.getUrl ( ) ) ) + "' Cause: " ) + cause ) ) ; }
private java.util.Set < com.google.gerrit.reviewdb.client.Change.Status > status ( java.lang.String query ) throws com.google.gerrit.server.query.QueryParseException { return com.google.gerrit.server.index.change.IndexRewriter.getPossibleStatus ( parse ( query ) ) ; }
public java.lang.Integer apply ( com.google.gerrit.reviewdb.client.PatchSet in ) { return in.getId ( ) . get ( ) ; }
public void listBranchesOfNonExistingProject_NotFound ( ) throws java.lang.Exception { try { gApi.projects ( ) . name ( "non-existing" ) . branches ( ) . get ( ) ; org.junit.Assert.fail ( "Expected ResourceNotFoundException" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException expected ) { } }
protected com.google.gerrit.sshd.SshScope.Context continuingContext ( com.google.gerrit.sshd.SshScope.Context ctx ) { return ctx.subContext ( ctx.getSession ( ) , ctx.getCommandLine ( ) ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.account.AuthMethod method ) ;
protected void submit ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.SubmitInput input ) throws java.lang.Exception { submit ( changeId , input , null , null ) ; }
public Change.Id getId ( ) { return notes.getChangeId ( ) ; }
public com.google.gitiles.GitilesView.Builder setOldRevision ( com.google.gitiles.Revision revision ) { switch ( type ) { case DIFF : case LOG : this . oldRevision = com.google.common.base.Preconditions.checkNotNull ( revision ) ; return this ; default : throw new java.lang.IllegalStateException ( java.lang.String.format ( "cannot set old revision on %s view" , type ) ) ; } }
public boolean isMultiValued ( ) { return multiValued ( ) ; }
public void stop ( ) { refreshThread.halt ( ) ; openIndex.close ( ) ; closedIndex.close ( ) ; }
public void evaluate ( ) throws java.lang.Throwable { boolean mem = ( description.getAnnotation ( com.google.gerrit.acceptance.UseLocalDisk.class ) ) == null ; beforeTest ( com.google.gerrit.acceptance.AbstractDaemonTest.config ( description ) , mem ) ; base.evaluate ( ) ; afterTest ( ) ; }
public void onSignOut ( ) { if ( ( starChange ) != null ) { starChange.setVisible ( false ) ; } }
public com.google.gerrit.common.EventListener getEventListener ( ) { }
com.google.gerrit.server.mail.CommentSender create ( com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notify , com.google.gerrit.reviewdb.client.Change.Id id ) ;
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( dbProvider , account.getId ( ) ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
private net.sf.ehcache.constructs.blocking.SelfPopulatingCache startCacheSshKeys ( ) { final net.sf.ehcache.Cache dc = com.google.gerrit.server.GerritServer.cacheMgr.getCache ( "sshkeys" ) ; final net.sf.ehcache.constructs.blocking.SelfPopulatingCache r ; r = new net.sf.ehcache.constructs.blocking.SelfPopulatingCache ( dc , new com.google.gerrit.server.ssh.SshKeyCacheEntryFactory ( this ) ) ; com.google.gerrit.server.GerritServer.cacheMgr.replaceCacheWithDecoratedCache ( dc , r ) ; return r ; }
private static java.util.List < org.eclipse.jgit.diff.Edit > toList ( org.eclipse.jgit.diff.Edit [ ] l ) { return java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( l ) ) ; }
private void open ( java.lang.String path ) { hide ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.client.Dispatcher.toEditScreen ( new com.google.gerrit.reviewdb.client.PatchSet.Id ( changeId , revision._number ( ) ) , path ) ) ; }
private boolean inProject ( com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Project project ) { if ( projectControl != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( project.getNameKey ( ) ) ; } else { return true ; } }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "edit" , null , revision , fileName , null , 0 ) ; }
public com.google.gerrit.server.patch.PatchListEntry get ( final java.lang.String fileName ) { final int index = search ( fileName ) ; return 0 <= index ? patches [ index ] : com.google.gerrit.server.patch.PatchListEntry.empty ( fileName ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return getUser ( ) . equals ( user ) ? this : forUser ( user ) . asForChange ( cd , db ) ; }
protected com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id psId ) throws com.google.gwtorm.server.OrmException { return changeDataFactory.create ( db , psId.getParentKey ( ) ) . patchSet ( psId ) ; }
void addLabel ( final java.lang.String token ) { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote.parseWithEquals ( token ) ; com.google.gerrit.common.data.LabelType.checkName ( v.getLabel ( ) ) ; customLabels.put ( v.getLabel ( ) , v.getValue ( ) ) ; }
private final native net.codemirror.lib.LineCharacter setCh ( int ch ) ;
public static void setBackground ( android.view.View view , android.graphics.drawable.Drawable drawable ) { view.setBackgroundDrawable ( drawable ) ; }
public static void putMessage ( int id , java.lang.String m , com.google.gerrit.client.rpc.GerritCallback < com.google.gerrit.client.VoidResult > cb ) { com.google.gerrit.client.changes.ChangeEditApi.editMessage ( id ) . put ( m , cb ) ; }
public java.util.Set < java.lang.String > getNames ( ) { return cfg.getNames ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName ) ; }
public void consume ( ) throws java.io.IOException , java.lang.IllegalStateException { java.io.Reader reader = getReader ( ) ; if ( reader != null ) { while ( ( reader.read ( ) ) != ( - 1 ) ) ; } }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , "" ) ; }
public java.lang.String commitMessage ( ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitMessage ) == null ) { loadCommitData ( ) ; } return commitMessage ; }
protected static com.google.gerrit.server.group.db.AuditLogFormatter getAuditLogFormatter ( ) { return new com.google.gerrit.server.group.db.AuditLogFormatter ( com.google.gerrit.server.group.db.AbstractGroupTest :: getAccount , com.google.gerrit.server.group.db.AbstractGroupTest :: getGroup , com.google.gerrit.server.group.db.AbstractGroupTest.SERVER_ID ) ; }
public static com.google.gerrit.client.GitwebLink getGitwebLink ( ) { com.google.gerrit.common.data.GitwebConfig gw = com.google.gerrit.client.Gerrit.getConfig ( ) . getGitwebLink ( ) ; return gw != null ? new com.google.gerrit.client.GitwebLink ( gw ) : null ; }
private boolean isStarred ( final com.google.gerrit.reviewdb.Change ac ) { return control.getCurrentUser ( ) . getStarredChanges ( ) . contains ( ac.getId ( ) ) ; }
public java.lang.String getImageUrl ( ) { return ( "plugins/" + ( pluginName ) ) + "/static/readme.png" ; }
private boolean canUpload ( ) { return ( projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.PUSH ) ) && ( getProjectControl ( ) . getProject ( ) . getState ( ) . permitsWrite ( ) ) ; }
public static com.google.gerrit.client.reviewdb.Patch.Id parse ( final java.lang.String str ) { final com.google.gerrit.client.reviewdb.Patch.Id r = new com.google.gerrit.client.reviewdb.Patch.Id ( ) ; r.fromString ( str ) ; return r ; }
boolean canPerform ( java.lang.String permissionName , boolean isChangeOwner ) { return doCanPerform ( permissionName , isChangeOwner , false ) ; }
void removeFileCommentBox ( com.google.gerrit.client.diff.DraftBox box , com.google.gerrit.common.changes.Side side ) { diffTable.onRemoveDraftBox ( box , side ) ; }
public void testGetComment ( ) throws java.lang.Exception { com.google.gerrit.server.change.CommentsTest.assertGetComment ( injector , revRes1 , plc1 , plc1.getKey ( ) . get ( ) ) ; com.google.gerrit.server.change.CommentsTest.assertGetComment ( injector , revRes1 , null , "BadComment" ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup toAccountGroup ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID ( doc.getField ( com.google.gerrit.server.index.group.GroupField.UUID.getName ( ) ) . stringValue ( ) ) ; return groupCache.get ( uuid ) ; }
com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Change.Id , java.lang.String > getProblems ( ) { return com.google.common.collect.ImmutableMultimap.copyOf ( problems ) ; }
public static void commitWithLinks ( int changeId , java.lang.String revision , com.google.gerrit.client.rpc.CallbackGroup.Callback < com.google.gerrit.client.info.ChangeInfo.CommitInfo > callback ) { com.google.gerrit.client.changes.ChangeApi.revision ( changeId , revision ) . view ( "commit" ) . addParameterTrue ( "links" ) . get ( callback ) ; }
public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return fileApi.create ( files.parse ( revision , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve file" , e ) ; } }
private void asScript ( final org.w3c.dom.Element scriptNode ) { scriptNode.removeAttribute ( "id" ) ; scriptNode.setAttribute ( "type" , "text/javascript" ) ; scriptNode.setAttribute ( "language" , "javascript" ) ; }
public java.nio.file.Path getBasePath ( ) { return basePath ; }
public boolean isValid ( ) { return valid ; }
public com.google.gitiles.CommitSoyData setLinkifier ( com.google.gitiles.Linkifier linkifier ) { this . linkifier = com.google.common.base.Preconditions.checkNotNull ( linkifier , "linkifier" ) ; return this ; }
public static com.google.gerrit.client.rpc.RestApi detail ( int id ) { return com.google.gerrit.client.changes.ChangeApi.call ( id , "detail" ) ; }
public static void updateImpl ( final java.lang.String token ) { com.google.gwt.user.client.History.newItem ( token , false ) ; if ( ( com.google.gerrit.client.Gerrit.historyHooks ) != null ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( token ) ; } }
public void cancel ( ) { final com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set ( context ) ; try { onExit ( com.google.gerrit.sshd.BaseCommand.STATUS_CANCEL ) ; } finally { com.google.gerrit.sshd.SshScope.set ( old ) ; } }
private void fastForwardTagToNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , true , expectedStatus ) ; }
public void testEndsOnNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 , 0 ) , iter.advance ( 4 ) ) ; }
private void group ( java.lang.String name ) throws java.io.IOException { com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; }
java.lang.Iterable < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > createIterable ( com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data ... data ) { java.util.List < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > list = java.util.Arrays.asList ( data ) ; return new com.google.gwtorm.server.ListResultSet < com.google.gwtorm.jdbc.AbstractTestJdbcAccess.Data > ( list ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String commit , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( commit ) . view ( action ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { fileList.display ( psid , result.getPatches ( ) ) ; }
public java.util.concurrent.Callable < java.lang.Void > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) { return new com.google.gerrit.server.index.ChangeIndexerImpl.Task ( cd , true ) ; }
private static PatchSet.Id nextPatchSetId ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { return new com.google.gerrit.reviewdb.client.PatchSet.Id ( id.getParentKey ( ) , ( ( id.get ( ) ) + 1 ) ) ; }
private com.google.gerrit.extensions.api.changes.ChangeApi changeApi ( com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws com.google.gerrit.extensions.restapi.RestApiException { return gApi.get ( ) . changes ( ) . id ( patchSet.getId ( ) . getParentKey ( ) . get ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.pgm.util.ConsoleUI.class ) . toInstance ( init.ui ) ; bind ( com.google.gerrit.pgm.init.InitFlags.class ) . toInstance ( init.flags ) ; bind ( com.google.gerrit.server.git.GitRepositoryManager.class ) . to ( com.google.gerrit.server.git.LocalDiskRepositoryManager.class ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.submit.MergeSuperSet.query ( queryProvider.get ( ) ) . byTopicOpen ( topic ) ; }
final native void setMessage ( java.lang.String m ) ;
public final native void setLine ( int line ) ;
public void tearDown ( ) throws java.lang.Exception { stat.execute ( ( "DROP TABLE " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) ) ; store.stop ( ) ; }
public void createProjectFoo ( ) throws java.lang.Exception { java.lang.String name = "foo" ; com.google.common.truth.Truth.assertThat ( name ) . isEqualTo ( gApi.projects ( ) . create ( name ) . get ( ) . name ) ; }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err , java.lang.Exception e ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err , e ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( err ) ; } }
private void setNew ( com.google.gerrit.server.git.CodeReviewCommit c , com.google.gerrit.reviewdb.client.ChangeMessage msg ) { sendMergeFail ( c.notes , msg , true ) ; }
public void testEntityNbsp ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; assertSame ( b , b.nbsp ( ) ) ; assertEquals ( "&nbsp;" , b.asString ( ) ) ; }
protected void preDisplay ( java.lang.Void result ) { setShowTabs ( prefs.showTabs ( ) ) ; initEditor ( content.text ( ) ) ; content = null ; }
private static void assertRef ( int changeId , java.lang.String refName ) { org.junit.Assert.assertEquals ( new com.google.gerrit.reviewdb.client.Change.Id ( changeId ) , Change.Id.fromRef ( refName ) ) ; }
public static com.criteo.gerrit.plugins.automerge.Change from ( com.google.gerrit.server.data.ChangeAttribute changeAttribute ) { return new com.criteo.gerrit.plugins.automerge.Change ( changeAttribute.project , changeAttribute.number , changeAttribute.topic ) ; }
void setList ( java.lang.String section , java.lang.String subsection , java.lang.String name , java.util.List < java.lang.String > values ) ;
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String commit , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "revisions" ) . id ( commit ) . view ( action ) ; }
public void returnDefaultforNullMap ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.defaultQuery , com.ericsson.gerrit.plugins.eventslog.QueryMakerTest.queryMaker.formQueryFromRequestParameters ( null ) ) ; }
public void onLoad ( com.google.gerrit.plugin.client.screen.Screen screen ) { screen.setPageTitle ( "Reviewers" ) ; screen.show ( new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen ( com.google.gwt.http.client.URL.decodeQueryString ( screen.getToken ( ) ) ) ) ; }
public java.lang.String getAvatarUrl ( int size ) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.GetAvatar myGetAvatar = getAvatar.get ( ) ; myGetAvatar.setSize ( size ) ; return myGetAvatar.apply ( account ) . location ( ) ; }
public void setChangeId ( final com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . changeId = changeId ; }
private PatchSet.Id getPatchSetId ( com.google.gerrit.acceptance.GitUtil.Commit c ) throws com.google.gwtorm.server.OrmException { return getChange ( c ) . change ( ) . currentPatchSetId ( ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( ( change.getStatus ( ) ) == ( Change.Status.NEW ) ) { change.setStatus ( Change.Status.SUBMITTED ) ; com.google.gerrit.server.ChangeUtil.updated ( change ) ; } return change ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , com.google.gerrit.extensions.restapi.ResourceConflictException.class , expectedError , true ) ; }
public void execute ( ) { com.google.gwt.user.client.Window.scrollTo ( 0 , 0 ) ; message.setFocus ( true ) ; }
public void message ( java.lang.String msg ) { }
protected java.lang.String getRefName ( ) { return com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG ; }
public void beforeTest ( ) throws java.lang.Exception { notesMigration = new com.google.gerrit.testutil.TestNotesMigration ( ) . setFromEnv ( ) ; }
public static void createDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , com.google.gerrit.client.changes.CommentInput content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . put ( content , cb ) ; }
public static void detail ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.detail ( id ) . get ( cb ) ; }
java.lang.String ps ( ) ;
public static org.eclipse.jgit.revwalk.RevCommit makeCommit ( org.eclipse.jgit.dircache.DirCacheEntry [ ] entries , org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.lib.Repository > repo ) throws java.lang.Exception { return com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.makeCommit ( entries , repo , ( ( org.eclipse.jgit.revwalk.RevCommit [ ] ) ( null ) ) ) ; }
public void setUUID ( com.google.gerrit.reviewdb.AccountGroup.UUID newUUID ) { uuid = newUUID.get ( ) ; }
public void onSuccess ( com.google.gerrit.client.account.DiffPreferences result ) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = com.google.gerrit.client.Gerrit.getDiffPreferences ( ) ; result.copyTo ( p ) ; com.google.gerrit.client.Gerrit.setDiffPreferences ( p ) ; }
private void setListIdHeader ( ) throws com.google.gerrit.common.errors.EmailException { setVHeader ( "Mailing-List" , "list $email.listId" ) ; setVHeader ( "List-Id" , "<$email.listId.replace('@', '.')>" ) ; if ( ( getSettingsUrl ( ) ) != null ) { setVHeader ( "List-Unsubscribe" , "<$email.settingsUrl>" ) ; } }
public com.google.gerrit.acceptance.PushOneCommit.Result to ( org.eclipse.jgit.api.Git git , java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.GitUtil.add ( git , fileName , content ) ; return execute ( git , ref ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( key ) ; }
void onFollowUp ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( followUpAction ) == null ) { followUpAction = new com.google.gerrit.client.change.FollowUpAction ( followUp , project , branch , key ) ; } followUpAction.show ( ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; refresh ( ) ; }
protected com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle openHandle ( org.eclipse.jgit.lib.Repository repo ) throws java.io.IOException { return com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle.create ( com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk ( repo ) , readRef ( repo ) ) ; }
public java.util.List < com.google.gerrit.server.patch.PatchListEntry > getPatches ( ) { return java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( patches ) ) ; }
private static void export ( org.spearce.jgit.lib.RepositoryConfig config , java.sql.ResultSet rs ) throws java.sql.SQLException { com.google.gerrit.pgm.ConvertSystemConfig.sshd ( config , rs ) ; com.google.gerrit.pgm.ConvertSystemConfig.contactstore ( config , rs ) ; }
public java.lang.String toString ( ) { return ( "AccessSection[" + ( getRefPattern ( ) ) ) + "]" ; }
public com.google.gerrit.extensions.api.plugins.Plugins.ListRequest all ( boolean all ) { this . all = all ; return this ; }
void projectDetail ( com.google.gerrit.client.reviewdb.Project.Id projectId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.admin.ProjectDetail > callback ) ;
com.google.gerrit.testutil.InMemoryDatabase getInMemoryDatabase ( com.google.gerrit.server.schema.SchemaCreator schemaCreator , com.google.gerrit.server.index.SingleVersionModule.SingleVersionListener singleVersionListener ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.testutil.InMemoryDatabase ( schemaCreator , singleVersionListener ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.GerritApi.class ) . to ( com.google.gerrit.server.api.GerritApiImpl.class ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; }
public synchronized int getCount ( ) { return count ; }
public java.util.Optional < java.lang.String > permissionName ( ) { return java.util.Optional.ofNullable ( name ) ; }
private void error ( com.google.gerrit.server.git.ValidationError error ) { if ( ( validationErrors ) == null ) { validationErrors = new java.util.ArrayList < > ( 4 ) ; } validationErrors.add ( error ) ; }
protected void onExit ( final int rc ) { exit.onExit ( rc ) ; cleanup.run ( ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange user ( com.google.gerrit.server.CurrentUser user ) { return getUser ( ) . equals ( user ) ? this : forUser ( user ) . asForChange ( cd ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , id , caller ) ; }
public java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > apply ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gwtorm.server.OrmException , java.io.IOException { return reviewersUtil.suggestReviewers ( this , rsrc.getControl ( ) , getVisibility ( rsrc ) ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return session.getCurrentUser ( ) ; }
public void loadGerritConfig ( final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.GerritConfig > callback ) { callback.onSuccess ( com.google.gerrit.server.SystemInfoServiceImpl.getGerritConfig ( ) ) ; }
public void delete ( int id ) throws java.io.IOException ;
public java.lang.String getText ( ) { return null ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , null , db , id ) ; }
public static java.lang.String cleanupHashtag ( java.lang.String hashtag ) { hashtag = com.google.gerrit.server.change.HashtagsUtil.LEADER.trimLeadingFrom ( hashtag ) ; hashtag = com.google.common.base.CharMatcher.WHITESPACE.trimTrailingFrom ( hashtag ) ; return hashtag.toLowerCase ( ) ; }
private void assertMessage ( java.lang.String expected , java.lang.String actual ) { org.junit.Assert.assertEquals ( ( "Patch Set 1:\n\n" + expected ) , actual ) ; }
public final native int getFrom ( ) ;
public synchronized java.io.PrintWriter getWriter ( ) { com.google.common.base.Preconditions.checkState ( ( ( outputStream ) == null ) , "getOutputStream() already called" ) ; if ( ( writer ) == null ) { writer = new java.io.PrintWriter ( new java.io.OutputStreamWriter ( actualBody , com.google.common.base.Charsets.UTF_8 ) ) ; } return writer ; }
public static void permissions ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ProjectMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . addParameterRaw ( "type" , "PERMISSIONS" ) . addParameterTrue ( "all" ) . addParameterTrue ( "d" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
private final native void setSideRaw ( java.lang.String side ) ;
public java.lang.String toString ( ) { return ( "CommandName[" + ( value ( ) ) ) + "]" ; }
public com.google.gitiles.CommitSoyData setRevWalk ( org.eclipse.jgit.revwalk.RevWalk walk ) { this . walk = com.google.common.base.Preconditions.checkNotNull ( walk , "walk" ) ; return this ; }
public com.google.gerrit.server.project.ChangeControl getUserControl ( ) { return getControl ( ) . forUser ( user ) ; }
public void testCreateProjectWithNonExistingOwner_UnprocessableEntity ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "newProjectName" ; in.owners = java.util.Collections.singletonList ( "non-existing-group" ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.UnprocessableEntityException.class ) ; }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; commit ( ) ; }
public boolean canAddMember ( com.google.gerrit.reviewdb.client.Account.Id id ) { return isOwner ( ) ; }
protected void configure ( ) { listener ( ) . to ( CachePool.Lifecycle.class ) ; listener ( ) . to ( com.google.gerrit.server.config.GerritGlobalModule.VelocityLifecycle.class ) ; }
public int getId ( ) { return changeId.get ( ) ; }
public void show ( ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( true ) ; super . show ( ) ; }
public void testDefaultIsMIXED ( ) { assertTrue ( ( ( create ( ) ) instanceof com.google.gerrit.server.mail.FromAddressGeneratorProvider.PatternGen ) ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ProjectList result ) { createProjectLinkPanel.setVisible ( result.canCreateProject ( ) ) ; projects.display ( result.getProjects ( ) ) ; projects.finishDisplay ( ) ; }
public static void unmarkPrivate ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
protected void configure ( ) { bind ( com.google.gerrit.reviewdb.SystemConfig.class ) . toProvider ( com.google.gerrit.server.config.SystemConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.config.AuthConfig.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
void onRestore ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( ( restoreAction ) == null ) { restoreAction = new com.google.gerrit.client.change.RestoreAction ( restore , changeId ) ; } restoreAction.show ( ) ; }
public static com.google.gerrit.client.rpc.RestApi hashtags ( int changeId ) { return com.google.gerrit.client.changes.ChangeApi.change ( changeId ) . view ( "hashtags" ) ; }
protected void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.InMemoryDatabase.drop ( db ) ; super . tearDown ( ) ; }
public com.google.gerrit.server.patch.PatchList load ( final com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException , java.io.IOException { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( key.projectKey ) ; try { return readPatchList ( key , repo ) ; } finally { repo.close ( ) ; } }
private void addExternalId ( java.lang.String scheme , java.lang.String id , java.lang.String email ) throws java.lang.Exception { externalIdsUpdateFactory.create ( ) . insert ( db , com.google.gerrit.server.account.externalids.ExternalId.createWithEmail ( scheme , id , user.getAccountId ( ) , email ) ) ; reloadUser ( ) ; }
private int POST ( java.lang.String endPoint ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.post ( endPoint ) ; r.consume ( ) ; return r.getStatusCode ( ) ; }
public com.google.gerrit.server.query.change.ChangeData getChange ( ) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.Iterables.getOnlyElement ( queryProvider.get ( ) . byKeyPrefix ( commit.getChangeId ( ) ) ) ; }
public void hashWithoutHashtag ( ) throws java.lang.Exception { java.lang.String commitMessage = "Subject\n\n# Text" ; com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) ) ) . isEmpty ( ) ; }
public static final void uploadImage ( java.lang.String imageData ) { com.googlesource.gerrit.plugins.imagare.client.ImageUploader.uploadImage ( "All-Projects" , imageData , null ) ; }
public void remove ( com.google.gerrit.common.data.AccessSection section ) { if ( section != null ) { accessSections.remove ( section.getRefPattern ( ) ) ; } }
public void onSuccess ( java.lang.String result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( psId ) ) ; }
void sendError ( int status , java.lang.String message ) throws java.io.IOException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.log.error ( message ) ; res.setStatus ( status ) ; gson.toJson ( new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksContext.Error ( message ) , getWriter ( ) ) ; getWriter ( ) . flush ( ) ; }
final native void setToken ( java.lang.String t ) ;
private org.eclipse.jgit.lib.ObjectId createCommit ( com.google.gerrit.server.IdentifiedUser me , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.revwalk.RevCommit prevEdit , org.eclipse.jgit.revwalk.RevCommit base , org.eclipse.jgit.lib.ObjectId tree ) throws java.io.IOException { return createCommit ( me , inserter , prevEdit , base , tree , prevEdit.getFullMessage ( ) ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.change.ChangeField.getAuthorParts ( object ) . contains ( getValue ( ) . toLowerCase ( ) ) ; }
public void multipleHashtags ( ) throws java.lang.Exception { java.lang.String commitMessage = "#Subject\n\n#Hashtag\n\nLine 2" ; com.google.common.truth.Truth.assertThat ( ( ( java.lang.Iterable < ? > ) ( com.google.gerrit.server.change.HashtagsUtil.extractTags ( commitMessage ) ) ) ) . containsExactlyElementsIn ( com.google.common.collect.Sets.newHashSet ( "Subject" , "Hashtag" ) ) ; }
public void execute ( ) { com.google.gerrit.client.Gerrit.doSignIn ( null ) ; }
void onChangeIndexed ( com.google.gerrit.server.query.change.ChangeData change ) ;
java.nio.file.Path getSharedDirectory ( ) throws java.io.IOException { java.nio.file.Path sharedDirectoryPath = java.nio.file.Paths.get ( config.main ( ) . sharedDirectory ( ) ) ; java.nio.file.Files.createDirectories ( sharedDirectoryPath ) ; return sharedDirectoryPath ; }
public com.google.gerrit.server.notedb.ChangeNotes notes ( ) { return getControl ( ) . getNotes ( ) ; }
public com.google.gerrit.extensions.restapi.Response < java.lang.String > apply ( com.google.gerrit.server.account.AccountResource rsrc , com.google.gerrit.server.account.PutActive.Input input ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return setInactiveFlag.activate ( rsrc.getUser ( ) ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; resizeBoxPaddings ( ) ; }
protected void preDisplay ( final com.google.gerrit.client.data.ChangeDetail r ) { if ( ( starChange ) != null ) { setStarred ( r.isStarred ( ) ) ; } display ( r ) ; }
private static void noCache ( javax.servlet.http.HttpServletResponse res ) { res.setHeader ( "Expires" , "Fri, 01 Jan 1980 00:00:00 GMT" ) ; res.setHeader ( "Pragma" , "no-cache" ) ; res.setHeader ( "Cache-Control" , "no-cache, must-revalidate" ) ; res.setHeader ( "Content-Disposition" , "attachment" ) ; }
static com.google.gerrit.client.changes.ChangeApi.Input create ( ) { return ( ( com.google.gerrit.client.changes.ChangeApi.Input ) ( com.google.gwt.core.client.JavaScriptObject.createObject ( ) ) ) ; }
public void start ( ) { graphiteReporter.start ( rate , com.googlesource.gerrit.plugins.metricsreporters.GerritGraphiteReporter.DEFAULT_RATE_UNIT ) ; }
public static com.criteo.gerrit.plugins.automerge.Change from ( com.google.gerrit.extensions.common.ChangeInfo changeInfo ) { return new com.criteo.gerrit.plugins.automerge.Change ( changeInfo.project , changeInfo._number , changeInfo.topic ) ; }
public < A extends com.google.gwtorm.client.Access < ? , ? > > java.lang.Class < A > create ( com.google.gwtorm.server.GeneratedClassLoader loader , com.google.gwtorm.schema.RelationModel rm ) throws com.google.gwtorm.client.OrmException { return new com.google.gwtorm.jdbc.AccessGen ( loader , rm , dialect ) . create ( ) ; }
public static com.google.gerrit.client.rpc.RestApi edit ( int id ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "edit" ) ; }
final native void setTopic ( java.lang.String t ) ;
public static boolean useRecursiveMerge ( org.eclipse.jgit.lib.Config cfg ) { return cfg.getBoolean ( "core" , null , "useRecursiveMerge" , false ) ; }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) ;
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create ( dbProvider , account ) ; return rsrc.getControl ( ) . forUser ( who ) . isRefVisible ( ) ; }
private static org.eclipse.jgit.revwalk.RevCommit lookupCommit ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.reviewdb.client.PatchSet patchSet ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId ( patchSet ) ; try ( org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk ( repository ) ) { return revWalk.parseCommit ( patchSetCommitId ) ; } }
java.lang.String emailOnlyAuthors ( ) ;
public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key.toPatchListKey ( ) , project ) ; return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary ( patchList ) ; }
public void onChangeDeleted ( com.google.gerrit.reviewdb.client.Change.Id id ) { executeIndexTask ( id , true ) ; }
void setReviewed ( boolean r ) { reviewed.setValue ( r , true ) ; }
public AccountGroup.UUID getGroupUUID ( ) { return control.getGroup ( ) . getGroupUUID ( ) ; }
public void setVisible ( final boolean show ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( show ) ; super . setVisible ( show ) ; }
public static com.google.gerrit.client.rpc.RestApi hashtag ( int changeId , java.lang.String hashtag ) { return com.google.gerrit.client.changes.ChangeApi.change ( changeId ) . view ( "hashtags" ) . id ( hashtag ) ; }
public void go ( ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) , createScreen ( ) ) ; }
private static java.lang.String replace ( java.lang.String project , java.lang.String query ) { return query.replace ( "${project}" , project ) ; }
protected java.lang.String prettify ( java.lang.String html ) { return com.google.gerrit.prettify.client.ClientSideFormatter.go ( html , settings.getFilename ( ) , settings.getTabSize ( ) ) ; }
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String pluginName ) throws com.google.gerrit.server.project.NoSuchProjectException { return getPluginConfig ( projectName , pluginName ) . getWithInheritance ( ) ; }
public boolean writeChanges ( ) { return writeChanges ; }
public java.lang.Boolean apply ( com.googlesource.gerrit.plugins.lfs.locks.LfsLock input ) { return input.owner.name.equals ( user.getUserName ( ) ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.ChangeInfo input ) { return ( input.changeId ) != null ? input.changeId : input.subject ; }
public void setUp ( ) throws java.lang.Exception { org.eclipse.jgit.internal.storage.dfs.DfsRepository r = new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ; repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( r ) ; servlet = com.google.gitiles.TestGitilesServlet.create ( repo ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { if ( ( submitter ) != null ) { return identifiedUserFactory.create ( getReviewDbProvider ( ) , submitter ) . getRealUser ( ) ; } throw new com.google.inject.OutOfScopeException ( "No user on email thread" ) ; }
private static java.lang.String id ( final java.lang.Integer id ) { return id != null ? com.google.gerrit.server.util.IdGenerator.format ( id ) : "" ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doSave ( null ) ; }
com.google.gitiles.doc.Navbar setMarkdown ( com.google.gitiles.doc.MarkdownConfig cfg , byte [ ] md ) { if ( ( md != null ) && ( ( md.length ) > 0 ) ) { parse ( cfg , org.eclipse.jgit.util.RawParseUtils.decode ( md ) ) ; } return this ; }
private com.google.gerrit.server.query.change.InternalChangeQuery query ( ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) , ChangeField.REVIEWER.getName ( ) ) ; return queryProvider.get ( ) . setRequestedFields ( fields ) ; }
public void setChangeId ( java.lang.String changeId ) { java.lang.String old = ctl.getChange ( ) . getKey ( ) . get ( ) ; com.google.common.base.Preconditions.checkArgument ( old.equals ( changeId ) , "The Change-Id was already set to %s, so we cannot set this Change-Id: %s" , old , changeId ) ; this . changeId = changeId ; }
private void initCodeRepo ( ) throws java.io.IOException { if ( ( codeRepo ) == null ) { codeRepo = openRepo ( projectName , false ) ; } }
public com.google.gerrit.server.project.TagResource parse ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return new com.google.gerrit.server.project.TagResource ( resource.getControl ( ) , list.get ( resource , id ) ) ; }
protected abstract com.google.gerrit.server.notedb.AbstractChangeUpdate.Status applyImpl ( org.eclipse.jgit.lib.CommitBuilder cb , org.eclipse.jgit.lib.ObjectInserter ins ) throws com.google.gwtorm.server.OrmException , java.io.IOException ;
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.Permission.hasRange ( permission ) ) { return toRange ( permission , access ( permission ) ) ; } return null ; }
public static void ensureAllPatchSetsLoaded ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( ) ; } }
public void setEditPreferences ( com.google.gerrit.extensions.client.EditPreferencesInfo in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { setEditPreferences.apply ( account , in ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set edit preferences" , e ) ; } }
private java.lang.String getPassword ( ) { final java.lang.String pass = gerritConfig.getString ( pluginName , null , com.googlesource.gerrit.plugins.hooks.jira.JiraItsFacade.GERRIT_CONFIG_PASSWORD ) ; return pass ; }
public static java.lang.String toEditScreen ( com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toEditScreen ( revision , fileName , 0 ) ; }
private boolean checkConnection ( ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.info ( "Checking database connection..." ) ; try { eventsDb.queryOne ( ) ; return true ; } catch ( java.sql.SQLException e ) { com.ericsson.gerrit.plugins.eventslog.sql.SQLStore.log.debug ( "Problem checking database connection" , e ) ; return false ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { header.toggleReviewed ( ) . run ( ) ; }
public com.google.gerrit.server.config.ConfigResource parse ( com.google.gerrit.extensions.restapi.TopLevelResource root , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ( id.equals ( "server" ) ) { return new com.google.gerrit.server.config.ConfigResource ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public com.google.gerrit.server.change.PatchSetInserter setSshInfo ( com.google.gerrit.server.ssh.SshInfo sshInfo ) { if ( sshInfo == null ) { sshInfo = new com.google.gerrit.server.ssh.NoSshInfo ( ) ; } this . sshInfo = sshInfo ; return this ; }
public static void init ( ) { com.google.gerrit.client.api.ApiGlue.init0 ( ) ; com.google.gerrit.client.api.ActionContext.init ( ) ; com.google.gerrit.client.api.HtmlTemplate.init ( ) ; com.google.gerrit.client.api.Plugin.init ( ) ; com.google.gerrit.client.api.ApiGlue.addHistoryHook ( ) ; }
private com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig getConfig ( java.lang.String defaultConfig ) throws org.eclipse.jgit.errors.ConfigInvalidException { com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig config = new com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig ( new com.googlesource.gerrit.plugins.uploadvalidator.FakeConfigFactory ( projectName , defaultConfig ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeUserProvider ( ) , new com.googlesource.gerrit.plugins.uploadvalidator.FakeGroupCacheUUIDByName ( ) ) ; return config ; }
public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; factory ( NoteDbBatchUpdate.AssistedFactory.class ) ; }
private void openLine ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTr ( ) ; m.setAttribute ( "valign" , "top" ) ; m.openTd ( ) ; m.setStyleName ( com.google.gerrit.client.patches.S_ICON_CELL ) ; m.nbsp ( ) ; m.closeTd ( ) ; }
protected void setUp ( ) throws java.lang.Exception { repo = new org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.DfsRepository > ( new org.eclipse.jgit.internal.storage.dfs.InMemoryRepository ( new org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription ( "test" ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo.getRepository ( ) ) ; }
protected abstract void onLoad ( com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle handle ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public java.lang.String getProjectDescription ( final com.google.gerrit.reviewdb.client.Project.NameKey name ) throws java.io.IOException , org.eclipse.jgit.errors.RepositoryNotFoundException { final org.eclipse.jgit.lib.Repository e = openRepository ( name ) ; try { return getProjectDescription ( e ) ; } finally { e.close ( ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( false , false ) ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.group.InternalGroup > name ( java.lang.String name ) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate ( com.google.gerrit.server.index.group.GroupField.NAME , GroupQueryBuilder.FIELD_NAME , name.toLowerCase ( java.util.Locale.US ) ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeResource rsrc , com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return deleteContent.apply ( rsrc.getControl ( ) , path ) ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameterTrue ( "list" ) . get ( cb ) ; }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange change ( com.google.gerrit.server.notedb.ChangeNotes cd ) { return new com.google.gerrit.server.permissions.FailedPermissionBackend.FailedChange ( message , cause ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.LIST_SVC.myDraftChanges ( loadCallback ( ) ) ; }
public com.google.gerrit.extensions.common.CommentInfo apply ( com.google.gerrit.server.change.CommentResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.format ( rsrc.getComment ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { project2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( "p2" ) ; com.google.gerrit.acceptance.GitUtil.createProject ( sshSession , project2.get ( ) ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , 0 , null ) ; }
public java.lang.String getNextSequenceValueSql ( final java.lang.String seqname ) { return ( "SELECT nextval('" + seqname ) + "')" ; }
private static void doCreateTable ( java.sql.Statement stmt ) throws java.sql.SQLException { stmt.executeUpdate ( ( "CREATE TABLE IF NOT EXISTS account_patch_reviews (" + ( ( ( ( ( ( "account_id INTEGER DEFAULT 0 NOT NULL, " + "change_id INTEGER DEFAULT 0 NOT NULL, " ) + "patch_set_id INTEGER DEFAULT 0 NOT NULL, " ) + "file_name VARCHAR(4096) DEFAULT '' NOT NULL, " ) + "CONSTRAINT primary_key_account_patch_reviews " ) + "PRIMARY KEY (change_id, patch_set_id, account_id, file_name)" ) + ")" ) ) ) ; }
com.google.gerrit.git.PatchSetImporter create ( com.google.gerrit.client.reviewdb.ReviewDb dstDb , com.google.gerrit.client.reviewdb.Project.NameKey proj , org.spearce.jgit.lib.Repository srcRepo , org.spearce.jgit.revwalk.RevCommit srcCommit , com.google.gerrit.client.reviewdb.PatchSet dstPatchSet , boolean isNewPatchSet ) ;
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { publishedBase = com.google.gerrit.client.diff.CommentsCollections.sort ( result.get ( path ) ) ; }
public void setAction ( com.google.gerrit.common.data.PermissionRule.Action action ) { if ( action == null ) { throw new java.lang.NullPointerException ( "action" ) ; } setDeny ( ( action == ( com.google.gerrit.common.data.PermissionRule.Action.DENY ) ) ) ; }
private com.google.gerrit.server.notedb.RepoSequence newSequence ( java.lang.String name , int start , int batchSize , java.lang.Runnable afterReadRef , com.github.rholder.retry.Retryer < org.eclipse.jgit.lib.RefUpdate.Result > retryer ) { return new com.google.gerrit.server.notedb.RepoSequence ( repoManager , project , name , start , batchSize , afterReadRef , retryer ) ; }
public boolean isBatch ( ) { return false ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; this . service ( ) ; }
public boolean dryRun ( final com.google.gerrit.server.git.CodeReviewCommit mergeTip , final com.google.gerrit.server.git.CodeReviewCommit toMerge ) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canCherryPick ( args.mergeSorter , args.repo , mergeTip , args.rw , toMerge ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName ) ; }
public final native java.lang.String parameters ( ) ;
public boolean isOAuthFinal ( javax.servlet.http.HttpServletRequest request ) { return ( ( com.google.common.base.Strings.emptyToNull ( request.getParameter ( "code" ) ) ) != null ) && ( wasInitiatedByMe ( request ) ) ; }
