public void testRightEventBitItIsForwarded ( ) throws java.lang.Exception { setUpMocks ( false , true ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; verifyAll ( ) ; }
public java.lang.Object createEntry ( final java.lang.Object key ) throws java.lang.Exception { return lookup ( ( ( com.google.gerrit.client.reviewdb.Account.Id ) ( key ) ) ) ; }
private void header ( final int col , final java.lang.String title ) { table.setText ( 0 , col , title ) ; table.getCellFormatter ( ) . addStyleName ( 0 , col , "header" ) ; }
protected void onExit ( int rc ) { eventListenerRegistration.remove ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public com.google.gerrit.reviewdb.client.Project.NameKey getProjectNameKey ( ) { return null ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfo result ) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor ( result.commentlinks ( ) ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create ( "user" , "user@example.com" , "User" ) ; com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession ( server , user ) . put ( "/projects/newProject" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.dashboards.DashboardMap result ) { dashes.display ( result ) ; }
public void configure ( ) { java.net.InetSocketAddress addr = new java.net.InetSocketAddress ( com.google.common.net.InetAddresses.forString ( "127.0.0.1" ) , 1234 ) ; bind ( java.net.SocketAddress.class ) . annotatedWith ( com.google.gerrit.server.RemotePeer.class ) . toInstance ( addr ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.syncindex.Configuration.class ) . toInstance ( config ) ; bind ( org.apache.http.impl.client.CloseableHttpClient.class ) . toProvider ( com.ericsson.gerrit.plugins.syncindex.HttpClientProvider.class ) . in ( Scopes.SINGLETON ) ; }
public java.util.Optional < com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request > process ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) { if ( ! ( shouldProcess ( event , remote ) ) ) { return null ; } return doProcess ( event , remote ) ; }
public void deleteCommentIfPresent ( com.google.gerrit.reviewdb.client.PatchLineComment c ) { if ( draftNotes.containsComment ( c ) ) { verifyComment ( c ) ; deleteComments.add ( c ) ; } }
protected void createProject ( java.lang.String name ) throws com.google.gerrit.extensions.restapi.RestApiException { createProject ( name , null ) ; }
public void setup ( ) throws java.io.IOException { com.google.gerrit.server.git.ValidationError.Sink sink = org.easymock.EasyMock.createNiceMock ( ValidationError.Sink.class ) ; org.easymock.EasyMock.replay ( sink ) ; groupList = com.google.gerrit.server.git.GroupList.parse ( com.google.gerrit.server.git.GroupListTest.TEXT , sink ) ; }
public boolean canSeeMember ( com.google.gerrit.reviewdb.Account.Id id ) { return isVisible ( ) ; }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo access ( com.google.gerrit.extensions.api.access.ProjectAccessInput p ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setAccess.apply ( checkExists ( ) , p ) ; } catch ( java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot put access rights" , e ) ; } }
public final java.lang.String getTemplatesPath ( ) { return templatesPath.getPath ( ) ; }
public void testParseComplex ( ) throws java.lang.Exception { com.google.gerrit.server.git.QueryList ql = com.google.gerrit.server.git.QueryList.parse ( com.google.gerrit.server.git.QueryListTest.L_COMPLEX , null ) ; com.google.common.truth.Truth.assertThat ( ql.getQuery ( com.google.gerrit.server.git.QueryListTest.N_FOO ) ) . isEqualTo ( com.google.gerrit.server.git.QueryListTest.Q_COMPLEX ) ; }
public void updated ( ) { lastUpdatedOn = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
private com.google.gerrit.server.git.ChangeSet getForOpenChange ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException { return mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c , user ) ; }
public final native int lineAtHeight ( double height , java.lang.String mode ) ;
public boolean canSee ( com.google.gerrit.reviewdb.Account.Id id ) { return isOwner ( ) ; }
public com.google.gerrit.reviewdb.client.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { trackingId , trackingSystem } ; }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String pub ) throws com.google.gerrit.common.errors.InvalidSshKeyException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = open ( accountId ) ) { com.google.gerrit.reviewdb.client.AccountSshKey key = authorizedKeys.addKey ( pub ) ; commit ( authorizedKeys ) ; return key ; } }
public void execute ( com.google.gerrit.server.update.BatchUpdateListener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.NoteDbBatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { if ( redirect ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( result.getChange ( ) . getId ( ) ) ) ; } else { super . onSuccess ( result ) ; } }
final native boolean has_revision_number ( ) ;
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (status:open OR status:merged)" ) ; org.junit.Assert.assertEquals ( query ( parse ( "status:new OR status:submitted OR status:draft OR status:merged" ) ) , rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
static com.google.gerrit.server.notedb.NoteDbModule forTest ( ) { return new com.google.gerrit.server.notedb.NoteDbModule ( true ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNew ( ) ; } }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
final void setState ( com.google.gerrit.reviewdb.client.Project.State s ) { setStateRaw ( s.name ( ) ) ; }
private com.google.gwtorm.schema.QueryModel toQueryModel ( com.google.gwtorm.schema.KeyModel info ) throws com.google.gwtorm.client.OrmException { return new com.google.gwtorm.schema.QueryModel ( model , info.getName ( ) , ( ( "WHERE " + ( info.getField ( ) . getFieldName ( ) ) ) + "=?" ) ) ; }
private static java.lang.String base ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID ) { java.lang.String id = com.google.gwt.http.client.URL.encodePathSegment ( groupUUID.get ( ) ) ; return ( "/groups/" + id ) + "/" ; }
public com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.project.ProjectResource , ? > create ( com.google.gerrit.server.project.ProjectResource parent , java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( "default" . equals ( id ) ) { return createDefault.get ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public int intValue ( ) { return this . val ; }
private static org.bouncycastle.openpgp.PGPPublicKeyRingCollection empty ( ) throws java.io.IOException , org.bouncycastle.openpgp.PGPException { return new org.bouncycastle.openpgp.PGPPublicKeyRingCollection ( java.util.Collections.< org.bouncycastle.openpgp.PGPPublicKeyRing > emptyList ( ) ) ; }
public Account.Id getAccountId ( ) { return key.accountId ; }
void patchScript ( com.google.gerrit.reviewdb.Patch.Key key , com.google.gerrit.reviewdb.PatchSet.Id a , com.google.gerrit.reviewdb.PatchSet.Id b , com.google.gerrit.common.data.PatchScriptSettings settings , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchScript > callback ) ;
public void addOtherUsersGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId ( user.getId ( ) , new com.google.gerrit.reviewdb.client.AccountExternalId.Key ( "foo:myId" ) ) ; db.accountExternalIds ( ) . insert ( java.util.Collections.singleton ( extId ) ) ; com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceConflictException.class ) ; exception.expectMessage ( "GPG key already associated with another account" ) ; gApi.accounts ( ) . self ( ) . addGpgKey ( key.getPublicKeyArmored ( ) ) ; }
private static boolean skip ( java.lang.String name ) { return ( name.startsWith ( "refs/changes/" ) ) || ( name.startsWith ( GitRepositoryManager.REFS_CACHE_AUTOMERGE ) ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult n ) { prefs.copyTo ( com.google.gerrit.client.Gerrit.getEditPreferences ( ) ) ; }
public void run ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( revision ) , new com.google.gerrit.client.changes.ChangeScreen ( revision ) ) ; }
java.lang.String secondsAgo ( long seconds ) ;
public void changeProjectSettings ( final com.google.gerrit.reviewdb.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; com.google.common.truth.Truth.assertThat ( rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) . isEqualTo ( query ( in ) ) ; }
public void cancel ( ) { if ( ( status ) != ( GitJobStatus.SYNC ) ) { return ; } cancelled = true ; status = GitJobStatus.CANCELLED ; rollback ( ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { input.setFocus ( false ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; }
private final java.lang.String upgrade ( ) { return ( "\nRun reindex to rebuild the index:\n" + "$ java -jar gerrit.war reindex -d " ) + ( sitePaths.site_path.getAbsolutePath ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { enableOnFailure.setEnabled ( true ) ; }
protected void migrateData ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { }
private static java.lang.String toRFCAddressString ( com.google.gerrit.extensions.common.AccountInfo info ) { return new com.google.gerrit.server.mail.Address ( info.name , info.email ) . toString ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.RestApi.isNotFound ( caught ) ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setUserName ( null ) ; display ( ) ; } else { super . onFailure ( caught ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless , slave ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; } }
public void noNotificationForDraftPatchSetsForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%draft" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectList result ) { projectsTab.display ( result.getProjects ( ) ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
public com.google.common.collect.ImmutableList < com.google.gerrit.reviewdb.client.AccountGroup.UUID > load ( com.google.gerrit.reviewdb.client.AccountGroup.UUID key ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return groups.getIncludes ( db , key ) . collect ( com.google.common.collect.ImmutableList.toImmutableList ( ) ) ; } }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , null ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.Project update , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
void onDeleteEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteChangeEdit ( ) ) ) { com.google.gerrit.client.change.EditActions.deleteEdit ( changeId , publishEdit , rebaseEdit , deleteEdit ) ; } }
private com.google.gerrit.lucene.LuceneChangeIndex.QuerySource exactQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { return new com.google.gerrit.lucene.LuceneChangeIndex.QuerySource ( new org.apache.lucene.search.TermQuery ( new org.apache.lucene.index.Term ( p.getOperator ( ) , p.getValue ( ) ) ) ) ; }
java.lang.String needApproval ( java.lang.String categoryName , java.lang.String value , java.lang.String valueName ) ;
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.PluginInfo > apply ( com.google.gerrit.server.plugins.PluginResource resource , com.google.gerrit.server.plugins.InstallPlugin.Input input ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , java.io.IOException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , resource.getName ( ) , false ) . apply ( TopLevelResource.INSTANCE , input ) ; }
public com.google.gerrit.server.project.ListProjects setType ( com.google.gerrit.server.project.ListProjects.FilterType type ) { this . type = ( type != null ) ? type : com.google.gerrit.server.project.ListProjects.FilterType.CODE ; return this ; }
public void evictAll ( ) { byName.removeAll ( ) ; }
void unifiedPatchDetail ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.UnifiedPatchDetail > callback ) ;
public void addToNonExistingGroup_NotFound ( ) throws java.lang.Exception { try { gApi.groups ( ) . id ( "non-existing" ) . addMembers ( "admin" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException expected ) { } }
public void configure ( ) { factory ( ChangeUpdate.Factory.class ) ; factory ( ChangeDraftUpdate.Factory.class ) ; factory ( DraftCommentNotes.Factory.class ) ; factory ( NoteDbUpdateManager.Factory.class ) ; }
public java.util.Collection < java.lang.String > getWarnings ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gwtorm.server.OrmException { return dbHandler.getWarnings ( rsrc.getControl ( ) . getProject ( ) ) ; }
public com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl getDownloadUrl ( ) { if ( ( downloadUrl ) == null ) { return null ; } return com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl.valueOf ( downloadUrl ) ; }
public com.google.gerrit.extensions.common.ChangeInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.allOf ( com.google.gerrit.extensions.common.ListChangesOption.class ) ) ; }
public final java.util.List < com.google.gerrit.server.query.Predicate < T > > getChildren ( ) { return java.util.Collections.unmodifiableList ( children ) ; }
public synchronized javax.sql.DataSource get ( ) { if ( ! ( init ) ) { com.google.gerrit.pgm.util.SiteLibraryLoaderUtil.loadSiteLib ( libdir ) ; init = true ; } return super . get ( ) ; }
public java.lang.String getString ( java.lang.String name , java.lang.String defaultValue ) { return getValue ( name , com.google.common.base.Functions.< java.lang.String > identity ( ) , defaultValue ) ; }
boolean isTokenValid ( final java.lang.String keyIn ) { return ( isSignedIn ( ) ) && ( key.token.equals ( keyIn ) ) ; }
public void bySelf ( ) throws java.lang.Exception { assertQuery ( "self" , currentUserInfo ) ; setAnonymous ( ) ; assertQuery ( "self" ) ; }
public abstract java.lang.Iterable < com.google.gerrit.reviewdb.Project.NameKey > all ( ) ;
public com.google.gerrit.server.index.ChangeIndex getSearchIndex ( ) { return searchIndex.get ( ) ; }
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) { return ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( raw ) ) ) + "</pre>" ; }
private void createTestSite ( ) throws java.io.IOException { com.google.gerrit.server.config.SitePaths sitePath = new com.google.gerrit.server.config.SitePaths ( com.google.gerrit.acceptance.PluginDaemonTest.testSite ) ; pluginsSitePath = java.nio.file.Files.createDirectories ( sitePath.plugins_dir ) ; java.nio.file.Files.createDirectories ( sitePath.tmp_dir ) ; }
void display ( final com.google.gerrit.client.reviewdb.Account account ) { showSiteHeader.setValue ( account.isShowSiteHeader ( ) ) ; setDefaultContext ( account.getDefaultContext ( ) ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.labelui.client.PreferencesInfo result ) { }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getChangeUpdate ( ) . setTopic ( magicBranch.topic ) ; }
private void allowTagDeletion ( ) throws java.lang.Exception { removePermission ( Permission.PUSH , project , "refs/tags/*" ) ; grant ( Permission.PUSH , project , "refs/tags/*" , true , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public void renameFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.project.ChangeControl changeControl , java.lang.String currentFilePath , java.lang.String newFilePath ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , changeControl , new com.google.gerrit.server.edit.tree.RenameFileModification ( currentFilePath , newFilePath ) ) ; }
private java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > fetchAccountIds ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return approvalsUtil.getReviewers ( dbProvider.get ( ) , rsrc.getNotes ( ) ) . values ( ) ; }
public java.lang.Void call ( ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.delete ( id ) ; } return null ; }
public void createNewDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.MethodNotAllowedException.class , "draft workflow is disabled" ) ; }
public java.util.List < com.google.gerrit.common.data.PermissionRange > getLabelRanges ( ) { return getRefControl ( ) . getLabelRanges ( ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , remotePeerProvider , null , id ) ; }
void patchScript ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gerrit.client.reviewdb.PatchSet.Id a , com.google.gerrit.client.reviewdb.PatchSet.Id b , int context , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.PatchScript > callback ) ;
public void setAbbreviatedName ( java.lang.String abbreviatedName ) { this . abbreviatedName = abbreviatedName ; }
public void patchSetPublishDetail ( final com.google.gerrit.reviewdb.client.PatchSet.Id id , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchSetPublishDetail > callback ) { patchSetPublishDetail.create ( id ) . to ( callback ) ; }
private static java.lang.String queryIncoming ( java.lang.String who ) { return ( ( "is:open reviewer:" + who ) + " -owner:" ) + who ; }
private static org.eclipse.jgit.diff.RawTextComparator comparatorFor ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws ) { switch ( ws ) { case IGNORE_ALL_SPACE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL ; case IGNORE_SPACE_AT_EOL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING ; case IGNORE_SPACE_CHANGE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE ; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT ; } }
public int next ( ) { return com.google.gerrit.server.util.IdGenerator.mix ( gen.getAndIncrement ( ) ) ; }
private void fireEvent ( com.google.gerrit.reviewdb.client.Branch.NameKey branchName , final com.google.gerrit.server.events.RefEvent event ) { dispatcher.fireEvent ( branchName , event ) ; }
public void abandonReviewableChangeNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
void submit ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public com.google.gerrit.extensions.common.ServerInfo getInfo ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getServerInfo.apply ( new com.google.gerrit.server.config.ConfigResource ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get server info" , e ) ; } }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSearch ( ) ; } }
private com.google.gerrit.extensions.common.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = new com.google.gerrit.extensions.common.ApprovalInfo ( id.get ( ) ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
private com.google.gerrit.server.project.RefControl refControl ( java.lang.String repo , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gerrit.server.project.NoSuchProjectException , java.io.IOException { return projectControlFactory.controlFor ( new com.google.gerrit.reviewdb.client.Project.NameKey ( repo ) , userFactory.create ( user ) ) . controlFor ( change ) . getRefControl ( ) ; }
protected void run ( final java.lang.String [ ] argv ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.Failure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { sendButton.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public boolean isValidAuthorization ( java.lang.String keyIn ) { return keyIn.equals ( getAuthorization ( ) ) ; }
private com.google.gerrit.server.account.AccountState toAccountState ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( doc.getField ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . numericValue ( ) . intValue ( ) ) ; return accountCache.get ( ) . get ( id ) ; }
public void rebase ( com.google.gerrit.extensions.api.changes.RebaseInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply ( change , in ) ; } catch ( com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot rebase change" , e ) ; } }
public abstract com.google.gerrit.server.mail.receive.MailMessage.Builder dateReceived ( org.joda.time.DateTime val ) ;
private WorkQueue.Executor getExecutor ( ) { com.google.gerrit.server.git.WorkQueue.Executor executor ; if ( userProvider.get ( ) . isBatchUser ( ) ) { executor = queue.getBatchQueue ( ) ; } else { executor = queue.getInteractiveQueue ( ) ; } return executor ; }
public com.google.gerrit.server.project.ProjectState getParentState ( ) { if ( isAllProjects ) { return null ; } return projectCache.get ( getProject ( ) . getParent ( allProjectsName ) ) ; }
com.google.gerrit.server.git.ReplaceOp create ( com.google.gerrit.server.util.RequestScopePropagator requestScopePropagator , com.google.gerrit.server.project.ProjectControl projectControl , boolean checkMergedInto , @ com.google.inject.assistedinject.Assisted ( value = "priorPatchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId , @ com.google.inject.assistedinject.Assisted ( value = "priorCommit" ) org.eclipse.jgit.revwalk.RevCommit priorCommit , @ com.google.inject.assistedinject.Assisted ( value = "patchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , @ com.google.inject.assistedinject.Assisted ( value = "commit" ) org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.List < java.lang.String > groups , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.ReceiveCommits.MagicBranchInput magicBranch , @ com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate ) ;
protected void configureCommands ( ) { }
com.googlesource.gerrit.plugins.webhooks.PostTask create ( @ com.google.inject.assistedinject.Assisted ( value = "url" ) java.lang.String url , com.googlesource.gerrit.plugins.webhooks.EventProcessor processor ) ;
public void run ( ) { fixScroll ( cmB ) ; }
public void destroySite ( ) throws java.lang.Exception { if ( ( sitePath ) != null ) { com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSetUserName ( ) ; } }
public void shouldDeleteFromIndexInRemoteOnChangeDeletedEvent ( ) throws java.lang.Exception { indexEventHandler.onChangeDeleted ( id.get ( ) ) ; org.mockito.Mockito.verify ( restSessionMock ) . deleteFromIndex ( com.ericsson.gerrit.plugins.syncindex.IndexEventHandlerTest.CHANGE_ID ) ; }
java.lang.String getContentType ( ) { return getContentType ( diff.meta_b ( ) ) ; }
public com.google.gerrit.server.patch.FileList call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key , project ) ; return com.google.gerrit.server.patch.FileListLoader.toFileList ( patchList ) ; }
public void testBadEventAndNotForwarded ( ) throws java.lang.Exception { setUpMocks ( false , false ) ; eventHandler.onEvent ( event ) ; verifyAll ( ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType , result.canModifyState ) ; display ( result ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNewBranch ( ) ; } }
void onUpdate ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > extId ) throws java.io.IOException ;
public final void insert ( final java.lang.Iterable < E > instances , final com.google.gwtorm.client.Transaction txn ) throws com.google.gwtorm.client.OrmException { if ( txn != null ) { cast ( txn ) . queueInsert ( this , instances ) ; } else { insert ( instances ) ; } }
void setCurrentUrl ( com.google.gerrit.client.changes.DownloadUrlLink link ) { urls.setVisible ( true ) ; copyLabel.setText ( ( "git pull " + ( link.urlData ) ) ) ; }
protected boolean removeEldestEntry ( final java.util.Map.Entry < java.lang.Object , com.google.gerrit.client.ui.Screen > eldest ) { return 3 <= ( size ( ) ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput createComment ( final java.lang.String commentTemplate ) { return new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . message ( getCommentFromFile ( commentTemplate ) ) ; }
void delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { writer.deleteDocuments ( term ) ; }
public static com.google.gerrit.client.rpc.RestApi project ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.client.rpc.RestApi ( "projects" ) . id ( name.get ( ) ) ; }
public void visit ( org.pegdown.ast.TableHeaderNode node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; table.inHeader = true ; wrapChildren ( "thead" , node ) ; table.inHeader = false ; }
private void postInitPlugins ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.InitStep initStep : pluginLoader.getInitSteps ( ) ) { initStep.postRun ( ) ; } }
public void throwBadRequestTriggerOnBadQuery ( ) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException { java.lang.String badQuery = "bad query" ; easyMock.resetAll ( ) ; easyMock.replayAll ( ) ; store.queryChangeEvents ( badQuery ) ; easyMock.verifyAll ( ) ; }
public void listBranchesOfEmptyProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.rest.project.BranchAssert.assertBranches ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "HEAD" , null , false ) , com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "refs/meta/config" , null , false ) ) , list ( ) . get ( ) ) ; }
public void currentAndAll ( ) { assertIllegalArgument ( ( ( ( com.google.gerrit.testutil.IndexVersions.CURRENT ) + "," ) + ( com.google.gerrit.testutil.IndexVersions.ALL ) ) , ( "Invalid value for test: " + ( com.google.gerrit.testutil.IndexVersions.ALL ) ) ) ; }
public void fill ( java.util.Collection < ? extends com.google.gerrit.server.change.AccountInfo > infos ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.change.AccountInfo info : infos ) { put ( info ) ; } fill ( ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public static org.eclipse.jgit.lib.Config defaultConfig ( ) { return com.google.gerrit.server.notedb.NotesMigration.allEnabledConfig ( ) ; }
public static java.lang.String cleanupHashtag ( java.lang.String hashtag ) { hashtag = com.google.gerrit.server.change.HashtagsUtil.LEADER.trimLeadingFrom ( hashtag ) ; hashtag = com.google.common.base.CharMatcher.WHITESPACE.trimTrailingFrom ( hashtag ) ; return hashtag ; }
public synchronized com.google.gerrit.testutil.FakeEmailSender.Message nextMessage ( ) { com.google.gerrit.testutil.FakeEmailSender.Message msg = peekMessage ( ) ; ( messagesRead ) ++ ; return msg ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( final java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , java.util.Collections.< org.eclipse.jgit.diff.Edit > emptyList ( ) , 0 , 0 , 0 , 0 ) ; }
static void unmarkPrivate ( com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.unmarkPrivate ( id.get ( ) , com.google.gerrit.client.change.ChangeActions.cs ( id , draftButtons ) ) ; }
public void unblockLargerScope_Fails ( ) { com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/master" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
public java.lang.String [ ] getOwnerGroups ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { return cfg.getStringList ( com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME , findSubSection ( project.get ( ) ) , com.google.gerrit.server.config.RepositoryConfig.OWNER_GROUP_NAME ) ; }
private static boolean isGoogleAccount ( final com.dyuproject.openid.OpenIdUser user ) { return user.getIdentity ( ) . startsWith ( GoogleAccountDiscovery.GOOGLE_ACCOUNT ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException , java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse ( id ) ; if ( rsrc == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Project Not Found: %s" , id ) ) ; } return rsrc ; }
private boolean isEmpty ( ) { if ( ! ( migration.writeChanges ( ) ) ) { return true ; } return ( changeUpdates.isEmpty ( ) ) && ( draftUpdates.isEmpty ( ) ) ; }
public static void addSshKey ( java.lang.String account , java.lang.String sshPublicKey , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.account.SshKeyInfo > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "sshkeys" ) . post ( sshPublicKey , cb ) ; }
public java.lang.String toString ( ) { return name ( ) . toLowerCase ( ) ; }
public void defaultGpgCertificationDoesNotMatchEmail ( ) throws java.lang.Exception { addExternalId ( "test" , "test" , "nobody@example.com" ) ; assertProblems ( com.google.gerrit.gpg.testutil.TestKey.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( ( ( "identities:\n" + " gerrit:user\n" ) + " nobody@example.com\n" ) + " test:test\n" ) + " username:user" ) ) ) ; }
public static java.lang.String toPatchSideBySide ( final com.google.gerrit.reviewdb.Patch.Key id ) { return com.google.gerrit.client.HistoryHandler.toPatch ( "sidebyside" , id ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { addMember.fireEvent ( new com.google.gwt.event.dom.client.ClickEvent ( ) { } ) ; } }
public com.google.common.base.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) { return com.google.common.base.Optional.absent ( ) ; }
private static java.lang.String encodeBase64 ( final byte [ ] buf ) { return com.google.gwtjsonrpc.server.XsrfUtil.toString ( org.apache.commons.codec.binary.Base64.encodeBase64 ( buf ) ) ; }
public java.lang.String getRefName ( ) { return com.google.gerrit.server.edit.ChangeEditUtil.editRefName ( user.getAccountId ( ) , change.getId ( ) ) ; }
public boolean canPublish ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( isOwner ( ) ) && ( isVisible ( db ) ) ; }
public abstract boolean rebuildProject ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.common.collect.ImmutableMultimap < com.google.gerrit.reviewdb.client.Project.NameKey , com.google.gerrit.reviewdb.client.Change.Id > allChanges , com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.Repository allUsersRepo ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public com.googlecode.prolog_cafe.lang.NumberTerm not ( ) { throw new com.googlecode.prolog_cafe.lang.IllegalTypeException ( "integer" , this ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.ssh.GerritSshDaemon.class ) ; bind ( org.apache.sshd.server.CommandFactory.class ) . to ( com.google.gerrit.server.ssh.GerritCommandFactory.class ) ; }
protected com.google.gerrit.server.query.Predicate < T > defaultField ( java.lang.String value ) throws com.google.gerrit.index.query.QueryParseException { throw com.google.gerrit.server.query.QueryBuilder.error ( ( "Unsupported query:" + value ) ) ; }
public boolean updateUserModels ( java.util.Collection < com.gitblit.models.UserModel > models ) { return false ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException ;
public java.util.List < com.googlesrouce.gerrit.plugins.github.git.GHIssue > getIssues ( com.googlesrouce.gerrit.plugins.github.git.GHIssueState state ) throws java.io.IOException { return ghRepository.getIssues ( state ) ; }
protected void format ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "AddKey" ) ) ; appendHtml ( soyHtmlTemplate ( "AddKeyHtml" ) ) ; }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( "index" ) . add ( "p" , pred ) . add ( "limit" , limit ) . toString ( ) ; }
protected void onOpenRow ( final int row ) { super . onOpenRow ( row ) ; nameBox.setText ( getRowItem ( row ) . getName ( ) ) ; doAddNew ( ) ; }
static com.google.gerrit.server.git.PerThreadRequestScope set ( com.google.gerrit.server.git.PerThreadRequestScope ctx ) { com.google.gerrit.server.git.PerThreadRequestScope old = com.google.gerrit.server.git.PerThreadRequestScope.current.get ( ) ; com.google.gerrit.server.git.PerThreadRequestScope.current.set ( ctx ) ; return old ; }
private java.lang.String pushTagForNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , true , expectedStatus ) ; }
HEAD ( com.google.gerrit.acceptance.git.c31a38 Fix ) { }
public static com.google.gerrit.server.account.WatchConfig.NotifyValue create ( @ com.google.gerrit.common.Nullable java.lang.String filter , java.util.Collection < com.google.gerrit.server.account.WatchConfig.NotifyType > notifyTypes ) { return new com.google.gerrit.server.account.AutoValue_WatchConfig_NotifyValue ( com.google.common.base.Strings.emptyToNull ( filter ) , com.google.common.collect.Sets.immutableEnumSet ( notifyTypes ) ) ; }
boolean matches ( org.eclipse.jgit.lib.Repository git ) throws java.io.IOException { return ! ( com.google.gerrit.sshd.commands.ListProjects.FilterType.PERMISSIONS.matches ( git ) ) ; }
protected abstract void authorizeUser ( com.google.gerrit.server.project.ProjectControl control ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized ;
void onSubmit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.SubmitAction.call ( changeInfo , changeInfo.revision ( revision ) ) ; }
public void insert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { insertOne ( obj ) ; } maybeFlush ( ) ; }
private static java.lang.String findId ( final java.util.Collection < com.google.gerrit.reviewdb.AccountExternalId > ids ) { for ( final com.google.gerrit.reviewdb.AccountExternalId i : ids ) { if ( i.isScheme ( AccountExternalId.SCHEME_GERRIT ) ) { return i.getSchemeRest ( AccountExternalId.SCHEME_GERRIT ) ; } } return null ; }
public void setTheme ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Theme theme ) { this . theme = ( theme != null ) ? theme.name ( ) : null ; }
public void addGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID id ) { groupsToInspect.add ( id ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; setTopic ( update ) ; }
public static void grant ( com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.common.data.AccessSection section , com.google.gerrit.common.data.LabelType type , int min , int max , com.google.gerrit.common.data.GroupReference ... groupList ) { com.google.gerrit.server.schema.AclUtil.grant ( config , section , type , min , max , false , groupList ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , final com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , c , user ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.postSignIn ( result , null ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; } showInitialScreen ( ) ; }
public void onClick ( final com.google.gwt.user.client.ui.Widget sender ) { doRegisterNewEmail ( ) ; }
public < T > com.google.common.base.Optional < T > getResource ( java.lang.String resourcePath , java.lang.Class < ? extends T > resourceClass ) { return com.google.common.base.Optional.absent ( ) ; }
com.google.gerrit.sshd.SshScope.Context newContext ( com.google.gerrit.sshd.SshSession session , java.lang.String commandLine ) { return new com.google.gerrit.sshd.SshScope.Context ( session , commandLine , java.lang.System.currentTimeMillis ( ) ) ; }
void inc ( java.lang.String name , org.objectweb.asm.Type ... args ) { mv.visitMethodInsn ( com.google.gwtorm.protobuf.INVOKESTATIC , com.google.gwtorm.protobuf.CodecGen.codedOutputStream.getInternalName ( ) , name , org.objectweb.asm.Type.getMethodDescriptor ( Type.INT_TYPE , args ) ) ; inc ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createForNew ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load ( ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box , com.google.gerrit.common.changes.Side side ) { getPanelFromSide ( side ) . addFileComment ( box ) ; }
public void onSuccess ( com.google.gerrit.common.data.ProjectAccess access ) { enable ( true ) ; commitMessage.setText ( "" ) ; displayReadOnly ( access ) ; }
protected void configureCommands ( ) { command ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscriptionCommand.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.BranchManifestCommand.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.TagManifestCommand.class ) ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( ) throws java.io.IOException { return commit ( com.google.common.base.Preconditions.checkNotNull ( updateFactory , "MetaDataUpdate.Factory" ) . create ( getChange ( ) . getProject ( ) , getUser ( ) ) ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testing.IndexVersions.getWithoutLatest ( com.google.gerrit.server.index.project.ProjectSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testing.IndexVersions.asConfigMap ( ProjectSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , defaultConfig ( ) ) ; }
private void exitWhenCancelled ( ) throws com.googlesrouce.gerrit.plugins.github.git.JobCancelledException { if ( cancelRequested ) { throw new com.googlesrouce.gerrit.plugins.github.git.JobCancelledException ( ) ; } }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenus ( ) ; }
public static java.lang.String escape ( final java.lang.String in ) { return com.google.gerrit.client.ui.DomUtil.INSTANCE.escape ( in ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; bind ( com.google.gerrit.pgm.init.Browser.class ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; }
public void merge ( final com.google.gerrit.reviewdb.Branch.NameKey branch ) { if ( start ( branch ) ) { mergeImpl ( branch ) ; } }
protected abstract com.google.gwtorm.client.ResultSet < T > scanIndex ( com.google.gwtorm.nosql.IndexFunction < T > index , byte [ ] fromKey , byte [ ] toKey , int limit ) throws com.google.gwtorm.client.OrmException ;
protected void submitWithConflict ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { if ( ( token ) == null ) { return null ; } return org.kohsuke.github.GitHub.connectUsingOAuth ( config.gitHubApiUrl , token.accessToken ) ; }
public void removePublisher ( final com.googlesource.gerrit.plugins.rabbitmq.message.Publisher publisher ) { source.removeEventListener ( publisher ) ; }
private int context ( ) { return settings.getContext ( ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfo result ) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor ( result.commentlinks ( ) ) ; display ( pubDetail ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput createRobotCommentInput ( ) { com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = new com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput ( ) ; in.robotId = "happyRobot" ; in.robotRunId = "1" ; in.url = "http://www.happy-robot.com" ; in.line = 1 ; in.message = "nit: trailing whitespace" ; in.path = com.google.gerrit.acceptance.PushOneCommit.FILE_NAME ; return in ; }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( project ) == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name ) ; } return projectJson.format ( project.getControl ( ) ) ; }
boolean canAddPatchSet ( ) { return projectControl.controlForRef ( ( "refs/for/" + ( refName ) ) ) . canPerform ( Permission.ADD_PATCH_SET ) ; }
protected void configure ( ) { bind ( new com.google.inject.TypeLiteral < com.google.gerrit.extensions.registration.DynamicSet < com.google.gerrit.server.cache.CacheRemovalListener > > ( ) { } ) . toInstance ( com.google.gerrit.extensions.registration.DynamicSet.< com.google.gerrit.server.cache.CacheRemovalListener > emptySet ( ) ) ; install ( new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module ( ) ) ; }
com.google.gerrit.server.git.GitModules create ( com.google.gerrit.reviewdb.client.Branch.NameKey project , java.lang.String submissionId ) ;
public void abandonReviewableChangeByOtherCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accounts.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( other ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
abstract void onAllNodesReplicated ( int totalPushTasksCount ) ;
void onCancel ( ) { }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getChangeUpdate ( ) . setTopic ( magicBranch.topic ) ; }
public void destroy ( ) { for ( com.google.gerrit.httpd.AllRequestFilter f : filters ) { f.destroy ( ) ; } }
private static void clearSection ( org.eclipse.jgit.lib.Config cfg , java.lang.String section ) { for ( java.lang.String subsection : cfg.getSubsections ( section ) ) { cfg.unsetSection ( section , subsection ) ; } }
public boolean isOwner ( ) { return ( controlForRef ( AccessSection.ALL ) . isOwner ( ) ) || ( getCurrentUser ( ) . getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstDefaultBase ( org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( null , newId , ws ) ; }
com.google.gerrit.sshd.SshScope.Context newContext ( com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > sf , com.google.gerrit.sshd.SshSession s , java.lang.String cmd ) { return new com.google.gerrit.sshd.SshScope.Context ( sf , s , cmd , com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) ; }
private com.google.inject.Injector createSshInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( new com.google.gerrit.sshd.SshModule ( ) ) ; modules.add ( new com.google.gerrit.sshd.commands.MasterCommandModule ( ) ) ; return sysInjector.createChildInjector ( modules ) ; }
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.extensions.client.ListChangesOption ... options ) throws java.io.IOException { return getChange ( admin , changeId , options ) ; }
private static com.google.gerrit.reviewdb.server.ReviewDb unwrap ( com.google.gerrit.reviewdb.server.ReviewDb db ) { if ( db instanceof com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) { db = ( ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper ) ( db ) ) . unsafeGetDelegate ( ) ; } return db ; }
public void start ( ) { if ( ( listeners ) == null ) { listeners = all ( ) ; for ( com.google.gerrit.lifecycle.LifecycleListener obj : listeners ) { obj.start ( ) ; } } }
boolean isDisabled ( ) { return ( getPermittedLimit ( ) ) <= 0 ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.git.PushOneCommit push = new com.google.gerrit.acceptance.git.PushOneCommit ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
private com.google.gerrit.server.permissions.ProjectControl user ( com.google.gerrit.server.git.ProjectConfig local , com.google.gerrit.reviewdb.client.AccountGroup ... memberOf ) { return user ( local , null , memberOf ) ; }
private java.lang.String newChange2 ( org.eclipse.jgit.api.Git git , org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD ) ; return push.rm ( git , "refs/for/master" ) . getChangeId ( ) ; }
public int nextAccountGroupId ( ) { throw new java.lang.AssertionError ( com.google.gerrit.testutil.DisabledReviewDb.MESSAGE ) ; }
public java.lang.String getUserName ( ) { return state ( ) . getUserName ( ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { return session.get ( ) . getCurrentUser ( ) ; }
private void subSecondResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( 100 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) { return new com.google.gerrit.server.project.FileResource ( parent.getNameKey ( ) , parent.getRef ( ) , id.get ( ) ) ; }
public Project.NameKey getProject ( ) { return project.getNameKey ( ) ; }
private boolean getSslVerify ( ) { return gerritConfig.getBoolean ( com.googlesource.gerrit.plugins.hooks.rtc.RTCItsFacade.ITS_NAME_RTC , null , com.googlesource.gerrit.plugins.hooks.rtc.RTCItsFacade.GERRIT_CONFIG_SSL_VERIFY , true ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gerrit.client.rpc.HttpCallback < T > cb ) { sendRaw ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void run ( ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "<PageUp>" ) ; }
java.lang.String getTag ( ) { return getLast ( ) . tag ; }
public void newPatchSetByOtherOnReviewableChangeNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=NONE" , other ) ; assertThat ( sender ) . notSent ( ) ; }
private com.google.gerrit.extensions.common.ChangeInfo getWithLabels ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { return get ( r.getChangeId ( ) , ListChangesOption.LABELS , ListChangesOption.DETAILED_LABELS ) ; }
void onRefReplicatedToAllNodes ( java.lang.String project , java.lang.String ref , int nodesCount ) { com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent event = new com.googlesource.gerrit.plugins.replication.RefReplicationDoneEvent ( project , ref , nodesCount ) ; postEvent ( project , ref , event ) ; }
private com.google.gerrit.server.change.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.server.change.ApprovalInfo ai = new com.google.gerrit.server.change.ApprovalInfo ( id ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
public void addGroupMember ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.Account.Id accountId ) throws com.google.gwtorm.server.OrmException , java.io.IOException { addGroupMembers ( db , groupId , com.google.common.collect.ImmutableSet.of ( accountId ) ) ; }
public static com.google.gerrit.server.index.IndexConfig fromConfig ( org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.create ( cfg.getInt ( "index" , null , "maxLimit" , java.lang.Integer.MAX_VALUE ) ) ; }
com.google.gerrit.server.CurrentUser provideCurrentUser ( com.google.gerrit.server.util.RequestContext ctx ) { return ctx.getCurrentUser ( ) ; }
private void assertBadRequest ( com.google.gerrit.extensions.api.projects.Projects.ListRequest req ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.BadRequestException.class ) ; req.get ( ) ; }
private void doQuery ( ) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( com.google.gerrit.client.documentation.DocScreen.URI ) ; call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( query ) ) ; call.get ( loadCallback ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ReviewInput result ) { if ( submit ) { submit ( ) ; } else { saveStateOnUnload = false ; goChange ( ) ; } }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig ) ) ; }
public void evictAll ( ) { byName.removeAll ( ) ; }
private final native void setIgnoreWhitespaceRaw ( java.lang.String i ) ;
protected void expand ( final com.google.gerrit.client.ui.ComplexDisclosurePanel w ) { w.setOpen ( open ) ; }
public static java.lang.String toAccountGroup ( final com.google.gerrit.reviewdb.AccountGroup.Id id ) { return "admin,group," + ( id.toString ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { l.setVisible ( false ) ; edit.setVisible ( false ) ; input.setVisible ( true ) ; save.setVisible ( true ) ; cancel.setVisible ( true ) ; }
public com.google.gerrit.server.account.AccountState get ( final com.google.gerrit.reviewdb.Account.Id accountId ) { return byId.get ( accountId ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.Change change ) ;
public static com.google.gerrit.common.data.GerritConfig getConfig ( ) { return com.google.gerrit.client.Gerrit.myConfig ; }
public int compare ( com.google.gerrit.client.account.GpgKeyInfo a , com.google.gerrit.client.account.GpgKeyInfo b ) { return a.id ( ) . compareTo ( b.id ( ) ) ; }
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead ( ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ) { return getHead ( repo , "refs/heads/master" ) ; } }
public void removeAll ( ) { self.removeAll ( ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { return source.read ( ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { final int sel = ws.getSelectedIndex ( ) ; if ( 0 <= sel ) { scriptSettings.setWhitespace ( com.google.gerrit.client.data.PatchScriptSettings.Whitespace.valueOf ( ws.getValue ( sel ) ) ) ; refresh ( false ) ; } }
public void onSuccess ( com.google.gerrit.reviewdb.client.Account result ) { if ( ! ( isAttached ( ) ) ) { return ; } display ( com.google.gerrit.client.FormatUtil.asInfo ( result ) ) ; haveAccount = true ; postLoad ( ) ; }
public final native boolean has_permitted_labels ( ) ;
protected void configure ( ) { factory ( ReviewerResource.Factory.class ) ; factory ( AccountInfo.Loader.Factory.class ) ; factory ( EmailReviewComments.Factory.class ) ; }
void unset ( java.lang.String section , java.lang.String subsection , java.lang.String name ) ;
com.google.common.util.concurrent.ListenableFuture < ? > insert ( org.apache.lucene.document.Document doc ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.addDocument ( doc ) ) ; }
private com.google.gerrit.server.config.GetServerInfo.ReceiveInfo getReceiveInfo ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.server.config.GetServerInfo.ReceiveInfo info = new com.google.gerrit.server.config.GetServerInfo.ReceiveInfo ( ) ; info.enableSignedPush = com.google.gerrit.server.git.SignedPushModule.isEnabled ( cfg ) ; return info ; }
public void logout ( ) { if ( ( val ) != null ) { manager.destroy ( key ) ; key = null ; val = null ; saveCookie ( ) ; } }
void setPreferred ( boolean preferred ) { this . preferred = ( preferred ) ? true : null ; }
public boolean isVisible ( ) { return ( group.isVisibleToAll ( ) ) || ( isOwner ( ) ) ; }
public static void submit ( int id , java.lang.String commit , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.SubmitInfo > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.call ( id , commit , "submit" ) . post ( in , cb ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.AccountGroup group ) { return group.getName ( ) . regionMatches ( true , 0 , name , 0 , name.length ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { onGutterClick ( cmLine ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHUser getOwner ( ) throws java.io.IOException { return ghRepository.getOwner ( ) ; }
public boolean yesno ( java.lang.String fmt , java.lang.Object ... args ) { return true ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commits , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted ) ;
public static synchronized void resetWithClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = new java.util.concurrent.atomic.AtomicLong ( com.google.gerrit.testutil.TestTimeUtil.START.getMillis ( ) ) ; com.google.gerrit.testutil.TestTimeUtil.setClockStep ( clockStep , clockStepUnit ) ; }
public void flush ( ) throws java.lang.IllegalStateException , net.sf.ehcache.CacheException { self.flush ( ) ; }
protected void configureServlets ( ) { bind ( com.googlesource.gerrit.plugins.manager.AvailablePluginsCollection.class ) ; bind ( com.googlesource.gerrit.plugins.manager.repository.PluginsRepository.class ) . to ( com.googlesource.gerrit.plugins.manager.repository.JenkinsCiPluginsRepository.class ) ; serve ( "/available*" ) . with ( com.googlesource.gerrit.plugins.manager.PluginManagerRestApiServlet.class ) ; filterRegex ( ".*\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; }
public java.nio.file.FileSystem createFileSystem ( org.apache.sshd.common.Session session ) throws java.io.IOException { return java.nio.file.FileSystems.getDefault ( ) ; }
public java.lang.Long apply ( org.eclipse.jgit.lib.Ref ref ) { try { return timeCache.getTime ( walk , ref.getObjectId ( ) ) ; } catch ( java.io.IOException e ) { throw new com.google.common.util.concurrent.UncheckedExecutionException ( e ) ; } }
public com.google.gerrit.pgm.init.Section get ( java.lang.String name ) { return new com.google.gerrit.pgm.init.Section ( flags , site , ui , name ) ; }
public void setSampledStatisticsEnabled ( boolean enableStatistics ) { self ( ) . setSampledStatisticsEnabled ( enableStatistics ) ; }
abstract java.lang.Long timeoutMs ( ) ;
private final native boolean get ( java.lang.String n , boolean d ) ;
public static java.lang.String publicKey ( com.jcraft.jsch.KeyPair sshKey , java.lang.String comment ) throws java.io.UnsupportedEncodingException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; sshKey.writePublicKey ( out , comment ) ; return out.toString ( java.nio.charset.StandardCharsets.US_ASCII.name ( ) ) ; }
public long getLong ( java.lang.String name , long defaultValue ) { return getValue ( name , new com.google.common.base.Function < java.lang.String , java.lang.Long > ( ) { @ java.lang.Override public java.lang.Long apply ( java.lang.String stringVal ) { return java.lang.Long.parseLong ( stringVal ) ; } } , defaultValue ) ; }
private void fastForwardTagToExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , false , expectedStatus ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; }
void onHeaderClick ( com.google.gwt.event.dom.client.ClickEvent e ) { setOpen ( ( ! ( isOpen ( ) ) ) ) ; }
public void deleteExternalIds ( java.util.List < java.lang.String > externalIds ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply ( account , externalIds ) ; } catch ( java.io.IOException | com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete external IDs" , e ) ; } }
public java.lang.String getRepository ( ) { return gitHubRepository.getRepository ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
public org.apache.sshd.common.file.FileSystemView createFileSystemView ( org.apache.sshd.common.Session session ) throws java.io.IOException { return new org.apache.sshd.common.file.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( org.apache.sshd.common.file.SshFile baseDir , java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.common.file.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInfo content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
public static void includedIn ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.IncludedInInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "in" ) . get ( cb ) ; }
public void addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postReviewers.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.git.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
public static com.google.gerrit.server.account.AuthRequest forExternalUser ( java.lang.String username ) { com.google.gerrit.server.account.AuthRequest r = new com.google.gerrit.server.account.AuthRequest ( ExternalId.Key.create ( com.google.gerrit.server.account.ExternalId.SCHEME_EXTERNAL , username ) ) ; r.setUserName ( username ) ; return r ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { setFocus ( false ) ; }
public static void getSshKeys ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JsArray < com.google.gerrit.client.account.SshKeyInfo > > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "sshkeys" ) . get ( cb ) ; }
public void rollback ( ) throws com.google.gwtorm.server.OrmException { delegate.rollback ( ) ; }
private static com.google.gerrit.client.rpc.RestApi call ( int id , java.lang.String action ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( action ) ; }
protected void onOpenRow ( final int row ) { final com.google.gerrit.client.changes.ChangeInfo c = getRowItem ( row ) ; final com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.ChangeField.getCommitterParts ( object ) . contains ( getValue ( ) . toLowerCase ( ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSetUserName ( ) ; } }
public void setLimit ( int l ) { this . limit = ( l <= 0 ) ? com.google.gerrit.server.change.SuggestReviewers.MAX : java.lang.Math.min ( l , com.google.gerrit.server.change.SuggestReviewers.MAX ) ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "psId" , psId ) . add ( "who" , who ) . add ( "when" , when ) . toString ( ) ; }
private com.google.gerrit.server.api.accounts.AccountInfoComparator setNullsLast ( ) { this . nullsLast = true ; return this ; }
public com.atlassian.jira.rest.client.api.domain.Issue getIssue ( java.lang.String issueKey ) throws com.atlassian.jira.rest.client.api.RestClientException { com.atlassian.jira.rest.client.api.IssueRestClient issueClient = this . client.getIssueClient ( ) ; return issueClient.getIssue ( issueKey ) . claim ( ) ; }
private void cherryPickUnbornRoot ( com.google.gerrit.server.git.CodeReviewCommit n , com.google.gerrit.server.git.MergeTip mergeTip ) { mergeTip.moveTipTo ( n , n ) ; n.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; }
private java.lang.String urlPublish ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/publish_edit" ; }
private void initPlugins ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.InitStep initStep : pluginLoader.getInitSteps ( ) ) { initStep.run ( ) ; } }
protected void assertQuery ( java.lang.Object query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { assertQuery ( newQuery ( query ) , changes ) ; }
public void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { indexer.get ( ) . index ( group.getGroupUUID ( ) ) ; }
public final native void manualReview ( boolean r ) ;
private java.lang.String newChange ( org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = HEAD ( 0 ) ; com.google.gerrit.acceptance.edit.Merge changes ; }
void logout ( ) { tokenCache.remove ( user ) ; user = null ; redirectToken = null ; serviceProvider = null ; }
public void doFilter ( javax.servlet.ServletRequest req , javax.servlet.ServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { javax.servlet.http.HttpServletResponse res = ( ( javax.servlet.http.HttpServletResponse ) ( response ) ) ; com.google.gerrit.httpd.plugins.HttpPluginServlet.noCache ( res ) ; res.sendError ( HttpServletResponse.SC_NOT_FOUND ) ; }
public void setPatchSet ( final com.google.gerrit.reviewdb.PatchSet ps , final com.google.gerrit.reviewdb.PatchSetInfo psi ) { patchSet = ps ; patchSetInfo = psi ; }
private void setChangeSubjectHeader ( ) throws com.google.gerrit.common.errors.EmailException { setHeader ( "Subject" , velocifyFile ( "ChangeSubject.vm" ) ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.ChangeInfo input ) { return input.changeId ; }
public void onSuccess ( final com.google.gerrit.client.data.ChangeDetail r ) { if ( isAttached ( ) ) { setStarred ( r.isStarred ( ) ) ; display ( r ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( obj instanceof com.google.gerrit.server.auth.AuthUser.UUID ) { return get ( ) . equals ( ( ( com.google.gerrit.server.auth.AuthUser.UUID ) ( obj ) ) . get ( ) ) ; } return false ; }
public void doRefUpdatedHook ( final com.google.gerrit.reviewdb.Branch.NameKey refName , final org.eclipse.jgit.lib.RefUpdate refUpdate , final com.google.gerrit.reviewdb.Account account ) { doRefUpdatedHook ( refName , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , account ) ; }
public void updateRepo ( com.google.gerrit.server.update.BatchUpdate.RepoContext ctx ) throws java.lang.Exception { com.google.gerrit.server.edit.ChangeEditUtil.deleteRef ( ctx.getRepository ( ) , edit ) ; }
protected com.google.gerrit.extensions.common.ChangeInfo getChange ( java.lang.String changeId , com.google.gerrit.extensions.common.ListChangesOption ... options ) throws java.io.IOException { return getChange ( adminSession , changeId , options ) ; }
public com.google.common.collect.ImmutableListMultimap < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client.PatchSetApproval > getApprovals ( ) { return state.approvals ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; nameBox.setEnabled ( true ) ; filterTxt.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public static net.codemirror.lib.TextMarker.FromTo create ( net.codemirror.lib.LineCharacter from , net.codemirror.lib.LineCharacter to ) { net.codemirror.lib.TextMarker.FromTo fromTo = createObject ( ) . cast ( ) ; fromTo.setFrom ( from ) ; fromTo.setTo ( to ) ; return fromTo ; }
public java.lang.Object getScreenCacheToken ( ) { return anchor ; }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content ) ; renderLinks ( editFileInfo , diffLinks ) ; editFileInfo = null ; diffLinks = null ; }
public int getCost ( ) { return that.getCost ( ) ; }
public void start ( ) { for ( com.googlesource.gerrit.plugins.replication.Destination cfg : config.getDestinations ( ) ) { cfg.start ( workQueue ) ; } running = true ; }
private boolean hasChanges ( com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.changes.ChangeList > result ) { for ( com.google.gerrit.client.changes.ChangeList list : result.asList ( ) ) { if ( ! ( list.isEmpty ( ) ) ) { return true ; } } return false ; }
void onDeleteRevision ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftRevision ( ) ) ) { com.google.gerrit.client.change.ChangeActions.delete ( changeId , revision , publish , deleteRevision ) ; } }
public java.lang.String getAccessToken ( ) { return isSignedIn ( ) ? key.getToken ( ) : null ; }
HEAD ( com.google.gerrit.extensions.api.changes.b3f1de dev ) { }
void restoreChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.ScreenLoadCallback.isNoSuchEntity ( caught ) ) { com.google.gerrit.client.Gerrit.display ( new com.google.gerrit.client.NotFoundScreen ( ) ) ; } else { super . onFailure ( caught ) ; } }
public final native boolean isScrollSetByOther ( ) ;
private void postDeletion ( com.google.gerrit.server.project.ProjectResource project , org.eclipse.jgit.transport.ReceiveCommand cmd ) { referenceUpdated.fire ( project.getNameKey ( ) , cmd , identifiedUser.get ( ) . getAccount ( ) ) ; }
private static void assertOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { org.junit.Assert.assertTrue ( ( "OWN " + ref ) , u.controlForRef ( ref ) . isOwner ( ) ) ; }
protected void onExit ( final int rc ) { com.google.gerrit.sshd.commands.ead StreamEvents ; com.google.gerrit.sshd.commands.Fix NPE ; com.google.gerrit.sshd.commands.invoking the ; with ( ( -- ( help ) ) ) ; removeEventListenerRegistration ( ) ; synchronized ( taskLock ) { done = true ; } super . onExit ( rc ) ; }
public void suggestReviewersNoResult3 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public void unregisterWorkQueue ( ) { queues.remove ( this ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNew ( ) ; } }
private static void ensureInited ( ) { if ( ( com.google.gerrit.client.FormatUtil.dtfmt ) == null ) { com.google.gerrit.client.FormatUtil.setPreferences ( null ) ; } }
void insertMember ( final com.google.gerrit.client.reviewdb.AccountGroupMember k ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; populate ( row , k ) ; }
public void test ( ) throws java.lang.Exception { java.lang.String [ ] invalidFilenamePattern = new java.lang.String [ ] { "[@:]" , "[#%*]" } ; org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.performValidation ( repo , c , invalidFilenamePattern ) ; java.util.List < com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage > expected = new java.util.ArrayList < > ( ) ; for ( java.lang.String filenames : getInvalidFilenames ( ) ) { expected.add ( new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage ( ( "invalid characters found in filename: " + filenames ) , true ) ) ; } com.google.common.truth.Truth.assertThat ( m ) . hasSize ( 5 ) ; com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsAllIn ( expected ) ; }
public void onChangeEvent ( com.google.gerrit.server.events.ChangeEvent event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent cMEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults.put ( cMEvent.change.number , cMEvent.newRev ) ; } }
public abstract com.google.gerrit.server.group.db.InternalGroupUpdate.Builder setOwnerGroupUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerGroupUUID ) ;
public void inalidPathSeparator ( ) { for ( char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray ( ) ) { org.junit.Assert.assertFalse ( ( "invalid character accepted: " + c ) , com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator ( c ) ) ; } }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultAccountGroupName ( ) . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( "" ) ; nameTxtBox.removeStyleName ( "gerrit-InputFieldTypeHint" ) ; } }
public boolean canForwardX11 ( org.apache.sshd.common.session.Session session ) { return false ; }
com.google.gerrit.server.git.WorkQueue.Executor getExecutor ( @ com.google.gerrit.server.config.GerritServerConfig final org.eclipse.jgit.lib.Config config , final com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "receive" , null , "threadPoolSize" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) ) ; return queues.createQueue ( poolSize , "ReceiveCommits" ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.reviewdb.client.Change change ) { return delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public boolean canDelete ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) && ( isOwner ( ) ) ) && ( isVisible ( db ) ) ; }
private static java.lang.String startTime ( final java.util.Date when ) { return com.google.gerrit.sshd.commands.ShowQueue.format ( when , ( ( java.lang.System.currentTimeMillis ( ) ) - ( when.getTime ( ) ) ) ) ; }
public void addHeader ( java.lang.String name , java.lang.String value ) { headers.put ( name , value ) ; }
public com.google.gerrit.server.plugins.Plugin.ApiType getApiType ( ) { try { return com.google.gerrit.server.plugins.Plugin.getApiType ( manifest ) ; } catch ( com.google.gerrit.server.plugins.InvalidPluginException e ) { return null ; } }
private void updateForm ( ) { addTag.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
public boolean match ( com.google.gerrit.reviewdb.PatchSetApproval p , short value ) { return ( p.getValue ( ) ) <= value ; }
public void put ( com.google.gerrit.server.account.AccountInfo info ) { provided.add ( info ) ; }
public static void setForwardedEvent ( java.lang.Boolean b ) { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.FORWARDED_EVENT.set ( b ) ; }
public void setChangeScreen ( com.google.gerrit.reviewdb.client.AccountGeneralPreferences.ChangeScreen ui ) { this . changeScreen = ui ; }
public int hashCode ( ) { return uuid.hashCode ( ) ; }
public void testEndsOnNewline ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 1 ) , iter.advance ( 4 ) ) ; }
public com.google.gerrit.server.CurrentUser getCurrentUser ( ) { if ( ( user ) == null ) { throw new java.lang.IllegalStateException ( "user == null, forgot to set it?" ) ; } return user ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { in.label ( id , v ) ; } }
private static com.google.gerrit.extensions.auth.oauth.OAuthToken getAsOAuthToken ( com.googlesource.gerrit.plugins.cfoauth.AccessToken accessToken ) { return new com.google.gerrit.extensions.auth.oauth.OAuthToken ( accessToken.getValue ( ) , null , null ) ; }
public static int toIndexTime ( java.sql.Timestamp ts ) { return ( ( int ) ( ( ts.getTime ( ) ) / 60000 ) ) ; }
public void setExisting_Conflict ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = admin.username ; adminSession.put ( ( ( "/accounts/" + ( createUser ( ) . get ( ) ) ) + "/username" ) , in ) . assertConflict ( ) ; }
public void listTagsOfNonVisibleProjectWithApi ( ) throws java.lang.Exception { blockRead ( "refs/*" ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . tags ( ) . get ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , allUsersProvider , change ) ; }
public java.lang.String buildCommand ( com.google.gerrit.httpd.raw.Label l ) { return "bazel build " + ( l.toString ( ) ) ; }
com.google.gerrit.server.git.MetaDataUpdate create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.Repository db , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.BatchRefUpdate batch ) ;
public void rebuildEmptySiteStartingWithNoteDbEnabled ( ) throws java.lang.Exception { setNotesMigrationState ( NotesMigrationState.READ_WRITE_NO_SEQUENCE ) ; com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "RebuildNoteDb" , "-d" , sitePath , "--show-stack-trace" ) ; assertNotesMigrationState ( NotesMigrationState.READ_WRITE_NO_SEQUENCE ) ; }
com.google.gerrit.server.patch.AddReviewer create ( com.google.gerrit.reviewdb.Change.Id changeId , java.util.Collection < java.lang.String > nameOrEmails ) ;
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.Account.Id owner ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( repo , LABEL_TYPES , c , owner , null ) ; }
public void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.git.IntegrationException , java.io.IOException { args.mergeTip.moveTipTo ( toMerge , toMerge ) ; }
public com.google.gerrit.server.account.AccountState getByUsername ( java.lang.String username ) ;
void addBranch ( com.google.gerrit.reviewdb.Project.NameKey projectName , java.lang.String branchName , java.lang.String startingRevision , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) ;
public void createChangeWithPrivateByDefaultDisabled ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes ( ) . create ( new com.google.gerrit.extensions.common.ChangeInput ( project.get ( ) , "master" , "empty change" ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.isPrivate ) . isNull ( ) ; }
public com.google.gerrit.server.query.DataSource < com.google.gerrit.reviewdb.client.AccountGroup > getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > p , com.google.gerrit.server.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticGroupIndex.QuerySource ( p , opts ) ; }
public net.sf.ehcache.statistics.sampled.SampledCacheStatistics getSampledCacheStatistics ( ) { return self.getSampledCacheStatistics ( ) ; }
public com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData apply ( com.google.gerrit.server.plugins.JarScanner.ClassData classData ) { return new com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData ( classData.className , classData.annotationValue ) ; }
private void display ( final com.google.gerrit.client.admin.ProjectDetail result ) { final com.google.gerrit.client.reviewdb.Project project = result.project ; setTitleText ( Util.M.project ( project.getName ( ) ) ) ; }
public com.google.gitiles.doc.html.HtmlBuilder space ( ) { finishActiveTag ( ) ; htmlBuf.append ( ' ' ) ; return this ; }
public void onFailure ( java.lang.Throwable caught ) { b.setEnabled ( true ) ; }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.Change.Id id ) throws com.google.gerrit.server.project.NoSuchChangeException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( id ) ) ; }
public com.googlesource.gerrit.plugins.hooks.validation.ItsAssociationPolicy getItsAssociationPolicy ( ) { return gerritConfig.getEnum ( "commentlink" , pluginName , "association" , ItsAssociationPolicy.OPTIONAL ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) ;
public boolean yesno ( java.lang.String fmt , java.lang.Object ... args ) { return true ; }
private void checkEnabled ( ) throws com.google.gerrit.extensions.restapi.NotImplementedException { if ( notesMigration.readChanges ( ) ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( "check not implemented for notedb" ) ; } }
PatchSet.Id getRevision ( ) { return revision ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , base ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "" , diffBase , revision , fileName , side , line ) ; }
public boolean isUseSignedOffBy ( ) { return useSignedOffBy ; }
public final com.google.gerrit.server.git.MergeTip run ( final com.google.gerrit.server.git.CodeReviewCommit currentTip , final java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; return _run ( currentTip , toMerge ) ; }
private static void addLink ( final com.google.gwt.user.client.ui.MenuBar m , final java.lang.String text , final java.lang.String historyToken ) { m.addItem ( new com.google.gerrit.client.ui.LinkMenuItem ( text , historyToken ) ) ; }
public boolean failChangeWrites ( ) { return ( ! ( writeChanges ( ) ) ) && ( readChanges ( ) ) ; }
public com.google.gerrit.client.ui.Screen recycleThis ( final com.google.gerrit.client.ui.Screen newScreen ) { final com.google.gerrit.client.changes.AllSingleListScreen o = ( ( com.google.gerrit.client.changes.AllSingleListScreen ) ( newScreen ) ) ; useLoadPrev = o.useLoadPrev ; pos = o.pos ; return this ; }
void addOption ( com.google.gerrit.extensions.client.ListChangesOption o ) { json.addOption ( o ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , select ( ) ) ; }
public void onClose ( com.google.gwt.event.logical.shared.CloseEvent < com.google.gerrit.client.ui.RemoteSuggestBox > event ) { hide ( ) ; }
private void initUI ( ) { initOwner ( ) ; initDescription ( ) ; }
public com.google.gerrit.extensions.client.DiffPreferencesInfo getDefaultDiffPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDiffPreferences.apply ( new com.google.gerrit.server.config.ConfigResource ( ) ) ; } catch ( java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get default diff preferences" , e ) ; } }
public boolean changesTablesEnabled ( ) { return delegate.changesTablesEnabled ( ) ; }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { if ( acct != null ) { com.google.gerrit.server.ssh.SshUtil.invalidate ( acct.getPreferredEmail ( ) ) ; } }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
public com.google.gerrit.server.IdentifiedUser getUser ( ) { return ( ( com.google.gerrit.server.IdentifiedUser ) ( ctl.getUser ( ) ) ) ; }
public void relativeLink ( ) throws java.lang.Exception { repo.branch ( "master" ) . commit ( ) . add ( "A/B/README.md" , "[c](../../C)" ) . create ( ) ; java.lang.String html = buildHtml ( "/repo/+doc/master/A/B/README.md" ) ; com.google.common.truth.Truth.assertThat ( html ) . contains ( "<a href=\"/b/repo/+show/master/C\">c</a>" ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; display ( ) ; refresh ( false , false ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
private com.google.gerrit.acceptance.RestResponse GET ( java.lang.String endpoint ) throws java.io.IOException { return adminSession.get ( endpoint ) ; }
public void onFailure ( java.lang.Throwable caught ) { enableButtons ( true ) ; }
public void preDisplay ( com.google.gerrit.client.projects.ConfigInfo result ) { display ( result ) ; }
private void assertNoProblems ( com.google.gerrit.gpg.testutil.TestKey tk ) { assertNoProblems ( tk.getPublicKey ( ) ) ; }
public void pushForNonExistingBranch ( ) throws java.lang.Exception { java.lang.String branchName = "non-existing" ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( ( "refs/for/" + branchName ) ) ; r.assertErrorStatus ( ( ( "branch " + branchName ) + " not found" ) ) ; }
public void createMergeChange ( ) throws java.lang.Exception { changeInTwoBranches ( "a.txt" , "b.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "master" , "branchA" , ChangeStatus.NEW ) ; assertCreateSucceeds ( in ) ; }
private java.lang.String createMyChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , user.getIdent ( ) , testRepo ) ; return push.to ( "refs/for/master" ) . getChangeId ( ) ; }
private java.nio.file.Path resolvePath ( javax.servlet.http.HttpServletRequest req ) { return sitePaths.resolve ( ( ( req.getServletPath ( ) ) + ( req.getPathInfo ( ) ) ) ) ; }
public com.google.gerrit.server.project.ProjectControl getProject ( ) { return project.getControl ( ) ; }
public synchronized com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.server.account.AccountState state = getIfPresent ( accountId ) ; if ( state != null ) { return state ; } return com.google.gerrit.testutil.FakeAccountCache.newState ( new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) ; }
public final com.google.gerrit.server.index.Schema < V > getLatest ( ) { return schemaDefs.getLatest ( ) ; }
public void testEventSentOK ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( true , "" , false ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isTrue ( ) ; }
public final java.util.Set < java.lang.String > commands ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _commands ( ) ) ; }
public static com.google.gitiles.GitilesView.Builder tar ( ) { return new com.google.gitiles.GitilesView.Builder ( com.google.gitiles.GitilesView.Type.TAR ) ; }
public synchronized com.google.gerrit.server.account.AccountState getIfPresent ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { BRANCH ( 4847 ) ; com.google.gerrit.testutil.c3 Let ; com.google.gerrit.testutil.take care ; com.google.gerrit.testutil.evict accounts ; com.google.gerrit.testutil.the a ; return byId.get ( accountId ) ; }
com.google.gerrit.server.project.RefControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.project.ProjectControl newCtl = projectControl.forUser ( who ) ; if ( relevant.isUserSpecific ( ) ) { return newCtl.controlForRef ( refName ) ; } return new com.google.gerrit.server.project.RefControl ( newCtl , refName , relevant ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY , edit , file , null , content ) ; }
protected final com.google.gerrit.pgm.CmdLineParser newCmdLineParserInstance ( final java.lang.Object bean ) { com.google.gerrit.pgm.CmdLineParser parser = new com.google.gerrit.pgm.CmdLineParser ( bean ) ; for ( com.google.gerrit.server.ssh.commands.CmdOption c : optionList ) { parser.addOption ( c , c ) ; } return parser ; }
public void createNewChange ( ) throws java.lang.Exception { assertCreateSucceeds ( newChangeInfo ( ChangeStatus.NEW ) ) ; }
public boolean isVisibleTo ( com.google.gerrit.reviewdb.client.Account.Id account ) throws com.google.gwtorm.server.OrmException { return true ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( draft , null ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot delete draft" , e ) ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { attachComments ( result ) ; displayComments ( result ) ; }
private static void logAndThrowSubmoduleException ( final java.lang.String errorMsg , final java.lang.Exception e ) throws com.google.gerrit.server.git.SubmoduleException { com.google.gerrit.server.git.SubmoduleOp.log.error ( errorMsg , e ) ; throw new com.google.gerrit.server.git.SubmoduleException ( errorMsg , e ) ; }
public void onTabSelected ( com.google.gwt.user.client.ui.SourcesTabEvents sender , int tabIndex ) { com.google.gerrit.client.Gerrit.display ( tabTokens.get ( tabIndex ) , false ) ; }
private boolean in ( final org.eclipse.jgit.diff.Edit edit ) { return ( ( aCur ) < ( edit.getEndA ( ) ) ) || ( ( bCur ) < ( edit.getEndB ( ) ) ) ; }
private com.google.gerrit.extensions.common.GroupInfo getGroup ( java.lang.String name ) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.get ( ( "/groups/" + name ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_OK ) ; return parseGroup ( r ) ; }
private void afterTest ( ) throws java.lang.Exception { db.close ( ) ; sshSession.close ( ) ; server.stop ( ) ; com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; }
com.google.gerrit.server.project.ChangeControl create ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { return create ( refControl , notesFactory.create ( db , project , changeId ) ) ; }
public void reAddExistingGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKey.key5 ( ) ; java.lang.String id = key.getKeyIdString ( ) ; org.bouncycastle.openpgp.PGPPublicKey pk = key.getPublicKey ( ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 2 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 2 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; pk = org.bouncycastle.openpgp.PGPPublicKey.removeCertification ( pk , "foo:myId" ) ; info = addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 1 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 1 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; }
public void run ( ) { java.lang.String token = host.getToken ( ) ; if ( cm.extras ( ) . hasActiveLine ( ) ) { token += "@" + ( getTokenSuffixForActiveLine ( cm ) ) ; } com.google.gerrit.client.Gerrit.doSignIn ( token ) ; }
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount ( com.google.gerrit.reviewdb.server.ReviewDb db , org.kohsuke.github.GitUser author ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException { return getOrRegisterAccount ( db , author.getName ( ) , author.getName ( ) , author.getEmail ( ) ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsConfig.class ) ; get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:settings" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsSettings.class ) ; }
public void run ( ) { resizeCodeMirror ( ) ; chunkManager.adjustPadding ( ) ; cmA.refresh ( ) ; cmB.refresh ( ) ; }
private static boolean isHEAD ( final org.spearce.jgit.lib.Ref ref ) { return Constants.HEAD.equals ( ref.getName ( ) ) ; }
public java.lang.Long get ( ) { return unix.getOpenFileDescriptorCount ( ) ; }
protected com.google.gerrit.server.patch.PatchList getPatchList ( ) { if ( ( patchSet ) != null ) { return args.patchListCache.get ( change , patchSet ) ; } return null ; }
public int weigh ( com.google.gitiles.blame.BlameCacheImpl.Key key , java.util.List < com.google.gitiles.blame.Region > value ) { return value.size ( ) ; }
public void testAppend_float ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; assertSame ( b , b.append ( 0.0F ) ) ; assertEquals ( "0.0" , b.asString ( ) ) ; }
private void renameGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName , com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName ) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForRename ( repo , groupUuid , oldName , newName ) ; commit ( groupNameNotes ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { db.accountProjectWatches ( ) . update ( java.util.Collections.singleton ( watch ) ) ; accountProjectWatchCache.evict ( watch.getKey ( ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public java.lang.String getLinkName ( ) { return name ; }
protected com.google.gerrit.server.query.Predicate < com.google.gerrit.server.project.ProjectState > enforceVisibility ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.project.ProjectState > pred ) { return new com.google.gerrit.server.query.AndSource ( pred , new com.google.gerrit.server.query.project.ProjectIsVisibleToPredicate ( permissionBackend , userProvider.get ( ) ) , start ) ; }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( author.getFullName ( ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { rebuild ( change , changeRepo ) ; return null ; }
public void onSend ( ) { Util.MANAGE_SVC.createNewPatchSet ( patchSetId , getMessageText ( ) , createCallback ( ) ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) . value ( ) ; } catch ( com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
public void createEmptyChange_InvalidStatus ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo ci = newChangeInfo ( ChangeStatus.MERGED ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "unsupported change status" ) ; }
protected static com.google.gerrit.pgm.util.Die die ( java.lang.String why , java.lang.Throwable cause ) { return new com.google.gerrit.pgm.util.Die ( why , cause ) ; }
public java.lang.Class < ? extends java.lang.annotation.Annotation > annotationType ( ) { return com.google.gerrit.sshd.CommandName.class ; }
public static synchronized void resetWithClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = new java.util.concurrent.atomic.AtomicLong ( com.google.gerrit.testutil.TestTimeUtil.START.toEpochMilli ( ) ) ; com.google.gerrit.testutil.TestTimeUtil.setClockStep ( clockStep , clockStepUnit ) ; }
public boolean canForgeCommitter ( ) { if ( ( canForgeCommitter ) == null ) { canForgeCommitter = canPerform ( com.google.gerrit.reviewdb.ApprovalCategory.FORGE_IDENTITY , com.google.gerrit.reviewdb.ApprovalCategory.FORGE_COMMITTER ) ; } return canForgeCommitter ; }
public java.lang.String toString ( ) { return "push " + ( uri ) ; }
private com.google.gerrit.server.query.change.InternalChangeQuery query ( ) { java.util.Set < java.lang.String > fields = com.google.common.collect.ImmutableSet.of ( ChangeField.CHANGE.getName ( ) , ChangeField.PATCH_SET.getName ( ) , ChangeField.MERGEABLE.getName ( ) ) ; return queryProvider.get ( ) . setRequestedFields ( fields ) ; }
protected abstract void onLoad ( org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public void addReviewerToReviewableChangeInNoteDb ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isTrue ( ) ; forAll ( ( adder ) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
protected abstract com.google.gerrit.client.patches.AbstractPatchContentTable createPatchTable ( ) ;
public void createDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.extensions.common.ChangeInfo ci = newChangeInfo ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.MethodNotAllowedException.class , "draft workflow is disabled" ) ; }
com.google.gerrit.httpd.raw.PolyGerritUiServlet getPolyGerritUiServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) { return new com.google.gerrit.httpd.raw.PolyGerritUiServlet ( cache , polyGerritBasePath ( ) ) ; }
public boolean isMatchable ( ) { for ( com.google.gerrit.server.query.Predicate < T > c : children ) { if ( ! ( c.isMatchable ( ) ) ) { return false ; } } return true ; }
public final native void activeLine ( net.codemirror.lib.CodeMirror.LineHandle line ) ;
public void onSuccess ( final com.google.gwtjsonrpc.common.VoidResult result ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsConfig.class ) ; get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:settings" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsSettings.class ) ; }
private static org.eclipse.jgit.transport.RemoteSession connect ( org.eclipse.jgit.transport.URIish uri ) throws org.eclipse.jgit.errors.TransportException { return org.eclipse.jgit.transport.SshSessionFactory.getInstance ( ) . getSession ( uri , null , FS.DETECTED , 0 ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { showAddKeyBlock ( true ) ; }
public void run ( ) { unschedule ( e ) ; try { mergeImpl ( e.dest ) ; } finally { finish ( e.dest ) ; } }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeNotes ( repo , c ) ; }
void onEditAssignee ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { editAssignee ( suggestBox.getText ( ) ) ; }
public org.apache.sshd.server.FileSystemView createFileSystemView ( java.lang.String userName ) { return new org.apache.sshd.server.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
private com.google.gerrit.extensions.common.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = new com.google.gerrit.extensions.common.ApprovalInfo ( id.get ( ) ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
com.google.gerrit.server.patch.PatchScriptFactory create ( com.google.gerrit.server.project.ChangeControl control , java.lang.String fileName , int parentNum , com.google.gerrit.reviewdb.client.PatchSet.Id patchSetB , com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs ) ;
public com.google.gwtorm.server.ResultSet < com.google.gerrit.server.query.change.ChangeData > read ( ) throws com.google.gwtorm.server.OrmException { java.lang.Thread.currentThread ( ) . interrupt ( ) ; HEAD ( 880 ) ; com.google.gerrit.lucene.a9b Merge ; }
java.util.Map < java.lang.String , java.lang.Object > toSoyData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit commit , com.google.gitiles.DateFormatterBuilder.DateFormatter df ) throws java.io.IOException { return toSoyData ( req , commit , com.google.gitiles.CommitSoyData.DEFAULT_FIELDS , df ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT , expectedError ) ; }
public int weigh ( K key , com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder < V > value ) { return guavaWeigher.weigh ( key , value.value ) ; }
protected void postDisplay ( ) { patchSetsBlock.setRegisterKeys ( true ) ; }
private java.lang.String url ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r ) { return com.google.gerrit.common.PageLinks.toChange2 ( changeId , java.lang.String.valueOf ( r._number ( ) ) ) ; }
public void testEventSentThrowsException ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( false , "Exception" , true ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public void updateRepo ( com.google.gerrit.server.update.BatchUpdate.RepoContext ctx ) throws java.lang.Exception { }
abstract void onRefReplicatedToOneNode ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status ) ;
public void newPatchSetByOtherOnReviewableChangeOwnerSelfCcNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.NEW_PATCHSETS ) ; pushTo ( sc , "refs/for/master%notify=OWNER" , other , EmailStrategy.CC_ON_OWN_COMMENTS ) ; assertThat ( sender ) . notSent ( ) ; }
protected boolean onSave ( org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( com.google.common.base.Strings.isNullOrEmpty ( commit.getMessage ( ) ) ) { commit.setMessage ( "Update default preferences\n" ) ; } saveConfig ( com.google.gerrit.server.account.PreferencesConfig.PREFERENCES_CONFIG , cfg ) ; return true ; }
protected com.google.gerrit.extensions.api.changes.RevisionApi revision ( com.google.gerrit.acceptance.PushOneCommit.Result r ) throws java.lang.Exception { return gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.ChangeMessage > byPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.server.schema.DisabledChangesReviewDbWrapper.MSG ) ; }
public void testContinueFromAfterNewline ( ) { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator ( lines , 0 ) ; iter.advance ( 4 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 2 , 2 ) , iter.advance ( 6 ) ) ; }
public static synchronized org.apache.mina.core.service.IoAcceptor getIoAcceptor ( ) { return ( com.google.gerrit.server.ssh.GerritSshDaemon.sshd ) != null ? com.google.gerrit.server.ssh.GerritSshDaemon.sshd.acceptor : null ; }
public void onSuccess ( final java.util.List < com.google.gerrit.reviewdb.AccountExternalId > result ) { identites.display ( result ) ; display ( ) ; }
private static java.lang.String keyIdToString ( long keyId ) { return java.lang.Integer.toHexString ( ( ( int ) ( keyId ) ) ) . toUpperCase ( ) ; }
public void onProjectDeleted ( com.google.gerrit.extensions.events.ProjectDeletedListener.Event event ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , true ) ) { deleteProject ( uri ) ; } }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) ;
public void onSuccess ( com.google.gerrit.client.groups.GroupInfo result ) { cb.onSuccess ( com.google.gerrit.client.rpc.NativeList.of ( result ) ) ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "plugins" ) . addParameterTrue ( "all" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
public void load ( org.eclipse.jgit.lib.Repository git ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.common.base.Preconditions.checkState ( ( ( this . git ) == null ) ) ; this . git = git ; super . load ( git ) ; }
public List < com.googlesource.gerrit.plugins.manager.MenuEntry > getEntries ( ) { if ( ( com.googlesource.gerrit.plugins.manager.loader.isRemoteAdminEnabled ( ) ) && ( com.googlesource.gerrit.plugins.manager.config.canAdministerPlugins ( ) ) ) { return com.googlesource.gerrit.plugins.manager.menuEntries ; } return java.util.Collections.emptyList ( ) ; }
public boolean canConnect ( org.apache.sshd.common.SshdSocketAddress address , org.apache.sshd.common.Session session ) { return false ; }
void groupDetail ( com.google.gerrit.reviewdb.AccountGroup.Id groupId , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.GroupDetail > callback ) ;
public java.lang.String getName ( ) { return null ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void put ( com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { send ( com.google.gwt.http.client.RequestBuilder.PUT , cb ) ; }
private void assertCanAccess ( com.google.gerrit.server.project.ProjectControl u ) { boolean access = u.asForProject ( ) . testOrFalse ( ProjectPermission.ACCESS ) ; com.google.common.truth.Truth.assertThat ( access ) . named ( "can access" ) . isTrue ( ) ; }
protected java.net.SocketAddress getRemoteAddress ( ) { return session.getAttribute ( SshUtil.REMOTE_PEER ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) { onReply ( null ) ; } else { com.google.gerrit.client.Gerrit.doSignIn ( getToken ( ) ) ; } }
public void execute ( ) { if ( ( cmA ) != null ) { cmA.setOption ( "viewportMargin" , 10 ) ; } if ( ( cmB ) != null ) { cmB.setOption ( "viewportMargin" , 10 ) ; } }
public java.lang.String getLocalUser ( ) { if ( getExternalId ( ) . startsWith ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT ) ) { return getExternalId ( ) . substring ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT.length ( ) ) ; } return null ; }
public static java.lang.String refsDraftComments ( com.google.gerrit.reviewdb.client.Account.Id accountId , com.google.gerrit.reviewdb.client.Change.Id changeId ) { java.lang.StringBuilder r = com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , accountId.get ( ) ) ; r.append ( changeId.get ( ) ) ; return r.toString ( ) ; }
private AccountGroup.UUID toUUID ( com.google.gerrit.reviewdb.AccountGroup.Id id ) { return groupMap.get ( id ) . getGroupUUID ( ) ; }
core ( ) { }
public void updateComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { updateDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; updatePublishedComment ( comment ) ; } }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > published ( com.google.gerrit.reviewdb.Change.Id id , java.lang.String file ) throws com.google.gwtorm.client.OrmException ;
public void printTree ( final com.google.gerrit.sshd.commands.TreeFormatter.TreeNode rootNode ) { printTree ( rootNode , 0 , true ) ; }
public boolean supportsRoleChanges ( com.gitblit.models.TeamModel team , com.gitblit.Constants.Role role ) { return false ; }
com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.format ( rsrc ) ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.extensions.events.GitReferenceUpdatedListener.class ) . to ( com.googlesource.gerrit.plugins.reviewersbyblame.RefUpdateListener.class ) ; factory ( ReviewersByBlame.Factory.class ) ; }
public void evictAfterRename ( final com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) { byName.remove ( oldName ) ; }
public void checkPassword ( java.lang.String pwd ) throws com.google.gerrit.server.auth.AuthException { if ( ! ( com.google.common.base.Objects.equal ( getPassword ( ) , pwd ) ) ) { throw new com.google.gerrit.server.auth.InvalidCredentialsException ( ) ; } }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { diffLinks = diffInfo.web_links ( ) ; }
public void run ( ) { fixScroll ( cmA ) ; }
public void setTopic ( final java.lang.String topic ) { this . topic = topic ; }
protected void configure ( ) { post ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , Config.PLUGIN_NAME ) . to ( com.googlesource.gerrit.plugins.findowners.Action.class ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testing.IndexVersions.getWithoutLatest ( ChangeSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testing.IndexVersions.asConfigMap ( ChangeSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , defaultConfig ( ) ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( ApprovalCategory.OWN , ( ( short ) ( 1 ) ) ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
java.lang.String getMessage ( ) { return message.getText ( ) . trim ( ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getCommentManager ( ) . commentNav ( cm , Direction.NEXT ) . run ( ) ; } }
public void zeroStartLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 0 , 2 , 19 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public WorkQueue.Executor createMergeabilityChecksExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "changeMerge" , null , "threadPoolSize" , 1 ) ; return queues.createQueue ( poolSize , "MergeabilityChecks" ) ; }
void downloadOptional ( ) { this . required = false ; download ( ) ; }
private static < K , V > com.github.benmanes.caffeine.cache.Caffeine < K , V > newCacheBuilder ( ) { return ( ( com.github.benmanes.caffeine.cache.Caffeine < K , V > ) ( com.github.benmanes.caffeine.cache.Caffeine.newBuilder ( ) ) ) ; }
protected void setDateText ( java.lang.String dateText ) { header.setDateText ( dateText ) ; }
public static com.google.gerrit.server.account.VersionedAccountPreferences forDefault ( ) { return new com.google.gerrit.server.account.VersionedAccountPreferences ( com.google.gerrit.server.account.VersionedAccountPreferences.REFS_USER_DEFAULT ) ; }
public boolean apply ( java.io.File file ) { return ! ( file.getName ( ) . endsWith ( ".disabled" ) ) ; }
void onReplaceByKeys ( org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
void addLabel ( final java.lang.String token ) { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote.parse ( token ) ; com.google.gerrit.common.data.LabelType.checkName ( v.getLabel ( ) ) ; customLabels.put ( v.getLabel ( ) , v.getValue ( ) ) ; }
public void markReady ( boolean ready ) throws java.io.IOException { com.google.gerrit.lucene.AbstractLuceneIndex.setReady ( sitePaths , indexName , schema.getVersion ( ) , ready ) ; }
public static com.google.gerrit.server.patch.ComparisonType againstParent ( int parentNum ) { return new com.google.gerrit.server.patch.ComparisonType ( parentNum , false ) ; }
public void addChangeListener ( com.google.gerrit.common.ChangeListener listener , com.google.gerrit.server.CurrentUser user ) { listeners.put ( listener , new com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder ( listener , user ) ) ; }
public java.lang.Object getParameter ( java.lang.String name ) { java.lang.String value = config.getString ( RTCItsFacade.ITS_NAME_RTC , null , getParamName ( name ) ) ; return getParameterParser ( name ) . parse ( value ) ; }
public com.google.gerrit.server.index.FieldDef.Builder < T > stored ( ) { this . stored = true ; return this ; }
public void backupTimestampRefNameForBranch ( ) throws java.lang.Exception { java.lang.String name = com.googlesource.gerrit.plugins.refprotection.BackupRef.get ( null , "refs/heads/master" ) ; java.lang.String expected_prefix = ( BackupRef.R_BACKUPS ) + "heads/master-" ; com.google.common.truth.Truth.assertThat ( name ) . startsWith ( expected_prefix ) ; }
public synchronized com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { }
private static void configureDefaults ( java.util.Map < java.lang.String , java.util.List < com.google.gerrit.common.data.PermissionRule > > out , com.google.gerrit.common.data.AccessSection section ) { com.google.gerrit.server.account.CapabilityCollection.configureDefault ( out , section , GlobalCapability.QUERY_LIMIT , com.google.gerrit.server.account.CapabilityCollection.anonymous ) ; }
protected void configureServlets ( ) { filter ( "/" ) . through ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.class ) ; }
public java.util.List < com.googlesource.gerrit.plugins.manager.repository.PluginInfo > availablePlugins ( ) throws java.io.IOException { return repository.list ( com.google.gerrit.common.Version.getVersion ( ) ) ; }
private boolean isNewRef ( com.google.gerrit.server.events.RefUpdatedEvent event ) { return event.refUpdate.oldRev.equals ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) . getName ( ) ) ; }
protected void createCommentEditor ( final int suggestRow , final int column , final int line , final short file ) { createCommentEditor ( suggestRow , column , line , file , null ) ; }
private boolean activeForRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "ref" , ref , true ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GHHook createWebHook ( java.net.URL url ) throws java.io.IOException { return ghRepository.createWebHook ( url ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( account , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > of ( ) , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountExternalId > of ( ) ) ; }
public void onError ( com.google.gwt.resources.client.ResourceException e ) { net.codemirror.lib.CodeMirror.error ( e ) ; }
public void rangeOverMultipleLinesWithSmallerEndCharacterIsValid ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 31 , 19 , 10 ) ; com.google.gerrit.extensions.client.RangeSubject.assertThat ( range ) . isValid ( ) ; }
public boolean canExpand ( final java.lang.String user ) { return ( user.indexOf ( ' ' ) ) < 0 ; }
private static java.lang.String textFooterForChange ( java.lang.String changeId , java.lang.String timestamp ) { return ( ( ( ( ( ( "Gerrit-Change-Id: " + changeId ) + "\n" ) + "Gerrit-PatchSet: 1\n" ) + "Gerrit-MessageType: comment\n" ) + "Gerrit-Comment-Date: " ) + timestamp ) + "\n" ; }
public java.lang.String resourcePath ( ) { return "/projects/" + ( getProjectState ( ) . getName ( ) ) ; }
protected void onClick ( final com.google.gwt.user.client.Event event ) { com.google.gerrit.client.Gerrit.display ( getTargetHistoryToken ( ) , createScreen ( ) ) ; com.google.gwt.user.client.DOM.eventPreventDefault ( event ) ; }
static boolean needsTypeParameter ( final com.google.gwt.core.ext.typeinfo.JType ft ) { return ( ( ft.isArray ( ) ) != null ) || ( ( ft.isParameterized ( ) ) != null ) ; }
public void addItem ( final com.google.gerrit.client.ui.LinkMenuItem i ) { add ( i ) ; }
private static com.google.gerrit.server.change.ConsistencyChecker.Result create ( com.google.gerrit.reviewdb.client.Change c , java.util.List < com.google.gerrit.extensions.common.ProblemInfo > problems ) { return new com.google.gerrit.server.change.AutoValue_ConsistencyChecker_Result ( c.getId ( ) , c , problems ) ; }
public void listBranches ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { listBranchesFactory.create ( projectName ) . to ( callback ) ; }
public com.google.gerrit.server.events.TrackingIdAttribute asTrackingIdAttribute ( com.google.gerrit.reviewdb.client.TrackingId id ) { com.google.gerrit.server.events.TrackingIdAttribute a = new com.google.gerrit.server.events.TrackingIdAttribute ( ) ; a.system = id.getSystem ( ) ; a.id = id.getTrackingId ( ) ; return a ; }
private void execute ( final java.lang.String sql ) throws java.sql.SQLException { final java.sql.Statement stmt = db.createStatement ( ) ; try { stmt.execute ( sql ) ; } finally { stmt.close ( ) ; } }
public void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.InMemoryDatabase.drop ( db ) ; }
public java.lang.String getBranch ( ) { return escape ( branch ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { hide ( ) ; }
public void onClick ( com.google.gwt.user.client.ui.Widget sender ) { onSend ( ) ; }
void deleteRight ( java.util.Set < com.google.gerrit.client.reviewdb.ProjectRight.Key > ids , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public com.google.gerrit.server.project.ProjectState get ( final com.google.gerrit.reviewdb.Project.NameKey projectName ) { return byName.get ( projectName ) ; }
private org.eclipse.jgit.lib.ObjectId getDestRef ( com.google.gerrit.server.project.ChangeControl ctl ) throws java.lang.Exception { return testRepo.getRepository ( ) . exactRef ( ctl.getChange ( ) . getDest ( ) . get ( ) ) . getObjectId ( ) ; }
private com.google.gerrit.server.git.ProjectConfig loadAllProjects ( ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allProjects ) ) { com.google.gerrit.server.git.ProjectConfig pc = new com.google.gerrit.server.git.ProjectConfig ( allProjects ) ; pc.load ( repo ) ; return pc ; } }
static void delete ( com.google.gerrit.reviewdb.client.Change.Id id , java.lang.String revision , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.deleteRevision ( id.get ( ) , revision , com.google.gerrit.client.change.ChangeActions.cs ( id , draftButtons ) ) ; }
void onDeleteChange ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( com.google.gwt.user.client.Window.confirm ( Resources.C.deleteDraftChange ( ) ) ) { com.google.gerrit.client.change.DraftActions.delete ( changeId ) ; } }
public abstract boolean isRepeatable ( ) ;
public static boolean isOAuthLogin ( javax.servlet.http.HttpServletRequest request ) { return ( request.getRequestURI ( ) . indexOf ( GitHubOAuthConfig.GERRIT_LOGIN ) ) >= 0 ; }
public java.lang.String toString ( ) { return com.google.common.base.Objects.toStringHelper ( this ) . add ( "user" , user ) . add ( "repositoryName" , repositoryName ) . add ( "objectId" , objectId ) . toString ( ) ; }
public com.google.gerrit.reviewdb.PatchSetApproval getChangeApproval ( final com.google.gerrit.reviewdb.ApprovalCategory.Id id ) { return given.get ( id ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.transport.ReceiveCommand cmd ) { fire ( project , cmd.getRefName ( ) , cmd.getOldId ( ) , cmd.getNewId ( ) , cmd.getType ( ) ) ; }
public void blockOwnerProject ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.DEVS , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
private java.util.List < com.google.gerrit.reviewdb.PatchLineComment > drafts ( ) throws com.google.gwtorm.client.OrmException { return db.patchComments ( ) . draft ( patchSetId , user.getAccountId ( ) ) . toList ( ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.CommentAddedEvent ) { lastCommentAddedEvent = ( ( com.google.gerrit.server.events.CommentAddedEvent ) ( event ) ) ; } }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , c , allUsers , user ) ; }
public void createDraftChangeWhenDraftsNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = createDraftChange ( ) ; r.assertErrorStatus ( "draft workflow is disabled" ) ; }
private static com.google.gwtexpui.safehtml.client.SafeHtml expandTabs ( com.google.gwtexpui.safehtml.client.SafeHtml src ) { return src.replaceAll ( "\t" , "<span title=\"Visual Tab\" class=\"gerrit-visualtab\">&raquo;</span>\t" ) ; }
private boolean isGenAvailableNowForCurrentSearcher ( ) { try { return reopenThread.waitForGeneration ( gen , 0 ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.SubIndex.log.warn ( "Interrupted waiting for searcher generation" , e ) ; return false ; } }
private com.google.gerrit.extensions.common.ChangeInfo detailedChange ( java.lang.String changeId ) throws java.lang.Exception { return gApi.changes ( ) . id ( changeId ) . get ( java.util.EnumSet.of ( ListChangesOption.DETAILED_LABELS , ListChangesOption.CURRENT_REVISION , ListChangesOption.CURRENT_COMMIT ) ) ; }
public void setVisible ( final boolean show ) { impl.visible ( show ) ; super . setVisible ( show ) ; }
private void initMacs ( final org.spearce.jgit.lib.RepositoryConfig cfg ) { setMacFactories ( com.google.gerrit.server.ssh.GerritSshDaemon.filter ( cfg , "mac" , new org.apache.sshd.common.mac.HMACMD5.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA1.Factory ( ) , new org.apache.sshd.common.mac.HMACMD596.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA196.Factory ( ) ) ) ; }
public void createMergeChange_Conflicts ( ) throws java.lang.Exception { changeInTwoBranches ( "shared.txt" , "shared.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "master" , "branchA" , ChangeStatus.NEW ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.RestApiException.class , "merge conflict" ) ; }
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit ( "init" , "-d" , sitePath , "--batch" , "--no-auto-start" , "--skip-plugins" , "--show-stack-trace" ) ; }
private boolean groupsInNoteDb ( ) { return cfg.getBoolean ( NotesMigration.SECTION_NOTE_DB , com.google.gerrit.server.notedb.NoteDbTable.GROUPS.key ( ) , NotesMigration.WRITE , false ) ; }
public org.scribe.oauth.OAuthService createService ( com.googlesource.gerrit.plugins.oauth.OAuthConfig config ) { return new com.googlesource.gerrit.plugins.oauth.GitLabApi.GitLabOAuthService ( this , config ) ; }
public com.google.gerrit.server.query.Predicate < T > parse ( java.lang.String query ) throws com.google.gerrit.index.query.QueryParseException { if ( com.google.common.base.Strings.isNullOrEmpty ( query ) ) { throw new com.google.gerrit.index.query.QueryParseException ( "query is empty" ) ; } return toPredicate ( com.google.gerrit.index.query.QueryParser.parse ( query ) ) ; }
public com.google.gerrit.server.project.TagResource parse ( com.google.gerrit.server.project.ProjectResource resource , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException , java.io.IOException { return new com.google.gerrit.server.project.TagResource ( resource.getControl ( ) , list.get ( resource , id ) ) ; }
protected void preDisplay ( java.lang.String content ) { setShowTabs ( prefs.showTabs ( ) ) ; initEditor ( content ) ; }
public com.google.gerrit.acceptance.HttpResponse get ( java.lang.String path ) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet ( ( ( url ) + path ) ) ; return new com.google.gerrit.acceptance.HttpResponse ( getClient ( ) . execute ( get ) ) ; }
public static void removeSignedInListener ( final com.google.gerrit.client.SignedInListener l ) { com.google.gerrit.client.Gerrit.signedInListeners.remove ( l ) ; }
public static com.google.gerrit.server.config.ScheduleConfig create ( org.eclipse.jgit.lib.Config config , java.lang.String section ) { return com.google.gerrit.server.config.ScheduleConfig.builder ( config , section ) . build ( ) ; }
public void noNotificationForChangeThatIsTurnedWipForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%wip" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
private void padLineNumber ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTd ( ) ; m.setStyleName ( Gerrit.RESOURCES.css ( ) . lineNumber ( ) ) ; m.closeTd ( ) ; }
public void onSuccess ( com.google.gwt.core.client.JavaScriptObject result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
protected void configure ( ) { factory ( CreateCodeReviewNotes.Factory.class ) ; }
public void display ( final com.google.gerrit.reviewdb.client.Patch.Key k , final com.google.gerrit.reviewdb.client.PatchSet.Id a , final com.google.gerrit.reviewdb.client.PatchSet.Id b , final com.google.gerrit.common.data.PatchScript s ) { patchKey = k ; idSideA = a ; idSideB = b ; render ( s ) ; }
public com.google.gerrit.extensions.api.projects.BranchApi create ( com.google.gerrit.extensions.api.projects.BranchInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { createBranchFactory.create ( ref ) . apply ( project , input ) ; return this ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot create branch" , e ) ; } }
public void start ( final com.google.gerrit.sshd.Environment env ) throws java.io.IOException { err.write ( org.eclipse.jgit.lib.Constants.encodeASCII ( "gerrit: no shell available\n" ) ) ; in.close ( ) ; out.close ( ) ; err.close ( ) ; exit.onExit ( 127 ) ; }
public boolean canPublish ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( isOwner ( ) ) && ( isVisible ( db ) ) ; }
java.util.List < com.googlesource.gerrit.plugins.replication.Destination > getDestinations ( ) ;
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id.getParentKey ( ) ) ) ; hide ( ) ; }
public com.google.gwtjsonrpc.client.VoidResult fromJson ( final java.lang.Object o ) { return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.changes.ChangeInfo item ) { return item.legacyId ( ) ; }
private void assertCannotSubmit ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canSubmit ( false ) ) . named ( ( "can submit " + ref ) ) . isFalse ( ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftRight ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t.isDouble ( ) ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) > > ( t.intValue ( ) ) ) ) ; }
private java.lang.String getSortValue ( ) { return ( account ) != null ? com.google.common.base.Objects.firstNonNull ( account.email , com.google.common.base.Strings.nullToEmpty ( account.name ) ) : com.google.common.base.Strings.nullToEmpty ( group.name ) ; }
void set ( com.google.gerrit.client.changes.ChangeInfo info ) { this . changeId = info.legacyId ( ) ; display ( info ) ; reviewerSuggestOracle.setChange ( changeId ) ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public void onKeyUp ( final com.google.gwt.event.dom.client.KeyUpEvent event ) { if ( ( event.getNativeKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE ) ) { hide ( ) ; } }
public void testFollowAnotherBranch ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject ( "a" ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; java.lang.String gitmodules = ( ( ( "" + ( ( "[submodule \"a\"]\n" + "path = a\n" ) + "url = ssh://localhost/" ) ) + ( p.get ( ) ) ) + "\n" ) + "branch = anotherbranch\n" ; cfg.fromText ( gitmodules ) ; java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , thisServer , targetBranch ) . parseAllSections ( ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expected = com.google.common.collect.Sets.newHashSet ( new com.google.gerrit.reviewdb.client.SubmoduleSubscription ( targetBranch , new com.google.gerrit.reviewdb.client.Branch.NameKey ( p , "anotherbranch" ) , "a" ) ) ; com.google.common.truth.Truth.assertThat ( res ) . containsExactlyElementsIn ( expected ) ; }
private java.lang.String getReplyCommentName ( ) { return "savedReplyComment-" + ( com.google.gerrit.common.PageLinks.toChangeId ( project , changeId ) ) ; }
public void replace ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { }
protected com.google.gerrit.client.reviewdb.Project getProject ( ) { final com.google.gerrit.client.data.ProjectCache.Entry r ; r = com.google.gerrit.client.rpc.Common.getProjectCache ( ) . get ( change.getDest ( ) . getParentKey ( ) ) ; return r != null ? r.getProject ( ) : null ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; this . service ( ) ; }
void merge ( com.google.gerrit.reviewdb.Branch.NameKey branch ) ;
public com.googlesource.gerrit.plugins.github.oauth.GitHubLogin get ( javax.servlet.http.HttpServletRequest req ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin login = super . get ( req ) ; login.initOAuthCookie ( req ) ; return login ; }
protected org.apache.wicket.request.IRequestCodingStrategy newRequestCodingStrategy ( ) { return new com.googlesource.gerrit.plugins.gitblit.app.StaticCodingStrategy ( ) ; }
private void assertProblems ( com.google.gerrit.gpg.testutil.TestKey tk , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = new com.google.gerrit.gpg.PublicKeyChecker ( ) . check ( tk.getPublicKey ( ) ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public final java.util.Set < java.lang.String > detailed_labels ( ) { return com.google.gerrit.client.rpc.Natives.keys ( detailed_labels0 ( ) ) ; }
public void error ( java.lang.String message , java.lang.Exception e , int errorCode ) { error ( ( e != null ? e.getMessage ( ) : message ) ) ; }
public void addReviewerToWipChangeInReviewDbNotifyAll ( ) throws java.lang.Exception { forAll ( ( adder ) -> { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; com.google.gerrit.acceptance.TestAccount reviewer = accounts.create ( "added" , "added@example.com" , "added" ) ; addReviewer ( adder , sc.changeId , sc.owner , reviewer.email , NotifyHandling.ALL ) ; assertThat ( sender ) . sent ( "newchange" , sc ) . to ( reviewer ) . cc ( sc.reviewer , sc.ccer ) . cc ( sc.reviewerByEmail , sc.ccerByEmail ) . noOneElse ( ) ; } ) ; }
static com.googlesource.gerrit.plugins.serviceuser.client.MessagesInfo create ( ) { com.googlesource.gerrit.plugins.serviceuser.client.MessagesInfo g = ( ( com.googlesource.gerrit.plugins.serviceuser.client.MessagesInfo ) ( createObject ( ) ) ) ; return g ; }
protected void onOpenRow ( final int row ) { com.google.gwt.user.client.History.newItem ( link ( getRowItem ( row ) ) ) ; }
public java.nio.file.FileVisitResult preVisitDirectory ( java.nio.file.Path dir , java.nio.file.attribute.BasicFileAttributes attrs ) throws java.io.IOException { if ( ( ! ( dir.equals ( basePath ) ) ) && ( isRepo ( dir ) ) ) { addProject ( dir ) ; return java.nio.file.FileVisitResult.SKIP_SUBTREE ; } return java.nio.file.FileVisitResult.CONTINUE ; }
public void setGroups ( java.lang.Iterable < java.lang.String > groups ) { this . groups = com.google.gerrit.reviewdb.client.PatchSet.joinGroups ( groups ) ; }
protected void loadDefaults ( ) { }
public void setContentType ( java.lang.String type ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { enableForm ( true ) ; saveName.setEnabled ( false ) ; saveOwner.setEnabled ( false ) ; saveDesc.setEnabled ( false ) ; display ( result ) ; }
public java.lang.String getTreePath ( ) { return path ; }
boolean canEnableRenderEntireFile ( com.google.gerrit.client.account.DiffPreferences prefs ) { return ( ( fileSize.compareTo ( com.google.gerrit.client.diff.SideBySide.FileSize.HUGE ) ) < 0 ) || ( ( ( prefs.context ( ) ) != ( com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT ) ) && ( ( prefs.context ( ) ) < 100 ) ) ; }
public void onSuccess ( final java.lang.Object result ) { refresh ( ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
private void postLoad ( ) { if ( ( haveAccount ) && ( haveEmails ) ) { updateEmailList ( ) ; registerNewEmail.setEnabled ( true ) ; save.setEnabled ( false ) ; new com.google.gerrit.client.ui.OnEditEnabler ( save , nameTxt ) ; } display ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( config , false , false , false ) ) ; }
private final native void download_scheme0 ( java.lang.String n ) ;
int getRawAccountId ( ) { return accountId.get ( ) ; }
public long getHead ( ) throws java.io.IOException { return stores.head.spinGet ( com.googlesource.gerrit.plugins.events.fsstore.FsStore.MAX_GET_SPINS ) ; }
private java.lang.String href ( java.lang.String url ) { if ( com.google.gitiles.doc.MarkdownHelper.isAbsolutePathToMarkdown ( url ) ) { return com.google.gitiles.GitilesView.doc ( ) . copyFrom ( view ) . setPathPart ( url ) . build ( ) . toUrl ( ) ; } return url ; }
public void test ( ) throws java.lang.Exception { java.lang.String [ ] invalidFilenamePattern = new java.lang.String [ ] { "[@:]" , "[#%*]" } ; org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.performValidation ( repo , c , invalidFilenamePattern ) ; java.util.Set < java.lang.String > expected = new java.util.HashSet < > ( ) ; for ( java.lang.String filenames : getInvalidFilenames ( ) ) { expected.add ( ( "ERROR: invalid characters found in filename: " + filenames ) ) ; } com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; }
public void execute ( java.lang.String issue , java.lang.Iterable < com.googlesource.gerrit.plugins.hooks.workflow.ActionRequest > actions ) { throw new java.lang.RuntimeException ( "unimplemented" ) ; }
public void evaluate ( ) throws java.lang.Throwable { beforeTest ( description ) ; base.evaluate ( ) ; }
java.lang.String getFileUrl ( java.lang.String projectName , java.lang.String revision , java.lang.String fileName ) ;
protected void updateMessageID ( ) throws javax.mail.MessagingException { if ( ( messageID ) != null ) { setHeader ( "Message-ID" , messageID ) ; } else { super . updateMessageID ( ) ; } }
protected void configure ( ) { factory ( PrologEnvironment.Factory.class ) ; }
private void index ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { indexCollection.getSearchIndex ( ) . replace ( group ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { setReviewedByCurrentUser ( event.getValue ( ) ) ; }
public void addIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE ) ; }
private static com.google.gerrit.client.rpc.RestApi api ( int id , java.lang.String commit , java.lang.String action ) { return new com.google.gerrit.client.rpc.RestApi ( ( ( ( ( ( "/changes/" + id ) + "/revisions/" ) + commit ) + "/" ) + action ) ) ; }
boolean visibleForReplication ( ) { return ( ( user ) instanceof com.google.gerrit.server.ReplicationUser ) && ( ( ( com.google.gerrit.server.ReplicationUser ) ( user ) ) . isEverythingVisible ( ) ) ; }
public void onSuccess ( ) { com.google.gerrit.client.patches.UnifiedPatchScreen.TopView top = com.google.gerrit.client.Gerrit.getPatchScreenTopView ( ) ; com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.patches.UnifiedPatchScreen ( id , top , baseId ) ) ; }
public com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( ) { com.google.common.base.Preconditions.checkState ( ( ( patchSet ) != null ) , "getPatchSet() only valid after patch set is created" ) ; return patchSet ; }
protected java.lang.ProcessBuilder newBuildProcess ( com.google.gerrit.httpd.raw.Label label ) throws java.io.IOException { return new java.lang.ProcessBuilder ( "bazel" , "build" , label.fullName ( ) ) ; }
public void unblockNoForce ( ) { com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCanUpdate ( "refs/heads/master" , u ) ; }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.server.project.ChangeControl control ) { return new com.google.gerrit.server.change.ChangeResource ( control ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , "" , 0 ) ; }
public void deleteReviewerFromReviewableChangeByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; setEmailStrategy ( sc.owner , EmailStrategy.CC_ON_OWN_COMMENTS ) ; removeReviewer ( sc , extraReviewer , NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
public java.lang.String getUrl ( java.lang.String baseUrl , java.lang.String path ) throws java.net.MalformedURLException { if ( ( baseUrl.indexOf ( "://" ) ) > 0 ) { return new java.net.URL ( new java.net.URL ( baseUrl ) , path ) . toExternalForm ( ) ; } else { return ( baseUrl + ( baseUrl.endsWith ( "/" ) ? "" : "/" ) ) + ( path.startsWith ( "/" ) ? path.substring ( 1 ) : path ) ; } }
public java.util.Collection < com.google.gerrit.reviewdb.client.AccountGroup.UUID > getByInclude ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
public void onSuccess ( final com.google.gerrit.reviewdb.client.Account result ) { registerNewEmail.setEnabled ( true ) ; onSaveSuccess ( result ) ; if ( onSave != null ) { onSave.onSuccess ( result ) ; } }
abstract com.google.gerrit.client.diff.SkipManager getSkipManager ( ) ;
private static com.google.gerrit.server.index.QueryOptions options ( int start , int limit ) { return com.google.gerrit.server.index.change.IndexedChangeQuery.createOptions ( com.google.gerrit.server.index.change.IndexRewriterTest.CONFIG , start , limit , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( formatter , project , resource , revId , metaConfigRevId ) ; }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { change = db.changes ( ) . get ( legacyId ) ; return change ; }
public void addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postReviewers.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) { return fileApi.create ( files.parse ( revision , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ) ; }
public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return ! ( args.plcUtil.draftByChangeAuthor ( args.db.get ( ) , object.notes ( ) , accountId ) . isEmpty ( ) ) ; }
public com.google.gerrit.server.project.ProjectData toProjectData ( ) { return new com.google.gerrit.server.project.ProjectData ( getProject ( ) , parents ( ) . transform ( ( s ) -> s.getProject ( ) . getNameKey ( ) ) ) ; }
public static org.eclipse.jgit.api.Git cloneProject ( java.lang.String url ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.GitUtil.cloneProject ( url , true ) ; }
public void testCUSTOM_NullUser ( ) { setFrom ( "A ${user} B <my.server@email.address>" ) ; org.easymock.EasyMock.replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create ( ) . from ( null ) ; org.junit.Assert.assertNotNull ( r ) ; org.junit.Assert.assertEquals ( ident.getName ( ) , r.name ) ; org.junit.Assert.assertEquals ( "my.server@email.address" , r.email ) ; org.easymock.EasyMock.verify ( accountCache ) ; }
public java.lang.String apply ( com.google.gerrit.server.account.GetSshKeys.SshKeyInfo keyInfo ) { return keyInfo.sshPublicKey ; }
public void onSuccess ( T value ) { this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
public org.eclipse.jgit.lib.ObjectId insert ( int objectType , long length , java.io.InputStream in ) throws java.io.IOException { return idFor ( objectType , length , in ) ; }
java.lang.String getRemoteDisplayname ( javax.servlet.http.HttpServletRequest req ) { if ( ( displaynameHeader ) != null ) { return com.google.common.base.Strings.emptyToNull ( req.getHeader ( displaynameHeader ) ) ; } return null ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestUpdate maniphestUpdate ( int taskId , java.lang.String comment ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestUpdate ( taskId , comment , null ) ; }
public void nameOfNewGroupMustNotBeNull ( ) throws java.lang.Exception { expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup ( repo , groupUuid , null ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { return getRefControl ( ) . getRange ( permission ) ; }
private static void setUserAuth ( final org.apache.sshd.SshServer daemon ) { daemon.setUserAuthFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.server.UserAuth > > asList ( new org.apache.sshd.server.auth.UserAuthPublicKey.Factory ( ) ) ) ; }
public java.lang.String format ( ) { return new java.lang.StringBuilder ( ) . append ( formatValue ( ) ) . append ( ' ' ) . append ( text ) . toString ( ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( ) { if ( isSpecialWildProject ( ) ) { return java.util.Collections.emptyList ( ) ; } return inheritedRights.get ( ) ; }
public void updateComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( com.google.gerrit.reviewdb.client.PatchLineComment.Status.DRAFT ) ) { updateDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; updatePublishedComment ( comment ) ; } }
public void deleteKeys ( java.lang.Iterable < K > keys ) throws com.google.gwtorm.client.OrmException { delete ( com.google.gwtorm.jdbc.JdbcAccess.get ( keys ) ) ; }
public java.util.SortedMap < java.lang.String , com.google.gerrit.extensions.common.ProjectInfo > getAsMap ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return list ( this ) ; } catch ( com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "project list unavailable" , e ) ; } }
public void upsert ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > instances ) { throw new java.lang.UnsupportedOperationException ( ( "do not call upsert; either use InsertChangeOp for insertion, or" + " ChangeContext#saveChange() for update" ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , c ) . load ( ) ; }
public com.dyuproject.openid.OpenIdUser getUser ( final javax.servlet.http.HttpServletRequest request ) throws java.io.IOException { if ( ( request.getParameter ( RelyingParty.DEFAULT_PARAMETER ) ) != null ) { return null ; } return super . getUser ( request ) ; }
public static com.google.common.collect.FluentIterable < java.lang.String > names ( java.lang.Iterable < com.google.gerrit.acceptance.TestAccount > accounts ) { return com.google.common.collect.FluentIterable.from ( accounts ) . transform ( ( a ) -> a.fullName ) ; }
public void validMergedChange ( ) throws java.lang.Exception { com.google.gerrit.server.project.ChangeControl ctl = mergeChange ( incrementPatchSet ( insertChange ( ) ) ) ; assertNoProblems ( ctl , null ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( com.google.gerrit.extensions.common.RevisionInfo info ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.common.ChangeHookApiListener.unwrap ( db.get ( ) ) . patchSets ( ) . get ( PatchSet.Id.fromRef ( info.ref ) ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result deleteFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.DELETE_ENTRY , edit , file , null , null ) ; }
public com.google.gerrit.server.IdentifiedUser create ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , null , id , null ) ; }
protected java.lang.String getDeleteOneSql ( ) { return com.google.gwtorm.jdbc.TestJdbcAccess.DELETE ; }
public void onEvent ( final com.google.gerrit.server.events.Event event ) { if ( ( subscribedToEvents.isEmpty ( ) ) || ( subscribedToEvents.contains ( event.getType ( ) ) ) ) { offer ( event ) ; } }
public void remove ( K key ) { if ( key != null ) { cache.remove ( new com.google.gerrit.ehcache.SerializableProtobuf < K > ( key , keyCodec ) ) ; } }
protected void preDisplay ( java.lang.String content ) { setShowTabs ( prefs.showTabs ( ) ) ; initEditor ( content ) ; }
public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockCreateReference ( ) ; setApiUser ( user ) ; assertCreateFails ( com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public void onFailure ( java.lang.Throwable caught ) { this . onFailure ( caught ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.server.change.ChangeEdits.DeleteContent.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return apply ( rsrc.getChangeResource ( ) , rsrc.getPath ( ) ) ; }
protected abstract com.google.gerrit.server.git.CodeReviewCommit _run ( com.google.gerrit.server.git.CodeReviewCommit mergeTip , java.util.List < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException ;
public com.google.gerrit.extensions.common.ChangeInfo info ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.noneOf ( com.google.gerrit.extensions.common.ListChangesOption.class ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < ? > delete ( com.google.gerrit.reviewdb.client.Change change ) { return delete ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
protected java.util.Optional < com.google.gerrit.reviewdb.client.Account > getAccount ( ) { return user.isIdentifiedUser ( ) ? java.util.Optional.of ( user.asIdentifiedUser ( ) . getAccount ( ) ) : java.util.Optional.empty ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > apply ( java.util.List < ? > input ) throws java.lang.Exception { com.google.gerrit.pgm.RebuildNotedb.execute ( bru , repo ) ; com.google.gerrit.pgm.RebuildNotedb.execute ( bruForDrafts , allUsersRepo ) ; mpm.end ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( newChangeJson ( ) . format ( rsrc ) ) ; }
public final java.util.List < com.google.gerrit.client.WebLinkInfo > side_by_side_web_links ( ) { return filterWebLinks ( DiffView.SIDE_BY_SIDE ) ; }
private java.lang.String parseSubject ( org.eclipse.jgit.revwalk.RevCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { return parseOneFooter ( commit , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBJECT ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { fileList.display ( result ) ; }
public void addIntHeader ( java.lang.String name , int value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
private void enableForm ( final boolean on ) { delBranch.setEnabled ( on ) ; addBranch.setEnabled ( on ) ; nameTxtBox.setEnabled ( on ) ; irevTxtBox.setEnabled ( on ) ; }
public void doChangeMergedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
public void display ( com.google.gerrit.client.groups.GroupMap groups , java.lang.String toHighlight ) { display ( groups.values ( ) . asList ( ) , toHighlight ) ; }
public void evict ( com.google.gerrit.reviewdb.AccountGroupAgreement.Key key ) { byGroupId.remove ( key.getParentKey ( ) ) ; }
private void deleteRef ( java.lang.String refName ) throws java.lang.Exception { org.eclipse.jgit.lib.RefUpdate ru = testRepo.getRepository ( ) . updateRef ( refName , true ) ; ru.setForceUpdate ( true ) ; com.google.common.truth.Truth.assertThat ( ru.delete ( ) ) . isEqualTo ( RefUpdate.Result.FORCED ) ; }
public void projectAccess ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) { projectAccessFactory.create ( projectName ) . to ( callback ) ; }
private org.eclipse.jgit.lib.PersonIdent toPersonIdent ( final com.google.gerrit.reviewdb.PatchSetApproval audit ) { if ( audit == null ) { return null ; } return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newPersonIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; }
public RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , byte [ ] content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.CHANGE_ENTRY , edit , file , content ) ; }
void replicateNewProject ( com.google.gerrit.client.reviewdb.Project.NameKey project ) ;
public int hashCode ( ) { return com.google.common.base.Objects.hashCode ( commitId , path ) ; }
public java.lang.String getName ( ) { if ( ( propertiesFile ) != null ) { return org.apache.commons.io.FilenameUtils.removeExtension ( propertiesFile.getFileName ( ) . toString ( ) ) ; } return null ; }
public abstract com.google.gwtorm.client.ResultSet < java.util.Map.Entry < byte [ ] , byte [ ] > > scan ( byte [ ] fromKey , byte [ ] toKey , int limit ) throws com.google.gwtorm.client.OrmException ;
public void setCharacterEncoding ( java.lang.String name ) { com.google.common.base.Preconditions.checkArgument ( com.google.common.base.Charsets.UTF_8.equals ( java.nio.charset.Charset.forName ( name ) ) , "unsupported charset: %s" , name ) ; }
public final java.lang.String cloneCommand ( java.lang.String commandName , java.lang.String project ) { return cloneCommand ( commandName ) . replaceAll ( "\\$\\{project\\}" , project ) . replaceAll ( "\\$\\{project-base-name\\}" , projectBaseName ( project ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.CommentInfo > getComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.get ( ) . setFillAccounts ( includeAuthorInfo ( ) ) . formatAsList ( listComments ( rsrc ) ) ; }
public com.google.gerrit.server.project.ProjectControl controlFor ( final com.google.gerrit.server.CurrentUser user ) { return new com.google.gerrit.server.project.ProjectControl ( user , this ) ; }
public void put ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid , com.google.gerrit.common.data.GroupReference reference ) { byUUID.put ( uuid , reference ) ; }
public boolean getBooleanParameter ( java.lang.String name , boolean defaultValue ) { return config.getBoolean ( RTCItsFacade.ITS_NAME_RTC , null , getParamName ( name ) , defaultValue ) ; }
private org.eclipse.jgit.lib.PersonIdent createPersonIdent ( ) { return identifiedUser.get ( ) . newCommitterIdent ( serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( org.eclipse.jgit.revwalk.RevWalk walk , int limit , @ javax.annotation.Nullable java.lang.String revision , @ javax.annotation.Nullable org.eclipse.jgit.lib.ObjectId start ) throws java.io.IOException { return toSoyData ( new com.google.gitiles.Paginator ( walk , limit , start ) , revision ) ; }
public com.google.gerrit.server.index.Schema < T > build ( ) { return new com.google.gerrit.server.index.Schema ( com.google.common.collect.ImmutableList.copyOf ( fields ) ) ; }
private void group ( java.lang.String name , java.lang.String ownerGroup ) throws java.io.IOException { com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; in.ownerId = ownerGroup ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; }
public static com.google.gerrit.common.data.PermissionRule grant ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group , java.lang.String ref ) { return com.google.gerrit.server.project.Util.grant ( project , permissionName , com.google.gerrit.server.project.Util.newRule ( project , group ) , ref ) ; }
static com.google.gerrit.extensions.common.GpgKeyInfo toJson ( org.bouncycastle.openpgp.PGPPublicKey key , com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.PublicKeyStore store ) throws java.io.IOException { return com.google.gerrit.gpg.server.GpgKeys.toJson ( key , checker.check ( key , store ) ) ; }
private java.lang.String getRevisionSideB ( ) { return ( ( getRevisionA ( ) ) + "->" ) + ( getRevisionB ( ) ) ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo getPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return getPreferences.apply ( account ) ; }
public boolean updateUserModels ( java.util.Collection < com.gitblit.models.UserModel > arg0 ) { return false ; }
public void addHeader ( java.lang.String name , java.lang.String value ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > listComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return db.get ( ) . patchComments ( ) . publishedByPatchSet ( rsrc.getPatchSet ( ) . getId ( ) ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , "" , NotifyHandling.ALL , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { cfg = readConfig ( ProjectConfig.PROJECT_CONFIG ) ; revision = getRevision ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { addNew.setEnabled ( true ) ; nameBox.setEnabled ( true ) ; filterTxt.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
public static void getConfig ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfo > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) . view ( "config" ) . get ( cb ) ; }
protected abstract void onOpenItem ( RowItem item ) ;
protected abstract T updateProjectConfig ( com.google.gerrit.server.project.ProjectControl ctl , com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public java.lang.String getQueryString ( ) { return null ; }
com.google.gerrit.server.project.ProjectState create ( com.google.gerrit.reviewdb.Project project , java.util.Collection < com.google.gerrit.reviewdb.RefRight > localRights ) ;
private void initProviderJce ( ) { setKeyExchangeFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.KeyExchange > > asList ( new org.apache.sshd.server.kex.DHG1.Factory ( ) ) ) ; setRandomFactory ( new org.apache.sshd.common.random.SingletonRandomFactory ( new org.apache.sshd.common.random.JceRandom.Factory ( ) ) ) ; }
public void testContainsTrueWithTwoElements ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; ds.add ( 4 ) ; com.google.common.truth.Truth.assertThat ( ds ) . contains ( 4 ) ; }
public java.lang.String getLoggableName ( ) { return ( getUserName ( ) ) != null ? getUserName ( ) : "a/" + ( getAccountId ( ) . get ( ) ) ; }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) . separateChangeSubIndexes ( true ) . build ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = new com.google.gerrit.testutil.TestDatabase ( ) ; }
public static com.google.common.collect.FluentIterable < com.google.gerrit.reviewdb.client.Account.Id > ids ( java.lang.Iterable < com.google.gerrit.acceptance.TestAccount > accounts ) { return com.google.common.collect.FluentIterable.from ( accounts ) . transform ( ( a ) -> a.id ) ; }
private void reindexAfterIndexUpdate ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { reindexAfterIndexUpdate ( cd.project ( ) , cd.getId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
public void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.client.AccountExternalId > result ) { identites.display ( result ) ; }
com.google.gwt.resources.client.DataResource sql ( ) ;
public net.sf.ehcache.Element get ( final com.google.gerrit.server.patch.DiffCacheKey key ) { return self.get ( key ) ; }
public long size ( ) { java.lang.String [ ] files = dir.list ( ) ; if ( files == null ) { return 0 ; } return files.length ; }
public static void editWithFiles ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . addParameterTrue ( "list" ) . get ( cb ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( activePatchSetId ) > 1 ) { activate ( ( ( activePatchSetId ) - 1 ) ) ; } }
private static java.lang.String getURLEncoded ( java.lang.String url ) { try { return java.net.URLEncoder.encode ( url , "UTF-8" ) ; } catch ( java.io.UnsupportedEncodingException e ) { return null ; } }
public final native void moveCursorDown ( int numLines ) ;
public final native void setActiveLine ( net.codemirror.lib.CodeMirror.LineHandle line ) ;
private static com.google.gerrit.client.SignInDialog.Mode signInMode ( final javax.servlet.http.HttpServletRequest req ) { try { return SignInDialog.Mode.valueOf ( req.getParameter ( com.google.gerrit.server.rpc.OpenIdServiceImpl.P_MODE ) ) ; } catch ( java.lang.RuntimeException e ) { return com.google.gerrit.client.SignInDialog.Mode.SIGN_IN ; } }
protected void createCommentEditor ( final int suggestRow , final int column , final int line , final short file ) { createCommentEditor ( suggestRow , column , line , file , null ) ; }
public void error ( java.lang.String message , java.lang.Exception e , int errorCode , org.apache.log4j.spi.LoggingEvent event ) { error ( ( e != null ? e.getMessage ( ) : message ) ) ; }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { change.setCurrentPatchSet ( patchSetInfoFactory.get ( newCommit , ps.getId ( ) ) ) ; return change ; }
private void testUserNotPresent ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( gApi.accounts ( ) . query ( "sandboxuser" ) . get ( ) ) . isEmpty ( ) ; }
public void tearDown ( ) throws java.lang.Exception { stat.execute ( ( "DROP TABLE " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) ) ; store.stop ( ) ; }
com.google.gerrit.server.permissions.PermissionBackend.ForChange asForChange ( ) { return new com.google.gerrit.server.project.ChangeControl.ForChangeImpl ( null ) ; }
public com.google.gerrit.server.account.AccountSshKey create ( com.google.gerrit.server.account.AccountSshKey.Id id , java.lang.String encoded ) throws com.google.gerrit.common.errors.InvalidSshKeyException { throw new com.google.gerrit.common.errors.InvalidSshKeyException ( ) ; }
private void post ( final java.lang.String url , final com.google.gerrit.server.events.ProjectEvent projectEvent ) { taskFactory.create ( url , projectEvent ) . schedule ( ) ; }
public static com.google.gerrit.common.data.GerritConfig getConfig ( ) { return com.google.gerrit.client.Gerrit.myConfig ; }
public void onFailure ( java.lang.Throwable caught ) { this . onFailure ( caught ) ; }
public void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.client.AccountGroup > result ) { groups.display ( result ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType ) ; display ( result ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > email ( java.lang.String email ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EMAIL , AccountQueryBuilder.FIELD_EMAIL , email.toLowerCase ( ) ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "reviewers" ) . to ( com.googlesource.gerrit.plugins.reviewers.GetReviewers.class ) ; put ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "reviewers" ) . to ( com.googlesource.gerrit.plugins.reviewers.PutReviewers.class ) ; get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "suggest_reviewers" ) . to ( com.googlesource.gerrit.plugins.reviewers.SuggestProjectReviewers.class ) ; }
protected void authorizeUser ( com.google.gerrit.server.project.ProjectControl control ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { if ( ( com.google.gerrit.common.data.Capable.OK ) != ( control.canPushToAtLeastOneRef ( ) ) ) { throwUnauthroizedOp ( action.getName ( ) , control , com.googlesource.gerrit.plugins.lfs.locks.LfsPutLocksAction.log ) ; } }
private com.google.gerrit.server.account.WatchConfig open ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Repository git = repoManager.openRepository ( allUsersName ) ; com.google.gerrit.server.account.WatchConfig watchConfig = new com.google.gerrit.server.account.WatchConfig ( accountId ) ; watchConfig.load ( git ) ; return watchConfig ; }
public void testEventSentFailed ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( false , "Error" , false ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public void ownerProject ( ) { com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.Util.ADMIN , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ProjectList result ) { createProjectLinkPanel.setVisible ( result.canCreateProject ( ) ) ; projects.display ( result.getProjects ( ) ) ; projects.finishDisplay ( ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { adjustCodeMirrorHeight ( ) ; }
protected abstract com.google.gerrit.client.ui.Screen createScreen ( ) ;
protected com.google.gerrit.server.git.PerThreadRequestScope continuingContext ( com.google.gerrit.server.git.PerThreadRequestScope ctx ) { return new com.google.gerrit.server.git.PerThreadRequestScope ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.myAccount = result ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; } onModuleLoad3 ( ) ; }
private void maybeAddTestHelperOp ( com.google.gerrit.server.update.BatchUpdate bu , com.google.gerrit.reviewdb.client.Change.Id changeId ) { if ( ( args.submitInput ) instanceof com.google.gerrit.server.change.Submit.TestSubmitInput ) { bu.addOp ( changeId , new com.google.gerrit.server.git.strategy.TestHelperOp ( changeId , args ) ) ; } }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.sidePanel.adjustGutters ( cmB ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult setCharacterEncoding ( java.lang.String encoding ) { characterEncoding = encoding ; return this ; }
public synchronized com.google.gerrit.server.git.WorkQueue.Executor getDefaultQueue ( ) { if ( ( defaultQueue ) == null ) { defaultQueue = createQueue ( 1 , "WorkQueue" ) ; } return defaultQueue ; }
public void starChange ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void addGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID id ) { groupsToInspect.add ( id ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
private static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.project.ProjectState projectState ) { return com.google.gerrit.lucene.LuceneProjectIndex.idTerm ( projectState.getProject ( ) . getNameKey ( ) ) ; }
public void index ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { index ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
public static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.account.AccountState > id ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ID , AccountQueryBuilder.FIELD_ACCOUNT , accountId.toString ( ) ) ; }
public void show ( ) { super . show ( ) ; providerId.selectAll ( ) ; com.google.gwt.user.client.DeferredCommand.addCommand ( new com.google.gwt.user.client.Command ( ) { @ java.lang.Override public void execute ( ) { providerId.setFocus ( true ) ; } } ) ; }
java.lang.String getPath ( ) { return path ; }
private java.lang.String getUrl ( ) { final java.lang.String url = gerritConfig.getString ( com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.ITS_NAME_BUGZILLA , null , com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.GERRIT_CONFIG_URL ) ; return url ; }
private static java.io.File resolve ( final java.io.File logs_dir ) { try { return logs_dir.getCanonicalFile ( ) ; } catch ( java.io.IOException e ) { return logs_dir.getAbsoluteFile ( ) ; } }
protected void display ( final com.google.gerrit.reviewdb.client.Account userAccount ) { currentEmail = userAccount.getPreferredEmail ( ) ; nameTxt.setText ( userAccount.getFullName ( ) ) ; save.setEnabled ( false ) ; new com.google.gerrit.client.ui.OnEditEnabler ( save , nameTxt ) ; }
BRANCH ( com.google.gerrit.server.config.d0bf01 Allow ) { }
protected com.google.gerrit.git.RepositoryCache getRepositoryCache ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { final com.google.gerrit.git.RepositoryCache rc = getGerritServer ( ) . getRepositoryCache ( ) ; if ( rc == null ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 128 , "fatal: Gerrit repositories are not available" ) ; } return rc ; }
protected void configureServlets ( ) { rpc ( com.google.gerrit.httpd.auth.ldap.UserPassAuthServiceImpl.class ) ; }
public void onSuccess ( com.google.gwtjsonrpc.client.VoidResult result ) { typeSelect.setEnabled ( true ) ; setType ( newType ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritUiOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritUiOptions ( headless ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; } }
public java.util.Collection < com.googlesrouce.gerrit.plugins.github.git.GitJob > getJobs ( ) { return jobs.values ( ) ; }
private void initRevisionsAction ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { revisionsAction = new com.google.gerrit.client.change.RevisionsAction ( info.legacy_id ( ) , revision , style , headerLine , revisions ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { if ( com.google.gerrit.common.data.Permission.hasRange ( permission ) ) { return toRange ( permission , access ( permission ) ) ; } return null ; }
private java.lang.String encode ( java.lang.String segment ) { return com.google.gwt.http.client.URL.encodeQueryString ( type.replacePathSeparator ( segment ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopic ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.change.InternalChangeQuery.topic ( topic ) ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toProvider ( com.google.gerrit.httpd.SitePathFromSystemConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public static boolean isSignedIn ( ) { return ( com.google.gwt.user.client.Cookies.getCookie ( com.google.gerrit.client.Gerrit.AUTH_COOKIE ) ) != null ; }
public boolean apply ( com.google.gerrit.server.account.ExternalId externalId ) { return ( externalId.isScheme ( AccountExternalId.SCHEME_EXTERNAL ) ) && ( externalId.asAccountExternalId ( ) . getSchemeRest ( ) . startsWith ( OAuthWebFilter.GITHUB_EXT_ID ) ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > apply ( com.google.gerrit.server.git.BranchBatch batch ) { return batch.changes ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.myAccount = result ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; } com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; showInitialScreen ( ) ; }
public java.lang.String toString ( ) { return ( ( ( "@" + ( com.google.gerrit.sshd.CommandName.class . getName ( ) ) ) + "(value=" ) + ( value ( ) ) ) + ")" ; }
private com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit defaultRateLimit ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.Type type , int defaultIntervalSeconds , int defaultStoreCount ) { return new com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit ( type , ( 1.0 / defaultIntervalSeconds ) , ( defaultIntervalSeconds * defaultStoreCount ) ) ; }
public void configure ( ) { listener ( ) . to ( com.google.gerrit.elasticsearch.ElasticVersionManager.class ) ; if ( onlineUpgrade ) { listener ( ) . to ( com.google.gerrit.server.index.OnlineUpgrader.class ) ; } }
private static java.lang.String queryOutGoing ( java.lang.String who ) { return "is:open owner:" + who ; }
public void unblockLargerScope_Fails ( ) { com.google.gerrit.server.project.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/master" ) ; com.google.gerrit.server.project.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
public Project.NameKey getProject ( ) { return project ; }
public com.google.gerrit.extensions.api.projects.BranchApi branch ( java.lang.String ref ) { return branchApi.create ( project , ref ) ; }
protected void createSubscription ( org.eclipse.jgit.junit.TestRepository < ? > repo , java.lang.String branch , java.lang.String subscribeToRepo , java.lang.String subscribeToBranch ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; prepareSubscriptionConfigEntry ( config , subscribeToRepo , subscribeToBranch ) ; pushSubscriptionConfig ( repo , branch , config ) ; }
public java.lang.Object apply ( com.google.gerrit.server.project.ProjectResource resource ) { com.google.gerrit.reviewdb.client.Project project = resource.getControl ( ) . getProject ( ) ; return com.google.common.base.Strings.nullToEmpty ( project.getParentName ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.syncindex.IndexResponseHandler ( ) ; }
private void configureCmdLineParser ( ) { factory ( CmdLineParser.Factory.class ) ; registerOptionHandler ( PatchSet.Id.class , com.google.gerrit.server.ssh.commands.PatchSetIdHandler.class ) ; }
public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , db , change , patch , changeDataFactory , projectCache , repoManager ) ; }
public void renameFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String currentFilePath , java.lang.String newFilePath ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; modifyTree ( repository , edit , new com.google.gerrit.server.edit.tree.RenameFileModification ( editCommit , currentFilePath , newFilePath ) ) ; }
int size ( ) { return ( src ) != null ? src.size ( ) : 0 ; }
public void setChangeMessage ( final com.google.gerrit.reviewdb.client.ChangeMessage cm ) { changeMessage = cm ; }
public void resetTime ( ) { com.google.gerrit.testutil.TestTimeUtil.useSystemTime ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZone ) ; }
public RefUpdate.Result restoreFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RESTORE_ENTRY , edit , file , null ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( repoManager , accountCache , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , c , account , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , com.google.gerrit.server.notedb.ChangeNotesTest.TZ ) ; }
public < V > com.google.gerrit.metrics.CallbackMetric0 < V > newCallbackMetric ( java.lang.String name , java.lang.Class < V > valueClass , com.google.gerrit.metrics.Description desc ) { define ( name , desc ) ; return new com.google.gerrit.metrics.dropwizard.CallbackMetricImpl0 ( name , valueClass ) ; }
public void maxAutomergeVoteDisabledTest_isDisabled ( ) throws java.lang.Exception { defaultSetup ( "alternate.config" ) ; com.google.common.truth.Truth.assertThat ( configLoader.maxAutomergeVoteDisabled ( ) ) . isEqualTo ( true ) ; }
private long readTime ( org.eclipse.jgit.lib.Config cfg , java.lang.String key ) { long time = com.google.gerrit.server.config.ConfigUtil.getTimeUnit ( cfg , com.google.gerrit.server.config.ChangeCleanupConfig.SECTION , null , key , 0 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; return time >= 0 ? time : 0 ; }
java.util.List < com.google.gerrit.reviewdb.client.Account > get ( ) { try { return cache.get ( true ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.change.ReviewerSuggestionCache.log.warn ( "Cannot fetch reviewers from cache" , e ) ; return java.util.Collections.emptyList ( ) ; } }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , int start , int limit ) throws com.google.gerrit.server.query.QueryParseException { throw new java.lang.UnsupportedOperationException ( ) ; }
public com.google.common.truth.ComparableSubject < ? , java.sql.Timestamp > date ( ) { isNotNull ( ) ; com.google.gerrit.extensions.common.GitPerson gitPerson = actual ( ) ; return com.google.common.truth.Truth.assertThat ( gitPerson.date ) . named ( "creationDate" ) ; }
protected void configure ( ) { bind ( ContactStoreConnection.Factory.class ) . toProvider ( com.google.inject.assistedinject.FactoryProvider.newFactory ( ContactStoreConnection.Factory.class , com.google.gerrit.server.contact.HttpContactStoreConnection.class ) ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public boolean readChangeSequence ( ) { return readChanges ; }
public void execute ( ) { try { onResult ( last , false ) ; } finally { RpcStatus.INSTANCE.onRpcComplete ( null ) ; } }
public com.google.gerrit.server.index.QueryOptions withStart ( int newStart ) { return com.google.gerrit.server.index.QueryOptions.create ( config ( ) , newStart , limit ( ) , fields ( ) ) ; }
public double doubleValue ( ) { return val ; }
public UiAction.Description getDescription ( com.google.gerrit.server.project.ProjectResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Run GC" ) . setTitle ( "Triggers the Git Garbage Collection for this project." ) ; }
public void onSuccess ( final com.google.gerrit.common.data.GroupDetail groupDetail ) { saveName.setEnabled ( false ) ; display ( groupDetail ) ; }
protected void preDisplay ( final com.google.gerrit.common.data.ChangeDetail r ) { display ( r ) ; }
void setJarUrl ( final java.lang.String url ) { this . jarUrl = url ; }
private void problem ( java.lang.String msg ) { com.google.gerrit.extensions.api.changes.ProblemInfo p = new com.google.gerrit.extensions.api.changes.ProblemInfo ( ) ; p.message = msg ; problems.add ( p ) ; }
private static final com.google.gerrit.client.info.AccountInfo getCurrentUser ( ) { return com.google.gerrit.client.Gerrit.getUserAccountInfo ( ) ; }
static boolean onTime ( java.lang.String dateTime ) { return ( com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now ( ) . compareTo ( dateTime ) ) <= 0 ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; }
public void setShowUsernameInReviewCategory ( final boolean showUsernameInReviewCategory ) { this . showUsernameInReviewCategory = showUsernameInReviewCategory ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.areg1 = this . areg1 ; engine.areg2 = this . areg2 ; engine.areg3 = this . areg3 ; }
private java.lang.String group ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public void onFailure ( final java.lang.Throwable caught ) { info.getWatch ( ) . setNotify ( type , oldVal ) ; cbox.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
public void checkAllChanges ( ) throws java.lang.Exception { checkChanges ( com.google.common.collect.Iterables.transform ( unwrapDb ( ) . changes ( ) . all ( ) , com.google.gerrit.reviewdb.server.ReviewDbUtil.changeIdFunction ( ) ) ) ; }
protected final void addErrorListener ( com.google.common.util.concurrent.ListenableFuture < ? > future , java.lang.String desc , org.eclipse.jgit.lib.ProgressMonitor progress , java.util.concurrent.atomic.AtomicBoolean ok ) { future.addListener ( new com.google.gerrit.server.index.SiteIndexer.ErrorListener ( future , desc , progress , ok ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; }
public boolean containsHeader ( java.lang.String name ) { return headers.containsKey ( name ) ; }
public java.lang.String getReplacementString ( ) { return java.lang.String.valueOf ( change.legacy_id ( ) . get ( ) ) ; }
protected void removeCookie ( final java.lang.String name ) { final javax.servlet.http.Cookie c = new javax.servlet.http.Cookie ( name , "" ) ; c.setMaxAge ( 0 ) ; com.google.gwtjsonrpc.server.JsonServlet.getCurrentResponse ( ) . addCookie ( c ) ; }
public com.google.gerrit.common.data.LabelType byLabel ( com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId labelId ) { return byLabel ( ) . get ( labelId.get ( ) . toLowerCase ( ) ) ; }
java.lang.String getToken ( ) { return isSignedIn ( ) ? key.getToken ( ) : null ; }
public void testLinkify_TrailingDotDot ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A http://go.here/.. B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; org.junit.Assert.assertNotSame ( o , n ) ; org.junit.Assert.assertEquals ( "A <a href=\"http://go.here/.\" target=\"_blank\">http://go.here/.</a>. B" , n.asString ( ) ) ; }
public int compare ( com.google.gerrit.client.diff.UnifiedDiffChunkInfo o1 , com.google.gerrit.client.diff.UnifiedDiffChunkInfo o2 ) { return ( o1.getCmLine ( ) ) - ( o2.getCmLine ( ) ) ; }
public com.google.template.soy.tofu.SoyTofu get ( ) throws com.google.inject.ProvisionException { com.google.template.soy.SoyFileSet.Builder builder = new com.google.template.soy.SoyFileSet.Builder ( ) ; for ( java.lang.String name : com.google.gerrit.server.mail.MailSoyTofuProvider.TEMPLATES ) { addTemplate ( builder , name ) ; } return builder.build ( ) . compileToTofu ( ) ; }
public void listBranches ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { listBranchesFactory.create ( projectName ) . to ( callback ) ; }
private long getSecureConfigLastEditTs ( ) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig ( site.secure_config , org.eclipse.jgit.util.FS.DETECTED ) ; if ( cfg.getFile ( ) . exists ( ) ) { return cfg.getFile ( ) . lastModified ( ) ; } else { return 0L ; } }
public void run ( ) { renderSkips ( context ) ; }
public com.google.gerrit.server.change.RevisionResource doNotCache ( ) { cacheable = false ; return this ; }
public void checkChanges ( com.google.gerrit.reviewdb.client.Change ... changeIds ) throws java.lang.Exception { checkChanges ( java.util.Arrays.asList ( changeIds ) ) ; }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_OK , null ) ; }
public static synchronized void useSystemTime ( ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = null ; org.joda.time.DateTimeUtils.setCurrentMillisSystem ( ) ; }
public void visibleProjectDetails ( final com.google.gwt.user.client.rpc.AsyncCallback < java.util.List < com.google.gerrit.common.data.ProjectDetail > > callback ) { visibleProjectDetailsFactory.create ( ) . to ( callback ) ; }
public boolean allRefsAreVisible ( ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ ) ) ; }
public < T > T get ( com.google.gerrit.server.CurrentUser.PropertyKey < T > key ) { return null ; }
public void copyInReviewDb ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.project.ChangeControl ctl , com.google.gerrit.reviewdb.client.PatchSet ps , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config repoConfig ) throws com.google.gwtorm.server.OrmException { copyInReviewDb ( db , ctl , ps , rw , repoConfig , java.util.Collections.emptyList ( ) ) ; }
public void registerCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self ( ) . registerCacheUsageListener ( cacheUsageListener ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , com.google.gerrit.server.index.change.IndexRewriterTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
public void setVerifier ( java.lang.String reporter ) { this . verifier = reporter ; }
public void suggestReviewersNoResult1 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( admin ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public final java.util.SortedSet < java.lang.Short > value_set ( ) { java.util.SortedSet < java.lang.Short > values = new java.util.TreeSet < > ( ) ; for ( java.lang.String v : values ( ) ) { values.add ( com.google.gerrit.client.changes.ChangeInfo.LabelInfo.parseValue ( v ) ) ; } return values ; }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultBranchName ( ) . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( "" ) ; nameTxtBox.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { try { return list.get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn ( "Cannot list available projects" , e ) ; return java.util.Collections.emptySortedSet ( ) ; } }
public void evictAfterRename ( com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) ;
private void assertNoProblems ( com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.testutil.TestKey k ) { com.google.gerrit.gpg.CheckResult result = checker.setStore ( store ) . check ( k.getPublicKey ( ) ) ; org.junit.Assert.assertEquals ( java.util.Collections.emptyList ( ) , result.getProblems ( ) ) ; }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { org.apache.lucene.search.BooleanQuery.setMaxClauseCount ( cfg.getInt ( "index" , "maxTerms" , org.apache.lucene.search.BooleanQuery.getMaxClauseCount ( ) ) ) ; return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) ; }
private static com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput newComment ( java.lang.String path , com.google.gerrit.extensions.client.Side side , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c = new com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( c , path , side , line , message ) ; }
protected boolean hasDifferences ( final com.google.gerrit.common.data.PatchScript script ) { boolean hasEdits = ! ( script.getEdits ( ) . isEmpty ( ) ) ; boolean hasMeta = ! ( script.getPatchHeader ( ) . isEmpty ( ) ) ; return hasEdits || hasMeta ; }
public static org.eclipse.jgit.lib.Config allowDraftsDisabled ( ) { return allowDraftsDisabledConfig ( ) ; }
private static com.google.gerrit.server.group.InternalGroup removeRefState ( com.google.gerrit.server.group.InternalGroup group ) throws java.lang.Exception { return group.toBuilder ( ) . setRefState ( null ) . build ( ) ; }
private void allowPushOnRefsTags ( ) throws java.lang.Exception { removePushFromRefsTags ( ) ; grant ( Permission.PUSH , project , "refs/tags/*" , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public java.lang.String format ( java.lang.String projectName , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) { return ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( raw ) ) ) + "</pre>" ; }
private com.google.gerrit.server.index.PredicateWrapper wrap ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) { try { return new com.google.gerrit.server.index.PredicateWrapper ( index , p ) ; } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new java.lang.IllegalStateException ( ( ( "Failed to convert " + p ) + " to index predicate" ) , e ) ; } }
public int getCost ( ) { return 1 ; }
public void onSignIn ( ) { if ( refreshOnSignIn ) { refresh ( ) ; } if ( ( starChange ) != null ) { starChange.setVisible ( true ) ; } }
private static com.google.gerrit.client.reviewdb.AccountExternalId createId ( final com.google.gerrit.client.reviewdb.Account.Id newId , final com.google.gerrit.server.account.AuthRequest who ) { final java.lang.String ext = who.getExternalId ( ) ; return new com.google.gerrit.client.reviewdb.AccountExternalId ( new com.google.gerrit.client.reviewdb.AccountExternalId.Key ( newId , ext ) ) ; }
public final native java.lang.String change_id ( ) ;
public static boolean isNoSuchEntity ( final java.lang.Throwable caught ) { if ( caught instanceof com.google.gerrit.client.rpc.NoSuchEntityException ) { return true ; } return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NoSuchEntityException.MESSAGE ) ) ; }
public Project.NameKey getProjectName ( ) { return getChange ( ) . getProject ( ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( new com.google.gerrit.server.query.change.ChangeData ( change ) , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public static org.eclipse.jgit.lib.Config loadDefault ( javax.servlet.FilterConfig filterConfig ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.storage.file.FileBasedConfig config = new org.eclipse.jgit.storage.file.FileBasedConfig ( com.google.gitiles.GitilesConfig.defaultFile ( ) , org.eclipse.jgit.util.FS.DETECTED ) ; config.load ( ) ; return config ; }
public int getCost ( ) { return 0 ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.postSignIn ( result ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; } showInitialScreen ( ) ; }
public void setSide ( final com.google.gerrit.client.reviewdb.PatchLineComment.Side s ) { side = s.getCode ( ) ; }
boolean canRebase ( ) { return ( canPerform ( Permission.REBASE ) ) && ( isProjectStatePermittingWrite ( ) ) ; }
public final void afterTest ( ) throws java.lang.Exception { server.stop ( ) ; }
public void listEmptyGroupIncludes ( ) throws java.lang.Exception { org.junit.Assert.assertTrue ( GET ( "/groups/Administrators/groups/" ) . isEmpty ( ) ) ; }
public java.lang.String getNameEmail ( ) { return new com.google.gerrit.common.data.AccountInfo ( getAccount ( ) ) . getNameEmail ( anonymousCowardName ) ; }
public static boolean isInternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return ( uuid.get ( ) . startsWith ( "global:" ) ) || ( uuid.get ( ) . matches ( "^[0-9a-f]{40}$" ) ) ; }
private void setClean ( boolean clean ) { save.setEnabled ( ( ! clean ) ) ; dirty.getStyle ( ) . setVisibility ( ( ! clean ? com.google.gwt.dom.client.Style.Visibility.VISIBLE : com.google.gwt.dom.client.Style.Visibility.HIDDEN ) ) ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( com.google.gerrit.server.git.MetaDataUpdate update ) throws java.io.IOException { com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch = openUpdate ( update ) ; try { batch.write ( update.getCommitBuilder ( ) ) ; return batch.commit ( ) ; } finally { batch.close ( ) ; } }
void postEvent ( com.google.gerrit.server.events.Event event , com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException ;
protected void onInitUI ( ) { super . onInitUI ( ) ; initUUID ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupOptions ( ) ; initGroupType ( ) ; initExternal ( ) ; }
public static void edits ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.rpc.NativeMap < com.google.gerrit.client.changes.ChangeInfo.EditInfo > > cb ) { com.google.gerrit.client.changes.ChangeApi.call ( id , "edits" ) . get ( cb ) ; }
public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags.apply ( change , input ) ; } catch ( com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post hashtags" , e ) ; } }
public void abandon ( com.google.gerrit.extensions.api.changes.AbandonInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.get ( ) . apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot abandon change" , e ) ; } }
public void onFailure ( java.lang.Throwable caught ) { new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) { @ java.lang.Override public void setText ( final java.lang.String t ) { } } . center ( ) ; enableForm ( true ) ; }
private java.lang.String decode ( final int s , int e ) { if ( ( charset ) == null ) { charset = com.google.gerrit.server.patch.Text.charset ( content , null ) ; } return org.eclipse.jgit.util.RawParseUtils.decode ( charset , content , s , e ) ; }
private boolean inProject ( com.google.gerrit.reviewdb.client.Change change ) { if ( ( projectControl ) != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( change.getProject ( ) ) ; } else { return true ; } }
public void parseInvalidTimestamps ( ) { com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02-15:04:05.789000000" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02T15:04:05.789000000" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "15:04:05" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "15:04:05.999000000" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02 10:04:05.789 -0500" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02 10:04:05.789000000 -0500" ) ; }
private static boolean matchPrefix ( java.lang.String want , java.lang.String token ) { if ( token.startsWith ( want ) ) { com.google.gerrit.client.Dispatcher.prefixlen = want.length ( ) ; return true ; } else { return false ; } }
public void createProjectFooBar ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = "foo" ; gApi.projects ( ) . name ( "bar" ) . create ( in ) ; }
private static void mainImpl ( final java.lang.String [ ] argv ) throws com.google.gwtjsonrpc.server.XsrfException , com.google.gwtorm.client.OrmException { com.google.gerrit.server.GerritServer.getInstance ( false ) ; com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; }
java.lang.String changeScreenTitleId ( int id ) ;
public static void getConfig ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfo > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) . view ( "config" ) . get ( cb ) ; }
com.google.gerrit.server.api.projects.ProjectApiImpl create ( com.google.gerrit.server.project.ProjectResource change ) ;
public int hashCode ( ) { return ( ( accountId.hashCode ( ) ) * 31 ) + ( externalId.hashCode ( ) ) ; }
private boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( canAbandon ( db ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
private void initSignatures ( ) { setSignatureFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Signature > > asList ( new org.apache.sshd.common.signature.SignatureDSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureRSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory ( ) , new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory ( ) ) ) ; }
public void execute ( com.google.gerrit.server.git.BatchUpdate.Listener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.git.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId ) ; }
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publish.get ( ) . apply ( revision , new com.google.gerrit.server.change.Publish.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish draft patch set" , e ) ; } }
protected void submit ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.SubmitInput input ) throws java.lang.Exception { submit ( changeId , input , null , null , true ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { if ( ( ++ ( done ) ) == ( commentEditors.size ( ) ) ) { onSend2 ( ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.server.permissions.PermissionBackend.class ) . to ( com.google.gerrit.server.project.DefaultPermissionBackend.class ) . in ( Scopes.SINGLETON ) ; install ( new com.google.gerrit.server.project.DefaultPermissionBackendModule.LegacyControlsModule ( ) ) ; }
private void clearActiveLine ( net.codemirror.lib.CodeMirror cm ) { if ( cm.hasActiveLine ( ) ) { net.codemirror.lib.CodeMirror.LineHandle activeLine = cm.getActiveLine ( ) ; cm.removeLineClass ( activeLine , LineClassWhere.WRAP , DiffTable.style.activeLine ( ) ) ; cm.setActiveLine ( null ) ; } }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.Change.Id id ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.client.OrmException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( id ) , db.get ( ) ) ; }
public static void ensureAllPatchSetsLoaded ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( db ) ; } }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; org.junit.Assert.assertEquals ( query ( in ) , rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
static org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when , org.eclipse.jgit.lib.PersonIdent serverIdent , java.lang.String anonymousCowardName ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
boolean get ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.client.SubmitType submitType , java.lang.String mergeStrategy , com.google.gerrit.reviewdb.client.Branch.NameKey dest , org.eclipse.jgit.lib.Repository repo , com.google.gerrit.reviewdb.server.ReviewDb db ) ;
private com.google.gerrit.server.account.AccountState state ( ) { if ( ( state ) == null ) { state = accountCache.get ( getAccountId ( ) ) ; } return state ; }
public static native void go ( java.lang.String t ) ;
private java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > getBlameJson ( java.lang.String path ) throws java.lang.Exception { return buildJson ( path , new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > > ( ) { } ) ; }
private static java.security.SecureRandom newRandomGenerator ( ) { try { return java.security.SecureRandom.getInstance ( "SHA1PRNG" ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.lang.IllegalArgumentException ( "No SecureRandom available for GitHub authentication" , e ) ; } finally { } }
public T call ( ) throws java.lang.Exception { if ( callerContext == ( local.getContext ( ) ) ) { return callable.call ( ) ; } else { return wrapped.call ( ) ; } }
public void run ( ) throws java.lang.Exception { try { preRun ( ) ; parseCommandLine ( ) ; this . run ( ) ; } finally { postRun ( ) ; } }
public void getNonExistingAccount_NotFound ( ) throws java.lang.Exception { try { gApi.accounts ( ) . id ( "non-existing" ) . get ( ) ; org.junit.Assert.fail ( "Expected account to not exist" ) ; } catch ( com.google.gerrit.extensions.restapi.ResourceNotFoundException expected ) { } }
public void setLinkName ( final java.lang.String name ) { this . name = name ; }
public int getCost ( ) { return pred.getCost ( ) ; }
public void printJson ( final java.lang.StringBuffer sb , final java.lang.String o ) { if ( o != null ) { sb.append ( escapeString ( o ) ) ; } else { sb.append ( com.google.gwtjsonrpc.client.JS_NULL ) ; } }
public com.google.gerrit.server.project.ProjectResource parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException , java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse ( id ) ; if ( rsrc == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Project Not Found: %s" , id ) ) ; } return rsrc ; }
private void detach ( ) { if ( ( lineWidget ) != null ) { lineWidget.clear ( ) ; lineWidget = null ; updateSelection ( ) ; } manager.clearLine ( cm.side ( ) , line ) ; removeFromParent ( ) ; }
public com.google.gerrit.server.project.RefControl getRefControl ( ) { return refControl ; }
public static boolean isMagicBranch ( java.lang.String refName ) { if ( ( ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_DRAFT_CHANGE ) ) || ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_PUBLISH_CHANGE ) ) ) || ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_CHANGE ) ) ) { return true ; } return false ; }
private void problem ( java.lang.String msg ) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo ( ) ; p.message = msg ; problems.add ( p ) ; }
public boolean canAddRefs ( ) { return ( canPerformOnAnyRef ( Permission.CREATE ) ) || ( isOwnerAnyRef ( ) ) ; }
private static java.lang.String publicKey ( com.jcraft.jsch.KeyPair sshKey , java.lang.String comment ) throws java.io.UnsupportedEncodingException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; sshKey.writePublicKey ( out , comment ) ; return out.toString ( java.nio.charset.StandardCharsets.US_ASCII.name ( ) ) ; }
public void assertSchemaVersion ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion act = getSchemaVersion ( ) ; junit.framework.TestCase.assertEquals ( schemaVersion.getVersionNbr ( ) , act.versionNbr ) ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { setEdit ( false ) ; resizePaddingWidget ( ) ; }
public void add ( final com.google.gwtexpui.globalkey.client.KeyCommand k ) { assert ! ( map.containsKey ( k.keyMask ) ) ; map.put ( k.keyMask , k ) ; }
private void checkPreconditions ( javax.servlet.http.HttpServletRequest req , com.google.gerrit.extensions.restapi.RestResource rsrc ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { if ( "*" . equals ( req.getHeader ( "If-None-Match" ) ) ) { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( "Resource already exists" ) ; } }
public static com.google.gerrit.server.account.externalids.ExternalId create ( java.lang.String scheme , java.lang.String id , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.account.externalids.AutoValue_ExternalId ( com.google.gerrit.server.account.externalids.ExternalId.Key.create ( scheme , id ) , accountId , null , null ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( GroupDetailHandler.Factory.class ) ; factory ( RegisterNewEmailSender.Factory.class ) ; }
private boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( isOwner ( ) ) || ( isReviewer ( db ) ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; rights.finishDisplay ( true ) ; }
private com.google.gerrit.server.account.AccountState toAccountState ( com.google.gson.JsonElement element ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( element.getAsJsonObject ( ) . get ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . getAsInt ( ) ) ; return accountCache.get ( id ) ; }
public void testGcNotAllowed_Forbidden ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , userSession.post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) ; }
private static org.eclipse.jgit.lib.ObjectId emptyTreeId ( org.eclipse.jgit.lib.ObjectInserter inserter ) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId id = inserter.insert ( new org.eclipse.jgit.lib.TreeFormatter ( ) ) ; inserter.flush ( ) ; return id ; }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String pub ) throws com.google.gerrit.common.errors.InvalidSshKeyException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ) { com.google.gerrit.reviewdb.client.AccountSshKey key = authorizedKeys.addKey ( pub ) ; commit ( authorizedKeys ) ; return key ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { attachComments ( result ) ; displayComments ( result ) ; post.setEnabled ( true ) ; }
public com.google.gerrit.server.change.ChangeJson addOptions ( java.util.Collection < com.google.gerrit.extensions.client.ListChangesOption > o ) { options.addAll ( o ) ; return this ; }
java.nio.file.Path getSharedDirectory ( com.ericsson.gerrit.plugins.highavailability.Configuration cfg ) throws java.io.IOException { java.nio.file.Path sharedDirectoryPath = java.nio.file.Paths.get ( cfg.main ( ) . sharedDirectory ( ) ) ; java.nio.file.Files.createDirectories ( sharedDirectoryPath ) ; return sharedDirectoryPath ; }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpDelete ( ( ( peerInfo.getDirectUrl ( ) ) + endpoint ) ) , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler ( ) ) ; }
public com.google.gerrit.server.group.PutMembers.PutMember create ( final com.google.gerrit.server.group.GroupResource parent , final java.lang.String id ) throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.group.PutMembers.PutMember ( put , com.google.gerrit.server.util.Url.decode ( id ) ) ; }
public void onLoad ( ) { super . onLoad ( ) ; Util.GROUP_SVC.groupDetail ( groupId , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.admin.AccountGroupDetail > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { display ( result ) ; } } ) ; }
com.google.gerrit.server.index.SiteIndexer.Result indexAll ( I index ) ;
public com.google.gerrit.server.permissions.PermissionBackend.ForChange change ( com.google.gerrit.server.query.change.ChangeData cd ) { try { return cd.changeControl ( ) . forUser ( getUser ( ) ) . asForChange ( cd ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return com.google.gerrit.server.permissions.FailedPermissionBackend.change ( "unavailable" , e ) ; } }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.fullTextSearchMaxMatches" , value = "2" ) } ) public void suggestReviewersFullTextSearchLimitMaxMatches ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "user" , 3 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 3 ) ; }
public com.google.gerrit.common.data.GroupList get ( ) { return createGroupList ( filterGroups ( groupCache.all ( ) ) ) ; }
private boolean isHttpEnabled ( ) { return ( ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.DEFAULT_DOWNLOADS ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.ANON_HTTP ) ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.HTTP ) ) ; }
private final native void setPath ( java.lang.String path ) ;
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , remotePeerProvider , dbProvider , id ) ; }
public void run ( ) { com.google.gerrit.pgm.Daemon.log.info ( "caught shutdown, cleaning up" ) ; if ( ( runId ) != null ) { runFile.delete ( ) ; } manager.stop ( ) ; }
public final com.google.gerrit.server.index.SiteIndexer < K , V , I > getSiteIndexer ( ) { return siteIndexer ; }
public void testHostIndex ( ) throws java.lang.Exception { assertRedirectsTo ( com.google.gitiles.GitilesView.hostIndex ( ) . setHostName ( com.google.gitiles.TestGitilesUrls.HOST_NAME ) . setServletPath ( com.google.gitiles.FakeHttpServletRequest.SERVLET_PATH ) . toUrl ( ) , com.google.gitiles.GitwebRedirectFilterTest.newRequest ( "a=project_index" ) ) ; }
public void setRevision ( final java.lang.String pattern ) { if ( ( pattern != null ) && ( ! ( pattern.isEmpty ( ) ) ) ) { revision = pattern ; } }
public void addQuery ( java.lang.String query ) { if ( ( queries ) == null ) { queries = com.google.common.collect.Lists.newArrayList ( ) ; } queries.add ( query ) ; }
private static boolean isUiPlugin ( java.lang.String name ) { return ( com.google.gerrit.server.plugins.PluginLoader.isPlugin ( name , "js" ) ) || ( com.google.gerrit.server.plugins.PluginLoader.isPlugin ( name , "html" ) ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo apply ( com.google.gerrit.extensions.webui.WebLink webLink ) { return ( ( com.google.gerrit.extensions.webui.PatchSetWebLink ) ( webLink ) ) . getPathSetWebLink ( project , commit ) ; }
public void remove ( ) { try { filter.destroy ( ) ; } finally { plugins.remove ( name , filter ) ; } }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.CreateRequest input ) { return input.created ; }
public static void doSignIn ( final com.google.gwt.user.client.rpc.AsyncCallback < ? > callback ) { new com.google.gerrit.client.SignInDialog ( callback ) . center ( ) ; }
public com.google.gerrit.gpg.GerritPublicKeyChecker create ( ) { return new com.google.gerrit.gpg.GerritPublicKeyChecker ( this , null ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_PREFIX_TERMS ) ; }
public void stop ( ) { refreshThread.halt ( ) ; openIndex.close ( ) ; closedIndex.close ( ) ; }
public static < T > com.google.gerrit.rules.StoredValue < T > create ( ) { return new com.google.gerrit.rules.StoredValue < T > ( new com.googlecode.prolog_cafe.lang.JavaObjectTerm ( new java.lang.Object ( ) ) ) ; }
public void hide ( final boolean autoClosed ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( false ) ; super . hide ( autoClosed ) ; }
public static void deleteAssignee ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.AccountInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "assignee" ) . delete ( cb ) ; }
public void remove ( com.google.gerrit.extensions.auth.oauth.OAuthUserInfo user ) { if ( user != null ) { cache.invalidate ( user.getUserName ( ) ) ; } }
public com.google.gerrit.reviewdb.Change update ( com.google.gerrit.reviewdb.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; change.setLastSha1MergeTested ( null ) ; return change ; } else { return null ; } }
public com.google.gerrit.metrics.Timer0.Context start ( ) { return new com.google.gerrit.metrics.Timer0.Context ( ) ; }
private com.google.gerrit.server.patch.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return new com.google.gerrit.server.patch.PatchListKey ( project , revisionIdA , revisionIdB , com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.IGNORE_NONE ) ; }
public void flushAll_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH_ALL ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { origCb.onFailure ( caught ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( this . token , new com.google.gerrit.client.documentation.DocScreen ( com.google.gerrit.client.Dispatcher.skip ( this . token ) ) ) ; }
private static com.google.gerrit.reviewdb.client.AuthType toType ( final org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.config.ConfigUtil.getEnum ( cfg , "auth" , null , "type" , AuthType.OPENID ) ; }
java.lang.String getRemoteAddressAsString ( ) { return remoteAsString ; }
public java.lang.Object getScreenCacheToken ( ) { return com.google.gerrit.client.Link.SETTINGS ; }
public org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException { initRepository ( ) ; return repo ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { if ( actionId.canInheritFromWildProject ( ) ) { return filter ( projectControl.getProjectState ( ) . getInheritedRights ( ) , actionId ) ; } else { return java.util.Collections.emptyList ( ) ; } }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err ) { if ( logErrors ) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error ( err ) ; return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError ( ) ; } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError ( err ) ; } }
protected com.google.gerrit.client.patches.UnifiedDiffTable createContentTable ( ) { return new com.google.gerrit.client.patches.UnifiedDiffTable ( this ) ; }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { synchronized ( com.google.gerrit.server.ssh.SshUtil.keys ) { com.google.gerrit.server.ssh.SshUtil.keys.remove ( acct.getPreferredEmail ( ) ) ; } }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > post ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.POST , name ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { cb.onSuccess ( result.asString ( ) ) ; }
public short getMinAutomergeVote ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { return ( ( short ) ( getConfig ( ) . getInt ( "global" , "minAutomergeVote" , 1 ) ) ) ; }
public void start ( ) { try { java.nio.file.Files.walkFileTree ( gitDir.toPath ( ) , new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover ( ) ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn ( "Exception occured while trying to delete trash folders" , e ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { sugestParent.setText ( getRowItem ( row ) . getName ( ) ) ; }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { initRepository ( ) ; repoView.getCommands ( ) . add ( cmd ) ; }
public void listTagsOfNonExistingProject_NotFound ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , adminSession.get ( "/projects/non-existing/tags" ) . getStatusCode ( ) ) ; }
protected Project.NameKey getProjectName ( ) { return com.google.gerrit.server.notedb.ChangeUpdate.getProjectName ( ctl ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { checkEnabled ( ) ; return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( newChangeJson ( ) . format ( rsrc ) ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { return notes.getChange ( ) ; }
public void setSubmitType ( final com.google.gerrit.reviewdb.Project.SubmitType type ) { submitType = type.getCode ( ) ; }
public final native void setRange ( com.google.gerrit.client.diff.CommentRange range ) ;
protected void configure ( ) { bind ( com.google.gerrit.server.RequestCleanup.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.config.RequestScopedReviewDbProvider.class ) ; bind ( IdentifiedUser.RequestFactory.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; bind ( com.google.gerrit.server.project.PerRequestProjectControlCache.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { ctx.addRefUpdate ( new org.eclipse.jgit.transport.ReceiveCommand ( masterCommit.getId ( ) , branchCommit.getId ( ) , "refs/heads/master" ) ) ; }
public void printJson ( final java.lang.StringBuffer sb , final T o ) { sb.append ( '"' ) ; sb.append ( o.name ( ) ) ; sb.append ( '"' ) ; }
private static boolean skipField ( java.lang.reflect.Field field ) { int modifiers = field.getModifiers ( ) ; return ( java.lang.reflect.Modifier.isFinal ( modifiers ) ) || ( java.lang.reflect.Modifier.isTransient ( modifiers ) ) ; }
public void singleHeadText ( ) throws java.lang.Exception { setUpSimpleRefs ( ) ; com.google.gitiles.FakeHttpServletResponse res = buildText ( "/repo/+refs/heads/master" ) ; org.junit.Assert.assertEquals ( ( ( id ( "refs/heads/master" ) ) + " refs/heads/master\n" ) , res.getActualBodyString ( ) ) ; }
com.google.gerrit.server.mail.AbandonedSender create ( com.google.gerrit.reviewdb.client.Change.Id change ) ;
public final void update ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doUpdate ( instances , null ) ; }
public com.google.gerrit.client.reviewdb.PatchSetAncestor.Key getKey ( ) { return key ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps ) { addPatchSets ( a , ps , null ) ; }
public com.google.gerrit.client.ui.ListenableValue < com.google.gerrit.common.data.ChangeInfo > getChangeInfoCache ( ) { if ( ( info ) == null ) { info = new com.google.gerrit.client.ui.ListenableValue < com.google.gerrit.common.data.ChangeInfo > ( ) ; } return info ; }
public void setCommands ( java.util.List < com.google.gerrit.common.data.UiCommandDetail > cmds ) { commands = cmds ; }
protected Project.NameKey getProjectKey ( ) { return name ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.client.admin.EditConfigAction.call ( editConfig , getProjectKey ( ) . get ( ) ) ; }
public java.util.List < org.eclipse.jgit.revwalk.FooterLine > commitFooters ( com.google.gerrit.server.git.GitRepositoryManager repoManager , com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitFooters ) == null ) { loadCommitData ( repoManager , db ) ; } return commitFooters ; }
public static void edit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . get ( cb ) ; }
int getCookieAge ( final com.google.gerrit.httpd.WebSessionManager.Val val ) { if ( val.isPersistentCookie ( ) ) { return ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( sessionMaxAgeMillis ) ) ) ; } else { return - 1 ; } }
public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , db , notes , patch , changeDataFactory , projectCache , repoManager ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; }
private void logError ( java.lang.String msg ) { if ( com.google.gerrit.server.git.MergeOp.log.isErrorEnabled ( ) ) { com.google.gerrit.server.git.MergeOp.log.error ( ( ( logPrefix ) + msg ) ) ; } }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , c.getProject ( ) , c ) . load ( ) ; }
public static com.google.gerrit.extensions.client.RangeSubject assertThat ( com.google.gerrit.extensions.client.Comment.Range range ) { return com.google.common.truth.Truth.assertAbout ( com.google.gerrit.extensions.client.RangeSubject.RANGE_SUBJECT_FACTORY ) . that ( range ) ; }
com.google.gwtorm.client.ResultSet < com.google.gerrit.client.reviewdb.Account > bySshUserName ( java.lang.String userName ) throws com.google.gwtorm.client.OrmException ;
boolean hasPrev ( ) { return hasPrev ; }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > submittedTogether ( java.util.EnumSet < com.google.gerrit.extensions.client.SubmittedTogetherOption > o ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private void assertProblems ( com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.testutil.TestKey k , java.lang.String ... expected ) { com.google.gerrit.gpg.CheckResult result = checker.check ( k.getPublicKey ( ) , store ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
private org.eclipse.jgit.lib.Ref getDraftRef ( com.google.gerrit.acceptance.TestAccount account , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsers ) ) { return repo.exactRef ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( account.id , changeId ) ) ; } }
public com.google.gerrit.client.reviewdb.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { projectId } ; }
boolean canPerform ( java.lang.String permissionName ) { return canPerform ( permissionName , false ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.GerritApi.class ) . to ( com.google.gerrit.server.api.GerritApiImpl.class ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; }
public static void included ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupList > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( group.get ( ) ) . view ( "groups" ) . get ( callback ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( key ) ; }
public void testCreateLinkForWebUiEmptyText ( ) { mockUnconnectableStoryboard ( ) ; replayMocks ( ) ; com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade itsFacade = createStoryboardItsFacade ( ) ; java.lang.String actual = itsFacade.createLinkForWebui ( "Test-Url" , "" ) ; assertEquals ( "[Test-Url]" , actual ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( ctl.getId ( ) ) ; }
public void deleteDraftChange ( final com.google.gerrit.reviewdb.PatchSet.Id patchSetId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) { deleteDraftChangeFactory.create ( patchSetId ) . to ( callback ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.config.ConfigResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get ( ) ; }
protected java.io.Writer newWriter ( javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { return com.google.gitiles.BaseServlet.newWriter ( res.getOutputStream ( ) , res ) ; }
private Timer1.Context getMetricsTimerContext ( java.lang.String name ) { return execTime.start ( name ) ; }
java.lang.String statusTypeCell ( ) ;
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead ( ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ; try { return getHead ( repo , "refs/heads/master" ) ; } finally { repo.close ( ) ; } }
protected void setCacheHeaders ( javax.servlet.http.HttpServletRequest req , javax.servlet.http.HttpServletResponse res ) { com.google.gitiles.BaseServlet.setNotCacheable ( res ) ; }
public void setPreviewText ( final java.lang.String text ) { if ( ( textLabel ) != null ) { textLabel.setText ( text ) ; visibleLen = text.length ( ) ; } }
private com.google.inject.Module createIndexModule ( ) { switch ( indexType ) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.latestVersionWithOnlineUpgrade ( ) ; case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.latestVersionWithOnlineUpgrade ( ) ; default : throw new java.lang.IllegalStateException ( ( "unsupported index.type = " + ( indexType ) ) ) ; } }
public abstract java.util.concurrent.Callable < ? > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) ;
public void testInvalidSchemeInReplace ( ) { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "find" , "javascript:alert(1)" ) . replace ( "find" ) ; fail ( "Expected IllegalStateException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public final native void base_change ( java.lang.String b ) ;
public boolean allRefsAreVisible ( java.util.Set < java.lang.String > ignore ) { return ( user.isInternalUser ( ) ) || ( canPerformOnAllRefs ( Permission.READ , ignore ) ) ; }
public com.google.gerrit.server.mail.MergedSender create ( com.google.gerrit.server.project.ChangeControl change ) ;
public void onLoad ( com.google.gerrit.plugin.client.extension.Panel panel ) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = panel.getObject ( GerritUiExtensionPoint.Key.REVISION_INFO ) . cast ( ) ; if ( rev.isEdit ( ) ) { return ; } panel.setWidget ( new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel ( panel ) ) ; }
long read ( ) { return generation ; }
public void setLoggedIn ( boolean b ) { loggedIn = false ; }
public void suggestReviewersNoResult1 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public void execute ( ) { resizePaddingOnOtherSide ( side , instance.getLineNumber ( handle ) ) ; }
public final native void matchBrackets ( boolean s ) ;
protected void onInitUI ( ) { super . onInitUI ( ) ; setPageTitle ( Util.M.project ( name.get ( ) ) ) ; }
void onAddGroupByClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.common.data.GroupReference ref = groupToAdd.getValue ( ) ; if ( ref != null ) { addGroup ( ref ) ; } else { groupToAdd.setFocus ( true ) ; } }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) ;
public void getTask_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.get ( ( "/config/server/tasks/" + ( getLogFileCompressorTaskId ( ) ) ) ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_NOT_FOUND , r.getStatusCode ( ) ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { cookieProvider.init ( ) ; }
private com.google.gerrit.server.git.GroupList readGroupList ( ) throws java.io.IOException { return com.google.gerrit.server.git.GroupList.parse ( readUTF8 ( GroupList.FILE_NAME ) , com.google.gerrit.server.git.GroupList.createLoggerSink ( GroupList.FILE_NAME , com.google.gerrit.pgm.init.api.AllProjectsConfig.log ) ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > commit ( com.google.gerrit.server.index.Schema < com.google.gerrit.server.query.change.ChangeData > schema , java.lang.String id ) { return new com.google.gerrit.server.query.change.CommitPredicate ( schema , id ) ; }
private com.google.gerrit.server.account.AuthResult auth ( final com.google.gerrit.reviewdb.Account account ) { return account != null ? new com.google.gerrit.server.account.AuthResult ( account.getId ( ) , false ) : null ; }
public void testGcNotAllowed_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , new com.google.gerrit.acceptance.RestSession ( accounts.create ( "user" , "user@example.com" , "User" ) ) . post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) ; }
public int compare ( final com.google.gerrit.reviewdb.PatchSetApproval a , final com.google.gerrit.reviewdb.PatchSetApproval b ) { return a.getGranted ( ) . compareTo ( b.getGranted ( ) ) ; }
private void publishEvent ( com.google.gerrit.server.events.Event event ) { session.publish ( gson.toJson ( event ) ) ; }
public T get ( I input , com.google.gerrit.server.index.FieldDef.FillArgs args ) throws com.google.gwtorm.server.OrmException { try { return getter.get ( input , args ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public synchronized void start ( ) { com.google.gerrit.server.plugins.PluginLoader.log.info ( ( "Loading plugins from " + ( pluginsDir.getAbsolutePath ( ) ) ) ) ; rescan ( ) ; scanner.start ( ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( changeId ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated , boolean ignoreUnchangedPatchSet ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , ignoreUnchangedPatchSet ) ; }
public com.google.common.base.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) { return webScanner.getEntry ( resourcePath ) ; }
public com.google.gerrit.server.IdentifiedUser create ( final com.google.gerrit.reviewdb.client.Account.Id id ) { return create ( ( ( java.net.SocketAddress ) ( null ) ) , id ) ; }
void syncScroll ( com.google.gerrit.client.diff.DisplaySide masterSide ) { scrollSynchronizer.syncScroll ( masterSide ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return input.getAccountId ( ) . equals ( rsrc.getUser ( ) . getAccountId ( ) ) ; }
private javax.servlet.http.HttpServletRequest enrichAuthenticatedRequest ( javax.servlet.http.HttpServletRequest httpRequest , com.googlesource.gerrit.plugins.github.oauth.OAuthCookie authCookie ) { httpRequest = ( authCookie == null ) ? httpRequest : new com.googlesource.gerrit.plugins.github.oauth.AuthenticatedHttpRequest ( httpRequest , config.httpHeader , authCookie.user , config.httpDisplaynameHeader , authCookie.fullName , config.httpEmailHeader , authCookie.email ) ; return httpRequest ; }
public void setChange ( com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . changeId = changeId ; }
private void save ( ) { try { com.googlesource.gerrit.plugins.secureconfig.SecureConfigStore.saveSecure ( sec ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( "Cannot save secure.config" , e ) ; } }
public void testWithoutSubmodule ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithoutSubmodule ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation ( repo , c ) ; org.junit.Assert.assertEquals ( 0 , m.size ( ) ) ; }
private void deletePatchSet ( java.lang.String changeId , com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { gApi.changes ( ) . id ( changeId ) . revision ( ps.getId ( ) . get ( ) ) . delete ( ) ; }
public void release ( ) { }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , null , null ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { com.google.gerrit.client.Gerrit.dispatchHistoryHooks ( event.getValue ( ) ) ; }
public java.lang.String getShortName ( ) { final java.lang.String n = getName ( ) ; if ( n.startsWith ( "refs/heads/" ) ) { return n.substring ( "refs/heads/" . length ( ) ) ; } return n ; }
public void setUp ( ) throws java.lang.Exception { repo = com.google.gerrit.acceptance.GitUtil.newTestRepository ( repoManager.openRepository ( project ) ) ; blockRead ( project , "refs/*" ) ; }
public com.google.gerrit.client.reviewdb.PatchLineComment.Side getSide ( ) { return com.google.gerrit.client.reviewdb.PatchLineComment.Side.forCode ( side ) ; }
private boolean isEmpty ( ) { return ( deleteComments.isEmpty ( ) ) && ( upsertComments.isEmpty ( ) ) ; }
public com.google.gerrit.server.account.CapabilityControl getCapabilities ( ) { com.google.gerrit.server.account.CapabilityControl ctl = capabilities ; if ( ctl == null ) { ctl = capabilityControlFactory.create ( this ) ; capabilities = ctl ; } return ctl ; }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.CreateRequest input ) { return ( input.getChange ( ) ) != null ; }
private boolean error ( java.lang.String msg , java.lang.Throwable t ) { problem ( msg ) ; com.google.gerrit.server.change.ConsistencyChecker.log.warn ( ( "Error in consistency check of change " + ( change.getId ( ) ) ) , t ) ; return false ; }
private static void h ( final java.lang.StringBuffer r , final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { com.google.gerrit.client.data.GitwebLink.var ( r , "h" , branch.get ( ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return notesFactory.create ( db , change ) ; }
private synchronized com.google.gitiles.Linkifier linkifier ( ) { if ( ( linkifier ) == null ) { com.google.common.base.Preconditions.checkState ( ( ( urls ) != null ) , "GitilesUrls not yet set" ) ; linkifier = new com.google.gitiles.Linkifier ( urls ) ; } return linkifier ; }
public void nameEscaperDoesNotEscapeSlashes ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "foo/bar" , com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo/bar" ) ) ; }
private static void h ( final java.lang.StringBuffer r , final com.google.gerrit.client.reviewdb.PatchSet ps ) { com.google.gerrit.client.data.GitwebLink.var ( r , "h" , ps.getRevision ( ) ) ; }
