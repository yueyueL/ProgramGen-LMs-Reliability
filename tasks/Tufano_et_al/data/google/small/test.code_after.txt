public void testRightEventIsForwarded ( ) throws java.lang.Exception { setUpMocks ( true ) ; com.ericsson.gerrit.plugins.syncevents.Context.setForwardedEvent ( ) ; eventHandler.onEvent ( event ) ; com.ericsson.gerrit.plugins.syncevents.Context.unsetForwardedEvent ( ) ; org.mockito.Mockito.verifyZeroInteractions ( restSession ) ; }
protected com.google.gerrit.server.account.AccountState createEntry ( com.google.gerrit.client.reviewdb.Account.Id key ) throws java.lang.Exception { return lookup ( key ) ; }
private void header ( final int col , final java.lang.String title ) { table.setText ( 0 , col , title ) ; table.getCellFormatter ( ) . addStyleName ( 0 , col , Gerrit.RESOURCES.css ( ) . header ( ) ) ; }
private void removeEventListenerRegistration ( ) { if ( ( eventListenerRegistration ) != null ) { eventListenerRegistration.remove ( ) ; } }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; for ( final com.google.gerrit.client.SignedInListener l : com.google.gerrit.client.Gerrit.signedInListeners ) { l.onSignIn ( ) ; } }
public com.google.gerrit.reviewdb.client.Project.NameKey getProjectNameKey ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( "testProject" ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; }
public void testCreateProjectWithoutCapability_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { com.google.gerrit.acceptance.RestResponse r = userSession.put ( "/projects/newProject" ) ; org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , r.getStatusCode ( ) ) ; }
protected void preDisplay ( com.google.gerrit.client.rpc.NativeList < com.google.gerrit.client.dashboards.DashboardList > result ) { dashes.display ( result ) ; }
protected void configure ( ) { bind ( org.eclipse.jgit.lib.Config.class ) . annotatedWith ( com.google.gerrit.server.config.GerritServerConfig.class ) . toInstance ( cfg ) ; }
protected void configure ( ) { bind ( com.ericsson.gerrit.plugins.highavailability.Configuration.class ) . toInstance ( config ) ; bind ( org.apache.http.impl.client.CloseableHttpClient.class ) . toProvider ( com.ericsson.gerrit.plugins.highavailability.HttpClientProvider.class ) . in ( Scopes.SINGLETON ) ; }
public java.util.Optional < com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request > process ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) { if ( ! ( shouldProcess ( event , remote ) ) ) { return java.util.Optional.empty ( ) ; } return doProcess ( event , remote ) ; }
public void deleteCommentIfPresent ( com.google.gerrit.reviewdb.client.PatchLineComment c ) throws com.google.gwtorm.server.OrmException { if ( draftNotes.load ( ) . containsComment ( c ) ) { verifyComment ( c ) ; deleteComments.add ( c ) ; } }
protected Project.NameKey createProject ( java.lang.String nameSuffix ) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject ( nameSuffix , null ) ; }
public void setup ( ) throws java.io.IOException { com.google.gerrit.server.git.ValidationError.Sink sink = org.easymock.EasyMock.createNiceMock ( ValidationError.Sink.class ) ; org.easymock.EasyMock.replay ( sink ) ; groupList = com.google.gerrit.server.git.GroupList.parse ( com.google.gerrit.server.git.GroupListTest.PROJECT , com.google.gerrit.server.git.GroupListTest.TEXT , sink ) ; }
public boolean canAddGroup ( com.google.gerrit.reviewdb.AccountGroup.Id id ) { return isOwner ( ) ; }
public com.google.gerrit.extensions.api.access.ProjectAccessInfo access ( com.google.gerrit.extensions.api.access.ProjectAccessInput p ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return setAccess.apply ( checkExists ( ) , p ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot put access rights" , e ) ; } }
public final java.io.File getCommentPath ( java.lang.String fileName ) { return new java.io.File ( templatesPath.getPath ( ) , fileName ) ; }
public void testParseComplex ( ) throws java.lang.Exception { com.google.gerrit.server.account.QueryList ql = com.google.gerrit.server.account.QueryList.parse ( com.google.gerrit.server.account.QueryListTest.L_COMPLEX , null ) ; com.google.common.truth.Truth.assertThat ( ql.getQuery ( com.google.gerrit.server.account.QueryListTest.N_FOO ) ) . isEqualTo ( com.google.gerrit.server.account.QueryListTest.Q_COMPLEX ) ; }
public void resetLastUpdatedOn ( ) { lastUpdatedOn = new java.sql.Timestamp ( java.lang.System.currentTimeMillis ( ) ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > getForOpenChange ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.CurrentUser user ) throws com.google.gwtorm.server.OrmException , java.io.IOException { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet ( dbProvider.get ( ) , c , user ) ; return cs.changes ( ) . asList ( ) ; }
public final native void on ( java.lang.String event , net.codemirror.lib.CodeMirror.GutterClickHandler handler ) ;
public boolean canSee ( com.google.gerrit.reviewdb.Account.Id id ) { return isVisible ( ) ; }
public com.google.gerrit.reviewdb.client.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { trackingKey , trackingSystem } ; }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String pub ) throws com.google.gerrit.common.errors.InvalidSshKeyException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ) { com.google.gerrit.reviewdb.client.AccountSshKey key = authorizedKeys.addKey ( pub ) ; commit ( authorizedKeys ) ; return key ; } }
public void execute ( com.google.gerrit.server.update.BatchUpdateListener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { com.google.gerrit.server.update.FusedNoteDbBatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
public void onFailure ( java.lang.Throwable caught ) { b.setEnabled ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught ) . center ( ) ; }
final native boolean hasRevisionNumber ( ) ;
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; org.junit.Assert.assertEquals ( query ( in ) , rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
static com.google.gerrit.server.notedb.NoteDbModule forTest ( org.eclipse.jgit.lib.Config cfg ) { return new com.google.gerrit.server.notedb.NoteDbModule ( cfg , true ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { submitOnSelection = false ; if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { if ( nameTxt.isSuggestionListShowing ( ) ) { submitOnSelection = true ; } else { doAddNew ( ) ; } } }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; updateRenderEntireFile ( ) ; }
final void setState ( com.google.gerrit.extensions.api.projects.ProjectState s ) { setStateRaw ( s.name ( ) ) ; }
private boolean needsIndexFunction ( final com.google.gwtorm.schema.QueryModel info ) { return ( info.hasWhere ( ) ) || ( info.hasOrderBy ( ) ) ; }
private static com.google.gerrit.client.rpc.RestApi group ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group ) { return new com.google.gerrit.client.rpc.RestApi ( "/groups/" ) . id ( group.get ( ) ) ; }
public com.google.gerrit.extensions.restapi.RestModifyView < com.google.gerrit.server.project.ProjectResource , ? > create ( com.google.gerrit.server.project.ProjectResource parent , com.google.gerrit.extensions.restapi.IdString id ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( id.equals ( "default" ) ) { return createDefault.get ( ) ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( id ) ; }
public double doubleValue ( ) { return ( ( double ) ( this . val ) ) ; }
public org.bouncycastle.openpgp.PGPPublicKeyRingCollection get ( long keyId ) throws java.io.IOException , org.bouncycastle.openpgp.PGPException { return new org.bouncycastle.openpgp.PGPPublicKeyRingCollection ( get ( keyId , null ) ) ; }
public Account.Id getAccountId ( ) { return accountId ; }
void patchScript ( com.google.gerrit.reviewdb.Patch.Key key , com.google.gerrit.reviewdb.PatchSet.Id a , com.google.gerrit.reviewdb.PatchSet.Id b , com.google.gerrit.reviewdb.AccountDiffPreference diffPrefs , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.PatchScript > callback ) ;
public void reAddExistingGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.server.git.gpg.TestKey key = com.google.gerrit.server.git.gpg.TestKey.key5 ( ) ; java.lang.String id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString ( key.getKeyId ( ) ) ; org.bouncycastle.openpgp.PGPPublicKey pk = key.getPublicKey ( ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 2 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 2 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; pk = org.bouncycastle.openpgp.PGPPublicKey.removeCertification ( pk , "foo:myId" ) ; info = gApi.accounts ( ) . self ( ) . putGpgKeys ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 1 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 1 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; }
private static boolean skip ( java.lang.String name ) { return ( ( name.startsWith ( "refs/changes/" ) ) || ( name.startsWith ( GitRepositoryManager.REFS_CACHE_AUTOMERGE ) ) ) || ( com.google.gerrit.server.util.MagicBranch.isMagicBranch ( name ) ) ; }
void onShowBase ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > e ) { java.lang.Boolean value = e.getValue ( ) ; prefs.showBase ( value ) ; if ( ( view ) != null ) { view.showBase.setValue ( value , true ) ; } }
public void run ( ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange2 ( revision.getParentKey ( ) , java.lang.String.valueOf ( revision.get ( ) ) ) ) ; }
java.lang.String patchTableSize_ModifyBinaryFiles ( java.lang.String bytesInserted , java.lang.String bytesDeleted ) ;
private static org.eclipse.jgit.lib.ObjectId getBase ( final java.lang.String baseRevision ) { if ( ( baseRevision != null ) && ( ! ( baseRevision.isEmpty ( ) ) ) ) { return org.eclipse.jgit.lib.ObjectId.fromString ( baseRevision ) ; } return null ; }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; com.google.common.truth.Truth.assertThat ( rewrite.rewrite ( in , com.google.gerrit.server.index.IndexRewriteTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ) . isEqualTo ( query ( in ) ) ; }
public void cancel ( ) { if ( ( status.getStatus ( ) ) != ( com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.Code.SYNC ) ) { return ; } cancelled = true ; status.update ( GitJobStatus.Code.CANCELLED , "Cancelled" , "Cancelled" ) ; rollback ( ) ; }
void onCancel ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { input.setFocus ( false ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( form , false ) ; com.google.gwt.user.client.ui.UIObject.setVisible ( show , true ) ; }
private final java.lang.String upgrade ( ) { return ( "\nRun reindex to rebuild the index:\n" + "$ java -jar gerrit.war reindex -d " ) + ( sitePaths.site_path.toAbsolutePath ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { b.setEnabled ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught ) . center ( ) ; }
protected void migrateData ( com.google.gerrit.reviewdb.ReviewDb db , com.google.gerrit.server.schema.UpdateUI ui ) throws com.google.gwtorm.client.OrmException , java.sql.SQLException { }
private static java.lang.String toRfcAddressString ( com.google.gerrit.extensions.common.AccountInfo info ) { return new com.google.gerrit.server.mail.Address ( info.name , info.email ) . toString ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.RestApi.isNotFound ( caught ) ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . username ( null ) ; display ( ) ; } else { super . onFailure ( caught ) ; } }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless , slave ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; } }
public void noNotificationForDraftPatchSetsForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS , NotifyType.ALL_COMMENTS ) ) ; com.google.gerrit.server.git.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%draft" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; setApiUser ( admin ) ; com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput ( ) ; in.message = "comment" ; gApi.changes ( ) . id ( r.getChangeId ( ) ) . current ( ) . review ( in ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
public void onSuccess ( final com.google.gerrit.client.projects.ProjectMap result ) { projectsTab.display ( result ) ; if ( firstPopupLoad ) { firstPopupLoad = false ; displayPopup ( ) ; } }
public com.google.common.collect.ImmutableList < com.google.gerrit.reviewdb.client.AccountGroup.UUID > load ( com.google.gerrit.reviewdb.client.AccountGroup.UUID key ) throws com.google.gerrit.common.errors.NoSuchGroupException , com.google.gwtorm.server.OrmException { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schema.open ( ) ) { return groups.getSubgroups ( db , key ) . collect ( com.google.common.collect.ImmutableList.toImmutableList ( ) ) ; } }
public com.google.gerrit.server.IdentifiedUser runAs ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , remotePeerProvider , dbProvider , id , caller ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.client.Project update , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
void onPublishEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.publishEdit ( getProject ( ) , changeId , publishEdit , rebaseEdit , deleteEdit ) ; }
private org.apache.lucene.search.Query exactQuery ( com.google.gerrit.server.index.IndexPredicate < com.google.gerrit.server.query.change.ChangeData > p ) { return new org.apache.lucene.search.TermQuery ( new org.apache.lucene.index.Term ( p.getOperator ( ) , p.getValue ( ) ) ) ; }
java.lang.String groupIsNotAllowed ( java.lang.String group ) ;
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.PluginInfo > apply ( com.google.gerrit.server.plugins.PluginResource resource , com.google.gerrit.extensions.common.InstallPluginInfo input ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.MethodNotAllowedException , java.io.IOException { return new com.google.gerrit.server.plugins.InstallPlugin ( loader , resource.getName ( ) , false ) . apply ( TopLevelResource.INSTANCE , input ) ; }
private java.lang.Iterable < com.google.gerrit.reviewdb.client.Project.NameKey > scan ( ) { if ( ( matchPrefix ) != null ) { return projectCache.byName ( matchPrefix ) ; } else { return projectCache.all ( ) ; } }
public com.google.gerrit.server.project.ProjectState get ( final com.google.gerrit.reviewdb.Project.NameKey projectName ) { return byName.get ( projectName ) ; }
void patchComments ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gerrit.client.reviewdb.PatchSet.Id a , com.google.gerrit.client.reviewdb.PatchSet.Id b , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.patches.CommentDetail > callback ) ;
public void addToNonExistingGroup_NotFound ( ) throws java.lang.Exception { exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.groups ( ) . id ( "non-existing" ) . addMembers ( "admin" ) ; }
public void rebuild ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change.Id changeId ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public java.util.Collection < java.lang.String > getWarnings ( com.google.gerrit.server.project.ProjectResource rsrc ) throws com.google.gwtorm.server.OrmException { return dbHandler.getWarnings ( rsrc.getProjectState ( ) . getProject ( ) ) ; }
public com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadScheme getDownloadUrl ( ) { if ( ( downloadUrl ) == null ) { return null ; } return com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadScheme.valueOf ( downloadUrl ) ; }
public com.google.gerrit.extensions.common.ChangeInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.complementOf ( java.util.EnumSet.of ( ListChangesOption.CHECK ) ) ) ; }
public final java.util.List < com.google.gerrit.index.query.Predicate < T > > getChildren ( ) { return java.util.Collections.unmodifiableList ( children ) ; }
public synchronized javax.sql.DataSource get ( ) { if ( ! ( init ) ) { com.google.gerrit.common.SiteLibraryLoaderUtil.loadSiteLib ( libdir ) ; init = true ; } return super . get ( ) ; }
public java.lang.String getString ( java.lang.String name , java.lang.String defaultValue ) { return com.google.common.base.Objects.firstNonNull ( cfg.getString ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName , name ) , defaultValue ) ; }
boolean isTokenValid ( final java.lang.String inputToken ) { return ( isSignedIn ( ) ) && ( key.getToken ( ) . equals ( inputToken ) ) ; }
public void asAnonymous ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user1 = newAccount ( "user1" ) ; setAnonymous ( ) ; assertQuery ( "9999999" ) ; assertQuery ( "self" ) ; assertQuery ( ( "username:" + ( user1.username ) ) , user1 ) ; }
public abstract org.eclipse.jgit.lib.Repository createRepository ( com.google.gerrit.reviewdb.Project.NameKey name ) throws org.eclipse.jgit.errors.RepositoryNotFoundException ;
public com.google.gerrit.server.index.ChangeIndex getSearchIndex ( ) { try { initLatch.await ( ) ; } catch ( java.lang.InterruptedException e ) { } return searchIndex.get ( ) ; }
public java.lang.String format ( java.lang.String projectName , java.lang.String path , java.lang.String revision , java.lang.String abbrRev , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) { return ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( raw ) ) ) + "</pre>" ; }
private void createTestSiteDirs ( ) throws java.io.IOException { testSite = tempSiteDir.getRoot ( ) . toPath ( ) ; com.google.gerrit.server.config.SitePaths sitePath = new com.google.gerrit.server.config.SitePaths ( testSite ) ; pluginsSitePath = java.nio.file.Files.createDirectories ( sitePath.plugins_dir ) ; java.nio.file.Files.createDirectories ( sitePath.tmp_dir ) ; }
private void display ( final com.google.gerrit.client.reviewdb.AccountGeneralPreferences p ) { showSiteHeader.setValue ( p.isShowSiteHeader ( ) ) ; displayDefaultContext ( p.getDefaultContext ( ) ) ; }
public void onSuccess ( com.googlesource.gerrit.plugins.labelui.client.PreferencesInfo result ) { showSavedStatus ( ) ; }
public void updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) throws java.lang.Exception { ctx.getUpdate ( ps.getId ( ) ) . setTopic ( magicBranch.topic ) ; }
private void removePushFromRefsTags ( ) throws java.lang.Exception { removePermission ( Permission.PUSH , project , "refs/tags/*" ) ; }
public void renameFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.notedb.ChangeNotes notes , java.lang.String currentFilePath , java.lang.String newFilePath ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , notes , new com.google.gerrit.server.edit.tree.RenameFileModification ( currentFilePath , newFilePath ) ) ; }
private java.util.Collection < com.google.gerrit.reviewdb.client.Account.Id > fetchAccountIds ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return approvalsUtil.getReviewers ( dbProvider.get ( ) , rsrc.getNotes ( ) ) . all ( ) ; }
public java.lang.Void call ( ) throws java.io.IOException { for ( com.google.gerrit.server.index.ChangeIndex i : getWriteIndexes ( ) ) { i.delete ( id ) ; } fireChangeDeletedFromIndexEvent ( id ) ; return null ; }
public void createNewDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "unsupported change status" ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission ) { return getRefControl ( ) . getRange ( permission , isOwner ( ) ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.server.AccessPath accessPath , com.google.inject.Provider < java.net.SocketAddress > remotePeerProvider , com.google.gerrit.reviewdb.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( accessPath , authConfig , canonicalUrl , realm , accountCache , starredChangesCache , remotePeerProvider , null , id ) ; }
void patchScript ( com.google.gerrit.client.reviewdb.Patch.Key key , com.google.gerrit.client.reviewdb.PatchSet.Id a , com.google.gerrit.client.reviewdb.PatchSet.Id b , com.google.gerrit.client.patches.PatchScriptSettings settings , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.data.PatchScript > callback ) ;
public void setAbbreviation ( java.lang.String abbreviation ) { this . abbreviation = abbreviation ; }
public void patchSetPublishDetail ( final com.google.gerrit.reviewdb.client.PatchSet.Id id , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.PatchSetPublishDetail > callback ) { patchSetPublishDetail.create ( id ) . to ( callback ) ; }
private static java.lang.String queryIncoming ( java.lang.String who ) { return ( ( ( "is:open reviewer:" + who ) + " -owner:" ) + who ) + " -star:ignore" ; }
private static org.eclipse.jgit.diff.RawTextComparator comparatorFor ( com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws ) { switch ( ws ) { case IGNORE_ALL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL ; case IGNORE_TRAILING : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING ; case IGNORE_LEADING_AND_TRAILING : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE ; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT ; } }
public int next ( ) { return com.google.gerrit.server.util.IdGenerator.mix ( com.google.gerrit.server.util.IdGenerator.salt , gen.getAndIncrement ( ) ) ; }
private com.google.common.base.Supplier < com.google.gerrit.server.account.AccountState > getAccountSupplier ( final com.google.gerrit.reviewdb.client.Account.Id account ) { return com.google.common.base.Suppliers.memoize ( new com.google.common.base.Supplier < com.google.gerrit.server.account.AccountState > ( ) { @ java.lang.Override public com.google.gerrit.server.account.AccountState get ( ) { return accountCache.get ( account ) ; } } ) ; }
public void abandonReviewableChangeNotifyNoneCcingSelf ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; abandon ( sc.changeId , sc.owner , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
void abandonChange ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , java.lang.String message , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public com.google.gerrit.extensions.common.ServerInfo getInfo ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getServerInfo.apply ( new com.google.gerrit.server.config.ConfigResource ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot get server info" , e ) ; } }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { switch ( event.getCharCode ( ) ) { case com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER : doSearch ( ) ; break ; case com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE : searchBox.setText ( "" ) ; searchBox.setFocus ( false ) ; break ; } }
private com.google.gerrit.extensions.common.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.lang.String tag , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = com.google.gerrit.server.change.ChangeJson.getApprovalInfo ( id , value , tag , date ) ; accountLoader.put ( ai ) ; return ai ; }
protected void assertResultEquals ( java.lang.String message , com.google.gerrit.reviewdb.client.Change expected , com.google.gerrit.server.change.ChangeJson.ChangeInfo actual ) { org.junit.Assert.assertEquals ( message , expected.getId ( ) . get ( ) , actual._number ) ; }
protected void run ( ) throws com.google.gerrit.server.ssh.Failure { throw new com.google.gerrit.server.ssh.UnloggedFailure ( 127 , ( ( "gerrit: " + ( getName ( ) ) ) + ": not found" ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { sendButton.setEnabled ( true ) ; cancelButton.setEnabled ( true ) ; super . onFailure ( caught ) ; }
public boolean isValidXGerritAuth ( java.lang.String keyIn ) { return keyIn.equals ( getXGerritAuth ( ) ) ; }
protected com.google.gerrit.server.account.AccountState fromDocument ( org.apache.lucene.document.Document doc ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( doc.getField ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . numericValue ( ) . intValue ( ) ) ; return accountCache.get ( ) . get ( id ) ; }
public void rebase ( com.google.gerrit.extensions.api.changes.RebaseInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply ( change , in ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot rebase change" , e ) ; } }
public abstract com.google.gerrit.server.mail.receive.MailMessage.Builder dateReceived ( java.time.Instant instant ) ;
private WorkQueue.Executor getExecutor ( ) { return queue.getQueue ( userProvider.get ( ) . getCapabilities ( ) . getQueueType ( ) ) ; }
public java.util.Iterator < com.google.gerrit.server.project.ProjectState > iterator ( ) { return new com.google.gerrit.server.project.ProjectHierarchyIterator ( projectCache , allProjectsName , this ) ; }
com.google.gerrit.server.git.ReplaceOp create ( com.google.gerrit.server.util.RequestScopePropagator requestScopePropagator , com.google.gerrit.server.project.ProjectControl projectControl , com.google.gerrit.reviewdb.client.Branch.NameKey dest , boolean checkMergedInto , @ com.google.inject.assistedinject.Assisted ( value = "priorPatchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id priorPatchSetId , @ com.google.inject.assistedinject.Assisted ( value = "priorCommit" ) org.eclipse.jgit.revwalk.RevCommit priorCommit , @ com.google.inject.assistedinject.Assisted ( value = "patchSetId" ) com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , @ com.google.inject.assistedinject.Assisted ( value = "commit" ) org.eclipse.jgit.revwalk.RevCommit commit , com.google.gerrit.reviewdb.client.PatchSetInfo info , java.util.List < java.lang.String > groups , @ com.google.gerrit.common.Nullable com.google.gerrit.server.git.ReceiveCommits.MagicBranchInput magicBranch , @ com.google.gerrit.common.Nullable org.eclipse.jgit.transport.PushCertificate pushCertificate ) ;
protected void configureCommands ( ) { command ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscription.class ) ; }
com.googlesource.gerrit.plugins.webhooks.PostTask create ( com.google.gerrit.server.events.ProjectEvent event , com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( ) . run ( ) ; }
public void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testutil.TempFileUtil.cleanup ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { confirmSetUserName ( ) ; } }
public void shouldDeleteFromIndexInRemoteOnChangeDeletedEvent ( ) throws java.lang.Exception { indexEventHandler.onChangeDeleted ( id.get ( ) ) ; org.mockito.Mockito.verify ( restSessionMock ) . deleteFromIndex ( com.ericsson.gerrit.plugins.multimaster.IndexEventHandlerTest.CHANGE_ID ) ; }
java.lang.String getContentType ( ) { return getContentType ( diff.metaB ( ) ) ; }
public com.google.gerrit.server.patch.DiffSummary call ( ) throws java.lang.Exception { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get ( key , project ) ; return com.google.gerrit.server.patch.DiffSummaryLoader.toDiffSummary ( patchList ) ; }
public void testBadEventAndNotForwarded ( ) throws java.lang.Exception { setUpMocks ( false ) ; eventHandler.onEvent ( event ) ; org.mockito.Mockito.verifyZeroInteractions ( restSession ) ; }
public void onSuccess ( final com.google.gerrit.common.data.ProjectDetail result ) { enableForm ( result.canModifyAgreements , result.canModifyDescription , result.canModifyMergeType , result.canModifyState , result.canModifyMaxObjectSizeLimit ) ; display ( result ) ; }
public void preDisplay ( final com.google.gwt.core.client.JsArray < com.google.gerrit.client.projects.BranchInfo > result ) { enableForm ( true ) ; display ( com.google.gerrit.client.rpc.Natives.asList ( result ) ) ; }
void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) throws java.io.IOException ;
public final void delete ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doDelete ( instances ) ; }
protected void setCurrentUrl ( com.google.gerrit.client.download.DownloadUrlLink link ) { urls.setVisible ( true ) ; copyLabel.setText ( ( "git pull " + ( link.getUrlData ( ) ) ) ) ; }
public void onSuccess ( final com.google.gerrit.client.data.GerritConfig result ) { com.google.gerrit.client.rpc.Common.setGerritConfig ( result ) ; onModuleLoad2 ( ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput createComment ( final java.lang.String commentTemplate ) { return new com.google.gerrit.extensions.api.changes.ReviewInput ( ) . message ( ( ( com.criteo.gerrit.plugins.automerge.ReviewUpdater.commentsPrefix ) + ( getCommentFromFile ( commentTemplate ) ) ) ) ; }
com.google.common.util.concurrent.ListenableFuture < java.lang.Void > delete ( org.apache.lucene.index.Term term ) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture ( writer.deleteDocuments ( term ) ) ; }
public static com.google.gerrit.client.rpc.RestApi project ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) ; }
private void mustBeInsideTable ( org.pegdown.ast.Node node ) { com.google.common.base.Preconditions.checkState ( ( ( table ) != null ) , "%s must be in table" , node ) ; }
private void postInitPlugins ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.InitStep initStep : pluginLoader.getInitSteps ( ) ) { postRunInjector.injectMembers ( initStep ) ; initStep.postRun ( ) ; } }
public void throwBadRequestTriggerOnBadQuery ( ) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException { setUpClient ( ) ; java.lang.String badQuery = "bad query" ; easyMock.resetAll ( ) ; easyMock.replayAll ( ) ; store.queryChangeEvents ( badQuery ) ; easyMock.verifyAll ( ) ; }
public void listBranchesOfEmptyProject ( ) throws java.lang.Exception { com.google.gerrit.acceptance.rest.project.BranchAssert.assertBranches ( com.google.common.collect.ImmutableList.of ( com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( "HEAD" , null , false ) , com.google.gerrit.acceptance.rest.project.ListBranchesIT.branch ( RefNames.REFS_CONFIG , null , false ) ) , list ( ) . get ( ) ) ; }
public void currentAndAll ( ) { assertIllegalArgument ( ( ( ( com.google.gerrit.testing.IndexVersions.CURRENT ) + "," ) + ( com.google.gerrit.testing.IndexVersions.ALL ) ) , ( "Invalid value for test: " + ( com.google.gerrit.testing.IndexVersions.ALL ) ) ) ; }
public void fill ( java.util.Collection < ? extends com.google.gerrit.server.account.AccountInfo > infos ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.account.AccountInfo info : infos ) { put ( info ) ; } fill ( ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
public void before ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.enabled ( ) ) . isTrue ( ) ; }
public static java.lang.String cleanupHashtag ( java.lang.String hashtag ) { hashtag = com.google.gerrit.server.change.HashtagsUtil.LEADER.trimLeadingFrom ( hashtag ) ; hashtag = com.google.common.base.CharMatcher.whitespace ( ) . trimTrailingFrom ( hashtag ) ; return hashtag ; }
public synchronized com.google.gerrit.testing.FakeEmailSender.Message nextMessage ( ) { com.google.gerrit.testing.FakeEmailSender.Message msg = peekMessage ( ) ; ( messagesRead ) ++ ; return msg ; }
static com.google.gerrit.server.patch.PatchListEntry empty ( final java.lang.String fileName ) { return new com.google.gerrit.server.patch.PatchListEntry ( com.google.gerrit.reviewdb.client.Patch.ChangeType.MODIFIED , com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED , null , fileName , com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER , com.google.common.collect.ImmutableList.of ( ) , com.google.common.collect.ImmutableSet.of ( ) , 0 , 0 , 0 , 0 ) ; }
static void markPrivate ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.markPrivate ( project.get ( ) , id.get ( ) , com.google.gerrit.client.change.ChangeActions.cs ( project , id , draftButtons ) ) ; }
public void unblockLargerScope_Fails ( ) { com.google.gerrit.server.project.testing.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/master" ) ; com.google.gerrit.server.project.testing.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.testing.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.testing.Util.DEVS ) ; assertCannotUpdate ( "refs/heads/master" , u ) ; }
public java.util.List < java.lang.String > getOwnerGroups ( com.google.gerrit.reviewdb.client.Project.NameKey project ) { return com.google.common.collect.ImmutableList.copyOf ( cfg.getStringList ( com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME , findSubSection ( project.get ( ) ) , com.google.gerrit.server.config.RepositoryConfig.OWNER_GROUP_NAME ) ) ; }
private static boolean isGoogleAccount ( final com.dyuproject.openid.OpenIdUser user ) { return user.getIdentity ( ) . startsWith ( ( ( com.google.gerrit.client.openid.OpenIdUtil.URL_GOOGLE ) + "?" ) ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( java.lang.String id , boolean checkVisibility ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException , java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse ( id , checkVisibility ) ; if ( rsrc == null ) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException ( java.lang.String.format ( "Project Not Found: %s" , id ) ) ; } return rsrc ; }
private boolean isEmpty ( ) { if ( ! ( migration.writeChanges ( ) ) ) { return true ; } return ( ( changeUpdates.isEmpty ( ) ) && ( draftUpdates.isEmpty ( ) ) ) && ( toDelete.isEmpty ( ) ) ; }
public static void addSshKey ( java.lang.String account , java.lang.String sshPublicKey , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.account.SshKeyInfo > cb ) { com.google.gerrit.client.account.AccountApi.accounts ( ) . id ( account ) . view ( "sshkeys" ) . post ( sshPublicKey , cb ) ; }
public com.googlesrouce.gerrit.plugins.github.git.GitJobStatus.Code getStatus ( ) { return status ; }
public void defaultGpgCertificationDoesNotMatchEmail ( ) throws java.lang.Exception { addExternalId ( "test" , "test" , "nobody@example.com" ) ; assertProblems ( com.google.gerrit.gpg.testutil.TestKeys.key5 ( ) , ( "Key must contain a valid certification for one of the following " + ( ( ( ( "identities:\n" + " gerrit:user\n" ) + " nobody@example.com\n" ) + " test:test\n" ) + " username:user" ) ) ) ; }
public static java.lang.String toPatchSideBySide ( final com.google.gerrit.reviewdb.Patch.Key id ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , id ) ; }
private void doAdd ( ) { addMember.fireEvent ( new com.google.gwt.event.dom.client.ClickEvent ( ) { } ) ; }
public java.util.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) { return java.util.Optional.empty ( ) ; }
private static java.lang.String encodeBase64 ( final byte [ ] buf ) { return com.google.gwtjsonrpc.server.SignedToken.toString ( org.apache.commons.codec.binary.Base64.encodeBase64 ( buf ) ) ; }
public java.lang.String getRefName ( ) { return com.google.gerrit.server.edit.ChangeEditUtil.editRefName ( user.getAccountId ( ) , change.getId ( ) , basePatchSet.getId ( ) ) ; }
public boolean canDeleteDraft ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( isOwner ( ) ) || ( getRefControl ( ) . canDeleteDrafts ( ) ) ) && ( isVisible ( db ) ) ; }
public abstract void buildUpdates ( com.google.gerrit.server.notedb.NoteDbUpdateManager manager , com.google.gerrit.server.notedb.ChangeBundle bundle ) throws com.google.gwtorm.server.OrmException , java.io.IOException ;
public com.googlecode.prolog_cafe.lang.NumberTerm not ( ) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , this ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.ssh.GerritSshDaemon.class ) ; bind ( org.apache.sshd.server.CommandFactory.class ) . to ( com.google.gerrit.server.ssh.GerritCommandFactory.class ) ; bind ( org.apache.sshd.server.PublickeyAuthenticator.class ) . to ( com.google.gerrit.server.ssh.DatabasePubKeyAuth.class ) ; }
protected com.google.gerrit.index.query.Predicate < T > defaultField ( java.lang.String value ) throws com.google.gerrit.index.query.QueryParseException { throw com.google.gerrit.index.query.QueryBuilder.error ( ( "Unsupported query:" + value ) ) ; }
public boolean updateTeamModels ( java.util.Collection < com.gitblit.models.TeamModel > arg0 ) { return false ; }
void evict ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.Id groupId , com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName ) throws java.io.IOException ;
public java.util.List < com.googlesource.gerrit.plugins.github.git.GHIssue > getIssues ( com.googlesource.gerrit.plugins.github.git.GHIssueState state ) throws java.io.IOException { return ghRepository.getIssues ( state ) ; }
protected void format ( ) throws com.google.gerrit.common.errors.EmailException { appendText ( textTemplate ( "AddKey" ) ) ; if ( useHtml ( ) ) { appendHtml ( soyHtmlTemplate ( "AddKeyHtml" ) ) ; } }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; updateRenderEntireFile ( ) ; }
public java.lang.String toString ( ) { return com.google.common.base.MoreObjects.toStringHelper ( "index" ) . add ( "p" , pred ) . add ( "limit" , limit ) . toString ( ) ; }
protected void onMovePointerTo ( java.lang.String projectName ) { if ( ( ! ( projectsPopup.isPopingUp ( ) ) ) || ( "" . equals ( nameBox.getText ( ) ) ) ) { nameBox.setText ( projectName ) ; } }
public T call ( ) throws java.lang.Exception { com.google.gerrit.server.git.PerThreadRequestScope.Context old = com.google.gerrit.server.git.PerThreadRequestScope.current.get ( ) ; com.google.gerrit.server.git.PerThreadRequestScope.current.set ( ctx ) ; try { return wrapped.call ( ) ; } finally { com.google.gerrit.server.git.PerThreadRequestScope.current.set ( old ) ; } }
private java.lang.String pushTagForExistingCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { return pushTag ( tagType , null , false , expectedStatus ) ; }
public void selectHttpUrl ( ) throws java.lang.Exception { org.eclipse.jgit.transport.CredentialsProvider.setDefault ( new org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider ( admin.username , admin.httpPassword ) ) ; selectProtocol ( Protocol.HTTP ) ; }
public static com.google.gerrit.server.account.ProjectWatches.NotifyValue create ( @ com.google.gerrit.common.Nullable java.lang.String filter , java.util.Collection < com.google.gerrit.server.account.ProjectWatches.NotifyType > notifyTypes ) { return new com.google.gerrit.server.account.AutoValue_ProjectWatches_NotifyValue ( com.google.common.base.Strings.emptyToNull ( filter ) , com.google.common.collect.Sets.immutableEnumSet ( notifyTypes ) ) ; }
boolean matches ( org.eclipse.jgit.lib.Repository git ) throws java.io.IOException { return ! ( com.google.gerrit.server.project.ListProjects.FilterType.PERMISSIONS.matches ( git ) ) ; }
protected abstract void authorizeUser ( com.google.gerrit.server.project.ProjectState state , com.google.gerrit.server.CurrentUser user ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized ;
void onRenameFile ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { renameFileAction.onRename ( ) ; }
public void insert ( java.lang.Iterable < T > instances ) throws com.google.gwtorm.client.OrmException { for ( T obj : instances ) { insertOne ( obj ) ; } db.flush ( ) ; }
private static java.lang.String findId ( final java.util.Collection < com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId > ids ) { for ( final com.google.gerrit.reviewdb.AccountExternalId.AccountExternalId i : ids ) { if ( i.isScheme ( AccountExternalId.SCHEME_GERRIT ) ) { return i.getSchemeRest ( ) ; } } return null ; }
public void setTheme ( com.google.gerrit.extensions.common.Theme theme ) { this . theme = ( theme != null ) ? theme.name ( ) : null ; }
void addGroup_Deprecated ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { addGroup ( uuid ) ; }
void apply ( com.google.gerrit.server.notedb.ChangeUpdate update ) throws com.google.gwtorm.server.OrmException { checkUpdate ( update ) ; update.setChangeMessage ( message.getMessage ( ) ) ; setTopic ( update ) ; setStatus ( update ) ; }
public static void grant ( com.google.gerrit.server.project.ProjectConfig config , com.google.gerrit.common.data.AccessSection section , com.google.gerrit.common.data.LabelType type , int min , int max , com.google.gerrit.common.data.GroupReference ... groupList ) { com.google.gerrit.server.schema.AclUtil.grant ( config , section , type , min , max , false , groupList ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , final com.google.gerrit.server.IdentifiedUser user ) throws java.lang.Exception { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , c , allUsers , user ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.myAccount = result ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; } com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; showInitialScreen ( ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doRegisterNewEmail ( ) ; }
public java.io.InputStream getInputStream ( com.google.gerrit.server.plugins.PluginEntry entry ) throws java.io.IOException { throw new java.io.FileNotFoundException ( ) ; }
com.google.gerrit.sshd.SshScope.Context newContext ( com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > sf , com.google.gerrit.sshd.SshSession s , java.lang.String cmd ) { return new com.google.gerrit.sshd.SshScope.Context ( sf , s , cmd , java.lang.System.currentTimeMillis ( ) ) ; }
void doinc ( java.lang.String name , org.objectweb.asm.Type ... args ) { mv.visitMethodInsn ( com.google.gwtorm.protobuf.INVOKESTATIC , com.google.gwtorm.protobuf.CodecGen.codedOutputStream.getInternalName ( ) , name , org.objectweb.asm.Type.getMethodDescriptor ( Type.INT_TYPE , args ) ) ; doinc ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes createForBatchUpdate ( com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , change ) . load ( ) ; }
void addFileCommentBox ( com.google.gerrit.client.diff.CommentBox box ) { getPanelFromSide ( box.getSide ( ) ) . addFileComment ( box ) ; }
public void onFailure ( java.lang.Throwable caught ) { error.clear ( ) ; enable ( true ) ; super . onFailure ( caught ) ; }
protected void configureCommands ( ) { command ( com.amd.gerrit.plugins.manifestsubscription.ShowSubscriptionCommand.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.BranchManifestCommand.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.TagManifestCommand.class ) ; command ( com.amd.gerrit.plugins.manifestsubscription.TriggerManifestUpdateCommand.class ) ; }
public void submit ( java.lang.Iterable < com.google.gerrit.common.data.SubmitRecord > submitRecords ) { status = Change.Status.SUBMITTED ; this . submitRecords = com.google.common.collect.ImmutableList.copyOf ( submitRecords ) ; com.google.common.base.Preconditions.checkArgument ( ( ! ( this . submitRecords.isEmpty ( ) ) ) , "no submit records specified at submit time" ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testing.IndexVersions.getWithoutLatest ( com.google.gerrit.server.index.project.ProjectSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testing.IndexVersions.asConfigMap ( ProjectSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , com.google.gerrit.server.query.project.LuceneQueryProjectsTest.defaultConfig ( ) ) ; }
private void exitWhenCancelled ( ) throws com.googlesource.gerrit.plugins.github.git.JobCancelledException { if ( cancelRequested ) { throw new com.googlesource.gerrit.plugins.github.git.JobCancelledException ( ) ; } }
static void postSignIn ( ) { com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
public static java.lang.String escape ( final java.lang.String in ) { return new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) . append ( in ) . asString ( ) ; }
protected void configure ( ) { bind ( java.io.File.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toInstance ( getSitePath ( ) ) ; bind ( com.google.gerrit.pgm.init.Browser.class ) ; bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.server.securestore.SecureStoreProvider.class ) ; }
public void merge ( com.google.gerrit.server.git.MergeOp.Factory mof , com.google.gerrit.reviewdb.Branch.NameKey branch ) { if ( start ( branch ) ) { mergeImpl ( mof , branch ) ; } }
protected abstract com.google.gwtorm.client.ResultSet < T > scanIndex ( com.google.gwtorm.nosql.IndexFunction < T > index , byte [ ] fromKey , byte [ ] toKey , int limit , boolean order ) throws com.google.gwtorm.client.OrmException ;
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , HttpStatus.SC_CONFLICT , expectedError ) ; }
public org.kohsuke.github.GitHub getHub ( ) throws java.io.IOException { if ( ( token ) == null ) { return null ; } return new org.kohsuke.github.GitHubBuilder ( ) . withEndpoint ( config.gitHubApiUrl ) . withOAuthToken ( token.accessToken ) . withConnector ( httpConnector ) . build ( ) ; }
public void removePublisher ( final com.googlesource.gerrit.plugins.rabbitmq.message.Publisher publisher ) { source.removeEventListener ( publisher.getEventListener ( ) ) ; }
void setSettings ( final com.google.gerrit.common.data.PatchScriptSettings s ) { settings = s ; context = settings.getContext ( ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { commentLinkProcessor = result.getCommentLinkProcessor ( ) ; display ( pubDetail ) ; }
private com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput createRobotCommentInputWithMandatoryFields ( ) { com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = new com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput ( ) ; in.robotId = "happyRobot" ; in.robotRunId = "1" ; in.line = 1 ; in.message = "nit: trailing whitespace" ; in.path = com.google.gerrit.acceptance.PushOneCommit.FILE_NAME ; return in ; }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( project ) == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name ) ; } return projectJson.format ( project.getProjectState ( ) ) ; }
boolean canAddPatchSet ( ) { return projectControl.controlForRef ( ( ( com.google.gerrit.server.util.MagicBranch.NEW_CHANGE ) + ( refName ) ) ) . canPerform ( Permission.ADD_PATCH_SET ) ; }
protected java.lang.Class < ? extends com.google.inject.Provider < java.lang.String > > provider ( ) { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class ; }
com.google.gerrit.server.git.GitModules create ( com.google.gerrit.reviewdb.client.Branch.NameKey project , java.lang.String submissionId , com.google.gerrit.server.git.MergeOpRepoManager m ) ;
public void abandonReviewableChangeByOtherCcingSelfNotifyOwner ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; com.google.gerrit.acceptance.TestAccount other = accountCreator.create ( "other" , "other@example.com" , "other" ) ; abandon ( sc.changeId , other , com.google.gerrit.extensions.client.GeneralPreferencesInfo.EmailStrategy.CC_ON_OWN_COMMENTS , com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER ) ; assertThat ( sender ) . sent ( "abandon" , sc ) . to ( sc.owner ) . cc ( other ) . notTo ( sc.reviewer , sc.ccer , sc.starrer ) . notTo ( sc.reviewerByEmail , sc.ccerByEmail ) . notTo ( com.google.gerrit.server.account.WatchConfig.NotifyType.ABANDONED_CHANGES ) ; }
abstract void onAllRefsReplicatedToAllNodes ( int totalPushTasksCount ) ;
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { removeUI ( ) ; }
public boolean updateChange ( com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx ) { ctx.getUpdate ( psId ) . setTopic ( magicBranch.topic ) ; return true ; }
public void init ( javax.servlet.FilterConfig config ) throws javax.servlet.ServletException { filterConfig = config ; for ( com.google.gerrit.httpd.AllRequestFilter f : filters ) { initFilterIfNeeded ( f ) ; } }
public abstract java.lang.String filter ( ) ;
public boolean isOwner ( ) { return ( isDeclaredOwner ( ) ) || ( user.getCapabilities ( ) . canAdministrateServer ( ) ) ; }
public static com.google.gerrit.server.patch.PatchListKey againstDefaultBase ( org.eclipse.jgit.lib.AnyObjectId newId , com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws ) { return new com.google.gerrit.server.patch.PatchListKey ( null , newId , ws , com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF ) ; }
com.google.gerrit.sshd.SshScope.Context newContext ( com.google.gwtorm.server.SchemaFactory < com.google.gerrit.reviewdb.server.ReviewDb > sf , com.google.gerrit.sshd.SshSession s , java.lang.String cmd ) { return new com.google.gerrit.sshd.SshScope.Context ( sf , s , cmd , com.google.gerrit.common.TimeUtil.nowMs ( ) ) ; }
private com.google.inject.Injector createSshInjector ( ) { final java.util.List < com.google.inject.Module > modules = new java.util.ArrayList < com.google.inject.Module > ( ) ; modules.add ( sysInjector.getInstance ( com.google.gerrit.sshd.SshModule.class ) ) ; modules.add ( new com.google.gerrit.sshd.commands.MasterCommandModule ( ) ) ; return sysInjector.createChildInjector ( modules ) ; }
protected org.eclipse.jgit.api.Git git ( ) { return testRepo.git ( ) ; }
private void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( ( ( requestId ) != null ) && ( com.google.gerrit.server.git.BatchUpdate.log.isDebugEnabled ( ) ) ) { com.google.gerrit.server.git.BatchUpdate.log.debug ( ( ( requestId ) + msg ) , args ) ; } }
public void start ( ) { if ( ! ( started ) ) { started = true ; for ( com.google.gerrit.lifecycle.LifecycleListener obj : listeners.keySet ( ) ) { obj.start ( ) ; } } }
boolean isDisabled ( ) { return ( permittedLimit ) <= 0 ; }
protected PushOneCommit.Result createChange ( org.eclipse.jgit.api.Git git ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , admin.getIdent ( ) ) ; return push.to ( git , "refs/for/master" ) ; }
private com.google.gerrit.server.permissions.ProjectControl user ( com.google.gerrit.server.project.ProjectConfig local , com.google.gerrit.reviewdb.client.AccountGroup ... memberOf ) { return user ( local , null , memberOf ) ; }
private static byte [ ] toBytes ( com.google.gerrit.extensions.restapi.BinaryResult content ) throws java.lang.Exception { java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; content.writeTo ( os ) ; return os.toByteArray ( ) ; }
public int nextAccountGroupId ( ) { throw new com.google.gerrit.testutil.DisabledReviewDb.Disabled ( ) ; }
public java.lang.String getUserName ( ) { return getAccountState ( ) . getUserName ( ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { return session.get ( ) . getUser ( ) ; }
private void subWindowResolution ( ) { com.google.gerrit.testutil.TestTimeUtil.setClockStep ( 1 , java.util.concurrent.TimeUnit.SECONDS ) ; com.google.gerrit.common.TimeUtil.nowTs ( ) ; }
public com.google.gerrit.server.project.FileResource parse ( com.google.gerrit.server.project.BranchResource parent , com.google.gerrit.extensions.restapi.IdString id ) { return new com.google.gerrit.server.project.FileResource ( parent.getControl ( ) , org.eclipse.jgit.lib.ObjectId.fromString ( parent.getRevision ( ) ) , id.get ( ) ) ; }
public com.google.gerrit.server.project.ProjectControl getProject ( ) { return project.getControl ( ) ; }
private boolean getSslVerify ( ) { return gerritConfig.getBoolean ( pluginName , null , com.googlesource.gerrit.plugins.hooks.rtc.RTCItsFacade.GERRIT_CONFIG_SSL_VERIFY , true ) ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gerrit.client.rpc.HttpCallback < T > cb ) { sendText ( com.google.gwt.http.client.RequestBuilder.POST , content , cb ) ; }
public void run ( ) { net.codemirror.lib.CodeMirror.handleVimKey ( cm , "<C-u>" ) ; }
java.lang.String getTag ( ) { for ( E e : com.google.common.collect.Lists.reverse ( list ) ) { if ( ( e.tag ) != null ) { return e.tag ; } } return null ; }
public void newPatchSetOnWipChange ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageWipChange ( ) ; pushTo ( sc , "refs/for/master%wip" , sc.owner ) ; assertThat ( sender ) . notSent ( ) ; }
private com.google.gerrit.extensions.common.ChangeInfo getWithLabels ( java.lang.String changeId ) throws java.lang.Exception { return get ( changeId , com.google.gerrit.extensions.client.ListChangesOption.LABELS , com.google.gerrit.extensions.client.ListChangesOption.DETAILED_LABELS , com.google.gerrit.extensions.client.ListChangesOption.SUBMITTABLE ) ; }
void onRefReplicatedToOneNode ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status , org.eclipse.jgit.transport.RemoteRefUpdate.Status refStatus ) { postEvent ( new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent ( project , ref , com.googlesource.gerrit.plugins.replication.PushResultProcessing.resolveNodeName ( uri ) , status , refStatus ) ) ; }
private com.google.gerrit.server.change.ChangeJson.ApprovalInfo approvalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.sql.Timestamp date ) { com.google.gerrit.server.change.ChangeJson.ApprovalInfo ai = new com.google.gerrit.server.change.ChangeJson.ApprovalInfo ( id ) ; ai.value = value ; ai.date = date ; accountLoader.put ( ai ) ; return ai ; }
private void setCommitterIdent ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.IdentifiedUser currentUser ) { if ( currentUser != null ) { committerIdent = com.google.gerrit.server.group.GroupsUpdate.createPersonIdent ( serverIdent , currentUser ) ; } else { committerIdent = serverIdent ; } }
public static com.google.gerrit.server.index.IndexConfig fromConfig ( org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.server.index.IndexConfig.create ( cfg.getInt ( "index" , null , "maxLimit" , 0 ) , cfg.getInt ( "index" , null , "maxPages" , 0 ) ) ; }
com.google.gerrit.server.CurrentUser provideCurrentUser ( com.google.gerrit.server.util.RequestContext ctx ) { return ctx.getUser ( ) ; }
private void assertBadRequest ( com.google.gerrit.extensions.api.projects.Projects.ListRequest req ) throws java.lang.Exception { try { req.get ( ) ; org.junit.Assert.fail ( "Expected BadRequestException" ) ; } catch ( com.google.gerrit.extensions.restapi.BadRequestException expected ) { } }
private void doQuery ( ) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi ( "Documentation" ) ; call.addParameterRaw ( "q" , com.google.gwtorm.client.KeyUtil.encode ( query ) ) ; call.get ( loadCallback ( ) ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { send.setEnabled ( true ) ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; displayScreen ( ) ; }
protected com.google.inject.Injector createInjector ( ) { org.eclipse.jgit.lib.Config luceneConfig = new org.eclipse.jgit.lib.Config ( config ) ; com.google.gerrit.testutil.InMemoryModule.setDefaults ( luceneConfig ) ; return com.google.inject.Guice.createInjector ( new com.google.gerrit.testutil.InMemoryModule ( luceneConfig , notesMigration ) ) ; }
public java.lang.Iterable < com.google.gerrit.reviewdb.Project.NameKey > all ( ) { return list.get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ; }
private native void setThemeRaw ( java.lang.String i ) ;
protected void expand ( final com.google.gerrit.client.ui.CommentPanel w ) { w.setOpen ( open ) ; }
public static java.lang.String toGroup ( final com.google.gerrit.reviewdb.AccountGroup.Id id ) { return "/admin/groups/" + ( id.toString ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
public com.google.common.util.concurrent.ListenableFuture < com.google.gerrit.reviewdb.Account > getAccount ( com.google.gerrit.reviewdb.Account.Id accountId ) { return com.google.common.util.concurrent.Futures.compose ( get ( accountId ) , AccountState.GET_ACCOUNT ) ; }
com.google.gerrit.server.project.ChangeControl createForIndexedChange ( com.google.gerrit.server.project.RefControl refControl , com.google.gerrit.reviewdb.client.Change change ) { return create ( refControl , notesFactory.createFromIndexedChange ( change ) ) ; }
public void onResponseReceived ( com.google.gwt.http.client.Request req , com.google.gwt.http.client.Response resp ) { if ( ( resp.getStatusCode ( ) ) == ( com.google.gwt.http.client.Response.SC_OK ) ) { cb.onSuccess ( com.google.gerrit.client.documentation.DocInfo.create ( ) ) ; } else { cb.onSuccess ( null ) ; } }
public int compare ( com.google.gerrit.client.info.GpgKeyInfo a , com.google.gerrit.client.info.GpgKeyInfo b ) { return a.id ( ) . compareTo ( b.id ( ) ) ; }
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead ( com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String branch ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ) { return getHead ( repo , ( "refs/heads/" + branch ) ) ; } }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > putAsync ( K key , V value ) { return self.putAsync ( key , value ) ; }
public void close ( ) { rs.close ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { setReviewedByCurrentUser ( event.getValue ( ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { nameTxt.setText ( result.asString ( ) ) ; haveAccount = true ; }
public final native boolean hasPermittedLabels ( ) ;
protected void configure ( ) { factory ( ReviewerResource.Factory.class ) ; factory ( AccountInfo.Loader.Factory.class ) ; factory ( EmailReviewComments.Factory.class ) ; factory ( PatchSetInserter.Factory.class ) ; }
public abstract java.lang.String [ ] getList ( java.lang.String section , java.lang.String subsection , java.lang.String name ) ;
public java.lang.Long call ( ) throws java.io.IOException , java.lang.InterruptedException { return writer.addDocument ( doc ) ; }
private com.google.gerrit.server.config.GetServerInfo.ReceiveInfo getReceiveInfo ( org.eclipse.jgit.lib.Config cfg ) { com.google.gerrit.server.config.GetServerInfo.ReceiveInfo info = new com.google.gerrit.server.config.GetServerInfo.ReceiveInfo ( ) ; info.enableSignedPush = com.google.gerrit.server.git.gpg.SignedPushModule.isEnabled ( cfg ) ; return info ; }
public void logout ( ) { if ( ( val ) != null ) { manager.destroy ( key ) ; key = null ; val = null ; saveCookie ( ) ; user = anonymousProvider.get ( ) ; } }
void preferred ( java.lang.String e ) { this . preferred = ( ( e != null ) && ( e.equals ( email ) ) ) ? true : null ; }
private boolean canSeeMembers ( ) { return ( group.isVisibleToAll ( ) ) || ( isOwner ( ) ) ; }
public static void rebaseEdit ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "edit:rebase" ) . post ( in , cb ) ; }
public boolean apply ( com.google.gerrit.reviewdb.client.AccountGroup group ) { return ( group.getName ( ) . regionMatches ( true , 0 , name , 0 , name.length ( ) ) ) && ( groupControlFactory.controlFor ( group ) . isVisible ( ) ) ; }
void setLineNumberEmpty ( com.google.gerrit.client.diff.DisplaySide side , int cmLine ) { setLineNumber ( side , cmLine , "&nbsp;" , UnifiedTable.style.unifiedLineNumberEmpty ( ) ) ; }
public com.googlesource.gerrit.plugins.github.git.GHUser getOwner ( ) throws java.io.IOException { return ghRepository.getOwner ( ) ; }
public boolean yesno ( java.lang.Boolean def , java.lang.String fmt , java.lang.Object ... args ) { return def != null ? def : true ; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create ( com.google.gerrit.reviewdb.client.Branch.NameKey destBranch , com.google.gerrit.server.git.MergeOp.CommitStatus commits , com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw , com.google.gerrit.server.IdentifiedUser caller , com.google.gerrit.server.git.MergeTip mergeTip , org.eclipse.jgit.lib.ObjectInserter inserter , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevFlag canMergeFlag , com.google.gerrit.reviewdb.server.ReviewDb db , java.util.Set < org.eclipse.jgit.revwalk.RevCommit > alreadyAccepted , java.lang.String submissionId ) ;
public static synchronized void resetWithClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = new java.util.concurrent.atomic.AtomicLong ( com.google.gerrit.testutil.TestTimeUtil.START.toEpochMilli ( ) ) ; com.google.gerrit.testutil.TestTimeUtil.setClockStep ( clockStep , clockStepUnit ) ; }
public com.google.gerrit.server.patch.DiffCacheContent get ( final com.google.gerrit.server.patch.DiffCacheKey key ) { return self.get ( key ) ; }
protected void configureServlets ( ) { bind ( com.googlesource.gerrit.plugins.manager.AvailablePluginsCollection.class ) ; serve ( "/available*" ) . with ( com.googlesource.gerrit.plugins.manager.PluginManagerRestApiServlet.class ) ; filterRegex ( ".*plugin-manager\\.js" ) . through ( com.googlesource.gerrit.plugins.manager.XAuthFilter.class ) ; }
public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return this ; }
private static < T > java.util.List < T > trim ( java.util.List < T > list ) { return ( list.size ( ) ) > ( com.google.gitiles.RepositoryIndexServlet.REF_LIMIT ) ? list.subList ( 0 , com.google.gitiles.RepositoryIndexServlet.REF_LIMIT ) : list ; }
public com.google.gerrit.pgm.init.Section get ( java.lang.String name , java.lang.String subsection ) { return new com.google.gerrit.pgm.init.Section ( flags , site , ui , name , subsection ) ; }
public net.sf.ehcache.statistics.LiveCacheStatistics getLiveCacheStatistics ( ) throws java.lang.IllegalStateException { return self.getLiveCacheStatistics ( ) ; }
abstract java.time.Duration timeout ( ) ;
public final native boolean syntaxHighlighting ( ) ;
public static java.lang.String publicKey ( com.jcraft.jsch.KeyPair sshKey , java.lang.String comment ) throws java.io.UnsupportedEncodingException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; sshKey.writePublicKey ( out , comment ) ; return out.toString ( java.nio.charset.StandardCharsets.US_ASCII.name ( ) ) . trim ( ) ; }
public long getLong ( java.lang.String name , long defaultValue ) { return cfg.getLong ( com.google.gerrit.server.config.PluginConfig.PLUGIN , pluginName , name , defaultValue ) ; }
private void fastForwardTagToNewCommit ( com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType , java.lang.String tagName , org.eclipse.jgit.transport.RemoteRefUpdate.Status expectedStatus ) throws java.lang.Exception { pushTag ( tagType , tagName , true , false , expectedStatus ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , ( edit ? new com.google.gerrit.client.editor.EditScreen ( id ) : new com.google.gerrit.client.diff.SideBySide2 ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ) ; }
void onHeaderClick ( com.google.gwt.event.dom.client.ClickEvent e ) { setOpen ( ( ! ( isOpen ( ) ) ) ) ; cm.focus ( ) ; }
public void deleteExternalIds ( java.util.List < java.lang.String > externalIds ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteExternalIds.apply ( account , externalIds ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete external IDs" , e ) ; } }
public java.lang.String getRepositoryName ( ) { return gitHubRepository.getRepository ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { upToChange ( true ) . run ( ) ; }
public org.apache.sshd.common.file.FileSystemView getNormalizedView ( ) { return null ; }
public static void updateDraft ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String draftId , com.google.gerrit.client.changes.CommentInput content , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.CommentInfo > cb ) { com.google.gerrit.client.changes.CommentApi.revision ( id , "drafts" ) . id ( draftId ) . put ( content , cb ) ; }
public static void editWithFiles ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( project , id ) . addParameterTrue ( "list" ) . get ( cb ) ; }
public com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return postReviewers.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
public static com.google.gerrit.server.account.AuthRequest forExternalUser ( java.lang.String username ) { com.google.gerrit.server.account.AuthRequest r = new com.google.gerrit.server.account.AuthRequest ( ExternalId.Key.create ( com.google.gerrit.server.account.externalids.ExternalId.SCHEME_EXTERNAL , username ) ) ; r.setUserName ( username ) ; return r ; }
public void onBlur ( com.google.gwt.event.dom.client.BlurEvent event ) { blurHint ( ) ; isFocused = false ; }
public static void getSshKeys ( java.lang.String account , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JsArray < com.google.gerrit.client.account.SshKeyInfo > > cb ) { new com.google.gerrit.client.rpc.RestApi ( "/accounts/" ) . id ( account ) . view ( "sshkeys" ) . get ( cb ) ; }
public boolean inTransaction ( ) { return inTransaction ; }
public static void rebaseEdit ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject ( ) ; com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "edit:rebase" ) . post ( in , cb ) ; }
protected void onOpenRow ( final int row ) { final com.google.gerrit.client.info.ChangeInfo c = getRowItem ( row ) ; final com.google.gerrit.reviewdb.client.Change.Id id = c.legacyId ( ) ; com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public boolean match ( com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.change.ChangeField.getCommitterParts ( object ) . contains ( getValue ( ) . toLowerCase ( ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getNativeEvent ( ) . getKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doSetUserName ( ) ; } }
public void setLimit ( int l ) { this . limit = ( l <= 0 ) ? maxSuggestedReviewers : java.lang.Math.min ( l , maxSuggestedReviewers ) ; }
public java.lang.String toString ( ) { return com.google.common.base.MoreObjects.toStringHelper ( this ) . add ( "psId" , psId ) . add ( "who" , who ) . add ( "when" , when ) . toString ( ) ; }
private com.google.gerrit.server.account.AccountInfoComparator setNullsLast ( ) { this . nullsLast = true ; return this ; }
private JiraTransition.Item getTransitionByName ( java.lang.String issueKey , java.lang.String transition ) throws java.io.IOException { for ( com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition.Item t : getTransitions ( issueKey ) ) { if ( transition.equals ( t.getName ( ) ) ) { return t ; } } return null ; }
public void updateRepo ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) { mergeTip.moveTipTo ( toMerge , toMerge ) ; toMerge.setStatusCode ( CommitMergeStatus.CLEAN_MERGE ) ; }
private java.lang.String urlRebase ( ) { return ( "/changes/" + ( change.getChangeId ( ) ) ) + "/edit:rebase" ; }
private void initPlugins ( ) throws java.lang.Exception { for ( com.google.gerrit.pgm.init.api.InitStep initStep : pluginLoader.getInitSteps ( ) ) { initStep.run ( ) ; } }
protected java.util.List < com.google.gerrit.extensions.common.ChangeInfo > assertQuery ( java.lang.Object query , com.google.gerrit.reviewdb.client.Change ... changes ) throws java.lang.Exception { return assertQuery ( newQuery ( query ) , changes ) ; }
public void onCreateGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid ) throws java.io.IOException { indexer.get ( ) . index ( groupUuid ) ; }
public final native void hideTopMenu ( java.lang.Boolean s ) ;
private java.lang.String newChange ( org.eclipse.jgit.lib.PersonIdent ident ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , ident , testRepo , PushOneCommit.SUBJECT , com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME , new java.lang.String ( com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_OLD , java.nio.charset.StandardCharsets.UTF_8 ) ) ; return push.to ( "refs/for/master" ) . getChangeId ( ) ; }
void logout ( ) { if ( ( accountId ) != null ) { tokenCache.remove ( accountId ) ; accountId = null ; } user = null ; redirectToken = null ; serviceProvider = null ; }
public void doFilter ( javax.servlet.ServletRequest req , javax.servlet.ServletResponse res ) throws java.io.IOException { onDefault ( holder , ( ( javax.servlet.http.HttpServletRequest ) ( req ) ) , ( ( javax.servlet.http.HttpServletResponse ) ( res ) ) ) ; }
public void setChangeMessage ( final com.google.gerrit.reviewdb.client.ChangeMessage cm ) { changeMessage = cm ; }
private void setChangeSubjectHeader ( ) throws com.google.gerrit.common.errors.EmailException { setHeader ( "Subject" , textTemplate ( "ChangeSubject" ) ) ; }
public java.lang.String apply ( com.google.gerrit.extensions.common.ChangeInfo input ) { return ( input.changeId ) != null ? input.changeId : input.subject ; }
protected void preDisplay ( final com.google.gerrit.client.data.ChangeDetail r ) { setStarred ( r.isStarred ( ) ) ; display ( r ) ; }
public static com.google.gerrit.server.auth.AuthUser.UUID create ( java.lang.String uuid ) { return new com.google.gerrit.server.auth.AutoValue_AuthUser_UUID ( uuid ) ; }
public void doRefUpdatedHook ( final com.google.gerrit.reviewdb.client.Branch.NameKey refName , final org.eclipse.jgit.lib.RefUpdate refUpdate , final com.google.gerrit.reviewdb.client.Account account ) { doRefUpdatedHook ( refName , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , account ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { com.google.gerrit.server.edit.ChangeEditUtil.deleteRef ( ctx.getRepository ( ) , edit ) ; }
protected void grant ( java.lang.String permission , com.google.gerrit.reviewdb.client.Project.NameKey project , java.lang.String ref ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException , org.eclipse.jgit.errors.RepositoryNotFoundException { grant ( permission , project , ref , false ) ; }
public com.google.common.collect.ImmutableSet < com.google.gerrit.reviewdb.client.Account.Id > getPastAssignees ( ) { return state.pastAssignees ( ) ; }
protected void onOpenRow ( final int row ) { super . onOpenRow ( row ) ; nameBox.setText ( getRowItem ( row ) . getName ( ) ) ; doAddNew ( ) ; }
public static final native net.codemirror.lib.TextMarker.FromTo create ( net.codemirror.lib.Pos f , net.codemirror.lib.Pos t ) ;
protected void preDisplay ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; }
protected void preDisplay ( java.lang.Void result ) { initEditor ( ) ; renderLinks ( editFileInfo , diffLinks ) ; editFileInfo = null ; diffLinks = null ; showBase.setValue ( prefs.showBase ( ) , true ) ; cmBase.refresh ( ) ; }
public int getCost ( ) { return that.estimateCost ( ) ; }
public void start ( ) { config.startup ( workQueue ) ; running = true ; }
private boolean hasChanges ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.ChangeList > result ) { for ( com.google.gerrit.client.changes.ChangeList list : com.google.gerrit.client.rpc.Natives.asList ( result ) ) { if ( ( list.length ( ) ) != 0 ) { return true ; } } return false ; }
void onPublish ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.ChangeActions.publish ( getProject ( ) , changeId , revision , publish , deleteRevision ) ; }
public java.lang.String getAuthorization ( ) { return isSignedIn ( ) ? "Bearer " + ( key.getToken ( ) ) : null ; }
public com.google.gerrit.extensions.common.EditInfo getEdit ( ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
void publish ( com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ChangeDetail > callback ) ;
public void onFailure ( final java.lang.Throwable caught ) { if ( com.google.gerrit.client.rpc.ScreenLoadCallback.isNoSuchEntity ( caught ) ) { com.google.gerrit.client.Gerrit.display ( screen.getToken ( ) , new com.google.gerrit.client.NotFoundScreen ( ) ) ; } else { super . onFailure ( caught ) ; } }
public final native void scrollToY ( double y ) ;
private void postDeletion ( com.google.gerrit.server.project.ProjectResource project , org.eclipse.jgit.transport.ReceiveCommand cmd ) { referenceUpdated.fire ( project.getNameKey ( ) , cmd , identifiedUser.get ( ) . state ( ) ) ; }
private void assertOwner ( java.lang.String ref , com.google.gerrit.server.project.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . isOwner ( ) ) . named ( ( "OWN " + ref ) ) . isTrue ( ) ; }
public java.lang.String toString ( ) { return ( "Stream Events (" + ( currentUser.getAccount ( ) . getUserName ( ) ) ) + ")" ; }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.from" , value = "1" ) , @ com.google.gerrit.acceptance.GerritConfig ( name = "accounts.visibility" , value = "NONE" ) } ) public void suggestReviewersNoResult2 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
protected void terminated ( ) { super . terminated ( ) ; queues.remove ( this ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { doAddNew ( ) ; }
private static void ensureInited ( ) { if ( ( com.google.gerrit.client.FormatUtil.dtfmt ) == null ) { com.google.gerrit.client.FormatUtil.setPreferences ( com.google.gerrit.client.Gerrit.getUserPreferences ( ) ) ; } }
void insertMember ( final com.google.gerrit.client.reviewdb.AccountGroupMember k ) { final int row = table.getRowCount ( ) ; table.insertRow ( row ) ; applyDataRowStyle ( row ) ; populate ( row , k ) ; }
public void test ( ) throws java.lang.Exception { java.lang.String [ ] invalidFilenamePattern = new java.lang.String [ ] { "[@:]" , "[#%*]" } ; org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.performValidation ( repo , c , invalidFilenamePattern ) ; java.util.Set < java.lang.String > expected = new java.util.HashSet < > ( ) ; for ( java.lang.String filenames : getInvalidFilenames ( ) ) { expected.add ( ( "ERROR: invalid characters found in filename: " + filenames ) ) ; } com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; }
public void onEvent ( com.google.gerrit.server.events.Event event ) { if ( event instanceof com.google.gerrit.server.events.ChangeMergedEvent ) { com.google.gerrit.server.events.ChangeMergedEvent changeMergedEvent = ( ( com.google.gerrit.server.events.ChangeMergedEvent ) ( event ) ) ; mergeResults.put ( changeMergedEvent.change.number , changeMergedEvent.newRev ) ; } }
public abstract com.google.gerrit.server.group.db.InternalGroupUpdate.Builder setOwnerGroupReference ( com.google.gerrit.common.data.GroupReference ownerGroupReference ) ;
public void inalidPathSeparator ( ) { for ( char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray ( ) ) { com.google.common.truth.Truth.assertWithMessage ( ( "invalid character accepted: " + c ) ) . that ( com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator ( c ) ) . isFalse ( ) ; } }
public void onFocus ( com.google.gwt.event.dom.client.FocusEvent event ) { if ( Util.C.defaultAccountGroupName ( ) . equals ( nameTxtBox.getText ( ) ) ) { nameTxtBox.setText ( "" ) ; nameTxtBox.removeStyleName ( Gerrit.RESOURCES.css ( ) . inputFieldTypeHint ( ) ) ; } }
public boolean canForwardX11 ( org.apache.sshd.common.session.Session session , java.lang.String requestType ) { return false ; }
public void write ( int b ) { messageSender.sendBytes ( new byte [ ] { ( ( byte ) ( b ) ) } ) ; }
public void index ( com.google.gerrit.reviewdb.client.Change change ) throws java.io.IOException { indexAsync ( change ) . checkedGet ( ) ; }
public boolean canDeleteDraft ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( isOwner ( ) ) && ( isVisible ( db ) ) ; }
private static java.lang.String startTime ( final java.util.Date when ) { return com.google.gerrit.sshd.commands.ShowQueue.format ( when , ( ( com.google.gerrit.server.util.TimeUtil.nowMs ( ) ) - ( when.getTime ( ) ) ) ) ; }
public void addHeader ( java.lang.String name , java.lang.String value ) { headers.put ( name.toLowerCase ( ) , value ) ; }
public java.lang.String toString ( ) { int id = java.lang.System.identityHashCode ( this ) ; return java.lang.String.format ( "Plugin[%s@%x]" , name , id ) ; }
private void updateForm ( ) { tagTable.updateDeleteButton ( ) ; addTag.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
public boolean match ( short psValue , short expValue ) { return psValue <= expValue ; }
public void put ( com.google.gerrit.server.account.AccountInfo info ) { if ( detailed ) { info._account_id = info._id.get ( ) ; } provided.add ( info ) ; }
public static void setForwardedEvent ( java.lang.Boolean b ) { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.forwardedEvent.set ( b ) ; }
public void setLargeChangeSize ( int largeChangeSize ) { this . largeChangeSize = largeChangeSize ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "AuditEvent UUID:%s, SID:%s, TS:%d, who:%s, what:%s" , uuid.uuid ( ) , sessionId , when , who , what ) ; }
public void testEndsOnNewline ( ) { com.google.gerrit.client.diff.EditIterator iter = new com.google.gerrit.client.diff.EditIterator ( lines , 0 ) ; assertLineChsEqual ( net.codemirror.lib.Pos.create ( 1 ) , iter.advance ( 4 ) ) ; }
public com.google.gerrit.server.CurrentUser getUser ( ) { if ( ( user ) == null ) { throw new java.lang.IllegalStateException ( "user == null, forgot to set it?" ) ; } return user ; }
void select ( ) { group.select ( this ) ; in.label ( group.label , value ) ; }
private com.google.gerrit.extensions.auth.oauth.OAuthToken getAsOAuthToken ( com.googlesource.gerrit.plugins.cfoauth.AccessToken accessToken ) { return new com.google.gerrit.extensions.auth.oauth.OAuthToken ( accessToken.getValue ( ) , null , null , ( ( accessToken.getExpiresAt ( ) ) * 1000 ) , providerId ) ; }
public int toIndexTimeInMinutes ( java.util.Date ts ) { return ( ( int ) ( ( ts.getTime ( ) ) / 60000 ) ) ; }
public void setExisting_Conflict ( ) throws java.lang.Exception { com.google.gerrit.server.account.PutUsername.Input in = new com.google.gerrit.server.account.PutUsername.Input ( ) ; in.username = admin.username ; adminRestSession.put ( ( ( "/accounts/" + ( createUser ( ) . get ( ) ) ) + "/username" ) , in ) . assertConflict ( ) ; }
public void listTagsOfNonVisibleProject ( ) throws java.lang.Exception { blockRead ( "refs/*" ) ; setApiUser ( user ) ; exception.expect ( com.google.gerrit.extensions.restapi.ResourceNotFoundException.class ) ; gApi.projects ( ) . name ( project.get ( ) ) . tags ( ) . get ( ) ; }
public com.google.gerrit.server.notedb.ChangeNotes create ( com.google.gerrit.reviewdb.client.Change change ) { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , migration , allUsersProvider , change ) ; }
public java.lang.String buildCommand ( com.google.gerrit.httpd.raw.BazelBuild.Label l ) { return "bazel build " + ( l.toString ( ) ) ; }
com.google.gerrit.server.git.MetaDataUpdate create ( @ com.google.inject.assistedinject.Assisted com.google.gerrit.reviewdb.client.Project.NameKey projectName , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.Repository repository , @ com.google.inject.assistedinject.Assisted org.eclipse.jgit.lib.BatchRefUpdate batch ) ;
public void rebuildEmptySiteStartingWithNoteDbEnabled ( ) throws java.lang.Exception { setNotesMigrationState ( NotesMigrationState.READ_WRITE_NO_SEQUENCE ) ; com.google.gerrit.acceptance.pgm.MigrateToNoteDbIT.runGerrit ( "MigrateToNoteDb" , "-d" , sitePath , "--show-stack-trace" ) ; assertNotesMigrationState ( NotesMigrationState.READ_WRITE_NO_SEQUENCE ) ; }
com.google.gerrit.server.patch.AddReviewer create ( com.google.gerrit.reviewdb.Change.Id changeId , java.util.Collection < java.lang.String > userNameOrEmailOrGroupNames , boolean confirmed ) ;
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.reviewdb.client.Account account ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( repoManager , accountCache , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , c , account , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , com.google.gerrit.server.notedb.ChangeNotesTest.TZ ) ; }
protected void updateRepoImpl ( com.google.gerrit.server.git.BatchUpdate.RepoContext ctx ) throws com.google.gerrit.server.git.IntegrationException { args.mergeTip.moveTipTo ( amendGitlink ( toMerge ) , toMerge ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.util.Set < com.google.gerrit.reviewdb.Account.Id > > byEmail ( java.lang.String email ) ;
void addBranch ( com.google.gerrit.reviewdb.client.Project.NameKey projectName , java.lang.String branchName , java.lang.String startingRevision , com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.AddBranchResult > callback ) ;
public void createChangeWithPrivateByDefaultDisabled ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes ( ) . create ( new com.google.gerrit.extensions.common.ChangeInput ( project2.get ( ) , "master" , "empty change" ) ) . get ( ) ; com.google.common.truth.Truth.assertThat ( info.isPrivate ) . isNull ( ) ; }
public com.google.gerrit.index.query.DataSource < com.google.gerrit.reviewdb.client.AccountGroup > getSource ( com.google.gerrit.index.query.Predicate < com.google.gerrit.reviewdb.client.AccountGroup > p , com.google.gerrit.index.QueryOptions opts ) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.elasticsearch.ElasticGroupIndex.QuerySource ( p , opts ) ; }
public void removeCacheUsageListener ( net.sf.ehcache.statistics.CacheUsageListener cacheUsageListener ) throws java.lang.IllegalStateException { self ( ) . removeCacheUsageListener ( cacheUsageListener ) ; }
public com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData apply ( com.google.gerrit.server.plugins.JarScanner.ClassData classData ) { return new com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData ( classData.className , classData.annotationValue , classData.interfaces ) ; }
private void display ( final com.google.gerrit.client.admin.ProjectDetail result ) { final com.google.gerrit.client.reviewdb.Project project = result.project ; setPageTitle ( Util.M.project ( project.getName ( ) ) ) ; }
public com.google.gitiles.doc.html.HtmlBuilder space ( ) { finishActiveTag ( ) ; try { htmlBuf.append ( ' ' ) ; } catch ( java.io.IOException e ) { throw new com.google.gitiles.doc.RuntimeIOException ( e ) ; } return this ; }
public void onFailure ( java.lang.Throwable caught ) { enableOnFailure.setEnabled ( true ) ; }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.Change.Id id ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.client.OrmException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( id ) , db.get ( ) ) ; }
public java.lang.String getCommentLinkName ( ) { java.lang.String ret ; ret = gerritConfig.getString ( pluginName , null , "commentlink" ) ; if ( ret == null ) { ret = pluginName ; } return ret ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.account.AuthMethod method ) ;
public java.lang.String readString ( java.lang.String def , java.lang.String fmt , java.lang.Object ... args ) { return def ; }
private void checkEnabled ( ) throws com.google.gerrit.extensions.restapi.NotImplementedException { if ( notesMigration.readChanges ( ) ) { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( "check not implemented for NoteDb" ) ; } }
void resizeCodeMirror ( ) { int height = ( header.getOffsetHeight ( ) ) + ( getDiffTable ( ) . getHeaderHeight ( ) ) ; for ( net.codemirror.lib.CodeMirror cm : getCms ( ) ) { cm.adjustHeight ( height ) ; } }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo info ) { info.init ( ) ; loadConfigInfo ( info , base ) ; loadRevisionInfo ( ) ; }
public static java.lang.String toSideBySide ( com.google.gerrit.reviewdb.client.PatchSet.Id diffBase , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String fileName , com.google.gerrit.client.diff.DisplaySide side , int line ) { return com.google.gerrit.client.Dispatcher.toPatch ( "sidebyside" , diffBase , revision , fileName , side , line ) ; }
public com.google.gerrit.reviewdb.client.Project.InheritedBoolean getUseSignedOffBy ( ) { return useSignedOffBy ; }
public final com.google.gerrit.server.git.MergeTip run ( final com.google.gerrit.server.git.CodeReviewCommit currentTip , final java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException { refLogIdent = null ; com.google.common.base.Preconditions.checkState ( ( ( args.caller ) != null ) ) ; return _run ( currentTip , toMerge ) ; }
private static void addLink ( final com.google.gerrit.client.ui.LinkMenuBar m , final java.lang.String text , final java.lang.String historyToken ) { m.addItem ( new com.google.gerrit.client.ui.LinkMenuItem ( text , historyToken ) ) ; }
public boolean failChangeWrites ( ) { return ( ! ( rawWriteChangesSetting ( ) ) ) && ( readChanges ( ) ) ; }
protected void preDisplay ( final com.google.gerrit.client.data.SingleListChangeInfo result ) { display ( result ) ; }
void addOption ( com.google.gerrit.extensions.client.ListChangesOption o ) { options.add ( o ) ; }
public void onSuccess ( ) { com.google.gerrit.client.patches.UnifiedPatchScreen.TopView top = com.google.gerrit.client.Gerrit.getPatchScreenTopView ( ) ; com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.patches.UnifiedPatchScreen ( id , top , baseId ) ) ; }
public void onClose ( com.google.gwt.event.logical.shared.CloseEvent < com.google.gerrit.client.ui.RemoteSuggestBox > event ) { hide ( ) ; fileTable.registerKeys ( ) ; }
private void initUI ( ) { initOwner ( ) ; initDescription ( ) ; initRights ( ) ; }
public com.google.gerrit.extensions.client.DiffPreferencesInfo getDefaultDiffPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDiffPreferences.apply ( new com.google.gerrit.server.config.ConfigResource ( ) ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot get default diff preferences" , e ) ; } }
public void rollback ( ) throws com.google.gwtorm.server.OrmException { if ( inTransaction ) { inTransaction = false ; } else { delegate.rollback ( ) ; } }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { if ( acct != null ) { com.google.gerrit.server.ssh.SshUtil.invalidate ( acct.getSshUserName ( ) ) ; } }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
public com.google.gerrit.server.IdentifiedUser getUser ( ) { return ctl.getUser ( ) . asIdentifiedUser ( ) ; }
public void relativeLink ( ) throws java.lang.Exception { repo.branch ( "master" ) . commit ( ) . add ( "A/B/README.md" , "[c](../../C)" ) . create ( ) ; java.lang.String html = buildHtml ( "/repo/+doc/master/A/B/README.md" ) ; com.google.common.truth.Truth.assertThat ( html ) . contains ( "<a href=\"/b/repo/+/master/C\">c</a>" ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; query = new com.google.gerrit.client.admin.GroupListScreen.Query ( match ) . start ( start ) . run ( ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { diffTable.toggleA ( ) . run ( ) ; }
private com.google.gerrit.extensions.api.projects.ProjectApi.ListBranchesRequest list ( ) throws java.lang.Exception { return gApi.projects ( ) . name ( project.get ( ) ) . branches ( ) ; }
public void onFailure ( final java.lang.Throwable caught ) { enableButtons ( true ) ; new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) . center ( ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { setEnabledForUseContentMerge ( ) ; }
private void assertNoProblems ( com.google.gerrit.gpg.testing.TestKey tk ) { assertNoProblems ( tk.getPublicKey ( ) ) ; }
public void testPushForNonExistingBranch ( ) throws java.lang.Exception { java.lang.String branchName = "non-existing" ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( ( "refs/for/" + branchName ) ) ; r.assertErrorStatus ( ( ( "branch " + branchName ) + " not found" ) ) ; }
public void createMergeChange ( ) throws java.lang.Exception { changeInTwoBranches ( "branchA" , "a.txt" , "branchB" , "b.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "branchA" , "branchB" , "" ) ; assertCreateSucceeds ( in ) ; }
private java.lang.String createMyChange ( org.eclipse.jgit.junit.TestRepository < org.eclipse.jgit.internal.storage.dfs.InMemoryRepository > testRepo ) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create ( db , user.getIdent ( ) , testRepo ) ; return push.to ( "refs/for/master" ) . getChangeId ( ) ; }
private java.nio.file.Path resolvePath ( javax.servlet.http.HttpServletRequest req ) { return sitePaths.resolve ( com.google.common.base.CharMatcher.is ( '/' ) . trimLeadingFrom ( ( ( req.getServletPath ( ) ) + ( req.getPathInfo ( ) ) ) ) ) ; }
public com.google.gerrit.server.project.ProjectState getProjectState ( ) { return project.getProjectState ( ) ; }
public synchronized com.google.gerrit.server.account.AccountState get ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { com.google.gerrit.server.account.AccountState state = byId.get ( accountId ) ; if ( state != null ) { return state ; } return com.google.gerrit.testutil.FakeAccountCache.newState ( new com.google.gerrit.reviewdb.client.Account ( accountId , com.google.gerrit.common.TimeUtil.nowTs ( ) ) ) ; }
public final com.google.gerrit.index.Schema < V > getLatest ( ) { return schemaDefs.getLatest ( ) ; }
public void testEventSentOK ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.SUCCESSFUL , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EMPTY_MSG , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.DO_NOT_THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isTrue ( ) ; }
public final java.util.Set < java.lang.String > commandNames ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _commands ( ) ) ; }
public static com.google.gitiles.GitilesView.Builder archive ( ) { return new com.google.gitiles.GitilesView.Builder ( com.google.gitiles.GitilesView.Type.ARCHIVE ) ; }
public synchronized com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return byId.get ( accountId ) ; }
com.google.gerrit.server.permissions.RefControl forUser ( com.google.gerrit.server.CurrentUser who ) { com.google.gerrit.server.permissions.ProjectControl newCtl = projectControl.forUser ( who ) ; if ( relevant.isUserSpecific ( ) ) { return newCtl.controlForRef ( refName ) ; } return new com.google.gerrit.server.permissions.RefControl ( newCtl , refName , relevant ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result modifyFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , com.google.gerrit.extensions.restapi.RawInput content ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( edit , new com.google.gerrit.server.edit.tree.ChangeFileContentModification ( file , content ) ) ; }
protected final com.google.gerrit.pgm.CmdLineParser newCmdLineParser ( ) { final com.google.gerrit.pgm.CmdLineParser parser = new com.google.gerrit.pgm.CmdLineParser ( this ) ; for ( com.google.gerrit.server.ssh.commands.CmdOption c : optionList ) { parser.addOption ( c , c ) ; } return parser ; }
public void createNewChange ( ) throws java.lang.Exception { assertCreateSucceeds ( newChangeInput ( ChangeStatus.NEW ) ) ; }
public boolean getSuggestAccounts ( ) { return suggestAccounts ; }
public void delete ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteDraft.apply ( draft , null ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot delete draft" , e ) ; } }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { attachComments ( result ) ; displayComments ( result ) ; send.setEnabled ( true ) ; }
private void logDebug ( java.lang.String msg , java.lang.Object ... args ) { if ( com.google.gerrit.server.git.SubmoduleOp.log.isDebugEnabled ( ) ) { com.google.gerrit.server.git.SubmoduleOp.log.debug ( ( ( ( "[" + ( updateId ) ) + "]" ) + msg ) , args ) ; } }
public void onSelection ( final com.google.gwt.event.logical.shared.SelectionEvent < java.lang.Integer > event ) { com.google.gerrit.client.Gerrit.display ( tabTokens.get ( event.getSelectedItem ( ) ) , false ) ; }
private boolean in ( final com.google.gerrit.prettify.common.BaseEdit edit ) { return ( ( aCur ) < ( edit.getEndA ( ) ) ) || ( ( bCur ) < ( edit.getEndB ( ) ) ) ; }
private com.google.gerrit.reviewdb.client.AccountGroup getFromCache ( java.lang.String name ) throws java.lang.Exception { return groupCache.get ( new com.google.gerrit.reviewdb.client.AccountGroup.NameKey ( name ) ) ; }
private void afterTest ( ) throws java.lang.Exception { db.close ( ) ; sshSession.close ( ) ; if ( ( server ) != ( com.google.gerrit.acceptance.AbstractDaemonTest.commonServer ) ) { server.stop ( ) ; } }
com.google.gerrit.server.permissions.ChangeControl create ( com.google.gerrit.server.permissions.RefControl refControl , com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws com.google.gwtorm.server.OrmException { return create ( refControl , notesFactory.create ( db , project , changeId ) ) ; }
public void reAddExistingGpgKey ( ) throws java.lang.Exception { addExternalIdEmail ( admin , "test5@example.com" ) ; com.google.gerrit.gpg.testutil.TestKey key = com.google.gerrit.gpg.testutil.TestKeys.key5 ( ) ; java.lang.String id = key.getKeyIdString ( ) ; org.bouncycastle.openpgp.PGPPublicKey pk = key.getPublicKey ( ) ; com.google.gerrit.extensions.common.GpgKeyInfo info = addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 2 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 2 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; pk = org.bouncycastle.openpgp.PGPPublicKey.removeCertification ( pk , "foo:myId" ) ; info = addGpgKey ( com.google.gerrit.acceptance.api.accounts.AccountIT.armor ( pk ) ) . get ( id ) ; com.google.common.truth.Truth.assertThat ( info.userIds ) . hasSize ( 1 ) ; com.google.gerrit.acceptance.api.accounts.AccountIT.assertIteratorSize ( 1 , getOnlyKeyFromStore ( key ) . getUserIDs ( ) ) ; }
java.lang.Runnable signInCallback ( net.codemirror.lib.CodeMirror cm ) { return ( ) -> { java.lang.String token = host.getToken ( ) ; if ( cm.extras ( ) . hasActiveLine ( ) ) { token += "@" + ( getTokenSuffixForActiveLine ( cm ) ) ; } com.google.gerrit.client.Gerrit.doSignIn ( token ) ; } ; }
private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount ( com.google.gerrit.reviewdb.server.ReviewDb db , com.googlesource.gerrit.plugins.github.git.GitHubUser author ) throws com.google.gerrit.extensions.restapi.BadRequestException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.extensions.restapi.UnprocessableEntityException , com.google.gwtorm.server.OrmException , java.io.IOException { return getOrRegisterAccount ( db , author.getLogin ( ) , author.getName ( ) , author.getEmail ( ) ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config-project" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsProjectConfig.class ) ; get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config-global" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsGlobalConfig.class ) ; put ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config-global" ) . to ( com.googlesource.gerrit.plugins.lfs.PutLfsGlobalConfig.class ) ; }
public void onResize ( com.google.gwt.event.logical.shared.ResizeEvent event ) { resizeCodeMirror ( ) ; }
private static boolean isHEAD ( final org.spearce.jgit.lib.Ref ref ) { return Constants.HEAD.equals ( ref.getOrigName ( ) ) ; }
public java.lang.Long get ( ) { return provider.getOpenFileDescriptorCount ( ) ; }
protected com.google.gerrit.server.patch.PatchList getPatchList ( ) { if ( ( patchSet ) != null ) { return com.google.gerrit.server.util.FutureUtil.getOrNull ( args.patchListCache.get ( change , patchSet ) ) ; } return null ; }
public java.util.concurrent.Callable < java.util.List < com.google.gitiles.blame.Region > > newLoader ( com.google.gitiles.blame.BlameCacheImpl.Key key , org.eclipse.jgit.lib.Repository repo ) { return ( ) -> com.google.gitiles.blame.BlameCacheImpl.loadBlame ( key , repo ) ; }
public void testAppend_double ( ) { final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder b = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder ( ) ; org.junit.Assert.assertSame ( b , b.append ( 0.0 ) ) ; org.junit.Assert.assertEquals ( "0.0" , b.asString ( ) ) ; }
private void renameGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid , com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName , com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName ) throws java.lang.Exception { com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.forRename ( repo , groupUuid , oldName , newName ) ; commit ( groupNameNotes ) ; }
public com.google.gwtjsonrpc.client.VoidResult run ( com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { db.accountProjectWatches ( ) . update ( java.util.Collections.singleton ( watch ) ) ; com.google.gerrit.server.util.FutureUtil.waitFor ( accountProjectWatchCache.evictAsync ( watch.getKey ( ) ) ) ; return com.google.gwtjsonrpc.client.VoidResult.INSTANCE ; }
public com.google.gerrit.extensions.common.WebLinkInfo getBranchWebLink ( java.lang.String projectName , java.lang.String branchName ) { return new com.google.gerrit.extensions.common.WebLinkInfo ( name , myImageUrl , java.lang.String.format ( placeHolderUrlProjectBranch , projectName , branchName ) , com.google.gerrit.extensions.webui.WebLinkTarget.BLANK ) ; }
protected com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > enforceVisibility ( com.google.gerrit.index.query.Predicate < com.google.gerrit.server.project.ProjectData > pred ) { return new com.google.gerrit.index.query.AndSource ( pred , new com.google.gerrit.server.query.project.ProjectIsVisibleToPredicate ( permissionBackend , userProvider.get ( ) ) , start ) ; }
protected org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { try ( com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open ( ) ) { rebuild ( db , id ) ; } return null ; }
public void onSuccess ( com.google.gerrit.common.data.ChangeDetail result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( changeId ) ) ; hide ( ) ; }
public com.google.gerrit.extensions.common.AccountInfo setAssignee ( com.google.gerrit.extensions.api.changes.AssigneeInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply ( change , input ) ; } catch ( com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot set assignee" , e ) ; } }
public void createEmptyChange_InvalidStatus ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.MERGED ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "unsupported change status" ) ; }
protected static com.google.gerrit.common.Die die ( java.lang.String why , java.lang.Throwable cause ) { return new com.google.gerrit.common.Die ( why , cause ) ; }
public static com.google.gerrit.sshd.CommandName named ( final java.lang.String value ) { return new com.google.gerrit.sshd.AutoAnnotation_Commands_named ( value ) ; }
public static synchronized void resetWithClockStep ( long clockStep , java.util.concurrent.TimeUnit clockStepUnit ) { com.google.gerrit.testing.TestTimeUtil.clockMs = new java.util.concurrent.atomic.AtomicLong ( com.google.gerrit.testing.TestTimeUtil.START.toEpochMilli ( ) ) ; com.google.gerrit.testing.TestTimeUtil.setClockStep ( clockStep , clockStepUnit ) ; }
public boolean canForgeCommitter ( ) { if ( ( canForgeCommitter ) == null ) { canForgeCommitter = canPerform ( Permission.FORGE_COMMITTER ) ; } return canForgeCommitter ; }
public java.lang.String toString ( ) { if ( ( retryCount ) == 0 ) { return "push " + ( uri ) ; } return ( ( ( "(retry " + ( retryCount ) ) + ") " ) + "push " ) + ( uri ) ; }
private java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.git.MergeSuperSet.query ( queryProvider.get ( ) ) . byTopicOpen ( topic ) ; }
public static com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle create ( org.eclipse.jgit.revwalk.RevWalk walk , org.eclipse.jgit.lib.ObjectId id ) { return new com.google.gerrit.server.notedb.AutoValue_AbstractChangeNotes_LoadHandle ( walk , ( id != null ? id.copy ( ) : null ) ) ; }
private void addReviewerByEmailToReviewableChangeInReviewDb ( com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( notesMigration.readChanges ( ) ) . isFalse ( ) ; java.lang.String email = "addedbyemail@example.com" ; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; addReviewer ( adder , sc.changeId , sc.owner , email ) ; assertThat ( sender ) . notSent ( ) ; }
protected abstract com.google.gerrit.client.patches.AbstractPatchContentTable createContentTable ( ) ;
public void createDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.MethodNotAllowedException.class , "draft workflow is disabled" ) ; }
com.google.gerrit.httpd.raw.FontsServlet getFontsServlet ( @ com.google.inject.name.Named ( value = com.google.gerrit.httpd.raw.StaticModule.CACHE ) com.google.common.cache.Cache < java.nio.file.Path , com.google.gerrit.httpd.raw.ResourceServlet.Resource > cache ) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet ( cache , getPaths ( ) . buckOut ) ; }
public boolean isMatchable ( ) { for ( com.google.gerrit.index.query.Predicate < T > c : children ) { if ( ! ( c.isMatchable ( ) ) ) { return false ; } } return true ; }
public final native void on ( net.codemirror.lib.CodeMirror.ChangesHandler handler ) ;
public void onSuccess ( com.google.gerrit.client.account.Preferences prefs ) { com.google.gerrit.client.Gerrit.getUserAccount ( ) . setGeneralPreferences ( p ) ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; com.google.gerrit.client.Dispatcher.changeScreen2 = false ; enable ( true ) ; display ( prefs ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config-project" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsProjectConfig.class ) ; get ( com.google.gerrit.server.project.ProjectResource.PROJECT_KIND , "lfs:config-global" ) . to ( com.googlesource.gerrit.plugins.lfs.GetLfsGlobalConfig.class ) ; }
private static org.eclipse.jgit.transport.RemoteSession connect ( org.eclipse.jgit.transport.URIish uri ) throws org.eclipse.jgit.errors.TransportException { return org.eclipse.jgit.transport.SshSessionFactory.getInstance ( ) . getSession ( uri , null , FS.DETECTED , com.googlesource.gerrit.plugins.replication.ReplicationQueue.SSH_REMOTE_TIMEOUT ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { showAddKeyBlock ( true ) ; }
private void scheduleJob ( final com.google.gerrit.git.ChangeMergeQueue.MergeEntry e ) { if ( ! ( e.jobScheduled ) ) { e.jobScheduled = true ; workQueue.getDefaultQueue ( ) . schedule ( e , 0 , java.util.concurrent.TimeUnit.SECONDS ) ; } }
public void onRemoveByKeys ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId.Key > extIdKeys ) { }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , c ) . load ( ) ; }
void onEditAssignee ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { if ( canEdit ) { editAssignee ( suggestBox.getText ( ) ) ; } }
public org.apache.sshd.server.FileSystemView createFileSystemView ( org.apache.sshd.common.Session session ) throws java.io.IOException { return new org.apache.sshd.server.FileSystemView ( ) { @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( org.apache.sshd.server.SshFile baseDir , java.lang.String file ) { return null ; } @ java.lang.Override public org.apache.sshd.server.SshFile getFile ( java.lang.String file ) { return null ; } } ; }
public static com.google.gerrit.extensions.common.ApprovalInfo getApprovalInfo ( com.google.gerrit.reviewdb.client.Account.Id id , java.lang.Integer value , java.lang.String tag , java.sql.Timestamp date ) { com.google.gerrit.extensions.common.ApprovalInfo ai = new com.google.gerrit.extensions.common.ApprovalInfo ( id.get ( ) ) ; ai.value = value ; ai.date = date ; ai.tag = tag ; return ai ; }
com.google.gerrit.server.patch.PatchScriptFactory create ( com.google.gerrit.server.notedb.ChangeNotes notes , java.lang.String fileName , int parentNum , com.google.gerrit.reviewdb.client.PatchSet.Id patchSetB , com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs ) ;
public void close ( ) { com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination ( executor , java.lang.Long.MAX_VALUE , java.util.concurrent.TimeUnit.SECONDS ) ; try { openIndex.close ( ) ; } finally { closedIndex.close ( ) ; } }
java.util.Map < java.lang.String , java.lang.Object > toSoyData ( javax.servlet.http.HttpServletRequest req , org.eclipse.jgit.revwalk.RevCommit commit , com.google.gitiles.DateFormatter df ) throws java.io.IOException { return toSoyData ( req , commit , com.google.gitiles.CommitSoyData.DEFAULT_FIELDS , df ) ; }
protected void submitWithConflict ( java.lang.String changeId , java.lang.String expectedError ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , com.google.gerrit.extensions.restapi.ResourceConflictException.class , expectedError , true ) ; }
public int weigh ( K key , com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder < V > value ) { return impl.weigh ( key , value.value ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < com.google.gerrit.common.data.ChangeDetail > event ) { if ( isAttached ( ) ) { display ( event.getValue ( ) ) ; } }
private java.lang.String url ( com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r ) { return com.google.gerrit.common.PageLinks.toChange ( changeId , java.lang.String.valueOf ( r._number ( ) ) ) ; }
public void testEventSentThrowsException ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.FAILED , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EXCEPTION_MSG , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { }
abstract void onRefReplicatedToOneNode ( java.lang.String project , java.lang.String ref , org.eclipse.jgit.transport.URIish uri , com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status , org.eclipse.jgit.transport.RemoteRefUpdate.Status refStatus ) ;
public void newPatchSetByOwnerOnReviewableChangeToWip ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange ( ) ; pushTo ( sc , "refs/for/master%wip" , sc.owner ) ; assertThat ( sender ) . notSent ( ) ; }
protected boolean onSave ( org.eclipse.jgit.lib.CommitBuilder commit ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { if ( com.google.common.base.Strings.isNullOrEmpty ( commit.getMessage ( ) ) ) { commit.setMessage ( "Update default preferences\n" ) ; } saveConfig ( com.google.gerrit.server.account.Preferences.PREFERENCES_CONFIG , cfg ) ; return true ; }
public boolean apply ( java.lang.String file ) { return file.matches ( ( ( ( com.google.gerrit.acceptance.PushOneCommit.FILE_NAME ) + '|' ) + ( com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG ) ) ) ; }
public com.google.gwtorm.server.ResultSet < com.google.gerrit.reviewdb.client.ChangeMessage > byPatchSet ( com.google.gerrit.reviewdb.client.PatchSet.Id id ) { throw new java.lang.UnsupportedOperationException ( com.google.gerrit.reviewdb.server.DisabledChangesReviewDbWrapper.MSG ) ; }
public void testContinueFromAfterNewline ( ) { com.google.gerrit.client.diff.SideBySide2.EditIterator iter = new com.google.gerrit.client.diff.SideBySide2.EditIterator ( lines , 0 ) ; iter.advance ( 4 ) ; assertLineChsEqual ( net.codemirror.lib.LineCharacter.create ( 2 , 2 ) , iter.advance ( 6 ) ) ; }
public java.util.Collection < java.security.PublicKey > getHostKeys ( ) { return hostKeys ; }
public void preDisplay ( final java.util.List < com.google.gerrit.reviewdb.AccountExternalId > result ) { identites.display ( result ) ; }
static java.lang.String keyIdToString ( long keyId ) { return java.lang.String.format ( "%08X" , ( ( int ) ( keyId ) ) ) ; }
public void onProjectDeleted ( com.google.gerrit.extensions.events.ProjectDeletedListener.Event event ) { for ( org.eclipse.jgit.transport.URIish uri : getURIs ( new com.google.gerrit.reviewdb.client.Project.NameKey ( event.getProjectName ( ) ) , FilterType.PROJECT_DELETION ) ) { deleteProject ( uri ) ; } }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.client.Project.NameKey project , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config repoConfig , org.eclipse.jgit.lib.ObjectId prior , org.eclipse.jgit.lib.ObjectId next ) ;
public void onSuccess ( com.google.gerrit.client.groups.GroupInfo result ) { cb.onSuccess ( com.google.gerrit.client.rpc.Natives.arrayOf ( result ) ) ; }
public static void all ( com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.plugins.PluginMap > callback ) { new com.google.gerrit.client.rpc.RestApi ( "/plugins/" ) . addParameterTrue ( "all" ) . get ( com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren ( callback ) ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.Config cfg = readConfig ( com.google.gerrit.server.account.WatchConfig.WATCH_CONFIG ) ; projectWatches = com.google.gerrit.server.account.WatchConfig.parse ( accountId , cfg , this ) ; }
public java.util.List < com.googlesource.gerrit.plugins.manager.MenuEntry > getEntries ( ) { if ( ( loader.isRemoteAdminEnabled ( ) ) && ( config.canAdministerPlugins ( ) ) ) { return menuEntries ; } return java.util.Collections.emptyList ( ) ; }
public boolean canConnect ( com.google.gerrit.sshd.Type type , org.apache.sshd.common.SshdSocketAddress address , org.apache.sshd.common.session.Session session ) { return false ; }
void groupDetail ( com.google.gerrit.reviewdb.AccountGroup.Id groupId , com.google.gerrit.reviewdb.AccountGroup.UUID uuid , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.common.data.GroupDetail > callback ) ;
public java.lang.String getText ( ) { return null ; }
public < T extends com.google.gwt.core.client.JavaScriptObject > void post ( java.lang.String content , com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { post ( content , com.google.gerrit.client.rpc.RestApi.wrap ( cb ) ) ; }
private void assertCanAccess ( com.google.gerrit.server.permissions.ProjectControl u ) { boolean access = u.asForProject ( ) . testOrFalse ( ProjectPermission.ACCESS ) ; com.google.common.truth.Truth.assertThat ( access ) . named ( "can access" ) . isTrue ( ) ; }
protected java.net.SocketAddress getRemoteAddress ( ) { return remoteAddress ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { gotoSibling ( 1 ) ; }
public void run ( ) { fixScroll ( cmB ) ; }
public java.lang.String getLocalUser ( ) { if ( isScheme ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT ) ) { return getExternalId ( ) . substring ( com.google.gerrit.client.reviewdb.AccountExternalId.SCHEME_GERRIT.length ( ) ) ; } return null ; }
public static java.lang.String refsDraftCommentsPrefix ( com.google.gerrit.reviewdb.client.Change.Id changeId ) { return com.google.gerrit.reviewdb.client.RefNames.buildRefsPrefix ( com.google.gerrit.reviewdb.client.RefNames.REFS_DRAFT_COMMENTS , changeId.get ( ) ) . toString ( ) ; }
private AccountGroup.UUID toUUID ( com.google.gerrit.reviewdb.AccountGroup.Id id ) { return groupMap.get ( id ) . getUUID ( ) ; }
protected < K , V > com.google.gerrit.server.cache.UnnamedCacheBinding < K , V > core ( final com.google.inject.TypeLiteral < com.google.gerrit.server.cache.Cache < K , V > > type ) { return core ( com.google.inject.Key.get ( type ) , type ) ; }
public void upsertComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) { upsertDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; upsertPublishedComment ( comment ) ; } }
com.google.gwtorm.client.ResultSet < com.google.gerrit.reviewdb.PatchLineComment > publishedByChangeFile ( com.google.gerrit.reviewdb.Change.Id id , java.lang.String file ) throws com.google.gwtorm.client.OrmException ;
public void printTree ( final com.google.gerrit.server.util.TreeFormatter.TreeNode rootNode ) { printTree ( rootNode , 0 , true ) ; }
public boolean setTeamnamesForRepositoryRole ( java.lang.String role , java.util.List < java.lang.String > teamnames ) { return false ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( json.create ( options ) . format ( rsrc ) ) ; }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.bind ( binder ( ) , com.google.gerrit.common.ChangeListener.class ) . to ( com.googlesource.gerrit.plugins.reviewersbyblame.ChangeUpdatedListener.class ) ; factory ( ReviewersByBlame.Factory.class ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > evictAfterRenameAsync ( com.google.gerrit.reviewdb.AccountGroup.NameKey name ) { return byName.removeAsync ( name ) ; }
public void checkPassword ( java.lang.String pwd ) throws com.google.gerrit.server.auth.AuthException { if ( ! ( java.util.Objects.equals ( getPassword ( ) , pwd ) ) ) { throw new com.google.gerrit.server.auth.InvalidCredentialsException ( ) ; } }
public void onSuccess ( com.google.gerrit.client.diff.DiffInfo diffInfo ) { diffLinks = diffInfo.webLinks ( ) ; }
public void run ( ) { fixScroll ( cmB ) ; }
public void setTopic ( final java.lang.String topic ) { this . topic = topic.trim ( ) ; }
protected void configure ( ) { get ( com.google.gerrit.server.change.ChangeResource.CHANGE_KIND , "owners" ) . to ( com.googlesource.gerrit.plugins.findowners.GetOwners.class ) ; get ( com.google.gerrit.server.change.RevisionResource.REVISION_KIND , Config.PLUGIN_NAME ) . to ( com.googlesource.gerrit.plugins.findowners.Action.class ) ; }
public static java.util.Map < java.lang.String , org.eclipse.jgit.lib.Config > againstPreviousIndexVersion ( ) { java.util.List < java.lang.Integer > schemaVersions = com.google.gerrit.testing.IndexVersions.getWithoutLatest ( ChangeSchemaDefinitions.INSTANCE ) ; return com.google.gerrit.testing.IndexVersions.asConfigMap ( ChangeSchemaDefinitions.INSTANCE , schemaVersions , "againstIndexVersion" , com.google.gerrit.server.query.change.LuceneQueryChangesTest.defaultConfig ( ) ) ; }
public boolean isOwnerAnyRef ( ) { return ( canPerformOnAnyRef ( Permission.OWNER ) ) || ( getCurrentUser ( ) . isAdministrator ( ) ) ; }
void quickApprove ( com.google.gerrit.client.changes.ReviewInput quickApproveInput ) { in.mergeLabels ( quickApproveInput ) ; postReview ( ) ; }
public void run ( ) { if ( cm.vim ( ) . hasSearchHighlight ( ) ) { cm.vim ( ) . handleKey ( "n" ) ; } else { getChunkManager ( ) . diffChunkNav ( cm , Direction.NEXT ) . run ( ) ; } }
public void zeroStartLineResultsInInvalidRange ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 0 , 2 , 19 , 10 ) ; com.google.gerrit.extensions.common.testing.RangeSubject.assertThat ( range ) . isInvalid ( ) ; }
public WorkQueue.Executor createMergeabilityChecksExecutor ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config , com.google.gerrit.server.git.WorkQueue queues ) { int poolSize = config.getInt ( "changeMerge" , null , "threadPoolSize" , 1 ) ; return queues.createQueue ( poolSize , "MergeabilityChecks-Background" ) ; }
void downloadRequired ( ) { setRequired ( true ) ; download ( ) ; }
private static < K , V > com.google.common.cache.CacheBuilder < K , V > newCacheBuilder ( ) { return ( ( com.google.common.cache.CacheBuilder < K , V > ) ( com.google.common.cache.CacheBuilder.newBuilder ( ) ) ) ; }
protected void setDate ( java.sql.Timestamp when ) { header.setDate ( when ) ; }
public static com.google.gerrit.server.account.VersionedAccountPreferences forDefault ( ) { return new com.google.gerrit.server.account.VersionedAccountPreferences ( com.google.gerrit.reviewdb.client.RefNames.REFS_USER_DEFAULT ) ; }
public boolean apply ( java.nio.file.Path p ) { return ! ( p.getFileName ( ) . toString ( ) . endsWith ( ".disabled" ) ) ; }
void onReplace ( org.eclipse.jgit.lib.ObjectId oldNotesRev , org.eclipse.jgit.lib.ObjectId newNotesRev , com.google.gerrit.reviewdb.client.Account.Id accountId , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toRemove , java.util.Collection < com.google.gerrit.server.account.externalids.ExternalId > toAdd ) throws java.io.IOException ;
void addLabel ( final java.lang.String token ) { com.google.gerrit.server.util.LabelVote v = com.google.gerrit.server.util.LabelVote.parseWithEquals ( token ) ; com.google.gerrit.common.data.LabelType.checkName ( v.getLabel ( ) ) ; customLabels.put ( v.getLabel ( ) , v.getValue ( ) ) ; }
public void markReady ( boolean ready ) throws java.io.IOException { com.google.gerrit.index.IndexUtils.setReady ( sitePaths , indexName , schema.getVersion ( ) , ready ) ; }
public static com.google.gerrit.server.diff.ComparisonType againstParent ( int parentNum ) { return new com.google.gerrit.server.diff.ComparisonType ( parentNum , false ) ; }
public void addEventListener ( com.google.gerrit.common.EventListener listener , com.google.gerrit.server.CurrentUser user ) { listeners.put ( listener , new com.google.gerrit.common.ChangeHookRunner.EventListenerHolder ( listener , user ) ) ; }
public java.lang.Object getParameter ( java.lang.String name ) { java.lang.String value = config.getString ( pluginName , null , getParamName ( name ) ) ; return getParameterParser ( name ) . parse ( value ) ; }
public com.google.gerrit.index.FieldDef.Builder < T > stored ( ) { this . stored = true ; return this ; }
public void backupTimestampRefNameForBranch ( ) throws java.lang.Exception { java.lang.String name = com.googlesource.gerrit.plugins.refprotection.BackupRef.getTimestampBranch ( "refs/heads/master" ) ; java.lang.String expected_prefix = ( BackupRef.R_BACKUPS ) + "heads/master-" ; com.google.common.truth.Truth.assertThat ( name ) . startsWith ( expected_prefix ) ; }
public synchronized com.google.gerrit.server.account.AccountState getOrNull ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return byId.get ( accountId ) ; }
private void configureDefaults ( java.util.Map < java.lang.String , java.util.List < com.google.gerrit.common.data.PermissionRule > > out , com.google.gerrit.common.data.AccessSection section ) { com.google.gerrit.server.account.CapabilityCollection.configureDefault ( out , section , GlobalCapability.QUERY_LIMIT , systemGroupBackend.getGroup ( SystemGroupBackend.ANONYMOUS_USERS ) ) ; }
protected void configureServlets ( ) { filter ( "/" ) . through ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.class ) ; serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.container.HttpsClientSslCertLoginServlet.class ) ; }
public java.util.Collection < com.googlesource.gerrit.plugins.manager.repository.PluginInfo > load ( com.googlesource.gerrit.plugins.manager.PluginsCentralLoader.ListKey all ) throws java.lang.Exception { return repository.list ( com.googlesource.gerrit.plugins.manager.PluginsCentralLoader.GERRIT_VERSION ) ; }
private boolean isNewRef ( com.google.gerrit.server.events.RefUpdatedEvent event ) { return event.refUpdate.get ( ) . oldRev.equals ( org.eclipse.jgit.lib.ObjectId.zeroId ( ) . getName ( ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { enable ( true ) ; super . onFailure ( caught ) ; }
private boolean canSkipRef ( com.google.gerrit.server.config.PluginConfig config , java.lang.String ref ) { return matchCriteria ( config , "skipRef" , ref , true , true ) ; }
public com.googlesource.gerrit.plugins.github.git.GHHook createWebHook ( java.net.URL url ) throws java.io.IOException { return ghRepository.createWebHook ( url ) ; }
private static com.google.gerrit.server.account.AccountState newState ( com.google.gerrit.reviewdb.client.Account account ) { return new com.google.gerrit.server.account.AccountState ( account , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountGroup.UUID > of ( ) , com.google.common.collect.ImmutableSet.< com.google.gerrit.reviewdb.client.AccountExternalId > of ( ) , new java.util.HashMap < com.google.gerrit.server.account.WatchConfig.ProjectWatchKey , java.util.Set < com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType > > ( ) ) ; }
public static void initLibrary ( com.google.gwt.user.client.rpc.AsyncCallback < java.lang.Void > cb ) { net.codemirror.lib.Loader.initLibrary ( cb ) ; }
public void rangeOverMultipleLinesWithSmallerEndCharacterIsValid ( ) { com.google.gerrit.extensions.client.Comment.Range range = createRange ( 13 , 31 , 19 , 10 ) ; com.google.gerrit.extensions.client.testing.RangeSubject.assertThat ( range ) . isValid ( ) ; }
public boolean canExpand ( final java.lang.String user ) { return ! ( user.contains ( " " ) ) ; }
private static java.lang.String textFooterForChange ( java.lang.String changeId , java.lang.String timestamp ) { return ( ( ( ( ( ( "Gerrit-Change-Id: " + changeId ) + "\n" ) + "Gerrit-PatchSet: 1\n" ) + "Gerrit-MessageType: comment\n" ) + "Gerrit-Comment-Date: " ) + timestamp ) + " \n" ; }
public java.lang.String resourcePath ( ) { if ( ( resourcePath ) == null ) { resourcePath = "/projects/" + ( getProjectState ( ) . getName ( ) ) ; } return resourcePath ; }
public void onBrowserEvent ( final com.google.gwt.user.client.Event event ) { if ( ( ( com.google.gwt.user.client.DOM.eventGetType ( event ) ) == ( com.google.gwt.user.client.Event.ONCLICK ) ) && ( com.google.gerrit.client.ui.LinkMenuItem.impl.handleAsClick ( event ) ) ) { com.google.gwt.user.client.DOM.eventPreventDefault ( event ) ; go ( ) ; } }
static boolean needsTypeParameter ( final com.google.gwt.core.ext.typeinfo.JType ft ) { return ( ( ft.isArray ( ) ) != null ) || ( ( ( ft.isParameterized ( ) ) != null ) && ( com.google.gwtjsonrpc.rebind.SerializerCreator.parameterizedSerializers.containsKey ( ft.getQualifiedSourceName ( ) ) ) ) ; }
public void addItem ( final com.google.gerrit.client.ui.LinkMenuItem i ) { i.setMenuBar ( this ) ; add ( i ) ; }
private static com.google.gerrit.server.change.ConsistencyChecker.Result create ( com.google.gerrit.server.project.ChangeControl ctl , java.util.List < com.google.gerrit.extensions.common.ProblemInfo > problems ) { return new com.google.gerrit.server.change.AutoValue_ConsistencyChecker_Result ( ctl.getId ( ) , ctl.getChange ( ) , problems ) ; }
public void listBranches ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { listBranchesFactory.create ( projectName ) . to ( callback ) ; }
public com.google.gerrit.server.data.TrackingIdAttribute asTrackingIdAttribute ( com.google.gerrit.reviewdb.client.TrackingId id ) { com.google.gerrit.server.data.TrackingIdAttribute a = new com.google.gerrit.server.data.TrackingIdAttribute ( ) ; a.system = id.getSystem ( ) ; a.id = id.getTrackingId ( ) ; return a ; }
private void execute ( final java.lang.String sql ) throws com.google.gwtorm.client.OrmException { executor.execute ( sql ) ; }
public void tearDown ( ) throws java.lang.Exception { com.google.gerrit.testing.InMemoryDatabase.drop ( db ) ; }
public java.lang.String getBranch ( ) { return clean ( branch ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { hide ( ) ; }
public void onSuccess ( final com.google.gerrit.client.changes.PatchSetPublishDetail result ) { send.setEnabled ( true ) ; display ( result ) ; }
void deleteRight ( com.google.gerrit.client.reviewdb.Project.NameKey projectName , java.util.Set < com.google.gerrit.client.reviewdb.ProjectRight.Key > ids , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) ;
public void evictAll ( ) { byName.removeAll ( ) ; }
private org.eclipse.jgit.lib.ObjectId getDestRef ( com.google.gerrit.server.notedb.ChangeNotes notes ) throws java.lang.Exception { return testRepo.getRepository ( ) . exactRef ( notes.getChange ( ) . getDest ( ) . get ( ) ) . getObjectId ( ) ; }
private com.google.gerrit.server.project.ProjectConfig loadAllProjects ( ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allProjects ) ) { com.google.gerrit.server.project.ProjectConfig pc = new com.google.gerrit.server.project.ProjectConfig ( allProjects ) ; pc.load ( repo ) ; return pc ; } }
static void markPrivate ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id id , com.google.gwt.user.client.ui.Button ... draftButtons ) { com.google.gerrit.client.changes.ChangeApi.markPrivate ( project.get ( ) , id.get ( ) , com.google.gerrit.client.change.ChangeActions.cs ( project , id , draftButtons ) ) ; }
void onPublishEdit ( @ java.lang.SuppressWarnings ( value = "unused" ) com.google.gwt.event.dom.client.ClickEvent e ) { com.google.gerrit.client.change.EditActions.publishEdit ( changeId , publishEdit , rebaseEdit , deleteEdit ) ; }
public boolean isRepeatable ( ) { return repeatable ; }
public static boolean isOAuthLogin ( javax.servlet.http.HttpServletRequest request ) { java.lang.String requestUri = request.getRequestURI ( ) ; return ( ( requestUri.indexOf ( GitHubOAuthConfig.GERRIT_LOGIN ) ) >= 0 ) && ( ( request.getParameter ( com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.FINAL_URL_PARAM ) ) == null ) ; }
public java.lang.String toString ( ) { return com.google.common.base.MoreObjects.toStringHelper ( this ) . add ( "user" , user ) . add ( "repositoryName" , repositoryName ) . add ( "objectId" , objectId ) . toString ( ) ; }
public com.google.gerrit.reviewdb.PatchSetApproval getChangeApproval ( com.google.gerrit.reviewdb.ApprovalCategory.Id id ) { for ( com.google.gerrit.reviewdb.PatchSetApproval a : given ) { if ( a.getCategoryId ( ) . equals ( id ) ) { return a ; } } return null ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , org.eclipse.jgit.transport.ReceiveCommand.Type type , com.google.gerrit.reviewdb.client.Account updater ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , type , util.accountInfo ( updater ) ) ; }
public void blockOwnerProject ( ) { com.google.gerrit.server.project.testing.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.testing.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.testing.Util.block ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.testing.Util.DEVS , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
private java.util.List < com.google.gerrit.reviewdb.PatchLineComment > drafts ( ) throws com.google.gwtorm.client.OrmException { return db.patchComments ( ) . draftByPatchSet ( patchSetId , user.getAccountId ( ) ) . toList ( ) ; }
public void onCommentAdded ( com.google.gerrit.acceptance.server.event.Event event ) { lastCommentAddedEvent = event ; }
protected com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.testutil.TestChanges.newUpdate ( injector , repoManager , com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION , c , allUsers , user ) ; }
public void createDraftChangeWhenDraftsNotAllowed ( ) throws java.lang.Exception { com.google.common.truth.TruthJUnit.assume ( ) . that ( isAllowDrafts ( ) ) . isFalse ( ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo ( "refs/drafts/master" ) ; r.assertErrorStatus ( ) ; }
private static com.google.gwtexpui.safehtml.client.SafeHtml expandTabs ( com.google.gwtexpui.safehtml.client.SafeHtml src ) { return src.replaceAll ( "\t" , "<span title=\"Visual Tab\" class=\"gerrit-visualtab\"> </span>\t" ) ; }
private boolean isGenAvailableNowForCurrentSearcher ( ) { try { return reopenThread.waitForGeneration ( gen , 0 ) ; } catch ( java.lang.InterruptedException e ) { com.google.gerrit.lucene.AbstractLuceneIndex.log.warn ( "Interrupted waiting for searcher generation" , e ) ; return false ; } }
private com.google.gerrit.extensions.common.ChangeInfo detailedChange ( java.lang.String changeId ) throws java.lang.Exception { return gApi.changes ( ) . id ( changeId ) . get ( com.google.gerrit.extensions.client.ListChangesOption.DETAILED_LABELS , com.google.gerrit.extensions.client.ListChangesOption.CURRENT_REVISION , com.google.gerrit.extensions.client.ListChangesOption.CURRENT_COMMIT ) ; }
public void setVisible ( final boolean show ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( show ) ; impl.visible ( show ) ; super . setVisible ( show ) ; }
private void initMacs ( final org.spearce.jgit.lib.Config cfg ) { setMacFactories ( com.google.gerrit.server.ssh.GerritSshDaemon.filter ( cfg , "mac" , new org.apache.sshd.common.mac.HMACMD5.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA1.Factory ( ) , new org.apache.sshd.common.mac.HMACMD596.Factory ( ) , new org.apache.sshd.common.mac.HMACSHA196.Factory ( ) ) ) ; }
public void invalidStrategy ( ) throws java.lang.Exception { changeInTwoBranches ( "branchA" , "a.txt" , "branchB" , "b.txt" ) ; com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput ( "branchA" , "branchB" , "octopus" ) ; assertCreateFails ( in , com.google.gerrit.extensions.restapi.BadRequestException.class , "invalid merge strategy: octopus" ) ; }
private void initSite ( ) throws java.lang.Exception { com.google.gerrit.acceptance.pgm.MigrateToNoteDbIT.runGerrit ( "init" , "-d" , sitePath , "--batch" , "--no-auto-start" , "--skip-plugins" , "--show-stack-trace" ) ; }
private boolean groupsInNoteDb ( ) { return groupsMigration.writeToNoteDb ( ) ; }
public org.scribe.oauth.OAuthService createService ( org.scribe.model.OAuthConfig config ) { return new com.googlesource.gerrit.plugins.oauth.GitLabApi.GitLabOAuthService ( this , config ) ; }
public com.google.gerrit.index.query.Predicate < T > parse ( java.lang.String query ) throws com.google.gerrit.index.query.QueryParseException { if ( com.google.common.base.Strings.isNullOrEmpty ( query ) ) { throw new com.google.gerrit.index.query.QueryParseException ( "query is empty" ) ; } return toPredicate ( com.google.gerrit.index.query.QueryParser.parse ( query ) ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.project.ProjectResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get ( ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.HttpResponse < com.google.gerrit.client.rpc.NativeString > fc ) { content = fc ; if ( prefs.syntaxHighlighting ( ) ) { injectMode ( fc.getContentType ( ) , modeCallback ) ; } else { modeCallback.onSuccess ( null ) ; } }
protected com.google.gerrit.acceptance.RestResponse execute ( org.apache.http.client.fluent.Request request ) throws java.io.IOException { return new com.google.gerrit.acceptance.RestResponse ( executor.execute ( request ) . returnResponse ( ) ) ; }
public static void addSignOutHandler ( final com.google.gerrit.client.SignOutHandler l ) { if ( ! ( com.google.gerrit.client.Gerrit.signOutHandlers.contains ( l ) ) ) { com.google.gerrit.client.Gerrit.signOutHandlers.add ( l ) ; } }
public static java.util.Optional < com.google.gerrit.server.config.ScheduleConfig.Schedule > createSchedule ( org.eclipse.jgit.lib.Config config , java.lang.String section ) { return com.google.gerrit.server.config.ScheduleConfig.builder ( config , section ) . buildSchedule ( ) ; }
public void noNotificationForChangeThatIsTurnedWipForWatchersInNotifyConfig ( ) throws java.lang.Exception { com.google.gerrit.server.mail.Address addr = new com.google.gerrit.server.mail.Address ( "Watcher" , "watcher@example.com" ) ; com.google.gerrit.server.git.NotifyConfig nc = new com.google.gerrit.server.git.NotifyConfig ( ) ; nc.addEmail ( addr ) ; nc.setName ( "team" ) ; nc.setHeader ( NotifyConfig.Header.TO ) ; nc.setTypes ( java.util.EnumSet.of ( NotifyType.NEW_PATCHSETS ) ) ; com.google.gerrit.server.project.ProjectConfig cfg = projectCache.checkedGet ( project ) . getConfig ( ) ; cfg.putNotifyConfig ( "team" , nc ) ; saveProjectConfig ( project , cfg ) ; com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a1" ) . to ( "refs/for/master" ) ; r.assertOkStatus ( ) ; sender.clear ( ) ; r = pushFactory.create ( db , admin.getIdent ( ) , testRepo , "subject" , "a" , "a2" , r.getChangeId ( ) ) . to ( "refs/for/master%wip" ) ; r.assertOkStatus ( ) ; com.google.common.truth.Truth.assertThat ( sender.getMessages ( ) ) . isEmpty ( ) ; }
private void padLineNumberForSideB ( final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m ) { m.openTd ( ) ; m.setStyleName ( Gerrit.RESOURCES.css ( ) . lineNumber ( ) ) ; m.closeTd ( ) ; }
public void onSuccess ( com.google.gerrit.client.changes.ChangeInfo result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( id ) ) ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { toggleShowIntraline ( ) ; }
protected void configure ( ) { factory ( CreateCodeReviewNotes.Factory.class ) ; factory ( NotesBranchUtil.Factory.class ) ; }
public void display ( final com.google.gerrit.reviewdb.client.Patch.Key k , final com.google.gerrit.reviewdb.client.PatchSet.Id a , final com.google.gerrit.reviewdb.client.PatchSet.Id b , final com.google.gerrit.common.data.PatchScript s , final com.google.gerrit.common.data.PatchSetDetail d ) { patchKey = k ; idSideA = a ; idSideB = b ; render ( s , d ) ; }
public com.google.gerrit.extensions.api.projects.BranchApi create ( com.google.gerrit.extensions.api.projects.BranchInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { createBranchFactory.create ( ref ) . apply ( project , input ) ; return this ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "Cannot create branch" , e ) ; } }
public void start ( final org.apache.sshd.server.Environment env ) throws java.io.IOException { err.write ( org.eclipse.jgit.lib.Constants.encodeASCII ( "gerrit: no shell available\n" ) ) ; in.close ( ) ; out.close ( ) ; err.close ( ) ; exit.onExit ( 127 ) ; }
public boolean canPublish ( final com.google.gerrit.reviewdb.ReviewDb db ) throws com.google.gwtorm.client.OrmException { return ( ( ( change.getStatus ( ) ) == ( Change.Status.DRAFT ) ) && ( isOwner ( ) ) ) && ( isVisible ( db ) ) ; }
java.util.List < com.googlesource.gerrit.plugins.replication.Destination > getDestinations ( com.googlesource.gerrit.plugins.replication.ReplicationConfig.FilterType filterType ) ;
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( id.getParentKey ( ) ) ) ; hide ( ) ; }
public com.google.gwtjsonrpc.common.VoidResult fromJson ( final java.lang.Object o ) { return com.google.gwtjsonrpc.common.VoidResult.INSTANCE ; }
protected java.lang.Object getRowItemKey ( final com.google.gerrit.client.info.ChangeInfo item ) { return item.legacyId ( ) ; }
private void assertCannotSubmit ( java.lang.String ref , com.google.gerrit.server.permissions.ProjectControl u ) { com.google.common.truth.Truth.assertThat ( u.controlForRef ( ref ) . canSubmit ( false ) ) . named ( ( "can submit " + ref ) ) . isFalse ( ) ; }
public com.googlecode.prolog_cafe.lang.NumberTerm shiftLeft ( com.googlecode.prolog_cafe.lang.NumberTerm t ) { if ( t instanceof com.googlecode.prolog_cafe.lang.DoubleTerm ) throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException ( "integer" , t ) ; return new com.googlecode.prolog_cafe.lang.IntegerTerm ( ( ( this . val ) << ( t.intValue ( ) ) ) ) ; }
private java.lang.String getSortValue ( ) { return ( account ) != null ? com.google.common.base.MoreObjects.firstNonNull ( account.email , com.google.common.base.Strings.nullToEmpty ( account.name ) ) : com.google.common.base.Strings.nullToEmpty ( group.name ) ; }
void set ( com.google.gerrit.client.info.ChangeInfo info ) { this . changeId = info.legacyId ( ) ; display ( info ) ; reviewerSuggestOracle.setChange ( changeId ) ; openForm.setVisible ( com.google.gerrit.client.Gerrit.isSignedIn ( ) ) ; }
public void onKeyDown ( final com.google.gwt.event.dom.client.KeyDownEvent event ) { if ( ( event.getNativeKeyCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE ) ) { hide ( ) ; } }
public void testFollowAnotherBranch ( ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject ( "a" ) ; org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config ( ) ; cfg.fromText ( ( ( ( ( "" + ( ( "[submodule \"a\"]\n" + "path = a\n" ) + "url = ssh://localhost/" ) ) + ( p.get ( ) ) ) + "\n" ) + "branch = anotherbranch\n" ) ) ; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey ( new com.google.gerrit.reviewdb.client.Project.NameKey ( "project" ) , "master" ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > res = new com.google.gerrit.server.util.SubmoduleSectionParser ( projectCache , cfg , com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER , targetBranch ) . parseAllSections ( ) ; java.util.Set < com.google.gerrit.reviewdb.client.SubmoduleSubscription > expected = com.google.common.collect.Sets.newHashSet ( new com.google.gerrit.reviewdb.client.SubmoduleSubscription ( targetBranch , new com.google.gerrit.reviewdb.client.Branch.NameKey ( p , "anotherbranch" ) , "a" ) ) ; com.google.common.truth.Truth.assertThat ( res ) . containsExactlyElementsIn ( expected ) ; }
private java.lang.String getReplyCommentName ( ) { return "savedReplyComment~" + ( com.google.gerrit.common.PageLinks.toChangeId ( project , changeId ) ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > delete ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
protected com.google.gerrit.client.reviewdb.Project getProject ( ) { final com.google.gerrit.server.project.ProjectState r ; r = projectCache.get ( change.getDest ( ) . getParentKey ( ) ) ; return r != null ? r.getProject ( ) : null ; }
public void executeParseCommand ( ) throws java.lang.Exception { parseCommandLine ( ) ; }
void merge ( com.google.gerrit.server.git.MergeOp.Factory mof , com.google.gerrit.reviewdb.Branch.NameKey branch ) ;
public com.googlesource.gerrit.plugins.github.oauth.GitHubLogin get ( javax.servlet.http.HttpServletRequest request ) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin login = super . get ( request ) ; login.initOAuthCookie ( request ) ; return login ; }
protected org.apache.wicket.request.IRequestCodingStrategy newRequestCodingStrategy ( ) { return new com.googlesource.gerrit.plugins.gitblit.app.StaticCodingStrategy ( "summary/" , "project/" ) ; }
private void assertProblems ( org.bouncycastle.openpgp.PGPPublicKey k , java.lang.String ... expected ) throws java.lang.Exception { com.google.gerrit.gpg.CheckResult result = new com.google.gerrit.gpg.PublicKeyChecker ( ) . setStore ( store ) . check ( k ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
public final java.util.Set < java.lang.String > permitted_labels ( ) { return com.google.gerrit.client.rpc.Natives.keys ( _permitted_labels ( ) ) ; }
void audit ( com.google.gerrit.sshd.SshScope.Context ctx , java.lang.Object result , com.google.gerrit.sshd.DispatchCommand cmd ) { audit ( ctx , result , extractWhat ( cmd ) , extractParameters ( cmd ) ) ; }
public void addReviewerToWipChangeInNoteDbNotifyAllSingly ( ) throws java.lang.Exception { addReviewerToWipChangeInNoteDbNotifyAll ( singly ( ) ) ; }
static com.googlesource.gerrit.plugins.serviceuser.client.ConfigInfo create ( ) { com.googlesource.gerrit.plugins.serviceuser.client.ConfigInfo g = ( ( com.googlesource.gerrit.plugins.serviceuser.client.ConfigInfo ) ( createObject ( ) ) ) ; return g ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { if ( mySubname.equals ( subname ) ) { display ( result ) ; } }
public java.nio.file.FileVisitResult preVisitDirectory ( java.nio.file.Path dir , java.nio.file.attribute.BasicFileAttributes attrs ) throws java.io.IOException { if ( ( ! ( dir.equals ( startFolder ) ) ) && ( isRepo ( dir ) ) ) { addProject ( dir ) ; return java.nio.file.FileVisitResult.SKIP_SUBTREE ; } return java.nio.file.FileVisitResult.CONTINUE ; }
public void setGroups ( java.util.List < java.lang.String > groups ) { if ( groups == null ) { groups = java.util.Collections.emptyList ( ) ; } this . groups = com.google.gerrit.reviewdb.client.PatchSet.joinGroups ( groups ) ; }
protected void loadDefaults ( ) { comments = com.google.common.collect.ImmutableListMultimap.of ( ) ; }
public void setContentType ( java.lang.String type ) { headers.removeAll ( com.google.common.net.HttpHeaders.CONTENT_TYPE ) ; headers.put ( com.google.common.net.HttpHeaders.CONTENT_TYPE , type ) ; }
protected void preDisplay ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { enableForm ( true ) ; saveName.setEnabled ( false ) ; saveOwner.setEnabled ( false ) ; saveDesc.setEnabled ( false ) ; display ( result ) ; }
public java.lang.String getPathPart ( ) { return path ; }
boolean canRenderEntireFile ( com.google.gerrit.client.account.DiffPreferences prefs ) { return ( ( fileSize.compareTo ( com.google.gerrit.client.diff.SideBySide.FileSize.HUGE ) ) < 0 ) || ( ( ( prefs.context ( ) ) != ( com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT ) ) && ( ( prefs.context ( ) ) < 100 ) ) ; }
void doLinkIdentity ( ) { final com.google.gerrit.client.SignInDialog d = new com.google.gerrit.client.SignInDialog ( SignInDialog.Mode.LINK_IDENTIY ) ; d.center ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { event.preventDefault ( ) ; event.stopPropagation ( ) ; select ( ) ; }
private void postLoad ( ) { if ( ( haveAccount ) && ( haveEmails ) ) { updateEmailList ( ) ; registerNewEmail.setEnabled ( true ) ; save.setEnabled ( false ) ; onEditEnabler.updateOriginalValue ( nameTxt ) ; } display ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.config.GerritOptions.class ) . toInstance ( new com.google.gerrit.server.config.GerritOptions ( config , false , false , false ) ) ; }
private final native void downloadScheme0 ( java.lang.String n ) ;
int getRawOldAccountId ( ) { return oldAccountId.get ( ) ; }
public long getHead ( ) throws java.io.IOException { return cachedHead.spinGet ( com.googlesource.gerrit.plugins.events.fsstore.FsStore.MAX_GET_SPINS ) ; }
private java.lang.String href ( java.lang.String url ) { if ( com.google.gitiles.doc.MarkdownUtil.isAbsolutePathToMarkdown ( url ) ) { return com.google.gitiles.GitilesView.doc ( ) . copyFrom ( view ) . setPathPart ( url ) . build ( ) . toUrl ( ) ; } return url ; }
public void test ( ) throws java.lang.Exception { java.lang.String [ ] invalidFilenamePattern = new java.lang.String [ ] { "\\[|\\]|\\*|#" , "[%:@]" } ; org.eclipse.jgit.revwalk.RevCommit c = makeCommit ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.InvalidFilenameValidator.performValidation ( repo , c , invalidFilenamePattern ) ; java.util.Set < java.lang.String > expected = new java.util.HashSet < > ( ) ; for ( java.lang.String filenames : getInvalidFilenames ( ) ) { expected.add ( ( "ERROR: invalid characters found in filename: " + filenames ) ) ; } com.google.common.truth.Truth.assertThat ( com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages ( m ) ) . containsExactlyElementsIn ( expected ) ; }
public void execute ( java.lang.String issue , com.googlesource.gerrit.plugins.hooks.workflow.ActionRequest actionRequest ) { try { its.performAction ( issue , actionRequest.getUnparsed ( ) ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.hooks.workflow.ActionExecutor.log.error ( ( "Error while executing action " + actionRequest ) , e ) ; } }
public void evaluate ( ) throws java.lang.Throwable { try { beforeTest ( description ) ; base.evaluate ( ) ; } finally { afterTest ( ) ; } }
com.google.gerrit.extensions.common.WebLinkInfo getFileWebLink ( java.lang.String projectName , java.lang.String revision , java.lang.String fileName ) ;
protected void updateMessageID ( ) throws javax.mail.MessagingException { if ( ( messageID ) != null ) { super . setHeader ( com.google.gerrit.server.mail.MimeMessage.MESSAGE_ID , messageID ) ; } else { super . updateMessageID ( ) ; } }
protected void configure ( ) { com.google.gerrit.extensions.registration.DynamicSet.setOf ( binder ( ) , com.google.gerrit.rules.PredicateProvider.class ) ; factory ( PrologEnvironment.Factory.class ) ; }
private void index ( com.google.gerrit.reviewdb.client.AccountGroup group ) throws java.io.IOException { for ( com.google.gerrit.server.index.group.GroupIndex groupIndex : indexCollection.getWriteIndexes ( ) ) { groupIndex.replace ( group ) ; } }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { final boolean isReviewed = ! ( reviewedPanels.getValue ( ) ) ; reviewedPanels.setValue ( isReviewed ) ; reviewedPanels.setReviewedByCurrentUser ( isReviewed ) ; }
public void setIntHeader ( java.lang.String name , int value ) { headers.removeAll ( name ) ; addIntHeader ( name , value ) ; }
public void fire ( com.google.gerrit.reviewdb.client.Project.NameKey project , org.eclipse.jgit.lib.RefUpdate refUpdate , com.google.gerrit.extensions.common.AccountInfo updater ) { fire ( project , refUpdate.getName ( ) , refUpdate.getOldObjectId ( ) , refUpdate.getNewObjectId ( ) , ReceiveCommand.Type.UPDATE , updater ) ; }
public static com.google.gerrit.client.rpc.RestApi reviewer ( int id , java.lang.String reviewer ) { return com.google.gerrit.client.changes.ChangeApi.change ( id ) . view ( "reviewers" ) . id ( reviewer ) ; }
public boolean allRefsAreVisible ( ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ ) ) ; }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.diff.Unified ( baseId , id.getParentKey ( ) , id.get ( ) , side , line ) ) ; }
public com.google.gerrit.reviewdb.client.Change getChange ( ) { com.google.common.base.Preconditions.checkState ( ( ( change ) != null ) , "getChange() only valid after executing update" ) ; return change ; }
private java.lang.ProcessBuilder newBuildProcess ( com.google.gerrit.httpd.raw.BazelBuild.Label label ) { return new java.lang.ProcessBuilder ( "bazel" , "build" , label.fullName ( ) ) ; }
public void unblockNoForce ( ) { com.google.gerrit.server.project.testing.Util.block ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.testing.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.project.testing.Util.DEVS , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl u = user ( local , com.google.gerrit.server.project.testing.Util.DEVS ) ; assertCanUpdate ( "refs/heads/master" , u ) ; }
public com.google.gerrit.server.change.ChangeResource parse ( com.google.gerrit.server.project.ChangeControl control ) { return new com.google.gerrit.server.change.ChangeResource ( control , rebaseChange ) ; }
public void setUserAccountId ( com.google.gerrit.reviewdb.client.Account.Id id , com.google.gerrit.server.account.AuthMethod method ) { key = new com.google.gerrit.httpd.WebSessionManager.Key ( ( "id:" + id ) ) ; val = new com.google.gerrit.httpd.WebSessionManager.Val ( id , 0 , false , null , "" , 0 ) ; authMethod = method ; }
public void deleteReviewerFromReviewableChangeByOwnerCcingSelfNotifyNone ( ) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChangeWithExtraReviewer ( ) ; setEmailStrategy ( sc.owner , EmailStrategy.CC_ON_OWN_COMMENTS ) ; removeReviewer ( sc , extraReviewer , NotifyHandling.NONE ) ; assertThat ( sender ) . notSent ( ) ; }
private static java.lang.String getUrl ( java.lang.String baseUrl , java.lang.String path ) throws java.net.MalformedURLException { return new java.net.URL ( new java.net.URL ( baseUrl ) , path ) . toExternalForm ( ) ; }
public void evictMembersOf ( com.google.gerrit.reviewdb.client.AccountGroup.UUID groupId ) ;
public void onSuccess ( com.google.gerrit.reviewdb.client.Account result ) { registerNewEmail.setEnabled ( true ) ; onSaveSuccess ( com.google.gerrit.client.FormatUtil.asInfo ( result ) ) ; if ( onSave != null ) { onSave.onSuccess ( result ) ; } }
abstract java.lang.String getLineNumberClassName ( ) ;
private static com.google.gerrit.server.index.QueryOptions options ( int start , int limit ) { return com.google.gerrit.server.index.change.IndexedChangeQuery.createOptions ( com.google.gerrit.server.index.change.ChangeIndexRewriterTest.CONFIG , start , limit , com.google.common.collect.ImmutableSet.< java.lang.String > of ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( formatter , project , resource , revId , metaConfigRevId , parentsHash ) ; }
public com.google.gerrit.reviewdb.client.Change reloadChange ( ) throws com.google.gwtorm.server.OrmException { change = db.changes ( ) . get ( legacyId ) ; if ( ( change ) == null ) { throw new com.google.gwtorm.server.OrmException ( ( "Unable to load change " + ( legacyId ) ) ) ; } return change ; }
public com.google.gerrit.extensions.api.changes.AddReviewerResult addReviewer ( com.google.gerrit.extensions.api.changes.AddReviewerInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return postReviewers.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot add change reviewer" , e ) ; } }
public com.google.gerrit.extensions.api.changes.FileApi file ( java.lang.String path ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return fileApi.create ( files.parse ( revision , com.google.gerrit.extensions.restapi.IdString.fromDecoded ( path ) ) ) ; } catch ( java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot retrieve file" , e ) ; } }
public boolean match ( final com.google.gerrit.server.query.change.ChangeData object ) throws com.google.gwtorm.server.OrmException { return ! ( args.commentsUtil.draftByChangeAuthor ( args.db.get ( ) , object.notes ( ) , accountId ) . isEmpty ( ) ) ; }
public com.google.gerrit.index.project.ProjectData toProjectData ( ) { return new com.google.gerrit.index.project.ProjectData ( getProject ( ) , parents ( ) . transform ( ( s ) -> s.getProject ( ) . getNameKey ( ) ) ) ; }
public static org.eclipse.jgit.api.Git cloneProject ( java.lang.String url ) throws java.io.IOException , org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.GitUtil.cloneProject ( url , true ) ; }
public void testCUSTOM_NullUser ( ) { setFrom ( "A ${user} B <my.server@email.address>" ) ; org.easymock.EasyMock.replay ( accountCache ) ; final com.google.gerrit.server.mail.Address r = create ( ) . from ( null ) ; com.google.common.truth.Truth.assertThat ( r ) . isNotNull ( ) ; com.google.common.truth.Truth.assertThat ( r.name ) . isEqualTo ( ident.getName ( ) ) ; com.google.common.truth.Truth.assertThat ( r.email ) . isEqualTo ( "my.server@email.address" ) ; org.easymock.EasyMock.verify ( accountCache ) ; }
public java.lang.String apply ( com.google.gerrit.server.account.GetSshKeys.SshKeyInfo keyInfo ) { return org.apache.commons.lang.StringUtils.substringBeforeLast ( keyInfo.sshPublicKey , " " ) ; }
public void onFailure ( java.lang.Throwable caught ) { failure ( this , caught ) ; }
protected org.eclipse.jgit.lib.ObjectInserter delegate ( ) { return delegate ; }
java.lang.String getRemoteDisplayname ( javax.servlet.http.HttpServletRequest req ) { if ( ( displaynameHeader ) != null ) { java.lang.String raw = req.getHeader ( displaynameHeader ) ; return com.google.common.base.Strings.emptyToNull ( new java.lang.String ( raw.getBytes ( java.nio.charset.StandardCharsets.ISO_8859_1 ) , java.nio.charset.StandardCharsets.UTF_8 ) ) ; } return null ; }
public com.googlesource.gerrit.plugins.its.phabricator.conduit.results.ManiphestEdit maniphestEdit ( int taskId , java.lang.Iterable < java.lang.String > projects , java.lang.String action ) throws com.googlesource.gerrit.plugins.its.phabricator.conduit.ConduitException { return maniphestEdit ( taskId , null , projects , action ) ; }
public void nameOfNewGroupMustNotBeNull ( ) throws java.lang.Exception { expectedException.expect ( java.lang.NullPointerException.class ) ; com.google.gerrit.server.group.db.GroupNameNotes.forNewGroup ( repo , groupUuid , null ) ; }
public java.util.List < com.google.gerrit.common.data.PermissionRange > getLabelRanges ( ) { return getRefControl ( ) . getLabelRanges ( isOwner ( ) ) ; }
private void initUserAuth ( final com.google.gerrit.server.GerritServer srv ) { setUserAuthFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.server.UserAuth > > asList ( new org.apache.sshd.server.auth.UserAuthPublicKey.Factory ( ) ) ) ; setPublickeyAuthenticator ( new com.google.gerrit.server.ssh.DatabasePubKeyAuth ( srv ) ) ; }
public java.lang.String format ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( formatValue ( ) ) ; if ( ! ( text.isEmpty ( ) ) ) { sb.append ( ' ' ) . append ( text ) ; } return sb.toString ( ) ; }
public java.util.Collection < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( ) { if ( ( inheritedRights ) == null ) { inheritedRights = computeInheritedRights ( ) ; } return inheritedRights ; }
public void updateComment ( com.google.gerrit.reviewdb.client.PatchLineComment comment ) throws com.google.gwtorm.server.OrmException { if ( ( comment.getStatus ( ) ) == ( PatchLineComment.Status.DRAFT ) ) { updateDraftComment ( comment ) ; } else { deleteDraftCommentIfPresent ( comment ) ; updatePublishedComment ( comment ) ; } }
public void upsert ( final java.lang.Iterable < T > instances ) throws com.google.gwtorm.server.OrmException { java.util.Collection < T > inserts = attemptUpdate ( instances ) ; if ( inserts != null ) { insert ( inserts ) ; } }
public java.util.SortedMap < java.lang.String , com.google.gerrit.extensions.common.ProjectInfo > getAsMap ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return list ( this ) ; } catch ( java.lang.Exception e ) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException ( "project list unavailable" , e ) ; } }
public void update ( java.lang.Iterable < com.google.gerrit.reviewdb.client.Change > instances ) { throw new java.lang.UnsupportedOperationException ( "do not call update; change is updated automatically" ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( repoManager , allUsers , c ) . load ( ) ; }
public com.dyuproject.openid.OpenIdUser getUser ( final javax.servlet.http.HttpServletRequest request ) throws java.io.IOException { if ( ( request.getParameter ( RelyingParty.DEFAULT_IDENTIFIER_PARAMETER ) ) != null ) { return null ; } return super . getUser ( request ) ; }
public static java.util.List < java.lang.String > names ( java.util.List < com.google.gerrit.acceptance.TestAccount > accounts ) { return accounts.stream ( ) . map ( ( a ) -> a.fullName ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public void validMergedChange ( ) throws java.lang.Exception { com.google.gerrit.server.notedb.ChangeNotes notes = mergeChange ( incrementPatchSet ( insertChange ( ) ) ) ; assertNoProblems ( notes , null ) ; }
private com.google.gerrit.reviewdb.client.PatchSet getPatchSet ( com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.extensions.common.RevisionInfo info ) throws com.google.gwtorm.server.OrmException { return psUtil.get ( db.get ( ) , notes , PatchSet.Id.fromRef ( info.ref ) ) ; }
public org.eclipse.jgit.lib.RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { org.eclipse.jgit.revwalk.RevCommit editCommit = edit.getEditCommit ( ) ; return modify ( edit , new com.google.gerrit.server.edit.tree.RenameFileModification ( editCommit , file , newFile ) ) ; }
public com.google.gerrit.server.IdentifiedUser runAs ( java.net.SocketAddress remotePeer , com.google.gerrit.reviewdb.client.Account.Id id , @ com.google.gerrit.common.Nullable com.google.gerrit.server.CurrentUser caller ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , starredChangesUtil , authConfig , realm , anonymousCowardName , canonicalUrl , accountCache , groupBackend , disableReverseDnsLookup , com.google.inject.util.Providers.of ( remotePeer ) , id , caller ) ; }
protected java.lang.String getDeleteOneSql ( ) { return com.google.gwtorm.jdbc.AbstractTestJdbcAccess.DELETE ; }
public void cancel ( ) { onExit ( 0 ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > removeAsync ( final K key ) { if ( key != null ) { return cache.removeAsync ( wrapKey ( key ) ) ; } else { return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; } }
protected void preDisplay ( java.lang.Void result ) { initEditor ( content ) ; content = null ; }
public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden ( ) throws java.lang.Exception { grantOwner ( ) ; blockCreateReference ( ) ; setApiUser ( user ) ; assertCreateFails ( testBranch , com.google.gerrit.extensions.restapi.AuthException.class , "create not permitted for refs/heads/test" ) ; }
public void onSuccess ( T value ) { if ( failed ) { return ; } this . result = value ; remaining.remove ( this ) ; this . applyAllSuccess ( ) ; }
public com.google.gerrit.extensions.restapi.Response < ? > apply ( com.google.gerrit.server.change.ChangeEditResource rsrc , com.google.gerrit.extensions.common.Input input ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.extensions.restapi.ResourceConflictException , com.google.gerrit.server.permissions.PermissionBackendException , com.google.gwtorm.server.OrmException , java.io.IOException { return apply ( rsrc.getChangeResource ( ) , rsrc.getPath ( ) ) ; }
protected abstract com.google.gerrit.server.git.MergeTip _run ( com.google.gerrit.server.git.CodeReviewCommit currentTip , java.util.Collection < com.google.gerrit.server.git.CodeReviewCommit > toMerge ) throws com.google.gerrit.server.git.MergeException ;
public com.google.gerrit.extensions.common.ChangeInfo info ( ) throws com.google.gerrit.extensions.restapi.RestApiException { return get ( java.util.EnumSet.noneOf ( com.google.gerrit.extensions.client.ListChangesOption.class ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return deleteAsync ( new com.google.gerrit.server.query.change.ChangeData ( change ) ) ; }
protected java.util.Optional < com.google.gerrit.server.account.AccountState > getAccount ( ) { return user.isIdentifiedUser ( ) ? java.util.Optional.of ( user.asIdentifiedUser ( ) . state ( ) ) : java.util.Optional.empty ( ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > apply ( java.util.List < ? > input ) throws java.lang.Exception { com.google.gerrit.pgm.RebuildNotedb.execute ( bru , repo ) ; com.google.gerrit.pgm.RebuildNotedb.execute ( bruAllUsers , allUsersRepo ) ; mpm.end ( ) ; return com.google.common.util.concurrent.Futures.immediateFuture ( null ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { checkEnabled ( ) ; return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( newChangeJson ( ) . format ( rsrc ) ) ; }
public final java.util.List < com.google.gerrit.client.WebLinkInfo > sideBySideWebLinks ( ) { return filterWebLinks ( DiffView.SIDE_BY_SIDE ) ; }
private java.lang.String parseSubject ( com.google.gerrit.server.notedb.ChangeNotesCommit commit ) throws org.eclipse.jgit.errors.ConfigInvalidException { return parseOneFooter ( commit , com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBJECT ) ; }
public void onSuccess ( final com.google.gerrit.common.data.PatchSetDetail result ) { fileList.display ( idSideA , result ) ; }
public boolean containsHeader ( java.lang.String name ) { return ! ( headers.get ( name ) . isEmpty ( ) ) ; }
private void updateForm ( ) { branchTable.updateDeleteButton ( ) ; addBranch.setEnabled ( true ) ; nameTxtBox.setEnabled ( true ) ; irevTxtBox.setEnabled ( true ) ; }
public void doChangeMergedHook ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account account , com.google.gerrit.reviewdb.client.PatchSet patchSet , com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String mergeResultRev ) throws com.google.gwtorm.server.OrmException ;
public void display ( com.google.gerrit.client.groups.GroupMap groups , java.lang.String toHighlight ) { display ( com.google.gerrit.client.rpc.Natives.asList ( groups.values ( ) ) , toHighlight ) ; }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > evictAsync ( com.google.gerrit.reviewdb.AccountGroupAgreement.Key key ) { return byGroupId.removeAsync ( key.getParentKey ( ) ) ; }
private void deleteRef ( java.lang.String refName ) throws java.lang.Exception { org.eclipse.jgit.lib.RefUpdate ru = serverSideTestRepo.getRepository ( ) . updateRef ( refName , true ) ; ru.setForceUpdate ( true ) ; com.google.common.truth.Truth.assertThat ( ru.delete ( ) ) . isEqualTo ( RefUpdate.Result.FORCED ) ; }
public void changeProjectSettings ( final com.google.gerrit.reviewdb.client.Project update , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectDetail > callback ) { changeProjectSettingsFactory.create ( update ) . to ( callback ) ; }
private org.eclipse.jgit.lib.PersonIdent toCommitterIdent ( final com.google.gerrit.reviewdb.PatchSetApproval audit ) { if ( audit != null ) { return identifiedUserFactory.create ( audit.getAccountId ( ) ) . newCommitterIdent ( audit.getGranted ( ) , myIdent.getTimeZone ( ) ) ; } return myIdent ; }
public RefUpdate.Result deleteFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.DELETE_ENTRY , edit , file , null ) ; }
void replicateNewProject ( com.google.gerrit.client.reviewdb.Project.NameKey project , java.lang.String head ) ;
public int hashCode ( ) { return java.util.Objects.hash ( commitId , path ) ; }
public java.lang.String getName ( ) { if ( ( propertiesFile ) != null ) { java.nio.file.Path path = propertiesFile.getFileName ( ) ; if ( path != null ) { return org.apache.commons.io.FilenameUtils.removeExtension ( path.toString ( ) ) ; } } return null ; }
public abstract com.google.gwtorm.client.ResultSet < java.util.Map.Entry < byte [ ] , byte [ ] > > scan ( byte [ ] fromKey , byte [ ] toKey , int limit , boolean order ) throws com.google.gwtorm.client.OrmException ;
public void setCharacterEncoding ( java.lang.String name ) { com.google.common.base.Preconditions.checkArgument ( java.nio.charset.StandardCharsets.UTF_8.equals ( java.nio.charset.Charset.forName ( name ) ) , "unsupported charset: %s" , name ) ; }
public final java.lang.String cloneCommand ( java.lang.String commandName , java.lang.String project ) { return cloneCommand ( commandName ) . replaceAll ( "\\$\\{project\\}" , project ) . replaceAll ( "\\$\\{project-base-name\\}" , com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo.projectBaseName ( project ) ) ; }
public java.util.List < com.google.gerrit.extensions.common.CommentInfo > getComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { return commentJson.get ( ) . setFillAccounts ( includeAuthorInfo ( ) ) . newCommentFormatter ( ) . formatAsList ( listComments ( rsrc ) ) ; }
public com.google.gerrit.server.project.ProjectControl controlFor ( final com.google.gerrit.server.CurrentUser user ) { return projectControlFactory.create ( user , this ) ; }
public com.google.gerrit.common.data.GroupReference byUUID ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return byUUID.get ( uuid ) ; }
public boolean getBooleanParameter ( java.lang.String name , boolean defaultValue ) { return config.getBoolean ( pluginName , null , getParamName ( name ) , defaultValue ) ; }
private org.eclipse.jgit.lib.PersonIdent createPersonIdent ( com.google.gerrit.server.IdentifiedUser user ) { return user.newCommitterIdent ( serverIdent.getWhen ( ) , serverIdent.getTimeZone ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > toSoyData ( org.eclipse.jgit.revwalk.RevWalk walk , int limit , @ javax.annotation.Nullable java.lang.String revision , @ javax.annotation.Nullable org.eclipse.jgit.lib.ObjectId start , org.eclipse.jgit.util.GitDateFormatter df ) throws java.io.IOException { return toSoyData ( new com.google.gitiles.Paginator ( walk , limit , start ) , revision , df ) ; }
public com.google.gerrit.index.Schema < T > build ( ) { return new com.google.gerrit.index.Schema ( com.google.common.collect.ImmutableList.copyOf ( fields ) ) ; }
private java.lang.String createGroup ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.server.group.CreateGroup.Input in = new com.google.gerrit.server.group.CreateGroup.Input ( ) ; in.ownerId = "Administrators" ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public static com.google.gerrit.common.data.PermissionRule allow ( com.google.gerrit.server.git.ProjectConfig project , java.lang.String permissionName , com.google.gerrit.reviewdb.client.AccountGroup.UUID group , java.lang.String ref ) { return com.google.gerrit.server.project.Util.grant ( project , permissionName , com.google.gerrit.server.project.Util.newRule ( project , group ) , ref ) ; }
static com.google.gerrit.extensions.common.GpgKeyInfo toJson ( org.bouncycastle.openpgp.PGPPublicKey key , com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.PublicKeyStore store ) throws java.io.IOException { return com.google.gerrit.gpg.server.GpgKeys.toJson ( key , checker.setStore ( store ) . check ( key ) ) ; }
private java.lang.String getRevisionSideB ( ) { return ( ( ( getRevisionA ( ) ) != null ? getRevisionA ( ) : "" ) + "->" ) + ( getRevisionB ( ) ) ; }
public com.google.gerrit.extensions.client.GeneralPreferencesInfo getPreferences ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { return getPreferences.apply ( account ) ; } catch ( com.google.gerrit.server.permissions.PermissionBackendException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot get preferences" , e ) ; } }
public boolean supportsRoleChanges ( com.gitblit.models.TeamModel team , com.gitblit.Constants.Role role ) { return false ; }
public void addHeader ( java.lang.String name , java.lang.String value ) { headers.put ( name , value ) ; }
protected java.lang.Iterable < com.google.gerrit.reviewdb.client.PatchLineComment > listComments ( com.google.gerrit.server.change.RevisionResource rsrc ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.notedb.ChangeNotes notes = rsrc.getNotes ( ) ; return plcUtil.publishedByPatchSet ( db.get ( ) , notes , rsrc.getPatchSet ( ) . getId ( ) ) ; }
public com.google.gerrit.reviewdb.client.Change abandon ( com.google.gerrit.server.update.BatchUpdate.Factory updateFactory , com.google.gerrit.server.project.ChangeControl control ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.update.UpdateException { return abandon ( updateFactory , control , "" , defaultNotify ( control ) , com.google.common.collect.ImmutableListMultimap.of ( ) ) ; }
protected void onLoad ( ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { groupList = readGroupList ( ) ; cfg = readConfig ( ProjectConfig.PROJECT_CONFIG ) ; revision = getRevision ( ) ; }
public void onSuccess ( final com.google.gerrit.common.data.AccountProjectWatchInfo result ) { addNew.setEnabled ( true ) ; nameBox.setEnabled ( true ) ; filterTxt.setEnabled ( true ) ; nameBox.setText ( "" ) ; watchesTab.insertWatch ( result ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.AddBranchResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
public static void getConfig ( com.google.gerrit.reviewdb.client.Project.NameKey name , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.projects.ConfigInfo > cb ) { com.google.gerrit.client.projects.ProjectApi.project ( name ) . view ( "config" ) . get ( cb ) ; }
protected abstract void onOpenRow ( int row ) ;
protected abstract T updateProjectConfig ( com.google.gerrit.server.CurrentUser user , com.google.gerrit.server.git.ProjectConfig config , com.google.gerrit.server.git.MetaDataUpdate md , boolean parentProjectUpdate ) throws com.google.gerrit.server.project.NoSuchProjectException , com.google.gwtorm.server.OrmException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException ;
public java.lang.String getQueryString ( ) { return com.google.gitiles.GitilesView.paramsToString ( parameters ) ; }
com.google.gerrit.server.project.ProjectState create ( com.google.gerrit.server.git.ProjectConfig config ) ;
private void initProviderJce ( ) { setKeyExchangeFactories ( NamedFactory.Utils.setUpTransformedFactories ( true , java.util.Collections.unmodifiableList ( java.util.Arrays.asList ( BuiltinDHFactories.dhg1 ) ) , ServerBuilder.DH2KEX ) ) ; setKeyExchangeFactories ( org.apache.sshd.server.ServerBuilder.setUpDefaultKeyExchanges ( true ) ) ; setRandomFactory ( new org.apache.sshd.common.random.SingletonRandomFactory ( org.apache.sshd.common.random.JceRandomFactory.INSTANCE ) ) ; }
public void testContainsTrueWithTwoElements ( ) throws java.lang.Exception { com.google.gerrit.extensions.registration.DynamicSet < java.lang.Integer > ds = new com.google.gerrit.extensions.registration.DynamicSet ( ) ; ds.add ( 2 ) ; ds.add ( 4 ) ; com.google.common.truth.Truth.assertThat ( ds.contains ( 4 ) ) . isTrue ( ) ; }
public java.lang.String getLoggableName ( ) { return getUserName ( ) . orElseGet ( ( ) -> com.google.common.base.MoreObjects.firstNonNull ( getAccount ( ) . getPreferredEmail ( ) , ( "a/" + ( getAccountId ( ) . get ( ) ) ) ) ) ; }
com.google.gerrit.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { return com.google.gerrit.index.IndexConfig.fromConfig ( cfg ) . separateChangeSubIndexes ( true ) . build ( ) ; }
protected void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; db = new com.google.gerrit.testutil.InMemoryDatabase ( ) ; }
public static java.util.List < com.google.gerrit.reviewdb.client.Account.Id > ids ( java.util.List < com.google.gerrit.acceptance.TestAccount > accounts ) { return accounts.stream ( ) . map ( ( a ) -> a.id ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
private void autoReindexIfStale ( com.google.gerrit.server.query.change.ChangeData cd ) throws java.io.IOException { try { autoReindexIfStale ( cd.project ( ) , cd.getId ( ) ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new java.io.IOException ( e ) ; } }
public void onSuccess ( com.google.gwt.core.client.JsArray < com.google.gerrit.client.account.ExternalIdInfo > results ) { identites.display ( results ) ; display ( ) ; }
com.google.gwt.resources.client.DataResource soy ( ) ;
protected com.google.gerrit.server.patch.DiffCacheContent createEntry ( final com.google.gerrit.server.patch.DiffCacheKey key ) throws java.lang.Exception { return f.createEntry ( key ) ; }
public long size ( ) { return listFiles ( ) . size ( ) ; }
public static void unmarkPrivate ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.core.client.JavaScriptObject > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "private.delete" ) . post ( com.google.gerrit.client.changes.ChangeApi.PrivateInput.create ( ) , cb ) ; }
public void onKeyPress ( final com.google.gwt.event.dom.client.KeyPressEvent event ) { int index = ( indexOf ( activePatchSetId ) ) - 1 ; if ( 0 <= index ) { activate ( patchSets.get ( index ) . getId ( ) ) ; } }
private static java.lang.String getURLEncodedParameter ( java.lang.String prefix , java.lang.String url ) { try { return com.google.common.base.Strings.isNullOrEmpty ( url ) ? "" : prefix + ( java.net.URLEncoder.encode ( url , "UTF-8" ) ) ; } catch ( java.io.UnsupportedEncodingException e ) { return null ; } }
public static final native void mapVimKey ( java.lang.String alias , java.lang.String actual ) ;
public final native void activeLine ( net.codemirror.lib.CodeMirror.LineHandle line ) ;
private static com.google.gerrit.client.SignInDialog.Mode signInMode ( final javax.servlet.http.HttpServletRequest req ) { try { return SignInDialog.Mode.valueOf ( req.getParameter ( com.google.gerrit.server.openid.OpenIdServiceImpl.P_MODE ) ) ; } catch ( java.lang.RuntimeException e ) { return com.google.gerrit.client.SignInDialog.Mode.SIGN_IN ; } }
public void onSuccess ( final com.google.gerrit.reviewdb.PatchLineComment result ) { enable ( true ) ; notifyDraftDelta ( 1 ) ; createEditor ( result ) . setOpen ( false ) ; }
void audit ( com.google.gerrit.sshd.SshScope.Context ctx , java.lang.Object result , java.lang.String cmd ) { audit ( ctx , result , cmd , null ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { change.nextPatchSetId ( ) ; return change ; }
public void testUserNotPresent1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( gApi.accounts ( ) . query ( "sandboxuser" ) . get ( ) ) . isEmpty ( ) ; }
public void tearDown ( ) throws java.lang.Exception { stat.execute ( ( "DROP TABLE IF EXISTS " + ( com.ericsson.gerrit.plugins.eventslog.sql.SQLTable.TABLE_NAME ) ) ) ; store.stop ( ) ; }
com.google.gerrit.server.permissions.PermissionBackend.ForChange asForChange ( @ com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd , @ com.google.gerrit.common.Nullable com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db ) { return new com.google.gerrit.server.project.ChangeControl.ForChangeImpl ( cd , db ) ; }
public com.google.gerrit.server.account.AccountSshKey create ( com.google.gerrit.reviewdb.client.Account.Id accountId , int seq , java.lang.String encoded ) throws com.google.gerrit.common.errors.InvalidSshKeyException { throw new com.google.gerrit.common.errors.InvalidSshKeyException ( ) ; }
private void post ( final java.lang.String url , final com.google.gerrit.server.events.ProjectEvent projectEvent ) { taskFactory.create ( url , com.googlesource.gerrit.plugins.webhooks.EventHandler.GSON.toJson ( projectEvent ) ) . schedule ( ) ; }
public void onError ( com.google.gwt.http.client.Request request , java.lang.Throwable e ) { cb.onFailure ( e ) ; }
public < T > com.google.gerrit.client.rpc.CallbackGroup.Callback < T > addFinal ( final com.google.gwt.user.client.rpc.AsyncCallback < T > cb ) { checkFinalAdded ( ) ; finalAdded = true ; return handleAdd ( cb ) ; }
protected void preDisplay ( final com.google.gerrit.client.groups.GroupMap result ) { groups.display ( result ) ; groups.finishDisplay ( ) ; }
public void onChange ( com.google.gwt.event.dom.client.ChangeEvent event ) { setEnabledForUseContentMerge ( ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > email ( java.lang.String email ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.EMAIL , AccountQueryBuilder.FIELD_EMAIL , email.toLowerCase ( ) ) ; }
protected void configure ( ) { bind ( com.google.gerrit.server.change.ReviewerSuggestion.class ) . annotatedWith ( com.google.gerrit.extensions.annotations.Exports.named ( "reviewer-suggest" ) ) . to ( com.googlesource.gerrit.plugins.reviewers.Reviewers.class ) ; }
protected void authorizeUser ( com.google.gerrit.server.project.ProjectControl control ) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { if ( ( com.google.gerrit.common.data.Capable.OK ) != ( control.canPushToAtLeastOneRef ( ) ) ) { throwUnauthorizedOp ( action.getName ( ) , control ) ; } }
private com.google.gerrit.server.account.WatchConfig read ( com.google.gerrit.reviewdb.client.Account.Id accountId ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { try ( org.eclipse.jgit.lib.Repository git = repoManager.openRepository ( allUsersName ) ) { com.google.gerrit.server.account.WatchConfig watchConfig = new com.google.gerrit.server.account.WatchConfig ( accountId ) ; watchConfig.load ( git ) ; return watchConfig ; } }
public void testEventSentThrowsException ( ) throws java.lang.Exception { com.google.gerrit.server.events.Event event = setUpMocksForEvent ( com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.FAILED , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.EXCEPTION_MSG , com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.THROW_EXCEPTION ) ; com.google.common.truth.Truth.assertThat ( restForwarder.send ( event ) ) . isFalse ( ) ; }
public void denyOwnerProject ( ) { com.google.gerrit.server.project.testing.Util.allow ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.testing.Util.ADMIN , "refs/*" ) ; com.google.gerrit.server.project.testing.Util.deny ( local , com.google.gerrit.common.data.Permission.OWNER , com.google.gerrit.server.project.testing.Util.DEVS , "refs/*" ) ; assertAdminsAreOwnersAndDevsAreNot ( ) ; }
protected void preDisplay ( final com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; projects.finishDisplay ( ) ; }
protected void preDisplay ( java.lang.String content ) { initEditor ( content ) ; }
public abstract void go ( ) ;
< T > java.util.concurrent.Callable < T > scope ( java.util.concurrent.Callable < T > callable ) ;
public void onSuccess ( final com.google.gerrit.client.HostPageData result ) { com.google.gerrit.client.rpc.Common.setGerritConfig ( result.config ) ; if ( ( result.userAccount ) != null ) { com.google.gerrit.client.Gerrit.myAccount = result.userAccount ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } onModuleLoad2 ( ) ; }
private void maybeAddTestHelperOp ( com.google.gerrit.server.update.BatchUpdate bu , com.google.gerrit.reviewdb.client.Change.Id changeId ) { if ( ( args.submitInput ) instanceof com.google.gerrit.server.change.TestSubmitInput ) { bu.addOp ( changeId , new com.google.gerrit.server.git.strategy.TestHelperOp ( changeId , args ) ) ; } }
void resizeCodeMirror ( ) { int height = getCodeMirrorHeight ( ) ; cmA.setHeight ( height ) ; cmB.setHeight ( height ) ; diffTable.overview.refresh ( ) ; }
public com.google.gerrit.extensions.restapi.BinaryResult setCharacterEncoding ( java.nio.charset.Charset encoding ) { characterEncoding = encoding ; return this ; }
public synchronized com.google.gerrit.server.git.WorkQueue.Executor getDefaultQueue ( ) { if ( ( defaultQueue ) == null ) { defaultQueue = createQueue ( defaultQueueSize , "WorkQueue" ) ; } return defaultQueue ; }
public void deleteWatchedProjects ( java.util.List < java.lang.String > in ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
public void addGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { groupsToInspect.add ( uuid ) ; }
void load ( int revisionNumber ) { if ( ( revisionNumber > 0 ) && ( loaded.add ( revisionNumber ) ) ) { toLoad.add ( revisionNumber ) ; start ( ) ; } }
private static org.apache.lucene.index.Term idTerm ( com.google.gerrit.server.project.ProjectData projectState ) { return com.google.gerrit.lucene.LuceneProjectIndex.idTerm ( projectState.getProject ( ) . getNameKey ( ) ) ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > indexAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( change , false ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public static com.google.gerrit.index.query.Predicate < com.google.gerrit.server.account.AccountState > id ( com.google.gerrit.reviewdb.client.Account.Id accountId ) { return new com.google.gerrit.server.query.account.AccountPredicates.AccountPredicate ( com.google.gerrit.server.index.account.AccountField.ID , AccountQueryBuilder.FIELD_ACCOUNT , accountId.toString ( ) ) ; }
public void show ( ) { super . show ( ) ; providerId.selectAll ( ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { providerId.setFocus ( true ) ; } } ) ; }
com.google.gerrit.client.diff.DisplaySide getStartSide ( ) { return startSide ; }
private java.lang.String getUrl ( ) { final java.lang.String url = gerritConfig.getString ( pluginName , null , com.googlesource.gerrit.plugins.hooks.bz.BugzillaItsFacade.GERRIT_CONFIG_URL ) ; return url ; }
private static java.nio.file.Path resolve ( java.nio.file.Path p ) { try { return p.toRealPath ( ) . normalize ( ) ; } catch ( java.io.IOException e ) { return p.toAbsolutePath ( ) . normalize ( ) ; } }
protected void display ( com.google.gerrit.client.info.AccountInfo account ) { currentEmail = account.email ( ) ; nameTxt.setText ( account.name ( ) ) ; save.setEnabled ( false ) ; new com.google.gerrit.client.ui.OnEditEnabler ( save , nameTxt ) ; }
private com.google.gerrit.extensions.common.UserConfigInfo getUserInfo ( java.lang.String anonymousCowardName ) { com.google.gerrit.extensions.common.UserConfigInfo info = new com.google.gerrit.extensions.common.UserConfigInfo ( ) ; info.anonymousCowardName = anonymousCowardName ; return info ; }
protected com.google.gerrit.git.RepositoryCache getRepositoryCache ( ) throws com.google.gerrit.server.ssh.AbstractCommand.Failure { final com.google.gerrit.git.RepositoryCache rc = getGerritServer ( ) . getRepositoryCache ( ) ; if ( rc == null ) { throw new com.google.gerrit.server.ssh.AbstractCommand.Failure ( 128 , "fatal: Gerrit repositories are not available" , new java.lang.IllegalStateException ( "git_base_path not set in system_config" ) ) ; } return rc ; }
protected void configureServlets ( ) { serve ( "/login/*" ) . with ( com.google.gerrit.httpd.auth.ldap.LdapLoginServlet.class ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { doExternalSearch ( ) ; }
protected void configure ( ) { bind ( com.google.gerrit.httpd.GerritOptions.class ) . toInstance ( new com.google.gerrit.httpd.GerritOptions ( headless ) ) ; if ( test ) { bind ( com.google.gerrit.server.securestore.SecureStore.class ) . toProvider ( com.google.gerrit.pgm.util.SecureStoreProvider.class ) ; } }
public java.util.Collection < com.googlesource.gerrit.plugins.github.git.GitJob > getJobs ( ) { return jobs.values ( ) ; }
private void initDownloadAction ( com.google.gerrit.client.changes.ChangeInfo info , java.lang.String revision ) { downloadAction = new com.google.gerrit.client.change.DownloadAction ( info , revision , style , headerLine , download ) ; }
public com.google.gerrit.common.data.PermissionRange getRange ( java.lang.String permission , boolean isChangeOwner ) { if ( com.google.gerrit.common.data.Permission.hasRange ( permission ) ) { return toRange ( permission , access ( permission , isChangeOwner ) ) ; } return null ; }
private java.lang.String encode ( java.lang.String segment ) { if ( type.isUrlEncode ( ) ) { return com.google.gwt.http.client.URL.encodeQueryString ( type.replacePathSeparator ( segment ) ) ; } else { return segment ; } }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > byTopicOpen ( java.lang.String topic ) throws com.google.gwtorm.server.OrmException { return query ( com.google.gerrit.server.query.Predicate.and ( com.google.gerrit.server.query.change.InternalChangeQuery.topic ( topic ) , com.google.gerrit.server.query.change.ChangeStatusPredicate.open ( ) ) ) ; }
protected void configure ( ) { bind ( java.nio.file.Path.class ) . annotatedWith ( com.google.gerrit.server.config.SitePath.class ) . toProvider ( com.google.gerrit.httpd.SitePathFromSystemConfigProvider.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public static boolean isSignedIn ( ) { return ( com.google.gwt.user.client.Cookies.getCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ) != null ; }
public boolean apply ( com.google.gerrit.server.account.externalids.ExternalId externalId ) { return externalId.key ( ) . get ( ) . startsWith ( IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX ) ; }
public java.util.List < com.google.gerrit.server.query.change.ChangeData > apply ( com.google.gerrit.server.git.MergeOp.BranchBatch batch ) { return batch.changes ( ) ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.myAccount = result ; com.google.gerrit.client.Gerrit.applyUserPreferences ( ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; } com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; showInitialScreen ( ) ; }
public static com.google.gerrit.sshd.CommandName named ( final java.lang.String value ) { return new com.google.gerrit.sshd.AutoAnnotation_Commands_named ( value ) ; }
private com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit defaultRateLimit ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.Type type ) { return new com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.RateLimit ( type , ( 1.0 / ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.DEFAULT_INTERVAL_SECONDS ) ) , ( ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.DEFAULT_INTERVAL_SECONDS ) * ( com.googlesource.gerrit.plugins.quota.AccountLimitsConfig.DEFAULT_BURST_COUNT ) ) ) ; }
public void configure ( ) { bind ( com.google.gerrit.server.index.VersionManager.class ) . to ( com.google.gerrit.elasticsearch.ElasticVersionManager.class ) ; listener ( ) . to ( com.google.gerrit.elasticsearch.ElasticVersionManager.class ) ; if ( onlineUpgrade ) { listener ( ) . to ( com.google.gerrit.server.index.OnlineUpgrader.class ) ; } }
private static java.lang.String queryOutgoing ( java.lang.String who ) { return "is:open owner:" + who ; }
public void unblockInLocal_Fails ( ) { com.google.gerrit.server.project.testing.Util.block ( parent , com.google.gerrit.common.data.Permission.PUSH , com.google.gerrit.server.group.SystemGroupBackend.ANONYMOUS_USERS , "refs/heads/*" ) ; com.google.gerrit.server.project.testing.Util.allow ( local , com.google.gerrit.common.data.Permission.PUSH , fixers , "refs/heads/*" ) ; com.google.gerrit.server.project.ProjectControl f = user ( local , fixers ) ; assertCannotUpdate ( "refs/heads/master" , f ) ; }
public static com.google.inject.Module module ( ) { return new com.google.gerrit.extensions.config.FactoryModule ( ) { @ java.lang.Override public void configure ( ) { factory ( ReviewDbBatchUpdate.AssistedFactory.class ) ; } } ; }
public com.google.gerrit.extensions.common.ProjectInfo get ( ) throws com.google.gerrit.extensions.restapi.RestApiException { if ( ( project ) == null ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException ( name ) ; } return projectJson.format ( project ) ; }
protected void createSubmoduleSubscription ( org.eclipse.jgit.junit.TestRepository < ? > repo , java.lang.String branch , java.lang.String subscribeToRepo , java.lang.String subscribeToBranch ) throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config ( ) ; prepareSubmoduleConfigEntry ( config , subscribeToRepo , subscribeToBranch ) ; pushSubmoduleConfig ( repo , branch , config ) ; }
public java.lang.Object apply ( com.google.gerrit.server.project.ProjectResource resource ) { com.google.gerrit.reviewdb.client.Project project = resource.getControl ( ) . getProject ( ) ; com.google.gerrit.reviewdb.client.Project.NameKey parentName = project.getParent ( allProjectsName ) ; return parentName != null ? parentName.get ( ) : "" ; }
public void setUp ( ) throws java.lang.Exception { handler = new com.ericsson.gerrit.plugins.multimaster.IndexResponseHandler ( ) ; }
private void configureCmdLineParser ( ) { factory ( CmdLineParser.Factory.class ) ; registerOptionHandler ( PatchSet.Id.class , com.google.gerrit.server.ssh.commands.PatchSetIdHandler.class ) ; registerOptionHandler ( com.google.gerrit.server.project.ProjectControl.class , com.google.gerrit.server.ssh.commands.ProjectControlHandler.class ) ; }
public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , db , notes , patch , changeDataFactory , projectCache , repoManager ) ; }
public void renameFile ( org.eclipse.jgit.lib.Repository repository , com.google.gerrit.server.project.ChangeControl changeControl , java.lang.String currentFilePath , java.lang.String newFilePath ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , com.google.gwtorm.server.OrmException , java.io.IOException { modifyTree ( repository , changeControl , new com.google.gerrit.server.edit.tree.RenameFileModification ( currentFilePath , newFilePath ) ) ; }
void addLine ( int line ) { dst.addLine ( line , src.getLine ( line ) ) ; }
public void setChangeMessage ( final com.google.gerrit.reviewdb.client.ChangeMessage cm ) { setChangeMessage ( cm.getMessage ( ) , cm.getWrittenOn ( ) ) ; }
public void resetTime ( ) { com.google.gerrit.testing.TestTimeUtil.useSystemTime ( ) ; java.lang.System.setProperty ( "user.timezone" , systemTimeZone ) ; }
public RefUpdate.Result renameFile ( com.google.gerrit.server.edit.ChangeEdit edit , java.lang.String file , java.lang.String newFile ) throws com.google.gerrit.extensions.restapi.AuthException , com.google.gerrit.server.project.InvalidChangeOperationException , java.io.IOException { return modify ( com.google.gerrit.server.edit.ChangeEditModifier.TreeOperation.RENAME_ENTRY , edit , file , newFile , null ) ; }
private com.google.gerrit.server.notedb.ChangeUpdate newUpdate ( com.google.gerrit.reviewdb.client.Change c , com.google.gerrit.server.IdentifiedUser user ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { return new com.google.gerrit.server.notedb.ChangeUpdate ( com.google.gerrit.server.notedb.ChangeNotesTest.SERVER_IDENT , repoManager , com.google.gerrit.server.notedb.NotesMigration.allEnabled ( ) , accountCache , null , com.google.gerrit.server.notedb.ChangeNotesTest.LABEL_TYPES , c , com.google.gerrit.server.util.TimeUtil.nowTs ( ) , user ) ; }
public < V > com.google.gerrit.metrics.CallbackMetric0 < V > newCallbackMetric ( java.lang.String name , java.lang.Class < V > valueClass , com.google.gerrit.metrics.Description desc ) { define ( name , desc ) ; return new com.google.gerrit.metrics.dropwizard.CallbackMetricImpl0 ( this , registry , name , valueClass ) ; }
public void maxAutomergeVoteDisabledTest_isDisabled ( ) throws java.lang.Exception { defaultSetup ( "alternate.config" ) ; com.google.common.truth.Truth.assertThat ( configLoader.maxAutomergeVoteDisabled ( ) ) . isTrue ( ) ; }
private long readAbandonAfter ( org.eclipse.jgit.lib.Config cfg ) { long abandonAfter = com.google.gerrit.server.config.ConfigUtil.getTimeUnit ( cfg , com.google.gerrit.server.config.ChangeCleanupConfig.SECTION , null , com.google.gerrit.server.config.ChangeCleanupConfig.KEY_ABANDON_AFTER , 0 , java.util.concurrent.TimeUnit.MILLISECONDS ) ; return abandonAfter >= 0 ? abandonAfter : 0 ; }
private org.apache.lucene.search.IndexSearcher get ( ) { try { return cache.get ( true ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.change.ReviewerSuggestionCache.log.warn ( "Cannot fetch reviewers from cache" , e ) ; return null ; } }
public com.google.gerrit.server.query.change.ChangeDataSource getSource ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p , com.google.gerrit.server.query.change.QueryOptions opts ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public com.google.common.truth.ComparableSubject < ? , java.sql.Timestamp > date ( ) { isNotNull ( ) ; com.google.gerrit.extensions.common.GitPerson gitPerson = actual ( ) ; return com.google.common.truth.Truth.assertThat ( gitPerson.date ) . named ( "date" ) ; }
protected void configure ( ) { install ( new com.google.inject.assistedinject.FactoryModuleBuilder ( ) . implement ( com.google.gerrit.server.contact.ContactStoreConnection.class , com.google.gerrit.server.contact.HttpContactStoreConnection.class ) . build ( ContactStoreConnection.Factory.class ) ) ; }
public boolean readChangeSequence ( ) { return readChangeSequence ; }
public void execute ( ) { try { onResult ( lastScript , false ) ; } finally { RpcStatus.INSTANCE.onRpcComplete ( null ) ; } }
public com.google.gerrit.index.QueryOptions withStart ( int newStart ) { return com.google.gerrit.index.QueryOptions.create ( config ( ) , newStart , limit ( ) , fields ( ) ) ; }
public long longValue ( ) { return ( ( long ) ( val ) ) ; }
public UiAction.Description getDescription ( com.google.gerrit.server.project.ProjectResource rsrc ) { return new com.google.gerrit.extensions.webui.UiAction.Description ( ) . setLabel ( "Run GC" ) . setTitle ( "Triggers the Git Garbage Collection for this project." ) . setVisible ( canGC ) ; }
public void onSuccess ( final com.google.gerrit.common.data.GroupDetail groupDetail ) { saveName.setEnabled ( false ) ; setPageTitle ( Util.M.group ( groupDetail.group.getName ( ) ) ) ; display ( groupDetail ) ; }
public void onClick ( final com.google.gwt.event.dom.client.ClickEvent event ) { toggleStar ( ) ; }
void setJarUrl ( final java.lang.String url ) { this . jarUrl = url ; download = jarUrl.startsWith ( "http" ) ; }
private void problem ( java.lang.String msg ) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo ( ) ; p.message = msg ; problems.add ( p ) ; }
private static final com.google.gerrit.client.info.AccountInfo getCurrentUser ( ) { return com.google.gerrit.client.Gerrit.getUserAccount ( ) ; }
public boolean onTime ( java.time.Instant when ) { return when.isBefore ( token.issued.plusSeconds ( token.expiresIn ) ) ; }
protected void preDisplay ( com.google.gerrit.client.projects.ConfigInfoCache.Entry result ) { loaded = true ; commentLinkProcessor = result.getCommentLinkProcessor ( ) ; setTheme ( result.getTheme ( ) ) ; renderChangeInfo ( info ) ; loadRevisionInfo ( ) ; }
public void setShowUsernameInReviewCategory ( final boolean showUsernameInReviewCategory ) { this . showUserInReview = showUsernameInReviewCategory ; }
void restore ( com.googlecode.prolog_cafe.lang.Prolog engine ) { engine.cont = this . cont ; engine.r1 = this . r1 ; engine.r2 = this . r2 ; engine.r3 = this . r3 ; }
private java.lang.String group ( java.lang.String name ) throws java.io.IOException { name = name ( name ) ; com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput ( ) ; adminSession.put ( ( "/groups/" + name ) , in ) . consume ( ) ; return name ; }
public void onFailure ( final java.lang.Throwable caught ) { cbox.setEnabled ( true ) ; info.getWatch ( ) . setNotify ( type , oldVal ) ; cbox.setValue ( oldVal ) ; super . onFailure ( caught ) ; }
public void rebuildAndCheckAllChanges ( ) throws java.lang.Exception { rebuildAndCheckChanges ( com.google.common.collect.Iterables.transform ( unwrapDb ( ) . changes ( ) . all ( ) , com.google.gerrit.reviewdb.server.ReviewDbUtil.changeIdFunction ( ) ) ) ; }
protected final void addErrorListener ( com.google.common.util.concurrent.ListenableFuture < ? > future , java.lang.String desc , org.eclipse.jgit.lib.ProgressMonitor progress , java.util.concurrent.atomic.AtomicBoolean ok ) { future.addListener ( new com.google.gerrit.index.SiteIndexer.ErrorListener ( future , desc , progress , ok ) , com.google.common.util.concurrent.MoreExecutors.directExecutor ( ) ) ; }
public boolean containsHeader ( java.lang.String name ) { return headers.containsKey ( name.toLowerCase ( ) ) ; }
public java.lang.String getReplacementString ( ) { return java.lang.String.valueOf ( change.legacyId ( ) . get ( ) ) ; }
protected void removeCookie ( final java.lang.String name ) { final javax.servlet.http.Cookie c = new javax.servlet.http.Cookie ( name , "" ) ; c.setMaxAge ( 0 ) ; com.google.gwtjsonrpc.server.JsonServlet.getCurrentCall ( ) . httpResponse.addCookie ( c ) ; }
public com.google.gerrit.common.data.LabelType byLabel ( com.google.gerrit.reviewdb.client.LabelId labelId ) { return byLabel ( ) . get ( labelId.get ( ) . toLowerCase ( ) ) ; }
public java.lang.String getToken ( ) { return isSignedIn ( ) ? val.getXsrfToken ( ) : null ; }
public void testLinkify_TrailingComma ( ) { final com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_LinkifyTest.html ( "A http://go.here/, B" ) ; final com.google.gwtexpui.safehtml.client.SafeHtml n = o.linkify ( ) ; com.google.common.truth.Truth.assertThat ( o ) . isNotSameAs ( n ) ; com.google.common.truth.Truth.assertThat ( n.asString ( ) ) . isEqualTo ( "A <a href=\"http://go.here/\" target=\"_blank\">http://go.here/</a>, B" ) ; }
public int compare ( com.google.gerrit.client.diff.UnifiedDiffChunkInfo o1 , com.google.gerrit.client.diff.UnifiedDiffChunkInfo o2 ) { return ( o1.cmLine ) - ( o2.cmLine ) ; }
public com.google.template.soy.tofu.SoyTofu get ( ) throws com.google.inject.ProvisionException { com.google.template.soy.SoyFileSet.Builder builder = com.google.template.soy.SoyFileSet.builder ( ) ; for ( java.lang.String name : com.google.gerrit.server.mail.MailSoyTofuProvider.TEMPLATES ) { addTemplate ( builder , name ) ; } return builder.build ( ) . compileToTofu ( ) ; }
public void addBranch ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final java.lang.String branchName , final java.lang.String startingRevision , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ListBranchesResult > callback ) { addBranchFactory.create ( projectName , branchName , startingRevision ) . to ( callback ) ; }
private long getSecureConfigLastEditTs ( ) throws java.io.IOException { if ( ! ( java.nio.file.Files.exists ( site.secure_config ) ) ) { return 0L ; } return java.nio.file.Files.getLastModifiedTime ( site.secure_config ) . toMillis ( ) ; }
public void run ( ) { skipManager.removeAll ( ) ; skipManager.render ( context , diff ) ; }
public static com.google.gerrit.server.change.RevisionResource createNonCachable ( com.google.gerrit.server.change.ChangeResource change , com.google.gerrit.reviewdb.client.PatchSet ps ) { return new com.google.gerrit.server.change.RevisionResource ( change , ps , java.util.Optional.empty ( ) , false ) ; }
public void checkChanges ( com.google.gerrit.reviewdb.client.Change ... changeIds ) throws java.lang.Exception { checkActual ( readExpected ( java.util.Arrays.stream ( changeIds ) ) , new java.util.ArrayList < > ( ) ) ; }
public void cleanup ( ) { source.removeEventListener ( eventListener ) ; db.close ( ) ; }
public static synchronized void useSystemTime ( ) { com.google.gerrit.testutil.TestTimeUtil.clockMs = null ; com.google.gerrit.common.TimeUtil.resetCurrentMillisSupplier ( ) ; }
public void projectAccess ( final com.google.gerrit.reviewdb.client.Project.NameKey projectName , final com.google.gwtjsonrpc.common.AsyncCallback < com.google.gerrit.common.data.ProjectAccess > callback ) { projectAccessFactory.create ( projectName ) . to ( callback ) ; }
public boolean allRefsAreVisibleExcept ( java.util.Set < java.lang.String > except ) { return ( ( user ) instanceof com.google.gerrit.server.InternalUser ) || ( canPerformOnAllRefs ( Permission.READ , except ) ) ; }
public < T > java.util.Optional < T > get ( com.google.gerrit.server.CurrentUser.PropertyKey < T > key ) { return java.util.Optional.empty ( ) ; }
public void copyInReviewDb ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.notedb.ChangeNotes notes , com.google.gerrit.server.CurrentUser user , com.google.gerrit.reviewdb.client.PatchSet ps , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config repoConfig ) throws com.google.gwtorm.server.OrmException { copyInReviewDb ( db , notes , user , ps , rw , repoConfig , java.util.Collections.emptyList ( ) ) ; }
public int getSizeBasedOnAccuracy ( int statisticsAccuracy ) throws java.lang.IllegalArgumentException , java.lang.IllegalStateException , net.sf.ehcache.CacheException { return self.getSizeBasedOnAccuracy ( statisticsAccuracy ) ; }
private com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > rewrite ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in ) throws com.google.gerrit.server.query.QueryParseException { return rewrite.rewrite ( in , com.google.gerrit.server.index.change.ChangeIndexRewriterTest.options ( 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) ; }
public void setReporter ( java.lang.String reporter ) { this . reporter = reporter ; }
public void suggestReviewersNoResult3 ( ) throws java.io.IOException , java.lang.Exception , org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; org.junit.Assert.assertEquals ( reviewers.size ( ) , 0 ) ; }
public final java.util.SortedSet < java.lang.Short > valueSet ( ) { java.util.SortedSet < java.lang.Short > values = new java.util.TreeSet < > ( ) ; for ( java.lang.String v : values ( ) ) { values.add ( com.google.gerrit.client.changes.ChangeInfo.LabelInfo.parseValue ( v ) ) ; } return values ; }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( event.getCharCode ( ) ) == ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) ) { doAddNewBranch ( ) ; } }
public java.util.SortedSet < com.google.gerrit.reviewdb.client.Project.NameKey > all ( ) { try { return list.get ( com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL ) ; } catch ( java.util.concurrent.ExecutionException e ) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn ( "Cannot list available projects" , e ) ; return com.google.common.collect.ImmutableSortedSet.of ( ) ; } }
public com.google.common.util.concurrent.ListenableFuture < java.lang.Void > evictAfterRenameAsync ( com.google.gerrit.reviewdb.AccountGroup.NameKey oldName ) ;
private void assertNoProblems ( com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.testing.TestKey k ) { com.google.gerrit.gpg.CheckResult result = checker.setStore ( store ) . check ( k.getPublicKey ( ) ) ; org.junit.Assert.assertEquals ( java.util.Collections.emptyList ( ) , result.getProblems ( ) ) ; }
com.google.gerrit.server.index.IndexConfig getIndexConfig ( @ com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config cfg ) { org.apache.lucene.search.BooleanQuery.setMaxClauseCount ( cfg.getInt ( "index" , "maxTerms" , org.apache.lucene.search.BooleanQuery.getMaxClauseCount ( ) ) ) ; return com.google.gerrit.server.index.IndexConfig.fromConfig ( cfg ) . separateChangeSubIndexes ( true ) . build ( ) ; }
private static com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput newCommentOnParent ( java.lang.String path , int parent , int line , java.lang.String message ) { com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput c = new com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput ( ) ; return com.google.gerrit.acceptance.server.change.CommentsIT.populate ( c , path , Side.PARENT , java.lang.Integer.valueOf ( parent ) , line , message ) ; }
private boolean hasEdits ( com.google.gerrit.common.data.PatchScript script ) { for ( org.eclipse.jgit.diff.Edit e : script.getEdits ( ) ) { if ( ( e.getType ( ) ) != ( Edit.Type.EMPTY ) ) { return true ; } } return false ; }
public void createNewDraftChangeNotAllowed ( ) throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInput ci = newChangeInput ( ChangeStatus.DRAFT ) ; assertCreateFails ( ci , com.google.gerrit.extensions.restapi.BadRequestException.class , "unsupported change status" ) ; }
public void setUp ( ) { com.google.common.truth.TruthJUnit.assume ( ) . that ( migration.readFromNoteDb ( ) ) . isFalse ( ) ; }
private void allowPushOnRefsTags ( ) throws java.lang.Exception { removePushFromRefsTags ( ) ; grant ( project , "refs/tags/*" , Permission.PUSH , false , com.google.gerrit.server.group.SystemGroupBackend.REGISTERED_USERS ) ; }
public java.lang.String format ( java.lang.String projectName , java.lang.String revision , com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg , java.lang.String raw ) { return ( "<pre>" + ( org.apache.commons.lang.StringEscapeUtils.escapeHtml ( raw ) ) ) + "</pre>" ; }
private com.google.gerrit.server.index.PredicateWrapper wrap ( com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > p ) { try { return new com.google.gerrit.server.index.PredicateWrapper ( p , index ) ; } catch ( com.google.gerrit.server.query.QueryParseException e ) { throw new java.lang.IllegalStateException ( ( ( "Failed to convert " + p ) + " to index predicate" ) , e ) ; } }
public int getCost ( ) { return 1 + ( ( group ) == null ? 0 : 1 ) ; }
public void onSignIn ( ) { super . onSignIn ( ) ; if ( refreshOnSignIn ) { refresh ( ) ; } if ( ( starChange ) != null ) { starChange.setVisible ( true ) ; } }
private static com.google.gerrit.client.reviewdb.AccountExternalId createId ( final com.google.gerrit.client.reviewdb.Account.Id newId , final com.google.gerrit.server.account.AuthRequest who ) { final java.lang.String ext = who.getExternalId ( ) ; return new com.google.gerrit.client.reviewdb.AccountExternalId ( newId , new com.google.gerrit.client.reviewdb.AccountExternalId.Key ( ext ) ) ; }
public final native java.lang.String changeId ( ) ;
protected static boolean isNoSuchEntity ( final java.lang.Throwable caught ) { return ( caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException ) && ( caught.getMessage ( ) . equals ( NoSuchEntityException.MESSAGE ) ) ; }
public Project.NameKey getProjectName ( ) { return project ; }
public com.google.common.util.concurrent.CheckedFuture < ? , java.io.IOException > deleteAsync ( com.google.gerrit.reviewdb.client.Change change ) { return ( executor ) != null ? submit ( new com.google.gerrit.server.index.ChangeIndexer.Task ( change , true ) ) : com.google.common.util.concurrent.Futures.< java.lang.Object , java.io.IOException > immediateCheckedFuture ( null ) ; }
public static org.eclipse.jgit.lib.Config loadDefault ( javax.servlet.FilterConfig filterConfig ) throws java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.storage.file.FileBasedConfig config = new org.eclipse.jgit.storage.file.FileBasedConfig ( com.google.gitiles.GitilesConfig.defaultFile ( filterConfig ) , org.eclipse.jgit.util.FS.DETECTED ) ; config.load ( ) ; return config ; }
public int getCost ( ) { return 1 ; }
public void onSuccess ( final com.google.gerrit.client.reviewdb.Account result ) { if ( result != null ) { com.google.gerrit.client.Gerrit.postSignIn ( result , null ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( com.google.gerrit.client.Gerrit.ACCOUNT_COOKIE ) ; com.google.gerrit.client.Gerrit.refreshMenuBar ( ) ; } showInitialScreen ( ) ; }
public void setSide ( final short s ) { side = s ; }
boolean canRebase ( ) { return canPerform ( Permission.REBASE ) ; }
private void afterTest ( ) throws java.lang.Exception { server.stop ( ) ; }
public void listEmptyGroupIncludes ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( GET ( "/groups/Administrators/groups/" ) ) . isEmpty ( ) ; }
public java.lang.String getNameEmail ( ) { return getAccount ( ) . getNameEmail ( anonymousCowardName ) ; }
public static boolean isInternalGroup ( com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid ) { return uuid.get ( ) . matches ( "^[0-9a-f]{40}$" ) ; }
private void setClean ( boolean clean ) { save.setEnabled ( ( ! clean ) ) ; close.setEnabled ( true ) ; dirty.getStyle ( ) . setVisibility ( ( ! clean ? com.google.gwt.dom.client.Style.Visibility.VISIBLE : com.google.gwt.dom.client.Style.Visibility.HIDDEN ) ) ; }
public org.eclipse.jgit.revwalk.RevCommit commit ( com.google.gerrit.server.git.MetaDataUpdate update ) throws java.io.IOException { try ( com.google.gerrit.server.git.VersionedMetaData.BatchMetaDataUpdate batch = openUpdate ( update ) ) { batch.write ( update.getCommitBuilder ( ) ) ; return batch.commit ( ) ; } }
void postEvent ( com.google.gerrit.server.events.Event event ) throws com.google.gwtorm.server.OrmException ;
protected void onInitUI ( ) { super . onInitUI ( ) ; initUUID ( ) ; initName ( ) ; initOwner ( ) ; initDescription ( ) ; initGroupOptions ( ) ; initGroupType ( ) ; }
public static void edit ( int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.changes.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( id ) . get ( cb ) ; }
public void setHashtags ( com.google.gerrit.extensions.api.changes.HashtagsInput input ) throws com.google.gerrit.extensions.restapi.RestApiException { try { postHashtags.apply ( change , input ) ; } catch ( com.google.gerrit.server.update.UpdateException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot post hashtags" , e ) ; } }
public void abandon ( com.google.gerrit.extensions.api.changes.AbandonInput in ) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply ( change , in ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot abandon change" , e ) ; } }
public void onFailure ( java.lang.Throwable caught ) { new com.google.gerrit.client.ErrorDialog ( caught.getMessage ( ) ) . center ( ) ; enableForm ( true ) ; }
protected java.lang.String decode ( final int s , int e ) { if ( ( charset ) == null ) { charset = com.google.gerrit.server.patch.Text.charset ( content , null ) ; } return org.eclipse.jgit.util.RawParseUtils.decode ( charset , content , s , e ) ; }
private boolean inProject ( com.google.gerrit.reviewdb.client.Project project ) { if ( ( projectControl ) != null ) { return projectControl.getProject ( ) . getNameKey ( ) . equals ( project.getNameKey ( ) ) ; } else { return true ; } }
public void parseInvalidTimestamps ( ) { com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02-15:04:05.789000000" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "2006-01-02T15:04:05.789000000" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "15:04:05" ) ; com.google.gwtjsonrpc.common.JavaSqlTimestampHelperTest.assertInvalid ( "15:04:05.999000000" ) ; }
private static boolean matchPrefix ( java.lang.String want , java.lang.String token ) { if ( token.startsWith ( want ) ) { com.google.gerrit.client.Dispatcher.prefixlen = want.length ( ) ; return true ; } return false ; }
public void createProjectFooBar ( ) throws java.lang.Exception { com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput ( ) ; in.name = name ( "foo" ) ; gApi.projects ( ) . name ( "bar" ) . create ( in ) ; }
public int run ( ) throws java.lang.Exception { com.google.gerrit.server.GerritServer.getInstance ( false ) ; com.google.gerrit.client.rpc.Common.getSchemaFactory ( ) . open ( ) . close ( ) ; java.lang.System.out.println ( "Gerrit2 schema initialized" ) ; return 0 ; }
java.lang.String changeScreenTitleId ( java.lang.String changeId ) ;
private static com.google.gerrit.client.rpc.RestApi project ( com.google.gerrit.reviewdb.client.Project.NameKey name ) { return new com.google.gerrit.client.rpc.RestApi ( "/projects/" ) . id ( name.get ( ) ) ; }
com.google.gerrit.server.api.projects.ProjectApiImpl create ( com.google.gerrit.server.project.ProjectResource project ) ;
public java.lang.String get ( ) { return externalId ; }
public boolean canRestore ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( canAbandon ( db ) ) && ( getRefControl ( ) . canUpload ( ) ) ; }
private void initSignatures ( ) { setSignatureFactories ( java.util.Arrays.< org.apache.sshd.common.NamedFactory < org.apache.sshd.common.Signature > > asList ( new org.apache.sshd.common.signature.SignatureDSA.Factory ( ) , new org.apache.sshd.common.signature.SignatureRSA.Factory ( ) ) ) ; }
public void execute ( com.google.gerrit.server.git.BatchUpdate.Listener listener ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.git.BatchUpdate.execute ( com.google.common.collect.ImmutableList.of ( this ) , listener , requestId , false ) ; }
public void publish ( ) throws com.google.gerrit.extensions.restapi.RestApiException { try { publish.apply ( revision , new com.google.gerrit.server.change.Publish.Input ( ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new com.google.gerrit.extensions.restapi.RestApiException ( "Cannot publish draft patch set" , e ) ; } }
protected void submit ( java.lang.String changeId , com.google.gerrit.extensions.api.changes.SubmitInput input ) throws java.lang.Exception { submit ( changeId , input , null , null ) ; }
public void onSuccess ( final com.google.gwtjsonrpc.client.VoidResult result ) { if ( ( ++ ( done ) ) == ( commentEditors.size ( ) ) ) { onSend2 ( submit ) ; } }
protected void configure ( ) { install ( new com.google.gerrit.server.project.DefaultPermissionBackendModule.LegacyControlsModule ( ) ) ; }
private void clearActiveLine ( net.codemirror.lib.CodeMirror cm ) { if ( cm.hasActiveLine ( ) ) { net.codemirror.lib.CodeMirror.LineHandle activeLine = cm.activeLine ( ) ; cm.removeLineClass ( activeLine , LineClassWhere.WRAP , DiffTable.style.activeLine ( ) ) ; cm.activeLine ( null ) ; } }
public com.google.gerrit.server.project.ChangeControl validateFor ( final com.google.gerrit.reviewdb.client.Change.Id id ) throws com.google.gerrit.server.project.NoSuchChangeException , com.google.gwtorm.server.OrmException { return com.google.gerrit.server.project.ChangeControl.Factory.validate ( controlFor ( id ) , db.get ( ) ) ; }
public static void ensureAllPatchSetsLoaded ( com.google.inject.Provider < com.google.gerrit.reviewdb.server.ReviewDb > db , java.lang.Iterable < com.google.gerrit.server.query.change.ChangeData > changes ) throws com.google.gwtorm.server.OrmException { for ( com.google.gerrit.server.query.change.ChangeData cd : changes ) { cd.patches ( ) ; } }
public void testThreeLevelTreeWithAllIndexPredicates ( ) throws java.lang.Exception { com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > in = parse ( "-status:abandoned (file:a OR file:b)" ) ; com.google.common.truth.Truth.assertThat ( rewrite.rewrite ( in , 0 , com.google.gerrit.common.data.GlobalCapability.DEFAULT_MAX_QUERY_LIMIT ) ) . isEqualTo ( query ( in ) ) ; }
public static org.eclipse.jgit.lib.PersonIdent newIdent ( com.google.gerrit.reviewdb.client.Account author , java.util.Date when , org.eclipse.jgit.lib.PersonIdent serverIdent , java.lang.String anonymousCowardName ) { return new org.eclipse.jgit.lib.PersonIdent ( new com.google.gerrit.common.data.AccountInfo ( author ) . getName ( anonymousCowardName ) , ( ( ( author.getId ( ) . get ( ) ) + "@" ) + ( com.google.gerrit.server.notedb.ChangeNoteUtil.GERRIT_PLACEHOLDER_HOST ) ) , when , serverIdent.getTimeZone ( ) ) ; }
boolean get ( org.eclipse.jgit.lib.ObjectId commit , org.eclipse.jgit.lib.Ref intoRef , com.google.gerrit.extensions.client.SubmitType submitType , java.lang.String mergeStrategy , com.google.gerrit.reviewdb.client.Branch.NameKey dest , org.eclipse.jgit.lib.Repository repo ) ;
public com.google.gerrit.server.account.AccountState state ( ) { if ( ( state ) == null ) { state = accountCache.get ( getAccountId ( ) ) ; } return state ; }
public final native void go ( java.lang.String token ) ;
private java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > getBlameJson ( java.lang.String path ) throws java.lang.Exception { return buildJson ( new com.google.gson.reflect.TypeToken < java.util.Map < java.lang.String , java.util.List < com.google.gitiles.blame.BlameServletTest.RegionJsonData > > > ( ) { } , path ) ; }
private static java.security.SecureRandom newRandomGenerator ( ) { try { return java.security.SecureRandom.getInstance ( "SHA1PRNG" ) ; } catch ( java.security.NoSuchAlgorithmException e ) { throw new java.lang.IllegalArgumentException ( "No SecureRandom available for GitHub authentication" , e ) ; } }
public T call ( ) throws java.lang.Exception { if ( callerContext == ( local.getContext ( ) ) ) { return callable.call ( ) ; } return wrapped.call ( ) ; }
public void run ( ) throws java.lang.Exception { parseCommandLine ( ) ; this . run ( ) ; }
public void getNonExistingAccount_NotFound ( ) throws java.lang.Exception { gApi.accounts ( ) . id ( "non-existing" ) . get ( ) ; }
public void setLinkName ( java.lang.String name ) { this . name = name ; }
public int getCost ( ) { return 0 ; }
public void printJson ( final java.lang.StringBuffer sb , final java.lang.String o ) { sb.append ( escapeString ( o ) ) ; }
public com.google.gerrit.server.project.ProjectResource parse ( java.lang.String id ) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException , java.io.IOException { return parse ( id , true ) ; }
private void detach ( ) { if ( ( lineWidget ) != null ) { lineWidget.clear ( ) ; lineWidget = null ; updateSelection ( ) ; } manager.clearLine ( cm.side ( ) , line , this ) ; removeFromParent ( ) ; }
private com.google.gerrit.server.project.RefControl getRefControl ( ) { return refControl ; }
public static boolean isMagicBranch ( java.lang.String refName ) { return ( ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_DRAFT_CHANGE ) ) || ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_PUBLISH_CHANGE ) ) ) || ( refName.startsWith ( com.google.gerrit.server.util.MagicBranch.NEW_CHANGE ) ) ; }
private com.google.gerrit.extensions.common.ProblemInfo problem ( java.lang.String msg ) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo ( ) ; p.message = msg ; problems.add ( p ) ; return p ; }
private boolean canAddRefs ( ) { return ( canPerformOnAnyRef ( Permission.CREATE ) ) || ( isOwnerAnyRef ( ) ) ; }
public static java.lang.String publicKey ( com.jcraft.jsch.KeyPair sshKey , java.lang.String comment ) throws java.io.UnsupportedEncodingException { java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; sshKey.writePublicKey ( out , comment ) ; return out.toString ( java.nio.charset.StandardCharsets.US_ASCII.name ( ) ) ; }
public void assertSchemaVersion ( ) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion act = getSchemaVersion ( ) ; org.junit.Assert.assertEquals ( schemaVersion.getVersionNbr ( ) , act.versionNbr ) ; }
void onCancel ( com.google.gwt.event.dom.client.ClickEvent e ) { setEdit ( false ) ; }
public void add ( final com.google.gwtexpui.globalkey.client.KeyCommand k ) { assert ! ( map.containsKey ( k.keyMask ) ) ; if ( ! ( map.containsKey ( k.keyMask ) ) ) { map.put ( k.keyMask , k ) ; } }
private void checkPreconditions ( javax.servlet.http.HttpServletRequest req ) throws com.google.gerrit.extensions.restapi.PreconditionFailedException { if ( "*" . equals ( req.getHeader ( "If-None-Match" ) ) ) { throw new com.google.gerrit.extensions.restapi.PreconditionFailedException ( "Resource already exists" ) ; } }
public static com.google.gerrit.server.account.externalids.ExternalId create ( java.lang.String scheme , java.lang.String id , com.google.gerrit.reviewdb.client.Account.Id accountId ) { return com.google.gerrit.server.account.externalids.ExternalId.create ( com.google.gerrit.server.account.externalids.ExternalId.Key.create ( scheme , id ) , accountId , null , null ) ; }
protected void configure ( ) { factory ( AgreementInfoFactory.Factory.class ) ; factory ( DeleteExternalIds.Factory.class ) ; factory ( ExternalIdDetailFactory.Factory.class ) ; factory ( RegisterNewEmailSender.Factory.class ) ; }
private boolean isDraftVisible ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.server.query.change.ChangeData cd ) throws com.google.gwtorm.server.OrmException { return ( isOwner ( ) ) || ( isReviewer ( db , cd ) ) ; }
public void onSuccess ( final com.google.gerrit.client.admin.ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; }
private com.google.gerrit.server.account.AccountState toAccountState ( com.google.gson.JsonElement element ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.Id ( element.getAsJsonObject ( ) . get ( com.google.gerrit.server.index.account.AccountField.ID.getName ( ) ) . getAsInt ( ) ) ; return accountCache.get ( ) . get ( id ) ; }
public void testGcNotAllowed_Forbidden ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( userSession.post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
private static org.eclipse.jgit.lib.ObjectId emptyTreeId ( org.eclipse.jgit.lib.ObjectInserter inserter ) throws java.io.IOException { return inserter.insert ( new org.eclipse.jgit.lib.TreeFormatter ( ) ) ; }
public com.google.gerrit.reviewdb.client.AccountSshKey addKey ( com.google.gerrit.reviewdb.client.Account.Id accountId , java.lang.String pub ) throws com.google.gerrit.common.errors.InvalidSshKeyException , java.io.IOException , org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = read ( accountId ) ; com.google.gerrit.reviewdb.client.AccountSshKey key = authorizedKeys.addKey ( pub ) ; commit ( authorizedKeys ) ; return key ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeMap < com.google.gwt.core.client.JsArray < com.google.gerrit.client.changes.CommentInfo > > result ) { displayComments ( result ) ; post.setEnabled ( true ) ; }
com.google.gerrit.server.change.ChangeJson create ( java.util.Set < com.google.gerrit.extensions.client.ListChangesOption > options ) ;
java.nio.file.Path getSharedDirectory ( ) throws java.io.IOException { java.nio.file.Path sharedDirectoryPath = java.nio.file.Paths.get ( config.main ( ) . sharedDirectory ( ) ) ; java.nio.file.Files.createDirectories ( sharedDirectoryPath ) ; return sharedDirectoryPath ; }
com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult delete ( java.lang.String endpoint ) throws java.io.IOException { return httpClient.execute ( new org.apache.http.client.methods.HttpDelete ( ( ( peerInfo.get ( ) . getDirectUrl ( ) ) + endpoint ) ) , new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler ( ) ) ; }
public com.google.gerrit.server.group.PutMembers.PutMember create ( final com.google.gerrit.server.group.GroupResource group , final java.lang.String id ) { return new com.google.gerrit.server.group.PutMembers.PutMember ( put , com.google.gerrit.server.util.Url.decode ( id ) ) ; }
protected void onLoad ( ) { super . onLoad ( ) ; Util.GROUP_SVC.groupDetail ( groupId , new com.google.gerrit.client.rpc.ScreenLoadCallback < com.google.gerrit.client.admin.AccountGroupDetail > ( this ) { @ java.lang.Override protected void preDisplay ( final com.google.gerrit.client.admin.AccountGroupDetail result ) { display ( result ) ; } } ) ; }
public abstract com.google.gerrit.server.index.SiteIndexer.Result indexAll ( I index ) ;
public com.google.gerrit.server.permissions.PermissionBackend.ForChange change ( com.google.gerrit.server.query.change.ChangeData cd ) { try { return cd.changeControl ( ) . forUser ( getUser ( ) ) . asForChange ( cd , db ) ; } catch ( com.google.gwtorm.server.OrmException e ) { return com.google.gerrit.server.permissions.FailedPermissionBackend.change ( "unavailable" , e ) ; } }
, @ com.google.gerrit.acceptance.GerritConfig ( name = "suggest.fullTextSearchMaxMatches" , value = "2" ) } ) public void suggestReviewersFullTextSearchLimitMaxMatches ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.extensions.common.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , name ( "user" ) , 2 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . hasSize ( 2 ) ; }
public java.util.List < com.google.gerrit.reviewdb.client.AccountGroup > get ( ) { return filterGroups ( groupCache.all ( ) ) ; }
private boolean isHttpEnabled ( ) { return ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.ANON_HTTP ) ) || ( downloadConfig.getDownloadSchemes ( ) . contains ( DownloadScheme.HTTP ) ) ; }
public final native void setPath ( java.lang.String path ) ;
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return new com.google.gerrit.server.IdentifiedUser ( capabilityControlFactory , authConfig , anonymousCowardName , canonicalUrl , realm , accountCache , groupBackend , remotePeerProvider , dbProvider , id , null ) ; }
public void run ( ) { com.google.gerrit.pgm.Daemon.log.info ( "caught shutdown, cleaning up" ) ; stop ( ) ; }
public final com.google.gerrit.server.index.SiteIndexer < K , V , I > getSiteIndexer ( ) { return siteIndexer.get ( ) ; }
public void hostIndex ( ) throws java.lang.Exception { assertRedirectsTo ( com.google.gitiles.GitilesView.hostIndex ( ) . setHostName ( com.google.gitiles.TestGitilesUrls.HOST_NAME ) . setServletPath ( com.google.gitiles.FakeHttpServletRequest.SERVLET_PATH ) . toUrl ( ) , com.google.gitiles.GitwebRedirectFilterTest.newRequest ( "a=project_index" ) ) ; }
public void setRevision ( final java.lang.String pattern ) { revision = pattern ; }
public void addQuery ( java.lang.String query ) { if ( ( queries ) == null ) { queries = new java.util.ArrayList < > ( ) ; } queries.add ( query ) ; }
private boolean isUiPlugin ( java.lang.String name ) { return ( isPlugin ( name , "js" ) ) || ( isPlugin ( name , "html" ) ) ; }
public com.google.gerrit.extensions.common.WebLinkInfo apply ( com.google.gerrit.extensions.webui.WebLink webLink ) { return ( ( com.google.gerrit.extensions.webui.PatchSetWebLink ) ( webLink ) ) . getPathSetWebLink ( project.get ( ) , commit ) ; }
public void remove ( ) { filter.destroy ( ) ; }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.CreateRequest input ) { return ( input.change ) != null ; }
public static void doSignIn ( ) { new com.google.gerrit.client.SignInDialog ( ) . center ( ) ; }
public com.google.gerrit.gpg.GerritPublicKeyChecker create ( ) { return new com.google.gerrit.gpg.GerritPublicKeyChecker ( this ) ; }
public static com.google.gerrit.server.index.IndexConfig createDefault ( ) { return com.google.gerrit.server.index.IndexConfig.create ( 0 , 0 , com.google.gerrit.server.index.IndexConfig.DEFAULT_MAX_TERMS ) ; }
public void run ( ) { closedIndex.close ( ) ; }
public static < T > com.google.gerrit.rules.StoredValue < T > create ( ) { return new com.google.gerrit.rules.StoredValue < T > ( ) ; }
public void hide ( final boolean autoClosed ) { com.google.gwtexpui.user.client.UserAgent.fireDialogVisible ( this , false ) ; super . hide ( autoClosed ) ; }
public static void deleteAssignee ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.AccountInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.change ( project , id ) . view ( "assignee" ) . delete ( cb ) ; }
public void remove ( com.google.gerrit.reviewdb.client.Account.Id id ) { cache.invalidate ( id ) ; }
public com.google.gerrit.reviewdb.client.Change update ( com.google.gerrit.reviewdb.client.Change change ) { if ( change.getStatus ( ) . isOpen ( ) ) { change.nextPatchSetId ( ) ; change.setLastSha1MergeTested ( null ) ; return change ; } else { return null ; } }
public com.google.gerrit.metrics.Timer0.Context start ( ) { return new com.google.gerrit.metrics.Timer0.Context ( this ) ; }
private com.google.gerrit.server.patch.PatchListKey getKey ( org.eclipse.jgit.lib.ObjectId revisionIdA , org.eclipse.jgit.lib.ObjectId revisionIdB ) { return new com.google.gerrit.server.patch.PatchListKey ( revisionIdA , revisionIdB , com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace.IGNORE_NONE ) ; }
public void flushAll_Forbidden ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.post ( "/config/server/caches/" , new com.google.gerrit.server.config.PostCaches.Input ( com.google.gerrit.server.config.PostCaches.Operation.FLUSH_ALL ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_FORBIDDEN ) ; }
public void onFailure ( java.lang.Throwable caught ) { }
public void onSuccess ( ) { com.google.gerrit.client.Gerrit.display ( token , new com.google.gerrit.client.documentation.DocScreen ( com.google.gerrit.client.Dispatcher.skip ( token ) ) ) ; }
private static com.google.gerrit.reviewdb.client.AuthType toType ( final org.eclipse.jgit.lib.Config cfg ) { return cfg.getEnum ( "auth" , null , "type" , AuthType.OPENID ) ; }
public java.lang.String getRemoteAddressAsString ( ) { return remoteAsString ; }
public java.lang.Object getScreenCacheToken ( ) { return this ; }
public org.eclipse.jgit.lib.Repository getRepository ( ) throws java.io.IOException { return this . getRepository ( ) ; }
private java.util.List < com.google.gerrit.reviewdb.RefRight > getInheritedRights ( com.google.gerrit.reviewdb.ApprovalCategory.Id actionId ) { return filter ( getProjectState ( ) . getInheritedRights ( actionId ) ) ; }
private com.google.gerrit.common.data.SubmitTypeRecord typeError ( java.lang.String err ) { return typeError ( err , null ) ; }
protected com.google.gerrit.client.patches.UnifiedDiffTable createContentTable ( ) { return new com.google.gerrit.client.patches.UnifiedDiffTable ( ) ; }
public static void invalidate ( final com.google.gerrit.client.reviewdb.Account acct ) { if ( acct != null ) { synchronized ( com.google.gerrit.server.ssh.SshUtil.keys ) { com.google.gerrit.server.ssh.SshUtil.keys.remove ( acct.getPreferredEmail ( ) ) ; } } }
protected < R extends com.google.gerrit.extensions.restapi.RestResource > com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder < R > post ( com.google.inject.TypeLiteral < com.google.gerrit.extensions.restapi.RestView < R > > viewType , java.lang.String name ) { return new com.google.gerrit.extensions.restapi.RestApiModule.ModifyViewBinder ( view ( viewType , com.google.gerrit.extensions.restapi.RestApiModule.POST , name ) ) ; }
public void onSuccess ( com.google.gerrit.client.rpc.NativeString result ) { cb.onSuccess ( ( result != null ? result.asString ( ) : null ) ) ; }
public short getMinAutomergeVote ( ) throws org.eclipse.jgit.errors.ConfigInvalidException { return ( ( short ) ( getConfig ( ) . getInt ( "global" , "minAutomergeVote" , ( - 2 ) ) ) ) ; }
public void run ( ) { try { java.nio.file.Files.walkFileTree ( gitDir.toPath ( ) , new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover ( ) ) ; } catch ( java.io.IOException e ) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn ( "Exception occured while trying to delete trash folders" , e ) ; } }
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChange ( project , changeId ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { sugestParent.setText ( getRowItem ( row ) . name ( ) ) ; }
public void addRefUpdate ( org.eclipse.jgit.transport.ReceiveCommand cmd ) throws java.io.IOException { initRepository ( ) ; commands.add ( cmd ) ; }
public void listTagsOfNonExistingProject_NotFound ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( adminSession.get ( "/projects/non-existing/tags" ) . getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
protected Project.NameKey getProjectName ( ) { return getChange ( ) . getProject ( ) ; }
public com.google.gerrit.extensions.restapi.Response < com.google.gerrit.extensions.common.ChangeInfo > apply ( com.google.gerrit.server.change.ChangeResource rsrc ) throws com.google.gerrit.extensions.restapi.RestApiException , com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Response.withMustRevalidate ( newChangeJson ( ) . format ( rsrc ) ) ; }
private com.google.gerrit.reviewdb.client.Change getChange ( ) { return notes.getChange ( ) ; }
public void setSubmitType ( final com.google.gerrit.reviewdb.Project.SubmitType type ) { submitType = type ; }
public final native void message ( java.lang.String m ) ;
protected void configure ( ) { bind ( com.google.gerrit.server.RequestCleanup.class ) . in ( com.google.inject.servlet.RequestScoped.class ) ; bind ( com.google.gerrit.server.config.RequestScopedReviewDbProvider.class ) ; bind ( IdentifiedUser.RequestFactory.class ) . in ( com.google.inject.Scopes.SINGLETON ) ; }
public void updateRepo ( com.google.gerrit.server.update.RepoContext ctx ) throws java.lang.Exception { ctx.addRefUpdate ( masterCommit.getId ( ) , branchCommit.getId ( ) , "refs/heads/master" ) ; }
public void printJson ( final java.lang.StringBuilder sb , final T o ) { sb.append ( '"' ) ; sb.append ( o.name ( ) ) ; sb.append ( '"' ) ; }
public static boolean skipField ( java.lang.reflect.Field field ) { int modifiers = field.getModifiers ( ) ; return ( java.lang.reflect.Modifier.isFinal ( modifiers ) ) || ( java.lang.reflect.Modifier.isTransient ( modifiers ) ) ; }
public void singleHeadText ( ) throws java.lang.Exception { setUpSimpleRefs ( ) ; com.google.gitiles.FakeHttpServletResponse res = buildText ( "/repo/+refs/heads/master" ) ; com.google.common.truth.Truth.assertThat ( res.getActualBodyString ( ) ) . isEqualTo ( ( ( id ( "refs/heads/master" ) ) + " refs/heads/master\n" ) ) ; }
com.google.gerrit.server.mail.AbandonedSender create ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id change ) ;
public final void update ( final java.lang.Iterable < E > instances ) throws com.google.gwtorm.client.OrmException { doUpdate ( instances ) ; }
public com.google.gerrit.client.reviewdb.PatchSetAncestor.Id getId ( ) { return key ; }
public void addPatchSets ( com.google.gerrit.server.events.ChangeAttribute a , java.util.Collection < com.google.gerrit.reviewdb.PatchSet > ps ) { addPatchSets ( a , ps , null , false , null ) ; }
public com.google.gerrit.client.ui.ListenableValue < com.google.gerrit.common.data.ChangeInfo > getChangeInfoCache ( ) { if ( ( info ) == null ) { info = new com.google.gerrit.client.ui.ListenableValue ( ) ; } return info ; }
public void setCommands ( java.util.List < com.google.gerrit.common.data.UiCommandDetail > cmds ) { commands = ( cmds.isEmpty ( ) ) ? null : cmds ; }
public Project.NameKey getProjectKey ( ) { return name ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gerrit.client.admin.EditConfigAction.call ( editConfig , getProjectKey ( ) ) ; }
public java.util.List < org.eclipse.jgit.revwalk.FooterLine > commitFooters ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { if ( ( commitFooters ) == null ) { loadCommitData ( ) ; } return commitFooters ; }
public static void edit ( @ com.google.gerrit.common.Nullable java.lang.String project , int id , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.info.ChangeInfo.EditInfo > cb ) { com.google.gerrit.client.changes.ChangeApi.edit ( project , id ) . get ( cb ) ; }
int getCookieAge ( final com.google.gerrit.httpd.WebSessionManager.Val val ) { if ( val.isPersistentCookie ( ) ) { return ( ( int ) ( java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( sessionMaxAgeMillis ) ) ) ; } return - 1 ; }
public com.google.gerrit.server.change.ChangeKind getChangeKind ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.PatchSet patch ) { return com.google.gerrit.server.change.ChangeKindCacheImpl.getChangeKindInternal ( this , db , change , patch , changeDataFactory , projectCache , repoManager ) ; }
public void onSuccess ( com.google.gerrit.client.projects.ProjectMap result ) { projects.display ( result ) ; }
private void logError ( java.lang.String msg ) { logError ( msg , null ) ; }
protected com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.client.Change c ) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes ( args , c ) . load ( ) ; }
public static com.google.gerrit.extensions.client.RangeSubject assertThat ( com.google.gerrit.extensions.client.Comment.Range range ) { return com.google.common.truth.Truth.assertAbout ( com.google.gerrit.extensions.client.RangeSubject :: new ) . that ( range ) ; }
com.google.gerrit.client.reviewdb.Account bySshUserName ( java.lang.String userName ) throws com.google.gwtorm.client.OrmException ;
public void run ( ) { }
public java.util.List < com.google.gerrit.extensions.common.ChangeInfo > submittedTogether ( ) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException ( ) ; }
private void assertProblems ( com.google.gerrit.gpg.PublicKeyChecker checker , com.google.gerrit.gpg.testutil.TestKey k , java.lang.String ... expected ) { com.google.gerrit.gpg.CheckResult result = checker.check ( k.getPublicKey ( ) ) ; org.junit.Assert.assertEquals ( java.util.Arrays.asList ( expected ) , result.getProblems ( ) ) ; }
private org.eclipse.jgit.lib.Ref getDraftRef ( com.google.gerrit.acceptance.TestAccount account , com.google.gerrit.reviewdb.client.Change.Id changeId ) throws java.lang.Exception { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( allUsers ) ) { return repo.exactRef ( com.google.gerrit.reviewdb.client.RefNames.refsDraftComments ( changeId , account.id ) ) ; } }
public com.google.gerrit.client.reviewdb.com.google.gwtorm [ ] members ( ) { return new com.google.gwtorm.client.Key < ? > [ ] { projectName } ; }
boolean canPerform ( java.lang.String permissionName ) { return canPerform ( permissionName , false , false ) ; }
protected void configure ( ) { bind ( com.google.gerrit.extensions.api.GerritApi.class ) . to ( com.google.gerrit.server.api.GerritApiImpl.class ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; install ( new com.google.gerrit.server.api.Module ( ) ) ; }
public static void included ( com.google.gerrit.reviewdb.client.AccountGroup.UUID group , com.google.gwt.user.client.rpc.AsyncCallback < com.google.gerrit.client.groups.GroupList > callback ) { new com.google.gerrit.client.rpc.RestApi ( "groups" ) . id ( group.get ( ) ) . view ( "groups" ) . get ( callback ) ; }
private com.google.gerrit.server.patch.PatchList listFor ( com.google.gerrit.server.patch.PatchListKey key ) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return patchListCache.get ( key , project ) ; }
public void testCreateLinkForWebUiEmptyText ( ) { mockUnconnectableStoryboard ( ) ; replayMocks ( ) ; com.googlesource.gerrit.plugins.its.storyboard.StoryboardItsFacade itsFacade = createStoryboardItsFacade ( ) ; java.lang.String actual = itsFacade.createLinkForWebui ( "Test-Url" , "" ) ; assertEquals ( "Test-Url" , actual ) ; }
protected java.lang.String getRefName ( ) { return com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName ( getId ( ) ) ; }
public void deleteDraftChange ( final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId , final com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwtjsonrpc.client.VoidResult > callback ) { deleteDraftChangeFactory.create ( patchSetId ) . to ( callback ) ; }
public com.google.gerrit.extensions.restapi.RestView < com.google.gerrit.server.config.ConfigResource > list ( ) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list ; }
private java.io.Writer newWriter ( javax.servlet.http.HttpServletResponse res ) throws java.io.IOException { return com.google.gitiles.BaseServlet.newWriter ( res.getOutputStream ( ) , res ) ; }
Timer1.Context start ( java.lang.String name ) { return execTime.start ( name ) ; }
java.lang.String status ( ) ;
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead ( ) throws java.io.IOException { try ( org.eclipse.jgit.lib.Repository repo = repoManager.openRepository ( project ) ) { return getHead ( repo , "refs/heads/master" ) ; } }
protected void setCacheHeaders ( javax.servlet.http.HttpServletResponse res ) { com.google.gitiles.BaseServlet.setNotCacheable ( res ) ; }
public void setPreviewText ( final java.lang.String text ) { if ( ( textLabel ) != null ) { textLabel.setText ( text ) ; } }
private com.google.inject.Module createIndexModule ( ) { switch ( indexType ) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.latestVersionWithOnlineUpgrade ( false ) ; case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.latestVersionWithOnlineUpgrade ( false ) ; default : throw new java.lang.IllegalStateException ( ( "unsupported index.type = " + ( indexType ) ) ) ; } }
protected abstract java.util.concurrent.Callable < ? > deleteTask ( com.google.gerrit.server.query.change.ChangeData cd ) ;
public void testInvalidSchemeInReplace ( ) { try { new com.google.gwtexpui.safehtml.client.LinkFindReplace ( "find" , "javascript:alert(1)" ) . replace ( "find" ) ; org.junit.Assert.fail ( "Expected IllegalStateException" ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }
public final native void topic ( java.lang.String t ) ;
private boolean allRefsAreVisible ( java.util.Set < java.lang.String > ignore ) { return ( user.isInternalUser ( ) ) || ( canPerformOnAllRefs ( Permission.READ , ignore ) ) ; }
public com.google.gerrit.server.mail.MergedSender create ( com.google.gerrit.reviewdb.client.Change.Id id ) ;
public void onLoad ( com.google.gerrit.plugin.client.extension.Panel panel ) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = panel.getObject ( GerritUiExtensionPoint.Key.REVISION_INFO ) . cast ( ) ; if ( rev.isEdit ( ) ) { return ; } panel.setWidget ( new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel ( panel , info ) ) ; }
long read ( ) { return generation.get ( ) ; }
public void setLoggedIn ( boolean b ) { loggedIn = b ; }
public void suggestReviewersNoResult1 ( ) throws java.lang.Exception { java.lang.String changeId = createChange ( ) . getChangeId ( ) ; java.util.List < com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo > reviewers = suggestReviewers ( changeId , "u" , 6 ) ; com.google.common.truth.Truth.assertThat ( reviewers ) . isEmpty ( ) ; }
public void run ( ) { resizePaddingOnOtherSide ( side , instance.getLineNumber ( handle ) ) ; }
public final native void matchBrackets ( boolean m ) ;
protected void onInitUI ( ) { super . onInitUI ( ) ; if ( ( name ) != null ) { setPageTitle ( Util.M.project ( name.get ( ) ) ) ; } }
private void addGroup ( ) { com.google.gerrit.common.data.GroupReference ref = groupToAdd.getValue ( ) ; if ( ref != null ) { addGroup ( ref ) ; } else { groupToAdd.setFocus ( true ) ; } }
com.google.gerrit.extensions.client.ChangeKind getChangeKind ( @ com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Repository repo , @ com.google.gerrit.common.Nullable org.eclipse.jgit.revwalk.RevWalk rw , com.google.gerrit.server.query.change.ChangeData cd , com.google.gerrit.reviewdb.client.PatchSet patch ) ;
public void getTask_NotFound ( ) throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = userSession.get ( ( "/config/server/tasks/" + ( getLogFileCompressorTaskId ( ) ) ) ) ; com.google.common.truth.Truth.assertThat ( r.getStatusCode ( ) ) . isEqualTo ( HttpStatus.SC_NOT_FOUND ) ; }
public void init ( javax.servlet.FilterConfig filterConfig ) throws javax.servlet.ServletException { }
private com.google.gerrit.server.git.GroupList readGroupList ( ) throws java.io.IOException { return com.google.gerrit.server.git.GroupList.parse ( new com.google.gerrit.reviewdb.client.Project.NameKey ( project ) , readUTF8 ( GroupList.FILE_NAME ) , com.google.gerrit.server.git.GroupList.createLoggerSink ( GroupList.FILE_NAME , com.google.gerrit.pgm.init.api.AllProjectsConfig.log ) ) ; }
private static com.google.gerrit.server.query.Predicate < com.google.gerrit.server.query.change.ChangeData > commit ( java.lang.String id ) { return new com.google.gerrit.server.query.change.CommitPredicate ( id ) ; }
private com.google.gerrit.server.account.AuthResult auth ( final com.google.gerrit.reviewdb.Account account ) { if ( account != null ) { return new com.google.gerrit.server.account.AuthResult ( account.getId ( ) , null , false ) ; } return null ; }
public void testGcNotAllowed_Forbidden ( ) throws com.google.gwtorm.server.OrmException , com.jcraft.jsch.JSchException , java.io.IOException { org.junit.Assert.assertEquals ( HttpStatus.SC_FORBIDDEN , new com.google.gerrit.acceptance.RestSession ( server , accounts.create ( "user" , "user@example.com" , "User" ) ) . post ( ( ( "/projects/" + ( allProjects.get ( ) ) ) + "/gc" ) ) . getStatusCode ( ) ) ; }
public int compare ( final com.google.gerrit.reviewdb.client.PatchSetApproval a , final com.google.gerrit.reviewdb.client.PatchSetApproval b ) { return a.getGranted ( ) . compareTo ( b.getGranted ( ) ) ; }
private boolean publishEvent ( com.google.gerrit.server.events.Event event ) { return session.publish ( gson.toJson ( event ) ) ; }
public T get ( I input ) throws com.google.gwtorm.server.OrmException { try { return getter.get ( input ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } }
public synchronized void start ( ) { com.google.gerrit.server.plugins.PluginLoader.log.info ( ( "Loading plugins from " + ( pluginsDir.getAbsolutePath ( ) ) ) ) ; rescan ( false ) ; scanner.start ( ) ; }
public void onSuccess ( com.google.gerrit.client.VoidResult result ) { com.google.gerrit.client.Gerrit.display ( com.google.gerrit.common.PageLinks.toChangeInEditMode ( project , changeId ) ) ; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig ( boolean publishOnPatchSetCreated ) throws java.lang.Exception { return getConfig ( "^WIP.*" , publishOnPatchSetCreated , true , true , true ) ; }
public com.google.common.base.Optional < com.google.gerrit.server.plugins.PluginEntry > getEntry ( java.lang.String resourcePath ) throws java.io.IOException { return webScanner.getEntry ( resourcePath ) ; }
public com.google.gerrit.server.IdentifiedUser create ( com.google.gerrit.reviewdb.client.Account.Id id ) { return create ( ( ( java.net.SocketAddress ) ( null ) ) , id ) ; }
void syncScroll ( com.google.gerrit.client.diff.DisplaySide masterSide ) { if ( ( scrollSynchronizer ) != null ) { scrollSynchronizer.syncScroll ( masterSide ) ; } }
public boolean apply ( com.google.gerrit.reviewdb.client.PatchSetApproval input ) { return user.equals ( input.getAccountId ( ) ) ; }
private javax.servlet.http.HttpServletRequest enrichAuthenticatedRequest ( javax.servlet.http.HttpServletRequest httpRequest , com.googlesource.gerrit.plugins.github.oauth.OAuthCookie authCookie ) { httpRequest = ( authCookie == null ) ? httpRequest : new com.googlesource.gerrit.plugins.github.oauth.AuthenticatedHttpRequest ( httpRequest , config.httpHeader , authCookie.user ) ; return httpRequest ; }
public void setChange ( com.google.gerrit.reviewdb.client.Project.NameKey project , com.google.gerrit.reviewdb.client.Change.Id changeId ) { this . project = project ; this . changeId = changeId ; }
private void save ( ) { try { saveSecure ( sec ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( "Cannot save secure.config" , e ) ; } }
public void testWithoutSubmodule ( ) throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithoutSubmodule ( ) ; java.util.List < com.google.gerrit.server.git.validators.CommitValidationMessage > m = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation ( repo , c ) ; com.google.common.truth.Truth.assertThat ( m ) . isEmpty ( ) ; }
private void deletePatchSet ( java.lang.String changeId , com.google.gerrit.reviewdb.client.PatchSet ps ) throws java.lang.Exception { deletePatchSet ( changeId , ps.getId ( ) . get ( ) ) ; }
public void close ( ) { }
protected void submit ( java.lang.String changeId ) throws java.lang.Exception { submit ( changeId , new com.google.gerrit.extensions.api.changes.SubmitInput ( ) , null , null , true ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { com.google.gerrit.client.Gerrit.display ( event.getValue ( ) ) ; }
public java.lang.String getShortName ( ) { final java.lang.String n = get ( ) ; if ( n.startsWith ( "refs/heads/" ) ) { return n.substring ( "refs/heads/" . length ( ) ) ; } return n ; }
public void setUp ( ) throws java.lang.Exception { repo = com.google.gerrit.acceptance.GitUtil.newTestRepository ( repoManager.openRepository ( project ) ) ; blockRead ( "refs/*" ) ; }
public short getSide ( ) { return side ; }
public boolean isEmpty ( ) { return ( deleteComments.isEmpty ( ) ) && ( upsertComments.isEmpty ( ) ) ; }
public com.google.gerrit.server.account.CapabilityControl getCapabilities ( ) { if ( ( capabilities ) == null ) { capabilities = capabilityControlFactory.create ( this ) ; } return capabilities ; }
public boolean apply ( com.google.gerrit.server.git.ReceiveCommits.CreateRequest input ) { return ( input.change ) != null ; }
private boolean error ( java.lang.String msg , java.lang.Throwable t ) { problem ( msg ) ; warn ( t ) ; return false ; }
private static void h ( final java.lang.StringBuilder r , final com.google.gerrit.client.reviewdb.Branch.NameKey branch ) { com.google.gerrit.client.data.GitwebLink.var ( r , "h" , branch.get ( ) ) ; }
private com.google.gerrit.server.notedb.ChangeNotes newNotes ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change ) throws com.google.gwtorm.server.OrmException { return notesFactory.create ( db , change.getProject ( ) , change.getId ( ) ) ; }
private synchronized com.google.gitiles.Linkifier linkifier ( ) { if ( ( linkifier ) == null ) { com.google.common.base.Preconditions.checkState ( ( ( urls ) != null ) , "GitilesUrls not yet set" ) ; linkifier = new com.google.gitiles.Linkifier ( urls , config ) ; } return linkifier ; }
public void nameEscaperDoesNotEscapeSlashes ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( com.google.gitiles.GitilesUrls.NAME_ESCAPER.apply ( "foo/bar" ) ) . isEqualTo ( "foo/bar" ) ; }
private static void h ( final java.lang.StringBuilder r , final com.google.gerrit.client.reviewdb.PatchSet ps ) { com.google.gerrit.client.data.GitwebLink.var ( r , "h" , ps.getRevision ( ) ) ; }
