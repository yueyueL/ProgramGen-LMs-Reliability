void vdsNotResponding ( org.ovirt.engine.core.common.businessentities.VDS vds , boolean executeSshSoftFencing , long lastUpdate ) ;
public java.lang.Object runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( domainInDb.getId ( ) , _storagePoolId ) ) ; return null ; }
public void removeItem ( com.google.gwt.user.cellview.client.Column < T , ? > column ) { org.ovirt.engine.ui.common.widget.table.ColumnContextMenuItem < T > removedItem = items.remove ( column ) ; if ( removedItem != null ) { container.remove ( removedItem ) ; } }
public void validateBlockToFileSupported ( ) { storagePool.setCompatibilityVersion ( Version.v3_6 ) ; validateInvalidDestinationAndSourceDomainOfDifferentStorageSubtypes ( StorageType.ISCSI , StorageType.NFS ) ; }
public void getAllForVmForUnprivilegedUserWithNoFilter ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( FixturesTool.VM_RHEL5_POOL_50 , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; assertVmGuestAgentInterfaceForVm ( interfaces ) ; }
public void setSearchString ( java.lang.String value , boolean checkIfNewValue ) { if ( ( value == null ) || ( ! ( containsTokens ( value , SyntaxObjectType.SORTBY , SyntaxObjectType.PAGE , SyntaxObjectType.SORT_DIRECTION ) ) ) ) { setSearchStringImpl ( value , checkIfNewValue ) ; } }
protected void executeQuery ( ) { org.ovirt.engine.core.common.businessentities.LdapUser user = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getUserById ( getUserId ( ) ) ; if ( user != null ) { setSucceeded ( true ) ; setReturnValue ( user ) ; } else { setSucceeded ( false ) ; } }
public void clearCache ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.info ( "clearing cache for problematic entities in pool '{}'." , _storagePoolId ) ; _timers.clear ( ) ; _domainsInProblem.clear ( ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( ( "HostDevice{hostId=%s, deviceName='%s', parentDeviceName='%s', capability='%s', iommuGroup=%d, " + "productName='%s', productId='%s', vendorName='%s', vendorId='%s', parentPhysicalFunction='%s', totalVirtualFunctions=%s, networkInterfaceName='%s', vmId=%s}" ) , hostId , deviceName , parentDeviceName , capability , iommuGroup , productName , productId , vendorName , vendorId , parentPhysicalFunction , totalVirtualFunctions , networkInterfaceName , vmId ) ; }
public org.ovirt.engine.api.resource.AffinityGroupsResource getAffinityGroupsResource ( ) { return org.ovirt.engine.api.restapi.resource.BackendClusterResource.inject ( new org.ovirt.engine.api.restapi.resource.BackendAffinityGroupsResource ( id ) ) ; }
public void macAddressIsNullForVmNicUpdate ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.assertNicValidation ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.createNic ( null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_NAME , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , org.ovirt.engine.core.common.validation.group.UpdateVmNic.class , true , VmNetworkInterface.VALIDATION_MESSAGE_MAC_ADDRESS_NOT_NULL ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getImages ( ) { return java.util.Collections.< org.ovirt.engine.core.common.businessentities.storage.DiskImage > emptyList ( ) ; }
protected void removeVmSnapshots ( ) { org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.bll.ImportVmCommand.getVmId ( ) ; java.util.Set < java.lang.String > memoryStates = snapshotsManager.removeSnapshots ( vmId ) ; for ( java.lang.String memoryState : memoryStates ) { removeMemoryVolumes ( memoryState , vmId ) ; } }
public static org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.dbFacade ) == null ) { synchronized ( org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.class ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.dbFacade ) == null ) { org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.dbFacade = org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.createDbFacade ( ) ; } } } return org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.dbFacade ; }
private org.ovirt.engine.core.common.businessentities.VDS createHost ( final org.ovirt.engine.core.common.businessentities.Cluster cluster ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vds.setClusterId ( cluster.getId ( ) ) ; return vds ; }
public boolean test ( org.ovirt.engine.core.bll.validator.network.NetworkType networkType ) { return ! ( NetworkType.VLAN.equals ( networkType ) ) ; }
private void updateLUNConnectionsInfo ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { lun.setLunConnections ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getDbFacade ( ) . getStorageServerConnectionDao ( ) . getAllForLun ( lun.getLUN_id ( ) ) ) ) ; }
protected org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network model ) { org.ovirt.engine.api.model.Qos qos = model.getQos ( ) ; if ( qos != null ) { qos.setDataCenter ( model.getDataCenter ( ) ) ; } return model ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > getClusterNetworks ( org.ovirt.engine.core.common.businessentities.VDS host ) { return networkDao.getAllForCluster ( host.getClusterId ( ) ) ; }
org.ovirt.engine.core.bll.validator.NetworkValidator getNetworkValidator ( ) { if ( ( networkValidator ) == null ) { networkValidator = new org.ovirt.engine.core.bll.validator.NetworkValidator ( vmDao , getNetwork ( ) ) ; } return networkValidator ; }
public org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel getSelectedHasConsoleModel ( ) { if ( ( ( selectedHasConsoleModels ) == null ) || ( ( selectedHasConsoleModels.size ( ) ) != 1 ) ) { return null ; } return selectedHasConsoleModels.get ( 0 ) ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { contentPanel.markAsInvalid ( validationHints ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; postOnSave ( ) ; } }
private boolean activateDeactivateVmNicAllowed ( org.ovirt.engine.core.common.businessentities.VMStatus vmStatus ) { return ( ( vmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( vmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) ) || ( vmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) ; }
public void addColumnWithHtmlHeader ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerHtml , java.lang.String width ) { table.addColumnWithHtmlHeader ( column , headerHtml , width ) ; tableHeader.addColumnWithHtmlHeader ( column , headerHtml , width ) ; }
private boolean isUpdatedToShareable ( org.ovirt.engine.core.common.businessentities.storage.Disk oldDisk , org.ovirt.engine.core.common.businessentities.storage.Disk newDisk ) { return ( newDisk.isShareable ( ) ) && ( ! ( oldDisk.isShareable ( ) ) ) ; }
protected org.ovirt.engine.core.compat.Guid getStoragePoolIdFromSourceImageContainer ( ) { return vmDisksSource.getStoragePoolId ( ) ; }
protected org.ovirt.engine.api.model.Host doPopulate ( org.ovirt.engine.api.model.Host model , org.ovirt.engine.core.common.businessentities.VDS entity ) { org.ovirt.engine.api.model.Host host = addHostedEngineIfConfigured ( model , entity ) ; return host ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.Provider ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public org.ovirt.engine.sdk.web.HttpProxy build ( ) { return new org.ovirt.engine.sdk.web.HttpProxy ( pool , persistentAuth , sessionid , filter , debug ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; redraw ( ) ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( ) ; setupCpu ( ) ; VdsExist ( ) ; canDoActionFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
protected void setImagesWithStoragePoolId ( org.ovirt.engine.core.compat.Guid storagePoolId , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages ) { diskImage.setStoragePoolId ( storagePoolId ) ; } }
private java.lang.String getValueText ( org.ovirt.api.metamodel.concepts.EnumValue value ) { return value.getName ( ) . words ( ) . map ( java.lang.String :: toLowerCase ) . collect ( java.util.stream.Collectors.joining ( "_" ) ) ; }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn glusterVolumeCreate ( java.lang.String volumeName , java.lang.String [ ] brickList , int replicaCount , int stripeCount , java.lang.String [ ] transportList , boolean force , boolean arbiter ) ;
static void verifyModelSpecific ( org.ovirt.engine.api.model.Cdrom model , int index ) { org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.verifyModelWithIso ( model , org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.ISO_PATH ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBondWithNameAndId ( ) ; doTestValidModifiedBonds ( createOrUpdateBond , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , createOrUpdateBond.getName ( ) ) ) , ValidationResult.VALID ) ; }
private void updateDisplayNetwork ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel , boolean value ) { networks.asEditor ( ) . flush ( ) . setDisplayNetwork ( clusterNetworkModel , value ) ; }
public java.lang.Boolean getIs_local_storage ( ) { return this . is_local_storage ; }
public int getNumOfMonitors ( ) { return this . vmStatic.getnum_of_monitors ( ) ; }
public static boolean canRemoveVmPoolWithoutReasons ( org.ovirt.engine.core.compat.Guid vmPoolId ) { java.util.ArrayList < java.lang.String > reasons = new java.util.ArrayList < java.lang.String > ( ) ; return org.ovirt.engine.core.bll.RemoveVmPoolCommand.canRemoveVmPool ( vmPoolId , reasons ) ; }
public abstract java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VmDevice > getManagedDeviceMap ( ) ;
public void setTitle ( java.lang.String title ) { this . consoleOptions.setTitle ( title ) ; }
private static void addSoundCard ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSoundCard ( vmBase , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vmBase ) ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase checkAndPerformRollbackUsingCommand ( org.ovirt.engine.core.common.action.VdcActionType commandType , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.core.bll.context.CommandContext context ) { return attemptRollback ( commandType , params , context ) ; }
public void validateFailsOnSnapshotNotExists ( ) { org.mockito.Mockito.when ( snapshotDao.exists ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( spyCommand , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
protected void configure ( ) { super . configure ( ) ; bind ( org.ovirt.engine.ui.webadmin.widget.tab.WebadminMenuLayout.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.common.widget.tab.MenuLayout.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.webadmin.section.main.presenter.SearchStringCollector.class ) . asEagerSingleton ( ) ; }
public java.lang.String getNewParentTagName ( ) { org.ovirt.engine.core.common.businessentities.Tags newParent = org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . getTagById ( org.ovirt.engine.core.bll.MoveTagCommand.getParameters ( ) . getNewParentId ( ) ) ; if ( newParent != null ) { return newParent.gettag_name ( ) ; } return "[null]" ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateByName ( org.ovirt.engine.api.model.Template template ) { return lookupTemplateByName ( template.getName ( ) ) ; }
private boolean isNetworkChanged ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface ) { return ! ( org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getNetworkName ( ) . equals ( iface.getNetworkName ( ) ) ) ; }
public org.ovirt.engine.api.model.Role update ( org.ovirt.engine.api.model.Role role ) { validateEnums ( org.ovirt.engine.api.model.Role.class , role ) ; return performUpdate ( role , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetRoleById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , VdcActionType.UpdateRole , new org.ovirt.engine.api.restapi.resource.BackendRoleResource.UpdateParametersProvider ( ) ) ; }
java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > > getVmNumaNodeInfoByClusterId ( org.ovirt.engine.core.compat.Guid clusterId ) ;
private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring ( org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher , long fetchTime ) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring ( vdsManager , fetcher.getChangedVms ( ) , fetcher.getVmsWithChangedDevices ( ) , auditLogDirector , fetchTime , isTimeToRefreshStatistics ( ) ) ; }
public void execute ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine ( ( ( this . getClass ( ) . getName ( ) ) + ": Executing search" ) ) ; if ( getIsAsync ( ) ) { asyncSearch ( ) ; } else { syncSearch ( ) ; } }
private org.ovirt.engine.core.common.businessentities.ErrataData getErrataData ( ) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = new org.ovirt.engine.core.common.businessentities.ErrataData ( ) ; errataData.setErrata ( getErrata ( ) ) ; return errataData ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , appList , creationDate , description , memoryVolume , status , type , vmConfiguration , vmId , diskImages , vmConfigurationBroken ) ; }
public void testInterfaceAlreadyLabeledWithWhenInterfaceIsLabeledByDifferentLabel ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setLabels ( java.util.Collections.singleton ( "labelB" ) ) ; org.hamcrest.MatcherAssert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceAlreadyLabeledWith ( "labelA" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.vdsmfake.domain.Host getActiveHostByName ( java.lang.String serverName ) { return vdsmManager.getHostByName ( serverName ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object ) { driver.edit ( object ) ; initLists ( object ) ; }
private boolean destinationHasSpace ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator sdv = new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.MoveVmCommand.getStorageDomain ( ) ) ; return ( validate ( sdv.isDomainWithinThresholds ( ) ) ) && ( validate ( sdv.hasSpaceForClonedDisks ( diskImages ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.CommandEntity createCommandEntity ( org.ovirt.engine.core.compat.Guid cmdId , org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.ActionParametersBase params ) { return coCoAsyncTaskHelper.createCommandEntity ( cmdId , actionType , params ) ; }
public void getUsbPolicyIsSetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.DISABLED ) ; }
protected java.util.function.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > getPredicate ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { return ( storageDomain ) -> ! ( sdToReject.equals ( storageDomain ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageType getEnum ( org.ovirt.engine.core.common.businessentities.StoragePool storage ) { return storage.getStorageType ( ) ; }
public void setLabelsModel ( org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel labels ) { this . labelsModel = labels ; }
public void testGetIscsiBondByIscsiBondId ( ) { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = dao.get ( iscsiBondId ) ; org.junit.Assert.assertNotNull ( iscsiBond ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { onRestoreFromExportDomain ( ) ; }
public void testLoginNameAtDirectoryWhenDirectorySet ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; user.setLoginName ( "Legolas" ) ; user.setDomain ( "MiddleEarth.com" ) ; command.setCurrentUser ( user ) ; org.junit.jupiter.api.Assertions.assertEquals ( "Legolas@MiddleEarth.com" , command.getConsoleUserName ( ) ) ; }
protected void initParametersForPassthroughVnics ( ) { org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setPassthroughVnicToVfMap ( getVnicToVfMap ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) ) ) ; vfScheduler.cleanVmData ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ; }
public void setVdsName ( java.lang.String value ) { this . name = value ; }
public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.DbUser user ) { return user.getLastName ( ) ; }
public void execute ( ) { if ( ( ( canInvokePlugins ) && ( plugin.isInState ( PluginState.IN_USE ) ) ) && ( condition.canInvoke ( plugin ) ) ) { invokePlugin ( plugin , functionName , functionArgs ) ; } }
public void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.String > aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.StringConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.dao.VmDeviceDAO dao = org.ovirt.engine.core.bll.IsBalloonEnabledQuery.getDbFacade ( ) . getVmDeviceDao ( ) ; org.ovirt.engine.core.bll.IsBalloonEnabledQuery.getQueryReturnValue ( ) . setReturnValue ( dao.isMemBalloonEnabled ( org.ovirt.engine.core.bll.IsBalloonEnabledQuery.getParameters ( ) . getId ( ) ) ) ; }
public void getHostArchitecture ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.ArchitectureType > aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostArchitecture , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createSparseDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setVolumeType ( VolumeType.Sparse ) ; image.setDiskInterface ( DiskInterface.IDE ) ; return image ; }
public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc glusterStorageDeviceList ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterHost.storageDevicesList" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc ( response ) ; }
public static boolean isMatch ( java.lang.String searchString , java.lang.String pageStringRegex , int ignorecase ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
public void updateFCPUnsupportedConnectionType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections dummyFCPConn = createISCSIConnection ( "10.35.16.25" , StorageType.FCP , "" , "3260" , "user1" , "mypassword123" ) ; parameters.setStorageServerConnection ( dummyFCPConn ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE_TYPE ) ; }
private org.ovirt.engine.api.model.NetworkLabel getModel ( int i ) { org.ovirt.engine.api.model.NetworkLabel model = new org.ovirt.engine.api.model.NetworkLabel ( ) ; model.setId ( org.ovirt.engine.api.restapi.resource.BackendHostNicLabelsResourceTest.LABELS [ i ] ) ; return model ; }
public void networkNotInUseByVms ( ) throws java.lang.Exception { networkNotUsedByVmsTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.VM > emptyList ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return object.getName ( ) ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQuery ( org.ovirt.engine.core.common.queries.QueryType actionType , org.ovirt.engine.core.common.queries.QueryParametersBase parameters ) { return runQueryImpl ( actionType , parameters , true , null ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... parameters ) { executeCommand ( uiCommand ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { executeCommand ( getSuspendCommand ( ) ) ; }
public void spiceConnect ( ) { try { getspice ( ) . invokeClient ( ) ; } catch ( java.lang.RuntimeException ex ) { getLogger ( ) . error ( "Exception on Spice connect" , ex ) ; } }
protected void verifyModel ( org.ovirt.engine.api.model.ExternalDiscoveredHost model , int index ) { org.junit.Assert.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; verifyLinks ( model ) ; }
public org.ovirt.engine.core.bll.ValidationResult portMirroringNotSetIfExternalNetwork ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return ( ! ( nic.isPortMirroring ( ) ) ) || ( ! ( network.isExternal ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_PORT_MIRRORED ) ; }
private void markCurrentCmdlineAsStored ( ) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getVds ( ) . getStaticData ( ) ; vdsStaticDao.updateLastStoredKernelCmdline ( vdsStatic.getId ( ) , vdsStatic.getCurrentKernelCmdline ( ) ) ; }
protected void onRemove ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value , org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget widget ) { super . onRemove ( value , widget ) ; model.updateKeys ( ) ; widgets.remove ( widget ) ; }
public void setInfo ( java.lang.String value ) { setinfo ( value ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Info" ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds ( diskImages ) ) ; }
protected org.ovirt.engine.api.model.Disk getUpdate ( ) { org.ovirt.engine.api.model.Disk update = new org.ovirt.engine.api.model.Disk ( ) ; update.setWipeAfterDelete ( false ) ; update.setReadOnly ( false ) ; return update ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( ( getGeoRepSession ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GeoRepSessionStatus.PASSIVE ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_PAUSED ) ; } return true ; }
protected javax.ws.rs.core.UriInfo setUpRestoreExpectations ( ) { return setUpActionExpectations ( ActionType.RestoreAllSnapshots , org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters.class , new java.lang.String [ ] { "VmId" , "SnapshotAction" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.VM_ID , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT } , true , true , null ) ; }
protected org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand < org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters > getRemoveSnapshotCommand ( org.ovirt.engine.core.compat.Guid cmdId ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand ( cmdId ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic result = dao.get ( existingVds.getvds_name ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingVds.getvds_name ( ) , result.getvds_name ( ) ) ; }
public void addError ( java.lang.String error ) { }
public void cancelTasks ( final org.ovirt.engine.core.bll.CommandBase command ) { coCoAsyncTaskHelper.cancelTasks ( command , org.ovirt.engine.core.bll.tasks.CommandCoordinatorImpl.log ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.REMOTE_VM , getVmIsBeingRemovedFromExportDomainMessage ( ) ) ) ; }
protected boolean isVirtioScsiEnabled ( ) { java.lang.Boolean virtioScsiEnabled = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . isVirtioScsiEnabled ( ) ; return virtioScsiEnabled != null ? virtioScsiEnabled : isVirtioScsiEnabledForVm ( getVmId ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object.getDiskTemplateMap ( ) . size ( ) ) ; }
public void testValidateImageHasParent ( ) { getDiskImage ( ) . setParentId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED ) ; }
public void testAddDefaultQuota ( ) { org.ovirt.engine.core.bll.AddQuotaCommand command = createCommand ( ) ; command.getParameters ( ) . getQuota ( ) . setDefault ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID ) ; }
public void endStepJob ( org.ovirt.engine.core.common.job.Step step ) { jobRepository.updateStep ( step ) ; org.ovirt.engine.core.bll.job.ExecutionContext finalContext = executionHandler.createFinalizingContext ( step.getId ( ) ) ; executionHandler.endTaskStepAndJob ( finalContext , isTaskSuccess ( step.getStatus ( ) ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookDisable ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName ) ;
private org.ovirt.engine.core.common.scheduling.AffinityGroup createAffinityGroup ( ) { affinityGroup = new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ; affinityGroup.setName ( org.ovirt.engine.core.bll.scheduling.commands.EditAffinityGroupCommandTest.AFFINITY_GROUP_NAME ) ; affinityGroup.setClusterId ( clusterId ) ; affinityGroup.setVmIds ( new java.util.ArrayList < > ( ) ) ; return affinityGroup ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VolumeInfoReturnForXmlRpc getVolumeInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) ;
public int getRow ( ) { return ( autoPlacement ) && ( ( autoPlacementRow ) != ( org.ovirt.engine.ui.common.widget.form.FormItem.UNASSIGNED_ROW ) ) ? autoPlacementRow : row ; }
public void testValidModifiedBondsFailsWhenBondNotHaveNameAndId ( ) throws java.lang.Exception { doTestValidModifiedBonds ( new org.ovirt.engine.core.common.businessentities.network.Bond ( ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.BOND_DOES_NOT_HAVE_NEITHER_ID_NOR_NAME_SPECIFIED ) , ValidationResult.VALID ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.AlignmentScanReturnForXmlRpc getDiskAlignment ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > driveSpecs ) ;
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture ( org.ovirt.engine.core.common.businessentities.VDSGroup group ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( group.getCpuName ( ) ) ) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getArchitectureByCpuName ( group.getCpuName ( ) , group.getCompatibilityVersion ( ) ) ; } return group.getArchitecture ( ) ; }
private void onSaveVm ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( getWindow ( ) ) ) ; java.lang.String name = model.getName ( ) . getEntity ( ) ; setcurrentVm ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) ; validateVm ( model , name ) ; }
public void validateFailsWithEmptyBricksList ( ) { cmd.getParameters ( ) . setBricks ( java.util.Collections.emptyList ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID ) ; }
public void setExpectedValue ( java.lang.String value ) { this . expectedValue = value ; }
public void setAdditionalConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel value ) { if ( ( additionalConsoleModel ) != value ) { additionalConsoleModel = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AdditionalConsoleModel" ) ) ; } }
void localize ( ) { closeButton.setText ( org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.closeButtonLabel ( ) ) ; titleLabel.setText ( org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.aboutPopupCaption ( ) ) ; copyrightNotice.setText ( dynamicMessages.copyRightNotice ( ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { updateProvisionedHosts ( ) ; }
protected java.lang.String getIpv6Pattern ( ) { return org.ovirt.engine.core.common.utils.ValidationUtils.IPV6_PATTERN ; }
private boolean isVmInPool ( org.ovirt.engine.core.compat.Guid vmId ) { return ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) . getVmPoolId ( ) ) != null ; }
public java.util.Map < java.lang.String , java.lang.Object > add_image_ticket ( java.lang.String ticketId , java.lang.String [ ] ops , long timeout , long size , java.lang.String url ) ;
public void setConsoleCurrentUserName ( java.lang.String consoleCurUserName ) { this . consoleCurUserName = consoleCurUserName ; }
public int hashCode ( ) { return java.util.Objects.hash ( addr , description , gateway , id , name , vdsmName , dataCenterId , stp , subnet , type , vlanId , mtu , vmNetwork , providedBy , label , qosId ) ; }
private void runAndAssertCanDoActionSuccess ( ) { boolean canDoAction = command.canDoAction ( ) ; org.ovirt.engine.core.bll.AddDiskToVmCommandTest.log.info ( command.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; org.junit.Assert.assertTrue ( canDoAction ) ; }
public org.ovirt.engine.core.aaa.DirectoryGroup findGroupById ( java.lang.String id ) { return null ; }
public java.lang.Integer getKsmCpuPercent ( ) { return this . mVdsStatistics.getKsmCpuPercent ( ) ; }
public void updateModelBySnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { setDisks ( new java.util.ArrayList ( snapshot.getDiskImages ( ) ) ) ; getMemory ( ) . setEntity ( snapshot.containsMemory ( ) ) ; }
public void testAddValueGuid ( ) { org.ovirt.engine.core.compat.Guid guid = new org.ovirt.engine.core.compat.Guid ( java.util.UUID.randomUUID ( ) ) ; paramSource.addValue ( paramName , guid ) ; org.junit.Assert.assertEquals ( "wrong value returned from parameter source" , guid.getUuid ( ) , paramSource.getValue ( paramName ) ) ; }
protected org.ovirt.engine.ui.common.widget.dialog.ShapedButton createIncludeButton ( ) { return new org.ovirt.engine.ui.common.widget.dialog.ShapedButton ( org.ovirt.engine.ui.common.widget.HorizontalSplitTable.resources.arrowDownNormal ( ) , org.ovirt.engine.ui.common.widget.HorizontalSplitTable.resources.arrowDownClick ( ) , org.ovirt.engine.ui.common.widget.HorizontalSplitTable.resources.arrowDownOver ( ) , org.ovirt.engine.ui.common.widget.HorizontalSplitTable.resources.arrowDownDisabled ( ) ) ; }
private static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsNetworkInterfaceWithStaticIp ( java.lang.String ip ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface networkInterface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; networkInterface.setIpv4Address ( ip ) ; networkInterface.setIpv4BootProtocol ( Ipv4BootProtocol.STATIC_IP ) ; return networkInterface ; }
public void validateBondOptionsForNewAttachementWithOutOfSyncVmNetworkNotOverridden ( ) { validateValidBondsForAllBondModes ( true , true , false , false ) ; }
private void assertPostZeroValue ( org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction parameters , boolean postZeroExpectedValue ) { org.junit.jupiter.api.Assertions.assertEquals ( parameters.getPostZero ( ) , postZeroExpectedValue , java.text.MessageFormat.format ( "Wrong VDS command parameters: 'postZero' should be {0}." , postZeroExpectedValue ) ) ; }
public javax.ws.rs.core.Response activate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( guid , vmId ) ) ; return doAction ( VdcActionType.HotPlugDiskToVm , params , action ) ; }
public long getLastUpdateElapsed ( ) { return ( lastUpdate ) - ( updateStartTime ) ; }
private void initializeCommand ( org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params ) { initializeCommand ( params , java.util.Collections.singletonList ( createVmStatusDown ( ) ) ) ; }
public org.ovirt.engine.api.v3.servers.V3GraphicsConsolesServer getGraphicsConsolesResource ( ) { return new org.ovirt.engine.api.v3.servers.V3GraphicsConsolesServer ( getDelegate ( ) . getGraphicsConsolesResource ( ) ) ; }
public void shouldDetectDifferentOs ( ) { org.hamcrest.MatcherAssert.assertThat ( new org.ovirt.engine.core.bll.scheduling.OS ( "os1" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) . isSameOsFamily ( new org.ovirt.engine.core.bll.scheduling.OS ( "os2" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) ) , org.hamcrest.core.Is.is ( false ) ) ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getCreatedTaskType ( ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.uploadImageToStream ; }
protected void setPort ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( vds.getPort ( ) ) == 0 ) { getPort ( ) . setEntity ( org.ovirt.engine.ui.uicommonweb.models.hosts.NewHostModel.NewHostDefaultPort ) ; } }
private void UpdateVmTemplate ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . update ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId ( ) , org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters ( ) . getVmTemplateData ( ) . isSmartcardEnabled ( ) ) ; }
public static java.util.Map < org.ovirt.engine.core.common.EventNotificationEntity , java.util.HashSet < org.ovirt.engine.core.common.AuditLogType > > getAvailableNotificationEvents ( ) { return org.ovirt.engine.core.common.VdcEventNotificationUtils.getNotificationEvents ( ) ; }
public void testMethodAllowsConcurrent ( ) { org.junit.jupiter.api.Assertions.assertFalse ( org.ovirt.engine.core.utils.timer.JobWrapper.methodAllowsConcurrent ( new org.ovirt.engine.core.utils.timer.JobWrapperTest.Dummy ( ) , "serialOnly" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( org.ovirt.engine.core.utils.timer.JobWrapper.methodAllowsConcurrent ( new org.ovirt.engine.core.utils.timer.JobWrapperTest.Dummy ( ) , "normalJob" ) ) ; }
public static org.ovirt.engine.core.common.action.VdcActionParametersBase eqActionParams ( java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values ) { return org.mockito.Matchers.argThat ( new org.ovirt.engine.api.restapi.test.util.TestHelper.ActionParametersEquals ( clz , names , values ) ) ; }
private void cpuIsNotUpdatable ( ) { org.mockito.Mockito.doReturn ( false ) . when ( cmd ) . isCpuUpdatable ( org.mockito.ArgumentMatchers.any ( ) ) ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.createVolume ; }
private org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm createVdsmVm ( org.ovirt.engine.core.compat.Guid vmId , java.util.Map < java.lang.String , java.lang.Object > struct , java.lang.Double notifyTime ) { org.ovirt.engine.core.common.businessentities.VmDynamic fakeVm = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; fakeVm.setId ( vmId ) ; return createVdsmVm ( fakeVm , struct , notifyTime ) ; }
private void initSpyCommand ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateDestDomainsSpaceRequirements ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand ( ) ; org.mockito.Mockito.doReturn ( ActionType.LiveMigrateDisk ) . when ( command ) . getActionType ( ) ; }
public boolean isGetNamesOfVmsFromExternalProviderSupported ( org.ovirt.engine.core.compat.Version dataCenterVersion ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.GetNamesOfVmsFromExternalProviderSupported , dataCenterVersion.toString ( ) ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.StorageDomain setUpStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainType domainType ) { org.ovirt.engine.api.restapi.resource.StorageDomain entity = new org.ovirt.engine.api.restapi.resource.StorageDomain ( ) ; entity.setId ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplatesResourceTest.STORAGE_DOMAIN_ID ) ; entity.setstorage_domain_type ( domainType ) ; return entity ; }
public org.ovirt.engine.api.resource.AssignedPermissionsResource getPermissionsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendAssignedPermissionsResource ( guid , org.ovirt.engine.core.common.queries.QueryType.GetPermissionsForObject , new org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters ( guid ) , org.ovirt.engine.api.model.Vm.class , org.ovirt.engine.core.common.VdcObjectType.VM ) ) ; }
public static void updateImageStatus ( org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getImageDao ( ) . updateStatus ( imageId , imageStatus ) ; }
public void validateFailsOnVolumeWithoutAsyncTask ( ) { setVolumeId ( volumeWithoutAsyncTask ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
private static void translateErrors ( java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > errors ) { for ( org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors ) { retVal.setCanDoActionMessages ( org.ovirt.engine.ui.frontend.Frontend.getAppErrorsTranslator ( ) . translateErrorText ( retVal.getCanDoActionMessages ( ) ) ) ; } }
org.ovirt.engineextensions.aaa.ldap.ASN1OctetString decode ( java.lang.String value , org.ovirt.engineextensions.aaa.ldap.MapProperties props ) ;
public org.ovirt.engine.api.v3.servers.V3TemplateDisksServer getDisksResource ( ) { return new org.ovirt.engine.api.v3.servers.V3TemplateDisksServer ( templateId , ( ( org.ovirt.engine.api.restapi.resource.BackendTemplateResource ) ( getDelegate ( ) ) ) . getDisksResource ( ) ) ; }
public void testAdd ( ) { try { javax.ws.rs.core.UriInfo uriInfo = mockUri ( "vms" , "00000001-0001-0001-0001-000000000011" , "nics" ) ; javax.ws.rs.core.Request request = mockRequest ( "POST" ) ; control.replay ( ) ; org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage ( uriInfo , request ) ; assertEquals ( "For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-nics/methods/add" , fault.getDetail ( ) ) ; } catch ( java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e ) { fail ( ) ; } }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( java.lang.String taskKey ) { return super . persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getActionType ( ) , taskKey ) ; }
public java.lang.Void runInTransaction ( ) { getPermissionDao ( ) . save ( paramPermission ) ; getCompensationContext ( ) . snapshotNewEntity ( paramPermission ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void setWarning ( java.lang.String problem ) { if ( ! ( getProblemDescription ( ) . getIsValid ( ) ) ) { return ; } getProblemDescription ( ) . setIsValid ( true ) ; getProblemDescription ( ) . setEntity ( problem ) ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getAll ( ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.NetworkDaoTest.NUM_OF_NETWORKS , result.size ( ) ) ; }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { numOfVfs.setLabel ( constants.numOfVfs ( ) ) ; allowedNetworksLabel.setText ( constants.allowedNetworks ( ) ) ; selectNetworksLabel.setText ( constants.selectNetworks ( ) ) ; }
public void testValidateDefaultFlagIsNotChangedWhenFlagNotChanged ( ) { final org.ovirt.engine.core.common.businessentities.MacPool macPool1 = new org.ovirt.engine.core.common.businessentities.MacPool ( ) ; final org.ovirt.engine.core.common.businessentities.MacPool macPool2 = new org.ovirt.engine.core.common.businessentities.MacPool ( ) ; org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged ( macPool1 , macPool2 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDS getServerOfCluster ( org.ovirt.engine.core.compat.Guid clusterId , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > servers ) { for ( org.ovirt.engine.core.common.businessentities.VDS server : servers ) { if ( server.getVdsGroupId ( ) . equals ( clusterId ) ) { return server ; } } return null ; }
protected void testVdsPowerManagementStatus ( org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic ) { if ( vdsStatic.isPmEnabled ( ) ) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.getInstance ( ) . pmHealthCheck ( vdsStatic.getId ( ) ) ; } }
public void closeQuery ( java.lang.String opaque ) { org.ovirt.engine.extension.aaa.jdbc.core.datasource.Sql.Cursor < java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > > remove = openSelects.remove ( opaque ) ; remove.close ( ) ; searchContexts.remove ( opaque ) ; }
public void testGetTagIdAndChildrenIdsNotExists ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; java.lang.String idsStr = tagsDirector.getTagIdAndChildrenIds ( tag.gettag_id ( ) ) ; org.junit.Assert.assertEquals ( StringUtils.EMPTY , idsStr ) ; }
public void setGetSessionUserServletURL ( java.lang.String getSessionUserGetSessionUserServletURL ) throws java.net.MalformedURLException { this . getSessionUserGetSessionUserServletURL = new java.net.URL ( getSessionUserGetSessionUserServletURL ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.util.Collections.emptyList ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile getOldVnicProfile ( ) { if ( ( oldVnicProfile ) == null ) { oldVnicProfile = vnicProfileDao.get ( org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getVnicProfile ( ) . getId ( ) ) ; } return oldVnicProfile ; }
public java.lang.String getIcon ( ) { return getValueAsString ( "icon" , null ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; }
private void logException ( java.lang.RuntimeException ex ) { log.errorFormat ( "Command {0} execution failed. Exception: {1}" , org.ovirt.engine.core.vdsbroker.VDSCommandBase.getCommandName ( ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) ) ; if ( log.isDebugEnabled ( ) ) { log.debugFormat ( "Detailed stacktrace:" , ex ) ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.HostDevice vf ) { return ( ( isVfFree ( vf ) ) == shouldBeFree ) && ( ( excludeVfs == null ) || ( ! ( excludeVfs.contains ( vf.getDeviceName ( ) ) ) ) ) ; }
public void test2 ( ) throws java.lang.Exception { java.lang.String encoded = "eyJhcnRpZmFjdCI6IkVudmVsb3BlUEJFIiwiaXRlcmF0aW9ucyI6IjQwMDAiLCJzZWNyZXQiOiJNWE5nZVlwNUxSWFNRZmRMYzNDOHRVNWRINFZOODExb0czNjlrU0FLOHAwPSIsInNhbHQiOiJudXFaa2M3dlMrNUNkRzVQaEMvWE5ycDMzd0luTnNnZGZIVXlQRE5RS05rPSIsImFsZ29yaXRobSI6IlBCS0RGMldpdGhIbWFjU0hBMSIsInZlcnNpb24iOiIxIn0=" ; org.junit.jupiter.api.Assertions.assertTrue ( org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check ( encoded , "password" ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check ( encoded , "bad" ) ) ; }
private void logHostCannotBeProxy ( java.lang.String hostName ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "VdsName" , hostName ) ; auditLogDirector.log ( logable , AuditLogType.IMPORTEXPORT_HOST_CANNOT_SERVE_AS_PROXY ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getHostJobs ( java.lang.String job_type , java.util.List < java.lang.String > jobIds ) ;
public void getCustomValueFromEmptyMap ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase ( ) ; final java.lang.String s = b.getCustomValue ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; org.junit.Assert.assertEquals ( "" , s ) ; }
public void testGetWithNotExistingDiskId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk > unregisteredDisk = dao.getByDiskIdAndStorageDomainId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , FixturesTool.STORAGE_DOMAIN_NFS2_1 ) ; org.junit.Assert.assertTrue ( "Disk should not exists in the UnregisteredDisks table" , unregisteredDisk.isEmpty ( ) ) ; }
protected void doInit ( ) { oldNumaNodeIds = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodesForValidation ( ) . stream ( ) . map ( VmNumaNode :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ; setVmNumaNodesForValidation ( org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters ( ) . getVmNumaNodeList ( ) ) ; }
public void lowerVersionMgmtNetworkAndRegularNetworks ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addManagementNetworkToPool ( ) ; addNonManagementNetworksToPool ( 2 ) ; setupNetworkValidator ( true ) ; canDoActionFailed ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public boolean getIsAvailable ( ) { if ( ( getDetailModel ( ) . getEntity ( ) ) == null ) { return false ; } return ! ( ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( getDetailModel ( ) . getEntity ( ) ) ) . getIsGroup ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeRemoveBrickForce ( java.lang.String volumeName , java.lang.String [ ] brickDirectories , int replicaCount ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeRemoveBrickForce ( volumeName , brickDirectories , replicaCount ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected org.ovirt.engine.api.restapi.invocation.Current getCurrent ( ) { return org.ovirt.engine.api.restapi.invocation.CurrentManager.get ( ) ; }
protected java.lang.String renderNullSafe ( java.util.List < T > list ) { return list.isEmpty ( ) ? "" : renderer.render ( list.get ( 0 ) ) ; }
public void testParseEmpty ( ) { java.util.List < org.ovirt.engine.api.model.Agent > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "" , "" ) ; org.junit.jupiter.api.Assertions.assertNotNull ( ret ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , ret.size ( ) ) ; }
private org.ovirt.engine.core.utils.hostinstall.Credentials _prepareCredentials ( java.lang.String rootPassword ) { org.ovirt.engine.core.utils.hostinstall.Credentials creds = new org.ovirt.engine.core.utils.hostinstall.Credentials ( ) ; creds.setPassword ( rootPassword ) ; creds.setUsername ( "root" ) ; return creds ; }
public boolean hasBricks ( org.ovirt.engine.core.compat.Guid serverId ) { return ( glusterBrickDao.getGlusterVolumeBricksByServerId ( serverId ) . size ( ) ) > 0 ; }
private void initEditors ( ) { showBricksListEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; serverEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.VDS > ( ) { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds.getHostName ( ) ; } } ) ; }
public org.ovirt.engine.core.common.businessentities.VMStatus getRawValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getStatus ( ) ; }
protected org.ovirt.engine.api.model.VmPool deprecatedPopulate ( org.ovirt.engine.api.model.VmPool pool , org.ovirt.engine.core.common.businessentities.vm_pools entity ) { return parent.deprecatedPopulate ( pool , entity ) ; }
private void updateLUNConnectionsInfo ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { lun.setLunConnections ( new java.util.ArrayList ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getDbFacade ( ) . getStorageServerConnectionDao ( ) . getAllForLun ( lun.getLUN_id ( ) ) ) ) ; }
private void createUpVds ( ) { org.mockito.Mockito.when ( vdsDao.getAllForStoragePoolAndStatus ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.eq ( VDSStatus.Up ) ) ) . thenReturn ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.VDS ( ) ) ) ; }
protected void doChangeDefaultHost ( java.util.List < org.ovirt.engine.core.compat.Guid > hostGuid ) { }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Cluster object ) { if ( ( object.getClusterHostsAndVms ( ) ) == null ) { return "" ; } return ( object.getClusterHostsAndVms ( ) . getVms ( ) ) + "" ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbUser > lookupUsers ( ) { org.ovirt.engine.core.common.queries.QueryParametersBase queryParams = new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ; queryParams.setFiltered ( isFiltered ( ) ) ; return getBackendCollection ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class , QueryType.GetAllDbUsers , queryParams ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getAllForVolumeGroup ( storageDomain.getStorage ( ) ) ; }
public void testGetSuggestedDiskAliasNotNullAliasDisk ( ) { disk.setDiskAlias ( "someAlias" ) ; org.junit.Assert.assertEquals ( "a new alias was generated instead of returning the pre-defined one" , disk.getDiskAlias ( ) , org.ovirt.engine.core.bll.ImagesHandler.getSuggestedDiskAlias ( disk , org.ovirt.engine.core.bll.ImagesHandlerTest.prefix , 1 ) ) ; }
protected java.lang.String getLockMessage ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_MIGRATED.name ( ) ) ; builder.append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.MigrateVmCommand.getVmName ( ) ) ) ; return builder.toString ( ) ; }
public void setCandidates ( java.util.List < org.ovirt.engine.core.common.businessentities.storage_domains > value ) { if ( ( candidates ) != value ) { candidates = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Candidates" ) ) ; getCandidatesList ( ) . setItems ( ToEntityModelList ( candidates ) ) ; } }
protected org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType getDiskType ( ) { return getDisk ( ) . getDiskStorageType ( ) ; }
public void setWatchdog ( org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog ) { this . watchdog.setValue ( watchdog ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return hostLocking.getPowerManagementLock ( getProblematicVdsId ( ) ) ; }
public void testGet ( ) { java.lang.String result = dao.get ( FixturesTool.PROVIDER_BINDING_HOST_ID_HOST_ID , FixturesTool.PROVIDER_BINDING_HOST_ID_PLUGIN_TYPE ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.PROVIDER_BINDING_HOST_PLUGIN_ID , result ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmMonitorCommandVDSCommand.getBroker ( ) . monitorCommand ( mVmId.toString ( ) , mMonitorCommand ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VmMonitorCommandVDSCommand.proceedProxyReturnValue ( ) ; }
protected java.lang.String clientBrowserType ( ) { return clientAgentType.browser ; }
public void init ( javax.servlet.ServletConfig config ) throws javax.servlet.ServletException { ssoContext = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext ( config.getServletContext ( ) ) ; }
protected java.util.Date getRawValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ? ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getCreationDate ( ) : null ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ; }
public void testGetAllNetworkLabelsForDataCenter ( ) { java.util.Set < java.lang.String > result = dao.getAllNetworkLabelsForDataCenter ( FixturesTool.DATA_CENTER ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; }
private static org.ovirt.engine.api.model.NetworkStatus mapNetworkStatus ( org.ovirt.engine.api.model.NetworkStatus status ) { switch ( status ) { case NON_OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.NON_OPERATIONAL ; case OPERATIONAL : return org.ovirt.engine.api.model.NetworkStatus.OPERATIONAL ; default : return null ; } }
java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > getGraphicsAndDisplays ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public boolean execute ( ) { if ( ( ( retryCount ) > ( org.ovirt.engine.ui.uicommonweb.ReportInit.MAX_RETRY_COUNTS ) ) || ( reportsWebappDeployed ) ) { scheduledStatusCheckInProgress = false ; return false ; } ( retryCount ) ++ ; checkReportsWebAppStatus ( ) ; return true ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = org.ovirt.engine.core.bll.UpdateFenceAgentCommand.getParameters ( ) . getAgent ( ) ; fenceAgentDao.update ( agent ) ; org.ovirt.engine.core.bll.UpdateFenceAgentCommand.setSucceeded ( true ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.permissions , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.dataCenterPermissionSubTabLabel ( ) , 5 , modelProvider ) ; }
public void checkEmptyStringNotAllowedFromConstructor ( ) { underTest = new org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidation ( mockConstantsManager , false ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( "" ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.failureValidationResultEmptyNotAllowed , validationResult ) ; }
public void checkValidIpv4ConfigurationStaticBootProtocol ( ) { initIpv4ConfigurationDetails ( Ipv4BootProtocol.STATIC_IP , true , true ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void onUpdateDocumentationBaseURL ( ) { fetchFile ( ( ( getDocumentationBaseURL ( ) ) + "DocumentationPath.csv" ) , documentationFileFetchedEvent ) ; }
public void execute ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine ( ( ( this . getClass ( ) . getName ( ) ) + ": Executing search" ) ) ; syncSearch ( ) ; }
public void initialize ( ) { super . initialize ( ) ; startProgress ( null ) ; initMessages ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getRngDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.RNG ) ; }
public void shouldDetectCpuPinning ( ) { invalidVM.setCpuPinning ( "i am pinned" ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( EngineMessage.CLUSTER_UPGRADE_DETAIL_VM_CPUS_PINNED.name ( ) ) ; }
public static void getGlusterHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress , java.lang.String rootPassword , java.lang.String fingerprint ) { org.ovirt.engine.core.common.queries.gluster.GlusterServersQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterServersQueryParameters ( hostAddress , rootPassword ) ; parameters.setFingerprint ( fingerprint ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterServersForImport , parameters , aQuery ) ; }
public void canDoActionSucceedsOnVolumeWithRemoveBricksTask ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithRemoveBricksTask , getBricks ( volumeWithRemoveBricksTask ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
private boolean isPoolUp ( ) { return validate ( new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator ( org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStoragePool ( ) ) . existsAndUp ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getQuotaDao ( ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup setUpVDSGroup ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = control.createMock ( org.ovirt.engine.core.common.businessentities.VDSGroup.class ) ; org.easymock.EasyMock.expect ( cluster.getId ( ) ) . andReturn ( id ) . anyTimes ( ) ; return cluster ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAll ( ) { return runHostListMethod ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.ALL_HOSTS_QUERY ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithOlderVersion ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createNewVdsGroup ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_0 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
public void log ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { auditLogDirector.log ( auditLogable , logType ) ; }
public static java.util.List < java.lang.String > getPresetDisplayStrings ( ) { return org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.displayStrings ; }
public static java.util.List concat ( java.util.List ... lists ) { java.util.List result = new java.util.ArrayList < java.lang.Object > ( ) ; for ( java.util.List list : lists ) { for ( java.lang.Object item : list ) { result.add ( item ) ; } } return result ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setvds_group_id ( vdsGroupId ) ; group.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( ) ) ; group.setStoragePoolId ( storagePoolId ) ; return group ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel determineAdditionalConsoleModelForVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( vm.getVmOs ( ) ) ) { return cachedConsoleModels.get ( vm.getId ( ) ) . get ( org.ovirt.engine.ui.uicommonweb.models.ConsoleModelsCache.RDP_INDEX ) ; } return null ; }
private void mockStatistics ( ) { org.mockito.Mockito.when ( vmStatisticsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VmStatistics.class ) ) ; }
protected boolean ValidateTag ( java.lang.String tagName ) { boolean retValue = true ; org.ovirt.engine.core.common.businessentities.Tags tag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . getByName ( tagName ) ; if ( tag == null ) { addCanDoActionMessage ( EngineMessage.EN_UNKNOWN_TAG_NAME ) ; retValue = false ; } return retValue ; }
public void setPort ( int value ) { this . mVdsStatic.setPort ( value ) ; }
public void testGetRootTag ( ) { org.ovirt.engine.core.common.businessentities.Tags tags = tagsDirector.getRootTag ( ) ; org.junit.Assert.assertNotNull ( tags ) ; }
public void setGraphicsInfos ( java.util.Map < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.GraphicsInfo > graphicsInfos ) { this . graphicsInfos = graphicsInfos ; }
private void assertValidationFailure ( org.ovirt.engine.core.bll.ValidationResult validationResult , org.ovirt.engine.core.common.errors.EngineMessage engineMessage ) { org.hamcrest.MatcherAssert.assertThat ( validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage ) ) ; }
public boolean isManagedVm ( ) { return ( ! ( ( OriginType.HOSTED_ENGINE ) == ( getOrigin ( ) ) ) ) && ( ! ( isExternalVm ( ) ) ) ; }
public javax.ws.rs.core.Response remove ( ) { return getDelegate ( ) . remove ( ) ; }
public void setVmHost ( java.lang.String value ) { this . vmHost = value ; }
protected java.lang.String getTitle ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return value.isPool ( ) ? org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.takeVmLabel ( ) : org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.runVmLabel ( ) ; }
public boolean hasGraphicsDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.GraphicsType type ) { return ! ( getGraphicsDevices ( vmId , type ) . isEmpty ( ) ) ; }
public void validateGenerateVmNameWithoutMask1 ( ) { org.ovirt.engine.core.utils.NameForVmInPoolGenerator generator = createNameForVmInPoolGenerator ( "mypool" ) ; junit.framework.Assert.assertEquals ( "mypool-1" , generator.generateVmName ( ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { assertEquals ( EXTERNAL_IDS [ index ] . toHex ( ) , model.getExternalId ( ) ) ; assertEquals ( NAMES [ index ] , model.getName ( ) ) ; }
private void setUpMockUser ( ) { userID = new org.ovirt.engine.core.compat.Guid ( java.util.UUID.randomUUID ( ) ) ; user = org.ovirt.engine.core.bll.AbstractUserQueryTest.mock ( org.ovirt.engine.core.common.businessentities.DbUser.class ) ; org.mockito.Mockito.when ( user.getId ( ) ) . thenReturn ( userID ) ; }
public void shouldDetectNonMigratableVMs ( ) { invalidVM.setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( UpgradeError.VM_NOT_MIGRATABLE ) ; }
boolean storageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) ;
public void bufferReset_sizeLowerBound ( ) { org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> tested.reset ( 1 , ( - 1 ) ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > getNumaNodeList ( ) { return mVdsDynamic.getNumaNodeList ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult notLabeled ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED ) . when ( org.ovirt.engine.core.utils.NetworkUtils.isLabeled ( network ) ) ; }
public void hasDomains ( ) { org.mockito.Mockito.when ( sdDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; getSearchCommand ( ) . Execute ( ) ; UpdateActionAvailability ( ) ; }
public void logVolumeMessage ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , final org.ovirt.engine.core.common.AuditLogType logType ) { logAuditMessage ( volume.getClusterId ( ) , volume.getClusterName ( ) , volume , null , logType , java.util.Collections.emptyMap ( ) ) ; }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero ( new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids.get ( 1 ) , guids.get ( 0 ) , guids.get ( 2 ) , isPostZero ( ) , false ) ) ; }
public void internalActionAllowed ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { testInternalExecution ( status ) ; testActionAllowed ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getAllForConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { return findByCriteria ( org.hibernate.criterion.Restrictions.eq ( "connection" , connection ) ) ; }
public java.lang.Void runInTransaction ( ) { addVdsStaticToDb ( ) ; addVdsDynamicToDb ( ) ; addVdsStatisticsToDb ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void setVmtOs ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { this . vmtOs = value ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotDisabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( UsbType.NATIVE ) ; org.junit.Assert.assertEquals ( UsbPolicy.DISABLED , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) ) ; }
protected < T > boolean matchEntity ( org.ovirt.engine.core.common.businessentities.VmWatchdog entity , T id ) { return true ; }
private org.ovirt.engine.core.dao.VdsStaticDAO getVdsStaticDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsStaticDao ( ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( getSucceeded ( ) ) { return optionValueExists ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTION_MODIFIED : org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTION_ADDED ; } else { return ( errorType ) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED : errorType ; } }
private int getTotalStorageDomainsStat ( ) { return systemStatisticsDao.getSystemStatisticsValue ( org.ovirt.engine.core.bll.GetSystemStatisticsQuery.TOTAL_STORAGE_DOMAIN_ENTITY_NAME ) ; }
public void parametersWithSecureDeletionAreNotFixedOnFileDomainWhenPostZeroIsFalse ( ) { org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction parameters = postDeleteActionHandler.fixPostZeroField ( new org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction ( false , false ) , true ) ; assertPostZeroValue ( parameters , false ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotDisabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
public void passDiscardSupportedForCopyFloatingDiskOp ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.TEMPLATE ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; org.junit.Assert.assertTrue ( command.validatePassDiscardSupportedForDestinationStorageDomain ( ) ) ; }
public void warnOnActiveVm ( ) { if ( activeVmAttachedToClusterPredicate.test ( networkCluster.getClusterId ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = createLoggable ( ) ; auditLogDirector.log ( loggable , AuditLogType.NETWORK_UPDATE_DISPLAY_FOR_CLUSTER_WITH_ACTIVE_VM ) ; } }
public void testNetworkIpAddressWasSameAsHostnameAndChangedWhenIpConfigurationIsNull ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setIpConfiguration ( null ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . networkIpAddressWasSameAsHostnameAndChanged ( null ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void run ( ) { org.ovirt.engine.core.bll.hostdev.HostDeviceManager hostDeviceManager = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.hostdev.HostDeviceManager.class ) ; hostDeviceManager.refreshHostIfAnyVmHasHostDevices ( vmIds , hostId ) ; }
public void testRemoveNotFound ( ) { setUpEntityQueryExpectations ( 1 , 0 , true ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; cancelConfirmation ( ) ; }
private org.ovirt.engine.core.common.businessentities.Quota mockVCPUQuotaGlobalNotExceeded ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = mockBasicQuota ( ) ; quota.setId ( org.ovirt.engine.core.bll.quota.QuotaManagerTest.VCPU_QUOTA_GLOBAL_NOT_EXCEEDED ) ; quota.setGlobalQuotaVdsGroup ( getQuotaVdsGroup ( 100 , 18 , org.ovirt.engine.core.bll.quota.QuotaManagerTest.UNLIMITED_MEM , 0 ) ) ; return quota ; }
private void cacheNewValues ( org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster , long newMemory , int newVcpu ) { quotaCluster.setVirtualCpuUsage ( newVcpu ) ; quotaCluster.setMemSizeMBUsage ( newMemory ) ; }
public void shouldCreateLessNumaNodesAsVirtualCores ( ) { vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 3 ) ; org.junit.jupiter.api.Assertions.assertTrue ( underTest.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
public void testRemoveCantDo ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClustersResourceTest.dataCenterId } , setUpVDSGroups ( ) , null ) ; doTestBadRemove ( false , true , org.ovirt.engine.api.restapi.resource.CANT_DO ) ; }
private boolean wasSkippedDueToStatus ( org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result ) { return ( ( result != null ) && ( result.isSkipped ( ) ) ) && ( ( org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters ( ) . getParentCommand ( ) ) != ( org.ovirt.engine.core.common.action.VdcActionType.RestartVds ) ) ; }
public void testGetWithRunningVms ( ) { org.ovirt.engine.core.common.businessentities.Cluster result = dao.getWithRunningVms ( existingCluster.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; }
public void updateGlusterHookConflictStatus ( org.ovirt.engine.core.compat.Guid hookId , java.lang.Integer conflictStatus ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterHookConflictStatus" , createIdParameterMapper ( hookId ) . addValue ( "conflict_status" , conflictStatus ) ) ; }
public Q resolve ( T id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { Q entity = lookupEntity ( id ) ; if ( entity == null ) { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException ( id.toString ( ) ) ; } return entity ; }
public void serializeVdsNetworkInterface ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serialezer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer ( ) ; org.junit.Assert.assertTrue ( ( ( serialezer.serialize ( nic ) . length ( ) ) > 0 ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ; }
protected void updateVmGuestAgentVersion ( org.ovirt.engine.core.common.businessentities.VM vm ) { vmHandler.updateVmGuestAgentVersion ( vm ) ; }
public java.lang.Integer getProgressValue ( org.ovirt.engine.core.common.businessentities.VDS object ) { return object.getUsageMemPercent ( ) ; }
public boolean checkIfJobHasTasks ( org.ovirt.engine.core.compat.Guid jobId ) { java.util.List < org.ovirt.engine.core.common.job.Step > steps = step.getStepsByJobIdForVdsmAndGluster ( jobId ) ; return ! ( steps.isEmpty ( ) ) ; }
public void updateStorageDomain ( org.ovirt.vdsmfake.domain.StorageDomain storageDomain ) { vdsmManager.updateStorageDomain ( storageDomain ) ; }
void removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.compat.Guid vmId ) ;
public void setUp ( ) throws java.lang.Exception { underTest = new org.ovirt.engine.core.bll.validator.network.VlanUntaggedNetworkExclusivenessValidator ( mockUntaggedNetworkPredicate ) ; org.mockito.Mockito.when ( mockUntaggedNetworkPredicate.test ( org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN ) ) . thenReturn ( false ) ; org.mockito.Mockito.when ( mockUntaggedNetworkPredicate.test ( org.ovirt.engine.core.bll.validator.network.NetworkType.VM ) ) . thenReturn ( true ) ; }
public void existsForExistingVmDevice ( ) { org.junit.jupiter.api.Assertions.assertTrue ( dao.exists ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.dao.VmDeviceDaoTest.EXISTING_DEVICE_ID , org.ovirt.engine.core.dao.VmDeviceDaoTest.EXISTING_VM_ID ) ) ) ; }
public void initTable ( ) { super . initTable ( ) ; getTable ( ) . setRowVisitor ( this ) ; }
protected boolean interfaceNameUnique ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces ) { return org.ovirt.engine.core.bll.VmHandler.isNotDuplicateInterfaceName ( interfaces , getInterfaceName ( ) , org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getReturnValue ( ) . getValidationMessages ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { if ( ! ( object.isEnabled ( ) ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.removePolicyUnit ( ) ; } return null ; }
com.google.gwt.safehtml.shared.SafeHtml unorderedList ( com.google.gwt.safehtml.shared.SafeHtml items ) ;
public void testExistingDiscardAfterDeleteFunctionalityPreservedDiscardAfterDeleteFunctionalityBreaks ( ) { storageDomain.setDiscardAfterDelete ( true ) ; org.junit.Assert.assertFalse ( discardHelper.isExistingDiscardAfterDeleteFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 0L ) ) , storageDomain ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbUser > lookupUsers ( ) { org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ; queryParams.setFiltered ( isFiltered ( ) ) ; return getBackendCollection ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class , VdcQueryType.GetAllDbUsers , queryParams ) ; }
public void isNotSameStorageType ( ) { domain.setStorageType ( StorageType.NFS ) ; org.junit.Assert.assertThat ( validator.isSameStorageType ( domain ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_NOT_SAME_STORAGE_TYPE ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
private java.lang.String getSearchPattern ( ) { java.lang.String user_defined_pattern = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint ( httpHeaders , uriInfo , "" , modelType ) ; return user_defined_pattern.equals ( "Users : " ) ? user_defined_pattern + ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResource.USERS_SEARCH_PATTERN ) : ( user_defined_pattern + ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResource.AND_SEARCH_PATTERN ) ) + ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResource.USERS_SEARCH_PATTERN ) ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { org.ovirt.engine.core.compat.Guid slaveUpserverId = getUpServerId ( slaveVolume.getClusterId ( ) ) ; if ( slaveUpserverId == null ) { return false ; } return true ; }
void addStyles ( ) { pathEditor.addContentWidgetStyleName ( style.pathEditorContent ( ) ) ; expanderContent.setClassName ( style.expanderContent ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VM v ) { return ( ( v.getMigrationSupport ( ) ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ) && ( ( v.getDedicatedVmForVdsList ( ) . contains ( hostId ) ) == false ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) ;
public boolean checkVmHostDeviceAvailability ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid hostId ) { return getCallsHandler ( ) . executeRead ( "CheckVmHostDeviceAvailability" , org.springframework.jdbc.core.SingleColumnRowMapper.newInstance ( java.lang.Boolean.class ) , getCustomMapSqlParameterSource ( ) . addValue ( "vm_id" , vmId ) . addValue ( "host_id" , hostId ) ) ; }
protected void onMouseOver ( ) { dragImage.setVisible ( draggable ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.showItem ( item , this ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { this . setItems ( ( ( java.util.List < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VDSGroup , org.ovirt.engine.core.common.businessentities.network.NetworkCluster > > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ) ; }
public java.lang.String render ( java.lang.String object ) { if ( object == null ) { return org.ovirt.engine.ui.common.widget.editor.VncKeyMapRenderer.messages.globalVncKeyboardLayoutCaption ( globalLayout ) ; } else { return object ; } }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolAddressEqual ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolAddress ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private java.lang.String renderGigabyteSize ( long size ) { long sizeInGB = ( ( unit ) == ( org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GB ) ) ? size : org.ovirt.engine.core.common.utils.SizeConverter.convert ( size , unit , SizeUnit.GB ) . longValue ( ) ; return sizeInGB >= 1 ? sizeInGB + " GB" : "< 1 GB" ; }
protected java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { try { return org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription ( disk ) ; } catch ( java.io.IOException e ) { log.error ( "Exception while generating json for disk. ERROR: '{}'" , e ) ; return org.apache.commons.lang.StringUtils.EMPTY ; } }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( getStoragePool ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . remove ( getStoragePool ( ) . getId ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public javax.ws.rs.core.Response ticket ( org.ovirt.engine.api.model.Action action ) { return org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.setTicket ( this , action , guid , deriveGraphicsType ( ) ) ; }
public void testExistingDiscardAfterDeleteFunctionalityPreservedAllLunsHaveDiscardAfterDeleteFunctionality ( ) { storageDomain.setDiscardAfterDelete ( true ) ; org.junit.Assert.assertTrue ( discardHelper.isExistingDiscardAfterDeleteFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
private boolean validateDestStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain destDomain ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( destDomain ) ; return ( validate ( validator.isDomainExistAndActive ( ) ) ) && ( validate ( validator.domainIsValidDestination ( ) ) ) ; }
public static org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > failsWith ( org.ovirt.engine.core.common.errors.VdcBllMessages expectedError ) { return new org.ovirt.engine.core.bll.validator.ValidationResultMatchers.Fails ( expectedError ) ; }
public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService entity ) { return entity.getStatus ( ) . name ( ) ; }
protected org.ovirt.engine.api.model.Group mapAdGroup ( org.ovirt.engine.core.common.businessentities.LdapGroup entity ) { return getMapper ( org.ovirt.engine.core.common.businessentities.LdapGroup.class , org.ovirt.engine.api.model.Group.class ) . map ( entity , null ) ; }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) ) ) ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return storageDomain.getStorageDomainType ( ) . isDataDomain ( ) ; }
protected abstract void executeNetworkCommand ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel , java.lang.Object ... params ) ;
public javax.ws.rs.core.Response allocatevm ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.AttachUserToVmFromPoolAndRun , new org.ovirt.engine.core.common.action.VmPoolUserParameters ( guid , getCurrent ( ) . get ( org.ovirt.engine.core.common.users.VdcUser.class ) , false ) , action , new org.ovirt.engine.api.restapi.resource.BackendVmPoolResource.VmQueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { onLogin ( loginModel ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { cachedCommandsCompatibilityVersions = ( ( java.util.HashMap < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.queries.CommandVersionsInfo > ) ( source ) ) ; return isCommandCompatible ( vdcActionType , cluster , dc ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return java.lang.String.valueOf ( disk.getLun ( ) . getPathCount ( ) ) ; }
public void validateVmMemoryCantStartOnVdsBecauseOfPending ( ) { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 65 ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
public static boolean containsBrick ( java.util.Collection < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity searchBrick ) { return ( org.ovirt.engine.core.common.utils.gluster.GlusterCoreUtil.findBrick ( bricks , searchBrick ) ) != null ; }
public void useDefaultMTU ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( 0 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( validate.isEmpty ( ) ) ; }
public void setStartRebalanceCommand ( org.ovirt.engine.ui.uicommonweb.UICommand startRebalanceCommand ) { this . startRebalanceCommand = startRebalanceCommand ; }
protected org.ovirt.engine.api.model.StorageDomain getEntity ( int index , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.api.model.StorageDomain entity = control.createMock ( org.ovirt.engine.api.model.StorageDomain.class ) ; return org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainsResourceTest.setUpEntityExpectations ( entity , index , storageType ) ; }
public java.util.Map getOKStatusNotImplemented ( ) { log.warn ( "The method is not fully implemented!" , new java.lang.Exception ( ) ) ; return ResultCodes.OK.newMap ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { Window.Location.reload ( ) ; }
public void testExecuteCommand ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.RemoveQuotaCommand removeQuotaCommand = createCommand ( generalGuidQuota ) ; removeQuotaCommand.executeCommand ( ) ; org.junit.Assert.assertTrue ( removeQuotaCommand.getSucceeded ( ) ) ; }
public void addDiskToVmIfNotExists ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { if ( ! ( baseDiskDao.exists ( disk.getId ( ) ) ) ) { addDiskToVm ( disk , vmId ) ; } }
public void setHighlyAvailableIsActive ( boolean value ) { this . mVdsStatistics.setHighlyAvailableIsActive ( value ) ; }
public java.lang.String encode ( com.unboundid.asn1.ASN1OctetString value ) { return conversion.encode ( value , conversionProps ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT ) , ValidationResult.VALID ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return org.ovirt.engine.core.bll.ClearAllAuditLogEventsCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_AUDIT_LOG_EVENTS : org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_AUDIT_LOG_EVENTS_FAILED ; }
public void nameIsNullForUpdate ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.assertNicValidation ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.createNic ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS , null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , org.ovirt.engine.core.common.validation.group.CreateEntity.class , true , VmNetworkInterface.VALIDATION_MESSAGE_NAME_NOT_NULL ) ; }
public boolean isExternal ( ) { return getEntity ( ) . isExternal ( ) ; }
public static org.ovirt.engine.api.model.GraphicsType map ( org.ovirt.engine.api.model.GraphicsType graphicsType , org.ovirt.engine.api.model.GraphicsType template ) { if ( graphicsType != null ) { switch ( graphicsType ) { case SPICE : return org.ovirt.engine.api.model.GraphicsType.SPICE ; case VNC : return org.ovirt.engine.api.model.GraphicsType.VNC ; } } return null ; }
public void testGetAllForSubscriberWithNoSubscriptions ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.event_subscriber > result = dao.getAllForSubscriber ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public java.lang.String getRoleName ( ) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.PermissionsCommandBase.getRoleDao ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getRoleId ( ) ) ; return role == null ? null : role.getName ( ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { getCallsHandler ( ) . executeModification ( "Updatestorage_server_connections" , getFullParameterSource ( connection ) ) ; }
private void handleInterruptException ( org.ovirt.engine.core.bll.adbroker.LdapSearchExceptionHandlingResponse response , java.lang.Throwable cause ) { response.setOrderingAlgorithm ( OrderingAlgorithmType.NO_OP ) . setTranslatedException ( ( ( java.lang.Exception ) ( cause ) ) ) . setTryNextServer ( false ) ; }
protected org.ovirt.engine.core.bll.adbroker.Domain mockDomainObject ( java.util.List < java.net.URI > urls ) { final org.ovirt.engine.core.bll.adbroker.Domain domain = new org.ovirt.engine.core.bll.adbroker.Domain ( "" ) ; domain.setLdapServers ( urls ) ; domain.setLdapServers ( urls ) ; domain.setLdapProviderType ( LdapProviderType.openLdap ) ; return domain ; }
public void testRemove ( ) { dao.remove ( existingVdsSpmIdMap.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.vds_spm_id_map result = dao.get ( existingVdsSpmIdMap.getId ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
public void updateFCPUnsupportedConnectionType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections dummyFCPConn = createISCSIConnection ( "10.35.16.25" , StorageType.FCP , "" , "3260" , "user1" , "mypassword123" ) ; parameters.setStorageServerConnection ( dummyFCPConn ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE_TYPE ) ; }
public void setNumaSupport ( boolean numaSupport ) { mVdsDynamic.setNumaSupport ( numaSupport ) ; }
public void cancel ( ) { setWindow ( null ) ; org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; }
protected void executeCommand ( ) { if ( isLiveMerge ( ) ) { org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters ( ) . setLiveMerge ( true ) ; persistCommand ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters ( ) . getParentCommand ( ) , true ) ; } org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.setSucceeded ( true ) ; }
public void logVolumeMessage ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume , final org.ovirt.engine.core.common.AuditLogType logType ) { logAuditMessage ( volume.getClusterId ( ) , volume , null , logType , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; }
public boolean isNetworkExclusive ( java.util.List < org.ovirt.engine.core.bll.validator.network.NetworkType > networksOnIface ) { return ( networksOnIface.stream ( ) . filter ( untaggedNetworkPredicate ) . count ( ) ) <= 1 ; }
private void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePool getByName ( java.lang.String name ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "name" , name ) . addValue ( "is_case_sensitive" , true ) ; return getCallsHandler ( ) . executeRead ( "Getstorage_poolByName" , org.ovirt.engine.core.dao.StoragePoolDAODbFacadeImpl.mapper , parameterSource ) ; }
public void setUtcDiff ( java.lang.Integer value ) { this . utcDiff = value ; }
private void initHandlers ( ) { mTagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler ( ) ; org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.ovirt.engine.core.bll.VdsHandler.Init ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.Init ( ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetJobByJobIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository ( ) . getJobWithSteps ( org.ovirt.engine.core.bll.GetJobByJobIdQuery.getParameters ( ) . getId ( ) ) ) ; }
protected void changeStorageDomainStatusInTransaction ( final org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map , final org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { changeStorageDomainStatusInTransaction ( map , status , org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getCompensationContext ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress ( ) { if ( ! ( hasPrimaryAddressSet ( ) ) ) { throw new java.lang.IllegalStateException ( "IpConfiguration does not have IPv4 address set." ) ; } return getIPv4Addresses ( ) . get ( 0 ) ; }
public void testGetMessageNullKey ( ) { java.lang.String testKey = null ; java.lang.String result = testManager.getMessage ( testKey ) ; org.junit.jupiter.api.Assertions.assertEquals ( "" , result , "The result should be a blank string" ) ; }
protected org.ovirt.engine.core.common.businessentities.Tags getRootTag ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Tags.class , QueryType.GetRootTag , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) , "root" ) ; }
protected void saveImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.bll.BaseImagesCommand.saveImage ( disk ) ; }
public void testInstanceType ( ) { testValidSql ( "instancetype: " , "SELECT * FROM ((SELECT distinct instance_types_view.* FROM instance_types_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
private java.lang.String getClusterName ( ) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get ( networkCluster.getClusterId ( ) ) ; return cluster == null ? null : cluster.getName ( ) ; }
protected java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { try { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . generateJsonDiskDescription ( disk ) ; } catch ( java.io.IOException e ) { log.error ( "Exception while generating json for disk. ERROR: '{}'" , e ) ; return org.apache.commons.lang.StringUtils.EMPTY ; } }
public org.ovirt.engine.api.model.Clusters list ( ) { if ( isFiltered ( ) ) return mapCollection ( getBackendCollection ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ) ; else return mapCollection ( getBackendCollection ( SearchType.Cluster ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setvds_group_id ( vdsGroupId ) ; group.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( ) ) ; group.setstorage_pool_id ( storagePoolId ) ; return group ; }
public org.ovirt.engine.api.model.InstanceTypes list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( QueryType.GetAllInstanceTypes , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.InstanceType ) ) ; } }
private java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbGroup > searchDbGroups ( ) { return genericSearch ( dbGroupDao , true ) ; }
public void log ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable ) { auditLogDirector.log ( auditLogable ) ; }
public void testExtractProperIpv6AddressMultipleSlashes ( ) { org.junit.Assert.assertThat ( vdsBrokerObjectsBuilder.extractIpv6Address ( ":/:/123" ) , org.hamcrest.Matchers.is ( ":/:/123" ) ) ; }
public void poolUpdateOvfStoreOnAnyDomainSupported ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( true ) . when ( ovfDataUpdater ) . ovfOnAnyDomainSupported ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StoragePool.class ) ) ; ovfDataUpdater.ovfUpdateTimer ( ) ; verify ( java.lang.Boolean.TRUE ) ; }
public void testRemoveBadGuid ( ) throws java.lang.Exception { control.replay ( ) ; try { collection.remove ( "foo" ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testUpdateFieldsQuotaEnforcementType ( ) { vm.setQuotaEnforcementType ( QuotaEnforcementTypeEnum.DISABLED ) ; vmStatic.setQuotaEnforcementType ( QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT ) ; org.junit.Assert.assertTrue ( "Quota enforcement type should be updatable" , command.areUpdatedFieldsLegal ( ) ) ; }
protected void updateCurrentCd ( java.lang.String cdPath ) { cdPath = ( org.apache.commons.lang.StringUtils.isEmpty ( cdPath ) ) ? null : cdPath ; vmHandler.updateCurrentCd ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) , cdPath ) ; }
private void adjustRemoveExternalOptions ( java.util.Set < org.ovirt.engine.core.compat.Guid > externalProviderIds ) { if ( externalProviderIds.isEmpty ( ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK , org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK ) , createProviderReadOnlyCallback ( externalProviderIds ) ) ; }
public org.ovirt.engine.api.resource.InstanceTypeWatchdogsResource getWatchdogsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeWatchdogsResource ( guid ) ) ; }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getCACertificate ( ) { return backend.runInternalQuery ( VdcQueryType.GetCACertificate , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; }
public void testGetVdsSpmIdMapForStoragePoolAndVdsId ( ) { org.ovirt.engine.core.common.businessentities.vds_spm_id_map result = dao.get ( existingVdsSpmIdMap.getstorage_pool_id ( ) , existingVdsSpmIdMap.getvds_spm_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingVdsSpmIdMap , result ) ; }
protected void logErrorOneOrMoreActiveDomainsAreMissing ( ) { log.error ( "Can not found any default active domain for one of the disks of snapshot with id '{}'" , oldVmId ) ; }
protected org.ovirt.engine.api.model.StorageDomain getStorageDomainEntity ( ) { org.ovirt.engine.api.model.StorageDomain entity = org.mockito.Mockito.mock ( org.ovirt.engine.api.model.StorageDomain.class ) ; return org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResourceTest.setUpStorageDomainEntityExpectations ( entity , StorageType.NFS ) ; }
private void discover ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.providers.DiscoverNetworksModel discoverModel = new org.ovirt.engine.ui.uicommonweb.models.providers.DiscoverNetworksModel ( this , getEntity ( ) , commonModelProvider ) ; setWindow ( discoverModel ) ; discoverModel.discoverNetworks ( ) ; }
private void mockVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType cmdType , org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue ) { org.mockito.Mockito.doReturn ( returnValue ) . when ( resourceManager ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( cmdType ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.LEGACY ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) , UsbPolicy.ENABLED_LEGACY ) ; }
public void shouldElectActiveDataDomain ( ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareStorageDomainForElection ( StorageDomainStatus.Active , "not he domain name" , false ) ; org.junit.jupiter.api.Assertions.assertEquals ( domain , cmd.electNewMaster ( ) ) ; }
public void init ( final org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model ) { super . init ( model ) ; addUpdateHostsListener ( model ) ; addPowerManagementListener ( model ) ; addHostProviderListener ( model ) ; addRadioButtonsListeners ( model ) ; addKernelCmdlineResetListener ( model ) ; }
public void validateDisksPassDiscardSucceeds ( ) { mockPassDiscardSupport ( ValidationResult.VALID ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( runVmValidator.validateDisksPassDiscard ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setHashName ( java.lang.String value ) { hashName = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "HashName" ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { mVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getBroker ( ) . getVmStats ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( createVmInternalData ( mVmListReturn.mInfoList [ 0 ] ) ) ; }
private void init ( ) { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.QuotaCacheIntervalInMinutes ) ; schedulerUtil.scheduleAFixedDelayJob ( this , "updateQuotaCache" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , 1 , quotaCacheIntervalInMinutes , java.util.concurrent.TimeUnit.MINUTES ) ; }
public void parametersWithSecureDeletionAreNotFixedOnBlockDomainWhenPostZeroIsFalse ( ) { org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction parameters = postDeleteActionHandler.fixPostZeroField ( new org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction ( false , false ) , false ) ; assertPostZeroValue ( parameters , false ) ; }
public void testDefaultPoolFlagIsNotSetValidUsage ( ) throws java.lang.Exception { macPool.setDefaultPool ( false ) ; org.junit.Assert.assertThat ( macPoolValidator.defaultPoolFlagIsNotSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testBadGuid ( ) throws java.lang.Exception { control.replay ( ) ; try { new org.ovirt.engine.api.restapi.resource.BackendTemplateResource ( "foo" ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testGetAllForClusterWithInvalidCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getAllForCluster ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public void addLocator ( org.ovirt.api.metamodel.concepts.Locator newLocator ) { locators.add ( newLocator ) ; locators.sort ( java.util.Comparator.comparing ( Locator :: getName ) ) ; }
public void testGetClusterByClusterPolicyIdNegative ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao.getClustersByClusterPolicyId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , result.size ( ) ) ; }
protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties ( org.ovirt.engine.core.common.action.LockProperties lockProperties ) { return lockProperties.withScope ( Scope.Execution ) ; }
public long getSnapshotMemorySizeInBytes ( org.ovirt.engine.core.common.businessentities.VM vm ) { long videoRam = ( ( long ) ( videoDeviceSettings.totalVideoRAMSizeMb ( vm ) ) ) ; return ( ( ( ( vm.getVmMemSizeMb ( ) ) + 200 ) + videoRam ) * 1024 ) * 1024 ; }
public void canDoActionFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DeleteGlusterVolumeCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeActionParameters ( null , false ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public static void getISOImagesList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < java.lang.String > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh ) { org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType = org.ovirt.engine.core.common.businessentities.storage.ImageFileType.ISO ; org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList ( aQuery , storagePoolId , forceRefresh , imageFileType ) ; }
protected boolean canPerformRollbackUsingCommand ( org.ovirt.engine.core.common.action.VdcActionType commandType , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { return ( diskImageDao.get ( org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters ( ) . getDestinationImageId ( ) ) ) != null ; }
protected void AddInvalidIdErrorMessages ( org.ovirt.engine.core.common.errors.VdcBllMessages messageActionTypeParameter ) { AddErrorMessages ( messageActionTypeParameter , VdcBllMessages.ACTION_TYPE_FAILED_BOOKMARK_INVALID_ID ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ; params.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetIscsiBondsByStoragePoolId , params , new org.ovirt.engine.ui.uicommonweb.models.datacenters.SetItemsAsyncQuery ( ) ) ; }
public int getServerCount ( org.ovirt.engine.core.compat.Guid clusterId ) { return vdsDao.getAllForCluster ( clusterId ) . size ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > getQuotaClusterByQuotaGuidWithGeneralDefault ( org.ovirt.engine.core.compat.Guid quotaId ) { return getQuotaClusterByClusterGuid ( null , quotaId , false ) ; }
public void setViewFilterType ( org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostFilter viewFilterType ) { this . viewFilterType = viewFilterType ; Search ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > prepareImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) ;
private org.ovirt.engine.core.bll.ValidationResult validateMinimumVersionSupport ( ) { return org.ovirt.engine.core.common.FeatureSupported.momPolicyOnHost ( getCluster ( ) . getCompatibilityVersion ( ) ) ? ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MOM_UPDATE_VDS_VERSION ) ; }
public java.lang.Object getConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , version ) ; return cachedConfigValuesPreConvert.get ( key ) ; }
protected void beforeTask ( ) { org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( getEnclosingCommand ( ) . getParameters ( ) . getDestinationImageId ( ) , ImageStatus.LOCKED ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.getOptions ( ) . setUsbAutoShare ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }
public static void attachNetworks ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic , java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networks , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : networks ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.ATTACH_NETWORK.getCommand ( networkModel , nic , allNics ) . execute ( ) ; } }
public void succeededToRunVm ( org.ovirt.engine.core.compat.Guid vmId ) { mUnrespondedAttempts.set ( 0 ) ; sshSoftFencingExecuted.set ( false ) ; org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . succededToRunVm ( vmId , getVdsId ( ) ) ; }
public boolean isClientWindows ( ) { return clientOsType ( ) . equalsIgnoreCase ( "Windows" ) ; }
public com.google.gwt.event.shared.HandlerRegistration addWindowResizeHandler ( com.google.gwt.event.logical.shared.ResizeHandler handler ) { return com.google.gwt.user.client.Window.addResizeHandler ( handler ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... parameters ) { updateProvisionedHosts ( ) ; }
public void setTargets ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > value ) { if ( ( targets ) != value ) { targets = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Targets" ) ) ; getTargetsList ( ) . setItems ( targets ) ; } }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepSessionStart ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.Boolean force ) ;
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.clearVdsFromCache ( vds.getStoragePoolId ( ) , vds.getId ( ) , vds.getVdsName ( ) ) ; return new org.ovirt.engine.core.common.eventqueue.EventResult ( true , org.ovirt.engine.core.common.eventqueue.EventType.VDSCLEARCACHE ) ; }
public void testSendReceive ( ) throws java.lang.Exception { client.sendFile ( org.ovirt.engine.core.utils.ssh.TransferTest.local1.getAbsolutePath ( ) , remote ) ; client.receiveFile ( remote , local2.getAbsolutePath ( ) ) ; org.junit.Assert.assertArrayEquals ( digestFile ( org.ovirt.engine.core.utils.ssh.TransferTest.local1 ) , digestFile ( local2 ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getDomainList ( ) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getDomainList ( org.ovirt.engine.core.bll.GetDomainListQuery.getSessionDataContainer ( ) . getSsoAccessToken ( org.ovirt.engine.core.bll.GetDomainListQuery.getParameters ( ) . getSessionId ( ) ) ) ; }
public void testAddExistingBlockDomainSuccessfully ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest.getLUNs ( ) ) . when ( command ) . getLUNsFromVgInfo ( ) ; command.executeCommand ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.getReturnValue ( ) . getSucceeded ( ) ) ; }
com.google.gwt.safehtml.shared.SafeHtml imageTextSetupNetworkUsage ( com.google.gwt.safehtml.shared.SafeHtml image , java.lang.String text , com.google.gwt.safecss.shared.SafeStyles color ) ;
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMStopTask , new org.ovirt.engine.core.common.vdscommands.HSMTaskGuidBaseVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; }
public void onFailure ( java.lang.Throwable exception ) { operation.getCallback ( ) . onFailure ( operation , exception ) ; }
public org.ovirt.engine.core.common.businessentities.DisplayType getDefaultDisplayType ( ) { return vmStatic.getDefaultDisplayType ( ) ; }
public boolean isValid ( ) { if ( ( autoPlacement ) && ( ( autoPlacementRow ) == ( org.ovirt.engine.ui.common.widget.form.FormItem.UNASSIGNED_ROW ) ) ) { return false ; } return true ; }
protected boolean updateWipeAfterDeleteRequested ( ) { return ( getNewDisk ( ) . isWipeAfterDelete ( ) ) != ( getOldDisk ( ) . isWipeAfterDelete ( ) ) ; }
public static void checkStatusAndLockVm ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . get ( vmId ) ; org.ovirt.engine.core.bll.VmHandler.checkStatusBeforeLock ( vmDynamic.getStatus ( ) ) ; org.ovirt.engine.core.bll.VmHandler.lockVm ( vmDynamic , compensationContext ) ; }
public java.lang.String getPrincipal ( java.lang.String sessionId ) { return ( ( java.lang.String ) ( getData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.PRINCIPAL_PARAMETER_NAME , false ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , clusterId.toString ( ) ) ; }
public org.ovirt.engine.core.common.console.ConsoleOptions getOptions ( ) { return consoleOptions ; }
public void run ( ) { org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm ( getVm ( ) . getId ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( getExecutionContext ( ) ) ) ; }
private void initListBoxEditors ( ) { dataCenterEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ) ; clusterEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) ; typeListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType > ( ) ) ; }
public void testGetAllForCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = dao.getAllForCluster ( org.ovirt.engine.core.dao.VmTemplateDaoTest.CLUSTER_ID ) ; org.ovirt.engine.core.dao.VmTemplateDaoTest.assertGetAllResult ( result ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.VmTemplateDaoTest.CLUSTER_ID , template.getClusterId ( ) ) ; } }
public void tearDown ( ) { try { if ( ( client ) != null ) { client.close ( ) ; client = null ; } } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void notAllVfsAreFree ( ) { allVfsAreFreeTest ( false ) ; org.junit.Assert.assertThat ( validator.allVfsAreFree ( hostNicVfsConfigHelper ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NUM_OF_VFS_CANNOT_BE_CHANGED , java.lang.String.format ( VfsConfigValidator.NIC_NAME_REPLACEMENT , nic.getName ( ) ) ) ) ; }
protected void forceRefreshWithoutTimers ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.events.SubTabEventListModel.getEntity ( ) ) != null ) { super . forceRefreshWithoutTimers ( ) ; } }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.UserProfile > result = dao.getAll ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) ) ; }
protected boolean isStorageWithSameNameExists ( ) { return ( org.ovirt.engine.core.bll.storage.StorageDomainManagementCommandBase.getStorageDomainStaticDAO ( ) . getByName ( getStorageDomain ( ) . getStorageName ( ) ) ) != null ; }
private static java.lang.String nullToEmptyString ( java.lang.Object obj ) { return java.util.Objects.toString ( obj , "" ) ; }
public static boolean isHostBelongsToAnyOfClusters ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > clusters , org.ovirt.engine.core.common.businessentities.VDS host ) { for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters ) { if ( cluster.getId ( ) . equals ( host.getClusterId ( ) ) ) { return true ; } } return false ; }
public static void updateAllDiskImageSnapshotsStatusWithCompensation ( final org.ovirt.engine.core.compat.Guid diskId , final org.ovirt.engine.core.common.businessentities.storage.ImageStatus status , org.ovirt.engine.core.common.businessentities.storage.ImageStatus statusForCompensation , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( java.util.Collections.singletonList ( diskId ) , status , statusForCompensation , compensationContext ) ; }
public void nullNetworkWhenNoPortMirroring ( ) throws java.lang.Exception { portMirroringTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , null , false ) ; }
public void setUp ( ) { mockDao ( ) ; mockBackend ( ) ; }
protected void postConstruct ( ) { super . postConstruct ( ) ; if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) != null ) { needsHostDevices = hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } acquireHostDevicesLock ( ) ; }
private void processSessionId ( java.lang.String sessionId ) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire ( eventBus , sessionId ) ; scheduleKeepAliveHeartbeat ( ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { UpdateAlerts ( ) ; UpdateMemory ( ) ; UpdateSwapUsed ( ) ; UpdateProperties ( ) ; } }
public boolean isQuotaDefault ( ) { return this . vmStatic.isQuotaDefault ( ) ; }
java.util.List < org.ovirt.engine.core.common.businessentities.VM > getAllForVnicProfile ( org.ovirt.engine.core.compat.Guid vnicProfileId ) ;
public boolean isVmDuringInitiating ( org.ovirt.engine.core.compat.Guid vm_guid ) { return asyncRunningVms.contains ( vm_guid ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateInfoPanel ( ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getWatchdogs ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.WATCHDOG ) ; }
public boolean add ( T e ) { boolean b = super . add ( e ) ; onCollectionChanged ( ) ; return b ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { selectSpiceImplementation ( SpiceConsoleModel.ClientConsoleMode.Auto ) ; }
public void postDisconnect ( ) { if ( ( this . nioEngine ) != null ) { this . nioEngine.clearBuff ( ) ; } outbox.clear ( ) ; this . nioEngine = null ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { return snapshotsManager.addActiveSnapshot ( snapshotId , getVm ( ) , getMemoryVolumeForNewActiveSnapshot ( ) , getCompensationContext ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { if ( ! ( object.isEnabled ( ) ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.disabledPolicyUnit ( ) ; } return org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.empty ( ) ; }
public void destroy ( ) { call ( widget.getElement ( ) , org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DESTROY ) ; if ( ( clickHandler ) != null ) { clickHandler.removeHandler ( ) ; clickHandler = null ; } }
public static void checkSucceeded ( org.ovirt.engine.core.bll.QueriesCommandBase < ? > query , boolean expected ) { org.junit.jupiter.api.Assertions.assertEquals ( expected , query.getQueryReturnValue ( ) . getSucceeded ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ( ( com.google.gwt.user.client.ui.RadioButton ) ( event.getSource ( ) ) ) . getValue ( ) ) { handleRadioButtonClick ( event ) ; } }
public void setWriteRate ( int writeRateFromDiskImageDynamic ) { this . writeRateFromDiskImageDynamic = writeRateFromDiskImageDynamic ; }
protected void executeDiskModifications ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { getcurrentVm ( ) . setId ( vmId ) ; model.getInstanceImages ( ) . executeDiskModifications ( getcurrentVm ( ) ) ; }
public void testValidateGatewayIsManagementNetworkAndMultipleGatewaysSupported ( ) { doTestValidateGateway ( "someGateway" , true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void validateSucceedsOnDiskDomainCheckWhenNoDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId ) ; mockVm ( ) ; mockEntities ( storageId ) ; runAndAssertValidateSuccess ( ) ; }
protected void separateCustomProperties ( org.ovirt.engine.core.common.businessentities.VmStatic parameterMasterVm ) { if ( ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVdsGroup ( ) ) != null ) { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . separateCustomPropertiesToUserAndPredefined ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) , parameterMasterVm ) ; } }
public void validateFileToBlockSupported ( ) { storagePool.setCompatibilityVersion ( Version.v3_6 ) ; validateInvalidDestinationAndSourceDomainOfDifferentStorageSubtypes ( StorageType.NFS , StorageType.ISCSI , true ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getId ( ) , committedDiskSize , dynamicData , staticData , storageDomainSharedStatus , storageDomainOverCommitPercent , storagePoolIsoMapData , totalDiskSize , supportsDiscard , supportsDiscardZeroesData , hostedEngineStorage ) ; }
public long getAuditLogId ( ) { return this . auditLogId ; }
public org.ovirt.engine.core.common.businessentities.DbUser getByUsernameAndDomain ( java.lang.String username , java.lang.String domainName ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "username" , username ) . addValue ( "domain" , domainName ) ; return getCallsHandler ( ) . executeRead ( "GetUserByUserNameAndDomain" , org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserRowMapper.instance , parameterSource ) ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { super . markAsInvalid ( validationHints ) ; org.ovirt.engine.ui.common.widget.editor.ListModelCheckBoxGroupEditor.getValidatedWidgetStyle ( ) . setDisplay ( Display.INLINE_BLOCK ) ; }
public java.lang.String getEmulatedMachine ( ) { return this . vmDynamic.getEmulatedMachine ( ) ; }
public static org.ovirt.engine.core.common.queries.VdcQueryParametersBase eqQueryParams ( java.lang.Class < ? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values ) { org.easymock.EasyMock.reportMatcher ( new org.ovirt.engine.api.restapi.test.util.TestHelper.QueryParametersEquals ( clz , names , values ) ) ; return null ; }
public void testEmptyGetAllDisksByDiskProfiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages = dao.getAllForDiskProfiles ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ; org.junit.Assert.assertNotNull ( diskImages ) ; org.junit.Assert.assertTrue ( diskImages.isEmpty ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setvds_group_id ( vdsGroupId ) ; group.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( ) ) ; group.setstorage_pool_id ( storagePoolId ) ; return group ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.scheduling.ClusterPolicy > result = dao.getAll ( java.util.Collections.emptyMap ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.ClusterPolicyDaoTest.NUMBER_OF_CLUSTER_POLICIES , result.size ( ) ) ; }
private final < T extends org.ovirt.engine.core.common.businessentities.IVdcQueryable > java.util.List < T > genericSearch ( final org.ovirt.engine.core.dao.SearchDAO < T > dao , final boolean useCache ) { return genericSearch ( dao , useCache , null ) ; }
public void onSsoTokenChange ( org.ovirt.engine.ui.frontend.communication.SsoTokenChangeEvent event ) { this . ssoToken = event.getToken ( ) ; if ( ( this . ssoToken ) == null ) { this . ssoToken = "" ; } checkIfInitFinished ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails > getBrickProfileDetails ( ) { org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails profileDetails = new org.ovirt.engine.core.common.businessentities.gluster.BrickProfileDetails ( ) ; profileDetails.setBrickId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; profileDetails.setProfileStats ( getStatsInfo ( ) ) ; return java.util.Collections.singletonList ( profileDetails ) ; }
public void vdsName ( ) { b.setVdsName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; final java.lang.String s = b.getVdsName ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , s ) ; }
public void testNoRepeats ( ) { java.lang.String sample = org.ovirt.engine.core.utils.Ticketing.generateOTP ( ) ; for ( int x = 0 ; x < 1000 ; x ++ ) { java.lang.String other = org.ovirt.engine.core.utils.Ticketing.generateOTP ( ) ; org.junit.Assert.assertNotSame ( sample , other ) ; } }
public static java.lang.String getMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String message = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.get ( logType ) ; return message == null ? "" : message ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . remove ( commandId ) ; return null ; }
protected java.lang.String clientPlatformType ( ) { return clientAgentType.getPlatform ( ) ; }
public void init ( ) { org.ovirt.engine.core.bll.VmHandler.init ( ) ; mockVmPropertiesUtils ( ) ; org.mockito.Mockito.doNothing ( ) . when ( vmPropertiesUtils ) . separateCustomPropertiesToUserAndPredefined ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VmStatic.class ) ) ; }
public org.ovirt.engine.api.model.Steps list ( ) { org.ovirt.engine.core.common.queries.GetStepsWithSubjectEntitiesByJobIdQueryParameters params = new org.ovirt.engine.core.common.queries.GetStepsWithSubjectEntitiesByJobIdQueryParameters ( jobId ) ; java.util.List < org.ovirt.engine.api.model.Step > steps = getBackendCollection ( VdcQueryType.GetStepsWithSubjectEntitiesByJobId , params ) ; return mapCollection ( steps ) ; }
private void setHasSearchStringPrefix ( boolean value ) { if ( ( hasSearchStringPrefix ) != value ) { hasSearchStringPrefix = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "HasSearchStringPrefix" ) ) ; } }
protected boolean updateVmInSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.UpdateVmInSpm ( getVm ( ) . getstorage_pool_id ( ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.VM [ ] { getVm ( ) } ) ) ) ; }
void initListBoxEditors ( ) { hostListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VdsDynamic get ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) ; return getCallsHandler ( ) . executeRead ( "GetVdsDynamicByVdsId" , org.ovirt.engine.core.dao.VdsDynamicDAODbFacadeImpl.VdcDynamicRowMapper.instance , parameterSource ) ; }
public void externalNetworkVlanInvalid ( ) { org.mockito.Mockito.when ( network.getVlanId ( ) ) . thenReturn ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextInt ( ) ) ; org.junit.Assert.assertThat ( validator.externalNetworkVlanValid ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_WITH_VLAN_MUST_BE_LABELED ) ) ; }
public void testValidateValid ( ) { final org.ovirt.engine.core.bll.ValidationResult actual = underTest.validate ( mockVM ) ; org.hamcrest.MatcherAssert.assertThat ( actual , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.HttpHeaders headers , javax.ws.rs.core.UriInfo ui , java.lang.String defaultQuery , java.lang.Class < ? > clz ) { return org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( headers , ui , defaultQuery , clz , true ) ; }
public void validateNonExistingJobFails ( ) { command.getParameters ( ) . setParentId ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.nonExistingJobId ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( command.validate ( ) ) ) ) ; }
protected org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getProviderProxy ( ) { if ( ( providerProxy ) == null ) { providerProxy = org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.getFromStorageDomainId ( org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters ( ) . getSourceStorageDomainId ( ) ) ; } return providerProxy ; }
protected void revertTask ( ) { if ( getEnclosingCommand ( ) . getReturnValue ( ) . getSucceeded ( ) ) { getEnclosingCommand ( ) . getParameters ( ) . setExecutionIndex ( 0 ) ; } }
public void testGetFilteredWithPermissionsNoPermissionsAndNoFilter ( ) { org.ovirt.engine.core.common.businessentities.VmPool result = dao.get ( existingVmPool.getVmPoolId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; assertGetResult ( result ) ; }
public void setAddLabelStyleNames ( java.lang.String styleNames ) { addLabelStyleNames ( styleNames ) ; }
public void setAutoSuspend ( boolean value ) { this . vmStatic.setAutoSuspend ( value ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return diskImage.getDiskDescription ( ) ; }
protected void setActionMessageParameters ( ) { switch ( getParameters ( ) . getAction ( ) ) { case START : addCanDoActionMessage ( EngineMessage.VAR__ACTION__START ) ; break ; default : break ; } addCanDoActionMessage ( EngineMessage.VAR__TYPE__GLUSTER_BRICK ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.IdParameters prms = new org.ovirt.engine.core.common.action.IdParameters ( asGuid ( id ) ) ; return performAction ( ActionType.RemoveQuota , prms ) ; }
public void testGetAncestorForSon ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage result = dao.getAncestor ( existingEntity.getImageId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.DiskImageDAOTest.ANCESTOR_IMAGE_ID , result.getImageId ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage ( ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( diskDao.get ( org.ovirt.engine.core.bll.storage.lsm.CreateImagePlaceholderCommand.getParameters ( ) . getImageGroup ( ) ) ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigSet ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String configValue ) ;
public void testValidateBondModeForNonVmNetwork ( ) { validateBondModes ( false ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isEnabled = bootSequenceModel.getCdromOption ( ) . getIsChangable ( ) ; java.lang.String itemName = bootSequenceModel.getCdromOption ( ) . getTitle ( ) ; updateItemAvailability ( itemName , isEnabled ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain createSourceDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setStorageDomainType ( StorageDomainType.ImportExport ) ; sd.setStatus ( StorageDomainStatus.Active ) ; return sd ; }
protected org.ovirt.engine.core.common.businessentities.Tags getRootTag ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Tags.class , QueryType.GetRootTag , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , "root" ) ; }
private void verifyDataCenterNetworks ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result ) { org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult ( result ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : result ) { org.junit.Assert.assertEquals ( datacenter , net.getDataCenterId ( ) ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) { updateMessages ( object ) ; } }
public org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource getParent ( ) { return parent ; }
protected org.ovirt.engine.api.model.CreationStatus awaitCompletion ( org.ovirt.engine.core.common.action.ActionReturnValue result ) { return awaitCompletion ( result , org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType.VDSM_TASKS ) ; }
private boolean oldAndNewNetworkIsNotExternal ( ) { return ( ! ( getOldNetwork ( ) . isExternal ( ) ) ) && ( ! ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) . isExternal ( ) ) ) ; }
public void mtuValid ( ) { org.junit.Assert.assertThat ( validator.mtuValid ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.tags result = dao.get ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
public void testGetManagedInterfaceForVdsFilteredForPriviligedUser ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao.getManagedInterfaceForVds ( org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.VDS_ID , org.ovirt.engine.core.dao.network.PRIVILEGED_USER_ID , true ) ; org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.assertCorrectGetManagedInterfaceForVdsResult ( result ) ; }
public void setStyle ( final org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkPanelsStyle style ) { this . style = style ; addStyleName ( "ts10" ) ; animatedPanel.getElement ( ) . addClassName ( style.unassignedNetworksPanel ( ) ) ; }
public void shouldFailWhenVmNull ( ) { org.ovirt.engine.core.common.console.ConsoleOptions options = new org.ovirt.engine.core.common.console.ConsoleOptions ( org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( options ) ; org.junit.jupiter.api.Assertions.assertFalse ( getQuery ( ) . validateInputs ( ) ) ; }
public void biggerThanOrEquals ( ) { org.junit.jupiter.api.Assertions.assertFalse ( Version.v3_6.greaterOrEquals ( Version.v4_0 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( Version.v4_0.greaterOrEquals ( Version.v3_6 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( Version.v4_0.greaterOrEquals ( new org.ovirt.engine.core.compat.Version ( "3.6" ) ) ) ; }
protected void executeCommand ( ) { bookmarkDao.update ( org.ovirt.engine.core.bll.UpdateBookmarkCommand.getBookmark ( ) ) ; org.ovirt.engine.core.bll.UpdateBookmarkCommand.setSucceeded ( true ) ; }
public static void addPermissionsOnVnicProfile ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.compat.Guid vnicProfileId , boolean publicUse ) { org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermission ( userId , vnicProfileId , PredefinedRoles.NETWORK_ADMIN , VdcObjectType.VnicProfile ) ; if ( publicUse ) { org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermission ( MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID , vnicProfileId , PredefinedRoles.VNIC_PROFILE_USER , VdcObjectType.VnicProfile ) ; } }
public void ovfUpdateTimer ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePools = storagePoolDao.getAllByStatus ( StoragePoolStatus.Up ) ; updateOvfData ( storagePools ) ; }
private void guestAgentIsUpOrBalloonDeflated ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.vdsbroker.HostMonitoring.vmsWithUncontrolledBalloon.remove ( vmId ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain createStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageFormatType formatType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setStorageFormat ( formatType ) ; sd.setStorageType ( storageType ) ; return sd ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getDiskAlias ( ) ; }
public static void removeAllVdsAlerts ( org.ovirt.engine.core.compat.Guid vdsId , boolean removeConfigAlerts ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAuditLogDao ( ) . removeAllForVds ( vdsId , removeConfigAlerts ) ; }
public void testGetAllInterfacesForVdsWithPermissionsDisabledForUnpriviligedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > result = dao.getAllInterfacesForVds ( org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.VDS_ID , org.ovirt.engine.core.dao.network.UNPRIVILEGED_USER_ID , false ) ; assertGetAllForVdsCorrectResult ( result ) ; }
protected static void verifyHostDevices ( java.util.List < org.ovirt.engine.api.model.HostDevice > devices ) { org.junit.jupiter.api.Assertions.assertEquals ( 1 , devices.size ( ) ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendHostDevicesResourceTest.verifyHostDevice ( devices.get ( 0 ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propName ) ) { appendMessage ( model.getMessage ( ) ) ; } }
private void closeSshConnection ( org.ovirt.engine.core.utils.ssh.EngineSSHClient sshClient ) { if ( sshClient != null ) { try { sshClient.disconnect ( ) ; } catch ( java.lang.Exception ex ) { log.error ( "Error disconnecting SSH connection" , ex ) ; } } }
private java.util.Set < org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity > getClusterVnicProfileMappingEntities ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { final java.util.Set < org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity > result = externalVnicProfilesPerTargetCluster.get ( cluster ) ; if ( ! ( isVnicMappingChangeConfirmed ) ) { return new java.util.HashSet < > ( ) ; } else { return result ; } }
protected void executeQueryCommand ( ) { getQueryReturnValue ( ) . setReturnValue ( affinityGroupDao.get ( getParameters ( ) . getId ( ) ) ) ; }
public void removeSmartcardDevices ( org.ovirt.engine.core.compat.Guid vmId ) { removeVmDevices ( getSmartcardDevices ( vmId ) ) ; }
private java.util.Map < java.lang.String , java.lang.Object > nextArgs ( org.ovirt.engine.api.extensions.ExtMap context , boolean showHelp ) { java.util.Map < java.lang.String , java.lang.String > contextSubstitutions = new java.util.HashMap < > ( ) ; contextSubstitutions.put ( "@ENGINE_ETC@" , java.lang.System.getProperty ( "org.ovirt.engine.aaa.jdbc.engineEtc" ) ) ; contextSubstitutions.put ( "@PROGRAM_NAME@" , java.lang.System.getProperty ( "org.ovirt.engine.aaa.jdbc.programName" ) ) ; contextSubstitutions.put ( "@MODULE_LIST@" , ( ( org.apache.commons.lang.StringUtils.join ( this . getSubModules ( ) , "\n " ) ) + "\n help" ) ) ; java.util.Map < java.lang.String , java.lang.Object > parsed ; org.ovirt.engine.extension.aaa.jdbc.binding.cli.parser.ArgumentsParser argumentsParser = new org.ovirt.engine.extension.aaa.jdbc.binding.cli.parser.ArgumentsParser ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.class . getResourceAsStream ( "arguments.properties" ) , this . getName ( ) ) ; argumentsParser.getSubstitutions ( ) . putAll ( contextSubstitutions ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < java.lang.String > tail = context.get ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.TAIL , java.util.List.class ) ; argumentsParser.parse ( tail ) ; parsed = argumentsParser.getParsedArgs ( ) ; if ( showHelp || ( ! ( context.containsKey ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.EXIT_STATUS ) ) ) ) { if ( ( showHelp || ( ( java.lang.Boolean ) ( parsed.get ( "help" ) ) ) ) || ( ( ( tail.size ( ) ) > 0 ) && ( tail.get ( 0 ) . equals ( "help" ) ) ) ) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.addContextMessage ( context , false , argumentsParser.getUsage ( ) ) ; context.putIfAbsent ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.EXIT_STATUS , org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS ) ; } else { java.util.List < java.lang.Throwable > errors = argumentsParser.getErrors ( ) ; if ( ( errors.size ( ) ) > 0 ) { for ( java.lang.Throwable thr : errors ) { context.get ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.THROWABLES , java.util.List.class ) . add ( thr ) ; context.get ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.ERR_MESSAGES , java.util.List.class ) . add ( thr.getMessage ( ) ) ; } context.mput ( org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ContextKeys.EXIT_STATUS , org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.ARGUMENT_PARSING_ERROR ) ; } } } return parsed ; }
public void onTimer ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DbGroup > groups = org.ovirt.engine.core.bll.DbUserCacheManager.updateGroups ( ) ; refreshAllUserData ( groups ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getAllVMsForStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return vmDao.getAllForStorageDomain ( domainId ) ; }
public void setVersionName ( java.lang.String value ) { versionName = value ; }
public void setIsQuotaDefault ( boolean isQuotaDefault ) { this . vmStatic.setIsQuotaDefault ( isQuotaDefault ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getCdImage ( ) . setIsChangeable ( getCdAttached ( ) . getEntity ( ) ) ; }
public java.lang.Boolean getValue ( ) { if ( ( ( listModel ) == null ) || ( ( listModel.getItems ( ) ) == null ) ) { return false ; } return getCheckValue ( listModel.getItems ( ) , getSelectionModel ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , EngineMessage.ACTION_TYPE_FAILED_VM_IS_BEING_UPDATED ) ) ; }
public java.lang.Integer getMaxMemorySizeInMb ( int osId , org.ovirt.engine.core.compat.Version clusterVersion ) { return osRepository.getMaximumRam ( osId , clusterVersion ) ; }
public org.ovirt.engine.api.v3.servers.V3AssignedNetworkServer getNetworkResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return new org.ovirt.engine.api.v3.servers.V3AssignedNetworkServer ( getDelegate ( ) . getNetworkResource ( id ) ) ; }
public void testExistingPassDiscardFunctionalityIsPreservedSdHasNoDisks ( ) { storageDomain.setSupportsDiscard ( true ) ; org.junit.Assert.assertTrue ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( new java.util.LinkedList < > ( ) , storageDomain ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getEntityObject ( org.ovirt.engine.core.common.businessentities.VDS object ) { if ( object instanceof org.ovirt.engine.core.common.businessentities.VDS ) { return object ; } else { return null ; } }
VMStatus.Group hotSettableOnStatus ( ) default VMStatus.Group.NONE ;
public void stringToVCpupinIntervalsList ( ) { org.ovirt.engine.api.model.VcpuPin pin = org.ovirt.engine.api.restapi.types.VmMapper.stringToVCpupin ( "1#1-4,6" ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , ( ( int ) ( pin.getVcpu ( ) ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "1-4,6" , pin.getCpuSet ( ) ) ; }
public void checkSync ( ) { initSyncStatus ( mockNetworkAttachment , true ) ; org.junit.Assert.assertFalse ( underTest.test ( mockNetworkAttachment ) ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskInterface getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; return disk.getDiskInterface ( ) ; }
public boolean match ( org.ovirt.engine.ui.uicommonweb.models.vms.TimeZoneModel source ) { return org.ovirt.engine.core.compat.StringHelper.stringsEqual ( source.getTimeZoneKey ( ) , timeZone ) ; }
private org.ovirt.engine.core.vdsbroker.RefresherFactory getRefresherFactory ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.vdsbroker.RefresherFactory.class ) ; }
public void getIsUsbEnabledDisabled ( ) { org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; org.junit.jupiter.api.Assertions.assertFalse ( org.ovirt.engine.api.restapi.utils.UsbMapperUtils.getIsUsbEnabled ( usbPolicy ) ) ; }
private boolean deviceExists ( org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType ) { return ! ( vmDeviceDao.getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplateId ( ) , generalType ) . isEmpty ( ) ) ; }
public void testUrlWithoutFilter ( ) { org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( null ) ; org.junit.jupiter.api.Assertions.assertEquals ( "/katello/api/v2/systems/xxx/errata" , underTest.build ( ) ) ; }
public void setWarning ( java.lang.String problem ) { if ( ! ( getProblemDescription ( ) . getIsValid ( ) ) ) { return ; } getProblemDescription ( ) . setIsValid ( true ) ; getProblemDescription ( ) . setEntity ( problem ) ; }
protected void onPropertyChanged ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB ( getVm ( ) . getStaticData ( ) ) ; return null ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.QuotaVdsGroup , org.ovirt.engine.ui.uicommonweb.models.quota.QuotaListModel , org.ovirt.engine.ui.uicommonweb.models.quota.QuotaClusterListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.quotaClusterSubTabLabel ( ) , 0 , modelProvider ) ; }
private org.ovirt.engine.core.compat.Guid getPoolSpmId ( ) { if ( ( cachedSpmId ) == null ) { cachedSpmId = org.ovirt.engine.core.bll.ImageSpmCommand.getStoragePool ( ) . getSpmVdsId ( ) ; } return cachedSpmId ; }
public abstract void dispatchEvent ( org.ovirt.engine.core.notifier.filter.AuditLogEvent event , java.lang.String address ) ;
public void releaseMacsOnCommit ( java.util.List < java.lang.String > macs ) { registerRollbackHandler ( ( ( org.ovirt.engine.core.utils.transaction.TransactionSuccessListener ) ( ( ) -> { log.debug ( "Command succeeded, releasing macs {}." , macs ) ; org.ovirt.engine.core.bll.network.macpool.macPool.freeMacs ( macs ) ; } ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalRunOnceModel ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , this ) ; setWindow ( runOnceModel ) ; runOnceModel.init ( ) ; }
public void testExtractIpv6GatewayEmptyString ( ) { org.junit.Assert.assertThat ( vdsBrokerObjectsBuilder.extractIpv6Gateway ( java.util.Collections.singletonMap ( VdsProperties.IPV6_GLOBAL_GATEWAY , "" ) ) , org.hamcrest.Matchers.nullValue ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.setSearchType ( AdSearchType.USER ) ; getView ( ) . changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups ( false , false ) ; getView ( ) . userTypeChanged ( UserOrGroup.User , true ) ; model.setItems ( null ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, status=%s, nonOperationalReason=%s, stopSpmFailureLogged=%s" , super . toString ( ) , getStatus ( ) , getNonOperationalReason ( ) , isStopSpmFailureLogged ( ) ) ; }
public void testValidateCompletion ( ) { org.junit.jupiter.api.Assertions.assertTrue ( comp.validateCompletion ( "TRUE" ) , "TRUE" ) ; org.junit.jupiter.api.Assertions.assertTrue ( comp.validateCompletion ( "TR" ) , "TR" ) ; org.junit.jupiter.api.Assertions.assertFalse ( comp.validateCompletion ( "JarJar" ) , "JarJar" ) ; }
public static void LoginAsync ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain , final boolean isAdmin , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . loginAsync ( userName , password , domain , isAdmin , callback ) ; }
public void addOldPassword ( org.ovirt.engine.extension.aaa.jdbc.core.Schema.User.PasswordHistory passwordHistory , int passwordHistoryLimit ) { oldPasswords.add ( passwordHistory ) ; if ( ( oldPasswords.size ( ) ) >= passwordHistoryLimit ) { oldPasswords.remove ( oldPasswords.first ( ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > getImagesParameters ( ) { return imagesParameters ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { nodeStateMap.clear ( ) ; getNodeOpenMap ( getDataDisplayWidget ( ) . getRootTreeNode ( ) , nodeStateMap ) ; }
java.util.List < org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters > transform ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > attachments , java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > detachments , java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > updates ) ;
public void removeAllCommandsInHierarchy ( final org.ovirt.engine.core.compat.Guid commandId ) { for ( org.ovirt.engine.core.compat.Guid childCmdId : new java.util.ArrayList ( getChildCommandIds ( commandId ) ) ) { removeAllCommandsInHierarchy ( childCmdId ) ; } removeCommand ( commandId ) ; }
public void testIsInternalExecutionTrue ( ) { org.ovirt.engine.core.bll.QueriesCommandBase < ? > query = mockQuery ( ) ; query.setInternalExecution ( true ) ; org.junit.Assert.assertTrue ( "Query should be marked for internal execution" , query.isInternalExecution ( ) ) ; }
public void testJsonNullDiskDescription ( ) throws java.io.IOException { disk.setDiskAlias ( "DiskAlias" ) ; disk.setDiskDescription ( null ) ; assertDiskDescriptionMap ( disk ) ; }
private static void updateDiskVolumeType ( org.ovirt.engine.core.common.businessentities.StorageType storageType , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ( storageType.isFileDomain ( ) ) ? org.ovirt.engine.core.common.businessentities.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated ; disk.setVolumeType ( volumeType ) ; }
public void lowerVersionNoHostsWithNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworkToPool ( ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
protected java.util.List < com.google.gwt.user.client.ui.Widget > poolSpecificFields ( ) { return java.util.Arrays.< com.google.gwt.user.client.ui.Widget > asList ( numOfVmsEditor , newPoolEditVmsPanel , editPoolEditVmsPanel , editPoolIncraseNumOfVmsPanel , poolTab , prestartedVmsEditor , poolNameIcon , newPoolEditMaxAssignedVmsPerUserPanel , editPoolEditMaxAssignedVmsPerUserPanel ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateByName ( org.ovirt.engine.api.model.Template template ) { return lookupTemplateByName ( template.getName ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; if ( cluster != null ) { maintenance ( cluster.isMaintenanceReasonRequired ( ) , cluster.supportsGlusterService ( ) ) ; } }
private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.class ) . getMacPoolForDataCenter ( params.getStoragePoolId ( ) ) ; }
private boolean isNetworkChanged ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { return ! ( org.ovirt.engine.core.bll.network.template.UpdateVmTemplateInterfaceCommand.getNetworkName ( ) . equals ( iface.getNetworkName ( ) ) ) ; }
public org.ovirt.engine.api.resource.ActionResource getActionResource ( java.lang.String action , java.lang.String oid ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendActionResource ( action , oid ) ) ; }
public void areAllVfsFreeFalseHasVfPartOfBond ( ) { freeVfCommon ( 4 , 0 , 0 , 0 , 0 , 1 ) ; org.junit.Assert.assertFalse ( networkDeviceHelper.areAllVfsFree ( nic ) ) ; }
public void networkNameTakenCaseSensitivelyByDifferentNetwork ( ) throws java.lang.Exception { networkNameAvailableTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , org.ovirt.engine.core.bll.validator.NetworkValidatorTest.getSingletonNamedNetworkList ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME.toUpperCase ( ) , org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID ) ) ; }
org.ovirt.engine.api.model.Disk update ( org.ovirt.engine.api.model.Disk device ) ;
public void clearEnvironment ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.clean ( ) ; org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . removeSessionOnLogout ( session ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack getCallback ( ) { return new org.ovirt.engine.core.bll.MergeStatusCommandCallback ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult isNotLocalfsWithDefaultCluster ( ) { if ( ( ( storagePool.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) && ( containsDefaultCluster ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void validateSucceeds ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId2 , getBricks ( volumeId2 , 1 ) , 2 , 0 , false ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . updateDefaultDisplayForVmTag ( org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters ( ) . getTagsVmMap ( ) ) ; org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.setSucceeded ( true ) ; }
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final boolean isRunOnlyIfAllValidationPass , final org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback , final java.lang.Object state ) { runMultipleAction ( actionType , parameters , isRunOnlyIfAllValidationPass , callback , state , true , false ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; getModel ( ) . setReportsTabSelected ( true ) ; org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.reportsWebappDeployed = true ; getModel ( ) . updateReportsAvailability ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel getImportedNetworks ( ) { return importedNetworks ; }
public void testSetupNetworksSyncsNetwork ( ) throws java.lang.Exception { setUpNetworkQueryExpectations ( 2 ) ; setUpEntityQueryExpectations ( 1 ) ; doTestSetupNetworksSyncsNetwork ( true , java.util.Collections.singletonList ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME ) ) ; }
public void testExtractIpv6PrefixNull ( ) { org.hamcrest.MatcherAssert.assertThat ( vdsBrokerObjectsBuilder.extractIpv6Prefix ( null ) , org.hamcrest.Matchers.nullValue ( ) ) ; }
public void setVdsStrength ( int value ) { this . mVdsStatic.setVdsStrength ( value ) ; }
private boolean isActionExternal ( org.ovirt.engine.core.common.action.ActionType actionType ) { return ( ( actionType == ( org.ovirt.engine.core.common.action.ActionType.EndExternalJob ) ) || ( actionType == ( org.ovirt.engine.core.common.action.ActionType.EndExternalStep ) ) ) || ( actionType == ( org.ovirt.engine.core.common.action.ActionType.ClearExternalJob ) ) ; }
public void checkIfJobHasTasks ( ) { org.junit.jupiter.api.Assertions.assertTrue ( dao.checkIfJobHasTasks ( org.ovirt.engine.core.dao.JobDaoTest.EXISTING_JOB_ID ) , "Job has step for VDSM task" ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorCallback callback = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorCallback ) ( target ) ) ; org.ovirt.engine.ui.uicompat.Event notifyEvent = callback.getNotifyEvent ( ) ; notifyEvent.raise ( this , new org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs ( returnValue ) ) ; }
public void validateFailureOnMovingCinderDisk ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
protected org.ovirt.engine.core.bll.provider.OpenStackImageProviderProxy getProviderProxy ( ) { if ( ( providerProxy ) == null ) { providerProxy = org.ovirt.engine.core.bll.provider.OpenStackImageProviderProxy.getFromStorageDomainId ( org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters ( ) . getDestinationDomainId ( ) ) ; } return providerProxy ; }
private void removeOtherKnowAddressesForGlusterServer ( org.ovirt.engine.core.compat.Guid lastServerId ) { org.ovirt.engine.core.bll.RemoveVdsCommand.getDbFacade ( ) . getGlusterServerDao ( ) . updateKnownAddresses ( lastServerId , null ) ; }
private org.ovirt.engine.core.common.businessentities.VdsStatic getVdsStatic ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic vds = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; vds.setVdsGroupId ( clusterId ) ; vds.setHostName ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.serverName ) ; return vds ; }
public void init ( boolean security , boolean bugs , boolean enhancements ) { securityCheckbox.setValue ( security ) ; bugCheckbox.setValue ( bugs ) ; enhancementCheckbox.setValue ( enhancements ) ; showPanelItems ( true ) ; }
public java.lang.String getDuration ( ) { return org.apache.commons.lang.time.DurationFormatUtils.formatDurationWords ( ( ( new java.util.Date ( ) . getTime ( ) ) - ( org.ovirt.engine.core.bll.MigrateVmCommand.getParameters ( ) . getStartTime ( ) . getTime ( ) ) ) , true , true ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsByIds ( java.util.List < org.ovirt.engine.core.compat.Guid > vmsIds ) { return getCallsHandler ( ) . executeReadList ( "GetVmsByIds" , org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vms_ids" , createArrayOfUUIDs ( vmsIds ) ) ) ; }
private void unlockAllDiskSnapshots ( ) { for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : enclosingCommand.getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus ( parameters.getImageGroupID ( ) , ImageStatus.OK ) ; } }
public void clearEnvironment ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.clean ( ) ; org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . removeSessionOnLogout ( session ) ; }
public void testIsNetworkInSyncWhenIpv4GatewayEqual ( ) { initIpv4ConfigurationBootProtocolGateway ( Ipv4BootProtocol.STATIC_IP , true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void setLabelTooltip ( java.lang.String tooltipText ) { labelConfiguredTooltip = tooltipText ; labelTooltip.setText ( tooltipText ) ; labelTooltip.reconfigure ( ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
private void assertGetResult ( org.ovirt.engine.core.common.businessentities.VmPool result ) { org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingVmPool , result ) ; }
protected org.ovirt.engine.core.compat.Guid getPoolId ( ) { org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDao ( ) . update ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool ( ) ) ; return org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool ( ) . getVmPoolId ( ) ; }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity ( org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates ) { return imageTransferUpdater.updateEntity ( updates , org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; }
public void testCanDoActionPoolInMaintenance ( ) { getStoragePool ( ) . setStatus ( StoragePoolStatus.Maintenance ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ; }
private org.ovirt.engine.api.model.Clusters listVirtOnly ( ) { if ( isFiltered ( ) ) { return mapVirtOnlyCollection ( getBackendCollection ( QueryType.GetAllClusters , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ) ) ; } else { return mapVirtOnlyCollection ( getBackendCollection ( SearchType.Cluster ) ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getIp ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RoleGroupMap > getAllForRole ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "role_id" , id ) ; return getCallsHandler ( ) . executeReadList ( "Get_role_groups_By_role_id" , org.ovirt.engine.core.dao.RoleGroupMapDAODbFacadeImpl.RoleGroupMapRowMapper.instance , parameterSource ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommandOnClick ( org.ovirt.engine.core.common.businessentities.AuditLog value ) { modelProvider.getModel ( ) . setSelectedItem ( value ) ; return resolveCommand ( value ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( java.lang.Integer vlanId ) { return new org.ovirt.engine.core.common.businessentities.network.Network ( "" , "" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) , "" , "" , 0 , vlanId , false , 0 , true ) ; }
public java.lang.Object call ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap storagePoolIsoMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( storageDomainId , storagePoolId , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance ) ; getStoragePoolIsoMapDao ( ) . save ( storagePoolIsoMap ) ; return null ; }
public void removeTabWidget ( com.google.gwt.user.client.ui.IsWidget tabWidget ) { mainTabContainer.removeChild ( tabWidget.asWidget ( ) . getElement ( ) ) ; }
void verifyProcessFieldReturns ( boolean expected ) { boolean processField = tested.processField ( field ) ; org.hamcrest.MatcherAssert.assertThat ( processField , org.hamcrest.CoreMatchers.is ( org.hamcrest.CoreMatchers.equalTo ( expected ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm ( ) { vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setId ( org.ovirt.engine.core.bll.GetNextAvailableDiskAliasNameByVMIdQueryTest.vmId ) ; vm.setName ( org.ovirt.engine.core.bll.GetNextAvailableDiskAliasNameByVMIdQueryTest.VM_NAME ) ; vm.setDiskMap ( new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ) ; return vm ; }
public static void getGlusterVolumeBrickDetails ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.compat.Guid brickId ) { org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , volumeId , brickId , true ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void testExistingDiscardAfterDeleteFunctionalityPreservedNoDiscardAfterDeleteFunctionality ( ) { storageDomain.setDiscardAfterDelete ( false ) ; org.junit.jupiter.api.Assertions.assertTrue ( discardHelper.isExistingDiscardAfterDeleteFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 0L ) , createLunWithDiscardSupport ( 0L ) ) , storageDomain ) ) ; }
protected void revertTasks ( ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.revertTasks ( this ) ; }
private org.ovirt.engine.core.bll.ValidationResult networkNameNotUsed ( ) { org.ovirt.engine.core.common.businessentities.network.Network networkWithSameName = getOtherNetworkWithSameName ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworks ( ) ) ; return networkWithSameName != null ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_IN_USE ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void removeTabWidget ( com.google.gwt.user.client.ui.IsWidget tabWidget ) { if ( ( tabWidgetHandler ) != null ) { tabWidgetHandler.removeTabWidget ( tabWidget ) ; } }
public java.lang.Boolean getKsmState ( ) { return this . ksmState ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.aaa.DbUser > searchDbUsers ( ) { return genericSearch ( dbUserDao , true ) ; }
public java.lang.Boolean getValue ( org.ovirt.engine.core.common.businessentities.VmDevice object ) { return object.isPlugged ( ) ; }
public void disable ( java.lang.String disabilityHint ) { setEnabled ( false ) ; updateWidgetTitle ( disabilityHint ) ; }
public void vnicProfileDoesNotExist ( ) { org.mockito.Mockito.when ( vnicProfileDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( null ) ; org.hamcrest.MatcherAssert.assertThat ( validator.vnicProfileExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) ) ; }
java.util.Map < java.lang.String , java.lang.Object > snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) ;
public java.lang.Boolean isMemoryHotUnplugSupportedByArchitecture ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture , org.ovirt.engine.core.compat.Version version ) { return memoryHotUnplugSupport.get ( architecture ) . get ( version ) ; }
public void updateGlusterServerHookChecksum ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId , java.lang.String checksum ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterServerHookChecksum" , getCustomMapSqlParameterSource ( ) . addValue ( "hook_id" , hookId ) . addValue ( "server_id" , serverId ) . addValue ( "checksum" , checksum ) ) ; }
public static org.ovirt.engine.api.model.NfsVersion map ( org.ovirt.engine.api.model.NfsVersion version , org.ovirt.engine.api.model.NfsVersion outgoing ) { switch ( version ) { case V3 : return org.ovirt.engine.api.model.NfsVersion.V3 ; case V4 : return org.ovirt.engine.api.model.NfsVersion.V4 ; case V4_1 : return org.ovirt.engine.api.model.NfsVersion.V4_1 ; case AUTO : return org.ovirt.engine.api.model.NfsVersion.AUTO ; default : return null ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String engineAuthToken = ( ( java.lang.String ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; restApiSessionManager.acquireSession ( engineAuthToken ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "id" , getId ( ) ) . append ( "nameServers" , getNameServers ( ) ) . build ( ) ; }
public void testGetDefaultManagementNetworkName ( ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_NAME , underTest.getDefaultManagementNetworkName ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase ( org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase ) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId ( ) ) ; updates.setPhase ( phase ) ; return updateEntity ( updates ) ; }
public static boolean isDisplayStringCustom ( java.lang.String displayString ) { return ! ( org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.pluginForDisplay.containsKey ( displayString.toLowerCase ( ) ) ) ; }
public void validateSucceedsOnStoppedVolume ( ) { cmd.setGlusterVolumeId ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected java.util.function.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > getPredicate ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { return ( storageDomain ) -> storageDomain.getStorageDomainType ( ) . isDataDomain ( ) ; }
private void setUpGetGroupExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetAffinityGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getGroup ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult managementNetworkAttachment ( java.lang.String networkName ) { return networkCluster.isRequired ( ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_REQUIRED , java.lang.String.format ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator.NETWORK_NAME_REPLACEMENT , networkName ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.Quota , org.ovirt.engine.ui.uicommonweb.models.quota.QuotaListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.quotaMainTabLabel ( ) , 10 , modelProvider ) ; }
public java.lang.String getVmName ( ) { return this . vmStatic.getVmName ( ) ; }
public int getNumOfCpus ( boolean countThreadsAsCPU ) { return this . vmStatic.getNumOfCpus ( countThreadsAsCPU ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel model ) { driver.edit ( model ) ; publicInfo.setVisible ( model.getPublicUse ( ) . getIsAvailable ( ) ) ; }
public void setCloseCommand ( org.ovirt.engine.ui.uicommonweb.UICommand closeCommand ) { this . closeCommand = closeCommand ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateMtuSelectorsChangeability ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( "" , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; clearSession ( ) ; }
private boolean liveActionRequired ( ) { return ( ( oldIface.isPlugged ( ) ) && ( getInterface ( ) . isPlugged ( ) ) ) && ( ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) ; }
private void mockDbFacades ( ) { mockVdsGroupDao ( ) ; mockVmDao ( ) ; mockAuditLogDao ( ) ; mockVdsDao ( ) ; mockVdsDynamicDao ( ) ; }
public org.ovirt.engine.ui.uicommonweb.Convertible asConvertible ( ) { return new org.ovirt.engine.ui.uicommonweb.Convertible ( this ) ; }
public org.ovirt.engine.sdk.entities.BlockStatistics getBlockStatistics ( ) { return blockStatistics ; }
public void getAllCpuQosForCpuPool ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.qos.CpuQos > allForCpuPoolId = dao.getAllForStoragePoolId ( FixturesTool.STORAGE_POOL_NFS ) ; org.junit.jupiter.api.Assertions.assertNotNull ( allForCpuPoolId ) ; org.junit.jupiter.api.Assertions.assertEquals ( 3 , allForCpuPoolId.size ( ) ) ; }
public void testJsonEmptyDiskDescription ( ) throws java.io.IOException { org.ovirt.engine.core.bll.ImagesHandlerTest.assertDiskDescriptionMap ( "DiskAlias" , "" ) ; }
public void testValidNetworkFilterIdUseDefaultNoFilterId ( ) { org.hamcrest.MatcherAssert.assertThat ( validator.validUseDefaultNetworkFilterFlag ( true ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
int getWriteRateKbPerSec ( ) ;
private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator createHostSetupNetworksValidator ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks ) { return createHostSetupNetworksValidator ( networks , new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ) ; }
public void testGetAllForStoragePoolWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { removeListeners ( model ) ; hideAndUnbind ( ) ; }
private void removeMemoryImages ( ) { new org.ovirt.engine.core.bll.memory.MemoryImageRemoverFromExportDomain ( getVm ( ) , this , org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters ( ) . getStorageDomainId ( ) ) . remove ( ) ; }
private void initCheckBoxEditors ( ) { importGlusterConfigurationEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; countThreadsAsCoresEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; enableTrustedServiceEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
protected void init ( ) { super . init ( ) ; snapshot = glusterVolumeSnapshotDao.getByName ( org.ovirt.engine.core.bll.gluster.GlusterVolumeSnapshotCommandBase.getGlusterVolumeId ( ) , org.ovirt.engine.core.bll.gluster.GlusterVolumeSnapshotCommandBase.getParameters ( ) . getSnapshotName ( ) ) ; }
private void mockValidators ( ) { org.mockito.Mockito.doReturn ( diskValidator ) . when ( command ) . createDiskValidator ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( diskImagesValidator ) . when ( command ) . createDiskImagesValidator ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Nic device ) { validateParameters ( device , getRequiredAddFields ( ) ) ; return performCreate ( addAction , getAddParameters ( map ( device ) , device ) , getEntityIdResolver ( device.getName ( ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( C value ) { return tooltipFallback ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; resource.setParent ( getCollectionResourceMock ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Hook hook = resource.get ( ) ; assertEquals ( hook.getEventName ( ) , org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME ) ; }
public void setRenderer ( org.ovirt.engine.ui.common.widget.VisibilityRenderer renderer ) { overrideSerialNumberPolicy.setRenderer ( renderer ) ; }
public void testExtractIpv6PrefixNull ( ) { org.junit.Assert.assertThat ( vdsBrokerObjectsBuilder.extractIpv6Prefix ( null ) , org.hamcrest.Matchers.nullValue ( ) ) ; }
protected boolean isSoundDeviceEnabled ( ) { java.lang.Boolean soundDeviceEnabled = org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ; return soundDeviceEnabled != null ? soundDeviceEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSoundDevice ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters ( ) . getVmTemplateData ( ) . getId ( ) ) ; }
public void validateFileToBlockSupported ( ) { storagePool.setCompatibilityVersion ( Version.v3_6 ) ; validateInvalidDestinationAndSourceDomainOfDifferentStorageSubtypes ( StorageType.NFS , StorageType.ISCSI ) ; }
protected void init ( ) { super . init ( ) ; helper = new org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper ( control ) ; bricksResourceMock = control.createMock ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource.class ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public static java.util.List < java.lang.String > getVisibleList ( ) { return org.ovirt.engine.ui.common.utils.VisibleLocalesInfoData.getLocaleValues ( getValueFrom ( "visibleLocales" ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getParameters ( ) . isNeedsLocking ( ) ? java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId ( ) . toString ( ) , LockMessagesMatchUtil.VM ) : null ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , org.ovirt.engine.core.common.businessentities.VDS vds ) { vds.setNonOperationalReason ( reason ) ; vds.setStatus ( VDSStatus.NonOperational ) ; dbFacade.getVdsDynamicDao ( ) . update ( vds.getDynamicData ( ) ) ; }
public void clusterAlreadyInLocalFs ( ) { createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; cpuExists ( ) ; cpuManufacturersMatch ( ) ; allQueriesForVms ( ) ; storagePoolAlreadyHasCluster ( ) ; architectureIsUpdatable ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE ) ; }
public org.ovirt.engine.core.dal.dbbroker.DbEngineDialect getDbEngineDialect ( ) { return dbEngineDialect ; }
public void testBadGuid ( ) { try { new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeProviderResource ( "foo" , resource.getParent ( ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool ( ) { return org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . poolForDataCenter ( params.getStoragePoolId ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator createDiskVmElementValidator ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator ( diskDao.get ( diskId ) , diskVmElementDao.get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmId ) ) ) ; }
protected boolean canDoAction ( ) { return ( ( ( super . canDoAction ( ) ) && ( VdsGroupExists ( ) ) ) && ( changesAreClusterCompatible ( ) ) ) && ( logicalNetworkExists ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.StoragePool returnValue ) { setItems ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { doInit ( ) ; } } , externalVms ) ; }
private boolean isOutAverageRealTimeInSync ( ) { return java.util.Objects.equals ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface.getOutAverageRealtime ( ifaceQos ) , org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface.getOutAverageRealtime ( hostNetworkQos ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc getDeviceList ( int storageType , java.lang.String [ ] devicesList , boolean checkStatus ) ;
public void testCanDoActionOvfDiskNotIllegal ( ) { disk.setImageStatus ( ImageStatus.OK ) ; disk.setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_OVF_DISK_NOT_IN_APPLICABLE_STATUS ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... parameters ) { updateHosts ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { if ( ( snapshot.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE ) ) { return org.ovirt.engine.ui.common.widget.uicommon.snapshot.SnapshotsViewColumns.constants.currentSnapshotLabel ( ) ; } return org.ovirt.engine.ui.common.widget.uicommon.snapshot.SnapshotsViewColumns.fullDateTimeRenderer.render ( snapshot.getCreationDate ( ) ) ; }
public org.ovirt.engine.ui.uicompat.LocalizedEnums getEnums ( ) { if ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.GwtConstantsManager.enums ) == null ) { org.ovirt.engine.ui.uicompat.ConstantsManager.GwtConstantsManager.enums = com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.uicompat.LocalizedEnums.class ) ; } return org.ovirt.engine.ui.uicompat.ConstantsManager.GwtConstantsManager.enums ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalActionWithTasksContext ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return runInternalActionWithTasksContext ( actionType , parameters , null ) ; }
public void setMemCommited ( java.lang.Integer value ) { vdsDynamic.setMemCommited ( value ) ; calculateFreeVirtualMemory ( ) ; }
public org.ovirt.engine.core.bll.network.macpool.Range addRange ( long rangeStart , long rangeEnd ) { return addRange ( new org.ovirt.engine.core.bll.network.macpool.Range ( rangeStart , rangeEnd ) ) ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( vm.getQuotaId ( ) , vm.getQuotaName ( ) ) ; updateCpuPinningVisibility ( ) ; }
protected void refreshModel ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . SyncSearch ( VdcQueryType.GetAllAuditLogsByVMTemplateName , new org.ovirt.engine.core.common.queries.GetAllAuditLogsByVMTemplateNameParameters ( getEntity ( ) . getname ( ) ) ) ; }
protected void update ( T entity , java.lang.String procedureName ) { org.ovirt.engine.core.dao.DefaultGenericDaoDbFacade.getCallsHandler ( ) . executeModification ( procedureName , createFullParametersMapper ( entity ) ) ; }
private void setPartialPreviewSnapshotOptions ( org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel.PreivewPartialSnapshotOption > value ) { partialPreviewSnapshotOptions = value ; }
protected final < T > javax.ws.rs.core.Response performCreate ( org.ovirt.engine.core.common.action.VdcActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase taskParams , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver , boolean block ) { return performCreate ( task , taskParams , entityResolver , block , null ) ; }
private void addMemoryDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDiskForVm ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.getStorageDomain ( ) . getStorageType ( ) ) ; addDisk ( memoryDisk ) ; }
protected org.ovirt.engine.api.model.Disk getDisk ( ) { return performGet ( QueryType.GetDiskByDiskId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; }
public void rollbackQuota ( ) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getQuotaManager ( ) . rollbackQuota ( getStoragePool ( ) , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getQuotaManager ( ) . getQuotaListFromParameters ( getStorageQuotaListParameters ( ) ) ) ; }
public void setVlanNicModel ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel vlanNicmodel ) { this . vlanNicModel = vlanNicmodel ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage_server_connections > GetStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getAllForVolumeGroup ( storageDomain.getstorage ( ) ) ; }
public void addParameter ( org.ovirt.api.metamodel.concepts.Parameter newParameter ) { parameters.add ( newParameter ) ; }
public static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface findInterfaceByNetworkName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : items ) { if ( java.util.Objects.equals ( i.getNetworkName ( ) , name ) ) { return i ; } } return null ; }
private java.lang.String hostnameOrIp ( ) { return ( ( ( "(?:" + ( ip ( ) ) ) + "|" ) + ( org.ovirt.engine.core.common.utils.ValidationUtils.FQDN_PATTERN ) ) + ")" ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; } }
public java.util.Set < org.ovirt.engine.core.utils.MockConfigDescriptor < java.lang.Object > > getExtraConfigDescriptors ( ) { return java.util.Collections.singleton ( org.ovirt.engine.core.utils.MockConfigDescriptor.of ( ConfigValues.SANWipeAfterDelete , true ) ) ; }
public void completeNetworkAttachments ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , org.ovirt.engine.core.compat.Guid dataCenterId ) { for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment : networkAttachments ) { completeNetworkAttachment ( networkAttachment , clusterNetworks , dataCenterId ) ; } }
public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( false , java.util.Arrays.asList ( NetworkType.VM ) , vmNetwork1 ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getEntityWithDetails ( int index ) { return helper.getBrickEntity ( index , true ) ; }
public void setKdumpStatus ( java.lang.String value ) { if ( ! ( java.util.Objects.equals ( kdumpStatus , value ) ) ) { kdumpStatus = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "KdumpStatus" ) ) ; } }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntityStronglyTyped ( ) . getId ( ) ) ) ; }
java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getVdsToRun ( org.ovirt.engine.core.common.businessentities.VDSType type , org.ovirt.engine.core.compat.Guid groupId , org.ovirt.engine.core.common.businessentities.VDSStatus status , int minNrOfCpus ) ;
public void setVm ( org.ovirt.engine.core.common.businessentities.VM value ) { if ( ( vm ) != value ) { vm = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "VM" ) ) ; } }
private void updateSnapshotOvf ( org.ovirt.engine.core.common.businessentities.VM vm ) { vm.setSnapshots ( org.ovirt.engine.core.bll.ExportVmCommand.getDbFacade ( ) . getSnapshotDao ( ) . getAllWithConfiguration ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getId ( ) ) ) ; updateVmInSpm ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.Cluster > clusters = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Cluster > ) ( returnValue ) ) ; dcClusters.put ( dcId , clusters ) ; attachNetworkToClusters ( network , clusters , publicUse ) ; }
public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( "http://localhost:8080/ovirt-engine/sso/credentials-change.html" ) . when ( testServlet ) . getCredentialsChangeUrl ( org.mockito.ArgumentMatchers.any ( ) ) ; testServlet.setBackend ( mockBackend ) ; testServlet.init ( mockBrandingManager , "/ovirt-engine" ) ; mockBackendQuery ( VdcQueryType.GetConfigurationValue , "oVirtVersion" ) ; org.mockito.Mockito.when ( mockBrandingManager.getBrandingThemes ( ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; org.mockito.Mockito.when ( mockBrandingManager.getWelcomeSections ( org.mockito.ArgumentMatchers.any ( java.util.Locale.class ) ) ) . thenReturn ( "Welcome Section HTML" ) ; }
public java.util.List < org.ovirt.engine.core.common.action.ActionReturnValue > runInternalMultipleActions ( org.ovirt.engine.core.common.action.ActionType actionType , java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > parameters ) { return runMultipleActionsImpl ( actionType , parameters , true , false , false , null ) ; }
public void clearAllDismissedEvents ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.ClearAllAuditLogEvents , new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.events.EventListModel.this . refresh ( ) ; } } ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getById ( org.ovirt.engine.core.compat.Guid id , boolean eagerLoad ) ;
private java.util.Properties setCommonProperties ( org.ovirt.engine.core.notifier.utils.NotificationProperties aMailProps ) { java.util.Properties mailSessionProps = new java.util.Properties ( ) ; if ( org.ovirt.engine.core.notifier.transport.smtp.JavaMailSender.log.isTraceEnabled ( ) ) { mailSessionProps.put ( "mail.debug" , "true" ) ; } isBodyHtml = aMailProps.getBoolean ( Smtp.HTML_MESSAGE_FORMAT , false ) ; return mailSessionProps ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotDisabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
public int getJsonListenPort ( ) { return jsonListenPort ; }
void localize ( ) { allButton.setText ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup.constants.allDisksLabel ( ) ) ; imagesButton.setText ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup.constants.imageDisksLabel ( ) ) ; lunsButton.setText ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup.constants.lunDisksLabel ( ) ) ; cinderButton.setText ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup.constants.cinderDisksLabel ( ) ) ; }
private boolean shouldUpdateStorageDisk ( ) { return ( ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getOperation ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageOperation.Move ) ) || ( ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getParentCommand ( ) ) == ( org.ovirt.engine.core.common.action.VdcActionType.ImportVm ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > extend_image_ticket ( java.lang.String ticketId , long timeout ) ;
public void testRemoveFailed ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllDbUsers , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , getUsers ( ) ) ; doTestBadRemove ( true , false , org.ovirt.engine.api.restapi.resource.FAILURE ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.templateMainTabLabel ( ) , 8 , modelProvider ) ; }
public void statusSupportedForHostUpgradeInternal ( ) { host.setStatus ( VDSStatus.Maintenance ) ; org.hamcrest.MatcherAssert.assertThat ( validator.statusSupportedForHostUpgradeInternal ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return canEditRequired ( clusterNetworkModel ) ; }
public void testGetDataAndSetDataWithNullSession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( null ) ; org.junit.Assert.assertFalse ( "Set should fail with a null session" , container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertNull ( "Get should return null with a null session" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private void updateProperties ( ) { org.ovirt.engine.core.common.businessentities.DbUser user = ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( getEntity ( ) ) ) ; setDomain ( user.getDomain ( ) ) ; setEmail ( user.getEmail ( ) ) ; setStatus ( user.getLdapStatus ( ) ) ; }
public void handleFailure ( ) { log.error ( "Command '{}' id '{}' failed executing step '{}'" , org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType ( ) , org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getCommandId ( ) , org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters ( ) . getCommandStep ( ) ) ; }
public void testNameNotChanged ( ) { prepareVmToPassValidate ( ) ; vm.setName ( "vm1" ) ; mockSameNameQuery ( true ) ; mockVmValidator ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.junit.Assert.assertTrue ( "validate should have passed." , command.validate ( ) ) ; }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VM > aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
public javax.ws.rs.core.Response shutdown ( org.ovirt.engine.api.model.Action action ) { return doAction ( ActionType.ShutdownVm , new org.ovirt.engine.core.common.action.ShutdownVmParameters ( guid , true ) , action ) ; }
protected org.ovirt.engine.core.common.businessentities.storage_domains getStorageDomain ( int idx ) { org.ovirt.engine.core.common.businessentities.storage_domains dom = new org.ovirt.engine.core.common.businessentities.storage_domains ( ) ; dom.setId ( GUIDS [ idx ] ) ; dom.setstorage_name ( NAMES [ idx ] ) ; return dom ; }
private org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > setupQueryBySnapshotId ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = getQueryParameters ( ) ; org.mockito.Mockito.when ( queryParams.getId ( ) ) . thenReturn ( snapshotId ) ; org.ovirt.engine.core.bll.GetVmConfigurationBySnapshotQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery ( ) ; return query ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , T value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < T > valueUpdater ) { java.lang.String eventType = event.getType ( ) ; handleTitlePanel ( eventType , parent ) ; }
public void testGlusterVolumeBricksByServerId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = dao.getGlusterVolumeBricksByServerId ( FixturesTool.GLUSTER_SERVER_UUID3 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( bricks ) ; }
public boolean isBalloonEnabled ( int osId , org.ovirt.engine.core.compat.Version version ) { return getBoolean ( getValueByVersion ( idToUnameLookup.get ( osId ) , "devices.balloon.enabled" , version ) , false ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 , failure ) ; control.replay ( ) ; }
public void setDedicatedVmForVds ( org.ovirt.engine.core.compat.NGuid value ) { vmStatic.setDedicatedVmForVds ( value ) ; }
protected boolean setAndValidateCpuProfile ( ) { return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters ( ) . getVm ( ) . getStaticData ( ) , getEffectiveCompatibilityVersion ( ) ) ) ; }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getClusterInventoryStatus ( javax.sql.DataSource engineDataSource ) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterEngineDao ( engineDataSource ) ; return dao.getClusterInventorySummary ( ) ; }
private void addStyles ( ) { userNameEditor.hideLabel ( ) ; passwordEditor.hideLabel ( ) ; domainEditor.hideLabel ( ) ; }
public static boolean isManagementNetwork ( java.lang.String networkName ) { return org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork ( ) . equals ( networkName ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetSearchPanel , searchPanel ) ; configureFeedbackUrl ( ) ; }
public void validate ( ) { setupForStorageTests ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.validate ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkClusterDao ( ) . remove ( org.ovirt.engine.core.bll.DetachNetworkToVdsGroupCommand.getParameters ( ) . getVdsGroupId ( ) , org.ovirt.engine.core.bll.DetachNetworkToVdsGroupCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.DetachNetworkToVdsGroupCommand.setSucceeded ( true ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue getAllDisksByStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return runInternalQuery ( QueryType.GetAllDisksByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( domainId ) ) ; }
public java.lang.Void deleteVolume ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { return execute ( new java.util.concurrent.Callable < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void call ( ) { proxy.deleteVolume ( cinderDisk.getImageId ( ) . toString ( ) ) ; return null ; } } ) ; }
public java.lang.String getPmUser ( ) { return mVdsStatic.getPmUser ( ) ; }
private boolean isNameContainsDomain ( org.ovirt.engine.api.model.User user ) { return ( user.getUserName ( ) . contains ( "@" ) ) && ( ( user.getUserName ( ) . indexOf ( '@' ) ) != ( ( user.getUserName ( ) . length ( ) ) - 1 ) ) ; }
private void mockDiskImageDao ( ) { org.mockito.Mockito.when ( diskImageDao.getSnapshotById ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList ( ) . get ( 0 ) ) ; }
public void testValidateNetworkExclusiveOnNicsVmAndVlanAttachedToInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( true , java.util.Arrays.asList ( NetworkType.VM , NetworkType.VLAN ) , vmNetwork1 , vlanNetwork ) ; }
private void verifyNoDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory ( storageDomains , memoryDisks , vmDisks ) ; org.junit.jupiter.api.Assertions.assertNull ( storageDomain ) ; }
public void testNonExistingKey ( ) { org.junit.jupiter.api.Assertions.assertEquals ( "" , OsRepositoryImpl.INSTANCE.getOsFamily ( 666 ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propName ) ) { appendMessage ( model.getMessage ( ) ) ; } }
protected org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback getPostConnectCallback ( ) { this . callback.resetExecution ( ) ; setWaitForConnect ( ) ; return this . callback ; }
public java.lang.String render ( T sizeInMB ) { return sizeInMB != null ? ( sizeInMB.toString ( ) ) + " MB" : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel ( ) ; }
protected void executeVDSCommand ( ) { org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.init ( ) ; status = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getBroker ( ) . hotUnplugNic ( struct ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.ProceedProxyReturnValue ( ) ; }
public void setFencingOptionMappingMap ( org.ovirt.engine.core.common.queries.ValueObjectMap value ) { org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionMapping = ( value != null ) ? new java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > ( value.asMap ( ) ) : null ; }
protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties ( org.ovirt.engine.core.common.action.LockProperties lockProperties ) { return lockProperties.withScope ( Scope.Execution ) ; }
protected java.lang.String getLockMessage ( ) { return VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.name ( ) ; }
public void setHostNetworkQos ( org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos hostNetworkQos ) { this . hostNetworkQos = hostNetworkQos ; if ( ( this . hostNetworkQos ) != null ) { this . hostNetworkQos.setId ( this . getId ( ) ) ; } }
public void addExpression ( org.ovirt.api.metamodel.concepts.Expression newExpression ) { expressions.add ( newExpression ) ; }
private void stopGeoRepSessionCommand ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session ) { commandCoordinatorUtil.executeAsyncCommand ( ActionType.StopGeoRepSession , new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( session.getMasterVolumeId ( ) , session.getId ( ) ) , command.cloneContextAndDetachFromParent ( ) ) ; }
public void testValidateGatewayWhenGatewayIsNotSpecified ( ) { doTestValidateGateway ( "" , false , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.Bookmark getByName ( java.lang.String name ) { final javax.persistence.TypedQuery < org.ovirt.engine.core.common.businessentities.Bookmark > query = entityManager.createNamedQuery ( "Bookmark.byName" , org.ovirt.engine.core.common.businessentities.Bookmark.class ) ; query.setParameter ( "name" , name ) ; return singleResult ( query ) ; }
public void networkNotInUseByHosts ( ) throws java.lang.Exception { networkNotUsedByHostsTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > emptyList ( ) ) ; }
java.util.Map < org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > , java.lang.Boolean > getNicHotplugSupportMap ( ) ;
public void getClusterFeaturesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SetConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( ( ! ( vds.isDisablePowerManagementPolicy ( ) ) ) && ( ( vds.getSpmStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VdsSpmStatus.SPM ) ) ) && ( vds.isPmEnabled ( ) ) ; }
private void internalEndSuccessfully ( ) { log.infoFormat ( "Ending command successfully: {0}" , getClass ( ) . getName ( ) ) ; endSuccessfully ( ) ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { super . markAsInvalid ( validationHints ) ; updateErrorIconLabel ( validationHints ) ; errorMessage.setVisible ( true ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.Network net ) { return net.getname ( ) . equals ( getNetworkName ( ) ) ; }
private java.lang.String getErrorMessage ( ) { return java.lang.String.format ( "[within thread]: endAction for action type %1$s threw an exception." , getParameters ( ) . getDbAsyncTask ( ) . getActionParameters ( ) . getCommandType ( ) ) ; }
protected org.ovirt.engine.api.model.VM doPopulate ( org.ovirt.engine.api.model.VM model , org.ovirt.engine.api.model.VM entity ) { parent.setConsoleDevice ( model ) ; parent.setVirtioScsiController ( model ) ; parent.setVmOvfConfiguration ( model , entity ) ; return model ; }
public org.ovirt.engine.core.common.businessentities.TagsUserGroupMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.TagsUserGroupMap entity = new org.ovirt.engine.core.common.businessentities.TagsUserGroupMap ( ) ; entity.setGroupId ( getGuidDefaultEmpty ( rs , "group_id" ) ) ; entity.setTagId ( getGuidDefaultEmpty ( rs , "tag_id" ) ) ; return entity ; }
public void vnicProfileExists ( ) { org.hamcrest.MatcherAssert.assertThat ( validator.vnicProfileExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void validateGenerateVmNameStartsWithMask ( ) { org.ovirt.engine.core.utils.NameForVmInPoolGenerator generator = createNameForVmInPoolGenerator ( "???mypool" ) ; for ( int i = 1 ; i < 17 ; ++ i ) { generator.generateVmName ( ) ; } org.junit.jupiter.api.Assertions.assertEquals ( "017mypool" , generator.generateVmName ( ) ) ; }
public void updateNetConfigDirty ( org.ovirt.engine.core.compat.Guid id , java.lang.Boolean netConfigDirty ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_guid" , id ) . addValue ( "net_config_dirty" , netConfigDirty ) ; getCallsHandler ( ) . executeModification ( "UpdateVdsDynamicNetConfigDirty" , parameterSource ) ; }
public void getUsbPolicySetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getCompatibilityVersion ( ) ) , UsbPolicy.DISABLED ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _setCliEnvironmentIfNecessary ( ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_CONFIG_PREFIX ) + "DEFAULT/" ) + ( _messagingConfiguration.getBrokerType ( ) . getUsernameKey ( ) ) ) , _messagingConfiguration.getUsername ( ) ) ; return true ; }
public void encodeWithNullDiskDescription ( ) throws java.lang.Exception { disk.setDiskAlias ( "DiskAlias" ) ; disk.setDiskDescription ( null ) ; assertDiskDescriptionMap ( disk , org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry ( "DiskAlias" ) , org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskDescriptionJsonEntry ( "" ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Tag model , int index , java.lang.String parentId ) { super . verifyModel ( model , index ) ; org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.verifyParent ( model , parentId ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; }
protected org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters createParameters ( ) { return new org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( diskImageGuid , vmId ) ) ; }
public org.ovirt.sdk.ruby.RubyName getTypeName ( org.ovirt.api.metamodel.concepts.Type type ) { if ( type instanceof org.ovirt.api.metamodel.concepts.ListType ) { return getBaseListName ( ) ; } return buildName ( type.getName ( ) , null , org.ovirt.sdk.ruby.RubyNames.TYPES_DIR ) ; }
public void testGetRoleByName ( ) { org.ovirt.engine.core.common.businessentities.Role result = dao.getByName ( existingRole.getname ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingRole , result ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( nicId , nicName , label ) ; }
public void getFreeVfNoVfs ( ) { freeVfCommon ( 0 , 0 , 0 , 0 , 0 ) ; org.junit.Assert.assertNull ( hostNicVfsConfigHelper.getFreeVf ( nic ) ) ; }
java.lang.String networkLabelConflict ( java.lang.String nicName , java.lang.String labelName ) ;
public void activated ( ) { if ( ( ( getBehavior ( ) . getInstanceTypeManager ( ) ) != null ) && ( ! ( getBehavior ( ) . basedOnCustomInstanceType ( ) ) ) ) { getBehavior ( ) . getInstanceTypeManager ( ) . updateFildsAfterOsChanged ( ) ; } }
private void setProgress ( org.ovirt.engine.ui.uicommonweb.models.common.ProgressModel value ) { if ( ( progress ) != value ) { progress = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs.PROGRESS ) ) ; } }
protected void mockGetStorageDomainList ( int availableDiskSizeFirstDomain , int availableDiskSizeSecondDomain ) { storageDomainsList = getStorageDomainList ( availableDiskSizeFirstDomain , availableDiskSizeSecondDomain ) ; mockDiskImageDao ( ) ; mockStorageDomainDao ( storageDomainsList ) ; }
private void addPermission ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.compat.Guid macPoolId ) { multiLevelAdministrationHandler.addPermission ( userId , macPoolId , PredefinedRoles.MAC_POOL_ADMIN , VdcObjectType.MacPool ) ; }
public void testGetNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( true ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.resource.get ( ) ) ) ; }
protected boolean validateNoDuplicateDiskImages ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { if ( ! ( getParameters ( ) . isImportAsNewEntity ( ) ) ) { org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( images ) ; return validate ( diskImagesValidator.diskImagesAlreadyExist ( ) ) ; } return true ; }
public java.lang.String getUserPassword ( ) { java.lang.String password = org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . getLoginPassword ( ) ; return password != null ? password : "" ; }
public void testParseGetActionWithKeyInFirstArgument ( ) { parser.parse ( new java.lang.String [ ] { "--get=keyToGet" } ) ; org.junit.jupiter.api.Assertions.assertEquals ( ConfigActionType.ACTION_GET , parser.getConfigAction ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "keyToGet" , parser.getKey ( ) ) ; }
public void activateItemsUpdate ( ) { disableItemsUpdate ( ) ; model.getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateItems ( ) ; } } ) ; updateItems ( ) ; }
public void setManaged ( boolean managed ) { this . managed = managed ; }
public void testQuery ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.SEARCH_QUERY ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.SEARCH_QUERY ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc extend_image_ticket ( java.lang.String ticketId , long timeout ) ;
public void invalidVersion ( ) { createCommandWithInvalidVersion ( ) ; setupCpu ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_GIVEN_VERSION_NOT_SUPPORTED ) ; }
protected void setBond ( org.ovirt.engine.ui.uicommonweb.models.SortedListModel value ) { privateBond = value ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , volumeId , serverId , brickDirectory , brickOrder , status , asyncTask , unSyncedEntries , unSyncedEntriesTrend , selfHealEta , isArbiter ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > getOvfEntityList ( org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType ) { return unregisteredOVFDataDao.getAllForStorageDomainByEntityType ( org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters ( ) . getId ( ) , vmEntityType ) ; }
public void setStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.Status status ) { this . status = status ; }
private static org.ovirt.engine.core.common.businessentities.qos.QosBase mapCpuQosToEntity ( org.ovirt.engine.api.model.Qos model , org.ovirt.engine.core.common.businessentities.qos.CpuQos entity ) { if ( model.isSetCpuLimit ( ) ) { entity.setCpuLimit ( org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull ( model.getCpuLimit ( ) ) ) ; } return entity ; }
private static org.ovirt.engine.core.dao.PermissionDao getPermissionDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) ; }
private void handleSaslException ( org.ovirt.engine.core.bll.adbroker.LdapSearchExceptionHandlingResponse response , java.lang.Throwable cause ) { response.setOrderingAlgorithm ( OrderingAlgorithmType.PUT_LAST ) . setTranslatedException ( new org.ovirt.engine.core.bll.adbroker.AuthenticationResultException ( org.ovirt.engine.core.utils.kerberos.AuthenticationResult.CONNECTION_ERROR , ( "General connection problem due to " + cause ) ) ) . setTryNextServer ( true ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction ( org.ovirt.engine.core.bll.CommandBase < ? > action , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { org.ovirt.engine.core.bll.job.ExecutionHandler.setExecutionContextForTasks ( action.getContext ( ) , executionContext , action.getContext ( ) . getLock ( ) ) ; return runAction ( action , true ) ; }
protected < P extends org.ovirt.engine.core.common.action.VdcActionParametersBase > P sessionize ( P parameters ) { java.lang.String sessionId = getCurrent ( ) . getSessionId ( ) ; parameters.setSessionId ( sessionId ) ; return parameters ; }
void execute ( org.ovirt.engine.exttool.logger.LoggerServiceImpl module ) { logic.execute ( module ) ; }
protected boolean isHotPlugSupported ( ) { if ( org.ovirt.engine.core.common.FeatureSupported.hotPlug ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getClusterCompatibilityVersion ( ) ) ) { return true ; } return failValidation ( EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue getExistingStorageDomainList ( org.ovirt.engine.core.common.businessentities.StorageServerConnections storageServerConnection ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backend.runInternalQuery ( QueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( org.ovirt.engine.core.bll.storage.domain.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getVdsId ( ) , storageServerConnection.getStorageType ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainType.Data , storageServerConnection.getConnection ( ) ) ) ; return returnValue ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotDelete ( java.lang.String volumeName ) ;
public static java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getGuidListFromString ( java.lang.String str ) { return org.ovirt.engine.core.utils.GuidUtils.getGuidListFromStringArray ( java.util.Arrays.asList ( org.apache.commons.lang.StringUtils.split ( java.util.Objects.toString ( str , StringUtils.EMPTY ) , org.ovirt.engine.core.utils.GuidUtils.SEPARATOR ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpConnectionExpectations ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; connection.setId ( org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_CONNECTION_ID.toString ( ) ) ; connection.setConnection ( ( "10.11.12.13" + ( ":" + "/1" ) ) ) ; return connection ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; resource.setParent ( getCollectionResourceMock ( ) ) ; org.ovirt.engine.api.model.Hook hook = resource.get ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME , hook.getEventName ( ) ) ; }
protected org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator createValidator ( ) { return new org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator ( interfaceDao , networkDao , vdsDao , networkCluster ) ; }
public javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.GuestNicsConfiguration > createNicConfigurations ( org.ovirt.engine.sdk.entities.GuestNicsConfiguration value ) { return new javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.GuestNicsConfiguration > ( org.ovirt.engine.sdk.entities.ObjectFactory._NicConfigurations_QNAME , org.ovirt.engine.sdk.entities.GuestNicsConfiguration.class , null , value ) ; }
private boolean acquireLock ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { return lockManager.acquireLock ( lock ) . getFirst ( ) ; }
public java.lang.Void call ( ) { disconnect ( ) ; return null ; }
protected void setStatus ( ) { if ( org.ovirt.engine.core.bll.StartVdsCommand.getParameters ( ) . isChangeHostToMaintenanceOnStart ( ) ) { setStatus ( VDSStatus.Maintenance ) ; } else { setStatus ( VDSStatus.NonResponsive ) ; } }
public void setTrustedService ( boolean trustedService ) { this . trustedService = trustedService ; }
public boolean isFieldUpdatable ( java.lang.Enum < ? > status , java.lang.String name , java.lang.Object fieldContainer ) { return isFieldUpdatable ( status , name , fieldContainer , false ) ; }
public static void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.common.businessentities.AsyncTasks task , java.lang.String message ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskManager ( ) . logAndFailTaskOfCommandWithEmptyVdsmId ( task , message ) ; }
public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig detachable ( ) { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig ( advancedOnly , alwaysHidden , true , adminOnly ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolNotStaticNetmaskDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolNetmask ( Ipv4BootProtocol.NONE , false ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.network_cluster , org.ovirt.engine.core.common.businessentities.VDSGroup > object ) { return object.getSecond ( ) . getcompatibility_version ( ) . getValue ( ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.event_subscriber o1 , org.ovirt.engine.core.common.businessentities.event_subscriber o2 ) { return lexoNumericComparator.compare ( o1.getevent_up_name ( ) , o2.getevent_up_name ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.network.HostNetworkQos getHostNetworkQos ( ) { if ( networkAttachment.isQosOverridden ( ) ) { return org.ovirt.engine.core.common.businessentities.network.HostNetworkQos.fromAnonymousHostNetworkQos ( networkAttachment.getHostNetworkQos ( ) ) ; } else { return networkQos ; } }
protected org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network model ) { return org.ovirt.engine.api.restapi.resource.BackendNetworkHelper.addParents ( model ) ; }
public void releaseLock ( org.ovirt.engine.core.compat.Guid clusterId ) { lockManager.releaseLock ( getEngineLock ( clusterId ) ) ; }
public void testGetAllClustersByDefaultNetworkProviderId ( ) { org.hamcrest.MatcherAssert.assertThat ( dao.getAllClustersByDefaultNetworkProviderId ( FixturesTool.OVN_NETWORK_PROVIDER_ID ) . size ( ) , org.hamcrest.CoreMatchers.is ( 3 ) ) ; }
protected void executeQuery ( ) { org.ovirt.engine.core.common.businessentities.LdapUser user = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getUserByUserGuid ( getUserId ( ) ) ; if ( user != null ) { setSucceeded ( true ) ; setReturnValue ( user ) ; } else { setSucceeded ( false ) ; } }
private void handleVdsMaintenanceTimeout ( ) { getVdsEventListener ( ) . handleVdsMaintenanceTimeout ( _vds.getId ( ) ) ; _vdsManager.calculateNextMaintenanceAttemptTime ( ) ; }
public void run ( ) { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.ProcessDownVmParameters ( vmId ) ) ; } }
public void setVmDomain ( java.lang.String value ) { this . vmStatic.setDomain ( value ) ; }
public void canDoAction_noAffinityGroup_Test ( ) { org.mockito.Mockito.doReturn ( null ) . when ( command ) . getAffinityGroup ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INVALID_AFFINITY_GROUP_ID ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > RunMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValue = backend.RunMultipleActions ( actionType , parameters ) ; return returnValue ; }
protected org.ovirt.engine.api.model.Qos addParents ( org.ovirt.engine.api.model.Qos qos ) { qos.setDataCenter ( new org.ovirt.engine.api.model.DataCenter ( ) ) ; qos.getDataCenter ( ) . setId ( dataCenterId.toString ( ) ) ; return qos ; }
public void storagePoolIdDefault ( ) { final org.ovirt.engine.core.compat.Guid n = b.getStoragePoolId ( ) ; org.junit.jupiter.api.Assertions.assertNull ( n ) ; }
public java.util.stream.Stream < org.ovirt.api.metamodel.concepts.Locator > declaredLocators ( ) { return locators.stream ( ) ; }
public void clearAllDismissedAlerts ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.ClearDismissedAuditLogAlerts , new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) ) ; }
protected void incrementDbGeneration ( ) { org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmStaticDao ( ) . incrementDbGeneration ( org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getVmTemplate ( ) . getId ( ) ) ; }
protected void executeVmCommand ( ) { InitVdss ( ) ; Perform ( ) ; ProcessVm ( ) ; org.ovirt.engine.core.bll.MigrateVmCommand.setSucceeded ( true ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( java.lang.String baseIfaceName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.Vlan ( ) ; iface.setVlanId ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextInt ( 100 ) ) ; iface.setBaseInterface ( baseIfaceName ) ; return iface ; }
public void testValidateGatewayIsManagementNetworkAndMultipleGatewayIsNotSupported ( ) { doTestValidateGateway ( "someGateway" , true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.Boolean getAcpiEnable ( ) { return this . acpiEnabled ; }
protected void proceedProxyReturnValue ( ) { try { super . proceedProxyReturnValue ( ) ; } catch ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e ) { handleException ( e , "VDSNetworkException was caught" ) ; } catch ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e ) { handleException ( e , "it's in recovery mode" ) ; } }
public void testUpdateVdsReinstallRequired ( ) { dao.updateReinstallRequired ( getExistingEntityId ( ) , true ) ; org.junit.jupiter.api.Assertions.assertTrue ( dao.get ( getExistingEntityId ( ) ) . isReinstallRequired ( ) ) ; }
public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead ( ) { org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 65 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel ) ) { contentPanel.insert ( content , 0 ) ; } else { super . setInSlot ( slot , content ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmDynamicDao ( ) ; existingVm = dao.get ( new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4355" ) ) ; existingVm.setstatus ( VMStatus.Up ) ; newVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; }
public void rollback ( ) { super . rollback ( ) ; poolPerDc.modifyPool ( oldMacPool ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { switch ( org.ovirt.engine.core.bll.RemoveVmTemplateFromImportExportCommand.getActionState ( ) ) { case EXECUTE : return org.ovirt.engine.core.bll.RemoveVmTemplateFromImportExportCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE : org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED ; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; } }
public void setConsoleCurrentUserName ( java.lang.String consoleCurUserName ) { this . consoleCurUserName = consoleCurUserName ; }
public void setAndValidateWithoutDiskProfilesTest ( ) { map.put ( diskImage , org.ovirt.engine.core.bll.profiles.DiskProfileHelperTest.STORAGE_DOMAIN_1 ) ; org.junit.jupiter.api.Assertions.assertEquals ( ValidationResult.VALID , diskProfileHelper.setAndValidateDiskProfiles ( map , dbUser ) ) ; }
protected void selectedItemsChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > getClusters ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > list = new java.util.ArrayList < > ( ) ; list.add ( createCluster ( 0 , Version.v3_6 ) ) ; list.add ( createCluster ( 1 , Version.v4_0 ) ) ; return list ; }
public void newEntity ( ) { commandType = org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel.CommandType.New ; org.ovirt.engine.core.common.businessentities.Role role = new org.ovirt.engine.core.common.businessentities.Role ( ) ; initRoleDialog ( role ) ; }
public org.ovirt.engine.ui.uicommonweb.models.hosts.HostNicModel flush ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostNicModel hostNicModel = driver.flush ( ) ; labelsWidget.flush ( ) ; vfsConfigWidget.flush ( ) ; return hostNicModel ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; prepareMocks ( ) ; setUpStorageServerConnectionLunMapDao ( ) ; setUpStorageServerConnectionDao ( ) ; }
protected void initEffectiveCompatibilityVersion ( ) { setEffectiveCompatibilityVersion ( org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective ( org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) , this :: getVdsGroup ) ) ; }
public void testNicExistsWhenNicNameIsNull ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNicName ( null ) ; org.hamcrest.MatcherAssert.assertThat ( createNetworkAttachmentValidator ( attachment ) . nicNameIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.HOST_NETWORK_INTERFACE_DOES_NOT_HAVE_NAME_SET ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepConfigReset ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String userName ) ;
public java.lang.String getInterfaceName ( ) { return org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) . getName ( ) ; }
public void saveNullList ( ) { java.lang.String result = org.ovirt.engine.core.common.utils.pm.FenceProxySourceTypeHelper.saveAsString ( null ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
private java.lang.String ip ( ) { if ( supportIpv6 ) { return ( ( org.ovirt.engine.core.common.utils.ValidationUtils.IPV4_PATTERN_NON_EMPTY ) + "|" ) + ( getIpv6Pattern ( ) ) ; } else { return org.ovirt.engine.core.common.utils.ValidationUtils.IPV4_PATTERN_NON_EMPTY ; } }
public void testGetNumberOfImagesInExistingDomain ( ) { long numOfImages = dao.getNumberOfImagesInStorageDomain ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 ) ; org.junit.Assert.assertEquals ( "Number of images on storage domain different than expected" , org.ovirt.engine.core.dao.StorageDomainDaoTest.NUMBER_OF_IMAGES_ON_EXISTING_DOMAIN , numOfImages ) ; }
public org.ovirt.engine.core.bll.ValidationResult hostProviderExists ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) . when ( ( ( ( getHost ( ) . getHostProviderId ( ) ) != null ) && ( ( getProvider ( ) ) == null ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VMStatus getStatus ( ) { return this . vmDynamic.getstatus ( ) ; }
protected java.lang.Long getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return diskImage.getSize ( ) ; }
com.google.gwt.inject.client.AsyncProvider < org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterNetworkQoSPresenter > getSubTabDataCenterNetworkQoSPresenter ( ) ;
protected void executeCommand ( ) { roleDao.remove ( org.ovirt.engine.core.bll.RemoveRoleCommand.getRole ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.RemoveRoleCommand.setSucceeded ( true ) ; }
public void testNotExternalNetworkFailsForExternalNetwork ( ) { org.mockito.Mockito.when ( network.isExternal ( ) ) . thenReturn ( true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notExternalNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_FOR_EXTERNAL_NETWORK ) ) ; }
public void checkIncompatibleIpv6AddressDetailsBootProtocolDhcp ( ) { checkIncompatibleIpv6AddressDetailsBootProtocol ( Ipv6BootProtocol.DHCP ) ; }
public void testPrefixViewNotNullEvenIfEmpty ( ) throws java.lang.Exception { java.io.File file = writeConf ( ) ; org.ovirt.engine.core.extensions.mgr.Configuration config = org.ovirt.engine.core.extensions.mgr.Configuration.loadFile ( file ) ; org.junit.jupiter.api.Assertions.assertNotNull ( config ) ; org.ovirt.engine.core.extensions.mgr.Configuration view = config.getView ( "a" ) ; org.junit.jupiter.api.Assertions.assertNotNull ( view ) ; }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationDynamicConstants constants ) { headerLabel.setText ( constants.mainHeaderLabel ( ) ) ; }
private static org.ovirt.engine.api.restapi.util.LinkHelper.ApiLocationMetadata getLocationMetadata ( org.ovirt.engine.api.model.BaseResource model ) { return org.ovirt.engine.api.restapi.util.LinkHelper.getLocationMetadata ( model , null ) ; }
protected boolean canDoAction ( ) { boolean result = true ; if ( ( org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVds ( ) ) == null ) { addCanDoActionMessage ( EngineMessage.VDS_INVALID_SERVER_ID ) ; result = false ; } return result ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getDiskAlias ( ) ; }
public java.lang.Double getRoundedElapsedTime ( ) { return this . vmStatistics.getRoundedElapsedTime ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . setVmsWithvNumaNodeList ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ) ; initVNumaNodes ( ) ; this . modelReady ( ) ; }
private void handleGeneralException ( org.ovirt.engine.core.bll.adbroker.LdapSearchExceptionHandlingResponse response , java.lang.Exception e ) { response.setTranslatedException ( e ) . setTryNextServer ( true ) . setOrderingAlgorithm ( OrderingAlgorithmType.PUT_LAST ) ; }
public void testGetBynameAndVersion ( ) { org.ovirt.engine.core.common.businessentities.VdcOption result = dao.getByNameAndVersion ( existingOption.getOptionName ( ) , existingOption.getVersion ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingOption , result ) ; }
public java.util.concurrent.FutureTask < java.util.Map < java.lang.String , java.lang.Object > > futurePing ( ) ;
protected org.ovirt.engine.core.common.queries.QueryType getUsingEntitiesByQosIdQueryType ( ) { return org.ovirt.engine.core.common.queries.QueryType.GetAllNetworksByQosId ; }
void setTooltip ( com.google.gwt.safehtml.shared.SafeHtml setTooltipText ) ;
public java.lang.String getName ( ) { return getOriginalIface ( ) . getName ( ) ; }
public void testGetAllForUserWithInvalidUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllForUsers ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public org.ovirt.engine.core.bll.utils.GlusterUtil getGlusterUtils ( ) { return org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance ( ) ; }
public void getEngineSSHPublicKey ( ) { org.junit.Assert.assertNotNull ( org.ovirt.engine.core.bll.VdsDeploy._getEngineSSHPublicKey ( ) ) ; }
private boolean thereAreTasksToPoll ( ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( task.getShouldPoll ( ) ) { return true ; } } return false ; }
private void addStyles ( ) { collapseSnapshotEditor.addContentWidgetStyleName ( style.collapseEditor ( ) ) ; cloneAllEditor.addContentWidgetStyleName ( style.collapseEditor ( ) ) ; }
public void testCDAStoragePoolValid ( ) { vds.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail on mismatch Storage Pool" , command , EngineMessage.CANNOT_FORCE_SELECT_SPM_VDS_NOT_IN_POOL ) ; }
public void checkStorageDomainNotEqualWithNonActiveStatus ( ) { setStorageDomainStatus ( StorageDomainStatus.Maintenance ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.checkStorageDomainStatusNotEqual ( StorageDomainStatus.Active ) ) ; }
void setStringValue ( java.lang.String name , java.lang.String value ) ;
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.StorageType > getStorageTypeList ( ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.StorageType > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.storage.StorageType [ ] { org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI , org.ovirt.engine.core.common.businessentities.storage.StorageType.FCP } ) ) ; }
protected org.ovirt.engine.core.common.businessentities.DbUser getDbUser ( ) { if ( ( mDbUser ) == null ) { mDbUser = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . get ( getAdUserId ( ) ) ; } return mDbUser ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager getInstanceTypeManager ( ) { return instanceTypeManager ; }
public static boolean canCopyHostDevices ( org.ovirt.engine.core.common.businessentities.VmBase srcVm , org.ovirt.engine.core.common.businessentities.VmBase dstVm ) { return new java.util.HashSet ( srcVm.getDedicatedVmForVdsList ( ) ) . equals ( new java.util.HashSet ( dstVm.getDedicatedVmForVdsList ( ) ) ) ; }
public org.ovirt.api.metamodel.concepts.Parameter getParameter ( org.ovirt.api.metamodel.concepts.Name name ) { return parameters.stream ( ) . filter ( org.ovirt.api.metamodel.concepts.Named.named ( name ) ) . findFirst ( ) . orElse ( null ) ; }
public void setUp ( ) throws java.lang.Exception { testManager = new org.ovirt.engine.ui.frontend.communication.VdcOperationManager ( mockEventBus , mockOperationProcessor ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolNotStaticNetmaskDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolNetmask ( Ipv4BootProtocol.NONE , false ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected javax.ws.rs.core.Response doAdd ( org.ovirt.engine.api.model.Snapshot snapshot , boolean block ) { validateParameters ( snapshot , "description" ) ; org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters ( parentId , snapshot.getDescription ( ) ) ; return performCreate ( VdcActionType.CreateAllSnapshotsFromVm , snapshotParams , new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver ( ) , block ) ; }
java.lang.String getConsoleUserName ( ) { org.ovirt.engine.core.common.businessentities.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser ( ) ; java.lang.String domain = user.getDomain ( ) ; java.lang.String name = user.getLoginName ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( name ) ) { return null ; } if ( ( name.contains ( "@" ) ) || ( org.apache.commons.lang.StringUtils.isEmpty ( domain ) ) ) { return name ; } return ( name + "@" ) + domain ; }
public void setErrataDetailPanelVisibilty ( boolean visible ) { splitLayoutPanel.setWidgetHidden ( errataDetailPanel , ( ! visible ) ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { errataTableView.onResize ( ) ; } } ) ; }
protected java.lang.String createRequestToken ( ) { java.lang.String subTabName = modelProvider.getModel ( ) . getActiveDetailModel ( ) . getHashName ( ) ; java.lang.String requestToken = ( ( getSideTabRequest ( ) . getNameToken ( ) ) + ( org.ovirt.engine.ui.uicommonweb.place.UserPortalApplicationPlaces.SUB_TAB_PREFIX ) ) + subTabName ; return requestToken ; }
public void testBeanValidations ( ) { org.junit.Assert.assertTrue ( createCommand ( initializeMock ( 1 , 1 ) ) . validateInputs ( ) ) ; }
public void setScope ( java.lang.String dbName ) { this . scope = dbName ; }
public void onFailure ( java.lang.Throwable caught ) { callback.onFailure ( caught ) ; }
public void setLockInfo ( org.ovirt.engine.core.common.locks.LockInfo lockInfo ) { this . lockInfo = lockInfo ; }
public org.ovirt.engine.core.common.businessentities.EventNotificationMethod mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.EventNotificationMethod entity = new org.ovirt.engine.core.common.businessentities.EventNotificationMethod ( ) ; entity.setmethod_id ( rs.getInt ( "method_id" ) ) ; entity.setmethod_type ( EventNotificationMethods.EMAIL ) ; return entity ; }
public boolean isFieldsUpdated ( org.ovirt.engine.core.common.businessentities.VdsStatic source , org.ovirt.engine.core.common.businessentities.VdsStatic destination , java.lang.Iterable < java.lang.String > list ) { return updateVdsStatic.isFieldsUpdated ( source , destination , list ) ; }
protected void removeQuotaFromCache ( ) { getQuotaManager ( ) . removeQuotaFromCache ( getQuota ( ) . getStoragePoolId ( ) , getQuota ( ) . getId ( ) ) ; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask createTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters taskParameters ) { return org.ovirt.engine.core.bll.tasks.AsyncTaskFactory.construct ( taskType , taskParameters , false ) ; }
public void execute ( ) { try { executeCommand ( command ) ; } catch ( java.lang.Exception ex ) { org.ovirt.engine.ui.common.uicommon.model.DeferredModelCommandInvoker.logger.log ( java.util.logging.Level.SEVERE , "UICommand execution failed" , ex ) ; commandFailed ( command ) ; } finally { commandFinished ( command ) ; } }
private void addVolumeToDb ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity createdVolume ) { createdVolume.setClusterId ( getClusterId ( ) ) ; getGlusterVolumeDao ( ) . save ( createdVolume ) ; }
private org.ovirt.engine.core.dao.provider.ProviderDao getProviderDao ( ) { return org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade ( ) . getProviderDao ( ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendProperties ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return tsb.append ( "entityId" , entityId ) . append ( "entityType" , entityType ) ; }
public void taskEndSuccessfully ( ) { super . endSuccessfully ( ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters ( ) ; parameters.setId ( instanceTypeId ) ; parameters.setVm ( false ) ; return performAction ( ActionType.RemoveWatchdog , parameters ) ; }
public java.util.HashSet < org.ovirt.engine.core.compat.Version > getSupportedEngineVersionsSet ( ) { if ( ( supportedEngineVersionsSet ) == null ) { supportedEngineVersionsSet = parseSupportedVersions ( getSupportedEngines ( ) ) ; } return supportedEngineVersionsSet ; }
public void setAuthn ( java.lang.String sessionId , org.ovirt.engine.core.extensions.mgr.ExtensionProxy authn ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.AUTHN_PARAMETER_NAME , authn ) ; }
public void testGetAllForUserGroupWithInvalidUserGroup ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllForUserGroups ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) . toString ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity ) { verifyRelationWithHostNetworkQos ( entity ) ; hostNetworkQosDao.persistQosChanges ( entity.getId ( ) , asHostNetworkQos ( entity.getHostNetworkQos ( ) ) ) ; super . update ( entity ) ; }
public void testGetStorageDomainWithWrongStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getStorageDomains ( FixturesTool.STORAGE_POOL_NFS_INACTIVE_ISO , StorageDomainType.ISO , StorageDomainStatus.Active ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public static org.ovirt.engine.ui.frontend.Frontend getInstance ( ) { return org.ovirt.engine.ui.frontend.Frontend.InstanceHolder.instance ; }
protected void getHostListByCluster ( org.ovirt.engine.core.common.businessentities.Cluster cluster , org.ovirt.engine.ui.frontend.AsyncQuery query ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster.getId ( ) ) , query ) ; }
public void findActiveVmsUsingNetworks ( ) { mockDaos ( true ) ; java.util.List < java.lang.String > vmNames = findActiveVmsUsingNetwork.findNamesOfActiveVmsUsingNetworks ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.bll.network.FindActiveVmsUsingNetworkTest.NETWORK_NAME ) ; org.junit.jupiter.api.Assertions.assertTrue ( vmNames.contains ( org.ovirt.engine.core.bll.network.FindActiveVmsUsingNetworkTest.VM_NAME ) ) ; }
public void getVmFromId ( ) { final org.ovirt.engine.core.common.businessentities.VM v = null ; b.setVm ( v ) ; b.setVmId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.VM vm = b.getVm ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( vm ) ; }
protected org.ovirt.engine.core.common.businessentities.VM loadEntity ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , guid.toString ( ) , true ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { setCliEnvironmentIfNecessary ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_LINUXBRIDGE_CONFIG_PREFIX ) + "LINUX_BRIDGE/physical_interface_mappings" ) , _openStackAgentProperties.getAgentConfiguration ( ) . getNetworkMappings ( ) ) ; return true ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Provider > getBackendCollection ( ) { if ( isFiltered ( ) ) { return getBackendCollection ( QueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_IMAGE ) ) ; } else { return getBackendCollection ( SearchType.Provider , getConstraint ( ) ) ; } }
public void setUrl ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( url , value ) ) ) { url = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel.PROPERTY_URL ) ) ; } }
protected org.ovirt.engine.core.compat.Guid generateNonExistingId ( ) { return org.ovirt.engine.core.compat.Guid.newGuid ( ) ; }
private void assertGetHostsForStorageOperationNonGluster ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result ) { for ( org.ovirt.engine.core.common.businessentities.VDS vds : result ) { org.hamcrest.MatcherAssert.assertThat ( vds.getClusterId ( ) , org.hamcrest.CoreMatchers.not ( org.hamcrest.core.IsEqual.equalTo ( FixturesTool.GLUSTER_CLUSTER_ID ) ) ) ; } }
protected void executeVmCommand ( ) { vmManager.update ( org.ovirt.engine.core.vdsbroker.UpdateVmDynamicDataVDSCommand.getParameters ( ) . getVmDynamic ( ) ) ; org.ovirt.engine.core.vdsbroker.UpdateVmDynamicDataVDSCommand.getVDSReturnValue ( ) . setSucceeded ( true ) ; }
public void searchQueryByExistentType ( ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.PROVIDER_NAME , dao.getAllWithQuery ( java.lang.String.format ( "SELECT * FROM providers WHERE provider_type = '%s'" , FixturesTool.PROVIDER_TYPE.name ( ) ) ) . get ( 0 ) . getName ( ) ) ; }
private void searchStringPrefixChanged ( ) { setHasSearchStringPrefix ( ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( getSearchStringPrefix ( ) ) ) ) ) ; getAutoCompleteModel ( ) . setPrefix ( getSearchStringPrefix ( ) ) ; }
private void initInfoImages ( ) { infoImage = new com.google.gwt.user.client.ui.Image ( org.ovirt.engine.ui.common.widget.dialog.InfoIcon.resources.dialogIconHelp ( ) ) ; infoImageHover = new com.google.gwt.user.client.ui.Image ( org.ovirt.engine.ui.common.widget.dialog.InfoIcon.resources.dialogIconHelpRollover ( ) ) ; }
public void getJobsByOffsetAndPageSize ( ) { java.util.List < org.ovirt.engine.core.common.job.Job > jobsList = dao.getJobsByOffsetAndPageSize ( 0 , 20 ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( jobsList.isEmpty ( ) ) ) ) ; }
public boolean Validate ( ) { getEmail ( ) . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) , new org.ovirt.engine.ui.uicommonweb.validation.EmailValidation ( ) } ) ; return getEmail ( ) . getIsValid ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > getInterfaces ( ) { if ( ( interfaces ) == null ) { interfaces = getVmNicDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } return interfaces ; }
private void hideLabels ( ) { passwordEditor.hideLabel ( ) ; publicKeyEditor.hideLabel ( ) ; overrideIpTablesEditor.hideLabel ( ) ; activateHostAfterInstallEditor.hideLabel ( ) ; }
public void addContentWidgetStyleName ( java.lang.String styleName ) { if ( usePatternFly ) { getContentWidgetElement ( ) . addClassName ( styleName ) ; } else { contentWidgetContainer.addStyleName ( styleName ) ; } }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . execute ( ) ; } }
public void setValidateMsg ( org.ovirt.engine.core.common.errors.EngineMessage validateMsg ) { this . validateMsg = validateMsg ; }
protected void initializeModelHandlers ( ) { super . initializeModelHandlers ( ) ; if ( ( taskHandler ) != null ) { taskHandler.updateTree ( ) ; } }
public void setVmOs ( int value ) { this . vmStatic.setOsId ( value ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate getBaseTemplate ( ) { if ( ( cachedBaseTemplate ) == null ) { cachedBaseTemplate = org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateDao ( ) . get ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getBaseTemplateId ( ) ) ; } return cachedBaseTemplate ; }
protected org.ovirt.engine.api.model.HostDevice addParents ( org.ovirt.engine.api.model.HostDevice model ) { model.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; model.getVm ( ) . setId ( vmId.toString ( ) ) ; return super . addParents ( model ) ; }
public void setMaxVdsMemoryOverCommit ( int value ) { maxVdsMemoryOverCommit = value ; calculateFreeSchedulingMemoryCache ( ) ; }
private void setIsExpandedRecursively ( boolean value , org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel root ) { root.setIsExpanded ( value ) ; for ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel model : root.getChildren ( ) ) { setIsExpandedRecursively ( value , model ) ; } }
public void testGetClusterByClusterPolicyIdNegative ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao.getClustersByClusterPolicyId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertTrue ( ( ( result == null ) || ( ( result.size ( ) ) == 0 ) ) ) ; }
int removeByVdsmTaskId ( org.ovirt.engine.core.compat.Guid vdsmTaskId ) ;
private void setDiskStorageDomainInfo ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageDomain = new java.util.ArrayList < > ( ) ; storageDomain.add ( imageToDestinationDomainMap.get ( disk.getId ( ) ) ) ; disk.setStorageIds ( storageDomain ) ; }
public void testGetAllForClusterEmpty ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > result = dao.getAllForCluster ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
void provisionHost ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.ExternalHostGroup hg , org.ovirt.engine.core.common.businessentities.ExternalComputeResource computeResource , java.lang.String mac , java.lang.String discoverName , java.lang.String rootPassword , java.lang.String ip ) ;
public java.lang.Void runInTransaction ( ) { addVmStatic ( ) ; addVmDynamic ( ) ; addVmInterfaces ( ) ; addVmStatistics ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void insufficientStorageSpace ( ) { setupForStorageTests ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleSdValidator ) . allDomainsHaveSpaceForClonedDisks ( org.mockito.Matchers.anyList ( ) ) ; org.junit.Assert.assertFalse ( cmd.imagesRelatedChecks ( ) ) ; }
public void executeCommandWhenFailed ( ) { setupMocks ( ) ; mockBackendStatusChange ( false ) ; cmd.executeCommand ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_HOOK_DISABLE_FAILED , cmd.getAuditLogTypeValue ( ) ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getAsyncTaskIdsByEntity ( org.ovirt.engine.core.compat.Guid entityId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "entity_id" , entityId ) ; return getCallsHandler ( ) . executeReadList ( "GetAsyncTasksIdsByEntityId" , org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.IdRowMapper.instance , parameterSource ) ; }
private org.ovirt.engine.api.restapi.types.Mapper < org.ovirt.engine.core.common.businessentities.Cluster , org.ovirt.engine.core.common.businessentities.Cluster > getMapper ( ) { org.ovirt.engine.api.restapi.types.MappingLocator mappingLocator = new org.ovirt.engine.api.restapi.types.MappingLocator ( ) ; mappingLocator.populate ( ) ; return mappingLocator.getMapper ( org.ovirt.engine.core.common.businessentities.Cluster.class , org.ovirt.engine.core.common.businessentities.Cluster.class ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VdsStatic > getAllForVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroup ) { return getCallsHandler ( ) . executeReadList ( "GetVdsStaticByVdsGroupId" , org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vds_group_id" , vdsGroup ) ) ; }
private static org.ovirt.engine.api.model.HostNIC getModelHostNic ( org.ovirt.engine.api.model.NetworkAttachment model ) { org.ovirt.engine.api.model.HostNIC hostNic = model.getHostNic ( ) ; if ( hostNic == null ) { hostNic = new org.ovirt.engine.api.model.HostNIC ( ) ; model.setHostNic ( hostNic ) ; } return hostNic ; }
public void testGroupLinks ( ) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group ( ) ; group.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.GROUP_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( group ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.GROUP_HREF , group.getHref ( ) ) ; }
public void addCpuUsageHistory ( java.lang.Integer cpuUsageHistory , int limit ) { this . vmStatistics.addCpuUsageHistory ( cpuUsageHistory , limit ) ; }
protected int getDefaultRefreshRate ( ) { return org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.DEFAULT_REFRESH_RATE ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { return hostSetupNetworksValidatorHelper.validateCoherentIdentification ( java.lang.String.valueOf ( attachment.getId ( ) ) , attachment.getNicId ( ) , attachment.getNicName ( ) , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NICS_INCOHERENTLY , existingInterfacesMap ) ; }
public void put ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid rootCommandId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.core.compat.CommandStatus status ) ;
private void memSize_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.updateMinAllocatedMemory ( ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < T > event ) { if ( ctx.canSetInModel ( ) ) { ctx.setInModel ( event.getValue ( ) ) ; } }
public java.lang.String getNewParentTagName ( ) { org.ovirt.engine.core.common.businessentities.Tags newParent = org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagById ( org.ovirt.engine.core.bll.MoveTagCommand.getParameters ( ) . getNewParentId ( ) ) ; if ( newParent != null ) { return newParent.gettag_name ( ) ; } return "[null]" ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic , java.util.List < java.lang.String > networksToSync ) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment ( network , targetNic , null , networksToSync ) ; }
public void testExceptionForCommandWithNoTasks ( ) { org.ovirt.engine.core.common.action.PermissionsOperationsParametes params = new org.ovirt.engine.core.common.action.PermissionsOperationsParametes ( ) ; org.ovirt.engine.core.bll.AddPermissionCommand < org.ovirt.engine.core.common.action.PermissionsOperationsParametes > cmd = new org.ovirt.engine.core.bll.AddPermissionCommand < org.ovirt.engine.core.common.action.PermissionsOperationsParametes > ( params ) ; cmd.concreteCreateTask ( org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.nextAsyncTaskCreationInfo ( ) , VdcActionType.Unknown ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VdsStatic > getAllWithIpAddress ( java.lang.String address ) { return getCallsHandler ( ) . executeReadList ( "GetVdsStaticByIp" , org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "ip" , address ) ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.HotPlugUnplugVmNicParameters params = new org.ovirt.engine.core.common.action.HotPlugUnplugVmNicParameters ( guid , org.ovirt.engine.core.common.action.PlugAction.UNPLUG ) ; params.setVmId ( ( ( org.ovirt.engine.api.restapi.resource.BackendNicsResource ) ( collection ) ) . parentId ) ; return doAction ( VdcActionType.HotPlugUnplugVmNic , params , action ) ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase createException ( ) { final java.lang.String errorMessage = java.lang.String.format ( "Failed to %1$s, error = %2$s, code = %3$s" , org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getCommandName ( ) , getReturnStatus ( ) . mMessage , getReturnStatus ( ) . mCode ) ; return createDefaultConcreteException ( errorMessage ) ; }
public void lowerVersionNoHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
public static long greatestCommonDivisor ( long a , long b ) { while ( b != 0 ) { long c = b ; b = a % b ; a = c ; } return a ; }
protected boolean isUserAuthorizedToRunAction ( ) { if ( log.isDebugEnabled ( ) ) { log.debugFormat ( "IsUserAutorizedToRunAction: Login - no permission check" ) ; } return true ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepSessionList ( java.lang.String volumeName ) ;
private void logAfterRefreshFailureMessage ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warn ( "Failed to AfterRefreshTreatment VDS, continuing: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.VdsManager.log.debug ( "Exception" , ex ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesAction ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String [ ] serviceList , java.lang.String actionType ) ;
public final void setStringValue ( java.lang.String name , java.lang.String value ) { setValue ( name , value , ConfigCommon.defaultConfigurationVersion ) ; }
private void localize ( ) { nameEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ClusterPolicyPopupView.constants.clusterPolicyNameLabel ( ) ) ; descriptionEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ClusterPolicyPopupView.constants.clusterPolicyDescriptionLabel ( ) ) ; }
private void assertValidateSlaveHasNoLabelsFailed ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator , java.lang.String slaveName ) { org.junit.Assert.assertThat ( validator.validateSlaveHasNoLabels ( slaveName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "LABEL_ATTACH_TO_IMPROPER_INTERFACE_ENTITY" , slaveName ) ) ) ; }
public void testValidate ( ) { org.ovirt.engine.core.bll.UpdateRngDeviceCommand command = mockCommand ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public static boolean isMemorySizeLegal ( org.ovirt.engine.core.common.businessentities.VmOsType osType , int memSizeInMB , java.lang.String clusterVersion ) { return ( memSizeInMB >= ( org.ovirt.engine.core.bll.validator.VmValidationUtils.getMinMemorySizeInMb ( ) ) ) && ( memSizeInMB <= ( org.ovirt.engine.core.bll.validator.VmValidationUtils.getMaxMemorySizeInMb ( osType , clusterVersion ) ) ) ; }
public void snapshotExistsBySnapshotReturnsInvalidResultWhenNoSnapshot ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult ( validator.snapshotExists ( null ) , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
protected void executeVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksInfoVDSCommand.getBroker ( ) . getAllTasksInfo ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksInfoVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( ParseTaskInfoList ( _result.TaskInfoList ) ) ; }
private boolean isOvirtReInstallOrUpgrade ( ) { return ( org.ovirt.engine.core.bll.InstallVdsCommand.getParameters ( ) . getIsReinstallOrUpgrade ( ) ) && ( ( org.ovirt.engine.core.bll.InstallVdsCommand.getVds ( ) . getVdsType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode ) ) ; }
public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { return diskImage.getId ( ) ; }
public java.lang.Object call ( ) { getStoragePoolIsoMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( mapToRemove.getstorage_id ( ) , mapToRemove.getstorage_pool_id ( ) ) ) ; return null ; }
java.lang.String passthroughPropertyNotSupported ( java.lang.String version ) ;
public void testSimpleMatches ( ) { org.ovirt.engine.core.compat.Regex regex = new org.ovirt.engine.core.compat.Regex ( "[0-9]" ) ; org.junit.Assert.assertTrue ( "A number should match" , regex.isMatch ( "1" ) ) ; org.junit.Assert.assertFalse ( "A letter should not match" , regex.isMatch ( "a" ) ) ; }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel > getUpVms ( java.lang.Iterable items ) { return getUpVms ( items , false ) ; }
public void onModelInitialized ( org.ovirt.engine.ui.common.uicommon.model.ModelInitializedEvent event ) { initializeModelHandlers ( ) ; }
org.ovirt.engine.core.common.businessentities.StoragePool getForCluster ( org.ovirt.engine.core.compat.Guid cluster ) ;
private org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > spySearchQuery ( org.ovirt.engine.core.common.queries.SearchParameters searchParam ) { org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > ( searchParam ) ) ; mockInjections ( searchQuery ) ; return searchQuery ; }
public void validateFailsOnNullCluster ( ) { cmd.setClusterId ( null ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID.toString ( ) ) ) ; }
public java.lang.String encode ( org.ovirt.engineextensions.aaa.ldap.ASN1OctetString value , org.ovirt.engineextensions.aaa.ldap.MapProperties props ) { return java.util.Base64.encode ( value.getValue ( ) ) ; }
public org.ovirt.engine.api.model.StorageConnectionExtension update ( org.ovirt.engine.api.model.StorageConnectionExtension incoming ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetStorageServerConnectionExtensionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; return performUpdate ( incoming , resolver , ActionType.UpdateStorageServerConnectionExtension , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionResource.UpdateParametersProvider ( ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotDisabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
protected void setEffectiveCompatibilityVersion ( org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion ) { this . effectiveCompatibilityVersion = effectiveCompatibilityVersion ; }
public int compare ( org.ovirt.engine.core.common.businessentities.StorageDomain x , org.ovirt.engine.core.common.businessentities.StorageDomain y ) { return x.getStorageName ( ) . compareTo ( y.getStorageName ( ) ) ; }
protected void entityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . entityPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "name" ) ) { getSearchCommand ( ) . Execute ( ) ; } }
private boolean balloonEnabled ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { return ( model.getMemoryBalloonDeviceEnabled ( ) . getEntity ( ) ) && ( ( model.getSelectedCluster ( ) . getCompatibilityVersion ( ) . compareTo ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.BALLOON_DEVICE_MIN_VERSION ) ) >= 0 ) ; }
private void selectAsSPM ( ) { org.ovirt.engine.core.common.action.ForceSelectSPMParameters params = new org.ovirt.engine.core.common.action.ForceSelectSPMParameters ( ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getSelectedItem ( ) ) ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.ForceSelectSPM , params ) ; }
public < T > org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations add ( org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType type , T actual , T expected ) { final boolean inSync = java.util.Objects.equals ( actual , expected ) ; return add ( type , actual , expected , inSync ) ; }
public void testValidateGatewayIsManagementNetworkAndMultipleGatewayIsNotSupported ( ) { doTestValidateGateway ( "someGateway" , true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void onResponseReceived ( com.google.gwt.http.client.Request request , com.google.gwt.http.client.Response response ) { java.lang.String tokenValue = org.ovirt.engine.ui.common.utils.HttpUtils.getHeader ( response , "OVIRT-SSO-TOKEN" ) ; if ( tokenValue != null ) { org.ovirt.engine.ui.frontend.communication.SsoTokenChangeEvent.fire ( eventBus , tokenValue ) ; } callback.onResponseReceived ( request , response ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getCommonPassword ( ) . setIsChangeable ( getUseCommonPassword ( ) . getEntity ( ) ) ; getApplyPasswordCommand ( ) . setIsExecutionAllowed ( getUseCommonPassword ( ) . getEntity ( ) ) ; }
public void getClusterEditWarnings ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterEditWarnings , new org.ovirt.engine.core.common.queries.ClusterEditParameters ( cluster ) , aQuery ) ; }
public void setActualSize ( long size ) { this . actualSize = size ; }
public void passthroughNotChangedNotUsedByVms ( ) { passthroughNotChangedIfUsedByVmsTest ( false , false , true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.passthroughNotChangedIfUsedByVms ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineVirtualDiskPresenter.constants.virtualMachineVirtualDiskSubTabLabel ( ) , 2 ) ; }
public org.ovirt.engine.api.resource.HostNumaNodeResource getHostNumaNodeResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) ;
protected org.ovirt.engine.core.compat.Guid getEntityGuid ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetEntityGuid ( getEntity ( ) ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.VdsDynamic vds ) { getCallsHandler ( ) . executeModification ( "UpdateVdsDynamic" , createFullParametersMapper ( vds ) ) ; }
public void goForward ( ) { org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel ( ) . getSearchNextPageCommand ( ) . execute ( ) ; }
private boolean isVnicProfileChanged ( org.ovirt.engine.core.common.businessentities.network.VmNic oldNic , org.ovirt.engine.core.common.businessentities.network.VmNic newNic ) { return ! ( org.apache.commons.lang.ObjectUtils.equals ( oldNic.getVnicProfileId ( ) , newNic.getVnicProfileId ( ) ) ) ; }
public void testValidateImageNotInTemplateTrue ( ) { org.mockito.Mockito.when ( vmTemplateDAO.get ( mockSourceImageAndGetId ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "validation should succeed" , cmd.validateImageNotInTemplate ( ) ) ; }
public boolean runInThread ( java.lang.Runnable runnable ) { try { executorService.submit ( runnable ) ; return true ; } catch ( java.util.concurrent.RejectedExecutionException e ) { log.error ( "Task rejected due to: " , e ) ; return false ; } }
private void logSsoOnDesktopFailed ( org.ovirt.engine.ui.uicommonweb.ILogger logger , java.lang.String vmName ) { logger.info ( ( ( "SpiceConsoleManager::Connect: Failed to perform SSO on Destkop " + vmName ) + ", cancel open spice console request." ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getOldNetwork ( ) { if ( ( oldNetwork ) == null ) { oldNetwork = getNetworkById ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworks ( ) ) ; } return oldNetwork ; }
public void validateEnumsWrongArchitecture ( ) { org.ovirt.engine.api.model.Cpu entity = new org.ovirt.engine.api.model.Cpu ( ) ; entity.setArchitecture ( "wrongarchitecture" ) ; new org.ovirt.engine.api.restapi.resource.validation.CPUValidator ( ) . validateEnums ( entity ) ; }
public void testGetRelevantQuotasExistingVdsGroup ( ) throws java.lang.Exception { assertGetAllRelevantQuoatsForVdsGroup ( FixturesTool.VDS_GROUP_RHEL6_NFS , org.ovirt.engine.core.dao.QuotaDAOTest.VDS_GRUOP_NUM_QUOTAS ) ; }
protected void executeCommand ( ) { vmPoolDao.addVmToPool ( new org.ovirt.engine.core.common.businessentities.VmPoolMap ( org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmId ( ) , org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolId ( ) ) ) ; org.ovirt.engine.core.bll.AddVmToPoolCommand.setSucceeded ( true ) ; }
protected void InitDetailModels ( ) { super . InitDetailModels ( ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RolePermissionListModel ( ) ) ; setDetailModels ( list ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel read ( boolean value , org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel model ) { if ( model instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) { updateModel ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) ( model ) ) . getSpiceImpl ( ) , value ) ; } return model ; }
public void validateVmMemoryCantStartOnVdsHostTooSmall ( ) { vds.setMemFree ( 8835L ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
public void addAnnotation ( org.ovirt.api.metamodel.concepts.Annotation newAnnotation ) { annotations.add ( newAnnotation ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) && ( ( a.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ; }
private void addHostDeviceColumn ( org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable < org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.HostDeviceView > > > hostDeviceTable , java.lang.String header , java.lang.String width , org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.HostDeviceView > > column ) { column.makeSortable ( ) ; hostDeviceTable.addColumn ( column , header , width ) ; }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RolePermissionListModel rolePermissionListModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( rolePermissionListModel ) ; setDetailModels ( list ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.POOL , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
boolean isTimeToRefreshStatistics ( ) { return ( refreshIteration ) == ( NUMBER_HOST_REFRESHES_BEFORE_SAVE ) ; }
private void assertValidateMsgCount ( java.util.List < java.lang.String > validationMessages , java.lang.String msg , int count ) { org.junit.jupiter.api.Assertions.assertEquals ( java.util.Collections.frequency ( validationMessages , msg ) , count ) ; }
private void onSaveVm ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( getWindow ( ) ) ) ; java.lang.String name = model.getName ( ) . getEntity ( ) ; setcurrentVm ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) ; validateVm ( model , name ) ; }
public void onTabAccessibleChange ( org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent event ) { onTabAccessibleChanged ( ) ; }
public void testGetTreeForEntityWithClusterType ( ) { baseTestGetTreeForEntity ( org.ovirt.engine.core.dao.PermissionDaoTest.CLUSTER_ENTITY_ID , VdcObjectType.Cluster , org.ovirt.engine.core.dao.PermissionDaoTest.CLUSTER_ID ) ; }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters ( org.ovirt.engine.core.compat.Guid vdsId , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > labeledNetworksToBeAdded , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > labeledNetworksToBeRemoved , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsByLabel ) ;
protected org.ovirt.engine.core.compat.Guid getQuotaId ( ) { if ( ( ( getNewDisk ( ) ) != null ) && ( isInternalManagedDisk ( ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getNewDisk ( ) ) ) . getQuotaId ( ) ; } return null ; }
public void cleaningCompensationDataAfterSuccess ( ) { macPool.freeMacs ( macsToReleaseOnCommit ) ; }
public void sendMessage ( byte [ ] message ) { send ( new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . send ( ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION , org.ovirt.vdsm.jsonrpc.client.reactors.stomp.REQUEST_QUEUE ) . withContent ( message ) . build ( ) ) ; }
public void setUp ( ) { org.mockito.Mockito.doReturn ( mockClusterDao ) . when ( underTest ) . getClusterDao ( ) ; org.mockito.Mockito.doReturn ( mockNetworkClusterDao ) . when ( underTest ) . getNetworkClusterDao ( ) ; org.mockito.Mockito.doReturn ( mockNetworkDao ) . when ( underTest ) . getNetworkDao ( ) ; }
public org.ovirt.vdsmfake.domain.Host getActiveHost ( ) { final java.lang.String serverName = org.ovirt.vdsmfake.ContextHolder.getServerName ( ) ; final org.ovirt.vdsmfake.domain.Host host = vdsmManager.getHostByName ( serverName ) ; return host ; }
private void updateProperties ( ) { org.ovirt.engine.core.common.businessentities.DbUser user = ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( getEntity ( ) ) ) ; setDomain ( user.getDomain ( ) ) ; setEmail ( user.getEmail ( ) ) ; setActive ( user.isActive ( ) ) ; }
public java.util.Set < org.ovirt.engine.core.compat.Guid > keySet ( ) { initializeCache ( ) ; return commandMap.keySet ( ) ; }
private void writeToAuditLog ( ) { try { auditLogDirector.log ( logable , getAuditLogTypeValue ( ) ) ; } catch ( java.lang.RuntimeException ex ) { log.error ( "RegisterVdsQuery::WriteToAuditLog: An exception has been thrown." , ex ) ; } }
public void cancel ( ) { setWindow ( null ) ; org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; }
protected void validateContainerFormat ( com.woorea.openstack.glance.model.Image glanceImage ) { if ( ! ( glanceImage.getContainerFormat ( ) . equals ( org.ovirt.engine.core.bll.provider.OpenStackImageProviderProxy.GlanceImageContainer.BARE.getValue ( ) ) ) ) { throw new org.ovirt.engine.core.bll.provider.OpenStackImageException ( OpenStackImageException.ErrorType.UNSUPPORTED_CONTAINER_FORMAT , ( "Unsupported container format: " + ( glanceImage.getContainerFormat ( ) ) ) ) ; } }
public boolean match ( org.ovirt.engine.core.common.businessentities.StoragePool source ) { return id.equals ( source.getId ( ) ) ; }
public void testIsNotLocalFsWithDefaultCluster ( ) { storagePool.setIsLocal ( true ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . containsDefaultCluster ( ) ; org.junit.Assert.assertThat ( validator.isNotLocalfsWithDefaultCluster ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testUpdate ( ) { existingVmStatic.setDescription ( "updated" ) ; dao.update ( existingVmStatic ) ; org.ovirt.engine.core.common.businessentities.VmStatic result = dao.get ( org.ovirt.engine.core.dao.VmStaticDAOTest.EXISTING_VM_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingVmStatic , result ) ; }
protected void executeDiskModifications ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) . setId ( vmId ) ; model.getInstanceImages ( ) . executeDiskModifications ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( returnValue ) ) ; diskModel.getStorageDomain ( ) . setSelectedItem ( storageDomain ) ; }
public void setHBAs ( java.util.Map < java.lang.String , java.util.List < java.util.Map < java.lang.String , java.lang.String > > > HBAs ) { vdsDynamic.setHBAs ( HBAs ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate lookupInstanceTypeByName ( org.ovirt.engine.api.model.Template template ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate.class , VdcQueryType.GetInstanceType , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( template.getName ( ) ) , "GetVmTemplate" ) ; }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.StoragePool returnValue ) { setItems ( new org.ovirt.engine.ui.frontend.AsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { doInit ( ) ; } } , externalVms ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepSessionResume ( java.lang.String volumeName , java.lang.String slaveHostName , java.lang.String slaveVolumeName , java.lang.String userName , boolean force ) ;
public void checkMaskFormatValidation ( ) { runSetup ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , false , false , VdcBllMessages.UPDATE_NETWORK_ADDR_IN_SUBNET_BAD_FORMAT.name ( ) ) ; runVerify ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , VdcBllMessages.UPDATE_NETWORK_ADDR_IN_SUBNET_BAD_FORMAT.name ( ) ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getRemoveProfileParams ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile ) { return new org.ovirt.engine.core.common.action.DiskProfileParameters ( profile , profile.getId ( ) ) ; }
private void initSpyCommand ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateDestDomainsSpaceRequirements ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand ( ) ; }
public void mapNoMethodSsoFromRestToBackend ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Sso restSso = new org.ovirt.engine.api.model.Sso ( ) ; restSso.setMethods ( new org.ovirt.engine.api.model.Methods ( ) ) ; org.ovirt.engine.core.common.businessentities.SsoMethod expectedBackendSsoMethod = org.ovirt.engine.core.common.businessentities.SsoMethod.NONE ; org.junit.Assert.assertEquals ( expectedBackendSsoMethod , org.ovirt.engine.api.restapi.types.SsoMapper.map ( restSso , null ) ) ; }
private void mockNullVm ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseMockUtils.mockVmDao ( command , vmDAO ) ; mockGetForDisk ( null ) ; mockGetVmsListForDisk ( null ) ; org.mockito.Mockito.when ( vmDAO.get ( command.getParameters ( ) . getVmId ( ) ) ) . thenReturn ( null ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { org.ovirt.engine.core.common.eventqueue.EventResult result = new org.ovirt.engine.core.common.eventqueue.EventResult ( true , org.ovirt.engine.core.common.eventqueue.EventType.DOMAINMONITORING ) ; updateProblematicVdsData ( vdsId , vdsName , domainsInProblem ) ; updateMaintenanceVdsData ( vdsId , vdsName , domainsInMaintenance ) ; return result ; }
private void mockSameNameQuery ( boolean result ) { org.mockito.Mockito.doReturn ( result ) . when ( command ) . isVmWithSameNameExists ( org.mockito.ArgumentMatchers.anyString ( ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.api.model.Network.class ) , false , index ) ; }
public java.lang.String getUserNameAndDomain ( ) { java.lang.String username = org.ovirt.engine.ui.frontend.Frontend.getLoggedInUser ( ) . getLoginName ( ) ; java.lang.String domain = org.ovirt.engine.ui.frontend.Frontend.getLoggedInUser ( ) . getDomain ( ) ; return username.contains ( "@" ) ? username : ( username + "@" ) + domain ; }
public org.ovirt.engine.core.compat.Guid getId ( ) { return this . vmStatic.getId ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { updateProperties ( ) ; } }
private static void detachNetwork ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToDetach ) { if ( networkToDetach.hasVlan ( ) ) { allNics.remove ( networkToDetach.getVlanNicModel ( ) . getIface ( ) ) ; } networkToDetach.detach ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > getClusterNetworks ( ) { if ( ( cachedClusterNetworks ) == null ) { cachedClusterNetworks = getNetworkDao ( ) . getAllForCluster ( vm.getClusterId ( ) ) ; } return cachedClusterNetworks ; }
public void setUp ( ) { org.ovirt.engine.core.bll.VmHandler.init ( ) ; }
protected boolean isTemplateInValidDc ( ) { return ( VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals ( org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId ( ) ) ) || ( org.ovirt.engine.core.bll.AddVmCommand.getVmTemplate ( ) . getStoragePoolId ( ) . equals ( org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId ( ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > getTagsAttachedToObject ( ) { return getTagDAO ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.core.common.businessentities.Cluster entity = modelProvider.getModel ( ) . getEntity ( ) ; if ( entity != null ) { setMainTabSelectedItem ( entity ) ; } }
protected void mockFenceAgents ( ) { fenceAgents = create2SequentialFenceAgents ( ) ; org.mockito.Mockito.when ( fenceAgentDao.getFenceAgentsForHost ( fencedHost.getId ( ) ) ) . thenReturn ( fenceAgents ) ; }
public void testExistingDiscardAfterDeleteFunctionalityPreservedAllLunsHaveDiscardAfterDeleteFunctionality ( ) { storageDomain.setDiscardAfterDelete ( true ) ; org.junit.Assert.assertTrue ( discardHelper.isExistingDiscardAfterDeleteFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
private java.lang.String getCallbackMethod ( org.ovirt.engine.core.compat.CommandStatus status ) { switch ( status ) { case FAILED : case FAILED_RESTARTED : return "onFailed" ; case SUCCEEDED : return "onSucceeded" ; case ACTIVE : return "doPolling" ; default : return "Unknown" ; } }
public void setAppList ( java.lang.String value ) { this . vmDynamic.setAppList ( value ) ; }
protected void endWithFailure ( ) { updateOldImageActive ( SnapshotType.ACTIVE , true ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.undoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.setSucceeded ( true ) ; }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolAddressEqual ( ) { initIpv4ConfigurationBootProtocolAddress ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , true ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private org.ovirt.engine.core.common.businessentities.LeaseStatus getLeaseStatus ( java.lang.Object [ ] owners ) { return vdsBrokerObjectsBuilder.buildLeaseStatus ( java.util.Collections.singletonMap ( "owners" , owners ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsUsingProfile ( ) { return vmDao.getAllForDiskProfiles ( java.util.Collections.singletonList ( getProfile ( ) . getId ( ) ) ) ; }
private void CleanConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection , org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RemoveStorageServerConnection , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId ) , null , this ) ; }
public int getJsonThreadPoolSize ( ) { return jsonThreadPoolSize ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; context.addClusterReturnValue = returnValue ; prepare3 ( ) ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( "" , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void addIsoStorage ( ) { addStorageInternal ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . newISOLibraryTitle ( ) , StorageDomainType.ISO ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageServerConnections findConnectionWithSameDetails ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { return iscsiStorageHelper.findConnectionWithSameDetails ( connection ) ; }
public void setStatus ( org.ovirt.engine.core.common.businessentities.VMStatus value ) { this . vmDynamic.setStatus ( value ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { getCallback ( ) . vnicCreated ( id , unitVmModel ) ; }
public void checkValidIpv6ConfigurationStaticBootProtocol ( ) { initIpv6ConfigurationDetails ( Ipv6BootProtocol.STATIC_IP , true , true ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.String render ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { return storagePool != null ? storagePool.getName ( ) : org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . anyDataCenter ( ) ; }
public void canDoActionSucceedsInitFormatDataDomain30 ( ) { sd.setStorageFormat ( null ) ; sp.setCompatibilityVersion ( Version.v3_0 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( cmd ) ; org.junit.Assert.assertEquals ( "Format not initialized correctly" , StorageFormatType.V1 , sd.getStorageFormat ( ) ) ; }
private boolean lunsEqual ( org.ovirt.engine.api.model.LogicalUnit firstLun , org.ovirt.engine.api.model.LogicalUnit secondLun ) { return java.util.Objects.equals ( firstLun.getId ( ) , secondLun.getId ( ) ) ; }
protected static void handleException ( java.lang.Exception e ) { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE , e.getMessage ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model.setDataCenterVersion ( storagePool.getCompatibilityVersion ( ) ) ; }
public boolean matches ( java.lang.Object argument ) { if ( ! ( argument instanceof org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ) ) { return false ; } return ( ( org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase ) ( argument ) ) . getVdsId ( ) . equals ( org.ovirt.engine.core.bll.gluster.GlusterHookSyncJobTest.SERVER_GUIDS [ index ] ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.StartGlusterVolumeVDSCommand.getBroker ( ) . glusterVolumeStart ( org.ovirt.engine.core.vdsbroker.gluster.StartGlusterVolumeVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.StartGlusterVolumeVDSCommand.getParameters ( ) . isForceAction ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.StartGlusterVolumeVDSCommand.proceedProxyReturnValue ( ) ; }
public void runMultipleActions ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback successCallback ) { runMultipleActions ( actionType , parameters , successCallback , null ) ; }
public void parametersWithSecureDeletionAreNotFixedOnBlockDomainWhenPostZeroIsFalse ( ) { org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction parameters = postDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction ( false ) , false ) ; assertPostZeroValue ( parameters , false ) ; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createStoragePoolLocalFS ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool.setIsLocal ( true ) ; return pool ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( object.getOptimizationCustom_IsSelected ( ) . getEntity ( ) ) { optimizationCustomFormatter ( object ) ; optimizationCustomEditor.setVisible ( true ) ; } }
public void setVolumeType ( org.ovirt.engine.core.common.businessentities.VolumeType type ) { volumeType = type ; setSelectedVolumeType ( type ) ; }
public void setSingleQxlPci ( boolean value ) { this . vmStatic.setSingleQxlPci ( value ) ; }
public java.lang.Integer parse ( java.lang.CharSequence text ) throws java.text.ParseException { return increaseNumOfVmsEditor.asEditor ( ) . getValue ( ) ; }
public void testDefaultRouteWhenOutOfSync ( ) { network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; org.junit.Assert.assertThat ( createTestedInstance ( true , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public boolean isSetExpectedValue ( ) { return ( this . expectedValue ) != null ; }
public void numOfVfsIsNotInRange ( ) { numOfVfsInValidRange ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NUM_OF_VFS_NOT_IN_VALID_RANGE ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , java.lang.String value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < java.lang.String > valueUpdater ) { delegate.onBrowserEvent ( context , parent , value , event , valueUpdater ) ; }
protected boolean doesStorageDomainhaveSpaceForRequest ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , long sizeRequested ) { return new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( storageDomain ) . isDomainHasSpaceForRequest ( sizeRequested ) . isValid ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.Provider p1 , org.ovirt.engine.core.common.businessentities.Provider p2 ) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp ( p1.getName ( ) , p2.getName ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.api.model.DiskProfile diskProfile = getDiskProfile ( id ) ; return performAction ( ActionType.RemoveDiskProfile , new org.ovirt.engine.core.common.action.DiskProfileParameters ( diskProfile ) ) ; }
public void onSuccess ( java.lang.Integer returnValue ) { maxCpus = returnValue ; postUpdateNumOfSockets2 ( ) ; }
protected void moveTag ( org.ovirt.engine.core.compat.Guid newParentId ) { performAction ( ActionType.MoveTag , new org.ovirt.engine.core.common.action.MoveTagParameters ( guid , newParentId ) , java.lang.Void.class ) ; }
public org.ovirt.vdsmfake.domain.StorageDomain getStorageDomainById ( java.lang.String id ) { return org.ovirt.vdsmfake.domain.VdsmManager.getInstance ( ) . getStorageDomainById ( id ) ; }
public void testGetForStoragePoolWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_STORAGE_POOL_ID ) ; org.junit.Assert.assertNull ( result ) ; }
public org.ovirt.engine.core.bll.ValidationResult interfaceExists ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) . when ( ( ( iface ) == null ) ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__REBALANCE_STOP ) ; addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_VOLUME ) ; super . setActionMessageParameters ( ) ; }
protected void vdsNonOperational ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . vdsNonOperational ( vds.getId ( ) , reason , true , true , Guid.Empty , customLogValues ) ; }
public org.ovirt.engine.core.common.action.ActionReturnValue runAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.ActionParametersBase parameters ) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { return returnValue ; } return runActionImpl ( actionType , parameters , false , null ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { setEnumTitle ( object.getDiskStorageType ( ) ) ; return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN ) ? resources.externalDiskIcon ( ) : null ; }
public void testInterfaceByNameExistsWhenInterfacesNameIsNull ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( createVdsNetworkInterfaceWithName ( null ) ) . interfaceByNameExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public void testIsInStatusValid ( ) { org.junit.Assert.assertThat ( validator.isInStatus ( StoragePoolStatus.Up , StoragePoolStatus.Contend ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; org.junit.Assert.assertThat ( validator.isNotInStatus ( StoragePoolStatus.Up , StoragePoolStatus.Contend ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ) ; }
public void validate ( ) { initializeSuppliedImage ( ) ; org.junit.Assert.assertTrue ( transferImageCommand.validate ( ) ) ; }
private void logFailureMessage ( java.lang.String messagePrefix , java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.error ( "{} vds={}({}): {}" , messagePrefix , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) , _vds.getName ( ) , _vds.getId ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetVmCustomPropertiesQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . getAllVmProperties ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VM getEntityWithProvidedId ( int index , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.api.restapi.resource.VM vm = new org.ovirt.engine.api.restapi.resource.VM ( ) ; return org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.setUpEntityExpectations ( vm , vm.getStatisticsData ( ) , index , vmId ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return diskImage.getDiskDescription ( ) ; }
public void statusNotSupportedForHostInstallation ( ) { org.mockito.Mockito.when ( oldHost.getStatus ( ) ) . thenReturn ( VDSStatus.Up ) ; validator = createValidatorForHostInstallation ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.statusSupportedForHostInstallation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_CANNOT_INSTALL_STATUS_ILLEGAL ) ) ; }
private boolean runVm ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.utils.lock.EngineLock lock ) { return backend.runInternalAction ( VdcActionType.RunVm , new org.ovirt.engine.core.common.action.RunVmParams ( vmId ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( lock ) ) . getSucceeded ( ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getBroker ( ) . hotUnplugNic ( org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.createParametersStruct ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.proceedProxyReturnValue ( ) ; }
public void testNoBase ( ) { org.junit.jupiter.api.Assertions.assertThrows ( java.io.FileNotFoundException.class , ( ) -> org.ovirt.engine.core.utils.archivers.tar.Tar.doTar ( new java.io.ByteArrayOutputStream ( ) , new java.io.File ( "/asdasdsadasdasdsa" ) ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storage_domains ) { return ( storage_domains.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ! ( ( java.lang.Boolean ) ( diskModel.getIsInternal ( ) . getEntity ( ) ) ) ) { model.getUpdateCommand ( ) . Execute ( ) ; } }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "diskId" , disk.getId ( ) ) . append ( "addressMap" , addressMap ) ; }
protected void RunCommands ( ) { for ( org.ovirt.engine.core.bll.CommandBase < ? > command : getCommands ( ) ) { if ( command.getReturnValue ( ) . getCanDoAction ( ) ) { executeValidatedCommand ( command ) ; } } }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createPreallocDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setVolumeType ( VolumeType.Preallocated ) ; image.setDiskInterface ( DiskInterface.IDE ) ; image.setSizeInGigabytes ( 5 ) ; return image ; }
public void testGetForStoragePoolWithInvalidPool ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( existingDomain.getId ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
public void setProfile ( java.lang.String sessionId , org.ovirt.engine.core.aaa.AuthenticationProfile profile ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.PROFILE_PARAMETER_NAME , profile ) ; }
public void setVdsType ( org.ovirt.engine.core.common.businessentities.VDSType value ) { this . mVdsStatic.setVdsType ( value ) ; }
com.google.gwt.safehtml.shared.SafeHtml hasTooltip ( com.google.gwt.safehtml.shared.SafeHtml html ) ;
public org.ovirt.engine.core.bll.ValidationResult notManagementNetwork ( ) { return org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork ( network ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , getNetworkNameReplacement ( ) ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected org.ovirt.engine.core.common.businessentities.storage_pool setUpStoragePool ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.storage_pool pool = control.createMock ( org.ovirt.engine.core.common.businessentities.storage_pool.class ) ; org.easymock.EasyMock.expect ( pool.getId ( ) ) . andReturn ( id ) . anyTimes ( ) ; return pool ; }
public void setGuestOsTimezoneOffset ( int guestOsTimezoneOffset ) { this . guestOsTimezoneOffset = guestOsTimezoneOffset ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.VM , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
java.util.Map < java.lang.Long , java.lang.String > getInstanceToHostAssignments ( ) ;
public java.lang.Object runInTransaction ( ) { HandleVdsInformation ( ) ; vm.setrun_on_vds ( getVdsId ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . update ( vm.getDynamicData ( ) ) ; return null ; }
public void allCharsetCanPass ( java.lang.String correct ) { org.hamcrest.MatcherAssert.assertThat ( ( ( "Check can not recognize all chars in a valid string '" + correct ) + "'" ) , new org.ovirt.engine.core.compat.Regex ( org.ovirt.engine.core.common.utils.I18NRegexpTest.REGEXP ) . isMatch ( correct ) , org.hamcrest.core.Is.is ( true ) ) ; }
public java.lang.String getCustomValue ( final java.lang.String name ) { if ( customValues.containsKey ( name ) ) { return customValues.get ( name ) ; } return "" ; }
private void verifyManagementNetwork ( org.ovirt.engine.core.common.businessentities.Cluster updatedCluster ) { org.junit.jupiter.api.Assertions.assertEquals ( java.lang.String.format ( "%s/%s/%s/%s/%s" , org.ovirt.engine.api.restapi.resource.BASE_PATH , "clusters" , GUIDS [ 0 ] , "networks" , org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.MANAGEMENT_NETWORK_ID ) , updatedCluster.getManagementNetwork ( ) . getHref ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult isNotLocalfsWithDefaultCluster ( ) { if ( ( ( storagePool.getstorage_pool_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) && ( containsDefaultCluster ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ) ( source ) ) : new java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ( ) ; }
public org.ovirt.engine.api.resource.VnicProfileResource getVnicProfileResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVnicProfileResource ( id ) ) ; }
public void setFirstMetadataDevice ( java.lang.String firstMetadataDevice ) { getStorageStaticData ( ) . setFirstMetadataDevice ( firstMetadataDevice ) ; }
public void getGlusterSnapshotConfig ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.setHandleFailure ( true ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotConfig , new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters ( clusterId , volumeId ) , aQuery ) ; }
public void parseLunFromXmlRpcReturnsUnknownForNoField ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLunFromXmlRpc ( xlun ) ; org.junit.Assert.assertEquals ( StorageType.UNKNOWN , lun.getLunType ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > getAllQuotaClusterIncludingConsumption ( ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource ( ) ; return getCallsHandler ( ) . executeReadList ( "calculateAllClusterUsage" , getClusterQuotaResultSet ( ) , parameterSource ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > mockVfsOnNetDevice ( int numOfVfs ) { return mockVfsOnNetDevice ( numOfVfs , null ) ; }
public java.lang.String toString ( ) { return ( ( ( ( ( getClass ( ) . getSimpleName ( ) ) + " [mCode=" ) + ( mCode ) ) + ", mMessage=" ) + ( mMessage ) ) + "]" ; }
private void setDataCenterDetails ( ) { org.ovirt.engine.core.common.businessentities.StoragePool dc = org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getParameters ( ) . getStoragePool ( ) ; setCompatibilityVersion ( dc.getCompatibilityVersion ( ) . toString ( ) ) ; setQuotaEnforcementType ( dc.getQuotaEnforcementType ( ) . name ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.Tags getRootTag ( ) { return tagsMapByID.get ( org.ovirt.engine.core.bll.TagsDirector.ROOT_TAG_ID ) ; }
public void testEmptyDisksUsages ( ) { java.lang.Object [ ] disksUsages = new java.lang.Object [ 0 ] ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setDisksUsageInXmlRpc ( disksUsages ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.validateDisksUsagesList ( getVmStatistics ( ) , disksUsages , xml ) ; }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.Provider < ? > > > aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { setItems ( ( ( java.util.Collection < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.Cluster , org.ovirt.engine.core.common.businessentities.network.NetworkCluster > > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( type , actualValue , expectedValue , inSync ) ; }
public void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__TYPE__BOOKMARK ) ; }
public void osTypeChanged ( java.lang.Integer selectedItem ) { isWindowsOS = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( selectedItem ) ; getDomain ( ) . setIsAvailable ( ( ( selectedItem != null ) && ( isWindowsOS ) ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _deploy.getParser ( ) . cliEnvironmentSet ( VMConsoleEnv.CAKEY , org.ovirt.engine.core.utils.PKIResources.getCaCertificate ( ) . toString ( PKIResources.Format.OPENSSH_PUBKEY ) . replace ( "\n" , "" ) ) ; return true ; }
public java.lang.Integer getProgressValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getUsageMemPercent ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getExternalHostProviderEnabled ( ) { return externalHostProviderEnabled ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { return object.getId ( ) . toString ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getPersistedNetwork ( ) { if ( ( persistedNetwork ) == null ) { persistedNetwork = org.ovirt.engine.core.bll.network.cluster.DetachNetworkToClusterCommand.getNetworkDao ( ) . get ( getNetwork ( ) . getId ( ) ) ; } return persistedNetwork ; }
public void setGuestOsCodename ( java.lang.String guestOsCodename ) { vmDynamic.setGuestOsCodename ( guestOsCodename ) ; }
public void testUpdateVmPool ( ) { existingVmPool.setVmPoolDescription ( "This is an updated VM pool." ) ; dao.update ( existingVmPool ) ; org.ovirt.engine.core.common.businessentities.VmPool result = dao.get ( existingVmPool.getVmPoolId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingVmPool , result ) ; }
public void testIsNetworkInSyncWhenIpv4GatewayDifferent ( ) { initIpv4ConfigurationBootProtocolGateway ( Ipv4BootProtocol.STATIC_IP , false ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
private void freeLockExecute ( ) { if ( ( ( releaseLocksAtEndOfExecute ) || ( ! ( getSucceeded ( ) ) ) ) || ( ! ( hasTasks ( ) ) ) ) { freeLock ( ) ; } }
protected void onClick ( T value ) { org.ovirt.engine.ui.uicommonweb.UICommand command = resolveCommand ( value ) ; if ( command != null ) { command.execute ( ) ; } }
private org.ovirt.engine.core.common.businessentities.GraphicsType deriveGraphicsType ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , QueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , "GetVmByVmId" ) ; return vm == null ? null : org.ovirt.engine.api.restapi.types.VmMapper.deriveGraphicsType ( vm.getGraphicsInfos ( ) ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase getErrorCommandReturnValue ( org.ovirt.engine.core.common.errors.EngineMessage message ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; returnValue.setValid ( false ) ; returnValue.getValidationMessages ( ) . add ( message.toString ( ) ) ; return returnValue ; }
private static org.ovirt.engine.core.bll.validator.StorageDomainValidator mockStorageDomainValidatorWithSpace ( ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.AddDiskCommandTest.mockStorageDomainValidator ( ) ; org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForNewDisk ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.DiskImage.class ) ) ) . thenReturn ( ValidationResult.VALID ) ; return storageDomainValidator ; }
public org.ovirt.engine.core.common.businessentities.network.IPv4Address createPrimaryIpv4Address ( ) { org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address ( ) ; iPv4Address.setBootProtocol ( NetworkBootProtocol.DHCP ) ; return iPv4Address ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getVmWatchdogDevices ( ) { return vmDeviceDao.getVmDeviceByVmIdAndType ( getParameters ( ) . getId ( ) , VmDeviceGeneralType.WATCHDOG ) ; }
public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead ( ) { org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 65 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
public java.util.List < java.lang.String > getMigrationPoliciesSupportedVersions ( ) { return getSupportedVersions ( ConfigurationValues.MigrationPoliciesSupported ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithOlderVersion ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createNewVdsGroup ( ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_0 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
private void logAction ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.AuditLogType type ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; loggable.addCustomValue ( "Host" , vds.getName ( ) ) ; new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( loggable , type ) ; }
protected void render ( java.lang.Object value , boolean fireEvents ) { asSuggestBox ( ) . setValue ( ( ( java.lang.String ) ( value ) ) , fireEvents ) ; }
public void setCreateOrUpdateBonds ( java.util.List < org.ovirt.engine.core.common.action.CreateOrUpdateBond > createOrUpdateBond ) { this . createOrUpdateBond = createOrUpdateBond ; }
private void propagateLabeledNetworksChanges ( ) { runInternalAction ( VdcActionType.PropagateLabeledNetworksToClusterHosts , cloneParams ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepMountBrokerSetup ( java.lang.String remoteVolumeName , java.lang.String userName , java.lang.String remoteGroupName , java.lang.Boolean partial ) ;
public < T > T getOptionalEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.queries.QueryType query , org.ovirt.engine.core.common.queries.QueryParametersBase queryParams , java.lang.String identifier , boolean notFoundAs404 ) { return getEntity ( clz , query , queryParams , identifier , notFoundAs404 , false ) ; }
public java.lang.Boolean getKvmEnable ( ) { return this . vmDynamic.getKvmEnable ( ) ; }
private void DataCenter_SelectedItemChanged ( ) { UpdateItemsAvailability ( ) ; updateDataCenterAlert ( ) ; }
public void incorrect ( ) { org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "someHostname:" ) . getSuccess ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "://someHostname" ) . getSuccess ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "so m eHostname" ) . getSuccess ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "asd:/someHostname" ) . getSuccess ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "asd:someHostname" ) . getSuccess ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( validation.validate ( "someHostname:abc" ) . getSuccess ( ) ) ; }
protected org.ovirt.engine.core.dao.TagDao getTagDao ( ) { return tagDao ; }
private org.ovirt.engine.core.bll.ValidationResult networkExists ( ) { return ( getOldNetwork ( ) ) == null ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_NOT_EXISTS ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private org.ovirt.engine.core.dao.StoragePoolIsoMapDao getStoragePoolIsoMapDao ( ) { return org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getDbFacade ( ) . getStoragePoolIsoMapDao ( ) ; }
public int extractOsType ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item ) { return item.getOsId ( ) ; }
public void hostDoesNotExist ( ) { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , null , host , false , hostedEngineHelper ) ; org.junit.Assert.assertThat ( validator.hostExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_INVALID_SERVER_ID ) ) ; }
public void setVmCreationDate ( java.util.Date value ) { this . vmStatic.setCreationDate ( value ) ; }
public void processOnCpuFlagsChange ( org.ovirt.engine.core.compat.Guid vdsId ) { backend.runInternalAction ( VdcActionType.HandleVdsCpuFlagsOrClusterChanged , new org.ovirt.engine.core.common.action.VdsActionParameters ( vdsId ) ) ; }
public void testRemove ( ) { dao.remove ( FixturesTool.HOOK_ID ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = dao.getById ( FixturesTool.HOOK_ID ) ; org.junit.Assert.assertNull ( hook ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverhook = dao.getGlusterServerHook ( FixturesTool.HOOK_ID , FixturesTool.VDS_GLUSTER_SERVER2 ) ; org.junit.Assert.assertNull ( serverhook ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) { return snapshot ( vmId , disks , memory , false ) ; }
public void testLongName ( ) { vmStatic.setName ( "this_should_be_very_long_vm_name_so_it will_fail_can_do_action_validation" ) ; org.junit.Assert.assertFalse ( "canDoAction should fail for too long vm name." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ; }
private static org.ovirt.engine.core.bll.tasks.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.tasks.AsyncTaskManager.getInstance ( org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getRemoveParameters ( org.ovirt.engine.api.model.Network entity ) { return new org.ovirt.engine.core.common.action.RemoveNetworkParameters ( entity.getId ( ) ) ; }
public static < R extends org.ovirt.engine.api.model.BaseResource > R newModel ( java.lang.Class < R > clz ) { R ret = null ; try { ret = clz.newInstance ( ) ; } catch ( java.lang.Exception ignore ) { } return ret ; }
private java.util.Collection < org.ovirt.engine.api.model.DetailedLink > getGlusterLinks ( ) { return org.ovirt.engine.api.utils.ApiRootLinksCreator.getGlusterLinks ( getUriInfo ( ) . getBaseUri ( ) . getPath ( ) ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { updateProperties ( ) ; } }
public boolean match ( org.ovirt.engine.core.common.businessentities.VDS source ) { return source.getStatus ( ) . equals ( status ) ; }
public void saveAsyncTaskToDb ( final org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask ) { coCoAsyncTaskHelper.saveAsyncTaskToDb ( asyncTask ) ; }
com.google.gwt.safehtml.shared.SafeHtml containerAndLink ( java.lang.String cellStyle , java.lang.String id , com.google.gwt.safehtml.shared.SafeHtml text ) ;
public void edit ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel object ) { driver.edit ( object ) ; initUserMessageOfTheDayToolTip ( templates ) ; }
protected org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network model ) { org.ovirt.engine.api.model.Qos qos = model.getQos ( ) ; if ( qos != null ) { qos.setDataCenter ( model.getDataCenter ( ) ) ; } return model ; }
private boolean validateSourceStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( sourceDomain ) ; return validate ( validator.isDomainExistAndActive ( ) ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.SPMTask concreteCreateTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.concreteCreateTask ( taskId , this , asyncTaskCreationInfo , parentCommand ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ) , ValidationResult.VALID ) ; }
public boolean prepareConnectHostToStoragePoolServers ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { return true ; }
public final void setCallback ( org.ovirt.engine.core.utils.hostinstall.IVdsInstallerCallback callback ) { org.ovirt.engine.core.utils.hostinstall.VdsInstallerSSH.log.debug ( "setCallback enter" ) ; this . callback = callback ; org.ovirt.engine.core.utils.hostinstall.VdsInstallerSSH.log.debug ( "setCallback leave" ) ; }
private void logFailureMessage ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warnFormat ( "Failed to refresh VDS , vds = {0} : {1}, error = '{2}', continuing." , _vds.getId ( ) , _vds.getVdsName ( ) , ex ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } upServer = getUpServer ( ) ; if ( ( upServer ) == null ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
public void addToHistoryZeroLimit ( ) { org.junit.Assert.assertEquals ( java.util.Collections.emptyList ( ) , statistics.addToHistory ( java.util.Arrays.asList ( 9 , 10 , 11 , 12 ) , 13 , 0 ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass ) { return runMultipleActions ( actionType , parameters , isRunOnlyIfAllCanDoPass , false ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getDestinationVds ( ) { if ( ( ( cachedDestinationVds ) == null ) && ( ( destinationVdsId ) != null ) ) { cachedDestinationVds = org.ovirt.engine.core.bll.MigrateVmCommand.getVdsDAO ( ) . get ( destinationVdsId ) ; } return cachedDestinationVds ; }
public void validate_testNameChange_Test ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ) . when ( affinityGroupDao ) . getByName ( affinityGroup.getName ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS ) ; }
public void setInfoMessage ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > problemDescription ) { this . problemDescription = problemDescription ; }
protected void executeVmCommand ( ) { performDiskUpdate ( ) ; }
protected boolean isVmWithSameNameExists ( java.lang.String name , org.ovirt.engine.core.compat.Guid storagePoolId ) { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic ( name , storagePoolId ) ; }
public void validateVmMemoryCantStartOnVdsVmTooBig ( ) { vm.setMinAllocatedMem ( 8865 ) ; vm.setVmMemSizeMb ( 8865 ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
private int getMaximumMigrationDowntime ( ) { if ( ( org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getMigrationDowntime ( ) ) != null ) { return org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getMigrationDowntime ( ) ; } return org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.DefaultMaximumMigrationDowntime ) ; }
protected java.lang.String getSearchPattern ( ) { java.lang.String user_defined_pattern = org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( getUriInfo ( ) , "" , modelType ) ; return filterOutGroups ( user_defined_pattern ) ; }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . Execute ( ) ; } UpdateActionAvailability ( ) ; UpdateIsDiskHotPlugAvailable ( ) ; }
private java.util.List < org.ovirt.engine.core.common.action.LiveMigrateDiskParameters > createLiveMigrateVmDisksParameters ( org.ovirt.engine.core.compat.Guid srcStorageId , org.ovirt.engine.core.compat.Guid dstStorageId ) { return java.util.Arrays.asList ( new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters ( diskImageId , srcStorageId , dstStorageId , vmId , quotaId , diskProfileId , diskImageGroupId ) ) ; }
public java.lang.Boolean isMemoryHotUnplugSupportedByArchitecture ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture , org.ovirt.engine.core.compat.Version version ) { return memoryHotUnplugSupport.get ( architecture ) . get ( version ) ; }
public org.ovirt.engine.core.compat.NGuid getRunOnVds ( ) { return this . runOnVds ; }
public void resetAndFocus ( ) { userNameEditor.asValueBox ( ) . selectAll ( ) ; userNameEditor.asValueBox ( ) . setFocus ( true ) ; clearErrorMessage ( ) ; setToolTipPositionAndShow ( ) ; }
public void lowerVersionMgmtNetworkAndRegularNetworks ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworksToPool ( 2 ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.StopVmParameters ( vm.getId ( ) , org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL , model.getReason ( ) . getEntity ( ) ) ; }
public void networkNameTakenByDifferentNetwork ( ) throws java.lang.Exception { networkNameAvailableTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE ) , org.ovirt.engine.core.bll.validator.NetworkValidatorTest.getSingletonNamedNetworkList ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME , org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID ) ) ; }
public void cancelConfirmFocusPM ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getWindow ( ) ) ) ; hostModel.setIsPowerManagementTabSelected ( true ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.setConfirmWindow ( null ) ; }
private static void addToAuditLogErrorMessage ( java.lang.String problematicRepoFilesList ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "imageDomains" , problematicRepoFilesList ) ; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.auditLogDirector.log ( logable , AuditLogType.REFRESH_REPOSITORY_IMAGE_LIST_FAILED ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return hostLocking.getPowerManagementLock ( org.ovirt.engine.core.bll.pm.VdsKdumpDetectionCommand.getVdsId ( ) ) ; }
private org.ovirt.engine.core.compat.Guid getVmSnapshotIdForType ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType type ) { return snapshotDao.getId ( org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId ( ) , type ) ; }
public void raiseErrorEvent ( org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs e ) { getErrorEvent ( ) . raise ( this , e ) ; }
public java.lang.String getPmSecondaryIp ( ) { return mVdsStatic.getPmSecondaryIp ( ) ; }
protected org.ovirt.engine.core.aaa.DirectoryGroup getEntity ( int index ) { return new org.ovirt.engine.core.aaa.DirectoryGroup ( DOMAIN , NAMESPACE , new java.lang.String ( javax.xml.bind.DatatypeConverter.parseHexBinary ( EXTERNAL_IDS [ index ] ) , java.nio.charset.Charset.forName ( "UTF-8" ) ) , NAMES [ index ] ) ; }
protected void failedToRunVm ( ) { org.ovirt.engine.core.bll.RunVmCommandBase.log ( ) ; processVmPoolOnStopVm ( ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob ( org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext ( ) , false ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext ( ) , false ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getModel ( ) . getRemoveCommand ( ) ; }
public static boolean setDiskAlias ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk , org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.bll.ImagesHandler.setDiskAlias ( disk , vm , org.ovirt.engine.core.bll.ImagesHandler.nullSafeGetCount ( vm ) ) ; }
private boolean hasVMs ( ) { return ! ( org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVmDynamicDao ( ) . getAllRunningForVds ( org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVdsId ( ) ) . isEmpty ( ) ) ; }
public org.ovirt.engine.core.aaa.AuthenticationProfile getProfile ( java.lang.String sessionId ) { return ( ( org.ovirt.engine.core.aaa.AuthenticationProfile ) ( getData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.PROFILE_PARAMETER_NAME , false ) ) ) ; }
public void testUpdateFieldsQuotaEnforcementType ( ) { vm.setQuotaEnforcementType ( QuotaEnforcementTypeEnum.DISABLED ) ; vmStatic.setQuotaEnforcementType ( QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.areUpdatedFieldsLegal ( ) , "Quota enforcement type should be updatable" ) ; }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; Search ( ) ; }
public void cancelConfirmFocusPM ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( getWindow ( ) ) ) ; hostModel.setIsPowerManagementTabSelected ( true ) ; setConfirmWindow ( null ) ; }
public abstract java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getUnmanagedDeviceList ( ) ;
private boolean checkIsDomainLocked ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap ) { if ( ( ( domainMap.getStatus ( ) ) != null ) && ( domainMap.getStatus ( ) . isStorageDomainInProcess ( ) ) ) { addInvalidSDStatusMessage ( StorageDomainStatus.Locked ) ; return true ; } return false ; }
public static void startPollingTask ( org.ovirt.engine.core.compat.Guid taskID ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskManager ( ) . startPollingTask ( taskID ) ; }
public void validateVmMemoryCanRunOnVds ( ) { boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM ( vds , vm ) ; org.junit.jupiter.api.Assertions.assertTrue ( vmPassedMemoryRequirement ) ; }
private void pause ( ) { org.ovirt.engine.core.common.businessentities.VM entity = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getItem ( ) . getEntity ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.HibernateVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( entity.getId ( ) ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotDisabledLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) , UsbPolicy.DISABLED ) ; }
public org.ovirt.engine.api.resource.AssignedNetworksResource getAssignedNetworksResource ( ) { return org.ovirt.engine.api.restapi.resource.BackendClusterResource.inject ( new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource ( id ) ) ; }
public final boolean connect ( java.lang.String server , java.lang.String rootPassword ) { return _doConnect ( server , _prepareCredentials ( rootPassword ) ) ; }
public java.util.List < java.lang.Integer > getCpuUsageHistory ( ) { return this . vmStatistics.getCpuUsageHistory ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult clusterNetworkNotUsedByBricks ( ) { return new org.ovirt.engine.core.bll.network.cluster.PluralMessages ( org.ovirt.engine.core.common.errors.EngineMessage.VAR__ENTITIES__GLUSTER_BRICK , org.ovirt.engine.core.common.errors.EngineMessage.VAR__ENTITIES__GLUSTER_BRICKS ) . getNetworkInUse ( getEntitiesNames ( glusterBrickDao.getAllByClusterAndNetworkId ( networkCluster.getClusterId ( ) , network.getId ( ) ) ) ) ; }
public void testGetAllWithPermissionsDisabledForUnpriviligedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = dao.getAll ( org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false , VmEntityType.TEMPLATE ) ; org.ovirt.engine.core.dao.VmTemplateDAOTest.assertGetAllResult ( result ) ; }
public void testGetImagesWithNoDiskReturnsEmptyList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > result = dao.getImagesWithNoDisk ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected void Perform ( ) { org.ovirt.engine.core.bll.StopVmCommand.destroyVm ( ) ; org.ovirt.engine.core.bll.StopVmCommand.setSucceeded ( true ) ; }
public void passDiscardNotSupportedForDestSd ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; mockPassDiscardSupportedForDestSd ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) , ImageOperation.Move ) ; org.junit.Assert.assertFalse ( command.validatePassDiscardSupportedForDestinationStorageDomain ( ) ) ; }
private boolean isRemoveCommandAvailable ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > disks ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { boolean isImageLocked = ( disk.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.ImageStatus.LOCKED ) ; if ( isImageLocked ) { return false ; } } return true ; }
public void onSuccess ( java.util.Map < org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > , java.lang.Object > returnValue ) { getDefaultConfigurationVersion ( loginModel ) ; }
protected boolean isSoundDeviceEnabled ( ) { java.lang.Boolean soundDeviceEnabled = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ; return soundDeviceEnabled != null ? soundDeviceEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.isSoundDeviceEnabled ( getVmId ( ) ) ; }
public static boolean hasVmGraphicsDeviceOfType ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.GraphicsType type ) { return ! ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao ( ) . getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType.GRAPHICS , type.name ( ) . toLowerCase ( ) ) . isEmpty ( ) ) ; }
protected boolean runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return RunConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
public void testIsWindows ( ) { org.junit.jupiter.api.Assertions.assertFalse ( OsRepositoryImpl.INSTANCE.isWindows ( 777 ) ) ; }
public java.lang.Long getBootTime ( ) { return this . mVdsStatistics.getboot_time ( ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createDefaultVdsGroupWithDifferentCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ; group.setCpuName ( "Another CPU name" ) ; return group ; }
protected abstract com.google.gwt.user.client.ui.IsWidget createIcon ( ) ;
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Cluster object ) { return object.getCpuName ( ) ; }
protected void updateExistingEntity ( ) { existingEntity.setAddress ( "type:'drive', controller:'0', bus:'0', unit:'0'" ) ; existingEntity.setLogicalName ( "testLogicalName" ) ; }
private void writeEnumType ( org.ovirt.api.metamodel.concepts.EnumType type ) { writer.writeStartElement ( "enum" ) ; writeCommon ( type ) ; type.values ( ) . forEach ( this :: writeEnumValue ) ; writer.writeEndElement ( ) ; }
private void logException ( java.lang.Throwable ex ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.error ( "IrsBroker::Failed::{}: {}" , org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getCommandName ( ) , ex.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.debug ( "Exception" , ex ) ; }
protected org.ovirt.engine.core.bll.profiles.DiskProfileValidator getProfileValidator ( ) { return new org.ovirt.engine.core.bll.profiles.DiskProfileValidator ( getProfile ( ) ) ; }
protected void moveOrCopyAllImageGroups ( ) { moveOrCopyAllImageGroups ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getId ( ) , getDisksBasedOnImage ( ) ) ; }
private void writeDoc ( org.ovirt.api.metamodel.concepts.Concept concept ) { java.lang.String doc = concept.getDoc ( ) ; if ( doc != null ) { writer.writeElement ( "doc" , doc ) ; } }
public org.ovirt.engine.ui.common.widget.dialog.tab.DialogTabPanel getTabPanel ( ) { return tabPanel ; }
protected void executeQueryCommand ( ) { P params = org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getParameters ( ) ; setReturnValue ( clusterDao.getClustersWithPermittedAction ( org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getUserID ( ) , params.getActionGroup ( ) ) ) ; }
public void setUp ( ) { underTest = new org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImpl ( mockNetworkDao , mockManagementNetworkUtil , mockManagementNetworkCandidatePredicate ) ; }
public void setModel ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel model ) { oracle.setModel ( model ) ; }
public static org.ovirt.engine.ui.frontend.ErrorTranslator getVdsmErrorsTranslator ( ) { if ( ( org.ovirt.engine.ui.frontend.Frontend.vdsmErrorsTranslator ) == null ) { org.ovirt.engine.ui.frontend.Frontend.setVdsmErrorsTranslator ( new org.ovirt.engine.ui.frontend.ErrorTranslator ( ( ( org.ovirt.engine.ui.frontend.VdsmErrors ) ( com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.frontend.VdsmErrors.class ) ) ) ) ) ; } return org.ovirt.engine.ui.frontend.Frontend.vdsmErrorsTranslator ; }
public void testAddValueEnumWithGetValue ( ) { paramSource.addValue ( paramName , org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSourceTest.TestEnumWithGetValue.TWO ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.CustomMapSqlParameterSourceTest.TestEnumWithGetValue.TWO.getValue ( ) , paramSource.getValue ( paramName ) , "wrong value returned from parameter source" ) ; }
public javax.ws.rs.core.Response remove ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id , org.ovirt.engine.api.model.Action action ) ;
protected void updateModelClusterFromVds ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( clusters != null ) { getCluster ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( clusters , new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPredicate ( vds.getVdsGroupId ( ) ) ) ) ; } }
public void testValidateNotRemovingUsedNetworkByVmsWhenNotUsedByVms ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . build ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.validateNotRemovingUsedNetworkByVms ( "removedNet" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testIsNetworkExclusiveInvalid ( ) { org.junit.jupiter.api.Assertions.assertFalse ( underTest.isNetworkExclusive ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.validator.network.NetworkType.VM , org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN , org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN , org.ovirt.engine.core.bll.validator.network.NetworkType.VM ) ) ) ; }
protected void updateActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { getSnapshotDao ( ) . update ( new org.ovirt.engine.core.common.businessentities.Snapshot ( snapshotId , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus.OK , getVm ( ) . getId ( ) , null , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE , "Active VM snapshot" , new java.util.Date ( ) , null ) ) ; }
public org.ovirt.engine.api.model.Network update ( org.ovirt.engine.api.model.Network incoming ) { return performUpdate ( incoming , getParent ( ) . getNetworkIdResolver ( ) , VdcActionType.UpdateNetwork , new org.ovirt.engine.api.restapi.resource.BackendNetworkResource.UpdateParametersProvider ( ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.Model setIsChangable ( boolean value ) { if ( ( isChangable ) != value ) { isChangable = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsChangable" ) ) ; if ( isChangable ) { privateChangeProhibitionReason = null ; } } return this ; }
public java.util.Map < K , V > convert ( java.lang.Object source ) { return source != null ? ( ( java.util.Map < K , V > ) ( source ) ) : new java.util.HashMap < K , V > ( ) ; }
public static void updateCommandData ( org.ovirt.engine.core.compat.Guid commandId , java.util.Map < java.lang.String , java.io.Serializable > data ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.updateCommandData ( commandId , data ) ; }
public void testInvalid ( ) throws java.lang.Exception { try { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( java.lang.Thread.State.class , "foobar" ) ; org.junit.Assert.fail ( "expected WebApplicationException on invalid value" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyInvalidValueException ( wae , "foobar" , "State" ) ; } }
public org.ovirt.engine.api.model.Steps list ( ) { org.ovirt.engine.core.common.queries.GetStepsWithSubjectEntitiesByJobIdQueryParameters params = new org.ovirt.engine.core.common.queries.GetStepsWithSubjectEntitiesByJobIdQueryParameters ( jobId ) ; java.util.List < org.ovirt.engine.api.model.Step > steps = getBackendCollection ( QueryType.GetStepsWithSubjectEntitiesByJobId , params ) ; return mapCollection ( steps ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeCreate ( java.lang.String volumeName , java.lang.String [ ] brickList , int replicaCount , int stripeCount , java.lang.String [ ] transportList , boolean force , boolean isArbiter ) ;
protected void syncSearch ( ) { syncSearch ( QueryType.GetUnregisteredVms , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericNameableComparator ( ) ) ; }
protected boolean isMemoryStateRemovable ( java.lang.String memoryVolume ) { if ( memoryVolume.isEmpty ( ) ) { return false ; } int numOfSnapshotsUsingThisMemory = getSnapshotDao ( ) . getNumOfSnapshotsByMemory ( memoryVolume ) ; return numOfSnapshotsUsingThisMemory == ( removeOnlyIfNotUsedAtAll ? 0 : 1 ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { return object.getDiskAlias ( ) ; }
private void setDisableGlobalHaMaintenanceCommand ( org.ovirt.engine.ui.uicommonweb.UICommand value ) { privateDisableGlobalHaMaintenanceCommand = value ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { osNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; initOsIds ( ) ; }
private static org.ovirt.engine.core.dao.VdcOptionDAO getVdcOptionDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdcOptionDao ( ) ; }
private void frontend_QueryComplete ( ) { ( queryCounter ) -- ; if ( ( queryCounter ) == 0 ) { stopProgress ( ) ; } }
public void testGetBySessionId ( ) { org.ovirt.engine.core.common.businessentities.EngineSession result = dao.getBySessionId ( existingEngineSession.getEngineSessionId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingEngineSession , result ) ; }
public org.ovirt.engine.core.compat.Match match ( java.lang.String input ) { com.google.gwt.regexp.shared.MatchResult matchResult = impl.exec ( input ) ; return new org.ovirt.engine.core.compat.Match ( matchResult ) ; }
public void leaseNotFreeSingleOwner ( ) { java.lang.Object [ ] owners = new java.lang.Object [ ] { 1 } ; org.junit.jupiter.api.Assertions.assertFalse ( getLeaseStatus ( owners ) . isFree ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { }
public void setOptions ( java.lang.String options ) { this . options = options ; optionsMap = org.ovirt.engine.core.common.utils.pm.PowerManagementUtils.pmOptionsStringToMap ( options ) ; }
public void isConnectionNotExists ( ) { validator = new org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator ( null ) ; org.junit.Assert.assertEquals ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST , validator.isConnectionExists ( ) . getMessage ( ) ) ; }
public void testValidateSuccess ( ) { storageDomain.setStorageType ( StorageType.NFS ) ; storageDomain.setStorageDomainType ( StorageDomainType.Data ) ; setVdsStatus ( VDSStatus.Up ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected boolean isSoundDeviceEnabled ( ) { java.lang.Boolean soundDeviceEnabled = org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ; return soundDeviceEnabled != null ? soundDeviceEnabled : org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmDeviceUtils ( ) . hasSoundDevice ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters ( ) . getVmTemplateData ( ) . getId ( ) ) ; }
public java.lang.String getFullUserName ( ) { java.lang.String userName = getUserName ( ) ; java.lang.String domain = getDomain ( ) ; if ( ( ( userName != null ) && ( ! ( userName.contains ( "@" ) ) ) ) && ( domain != null ) ) { return ( userName + "@" ) + domain ; } return userName ; }
public void validateNonExistingJobFails ( ) throws java.lang.Exception { setupMock ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.EndExternalJobCommandTest.jobId ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( ( ! ( commandMock.validate ( ) ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( to , from ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.Boolean > getMigrateCompressed ( ) { return migrateCompressed ; }
protected java.util.Map < java.lang.String , java.lang.String > getStepMessageMap ( org.ovirt.engine.core.common.job.JobExecutionStatus status , java.lang.String jobInfo ) { java.util.Map < java.lang.String , java.lang.String > stepMessageMap = super . getStepMessageMap ( status , jobInfo ) ; stepMessageMap.put ( GlusterConstants.JOB_STATUS , "COMMITTED" ) ; return stepMessageMap ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity , org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.volumeBrickSubTabLabel ( ) , 1 , modelProvider ) ; }
public void validateVmMemoryCantRunOnVdsHighOverhead ( ) { org.mockito.Mockito.doReturn ( 1024 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM ( vds , vm ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > getTemplatesUsingProfile ( ) { return vmTemplateDao.getAllForDiskProfile ( getProfile ( ) . getId ( ) ) ; }
public com.google.gwt.event.shared.HandlerRegistration addGridTimerStateChangeEventHandler ( org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent.GridTimerStateChangeEventHandler handler ) { return eventBus.addHandler ( org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent.getType ( ) , handler ) ; }
com.google.gwt.safehtml.shared.SafeHtml text ( java.lang.String text ) ;
public java.lang.String call ( ) { com.woorea.openstack.cinder.model.SnapshotForCreate snapshotForCreate = new com.woorea.openstack.cinder.model.SnapshotForCreate ( ) ; snapshotForCreate.setVolumeId ( cinderDisk.getImageId ( ) . toString ( ) ) ; snapshotForCreate.setDescription ( snapshotDescription ) ; return proxy.createSnapshot ( snapshotForCreate ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osArchitectures = ( ( java.util.HashMap < java.lang.Integer , org.ovirt.engine.core.common.businessentities.ArchitectureType > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; }
public void setPmPort ( java.lang.Integer value ) { pmPort = value ; }
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; if ( e.propertyName.equals ( "status" ) ) { updateActionsAvailability ( ) ; } }
protected void setUpVersionExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetAvailableStoragePoolVersions , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getVersions ( ) ) ; }
public java.util.Map < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.GraphicsInfo > getGraphicsInfos ( ) { return vmDynamic.getGraphicsInfos ( ) ; }
public java.lang.String getTimeZone ( ) { return vmStatic.getTimeZone ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterHookRemove ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName ) ;
public void setDataCenterName ( java.lang.String name ) { messageLabel.setText ( messages.theNetworkWillBeAddedToTheDataCenterAsWell ( name ) ) ; }
private java.lang.String getPath ( java.lang.reflect.Method method ) { javax.ws.rs.Path pathAnnotation = method.getAnnotation ( javax.ws.rs.Path.class ) ; return pathAnnotation == null ? null : pathAnnotation.value ( ) ; }
public void setMigrationTabAvailable ( boolean value ) { if ( ( isMigrationTabAvailable ( ) ) != value ) { migrationTabAvailable = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "isMigrationTabAvailable" ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > getAllWithQuery ( java.lang.String query ) { return getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.StoragePoolDAODbFacadeImpl.mapper ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { setIdIfNeeded ( user ) ; new org.springframework.jdbc.core.simple.SimpleJdbcCall ( jdbcTemplate ) . withProcedureName ( "InsertUser" ) . execute ( new org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserMapSqlParameterSource ( user ) ) ; }
private void attachStorageToDataCenter ( org.ovirt.engine.core.compat.Guid storageId , org.ovirt.engine.core.compat.Guid dataCenterId ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.AttachStorageDomainToPool , new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( storageId , dataCenterId ) , null , this ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return ( object.getvlan_id ( ) ) == null ? "-" : object.getvlan_id ( ) . toString ( ) ; }
public void testChangeToExistingName ( ) { prepareVmToPassValidate ( ) ; mockSameNameQuery ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ; }
public void testBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplayIsFalse ( ) { doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( false , createNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void clearPassthroughData ( java.lang.String vfToUse ) { if ( vfToUse != null ) { networkDeviceHelper.setVmIdOnVfs ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVdsId ( ) , null , java.util.Collections.singleton ( vfToUse ) ) ; } }
protected java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getTaskIdList ( ) { return ( getParameters ( ) . getParentCommand ( ) ) != ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ? getReturnValue ( ) . getInternalVdsmTaskIdList ( ) : getReturnValue ( ) . getVdsmTaskIdList ( ) ; }
private void swithAttachToInstanceType ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.common.widget.popup.AbstractVmBasedPopupPresenterWidget.getView ( ) . switchAttachToInstanceType ( model.getAttachedToInstanceType ( ) . getEntity ( ) ) ; }
public void setStorageIds ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageIds ) { this . storageIds = storageIds ; }
public void testAddUser4 ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetDomainList , org.ovirt.engine.core.common.queries.QueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpDomains ( ) ) ; setUpAddUserExpectations ( ( ( ( "ADUSER@" + ( DOMAIN ) ) + ":: username=" ) + ( NAMES [ 0 ] ) ) ) ; org.ovirt.engine.api.model.User model = new org.ovirt.engine.api.model.User ( ) ; model.setUserName ( NAMES [ 0 ] ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN ) ; domain.setId ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( domain.getName ( ) ) ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; verifyAddUser ( response ) ; }
public void testGetStorageDomainWithStatusForExistingPool ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getStorageDomains ( FixturesTool.DATA_CENTER , existingDomain.getStorageDomainType ( ) , StorageDomainStatus.Active ) ; assertGetResult ( result.get ( 0 ) ) ; }
private java.lang.String getVdsCertificateSubject ( ) { return backend.runInternalQuery ( QueryType.GetVdsCertificateSubjectByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getCachedVm ( ) . getId ( ) ) ) . getReturnValue ( ) ; }
public void execute ( ) { for ( org.ovirt.engine.ui.webadmin.plugin.Plugin plugin : getPlugins ( ) ) { initPlugin ( plugin ) ; } }
public java.util.EnumSet < org.ovirt.engine.core.common.businessentities.VDSType > getHostTypes ( ) { return java.util.EnumSet.of ( VDSType.oVirtVintageNode ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getStoppedVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume ( volumeId ) ; volume.setStatus ( GlusterVolumeStatus.DOWN ) ; volume.setClusterId ( CLUSTER_ID ) ; return volume ; }
protected org.ovirt.engine.api.model.Bookmark getEntity ( int index ) { org.ovirt.engine.api.model.Bookmark bookmark = new org.ovirt.engine.api.model.Bookmark ( ) ; bookmark.setId ( GUIDS [ index ] ) ; bookmark.setName ( NAMES [ index ] ) ; bookmark.setValue ( org.ovirt.engine.api.restapi.resource.BackendBookmarksResourceTest.VALUES [ index ] ) ; return bookmark ; }
public void testGetAllForVmPools ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Tags > result = dao.getAllForVmPools ( vmPool.toString ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; }
public java.lang.String getCpuPinning ( ) { return mVmStatic.getCpuPinning ( ) ; }
protected void startPollingAsyncTasks ( ) { startPollingAsyncTasks ( getReturnValue ( ) . getVdsmTaskIdList ( ) ) ; }
public void setVdsGroupId ( org.ovirt.engine.core.compat.Guid value ) { this . mVdsStatic.setVdsGroupId ( value ) ; }
public org.ovirt.engine.core.bll.ValidationResult stpForVmNetworkOnly ( ) { return ( network.isVmNetwork ( ) ) || ( ! ( network.getStp ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP ) ; }
public void testGetByGlusterServerUuid ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer entity = dao.getByGlusterServerUuid ( FixturesTool.GLUSTER_SERVER_UUID1 ) ; org.junit.Assert.assertNotNull ( entity ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_BRICK_SERVER1 , entity.getId ( ) ) ; org.junit.Assert.assertEquals ( FixturesTool.GLUSTER_SERVER_UUID1 , entity.getGlusterServerUuid ( ) ) ; }
protected void handleError ( ) { addValidationMessage ( EngineMessage.VDS_FENCE_OPERATION_FAILED ) ; addValidationMessage ( EngineMessage.VAR__TYPE__HOST ) ; addValidationMessage ( EngineMessage.VAR__ACTION__STOP ) ; org.ovirt.engine.core.bll.pm.StopVdsCommand.log.error ( "Failed to run StopVdsCommand on vds '{}'" , org.ovirt.engine.core.bll.pm.StopVdsCommand.getVdsName ( ) ) ; }
public java.lang.Object executeWithReturnValue ( ) { execute ( ) ; return getReturnValue ( ) ; }
private void updateVolumeType ( org.ovirt.engine.core.common.businessentities.StorageType storageType ) { getVolumeType ( ) . setSelectedItem ( ( storageType.isBlockDomain ( ) ? org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated : org.ovirt.engine.core.common.businessentities.VolumeType.Sparse ) ) ; volumeType_SelectedItemChanged ( ) ; }
protected void executeQueryCommand ( ) { getQueryReturnValue ( ) . setReturnValue ( getDbFacade ( ) . getCpuProfileDao ( ) . getAllForCluster ( getParameters ( ) . getId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) , ActionGroup.ASSIGN_CPU_PROFILE ) ) ; }
public static boolean isImagesExists ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > images , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { return org.ovirt.engine.core.bll.ImagesHandler.isImagesExists ( images , storagePoolId , storageDomainId , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ; }
public void testCanDoActionFlowImageDoesNotExist ( ) { org.mockito.Mockito.doReturn ( null ) . when ( cmd ) . getDisk ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( java.lang.Boolean.FALSE.equals ( returnValue ) ) { diskInterfaces.remove ( DiskInterface.VirtIO_SCSI ) ; } setInterfaces ( diskInterfaces ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage cloneDiskImage ( org.ovirt.engine.core.compat.Guid newImageGuid ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage returnValue = super . cloneDiskImage ( newImageGuid ) ; returnValue.setImageTemplateId ( org.ovirt.engine.core.bll.CreateSnapshotFromTemplateCommand.getImage ( ) . getImageId ( ) ) ; return returnValue ; }
public void testGetPeersWithWrongPassword ( ) throws javax.naming.AuthenticationException { org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP.put ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.FINGER_PRINT1 ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP ) . when ( glusterUtil ) . getFingerprints ( org.mockito.Matchers.any ( java.util.Set.class ) ) ; glusterUtil.getPeers ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.USER , org.ovirt.engine.core.bll.utils.GlusterUtilTest.WRONG_PASSWORD ) ; }
private void selectAsSPM ( ) { org.ovirt.engine.core.common.action.ForceSelectSPMParameters params = new org.ovirt.engine.core.common.action.ForceSelectSPMParameters ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItem ( ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.ForceSelectSPM , params ) ; }
public boolean getIsAvailable ( ) { return isUserElement ( getDetailModel ( ) ) ; }
public void unlockImageInDb ( ) { final org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getOldDisk ( ) ) ) ; diskImage.setImageStatus ( ImageStatus.OK ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( diskImage.getImageId ( ) , ImageStatus.OK ) ; }
protected void ExecuteVdsBrokerCommand ( ) { super . ExecuteVdsBrokerCommand ( ) ; updateNetConfigDirtyFlag ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance ( org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.getVds ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.ProceedProxyReturnValue ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Cluster getCluster ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , clusterId ) ; }
public void copyDataTo ( ovirt_engine_dwh.configurationsync_4_1.ConfigurationSync.copyOfupdateFirstSyncStruct other ) { other.var_name = this . var_name ; other.var_value = this . var_value ; other.var_datetime = this . var_datetime ; }
public static void Alert ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String message ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.auditLogDirector.log ( auditLogable , logType , message ) ; }
public void testNoChangeWhenClustersDidNotChange ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Cluster cluster = createCluster ( ) ; initWithSameCluster ( cluster ) ; underTest.moveMacsToAnotherMacPoolIfNeeded ( ) ; org.mockito.Mockito.verifyNoMoreInteractions ( moveMacs ) ; }
public void testIsNetworkInSyncWhenIpv6BootProtocolEqual ( ) { initIpv6ConfigurationBootProtocol ( true ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void testIsNotLocalFsWithDefaultClusterWhenClusterIsDefault ( ) { storagePool.setIsLocal ( true ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . containsDefaultCluster ( ) ; org.junit.Assert.assertThat ( validator.isNotLocalfsWithDefaultCluster ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ) ; }
public java.lang.Boolean getKsmState ( ) { return this . mVdsStatistics.getKsmState ( ) ; }
public void testIsDomainExistAndActiveDomainNotExists ( ) { validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( null ) ; org.hamcrest.MatcherAssert.assertThat ( "Wrong failure for null domain" , validator.isDomainExistAndActive ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ) ; }
public void updateCallBackNotified ( org.ovirt.engine.core.compat.Guid commandId ) ;
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepKeysUpdate ( java.util.List < java.lang.String > geoRepPubKeys , java.lang.String userName ) ;
private void assertCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages msg ) { junit.framework.Assert.assertTrue ( "canDoAction failed for the wrong reason" , command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( msg.name ( ) ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { removeEntry ( item ) ; onRemove ( value , widget ) ; }
private org.ovirt.engine.core.common.businessentities.VmDevice createUnmanagedNetworkInterface ( boolean plugged ) { org.ovirt.engine.core.common.businessentities.VmDevice device = createNetworkInterfaceDevice ( plugged , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; device.setManaged ( false ) ; return device ; }
public void setIsChangable ( boolean value ) { if ( ! ( isVmAttachedToPool ( ) ) ) super . setIsChangable ( value ) ; }
public void setVmCreationDate ( java.util.Date value ) { this . vmStatic.setcreation_date ( value ) ; }
public void cancel ( ) { org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; cancelConfirmation ( ) ; setGuideContext ( null ) ; setWindow ( null ) ; updateActionAvailability ( ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( java.lang.Object object ) { com.google.gwt.safehtml.shared.SafeHtml superTooltip = super . getTooltip ( object ) ; if ( superTooltip == null ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.importAllocationModifiedCollapse ( ) ) ; } return superTooltip ; }
public void testValidateNetworkExclusiveOnNicAtMostOneNonVmNetwork ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( true , java.util.Arrays.asList ( NetworkType.VLAN , NetworkType.NON_VM ) , vlanNetwork , nonVmNetwork1 ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster createCluster ( ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJobTest.CLUSTER_ID ) ; cluster.setGlusterService ( true ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; return cluster ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( getSucceeded ( ) ) { return isResetAllOptions ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_ALL : org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET ; } else { return ( errorType ) == null ? org.ovirt.engine.core.common.AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED : errorType ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetVirtioScsiControllersQuery.getQueryReturnValue ( ) . setReturnValue ( vmDeviceUtils.getVirtioScsiControllers ( org.ovirt.engine.core.bll.GetVirtioScsiControllersQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetVirtioScsiControllersQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetVirtioScsiControllersQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runValidateOnly ( final int currentValidateId , final int totalSize ) { try { return super . runValidateOnly ( currentValidateId , totalSize ) ; } finally { getCommands ( ) . get ( currentValidateId ) . freeLock ( ) ; } }
public void setIsPoolTabValid ( boolean value ) { if ( ( isPoolTabValid ) != value ) { isPoolTabValid = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsPoolTabValid" ) ) ; } }
public void setNfsVersion ( org.ovirt.engine.core.common.businessentities.NfsVersion nfsVersion ) { if ( ( this . nfsVersion ) != nfsVersion ) { this . nfsVersion = nfsVersion ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "NfsVersion" ) ) ; } }
private org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters buildRemoveMemoryVolumesParameters ( java.lang.String memoryState , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters params = new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters ( memoryState , vmId ) ; params.setEntityInfo ( org.ovirt.engine.core.bll.RemoveVmCommand.getParameters ( ) . getEntityInfo ( ) ) ; return params ; }
public void getVMProperties ( org.ovirt.engine.core.compat.Version version , java.util.Map < java.lang.String , java.lang.String > propertiesMap , java.lang.String vmPropertiesFieldValue ) { if ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vmPropertiesFieldValue ) ) { return ; } populateVMProperties ( version , vmPropertiesFieldValue , propertiesMap ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsGroupDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveVdsGroupCommand.getVdsGroup ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.RemoveVdsGroupCommand.setSucceeded ( true ) ; }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidatorWithoutSpace ( ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidator ( ) ; org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForDiskWithSnapshots ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; return storageDomainValidator ; }
private org.ovirt.engine.core.common.businessentities.VdsStatic getStaticHost ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; vdsStatic.setId ( GUIDS [ 2 ] ) ; return vdsStatic ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { if ( selectionModel.getSelectedList ( ) . isEmpty ( ) ) { scrollOffset = 0 ; } else { updateScrollPosition ( ) ; } enforceScrollPosition ( ) ; }
protected java.lang.String getAdditionalInformation ( ) { if ( ( getAndSetVdsStatic ( ) ) != null ) { return java.lang.String.format ( "HostName = %1$s" , getAndSetVdsStatic ( ) . getName ( ) ) ; } else { return super . getAdditionalInformation ( ) ; } }
public java.lang.String getDiskAlias ( ) { return org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand.getParameters ( ) . getRemovedVolume ( ) . getDiskAlias ( ) ; }
public org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol getBootProtocol ( ) { return nic.getIpv4BootProtocol ( ) ; }
public void testIsInternalExecutionFalse ( ) { org.ovirt.engine.core.bll.QueriesCommandBase < ? > query = mockQuery ( ) ; query.setInternalExecution ( true ) ; query.setInternalExecution ( false ) ; org.junit.Assert.assertFalse ( "Query should not be marked for internal execution" , query.isInternalExecution ( ) ) ; }
public void cancel ( ) { cancelConfirm ( ) ; setWindow ( null ) ; }
protected org.ovirt.engine.api.model.OpenStackVolumeProvider doPopulate ( org.ovirt.engine.api.model.OpenStackVolumeProvider model , org.ovirt.engine.core.common.businessentities.Provider entity ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = getStoragePoolIdByStorageDomainName ( entity.getName ( ) ) ; if ( storagePool != null ) { model.setDataCenter ( org.ovirt.engine.api.restapi.types.DataCenterMapper.map ( storagePool , null ) ) ; } return model ; }
public static org.ovirt.engine.core.common.businessentities.Provider getProvider ( org.ovirt.engine.api.restapi.resource.BackendResource resource , java.lang.String id ) { org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid.createGuidFromString ( id ) ; org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ; return resource.getEntity ( org.ovirt.engine.core.common.businessentities.Provider.class , QueryType.GetProviderById , parameters , id , true ) ; }
protected boolean shouldRenderCell ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model ) { return ( model.isPool ( ) ) || ( ( ( model.getVM ( ) ) != null ) && ( model.getVM ( ) . isRunningOrPaused ( ) ) ) ; }
private void readCdItem ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node ) { readManagedVmDevice ( node , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; }
public void testRootHasNoParent ( ) throws java.lang.Exception { java.io.File file = writeConf ( ) ; org.ovirt.engine.core.extensions.mgr.Configuration config = org.ovirt.engine.core.extensions.mgr.Configuration.loadFile ( file ) ; org.junit.jupiter.api.Assertions.assertNotNull ( config ) ; org.junit.jupiter.api.Assertions.assertNull ( config.getParent ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTagByTagNameQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . getTagByName ( org.ovirt.engine.core.bll.GetTagByTagNameQuery.getParameters ( ) . getName ( ) ) ) ; }
public void onSetupNetworks ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNetworkConnectivityCheckTimeoutInSeconds ( new org.ovirt.engine.ui.frontend.AsyncQuery ( sourceListModel , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { getConnectivityTimeout ( ) . setEntity ( returnValue ) ; postOnSetupNetworks ( ) ; } } ) ) ; }
public void testGetByVolumeId ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotSchedule schedule = dao.getByVolumeId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotScheduleDaoTest.VOLUME_ID_1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( schedule ) ; org.junit.jupiter.api.Assertions.assertEquals ( schedule , existingSchedule ) ; }
public void correlationIdMaxSize ( ) { org.ovirt.engine.core.common.action.ActionParametersBase parameters = new org.ovirt.engine.core.common.action.ActionParametersBase ( ) ; parameters.setCorrelationId ( org.apache.commons.lang.StringUtils.leftPad ( "" , BusinessEntitiesDefinitions.CORRELATION_ID_SIZE , "A" ) ) ; org.ovirt.engine.core.common.action.ActionReturnValue result = org.ovirt.engine.core.bll.job.ExecutionHandler.evaluateCorrelationId ( parameters ) ; org.junit.jupiter.api.Assertions.assertNull ( result , "Correlation id is size is at max permitted length" ) ; }
public void testGetFilteredByPermissionsForUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > result = dao.getAllForCluster ( FixturesTool.CLUSTER_RHEL6_ISCSI , org.ovirt.engine.core.dao.profiles.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public void typeMatchesProfileOnlyTypePassthrough ( ) { typeMatchesProfileCommon ( true , false ) ; org.hamcrest.MatcherAssert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
void prepareConnectHostToStoragePoolServers ( org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) ;
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.ActionType parentCommand ) { return coCoAsyncTaskHelper.concreteCreateTask ( taskId , command , asyncTaskCreationInfo , parentCommand ) ; }
public org.ovirt.engineextensions.aaa.ldap.ASN1OctetString decode ( java.lang.String value ) { return conversion.decode ( value , conversionProps ) ; }
boolean connectHostToDomainsInActiveOrUnknownStatus ( org.ovirt.engine.core.common.businessentities.VDS vds ) ;
void setupCloneTemplatePermissions ( org.ovirt.engine.core.common.action.VmManagementParametersBase params ) { boolean clonePermissions = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmsResource.CLONE_PERMISSIONS , true , false ) ; if ( clonePermissions ) { params.setCopyTemplatePermissions ( clonePermissions ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . getSearchButton ( ) . getCommand ( ) . setIsExecutionAllowed ( model.availableNamespaces ( ) ) ; }
public void setComment ( org.ovirt.engine.ui.uicommonweb.models.EntityModel value ) { privateComment = value ; }
public java.lang.Object getQueryableId ( ) { return new org.ovirt.engine.core.common.businessentities.EngineBackupLogId ( getScope ( ) , getDoneAt ( ) ) ; }
protected void onCollectionChanged ( ) { onCollectionChanged ( new org.ovirt.engine.ui.uicompat.NotifyCollectionChangedEventArgs ( ) ) ; }
private boolean logicalNetworkExists ( ) { if ( ( getPersistedNetwork ( ) ) != null ) { return true ; } addCanDoActionMessage ( VdcBllMessages.NETWORK_NOT_EXISTS ) ; return false ; }
public void init ( ) { super . init ( ) ; org.ovirt.engine.api.restapi.utils.OsTypeMockUtils.mockOsTypes ( ) ; osRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; }
public void networExists ( ) { simulateNicExists ( ) ; simulateNetworkExists ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.networkExists ( org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NETWORK_ID ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.Void runInTransaction ( ) { syncDbRecordsMergeFailure ( ) ; return null ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.QuotaCluster > getAllQuotaClusterIncludingConsumption ( ) ;
public org.ovirt.engine.core.common.errors.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate , java.util.List < org.ovirt.engine.core.compat.Guid > vdsBlackList ) { if ( ! ( org.ovirt.engine.core.bll.scheduling.VdsSelector.isVMSwapValueLegal ( vds ) ) ) { sb.append ( "swap value is illegal" ) ; return org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_SWAP ; } return null ; }
public void addLabelStyleNames ( java.lang.String styleNames ) { for ( java.lang.String name : styleNames.split ( "[,\\s]+" ) ) { addLabelStyleName ( name ) ; } }
private static java.lang.String addLeadingZero ( int k ) { return k <= 15 ? '0' + ( java.lang.Integer.toHexString ( k ) ) : java.lang.Integer.toHexString ( k ) ; }
public boolean isQualifiedForConsoleConnect ( ) { return getStatus ( ) . isQualifiedForConsoleConnect ( ) ; }
public boolean getIsAvailable ( ) { return getModel ( ) . isQuotaAvailable ( ) ; }
private void mockStorageDomainSpaceChecker ( org.ovirt.engine.core.common.businessentities.storage_domains domain , boolean succeeded ) { org.mockito.Mockito.doReturn ( succeeded ) . when ( command ) . isStorageDomainBelowThresholds ( domain ) ; }
void syncLunsInfoForBlockStorageDomain ( final org.ovirt.engine.core.compat.Guid storageDomainId , final org.ovirt.engine.core.compat.Guid vdsId ) ;
public void testStorageNameLength ( ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values ( ) ) { org.junit.jupiter.api.Assertions.assertEquals ( 4 , d.getStorageValue ( ) . length ( ) ) ; } }
private void initToolTip ( ) { tooltipPanel.setWidget ( tooltip ) ; addMouseOutHandler ( this ) ; addMouseOverHandler ( this ) ; }
java.util.Map < java.lang.String , java.lang.Object > snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) ;
public void setLastVdsRunOn ( org.ovirt.engine.core.compat.Guid value ) { this . vmDynamic.setLastVdsRunOn ( value ) ; }
public boolean isInfoEnabled ( ) { return log.isInfoEnabled ( ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) , UsbPolicy.ENABLED_LEGACY ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData ) { int size = registerVmData.getVm ( ) . getVmMemSizeMb ( ) ; return size + " MB" ; }
public java.lang.Integer getMaxVmNameLength ( ) { java.lang.Integer maxVmNameLength = ( ( java.lang.Integer ) ( getConfigValuePreConverted ( ConfigurationValues.MaxVmNameLength ) ) ) ; if ( maxVmNameLength == null ) { return 64 ; } return maxVmNameLength ; }
protected void setUpVersionExpectations ( int index ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetAvailableStoragePoolVersions , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , getVersions ( ) ) ; }
private void mainLogic ( ) { try { monitorEngineServerStatus ( ) ; } catch ( java.lang.Throwable e ) { if ( ! ( java.lang.Thread.interrupted ( ) ) ) { org.ovirt.engine.core.notifier.EngineMonitorService.log.error ( "Error while trying to report engine server status" , e ) ; } isServerUp = true ; } }
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback , final boolean showErrorDialog , final boolean waitForResult ) { runMultipleAction ( actionType , parameters , false , callback , null , showErrorDialog , waitForResult ) ; }
public void setVmHost ( java.lang.String value ) { this . vmDynamic.setvm_host ( value ) ; }
public java.util.Map < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.GraphicsInfo > getGraphicsInfos ( ) { return graphicsInfos ; }
protected void setStyles ( ) { super . setStyles ( ) ; connectAutomaticallyEditor.setContentWidgetContainerStyleName ( "connect-automatically-checkbox" ) ; connectAutomaticallyEditor.addContentWidgetContainerStyleName ( "connect-automatically-checkbox_pfly_fix" ) ; connectAutomaticallyEditor.setContentWidgetStyleName ( "" ) ; motdPanel.setVisible ( false ) ; }
protected org.ovirt.engine.core.dao.qos.QosDao < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > getQosDao ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.network.NetworkQoSDao.class ) ; }
private void template_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.template_SelectedItemChanged ( ) ; behavior.updateMigrationForLocalSD ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getAllInterfacesWithIpAddress ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String ipAddress ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "addr" , ipAddress ) . addValue ( "cluster_id" , clusterId ) ; return getCallsHandler ( ) . executeReadList ( "Getinterface_viewByAddr" , vdsNetworkInterfaceRowMapper , parameterSource ) ; }
public void edit ( ) { commandType = org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel.CommandType.Edit ; org.ovirt.engine.core.common.businessentities.Role role = ( ( org.ovirt.engine.core.common.businessentities.Role ) ( getSelectedItem ( ) ) ) ; initRoleDialog ( role ) ; }
private void sortNics ( ) { java.util.Collections.sort ( getOriginalItems ( ) , new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericNameableComparator ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.IMAGE ) ; revealDiskPanel ( disk ) ; }
void handleVdsMaintenanceTimeout ( org.ovirt.engine.core.compat.Guid vdsId ) ;
private org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { return dbFacade ; }
public void validateFailureOnMovingCinderDisk ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public javax.ws.rs.core.Response migrate ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "bricks" ) ; validateBrickNames ( action ) ; org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters params = toParameters ( action.getBricks ( ) ) ; return performAction ( ActionType.StartRemoveGlusterVolumeBricks , params , action , false ) ; }
public void testMapConfigurationType ( ) { org.ovirt.engine.api.model.ConfigurationType configurationTypeBll = org.ovirt.engine.api.restapi.types.VmMapper.map ( ConfigurationType.OVF , null ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ConfigurationType , configurationTypeBll ) ; org.ovirt.engine.api.model.ConfigurationType configurationTypeApi = org.ovirt.engine.api.restapi.types.VmMapper.map ( org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ConfigurationType , null ) ; org.junit.Assert.assertEquals ( ConfigurationType.OVF , configurationTypeApi ) ; }
public javax.ws.rs.core.Response activate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.HotPlugUnplugVmNicParameters params = new org.ovirt.engine.core.common.action.HotPlugUnplugVmNicParameters ( guid , org.ovirt.engine.core.common.action.PlugAction.PLUG ) ; org.ovirt.engine.api.restapi.resource.BackendNicsResource parent = ( ( org.ovirt.engine.api.restapi.resource.BackendNicsResource ) ( collection ) ) ; params.setVmId ( parent.parentId ) ; return doAction ( VdcActionType.HotPlugUnplugVmNic , params , action ) ; }
public void testDefaultRouteNonDefaultRouteNetwork ( ) { iface.setIpv4DefaultRoute ( true ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; org.junit.Assert.assertThat ( createTestedInstance ( false , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
protected boolean canDoAction ( ) { return sessionDataContainer.isSessionExists ( org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters ( ) . getSessionId ( ) ) ; }
private java.lang.String getTemplateSharedLockMessage ( ) { return new java.lang.StringBuilder ( EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM.name ( ) ) . append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.AddVmCommand.getVmName ( ) ) ) . toString ( ) ; }
public void dispose ( ) { if ( ( _writer ) != null ) { CloseElements ( ) ; _writer.close ( ) ; _document.Load ( _fileName ) ; } deleteTmpFile ( ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Nic nic ) { validateParameters ( nic , "name" ) ; return performCreate ( ActionType.AddVmTemplateInterface , new org.ovirt.engine.core.common.action.AddVmTemplateInterfaceParameters ( templateId , map ( nic ) ) , new org.ovirt.engine.api.restapi.resource.NicResolver ( nic.getName ( ) ) ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterQuery ( VdcQueryType.GetSystemPermissions , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public void shouldCreateLessNumaNodesAsVirtualCores ( ) { vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 3 ) ; org.junit.Assert.assertTrue ( underTest.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
public void testInvalidNumberOfMonitors ( ) { prepareVmToPassValidate ( ) ; vmStatic.setNumOfMonitors ( 99 ) ; org.junit.Assert.assertFalse ( "validate should have failed with invalid number of monitors." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_NUM_OF_MONITORS ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNotSetLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick ) { java.lang.String qualifiedName = brick.getQualifiedName ( ) ; if ( brick.getIsArbiter ( ) ) { qualifiedName += ( " (" + ( org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arbiter ( ) ) ) + ")" ; } return qualifiedName ; }
public void RemoveVds ( org.ovirt.engine.core.compat.Guid vdsId , boolean newHost ) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = GetVdsManager ( vdsId , newHost ) ; if ( vdsManager != null ) { vdsManager.dispose ( ) ; vdsManagersDict.remove ( vdsId ) ; } }
public static boolean canCopyHostDevices ( org.ovirt.engine.core.compat.Guid srcId , org.ovirt.engine.core.common.businessentities.VmBase dstVm ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.canCopyHostDevices ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.getVmBase ( srcId ) , dstVm ) ; }
public void interfaceBasedOnNotAVlanAtAll ( ) { org.junit.Assert.assertFalse ( org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn ( createNic ( ( ( org.ovirt.engine.core.utils.NetworkUtilsTest.IFACE_NAME ) + "1" ) ) , org.ovirt.engine.core.utils.NetworkUtilsTest.IFACE_NAME ) ) ; }
private void commitLabelChanges ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > srcIfaces , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.moveLabels ( srcIfaces , dstIface , hostSetupNetworksParametersData ) ; }
protected void sortCommands ( ) { java.util.Collections.sort ( getCommands ( ) , new org.ovirt.engine.core.bll.storage.StorageDomainsByTypeComparer ( ) ) ; }
public void trace ( java.lang.Object msg , java.lang.Throwable t ) { if ( log.isTraceEnabled ( ) ) { log.trace ( addPrefixToLogMessage ( msg ) , t ) ; } }
private void initEditors ( ) { migrateEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; migrateInfoIcon = new org.ovirt.engine.ui.common.widget.dialog.InfoIcon ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.RemoveBrickPopupView.templates.italicText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.RemoveBrickPopupView.constants.removeBricksMigrateDataInfo ( ) ) ) ; }
public void UpdateVdsStatisticsData ( org.ovirt.engine.core.common.businessentities.VdsStatistics vdsStatistics ) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = GetVdsManager ( vdsStatistics.getId ( ) ) ; if ( vdsManager != null ) { vdsManager.updateStatisticsData ( vdsStatistics ) ; } }
protected void changeDomainStatusWithCompensation ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map , org.ovirt.engine.core.common.businessentities.StorageDomainStatus compensateStatus , org.ovirt.engine.core.common.businessentities.StorageDomainStatus newStatus , org.ovirt.engine.core.bll.context.CompensationContext context ) { map.setStatus ( compensateStatus ) ; changeStorageDomainStatusInTransaction ( map , newStatus , context ) ; }
public void initTest ( ) { mockCpuFlagsManagerHandler ( ) ; mockOsRepository ( ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class , dbFacade ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { selectedLabelsChanged ( ) ; }
public void setStyle ( final org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkPanelsStyle style ) { super . setStyle ( style ) ; stylePanel ( requiredPanel ) ; stylePanel ( nonRequiredPanel ) ; requiredTitlePanel = initTitlePanel ( constants.requiredNetwork ( ) ) ; nonRequiredTitlePanel = initTitlePanel ( constants.nonRequiredNetwork ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; config = new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils ( false ) ; config.refreshVdcOptionCache ( dbFacade ) ; org.ovirt.engine.core.common.config.Config.setConfigUtils ( config ) ; }
public org.ovirt.engine.api.resource.TemplateDiskResource getDeviceResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource ( asGuidOr404 ( id ) , this ) ) ; }
public void setConfirmWindow ( org.ovirt.engine.ui.uicommonweb.models.Model value ) { if ( ( confirmWindow ) != value ) { confirmWindow = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicommonweb.models.Model.PROP_CONFIRM_WINDOW ) ) ; } }
protected void executeCommand ( ) { tagDao.updateDefaultDisplayForVmTag ( org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters ( ) . getTagsVmMap ( ) ) ; org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.setSucceeded ( true ) ; }
public void testAddGroupWithExplicitDirectoryName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": allnames=" ) + ( NAMES [ 0 ] ) ) , SearchType.AdGroup , getDirectoryGroup ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddGroup , org.ovirt.engine.core.common.action.DirectoryIdParameters.class , new java.lang.String [ ] { "Directory" , "Id" } , new java.lang.Object [ ] { DOMAIN , EXTERNAL_IDS [ 0 ] } , true , true , GUIDS [ 0 ] , VdcQueryType.GetDbGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( NAMES [ 0 ] ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText ) { table.addColumn ( column , headerText ) ; tableHeader.addColumn ( column , headerText ) ; }
public void setBoot ( org.ovirt.engine.sdk.entities.Boot value ) { this . boot = value ; }
protected void updateBootOrderInVmDevice ( ) { org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVmDeviceUtils ( ) . updateBootOrder ( org.ovirt.engine.core.bll.storage.disk.AttachDiskToVmCommand.getVm ( ) . getId ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , org.ovirt.engine.core.common.scheduling.PerHostMessages messages ) { return org.ovirt.engine.core.bll.scheduling.policyunits.VmAffinityFilterPolicyUnit.getAcceptableHosts ( true , hosts , vm , messages , getPendingResourceManager ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getVmDevicesAttachedToHost ( org.ovirt.engine.core.compat.Guid hostId ) { return getCallsHandler ( ) . executeReadList ( "GetVmDevicesAttachedToHost" , VmDeviceDaoImpl.vmDeviceRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "host_id" , hostId ) ) ; }
public void testIsNetworkInSyncWhenNetworkQosIsNull ( ) { networkQos = null ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected boolean setAndValidateCpuProfile ( ) { getVmTemplate ( ) . setVdsGroupId ( getVdsGroupId ( ) ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( getVmTemplate ( ) , getVdsGroup ( ) . getcompatibility_version ( ) ) ) ; }
public boolean addAsyncRunningVm ( org.ovirt.engine.core.compat.Guid vmId ) { return asyncRunningVms.add ( vmId ) ; }
private void addErrataForHostsFeature ( org.ovirt.engine.api.model.Features features ) { org.ovirt.engine.api.model.Feature feature = new org.ovirt.engine.api.model.Feature ( ) ; feature.setName ( "Katello Errata" ) ; feature.setDescription ( "View available Katello Errata for hosts and system." ) ; features.getFeature ( ) . add ( feature ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Quota > searchQuota ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = genericSearch ( quotaDao , true ) ; quotaManager.updateUsage ( quotaList ) ; return quotaList ; }
java.util.List < org.ovirt.engine.core.common.businessentities.VM > getAllActiveForStorageDomain ( org.ovirt.engine.core.compat.Guid storageDomain ) ;
public void setAutoStartup ( boolean value ) { vmStatic.setAutoStartup ( value ) ; }
public void setId ( org.ovirt.engine.core.common.utils.ExternalId id ) { this . id = id ; }
public void testAllLunsSupportDiscardFailsOneLunDoesNotSupport ( ) { org.junit.Assert.assertFalse ( discardHelper.allLunsSupportDiscard ( java.util.Arrays.asList ( createLunWithDiscardFunctionality ( 1024L , true ) , createLunWithDiscardFunctionality ( 2048L , false ) , createLunWithDiscardFunctionality ( 0L , true ) ) ) ) ; }
public void run ( ) { org.ovirt.engine.core.bll.InitBackendServicesOnStartupBean.log.infoFormat ( "MacPoolManager started: {0}" , new java.util.Date ( ) ) ; org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . initialize ( ) ; org.ovirt.engine.core.bll.InitBackendServicesOnStartupBean.log.infoFormat ( "MacPoolManager finished: {0}" , new java.util.Date ( ) ) ; }
public java.util.List < org.ovirt.engine.core.utils.customprop.ValidationError > validateVMProperties ( org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { java.util.List < org.ovirt.engine.core.utils.customprop.ValidationError > errors = validateProperties ( version , vmStatic.getCustomProperties ( ) ) ; return errors ; }
private void CoresPerSocket_EntityChanged ( java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { behavior.coresPerSocketChanged ( ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( asList ( guid ) , false , false , getBooleanMatrixParam ( org.ovirt.engine.api.restapi.resource.BackendHostResource.STOP_GLUSTER_SERVICE ) ) , action ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; }
public void removeVmIdFromVfsNoVfsWithVmIdTest ( ) { removeVmIdFromVfsCommonTest ( 0 , 2 ) ; }
public javax.ws.rs.core.Response previewSnapshot ( org.ovirt.engine.api.v3.types.V3Action action ) { return adaptAction ( getDelegate ( ) :: previewSnapshot , action ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return object.getProvidedBy ( ) . getExternalId ( ) ; }
public org.ovirt.engine.api.resource.externalhostproviders.EngineKatelloErrataResource getKatelloErrataResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.externalhostproviders.BackendEngineKatelloErrataResource ( ) ) ; }
public boolean disconnectStorageFromLunByVdsId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.LUNs lun ) { return runConnectionStorageToDomain ( storageDomain , vdsId , VDSCommandType.DisconnectStorageServer.getValue ( ) , lun , Guid.Empty ) ; }
public boolean isPowerManagementControlledByPolicy ( ) { return powerManagementControlledByPolicy ; }
public void testMacIsContainedInRange ( ) { org.hamcrest.MatcherAssert.assertThat ( rangeOf10Macs.contains ( org.ovirt.engine.core.bll.network.macpool.RangeTest.MAC_FROM_RANGE ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertEquals ( ( ( ( NAMES [ index ] ) + "@" ) + ( DOMAIN ) ) , model.getUserName ( ) ) ; assertNotNull ( model.getDomain ( ) ) ; assertEquals ( new org.ovirt.engine.core.compat.Guid ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN.getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) , true ) . toString ( ) , model.getDomain ( ) . getId ( ) ) ; assertTrue ( model.isSetGroups ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResourceTest.PARSED_GROUPS.length , model.getGroups ( ) . getGroups ( ) . size ( ) ) ; java.util.HashSet < java.lang.String > groupNames = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.api.model.Group group : model.getGroups ( ) . getGroups ( ) ) { groupNames.add ( group.getName ( ) ) ; } assertEquals ( new java.util.HashSet < java.lang.String > ( java.util.Arrays.asList ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResourceTest.PARSED_GROUPS ) ) , groupNames ) ; verifyLinks ( model ) ; }
public void testGetGlusterVolumeSnapshotConfigByVolumeIdAndName ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig config = dao.getConfigByVolumeIdAndName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.VOLUME_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.PARAM_NAME_2 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( config ) ; org.junit.jupiter.api.Assertions.assertEquals ( config , existingConfig2 ) ; }
protected void executeVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetTaskStatusVDSCommand.getBroker ( ) . getTaskStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetTaskStatusVDSCommand.getParameters ( ) . getTaskId ( ) . toString ( ) ) ; proceedProxyReturnValue ( ) ; setReturnValue ( parseTaskStatus ( _result.taskStatus ) ) ; }
private boolean verifyDisksIfNeeded ( ) { if ( ( ! ( getParameters ( ) . isImportAsNewEntity ( ) ) ) && ( ! ( org.ovirt.engine.core.bll.ImportVmCommand.isImagesAlreadyOnTarget ( ) ) ) ) { return checkIfDisksExist ( imageList ) ; } return true ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetDbUserByUserIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . get ( org.ovirt.engine.core.bll.GetDbUserByUserIdQuery.getParameters ( ) . getUserId ( ) ) ) ; }
protected void executeCommand ( ) { InitOldParentTagName ( ) ; org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . moveTag ( org.ovirt.engine.core.bll.MoveTagCommand.getParameters ( ) . getTagId ( ) , org.ovirt.engine.core.bll.MoveTagCommand.getParameters ( ) . getNewParentId ( ) ) ; org.ovirt.engine.core.bll.MoveTagCommand.setSucceeded ( true ) ; }
public java.lang.String getAddress ( ) { return nic.getIpv4Address ( ) ; }
protected java.lang.String composeMessage ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . newNameWithSuffixCannotContainBlankOrSpecialChars ( maxClonedNameLength ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( UsbType.NATIVE ) ; org.junit.Assert.assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) ) ; }
private void setUpGetEntityExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , new org.ovirt.engine.api.restapi.resource.VM ( ) ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.FILTERED ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED ) ) ; }
public int getMemSizeMb ( ) { return this . getVmMemSizeMb ( ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT ) , ValidationResult.VALID ) ; }
public void updateExternalStatus ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.businessentities.ExternalStatus status ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_guid" , id ) . addValue ( "external_status" , status ) ; getCallsHandler ( ) . executeModification ( "UpdateHostExternalStatus" , parameterSource ) ; }
protected void addValidationMessage ( java.lang.String message ) { getReturnValue ( ) . getValidationMessages ( ) . add ( message ) ; }
public void testNoRepeats ( ) { java.lang.String sample = org.ovirt.engine.core.utils.Ticketing.generateOTP ( ) ; for ( int x = 0 ; x < 1000 ; x ++ ) { java.lang.String other = org.ovirt.engine.core.utils.Ticketing.generateOTP ( ) ; org.junit.jupiter.api.Assertions.assertNotEquals ( sample , other ) ; } }
protected org.ovirt.engine.core.bll.validator.StorageDomainValidator createStorageDomainValidator ( ) { return new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.AddDiskCommand.getStorageDomain ( ) ) ; }
public void iscsiBondDoesNotExist ( ) { org.ovirt.engine.core.bll.ValidationResult res = validator.isIscsiBondExist ( null ) ; org.junit.Assert.assertEquals ( EngineMessage.ISCSI_BOND_NOT_EXIST , res.getMessage ( ) ) ; }
public org.ovirt.engine.api.model.Hosts list ( ) { org.ovirt.engine.core.common.mode.ApplicationMode appMode = getCurrent ( ) . getApplicationMode ( ) ; if ( appMode == ( org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly ) ) { return listGlusterOnly ( ) ; } else { return listAll ( ) ; } }
public int compareTo ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.row11Struct other ) { int returnValue = - 1 ; returnValue = checkNullsAndCompare ( this . var_name , other.var_name ) ; if ( returnValue != 0 ) { return returnValue ; } return returnValue ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { return ! ( masterVolume.getClusterId ( ) . equals ( slaveVolume.getClusterId ( ) ) ) ; }
protected boolean isDisksAliasNotEmpty ( ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskInfoDestinationMap.values ( ) ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( diskImage.getDiskAlias ( ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_CANNOT_BE_CREATED_WITH_EMPTY_DISK_ALIAS ) ; } } return true ; }
private void setNewMap ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.SPMAsyncTask > asyncTaskMap ) { _tasks = asyncTaskMap ; logChangedMap = true ; org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat ( "Setting new tasks map. The map contains now {0} tasks" , _tasks.size ( ) ) ; }
public org.ovirt.engine.api.model.CpuProfile update ( org.ovirt.engine.api.model.CpuProfile resource ) { return performUpdate ( resource , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetCpuProfileById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , ActionType.UpdateCpuProfile , new org.ovirt.engine.api.restapi.resource.BackendCpuProfileResource.UpdateParametersProvider ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = parent.getIscsiBond ( ) ; iscsiBond.getNetworkIds ( ) . remove ( guid ) ; return performAction ( VdcActionType.EditIscsiBond , new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( iscsiBond ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getNic ( ) { if ( ( nic ) == null ) { nic = interfaceDao.get ( org.ovirt.engine.core.bll.network.host.LabelNicCommand.getParameters ( ) . getNicId ( ) ) ; } return nic ; }
protected java.lang.String generateVmMetadata ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > AllVmImages ) { return ovfManager.exportVm ( vm , AllVmImages , clusterUtils.getCompatibilityVersion ( vm ) ) ; }
protected void searchNextPage ( ) { setSearchStringPage ( getNextSearchPageNumber ( ) ) ; getSearchCommand ( ) . execute ( ) ; }
private org.ovirt.engine.core.aaa.DirectoryUser getDirectoryUser ( int index ) { return new org.ovirt.engine.core.aaa.DirectoryUser ( DOMAIN , org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.NAMESPACE , EXTERNAL_IDS [ index ] , NAMES [ index ] ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Object > event ) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire ( this , model ) ; }
public void testDescriptionField ( ) { org.ovirt.engine.core.searchbackend.VmConditionFieldAutoCompleter comp = new org.ovirt.engine.core.searchbackend.VmConditionFieldAutoCompleter ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( comp.validationDict.containsKey ( "DESCRIPTION" ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( comp.validateFieldValue ( "DESCRIPTION" , "bar" ) ) ; }
protected java.util.Collection < org.ovirt.engine.api.model.VM > getEntitiesFromExportDomain ( ) { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenterId ( storageDomainId ) , storageDomainId ) ; params.setGetAll ( true ) ; return getBackendCollection ( VdcQueryType.GetVmsFromExportDomain , params ) ; }
protected java.lang.String getText ( org.ovirt.engine.core.common.businessentities.StoragePool entity ) { return entity.isLocal ( ) ? constants.storageTypeLocal ( ) : constants.storageTypeShared ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . clusterHostSubTabLabel ( ) , 3 , ginjector.getSubTabClusterHostModelProvider ( ) ) ; }
protected boolean setAndValidateCpuProfile ( ) { return validate ( cpuProfileHelper.setAndValidateCpuProfile ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters ( ) . getVmStaticData ( ) , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getUserId ( ) ) ) ; }
public void setUp ( ) { vm = createVm ( ) ; validator = new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) ) . thenReturn ( vmNetworkInterfaceDao ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters ( ) . getEntityId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.DISK , getDiskIsBeingRemovedLockMessage ( ) ) ) ; }
private void updateProgress ( org.ovirt.engine.core.common.businessentities.V2VJobInfo jobInfo ) { updateProgress ( ( StringUtils.EMPTY.equals ( jobInfo.getDescription ( ) ) ? "Initializing" : jobInfo.getDescription ( ) ) , jobInfo.getProgress ( ) ) ; }
public void validateNonExistingJobFails ( ) { org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.EndExternalJobCommandTest.jobId ) ) . thenReturn ( null ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( commandMock.validate ( ) ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map > getLunsMap ( java.lang.String lunId ) { return org.ovirt.engine.core.bll.GetLunsByVgIdQuery.getDbFacade ( ) . getStorageServerConnectionLunMapDAO ( ) . getAll ( lunId ) ; }
public static int callRemoveTaskFromDbByTaskId ( org.ovirt.engine.core.compat.Guid taskId ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.removeTaskFromDbByTaskId ( taskId ) ; }
private org.ovirt.engine.core.dao.VmDynamicDAO getVmDynamicDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) ; }
public org.ovirt.engine.core.common.businessentities.network.VnicProfileView get ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid userId , boolean filtered ) { return getCallsHandler ( ) . executeRead ( getProcedureNameForGet ( ) , org.ovirt.engine.core.dao.network.VnicProfileViewDaoDbFacadeImpl.VnicProfileViewRowMapper.INSTANCE , createIdParameterMapper ( id ) . addValue ( "user_id" , userId ) . addValue ( "is_filtered" , filtered ) ) ; }
public void testAlreadyExistStorageDomain ( ) { org.mockito.Mockito.when ( command.getStorageDomainStaticDao ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( parameters.getStorageDomain ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , plugged , vmNames , templateVersionNames , vmEntityType , numberOfVms , logicalName , imageTransferPhase , imageTransferBytesSent , imageTransferBytesTotal ) ; }
com.google.gwt.safehtml.shared.SafeHtml span ( java.lang.String id , java.lang.String classNames , com.google.gwt.safehtml.shared.SafeHtml html ) ;
public org.ovirt.engine.core.common.businessentities.Role get ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ; return getCallsHandler ( ) . executeRead ( "GetRolsByid" , org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance , parameterSource ) ; }
public static boolean checkIfCpusExist ( java.lang.String cpuName , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get ( ver ) ; if ( cpuFlagsManager != null ) { return cpuFlagsManager.CheckIfCpusExist ( cpuName ) ; } return false ; }
void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants , org.ovirt.engine.ui.webadmin.ApplicationDynamicMessages dynamicMessages ) { closeButton.setText ( constants.closeButtonLabel ( ) ) ; titleLabel.setText ( constants.aboutPopupCaption ( ) ) ; copyrightNotice.setText ( dynamicMessages.copyRightNotice ( ) ) ; }
protected org.ovirt.engine.api.model.GraphicsConsole addParents ( org.ovirt.engine.api.model.GraphicsConsole model ) { model.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; model.getVm ( ) . setId ( guid.toString ( ) ) ; return model ; }
public static java.util.stream.Stream < org.ovirt.engine.core.utils.MockConfigDescriptor < ? > > mockConfigForSerial ( ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilderTest.mockConfigWithSerialNumber ( SerialNumberPolicy.CUSTOM , org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilderTest.CUSTOM_CONFIG_SERIAL ) ; }
private boolean isNextRunRequested ( ) { return org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmResource.NEXT_RUN , true , false ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName ) ;
public void setWatchdogModel ( org.ovirt.engine.ui.uicommonweb.models.ListModel watchdogModel ) { this . watchdogModel = watchdogModel ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmMaxPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; retrieveDefaultSpmPriority ( ) ; }
protected void syncSearch ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getEntity ( ) ) != null ) { super . syncSearch ( queryType , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.list.AffinityGroupListModel.getEntity ( ) . getId ( ) ) ) ; } }
public java.lang.String getClusterName ( ) { if ( ( clusterName ) == null ) { if ( ( getCluster ( ) ) != null ) { clusterName = getCluster ( ) . getName ( ) ; } else { clusterName = "" ; } } return clusterName ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getPoolDomains ( ) { if ( ( poolDomains ) == null ) { poolDomains = org.ovirt.engine.core.bll.AddVmCommand.getStorageDomainDAO ( ) . getAllForStoragePool ( vmDisksSource.getStoragePoolId ( ) ) ; } return poolDomains ; }
public void validateFailsOnNull ( ) { setVolume ( volumeWithRemoveBricksTaskNull ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; }
public int compare ( java.lang.Integer o1 , java.lang.Integer o2 ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames.get ( o1 ) . compareTo ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames.get ( o2 ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.ENABLED_NATIVE ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getIso ( ) . setIsChangeable ( getAttachDrivers ( ) . getEntity ( ) ) ; updateWindowsWarningMessage ( ) ; }
public void testGetRelevantQuotasExistingCluster ( ) throws java.lang.Exception { assertGetAllRelevantQuoatsForCluster ( FixturesTool.CLUSTER_RHEL6_NFS , org.ovirt.engine.core.dao.QuotaDaoTest.VDS_GRUOP_NUM_QUOTAS ) ; }
public void testChangeClusterForbidden ( ) { prepareVmToPassCanDoAction ( ) ; vmStatic.setVdsGroupId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertFalse ( "canDoAction should have failed with cant change cluster." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections getStorageServerConnection ( java.lang.String id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.StorageServerConnections.class , VdcQueryType.GetStorageServerConnectionById , new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) , ( "Storage server connection: id=" + id ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( ( e.PropertyName ) == "IsAvailable" ) { setPkPasswordSectionVisiblity ( false ) ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { return iface.getId ( ) . equals ( guid ) ; }
public void initTemplate ( ) { setupTemplateWithVersion ( pool.getVmtGuid ( ) , pool.isUseLatestVersion ( ) , true ) ; }
private void refresh ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo ) { int softLimitValue = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.UserSessionTimeOutInterval ) ; if ( softLimitValue > 0 ) { sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SOFT_LIMIT_PARAMETER_NAME , org.apache.commons.lang.time.DateUtils.addMinutes ( new java.util.Date ( ) , softLimitValue ) ) ; } }
types.NetworkLabel [ ] networkLabels ( ) ;
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData ) { return importVmData.getVm ( ) . getName ( ) ; }
public void setSwapFree ( java.lang.Long value ) { this . mVdsStatistics.setSwapFree ( value ) ; }
public void testExecuteQueryWithInValidVmIdOrMissingPermissions ( ) throws java.lang.Exception { mockDaoForQuery ( ) ; vm = mockVm ( ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertNull ( getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void checkRemoveNotExistingConnection ( ) { parameters.setStorageServerConnection ( NFSConnection ) ; org.mockito.Mockito.when ( storageServerConnectionDao.get ( NFSConnection.getId ( ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST ) ; }
protected org.ovirt.engine.core.compat.Guid lookupStorageDomainIdByName ( java.lang.String name ) { return getEntity ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic.class , QueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , ( "Storage: name=" + name ) ) . getId ( ) ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; initAllModels ( true ) ; }
public java.lang.String getSsoAccessToken ( java.lang.String engineSessionId ) { return ( ( java.lang.String ) ( getData ( engineSessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.SSO_ACCESS_TOKEN_PARAMETER_NAME , false ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; }
private boolean isCinderDisksExist ( ) { return ! ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder ( getDisksList ( ) ) . isEmpty ( ) ) ; }
public void execute ( ) { initAllPlugins ( ) ; }
public org.ovirt.engine.core.common.businessentities.EventMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.EventMap entity = new org.ovirt.engine.core.common.businessentities.EventMap ( ) ; entity.setEventUpName ( rs.getString ( "event_up_name" ) ) ; entity.setEventDownName ( rs.getString ( "event_down_name" ) ) ; return entity ; }
public void testPersistentAuthDisabled ( ) { org.junit.jupiter.api.Assertions.assertEquals ( 0 , getPrefer ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , getPrefer ( "x" , "y" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , getPrefer ( "x" , "y" ) ) ; }
protected java.util.function.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > getPredicate ( final java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { return ( storageDomain ) -> ( storageDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ; }
public final boolean connect ( java.lang.String server , java.lang.String rootPassword ) { return _doConnect ( server , "root" , rootPassword , null , null ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lun.getLunConnections ( ) ) { if ( org.apache.commons.collections.CollectionUtils.exists ( targetIQNs , new org.apache.commons.collections.functors.EqualPredicate ( connection.getiqn ( ) ) ) ) { return true ; } } return false ; }
private org.ovirt.engine.core.compat.RpmVersion GetHostVersion ( org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.ui.uicommonweb.DataProvider.GetHostById ( hostId ) ; return host != null ? host.getVersion ( ) : new org.ovirt.engine.core.compat.RpmVersion ( ) ; }
private org.ovirt.engine.core.bll.storage.IStorageHelper getStorageHelper ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( storageType ) ; }
public int compare ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand com1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand com2 ) { return lexoNumeric.compare ( com1.getName ( ) , com2.getName ( ) ) ; }
private void checkJson ( java.lang.String json ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) final java.util.HashMap < java.lang.String , java.lang.Boolean > map = new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer ( ) . deserialize ( json , java.util.HashMap.class ) ; org.junit.Assert.assertTrue ( map.get ( "success" ) ) ; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createHigherVersionStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.createBasicPool ( ) ; pool.setIsLocal ( true ) ; pool.setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_2 ) ; return pool ; }
private void initHandlers ( ) { org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = tagsDirector ; serviceLoader.load ( org.ovirt.engine.core.bll.VmHandler.class ) ; serviceLoader.load ( org.ovirt.engine.core.bll.VdsHandler.class ) ; serviceLoader.load ( org.ovirt.engine.core.bll.VmTemplateHandler.class ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
public void getSnaphsotByTypeAndStatusForExistingEntity ( ) { org.junit.jupiter.api.Assertions.assertEquals ( existingEntity , dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_VM_ID , SnapshotType.REGULAR , SnapshotStatus.OK ) ) ; }
protected void endSuccessfully ( ) { checkTrustedService ( ) ; endActionOnAllImageGroups ( ) ; org.ovirt.engine.core.bll.VmHandler.unLockVm ( getVm ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.setSucceeded ( true ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password , java.util.List < java.lang.String > vmsNames ) ;
public void init ( final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model ) { super . init ( model ) ; addDataCenterListener ( ) ; addExportDomainListener ( ) ; updateExportDomainLoadButtonEnabledState ( ) ; }
public static void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.common.businessentities.AsyncTask task , java.lang.String message ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskManager ( ) . logAndFailPartiallySubmittedTaskOfCommand ( task , message ) ; }
void updateCommonModel ( ) { commonModel = commonProvider.get ( ) ; getView ( ) . setCommonModel ( commonModel ) ; }
public void setCompatibilityVersion ( org.ovirt.engine.core.compat.Version compatibilityVersion ) { this . compatibilityVersion = compatibilityVersion ; }
public org.ovirt.engine.core.compat.Guid getVdsGroupId ( ) { return this . mVdsStatic.getVdsGroupId ( ) ; }
public void currentUserNull ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.common.businessentities.aaa.DbUser u = null ; b.setCurrentUser ( u ) ; final org.ovirt.engine.core.common.businessentities.aaa.DbUser cu = b.getCurrentUser ( ) ; org.junit.Assert.assertEquals ( u , cu ) ; }
private void redraw ( ) { getView ( ) . recalculateSize ( ) ; getView ( ) . showScrollButtons ( ) ; }
public void setupCommand ( ) { initSpyCommand ( ) ; mockDaos ( ) ; mockSnapshotValidator ( ) ; }
protected org.ovirt.engine.core.common.businessentities.network.Network getNetwork ( ) { return getNetworkDao ( ) . get ( getNetworkId ( ) ) ; }
public static boolean copyNonEditableFieldsToDestination ( org.ovirt.engine.core.common.businessentities.VmStatic source , org.ovirt.engine.core.common.businessentities.VmStatic destination , boolean hotSetEnabled ) { return org.ovirt.engine.core.bll.VmHandler.updateVmsStatic.copyNonEditableFieldsToDestination ( source , destination , hotSetEnabled ) ; }
private org.ovirt.engine.core.common.businessentities.VdsStatic getVdsStatic ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic vds = new org.ovirt.engine.core.common.businessentities.VdsStatic ( ) ; vds.setId ( serverId ) ; vds.setVdsGroupId ( clusterId ) ; vds.setHostName ( org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.serverName ) ; return vds ; }
public void testIsNetworkExclusiveValid2 ( ) { org.junit.jupiter.api.Assertions.assertTrue ( underTest.isNetworkExclusive ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.validator.network.NetworkType.VM ) ) ) ; }
public abstract void entityPropertyChanged ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) ;
public void search ( ) { if ( ( getEntity ( ) ) != null ) { setSearchString ( ( "Events: event_datacenter=" + ( getEntity ( ) . getName ( ) ) ) ) ; super . search ( ) ; } }
public void setUp ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( "http://localhost:8080/ovirt-engine/sso/credentials-change.html" ) . when ( testServlet ) . getCredentialsChangeUrl ( org.mockito.ArgumentMatchers.any ( ) ) ; testServlet.setBackend ( mockBackend ) ; testServlet.init ( mockBrandingManager , "/ovirt-engine" ) ; mockBackendQuery ( VdcQueryType.GetConfigurationValue , "oVirtVersion" ) ; org.mockito.Mockito.when ( mockBrandingManager.getBrandingThemes ( ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; org.mockito.Mockito.when ( mockBrandingManager.getWelcomeSections ( org.mockito.ArgumentMatchers.any ( java.util.Locale.class ) ) ) . thenReturn ( "Welcome Section HTML" ) ; }
public void onDragEnter ( com.google.gwt.event.dom.client.DragEnterEvent event ) { ( dragCounter ) ++ ; eventBus.fireEvent ( new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollEnableEvent ( this ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( ( ( ( NAMES [ index ] ) + "@" ) + ( DOMAIN ) ) , model.getUserName ( ) ) ; }
public void cpuIdIsNull ( ) { cpuId = null ; org.assertj.core.api.Assertions.assertThatThrownBy ( ( ) -> new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter ( vm , fullEntityOvfData , version , emulatedMachine , cpuId , osRepository , engineXml ) ) . isInstanceOf ( java.lang.NullPointerException.class ) . hasMessageContaining ( "cpuId" ) ; }
public org.ovirt.engine.api.resource.UnmanagedNetworkResource getUnmanagedNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendUnmanagedNetworkResource ( org.ovirt.engine.api.restapi.utils.HexUtils.hex2string ( id ) , hostId ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { return snapshotsManager.addActiveSnapshot ( snapshotId , getVm ( ) , getMemoryVolumeForNewActiveSnapshot ( ) , org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext ( ) ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { boolean reboot = ( _reboot ) && ( ! ( _isNode ) ) ; if ( reboot ) { _messages.post ( InstallerMessages.Severity.INFO , "Enforcing host reboot" ) ; } _parser.cliEnvironmentSet ( org.ovirt.ovirt_host_deploy.constants.CoreEnv.FORCE_REBOOT , reboot ) ; return null ; }
public void frontend_QueryStarted ( ) { ( queryCounter ) ++ ; if ( ( getProgress ( ) ) == null ) { startProgress ( null ) ; } }
public void testBadKeyNotIsPublicKeyValid ( ) { for ( java.lang.String key : org.ovirt.engine.core.uutils.ssh.OpenSSHUtilsTest.BAD_SSH_KEYS ) { org.junit.jupiter.api.Assertions.assertFalse ( org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid ( key ) ) ; } }
private void setUpGetEntityExpectations ( boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetAllExternalNetworksOnProvider , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getNetworks ( ) ) ) ; }
public void setDiskSize ( int value ) { diskSize = value ; }
protected void finalize ( ) throws java.lang.Throwable { dispose ( ) ; }
protected boolean updateBrickServerAndInterfaceNames ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks , boolean addCanDoActionMessage ) { for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks ) { if ( ! ( updateBrickServerAndInterfaceName ( brick , addCanDoActionMessage ) ) ) { return false ; } } return true ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addCdDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return addCdDevice ( vmId , "" ) ; }
public void validateVmMemoryCantStartOnVdsHostTooSmall ( ) { vds.setMemFree ( 8835L ) ; boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance ( ) . hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { if ( object.getDiskVmElements ( ) . iterator ( ) . next ( ) . isBoot ( ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( constants.bootableDisk ( ) ) ; } return null ; }
public void setPrincipal ( java.lang.String sessionId , java.lang.String principal ) { setData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.PRINCIPAL_PARAMETER_NAME , principal ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( getAdUserId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.USER_VM_POOL , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void isRoleNetworkAllRoles ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = createNetworkCluster ( true , true , true ) ; org.junit.jupiter.api.Assertions.assertTrue ( org.ovirt.engine.core.utils.NetworkUtils.isRoleNetwork ( networkCluster ) ) ; }
public java.lang.String toString ( ) { return ( ( serializeId ( org.ovirt.engine.core.common.utils.PairQueryable.PairQueryableId.getFirst ( ) ) ) + '.' ) + ( serializeId ( org.ovirt.engine.core.common.utils.PairQueryable.PairQueryableId.getSecond ( ) ) ) ; }
public void testIsUsingScsiReservationValidWhenAddingFloatingDisk ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.UNFILTERED , true ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( null , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK ) ) ; }
public void setFormPanel ( org.ovirt.engine.ui.common.widget.form.AbstractFormPanel formPanel ) { this . formPanel = formPanel ; if ( ( autoPlacement ) && ( getIsAvailable ( ) ) ) { this . autoPlacementRow = formPanel.getNextAvailableRow ( column ) ; } }
public void setPort ( int port ) { this . consoleOptions.setPort ( port ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VDSGroup , org.ovirt.engine.core.common.businessentities.network.NetworkCluster > , org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel , org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.networkClusterSubTabLabel ( ) , 2 , modelProvider ) ; }
private void getAffinityGroupByVdsIdHelper ( org.ovirt.engine.core.compat.Guid vdsId , int count ) { java.util.List < org.ovirt.engine.core.common.scheduling.AffinityGroup > affinityGroups = dao.getPositiveEnforcingAffinityGroupsByRunningVmsOnVdsId ( vdsId ) ; org.junit.jupiter.api.Assertions.assertNotNull ( affinityGroups ) ; org.junit.jupiter.api.Assertions.assertEquals ( count , affinityGroups.size ( ) ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( ) { return runVdsCommand ( VDSCommandType.ConvertVm , buildConvertParameters ( ) ) ; }
public java.lang.String getDiskAlias ( ) { if ( ( getDisk ( ) ) != null ) { return getDisk ( ) . getDiskAlias ( ) ; } return "" ; }
public void testGetFilteredWithPermissions ( ) { org.ovirt.engine.core.common.businessentities.VmPool result = dao.get ( existingVmPool.getVmPoolId ( ) , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; assertGetResult ( result ) ; }
private java.lang.String getDefaultUrl ( org.ovirt.engine.core.common.businessentities.ProviderType type ) { if ( type == null ) { return "" ; } switch ( type ) { case EXTERNAL_NETWORK : case OPENSTACK_NETWORK : return "http://localhost:9696" ; case OPENSTACK_IMAGE : return "http://localhost:9292" ; case OPENSTACK_VOLUME : return "http://localhost:8776" ; case VMWARE : return "" ; case KVM : return "" ; case FOREMAN : default : return "http://localhost" ; } }
public java.lang.Object call ( ) throws java.lang.Exception { _parser.cliEnvironmentSet ( NetEnv.SSH_KEY , org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getEngineSSHPublicKey ( ) . replace ( "\n" , "" ) ) ; return null ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } return source ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllForVm ( org.ovirt.engine.core.compat.Guid id , boolean onlyPluggedDisks ) { return getAllForVm ( id , onlyPluggedDisks , null , false ) ; }
public java.util.List < org.ovirt.engine.core.searchbackend.SyntaxChecker.SortByElement > getSortByElements ( java.lang.String fieldName ) { if ( sortableFieldDict.containsKey ( fieldName ) ) { return sortableFieldDict.get ( fieldName ) ; } return java.util.Collections.singletonList ( new org.ovirt.engine.core.searchbackend.SyntaxChecker.SortByElement ( getDbFieldName ( fieldName ) , true ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkModel flush ( ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkModel model = driver.flush ( ) ; model.getProfiles ( ) . setItems ( profilesEditor.flush ( ) . getItems ( ) ) ; return model ; }
public org.ovirt.vdsmfake.domain.Host getHostByName ( java.lang.String name ) { return vdsmManager.getHostByName ( name ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
protected void executeVdsBrokerCommand ( ) { super . executeVdsBrokerCommand ( ) ; updateNetConfigDirtyFlag ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance ( getVds ( ) , skipManagementNetwork ( ) ) ; proceedProxyReturnValue ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.network_cluster , org.ovirt.engine.core.common.businessentities.VDSGroup > object ) { return object.getSecond ( ) . getdescription ( ) ; }
public void networkLabeled ( ) { org.mockito.Mockito.when ( network.getLabel ( ) ) . thenReturn ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextPropertyString ( 10 ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notLabeled ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED ) ) ; }
public void testPatternBasedNameFails ( ) { vmStatic.setName ( "aa-??bb" ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validateInputs ( ) , "Pattern-based name should not be supported for VM" ) ; }
public void shouldAllowUnpinnedNumaNodes ( ) { validVM.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( validVM ) , org.hamcrest.core.Is.is ( org.hamcrest.Matchers.empty ( ) ) ) ; }
public org.ovirt.engine.api.resource.RoleResource getRoleResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendRoleResource ( id , principalId ) ) ; }
public void setVdsGroupId ( org.ovirt.engine.core.compat.Guid value ) { this . vmStatic.setVdsGroupId ( value ) ; }
public void updateVisibility ( ) { super . updateVisibility ( ) ; dataCenterEditor.setVisible ( false ) ; }
protected R addLinks ( R model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParent , boolean doNotLinkSubCollections ) { return doNotLinkSubCollections ? org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( org.ovirt.engine.api.restapi.resource.AbstractBackendResource.getUriInfo ( ) , addParents ( model ) , suggestedParent ) : addLinks ( model , suggestedParent ) ; }
public org.ovirt.engine.api.model.StorageConnection update ( org.ovirt.engine.api.model.StorageConnection connection ) { return performUpdate ( connection , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase.class ) , ActionType.UpdateStorageServerConnection , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.UpdateParametersProvider ( ) ) ; }
protected void loadVmInit ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmInit ( ) ) == null ) { vmHandler.updateVmInitFromDB ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getStaticData ( ) , false ) ; } }
public void nonInternalMaintenanceAllowed ( ) { nonInternalActionAllowed ( StorageDomainStatus.Maintenance ) ; }
public java.lang.String getUserName ( ) { java.lang.String userName = super . getUserName ( ) ; return org.apache.commons.lang.StringUtils.isEmpty ( userName ) ? org.ovirt.engine.core.bll.RestartVdsCommand.INTERNAL_FENCE_USER : userName ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; }
public void setLastTimeUsedAsMaster ( long lastTimeUsedAsMaster ) { _staticData.setLastTimeUsedAsMaster ( lastTimeUsedAsMaster ) ; }
public boolean shouldRepeatEndMethodsOnFail ( org.ovirt.engine.core.compat.Guid cmdId ) { return shouldRepeatEndMethodsOnFail ( commandCoordinatorUtil.getCommandEntity ( cmdId ) . getReturnValue ( ) ) ; }
protected < T > boolean matchEntity ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity , T id ) { return ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ; }
public void testSetActionMessageParameters ( ) { org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertSetActionMessageParameters ( command , EngineMessage.VAR__TYPE__STORAGE__DOMAIN , EngineMessage.VAR__ACTION__REMOVE ) ; }
public void validateChangeComment ( ) { sd.setComment ( org.apache.commons.lang.StringUtils.reverse ( sd.getComment ( ) ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void useDefaultKeyPair ( ) { java.security.KeyStore.PrivateKeyEntry entry = org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getPrivateKeyEntry ( ) ; setKeyPair ( new java.security.KeyPair ( entry.getCertificate ( ) . getPublicKey ( ) , entry.getPrivateKey ( ) ) ) ; }
public void cancelConfirmWithFocus ( ) { setConfirmWindow ( null ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( getWindow ( ) ) ) ; hostModel.setIsPowerManagementTabSelected ( true ) ; }
public void log ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { auditLogDirector.log ( auditLogable , logType , loggerString ) ; }
public java.lang.String getLogTypeName ( ) { return getLogType ( ) . name ( ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VmTemplate > aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalConsolePopupModel model ) { editCheckBoxes ( model , ctrlAltDel , enableUsbAutoshare , openInFullScreen , useLocalDrives , wanEnabled , disableSmartcard ) ; }
public void validateDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initVmDiskImage ( false ) ; command.getImage ( ) . setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
protected org.ovirt.engine.api.model.Vm addParents ( org.ovirt.engine.api.model.Vm vm ) { vm.setStorageDomain ( parent.getStorageDomainModel ( ) ) ; return vm ; }
protected void doExecute ( ) { startProgress ( null ) ; }
public org.ovirt.engine.api.resource.openstack.OpenstackSubnetsResource getSubnetsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackSubnetsResource ( providerId , id ) ) ; }
public com.google.gwt.resources.client.ImageResource getDefaultImage ( ) { return org.ovirt.engine.ui.webadmin.widget.table.column.CommentColumn.resources.commentImage ( ) ; }
public void setUp ( ) { disksList = new java.util.LinkedList < > ( ) ; initStorageDomains ( ) ; initFilters ( ) ; }
protected void executeVdsBrokerCommand ( ) { mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ResumeBrokerVDSCommand.getBroker ( ) . resume ( mVmId.toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.ResumeBrokerVDSCommand.proceedProxyReturnValue ( ) ; }
protected boolean canDoAction ( ) { if ( org.ovirt.engine.core.bll.MoveDisksCommand.getParameters ( ) . getParametersList ( ) . isEmpty ( ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_NO_DISKS_SPECIFIED ) ; } return verifyUnsupportedDisks ( ) ; }
protected void finalize ( ) { try { close ( ) ; } catch ( java.io.IOException e ) { org.ovirt.engine.core.bll.OVirtNodeUpgrade.log.error ( "Exception during finalize" , e ) ; } }
public org.ovirt.engine.core.dao.VmIconDao getVmIconDao ( ) { return getDao ( org.ovirt.engine.core.dao.VmIconDao.class ) ; }
private org.ovirt.engine.core.common.config.IConfigUtilsInterface initConfigUtils ( ) { validator = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator ( ) ; org.ovirt.engine.core.common.config.IConfigUtilsInterface configUtils = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.config.IConfigUtilsInterface.class ) ; org.mockito.Mockito.when ( configUtils.GetValue ( ConfigValues.vdsTimeout , ConfigCommon.defaultConfigurationVersion ) ) . thenReturn ( org.ovirt.engine.core.common.utils.ConfiguredRangeValidatorTest.TEST_MAX_RANGE ) ; return configUtils ; }
public void close ( ) { this . queue.add ( new org.ovirt.vdsm.jsonrpc.client.internal.MessageContext ( null , null ) ) ; this . tracker.close ( ) ; this . publisher.close ( ) ; }
public org.ovirt.engine.core.compat.Guid getQuotaId ( ) { return getParameters ( ) . getQuotaId ( ) ; }
private java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > createRemoveNetworkParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsForRemove ) { org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder builder = new org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder ( getOldNetwork ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getContext ( ) ) ; return builder.buildParameters ( nicsForRemove ) ; }
public void setPassword ( java.lang.String password ) { _password = password ; }
public void setSelectedItem ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView value ) { super . setSelectedItem ( value ) ; getNicType ( ) . setSelectedItem ( getDeafultNicTypeByProfile ( ) ) ; updateLinkChangability ( ) ; }
public void lowerVersionMgmtNetworkSupportedFeatures ( ) { cmd.getStoragePool ( ) . setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_0 ) ; addNonDefaultClusterToPool ( ) ; addManagementNetworksToPool ( 2 ) ; setupNetworkValidator ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void testGetWithNotExistingEntityId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao.getByEntityIdAndStorageDomain ( FixturesTool.VM_RHEL5_POOL_51 , FixturesTool.STORAGE_DOAMIN_NFS2_1 ) ; org.junit.Assert.assertTrue ( "VM should not exists in the UnregisteredOVFData" , ovfEntityDataList.isEmpty ( ) ) ; }
public void setVmId ( org.ovirt.engine.core.compat.Guid vmId ) { this . vmId = vmId ; }
public void setQuotaId ( org.ovirt.engine.core.compat.Guid value ) { this . vmStatic.setQuotaId ( value ) ; }
public boolean isApplicable ( org.ovirt.engine.core.common.businessentities.Cluster oldCluster , org.ovirt.engine.core.common.businessentities.Cluster newCluster ) { emulatedMachines = org.ovirt.engine.core.bll.EmulatedMachineClusterEditChecker.getClusterEmulatedMachines ( newCluster ) ; emulatedMachines.removeAll ( org.ovirt.engine.core.bll.EmulatedMachineClusterEditChecker.getClusterEmulatedMachines ( oldCluster ) ) ; return ! ( emulatedMachines.isEmpty ( ) ) ; }
public void managementNetworkNotExternalValidInvalidExternal ( ) { testManagementNetworkNotExternal ( true , true , org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_CANNOT_BE_EXTERNAL ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.hasItem ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.NETWORK_NAME_REPLACEMENT ) ) ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetVmsRunningOnVDSQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.DbFacade.getInstance ( ) . getVmDao ( ) . getAllRunningByVds ( org.ovirt.engine.core.bll.GetVmsRunningOnVDSQuery.getParameters ( ) . getId ( ) ) ) ; }
public void testVolume ( ) { testValidSql ( "volume: " , "SELECT * FROM ((SELECT distinct gluster_volumes_view.* FROM gluster_volumes_view ) ORDER BY vol_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "volume: name=volume1" , "SELECT * FROM ((SELECT distinct gluster_volumes_view.* FROM gluster_volumes_view WHERE gluster_volumes_view.vol_name LIKE volume1 ) ORDER BY vol_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public void insufficientDiskSpace ( ) { setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateSpaceRequirements ( org.mockito.ArgumentMatchers.anyList ( ) ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
public java.util.Map < org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > , java.lang.Boolean > getNicHotplugSupportMap ( ) { return nicHotplugSupportMap ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.IsVmTemlateWithSameNameExistQuery.getQueryReturnValue ( ) . setReturnValue ( isVmTemlateWithSameNameExist ( org.ovirt.engine.core.bll.IsVmTemlateWithSameNameExistQuery.getParameters ( ) . getName ( ) , org.ovirt.engine.core.bll.IsVmTemlateWithSameNameExistQuery.getParameters ( ) . getDatacenterId ( ) ) ) ; }
public void testQueryType ( ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException { org.junit.jupiter.api.Assertions.assertNotSame ( QueryType.Unknown , org.ovirt.engine.core.bll.TestHelperQueriesCommandType.getQueryTypeFieldValue ( query ) , "The query can't be found in the enum QueryType" ) ; }
public void testGetLunsThatBreakDiscardAfterDeleteSupportDiscardAfterDeleteBreaks ( ) { storageDomain.setDiscardAfterDelete ( true ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardSupport ( 0L ) ; assertGetLunsThatBreakDiscardAfterDeleteSupportContainsExpectedLuns ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 1024L ) , lunThatBreaksDiscardSupport ) , java.util.Collections.singletonList ( lunThatBreaksDiscardSupport ) ) ; }
public java.lang.String getImageID ( ) { if ( ( ( imageID ) == null ) || ( imageID.isEmpty ( ) ) ) { return "00000000-0000-0000-0000-000000000000" ; } return imageID ; }
public int compare ( org.ovirt.engine.api.model.Permissions o1 , org.ovirt.engine.api.model.Permissions o2 ) { java.lang.String id1 = o1.getId ( ) . toString ( ) ; java.lang.String id2 = o2.getId ( ) . toString ( ) ; return id1.compareTo ( id2 ) ; }
public void setInvalidStringValue ( ) throws java.lang.Exception { final java.lang.String key = "LDAP_Security_mode" ; org.junit.Assert.assertFalse ( config.getEngineConfigLogic ( ) . persist ( key , "GSSAPI-invalid-value" ) ) ; }
protected final void acceptAll ( final java.lang.String ... tokens ) { java.util.Collections.addAll ( mVerbs , tokens ) ; }
void migrateVM ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > initialHosts , org.ovirt.engine.core.compat.Guid vmToMigrate ) ;
private static void translateErrors ( java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > errors ) { for ( org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors ) { retVal.setCanDoActionMessages ( ( ( java.util.ArrayList < java.lang.String > ) ( org.ovirt.engine.ui.frontend.Frontend.translateError ( retVal ) ) ) ) ; } }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateConsoleModels ( ) ; updateActionAvailability ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > object ) { return object.getSecond ( ) . getvds_name ( ) ; }
protected org.ovirt.engine.core.common.businessentities.OriginType getRawValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getOrigin ( ) ; }
protected java.util.List < java.lang.String > missingServerCpuFlags ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.missingServerCpuFlags ( org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCpuName ( ) , vds.getCpuFlags ( ) , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
public boolean isErrorEnabled ( ) { return log.isErrorEnabled ( ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeParameterModel object ) { driver.edit ( object ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepMountBrokerSetup ( java.lang.String remoteVolumeName , java.lang.String userName , java.lang.String remoteGroupName , java.lang.Boolean partial ) ;
public void testIsNetworkInSyncWhenBothQosIsNull ( ) { iface.setQos ( null ) ; networkQos = null ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void shouldFailtWhenNoGraphicsType ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( new org.ovirt.engine.core.common.console.ConsoleOptions ( ) ) ; org.junit.Assert.assertFalse ( getQuery ( ) . validateInputs ( ) ) ; }
public void validateSucceedsWithStopActionType ( ) { cmd.getParameters ( ) . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; prepareMocks ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; }
public void defaultClusterInLocalFs ( ) { prepareManagementNetworkMocks ( ) ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.DEFAULT_VDS_GROUP_ID ) ; createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; setupCpu ( ) ; allQueriesForVms ( ) ; architectureIsUpdatable ( ) ; canDoActionFailedWithReason ( VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "srcInfo" , srcInfo ) . append ( "dstInfo" , dstInfo ) . append ( "collapse" , collapse ) ; }
public void testGetAllWithQuery ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > configs = dao.getAllWithQuery ( "select * from gluster_volume_snapshot_config" ) ; org.junit.Assert.assertNotNull ( configs ) ; org.junit.Assert.assertEquals ( 3 , configs.size ( ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.StorageType > getStorageTypeList ( ) { return new java.util.ArrayList ( java.util.Arrays.asList ( StorageType.ISCSI , StorageType.FCP ) ) ; }
protected void verifyBuiltKernelOptions ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.models.vms.INITRD_PATH , vm.getInitrdUrl ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.models.vms.KERNEL_PATH , vm.getKernelUrl ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.models.vms.KERNEL_PARAMS , vm.getKernelParams ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ; if ( propName.equals ( "ProposeDiscoverTargets" ) ) { setProposeDiscover ( object.getProposeDiscoverTargets ( ) ) ; } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... parameters ) { numaSupport ( ) ; }
public void testValidateImageDoesNotExist ( ) { org.mockito.Mockito.when ( getDiskDao ( ) . get ( getDiskImageGroupId ( ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST ) ; }
protected void persistCollectedData ( ) { updateNetConfigDirtyFlag ( ) ; hostNetworkTopologyPersister.persistAndEnforceNetworkCompliance ( getVds ( ) , skipManagementNetwork ( ) , getParameters ( ) . getInterfaces ( ) ) ; }
private void initProcessedInfoLists ( ) { proccessedIdsInfo = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ; proccessedOvfGenerationsInfo = new java.util.LinkedList < java.lang.Long > ( ) ; proccessedOvfConfigurationsInfo = new java.util.LinkedList < > ( ) ; }
protected static void refreshVdcOptionCache ( org.ovirt.engine.core.dal.dbbroker.DbFacade db ) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdcOption > list = db.getVdcOptionDao ( ) . getAll ( ) ; list.forEach ( org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils :: updateOption ) ; }
public void getIdByTypeAndStatusReturnsNullForNonExistingVm ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( null , dao.getId ( Guid.Empty , SnapshotType.REGULAR , SnapshotStatus.OK ) ) ; }
public void validateVmMemoryCanStartOnVds ( ) { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( "" ) ; org.junit.Assert.assertFalse ( "Set should fail with an empty session" , container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createDiskImage ( long sizeInGigabytes ) { org.ovirt.engine.core.common.businessentities.DiskImage image = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; image.setSizeInGigabytes ( sizeInGigabytes ) ; image.setDiskInterface ( DiskInterface.IDE ) ; return image ; }
private void allVfsAreFree ( boolean isValid ) { org.mockito.Mockito.when ( validator.allVfsAreFree ( org.mockito.Matchers.any ( org.ovirt.engine.core.bll.network.host.NetworkDeviceHelper.class ) ) ) . thenReturn ( ( isValid ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NUM_OF_VFS_CANNOT_BE_CHANGED ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel vmSnapshotListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel ) ( model ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; vmSnapshotListModel.setLiveMergeSupported ( vds.getLiveMergeSupport ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Cluster getCluster ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , clusterId ) ; }
public void validateFailsOnVolumeWithoutRemoveBricksTask ( ) { setVolume ( volumeWithoutRemoveBricksTask ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
private void setupDisks ( final org.ovirt.engine.ui.userportal.uicommon.model.basic.UserPortalBasicListProvider modelProvider ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = modelProvider.getModel ( ) . getVmBasicDiskListModel ( ) . getItems ( ) ; if ( diskImages != null ) { getView ( ) . editDistItems ( diskImages ) ; } }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolForCluster ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { return getMacPoolById ( getMacPoolId ( clusterId ) , commandContext ) ; }
private static org.ovirt.engine.core.compat.Guid createGuidFromStringWithDefault ( java.lang.String candidate , org.ovirt.engine.core.compat.Guid defaultValue ) { if ( candidate == null ) { return defaultValue ; } return new org.ovirt.engine.core.compat.Guid ( candidate ) ; }
public void enableSinglePCI ( boolean enabled ) { getModel ( ) . getIsSingleQxlEnabled ( ) . setIsChangeable ( enabled ) ; if ( ! enabled ) { getModel ( ) . getIsSingleQxlEnabled ( ) . setEntity ( false ) ; } }
public java.lang.String getValue ( ) { java.lang.String raw = super . getValue ( ) ; return raw == null ? "" : raw ; }
private org.ovirt.engine.core.bll.ValidationResult validateWithHostSetupNetworksValidator ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) , getExistingNics ( ) , getExistingAttachments ( ) , getClusterNetworks ( ) , managementNetworkUtil ) ; return validator.validate ( ) ; }
private void initVds ( ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( new org.ovirt.engine.core.compat.Guid ( "00000000-0000-0000-0000-000000000012" ) ) ; vds.setVdsGroupCompatibilityVersion ( org.ovirt.engine.core.vdsbroker.VmsMonitoringTest.vdsCompVersion ) ; }
boolean match ( TSource source ) ;
public void passwordProvidedForHostInstallation ( ) { validator = createValidatorForHostInstallation ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.passwordProvidedForHostInstallation ( AuthenticationMethod.Password , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > returnValue ) { allHosts = returnValue ; updateOptionsNonLocalFS ( ) ; }
public boolean isEnabled ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel : getNetworksTableItems ( ) ) { if ( clusterNetworkModel.getIsChangable ( ) ) { return true ; } } return false ; }
public void testDefaultRouteNonDefaultRouteNetwork ( ) { iface.setIpv4DefaultRoute ( true ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( false , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity ) { verifyRelationWithHostNetworkQos ( entity ) ; hostNetworkQosDao.persistQosChanges ( entity.getId ( ) , asHostNetworkQos ( entity.getHostNetworkQos ( ) ) ) ; super . save ( entity ) ; }
java.lang.String numberValidationNumberGreaterInvalidReason ( java.lang.String prefixMsg , java.lang.String min ) ;
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStop ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName , java.lang.Boolean force ) ;
public java.lang.String getRandomvar_name ( ) { return "timesFailed" ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase params ) ;
public void testExistsVmDeviceByVmIdAndType ( ) { org.junit.jupiter.api.Assertions.assertTrue ( dao.existsVmDeviceByVmIdAndType ( org.ovirt.engine.core.dao.VmDeviceDaoTest.EXISTING_VM_ID , VmDeviceGeneralType.HOSTDEV ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( dao.existsVmDeviceByVmIdAndType ( org.ovirt.engine.core.dao.VmDeviceDaoTest.NON_EXISTING_VM_ID , VmDeviceGeneralType.HOSTDEV ) ) ; }
public void setPmSecondaryPort ( java.lang.String value ) { mVdsStatic.setPmSecondaryOptions ( value ) ; }
public void testAddNewIscsiBond ( ) { dao.save ( newIscsiBond ) ; org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = dao.get ( newIscsiBond.getId ( ) ) ; org.junit.Assert.assertEquals ( newIscsiBond , iscsiBond ) ; }
public synchronized boolean entityHasTasks ( org.ovirt.engine.core.compat.Guid id ) { for ( org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values ( ) ) { if ( isCurrentTaskLookedFor ( id , task ) ) { return true ; } } return false ; }
public void setDisplayType ( org.ovirt.engine.core.common.businessentities.DisplayType value ) { this . displayType = value ; }
public void canDetectMissingVM ( ) { org.mockito.Mockito.when ( vmDao.get ( org.mockito.Matchers.eq ( vm.getId ( ) ) ) ) . thenReturn ( null ) ; final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; }
protected abstract void createInfoPanel ( org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel model ) ;
public void setPort ( java.lang.String port ) { this . port = ( port == null ) ? org.ovirt.engine.ui.uicommonweb.UriAuthority.EMPTY_STRING : port ; }
protected org.ovirt.engine.core.bll.validator.ImportValidator getImportValidator ( ) { if ( ( importValidator ) == null ) { importValidator = new org.ovirt.engine.core.bll.validator.ImportValidator ( getParameters ( ) ) ; } return importValidator ; }
private void prepareVmToPassCanDoAction ( ) { vmStatic.setName ( "vm1" ) ; vmStatic.setMemSizeMb ( 256 ) ; vmStatic.setSingleQxlPci ( false ) ; mockVmDaoGetVm ( ) ; mockSameNameQuery ( false ) ; mockValidateCustomProperties ( ) ; }
private void persistEngineSession ( java.lang.String sessionId ) { org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo = getSessionInfo ( sessionId ) ; if ( sessionInfo != null ) { sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID , engineSessionDao.save ( new org.ovirt.engine.core.common.businessentities.EngineSession ( getUser ( sessionId , false ) , sessionId ) ) ) ; } }
private void checkSanDomainAttachedToDc ( java.lang.String commandName , java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { checkDomainAttachedToDc ( commandName , storageDomains , null ) ; }
public java.lang.String getVmtName ( ) { return this . vmtName ; }
public void vmNotHavingPassthroughVnicsNotValid ( ) { vmNotHavingPassthroughVnicsCommon ( vm.getId ( ) , 2 , 3 ) ; org.junit.Assert.assertThat ( validator.vmNotHavingPassthroughVnics ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED ) ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present ) { table.ensureColumnPresent ( column , headerText , present ) ; tableHeader.ensureColumnPresent ( column , headerText , present ) ; }
public void setMessage ( java.lang.String message ) { super . setMessage ( ( message == null ? org.ovirt.engine.ui.common.view.popup.RemoveConfirmationPopupView.constants.removeConfirmationPopupMessage ( ) : message ) ) ; }
public void testSaveUserWithTooManyGroups ( ) { org.ovirt.engine.core.common.businessentities.DbUser tooManyGroupsUser = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; tooManyGroupsUser.setFirstName ( "I" ) ; tooManyGroupsUser.setLastName ( "Have" ) ; tooManyGroupsUser.setLoginName ( "too" ) ; tooManyGroupsUser.setEmail ( "many@redhat.com" ) ; tooManyGroupsUser.setDomain ( "domain" ) ; tooManyGroupsUser.setGroupNames ( "groups" ) ; tooManyGroupsUser.setGroupIds ( org.apache.commons.lang.StringUtils.leftPad ( "groups" , 2048 ) ) ; dao.save ( tooManyGroupsUser ) ; org.ovirt.engine.core.common.businessentities.DbUser result = dao.getByUsername ( tooManyGroupsUser.getLoginName ( ) ) ; org.junit.Assert.assertEquals ( tooManyGroupsUser , result ) ; }
public void getFreeVfNoFreeVf ( ) { freeVfCommon ( 0 , 1 , 2 , 3 , 4 , 5 ) ; org.junit.Assert.assertNull ( networkDeviceHelper.getFreeVf ( nic , null ) ) ; }
public void setMainTabBarOffset ( int left ) { org.ovirt.engine.ui.common.system.HeaderOffsetChangeEvent.fire ( this , left ) ; }
protected org.ovirt.engine.core.vdsbroker.VmAnalyzer getVmAnalyzer ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > pair ) { return new org.ovirt.engine.core.vdsbroker.VmAnalyzer ( pair.getFirst ( ) , pair.getSecond ( ) , this , auditLogDirector ) ; }
private boolean isDummyLun ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun ) { return lun.getLUNId ( ) . startsWith ( BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX ) ; }
protected void executeQueryCommand ( ) { java.lang.Boolean isEmpty = org.ovirt.engine.core.bll.IsClusterEmptyQuery.getDbFacade ( ) . getClusterDao ( ) . getIsEmpty ( org.ovirt.engine.core.bll.IsClusterEmptyQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.IsClusterEmptyQuery.getQueryReturnValue ( ) . setReturnValue ( isEmpty ) ; }
public org.ovirt.engine.core.common.businessentities.VDS getByName ( java.lang.String name ) { return getCallsHandler ( ) . executeRead ( "GetVdsByName" , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vds_name" , name ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; setUpDaoMocks ( ) ; org.mockito.Mockito.doReturn ( "config" ) . when ( getQuery ( ) ) . generateOvfConfig ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
public static org.ovirt.engine.core.dao.PermissionDao getPermissionDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) ; }
void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable , org.ovirt.engine.core.common.AuditLogType logType ) { auditLogDirector.log ( logable , logType ) ; }
public void asConsoleIdInverseOfAsGraphicsType ( java.lang.String consoleId ) { org.junit.jupiter.api.Assertions.assertEquals ( consoleId , org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId ( org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asGraphicsType ( consoleId ) ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.setIsEveryoneSelected ( true ) ; model.setIsMyGroupsSelected ( false ) ; getView ( ) . changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups ( true , false ) ; }
public void updateStatus ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getStatusSqlParameterSource ( id , status ) ; getCallsHandler ( ) . executeModification ( "UpdateVdsDynamicStatus" , parameterSource ) ; }
public java.lang.String [ ] getSensitiveKeys ( ) { return getProperty ( "SENSITIVE_KEYS" ) . split ( "," ) ; }
public void getMaxNumOfThreadsPerCpu ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Integer > aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( 1 ) ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfThreadsPerCpu ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem ) { driver.edit ( getDetailModel ( ) ) ; form.update ( ) ; glusterSwiftPanel.setVisible ( selectedItem.supportsGlusterService ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView ( ) . flush ( ) ; beforeCommandExecuted ( button.getCommand ( ) ) ; button.getCommand ( ) . execute ( ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logoff ( org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return runAction ( VdcActionType.LogoutSession , parameters ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.FILTERED , true ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED ) ) ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( vm.getQuotaId ( ) , vm.getQuotaName ( ) ) ; updateCpuPinningVisibility ( ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getCommandIdsByEntityId ( org.ovirt.engine.core.compat.Guid entityId ) { return commandsRepository.getCommandIdsByEntityId ( entityId ) ; }
org.ovirt.engine.core.dao.network.NetworkDao getNetworkDao ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.network.NetworkDao.class ) ; }
public void testNetworkAttachmentIsSetWhenAttachmentIsNull ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( null ) . networkAttachmentIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS ) ) ; }
public void contextDestroyed ( javax.servlet.ServletContextEvent event ) { org.ovirt.vdsmfake.AppLifecycleListener.log.info ( "Application destroyed." ) ; final org.ovirt.vdsmfake.task.TaskProcessor taskProcessor = org.ovirt.vdsmfake.task.TaskProcessor.getInstance ( ) ; taskProcessor.destroy ( ) ; org.ovirt.vdsmfake.rpc.json.JsonRpcServer.shutdown ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( ) ; } } , externalVms ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { return java.util.Collections.singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.common.VdcObjectType.Storage , org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getActionType ( ) . getActionGroup ( ) ) ) ; }
protected int calcHostScore ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VM vm , boolean countThreadsAsCores ) { int maxScore = ( MaxSchedulerWeight ) - 1 ; return maxScore - ( super . calcHostScore ( vds , vm , countThreadsAsCores ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { return java.util.Objects.equals ( i.getNetworkName ( ) , name ) ; }
public void testGetAllForClusterWithInvalidCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getAllForCluster ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
public void validateFailedWrongPlugStatus ( ) throws java.lang.Exception { mockVmStatusUp ( ) ; mockInterfaceList ( ) ; createDiskWrongPlug ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.HOT_PLUG_DISK_IS_NOT_UNPLUGGED ) ; }
public org.ovirt.engine.core.common.businessentities.TagsType getType ( ) { return this . type ; }
public void onGridTimerStateChange ( org.ovirt.engine.ui.uicommonweb.models.GridTimerStateChangeEvent event ) { onRefresh ( modelTimer.getTimerRefreshStatus ( ) ) ; }
public java.lang.Integer getUtcDiff ( ) { return this . vmDynamic.getutc_diff ( ) ; }
public void validateIsoPrefixWithTrippleSlash ( ) throws java.lang.Exception { java.lang.String initrd = ( org.ovirt.engine.core.bll.RunVmCommandTest.ISO_PREFIX ) + "/" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( initrd , null ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) ) ; }
protected org.ovirt.engine.core.common.businessentities.aaa.DbUser getUserByIdx ( int idx ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; user.setId ( GUIDS [ idx ] ) ; user.setFirstName ( NAMES [ idx ] ) ; user.setLoginName ( NAMES [ idx ] ) ; return user ; }
protected void copyVmDevices ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices ( org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId ( ) , org.ovirt.engine.core.bll.AddVmCommand.getVmId ( ) , newDiskImages , _vmInterfaces , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ) ; }
public int getLowUtilization ( ) { return this . lowUtilization ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { if ( org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.isDataOperationsBySpm ( ) ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.moveImage ; } return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ; }
private void doTest ( java.lang.String value , boolean valid , org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation underTest ) { org.hamcrest.MatcherAssert.assertThat ( underTest.validate ( value ) , org.hamcrest.CoreMatchers.is ( ( valid ? org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok ( ) : org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.fail ( org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidationTest.TEST_VIOLATION_MESSAGE ) ) ) ) ; }
private void setUpGetCertuficateExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVdsCertificateSubjectByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE ) ; }
private void initContent ( ) { expanderContent.getStyle ( ) . setDisplay ( Display.NONE ) ; }
public java.util.HashSet < org.ovirt.engine.core.compat.Guid > getGroupIds ( ) { if ( ( groupIds ) == null ) { groupIds = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( ) ; } return groupIds ; }
public void setEntity ( java.lang.Object value ) { super . setEntity ( value ) ; if ( getIsToSync ( ) . getIsChangable ( ) ) { setBootProtocolsAvailable ( ( ( java.lang.Boolean ) ( value ) ) ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDS object ) { return ( object.getvm_active ( ) ) != null ? object.getvm_active ( ) . toString ( ) : "0" ; }
protected void initDetailModels ( ) { super . initDetailModels ( ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel ( ) ) ; setDetailModels ( list ) ; }
public void shouldCreateAsMuchNumaNodesAsVirtualCores ( ) { vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 2 ) ; org.junit.Assert.assertTrue ( underTest.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
java.lang.String numberValidationNumberLessInvalidReason ( java.lang.String prefixMsg , java.lang.String max ) ;
protected org.ovirt.engine.core.common.action.LockProperties getLockProperties ( ) { org.ovirt.engine.core.common.action.LockProperties lockProperties = _parameters.getLockProperties ( ) ; if ( lockProperties == null ) { lockProperties = applyLockProperties ( getLockingPropertiesSettings ( ) ) ; _parameters.setLockProperties ( lockProperties ) ; } return lockProperties ; }
public void testVmUnderMinNumOfSockets ( ) { setVmCpuValues ( 1 , ( - 2 ) , 1 ) ; org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.bll.validator.VmValidator.validateCpuSockets ( vm.getStaticData ( ) , org.ovirt.engine.core.bll.validator.VmValidatorTest.COMPAT_VERSION_FOR_CPU_SOCKET_TEST ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET ) ) ; }
public void qosCommitmentMissingNicSpeed ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmentNicSetup ( ( ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) / 2 ) , null ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INVALID_INTERFACE_SPEED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) ; }
private boolean ovfOnAnyDomainSupported ( ) { return org.ovirt.engine.core.common.FeatureSupported.ovfStoreOnAnyDomain ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePool ( ) . getCompatibilityVersion ( ) ) ; }
public void setDetailModels ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasEntity < D > > value ) { if ( ( detailModels ) != value ) { detailModels = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.DETAIL_MODELS ) ) ; } }
public void warn ( java.lang.Object msg , java.lang.Throwable t ) { log.warn ( convertToString ( msg ) , t ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { modelCommandInvoker.invokeDefaultCommand ( ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.ListModel model ) { edit ( model , null ) ; }
public void setSpiceDriverVersion ( org.ovirt.engine.core.compat.Version spiceDriverVersion ) { if ( ( this . spiceDriverVersion ) != spiceDriverVersion ) { this . spiceDriverVersion = spiceDriverVersion ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "spiceDriverVersion" ) ) ; } }
public void renameVmdkImage ( ) { java.lang.String alias = org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.renameDiskAlias ( OriginType.VMWARE , "[datastore] Fedora21/Fedora21.vmdk" ) ; org.junit.Assert.assertEquals ( alias , "Fedora21" ) ; }
protected boolean canDoAction ( ) { boolean retValue = super . canDoAction ( ) ; if ( ( org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters ( ) . getActionType ( ) ) == null ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_EMPTY_ACTION_TYPE ) ; retValue = false ; } return retValue ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.StorageDomain > aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public void testVm ( ) { testValidSql ( "Vm: status=Up or status=PoweringUp or status=MigratingTo or status=WaitForLaunch or status=RebootInProgress or status=PoweringDown or status=Paused or status=Unknown sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vms.* FROM vms WHERE ( ( ( ( ( ( ( vms.status = '1' OR vms.status = '2' ) OR vms.status = '6' ) OR vms.status = '9' ) OR vms.status = '10' ) OR vms.status = '16' ) OR vms.status = '4' ) OR vms.status = '7' )) ORDER BY usage_cpu_percent DESC NULLS LAST,vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm:" , "SELECT * FROM ((SELECT distinct vms.* FROM vms ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm: user.name = user1" , "SELECT * FROM ((SELECT distinct vms.* FROM vms LEFT OUTER JOIN vdc_users_with_tags ON vms.vm_guid=vdc_users_with_tags.vm_guid WHERE vdc_users_with_tags.name LIKE user1 ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm: user.name = \"user1\" and user.tag=\"tag1\"" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vdc_users_with_tags ON vms_with_tags.vm_guid=vdc_users_with_tags.vm_guid WHERE ( vdc_users_with_tags.name LIKE user1 AND vdc_users_with_tags.tag_name IN ('tag1','all') ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm: mac=00:1a:4a:d4:53:94" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags WHERE ( vms_with_tags.description LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.free_text_comment LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.guest_cur_user_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.quota_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.run_on_vds_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.storage_pool_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.tag_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vds_group_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vm_fqdn LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vm_host LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vm_ip LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vm_name LIKE '%mac=00:1a:4a:d4:53:94%' OR vms_with_tags.vm_pool_name LIKE '%mac=00:1a:4a:d4:53:94%' ) )) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: SORTBY IP DESC" , "SELECT * FROM ((SELECT distinct vms.* FROM vms ) ORDER BY vm_ip_inet_array DESC NULLS LAST,vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
private static void validateInvalidResult ( org.ovirt.engine.core.bll.ValidationResult validationResult , org.ovirt.engine.core.common.errors.VdcBllMessages message ) { org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateResult ( validationResult , false , message ) ; }
private void addStyles ( ) { keyField.addContentWidgetStyleName ( style.fieldWidth ( ) ) ; valueField.addContentWidgetStyleName ( style.fieldWidth ( ) ) ; valuesField.addContentWidgetStyleName ( style.fieldWidth ( ) ) ; hideLabels ( ) ; }
public void testSeverityAndEventCombo ( ) { java.lang.String expected = "test@example.com" ; filter.clearFilterEntries ( ) ; filter.addFilterEntries ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( ( ( ( ( ( ( "include:normal_message:ERROR(smtp:" + expected ) + ") " ) + "include:error_message:NORMAL(smtp:" ) + expected ) + ") " ) + "exclude:*" ) ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "normal_message" , org.ovirt.engine.core.common.AuditLogSeverity.NORMAL ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "error_message" , org.ovirt.engine.core.common.AuditLogSeverity.ERROR ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( smtp.getEvents ( ) . contains ( ( "error_message-->" + expected ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , smtp.getEvents ( ) . size ( ) ) ; }
public java.lang.Boolean getValue ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return clusterNetworkModel.isMigrationNetwork ( ) ; }
public void addVmToPool ( org.ovirt.engine.core.common.businessentities.VmPoolMap map ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_guid" , map.getVmId ( ) ) . addValue ( "vm_pool_id" , map.getVmPoolId ( ) ) ; getCallsHandler ( ) . executeModification ( "InsertVm_pool_map" , parameterSource ) ; }
public static org.ovirt.engine.core.common.queries.CommandVersionsInfo getCommandVersionsInfo ( org.ovirt.engine.core.common.action.VdcActionType vdcActionType ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedCommandsCompatibilityVersions ) == null ) { return null ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedCommandsCompatibilityVersions.get ( vdcActionType ) ; }
public void addToHistoryEmptyBefore ( ) { org.junit.jupiter.api.Assertions.assertEquals ( java.util.Collections.singletonList ( 12 ) , statistics.addToHistory ( new java.util.ArrayList < java.lang.Integer > ( ) , 12 , 100 ) ) ; }
void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( command != null ) { command.execute ( ) ; } }
protected void executeVmCommand ( ) { removeVmInSpm ( ) ; removeDiskImages ( ) ; removeMemoryImages ( ) ; org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.setSucceeded ( true ) ; }
private void updateQuotaCache ( ) { if ( wasQuotaEnforcementChanged ( ) ) { org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getQuotaManager ( ) . removeStoragePoolFromCache ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool ( ) . getId ( ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllWithQuery ( java.lang.String query ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = jdbcTemplate.query ( query , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance ) ; return uniteAgents ( vdsList ) ; }
public void testValidModifiedBondsFailsWhenReferencingExistingNonBondInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; org.ovirt.engine.core.bll.ValidationResult notABondValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_IS_NOT_BOND , org.ovirt.engine.core.bll.validator.HostInterfaceValidator.VAR_NETWORK_INTERFACE_IS_NOT_BOND_ENTITY , bond.getName ( ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , notABondValidationResult , notABondValidationResult , ValidationResult.VALID ) ; }
private org.ovirt.engine.core.common.businessentities.VDSStatus getStatusOnReboot ( ) { if ( org.ovirt.engine.core.bll.UpgradeOvirtNodeInternalCommand.getParameters ( ) . getActivateHost ( ) ) { return org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ; } return VDSStatus.Maintenance.equals ( vdsInitialStatus ) ? org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance : org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPool ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . save ( vmPool ) ; setActionReturnValue ( vmPool.getVmPoolId ( ) ) ; org.ovirt.engine.core.bll.AddVmPoolCommand.setSucceeded ( true ) ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasLowSpace ( ) { org.mockito.Mockito.when ( storageDomainValidator.isDomainWithinThresholds ( ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.getPredicate ( memoryDisks ) . eval ( storageDomain ) ) ; }
void setSessionId ( java.lang.String sessionId , boolean storeInHttpSession ) { if ( storeInHttpSession ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . storeInHttpSession ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_KEY , sessionId ) ; } this . restApiSessionId = sessionId ; }
java.util.Map < org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > , java.util.Set < java.lang.String > > getDiskHotpluggableInterfacesMap ( ) ;
public void setCompensationContext ( org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { context.withCompensationContext ( compensationContext ) ; }
public void UpdateDynamicData ( org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDynamicDao ( ) . update ( dynamicData ) ; }
protected void endSuccessfully ( ) { org.ovirt.engine.core.bll.RemoveImageCommand.setSucceeded ( true ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present , java.lang.String width ) { table.ensureColumnPresent ( column , headerText , present , width ) ; tableHeader.ensureColumnPresent ( column , headerText , present , width ) ; }
protected void init ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel model ) { this . model = model ; widgets.clear ( ) ; super . init ( model ) ; if ( ! ( enabled ) ) { removeWidget ( widgets.getLast ( ) ) ; } }
private void cancel ( ) { org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel.setWindow ( null ) ; }
private void initPanels ( ) { usedFilterPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitListPanel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.FILTER , true ) ; unusedFilterPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitListPanel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.FILTER , false ) ; usedFunctionPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitListPanel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.FunctionPolicyUnitPanel.FUNCTION , true ) ; unusedFunctionPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitListPanel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.FunctionPolicyUnitPanel.FUNCTION , false ) ; }
protected boolean isNetworkInCluster ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.compat.Guid clusterId ) { return getNetworkHelper ( ) . isNetworkInCluster ( network , clusterId ) ; }
public java.util.concurrent.Future < java.util.Map < java.lang.String , java.lang.Object > > setupNetworks ( java.util.Map networks , java.util.Map bonds , java.util.Map options , boolean isPolicyReset ) { return vdsServer.futureSetupNetworks ( networks , bonds , options ) ; }
public void defaultClusterInLocalFs ( ) { newDefaultManagementNetworkFound ( ) ; mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultClusterID , org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_CLUSTER_ID ) ; createCommandWithDefaultCluster ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; setupCpu ( ) ; architectureIsUpdatable ( ) ; validateFailedWithReason ( EngineMessage.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
public org.ovirt.vdsmfake.domain.Host getActiveHostByName ( java.lang.String serverName ) { return org.ovirt.vdsmfake.domain.VdsmManager.getInstance ( ) . getHostByName ( serverName ) ; }
public boolean isServerSslEnabled ( ) { return this . mVdsStatic.isServerSslEnabled ( ) ; }
org.ovirt.engine.core.common.businessentities.Disk getVmBootActiveDisk ( org.ovirt.engine.core.compat.Guid vmId ) ;
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( "WidgetModel" . equals ( propName ) ) { modelBoundWidgetChange ( ) ; } }
private void isAutoAssign_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( java.lang.Boolean ) ( getIsAutoAssign ( ) . getEntity ( ) ) ) == false ) { getDefaultHost ( ) . setIsChangable ( true ) ; } }
protected java.util.concurrent.Callable < org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult > createTask ( final org.ovirt.engine.core.bll.pm.FenceActionExecutor executor , final org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction ) { return ( ) -> executor.fence ( fenceAction ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.Disk selectedItem ) { driver.edit ( getDetailModel ( ) ) ; formBuilder.update ( getDetailModel ( ) ) ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeProfileStats object ) { return object.getName ( ) ; }
protected boolean isStoragePoolUnique ( java.lang.String storagePoolName ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > sps = storagePoolDao.getByName ( storagePoolName , true ) ; return ( sps == null ) || ( sps.isEmpty ( ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { setTitle ( ( object.isBoot ( ) ? getDefaultTitle ( ) : null ) ) ; return object.isBoot ( ) ? getDefaultImage ( ) : null ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { return getBackend ( ) . runInternalMultipleActions ( actionType , parameters , context.clone ( ) ) ; }
private org.ovirt.engine.core.common.queries.VdcQueryParametersBase getProductVersionParams ( ) { return org.ovirt.engine.api.restapi.test.util.TestHelper.eqQueryParams ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ 0 ] , new java.lang.Object [ 0 ] ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getMultiBrickVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume ( volumeId ) ; volume.setStatus ( GlusterStatus.UP ) ; volume.setBricks ( getBricks ( volumeId , 2 ) ) ; volume.setClusterId ( clusterId ) ; return volume ; }
protected boolean isVirtioScsiEnabled ( ) { java.lang.Boolean virtioScsiEnabled = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . isVirtioScsiEnabled ( ) ; return virtioScsiEnabled != null ? virtioScsiEnabled : isVirtioScsiEnabledForVm ( getVmId ( ) ) ; }
public void validateFailureOnMovingCinderDisk ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) , null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void testGetEntityNameByIdAndTypeForTag ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = tagDao.get ( org.ovirt.engine.core.dao.EntityDaoImplTest.TAG_ID ) ; org.junit.jupiter.api.Assertions.assertNotNull ( tag ) ; java.lang.String name = tag.getTagName ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( name , dao.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.EntityDaoImplTest.TAG_ID , VdcObjectType.Tags ) ) ; }
public void onEngineSessionRefreshed ( org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent event ) { if ( ( ( restApiSessionId ) != null ) && ( ( ( restApiLoginTimePlusHardLimit ) == null ) || ( new java.util.Date ( ) . before ( restApiLoginTimePlusHardLimit ) ) ) ) { refreshRestApiSession = true ; } }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { if ( selectionModel.getSelectedList ( ) . isEmpty ( ) ) { scrollOffset = 0 ; } else { updateScrollPosition ( ) ; } enforceScrollPosition ( ) ; }
public java.lang.Long getSwapTotal ( ) { return this . mVdsStatistics.getSwapTotal ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; context.addVDSGroupReturnValue = returnValue ; prepare3 ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) ;
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ; tempVar.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , tempVar , new org.ovirt.engine.ui.uicommonweb.models.datacenters.SetItemsAsyncQuery ( ) ) ; }
protected boolean checkCanBeMoveInVm ( ) { return validate ( createDiskValidator ( ) . isDiskPluggedToVmsThatAreNotDown ( false , getVmsWithVmDeviceInfoForDiskId ( ) ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . remove ( org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.setSucceeded ( true ) ; }
public void testPreImportedHostedEngineLunDiskRemove ( ) { disk = new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ; setupDisk ( ) ; disk.setDiskAlias ( StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS ) ; org.mockito.Mockito.doReturn ( disk ) . when ( cmd ) . getDisk ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public java.lang.Object getQueryableId ( ) { return getId ( ) ; }
protected org.ovirt.engine.core.common.businessentities.InstanceType getInstanceType ( ) { if ( ( ( instanceType ) == null ) && ( ( getInstanceTypeId ( ) ) != null ) ) { instanceType = org.ovirt.engine.core.bll.VmManagementCommandBase.getVmTemplateDao ( ) . getInstanceType ( getInstanceTypeId ( ) ) ; } return instanceType ; }
public void update ( org.ovirt.engine.core.common.businessentities.Bookmark bookmark ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkSqlParameterSource ( bookmark ) ; getCallsHandler ( ) . executeModification ( "UpdateBookmark" , parameterSource ) ; }
public void setTotalMigrationTime ( java.util.Date totalMigrationTime ) { if ( ( this . totalMigrationTime ) == null ) { this . totalMigrationTime = totalMigrationTime ; } }
protected org.ovirt.engine.core.bll.CommandBase < ? > getCommand ( org.ovirt.engine.core.compat.Guid cmdId ) { return commandCoordinatorUtil.retrieveCommand ( cmdId ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel < T > setIsChangeable ( boolean value ) { if ( ! ( isVmAttachedToPool ( ) ) ) { super . setIsChangeable ( value ) ; } return this ; }
protected org.codehaus.jackson.node.ObjectNode getEngineSessionTimeoutObject ( java.lang.Integer engineSessionTimeout ) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode ( ) ; obj.put ( "value" , java.lang.String.valueOf ( engineSessionTimeout ) ) ; return obj ; }
public void edit ( T model ) { profilesEditor.edit ( model.getProfiles ( ) ) ; }
public void testGetAllOfTypeWithUnrepresentedType ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao.getAllOfType ( VDSType.oVirtVintageNode ) ; org.ovirt.engine.core.dao.VdsDaoTest.assertIncorrectGetResult ( result ) ; }
private void onAssignTags ( ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel ) ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow ( ) ) ) ; getAttachedTagsToSelectedVMs ( model ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { revealStorageView ( disk ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getNewMasterStorageDomain ( ) { if ( ( newMasterStorageDomainId ) == null ) { getNewMasterStorageDomainId ( ) ; } return newMasterStorageDomain ; }
public java.lang.String getExitMessage ( ) { return this . vmDynamic.getExitMessage ( ) ; }
public boolean isSplitted ( ) { return ( ( vmNumaNode.getVdsNumaNodeList ( ) ) != null ) && ( ( vmNumaNode.getVdsNumaNodeList ( ) . size ( ) ) > 1 ) ; }
public void testWriteFileToStream_IOException ( ) { java.io.File file = new java.io.File ( "/doesnotexist/iamprettysure" ) ; java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream ( ) ; org.junit.jupiter.api.Assertions.assertThrows ( java.io.IOException.class , ( ) -> org.ovirt.engine.core.utils.servlet.ServletUtils.writeFileToStream ( out , file ) ) ; }
public void stopRefresh ( ) { super . stopRefresh ( ) ; timer.stop ( ) ; }
public void testSchedule ( ) throws java.lang.Exception { org.junit.Assert.assertNotNull ( schedulingManager.get ( ) ) ; org.mockito.Mockito.verify ( schedulingManager.get ( ) ) . init ( ) ; org.junit.Assert.assertNotNull ( schedulingManager.get ( ) . getDefaultClusterPolicy ( ) ) ; }
public void setSystemTreeSelectedItem ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel value ) { if ( ( systemTreeSelectedItem ) != value ) { systemTreeSelectedItem = value ; onSystemTreeSelectedItemChanged ( ) ; } }
protected boolean isStorageDomainSpaceWithinThresholds ( ) { return validate ( new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) ) . isDomainWithinThresholds ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.getOptions ( ) . setWanColorDepth ( ( ( org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth ) ( returnValue ) ) ) ; }
public void defaultClusterInLocalFs ( ) { prepareManagementNetworkMocks ( ) ; mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.DEFAULT_VDS_GROUP_ID ) ; createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; setupCpu ( ) ; allQueriesForVms ( ) ; architectureIsUpdatable ( ) ; canDoActionFailedWithReason ( EngineMessage.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
public final void setUser ( java.lang.String sessionId , org.ovirt.engine.core.common.businessentities.DbUser user ) { setData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.USER_PARAMETER_NAME , user ) ; }
public void testIsBalloonEnabled ( ) throws java.lang.Exception { org.junit.Assert.assertTrue ( OsRepositoryImpl.INSTANCE.isBalloonEnabled ( 777 , null ) ) ; org.junit.Assert.assertTrue ( OsRepositoryImpl.INSTANCE.getBalloonSupportMap ( ) . get ( 777 ) . get ( null ) ) ; }
private static int compNonDigitSequence ( java.lang.String seq1 , java.lang.String seq2 , boolean caseSensitive ) { return java.lang.Integer.signum ( ( caseSensitive ? seq1.compareTo ( seq2 ) : seq1.compareToIgnoreCase ( seq2 ) ) ) ; }
public void validate_vmNotExists_Test ( ) { org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( vmStaticDao ) . getByIds ( org.mockito.ArgumentMatchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INVALID_ENTITY_FOR_AFFINITY_GROUP ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.SchedulingPolicy schedulingPolicy ) { validateParameters ( schedulingPolicy , "name" ) ; return performCreate ( ActionType.AddClusterPolicy , new org.ovirt.engine.core.common.scheduling.parameters.ClusterPolicyCRUDParameters ( null , map ( schedulingPolicy ) ) , queryIdResolver ) ; }
public void validateNoDirectLunIdAndInvalidStoragePool ( ) { org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateStoragePool ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper ( org.ovirt.engine.core.common.action.SetupNetworksParameters params ) { return createHelper ( params , Version.v3_5 ) ; }
public void setGuestAgentStatus ( org.ovirt.engine.core.common.businessentities.GuestAgentStatus status ) { vmDynamic.setGuestAgentStatus ( status ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel ) ( target ) ) ; boolean isNameUnique = ( ( java.lang.Boolean ) ( returnValue ) ) ; templateListModel.postNameUniqueCheck ( isNameUnique ) ; }
public java.lang.String getCshMappingUrl ( java.lang.String application ) { return ( ( ( ( org.ovirt.engine.ui.frontend.utils.FrontendUrlUtils.getRootURL ( ) ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.CSH_ROOT ) ) + "/" ) + application ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.JSON ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.DbGroup group ) { if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( group.getId ( ) ) ) { group.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } insertOrUpdate ( group , "InsertGroup" ) ; }
public void testStorage ( ) { testValidSql ( "Storage: " , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search ) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Storage: datacenter = Default" , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search WHERE Default LIKE ANY(string_to_array(storage_domains_for_search.storage_pool_name::text, ','))) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Storage: host.name = fake1" , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search LEFT OUTER JOIN vds_with_tags ON storage_domains_for_search.id=vds_with_tags.storage_id WHERE (vds_with_tags.vds_name IS NULL OR vds_with_tags.vds_name LIKE fake1) ) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
private boolean isVnicProfilePermitted ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.common.businessentities.network.VnicProfile profile , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { return ( org.ovirt.engine.core.bll.ImportVmCommand.getPermissionDAO ( ) . getEntityPermissions ( userId , actionGroup , profile.getId ( ) , VdcObjectType.VnicProfile ) ) != null ; }
public void validPropertyUnknownDeviceType ( ) { org.ovirt.engine.core.utils.customprop.DevicePropertiesUtils utils = mockDevicePropertiesUtils ( ) ; java.util.List < org.ovirt.engine.core.common.utils.customprop.ValidationError > errors = utils.validateProperties ( Version.v4_0 , VmDeviceGeneralType.UNKNOWN , utils.convertProperties ( "speed=10;duplex=half" ) ) ; org.ovirt.engine.core.common.utils.customprop.PropertiesUtilsTestHelper.validateFailure ( errors , ValidationFailureReason.INVALID_DEVICE_TYPE ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return org.ovirt.engine.ui.webadmin.section.main.presenter.tab.DetailTabDataIndex.PROVIDER_SECRET ; }
public void loadAttachableDisks ( org.ovirt.engine.core.common.businessentities.storage.Disk prevSelected ) { doLoadAttachableDisks ( new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel.InstanceImageGetDisksCallback ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE , prevSelected ) , new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel.InstanceImageGetDisksCallback ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN , prevSelected ) , new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel.InstanceImageGetDisksCallback ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER , prevSelected ) ) ; }
public void tJava_3_error ( java.lang.Exception exception , java.lang.String errorComponent , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws ovirt_engine_dwh.parallelrun_3_1.ParallelRun.TalendException { end_Hash.put ( "tJava_3" , java.lang.System.currentTimeMillis ( ) ) ; tJava_3_onSubJobError ( exception , errorComponent , globalMap ) ; }
public void setUp ( ) throws java.lang.Exception { this . macPoolValidator = createMacPoolValidator ( macPool ) ; org.mockito.Mockito.when ( dbFacadeMock.getMacPoolDao ( ) ) . thenReturn ( macPoolDaoMock ) ; org.mockito.Mockito.when ( dbFacadeMock.getStoragePoolDao ( ) ) . thenReturn ( storagePoolDao ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( ) ; }
public void testValidName ( ) { prepareVmToPassValidate ( ) ; mockVmValidator ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public static boolean bigDecimalEqual ( java.math.BigDecimal a , java.math.BigDecimal b ) { return ( a == b ) || ( ( ( a != null ) && ( b != null ) ) && ( ( a.compareTo ( b ) ) == 0 ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmDisks ( ) { return vmDisks ; }
protected void storageType_SelectedItemChanged ( ) { updateCurrentStorageItem ( ) ; if ( ( getCurrentStorageItem ( ) ) != null ) { updateFormat ( ) ; updateHost ( ) ; } updateWipeAfterDelete ( ) ; }
private void nullifyInternalProxies ( ) { if ( ( privatemIrsProxy ) != null ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.shutDownConnection ( ( ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsServerWrapper ) ( privatemIrsProxy ) ) . getHttpClient ( ) ) ; } privatemCurrentIrsHost = null ; privatemIrsProxy = null ; mCurrentVdsId = null ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsUsingProfile ( ) { return vmDao.getAllForCpuProfiles ( java.util.Collections.singletonList ( getProfile ( ) . getId ( ) ) ) ; }
public void testAddGroupWithExplicitDirectoryName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": allnames=" ) + ( NAMES [ 0 ] ) ) , SearchType.AdGroup , getDirectoryGroup ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddGroup , org.ovirt.engine.core.common.action.DirectoryIdParameters.class , new java.lang.String [ ] { "Directory" , "Id" } , new java.lang.Object [ ] { DOMAIN , GUIDS [ 0 ] } , true , true , null , VdcQueryType.GetDbGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( NAMES [ 0 ] ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel ) ( result.getState ( ) ) ) ; diskModel.stopProgress ( ) ; diskModel.cancel ( ) ; postSave ( ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain createStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageFormatType formatType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setStorageFormat ( formatType ) ; sd.setStorageType ( storageType ) ; return sd ; }
private org.ovirt.engine.core.bll.network.cluster.UpdateNetworkClusterValidator createNetworkClusterValidator ( ) { return new org.ovirt.engine.core.bll.network.cluster.UpdateNetworkClusterValidator ( interfaceDao , networkDao , vdsDao , org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkCluster ( ) , getOldNetworkCluster ( ) ) ; }
void initComboBoxEditors ( ) { networkListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < java.lang.String > ( ) ; networkNameEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxEditor ( ) ; networkComboBox = new org.ovirt.engine.ui.common.widget.ComboBox < java.lang.String > ( networkListEditor , networkNameEditor ) ; }
public void moveShareableDiskToGlusterDomain ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS ) ; }
protected void syncSearch ( ) { super . syncSearch ( QueryType.GetAllMacPools , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; }
private static void addOrEmpty ( java.util.Map < java.lang.String , java.lang.String > map , java.lang.String what , java.lang.String name ) { map.put ( name , ( org.apache.commons.lang.StringUtils.isEmpty ( what ) ? "" : what ) ) ; }
public void unsupportedVersion ( ) { cmd.getStoragePool ( ) . setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_2_0 ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , org.ovirt.engine.core.bll.utils.VersionSupport.getUnsupportedVersionMessage ( ) ) ; }
public boolean isOlderThan ( final org.ovirt.engine.core.bll.scheduling.OS os ) { return getVersion ( ) . less ( os.getVersion ( ) ) ; }
public void getFilteredWithPermissionsNoPermissions ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_SNAPSHOT_ID , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNull ( snapshot ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , java.lang.String device ) { return getVmDeviceByVmIdTypeAndDevice ( vmId , type , device , null , false ) ; }
protected org.ovirt.engine.core.bll.aaa.SessionDataContainer getSessionDataContainer ( ) { return sessionDataContainer ; }
private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap getStoragePoolIsoMap ( ) { return org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolIsoMapDao ( ) . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolId ( ) ) ) ; }
public void removeContentWidgetStyleName ( java.lang.String styleName ) { getContentWidget ( ) . asWidget ( ) . removeStyleName ( styleName ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > searchImageTypes ( ) { return genericSearch ( vmTemplateDao , true ) ; }
protected java.util.Collection < org.ovirt.engine.core.compat.Guid > getStorageDomainsIds ( ) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds ( getSourceImages ( ) ) ; }
public void setCpuSockets ( java.lang.Integer value ) { vdsDynamic.setCpuSockets ( value ) ; }
public void testMapAutoconf ( ) { org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map ( BootProtocol.AUTOCONF ) ) ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel prepareFcpStorageForEdit ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel ( ) ; model.setRole ( storage.getStorageDomainType ( ) ) ; prepareSanStorageForEdit ( model ) ; return model ; }
private static java.util.List < java.lang.String > translateError ( org.ovirt.engine.core.common.action.VdcReturnValueBase error ) { return org.ovirt.engine.ui.frontend.Frontend.getAppErrorsTranslator ( ) . translateErrorText ( error.getCanDoActionMessages ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByVms ( ) { return networkNotUsed ( getVms ( ) , VdcBllMessages.VAR__ENTITIES__VMS ) ; }
protected void onAfterRequestDeserialized ( com.google.gwt.user.server.rpc.RPCRequest rpcRequest ) { if ( shouldValidateXsrfToken ( rpcRequest.getMethod ( ) ) ) { validateXsrfToken ( extractTokenFromRequest ( ) , rpcRequest.getMethod ( ) ) ; } }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( java.lang.String taskKey ) { return super . persistAsyncTaskPlaceHolder ( getActionType ( ) , taskKey ) ; }
private java.lang.String getEnumValueLine ( org.ovirt.api.metamodel.concepts.EnumValue enumValue , boolean lastValue ) { java.lang.String value = java.lang.String.join ( "_" , enumValue.getName ( ) . getWords ( ) ) . toUpperCase ( ) ; return value + ( lastValue ? ";" : "," ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { assertEquals ( EXTERNAL_IDS [ index ] . toHex ( ) , model.getExternalId ( ) ) ; assertEquals ( NAMES [ index ] , model.getUserName ( ) ) ; }
private void setGateway ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > gateway ) { this . gateway = gateway ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.LUN ) ; revealStorageView ( disk ) ; revealDiskPanel ( disk ) ; }
public static org.ovirt.engine.api.model.NetworkStatus map ( org.ovirt.engine.api.model.NetworkStatus modelStatus , org.ovirt.engine.api.model.NetworkStatus template ) { if ( modelStatus == null ) { return null ; } else { switch ( modelStatus ) { case NON_OPERATIONAL : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.NetworkStatus ; case OPERATIONAL : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.network.NetworkStatus ; default : return null ; } } }
private static java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceSpecParams ( vmBase ) ; }
public void nullHostsAreNotMismatched ( ) { org.hamcrest.MatcherAssert.assertThat ( getQuery ( ) . isDisplayAddressPartiallyOverridden ( null ) , org.hamcrest.core.Is.is ( false ) ) ; }
public void testGetPeersWithWrongPassword ( ) throws javax.naming.AuthenticationException { glusterUtil.getPeers ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.WRONG_PASSWORD ) ; }
private void populateVmData ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( vm ) ; org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB ( vm.getStaticData ( ) , true ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices ( vm.getStaticData ( ) ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.network.NetworkView value ) { if ( ( value == null ) || ( ! ( value.equals ( getEntity ( ) ) ) ) ) { super . setEntity ( value ) ; } }
public void testListAllDetails ( ) throws java.lang.Exception { setUpBricksQueryExpectations ( null ) ; setUpGetEntityExpectationsAllContent ( false ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionsUriExpectations ( ) ; collection.setUriInfo ( uriInfo ) ; control.replay ( ) ; verifyCollection ( getCollection ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Provider < ? > getProvider ( ) { if ( ( provider ) == null ) { provider = providerDao.get ( getSubnet ( ) . getExternalNetwork ( ) . getProviderId ( ) ) ; } return provider ; }
private boolean checkIsDomainLocked ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap ) { if ( ( ( domainMap.getStatus ( ) ) != null ) && ( domainMap.getStatus ( ) . isStorageDomainInProcess ( ) ) ) { addInvalidSDStatusMessage ( StorageDomainStatus.Locked ) ; return true ; } return false ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetErrataForEngine , org.ovirt.engine.core.common.queries.GetErrataCountsParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , getErrataData ( ) , failure ) ; }
public void failCreateMoreNumaNodesThanVirtualCoresWithVmFromDb ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 3 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "iface" , getIface ( ) ) . append ( "index" , getIndex ( ) ) . append ( "diskPath" , getDiskPath ( ) ) ; }
public void validateGenerateVmNameWithoutMask1 ( ) { org.ovirt.engine.core.utils.NameForVmInPoolGenerator generator = createNameForVmInPoolGenerator ( "mypool" ) ; org.junit.jupiter.api.Assertions.assertEquals ( "mypool-1" , generator.generateVmName ( ) ) ; }
protected void syncSearch ( ) { super . syncSearch ( ) ; doDataCenterSearch ( ) ; doClusterSearch ( ) ; doHostSearch ( ) ; doVolumeSearch ( ) ; doProviderSearch ( ) ; getTimer ( ) . stop ( ) ; }
public void versionSupported ( ) { org.mockito.Mockito.when ( cluster.getCompatibilityVersion ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.ClusterValidatorTest.SUPPORTED_VERSION ) ; org.junit.Assert.assertThat ( validator.versionSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void statusNotSupportedForHostUpgradeInternal ( ) { org.mockito.Mockito.when ( host.getStatus ( ) ) . thenReturn ( VDSStatus.Unassigned ) ; org.junit.Assert.assertThat ( validator.statusSupportedForHostUpgradeInternal ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.CANNOT_UPGRADE_HOST_STATUS_ILLEGAL ) ) ; }
protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( ( ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getAction ( ) ) == ( org.ovirt.engine.core.common.action.PlugAction.PLUG ) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__ACTIVATE : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__DEACTIVATE ) ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__INTERFACE ) ; }
public org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map > getAllLUNStorageServerConnection ( ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromLUN_storage_server_connection_map" , org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAODbFacadeImpl.StorageServerConnectionLunMapRowMapper.instance , parameterSource ) ; }
public void execute ( ) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire ( nameEditor.asValueBox ( ) , nameEditor.asValueBox ( ) . getValue ( ) ) ; }
public void setDisplayType ( org.ovirt.engine.core.common.businessentities.DisplayType value ) { this . displayType = value ; }
public com.google.gwt.event.dom.client.HasClickHandlers getFeedbackLink ( ) { return feedbackImageLabel ; }
public boolean isClientWindowsExplorer ( ) { return ( isClientWindows ( ) ) && ( clientBrowserType ( ) . equalsIgnoreCase ( "Explorer" ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > filterDataCenter ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > source ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( source , new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterStatusPredicate ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational ) . negate ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { if ( ( getVds ( ) . getVdsGroupCompatibilityVersion ( ) . compareTo ( Version.v3_3 ) ) >= 0 ) { status = getBroker ( ) . setMOMPolicyParameters ( initDeviceStructure ( ) ) ; proceedProxyReturnValue ( ) ; } }
java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > getAllForCluster ( org.ovirt.engine.core.compat.Guid cluster ) ;
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.storage_domains getForStoragePool ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.NGuid storagepool ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic staticPart = staticDAO.getForStoragePool ( id , storagepool ) ; if ( staticPart != null ) { return createDomain ( staticPart ) ; } return null ; }
public com.google.gwt.event.dom.client.HasClickHandlers getCloseIconButton ( ) { return null ; }
public void rerun ( ) { decreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmToServerCommand.getDestinationVds ( ) . getId ( ) ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.determineMigrationFailureForAuditLog ( ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.log ( ) ; }
public void retrieveFromHttpSession ( final java.lang.String key , final org.ovirt.engine.ui.frontend.communication.StorageCallback callback ) { getOperationManager ( ) . retrieveFromHttpSession ( key , callback ) ; }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue ( org.ovirt.engine.core.common.errors.VdcBllMessages errorMessage ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue ( ) ; returnValue.setSucceeded ( false ) ; returnValue.setExceptionString ( errorMessage.toString ( ) ) ; return returnValue ; }
public void setLUNId ( java.lang.String value ) { this . id = value ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack getCallback ( ) { if ( isLiveMerge ( ) ) { return new org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommandCallback ( ) ; } else { return null ; } }
public void saveAsyncTaskToDb ( final org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask ) { coCoAsyncTaskHelper.saveAsyncTaskToDb ( asyncTask ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( object ) ) . getTemplate ( ) . getName ( ) ; }
public void passthroughProfileContainsFilterId ( ) { passthroughProfileContainsSupportedPropertiesTest ( true , false , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.INVALID_NETWORK_FILTER_ID ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkIsSet ( ) { return ( network ) == null ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void executeQueryCommand ( ) { setReturnValue ( ( ( permissionDao.getForRoleAndAdElementAndObject ( PredefinedRoles.SUPER_USER.getId ( ) , org.ovirt.engine.core.bll.IsUserApplicationContainerManagerQuery.getUser ( ) . getId ( ) , MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID ) ) != null ) ) ; }
private static < T extends org.ovirt.engine.core.common.businessentities.VmBase > java.lang.String getAddress ( T entity , final org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.VmDevice device = entity.getManagedDeviceMap ( ) . get ( id ) ; if ( device != null ) return device.getAddress ( ) ; else return org.apache.commons.lang.StringUtils.EMPTY ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Image model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.searchbackend.ClusterConditionFieldAutoCompleter.ARCHITECTURE.equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ArchitectureType.class ) ; } return retval ; }
protected org.ovirt.engine.core.common.businessentities.aaa.LdapUser populateUserData ( org.ovirt.engine.core.common.businessentities.aaa.LdapUser user , java.lang.String domain ) { return populateUserData ( user , domain , true ) ; }
public void testValidateBondOptionsForNewAttachementWithNonVmNetwork ( ) { validateValidBondsForAllBondModes ( true , false , true , false ) ; }
private static boolean shouldProcessVdsDomainReport ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( vds.getVdsGroupSupportsVirtService ( ) ) && ( ( StoragePoolDomainHelper.vdsDomainsActiveMonitoringStatus.contains ( vds.getStatus ( ) ) ) || ( StoragePoolDomainHelper.vdsDomainsMaintenanceMonitoringStatus.contains ( vds.getStatus ( ) ) ) ) ; }
public void cleanup ( ) { W contentWidget = getContentWidget ( ) ; if ( contentWidget instanceof org.ovirt.engine.ui.uicommonweb.HasCleanup ) { ( ( org.ovirt.engine.ui.uicommonweb.HasCleanup ) ( contentWidget ) ) . cleanup ( ) ; } contentWidgetContainerTooltip.cleanup ( ) ; }
protected boolean isAdditionalConsoleAvailable ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel currentItem ) { return ( currentItem.getAdditionalConsoleModel ( ) ) != null ; }
public org.ovirt.engineextensions.aaa.ldap.ASN1OctetString decode ( java.lang.String value , org.ovirt.engineextensions.aaa.ldap.MapProperties props ) { return format.decode ( value , props ) ; }
public static void removeSmartcardDevices ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeVmDevices ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.getSmartcardDevices ( vmId ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterStoragePresenter.constants.dataCenterStorageSubTabLabel ( ) , 0 ) ; }
public void setLockInfo ( org.ovirt.engine.core.common.locks.LockInfo lockInfo ) { this . lockInfo = lockInfo ; }
public java.lang.String getTooltip ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate ( value.getOsType ( ) ) ; }
public java.lang.String evaluate ( org.ovirt.engine.sdk.generator.java.ParameterData parameter ) { set ( "headerName" , parameter.getName ( ) ) ; set ( "javaName" , parameter.getJavaName ( ) ) ; return evaluate ( ) ; }
java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > > getVmNumaNodeInfoByClusterIdAsMap ( org.ovirt.engine.core.compat.Guid vdsGroupId ) ;
public java.lang.Void runInTransaction ( ) { getDbFacade ( ) . getVdsNumaNodeDAO ( ) . massUpdateNumaNodeStatistics ( vdsNumaNodesToSave ) ; return null ; }
public void getNonexistentVariable ( ) { org.junit.jupiter.api.Assertions.assertNull ( dao.get ( DwhHistoryTimekeepingVariable.UNDEFINED ) ) ; }
public void setTicketValiditySeconds ( int ticketValiditySeconds ) { this . consoleOptions.setTicketValiditySeconds ( ticketValiditySeconds ) ; }
private void moveToNextProfile ( javax.servlet.http.HttpSession session , java.util.Deque < java.lang.String > stack ) { stack.pop ( ) ; session.setAttribute ( org.ovirt.engine.core.aaa.AuthenticationFilter.STACK_ATTR , stack ) ; }
protected void handleError ( ) { addCanDoActionMessage ( VdcBllMessages.VDS_FENCE_OPERATION_FAILED ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__HOST ) ; addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__START ) ; log.error ( "Failed to run StartVdsCommand on host '{}'" , org.ovirt.engine.core.bll.StartVdsCommand.getVdsName ( ) ) ; }
public javax.ws.rs.core.Response clear ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) ; params.setJobId ( guid ) ; return doAction ( ActionType.ClearExternalJob , params , action ) ; }
private void changeStatus ( org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters parameters , org.ovirt.engine.core.common.businessentities.VM curVm ) { if ( org.ovirt.engine.core.vdsbroker.DestroyVmVDSCommand.getParameters ( ) . getVdsId ( ) . equals ( curVm.getRunOnVds ( ) ) ) { resourceManager.InternalSetVmStatus ( curVm , VMStatus.PoweringDown ) ; } }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onSucceeded ( cmdId , childCmdIds ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
void formatValue ( java.lang.String fieldName , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > pair , boolean caseSensitive ) ;
public org.ovirt.engine.core.compat.Guid getMigrationPolicyId ( ) { return vmStatic.getMigrationPolicyId ( ) ; }
private org.ovirt.engine.core.common.businessentities.Provider < ? > getHostProvider ( org.ovirt.engine.core.common.businessentities.VdsStatic host ) { return ( host.getHostProviderId ( ) ) == null ? null : providerDao.get ( host.getHostProviderId ( ) ) ; }
public void testGetByIdNotAllNetworksAllowed ( ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig result = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_1 , result.getId ( ) ) ; checkNetworksAndLabels ( result , 2 , 2 ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . hideRoleSelection ( java.lang.Boolean.parseBoolean ( model.getIsRoleListHiddenModel ( ) . getEntity ( ) . toString ( ) ) ) ; }
private void mockNetworkDao ( final org.ovirt.engine.core.dao.network.NetworkViewDao networkViewDao ) { org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter search = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter ( false ) ; org.mockito.Mockito.when ( networkViewDao.getAllWithQuery ( org.mockito.Matchers.matches ( org.ovirt.engine.core.bll.SearchQueryTest.getNetworkRegexString ( search ) ) ) ) . thenReturn ( networkResultList ) ; }
public int getNumOfCpus ( ) { return ( this . getCpuPerSocket ( ) ) * ( this . getNumOfSockets ( ) ) ; }
public void recover ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { startHostsWithPMInReboot ( hosts ) ; recoverKdumpingHosts ( hosts ) ; }
protected void updateStatistics ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > allRunningOnOrMigratingToVds ) { if ( allRunningOnOrMigratingToVds != null ) { allRunningOnOrMigratingToVds.forEach ( vmHandler :: updateVmStatistics ) ; } }
public void testValidateVdsNotFound ( ) { org.mockito.Mockito.when ( vdsDao.getAllForClusterWithStatus ( groupId , VDSStatus.Up ) ) . thenReturn ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > emptyList ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL ) ; }
private void addInlineDisks ( org.ovirt.engine.api.model.Vm vm ) { org.ovirt.engine.core.compat.Guid vmId = asGuid ( vm.getId ( ) ) ; org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentsResource disksAttachmentsResource = inject ( new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentsResource ( vmId ) ) ; org.ovirt.engine.api.model.DiskAttachments diskAttachments = disksAttachmentsResource.list ( ) ; vm.setDiskAttachments ( diskAttachments ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . propertyName ; if ( propName.equals ( "IsValid" ) ) { onIsValidPropertyChange ( object ) ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster x ) { return x.getnetwork_id ( ) . equals ( getParameters ( ) . getNetwork ( ) . getId ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( a.getStorageDomainType ( ) ) == type ; }
public boolean isMigrationPoliciesSupported ( org.ovirt.engine.core.compat.Version clusterVersion ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.MigrationPoliciesSupported , clusterVersion.toString ( ) ) ) ) ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook hook ) { return hook.getServerName ( ) ; }
public void validVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
public void testGetAllNamesPinnedToHostReturnsNothingForRandomHost ( ) throws java.lang.Exception { org.junit.Assert.assertTrue ( dao.getAllNamesPinnedToHost ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) . isEmpty ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getCommandParameters ( ) { return this . commandParameters ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( applySortOptions ( getSearchString ( ) ) , org.ovirt.engine.core.common.interfaces.SearchType.GlusterVolume , isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public void testGetByNameAndDataCenter ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao.getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 , datacenter ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 , result.getName ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.StoragePool getTargetStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool targetStoragePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePool ( ) ; if ( targetStoragePool == null ) { targetStoragePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePoolDao ( ) . get ( org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getVds ( ) . getStoragePoolId ( ) ) ; } return targetStoragePool ; }
public void testAddGroupUsingDomainFromGroupName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": name=*" ) , SearchType.AdGroup , getAdGroupWithDomain ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddUser , org.ovirt.engine.core.common.action.AddUserParameters.class , new java.lang.String [ ] { "AdGroup.id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true , null , VdcQueryType.GetAdGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( ( ( ( DOMAIN ) + "/" ) + ( NAMES [ 0 ] ) ) ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
public void changingNetworkNotAllowed ( ) throws java.lang.Exception { mockVnicProfileNetworkChange ( DEFAULT_GUID , OTHER_GUID ) ; org.junit.Assert.assertThat ( validator.networkNotChanged ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_VNIC_PROFILE_NETWORK ) ) ; }
public void removeIrsProxy ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.get ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) ) . dispose ( ) ; org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.remove ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getPermissionDao ( ) ) ; new_permissions = new org.ovirt.engine.core.common.businessentities.permissions ( org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID , org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_POOL_ID , org.ovirt.engine.core.common.VdcObjectType.StoragePool ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNotIlegal ( ) { if ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageIllegal ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_IS_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static boolean IsVdsAttachedToTag ( org.ovirt.engine.core.compat.Guid tagId , int vdsId ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . getAllForVdsWithIds ( org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagIdAndChildrenIds ( tagId ) ) . size ( ) ) != 0 ; }
private void saveTaskAndPutInMap ( java.lang.String taskKey , org.ovirt.engine.core.common.businessentities.AsyncTasks task ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.saveAsyncTaskToDb ( task ) ; taskKeyToTaskIdMap.put ( taskKey , task.getTaskId ( ) ) ; }
public void setNavStyle ( java.lang.String styleName ) { navTabs.addStyleName ( styleName ) ; }
public void validateSucceedsInitFormatExportDomain ( ) { sd.setStorageFormat ( null ) ; sd.setStorageDomainType ( StorageDomainType.ImportExport ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; org.junit.Assert.assertEquals ( "Format not initialized correctly" , StorageFormatType.V1 , sd.getStorageFormat ( ) ) ; }
public java.lang.String getVdsGroupCpuName ( ) { return this . vdsGroupCpuName ; }
protected int getBlockSparseInitSizeInGb ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.InitStorageSparseSizeInGB ) . intValue ( ) ; }
private void markCurrentCmdlineAsStored ( ) { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getVds ( ) . getStaticData ( ) ; org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getVdsStaticDao ( ) . updateLastStoredKernelCmdline ( vdsStatic.getId ( ) , vdsStatic.getCurrentKernelCmdline ( ) ) ; }
public void testGetValidatorWithOutKey ( ) { org.ovirt.engine.core.config.EngineConfigMap engineConfigMap = org.mockito.Mockito.mock ( org.ovirt.engine.core.config.EngineConfigMap.class ) ; org.ovirt.engine.core.config.validation.ConfigActionType setAction = org.ovirt.engine.core.config.validation.ConfigActionType.ACTION_GET ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> setAction.validate ( engineConfigMap ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > getAllByVMId ( org.ovirt.engine.core.compat.Guid vmId ) { return getAllByVMId ( vmId , null , false ) ; }
private boolean verifyCanDoActionMessagesContainMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages message ) { return command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( message.toString ( ) ) ; }
public void testGetAllForNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > result = dao.getAllForNetwork ( FixturesTool.NETWORK_ENGINE ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) ) ; }
public void testBeanValidations ( ) { initializeMock ( ) ; org.junit.Assert.assertTrue ( cmd.validateInputs ( ) ) ; }
public void setStatusAvailable ( boolean isStatusAvailable ) { this . isStatusAvailable = isStatusAvailable ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "STATUS_UPDATED" ) ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePool getForCluster ( org.ovirt.engine.core.compat.Guid cluster ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "clusterId" , cluster ) ; return getCallsHandler ( ) . executeRead ( "Getstorage_poolsByClusterId" , org.ovirt.engine.core.dao.StoragePoolDaoImpl.mapper , parameterSource ) ; }
protected void init ( ) { super . init ( ) ; hooksResourceMock = org.mockito.Mockito.mock ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterHooksResource.class ) ; resource.setParent ( hooksResourceMock ) ; }
public static void getVmWatchdogTypes ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetVmWatchdogTypes , osId , version ) , asyncQuery ) ; }
public static void removeCommand ( org.ovirt.engine.core.compat.Guid commandId ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.removeCommand ( commandId ) ; }
private int generateMaxNumOfVmsWithQuestionMark ( ) { return doGenerateMaxNumOfVmsWithQuestionMark ( getMaxNameLength ( ) , getPoolName ( ) . length ( ) , getQuestionMarksCount ( ) ) ; }
private void initDataForClearTest ( java.lang.String key ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , key , org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class ) ) ; container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.SOFT_LIMIT , org.apache.commons.lang.time.DateUtils.addMinutes ( new java.util.Date ( ) , ( - 1 ) ) ) ; }
public void networkChanged ( ) throws java.lang.Exception { mockVnicProfileNetworkChange ( org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.networkNotChanged ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder ( ) { return super . getToStringBuilder ( ) . append ( "url" , getUrl ( ) ) ; }
private boolean hasVMs ( ) { return ! ( vmDynamicDao.getAllRunningForVds ( org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVdsId ( ) ) . isEmpty ( ) ) ; }
public void testIsDomainExistAndActiveDomainNotUp ( ) { domain.setStatus ( StorageDomainStatus.InActive ) ; org.junit.Assert.assertEquals ( "Wrong failure for inactive domain" , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , validator.isDomainExistAndActive ( ) . getMessage ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand removeAsyncRunningCommand ( org.ovirt.engine.core.compat.Guid vmId ) { return _asyncRunningCommands.remove ( vmId ) ; }
public void testStorageDomainForMemoryIsValid ( ) { org.junit.Assert.assertTrue ( filter.getPredicate ( memoryDisks ) . test ( storageDomain ) ) ; }
public void testLoginNameAtDirectoryWhenDirectorySet ( ) { org.ovirt.engine.core.common.businessentities.DbUser user = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; user.setLoginName ( "Legolas" ) ; user.setDomain ( "MiddleEarth.com" ) ; command.setCurrentUser ( user ) ; junit.framework.Assert.assertEquals ( command.getConsoleUserName ( ) , "Legolas@MiddleEarth.com" ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , diskImages , lunDisks , interfaces , vmBase , clusterName , affinityGroups , dbUsers , userToRoles , affinityLabelsNames ) ; }
com.google.gwt.safehtml.shared.SafeHtml statusTemplate ( com.google.gwt.safehtml.shared.SafeHtml statusImage , java.lang.String title ) ;
public java.util.List < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > getDiscoveredHosts ( ) { return runDiscoveredHostListMethod ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.DISCOVERED_HOSTS_ENTRY_POINT ) ; }
private org.ovirt.engine.core.common.businessentities.aaa.DbUser findPrincipal ( java.lang.String sessionId ) { org.ovirt.engine.core.common.queries.QueryReturnValue result = backend.runPublicQuery ( QueryType.GetDbUserBySession , new org.ovirt.engine.core.common.queries.QueryParametersBase ( sessionId ) ) ; return result.getReturnValue ( ) ; }
public static org.ovirt.vdsm.jsonrpc.client.reactors.Reactor getReactor ( org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider , org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ReactorType.STOMP.equals ( type ) ) { return org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getStompReactor ( provider ) ; } else { throw new org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ( "Unrecognized reactor type" ) ; } }
public java.util.Map < java.lang.String , java.lang.Object > getDeviceList ( int storageType , java.lang.String [ ] devicesList , boolean checkStatus ) ;
public static org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer getDeserializer ( ) { return org.ovirt.engine.core.utils.SerializationFactory.deserializer ; }
public org.ovirt.engine.api.model.Disks list ( ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) ) ) ; }
public java.lang.Integer getUtcDiff ( ) { return this . utcDiff ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLogicalUnits ( ) { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS , true , true ) ; return getBackendCollection ( VdcQueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( asGuid ( hostId ) , org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN , reportStatus , null ) ) ; }
private boolean isSameSourceAndDest ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { if ( parameters.getSourceStorageDomainId ( ) . equals ( parameters.getTargetStorageDomainId ( ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME ) ; } return true ; }
public boolean isRequired ( ) { return getEntity ( ) . getCluster ( ) . isRequired ( ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters ) { onGetClusterList ( clusters ) ; }
public void noStpWhenNonVmNetwork ( ) throws java.lang.Exception { stpTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , false ) ; }
public int getReadRate ( ) { return readRateFromDiskImageDynamic ; }
protected boolean checkIfCpusSameManufacture ( org.ovirt.engine.core.common.businessentities.VDSGroup group ) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.checkIfCpusSameManufacture ( group.getCpuName ( ) , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCpuName ( ) , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
public org.ovirt.engine.api.model.Quotas list ( ) { if ( isFiltered ( ) ) { return null ; } else { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return mapCollection ( getBackendCollection ( QueryType.GetQuotaByStoragePoolId , params ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getConnectableStorageConnectionsByStorageType ( org.ovirt.engine.core.compat.Guid pool , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { return getStorageConnectionsByStorageTypeAndStatus ( pool , storageType , java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Inactive , StorageDomainStatus.Unknown ) ) ; }
public javax.ws.rs.core.Response performRemove ( java.lang.String id ) { return performAction ( VdcActionType.RemoveVds , new org.ovirt.engine.core.common.action.RemoveVdsParameters ( asGuid ( id ) ) ) ; }
public void testAlreadyExistStorageDomain ( ) { org.mockito.Mockito.when ( command.getStorageDomainStaticDao ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( parameters.getStorageDomain ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "Cancel" ) ) { cancel ( ) ; } }
public void getUsbPolicyUsbTypeLegacy ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) , UsbPolicy.ENABLED_LEGACY ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; getBrickListModel ( ) . setEntity ( provideDetailModelEntity ( getSelectedItem ( ) ) ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { auditLogDirector.log ( commandCoordinatorUtil.retrieveCommand ( cmdId ) , AuditLogType.HOST_UPGRADE_FAILED ) ; commandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
public boolean connectToServer ( java.lang.String server , java.lang.String passwd , long timeout ) { return wrapper.connect ( server , passwd , timeout ) ; }
public void setConsoleAddressPartiallyOverridden ( java.lang.Boolean consoleAddressPartiallyOverridden ) { if ( ( this . consoleAddressPartiallyOverridden ) != consoleAddressPartiallyOverridden ) { this . consoleAddressPartiallyOverridden = consoleAddressPartiallyOverridden ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "consoleAddressPartiallyOverridden" ) ) ; } }
public void fatalFormat ( java.lang.String formatString , java.lang.Object ... args ) { errorFormat ( formatString , args ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create ( getProvider ( ) ) ; getSubnet ( ) . setExternalNetwork ( getExternalNetwork ( ) ) ; proxy.addSubnet ( getSubnet ( ) ) ; org.ovirt.engine.core.bll.provider.network.AddSubnetToProviderCommand.setSucceeded ( true ) ; }
public void validateFailedVMNotFound ( ) throws java.lang.Exception { mockNullVm ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString ( ) ) ) ; }
public void testRemoveIfUnusedWithUnused ( ) { dao.removeIfUnused ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; final org.ovirt.engine.core.common.businessentities.VmIcon nothing = dao.get ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; org.junit.Assert.assertNull ( nothing ) ; }
public void load ( java.lang.Class < ? extends org.ovirt.engine.core.common.BackendService > service ) { org.ovirt.engine.core.common.BackendService backendService = services.select ( service ) . get ( ) ; org.ovirt.engine.core.bll.ServiceLoader.log.info ( "Start {} " , backendService ) ; }
public void snapshotNotBrokenReturnsValidResult ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateValidResult ( validator.snapshotNotBroken ( new org.ovirt.engine.core.common.businessentities.Snapshot ( ) ) ) ; }
static org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpStorageServerConnection ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; cnx.setId ( GUIDS [ 0 ] . toString ( ) ) ; cnx.setConnection ( ( "10.11.12.13" + ( ":" + "/1" ) ) ) ; return cnx ; }
public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol resolveSelectedProtocol ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { return consoleModelsCache.resolveUserSelectedProtocol ( item ) ; }
public void qosDoesNotExist ( ) { qos.setId ( org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.doReturn ( null ) . when ( validator ) . getOldQos ( ) ; qosExistsTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_QOS_NOT_FOUND ) , validator ) ; }
protected void orderListOfRunningVmsOnVds ( org.ovirt.engine.core.compat.Guid vdsId ) { vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . getAllRunningForVds ( vdsId ) ; java.util.Collections.sort ( vms , java.util.Collections.reverseOrder ( new org.ovirt.engine.core.common.businessentities.comparators.VmsComparer ( ) ) ) ; }
private void addPermission ( ) { addPermissionForTemplate ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getCurrentUser ( ) . getUserId ( ) , PredefinedRoles.TEMPLATE_OWNER ) ; if ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . isPublicUse ( ) ) { addPermissionForTemplate ( MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID , PredefinedRoles.TEMPLATE_USER ) ; } }
void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { boolean visible = checkBox.getValue ( ) ; controller.setColumnVisible ( column , visible ) ; }
void onChangeProhibitionReasonChange ( org.ovirt.engine.ui.common.widget.HasEnabledWithHints editor , org.ovirt.engine.ui.uicommonweb.models.Model model ) { if ( ! ( editor.isEnabled ( ) ) ) { editor.disable ( model.getChangeProhibitionReason ( ) ) ; } }
protected java.lang.String defaultImageName ( java.lang.Integer value ) { return ( "other" + ( nameUniquePart ) ) + ( org.ovirt.engine.ui.userportal.widget.basic.OsTypeImage.IMAGE ) ; }
private void initListBoxEditors ( ) { dataCenterEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ) ; clusterEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) ; typeListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType > ( ) ) ; }
public void sendMessage ( byte [ ] message ) { send ( new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . send ( ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION , this . getRequestQueue ( ) ) . withContent ( message ) . build ( ) ) ; }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
public void validNetworkWhenNoPortMirroring ( ) throws java.lang.Exception { portMirroringTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , "net" , false ) ; }
public void diskSnapshotsDontExist ( ) { org.junit.Assert.assertThat ( validator.diskSnapshotsNotExist ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_SNAPSHOTS_NOT_EXIST ) ) ; }
public void setClientIp ( java.lang.String value ) { this . clientIp = value ; }
protected void ExecuteVdsBrokerCommand ( ) { result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeOptionsInfoVDSCommand.getBroker ( ) . glusterVolumeSetOptionsList ( ) ; org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeOptionsInfoVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( result.optionsHelpSet ) ; }
public void setStorageDomain ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( storageDomain , value ) ) ) { storageDomain = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "StorageDomain" ) ) ; } }
public void setGrayedOutReasons ( java.util.ArrayList < java.lang.String > value ) { if ( ( grayedOutReasons ) != value ) { grayedOutReasons = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "GrayedOutReasons" ) ) ; } }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createIdParameterMapper ( org.ovirt.engine.core.compat.Guid id ) { return getCustomMapSqlParameterSource ( ) . addValue ( "vmt_guid" , id ) ; }
private static int compareSequence ( java.lang.String seq1 , java.lang.String seq2 , boolean digitSequence ) { return digitSequence ? org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compDigitSequence ( seq1 , seq2 ) : org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compNonDigitSequence ( seq1 , seq2 ) ; }
protected org.ovirt.engine.api.model.HostNIC deprecatedPopulate ( org.ovirt.engine.api.model.HostNIC model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( httpHeaders , uriInfo ) ; if ( details.contains ( "statistics" ) ) { addStatistics ( model , entity ) ; } return model ; }
java.lang.String positiveTimezoneOffset ( java.lang.String name , java.lang.String hours , java.lang.String minutes ) ;
protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroupEntity ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; cluster.setStoragePoolId ( GUIDS [ 3 ] ) ; cluster.setArchitecture ( ArchitectureType.x86_64 ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; return cluster ; }
protected boolean setAndValidateCpuProfile ( ) { return validate ( cpuProfileHelper.setAndValidateCpuProfile ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters ( ) . getVmStaticData ( ) , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getUserIdIfExternal ( ) ) ) ; }
public void checkExecuteCommandWithEmptyVdsId ( ) { parameters.setStorageServerConnection ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection ) ; parameters.setVdsId ( Guid.Empty ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.never ( ) ) . disconnectStorage ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult uuidNotEmpty ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.LIBVIRT_SECRET_UUID_CANNOT_BE_EMPTY ) . when ( org.apache.commons.lang.StringUtils.isEmpty ( libvirtSecret.getId ( ) . toString ( ) ) ) ; }
public java.lang.String value ( ) { return name ( ) . toLowerCase ( ) ; }
public void testSave ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession newSession = getGlusterGeoRepSession ( ) ; dao.save ( newSession ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = dao.getById ( newSession.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( newSession , session ) ; }
public boolean attemptFallbackProtocol ( ) { vds.setProtocol ( VdsProtocol.XML ) ; resourceManager.AddVds ( vds , false ) ; return attemptConnection ( ) ; }
private org.ovirt.engine.ui.uicommonweb.UICommand getOnSaveCommand ( ) { org.ovirt.engine.ui.uicommonweb.UICommand onSaveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand ( "OnSave" , this ) ; return onSaveCommand ; }
protected int calcHostScore ( float maxMemoryOfVdsInCluster , org.ovirt.engine.core.common.businessentities.VDS vds ) { int maxScore = ( MaxSchedulerWeight ) - 1 ; return maxScore - ( super . calcHostScore ( maxMemoryOfVdsInCluster , vds ) ) ; }
public void testValidateFailsWhenDiscardIsNotSupported ( ) { org.mockito.Mockito.when ( diskVmElementValidator.isPassDiscardSupported ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED_BY_DISK_INTERFACE ) ; }
java.lang.String vnicTypeDoesntMatchPassthroughProfile ( java.lang.String type ) ;
private void validateIconParameters ( org.ovirt.engine.api.model.Vm vm ) { if ( ! ( org.ovirt.engine.api.restapi.util.IconHelper.validateIconParameters ( vm ) ) ) { throw new org.ovirt.engine.api.restapi.resource.BaseBackendResource.WebFaultException ( null , localize ( Messages.INVALID_ICON_PARAMETERS ) , Response.Status.BAD_REQUEST ) ; } }
protected void addValidationMessage ( org.ovirt.engine.core.common.errors.EngineMessage message ) { getReturnValue ( ) . getValidationMessages ( ) . add ( message.name ( ) ) ; }
public void updateCallBackNotified ( final org.ovirt.engine.core.compat.Guid commandId ) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get ( commandId ) ; if ( cmdEntity != null ) { cmdEntity.setCallBackNotified ( true ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . updateNotified ( commandId ) ; } }
public void setTemplate ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( template , value ) ) ) { template = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Template" ) ) ; } }
public java.util.Map < java.lang.String , java.lang.Object > glusterHostUUIDGet ( ) ;
public static org.ovirt.engine.api.model.DiskInterface map ( org.ovirt.engine.api.model.DiskInterface diskInterface , org.ovirt.engine.api.model.DiskInterface template ) { switch ( diskInterface ) { case IDE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskInterface ; case VIRTIO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskInterface ; case VIRTIO_SCSI : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskInterface ; case SPAPR_VSCSI : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskInterface ; default : return null ; } }
protected boolean canDoAction ( ) { org.ovirt.engine.core.bll.validator.NetworkQosValidator validator = new org.ovirt.engine.core.bll.validator.NetworkQosValidator ( getNetworkQoS ( ) ) ; return ( ( validateParameters ( ) ) && ( validate ( validator.nameNotTakenInDc ( ) ) ) ) && ( validateValues ( ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > getProfilesByParentEntity ( ) { return getDbFacade ( ) . getDiskProfileDao ( ) . getAllForStorageDomain ( getStorageDomain ( ) . getId ( ) ) ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.StorageConnection > collection ) throws java.lang.Exception { org.junit.Assert.assertNotNull ( collection ) ; org.junit.Assert.assertEquals ( GUIDS.length , collection.size ( ) ) ; }
protected void configure ( ) { bindModels ( ) ; bindModelProviders ( ) ; bindIntegration ( ) ; }
public void testGetUnmanagedDeviceByVmId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = dao.getUnmanagedDevicesByVmId ( org.ovirt.engine.core.dao.VmDeviceDaoTest.EXISTING_VM_ID ) ; org.junit.jupiter.api.Assertions.assertTrue ( devices.isEmpty ( ) ) ; }
public void parametersWithSecureDeletionAreNotFixedOnBlockDomainWhenPostZeroIsTrue ( ) { org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction parameters = postDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandlerTest.ParametersWithPostDeleteAction ( true ) , false ) ; assertPostZeroValue ( parameters , true ) ; }
private org.ovirt.engine.core.compat.Version getClusterVersion ( ) { return org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupDAO ( ) . get ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkCluster ( ) . getClusterId ( ) ) . getCompatibilityVersion ( ) ; }
protected void onSelection ( ) { if ( hasSelection ( ) ) { placeManager.revealPlace ( getSubTabRequest ( ) ) ; } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible ( false ) ; placeManager.revealPlace ( org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getMainTabRequest ( ) ) ; } }
public void setNetworkLabels ( java.util.Set < java.lang.String > networkLabels ) { this . networkLabels = networkLabels ; }
public static java.lang.Object getConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get ( key ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { removeBricksButton.getCommand ( ) . execute ( ) ; clearSelections ( ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > multipleParams , boolean isRunOnlyIfAllValidationPass ) { return runMultipleActions ( actionType , multipleParams , isRunOnlyIfAllValidationPass , false ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.StorageDomain , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateStorageListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.templateStorageSubTabLabel ( ) , 4 , modelProvider ) ; }
private boolean areDisksLocked ( org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue ) { return actionReturnValue.getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED.name ( ) ) ; }
private void mockVMPoolDao ( ) { org.mockito.Mockito.when ( vmPoolDao.get ( vmPoolId ) ) . thenReturn ( vmPools ) ; }
public void testMissingJobMessages ( ) { org.ovirt.engine.core.dal.job.ExecutionMessageDirector messageDirector = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance ( ) ; messageDirector.initialize ( org.ovirt.engine.core.dal.job.ExecutionMessageDirectorTest.TEST_BUNDLE_NAME ) ; org.junit.Assert.assertEquals ( ActionType.Unknown.name ( ) , messageDirector.getJobMessage ( ActionType.Unknown ) ) ; }
public void forceRefresh ( ) { getTimer ( ) . stop ( ) ; setIsQueryFirstTime ( true ) ; syncSearch ( ) ; if ( ! ( getIsTimerDisabled ( ) ) ) { getTimer ( ) . start ( ) ; } }
public static boolean IsUserAttachedToTag ( org.ovirt.engine.core.compat.Guid tagId , org.ovirt.engine.core.compat.Guid userId ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . getAllForUsersWithIds ( org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagIdAndChildrenIds ( tagId ) ) . size ( ) ) != 0 ; }
protected org.ovirt.engine.core.common.businessentities.VM getVmEntity ( int index ) { return setUpVmEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VM.class ) , index ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getVmId ( ) , forceMigrationForNonMigratableVm , targetClusterId , reason ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithDifferentName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setName ( "BadName" ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; return group ; }
public boolean isHostedEngine ( ) { return ( ( OriginType.HOSTED_ENGINE ) == ( getOrigin ( ) ) ) || ( ( OriginType.MANAGED_HOSTED_ENGINE ) == ( getOrigin ( ) ) ) ; }
protected void buildChildCommandInfos ( ) { }
public void setTunnelMigration ( java.lang.Boolean value ) { vmStatic.setTunnelMigration ( value ) ; }
public org.ovirt.engine.core.bll.ValidationResult nameNotUsed ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) . when ( ( ( hostDao.getByName ( host.getName ( ) ) ) != null ) ) ; }
public org.ovirt.engine.api.resource.AssignedTagResource getAssignedTagSubResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendUserTagResource ( asGuid ( parentId ) , id ) ) ; }
public void setVmId ( org.ovirt.engine.core.compat.Guid vmId ) { this . vmId = vmId ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getEntity ( ) . getVm ( ) . setName ( getName ( ) . getEntity ( ) ) ; }
private void localize ( ) { isPluggedEditor.setLabel ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants.activateVmDiskPopup ( ) ) ; isPluggedEditor.setWidgetTooltip ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants.activateVmDiskPopupToolTip ( ) ) ; isPluggedEditor.getContentWidgetContainer ( ) . setWidth ( "90px" ) ; }
public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.DiskImage disk ) { return disk.getVmSnapshotId ( ) . getValue ( ) ; }
public void findActiveVmsUsingNetworksOnUnpluggedVnic ( ) { mockDaos ( false ) ; java.util.List < java.lang.String > vmNames = vmInterfaceManager.findActiveVmsUsingNetworks ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , java.util.Collections.singletonList ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.NETWORK_NAME ) ) ; org.junit.Assert.assertFalse ( vmNames.contains ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
public void reportCompleted ( ) { if ( isRunAndPaused ( ) ) { final org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , true ) ; } else { super . reportCompleted ( ) ; } }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.DiskImage snapshot ) { super . removeSnapshot ( snapshot ) ; _imagesToDelete.add ( _imagesToDelete.size ( ) , snapshot.getImageId ( ) ) ; }
public void testGet64bitOss ( ) { org.junit.jupiter.api.Assertions.assertEquals ( 2 , OsRepositoryImpl.INSTANCE.get64bitOss ( ) . size ( ) ) ; }
public boolean isSearchStringMatch ( java.lang.String searchString ) { return true ; }
void setApplyEnabled ( boolean enabled ) ;
public void setPmSecondaryOptionsMap ( org.ovirt.engine.core.common.queries.ValueObjectMap value ) { mVdsStatic.setPmSecondaryOptionsMap ( value ) ; }
java.lang.String invalidIconFormat ( java.lang.String s ) ;
public int compare ( org.ovirt.engine.core.bll.CommandBase x , org.ovirt.engine.core.bll.CommandBase y ) { return ( x.getStorageDomain ( ) . getStorageDomainType ( ) . getValue ( ) ) - ( y.getStorageDomain ( ) . getStorageDomainType ( ) . getValue ( ) ) ; }
public static < T > boolean objectsEqual ( T a , T b ) { return ( a == b ) || ( ( a != null ) && ( a.equals ( b ) ) ) ; }
public void setErrorMessageHtml ( java.lang.String text ) { setErrorMessageLabel ( errorMessage , text ) ; errorMessage.setVisible ( ( text != null ) ) ; if ( errorMessage.isVisible ( ) ) { errorMessagePanel.setVisible ( true ) ; } }
public void setActualSizeFromDiskImage ( long size ) { actualSizeFromDiskImageDynamic = size ; setActualSize ( ( ( ( getActualSizeFromDiskImage ( ) ) * 1.0 ) / ( ( 1024 * 1024 ) * 1024 ) ) ) ; }
private boolean isHealthy ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent , org.ovirt.engine.core.common.businessentities.VDS host ) { return ( new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor ( host ) . getFenceAgentStatus ( agent ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS ) ; }
public java.lang.String getHash ( ) { return vmDynamic.getHash ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ( ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostPopupView ) ( getView ( ) ) ) . rbDiscoveredHost.getValue ( ) ) { model.getIsDiscoveredHosts ( ) . setEntity ( true ) ; } }
org.ovirt.engine.ui.webadmin.widget.host.VLanPanel createVLanPanel ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel ) { org.ovirt.engine.ui.webadmin.widget.host.VLanPanel panel = new org.ovirt.engine.ui.webadmin.widget.host.VLanPanel ( ) ; panel.setWidth ( "100%" ) ; panel.setHeight ( "100%" ) ; panel.addVLans ( lineModel ) ; addClickHandlerToPanel ( panel , lineModel ) ; return panel ; }
protected void processVmPoolOnStopVm ( ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm ( getVm ( ) . getId ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( getExecutionContext ( ) ) ) ; } } ) ; }
protected boolean doesStorageDomainhaveSpaceForRequest ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain ) { return org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest ( storageDomain , getDiskImageInfo ( ) . getSizeInGigabytes ( ) ) ; }
protected org.ovirt.engine.core.dao.DiskImageDynamicDAO getDiskImageDynamicDAO ( ) { return org.ovirt.engine.core.bll.BaseImagesCommand.getDbFacade ( ) . getDiskImageDynamicDao ( ) ; }
public static org.ovirt.engine.core.common.businessentities.AsyncTasks getAsyncTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.getAsyncTask ( taskId , command , asyncTaskCreationInfo , parentCommand ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > getAllForNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { return getCallsHandler ( ) . executeReadList ( "GetVmInterfaceViewsByNetworkId" , mapper , getCustomMapSqlParameterSource ( ) . addValue ( "network_id" , networkId ) ) ; }
public void setDetailModels ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > value ) { if ( ( detailModels ) != value ) { detailModels = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "DetailModels" ) ) ; } }
public java.lang.Integer getOutAverageLinkshare ( ) { return hostNetworkQosProperties.getOutAverageLinkshare ( ) ; }
protected org.ovirt.engine.core.utils.pm.VdsFenceOptions createVdsFenceOptions ( java.lang.String version ) { return new org.ovirt.engine.core.utils.pm.VdsFenceOptions ( version ) ; }
public boolean isContentHostExist ( java.lang.String hostName ) { return getContentHostProvider ( ) . isContentHostExist ( hostName ) ; }
private void markVfsAsUsedByVm ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > passthroughVnicToVfMap ) { org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper hostNicVfsConfigHelper = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper.class ) ; hostNicVfsConfigHelper.setVmIdOnVfs ( hostId , vmId , new java.util.HashSet ( passthroughVnicToVfMap.values ( ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getNewVmDevices ( ) { return java.util.Collections.unmodifiableList ( newVmDevices ) ; }
protected org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity ( ) { return new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; }
public void shouldDetectSuspendedVM ( ) { invalidVM.setStatus ( VMStatus.Suspended ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( UPGRADE_ERROR.VM_SUSPENDED ) ) ; }
protected void handleError ( ) { addCanDoActionMessage ( org.ovirt.engine.core.common.errors.EngineMessage.VDS_FENCE_OPERATION_FAILED ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.EngineMessage.VAR__TYPE__HOST ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__RESTART ) ; log.error ( "Failed to run RestartVdsCommand on vds '{}'" , org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsName ( ) ) ; }
protected void updateVMDetails ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( vm ) ; org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion ( vm ) ; org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb ( vm ) ; org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB ( vm.getStaticData ( ) , true ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { proxyUp ( ) ; }
private static boolean isVlan ( org.ovirt.engine.core.common.businessentities.network.Network net ) { return ( net.getVlanId ( ) ) != null ; }
public org.ovirt.engine.core.bll.ValidationResult qosExists ( ) { return ( ( qos ) != null ) && ( ( getOldQos ( ) ) == null ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_QOS_NOT_FOUND ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void clear ( ) { animatedPanel.clear ( ) ; requiredPanel.clear ( ) ; nonRequiredPanel.clear ( ) ; }
public void setDisplay ( boolean value ) { this . display = value ; }
public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId ) ; mockVmWithDisk ( storageId ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; runAndAssertCanDoActionSuccess ( ) ; }
protected void onBind ( ) { super . onBind ( ) ; roleModelProvider.getModel ( ) . Search ( ) ; systemPermissionModelProvider.getModel ( ) . Search ( ) ; }
public void onSuccess ( java.lang.Integer returnValue ) { maxSpmPriority = returnValue ; InitSpmPriorities1 ( ) ; }
protected org.ovirt.engine.core.common.businessentities.VM createVmStatusDown ( org.ovirt.engine.core.common.businessentities.VM ... otherPluggedVMs ) { return createVm ( VMStatus.Down ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters ( ) . getImageId ( ) ; if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( imageId ) ) ) { return validateUploadToImage ( imageId ) ; } else { return validateCreateImage ( ) ; } }
public void setEntity ( java.lang.Object value ) { super . setEntity ( ( value == null ? null : ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( value ) ) . getTemplate ( ) ) ) ; }
public void collectiontoStringOneElement ( ) { java.lang.String s = "abc" ; org.junit.Assert.assertEquals ( ( ( "[" + s ) + "]" ) , org.ovirt.engine.core.common.businessentities.Entities.collectionToString ( java.util.Collections.singletonList ( s ) , "" ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmRngDevice.Source getSource ( ) { try { return org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.valueOf ( ( ( java.lang.String ) ( getSpecParams ( ) . get ( org.ovirt.engine.core.common.businessentities.VmRngDevice.SOURCE_STRING ) ) ) . toUpperCase ( ) ) ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.URANDOM ; } }
public org.ovirt.engine.core.bll.ValidationResult labelNotInVfsConfig ( java.lang.String label ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_LABEL_ALREADY_IN_VFS_CONFIG , getNicNameReplacement ( ) , java.lang.String.format ( org.ovirt.engine.core.bll.validator.VfsConfigValidator.LABEL_REPLACEMENT , label ) ) . when ( oldVfsConfig.getNetworkLabels ( ) . contains ( label ) ) ; }
public void validateNoDirectLunIdAndInvalidStoragePool ( ) { org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateStoragePool ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
public void setAvailableDiskSize ( java.lang.Integer availableDiskSize ) { this . availableDiskSize = availableDiskSize ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { getWindow ( ) . stopProgress ( ) ; setWindow ( null ) ; }
public static org.ovirt.engine.core.sso.utils.Credentials translateUser ( java.lang.String user , java.lang.String password , org.ovirt.engine.core.sso.utils.SSOContext ssoContext ) { org.ovirt.engine.core.sso.utils.Credentials credentials = new org.ovirt.engine.core.sso.utils.Credentials ( ) ; java.lang.String username = user ; int separator = user.lastIndexOf ( "@" ) ; if ( separator != ( - 1 ) ) { username = user.substring ( 0 , separator ) ; java.lang.String profile = user.substring ( ( separator + 1 ) ) ; if ( org.apache.commons.lang.StringUtils.isNotEmpty ( profile ) ) { credentials.setProfile ( profile ) ; credentials.setProfileValid ( ssoContext.getSsoProfiles ( ) . contains ( profile ) ) ; } } credentials.setUsername ( username ) ; credentials.setPassword ( password ) ; return credentials ; }
public void setVmtOs ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { this . vmtOs = value ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.rebootVm ( ) ) ; }
org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator createManagementNetworkClusterValidator ( ) { return new org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator ( interfaceDao , networkDao , managementNetworkCluster , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
private void verifyDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains , org.ovirt.engine.core.common.businessentities.StorageDomain expectedStorageDomain ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory ( storageDomains , memoryDisks , vmDisks ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedStorageDomain , storageDomain ) ; }
public java.lang.String getDisplayIp ( ) { return this . vmDynamic.getdisplay_ip ( ) ; }
private void addFeatureStorageServerConnections ( org.ovirt.engine.api.model.Features features ) { org.ovirt.engine.api.model.Feature feature = new org.ovirt.engine.api.model.Feature ( ) ; feature.setName ( "Storage server connections" ) ; feature.setDescription ( "Ability to manage storage server connections" ) ; features.getFeature ( ) . add ( feature ) ; }
public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.storage.Disk a ) { return a.getId ( ) ; }
public org.ovirt.engine.core.common.errors.EngineMessage getNetworkInUse ( int numberOfEntities ) { return singularOrPlural ( numberOfEntities , EngineMessage.ACTION_TYPE_FAILED_NETWORK_IN_ONE_USE , EngineMessage.ACTION_TYPE_FAILED_NETWORK_IN_MANY_USES ) ; }
public java.util.Date getGuestLastLoginTime ( ) { return this . vmDynamic.getguest_last_login_time ( ) ; }
public boolean isEnabled ( ) { return label.isEnabled ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkExists ( ) { return new org.ovirt.engine.core.bll.validator.NetworkValidator ( getNetwork ( ) ) . networkIsSet ( ) ; }
public void testGetAllForRoleAndAdElementAndObjectWithInvalidAdElement ( ) { org.ovirt.engine.core.common.businessentities.permissions result = dao.getForRoleAndAdElementAndObject ( org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.PermissionDAOTest.VM_ENTITY_ID ) ; org.junit.Assert.assertNull ( result ) ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { return getBackend ( ) . runInternalMultipleActions ( actionType , parameters , context.clone ( ) . withExecutionContext ( executionContext ) ) ; }
public void testBootProtocolSetForRoleNetworkWhenIpConfigurationNullAndNotRoleNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , network , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network.getName ( ) ) ) ) ; }
public void testValidateFieldValueWithEnum ( ) { org.ovirt.engine.core.searchbackend.IConditionFieldAutoCompleter comp = new org.ovirt.engine.core.searchbackend.DiskConditionFieldAutoCompleter ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( comp.validateFieldValue ( "FORMAT" , "RAW" ) ) ; }
private org.ovirt.engine.core.common.businessentities.Provider < ? > getHostProvider ( ) { return org.ovirt.engine.core.bll.AddVdsCommand.getProviderDao ( ) . get ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getVdsStaticData ( ) . getHostProviderId ( ) ) ; }
public void setSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { this . snapshot = snapshot ; }
public void testDomainWithNotEnoughSpace ( ) { validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidatorTest.mockStorageDomain ( 3 , 756 , StorageType.NFS ) ) ; org.junit.Assert.assertThat ( "Wrong failure for not enough space" , validator.isDomainWithinThresholds ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; }
private java.lang.Void executeAddQutoa ( ) { getQuotaDAO ( ) . save ( getQuota ( ) ) ; if ( getParameters ( ) . isCopyPermissions ( ) ) { copyQuotaPermissions ( ) ; } getReturnValue ( ) . setSucceeded ( true ) ; return null ; }
public void checkNotValidEmptyStringAllowed ( ) { underTest = new org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidation ( mockConstantsManager , true ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.NOT_VALID ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.failureValidationResultEmptyAllowed , validationResult ) ; }
public void hostProviderDoesNotExist ( ) { org.mockito.Mockito.when ( host.getHostProviderId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.hostProviderExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) ) ; }
protected void updateBootOrderInVmDevice ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrder ( org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVm ( ) . getId ( ) ) ; }
protected void refreshBootParameters ( org.ovirt.engine.core.common.action.RunVmParams runVmParameters ) { if ( runVmParameters == null ) { return ; } org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setBootSequence ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDefaultBootSequence ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmOsType getOsType ( ) { return getOs ( ) ; }
protected org.ovirt.engine.api.model.StorageDomain getStorageDomain ( int idx ) { org.ovirt.engine.api.model.StorageDomain dom = new org.ovirt.engine.api.model.StorageDomain ( ) ; dom.setId ( GUIDS [ idx ] ) ; dom.setstorage_name ( NAMES [ idx ] ) ; return dom ; }
public boolean connectStorageToDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return connectStorageToDomainByVdsIdDetails ( storageDomain , vdsId ) . getFirst ( ) ; }
org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.NetworkQoS , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkQoSListModel > getSubTabDataCenterNetworkQoSModelProvider ( ) ;
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.userportal.ApplicationConstants applicationConstants ) { return new com.gwtplatform.mvp.client.TabDataBasic ( applicationConstants.extendedTemplateGeneralSubTabLabel ( ) , 0 ) ; }
public void removeAllCommandsBeforeDate ( org.ovirt.engine.core.compat.DateTime cutoff ) { commandEntityDao.removeAllBeforeDate ( cutoff ) ; cacheInitialized = false ; initializeCache ( ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , sysPrepDomainName , sysPrepUserName , sysPrepPassword , vmInit , destinationVdsId , customEmulatedMachine , customCpuName , initrdUrl , kernelUrl , kernelParams , bootMenuEnabled , spiceFileTransferEnabled , spiceCopyPasteEnabled ) ; }
public org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig getByNicId ( org.ovirt.engine.core.compat.Guid nicId ) { return getCallsHandler ( ) . executeRead ( "GetVfsConfigByNicId" , createEntityRowMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "nic_id" , nicId ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , java.lang.String address ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addDiskDevice ( vmId , deviceId , true , false , address , false ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , entitiesMap ) ; }
protected int getAllEntitiesCount ( ) { return org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_COUNT ; }
public org.ovirt.engine.api.model.Nic addParents ( org.ovirt.engine.api.model.Nic nic ) { org.ovirt.engine.api.model.InstanceType instanceType = new org.ovirt.engine.api.model.InstanceType ( ) ; instanceType.setId ( instanceTypeId.toString ( ) ) ; nic.setInstanceType ( instanceType ) ; return nic ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallback ) { persistCommand ( parentCommand , getContext ( ) , enableCallback ) ; }
public void testGetAllForQuotaId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permission > result = dao.getConsumedPermissionsForQuotaId ( FixturesTool.QUOTA_GENERAL ) ; org.junit.Assert.assertEquals ( result.get ( 0 ) . getAdElementId ( ) , FixturesTool.USER_EXISTING_ID ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportNetworkData getNetworkImportData ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { return networkImportDataMap.get ( ( ( ( iface.getVmName ( ) ) + "$" ) + ( iface.getName ( ) ) ) ) ; }
protected void executeVDSCommand ( ) { if ( ( _vdsManager ) != null ) { synchronized ( _vdsManager.getLockObj ( ) ) { ExecuteVdsIdCommand ( ) ; } } else { ExecuteVdsIdCommand ( ) ; } }
protected int getMaxClonedNameLength ( java.lang.Object object ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( vm.getOs ( ) ) ? org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLengthWin ( ) : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxVmNameLengthNonWin ( ) ; }
public java.util.List < java.lang.String > getAllHostNamesPinnedToVm ( org.ovirt.engine.core.compat.Guid vm ) { return getCallsHandler ( ) . executeReadList ( "GetNamesOfHostsDedicatedToVm" , org.springframework.jdbc.core.SingleColumnRowMapper.newInstance ( java.lang.String.class ) , getCustomMapSqlParameterSource ( ) . addValue ( "vm_guid" , vm ) ) ; }
public void testGetLocaleFromRequest_Path ( ) { org.mockito.Mockito.when ( mockRequest.getPathInfo ( ) ) . thenReturn ( "/ja/index.html" ) ; java.util.Locale result = testServlet.getLocaleFromRequest ( mockRequest ) ; org.junit.Assert.assertEquals ( "The locale should be ja" , java.util.Locale.JAPANESE , result ) ; }
private void acquireHostDevicesLock ( ) { if ( needsHostDevices ) { hostDeviceManager.acquireHostDevicesLock ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVdsList ( ) . get ( 0 ) ) ; } }
public void setClusterId ( org.ovirt.engine.core.compat.Guid value ) { setId ( value ) ; }
public void testGetByNameAndVersionWithInvalidVersion ( ) { org.ovirt.engine.core.common.businessentities.VdcOption result = dao.getByNameAndVersion ( existingOption.getoption_name ( ) , "farkle" ) ; org.junit.Assert.assertNull ( result ) ; }
private void mockStorageDomainDaoGetForStoragePool ( ) { mockStorageDomainDaoGetForStoragePool ( org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB ) ; }
public org.ovirt.engine.core.common.businessentities.OriginType getOrigin ( ) { return vmStatic.getOrigin ( ) ; }
protected org.ovirt.engine.api.model.NetworkLabel getEntity ( int index ) { org.ovirt.engine.api.model.NetworkLabel entity = control.createMock ( org.ovirt.engine.api.model.NetworkLabel.class ) ; org.easymock.EasyMock.expect ( entity.getId ( ) ) . andReturn ( org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.LABELS [ index ] ) . anyTimes ( ) ; return entity ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public void validateNoDirectLunIdAndValidStoragePool ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . validateStoragePool ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ) , ValidationResult.VALID ) ; }
public void clearSession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.clean ( ) ; org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( "session" ) ; org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . removeSession ( ) ; }
private org.ovirt.engine.core.common.businessentities.storage.BaseDisk getDisk ( ) { return baseDiskDao.get ( org.ovirt.engine.core.bll.storage.disk.image.AllocateImageGroupVolumeCommand.getParameters ( ) . getImageGroupID ( ) ) ; }
java.lang.String numberValidationNumberBetweenInvalidReason ( java.lang.String prefixMsg , java.lang.String min , java.lang.String max ) ;
public void setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol ipv4BootProtocol ) { this . ipv4BootProtocol = ipv4BootProtocol ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao.getByName ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME , result.getName ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network.getId ( ) . equals ( nc.getnetwork_id ( ) ) ; }
protected void preSearchCalled ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { setSearchString ( ( "Events:event_template=" + ( template.getName ( ) ) ) ) ; }
private void logFailureMessage ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warnFormat ( "Failed to refresh VDS , vds = {0} : {1}, error = '{2}', continuing." , _vds.getId ( ) , _vds.getName ( ) , ex ) ; }
protected abstract org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) ;
protected boolean removeMemoryVolume ( java.lang.String memoryVolumes ) { if ( isMemoryStateRemovable ( memoryVolumes ) ) { return removeMemoryVolumes ( memoryVolumes ) ; } return true ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createShareableDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setShareable ( true ) ; return image ; }
protected void endMoveOrCopyCommand ( ) { org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate ( getVmTemplateId ( ) ) ; endActionOnAllImageGroups ( ) ; setSucceeded ( true ) ; }
protected void onHide ( ) { super . onHide ( ) ; alertManager.setCanShowAlerts ( false ) ; }
public java.lang.String getVdsDestination ( ) { return ( getDestinationVds ( ) ) != null ? getDestinationVds ( ) . getName ( ) : null ; }
void vdsMovedToMaintanance ( org.ovirt.engine.core.common.businessentities.VDS vds ) ;
public org.ovirt.engine.core.compat.NGuid getStorageDomainId ( ) { if ( ( _storageDomain ) != null ) { return _storageDomain.getId ( ) ; } return _storageDomainId ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain mockSecondStorageDomain ( int availabeDiskSize ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setavailable_disk_size ( availabeDiskSize ) ; storageDomain.setstatus ( StorageDomainStatus.Active ) ; storageDomain.setId ( secondStorageDomainId ) ; storageDomain.setstorage_domain_type ( StorageDomainType.Data ) ; return storageDomain ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { osNames = returnValue.getReturnValue ( ) ; initOsIds ( ) ; }
public void legalArchitectureChange ( ) { createCommandWithDefaultVdsGroup ( ) ; cpuExists ( ) ; architectureIsUpdatable ( ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected boolean checkStoragePoolNameLengthValid ( ) { boolean result = true ; if ( ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) . getName ( ) . length ( ) ) > ( getStoragePoolNameSizeLimit ( ) ) ) { result = false ; addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ; } return result ; }
public org.ovirt.engine.core.common.job.Step addSubStep ( org.ovirt.engine.core.bll.job.ExecutionContext context , org.ovirt.engine.core.common.job.Step parentStep , org.ovirt.engine.core.common.job.StepEnum newStepName , java.lang.String description ) { return addSubStep ( context , parentStep , newStepName , description , false ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain createSourceDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setstorage_domain_type ( StorageDomainType.ImportExport ) ; sd.setstatus ( StorageDomainStatus.Active ) ; return sd ; }
public org.ovirt.engine.core.bll.context.CompensationContext getCompensationContext ( ) { return context.getCompensationContext ( ) ; }
public boolean AddAsyncRunningVm ( org.ovirt.engine.core.compat.Guid vmId ) { boolean returnValue = false ; if ( ( _asyncRunningVms.putIfAbsent ( vmId , java.lang.Boolean.TRUE ) ) == null ) { returnValue = true ; } return returnValue ; }
public void AddDisk ( ) { if ( ( getEntity ( ) ) != null ) { AddDiskUpdateData ( ) ; } }
private java.lang.String getRelatedTableName ( java.lang.String obj ) { if ( obj == null ) { return null ; } else if ( ( org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo ( obj ) ) != null ) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo ( obj ) . relatedTableName ; } return null ; }
public void run ( ) { org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . initialize ( ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot getInPreview ( ) { return getInPreview ( getItems ( ) ) ; }
protected javax.ws.rs.core.Response actionStatus ( org.ovirt.engine.api.model.CreationStatus status , org.ovirt.engine.api.model.Action action , java.lang.Object result ) { setActionItem ( action , result ) ; action.setStatus ( status.value ( ) ) ; return javax.ws.rs.core.Response.ok ( ) . entity ( action ) . build ( ) ; }
public void setParameters ( java.lang.String value ) { parameters = value ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object ) { return ( java.lang.String.valueOf ( object.getVm ( ) . getVmMemSizeMb ( ) ) ) + " MB" ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters ) { dcClusters.put ( dcId , clusters ) ; attachNetworkToClusters ( network , clusters , publicUse ) ; }
public void canCreateAsMuchNumaNodesAsVirtualCores ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 4 ) ; org.assertj.core.api.Assertions.assertThat ( command.validate ( ) ) . isTrue ( ) ; }
private void add ( ) { if ( ( getWindow ( ) ) != null ) { return ; } setWindow ( new org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel ( this ) ) ; }
public org.ovirt.engine.api.model.Quota get ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ; org.ovirt.engine.api.model.Quota quota = performGet ( VdcQueryType.GetQuotaByQuotaId , params ) ; return quota ; }
public void setbookmark_name ( java.lang.String name ) { this . name = name ; }
public boolean isSetBoot ( ) { return ( this . boot ) != null ; }
public void testVmAppliedBeforeConfig ( ) { setupVmWithSerialNumber ( SerialNumberPolicy.CUSTOM , org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilderTest.CUSTOM_VM_SERIAL ) ; assertSerialNumber ( org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilderTest.CUSTOM_VM_SERIAL ) ; }
protected void updateCustomPropertySheet ( ) { if ( ( getModel ( ) . getCompatibilityVersion ( ) ) != null ) { updateCustomPropertySheet ( getModel ( ) . getCompatibilityVersion ( ) ) ; } }
private void initVds ( ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( new org.ovirt.engine.core.compat.Guid ( "00000000-0000-0000-0000-000000000012" ) ) ; }
private org.ovirt.engine.core.bll.AddQuotaCommand createCommand ( ) { org.ovirt.engine.core.common.action.QuotaCRUDParameters param = new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( mockGeneralStorageQuota ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.AddQuotaCommand ( param , null ) ) ; org.mockito.Mockito.doReturn ( quotaDao ) . when ( command ) . getQuotaDao ( ) ; return command ; }
public void add ( ) { runAddAndVerify ( createNewInterface ( ) , false , org.mockito.Mockito.times ( 0 ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VERSION_3_2 ) ; }
private static double truncatePercentage ( double value ) { return java.lang.Math.min ( 100 , value ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getAllWithQuery ( java.lang.String query ) { return jdbcTemplate.query ( query , org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel clusterNetworkManageModel ) { networks.asEditor ( ) . edit ( clusterNetworkManageModel ) ; initEntityModelCellTable ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . setTestResultImage ( ( ( java.lang.String ) ( model.getTestResult ( ) . getEntity ( ) ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmInit get ( org.ovirt.engine.core.compat.Guid id ) { return getCallsHandler ( ) . executeRead ( "GetVmInitByVmId" , org.ovirt.engine.core.dao.VmInitDaoImpl.VMInitRowMapper.instance , getIdParamterSource ( id ) ) ; }
public void findActiveVmsUsingNetworks ( ) { mockDaos ( true ) ; java.util.List < java.lang.String > vmNames = vmInterfaceManager.findActiveVmsUsingNetworks ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , java.util.Collections.singletonList ( NETWORK_NAME ) ) ; org.junit.Assert.assertTrue ( vmNames.contains ( VM_NAME ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addNetworkInterfaceDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , boolean plugged ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( id , VmDeviceGeneralType.INTERFACE , VmDeviceType.BRIDGE , java.util.Collections.< java.lang.String , java.lang.Object > emptyMap ( ) , plugged , false , null ) ; }
public void testRemoveWithParam ( ) { container.SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; container.removeSession ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert.assertNull ( "Get should return null since the session was removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void setLogo ( com.google.gwt.user.client.ui.Widget widget ) { logoPanel.setWidget ( widget ) ; }
public void testGetAllForConnectionWithInvalidConnection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForConnection ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.getBroker ( ) . desktopLogoff ( mVmId.toString ( ) , java.lang.String.valueOf ( mForce ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.ProceedProxyReturnValue ( ) ; }
private void logException ( java.lang.RuntimeException ex ) { log.errorFormat ( "Command {0} execution failed. Exception: {1}" , org.ovirt.engine.core.vdsbroker.VDSCommandBase.getCommandName ( ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) ) ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( "" ) ; org.junit.Assert.assertFalse ( "Set should fail with an empty session" , container.SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void setiso_path ( java.lang.String value ) { mVmStatic.setiso_path ( value ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { java.lang.String propName = args.propertyName ; if ( propName.equals ( "IsValid" ) ) { onIsValidPropertyChange ( object ) ; } }
public org.ovirt.engine.core.dao.StorageDomainDAO getStorageDomainDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Role object ) { return object.getName ( ) ; }
protected boolean validate ( ) { return org.ovirt.engine.core.bll.storage.pool.SetStoragePoolStatusCommand.checkStoragePool ( ) ; }
public void canDoActionSucceeds ( ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand ( new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ) ) ; prepareMocks ( command ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public static < T > org.ovirt.engine.ui.common.widget.editor.ValueBoxEditorChanger < T > of ( com.google.gwt.user.client.ui.ValueBoxBase < T > valueBox ) { return new org.ovirt.engine.ui.common.widget.editor.ValueBoxEditorChanger ( valueBox ) ; }
public void setStorageName ( java.lang.String storageName ) { getStorageStaticData ( ) . setStorageName ( storageName ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; }
public void runAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback ) { runAction ( actionType , parameters , callback , null ) ; }
private void mockDbDAO ( ) { mockVdsGroupDAO ( ) ; mockVMPoolDAO ( ) ; mockVMTemplateDAO ( ) ; mockVmNetworkInterfaceDao ( ) ; }
private void cancelUpload ( ) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.showCancelUploadDialog ( this , HelpTag.cancel_upload_image_to_domain , getSelectedItems ( ) ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Quota > searchQuota ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getQuotaDao ( ) , true ) ; org.ovirt.engine.core.bll.quota.QuotaManager.getInstance ( ) . updateUsage ( quotaList ) ; return quotaList ; }
protected boolean shouldDestroyOnClose ( ) { return true ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > GetAllTags ( ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Tags > ret = new java.util.ArrayList ( tagsMapByID.values ( ) ) ; ret.remove ( GetRootTag ( ) ) ; return ret ; }
protected boolean checkStorageDomainSharedStatusNotLocked ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean returnValue = ( storageDomain != null ) && ( ( storageDomain.getstorage_domain_shared_status ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Locked ) ) ; if ( ! returnValue ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ; } return returnValue ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.provider.ProviderValidator validator = new org.ovirt.engine.core.bll.provider.ProviderValidator ( getProvider ( ) ) ; return ( validate ( validator.providerIsSet ( ) ) ) && ( super . validate ( ) ) ; }
public void setUp ( ) { comp = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Bookmark > getAll ( ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkSqlParameterSource ( ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromBookmarks" , org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkRowMapper.instance , parameterSource ) ; }
private org.ovirt.engine.core.common.businessentities.Provider < ? > getDeletedProvider ( ) { if ( ( deletedProvider ) == null ) { deletedProvider = org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getProviderDao ( ) . get ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; } return deletedProvider ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { return org.apache.commons.lang.StringUtils.equals ( i.getNetworkName ( ) , net.getname ( ) ) ; }
public void setvds_group_compatibility_version ( org.ovirt.engine.core.compat.Version value ) { if ( org.ovirt.engine.core.compat.Version.OpInequality ( vds_group_compatibility_versionField , value ) ) { this . vds_group_compatibility_versionField = value ; } }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getVds ( ) ) == null ) { return ; } vdsInitialStatus = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getVds ( ) . getStatus ( ) ; installHost ( ) ; }
public void validateFailsWithEmptyBricksList ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutRemoveBricksTask , new java.util.ArrayList < > ( ) ) , null ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected boolean isBalloonEnabled ( ) { java.lang.Boolean balloonEnabled = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . isBalloonEnabled ( ) ; return balloonEnabled != null ? balloonEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.isBalloonEnabled ( getVmId ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmImageDisks ( ) { if ( ( cachedVmImageDisks ) == null ) { cachedVmImageDisks = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( getVmDisks ( ) , true , false , false ) ; } return cachedVmImageDisks ; }
private org.ovirt.engine.core.vdsbroker.VmsMonitoring getVmsMonitoring ( org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher , long fetchTime ) { return new org.ovirt.engine.core.vdsbroker.VmsMonitoring ( vdsManager , fetcher.getChangedVms ( ) , auditLogDirector , fetchTime , isTimeToRefreshStatistics ( ) ) ; }
public org.ovirt.engine.core.compat.Version getCompatibilityVersion ( org.ovirt.engine.core.common.businessentities.VM vm ) { return getCompatibilityVersion ( vm.getStaticData ( ) ) ; }
public void toFile ( java.lang.String krb5ConfPath , java.lang.StringBuffer sb ) throws java.io.FileNotFoundException , java.io.IOException { try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( krb5ConfPath ) ) { fos.write ( sb.toString ( ) . getBytes ( ) ) ; } }
private org.ovirt.engine.api.model.Template getRestModel ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.getModel ( index ) ; }
public void testNewStorageTypes ( ) { org.junit.Assert.assertEquals ( ( "A storage type was added/removed. Update this test, and the isFileDomain/isBlockDomain " + "method accordingly" ) , 9 , org.ovirt.engine.core.common.businessentities.storage.StorageType.values ( ) . length ) ; }
private org.ovirt.engine.core.bll.ImportVmTemplateCommand setupDiskSpaceTest ( final int extraDiskSpaceRequired ) { mcr.mockConfigValue ( ConfigValues.FreeSpaceCriticalLowInGB , extraDiskSpaceRequired ) ; return new org.ovirt.engine.core.bll.TestHelperImportVmTemplateCommand ( createParameters ( ) ) ; }
public static java.lang.String getI18NPrefix ( ) { if ( ( org.ovirt.engine.core.common.config.Config.getConfigUtils ( ) ) == null ) return "" ; else return org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DBI18NPrefix ) ; }
public org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }
private void closeChannel ( ) { try { if ( ( this . channel ) != null ) { this . channel.close ( ) ; } } catch ( java.io.IOException e ) { } finally { this . channel = null ; } }
public java.util.Collection < java.lang.String > getGroupNames ( ) { return new java.util.ArrayList < java.lang.String > ( groupNames ) ; }
public java.lang.Void runInTransaction ( ) { hostDeviceDao.saveAllInBatch ( newDevices ) ; hostDeviceDao.updateAllInBatch ( changedDevices ) ; hostDeviceDao.removeAllInBatch ( removedDevices ) ; handleHostNicVfsConfigUpdate ( ) ; vmDeviceDao.removeAllInBatch ( removedVmDevices ) ; return null ; }
protected void init ( ) { super . init ( ) ; resource.getParent ( ) . mappingLocator = resource.mappingLocator ; resource.getParent ( ) . httpHeaders = httpHeaders ; }
public void setId ( org.ovirt.engine.core.compat.Guid id ) { this . id = id ; }
void processSessionIdException ( ) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe ( "Engine REST API session ID is not available" ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return endAction ( actionType , parameters , null ) ; }
protected final boolean failCanDoAction ( org.ovirt.engine.core.common.errors.EngineMessage message , java.lang.String ... variableReplacements ) { addCanDoActionMessage ( message ) ; for ( java.lang.String variableReplacement : variableReplacements ) { addCanDoActionMessage ( variableReplacement ) ; } return false ; }
public void getUsbPolicyIsSetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) , UsbPolicy.DISABLED ) ; }
public void render ( com.google.gwt.cell.client.Cell.Context context , java.lang.Boolean value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { super . render ( context , value , sb , id ) ; }
protected java.lang.String getNetworkNameReplacement ( ) { return java.lang.String.format ( "$NetworkName %s" , network.getName ( ) ) ; }
public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setGetQuotasExpectations ( ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; }
public static void getWatchdogByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetWatchdog , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addConsoleDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.CONSOLE , VmDeviceType.CONSOLE , getConsoleDeviceSpecParams ( ) , true , false ) ; }
public void testUnknownQuery ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( ) ; org.junit.Assert.assertEquals ( "Wrong type for 'ThereIsNoSuchQuery' " , VdcQueryType.Unknown , org.ovirt.engine.core.bll.TestHelperQueriesCommandType.getQueryTypeFieldValue ( query ) ) ; }
private java.lang.String getLockMessage ( ) { return EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED.name ( ) ; }
void mockSessionDataContainer ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.SSO_TOKEN ) . when ( sessionDataContainer ) . getSsoAccessToken ( org.mockito.Matchers.anyString ( ) ) ; }
public void testGetSystemStatisticsValueWithoutSpecifiedStatus ( ) { int numOfUsers = underTest.getSystemStatisticsValue ( "User" , "" ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.SystemStatisticsDaoImplTest.NUM_OF_USERS_IN_FIXTURES , numOfUsers ) ; }
private static java.lang.String getSysprepDir ( ) { return ( ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DataDir ) ) + ( java.io.File.separator ) ) + "sysprep" ; }
public byte nextByte ( byte b ) { return ( ( byte ) ( nextInt ( b ) ) ) ; }
protected R doPopulate ( R model , Q entity ) { return model ; }
public java.lang.String getStoragePoolName ( ) { if ( ( getStoragePool ( ) ) != null ) { return getStoragePool ( ) . getName ( ) ; } return "" ; }
public void testNullAttr ( ) { org.ovirt.engine.api.types.V4Vm object = objectFromXml ( "<vm></vm>" ) ; org.junit.Assert.assertNull ( object.id ( ) ) ; }
private void setUpMocksForRemove ( boolean hookFound , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { setupMocks ( hookFound , hook ) ; org.mockito.Mockito.when ( vdsDao.getAllForCluster ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( getServers ( status ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel flush ( ) { table.flush ( ) ; nicTable.flush ( ) ; diskTable.flush ( ) ; if ( ( appTable ) != null ) { appTable.flush ( ) ; } return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmPopupView.Driver.driver.flush ( ) ; }
public void postModelEnabled ( boolean enabled ) { messageLabel.setVisible ( ( ! enabled ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { assertEquals ( NAMES [ index ] , model.getUserName ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storage_domains ) { return ( storage_domains.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ; }
public void onHostSelectionChange ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.HostSelectionChangeEvent event ) { updateMainTabSelection ( event.getSelectedItems ( ) ) ; currentSelectedHost = ( event.getSelectedItems ( ) . isEmpty ( ) ) ? null : event.getSelectedItems ( ) . get ( 0 ) ; updateModel ( currentErrataCountModel ) ; }
public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { return storage.getstorage_name ( ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.StoragePool result = dao.getByName ( existingPool.getName ( ) ) ; assertGetResult ( result ) ; }
protected void toggleProfilesAvailability ( ) { getProfiles ( ) . setIsAvailable ( getIsVmNetwork ( ) . getEntity ( ) ) ; }
public void enforceClone ( java.lang.String prohibitReason ) { getClone ( ) . setEntity ( true ) ; getClone ( ) . setIsChangeable ( false ) ; getClone ( ) . setChangeProhibitionReason ( prohibitReason ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model ) { driver.edit ( model ) ; initListeners ( model ) ; updateColumnsAvailability ( model ) ; updateListHeader ( ) ; }
public void updateMinAllocatedMemory ( ) { }
private void invokeCommands ( java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues ) { if ( canRunActions ( returnValues ) ) { if ( isWaitForResult ) { invokeSyncCommands ( ) ; } else { invokeCommands ( ) ; } } }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createSparseDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setVolumeType ( VolumeType.Sparse ) ; return image ; }
void vdsNonOperational ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.common.businessentities.NonOperationalReason type , boolean logCommand , org.ovirt.engine.core.compat.Guid domainId ) ;
private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getOldNetworkCluster ( ) { if ( ( oldNetworkCluster ) == null ) { oldNetworkCluster = org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkClusterDAO ( ) . get ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getNetworkCluster ( ) . getId ( ) ) ; } return oldNetworkCluster ; }
public java.lang.String getPassword ( ) { return ( ( java.lang.String ) ( getData ( org.ovirt.engine.core.bll.session.SessionDataContainer.PASSWORD_PARAMETER_NAME ) ) ) ; }
public void networkNull ( ) throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.validator.NetworkValidator ( null ) ; org.junit.Assert.assertThat ( validator.networkIsSet ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_HAVING_ID_NOT_EXISTS ) ) ; }
public void moveDiskToGluster ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( false ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > object ) { return object.getSecond ( ) . getName ( ) ; }
public void updateRunButton ( org.ovirt.engine.ui.uicommonweb.UICommand command , boolean isPool ) { java.lang.String tooltip = ( isPool ) ? org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants.takeVm ( ) : org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants.runVm ( ) ; runButton.setTooltip ( tooltip ) ; updateButton ( runButton , command ) ; }
private void mockConfigSizeRequirements ( int requiredSpaceBufferInGB ) { mcr.mockConfigValue ( ConfigValues.FreeSpaceCriticalLowInGB , requiredSpaceBufferInGB ) ; }
public static boolean shouldRemoveNetworkFromHostUponNetworkRemoval ( org.ovirt.engine.core.common.businessentities.network.Network persistedNetwork ) { return ( ! ( persistedNetwork.isExternal ( ) ) ) && ( org.ovirt.engine.core.utils.NetworkUtils.isLabeled ( persistedNetwork ) ) ; }
public java.lang.String getVmPoolName ( ) { return ( getVmPool ( ) ) != null ? getVmPool ( ) . getVmPoolName ( ) : null ; }
public void testDumpRepoToString ( ) { java.lang.String actual = OsRepositoryImpl.INSTANCE.toString ( ) ; java.lang.String expected = OsRepositoryImpl.INSTANCE.name ( ) ; org.junit.Assert.assertNotSame ( expected , actual ) ; }
private void mockFenceSuccess ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; org.mockito.Mockito.when ( vdsBrokerFrontend.RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.FenceVds ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters.class ) ) ) . thenReturn ( returnValue ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient createClient ( org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor , java.nio.channels.Selector selector , java.lang.String hostname , int port ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { return new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClient ( reactor , selector , hostname , port ) ; }
public void onSuccess ( java.lang.String suggestedDiskAlias ) { getAlias ( ) . setEntity ( suggestedDiskAlias ) ; }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue ( org.ovirt.engine.core.common.errors.EngineMessage errorMessage ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue ( ) ; returnValue.setSucceeded ( false ) ; returnValue.setExceptionString ( errorMessage.toString ( ) ) ; return returnValue ; }
public void testStorageDomainForMemoryIsValidOnlyForActiveStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus storageDomainStatus ) { storageDomain.setStatus ( storageDomainStatus ) ; org.junit.Assert.assertEquals ( filter.test ( storageDomain ) , ( storageDomainStatus == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) ; }
public C list ( ) { return mapCollection ( getBackendCollection ( queryType , queryParams ) ) ; }
org.ovirt.engine.api.model.Nic get ( ) ;
public void testMonitoringNeededByStatus ( ) { org.junit.Assert.assertEquals ( underTest.isMonitoringNeeded ( status ) , monitoringNeeded ) ; }
private void attachManagementNetwork ( ) { final org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = org.ovirt.engine.core.bll.AddClusterCommand.createManagementNetworkCluster ( ) ; networkCluster.setClusterId ( org.ovirt.engine.core.bll.AddClusterCommand.getClusterId ( ) ) ; networkClusterDao.save ( networkCluster ) ; }
public void bondWithNoSlaves ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; mockExistingIfaces ( bond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( bond ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.StorageDomain source ) { return id.equals ( source.getId ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . clusterNetworkSubTabLabel ( ) , 1 , ginjector.getSubTabClusterNetworkModelProvider ( ) ) ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createLabelParametersMapper ( org.ovirt.engine.core.compat.Guid vfsConfigId , java.lang.String label ) { return getCustomMapSqlParameterSource ( ) . addValue ( "vfs_config_id" , vfsConfigId ) . addValue ( "label" , label ) ; }
org.ovirt.engine.core.dal.dbbroker.SimpleJdbcCallsHandler.CallCreator createCallForModification ( final java.lang.String procedureName ) { return ( ) -> new org.springframework.jdbc.core.simple.SimpleJdbcCall ( jdbcTemplate ) . withProcedureName ( procedureName ) ; }
public boolean isStatusUp ( ) { return org.ovirt.engine.core.common.businessentities.VM.isStatusUp ( getStatus ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { setWindow ( null ) ; }
public void getConfigFromCache ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configValue , version ) ; getConfigFromCache ( parameters , aQuery ) ; }
void logout ( org.ovirt.engine.ui.frontend.communication.UserCallback < ? > callback ) ;
public static long macToLong ( java.lang.String mac ) { final int HEX_RADIX = 16 ; java.lang.String macWithoutCommas = mac.replaceAll ( ":" , "" ) ; return java.lang.Long.parseLong ( macWithoutCommas , HEX_RADIX ) ; }
public void setpm_type ( java.lang.String value ) { mVdsStatic.setpm_type ( value ) ; }
public java.lang.String toString ( ) { java.lang.String prefix = "" ; if ( ( TotalMilliseconds ) < 0 ) { prefix = "-" ; } return java.lang.String.format ( "%s%d.%02d:%02d:%02d.%03d" , prefix , Days , Hours , Minutes , Seconds , Milliseconds ) ; }
public void updateHosts ( ) { }
public org.ovirt.engine.core.common.businessentities.DbUser getByUsername ( java.lang.String username ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "username" , username ) ; return getCallsHandler ( ) . executeRead ( "GetUserByUserName" , org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserRowMapper.instance , parameterSource ) ; }
public void setVolumeFormat ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat ) { getImage ( ) . setVolumeFormat ( volumeFormat ) ; }
public org.ovirt.engine.api.model.Template get ( ) { org.ovirt.engine.api.model.Template template = performGet ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( guid ) ) ; if ( template != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , template ) ; } return template ; }
public void testSave ( ) { dao.save ( newPool ) ; org.ovirt.engine.core.common.businessentities.StoragePool result = dao.getByName ( newPool.getName ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newPool , result ) ; }
public void calculateNetworkImplementationDetailsManagedNetwork ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertManaged ( iface , true , createNetwork ( iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > getSysprepScript ( ) { return privateSysprepScript ; }
private boolean validate ( ) { return true ; }
protected void init ( ) { super . init ( ) ; }
public void updateGlusterHookStatus ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) ;
protected org.ovirt.engine.core.common.scheduling.AffinityGroup getNewAffinityGroup ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup affinityGroup = super . getNewAffinityGroup ( ) ; affinityGroup.setEntityIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ; affinityGroup.getEntityIds ( ) . add ( getEntity ( ) . getId ( ) ) ; return affinityGroup ; }
protected org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand < ? extends org.ovirt.engine.core.common.action.ActionGroupsToRoleParameter > generateCommand ( ) { return new org.ovirt.engine.core.bll.DetachActionGroupsFromRoleCommand ( getParams ( ) , null ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( boolean glusterEnabled ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( clusterId ) ; cluster.setVirtService ( false ) ; cluster.setGlusterService ( glusterEnabled ) ; return cluster ; }
public boolean isManagemet ( ) { return org.ovirt.engine.core.compat.StringHelper.stringsEqual ( getNetwork ( ) . getName ( ) , org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.ENGINE_NETWORK ) ; }
private org.ovirt.engine.core.common.businessentities.vm_pools mockVmPools ( ) { org.ovirt.engine.core.common.businessentities.vm_pools pool = new org.ovirt.engine.core.common.businessentities.vm_pools ( ) ; pool.setvm_pool_name ( "simplePoolName" ) ; pool.setvds_group_id ( vdsGroupId ) ; pool.setvm_pool_id ( vmPoolId ) ; return pool ; }
public void canDoActionFailsWithDuplicateBricks ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId2 , getBricks ( volumeId2 , 1 , true ) , 2 , 0 , false ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public void testClusterAppliedBeforeConfig ( ) { setupClusterWithSerialNumber ( SerialNumberPolicy.VM_ID , null ) ; assertSerialNumber ( org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilderTest.VM_ID.toString ( ) ) ; }
public static java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > findPrincipalsByQuery ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final java.lang.String query ) { return org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipals ( extension , namespace , org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap ( query , Authz.QueryEntity.PRINCIPAL ) , false , false ) ; }
public void sendMessage ( byte [ ] message ) { send ( new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . message ( ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION , org.ovirt.vdsm.jsonrpc.client.reactors.stomp.RESPONSE_QUEUE ) . withContent ( message ) . build ( ) ) ; }
public void validateNonExternalStepFails ( ) throws java.lang.Exception { parameters.setJobId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.jobId ) ; parameters.setId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.nonExternalStepId ) ; org.junit.Assert.assertTrue ( ( ! ( command.validate ( ) ) ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.VmTemplate baseTemplate ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateCouple = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion ( baseTemplate , template ) ; setReadOnlyTemplateWithVersion ( templateCouple ) ; }
void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader header , java.lang.String width ) ;
public void setKsmPolicyForNuma ( java.lang.Boolean ksmPolicyForNumaFlag ) { if ( ksmPolicyForNumaFlag == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.KsmPolicyForNuma ksmPolicyForNuma = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.KsmPolicyForNuma.shareAcrossNumaNodes ; if ( ! ksmPolicyForNumaFlag ) { ksmPolicyForNuma = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.KsmPolicyForNuma.shareInsideEachNumaNode ; } getKsmPolicyForNumaSelection ( ) . setSelectedItem ( ksmPolicyForNuma ) ; return ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.VDS source ) { return source.getStatus ( ) . equals ( status ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . getDiskList ( ) . size ( ) ) ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( object ) ) . getName ( ) ; }
public void markAsValid ( ) { if ( editorStateValid ) { super . markAsValid ( ) ; } label.setEnabled ( true ) ; contentWidgetContainerTooltip.setText ( contentWidgetContainerConfiguredTooltip ) ; }
public int compare ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel o1 , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel o2 ) { return o1.getCluster ( ) . getName ( ) . compareTo ( o2.getCluster ( ) . getName ( ) ) ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network.getName ( ) ; }
public org.ovirt.engine.api.v3.servers.V3VmNicsServer getNicsResource ( ) { return new org.ovirt.engine.api.v3.servers.V3VmNicsServer ( id , delegate.getNicsResource ( ) ) ; }
public void setIsLogedin ( boolean value ) { isLoggedIn = value ; }
protected java.lang.String cdPathWindowsToLinux ( java.lang.String url ) { return cdPathWindowsToLinux ( url , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) ) ; }
public void calculateNetworkImplementationDetailsNetworkIsSyncWithMtuUnset ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , true , iface.getNetworkName ( ) , iface.isBridged ( ) , 0 , iface.getVlanId ( ) ) ; }
public void serializeNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serialezer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer ( ) ; junit.framework.Assert.assertTrue ( ( ( serialezer.serialize ( net ) . length ( ) ) > 0 ) ) ; }
public static boolean IsActiveStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean isActive = ( ( storageDomain.getstatus ( ) ) != null ) && ( ( storageDomain.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ; return isActive ; }
public void onSuccess ( java.lang.Boolean returnValue ) { model.getIsVirtioScsiEnabled ( ) . setEntity ( returnValue ) ; callAfterUpdates ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { timeZoneEditor.setEnabled ( model.getTimeZoneEnabled ( ) . getEntity ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > getFenceAgents ( ) { return getBackendCollection ( QueryType.GetFenceAgentsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ) ; }
private void updateActionAvailability ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( ) ; if ( vds != null ) { getSyncStorageDevicesCommand ( ) . setIsExecutionAllowed ( ( ( vds.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) ; } }
public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( object.getReadOnly ( ) ) { return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.readOnly ( ) ; } return null ; }
protected org.ovirt.engine.core.utils.ovf.xml.XmlNode selectSingleNode ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node , java.lang.String pattern , org.ovirt.engine.core.utils.ovf.xml.XmlNamespaceManager ns ) { this . lastReadEntry = pattern ; if ( ns == null ) { return node.selectSingleNode ( pattern ) ; } return node.selectSingleNode ( pattern , ns ) ; }
public void onSuccess ( java.lang.String returnValue ) { hostModel.setPmProxyPreferences ( returnValue ) ; }
public void testGetOsFamily ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "linux" , OsRepositoryImpl.INSTANCE.getOsFamily ( 777 ) ) ; }
org.ovirt.engine.ui.webadmin.widget.host.BondPanel createBondPanel ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel , org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.ui.webadmin.widget.host.BondPanel panel = new org.ovirt.engine.ui.webadmin.widget.host.BondPanel ( lineModel , vds ) ; panel.setWidth ( "100%" ) ; panel.setHeight ( "100%" ) ; return panel ; }
private void addVolumeToDb ( final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity createdVolume ) { createdVolume.setClusterId ( getVdsGroupId ( ) ) ; getGlusterVolumeDao ( ) . save ( createdVolume ) ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.api.model.Network.class ) , false , false , index ) ; }
private boolean isVmMigratingToThisVds ( ) { return isVmMigratingToThisVds ( dbVm.getStatus ( ) , dbVm.getMigratingToVds ( ) ) ; }
private void stubDaos ( ) { mockVmDynamic ( ) ; mockVmStatic ( true ) ; mockVdsDao ( ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > vmTemplates ) { prefetchIcons ( vmTemplates ) ; }
protected boolean isSlave ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String masterName ) { return ( ( iface.getBondName ( ) ) != null ) && ( iface.getBondName ( ) . equals ( masterName ) ) ; }
protected boolean validate ( ) { Q validator = getProfileValidator ( ) ; return ( ( validate ( validator.profileIsSet ( ) ) ) && ( validate ( validator.profileExists ( ) ) ) ) && ( validate ( validator.isLastProfileInParentEntity ( ) ) ) ; }
public void setTitle ( java.lang.String title ) { org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . setHeader ( title ) ; }
public void setUpBase ( ) { org.mockito.MockitoAnnotations.initMocks ( this ) ; org.ovirt.engine.core.bll.BaseCommandTest.injectorRule.bind ( javax.transaction.TransactionManager.class , transactionManager ) ; }
public void excuteCommandTest ( ) { command.executeCommand ( ) ; org.junit.Assert.assertEquals ( AuditLogType.USER_ADDED_AFFINITY_GROUP , command.getAuditLogTypeValue ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VmStatic getUpdatable ( java.lang.String isoPath ) { org.ovirt.engine.core.common.businessentities.VmStatic updatable = getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( parentId ) , parentId.toString ( ) ) . getStaticData ( ) ; updatable.setIsoPath ( isoPath ) ; return updatable ; }
public void init ( ) throws javax.servlet.ServletException { pkiResources = org.ovirt.engine.core.utils.PKIResources.getInstance ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel flush ( ) { return driver.flush ( ) ; }
public void init ( ) { startProgress ( null ) ; setTitle ( constants.importVirtualMachinesTitle ( ) ) ; setHelpTag ( HelpTag.import_virtual_machine ) ; setHashName ( "import_virtual_machine" ) ; initDataCenters ( ) ; }
private void initDestStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; destDomain.setstatus ( StorageDomainStatus.Active ) ; destDomain.setstorage_type ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( destDomain ) . when ( command ) . getStorageDomain ( ) ; }
private void createDummyPolicyUnit ( ) { dummyPolicyUnit = new org.ovirt.engine.core.common.scheduling.PolicyUnit ( ) ; dummyPolicyUnit.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; dummyPolicyUnit.setName ( "Dummy policy unit" ) ; }
private void expectGetLunsMap ( ) { for ( java.lang.String GUID : org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.GUIDS ) { expectGetLunsMap ( GUID , GUID ) ; } }
protected org.ovirt.engine.core.common.businessentities.DiskImage cloneDiskImage ( org.ovirt.engine.core.compat.Guid newImageGuid ) { return cloneDiskImage ( newImageGuid , getDiskImage ( ) ) ; }
java.util.Map < java.lang.String , java.lang.String > allocate ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile , org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.businessentities.VDS host ) ;
public void add ( ) { runAddAndVerify ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , true ) ; }
protected java.lang.String getActiveTabHistoryToken ( ) { return activeTabHistoryToken ; }
public java.lang.String getName ( ) { return this . vmStatic.getName ( ) ; }
org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( ) ;
protected void vdsNonOperational ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.util.Map < java.lang.String , java.lang.String > customLogValues ) { getEventListener ( ) . vdsNonOperational ( vds.getId ( ) , reason , true , Guid.Empty , customLogValues ) ; }
public void setElapsedTime ( java.lang.Double elapsedTime ) { this . elapsedTime = elapsedTime ; }
public java.lang.String getCandidateDisplayName ( ) { return getVmTemplateData ( ) . getName ( ) ; }
private void isAutoAssign_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ! ( getIsAutoAssign ( ) . getEntity ( ) ) ) { getDefaultHost ( ) . setIsChangeable ( true ) ; } }
private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > searchStoragePool ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getStoragePoolDao ( ) , true ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNewNetwork ( boolean isVmNetwork , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setVmNetwork ( isVmNetwork ) ; network.setname ( networkName ) ; return network ; }
protected abstract void initHeader ( ) ;
protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters ( ) { return new org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; }
public void testJsonDiskDescription ( ) throws java.io.IOException { disk.setDiskAlias ( "DiskAlias" ) ; disk.setDiskDescription ( "DiskDescription" ) ; assertDiskDescriptionMap ( disk ) ; }
public void defaultEndtime ( ) { final long epochOffset = 0 ; final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase ( ) ; org.junit.Assert.assertEquals ( epochOffset , t.getEndTime ( ) ) ; }
public void onSuccess ( java.lang.Object ReturnValue ) { setItems ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.network.NetworkView value ) { if ( ( value == null ) || ( ! ( value.equals ( getEntity ( ) ) ) ) ) { super . setEntity ( value ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel.maxDiskSize = ( ( java.lang.Integer ) ( returnValue ) ) ; }
public void getUsbPolicyUsbTypeNative ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.NATIVE ) ; assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
public void setActualSize ( double size ) { actualSize = size ; }
public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return runConnectionStorageToDomain ( storageDomain , vdsId , VDSCommandType.DisconnectStorageServer.getValue ( ) ) ; }
public void setVdsGroupCompatibilityVersion ( org.ovirt.engine.core.compat.Version value ) { vdsGroupCompatibilityVersion = value ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > returnValue ) { networkProfiles = returnValue ; initNetworksList ( ) ; initClusterAndStorage ( dataCenter ) ; }
public abstract < T > T getValue ( org.ovirt.engine.core.common.config.ConfigValues configValue , java.lang.String version ) ;
private org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator createNetworkAttachmentValidator ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachmentToValidate ) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator ( attachmentToValidate , host , networkClusterDao , networkDao , vdsDao , vmDao ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( ) ; } } , externalVms ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > hosts ) { org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts ( ) ; externalDiscoveredHostsListModel.setItems ( hosts ) ; externalDiscoveredHostsListModel.setIsChangeable ( true ) ; }
public boolean isInitialized ( ) { return this . vmStatic.isInitialized ( ) ; }
public void updateAll ( java.lang.String procedureName , java.util.Collection < T > entities ) { if ( procedureName == null ) { procedureName = org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getProcedureNameForUpdate ( ) ; } for ( T entity : entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.update ( entity , procedureName ) ; } }
public java.util.Collection < java.lang.String > findProblematicMacs ( org.ovirt.engine.core.common.businessentities.VM vm ) { vm.setClusterId ( clusterId ) ; return externalVmMacsFinder.findExternalMacAddresses ( vm ) ; }
public void areAllVfsFreeFalseHasNetwork ( ) { freeVfCommon ( 2 , 0 , 0 , 3 , 0 , 0 ) ; org.junit.Assert.assertFalse ( networkDeviceHelper.areAllVfsFree ( nic ) ) ; }
public void setStorage ( java.lang.String storage ) { getStorageStaticData ( ) . setStorage ( storage ) ; }
public void setUp ( ) throws java.lang.Exception { setUpMockQueryParameters ( ) ; setUpSpyQuery ( ) ; }
public java.lang.String getDefaultBondingOption ( ) { return "mode=802.3ad miimon=150" ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.ArrayList < java.lang.String > images = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; setImagesToModel ( model , images ) ; }
public void setup ( ) { dbFacade = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; initAgents ( ) ; mockDbFacades ( ) ; initCommand ( ) ; }
public org.ovirt.engine.api.model.StorageConnection update ( org.ovirt.engine.api.model.StorageConnection connection ) { return performUpdate ( connection , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase.class ) , VdcActionType.UpdateStorageServerConnection , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionResource.UpdateParametersProvider ( ) ) ; }
private void addStorageDomainOvfInfoToDb ( org.ovirt.engine.core.compat.Guid diskId ) { org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo = new org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo ( org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getStorageDomainId ( ) , null , diskId , org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.DISABLED , null ) ; org.ovirt.engine.core.bll.CreateOvfVolumeForStorageDomainCommand.getStorageDomainOvfInfoDao ( ) . save ( storageDomainOvfInfo ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; org.ovirt.engine.api.model.Watchdog watchdog = resource.get ( ) ; verifyModel ( watchdog ) ; }
void setTooltipText ( java.lang.String tooltipText ) { tooltip.setText ( tooltipText ) ; }
public void testCleanNotExpiredUsersSessionsNoUsers ( ) { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.mockito.Mockito.verifyZeroInteractions ( dbUserDAOMcok ) ; }
public void setTotalDiskSize ( java.lang.Integer value ) { value = ( value == null ) ? 0 : value ; if ( ! ( totalDiskSize.equals ( value ) ) ) { totalDiskSize = value ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.Network n ) { return n.getname ( ) . equals ( getInterface ( ) . getNetworkName ( ) ) ; }
protected void updateDisksFromDb ( org.ovirt.engine.core.common.businessentities.VmTemplate t ) { org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb ( t ) ; }
protected void finalize ( ) { close ( ) ; }
public void setClientIp ( java.lang.String clientIp ) { if ( ! ( java.util.Objects.equals ( this . clientIp , clientIp ) ) ) { this . clientIp = clientIp ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "ClientIp" ) ) ; } }
protected boolean isDiskExist ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator ( disk ) ; return ( validate ( diskValidator.isDiskExists ( ) ) ) && ( validate ( diskValidator.isDiskAttachedToVm ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm ( ) ) ) ) ; }
protected com.google.gwt.editor.client.EditorVisitor getEditorVisitor ( ) { if ( ( visitor ) == null ) { visitor = new org.ovirt.engine.ui.common.editor.UiCommonEditorVisitor ( getEventMap ( ) , getOwnerModels ( ) ) ; } return visitor ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > devices ) { java.util.Collections.sort ( devices , new org.ovirt.engine.ui.uicommonweb.Linq.StorageDeviceComparer ( ) ) ; setItems ( devices ) ; }
public void formatStringTest4 ( ) { testMessages.addFallback ( DynamicMessageKey.APPLICATION_TITLE , "Testing 123: {0}.{1}.{0}" ) ; java.lang.String result = testMessages.formatString ( DynamicMessageKey.APPLICATION_TITLE , "1" , "2" , "3" ) ; org.junit.Assert.assertEquals ( "Result should be 'Testing 123: 1.1.1'" , "Testing 123: 1.2.1" , result ) ; }
public void setBalloonEnabled ( boolean isBallonEnabled ) { balloonEnabled = isBallonEnabled ; }
public void setForceHelp ( java.lang.String forceHelpText ) { boolean isForceHelpNonEmpty = forceHelpText != null ; if ( isForceHelpNonEmpty ) { geoRepForceHelpIcon.setTitle ( forceHelpText ) ; } geoRepForceHelpIcon.setVisible ( isForceHelpNonEmpty ) ; }
protected boolean isVisible ( org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value ) { return ( super . isVisible ( value ) ) && ( ( value.getAsyncTask ( ) . getType ( ) ) == ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK ) ) ; }
protected abstract void onUpdateDocumentationBaseURL ( ) ;
protected boolean canDoAction ( ) { org.ovirt.engine.core.bll.validator.UpgradeHostValidator validator = new org.ovirt.engine.core.bll.validator.UpgradeHostValidator ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds ( ) ) ; return ( validate ( validator.hostExists ( ) ) ) && ( validate ( validator.statusSupportedForHostUpgradeInternal ( ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateTabsData ( snapshotModel ) ; }
protected void processImages ( ) { processImages ( ( ! ( org.ovirt.engine.core.bll.ImportVmCommand.isImagesAlreadyOnTarget ( ) ) ) ) ; if ( org.ovirt.engine.core.bll.ImportVmCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . isEmpty ( ) ) { endVmRelatedOps ( ) ; } }
public void canDoActionFails ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId1 , getBricks ( volumeId1 , 2 ) , 0 , 4 , false ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
private void mockDaos ( ) { mockVmDao ( ) ; mockDiskImageDao ( ) ; mockStoragePoolDao ( ) ; mockValidators ( ) ; }
public void setvds_group_id ( org.ovirt.engine.core.compat.Guid value ) { this . mVdsStatic.setvds_group_id ( value ) ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ; }
public void calculateNetworkImplementationDetailsEmptyNetworkName ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; iface.setNetworkName ( "" ) ; org.junit.Assert.assertNull ( "Network implementation details should not be filled." , org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails ( null , null , iface ) ) ; }
public void getVmWatchdogTypes ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetVmWatchdogTypes , osId , version ) , asyncQuery ) ; }
public org.ovirt.engine.core.common.businessentities.NonOperationalReason getNonOperationalReason ( ) { return nonOperationalReason ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( ) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) ; params.setSessionId ( getEngineSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . logoff ( params ) ; return returnValue ; }
protected java.lang.String getProtocol ( ) { return urlobj.getProtocol ( ) ; }
public void setSELinuxEnforceMode ( java.lang.Integer value ) { selinuxEnforceMode = org.ovirt.engine.core.common.businessentities.SELinuxMode.fromValue ( value ) ; }
public void setEditPolicyCommand ( org.ovirt.engine.ui.uicommonweb.UICommand value ) { privateEditPolicyCommand = value ; }
public abstract org.ovirt.engine.core.aaa.AuthenticationResult authenticate ( java.lang.String name , java.lang.String password ) ;
private void localize ( ) { isPluggedEditor.setLabel ( constants.activateVmDiskPopup ( ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _parser.cliEnvironmentSet ( "OVIRT_ENGINE/correlationId" , _correlationId ) ; return true ; }
public void setvms_cores_count ( java.lang.Integer value ) { this . mVdsDynamic.setvms_cores_count ( value ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.StoragePool source ) { return ( source.getStatus ( ) ) == ( status ) ; }
public void setDiskStorageMap ( java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.util.ArrayList < org.ovirt.engine.core.compat.Guid > > value ) { diskStorageMap = value ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue value ) { setDiskProfilesList ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > ) ( value.getReturnValue ( ) ) ) ) ; }
protected void init ( ) { super . init ( ) ; if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) != null ) { needsHostDevices = hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } loadVmInit ( ) ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; resource.setParent ( getCollectionResourceMock ( ) ) ; org.ovirt.engine.api.model.Hook hook = resource.get ( ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME , hook.getEventName ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getModel ( ) ) != null ) && ( handleItemsChangedEvent ( ) ) ) { updateData ( ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { revealStorageView ( disk ) ; }
public void setupMocks ( ) { setUpCommand ( ) ; mockVds ( ) ; mockDbDao ( ) ; command.init ( ) ; }
public void testDisksUsages ( ) { java.lang.Object [ ] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.initDisksUsageData ( ) ; java.util.Map < java.lang.String , java.lang.Object > map = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , map ) ; }
public java.lang.String toString ( ) { return ( "Host[" + ( ( mVdsStatic ) == null ? "null" : mVdsStatic.getName ( ) ) ) + "]" ; }
public org.ovirt.engine.core.bll.ValidationResult statusSupportedForHostUpgrade ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL ) . unless ( org.ovirt.engine.core.common.VdcActionUtils.canExecute ( java.util.Arrays.asList ( host ) , org.ovirt.engine.core.common.businessentities.VDS.class , VdcActionType.UpgradeHost ) ) ; }
public org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey update ( org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey resource ) { return performUpdate ( resource , new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetLibvirtSecretById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , VdcActionType.UpdateLibvirtSecret , new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeAuthenticationKeyResource.UpdateParametersProvider ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VDS get ( org.ovirt.engine.core.compat.Guid id ) { return get ( id , null , false ) ; }
public java.lang.String getName ( ) { return this . mVdsStatic.getName ( ) ; }
public java.lang.String getMessage ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 ) { return getVerb ( op1 ) ; }
public org.ovirt.engine.core.compat.Guid getMigratingToVds ( ) { return this . vmDynamic.getMigratingToVds ( ) ; }
public boolean isMacInUse ( java.lang.String mac ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lockObj.readLock ( ) ) ) { return macsStorage.isMacInUse ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( mac ) ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllForVm ( org.ovirt.engine.core.compat.Guid id ) { return getAllForVm ( id , false ) ; }
protected void proceedProxyReturnValue ( ) { proceedConnectProxyReturnValue ( ) ; }
public java.lang.String getSearchString ( ) { if ( ( searchString ) == null ) { return null ; } return ( searchString ) + ( ( pagingSearchString ) == null ? "" : pagingSearchString ) ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
protected org.ovirt.engine.core.compat.Guid getStoragePoolIdFromSourceImageContainer ( ) { return org.ovirt.engine.core.bll.AddVmCommand.getVmTemplate ( ) . getStoragePoolId ( ) . getValue ( ) ; }
private void doStop ( ) { reset ( ) ; cancel ( ) ; }
public org.ovirt.engine.core.common.businessentities.VdsStatic get ( org.ovirt.engine.core.compat.Guid id ) { return getCallsHandler ( ) . executeRead ( "GetVdsStaticByVdsId" , org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
protected java.util.Map < java.lang.String , java.lang.String > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId ( ) . toString ( ) , LockingGroup.VM.name ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hostList = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; hostList.add ( 0 , null ) ; getHostList ( ) . setItems ( hostList ) ; }
public void snapshotName ( ) { b.setSnapshotName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; final java.lang.String s = b.getSnapshotName ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , s ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePoolStatus getRawValue ( org.ovirt.engine.core.common.businessentities.StoragePool object ) { return object.getStatus ( ) ; }
private native java.lang.String getValue ( ) ;
protected org.ovirt.engine.core.compat.Guid getExistingEntityId ( ) { return new org.ovirt.engine.core.compat.Guid ( "1115c1c6-cb15-4832-b2a4-023770607111" ) ; }
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback , final java.lang.Object state ) { runMultipleAction ( actionType , parameters , false , callback , state ) ; }
private void mockVmDaoGetVm ( ) { org.mockito.Mockito.when ( vmDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vm ) ; }
public void setUserId ( final org.ovirt.engine.core.compat.Guid value ) { mUserId = value ; }
protected void postAction ( ) { resetData ( ) ; updateOptions ( ) ; }
private void mockVds ( ) { mockGetStorageDomainList ( 100 , 100 ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel ) ( result.getState ( ) ) ) ; localModel.getWindow ( ) . StopProgress ( ) ; Cancel ( ) ; }
public boolean getClusterDefaultCountThreadsAsCores ( ) { return false ; }
public java.lang.Void runInTransaction ( ) { processOldImageFromDb ( ) ; addDiskImageToDb ( newDiskImage , getCompensationContext ( ) , java.lang.Boolean.TRUE ) ; setActionReturnValue ( newDiskImage ) ; setSucceeded ( true ) ; return null ; }
protected void setActionMessageParameters ( ) { super . setActionMessageParameters ( ) ; addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__REMOVE ) ; }
public void testBeanValidations ( ) { org.junit.Assert.assertTrue ( createCommand ( initializeMock ( 1 , 1 ) ) . validateInputs ( ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Label > vmLabelsList ) { labelList.setItems ( allLabels ) ; labelList.setSelectedItems ( vmLabelsList ) ; }
public org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network network ) { network.setCluster ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) ) ; network.getCluster ( ) . setId ( clusterId ) ; return network ; }
public boolean remove ( java.util.Set < java.lang.String > memoryStates ) { return removeMemoryVolumes ( memoryStates ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter completer = null ; if ( ( org.ovirt.engine.core.searchbackend.NetworkConditionFieldAutoCompleter.STP.equals ( fieldName ) ) || ( org.ovirt.engine.core.searchbackend.NetworkConditionFieldAutoCompleter.VM_NETWORK.equals ( fieldName ) ) ) { completer = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } return completer ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineNetworkInterfacePresenter.constants.virtualMachineNetworkInterfaceSubTabLabel ( ) , 1 , modelProvider ) ; }
private void doQueryClose ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) throws java.sql.SQLException { authorization.closeQuery ( input.get ( Authz.InvokeKeys.QUERY_OPAQUE , java.lang.String.class ) ) ; }
public int getVlanId ( ) { java.lang.Integer vlanId = getEntity ( ) . getvlan_id ( ) ; return vlanId == null ? - 1 : vlanId ; }
public void sameBondNameSentTwice ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; mockExistingIfaces ( bond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( bond , bond ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_INTERFACES_ALREADY_SPECIFIED , bond.getName ( ) ) ; }
private void providers_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviders ( ) . getSelectedItem ( ) ; setEnableSearchHost ( ( provider != null ) ) ; }
private void markHostDevicesAsUsed ( ) { if ( needsHostDevices ) { hostDeviceManager.allocateVmHostDevices ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } }
public void newNetwork ( ) { if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.NewNetworkModel ( this ) ; setWindow ( networkModel ) ; initDcList ( networkModel ) ; }
public void noVdsGroup ( ) { simulateVdsGroupDoesNotExist ( ) ; assertCanDoActionFailure ( VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID.toString ( ) ) ; }
public void testListWithCustomGlobalHeader ( ) { clustersService.list ( ) . send ( ) ; org.junit.Assert.assertEquals ( "value" , getLastRequestHeaders ( ) . get ( "my" ) . getFirst ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result.getReturnValue ( ) ; postSaveAction ( null , ( ( retVal != null ) && ( retVal.getSucceeded ( ) ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( org.ovirt.engine.core.bll.gluster.GlusterVolumeCommandBase.getGlusterVolume ( ) ) != null ) { setVdsGroupId ( org.ovirt.engine.core.bll.gluster.GlusterVolumeCommandBase.getGlusterVolume ( ) . getClusterId ( ) ) ; } return super . getVdsGroup ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; diskDao = dbFacade.getBaseDiskDao ( ) ; existingTemplate = dao.get ( org.ovirt.engine.core.dao.FixturesTool.TEMPLATE_IMAGE_ID ) ; }
public boolean equalValues ( org.ovirt.engine.core.common.businessentities.qos.QosBase other ) { return false ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType determineSnapshotType ( ) { return org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.isInternalExecution ( ) ? getParameters ( ) . getSnapshotType ( ) : org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.REGULAR ; }
protected static boolean canAttachNonPrestartedVmToUser ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < java.lang.String > messages ) { return org.ovirt.engine.core.bll.VmPoolCommandBase.isVmFree ( vmId , messages ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > bonds = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; allBonds = bonds ; }
public void removeAllCommandsInHierarchy ( final org.ovirt.engine.core.compat.Guid commandId ) { for ( org.ovirt.engine.core.compat.Guid childCmdId : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( getChildCommandIds ( commandId ) ) ) { removeAllCommandsInHierarchy ( childCmdId ) ; } removeCommand ( commandId ) ; }
public void setStoragePoolId ( org.ovirt.engine.core.compat.Guid storagePoolId ) { getStoragePoolIsoMapData ( ) . setStoragePoolId ( storagePoolId ) ; }
public void testConvertFieldEnumValueToActualValue ( ) { org.junit.Assert.assertEquals ( "MACE" , "4" , comp.convertFieldEnumValueToActualValue ( "MACE" ) ) ; org.junit.Assert.assertEquals ( "mace" , "4" , comp.convertFieldEnumValueToActualValue ( "mace" ) ) ; }
private org.ovirt.engine.core.common.businessentities.Snapshot getDstSnapshot ( ) { if ( ( cachedSnapshot ) == null ) { cachedSnapshot = org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters ( ) . getDstSnapshotId ( ) ) ; } return cachedSnapshot ; }
public void initTest ( ) { initialSetup ( ) ; initCommand ( ) ; }
public void setupMocks ( ) { mockGlobalParameters ( ) ; setUpCommand ( ) ; mockVds ( ) ; mockDbDao ( ) ; command.init ( ) ; }
public boolean getIsAvailable ( ) { return ( getDetailModel ( ) . getExternalId ( ) ) != null ; }
public void add ( ) { runAddAndVerify ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , true ) ; }
public void onUserPortalModelInit ( org.ovirt.engine.ui.userportal.uicommon.model.UserPortalModelInitEvent event ) { connectAutomaticallyManager.registerModel ( provider.getModel ( ) ) ; }
public org.ovirt.engine.core.compat.Guid getId ( ) { return Id ; }
public static boolean checkImagesLocked ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < java.lang.String > messages ) { return org.ovirt.engine.core.bll.ImagesHandler.checkImagesLocked ( messages , org.ovirt.engine.core.bll.ImagesHandler.getImages ( vmId , null ) ) ; }
public void testValidateStoragePoolRandomStoragePoolId ( ) { command.setStoragePoolId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( "" , command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST ) ; }
private void stubFailedCalls ( ) { org.mockito.Mockito.when ( resourceManager.runVdsCommand ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( getFailedVdsReturnValue ( ) ) ; }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm , vm.getstatus ( ) ) ; org.ovirt.engine.core.bll.VmHandler.UnLockVm ( vm ) ; compensationContext.stateChanged ( ) ; return null ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__COPY ) ; addValidationMessage ( EngineMessage.VAR__TYPE__VM_TEMPLATE ) ; }
private static < T > void excludeExceptions ( T dstobj ) { for ( java.lang.String field : org.ovirt.engine.sdk.mapping.Mapper.MAPPING_EXCEPTIONS ) { try { org.apache.commons.beanutils.PropertyUtils.setProperty ( dstobj , field , null ) ; } catch ( java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException | java.lang.NoSuchMethodException e ) { } } }
public void testLoginNameAtDirectoryWhenDirectorySet ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; user.setLoginName ( "Legolas" ) ; user.setDomain ( "MiddleEarth.com" ) ; command.setCurrentUser ( user ) ; org.junit.Assert.assertEquals ( "Legolas@MiddleEarth.com" , command.getConsoleUserName ( ) ) ; }
public void testGetByNameAndCluster ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao.getByNameAndCluster ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME , cluster ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME , result.getname ( ) ) ; }
public short nextShort ( short s ) { return ( ( short ) ( nextInt ( s ) ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return object.getName ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Network > getNetworkList ( ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > ( ) ; list.add ( network ) ; return list ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qoss ) { qosById = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( qoss ) ; queryInterfaces ( ) ; }
private void mockDiskImageDao ( ) { org.mockito.Mockito.when ( diskImageDao.getSnapshotById ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList ( ) . get ( 0 ) ) ; }
private java.lang.String readFileTemplate ( ) throws java.io.FileNotFoundException { return org.ovirt.engine.sdk.codegen.utils.FileUtils.getFileContent ( ( ( getTemplatePath ( ) ) + ( getName ( ) ) ) ) ; }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback , final java.lang.Object state ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( actionType , parameters , ( callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK ) , state , true ) ; }
public synchronized org.ovirt.engine.api.model.RSDL getRSDL ( ) throws java.io.IOException , java.lang.ClassNotFoundException { if ( ( org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl ) == null ) { org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl = org.ovirt.engine.api.rsdl.RsdlManager.loadRsdl ( getCurrent ( ) . get ( org.ovirt.engine.core.common.mode.ApplicationMode.class ) ) ; } return org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl ; }
public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn ( ) { createStorageDomainForDisk ( StorageType.ISCSI ) ; disk.setWipeAfterDelete ( true ) ; org.junit.Assert.assertThat ( validator.isSparsifySupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED ) ) ; }
protected java.lang.String getDisabledMessage ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData model ) { return model.getClone ( ) . getChangeProhibitionReason ( ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createVlan ( java.lang.String baseIfaceName , int vlanId , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , ( ( baseIfaceName + "." ) + vlanId ) , false , null , vlanId , networkName , true ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _messages.post ( InstallerMessages.Severity.INFO , java.lang.String.format ( "Logs at host located at: '%1$s'" , _parser.cliEnvironmentGet ( CoreEnv.LOG_FILE_NAME ) ) ) ; return true ; }
private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters ( ) { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; param.setIsReinstallOrUpgrade ( true ) ; return param ; }
public void validateSucceeds ( ) { command.getParameters ( ) . setAuditLogId ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public static org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils getInstance ( ) { return org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.instance ; }
public void testGetAllForStoragePool ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao.getAllForStoragePool ( existingVds.getStoragePoolId ( ) ) ; assertGetAllForStoragePoolCorrectResult ( result ) ; }
public void interfaceBasedOnNullProposedVlan ( ) { org.junit.Assert.assertFalse ( org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn ( null , org.ovirt.engine.core.utils.NetworkUtilsTest.IFACE_NAME ) ) ; }
public void endTaskStepAndJob ( org.ovirt.engine.core.bll.job.ExecutionContext context , boolean exitStatus ) { endFinalizingStepAndCurrentStep ( context , exitStatus ) ; endTaskJobIfNeeded ( context , exitStatus ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public boolean syntaxErrorInProperties ( java.lang.String properties ) { return ! ( VALIDATION_PATTERN.matcher ( properties ) . matches ( ) ) ; }
public void testConfigHostPolicy ( ) { assertSerialNumber ( null ) ; }
protected abstract org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) ;
public void testRemoveIfUnusedWithUnused ( ) { dao.removeIfUnused ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; final org.ovirt.engine.core.common.businessentities.VmIcon nothing = dao.get ( org.ovirt.engine.core.dao.VmIconDaoTest.UNUSED_ICON_ID ) ; org.junit.Assert.assertNull ( nothing ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTask > getAllAsyncTasksFromDb ( ) { return coCoAsyncTaskHelper.getAllAsyncTasksFromDb ( ) ; }
private java.lang.String changeUserPasswd ( javax.servlet.http.HttpServletRequest request , org.ovirt.engine.core.sso.utils.Credentials userCredentials ) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug ( "Calling Authn to change password for user '{}@{}'." , userCredentials.getUsername ( ) , userCredentials.getProfile ( ) ) ; org.ovirt.engine.core.sso.utils.AuthenticationUtils.changePassword ( ssoContext , request , userCredentials ) ; org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession ( request ) . setChangePasswdCredentials ( null ) ; if ( org.ovirt.engine.core.sso.utils.SSOUtils.isUserAuthenticated ( request ) ) { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug ( "User is authenticated updating password in SSOSession for password-access scope." ) ; org.ovirt.engine.core.sso.utils.SSOUtils.persistUserPassword ( request , org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession ( request ) , userCredentials.getNewCredentials ( ) ) ; } else { org.ovirt.engine.core.sso.servlets.InteractiveChangePasswdServlet.log.debug ( "User password change succeeded, redirecting to login page." ) ; org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession ( request ) . setLoginMessage ( ssoContext.getLocalizationUtils ( ) . localize ( SSOConstants.APP_MSG_CHANGE_PASSWORD_SUCCEEDED , ( ( java.util.Locale ) ( request.getAttribute ( SSOConstants.LOCALE ) ) ) ) ) ; } return ( request.getContextPath ( ) ) + ( org.ovirt.engine.core.sso.utils.SSOConstants.INTERACTIVE_LOGIN_URI ) ; }
protected org.ovirt.engine.core.common.businessentities.Disk getOldDisk ( ) { if ( ( oldDisk ) == null ) { oldDisk = org.ovirt.engine.core.bll.UpdateVmDiskCommand.getDiskDao ( ) . get ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters ( ) . getDiskId ( ) ) ; } return oldDisk ; }
private void assertGetHostsForStorageOperationCorrectStoragePool ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result ) { for ( org.ovirt.engine.core.common.businessentities.VDS vds : result ) { org.junit.Assert.assertEquals ( FixturesTool.STORAGE_POOL_RHEL6_ISCSI , vds.getStoragePoolId ( ) ) ; } }
public void setDiskInfoList ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > diskInfoList ) { this . diskInfoList = ( diskInfoList != null ) ? diskInfoList : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; }
public void onSuccess ( java.lang.Object returnValue ) { setCommandExecutionAllowedForProvider ( ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runInternalQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { return getBackend ( ) . runInternalQuery ( actionType , parameters , getEngineContext ( ) ) ; }
public void testCloneFromTemplateWithClonePermissionsClone ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm model = createModel ( createDisksCollection ( ) ) ; doTestCloneFromTemplateWithClonePermissions ( model , true ) ; }
public void getCustomValueFromEmptyMap ( ) { final java.lang.String s = b.getCustomValue ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; org.junit.Assert.assertEquals ( "" , s ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB ) { mockVmTemplateDaoReturnVmTemplate ( ) ; mockDiskImageDaoGetSnapshotById ( ) ; mockStorageDomainDaoGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDaoGet ( domainSizeGB ) ; mockConfig ( ) ; return org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; }
private boolean hasVolumeBricksOnServer ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVdsCommand.getGlusterBrickDao ( ) . getGlusterVolumeBricksByServerId ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) . size ( ) ) > 0 ) { return true ; } else { return false ; } }
public java.lang.String getTimeZone ( ) { return vmStatic.getTimeZone ( ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType , org.ovirt.engine.core.common.vdscommands.VDSParametersBase params ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . runVdsCommand ( commandType , params ) ; }
boolean validate ( ) ;
public boolean hasSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( getSmartcardDevices ( vmId ) . isEmpty ( ) ) ; }
public java.lang.String serialize ( java.lang.Object payload ) throws org.ovirt.engine.core.utils.SerializationExeption { if ( payload == null ) { return null ; } else { return writeJsonAsString ( payload , org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer.formattedMapper ) ; } }
java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllAttachableDisksByPoolId ( org.ovirt.engine.core.compat.Guid poolId , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid userId , boolean isFiltered ) ;
public void setup ( ) { org.mockito.Mockito.doReturn ( proxyLocator ) . when ( validator ) . getProxyLocator ( org.mockito.Mockito.any ( ) ) ; org.mockito.Mockito.doReturn ( backend ) . when ( validator ) . getBackend ( ) ; }
public static void cleanUp ( ) { if ( ( org.ovirt.engine.core.utils.ssh.TransferTest.local1 ) != null ) { if ( ! ( org.ovirt.engine.core.utils.ssh.TransferTest.local1.delete ( ) ) ) { } org.ovirt.engine.core.utils.ssh.TransferTest.local1 = null ; } org.ovirt.engine.core.utils.ssh.TestCommon.terminate ( ) ; }
private boolean isNicToConfigureContainTheLabel ( java.lang.String nicName , java.lang.String label ) { java.util.Set < java.lang.String > labelsToConfigure = getLabelsToConfigureOnNic ( nicName ) ; return ( labelsToConfigure != null ) && ( labelsToConfigure.contains ( label ) ) ; }
private boolean isEditConsoleEnabled ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item ) { return ( ( item != null ) && ( ( item.getVM ( ) ) != null ) ) && ( item.getVM ( ) . isRunningOrPaused ( ) ) ; }
private java.util.Map < java.lang.String , java.lang.Object > generateMetaDataFile ( java.util.List < org.ovirt.engine.core.compat.Guid > vmAndTemplatesIds ) { java.util.Map < java.lang.String , java.lang.Object > data = new java.util.HashMap < > ( ) ; addVmsStatus ( vmAndTemplatesIds , data ) ; return data ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { valid = false ; applyCommonValidationStyles ( ) ; getValidatedWidgetStyle ( ) . setBorderColor ( "red" ) ; }
protected com.google.gwt.user.client.ui.TreeItem getNodeItem ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return getDiskNode ( new java.util.ArrayList ( java.util.Arrays.asList ( disk ) ) ) ; }
private void attachVmDisksToStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.storage.DiskImage ... vmDisks ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : vmDisks ) { diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( storageDomain.getId ( ) ) ) ) ; } }
public void setIsVolumeFormatAvailable ( boolean isVolumeFormatAvailable ) { this . isVolumeFormatAvailable = isVolumeFormatAvailable ; }
public void vnicProfileExist ( ) throws java.lang.Exception { vnicProfileValidationTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , true ) ; }
private void updateActionAvailability ( ) { }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { allNetworks = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; queryInterfaces ( ) ; }
protected boolean isVersionSupportedForShareable ( org.ovirt.engine.core.common.businessentities.Disk disk , java.lang.String compVersion ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.ShareableDiskEnabled , compVersion ) ; } return true ; }
org.ovirt.engine.api.resource.gluster.GlusterHookResource getGlusterHookSubResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) ;
public void getClusterWithId ( ) { b.setClusterId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = b.getCluster ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g.getId ( ) ) ; }
java.lang.String name ( ) ;
public java.lang.String getTemplate ( java.lang.String realUrlParamName , java.lang.String headerParamName ) { org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper templateWrapper = new org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper ( getTemplate ( ) ) ; templateWrapper.set ( "realUrlParamName" , realUrlParamName ) ; templateWrapper.set ( "headerParamName" , headerParamName ) ; return templateWrapper.toString ( ) ; }
public void testValidateUniqueTemplateNameInDC ( ) { setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . isVmTemplateWithSameNameExist ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS ) ; }
public void setVmId ( org.ovirt.engine.core.compat.Guid vmId ) { this . vmId = vmId ; this . statistics.setVmId ( vmId ) ; }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm , vm.getStatus ( ) ) ; org.ovirt.engine.core.bll.VmHandler.LockVm ( vm.getId ( ) ) ; compensationContext.stateChanged ( ) ; return null ; }
protected void persistCollectedData ( ) { updateNetConfigDirtyFlag ( ) ; hostNetworkTopologyPersister.persistAndEnforceNetworkCompliance ( getVds ( ) , skipManagementNetwork ( ) , getParameters ( ) . getInterfaces ( ) ) ; }
protected void compileInternal ( ) { java.util.Set < java.lang.String > inParams = new java.util.HashSet ( getInParameterNames ( ) ) ; inParams.add ( "dummyParamNeverUsed" ) ; setInParameterNames ( inParams ) ; super . compileInternal ( ) ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; resource.setParent ( getCollectionResourceMock ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Hook hook = resource.get ( ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendHostHookResourceTest.EVENT_2_NAME , hook.getEventName ( ) ) ; }
private void validateAndExpectNoViolations ( org.ovirt.engine.core.bll.SetupNetworksHelper helper ) { java.util.List < java.lang.String > violations = helper.validate ( ) ; junit.framework.Assert.assertTrue ( ( "Expected no violations, but got: " + violations ) , violations.isEmpty ( ) ) ; }
protected void setLock ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { context.withLock ( lock ) ; }
public void testGet ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 , false ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; verifyModel ( resource.get ( ) , 0 ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTasks > getTasksByEntity ( org.ovirt.engine.core.compat.Guid entityId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "entity_id" , entityId ) ; return getCallsHandler ( ) . executeReadList ( "GetAsyncTasksByEntityId" , org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskRowMapper.instance , parameterSource ) ; }
public void validateFails ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( volumeId1 ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public static void setEngineSessionId ( javax.servlet.http.HttpSession session , java.lang.String sessionId ) { if ( session != null ) { org.ovirt.engine.api.common.security.auth.SessionUtils.log.debug ( ( "setting engine session ID to " + sessionId ) ) ; session.setAttribute ( org.ovirt.engine.api.common.security.auth.SessionUtils.ENGINE_SESSION_ID_KEY , sessionId ) ; } }
public void setStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { getStoragePoolIsoMapData ( ) . setStatus ( status ) ; }
private static org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand < org.ovirt.engine.core.common.action.StoragePoolParametersBase > createCommand ( org.ovirt.engine.core.common.action.StoragePoolParametersBase param ) { return new org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand ( param ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { getParentModel ( ) . setWindow ( null ) ; }
private void handleResult ( org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result ) { if ( wasSkippedDueToPolicy ( result ) ) { org.ovirt.engine.core.bll.FenceVdsBaseCommand.setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.FenceVdsBaseCommand.setSucceeded ( false ) ; } else { setSucceeded ( result.getSucceeded ( ) ) ; } setActionReturnValue ( result ) ; }
protected java.lang.String generateVmMetadata ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > AllVmImages ) { return ovfManager.exportVm ( vm , AllVmImages , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vm ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection ( ) . url ( "https://engine40.example.com/ovirt-engine/api" ) . user ( "admin@internal" ) . password ( "redhat123" ) . trustStoreFile ( "truststore.jks" ) . build ( ) ; org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService ( ) . hostsService ( ) ; org.ovirt.engine.sdk4.types.Host host = hostsService.list ( ) . search ( "name=myhost" ) . send ( ) . hosts ( ) . get ( 0 ) ; org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService ( host.id ( ) ) ; if ( ( host.status ( ) ) != ( org.ovirt.engine.sdk4.types.HostStatus.MAINTENANCE ) ) { hostService.deactivate ( ) . send ( ) ; } hostService.remove ( ) . send ( ) ; connection.close ( ) ; }
default void inputDetail ( ) { org.ovirt.api.metamodel.language.ApiLanguage.or ( org.ovirt.api.metamodel.language.ApiLanguage.mandatory ( storageDomain ( ) . id ( ) ) , org.ovirt.api.metamodel.language.ApiLanguage.mandatory ( storageDomain ( ) . name ( ) ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { setNumberOfVms ( ( ( java.lang.Integer ) ( returnValue.getReturnValue ( ) ) ) ) ; }
private void assertCanDoActionMessage ( org.ovirt.engine.core.common.errors.EngineMessage msg ) { org.junit.Assert.assertTrue ( "canDoAction failed for the wrong reason" , command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( msg.name ( ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getId ( ) { return id ; }
public void setVmSnapshotId ( org.ovirt.engine.core.compat.Guid snapshotId ) { getImage ( ) . setSnapshotId ( snapshotId ) ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . getName ( ) ; }
public void insufficientDiskSpace ( ) { setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateSpaceRequirements ( org.mockito.Matchers.anyList ( ) ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
public void isISCSIConnectionAndDomain ( ) { connection.setStorageType ( StorageType.ISCSI ) ; domain.setStorageType ( StorageType.ISCSI ) ; org.junit.Assert.assertTrue ( validator.isISCSIConnectionAndDomain ( domain ) . isValid ( ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > returnValue ) { context.clusterFoundByName = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( returnValue ) ; prepare2 ( ) ; }
public static org.ovirt.engine.core.common.TimeZoneType getTimeZoneByOs ( org.ovirt.engine.core.common.businessentities.VmOsType vmOsType ) { return ( vmOsType != null ) && ( vmOsType.isWindows ( ) ) ? org.ovirt.engine.core.common.TimeZoneType.WINDOWS_TIMEZONE : org.ovirt.engine.core.common.TimeZoneType.GENERAL_TIMEZONE ; }
public void add ( ) { runAddAndVerify ( createNewInterface ( ) , true , org.mockito.Mockito.times ( 1 ) ) ; }
public java.lang.String render ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo optionInfo ) { if ( optionInfo != null ) { return optionInfo.getKey ( ) ; } return null ; }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForSnapshots ( ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public boolean isSerialNumberPolicySupported ( java.lang.String version ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.SerialNumberPolicySupported , version ) ) ) ; }
public java.lang.String getName ( ) { return this . vmStatic.getName ( ) ; }
public org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol getIpv4BootProtocol ( ) { return nic.getIpv4BootProtocol ( ) ; }
public void setUp ( ) { clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; }
private void mockBackend ( ) { org.mockito.Mockito.when ( backend.runAction ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.action.ActionReturnValue ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage.LunDisk createLunDisk ( org.ovirt.engine.core.common.businessentities.storage.ScsiGenericIO sgio ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createLunDisk ( ) ; lunDisk.setSgio ( sgio ) ; return lunDisk ; }
public java.lang.Boolean isConsoleAddressPartiallyOverridden ( ) { return ( consoleAddressPartiallyOverridden ) == null ? java.lang.Boolean.FALSE : consoleAddressPartiallyOverridden ; }
public void testIsNetworkInSyncWhenNetworkQosIsNull ( ) throws java.lang.Exception { networkQos = null ; org.junit.Assert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected java.lang.String extractNameFromEntity ( org.ovirt.engine.core.common.businessentities.VmTemplate entity ) { return entity.getName ( ) ; }
protected boolean validate ( ) { return ( super . validate ( ) ) && ( validate ( getVfsConfigValidator ( ) . labelNotInVfsConfig ( getLabel ( ) ) ) ) ; }
protected void initLinked ( ) { getLinked ( ) . setEntity ( getNic ( ) . isLinked ( ) ) ; }
public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.Role object ) { return object.getName ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { getConnectivityTimeout ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; postOnSetupNetworks ( ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork model , java.lang.Boolean value ) { model.setPublicUse ( value ) ; refreshImportedNetworks ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getAllImageSnapshots ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots ( diskImage.getImageId ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.vm_pools getVmPool ( ) { if ( ( ( mVmPool ) == null ) && ( ( getVmPoolId ( ) ) != null ) ) { mVmPool = getVmPoolDAO ( ) . get ( getVmPoolId ( ) ) ; } return mVmPool ; }
