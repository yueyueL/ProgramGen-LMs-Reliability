public org.ovirt.engine.api.resource.TemplateDiskResource getDeviceSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource ( asGuidOr404 ( id ) , this ) ) ; }
protected void storageType_SelectedItemChanged ( ) { updateCurrentStorageItem ( ) ; if ( ( getCurrentStorageItem ( ) ) != null ) { updateFormat ( ) ; updateHost ( ) ; } updateWipeAfterDelete ( ) ; updateDiscardAfterDelete ( ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
private boolean hasReportsModelRefreshEvent ( ) { for ( org.ovirt.engine.ui.uicompat.IEventListener listnr : ( ( java.util.List < org.ovirt.engine.ui.uicompat.IEventListener > ) ( getModel ( ) . getReportsAvailabilityEvent ( ) . getListeners ( ) ) ) ) { if ( listnr instanceof org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ) { return true ; } } return false ; }
public void rerun ( ) { cleanupPassthroughVnics ( ) ; setFlow ( null ) ; acquireHostDevicesLock ( ) ; super . rerun ( ) ; }
public static void updateVmDevicesOnRun ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( vmBase != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateUsbSlots ( vmBase , vmBase ) ; } }
private void init ( ) { setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . newLogicalNetworkTitle ( ) ) ; setHelpTag ( HelpTag.new_logical_network ) ; setHashName ( "new_logical_network" ) ; }
private void setStoredSplitterWidth ( java.lang.String key , java.lang.Double width ) { clientStorage.setLocalItem ( key , width.toString ( ) ) ; }
public void testGetForStoragePoolWithInvalidPool ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( existingDomain.getId ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.getBroker ( ) . desktopLogoff ( mVmId.toString ( ) , java.lang.String.valueOf ( mForce ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.proceedProxyReturnValue ( ) ; }
public void storagePoolWithId ( ) { b.setStoragePoolId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = b.getStoragePool ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( p ) ; }
public void setServerSslEnabled ( boolean value ) { vdsStatic.setServerSslEnabled ( value ) ; }
private org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator createNetworkAttachmentValidator ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator ( attachment , host , managementNetworkUtilMock , networkAttachmentDaoMock , vmInterfaceManager , networkClusterDaoMock , networkDaoMock , vdsDaoMock , vmDao ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ErrataFilterValue getItemsFilter ( ) { return this . filter ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model ) { driver.edit ( model ) ; initListeners ( model ) ; updateColumnsAvailability ( model ) ; updateListHeader ( model ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "deviceId" , getDeviceId ( ) ) . append ( "vmId" , getVmId ( ) ) . build ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { return diskImage.getDiskAlias ( ) ; }
private java.lang.String getJsonDiskDescription ( ) throws java.io.IOException { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . generateJsonDiskDescription ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters ( ) . getDiskInfo ( ) ) ; }
java.lang.String vNumaName ( java.lang.String name , int index ) ;
public java.util.Map < java.lang.String , java.lang.Object > glusterHookUpdate ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName , java.lang.String content , java.lang.String checksum ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) == ( event.getNativeEvent ( ) . getKeyCode ( ) ) ) { object.getDiscoverTargetsCommand ( ) . execute ( ) ; setIsFocused ( false ) ; } }
public void testGetUserAndSetUserWithSessionParam ( ) { org.ovirt.engine.core.common.users.VdcUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.users.VdcUser.class ) ; container.setUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , user ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , user , container.getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate mockVmTemplate ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; template.setId ( vmTemplateId ) ; template.setStoragePoolId ( storagePoolId ) ; template.setClusterArch ( ArchitectureType.x86_64 ) ; org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.setDiskList ( template ) ; return template ; }
public void testGetNetworkIdsByIscsiBondId ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > networkIds = dao.getNetworkIdsByIscsiBondId ( newIscsiBond.getId ( ) ) ; org.junit.Assert.assertTrue ( networkIds.isEmpty ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase params = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent.setId ( guid ) ; params.setAgent ( agent ) ; return performAction ( ActionType.RemoveFenceAgent , params ) ; }
public java.lang.String getVmName ( ) { return vmName ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.userportal.ApplicationConstants applicationConstants , org.ovirt.engine.ui.userportal.uicommon.model.vm.VmInterfaceListModelProvider modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.extendedVirtualMachineNetworkInterfaceSubTabLabel ( ) , 2 , modelProvider ) ; }
public void testSave ( ) { dao.save ( newAdGroup ) ; org.ovirt.engine.core.common.businessentities.LdapGroup result = dao.getByName ( newAdGroup.getname ( ) ) ; assertEquals ( newAdGroup , result ) ; }
protected java.lang.Double [ ] getRawValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { return new java.lang.Double [ ] { object.getStatistics ( ) . getReceiveDropRate ( ) , object.getStatistics ( ) . getTransmitDropRate ( ) } ; }
public void vnicProfileNull ( ) { validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator ( null ) ; org.hamcrest.MatcherAssert.assertThat ( validator.vnicProfileIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) ) ; }
public void setLockInfo ( org.ovirt.engine.core.common.locks.LockInfo lockInfo ) { this . lockInfo = lockInfo ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "url" , url ) . build ( ) ; }
private void stopGeoRepSessionCommand ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( ActionType.StopGeoRepSession , new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( session.getMasterVolumeId ( ) , session.getId ( ) ) , command.cloneContextAndDetachFromParent ( ) ) ; }
public org.ovirt.engine.api.restapi.resource.BackendVmGraphicsConsoleResource getConsoleResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmGraphicsConsoleResource ( this , guid , id ) ) ; }
private org.ovirt.engine.core.bll.gluster.GlusterVolumeRemoveBricksCommand createTestCommand ( org.ovirt.engine.core.compat.Guid volumeId , int replicaCount ) { return new org.ovirt.engine.core.bll.gluster.GlusterVolumeRemoveBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeId , getBricks ( volumeId , 1 ) , replicaCount ) ) ; }
private org.ovirt.engine.core.dao.provider.ProviderDao getProviderDao ( ) { return org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade ( ) . getProviderDao ( ) ; }
java.lang.String getOsFamily ( int osId ) ;
public org.ovirt.engine.api.model.Quotas list ( ) { if ( isFiltered ( ) ) { return null ; } else { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return mapCollection ( getBackendCollection ( VdcQueryType.GetQuotaByStoragePoolId , params ) ) ; } }
protected org.ovirt.engine.core.common.queries.VdcQueryParametersBase getQueryParameters ( ) { return new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.compat.Guid.Empty ) ; }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void storeInHttpSession ( final java.lang.String key , final java.lang.String value ) { getOperationManager ( ) . storeInHttpSession ( key , value ) ; }
public boolean isImportModel ( ) { return false ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT ) ; addValidationMessageVariable ( "volumeName" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getGlusterVolumeName ( ) ) ; addValidationMessageVariable ( "cluster" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getClusterName ( ) ) ; }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( java.lang.String taskKey ) { return super . persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getActionType ( ) , taskKey ) ; }
private java.lang.String buildResponse ( javax.servlet.http.HttpServletRequest request , org.ovirt.engine.core.sso.utils.SsoSession ssoSession ) throws java.lang.Exception { return org.ovirt.engine.core.sso.servlets.OpenIdUtils.createJWT ( request , ssoSession , ssoSession.getClientId ( ) ) . toString ( ) ; }
public void unsetEvents ( ) { this . events = null ; }
public boolean equals ( org.ovirt.engine.core.common.businessentities.Tags x , org.ovirt.engine.core.common.businessentities.Tags y ) { return x.gettag_id ( ) . equals ( y.gettag_id ( ) ) ; }
public void setPmPassword ( java.lang.String value ) { mVdsStatic.setPmPassword ( value ) ; }
public void setKernelVersion ( java.lang.String value ) { this . mVdsDynamic.setkernel_version ( value ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName , java.lang.String content , java.lang.String checksum ) ;
private void overrideMigrationDowntimeChanged ( ) { java.lang.Boolean entity = getOverrideMigrationDowntime ( ) . getEntity ( ) ; getMigrationDowntime ( ) . setIsChangeable ( java.lang.Boolean.TRUE.equals ( entity ) ) ; }
public void clusterServiceDefined ( ) { org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.clusterServiceDefined ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void defaultClusterInLocalFs ( ) { newDefaultManagementNetworkFound ( ) ; mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultClusterID , org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_CLUSTER_ID ) ; createCommandWithDefaultCluster ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; setupCpu ( ) ; architectureIsUpdatable ( ) ; validateFailedWithReason ( EngineMessage.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel > getSelectedHasConsoleModels ( ) { return selectedHasConsoleModels ; }
public void setIsQuotaDefault ( boolean isQuotaDefault ) { this . vmStatic.setQuotaDefault ( isQuotaDefault ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolNotStaticAddressDifferent ( ) { initIpv4ConfigurationBootProtocolAddress ( Ipv4BootProtocol.NONE , false ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void addUpdatedVm ( ) { runInternalAction ( ActionType.AddVm , buildAddVmParameters ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getContext ( ) , org.ovirt.engine.core.bll.UpdateVmVersionCommand.getLock ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapGroup getAdGroup ( int index ) { org.ovirt.engine.core.common.businessentities.LdapGroup adGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( ) ; adGroup.setid ( GUIDS [ index ] ) ; adGroup.setname ( NAMES [ index ] ) ; adGroup.setdomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; return adGroup ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.HttpHeaders headers , javax.ws.rs.core.UriInfo ui , java.lang.Class < ? > clz , boolean typePrefix ) { return org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( headers , ui , null , clz , typePrefix ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.VDSGroup source ) { return id.equals ( source.getId ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } return source ; }
public void testGetByNullClusterId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > hooks = dao.getByClusterId ( null ) ; org.junit.jupiter.api.Assertions.assertNotNull ( hooks ) ; org.junit.jupiter.api.Assertions.assertTrue ( hooks.isEmpty ( ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.getBroker ( ) . glusterVolumeDelete ( org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.getParameters ( ) . getVolumeName ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.proceedProxyReturnValue ( ) ; }
public java.lang.String render ( java.lang.Object object ) { return object == null ? "" : ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getVdsName ( ) ; }
private org.ovirt.engine.core.dao.VdsDao mockVdsDao ( ) { org.ovirt.engine.core.dao.VdsDao mock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VdsDao.class ) ; org.mockito.Mockito.when ( mock.getFirstUpRhelForCluster ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsFromDb ) ; return mock ; }
private org.ovirt.engine.core.utils.lock.EngineLock getEngineLock ( org.ovirt.engine.core.compat.Guid clusterId ) { return new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( clusterId.toString ( ) , LockMessagesMatchUtil.GLUSTER ) , null ) ; }
public void testGetStorageDomainByTypeForStoragePoolId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getStorageDomains ( FixturesTool.DATA_CENTER , StorageDomainType.Master ) ; assertGetResult ( result.get ( 0 ) ) ; }
public void setGuestOsDistribution ( java.lang.String guestOsDistribution ) { vmDynamic.setGuestOsDistribution ( guestOsDistribution ) ; }
protected java.util.List < Q > getBackendCollection ( org.ovirt.engine.core.common.queries.QueryType query , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams ) { return getBackendCollection ( entityType , query , queryParams ) ; }
public void getUsbPolicyUsbTypeNative ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.NATIVE ) ; org.junit.Assert.assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
private void init ( ) { virtMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.VirtMonitoringStrategy ( clusterDao , vdsDao , vmDynamicDao ) ; glusterMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.GlusterMonitoringStrategy ( ) ; multipleMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.MultipleServicesMonitoringStrategy ( ) ; multipleMonitoringStrategy.addMonitoringStrategy ( virtMonitoringStrategy ) ; multipleMonitoringStrategy.addMonitoringStrategy ( glusterMonitoringStrategy ) ; }
private static org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics CloneVdsNetworkStatistics ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics instance ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics obj = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics ( ) ; org.ovirt.engine.ui.uicommonweb.Cloner.CloneNetworkStatisticss ( instance , obj ) ; obj.setVdsId ( instance.getVdsId ( ) ) ; return obj ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , cinderConnectionInfo ) ; }
public void setInitialized ( boolean value ) { this . vmStatic.setInitialized ( value ) ; }
private void writeServiceLocator ( org.ovirt.api.metamodel.concepts.Locator locator ) { writer.writeStartElement ( "locator" ) ; writeCommon ( locator ) ; writeServiceRef ( locator.getService ( ) ) ; locator.parameters ( ) . forEach ( this :: writeParameter ) ; writer.writeEndElement ( ) ; }
public org.ovirt.engine.api.v3.types.V3Host update ( org.ovirt.engine.api.v3.types.V3Host host ) { return adaptUpdate ( getDelegate ( ) :: update , host ) ; }
public static void setUp ( ) throws java.lang.Exception { final org.reflections.Reflections reflections = new org.reflections.Reflections ( "org.ovirt.engine" ) ; org.ovirt.engine.core.dao.DaoCdiIntegrationTest.daoClasses = java.util.Collections.unmodifiableSet ( reflections.getSubTypesOf ( org.ovirt.engine.core.dao.Dao.class ) ) ; }
public void debug ( java.lang.Object msg , java.lang.Throwable t ) { log.debug ( convertToString ( msg ) , t ) ; }
public void discoverGeoRepData ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getClusterDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { discoverGeoRepDataInCluster ( cluster ) ; } }
public void clearProblem ( ) { getProblemDescription ( ) . setIsValid ( true ) ; getProblemDescription ( ) . setEntity ( null ) ; }
public int getVdsStrength ( ) { return this . mVdsStatic.getVdsStrength ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > searchStoragePool ( ) { return genericSearch ( storagePoolDao , true ) ; }
public javax.ws.rs.core.Response performAction ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { return performAction ( task , params , null , false ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { ProxyDown ( ) ; }
public org.ovirt.engine.api.model.StorageDomains list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( QueryType.GetAllStorageDomains , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , SearchType.StorageDomain ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.StorageDomain ) ) ; } }
private boolean isVmRunningOnHost ( org.ovirt.engine.core.compat.Guid hostId ) { return ! ( vmDynamicDao.getAllRunningForVds ( hostId ) . isEmpty ( ) ) ; }
public void releaseSession ( ) { setSessionId ( null ) ; }
public org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel > getStorageGeneralProvider ( com.google.gwt.event.shared.EventBus eventBus , com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider ) { return new org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel > ( eventBus , defaultConfirmPopupProvider , org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel.class ) ; }
protected org.ovirt.engine.core.common.businessentities.tags getTag ( ) { if ( ( ( mTag ) == null ) && ( ( getTagId ( ) ) != null ) ) { mTag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . get ( getTagId ( ) ) ; } return mTag ; }
public void vdsCloned ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.businessentities.VDS cloned = vds.clone ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( vds , cloned , "clones not equal" ) ; org.junit.jupiter.api.Assertions.assertEquals ( vds.hashCode ( ) , cloned.hashCode ( ) , "clones do not have equal hashCodes" ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateGlusterFencingPolicyVisibility ( object ) ; }
public void setStorageDomainName ( java.lang.String storageDomainName ) { this . storageDomainName = storageDomainName ; }
public void defaultHost_SelectedItemChanged ( ) { updateCdImage ( ) ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus ( ) { return this . result.getStatus ( ) ; }
public java.lang.String evaluate ( java.lang.String realUrlParamName , java.lang.String headerParamName ) { set ( "realUrlParamName" , realUrlParamName ) ; set ( "headerParamName" , headerParamName ) ; return evaluate ( ) ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason ) { runInternalAction ( VdcActionType.SetNonOperationalVds , new org.ovirt.engine.core.common.action.SetNonOperationalVdsParameters ( getVds ( ) . getId ( ) , reason ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( getContext ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomainById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.StorageDomain.class , QueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.businessentities.DbUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getId ( ) ) ; params.setSessionId ( getSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . logoff ( params ) ; return returnValue ; }
public void setSessionTimeout ( int engineSessionTimeout ) { restApiSessionTimeout = 2 * engineSessionTimeout ; }
public org.ovirt.engine.sdk.Api connect ( ) throws java.io.IOException , org.ovirt.engine.sdk.exceptions.ServerException , org.ovirt.engine.sdk.exceptions.UnsecuredConnectionAttemptError { java.lang.String url = java.lang.String.format ( "%s://%s:%s/ovirt-engine/api" , protocol , server , port ) ; org.ovirt.optimizer.service.OvirtClient.log.debug ( java.lang.String.format ( "Logging to %s as %s" , url , username ) ) ; return new org.ovirt.engine.sdk.Api ( url , username , password , true ) ; }
public org.ovirt.engine.api.model.Template get ( ) { org.ovirt.engine.api.model.Template template = performGet ( QueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( guid ) ) ; if ( template != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , template ) ; } return template ; }
private int calculateCpuUsage ( org.ovirt.engine.core.common.businessentities.VDS o1 ) { return ( ( o1.getUsageCpuPercent ( ) ) * ( org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores ( o1 ) ) ) / ( o1.getVdsStrength ( ) ) ; }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : newlyAddedTasks ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB ( task ) ; } return null ; }
private void runAndAssertCanDoActionSuccess ( ) { boolean canDoAction = command.canDoAction ( ) ; org.ovirt.engine.core.bll.AddDiskCommandTest.log.info ( "{}" , command.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; org.junit.Assert.assertTrue ( canDoAction ) ; }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool ( ) { return org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . poolForDataCenter ( org.ovirt.engine.core.bll.CommandBase.getStoragePoolId ( ) ) ; }
private void spice_Connected ( java.lang.Object sender ) { setIsConnected ( true ) ; updateActionAvailability ( ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.get ( getParameters ( ) . getActionType ( ) ) . getValidateMsg ( ) ) ; addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_SERVICE ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String memoryVolume , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addActiveSnapshot ( snapshotId , vm , SnapshotStatus.OK , memoryVolume , disks , compensationContext ) ; }
protected org.ovirt.engine.core.dao.profiles.ProfilesDao < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > getProfileDao ( ) { return getDiskProfileDao ( ) ; }
public org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network.Network > getManagementNetworkCandidatePredicate ( ) { return mockNetworkPredicate ; }
public java.util.Map < java.lang.String , java.lang.Object > desktopLogoff ( java.lang.String vmId , java.lang.String force ) ;
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigPopupView.templates.textForCheckBoxHeader ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigPopupView.constants.attachAll ( ) ) ; }
public void setStatus ( org.ovirt.engine.core.sso.utils.SsoSession.Status status ) { this . status = status ; if ( ( org.ovirt.engine.core.sso.utils.SsoSession.Status.authenticated ) == status ) { authTime = new java.util.Date ( java.lang.System.currentTimeMillis ( ) ) ; } else { authTime = null ; } }
private void initializeCommand ( org.ovirt.engine.core.common.action.UpdateVmDiskParameters params ) { initializeCommand ( params , java.util.Collections.singletonList ( createVmStatusDown ( ) ) ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( ( ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getAction ( ) ) == ( org.ovirt.engine.core.common.action.PlugAction.PLUG ) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__ACTIVATE : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__DEACTIVATE ) ) ; addValidationMessage ( EngineMessage.VAR__TYPE__INTERFACE ) ; }
public void testAllocateMacNoEnoughMacs ( ) { org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalStateException.class , ( ) -> rangeOf10Macs.allocateMacs ( ( ( org.ovirt.engine.core.bll.network.macpool.RangeTest.NUMBER_OF_MACS ) + 1 ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; }
protected void executeVdsBrokerCommand ( ) { infoReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getBroker ( ) . getCapabilities ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVDSDynamicData ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getVds ( ) , infoReturn.info ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getVds ( ) ) ; }
public boolean shouldUseCompensation ( ) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this . commandContext.getCompensationContext ( ) ; boolean result = ( compensationContext != null ) && ( compensationContext.isCompensationEnabled ( ) ) ; log.debug ( "Should use compensation?: {}" , result ) ; return result ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.VmPool model ) { org.junit.Assert.assertNotNull ( model.getCluster ( ) ) ; org.junit.Assert.assertEquals ( GUIDS [ 2 ] . toString ( ) , model.getCluster ( ) . getId ( ) ) ; }
public void rollback ( ) { super . rollback ( ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . modifyPool ( oldMacPool ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { if ( object.getReadOnly ( ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.readOnly ( ) ) ; } return null ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalMultipleActions ( actionType , parameters ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Agent incoming , org.ovirt.engine.core.common.businessentities.pm.FenceAgent entity ) { org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase updateParams = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = map ( incoming , entity ) ; updateParams.setAgent ( agent ) ; return updateParams ; }
public org.ovirt.engine.core.common.businessentities.Cluster update ( org.ovirt.engine.core.common.businessentities.Cluster incoming ) { org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalProviders ( this , incoming.getExternalNetworkProviders ( ) ) ; return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , ActionType.UpdateCluster , new UpdateParametersProvider ( ) ) ; }
public org.ovirt.engine.api.resource.ClusterNetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendClusterNetworkResource ( clusterId , id ) ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface ) { driver.edit ( iface ) ; hideMacWhenNotEnabled ( iface ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.Network result = dao.getByName ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME , result.getname ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { removeBricksButton.getCommand ( ) . execute ( ) ; clearSelections ( ) ; bricksTable.flush ( ) ; bricksTable.redraw ( ) ; }
public void validate_duplicateVm_Test ( ) { affinityGroup.getVmIds ( ) . add ( vmId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_ENTITY_IN_AFFINITY_GROUP ) ; }
public org.ovirt.engine.core.common.businessentities.BootSequence getDefaultBootSequence ( ) { return this . vmStatic.getDefaultBootSequence ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.user.SubTabUserQuotaPresenter.constants.userQuotaSubTabLabel ( ) , 2 ) ; }
public boolean isApplicable ( org.ovirt.engine.core.common.businessentities.VDSGroup oldCluster , org.ovirt.engine.core.common.businessentities.VDSGroup newCluster ) { newCpuName = newCluster.getCpuName ( ) ; final java.lang.String oldCpuName = oldCluster.getCpuName ( ) ; return ! ( newCpuName.equals ( oldCpuName ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeSnapshotCreate ( java.lang.String volumeName , java.lang.String snapshotName , java.lang.String description , boolean force ) ;
protected void onCollectionChanged ( org.ovirt.engine.ui.uicompat.NotifyCollectionChangedEventArgs e ) { collectionChangedEvent.raise ( this , e ) ; }
private void mockMaxPciSlots ( ) { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddVmCommandTest.MAX_PCI_SLOTS ) . when ( osRepository ) . getMaxPciDevices ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ; }
private java.lang.String getSsoToken ( final java.lang.String engineSessionId ) { return ( ( java.lang.String ) ( runQuery ( QueryType.GetEngineSessionIdToken , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , engineSessionId ) ) ) ; }
public org.ovirt.engine.core.dao.StorageDomainDAO getStorageDomainDAO ( ) { return getDbFacade ( ) . getStorageDomainDao ( ) ; }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { return org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids.get ( 1 ) , guids.get ( 0 ) , guids.get ( 2 ) , isPostZero ( ) , false ) ) ; }
org.ovirt.api.metamodel.tool.JavaTypeReference getTypeReference ( org.ovirt.api.metamodel.concepts.Type type , boolean preferWrapper ) ;
public void onUserPortalModelInit ( org.ovirt.engine.ui.userportal.uicommon.model.UserPortalModelInitEvent event ) { updateListModel ( listModelProvider.getModel ( ) ) ; }
public static java.lang.Integer getDefaultMtu ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.DefaultMTU ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > getPassword ( ) { return password ; }
public void validNetworkNameWhenUnlinkingNotSupported ( ) throws java.lang.Exception { networkNameTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , "net" ) ; }
public void setpm_enabled ( boolean value ) { mVdsStatic.setPmEnabled ( value ) ; }
public void setHashName ( java.lang.String value ) { sethashName ( value ) ; setOpenDocumentationCommand ( new org.ovirt.engine.ui.uicommonweb.UICommand ( "OpenDocumentation" , this ) ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "HashName" ) ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getBrickListModel ( ) . getStopRemoveBricksCommand ( ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, srcHost=%s, dstVdsId=%s, dstHost=%s, migrationMethod=%s, tunnelMigration=%s" , super . toString ( ) , getSrcHost ( ) , getDstVdsId ( ) , getDstHost ( ) , getMigrationMethod ( ) , isTunnelMigration ( ) ) ; }
public void buildVirtualSystem ( ) { readGeneralData ( ) ; }
public void setHost ( java.lang.String host , int port ) { _host = host ; _port = port ; _serverKey = null ; }
public void setSnapshotsMap ( java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel > value ) { snapshotsMap = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SnapshotsMap" ) ) ; }
public org.ovirt.engine.core.common.businessentities.DiskLunMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.DiskLunMap diskLunMap = new org.ovirt.engine.core.common.businessentities.DiskLunMap ( ) ; diskLunMap.setDiskId ( getGuidDefaultEmpty ( rs , "disk_id" ) ) ; diskLunMap.setLunId ( rs.getString ( "lun_id" ) ) ; return diskLunMap ; }
protected void postDiscoverTargets ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > newItems ) { }
protected void verifyModelClearingPayloads ( org.ovirt.engine.api.model.Vm model , int index ) { verifyModel ( model , index ) ; org.junit.Assert.assertNull ( model.getPayloads ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult providerIsSet ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) . when ( ( ( provider ) == null ) ) ; }
public org.ovirt.engine.core.compat.Guid mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { return getGuidDefaultEmpty ( rs , "id" ) ; }
public java.util.Map < java.lang.String , java.lang.Object > isSsoWebappDeployed ( ) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.isSsoDeployed ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection ( ) . url ( "https://engine40.example.com/ovirt-engine/api" ) . user ( "admin@internal" ) . password ( "redhat123" ) . trustStoreFile ( "truststore.jks" ) . build ( ) ; org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService ( ) . vmsService ( ) ; org.ovirt.engine.sdk4.types.Vm vm = vmsService.list ( ) . search ( "name=myvm" ) . send ( ) . vms ( ) . get ( 0 ) ; org.ovirt.engine.sdk4.services.VmDisksService disksService = vmsService.vmService ( vm.id ( ) ) . disksService ( ) ; org.ovirt.engine.sdk4.types.Disk disk = disksService.add ( ) . disk ( org.ovirt.engine.sdk4.builders.Builders.disk ( ) . name ( "mydisk" ) . description ( "My disk" ) . interface_ ( DiskInterface.VIRTIO ) . format ( DiskFormat.COW ) . provisionedSize ( ( 1 * ( ( int ) ( java.lang.Math.pow ( 2 , 20 ) ) ) ) ) . storageDomains ( org.ovirt.engine.sdk4.builders.Builders.storageDomain ( ) . name ( "mydata" ) ) ) . send ( ) . disk ( ) ; org.ovirt.engine.sdk4.services.VmDiskService diskService = disksService.diskService ( disk.id ( ) ) ; for ( ; ; ) { java.lang.Thread.sleep ( ( 5 * 1000 ) ) ; disk = diskService.get ( ) . send ( ) . disk ( ) ; if ( ( disk.status ( ) ) == ( org.ovirt.engine.sdk4.types.DiskStatus.OK ) ) { break ; } } connection.close ( ) ; }
protected void insertAsyncTaskPlaceHolders ( ) { persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.HibernateVmCommand.getParameters ( ) . getParentCommand ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.SAVE_IMAGE_TASK_KEY ) ; persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.HibernateVmCommand.getParameters ( ) . getParentCommand ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.SAVE_RAM_STATE_TASK_KEY ) ; }
protected void onSavePortMirroring ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nicToSave ) { nicToSave.setPortMirroring ( false ) ; }
public void unlinkedWhenUnlinkingNotSupported ( ) throws java.lang.Exception { unlinkingTest ( org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.UNLINKING_IS_NOT_SUPPORTED ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.hamcrest.CoreMatchers.hasItem ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT ) ) ) , false , false ) ; }
public void setPrincipalName ( java.lang.String engineSessionId , java.lang.String name ) { setData ( engineSessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.PRINCIPAL_PARAMETER_NAME , name ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propName ) ) { appendMessage ( model.getMessage ( ) ) ; } }
static void verifyParent ( org.ovirt.engine.api.model.Tag model , java.lang.String parentId ) { org.junit.jupiter.api.Assertions.assertNotNull ( model.getParent ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( parentId , model.getParent ( ) . getId ( ) ) ; }
public void moveItemUp ( ) { if ( ( getSelectedItemIndex ( ) ) > 0 ) { getItems ( ) . move ( getSelectedItemIndex ( ) , ( ( getSelectedItemIndex ( ) ) - 1 ) ) ; } }
public void setVmtGuid ( org.ovirt.engine.core.compat.Guid value ) { this . vmStatic.setVmtGuid ( value ) ; }
private void initListerners ( final org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model ) { model.getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { addItems ( model ) ; } } ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { setTitle ( ( object.isBoot ( ) ? getDefaultTitle ( ) : null ) ) ; return object.isBoot ( ) ? getDefaultImage ( ) : null ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( ( value.isPool ( ) ? org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.takeVmLabel ( ) : org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.runVmLabel ( ) ) ) ; }
public void validateFailsNoConnection ( ) { org.mockito.Mockito.when ( sscDao.get ( connId.toString ( ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST ) ; }
public java.lang.Boolean getValue ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { if ( ( networkClusterModel.getIsChangable ( ) ) && ( ! ( networkClusterModel.isAttached ( ) ) ) ) { return false ; } } return true ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.ListModel < T > excludedListModel , org.ovirt.engine.ui.uicommonweb.models.ListModel < T > includedListModel , org.ovirt.engine.ui.uicommonweb.UICommand onIncludeButtonPressed , org.ovirt.engine.ui.uicommonweb.UICommand onExcludeButtonPressed ) { edit ( excludedListModel , includedListModel ) ; this . onIncludeButtonPressed = onIncludeButtonPressed ; this . onExcludeButtonPressed = onExcludeButtonPressed ; }
public void testIsNetworkExclusiveValid3 ( ) { org.junit.jupiter.api.Assertions.assertTrue ( underTest.isNetworkExclusive ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN ) ) ) ; }
javax.ws.rs.core.Response remove ( org.ovirt.engine.api.model.Action action ) ;
protected void executeCommand ( ) { initConnectionList ( true ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.common.businessentities.storage.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > connectionToType : getConnectionsTypeMap ( ) . entrySet ( ) ) { disconnectStorageByType ( connectionToType.getKey ( ) , connectionToType.getValue ( ) ) ; } }
public void versionHigherThanCluster ( ) { storagePoolWithVersionHigherThanCluster ( ) ; canDoActionFailed ( EngineMessage.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , name , true , null , null , networkName ) ; }
protected void executeCommand ( ) { vmStaticDao.incrementDbGenerationForVms ( getAffinityGroup ( ) . getVmIds ( ) ) ; affinityGroupDao.remove ( getParameters ( ) . getAffinityGroupId ( ) ) ; setSucceeded ( true ) ; }
public void testIsNetworkInSyncWhenNetworkQosIsNull ( ) { networkQos = null ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network.Network > getManagementNetworkCandidatePredicate ( ) { return managementNetworkCandidatePredicate ; }
protected java.util.List < java.lang.String > mockl10n ( java.util.List < java.lang.String > errors ) { return errors.stream ( ) . map ( this :: mockl10n ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public void setExitMessage ( java.lang.String value ) { this . vmDynamic.setExitMessage ( value ) ; }
public void testCleanNotExpiredUsersSessionsNoUsers ( ) { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.mockito.Mockito.verifyZeroInteractions ( dbUserDAOMcok ) ; }
public void info ( java.lang.String message ) { org.ovirt.engine.ui.common.uicommon.LoggerImpl.logger.log ( java.util.logging.Level.INFO , message ) ; }
public java.lang.String getStorageName ( ) { return getStorageStaticData ( ) . getstorage_name ( ) ; }
public void setDefaultVncKeyboardLayout ( java.lang.String vncKeyboardLayout ) { vmStatic.setVncKeyboardLayout ( vncKeyboardLayout ) ; }
public java.util.Map deleteImage ( java.lang.String imgGUID , java.lang.String spUUID , java.lang.String sdUUID , boolean postZero , boolean force ) { return storageService.deleteImage ( imgGUID , spUUID , sdUUID , postZero , force ) ; }
public void testGetAllForVm ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllForVm ( vm.getUuid ( ) . toString ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
public void validateVirtOnlySucceeds ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.Assert.assertTrue ( commandMock.validate ( ) ) ; }
private boolean isEveryoneUserPortalBasedVmPermission ( org.ovirt.engine.core.common.businessentities.permissions permission ) { return ( permission.getad_element_id ( ) . equals ( ApplicationGuids.everyone.asGuid ( ) ) ) && ( permission.getrole_id ( ) . equals ( ApplicationGuids.userTemplateBasedVM.asGuid ( ) ) ) ; }
protected void updateBootOrder ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm ( ) . getStaticData ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; return performAction ( ActionType.DetachVmFromTag , new org.ovirt.engine.core.common.action.AttachEntityToTagParameters ( guid , asList ( vmId ) ) ) ; }
private org.ovirt.engine.core.common.action.TransferImageStatusParameters prepareStatusParams ( org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase ) { org.ovirt.engine.api.model.ImageTransfer updates = new org.ovirt.engine.api.model.ImageTransfer ( guid ) ; updates.setPhase ( phase ) ; org.ovirt.engine.core.common.action.TransferImageStatusParameters params = new org.ovirt.engine.core.common.action.TransferImageStatusParameters ( ) ; params.setTransferImageCommandId ( guid ) ; params.setUpdates ( updates ) ; return params ; }
protected void connectAllHostsToPool ( ) { runSynchronizeOperation ( new org.ovirt.engine.core.bll.storage.ConnectSingleAsyncOperationFactory ( ) ) ; }
public static < T > boolean contains ( java.lang.Iterable < T > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super T > predicate ) { return ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( source , predicate ) ) == null ? false : true ; }
public void testRemoveFailed ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClustersResourceTest.dataCenterId } , setUpVDSGroups ( ) , null ) ; doTestBadRemove ( true , false , org.ovirt.engine.api.restapi.resource.FAILURE ) ; }
public void testMapOriginTypeRhev ( ) { java.lang.String s = org.ovirt.engine.api.restapi.types.VmBaseMapper.map ( OriginType.RHEV , null ) ; org.junit.jupiter.api.Assertions.assertEquals ( "rhev" , s ) ; org.ovirt.engine.core.common.businessentities.OriginType s2 = org.ovirt.engine.api.restapi.types.VmMapper.map ( s , OriginType.RHEV ) ; org.junit.jupiter.api.Assertions.assertEquals ( OriginType.RHEV , s2 ) ; }
private org.ovirt.engine.core.utils.lock.EngineLock getEngineLock ( org.ovirt.engine.core.compat.Guid clusterId ) { return new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( clusterId.toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.GLUSTER , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) , null ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( getStoragePool ( ) ) ; getStoragePoolDao ( ) . remove ( getStoragePool ( ) . getId ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void masterDomainIsUp ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . checkMasterDomainIsUp ( ) ; }
public boolean await ( long timeout , java.util.concurrent.TimeUnit unit ) throws java.lang.InterruptedException { return this . latch.await ( timeout , unit ) ; }
public void testGetStorageDomainDRs ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainDR > result = dao.getAllForStorageDomain ( FixturesTool.POSIX_STORAGE_DOMAIN_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , result.size ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.AsyncTask createAsyncTask ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.ActionType parentCommand ) { return coCoAsyncTaskHelper.createAsyncTask ( command , asyncTaskCreationInfo , parentCommand ) ; }
public static java.lang.Boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.spiceSupportMatrix.get ( osId ) . get ( version ) ; }
public void setSslChanels ( java.lang.String sslChanels ) { this . consoleOptions.setSslChanels ( org.ovirt.engine.ui.common.uicommon.AbstractSpice.adjustLegacySecureChannels ( sslChanels ) ) ; }
protected void prepareMethod ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getMethod ( ) . setRequestHeader ( "Range" , java.lang.String.format ( "bytes=0-%s" , ( ( org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getParameters ( ) . getSize ( ) ) - 1 ) ) ) ; }
private boolean migrateVm ( ) { setActionReturnValue ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsBroker ( ) . runAsyncVdsCommand ( VDSCommandType.Migrate , createMigrateVDSCommandParameters ( ) , this ) . getReturnValue ( ) ) ; return ( org.ovirt.engine.core.bll.MigrateVmCommand.getActionReturnValue ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ; }
public void getUsbPolicyOnUpdateCurrentlyLegacyGotDisabledLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_LEGACY ) , UsbPolicy.DISABLED ) ; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapperForSave ( org.ovirt.engine.core.common.businessentities.VdsDynamic vds ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createFullParametersMapper ( vds ) ; parameterSource.addValue ( "controlled_by_pm_policy" , vds.isPowerManagementControlledByPolicy ( ) ) ; return parameterSource ; }
private org.ovirt.engine.core.bll.context.CommandContext getCommandContext ( ) { org.ovirt.engine.core.bll.context.CommandContext commandContext = org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( enclosingCommand.getContext ( ) ) ; commandContext.getExecutionContext ( ) . setShouldEndJob ( isLastTaskHandler ( ) ) ; return commandContext ; }
public void testIsExternalVM ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData ( ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( ovfUtils.isExternalVM ( xmlDocument ) , "VM should not be external VM" ) ; }
public org.ovirt.engine.core.bll.ValidationResult stpForVmNetworkOnly ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP ) . unless ( ( ( network.isVmNetwork ( ) ) || ( ! ( network.getStp ( ) ) ) ) ) ; }
public boolean isTrue ( ) { java.lang.String quotaName = getModel ( ) . getQuotaName ( ) ; return ( quotaName != null ) && ( quotaName != "" ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.storageEventSubTabLabel ( ) , 10 , modelProvider , org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public void setCtrlAltDeleteRemapHotkey ( java.lang.String hotkey ) { remapCtrlAltDeleteSpice.setLabel ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.messages.remapCtrlAltDelete ( hotkey ) ) ; remapCtrlAltDeleteVnc.setLabel ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.messages.remapCtrlAltDelete ( hotkey ) ) ; }
public void validateImageNotFound ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; org.mockito.Mockito.when ( diskValidator.isDiskExists ( ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST ) ; }
private void initJobRepository ( ) { try { jobRepository.finalizeJobs ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.Backend.log.error ( "Failed to finalize running Jobs" , e ) ; } }
public void writeDate ( java.lang.String name , java.util.Date value ) { writeElement ( name , org.ovirt.api.metamodel.runtime.xml.XmlWriter.renderDate ( value ) ) ; }
public static boolean interfaceBasedOn ( java.lang.String proposedIface , java.lang.String iface ) { return ( ( iface != null ) && ( proposedIface != null ) ) && ( iface.equals ( org.ovirt.engine.core.utils.NetworkUtils.stripVlan ( proposedIface ) ) ) ; }
public void testNicExistsWhenNicNameIsNotNull ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNicId ( null ) ; attachment.setNicName ( "whatever" ) ; org.hamcrest.MatcherAssert.assertThat ( createNetworkAttachmentValidator ( attachment ) . nicNameIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void increase ( ) { ( count ) ++ ; }
public void setOrigin ( org.ovirt.engine.core.common.businessentities.OriginType value ) { vmStatic.setOrigin ( value ) ; }
protected boolean canDoAction ( ) { Q validator = getProfileValidator ( ) ; return ( ( validate ( validator.profileIsSet ( ) ) ) && ( validate ( validator.profileExists ( ) ) ) ) && ( validate ( validator.isLastProfileInParentEntity ( ) ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > searchInstanceTypes ( ) { return genericSearch ( vmTemplateDao , true ) ; }
public static org.ovirt.engine.core.common.errors.ErrorType getErrorType ( java.lang.String error ) { try { return org.ovirt.engine.core.common.errors.EngineMessage.valueOf ( error ) . getErrorType ( ) ; } catch ( java.lang.Exception e ) { return null ; } }
public void executeCommand ( ) { setupMocks ( ) ; cmd.executeCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_HOOK_REFRESH , cmd.getAuditLogTypeValue ( ) ) ; }
protected void changeDefualtHost ( ) { super . changeDefualtHost ( ) ; doChangeDefautlHost ( vm.getDedicatedVmForVds ( ) ) ; }
private void init ( ) { int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.AutoStartVmsRunnerIntervalInSeconds ) ; schedulerUtil.scheduleAFixedDelayJob ( this , "startFailedAutoStartVms" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , autoStartVmsRunnerIntervalInSeconds , autoStartVmsRunnerIntervalInSeconds , java.util.concurrent.TimeUnit.SECONDS ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.addTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags fromTagsDirector = tagsDirector.getTagByName ( "tag1" ) ; org.junit.Assert.assertNotNull ( fromTagsDirector ) ; org.junit.Assert.assertEquals ( tag , fromTagsDirector ) ; }
private void addTypeColumn ( ) { org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn typeColumn = new org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn ( ) ; typeColumn.setContextMenuTitle ( org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.typePermission ( ) ) ; org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addColumn ( typeColumn , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.empty ( ) , "30px" ) ; }
protected void onMouseOut ( ) { dragImage.setVisible ( false ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.hide ( true ) ; if ( ( parentPanel ) != null ) { parentPanel.onMouseOver ( ) ; } actionButton.setVisible ( false ) ; }
private void assertValidateSlaveHasNoLabelsFailed ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator , java.lang.String slaveName ) { final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE ; org.junit.Assert.assertThat ( validator.validateSlaveHasNoLabels ( slaveName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , slaveName ) ) ) ; }
private boolean containsLun ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns , org.ovirt.engine.core.common.businessentities.storage.LUNs lunToFind ) { for ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun : luns ) { if ( lun.getLUN_id ( ) . equals ( lunToFind.getLUN_id ( ) ) ) { return true ; } } return false ; }
public javax.ws.rs.core.Response performRemove ( java.lang.String id ) { org.ovirt.engine.api.model.Network entity = lookupNetwork ( asGuidOr404 ( id ) ) ; if ( entity == null ) { notFound ( ) ; return null ; } return performAction ( removeAction , getRemoveParameters ( entity ) ) ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase getErrorCommandReturnValue ( org.ovirt.engine.core.common.errors.VdcBllMessages message ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; returnValue.setCanDoAction ( false ) ; returnValue.getCanDoActionMessages ( ) . add ( message.toString ( ) ) ; return returnValue ; }
private org.ovirt.engine.api.model.VM removeRestrictedInfo ( org.ovirt.engine.api.model.VM vm ) { if ( isFiltered ( ) ) { vm.setHost ( null ) ; vm.setPlacementPolicy ( null ) ; } return vm ; }
public static boolean isWindowsOsType ( java.lang.Integer osType ) { if ( osType == null ) { return false ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsIds.contains ( osType ) ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.Provider < ? > provider ) { return provider.getName ( ) ; }
public void lowerVersionHostsAndNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addHostsToCluster ( ) ; addNonManagementNetworkToPool ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
private void _callbackFailed ( java.lang.String message ) { if ( ( this . callback ) != null ) { this . callback.failed ( message ) ; } }
protected org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > getPredicate ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisks ) { return new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return ! ( sdToReject.equals ( storageDomain ) ) ; } } ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc thaw ( java.lang.String vmId ) ;
public java.lang.Void runInTransaction ( ) { getNetworkClusterDAO ( ) . remove ( getParameters ( ) . getVdsGroupId ( ) , getParameters ( ) . getNetworkCluster ( ) . getNetworkId ( ) ) ; return null ; }
public org.ovirt.engine.api.model.DiskAttachment update ( org.ovirt.engine.api.model.DiskAttachment attachment ) { return performUpdate ( attachment , new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.AddDiskResolver ( ) , VdcActionType.UpdateVmDisk , new org.ovirt.engine.api.restapi.resource.BackendDiskAttachmentResource.UpdateParametersProvider ( ) ) ; }
public org.ovirt.engine.api.resource.FenceAgentResource getAgentResource ( java.lang.String agentId ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendFenceAgentResource ( hostId , agentId ) ) ; }
public boolean checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( ( vm.getDedicatedVmForVdsList ( ) . size ( ) ) > 0 ) && ( org.ovirt.engine.core.bll.hostdev.HostDeviceManager.supportsHostDevicePassthrough ( vm ) ) ) && ( checkVmNeedsDirectPassthrough ( vm.getId ( ) ) ) ; }
private void generateStructSupportClasses ( org.ovirt.api.metamodel.concepts.StructType type ) { generateStructReader ( type ) ; generateStructWriter ( type ) ; }
public void removeVmFromDownVms ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.compat.Guid vmId ) { java.util.HashSet < org.ovirt.engine.core.compat.Guid > vms = vdsAndVmsList.get ( vdsId ) ; if ( vms != null ) { vms.remove ( vmId ) ; } }
protected org.ovirt.engine.core.compat.Guid createTaskInCurrentTransaction ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return createTaskImpl ( taskId , asyncTaskCreationInfo , parentCommand , null , entityType , entityIds ) ; }
public static org.ovirt.engine.core.common.queries.SearchParameters eqSearchParams ( org.ovirt.engine.core.common.queries.SearchParameters expected ) { return org.mockito.ArgumentMatchers.argThat ( new org.ovirt.engine.api.restapi.test.util.TestHelper.SearchParametersEquals ( expected ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.VDSGroup source ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.SupportCustomDeviceProperties , source.getCompatibilityVersion ( ) . getValue ( ) ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getVdsId ( ) { return ( getVm ( ) . getRunOnVds ( ) ) != null ? getVm ( ) . getRunOnVds ( ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; }
protected boolean failVmStatusIllegal ( ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) ) ; }
protected void init ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) != null ) { needsHostDevices = hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } loadVmInit ( ) ; }
public java.lang.String getPassword ( ) { return ( ( java.lang.String ) ( getData ( org.ovirt.engine.core.bll.session.SessionDataContainer.PASSWORD_PARAMETER_NAME , false ) ) ) ; }
public void testGlusterVolumeBricksByServerId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = dao.getGlusterVolumeBricksByServerId ( FixturesTool.GLUSTER_SERVER_UUID3 ) ; org.junit.Assert.assertNotNull ( bricks ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isCpuNameBlank = ( object.getCPU ( ) . getSelectedItem ( ) ) == null ; architectureEditor.setVisible ( isCpuNameBlank ) ; }
public void testParseEmpty ( ) { java.util.List < org.ovirt.engine.api.model.PowerManagement > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "" , "" ) ; assertNotNull ( ret ) ; assertEquals ( 0 , ret.size ( ) ) ; }
public void before ( ) { rangeOf10Macs = new org.ovirt.engine.core.bll.network.macpool.Range ( org.ovirt.engine.core.bll.network.macpool.RangeTest.RANGE_FROM , org.ovirt.engine.core.bll.network.macpool.RangeTest.RANGE_TO ) ; }
private void initTree ( ) { tree = new org.ovirt.engine.ui.webadmin.widget.editor.EntityModelCellTree < org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel , org.ovirt.engine.ui.webadmin.uicommon.model.SimpleSelectionTreeNodeModel > ( org.ovirt.engine.ui.webadmin.section.main.view.popup.configure.RolePopupView.res ) ; }
public void runTest ( ) { org.ovirt.engine.ui.uicommonweb.Uri uri = new org.ovirt.engine.ui.uicommonweb.Uri ( uriCandidate ) ; org.junit.Assert.assertTrue ( uri.isValid ( ) ) ; org.junit.Assert.assertEquals ( uriCandidate.toLowerCase ( ) , uri.getStringRepresentation ( ) ) ; }
public void setStatus ( org.ovirt.engine.core.common.businessentities.VMStatus value ) { if ( ( status ) != value ) { status = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Status" ) ) ; } }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( EngineMessage.VAR__ACTION__ADD ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__VM ) ; }
public void addMethods ( java.util.List < org.ovirt.api.metamodel.concepts.Method > newMethod ) { methods.addAll ( newMethod ) ; }
public void testSave ( ) { dao.save ( newLUNStorageMap ) ; org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap result = dao.get ( newLUNStorageMap.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newLUNStorageMap , result ) ; }
public void testSave ( ) { dao.save ( newGroup ) ; org.ovirt.engine.core.common.businessentities.aaa.DbGroup result = dao.getByName ( newGroup.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( newGroup , result ) ; }
public void testBootProtocolSetForRoleNetworkWhenNullValuedIpConfigurationAndWhenNetworkHasNoRole ( ) { doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( false , createNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testQuery ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.SEARCH_QUERY ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.SEARCH_QUERY ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( ReturnValue ) ) ; setExportPath ( ( connection == null ? null : connection.getConnection ( ) ) ) ; stopProgress ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > ) ( source ) ) ; }
public final void setSoftLimitInterval ( java.lang.String sessionId , int softLimitInterval ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.SOFT_LIMIT_INTERVAL_PARAMETER_NAME , softLimitInterval ) ; }
protected void RunCommands ( ) { sortCommands ( ) ; super . RunCommands ( ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__DETACH_ACTION_TO ) ; addValidationMessage ( EngineMessage.VAR__TYPE__DISK ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getStorageDomainDao ( ) . getForStoragePool ( domainId , org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.getStoragePool ( ) . getId ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . getSearchButton ( ) . getCommand ( ) . setIsExecutionAllowed ( model.availableNamespaces ( ) ) ; }
protected void createOrUpdateVmPool ( ) { org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPoolDao ( ) . save ( org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPool ( ) ) ; }
public void onRollback ( ) { }
public final void setHardLimit ( java.lang.String sessionId , java.util.Date hardLimit ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.HARD_LIMIT_PARAMETER_NAME , hardLimit ) ; }
private boolean wasSkippedDueToPolicy ( org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result ) { return ( ( result != null ) && ( result.isSkippedDueToPolicy ( ) ) ) && ( ( org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters ( ) . getParentCommand ( ) ) == ( org.ovirt.engine.core.common.action.VdcActionType.RestartVds ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , boot , passDiscard , diskInterface , usingScsiReservation ) ; }
public void setLogTime ( java.util.Date logTime ) { this . logTime = logTime ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkInterface FindInterfaceByNetworkName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkInterface > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.NetworkInterface i : items ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( i.getNetworkName ( ) , name ) ) { return i ; } } return null ; }
public java.lang.String getDefaultTitle ( ) { return org.ovirt.engine.ui.webadmin.widget.table.column.CommentColumn.constants.commentLabel ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Tags getRootTag ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Tags.class , VdcQueryType.GetRootTag , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , "root" ) ; }
public void setPmSecondaryType ( java.lang.String value ) { mVdsStatic.setPmSecondaryType ( value ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.Role > > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private void timeZone_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionLunMapDao ( ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMapId ( FixturesTool.LUN_ID1 , FixturesTool.STORAGE_CONNECTION_ID ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( FixturesTool.LUN_ID_FOR_DISK , FixturesTool.STORAGE_CONNECTION_ID ) ; }
public void failNegativeNumOfValuesToShow ( ) { java.util.List < java.lang.Object > items = createItems ( ) ; java.lang.String separator = ", " ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( org.ovirt.engine.core.utils.ReplacementUtilsTest.PROPERTY_NAME , items , separator , ( - 5 ) ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.DisplayType > getDisplayTypes ( int osId , org.ovirt.engine.core.compat.Version version ) { return displayTypes.get ( osId ) . get ( version ) ; }
public java.lang.Void runInTransaction ( ) { updatePassthoughDeviceIfNeeded ( ) ; getCompensationContext ( ) . snapshotEntity ( oldIface ) ; getVmNicDao ( ) . update ( getInterface ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc getExternalVmFromOva ( java.lang.String ovaPath ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getExternalVmFromOva ( ovaPath ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc ( xmlRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public boolean isMatch ( java.lang.String input ) { return impl.test ( input ) ; }
public void testGetAllForClusterWithInvalidCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > result = dao.getAllForCluster ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( ) { if ( ( entity ) == null ) { entity = glusterHooksDao.getById ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandBase.getParameters ( ) . getHookId ( ) , true ) ; } return entity ; }
public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { return new org.ovirt.engine.core.common.utils.Pair ( getGuid ( rs , "numa_node_id" ) , rs.getInt ( "cpu_core_id" ) ) ; }
public java.util.List < T > convert ( java.lang.Object source ) { return source != null ? ( ( java.util.List < T > ) ( source ) ) : new java.util.ArrayList < T > ( ) ; }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) , image.getQuotaId ( ) ) ) ; }
public void testGetPluggedForMac ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > result = dao.getPluggedForMac ( FixturesTool.MAC_ADDRESS ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic vmNetworkInterface : result ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.MAC_ADDRESS , vmNetworkInterface.getMacAddress ( ) ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getNetworkClusterDAO ( ) . remove ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters ( ) . getVdsGroupId ( ) , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.setSucceeded ( true ) ; }
public void updateVolumeStatus ( org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus newStatus ) { glusterVolumeDao.updateVolumeStatus ( volumeId , newStatus ) ; updateBricksStatuses ( volumeId , newStatus ) ; }
protected java.lang.String generateVmMetadata ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > AllVmImages ) { return ovfManager.exportVm ( vm , AllVmImages , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vm ) ) ; }
protected void rerunInternal ( ) { decreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmToServerCommand.getDestinationVds ( ) . getId ( ) ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.determineMigrationFailueForAuditLog ( ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.log ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc desktopLogoff ( java.lang.String vmId , java.lang.String force ) ;
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__STOP ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME ) ; addCanDoActionMessage ( java.lang.String.format ( "$volumeName %1$s" , getGlusterVolumeName ( ) ) ) ; addCanDoActionMessage ( java.lang.String.format ( "$vdsGroup %1$s" , getVdsGroupName ( ) ) ) ; }
public void testGetById ( ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig result = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.HOST_NIC_VFS_CONFIG , result.getId ( ) ) ; checkNetworksAndLabels ( result , 0 , 0 ) ; }
private java.lang.String generateTokenValueResponse ( ) { return com.google.gwt.util.tools.shared.StringUtils.toHexString ( ( ( byte [ ] ) ( getThreadLocalRequest ( ) . getSession ( ) . getAttribute ( org.ovirt.engine.ui.frontend.server.gwt.OvirtXsrfTokenServiceServlet.XSRF_TOKEN ) ) ) ) ; }
public void setActionMessageParameters ( ) { super . setActionMessageParameters ( ) ; addValidationMessage ( EngineMessage.VAR__ACTION__REMOVE ) ; }
protected void applyCommonValidationStyles ( ) { super . applyCommonValidationStyles ( ) ; if ( ! ( org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.isUsePatternfly ( ) ) ) { org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.getValidatedWidgetStyle ( ) . setPadding ( 5 , Unit.PX ) ; } }
public void onEngineSessionRefreshed ( org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent event ) { if ( ( restApiSessionId ) != null ) { refreshRestApiSession = true ; } }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { isEntityChanged = true ; getSearchCommand ( ) . Execute ( ) ; } }
com.google.gwt.safehtml.shared.SafeHtml lineChartWithoutImage ( com.google.gwt.safecss.shared.SafeStyles styles ) ;
protected java.lang.String getTitle ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return value.isPool ( ) ? org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.takeVmLabel ( ) : org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedVirtualMachineView.constants.runVmLabel ( ) ; }
public org.ovirt.engine.api.resource.VirtualFunctionAllowedNetworksResource getVirtualFunctionAllowedNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVirtualFunctionAllowedNetworksResource ( guid , parent.getHostId ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterHostsPubKeyReturnForXmlRpc glusterGeoRepKeysGet ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepKeysGet" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterHostsPubKeyReturnForXmlRpc ( response ) ; }
public static org.ovirt.engine.core.common.businessentities.Snapshot prepareSnapshotConfigWithoutImageSingleImage ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot , org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.utils.ovf.OvfManager ovfManager ) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareSnapshotConfigWithAlternateImage ( snapshot , imageId , null , ovfManager ) ; }
public boolean isSetBlockStatistics ( ) { return ( this . blockStatistics ) != null ; }
public void setDisplay ( boolean value ) { this . display = value ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getVdsDao ( ) ) ; existingVds = dao.get ( org.ovirt.engine.core.dao.VdsDAOTest.EXISTING_VDS_ID ) ; existingVds2 = dao.get ( org.ovirt.engine.core.dao.VdsDAOTest.EXISTING_VDS_ID_2 ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getDbFacade ( ) . getNetworkQosDao ( ) . getAllForStoragePoolId ( org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getParameters ( ) . getId ( ) ) ) ; }
protected org.ovirt.engine.api.model.StorageDomain getEntity ( int index , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.api.model.StorageDomain entity = control.createMock ( org.ovirt.engine.api.model.StorageDomain.class ) ; return org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainsResourceTest.setUpEntityExpectations ( entity , index , storageType ) ; }
protected void setUpGetEntityExpectations ( int index ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , getEntity ( index ) ) ; }
public void preventRollback ( ) { getParameters ( ) . setExecutionIndex ( 0 ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus ( getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
public void qosOverCommitmentReportedNicSpeed ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmentNicSetup ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS , isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public void setIsVolumeTypeAvailable ( boolean isVolumeFormatAvailable ) { this . isVolumeTypeAvailable = isVolumeFormatAvailable ; }
public void testIsNetworkInSyncWhenIpv4GatewayEqual ( ) { initIpv4ConfigurationBootProtocolGateway ( Ipv4BootProtocol.STATIC_IP , true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas ( ) throws java.lang.Exception { assertGetAllRelevantQuoatsForStorage ( FixturesTool.STORAGE_DOMAIN_NFS_ISO , ( ( org.ovirt.engine.core.dao.QuotaDaoTest.STORAGE_NUM_QUOTAS ) - 1 ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepSessionList ( ) ;
public org.ovirt.engine.api.model.Quota get ( ) { return addLinks ( performGet ( VdcQueryType.GetQuotaByQuotaId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( ) ; super . syncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.GetEventSubscribersBySubscriberIdParameters ( getEntity ( ) . getuser_id ( ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getHardDiskOption ( ) { return getBootSequenceOption ( BootSequence.C ) ; }
public void setVdsGroupCpuName ( java.lang.String value ) { this . vdsGroupCpuName = value ; }
public void setVdsName ( java.lang.String value ) { vdsStatic.setName ( value ) ; }
public void validateFailsWithEmptyBricksList ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutRemoveBricksTask , new java.util.ArrayList < > ( ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
java.util.Map < java.lang.String , java.lang.Object > snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) ;
public long getImageVirtualSize ( java.lang.String id ) { com.woorea.openstack.glance.model.Image glanceImage = getClient ( ) . images ( ) . show ( id ) . execute ( ) ; return getImageVirtualSize ( glanceImage ) ; }
public void sriovFeatureNotSupported ( ) { sriovFeatureSupportTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_SRIOV_FEATURE_NOT_SUPPORTED ) , false ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT_CONFIG ) ; addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__VOLUME_SNAPSHOT_CONFIG_UPDATE ) ; }
protected java.math.BigDecimal asDec ( double d ) { return new java.math.BigDecimal ( d , new java.math.MathContext ( 2 ) ) ; }
public org.ovirt.engine.core.compat.Guid getRunningHostId ( ) { return hostedEngineVm.getRunOnVds ( ) ; }
public void shouldDetectCpuPinning ( ) { invalidVM.setCpuPinning ( "i am pinned" ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( EngineMessage.CLUSTER_UPGRADE_DETAIL_VM_CPUS_PINNED.name ( ) ) ) ; }
public void testRemoveCantDo ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetClustersByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , setUpClusters ( ) , null ) ; doTestBadRemove ( false , true , org.ovirt.engine.api.restapi.resource.CANT_DO ) ; }
protected boolean failVmStatusIllegal ( ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) ) ; }
public void setBootSequence ( org.ovirt.engine.core.common.businessentities.BootSequence value ) { this . vmDynamic.setboot_sequence ( value ) ; }
private void markVfsAsUsedByVm ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > passthroughVnicToVfMap ) { org.ovirt.engine.core.bll.network.host.NetworkDeviceHelper networkDeviceHelper = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.host.NetworkDeviceHelper.class ) ; networkDeviceHelper.setVmIdOnVfs ( hostId , vmId , new java.util.HashSet ( passthroughVnicToVfMap.values ( ) ) ) ; }
public void setHostedEngineConfigured ( boolean heConfigured ) { vdsDynamic.setHostedEngineConfigured ( heConfigured ) ; }
public void externalNetworkPortMirroring ( ) throws java.lang.Exception { externalNetworkPortMirroringTest ( true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_PORT_MIRRORED ) ) ; }
public void setCinderVolumeType ( org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > cinderVolumeType ) { this . cinderVolumeType = cinderVolumeType ; }
protected org.ovirt.engine.core.common.businessentities.StoragePool getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendDataCentersResourceTest.setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.StoragePool.class ) , index ) ; }
protected org.ovirt.engine.core.bll.validator.VmValidator getVmValidator ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesList ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String [ ] serviceNames ) ;
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.POOL , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
protected void executeQueryCommand ( ) { P params = org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getParameters ( ) ; setReturnValue ( org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getDbFacade ( ) . getVdsGroupDao ( ) . getClustersWithPermittedAction ( org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getUserID ( ) , params.getActionGroup ( ) ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc fullList ( java.util.List < java.lang.String > vmIds ) ;
protected void executeCommand ( ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( user.getId ( ) ) ; params.setSessionId ( org.ovirt.engine.core.bll.aaa.LogoutBySessionCommand.getParameters ( ) . getSessionId ( ) ) ; setReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . logoff ( params ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = getNonReadOnlyExternalNetworkProviders ( result ) ; getExternalProviders ( ) . setItems ( providers ) ; selectExternalProvider ( ) ; }
public void testCDAStoragePoolNotUp ( ) { storagePool.setStatus ( StoragePoolStatus.Uninitialized ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( "validate did not fail on a Storage Pool which is not up" , command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ; }
public void testGetRelevantVdsGroupQuotaForUserWithoutPrivileges ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = dao.getAllRelevantQuotasForVdsGroup ( FixturesTool.VDS_GROUP_RHEL6_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID , true ) ; org.junit.Assert.assertEquals ( "Unprivileged user is not allowed to fetch for quota" , 0 , quotas.size ( ) ) ; }
public void testGetWithPermissionsUnprivilegedUser ( ) { org.ovirt.engine.core.common.businessentities.VDS result = dao.get ( existingVds.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
private java.lang.Integer getApplicationMode ( javax.servlet.http.HttpServletRequest request ) { return ( ( java.lang.Integer ) ( runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , request ) ) ) ; }
private void searchAdminRoles ( ) { setItemsFilter ( RoleType.ADMIN ) ; getSearchCommand ( ) . execute ( ) ; }
public void updateExternalStatus ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.businessentities.ExternalStatus status ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_guid" , id ) . addValue ( "external_status" , status ) ; getCallsHandler ( ) . executeModification ( "UpdateHostExternalStatus" , parameterSource ) ; }
protected void endWithFailure ( ) { endCommand ( ) ; rollbackQuota ( ) ; }
public void execute ( ) { performBootstrap ( ) ; }
public void setVmHost ( java.lang.String value ) { this . vmDynamic.setvm_host ( value ) ; }
public java.lang.String encode ( org.ovirt.engineextensions.aaa.ldap.ASN1OctetString value , org.ovirt.engineextensions.aaa.ldap.MapProperties props ) { return value.stringValue ( ) ; }
public org.ovirt.engine.api.model.VnicPassThrough adapt ( org.ovirt.engine.api.v3.types.V3VnicPassThrough from ) { org.ovirt.engine.api.model.VnicPassThrough to = new org.ovirt.engine.api.model.VnicPassThrough ( ) ; if ( from.isSetMode ( ) ) { to.setMode ( org.ovirt.engine.api.model.VnicPassThroughMode.fromValue ( from.getMode ( ) ) ) ; } return to ; }
public org.ovirt.engine.core.compat.Guid getVmId ( ) { if ( org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . isImportAsNewEntity ( ) ) { return org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . getVm ( ) . getId ( ) ; } return super . getVmId ( ) ; }
public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment ( ) { return org.jboss.shrinkwrap.api.ShrinkWrap.create ( org.jboss.shrinkwrap.api.spec.JavaArchive.class ) . addClasses ( org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class , org.ovirt.engine.core.bll.scheduling.SchedulingManager.class , org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.class , org.ovirt.engine.core.bll.scheduling.BasicMigrationHandler.class ) . addAsManifestResource ( EmptyAsset.INSTANCE , org.jboss.shrinkwrap.api.ArchivePaths.create ( "beans.xml" ) ) ; }
private void onClone ( ) { ( ( org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel ) ( getWindow ( ) ) ) . onClone ( this , false ) ; }
java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallbackEnabled ( ) ;
public boolean isRunOnce ( ) { return vmDynamic.isRunOnce ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( final org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VDS ... hosts ) { return inClusterUpgradeFilterPolicyUnit.filter ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) , java.util.Arrays.asList ( hosts ) , vm , null , org.mockito.Mockito.mock ( org.ovirt.engine.core.common.scheduling.PerHostMessages.class ) ) ; }
public static org.ovirt.engine.core.compat.Match match ( java.lang.String string , java.lang.String pattern ) { return org.ovirt.engine.core.compat.Regex.match ( string , pattern , 0 ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData setVmBalloonInfo ( org.ovirt.engine.core.common.businessentities.VmBalloonInfo vmBalloonInfo ) { this . vmBalloonInfo = vmBalloonInfo ; return this ; }
protected void enableDisableByBootProtocol ( org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model ) { boolean bootProtocolsAvailable = model.getBootProtocolsAvailable ( ) ; ipv4BootProtocolLabel.setEnabled ( bootProtocolsAvailable ) ; ipv4BootProtocol.setEnabled ( bootProtocolsAvailable ) ; ipv4BootProtocol.setEnabled ( Ipv4BootProtocol.NONE , model.getNoneBootProtocolAvailable ( ) ) ; }
public int getCpuPerSocket ( ) { return this . vmStatic.getCpuPerSocket ( ) ; }
java.lang.String lunAlreadyPartOfStorageDomainWarning ( java.lang.String storageDomainName ) ;
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createVmEvent ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl ( ) ; event.setVmId ( vmId ) ; event.setVmName ( resourceManager.getVmManager ( vmId ) . getName ( ) ) ; return event ; }
public void cancel ( ) { org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; cancelConfirmation ( ) ; setGuideContext ( null ) ; setWindow ( null ) ; updateActionAvailability ( ) ; }
public void rdpSelected ( boolean selected ) { rdpPanel.setVisible ( selected ) ; }
protected boolean removeVmInSpm ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmID , org.ovirt.engine.core.compat.Guid storageDomainId ) { return runVdsCommand ( VDSCommandType.RemoveVM , new org.ovirt.engine.core.common.vdscommands.RemoveVMVDSCommandParameters ( storagePoolId , vmID , storageDomainId ) ) . getSucceeded ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider < ? > generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties > provider = new org.ovirt.engine.core.common.businessentities.Provider ( ) ; provider.setId ( generateNonExistingId ( ) ) ; provider.setName ( "brovider" ) ; provider.setUrl ( "http://brovider.com/" ) ; provider.setType ( ProviderType.OPENSTACK_NETWORK ) ; org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties additionalProperties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ( ) ; additionalProperties.setReadOnly ( java.lang.Boolean.FALSE ) ; additionalProperties.setTenantName ( "10ant" ) ; additionalProperties.setPluginType ( OpenstackNetworkPluginType.OPEN_VSWITCH.name ( ) ) ; provider.setAdditionalProperties ( additionalProperties ) ; provider.setAuthUrl ( "http://keystone-server:35357/v2.0/" ) ; return provider ; }
private void loadProviders ( ) { switch ( importSources.getSelectedItem ( ) ) { case VMWARE : loadVmwareProviders ( ) ; break ; case KVM : loadKvmProviders ( ) ; break ; default : } }
private void clearProgress ( ) { updateProgress ( null , ( - 1 ) ) ; }
public void testCDANonExistingVds ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vdsDAOMock ) . get ( vdsId ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail for non existing VDS" , command , VdcBllMessages.VDS_NOT_EXIST ) ; }
public void testAddIpv4BootProtocolWithNoAddressSet ( ) { final java.util.Map < java.lang.String , java.lang.Object > opts = new java.util.HashMap < > ( ) ; underTest.addIpv4BootProtocol ( opts , mockHostNetwork ) ; org.junit.jupiter.api.Assertions.assertTrue ( opts.isEmpty ( ) ) ; }
protected java.lang.String getDefaultDomain ( ) { return org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance ( ) . getProfiles ( ) . get ( 0 ) . getDirectory ( ) . getName ( ) ; }
public void setText ( com.google.gwt.safehtml.shared.SafeHtml text ) { tooltip.setHtml ( ( useItalic ? wrapItalic ( text ) : text ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain mockFirstStorageDomain ( int availabeDiskSize ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setAvailableDiskSize ( availabeDiskSize ) ; storageDomain.setStatus ( StorageDomainStatus.Active ) ; storageDomain.setId ( firstStorageDomainId ) ; storageDomain.setStorageDomainType ( StorageDomainType.Data ) ; return storageDomain ; }
public void clearSession ( ) { container.removeSessionOnLogout ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; }
static org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface setUpEntityExpectations ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity , org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics statistics , int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.setUpEntityExpectations ( entity , statistics , index , NAMES [ 2 ] ) ; }
public void testUrlWithFilterByTypes ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setErrataTypes ( java.util.EnumSet.of ( Erratum.ErrataType.BUGFIX , Erratum.ErrataType.SECURITY ) ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.jupiter.api.Assertions.assertEquals ( "/katello/api/v2/systems/xxx/errata?search=type+%3D+bugfix+or+type+%3D+security" , underTest.build ( ) ) ; }
protected abstract java.util.List < M > createLineModels ( java.util.Set < java.lang.String > usedKeys ) ;
public void setDisks ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > value ) { if ( ( disks ) != value ) { disks = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Disks" ) ) ; } }
protected javax.ws.rs.core.Response doAction ( final org.ovirt.engine.core.common.action.ActionType task , final org.ovirt.engine.core.common.action.VdcActionParametersBase params , final org.ovirt.engine.api.model.Action action ) { return doAction ( task , params , action , PollingType.VDSM_TASKS ) ; }
public org.ovirt.engine.core.common.businessentities.VdsStatic getByHostName ( java.lang.String host ) { return getCallsHandler ( ) . executeRead ( "GetVdsStaticByHostName" , new org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "host_name" , host ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections [ ] { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) } ) ) ; }
public void addLabelStyleName ( java.lang.String styleName ) { getLabelElement ( ) . addClassName ( styleName ) ; }
public org.ovirt.engine.api.restapi.rsdl.RsdlBuilder.LinkBuilder requestParameter ( final java.lang.String requestParameter ) { org.ovirt.engine.api.model.Body body = new org.ovirt.engine.api.model.Body ( ) ; body.setType ( requestParameter ) ; org.ovirt.engine.api.model.Request request = new org.ovirt.engine.api.model.Request ( ) ; request.setBody ( body ) ; link.setRequest ( request ) ; return this ; }
public java.lang.String render ( java.util.Date object ) { if ( object == null ) { return org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer.constants.notAvailableLabel ( ) ; } return org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer.getLocalizedDateTimeFormat ( ) . format ( object ) ; }
public void getUsbPolicyUsbTypeNative ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.NATIVE ) ; org.junit.jupiter.api.Assertions.assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
public void lowerVersionNoHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.StopVmParameters ( vm.getId ( ) , org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL , model.getReason ( ) . getEntity ( ) ) ; }
private void setSupportedFeatures ( ) { org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = host.getVdsGroupCompatibilityVersion ( ) ; networkCustomPropertiesSupported = org.ovirt.engine.core.common.FeatureSupported.networkCustomProperties ( clusterCompatibilityVersion ) ; hostNetworkQosSupported = org.ovirt.engine.core.common.FeatureSupported.hostNetworkQos ( clusterCompatibilityVersion ) ; }
private boolean isTypeTenantOrAuthUrlAware ( ) { org.ovirt.engine.core.common.businessentities.ProviderType type = getType ( ) . getSelectedItem ( ) ; return ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK ) ) || ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_IMAGE ) ) ; }
public void setup ( ) { dbFacade = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; initAgents ( ) ; mockDbFacades ( ) ; initCommand ( ) ; mockBackend ( ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = executeSnapshotVerb ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.ProceedProxyReturnValue ( ) ; }
private org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator createNetworkClusterValidator ( ) { return new org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator ( interfaceDao , networkDao , org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getNetworkCluster ( ) , getClusterVersion ( ) ) ; }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction ( ) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters ( ) ; parameters.setImagesParameters ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) ) ; return parameters ; }
public void checkExecuteCommandWithVdsId ( ) { parameters.setStorageServerConnection ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . disconnectStorage ( ) ; command.executeCommand ( ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomainType getEnum ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { return storage.getStorageDomainType ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkPrefixValid ( ) { return network.getName ( ) . toLowerCase ( ) . startsWith ( "bond" ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private boolean isSameSourceAndDest ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { if ( parameters.getSourceStorageDomainId ( ) . equals ( parameters.getTargetStorageDomainId ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME ) ; } return true ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getReturnStatus ( ) { return result.getXmlRpcStatus ( ) ; }
protected org.ovirt.engine.core.bll.storage.connection.IStorageHelper getStorageHelper ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance ( ) . getItem ( storageDomain.getStorageType ( ) ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallback ) { persistCommand ( parentCommand , getContext ( ) , enableCallback ) ; }
public void testNotContainsUnregisteredEntities ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = dao.get ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 ) ; org.junit.Assert.assertFalse ( storageDomain.isContainsUnregisteredEntities ( ) ) ; }
public void validateVmMemoryCanStartOnVds ( ) { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance ( ) . hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
private void setCliEnvironmentIfNecessary ( java.lang.String name , java.lang.Object value ) throws java.io.IOException { if ( value == null ) { _deploy.getParser ( ) . cliNoop ( ) ; } else { _deploy.getParser ( ) . cliEnvironmentSet ( name , value ) ; } }
public void saveAll ( java.util.Collection < T > entities ) { entities.forEach ( this :: save ) ; }
private boolean wasQuotaEnforcementChanged ( ) { return ( _oldStoragePool.getQuotaEnforcementType ( ) ) != ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool ( ) . getQuotaEnforcementType ( ) ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.api.model.Nic nic = get ( ) ; nic.setPlugged ( false ) ; update ( nic ) ; return actionSuccess ( action ) ; }
public void testAddValuePrimitive ( ) { int paramValue = this . random.nextInt ( ) ; paramSource.addValue ( paramName , paramValue ) ; org.junit.jupiter.api.Assertions.assertEquals ( paramValue , paramSource.getValue ( paramName ) , "wrong value returned from parameter source" ) ; }
public void labelAppearsOnlyOnceInParamsInBothLabelsAndRemoveLabels ( ) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = setLabelsOnParams ( createSet ( createNicLabel ( "lbl1" ) ) , createSet ( "lbl1" ) ) ; asserThatLabelAppearsOnlyOnceInParamsFailed ( createNicLabelValidator ( params ) , new java.util.HashSet < > ( java.util.Collections.singletonList ( "lbl1" ) ) ) ; }
public void nameExists ( ) { newPoolNameIsAlreadyTaken ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST ) ; }
protected java.lang.String defaultImageName ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { return ( "OtherOs" + ( nameUniquePart ) ) + ( org.ovirt.engine.ui.userportal.widget.basic.OsTypeImage.IMAGE ) ; }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel ) ) { getContainer ( ) . insert ( content , 0 ) ; } else { super . setInSlot ( slot , content ) ; } }
public void updateVdsDynamicPowerManagementPolicyFlag ( org.ovirt.engine.core.compat.Guid id , boolean controlledByPmPolicy ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) . addValue ( "controlled_by_pm_policy" , controlledByPmPolicy ) ; getCallsHandler ( ) . executeModification ( "UpdateVdsDynamicPowerManagementPolicyFlag" , parameterSource ) ; }
public void testCluster ( ) { testValidSql ( "Cluster: " , "SELECT * FROM ((SELECT distinct cluster_view.* FROM cluster_view ) ORDER BY name ASC) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Cluster: storage.name = 111" , "SELECT * FROM (SELECT * FROM cluster_view WHERE ( cluster_id IN (SELECT distinct clusters_storage_domain.cluster_id FROM clusters_storage_domain LEFT OUTER JOIN storage_domains_with_hosts_view ON clusters_storage_domain.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY name ASC) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
protected R deprecatedPopulate ( R model , Q entity ) { return model ; }
public void setVds ( final org.ovirt.engine.core.common.businessentities.VDS value ) { mVds = value ; mVdsName = null ; if ( value != null ) { mVdsId = value.getId ( ) ; } }
public org.ovirt.api.metamodel.tool.JavaClassName getBuilderName ( org.ovirt.api.metamodel.concepts.Type type ) { return getTypeName ( type , javaPackages.getBuildersPackageName ( ) , null , org.ovirt.api.metamodel.tool.PlainJavaTypes.BUILDER_NAME ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity ) { verifyRelationWithHostNetworkQos ( entity ) ; verifyUnsetStoragePoolIdAndNameOnQos ( entity ) ; persistQosChanges ( entity ) ; super . save ( entity ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterServicesGet ( java.lang.String [ ] serviceNames ) ;
public void testEvalNegative ( ) { org.mockito.Mockito.when ( mockNetwork.isExternal ( ) ) . thenReturn ( false ) ; org.junit.jupiter.api.Assertions.assertFalse ( underTest.test ( mockNetwork ) ) ; }
public void addColumnAndSetWidth ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.user.cellview.client.Header < ? > header , java.lang.String width ) { addColumn ( column , header ) ; setColumnWidth ( column , width ) ; }
public void checkValidMask ( ) { runSetup ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , true , true , "" ) ; org.junit.jupiter.api.Assertions.assertTrue ( underTest.isValid ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , contextMock ) ) ; org.mockito.Mockito.verifyZeroInteractions ( contextMock ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Data ) ; }
void setTooltip ( java.lang.String tooltip ) ;
public java.lang.Void call ( ) { proxy.extendVolume ( cinderDisk.getImageId ( ) . toString ( ) , newSize ) ; return null ; }
private boolean doesUserHavePermissionsOnStoragePool ( ) { org.ovirt.engine.core.common.businessentities.storage_pool pool = org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getDbFacade ( ) . getStoragePoolDao ( ) . get ( getStoragePoolId ( ) , org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getParameters ( ) . isFiltered ( ) ) ; return pool != null ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( getDiskDao ( ) . get ( org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommandCallback.getCommand ( ) . getParameters ( ) . getContainerId ( ) ) ) ) ; } return disk ; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkIsVmNetwork ( ) { return network.isVmNetwork ( ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK ) ; }
public void canDoActionFailsOnVolumeWithoutRemoveBricksTask ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutRemoveBricksTask , getBricks ( volumeWithoutRemoveBricksTask ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk , org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils ( ) ) ; }
public void setParentParameters ( org.ovirt.engine.core.common.action.ActionParametersBase parameters ) { parentParameters = parameters ; }
public void getIdByTypeReturnsNullForNonExistingVm ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( null , dao.getId ( Guid.Empty , SnapshotType.REGULAR ) ) ; }
public void testGetNumberOfImagesInExistingDomain ( ) { long numOfImages = dao.getNumberOfImagesInStorageDomain ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 ) ; org.junit.Assert.assertEquals ( "Number of images on storage domain different than expected" , org.ovirt.engine.core.dao.StorageDomainDaoTest.NUMBER_OF_IMAGES_ON_EXISTING_DOMAIN , numOfImages ) ; }
public org.ovirt.engine.api.resource.VmDiskResource getDeviceResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmDiskResource ( parentId , id , this , updateType , getUpdateParametersProvider ( ) , getRequiredUpdateFields ( ) , subCollections ) ) ; }
private void validateSource ( ) { clearProblem ( ) ; if ( ( ( importSources.getSelectedItem ( ) ) == ( ImportSource.EXPORT_DOMAIN ) ) && ( ( exportDomain ) == null ) ) { setError ( constants.notAvailableWithNoActiveExportDomain ( ) ) ; } }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; if ( ( getSelectedItem ( ) ) != null ) { updateAlerts ( ) ; } }
protected org.ovirt.engine.core.compat.Guid getCurrentVdsId ( ) { org.ovirt.engine.core.compat.Guid destinationVdsId = getDestinationVdsId ( ) ; return destinationVdsId != null ? destinationVdsId : super . getCurrentVdsId ( ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s[%s]" , name , uuid ) ; }
public void dispose ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( "vdsManager::disposing" ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( onTimerJobId ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( vmsMonitoringJobId ) ; vdsProxy.close ( ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > setDisksUsage ( java.lang.Object [ ] disksUsageData ) { java.util.Map < java.lang.String , java.lang.Object > map = new java.util.HashMap < > ( ) ; map.put ( VdsProperties.VM_DISKS_USAGE , disksUsageData ) ; return map ; }
public void getVdsDefault ( ) { final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.jupiter.api.Assertions.assertNull ( v ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addConsoleDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.CONSOLE , VmDeviceType.CONSOLE , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getConsoleDeviceSpecParams ( ) , true , false ) ; }
public void setPlaceTransitionHandler ( org.ovirt.engine.ui.common.presenter.PlaceTransitionHandler handler ) { super . setPlaceTransitionHandler ( handler ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.initErrataGrid ( getTable ( ) , true , handler ) ; }
org.ovirt.engine.core.bll.CommandBase < ? > retrieveCommand ( org.ovirt.engine.core.compat.Guid commandId ) ;
public static boolean copyNonEditableFieldsToDestination ( org.ovirt.engine.core.common.businessentities.VmStatic source , org.ovirt.engine.core.common.businessentities.VmStatic destination , boolean hotSetEnabled ) { return org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.copyNonEditableFieldsToDestination ( source , destination , hotSetEnabled ) ; }
private java.util.List < org.ovirt.engine.api.model.UnmanagedNetwork > getAllUnmanagedNetworksByVdsId ( ) { return getBackendCollection ( QueryType.GetAllUnmanagedNetworksByHostId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ) ; }
private org.ovirt.engine.core.bll.MacPoolValidator createMacPoolValidator ( org.ovirt.engine.core.common.businessentities.MacPool macPool ) { org.ovirt.engine.core.bll.MacPoolValidator macPoolValidator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.MacPoolValidator ( macPool ) ) ; org.mockito.Mockito.doReturn ( dbFacadeMock ) . when ( macPoolValidator ) . getDbFacade ( ) ; return macPoolValidator ; }
public void testGetVmsListForDisk ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getVmsListForDisk ( FixturesTool.IMAGE_GROUP_ID , false ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , result.size ( ) , "wrong number of VMs" ) ; }
public void testValidateInstanceNameDuplicate ( ) { cmd.getParameters ( ) . setTemplateType ( VmEntityType.INSTANCE_TYPE ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . isInstanceWithSameNameExists ( "templateName" ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ; }
public < T > void mockConfigValue ( org.ovirt.engine.core.utils.MockConfigDescriptor < T > mcd ) { mockConfigValue ( mcd.getValue ( ) , mcd.getVersion ( ) , mcd.getReturnValue ( ) ) ; }
protected void runCommands ( ) { for ( org.ovirt.engine.core.bll.CommandBase < ? > command : getCommands ( ) ) { if ( command.getReturnValue ( ) . getCanDoAction ( ) ) { executeValidatedCommand ( command ) ; } } }
public void setTitle ( java.lang.String title ) { tooltipPanel.setText ( title ) ; }
protected void setUpGetEntityNextRunExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetVmNextRunConfiguration , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; }
public org.ovirt.engine.core.common.TimeZoneType getTimeZoneType ( ) { int vmOsType = ( ( java.lang.Integer ) ( getModel ( ) . getOSType ( ) . getSelectedItem ( ) ) ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( vmOsType ) ? org.ovirt.engine.core.common.TimeZoneType.WINDOWS_TIMEZONE : org.ovirt.engine.core.common.TimeZoneType.GENERAL_TIMEZONE ; }
public void vmIdNull ( ) { b.setVmId ( null ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , i ) ; }
public void onSuccess ( java.util.List < T > returnValue ) { setItems ( returnValue ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.aaa.DbGroup group ) { insertOrUpdate ( group , "UpdateGroup" ) ; }
public void setLabelStyleName ( java.lang.String styleName ) { getFormLabel ( ) . setStyleName ( styleName ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getConnections ( ) { return getEntity ( java.util.List.class , QueryType.GetStorageServerConnectionsForDomain , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , ( "storage domain: id=" + ( storageDomainId ) ) ) ; }
protected org.ovirt.engine.core.compat.Guid CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return CreateTask ( asyncTaskCreationInfo , parentCommand , null , entityType , entityIds ) ; }
public void updateAllInBatch ( java.lang.String procedureName , java.util.Collection < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > mapper ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity : paramValues ) { persistQosChanges ( entity ) ; } getCallsHandler ( ) . executeStoredProcAsBatch ( procedureName , paramValues , mapper ) ; }
public void testGetByLargeIconId ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VmIconDefault > result = dao.getByLargeIconId ( FixturesTool.LARGE_ICON_ID ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.contains ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsNetworkInterface ( ) { return createVdsNetworkInterface ( null , "interfaceWithUnreportedNetwork" ) ; }
public org.ovirt.engine.core.bll.ValidationResult domainIsValidDestination ( ) { if ( storageDomain.getStorageDomainType ( ) . isIsoOrImportExportDomain ( ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static void updateDiskVolumeType ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = ( storageType.isFileDomain ( ) ) ? org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated ; disk.setVolumeType ( volumeType ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return null ; }
public void testGetAllInterfacesWithIpAddress ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces = dao.getAllInterfacesWithIpAddress ( FixturesTool.CLUSTER , org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.IP_ADDR ) ; org.junit.jupiter.api.Assertions.assertNotNull ( interfaces ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , interfaces.size ( ) ) ; assertGetAllForVdsCorrectResult ( interfaces ) ; }
public void cluster_SelectedItemChanged ( ) { updateDefaultHost ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public void runMultipleActions ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > callbacks ) { runMultipleActions ( actionType , parameters , callbacks , null ) ; }
public void prepareForEdit ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { super . prepareForEdit ( storage ) ; boolean isEditable = isEditable ( storage ) ; setVfsChangeability ( isEditable ) ; getMountOptions ( ) . setIsChangable ( isEditable ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > listFailedAutorecoverables ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = getCallsHandler ( ) . executeReadList ( "GetFailingVdss" , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , null ) ; return uniteAgents ( vdsList ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } return source ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.StorageDomain source ) { return name.equals ( source.getStorageName ( ) ) ; }
private java.lang.Boolean isNfsStatistics ( ) { return org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.NFS_CONSTRAINT_PARAMETER , true , false ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "imageId" , imageId ) . append ( "volumeId" , volumeId ) . append ( "generation" , generation ) . append ( "qcowCompat" , qcowCompat ) ; }
public boolean isGetNamesOfVmsFromExternalProviderSupported ( org.ovirt.engine.core.compat.Version dataCenterVersion ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.GetNamesOfVmsFromExternalProviderSupported , dataCenterVersion.toString ( ) ) ) ) ; }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] certs , java.lang.String authType ) { tmcerts.addAll ( java.util.Arrays.asList ( certs ) ) ; }
public org.ovirt.engine.core.compat.Version getCompatibilityVersion ( ) { return compatVersion ; }
public void snapshotExistsByGuidReturnsInvalidResultWhenNoSnapshot ( ) throws java.lang.Exception { org.mockito.Mockito.when ( snapshotDao.exists ( vmId , snapshot.getId ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult ( validator.snapshotExists ( vmId , snapshot.getId ( ) ) , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
private void cancelConfirm ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = model.getSanStorageModel ( ) ; sanStorageModel.setForce ( false ) ; setConfirmWindow ( null ) ; }
public void reuseSession ( ) { java.lang.String sessionId = getSessionId ( ) ; if ( sessionId != null ) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire ( eventBus , sessionId ) ; } else { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe ( "Engine REST API session ID is not available" ) ; } }
public void testSameNotIpv6Strings ( ) { org.junit.jupiter.api.Assertions.assertTrue ( new org.ovirt.engine.core.utils.network.predicate.IpAddressPredicate ( org.ovirt.engine.core.utils.network.predicate.IpAddressPredicateTest.SOME_NON_IPV6_STRING ) . test ( org.ovirt.engine.core.utils.network.predicate.IpAddressPredicateTest.SOME_NON_IPV6_STRING ) ) ; }
public void testTemplate ( ) { testValidSql ( "Template: " , "SELECT * FROM ((SELECT distinct vm_templates_view.* FROM vm_templates_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Template: hosts.name = fake1" , "SELECT * FROM ((SELECT distinct vm_templates_view.* FROM vm_templates_view LEFT OUTER JOIN vms_with_tags ON vm_templates_view.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN vds_with_tags ON vms_with_tags.run_on_vds=vds_with_tags.vds_id WHERE vds_with_tags.vds_name LIKE fake1 ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Templates: storage.name = 111" , "SELECT * FROM (SELECT * FROM vm_templates_view WHERE ( vmt_guid IN (SELECT distinct vm_templates_storage_domain.vmt_guid FROM vm_templates_storage_domain LEFT OUTER JOIN vms_with_tags ON vm_templates_storage_domain.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vm_templates_storage_domain.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; StopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; postOnSave ( ) ; } }
public void testBadGuid ( ) { try { new org.ovirt.engine.api.restapi.resource.BackendClusterResource ( "foo" , new org.ovirt.engine.api.restapi.resource.BackendClustersResource ( ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private static org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry ( org.ovirt.engine.api.model.VnicProfileMapping model ) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping ( model.getSourceNetworkName ( ) , model.getSourceNetworkProfileName ( ) , org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.getTargetVnicProfileId ( model ) ) ; }
public void makeSortable ( ) { makeSortable ( java.util.Comparator.comparing ( this :: getProgressValue ) ) ; }
public void init ( org.ovirt.engine.core.common.businessentities.VDS vds ) { mCurrentVdsId = vds.getId ( ) ; setmIrsPort ( vds.getPort ( ) ) ; privatemCurrentIrsHost = vds.getHostName ( ) ; }
private void movePoolToProblematicInDB ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { updateStoragePoolStatus ( storagePool.getId ( ) , StoragePoolStatus.NonResponsive , AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC , EngineError.ENGINE ) ; storagePool.setSpmVdsId ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( storagePool ) ; }
public void passthroughProfileContainsQos ( ) { passthroughProfileContainsSupportedPropertiesTest ( true , false , DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "bootProtocol" , getBootProtocol ( ) ) . append ( "ipv4Addresses" , getIPv4Addresses ( ) ) . build ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.getNetworkDAO ( ) . remove ( org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.setSucceeded ( true ) ; }
private void verifyModel ( org.ovirt.engine.api.model.Watchdog model ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendInstanceTypeWatchdogResourceTest.WATCHDOG_ID.toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
private void setUpGetEntityExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( GUIDS [ 0 ] , false ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterHooksList ( ) ;
public java.lang.String getProperty ( java.lang.String key ) { return getProperty ( key , false ) ; }
public void getAllByStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots = dao.getAllByStorageDomain ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; org.junit.Assert.assertFalse ( "Snapshots list shouldn't be empty" , snapshots.isEmpty ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . save ( org.ovirt.engine.core.bll.AddTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . AddTag ( org.ovirt.engine.core.bll.AddTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.AddTagCommand.setSucceeded ( true ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( ( ( org.ovirt.engine.core.bll.ActivateDeactivateVmNicCommand.getParameters ( ) . getAction ( ) ) == ( org.ovirt.engine.core.common.action.PlugAction.PLUG ) ? org.ovirt.engine.core.dal.VdcBllMessages.VAR__ACTION__ACTIVATE : org.ovirt.engine.core.dal.VdcBllMessages.VAR__ACTION__DEACTIVATE ) ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__INTERFACE ) ; }
protected void endWithFailure ( ) { unlockImages ( ) ; org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.setSucceeded ( true ) ; }
public void getVmTemplateWithId ( ) { b.setVmTemplate ( null ) ; b.setVmTemplateId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.VmTemplate t = b.getVmTemplate ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( t ) ; }
private double getRequestDiskSpace ( ) { if ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getDiskInfo ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { return getDiskImageInfo ( ) . getSizeInGigabytes ( ) ; } return 0 ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus ( ) { return result.getStatus ( ) ; }
public void lowerVersionNoHostsWithNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworkToPool ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public void search ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( ( getEntity ( ) ) != null ) { preSearchCalled ( vm ) ; super . search ( ) ; } }
private org.ovirt.engine.core.compat.Guid getClusterIdByName ( java.lang.String name ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , QueryType.GetClusterByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , ( "Cluster: name=" + name ) ) . getId ( ) ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( domain.getStorageType ( ) ) . storageDomainRemoved ( domain.getStorageStaticData ( ) ) ; getStorageDomainDao ( ) . remove ( domain.getId ( ) ) ; return null ; }
public void typeMatchesProfileTypePassthroughProfileIsNull ( ) { typeMatchesProfileCommon ( true , null ) ; org.hamcrest.MatcherAssert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { }
public void setStorageIds ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageIds ) { this . storageIds = storageIds ; }
protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel model ) { driver.edit ( model ) ; monitorCount.setText ( java.lang.Integer.toString ( getModel ( ) . getMonitorCount ( ) ) ) ; }
public final void disconnect ( java.lang.String message ) { postDisconnect ( ) ; closeChannel ( ) ; emitOnMessageReceived ( buildNetworkResponse ( message ) ) ; }
private void localize ( ) { warningLabel.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.RemoveBrickPopupView.constants.removeBricksWarning ( ) ) ; migrateEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.RemoveBrickPopupView.constants.removeBricksMigrateData ( ) ) ; }
public void testRemoveAllOfTypeForVds ( ) throws java.lang.Exception { dao.removeAllOfTypeForVds ( org.ovirt.engine.core.dao.AuditLogDAOTest.VDS_ID , AuditLogType.IRS_DISK_SPACE_LOW_ERROR.getValue ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > result = dao.getAll ( ) ; org.junit.Assert.assertEquals ( 3 , result.size ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( actionType , engineSessionSeqId , correlationId , endTime , id , isVisible , jobSubjectEntities , lastUpdateTime , ownerId , startTime , status , steps , external , autoCleared ) ; }
public javax.ws.rs.core.Response remove ( org.ovirt.engine.api.v3.types.V3Action action ) { try { return adaptResponse ( getDelegate ( ) . remove ( org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( action ) ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.HostDeviceView > hostDevice ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.HostDeviceColumnHelper.renderVmNamesList ( hostDevice.getEntity ( ) . getAttachedVmNames ( ) ) ; }
protected boolean checkIfCpusSameManufacture ( org.ovirt.engine.core.common.businessentities.VDSGroup group ) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.checkIfCpusSameManufacture ( group.getCpuName ( ) , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCpuName ( ) , org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ; }
protected long convertGigabyteToBytes ( long gb ) { return gb * ( org.ovirt.engine.core.utils.ovf.OvfReader.BYTES_IN_GB ) ; }
public void nullVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileLinkingTest ( org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NULL_NETWORK_IS_NOT_SUPPORTED ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.junit.matchers.JUnitMatchers.hasItem ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT ) ) ) , false , null ) ; }
protected void fetchDocumentationFile ( ) { fetchFile ( ( ( getHelpTagMappingBaseURL ( ) ) + "webadmin.json" ) , documentationFileFetchedEvent ) ; }
protected boolean hasParentCommand ( ) { return ( getParameters ( ) . getParentCommand ( ) ) != ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > getAllByVMTemplateId ( org.ovirt.engine.core.compat.Guid vmTemplateId ) { return null ; }
org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.interfaces.BackendInternal.class ) ; }
private void setUpGetEntityExpectations ( int index ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , getEntity ( index ) ) ; }
public void setEnableBallooning ( org.ovirt.engine.ui.uicommonweb.models.EntityModel enableBallooning ) { this . enableBallooning = enableBallooning ; }
public void setCompatibilityVersion ( org.ovirt.engine.core.compat.Version value ) { compatibilityVersion = value.toString ( ) ; version = null ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( java.lang.String networkName ) { return new org.ovirt.engine.core.common.businessentities.network.Network ( "" , "" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , networkName , "" , "" , 0 , null , false , 0 , true ) ; }
public void setHighlyAvailableLocalMaintenance ( boolean value ) { vdsStatistics.setHighlyAvailableLocalMaintenance ( value ) ; }
public java.lang.Integer getUtcDiff ( ) { return this . vmDynamic.getUtcDiff ( ) ; }
public java.lang.String getBondOptions ( ) { return getIface ( ) . getBondOptions ( ) ; }
public boolean isHostedEngineConfigured ( ) { return vdsDynamic.isHostedEngineConfigured ( ) ; }
public void setActive ( boolean active ) { getImage ( ) . setActive ( active ) ; }
protected void executeCommand ( ) { getOldVnicProfile ( ) ; vnicProfileDao.update ( org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getVnicProfile ( ) ) ; org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.setSucceeded ( true ) ; }
boolean isHypervEnabled ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public void testEvalPositive ( ) { mockExternalNetworkPredicate.setTestResult ( false ) ; org.junit.Assert.assertTrue ( underTest.test ( mockNetwork ) ) ; }
public void afterCompletion ( int status ) { if ( ! ( org.ovirt.engine.core.utils.transaction.TransactionSupport.needToRollback ( status ) ) ) return ; rollbackHandler.rollback ( ) ; }
public void setIsVolumeFormatAvailable ( boolean isVolumeFormatAvailable ) { this . volumeFormatAvailable = isVolumeFormatAvailable ; }
public void testMemoryDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData ( ) ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > memoryDisks = ovfUtils.fetchMemoryDisks ( xmlDocument ) ; org.junit.jupiter.api.Assertions.assertFalse ( memoryDisks.isEmpty ( ) , "The list of memory disks for snapshot should not be empty" ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateVmStatusUsingMatrix ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ! ( org.ovirt.engine.core.common.VdcActionUtils.CanExecute ( java.util.Arrays.asList ( vm ) , org.ovirt.engine.core.common.businessentities.VM.class , VdcActionType.RunVm ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage getNewDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return diskImage ; }
public java.lang.Integer getPendingVcpusCount ( ) { return mVdsDynamic.getpending_vcpus_count ( ) ; }
public void networkPrefixInnocent ( ) throws java.lang.Exception { networkPrefixValidTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , DEFAULT_NETWORK_NAME ) ; }
protected org.ovirt.engine.core.bll.validator.StorageDomainValidator createStorageDomainValidator ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( storageDomain ) ; }
java.util.Map < java.lang.String , java.lang.Object > snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) ;
protected void executeCommand ( ) { auditLogDao.displayAllEvents ( ) ; org.ovirt.engine.core.bll.DisplayAllAuditLogEventsCommand.setSucceeded ( true ) ; }
private java.lang.String resolveSystemHostName ( ) { try { return java.net.InetAddress.getLocalHost ( ) . getHostName ( ) ; } catch ( java.net.UnknownHostException e ) { org.ovirt.engine.core.bll.host.provider.foreman.SystemProviderFinder.log.error ( "Failed to resolve hostname for the engine server" , e ) ; return null ; } }
public void testGetSystemStatisticsValueWithSpecifiedStatus ( ) { int numOfVmWithStatusMigratingFrom = dbFacade.getSystemStatisticsValue ( "VM" , java.lang.Integer.toString ( VMStatus.MigratingFrom.getValue ( ) ) ) ; org.junit.Assert.assertTrue ( ( numOfVmWithStatusMigratingFrom == ( org.ovirt.engine.core.dao.DbFacadeDAOTest.NUM_OF_VM_IN_FIXTURES_WITH_STATUS_MIGRATING_FROM ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createNewCluster ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 ) ; group.setName ( "Default" ) ; group.setClusterPolicyId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return group ; }
public void testValidateStatusUpForActivation ( ) { mockHostForActivation ( VDSStatus.Up ) ; org.junit.Assert.assertThat ( validator.validateStatusForActivation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_ALREADY_UP ) ) ; }
protected void logEndTaskSuccess ( ) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.infoFormat ( "BaseAsyncTask::onTaskEndSuccess: Task '{0}' (Parent Command {1}, Parameters Type {2}) ended successfully." , getVdsmTaskId ( ) , getParameters ( ) . getDbAsyncTask ( ) . getaction_type ( ) , getParameters ( ) . getClass ( ) . getName ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > connectStoragePool ( java.lang.String spUUID , int hostSpmId , java.lang.String SCSIKey , java.lang.String masterdomainId , int masterVersion , java.util.Map < java.lang.String , java.lang.String > storageDomains ) ;
public void updateGlusterHookStatus ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) ;
private void debugAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.ActionParametersBase params ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Action type '{}', Parameters '{}'" , actionType , params ) ; }
public int getTasksCountCurrentActionType ( ) { int returnValue = 0 ; synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.CommandAsyncTask > CurrentActionTypeTasks = getCurrentTasks ( ) ; returnValue = CurrentActionTypeTasks.size ( ) ; } return returnValue ; }
protected void removeVmSnapshots ( ) { getSnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; }
protected void removeNodeSpi ( ) { if ( ( parent ( ) ) == null ) { throw new java.lang.IllegalArgumentException ( "Cannot remove root node" ) ; } parent ( ) . remove ( this . name ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.RegisterLibvirtSecretsVDSCommand.getBroker ( ) . registerSecrets ( buildStructFromLibvirtSecretsList ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.RegisterLibvirtSecretsVDSCommand.getParameters ( ) . isClearUnusedSecrets ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.RegisterLibvirtSecretsVDSCommand.proceedProxyReturnValue ( ) ; }
public java.util.HashSet < org.ovirt.engine.core.compat.Version > getSupportedClusterVersionsSet ( ) { if ( ( supportedClusterVersionsSet ) == null ) { supportedClusterVersionsSet = parseSupportedVersions ( getSupportedClusterLevels ( ) ) ; } return supportedClusterVersionsSet ; }
protected void executeCommand ( ) { getProviderDao ( ) . remove ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand.setSucceeded ( true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.IMAGE ) ; revealDiskPanel ( disk ) ; }
public void testCanDoFailReadOnlyOnInterface ( ) { org.mockito.Mockito.when ( diskValidator.isReadOnlyPropertyCompatibleWithInterface ( ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ; org.mockito.Mockito.verify ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > add_image_ticket ( java.lang.String ticketId , java.lang.String [ ] ops , long timeout , long size , java.lang.String url ) ;
public void passthroughChangedUsedByVms ( ) { passthroughNotChangedIfUsedByVmsTest ( true , false , true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.passthroughNotChangedIfUsedByVms ( ) , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.failsWithVnicProfileInUse ( ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > getReadOnly ( ) { return readOnly ; }
java.util.concurrent.FutureTask < java.util.Map < java.lang.String , java.lang.Object > > timeBoundPoll ( long timeout , java.util.concurrent.TimeUnit unit ) ;
public org.ovirt.engine.core.common.errors.EngineFault getFault ( ) { if ( ( fault ) == null ) { fault = new org.ovirt.engine.core.common.errors.EngineFault ( ) ; fault.setError ( EngineError.ENGINE ) ; fault.setMessage ( EngineError.ENGINE.name ( ) ) ; } return fault ; }
public void stopProgress ( ) { org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . setContent ( popupContent ) ; org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . setFooterPanelVisible ( true ) ; updateTabIndexes ( ) ; focusInput ( ) ; }
public void getPlaceHolderListTestNoPlaceHolder ( ) { java.lang.String testMessage = "This is a test without place holders" ; java.util.List < java.lang.Integer > result = testMessages.getPlaceHolderList ( testMessage ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) , "Result should be empty" ) ; }
public java.lang.String getValue ( java.util.Map < java.lang.String , java.lang.String > object ) { return object.get ( org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostHookView.PROPERTY_NAME ) ; }
public void testMacIsNotContainedInRange ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( rangeOf10Macs.contains ( org.ovirt.engine.core.bll.network.macpool.RangeTest.MAC_OUTSIDE_OF_RANGE ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolEqual ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocol ( true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void testAddUser_2 ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDomainList , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpDomains ( ) ) ; setUpAddUserExpectations ( ( ( ( "ADUSER@" + ( DOMAIN ) ) + ":: username=" ) + ( NAMES [ 0 ] ) ) ) ; org.ovirt.engine.api.model.User model = new org.ovirt.engine.api.model.User ( ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN ) ; domain.setId ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( domain.getName ( ) ) ) ; model.setDomain ( domain ) ; model.setUserName ( NAMES [ 0 ] ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; verifyAddUser ( response ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.createFenceExclusiveLocksMap ( getProblematicVdsId ( ) ) ; }
public void passwordIsEmpty ( ) { org.junit.Assert.assertThat ( validator.passwordNotEmpty ( false , AuthenticationMethod.Password , null ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.VDS_CANNOT_INSTALL_EMPTY_PASSWORD ) ) ; }
public org.ovirt.engine.api.resource.openstack.OpenstackVolumeTypesResource getVolumeTypesResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeTypesResource ( id ) ) ; }
public void testGetAllVfsConfigByHostId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > vfsConfigs = dao.getAllVfsConfigByHostId ( org.ovirt.engine.core.dao.network.HostNicVfsConfigDaoTest.HOST_ID ) ; org.junit.Assert.assertEquals ( 2 , vfsConfigs.size ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; }
public boolean isVmTemlateWithSameNameExist ( java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId ) { return ( vmTemplateDao.getByName ( name , datacenterId , null , false ) ) != null ; }
public final boolean connect ( java.lang.String server ) { return connect ( server , org.ovirt.engine.core.common.config.Config.resolveKeyStorePath ( ) , org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.keystorePass ) ) ; }
public void setAppList ( java.lang.String value ) { this . vmDynamic.setapp_list ( value ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback ( ) ; }
public static org.ovirt.engine.core.compat.CommandStatus getCommandStatus ( org.ovirt.engine.core.compat.Guid commandId ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.getCommandStatus ( commandId ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { logSsoOnDesktopFailedAgentNonResp ( spiceConsoleModel.getLogger ( ) , ( logonCommandReturnValue != null ? logonCommandReturnValue.getDescription ( ) : "" ) ) ; spiceConsoleModel.executeQuery ( getEntity ( ) ) ; parentModel.setWindow ( null ) ; }
protected void entityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . entityPropertyChanged ( sender , e ) ; UpdateProperties ( ) ; }
protected void doNetworkOperation ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue , java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType > nicWithLogicalNetworks ) { networkCreatingManager.updateVnics ( idToUpdate , nicWithLogicalNetworks ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainList ( ) { return java.util.stream.Stream.of ( firstStorageDomainId , secondStorageDomainId ) . map ( this :: mockDomain ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public boolean getIsStaticAddress ( ) { return ( getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP ) ; }
public void validateChangeNamePoolNotUp ( ) { sd.setStorageName ( org.apache.commons.lang.StringUtils.reverse ( sd.getStorageName ( ) ) ) ; sp.setStatus ( StoragePoolStatus.Maintenance ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_STATUS_ILLEGAL ) ; }
public void onPowerringUp ( ) { decreasePendingVm ( org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDao ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
public void testRemove ( ) { dao.remove ( existingAuditLog.getAuditLogId ( ) ) ; org.ovirt.engine.core.common.businessentities.AuditLog result = dao.get ( existingAuditLog.getAuditLogId ( ) ) ; org.junit.Assert.assertTrue ( result.isDeleted ( ) ) ; }
public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForInternalJob ( new org.ovirt.engine.core.bll.context.CommandContext ( new org.ovirt.engine.core.bll.context.EngineContext ( ) ) , lock ) ; }
public void setCpuOverCommitDurationMinutes ( int value ) { this . cpuOverCommitDurationMinutes = value ; }
public void bondWithNoSlaves ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; mockExistingIfaces ( bond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( bond ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ; }
public void setVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { this . vm = vm ; }
public void testMacToLong ( ) { org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( "00:1a:4a:01:00:00" ) , org.hamcrest.CoreMatchers.is ( 112910729216L ) ) ; }
protected org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector getAuditLogDirector ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class ) ; }
protected void ExecuteVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksStatusesVDSCommand.getBroker ( ) . getAllTasksStatuses ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksStatusesVDSCommand.proceedProxyReturnValue ( ) ; setReturnValue ( ParseTaskStatusList ( _result.TaskStatusList ) ) ; }
public void testEvalNegative ( ) { org.mockito.Mockito.doReturn ( true ) . when ( mockExternalNetworkPredicate ) . test ( mockNetwork ) ; org.junit.jupiter.api.Assertions.assertFalse ( underTest.test ( mockNetwork ) ) ; }
public void stringToVCpupinIntervalsList ( ) { org.ovirt.engine.api.model.VcpuPin pin = org.ovirt.engine.api.restapi.types.VmMapper.stringToVCpupin ( "1#1-4,6" ) ; assertEquals ( 1 , ( ( int ) ( pin.getVcpu ( ) ) ) ) ; assertEquals ( "1-4,6" , pin.getCpuSet ( ) ) ; }
org.ovirt.engine.core.bll.validator.network.NetworkType determineNetworkType ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return org.ovirt.engine.core.utils.NetworkUtils.isVlan ( network ) ? org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN : network.isVmNetwork ( ) ? org.ovirt.engine.core.bll.validator.network.NetworkType.VM : org.ovirt.engine.core.bll.validator.network.NetworkType.NON_VM ; }
public void setAllowConsoleReconnect ( boolean value ) { this . vmStatic.setAllowConsoleReconnect ( value ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm.getDynamicData ( ) , vm.getstatus ( ) ) ; org.ovirt.engine.core.bll.VmHandler.UnLockVm ( vm ) ; compensationContext.stateChanged ( ) ; return null ; }
public static org.ovirt.engine.core.common.businessentities.StorageDomain setUpStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainType domainType ) { org.ovirt.engine.api.restapi.resource.StorageDomain entity = new org.ovirt.engine.api.restapi.resource.StorageDomain ( ) ; entity.setId ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmsResourceTest.STORAGE_DOMAIN_ID ) ; entity.setStorageDomainType ( domainType ) ; return entity ; }
public void testPatternBasedNameFails ( ) { initializeMock ( ) ; cmd.getParameters ( ) . getVm ( ) . setName ( "aa-??bb" ) ; org.junit.Assert.assertFalse ( "Pattern-based name should not be supported for VM" , cmd.validateInputs ( ) ) ; }
public void testGetAllVdsNumaNodeByVdsId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > result = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { return new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; }
public void testEmptyDisksUsages ( ) { java.lang.Object [ ] disksUsages = new java.lang.Object [ 0 ] ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , xml ) ; }
public void setUsePatternFly ( boolean use ) { super . setUsePatternFly ( use ) ; if ( use ) { contentWidget.addStyleName ( ColumnSize.SM_1.getCssName ( ) ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllRunningVdssInPool ( ) { return org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getVdsDao ( ) . getAllForStoragePoolAndStatus ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) . getId ( ) , VDSStatus.Up ) ; }
public void testGetAllForDiskProfiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForDiskProfiles ( java.util.Collections.singleton ( FixturesTool.DISK_PROFILE_1 ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public void vnicProfileNull ( ) throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator ( null , vmDao , dcDao , networkFilterDao ) ; org.junit.Assert.assertThat ( validator.vnicProfileIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) ) ; }
private void setStorageDomainStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setStatus ( status ) ; org.mockito.Mockito.when ( cmd.getStorageDomain ( ) ) . thenReturn ( domain ) ; }
public abstract void execute ( int iterationId ) ;
public void testChangeClusterForbidden ( ) { prepareVmToPassCanDoAction ( ) ; vmStatic.setVdsGroupId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; junit.framework.Assert.assertFalse ( "canDoAction should have failed with cant change cluster." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { return diskImage.getImageId ( ) . equals ( guid ) ; }
public void testNotDescetor ( ) { org.ovirt.engine.core.common.businessentities.Tags tag1 = createTag ( "tag1" , "desc1" ) ; org.ovirt.engine.core.common.businessentities.Tags tag2 = createTag ( "tag2" , "desc2" ) ; org.junit.Assert.assertFalse ( tagsDirector.isTagDescestorOfTag ( tag1.getTagId ( ) , tag2.getTagId ( ) ) ) ; }
public void invalidCluster ( ) { createSimpleCommand ( ) ; org.mockito.Mockito.when ( clusterDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; validateFailedWithReason ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID ) ; }
protected void syncSearch ( ) { super . syncSearch ( ) ; updateOptionsAsync ( ( ( getPrefix ( ) ) + ( getSearchString ( ) ) ) ) ; }
public static int getOptimizeSchedulerForSpeedPendingRequests ( ) { return ( ( java.lang.Integer ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.SpeedOptimizationSchedulingThreshold , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) ) ) ; }
public void setUsbPolicy ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( usbPolicy , value ) ) ) { usbPolicy = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "UsbPolicy" ) ) ; } }
org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturnForXmlRpc getHostJobs ( java.lang.String jobType , java.util.List < java.lang.String > jobIds ) ;
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . execute ( ) ; updateIsDiskHotPlugAvailable ( ) ; updateLiveStorageMigrationEnabled ( ) ; } updateActionAvailability ( ) ; }
protected javax.ws.rs.core.Response performCreate ( java.lang.String labelId ) { return performCreate ( VdcActionType.LabelNic , new org.ovirt.engine.core.common.action.LabelNicParameters ( nicId , labelId ) , new org.ovirt.engine.api.restapi.resource.NetworkLabelIdResolver ( nicId ) ) ; }
public org.ovirt.engine.api.resource.NetworksResource getNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource ( id ) ) ; }
public java.lang.Boolean isSuspendSupportedByArchitecture ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture , org.ovirt.engine.core.compat.Version version ) { return suspendSupport.get ( architecture ) . get ( version ) ; }
public static java.lang.Object getConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , version ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get ( key ) ; }
public org.ovirt.engine.core.bll.ValidationResult parentEntityNotChanged ( ) { if ( java.util.Objects.equals ( getProfile ( ) . getClusterId ( ) , getProfileFromDb ( ) . getClusterId ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_CHANGE_PROFILE ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__REMOVE ) ; addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_GEOREP_SESSION ) ; addValidationMessageVariable ( "volumeName" , getGlusterVolumeName ( ) ) ; addValidationMessageVariable ( "vdsGroup" , getVdsGroupName ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingDefaultPool ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_DEFAULT_MAC_POOL ) . when ( macPool.isDefaultPool ( ) ) ; }
public void managementNetworkUnsetInvalid ( ) { testManagementNetworkUnset ( true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_UNSET ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getAllWithQuery ( java.lang.String query ) { return getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance ) ; }
public java.lang.Void runInTransaction ( ) { commandsCache.updateCallBackNotified ( commandId ) ; return null ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; }
public void validateBlankDescriptionFails ( ) throws java.lang.Exception { setupMock ( ) ; parameters.setDescription ( " " ) ; org.junit.Assert.assertTrue ( ( ! ( commandMock.validate ( ) ) ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.provider.ProviderValidator validator = new org.ovirt.engine.core.bll.provider.ProviderValidator ( getProvider ( ) ) ; return ( validate ( validator.providerIsSet ( ) ) ) && ( validate ( validator.validateReadOnlyActions ( ) ) ) ; }
public void setItems ( java.lang.Iterable value ) { if ( ( items ) != value ) { itemsChanging ( value , items ) ; items = value ; getItemsChangedEvent ( ) . raise ( this , EventArgs.EMPTY ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Items" ) ) ; } }
public void setCheckPointCompletedAt ( java.util.Date checkPointCompletedAt ) { this . checkPointCompletedAt = checkPointCompletedAt ; }
protected void verifyBuiltTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { super . verifyBuiltCommonVm ( template ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModelTest.VERSION_NAME , template.getTemplateVersionName ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index ) { return setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index ) ; }
public void testValidateVmMigrating ( ) { prepareForVmValidatorTests ( ) ; cmd.getVm ( ) . setStatus ( VMStatus.MigratingTo ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP ) ; }
protected void updateDisksFromDB ( org.ovirt.engine.core.common.businessentities.VM vm ) { vmHandler.updateDisksFromDb ( vm ) ; }
public java.lang.String getVmPropSpec ( ) { return VALIDATION_STR ; }
public boolean hasVirtioScsiController ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( getVirtioScsiControllers ( vmId ) . isEmpty ( ) ) ; }
boolean disconnectStorageFromDomainByStoragePoolId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid storagePoolId ) ;
com.google.gwt.safehtml.shared.SafeHtml image ( com.google.gwt.safecss.shared.SafeStyles imageStyles ) ;
private void setVmAffinityEnforcing ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > vmAffinityEnforcing ) { this . vmAffinityEnforcing = vmAffinityEnforcing ; }
protected java.util.List < org.ovirt.engine.core.compat.Guid > getRunVdssList ( ) { return runVdsList ; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase createBehavior ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { if ( ! ( template.isBlank ( ) ) ) { return new org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior ( template ) ; } return new org.ovirt.engine.ui.uicommonweb.models.templates.ExistingBlankTemplateModelBehavior ( template ) ; }
public void setQuotaName ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( defaultHost , value ) ) ) { this . quotaName = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "QuotaName" ) ) ; } }
public void setVolumeEntity ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity ) { this . volumeEntity = volumeEntity ; updateRemoveBrickActionsAvailability ( volumeEntity ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getMultiBrickVolume ( org.ovirt.engine.core.compat.Guid volumeId , int brickCount ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume ( volumeId ) ; volume.setStatus ( GlusterStatus.UP ) ; volume.setBricks ( getBricks ( volumeId , brickCount ) ) ; volume.setClusterId ( clusterId ) ; return volume ; }
protected void setUpMockQueryParameters ( ) { super . setUpMockQueryParameters ( ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getStoragePoolId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getImageType ( ) ) . thenReturn ( expectedType ) ; }
protected void endSuccessfully ( ) { org.ovirt.engine.core.bll.AddVmToPoolCommand.setSucceeded ( true ) ; }
public void testNetworkAttachmentIsSetWhenAttachmentIsNull ( ) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NULL_PASSED_AS_NETWORK_ATTACHMENT ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( null ) . networkAttachmentIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , null ) ) ) ; }
public void setError ( java.lang.String msg ) { getImportSourceValid ( ) . setMessage ( msg ) ; getImportSourceValid ( ) . setEntity ( false ) ; }
protected org.ovirt.engine.core.compat.Guid getPredefinedVdsIdToRunOn ( ) { return org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage mockDiskImage ( org.ovirt.engine.core.compat.Guid diskImageId ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setId ( diskImageId ) ; diskImage.setImageId ( diskImageId ) ; return diskImage ; }
protected boolean isImageExclusiveLockNeeded ( ) { return ( ( getDiskType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) && ( ( ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getDisk ( ) ) ) . getVolumeFormat ( ) ) != ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW ) ) ; }
public void testQuery ( ) throws java.lang.Exception { collection.setUriInfo ( setUpUriExpectations ( org.ovirt.engine.api.restapi.resource.gluster.QUERY ) ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.gluster.QUERY ) ; collection.setParent ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumesResourceTest.parentMock ) ; verifyCollection ( getCollection ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logoff ( org.ovirt.engine.core.common.action.LogoutUserParameters parameters ) { return runAction ( VdcActionType.LogoutUser , parameters ) ; }
public void onDrop ( com.google.gwt.event.dom.client.DropEvent event ) { eventBus.fireEvent ( new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.AutoScrollDisableEvent ( this ) ) ; event.preventDefault ( ) ; doDrag ( event , true ) ; table.getElement ( ) . removeClassName ( style.networkGroupDragOver ( ) ) ; }
public java.lang.String getConstantStyleName ( org.ovirt.api.metamodel.concepts.Name name ) { return avoidReservedWord ( names.getUpperJoined ( name , "_" ) ) ; }
private void initAgents ( ) { agent1 = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent1.setOrder ( 1 ) ; agent2 = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent2.setOrder ( 2 ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { numaSupport ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.Network , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.clusterNetworkSubTabLabel ( ) , 1 , modelProvider ) ; }
private boolean hasVms ( java.lang.Object selectedItem ) { if ( selectedItem instanceof org.ovirt.engine.core.common.businessentities.VmPool ) { return ( ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( selectedItem ) ) . getvm_assigned_count ( ) ) != 0 ; } return false ; }
private void startRefresh ( ) { if ( ( getTimer ( ) ) != null ) { getTimer ( ) . start ( ) ; } }
private void cpuFlagsMissing ( ) { java.util.List < java.lang.String > strings = new java.util.ArrayList < > ( ) ; strings.add ( "foo" ) ; org.mockito.Mockito.doReturn ( strings ) . when ( cmd ) . missingServerCpuFlags ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public static org.ovirt.engine.core.utils.log.Log getLog ( java.lang.Class < ? > loggedClass ) { return new org.ovirt.engine.core.utils.log.Log ( org.slf4j.LoggerFactory.getLogger ( loggedClass ) ) ; }
public void testOnlyLoginNameWhenNoDirectorySet ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; user.setLoginName ( "Legolas" ) ; user.setDomain ( "" ) ; command.setCurrentUser ( user ) ; org.junit.jupiter.api.Assertions.assertEquals ( "Legolas" , command.getConsoleUserName ( ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.getBroker ( ) . migrate ( migrationInfo ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.proceedProxyReturnValue ( ) ; }
public void testGetAllWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAll ( org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
public void writeElement ( java.lang.String name , java.lang.String content ) { writeStartElement ( name ) ; writeRaw ( content ) ; writeEndElement ( ) ; }
private boolean isCopyCollapseOrNoSnapshots ( ) { return ! ( isCopyCollapseDisabledWithSnapshotsOrWithTemplate ( ) ) ; }
private void verifyCPU ( org.ovirt.engine.api.model.CPU cpu , java.lang.String name , java.lang.Integer level ) { assertNotNull ( cpu ) ; assertEquals ( name , cpu.getType ( ) ) ; assertEquals ( level , cpu.getLevel ( ) ) ; }
protected boolean isHotPlugSupported ( ) { if ( org.ovirt.engine.core.common.FeatureSupported.hotPlug ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getClusterCompatibilityVersion ( ) ) ) { return true ; } return failValidation ( EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED ) ; }
public java.lang.Object getEntityId ( ) { return ( _entityId ) == null ? getDbAsyncTask ( ) . getActionParameters ( ) . getEntityId ( ) : _entityId ; }
public java.lang.String getUserPassword ( ) { return org.ovirt.engine.ui.frontend.Frontend.getLoginPassword ( ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , entitiesMap ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction ( org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task , org.ovirt.engine.core.bll.job.ExecutionContext context ) { return coCoAsyncTaskHelper.endAction ( task , context ) ; }
protected boolean isNicSupportedForPlugUnPlug ( ) { if ( osRepository.hasNicHotplugSupport ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getClusterCompatibilityVersion ( ) ) ) { return true ; } return failValidation ( EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; }
public boolean isRunningOrPaused ( ) { return ( ( ( this . isRunning ( ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) || ( this . isHibernating ( ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState ) ) ; }
protected void persistCollectedData ( ) { updateNetConfigDirtyFlag ( ) ; hostNetworkTopologyPersister.persistAndEnforceNetworkCompliance ( getVds ( ) , skipManagementNetwork ( ) , org.ovirt.engine.core.common.businessentities.Entities.entitiesByName ( getParameters ( ) . getInterfaces ( ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.VmImportGeneralModel getModel ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmImportGeneralModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmImportGeneralModel ) ( importModel.getDetailModels ( ) . get ( 0 ) ) ) ; model.setSource ( ImportSource.EXPORT_DOMAIN ) ; return model ; }
public void setLastModifiedDate ( java.util.Date lastModifiedDate ) { this . lastModifiedDate = lastModifiedDate ; }
public void addPermissionsOnNetwork ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.compat.Guid networkId ) { multiLevelAdministrationHandler.addPermission ( userId , networkId , PredefinedRoles.NETWORK_ADMIN , VdcObjectType.Network ) ; }
public void testExecuteQueryGetAllEntitiesCommand ( ) { getQuery ( ) . executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) , "Wrong number of Templates in result" ) ; }
public void setvds_group_id ( org.ovirt.engine.core.compat.Guid value ) { this . vdsGroupId = value ; }
public void setSource ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource source ) { this . source = source ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Quota > searchQuota ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = genericSearch ( quotaDao , true ) ; quotaManager.updateUsage ( quotaList ) ; return quotaList ; }
public void executeCommand ( ) { setupMocks ( ) ; mockBackendStatusChange ( true ) ; cmd.executeCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_HOOK_ENABLE , cmd.getAuditLogTypeValue ( ) ) ; }
protected org.ovirt.engine.core.dao.gluster.GlusterVolumeDao getGlusterVolumeDao ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDao.class ) ; }
public void validVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileLinkingTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
public void qosBondAndSlaveSpeedsZero ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosBondSpeedSetup ( 0 , 0 ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INVALID_INTERFACE_SPEED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) ; }
public void testFirstParameterIsNotNull ( ) { org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged ( null , new org.ovirt.engine.core.common.businessentities.MacPool ( ) ) ) ; }
private com.woorea.openstack.quantum.Quantum getClient ( ) { if ( ( client ) == null ) { client = new com.woorea.openstack.quantum.Quantum ( ( ( provider.getUrl ( ) ) + ( org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.API_VERSION ) ) ) ; } return client ; }
public void testHasPeersFalse ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.utils.gluster.GlusterUtilTest.OUTPUT_XML_NO_PEERS ) . when ( glusterUtil ) . executePeerStatusCommand ( client ) ; org.junit.Assert.assertTrue ( glusterUtil.getPeers ( client ) . isEmpty ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingNetworkAttachment ( ) { if ( ( existingNetworkAttachment ) == null ) { existingNetworkAttachment = networkAttachmentDao.get ( attachment.getId ( ) ) ; } return existingNetworkAttachment ; }
public void Search ( ) { if ( ( getEntity ( ) ) != null ) { setSearchString ( ( "events: event_storage=" + ( getEntity ( ) . getstorage_name ( ) ) ) ) ; super . Search ( ) ; } }
public void validateVmMemoryCanRunOnVdsHighMem ( ) { vm.setMinAllocatedMem ( 10000 ) ; vm.setVmMemSizeMb ( 10000 ) ; vds.setPhysicalMemMb ( 15000 ) ; boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM ( vds , vm ) ; org.junit.jupiter.api.Assertions.assertTrue ( vmPassedMemoryRequirement ) ; }
protected void setDestinationVdsId ( org.ovirt.engine.core.compat.Guid vdsId ) { destinationVds = ( vdsId != null ) ? org.ovirt.engine.core.bll.MigrateVmCommand.getVdsDao ( ) . get ( vdsId ) : null ; }
private void loadService ( java.lang.Class < ? extends org.ovirt.engine.core.common.BackendService > service ) { org.ovirt.engine.core.bll.Backend.log.info ( "Start {} " , services.select ( service ) . get ( ) ) ; }
public void typeMatchesProfileOnlyProfilePassthrough ( ) { typeMatchesProfileCommon ( false , true ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( ) { if ( ( cachedStorageDomain ) == null ) { cachedStorageDomain = getStorageDomainDao ( ) . get ( params.getStorageDomainId ( ) ) ; } return cachedStorageDomain ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.AddTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags fromTagsDirector = tagsDirector.GetTagByName ( "tag1" ) ; org.junit.Assert.assertNotNull ( fromTagsDirector ) ; org.junit.Assert.assertEquals ( tag , fromTagsDirector ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.VDS o1 , org.ovirt.engine.core.common.businessentities.VDS o2 ) { return ( o1.getVmCount ( ) ) - ( o2.getVmCount ( ) ) ; }
private java.lang.String showVncConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model ) { model.getDefaultConsoleModel ( ) . getConnectCommand ( ) . execute ( ) ; return null ; }
private int calculateJsonFieldPotentialOverhead ( java.lang.String fieldName , java.util.Map < java.lang.String , java.lang.Object > descriptionMap ) { return ( generateJsonField ( fieldName , StringUtils.EMPTY ) . length ( ) ) + ( descriptionMap.isEmpty ( ) ? 0 : 1 ) ; }
public boolean render ( org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel value ) { if ( value instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) { return extractBoolean ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) ( value ) ) . getSpiceImpl ( ) ) ; } return false ; }
public java.lang.String render ( org.ovirt.engine.core.compat.RpmVersion version ) { java.lang.String formattedVersion = version.getRpmName ( ) ; return new org.ovirt.engine.ui.common.widget.renderer.EmptyValueRenderer < java.lang.String > ( org.ovirt.engine.ui.webadmin.widget.renderer.VersionRenderer.constants.unAvailablePropertyLabel ( ) ) . render ( formattedVersion ) ; }
public void cutSelf ( ) { if ( hasParent ( ) ) { parent.getNodes ( ) . remove ( this ) ; if ( parent.getNodes ( ) . isEmpty ( ) ) { parent.cutSelf ( ) ; } } }
private void initProcessedInfoLists ( ) { proccessedIdsInfo = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ; proccessedOvfGenerationsInfo = new java.util.LinkedList < java.lang.Long > ( ) ; proccessedOvfConfigurationsInfo = new java.util.LinkedList < > ( ) ; removedOvfIdsInfo = null ; }
protected org.ovirt.engine.api.model.StorageDomain addParents ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { storageDomain.setDataCenter ( new org.ovirt.engine.api.model.DataCenter ( ) ) ; storageDomain.getDataCenter ( ) . setId ( dataCenterId.toString ( ) ) ; org.ovirt.engine.api.restapi.util.StorageDomainHelper.addAttachedDataCenterReferences ( this , storageDomain ) ; return storageDomain ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView ( ) . flush ( ) ; getView ( ) . getLoginButton ( ) . getCommand ( ) . Execute ( ) ; }
public void setUp ( ) throws java.lang.Exception { java.io.File etcDir = new java.io.File ( this . getClass ( ) . getClassLoader ( ) . getResource ( "./org/ovirt/engine/core/utils" ) . toURI ( ) . getPath ( ) ) ; testManager = new org.ovirt.engine.core.utils.branding.BrandingManager ( etcDir ) ; }
private boolean isHostedEngineOnVds ( ) { return vms.stream ( ) . anyMatch ( VM :: isHostedEngine ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { revertCinderDisks ( childCmdIds ) ; getCommand ( cmdId ) . endAction ( ) ; getCommand ( cmdId ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; }
public void testGetByVdsNameWithInvalidName ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic result = dao.getByVdsName ( "farkle" ) ; org.junit.Assert.assertNull ( result ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getQueryReturnValue ( ) . setReturnValue ( glusterHooksDao.getByClusterId ( org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getParameters ( ) . getClusterId ( ) ) ) ; org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getQueryReturnValue ( ) . setSucceeded ( true ) ; }
public void tearDown ( ) { org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance ( ) . clear ( ) ; }
public int hashCode ( ) { return java.util.Objects.hashCode ( iPv4Addresses ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc copyData ( java.lang.String jobId , java.util.Map src , java.util.Map dst ) ;
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . isUseCinderCommandCallback ( ) ) && ( getFlow ( ) . isStateless ( ) ) ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback ( ) : null ; }
public void testValidModifiedBondsFailsWhenBondNotHaveNameAndId ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = new org.ovirt.engine.core.common.action.CreateOrUpdateBond ( ) ; doTestValidModifiedBonds ( createOrUpdateBond , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.BOND_DOES_NOT_HAVE_NEITHER_ID_NOR_NAME_SPECIFIED ) , ValidationResult.VALID ) ; }
protected boolean validateTemplateArchitecture ( ) { if ( ( getVmTemplate ( ) . getClusterArch ( ) ) == ( org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE ) ; return false ; } return true ; }
public void prepareSetupNetworksParamsToAttachTo ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createAttachmentWhenAttachingTo ( targetNic.getOriginalIface ( ) ) ; networkModel.getSetupModel ( ) . getHostSetupNetworksParametersData ( ) . addNetworkAttachmentToParameters ( networkAttachment ) ; }
public void testGetTagVmMapByTag ( ) { org.ovirt.engine.core.common.businessentities.TagsVmMap result = dao.getTagVmByTagIdAndByVmId ( existingVmTag.gettag_id ( ) , existingVmTag.getvm_id ( ) ) ; assertNotNull ( result ) ; assertEqualsTagsVmMap ( existingVmTag , result ) ; }
public boolean isMigrationNetwork ( ) { return getEntity ( ) . getCluster ( ) . isMigration ( ) ; }
protected org.ovirt.engine.api.model.DataCenter postPopulate ( org.ovirt.engine.api.model.DataCenter model ) { model.setStorageFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.StorageFormat.class ) ) ; model.setQuotaMode ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.QuotaModeType.class ) ) ; return model ; }
public void testGetAllForNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > result = dao.getAllForNetwork ( FixturesTool.NETWORK_ENGINE ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public void testGetDataAndSetDataWithFullSession ( ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; clearSession ( ) ; }
public void update ( int index , D object , java.lang.String value ) { registerEntityModel.selectQuotaByName ( value , object.getClusterQuota ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { com.google.gwt.user.client.Window.open ( dynamicMessages.fencingOptionsUrl ( ) , "_blank" , null ) ; }
public void testSave ( ) { dao.save ( new_bookmark ) ; org.ovirt.engine.core.common.businessentities.Bookmark result = dao.getByName ( new_bookmark.getbookmark_name ( ) ) ; assertNotNull ( result ) ; }
public void onSuccess ( ) { log.debug ( "Command succeeded, releasing macs {}." , super . macs ) ; releaseMacs ( ) ; }
public org.ovirt.engine.ui.common.widget.table.cell.TextCellWithEditableTooltip getCell ( ) { org.ovirt.engine.ui.common.widget.table.cell.TextCellWithEditableTooltip textCellWithEditableTooltip = super . getCell ( ) ; textCellWithEditableTooltip.setTitle ( constants.quotaCalculationsMessage ( ) ) ; return textCellWithEditableTooltip ; }
com.google.gwt.safehtml.shared.SafeHtml statusTemplate ( com.google.gwt.safehtml.shared.SafeHtml statusImage , java.lang.String id ) ;
public void warn ( java.lang.Object msg ) { log.warn ( convertToString ( msg ) ) ; }
public void canDoActionSucceeds ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
private boolean checkRequiredHostDevicesAvailability ( ) { if ( ! ( needsHostDevices ) ) { return true ; } return hostDeviceManager.checkVmHostDeviceAvailability ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVdsList ( ) . get ( 0 ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmDynamicDao ( ) ; existingVm = dao.get ( FixturesTool.VM_RHEL5_POOL_57 ) ; existingVm.setStatus ( VMStatus.Up ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { command.execute ( ) ; }
public void updateStatusForNonExistingSnapshot ( ) { org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid.Empty ; org.junit.jupiter.api.Assertions.assertNull ( dao.get ( snapshotId ) ) ; dao.updateStatus ( snapshotId , SnapshotStatus.LOCKED ) ; org.junit.jupiter.api.Assertions.assertNull ( dao.get ( snapshotId ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyLegacyGotNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_LEGACY ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
public void testRemoveFailed ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.Search , org.ovirt.engine.core.common.queries.SearchParameters.class , new java.lang.String [ ] { "SearchPattern" , "SearchTypeValue" } , new java.lang.Object [ ] { "users:" , org.ovirt.engine.core.common.interfaces.SearchType.DBUser } , getUsers ( ) ) ; doTestBadRemove ( true , false , org.ovirt.engine.api.restapi.resource.FAILURE ) ; }
public void addLabel ( org.ovirt.engine.core.compat.Guid vfsConfigId , java.lang.String label ) { getCallsHandler ( ) . executeModification ( "InsertVfsConfigLabel" , createLabelParametersMapper ( vfsConfigId , label ) ) ; }
public org.ovirt.engine.api.v3.types.V3VM update ( org.ovirt.engine.api.v3.types.V3VM vm ) { vm = adaptUpdate ( getDelegate ( ) :: update , vm ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper.addDisksLink ( vm ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper.addGuestIp ( vm ) ; return vm ; }
private void updateItemsAvailability ( ) { if ( ( getStorageModels ( ) ) == null ) { return ; } behavior.updateItemsAvailability ( ) ; }
public void testRemove ( ) { dao.remove ( existingAdGroup.getid ( ) ) ; org.ovirt.engine.core.common.businessentities.LdapGroup result = dao.get ( existingAdGroup.getid ( ) ) ; assertNull ( result ) ; }
public void defaultClusterInLocalFs ( ) { createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; cpuExists ( ) ; cpuManufacturersMatch ( ) ; allQueriesForVms ( ) ; canDoActionFailedWithReason ( VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
private void prepareMessageSubject ( java.lang.String hostName , org.ovirt.engine.core.notifier.filter.AuditLogEvent event ) { subject = org.ovirt.engine.core.notifier.transport.smtp.MessageHelper.prepareMessageSubject ( event.getType ( ) , hostName , event.getMessage ( ) ) ; }
private void alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( getVdsId ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.Alert ( alert , logType ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { revertCinderDisks ( childCmdIds ) ; getCommand ( cmdId ) . endAction ( ) ; getCommand ( cmdId ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDS object ) { return java.lang.String.valueOf ( object.getVmCount ( ) ) ; }
public void attachmentAndNicLabelReferenceSameLabelNotConflict ( ) { final boolean referenceSameNic = true ; attachmentAndNicLabelReferenceSameLabelCommonTest ( referenceSameNic , true ) ; }
public void testAllDomainsExistAndActiveAllActive ( ) { domain1.setStatus ( StorageDomainStatus.Active ) ; domain2.setStatus ( StorageDomainStatus.Active ) ; domain3.setStatus ( StorageDomainStatus.Active ) ; org.junit.Assert.assertTrue ( "Both domains should be active" , validator.allDomainsExistAndActive ( ) . isValid ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.DbUser getUser ( java.lang.String sessionId , boolean refresh ) { return ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( getData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.USER_PARAMETER_NAME , refresh ) ) ) ; }
public org.ovirt.engine.core.compat.NGuid getDedicatedVmForVds ( ) { return vmStatic.getDedicatedVmForVds ( ) ; }
public void testNetworkAttachmentIsSetWhenAttachmentIsNull ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( null ) . networkAttachmentIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS , HostSetupNetworksValidator.VAR_NETWORK_ATTACHMENT_NOT_EXISTS_ENTITY , "null" ) ) ; }
private void debugQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Query type '{}', Parameters '{}'" , queryType , parameters ) ; }
protected java.lang.String getTableContainerStyleName ( ) { return showDefaultHeader ? style.contentWithDefaultHeader ( ) : style.content ( ) ; }
public void canRebalanceOnDistributedVolume ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume ( volumeId1 , 5 ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRebalance ( volumeEntity ) ; org.junit.Assert.assertThat ( validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected boolean canDoAction ( ) { return ( canDetachStorageDomainWithVmsAndDisks ( org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getStorageDomain ( ) ) ) && ( canDetachDomain ( org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getParameters ( ) . getDestroyingPool ( ) , org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getParameters ( ) . getRemoveLast ( ) , org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.isInternalExecution ( ) ) ) ; }
public void testSave ( ) { dao.save ( new_bookmark ) ; org.ovirt.engine.core.common.businessentities.Bookmark result = dao.getByName ( new_bookmark.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; }
public void setRaidInfoMessages ( java.lang.String raidType , int stripeSize ) { deviceSelectionInfo.setText ( applicationMessages.getStorageDeviceSelectionInfo ( raidType ) ) ; this . stripeSizeWithInfo.setExplanation ( templates.italicText ( applicationMessages.stripSizeInfoForGlusterBricks ( stripeSize , raidType ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getServer ( ) { org.ovirt.engine.core.common.businessentities.VDS server = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; server.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; server.setVdsName ( "VDS1" ) ; server.setStatus ( VDSStatus.Up ) ; server.setClusterId ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ; return server ; }
public void testSave ( ) { dao.save ( newVmStatistics ) ; org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics savedStatistics = dao.get ( org.ovirt.engine.core.dao.VmNetworkStatisticsDAOTest.NEW_INTERFACE_ID ) ; org.junit.Assert.assertNotNull ( savedStatistics ) ; org.junit.Assert.assertEquals ( newVmStatistics.getStatus ( ) , savedStatistics.getStatus ( ) ) ; }
public void validateEnums ( ) { org.ovirt.engine.api.model.Cpu entity = new org.ovirt.engine.api.model.Cpu ( ) ; entity.setArchitecture ( "X86_64" ) ; new org.ovirt.engine.api.restapi.resource.validation.CPUValidator ( ) . validateEnums ( entity ) ; }
public void setVmtNumOfCpus ( int value ) { this . vmtNumOfCpus = value ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ev.matchesDefinition ( ChangeCDModel.ExecutedEventDefinition ) ) { changeCD ( sender , args ) ; } }
private void assertInvalidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) , EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED ) ; }
protected org.ovirt.engine.core.compat.Guid getDataCenterId ( org.ovirt.engine.api.model.Network network ) { return getEntity ( org.ovirt.engine.core.common.businessentities.StoragePool.class , SearchType.StoragePool , ( "Datacenter: name=" + ( network.getDataCenter ( ) . getName ( ) ) ) ) . getId ( ) ; }
protected org.ovirt.engine.core.common.queries.QueryReturnValue runQueryImpl ( org.ovirt.engine.core.common.queries.QueryType actionType , org.ovirt.engine.core.common.queries.QueryParametersBase parameters , boolean isPerformUserCheck ) { return runQueryImpl ( actionType , parameters , isPerformUserCheck , null ) ; }
public org.ovirt.engine.api.model.Users list ( ) { return mapUsers ( getDomainUsers ( ) ) ; }
public M getModel ( ) { M model = modelProvider.get ( ) ; if ( ! ( model.isInitialized ( ) ) ) { model.initialize ( ) ; initializeModelHandlers ( model ) ; } return model ; }
public org.ovirt.engine.ui.uicommonweb.models.Model getWindowModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > source , java.lang.String propertyName ) { if ( VmBaseListModel.DISK_WINDOW.equals ( propertyName ) ) { return source.getDiskWindow ( ) ; } return super . getWindowModel ( source , propertyName ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( getSpecificCpu ( ) . getEntity ( ) ) { getUnlimitedCpu ( ) . setEntity ( false ) ; getSpecificCpuValue ( ) . setIsChangeable ( true ) ; } }
public void validVnicProfileWhenUnlinkingSupported ( ) throws java.lang.Exception { vnicProfileLinkingTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
public org.ovirt.engine.api.model.Host get ( ) { if ( isForce ( ) ) { performAction ( VdcActionType.RefreshHost , new org.ovirt.engine.core.common.action.VdsActionParameters ( guid ) ) ; } org.ovirt.engine.api.model.Host host = getVdsByVdsId ( ) ; deprecatedAddLinksToAgents ( host ) ; return host ; }
private org.ovirt.engine.core.common.businessentities.Provider getDeletedProvider ( ) { if ( ( deletedProvider ) == null ) { deletedProvider = getProviderDao ( ) . get ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; } return deletedProvider ; }
public javax.ws.rs.core.Response setupNetworks ( org.ovirt.engine.api.model.Action action ) { getVdsByVdsId ( ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = toParameters ( action ) ; return performAction ( ActionType.HostSetupNetworks , parameters , action ) ; }
public org.ovirt.engine.core.bll.provider.ProviderProxy getProviderProxy ( ) { if ( ( providerProxy ) == null ) { providerProxy = providerProxyFactory.create ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) ) ; } return providerProxy ; }
public void testGetAllVfsConfigByHostId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > vfsConfigs = dao.getAllVfsConfigByHostId ( FixturesTool.HOST_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , vfsConfigs.size ( ) ) ; }
public void setMigreatingToPort ( int value ) { migreatingToPort = value ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , java.lang.Boolean isPlugged , java.lang.Boolean isReadOnly , boolean isUsingScsiReservation ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addDiskDevice ( vmId , deviceId , isPlugged , isReadOnly , "" , isUsingScsiReservation ) ; }
public void setVmOs ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { this . vmStatic.setOs ( value ) ; }
private void updateAuditLog ( org.ovirt.engine.core.common.AuditLogType auditLogType , java.lang.Long imageSizeInGigabytes ) { addCustomValue ( "DiskAlias" , org.ovirt.engine.core.bll.ExtendImageSizeCommand.getImage ( ) . getDiskAlias ( ) ) ; org.ovirt.engine.core.bll.ExtendImageSizeCommand.addCustomValue ( "NewSize" , java.lang.String.valueOf ( imageSizeInGigabytes ) ) ; auditLogDirector.log ( this , auditLogType ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { logSsoOnDesktopFailedAgentNonResp ( spiceConsoleModel.getLogger ( ) , ( logonCommandReturnValue != null ? logonCommandReturnValue.getDescription ( ) : "" ) ) ; spiceConsoleModel.executeQuery ( getEntity ( ) ) ; getParentModel ( ) . setWindow ( null ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > getUserRequestForStorageDomainRepoFileList ( ) { return org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance ( ) . getUserRequestForStorageDomainRepoFileList ( getStorageDomainIdForQuery ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getImageType ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getForceRefresh ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VDSGroup , org.ovirt.engine.core.common.businessentities.network.NetworkCluster > object ) { return object.getFirst ( ) . getCompatibilityVersion ( ) . getValue ( ) ; }
public static java.lang.String getVmDeviceAddress ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , final org.ovirt.engine.core.compat.Guid deviceId ) { org.ovirt.engine.core.common.businessentities.VmDevice device = vmBase.getManagedDeviceMap ( ) . get ( deviceId ) ; if ( device != null ) return device.getAddress ( ) ; else return org.apache.commons.lang.StringUtils.EMPTY ; }
public org.ovirt.engine.api.resource.DataCenterNetworksResource getNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource ( guid ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.vm_pools > getPrivilegedQueryReturnValue ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.vm_pools > returnValue = org.ovirt.engine.core.bll.GetAllVmPoolsAttachedToUserQuery.getDbFacade ( ) . getVmPoolDao ( ) . getAllForUser ( org.ovirt.engine.core.bll.GetAllVmPoolsAttachedToUserQuery.getParameters ( ) . getUserId ( ) ) ; return returnValue ; }
public static org.ovirt.engine.core.common.businessentities.VMStatus forValue ( int value ) { return org.ovirt.engine.core.common.businessentities.VMStatus.valueToStatus.get ( value ) ; }
public void testValidationFailsDiskConnectedToRunningVm ( ) { org.mockito.Mockito.when ( diskValidator.isDiskPluggedToAnyNonDownVm ( false ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
protected static org.ovirt.engine.core.compat.Guid getGuidDefaultEmpty ( java.sql.ResultSet resultSet , java.lang.String columnName ) throws java.sql.SQLException { return org.ovirt.engine.core.dao.BaseDao.getGuid ( resultSet , columnName , Guid.Empty ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDS host ) { return ( host.getConsoleAddress ( ) ) != null ? org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterHostView.constants.yes ( ) : org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterHostView.constants.no ( ) ; }
private void updateDefaultRouteNetwork ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel , boolean value ) { networks.asEditor ( ) . flush ( ) . setDefaultRouteNetwork ( clusterNetworkModel , value ) ; }
private void removeAllLabelsByVfsConfigId ( org.ovirt.engine.core.compat.Guid vfsConfigId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createVfsConfigIdParameter ( vfsConfigId ) ; getCallsHandler ( ) . executeModification ( "DeleteAllVfsConfigLabels" , parameterSource ) ; }
protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration ( ) { return super . createWidgetConfiguration ( ) . update ( hostTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( foremanTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) ; }
private void initIpConfigurationStaticBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol ) { initIpConfiguration ( ) ; org.mockito.Mockito.when ( mockedIPv4Address.getBootProtocol ( ) ) . thenReturn ( networkBootProtocol ) ; iface.setIpv4BootProtocol ( networkBootProtocol ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters ( org.ovirt.engine.api.model.Network network , org.ovirt.engine.api.model.Network entity ) { return new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter ( getVDSGroup ( ) , entity ) ; }
protected org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback getPostConnectCallback ( ) { this . callback.resetExecution ( ) ; setWaitForConnect ( ) ; return this . callback ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( getAdUserId ( ) . toString ( ) , LockMessagesMatchUtil.USER_VM_POOL ) ; }
public static org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol getProtocolByModel ( java.lang.Class < ? extends org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > model ) { for ( org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol value : org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.values ( ) ) { if ( value.isBackedBy ( model ) ) { return value ; } } return null ; }
public void setEmulatedMachine ( java.lang.String value ) { this . vmDynamic.setEmulatedMachine ( value ) ; }
protected java.util.List < org.ovirt.engine.api.model.DiskProfile > getDiskProfilesCollection ( ) { return getBackendCollection ( QueryType.GetDiskProfilesByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuidOr404 ( storageDomainId ) ) ) ; }
public void addToHistoryNullBefore ( ) { org.junit.jupiter.api.Assertions.assertEquals ( java.util.Collections.singletonList ( 12 ) , statistics.addToHistory ( null , 12 , 100 ) ) ; }
public void setMessage ( java.lang.String msg , org.gwtbootstrap3.client.ui.Alert alert ) { alert.setText ( msg ) ; alert.setVisible ( ( ! ( org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty ( msg ) ) ) ) ; }
public void nullTest ( ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( null ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.failureValidationResultEmptyNotAllowed , validationResult ) ; }
public org.ovirt.engine.core.bll.ValidationResult clusterNetworkNotUsedByBricks ( ) { return networkNotUsed ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkFromClusterInternalCommand.DetachNetworkValidator.getGlusterBrickDao ( ) . getAllByClusterAndNetworkId ( networkCluster.getClusterId ( ) , network.getId ( ) ) , EngineMessage.VAR__ENTITIES__GLUSTER_BRICKS , EngineMessage.VAR__ENTITIES__GLUSTER_BRICK ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { StopProgress ( ) ; commandTarget.executeCommand ( runOnceCommand ) ; }
public void testExtractProperIpv6AddressWithNoPrefix ( ) { org.junit.Assert.assertThat ( vdsBrokerObjectsBuilder.extractIpv6Address ( "::/" ) , org.hamcrest.Matchers.is ( "::/" ) ) ; }
java.lang.String getSoundDevice ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.ChipsetType chipsetType ) ;
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNic ( java.lang.String ifaceName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.Nic ( ) ; iface.setName ( ifaceName ) ; return iface ; }
public org.ovirt.engine.core.common.businessentities.LdapRefStatus getLdapStatus ( ) { return ( status ) == 0 ? LdapRefStatus.Inactive : LdapRefStatus.Active ; }
public void testSaveUserDuplicatedDomainAndExternalId ( ) { newUser.setDomain ( existingUser.getDomain ( ) ) ; newUser.setExternalId ( existingUser.getExternalId ( ) ) ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.RuntimeException.class , ( ) -> org.ovirt.engine.core.dao.dao.save ( newUser ) ) ; }
public void saveAll ( java.util.Collection < T > entities ) { for ( T entity : entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDao.save ( entity ) ; } }
public void updateIsDisksAvailable ( ) { getModel ( ) . setIsDisksAvailable ( ( ( ( getModel ( ) . getDisks ( ) ) != null ) && ( getModel ( ) . getProvisioning ( ) . getIsChangable ( ) ) ) ) ; }
public < P extends org.ovirt.engine.core.common.action.ActionParametersBase > org.ovirt.engine.core.bll.CommandBase < P > createCommand ( org.ovirt.engine.core.common.action.ActionType action , P parameters ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( action , parameters ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections createConnection ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String mountOptions ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; conn.setstorage_type ( storageType ) ; conn.setMountOptions ( mountOptions ) ; return conn ; }
public void setConsoleCurrentUserName ( java.lang.String value ) { this . vmDynamic.setConsole_current_user_name ( value ) ; }
public static void LoginAsync ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance ( ) ; org.ovirt.engine.ui.frontend.Frontend.LoginAsync ( userName , password , domain , callback , service ) ; }
public final java.lang.String translateErrorTextSingle ( java.lang.String errorMsg ) { return translateErrorTextSingle ( errorMsg , true ) ; }
private void initIpConfigurationBootProtocolGateway ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol , boolean syncGateway ) { initIpConfigurationStaticBootProtocol ( networkBootProtocol ) ; org.mockito.Mockito.when ( mockedIPv4Address.getGateway ( ) ) . thenReturn ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY ) ; iface.setIpv4Gateway ( ( syncGateway ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY : null ) ) ; }
public org.ovirt.engine.core.common.businessentities.Bookmark get ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.ovirt.engine.core.dao.BookmarkDaoImpl.BookmarkSqlParameterSource ( id ) ; return getCallsHandler ( ) . executeRead ( "GetBookmarkBybookmark_id" , org.ovirt.engine.core.dao.BookmarkDaoImpl.BookmarkRowMapper.instance , parameterSource ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Provider < ? > > searchProviders ( ) { return genericSearch ( providerDao , true ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) ;
public void setBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol value ) { if ( ( bootProtocol ) != value ) { bootProtocol = value ; bootProtocolChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "BootProtocol" ) ) ; } }
protected void convert ( ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.ConvertVm , buildConvertVmParameters ( ) , org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent ( ) ) ; }
public static boolean isUpdateValidForVmDevices ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.VMStatus vmStatus , java.lang.Object objectWithEditableDeviceFields ) { if ( objectWithEditableDeviceFields == null ) { return true ; } return org.ovirt.engine.core.bll.VmHandler.getVmDevicesFieldsToUpdateOnNextRun ( vmId , vmStatus , objectWithEditableDeviceFields ) . isEmpty ( ) ; }
protected void setUpGetStorageDomainExpectations ( org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetStorageDomainById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendExportDomainDisksResourceTest.STORAGE_DOMAIN_ID } , org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplatesResourceTest.setUpStorageDomain ( domainType ) , failure ) ; }
public org.ovirt.engine.sdk.services.SystemService systemService ( ) { return new org.ovirt.engine.sdk.internal.services.SystemServiceImpl ( this , "" ) ; }
private org.ovirt.engine.core.bll.ValidationResult getManagementNetworkValidationResult ( final boolean isManagementNetwork ) { return isManagementNetwork ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , getNetworkNameReplacement ( ) ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void init ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel errataListModel ) { this . errataListModel = errataListModel ; errataTable.setLoadingState ( LoadingState.LOADING ) ; updateFilterPanel ( ) ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index , boolean isDisplay , boolean isMigration , boolean isRequired ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkResourceTest.mock ( org.ovirt.engine.api.model.Network.class ) , isDisplay , isMigration , isRequired , index ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.CdRom cdrom = resource.get ( ) ; verifyModel ( cdrom ) ; }
public void vnicProfileNameTakenBySameVnicProfile ( ) throws java.lang.Exception { vnicProfileAvailableTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.getSingletonNamedVnicProfileList ( org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_VNIC_PROFILE_NAME , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ) ; }
public void getPrefixedKey ( ) { java.lang.String prefixedKey = tested.getPrefixedKey ( "Key" ) ; org.hamcrest.MatcherAssert.assertThat ( prefixedKey , org.hamcrest.CoreMatchers.equalTo ( ( ( ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX ) + "Key" ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( vmDynamic , vmGuestAgentInterfaces , vmStatistics , lunsMap , interfaceStatistics , vNumaNodeStatisticsList ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; cancel ( ) ; }
public void updateGlusterHookConflictStatus ( org.ovirt.engine.core.compat.Guid hookId , java.lang.Integer conflictStatus ) ;
public void releaseVolumeLock ( org.ovirt.engine.core.compat.Guid taskId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol = getVolumeDao ( ) . getVolumeByGlusterTask ( taskId ) ; if ( vol != null ) { releaseLock ( vol.getId ( ) ) ; } else { org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.log.debug ( "Did not find a volume associated with task '{}'" , taskId ) ; } }
public boolean isSetVms ( ) { return ( this . vms ) != null ; }
private static org.ovirt.engine.api.restapi.util.LinkHelper.ApiLocationMetadata getCollection ( org.ovirt.engine.api.model.BaseResource model ) { return org.ovirt.engine.api.restapi.util.LinkHelper.getLocationMetadata ( model , null ) ; }
private java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > createAddNetworkParameters ( org.ovirt.engine.core.common.businessentities.network.Network network , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsForAdd ) { return addNetworkParametersBuilder.buildParameters ( network , nicsForAdd ) ; }
public void setStatus ( boolean value ) { this . status = value ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }
public < T > void mockConfigValue ( org.ovirt.engine.core.common.config.ConfigValues value , T returnValue ) { mockConfigValue ( value , ConfigCommon.defaultConfigurationVersion , returnValue ) ; }
public void testGetVdsSpmIdMapForStoragePoolAndVdsId ( ) { org.ovirt.engine.core.common.businessentities.VdsSpmIdMap result = dao.get ( existingEntity.getStoragePoolId ( ) , existingEntity.getVdsSpmId ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingEntity , result ) ; }
public void subscribe ( org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber ) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker ( this . parallelism ) . getPublisher ( ) . subscribe ( subscriber ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability ( constants ) ; }
public void execute ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model ) { getModel ( ) . getEditConsoleCommand ( ) . execute ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkAttachmentIsSet ( ) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NULL_PASSED_AS_NETWORK_ATTACHMENT ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , null ) ) . when ( ( ( attachment ) == null ) ) ; }
public void testGetDataAndSetDataWithFullSession ( ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private void onRemove ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel ) ( getWindow ( ) ) ) ; if ( ! ( model.validate ( ) ) ) { return ; } model.onRemove ( this ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.ClientConsoleMode getClientConsoleMode ( ) { return org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.ClientConsoleMode.valueOf ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.ClientConsoleModeDefault ) ) ) ) ; }
public static boolean isDisk ( org.ovirt.engine.core.common.businessentities.VmDevice device ) { return ( ( device.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK ) ) && ( device.getDevice ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) ; }
public static boolean isWindowsOsType ( java.lang.Integer osType ) { if ( osType == null ) { return false ; } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsIds.contains ( osType ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder addExistingAttachments ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > existingAttachments ) { if ( existingAttachments == null ) { return this ; } this . existingAttachments.addAll ( existingAttachments ) ; return this ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.Cdrom > collection ) { org.junit.jupiter.api.Assertions.assertNotNull ( collection ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , collection.size ( ) ) ; verifyModel ( collection.get ( 0 ) ) ; }
protected static void buildTemplateOnSave ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VmTemplate template ) { org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( model , template , new org.ovirt.engine.ui.uicommonweb.builders.vm.FullUnitToVmBaseBuilder < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) , new org.ovirt.engine.ui.uicommonweb.builders.template.VersionNameUnitToVmBaseBuilder ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult clusterNetworkNotUsedByVms ( ) { return networkNotUsed ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkFromClusterInternalCommand.DetachNetworkValidator.getVmStaticDao ( ) . getAllByGroupAndNetworkName ( networkCluster.getClusterId ( ) , network.getName ( ) ) , EngineMessage.VAR__ENTITIES__VMS , EngineMessage.VAR__ENTITIES__VM ) ; }
protected void executeQueryCommand ( ) { java.lang.String method_typeField = org.ovirt.engine.core.bll.GetEventNotificationMethodByTypeQuery.getParameters ( ) . getMethodType ( ) . name ( ) ; org.ovirt.engine.core.bll.GetEventNotificationMethodByTypeQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getEventDao ( ) . getEventNotificationMethodsByType ( method_typeField ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.setIsEveryoneSelected ( false ) ; model.setIsMyGroupsSelected ( true ) ; getView ( ) . changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups ( false , true ) ; getModel ( ) . getSearchMyGroupsCommand ( ) . execute ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.StoragePool , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabDataCenterPresenter.constants.dataCenterMainTabLabel ( ) , 0 , modelProvider ) ; }
public void setMessage ( java.lang.String message ) { super . setMessage ( message ) ; this . message.setText ( message ) ; this . message.setVisible ( org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty ( message ) ) ; }
public void setVmNames ( java.util.ArrayList < java.lang.String > vmNames ) { this . vmNames = vmNames ; }
public void setMigratingToVds ( org.ovirt.engine.core.compat.Guid value ) { this . vmDynamic.setMigratingToVds ( value ) ; }
public void commandFailsSlaveVolumeNotMonitoredByOvirt ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeGeoRepSessionCommandTest.SUPPORTED_VERSION ) . when ( cluster ) . getCompatibilityVersion ( ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . getSlaveHost ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; }
protected void postConnect ( org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback callback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { super . postConnect ( getPostConnectCallback ( ) ) ; }
protected org.ovirt.engine.core.bll.QueriesCommandBase < ? > createQueryCommand ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , org.ovirt.engine.core.bll.context.EngineContext engineContext ) { return org.ovirt.engine.core.bll.CommandsFactory.createQueryCommand ( actionType , parameters , engineContext ) ; }
public void testInvalidNumberOfMonitors ( ) { prepareVmToPassCanDoAction ( ) ; vmStatic.setNumOfMonitors ( 99 ) ; org.junit.Assert.assertFalse ( "canDoAction should have failed with invalid number of monitors." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_NUM_OF_MONITORS ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( getDiskImageDao ( ) . getSnapshotById ( getDiskId ( ) ) ) ) ; } return disk ; }
protected org.ovirt.engine.core.compat.Guid asGuid ( java.lang.String id ) { try { return new org.ovirt.engine.core.compat.Guid ( id ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new org.ovirt.engine.api.restapi.utils.MalformedIdException ( e ) ; } }
public boolean prepareConnectHostToStoragePoolServers ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { return true ; }
void localize ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { searchButton.setLabel ( constants.goPermissionsPopup ( ) ) ; namespaceSelection.setLabel ( constants.namespacePermissionsPopup ( ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { setCliEnvironmentIfNecessary ( ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_CONFIG_PREFIX ) + "DEFAULT/" ) + ( _messagingConfiguration.getBrokerType ( ) . getHostKey ( ) ) ) , _messagingConfiguration.getAddress ( ) ) ; return true ; }
public void validateSucceedsOnRemoveNotLastAdGroupWithSuperUserPrivileges ( ) { mockIsLastSuperUserGroup ( false ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.validate ( ) ) ; }
public int getNumOfSnapshotsByMemory ( java.lang.String memoryVolume ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "memory_volume" , getNullableRepresentation ( memoryVolume ) ) ; return getCallsHandler ( ) . executeRead ( "GetNumOfSnapshotsByMemoryVolume" , org.springframework.jdbc.core.SingleColumnRowMapper.newInstance ( java.lang.Integer.class ) , parameterSource ) ; }
public void clean ( ) { try ( org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper ( this . lock ) ) { this . events.clear ( ) ; } }
protected org.ovirt.engine.core.compat.Guid asGuid ( org.ovirt.engine.core.compat.Guid guid ) { return guid ; }
public static void getAllVmTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , final boolean refresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ; params.setRefresh ( refresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmTemplates , params , aQuery ) ; }
public static boolean isFieldsUpdated ( org.ovirt.engine.core.common.businessentities.VdsStatic source , org.ovirt.engine.core.common.businessentities.VdsStatic destination , java.lang.Iterable < java.lang.String > list ) { return org.ovirt.engine.core.bll.VdsHandler.mUpdateVdsStatic.IsFieldsUpdated ( source , destination , list ) ; }
public static void adjustDisplayData ( org.ovirt.engine.api.restapi.resource.BackendResource res , org.ovirt.engine.api.model.Vm vm , boolean nextRun ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( res , vm , null , nextRun ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { setSearchString ( ( "events: usrname=" + ( getEntity ( ) . getLoginName ( ) ) ) ) ; super . search ( ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.Bookmark bookmark = org.ovirt.engine.core.bll.DbFacade.getInstance ( ) . getBookmarkDao ( ) . get ( org.ovirt.engine.core.bll.GetBookmarkByIdQuery.getParameters ( ) . getBookmarkId ( ) ) ; org.ovirt.engine.core.bll.GetBookmarkByIdQuery.getQueryReturnValue ( ) . setReturnValue ( bookmark ) ; }
protected < T > boolean matchEntity ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity , T id ) { return ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( PropertyChangedEventArgs.PROGRESS.equals ( args.propertyName ) ) { clearData ( ) ; } }
protected void ExecuteIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMStopTask , new org.ovirt.engine.core.common.vdscommands.HSMTaskGuidBaseVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run ( org.codehaus.jackson.JsonNode params , org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder ) { return builder.withError ( ResultCodes.UNSUPPORTED.map ( ) ) ; }
public void passwordIsEmptyForOvirtNode ( ) { org.hamcrest.MatcherAssert.assertThat ( validator.passwordNotEmpty ( true , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextEnum ( org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.class ) , null ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; return disk.isShareable ( ) ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.resources.shareableDiskIcon ( ) : null ; }
private boolean runVm ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.utils.lock.EngineLock lock ) { return backend.runInternalAction ( ActionType.RunVm , new org.ovirt.engine.core.common.action.RunVmParams ( vmId ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( lock ) ) . getSucceeded ( ) ; }
private static long computeCowImageNeededSize ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat sourceFormat , long actualSize ) { return sourceFormat == ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ) ? java.lang.Double.valueOf ( java.lang.Math.ceil ( ( actualSize / ( org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR ) ) ) ) . longValue ( ) : actualSize ; }
public void testAdd ( ) throws java.lang.Exception { setUpGetGraphicsExpectations ( 1 ) ; setUpGetBallooningExpectations ( 0 , 0 ) ; setUpGetConsoleExpectations ( 0 , 0 ) ; super . testAdd ( ) ; }
protected boolean hasWatchdog ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVmDeviceUtils ( ) . hasWatchdog ( vmId ) ; }
private static void setValidCpuVersionMap ( ) { org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.SupportedClusterLevels , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVersionSet ( ) ) ; }
protected void endWithFailure ( ) { undoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.BaseImagesCommand.setSucceeded ( true ) ; }
public void setVmName ( java.lang.String vmName ) { consoleTitle.setText ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.messages.selectConsoleFor ( vmName ) ) ; }
public boolean syncDomainInfo ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.action.SyncLunsInfoForBlockStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.SyncLunsInfoForBlockStorageDomainParameters ( storageDomain.getId ( ) , vdsId ) ; return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( ActionType.SyncLunsInfoForBlockStorageDomain , parameters ) . getSucceeded ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; setConfirmWindow ( null ) ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runInternalQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , org.ovirt.engine.core.bll.context.EngineContext engineContext ) { return runQueryImpl ( actionType , parameters , false , engineContext ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; onExecute ( ) ; }
public void onSuccess ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > idToIconMap ) { finishSearch ( vmPairs ) ; }
protected java.lang.Object provideDetailModelEntity ( java.lang.Object selectedItem ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( selectedItem ) ) ; if ( model == null ) { return null ; } return model.getEntity ( ) ; }
private int toSortingIndex ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice ) { return ( vmDevice == null ) || ( ! ( org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable ( vmDevice.getVmDevice ( ) ) ) ) ? 0 : 1 ; }
public void testSetInvalidIntValue ( ) { final java.lang.String key = "VdsRefreshRate" ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalAccessException.class , ( ) -> org.ovirt.engine.core.config.EngineConfigLogicTest.engineConfigLogic.persist ( key , "Not A Number" , "" ) ) ; }
public void setFailBack ( boolean value ) { this . vmStatic.setfail_back ( value ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes , getPmType ( ) ) ; updatePmTypeList ( pmTypes , getPmSecondaryType ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetStepByStepIdQuery.getQueryReturnValue ( ) . setReturnValue ( jobRepository.getStep ( org.ovirt.engine.core.bll.GetStepByStepIdQuery.getParameters ( ) . getId ( ) ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.StorageConnection model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
private void mockVdsWithStatus ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( status ) ; org.mockito.Mockito.when ( vdsDAO.get ( command.getParameters ( ) . getVdsId ( ) ) ) . thenReturn ( vds ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { cancel ( ) ; }
public boolean supportsGlusterAsyncTasksFeature ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return ( cluster.supportsGlusterService ( ) ) && ( org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterAsyncTasks ( cluster.getCompatibilityVersion ( ) ) ) ; }
private void saveTaskAndPutInMap ( java.lang.String taskKey , org.ovirt.engine.core.common.businessentities.AsyncTask task ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.saveAsyncTaskToDb ( task ) ; taskKeyToTaskIdMap.put ( taskKey , task.getTaskId ( ) ) ; }
public void setup ( ) { validation = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.uicommonweb.validation.CidrValidation ( ) ) ; org.mockito.Mockito.doReturn ( null ) . when ( validation ) . getThisFieldMustContainCidrInFormatMsg ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( validation ) . getCidrNotNetworkAddress ( ) ; }
public void testGetAllSupportedNetworkFiltersByInvalidVersion ( ) { final org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version ( org.ovirt.engine.core.dao.network.NetworkFilterDaoTest.INVALID_VERSION ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > allNetworkFilter = dao.getAllSupportedNetworkFiltersByVersion ( version ) ; org.junit.jupiter.api.Assertions.assertTrue ( allNetworkFilter.isEmpty ( ) ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats ) { return super . createFullParametersMapper ( stats ) . addValue ( "vm_id" , stats.getVmId ( ) ) ; }
public void setParser ( org.ovirt.engine.core.config.EngineConfigCLIParser parser ) { this . parser = parser ; this . pwdValueHelper.setParser ( parser ) ; }
protected org.ovirt.engine.core.common.businessentities.pm.FenceAgent createFenceAgent ( int order ) { org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; agent.setOrder ( order ) ; return agent ; }
public org.ovirt.engine.api.model.GlusterBricks list ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = getBackendCollection ( VdcQueryType.GetGlusterVolumeBricks , new org.ovirt.engine.core.common.queries.gluster.IdQueryParameters ( asGuid ( getVolumeId ( ) ) ) ) ; return mapCollection ( bricks ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getModel ( ) . getNewVmCommand ( ) ; }
public void testNoNicId ( ) { setup ( org.ovirt.engine.core.bll.network.host.GetTlvsByHostNicIdQueryTest.ExpectedError.NIC_ID_NOT_NULL ) ; org.junit.jupiter.api.Assertions.assertFalse ( getQuery ( ) . validateInputs ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( EngineMessage.NIC_ID_IS_NULL.name ( ) , getQuery ( ) . getQueryReturnValue ( ) . getExceptionString ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hashCode ( mainModel ) ; }
java.lang.String clusterPopupMemoryOptimizationForDesktopLabel ( java.lang.String a ) ;
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { getCommand ( ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; getCommand ( ) . endAction ( ) ; clearProgress ( ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return getBackend ( ) . runInternalAction ( actionType , parameters , context.clone ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsExistAndActive ( ) { return validOrFirstFailure ( ( entry ) -> getStorageDomainValidator ( entry ) . isDomainExistAndActive ( ) ) ; }
public boolean getUseLocalDrives ( ) { return useLocalDrives ; }
protected boolean setAndValidateDiskProfiles ( ) { return validate ( diskProfileHelper.setAndValidateDiskProfiles ( java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage ( ) , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getStorageDomainId ( ) ) , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getCurrentUser ( ) ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > prepareImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) ;
public void testAlreadyExistStorageDomain ( ) { org.mockito.Mockito.when ( command.getStorageDomainStaticDao ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( parameters.getStorageDomain ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVmAndReturnFromDao ( ) { vm = mockVm ( ) ; org.mockito.Mockito.when ( vmDao.get ( org.ovirt.engine.core.bll.GetNextAvailableDiskAliasNameByVMIdQueryTest.vmId , getUser ( ) . getId ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( vm ) ; return vm ; }
protected void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
public org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand getAsyncCommandForVm ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand result = null ; result = _asyncRunningCommands.get ( vmId ) ; return result ; }
public void onSuccess ( java.lang.Void returnValue ) { updateTabsData ( snapshotModel ) ; }
public static < TSource > TSource firstOrNull ( java.util.Collection < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super TSource > predicate ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( source , predicate , null ) ; }
public void validateFails ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DeleteGlusterVolumeCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeActionParameters ( startedVolumeId , false ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyLegacyGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_LEGACY ) , UsbPolicy.ENABLED_NATIVE ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkView > getAllWithQuery ( java.lang.String query ) { return getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.network.NetworkViewDaoDbFacadeImpl.NetworkViewRowMapper.instance ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext context ) { return getBackend ( ) . runInternalAction ( actionType , parameters , context ) ; }
public void canDetectMissingVM ( ) { org.mockito.Mockito.when ( vmDao.get ( org.mockito.Matchers.eq ( vm.getId ( ) ) ) ) . thenReturn ( null ) ; final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getNewGeoRepSessionCommand ( ) ; }
private boolean isSysprepUsed ( final org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( vm.useSysPrep ( ) ) && ( OsRepositoryImpl.INSTANCE.isWindows ( vm.getVmOsId ( ) ) ) ) && ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getFloppyPath ( ) ) ) ; }
java.lang.String getCdInterface ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.ChipsetType chipset ) ;
public org.ovirt.engine.core.common.action.VdcReturnValueBase Login ( java.lang.String user , java.lang.String password , java.lang.String domain , org.ovirt.engine.core.common.action.VdcActionType loginType ) ;
public static < TSource > TSource firstOrNull ( java.util.Collection < TSource > source ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( source , new org.ovirt.engine.ui.uicommonweb.Linq.TruePredicate < TSource > ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; }
public boolean isManaged ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails details = getNetworkImplementationDetails ( ) ; return details != null ? details.isManaged ( ) : true ; }
protected boolean isUserAuthorizedToRunAction ( ) { if ( isSystemSuperUserPredicate.eval ( org.ovirt.engine.core.bll.aaa.TerminateSessionCommand.getCurrentUser ( ) . getId ( ) ) ) { return true ; } else { addCanDoActionMessage ( EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; return false ; } }
public javax.ws.rs.core.Response doClone ( org.ovirt.engine.api.v3.types.V3Action action ) { return adaptAction ( getDelegate ( ) :: doClone , action ) ; }
public void shouldDetectClusterUpgradeIsDisabled ( ) { final org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.bll.validator.InClusterUpgradeValidatorTest.VERSION_1_2 ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkClusterUpgradeIsEnabled ( cluster ) , org.hamcrest.core.Is.is ( ValidationResult.VALID ) ) ; }
public void spiceConnect ( ) { try { getspice ( ) . connect ( ) ; } catch ( java.lang.RuntimeException ex ) { getLogger ( ) . error ( "Exception on Spice connect" , ex ) ; } }
public org.ovirt.engine.core.bll.CommandBase < ? > createAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext context ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters , context ) ; }
protected void executeQueryCommand ( ) { getQueryReturnValue ( ) . setReturnValue ( getDbFacade ( ) . getQosBaseDao ( ) . get ( getParameters ( ) . getId ( ) ) ) ; }
public boolean validate ( ) { if ( isNoSelection ( ) ) { getInvalidityReasons ( ) . add ( org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.noDisksSelected ( ) ) ; setIsValid ( false ) ; return false ; } return true ; }
public org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm setLunsMap ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsMap ) { this . lunsMap = lunsMap ; return this ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { roleModelProvider.getModel ( ) . setItemsFilter ( RoleType.USER ) ; roleModelProvider.getModel ( ) . forceRefresh ( ) ; } }
protected void logAutheticationFailure ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.setUserName ( org.ovirt.engine.core.bll.aaa.LoginBaseCommand.getUserName ( ) ) ; auditLogDirector.log ( logable , AuditLogType.USER_VDC_LOGIN_FAILED ) ; }
org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.core.common.businessentities.AuditLog > createActionTable ( org.ovirt.engine.ui.common.uicommon.model.SearchableTabModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , ? > modelProvider , com.google.gwt.event.shared.EventBus eventBus , org.ovirt.engine.ui.common.system.ClientStorage clientStorage ) { return new org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.core.common.businessentities.AuditLog > ( modelProvider , getTableResources ( ) , eventBus , clientStorage ) ; }
public void testSingletonDaoAnnotationPresent ( ) { for ( java.lang.Class daoClass : org.ovirt.engine.core.dao.DaoCdiIntegrationTest.daoClasses ) { if ( isConcreteClass ( daoClass ) ) { org.junit.Assert.assertTrue ( ( "A concrete DAO class has to be annotated with @Singleton: " + ( daoClass.getCanonicalName ( ) ) ) , daoClass.isAnnotationPresent ( javax.inject.Singleton.class ) ) ; } } }
private static org.ovirt.engine.core.compat.Guid findActiveISODomain ( org.ovirt.engine.core.compat.Guid storagePoolId ) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) . findActiveISODomain ( storagePoolId ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( getSucceeded ( ) ) { return org.ovirt.engine.core.common.AuditLogType.GEOREP_SESSION_DELETED ; } else { return ( errorType ) == null ? org.ovirt.engine.core.common.AuditLogType.GEOREP_SESSION_DELETE_FAILED : errorType ; } }
public static org.ovirt.engine.core.common.action.ActionReturnValue instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { return new org.ovirt.engine.core.common.action.ActionReturnValue ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionDelete ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName ) ;
protected void alertIfPowerManagementOperationSkipped ( java.lang.String operation , java.lang.Throwable throwable ) { Alert ( AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED , operation , throwable ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createShareableDisk ( org.ovirt.engine.core.common.businessentities.VolumeFormat volumeFormat ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = createDiskImage ( ) ; disk.setvolumeFormat ( volumeFormat ) ; disk.setShareable ( true ) ; disk.setDiskInterface ( DiskInterface.VirtIO ) ; return disk ; }
private void cpuManufacturersMatch ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . checkIfCpusSameManufacture ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ) ; }
public static boolean isGlusterBrickProvisioningSupported ( org.ovirt.engine.core.compat.Version version ) { return ( Version.v3_5.compareTo ( version ) ) <= 0 ; }
protected void executeCommand ( ) { schedulingManager.removeExternalPolicyUnit ( getPolicyUnitId ( ) ) ; setSucceeded ( true ) ; }
protected void validateContainerFormat ( com.woorea.openstack.glance.model.Image glanceImage ) { if ( ! ( glanceImage.getContainerFormat ( ) . equals ( org.ovirt.engine.core.bll.provider.OpenStackImageProviderProxy.GlanceImageContainer.BARE.getValue ( ) ) ) ) { throw new java.lang.RuntimeException ( "Unsupported container format" ) ; } }
private void bootProtocolChanged ( ) { updateCanSpecify ( ) ; getAddress ( ) . setIsValid ( true ) ; getSubnet ( ) . setIsValid ( true ) ; }
public boolean eval ( T a ) { return ( a.getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE ) ; }
protected org.ovirt.engine.api.model.StorageDomain getStorageDomainEntity ( int index ) { org.ovirt.engine.api.model.StorageDomain entity = control.createMock ( org.ovirt.engine.api.model.StorageDomain.class ) ; return org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.setUpStorageDomainEntityExpectations ( entity , index , StorageType.NFS ) ; }
public org.ovirt.engine.core.common.businessentities.VmPoolType getVmPoolType ( ) { return type ; }
protected void configure ( ) { requestStaticInjection ( org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.class ) ; bindInfrastructure ( ) ; bindConfiguration ( ) ; }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId ( ) ) != null ) { org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolDAO ( ) . removeVmFromVmPool ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded ( true ) ; } }
public boolean getBondingOptionsOverrideNotification ( ) { return bondingOptionsOverrideNotification ; }
public void testUrlWithPagination ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setPageSize ( 20 ) ; errataFilter.setPageNumber ( 3 ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.jupiter.api.Assertions.assertEquals ( "/katello/api/v2/systems/xxx/errata?page=3&per_page=20" , underTest.build ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }
public void validateFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( null , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.NFS , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.StorageDomain , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterStorageListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.dataCenterStorageSubTabLabel ( ) , 0 , modelProvider ) ; }
public org.ovirt.engine.api.resource.CreationResource getCreationResource ( java.lang.String oid ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendCreationResource ( oid ) ) ; }
public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return runConnectionStorageToDomain ( storageDomain , vdsId , VdcActionType.DisconnectStorageServerConnection.getValue ( ) ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; getBrickListModel ( ) . setVolumeEntity ( ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( provideDetailModelEntity ( getSelectedItem ( ) ) ) ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { return returnValue ; } return runActionImpl ( actionType , parameters , false , null ) ; }
protected void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( auditLogable , logType ) ; }
public void testPosixEmptyVFSType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data1" , StorageType.POSIXFS , null , "timeo=30" ) ; parameters.setStorageServerConnection ( newPosixConnection ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( getCommand ( ) , EngineMessage.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE ) ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.HttpHeaders headers , javax.ws.rs.core.UriInfo ui , java.lang.String defaultQuery , java.lang.Class < ? > clz ) { return org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( headers , ui , defaultQuery , clz , true ) ; }
public org.ovirt.engine.core.compat.Guid getVdsId ( ) { return ( getVm ( ) . getrun_on_vds ( ) ) != null ? getVm ( ) . getrun_on_vds ( ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; }
public void calculateNetworkImplementationDetailsNetworkIsSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , true , iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) , createQos ( ) ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getRemoveParameters ( org.ovirt.engine.api.model.Network entity ) { return new org.ovirt.engine.core.common.action.RemoveNetworkParameters ( entity.getId ( ) ) ; }
public void invokeUIThread ( org.ovirt.engine.ui.uicompat.ITaskTarget target , java.lang.Object state ) { setState ( state ) ; target.run ( this ) ; }
protected void init ( ) { driver.initialize ( this ) ; hideLabels ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.getApplyCommand ( ) . Execute ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeProfileInfoReturnForXmlRpc glusterVolumeProfileInfo ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName , boolean nfs ) ;
public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , java.lang.String value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate.class ) ; sb.append ( template.input ( value , "" ) ) ; }
public org.ovirt.engine.api.model.Statistic setDatum ( org.ovirt.engine.api.model.Statistic statistic , java.lang.String datum ) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum ( statistic , datum ) ; }
public void noNicDeviceNonNetworkFree ( ) { freeVfCommon ( 0 , 0 , 1 , 0 , 0 , 0 ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = getSingleMockedNonFreeDevice ( ) ; org.junit.Assert.assertFalse ( networkDeviceHelper.isDeviceNetworkFree ( hostDevice ) ) ; }
public void close ( ) { stop ( ) ; if ( ( _dialog ) != null ) { _dialog.disconnect ( ) ; _dialog = null ; } }
protected void verifyModel ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model ) { org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.HOST_NIC_ID.toString ( ) , model.getHostNic ( ) . getId ( ) ) ; }
public void hasNoStorageDomains ( ) { org.mockito.Mockito.when ( sdDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
private void mockStepDao ( org.ovirt.engine.core.compat.Guid jobId ) { org.ovirt.engine.core.common.job.Step step = new org.ovirt.engine.core.common.job.Step ( ) ; step.setJobId ( jobId ) ; org.mockito.Mockito.when ( stepDao.getStepsByJobId ( org.mockito.ArgumentMatchers.eq ( jobId ) ) ) . thenReturn ( java.util.Collections.singletonList ( step ) ) ; }
public java.lang.Long getMemFree ( ) { return this . mVdsStatistics.getMemFree ( ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.NATIVE ) ; org.junit.Assert.assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) ) ; }
public boolean isSetActualValue ( ) { return ( this . actualValue ) != null ; }
public java.util.List < java.lang.String > getMessages ( org.ovirt.engine.core.compat.Guid hostId ) { if ( messages.containsKey ( hostId ) ) { return messages.get ( hostId ) ; } else { return java.util.Collections.emptyList ( ) ; } }
public void setTemplate ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( template , value ) ) ) { template = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Template" ) ) ; } }
public void setRunOnVds ( org.ovirt.engine.core.compat.Guid value ) { this . vmDynamic.setRunOnVds ( value ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface lookupInterfaceByName ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getCollection ( ) ) { if ( iface.getName ( ) . equals ( name ) ) { return iface ; } } return null ; }
public static java.util.List < java.lang.String > runAndAssertValidateFailure ( java.lang.String assertionMessage , org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.EngineMessage message ) { org.junit.jupiter.api.Assertions.assertFalse ( command.validate ( ) , "Command's validate expected to fail, but succeeded" ) ; return org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( assertionMessage , command , message ) ; }
private void RemoveVdsFromCollection ( ) { org.ovirt.engine.core.bll.RemoveVdsCommand.getBackend ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ) ; }
public void internalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status ) { internalSetVmStatus ( vm , status , VmExitStatus.Normal , StringUtils.EMPTY , VmExitReason.Unknown ) ; }
protected void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( auditLogable , logType ) ; }
protected final void addValidationMessages ( org.ovirt.engine.core.common.errors.EngineMessage ... messages ) { for ( org.ovirt.engine.core.common.errors.EngineMessage msg : messages ) { addValidationMessage ( msg ) ; } }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.DISABLED ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.UNFILTERED ) ; org.hamcrest.MatcherAssert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.String getError ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getVdsErrorsTranslator ( ) . translateErrorTextSingle ( org.ovirt.engine.core.bll.storage.pool.SetStoragePoolStatusCommand.getParameters ( ) . getError ( ) . toString ( ) ) ; }
public void run ( ) { waitUntilFencingAllowed ( ) ; startHosts ( hostsWithPMInReboot ) ; }
public void updateVmConfigurationBySnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get ( snapshotId ) ; snapshotModel.updateVmConfiguration ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol resolveSelectedProtocol ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { return consoleModelsCache.resolveUserSelectedProtocol ( item ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) . getVmMemSizeMb ( ) ) ) + " MB" ; }
private void mockDbFacades ( ) { mockVdsGroupDao ( ) ; mockVmDao ( ) ; mockAuditLogDao ( ) ; mockVdsDao ( ) ; mockVdsDynamicDao ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult checkStorageDomainSharedStatusNotLocked ( ) { if ( ( storageDomain ) != null ) { if ( ( storageDomain.getStorageDomainSharedStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Locked ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void setAutomaticLargePage ( java.lang.Object value ) { if ( ( automaticLargePage ) != value ) { automaticLargePage = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AutomaticLargePage" ) ) ; } }
protected void executeVmCommand ( ) { super . executeVmCommand ( ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm ( null ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm ( ) . setVmtGuid ( VmTemplateHandler.BlankVmTemplateId ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVmStaticDao ( ) . update ( org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm ( ) . getStaticData ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getId ( ) . toString ( ) ; }
public void testNullGuidListValues ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.compat.Guid.createGuidListFromString ( null ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < > ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedList , stringList ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { updateDisksStorage ( storageDomain , memoryDisks ) ; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator ( storageDomain ) ; return ( storageDomainValidator.isDomainWithinThresholds ( ) . isValid ( ) ) && ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) . isValid ( ) ) ; }
public void validate_vmNameExists_Test ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ) . when ( affinityGroupDao ) . getByName ( org.mockito.ArgumentMatchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS ) ; }
protected void entityChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { super . entityChanging ( newValue , oldValue ) ; entitiesChanged = calculateEntitiesChanged ( newValue , oldValue ) ; }
private org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilder createBuilder ( ) { final org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderFactory vmInfoBuilderFactory = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderFactory.class ) ; return vmInfoBuilderFactory.createVmInfoBuilder ( vm , org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters ( ) . getVdsId ( ) , createInfo ) ; }
public void testVeryLong ( ) { org.ovirt.engine.api.types.V4Vm object = objectFromXml ( "<vm><memory>92233720368547758070</memory></vm>" ) ; org.junit.Assert.assertEquals ( java.math.BigInteger.TEN.multiply ( java.math.BigInteger.valueOf ( java.lang.Long.MAX_VALUE ) ) , object.memory ( ) ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) ;
public java.lang.String getVdcObjectName ( ) { org.ovirt.engine.core.common.businessentities.Permission perms = org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) ; return entityDao.getEntityNameByIdAndType ( perms.getObjectId ( ) , perms.getObjectType ( ) ) ; }
public void testGetAllEntitiesForStorageDomainWithNoUnregisteredEntities ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao.getAllForStorageDomainByEntityType ( FixturesTool.STORAGE_DOMAIN_NFS2_2 , null ) ; org.junit.Assert.assertTrue ( "No entities should be fetched for the specified storage domain" , ovfEntityDataList.isEmpty ( ) ) ; }
public void updateVisibility ( ) { super . updateVisibility ( ) ; attachContainer.setVisible ( false ) ; clusterTab.setVisible ( false ) ; toggleSubnetVisibility ( false ) ; }
private void initStyles ( ) { nameEditor.addContentWidgetContainerStyleName ( style.name ( ) ) ; publicUseEditor.addContentWidgetContainerStyleName ( style.publicUse ( ) ) ; networkQoSEditor.addContentWidgetContainerStyleName ( style.qos ( ) ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolEqual ( ) { initIpv4ConfigurationBootProtocol ( true ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void shutdown ( ) { org.ovirt.engine.core.common.businessentities.VM entity = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getItem ( ) . getEntity ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.ShutdownVm , new org.ovirt.engine.core.common.action.ShutdownVmParameters ( entity.getId ( ) , true ) ) ; }
public int integer ( ) { return java.lang.Integer.parseInt ( subject.getEntity ( ) . toString ( ) ) ; }
public void getUsbPolicyIsSetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.DISABLED ) ; }
public int getNumOfSockets ( ) { return this . vmStatic.getnum_of_sockets ( ) ; }
protected void initializeVdsError ( org.ovirt.engine.core.common.errors.EngineError returnStatus ) { org.ovirt.engine.core.common.errors.VDSError tempVar = new org.ovirt.engine.core.common.errors.VDSError ( ) ; tempVar.setCode ( returnStatus ) ; tempVar.setMessage ( getReturnStatus ( ) . mMessage ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getVDSReturnValue ( ) . setVdsError ( tempVar ) ; }
public void testUpdateStatus ( ) { dao.updateStatus ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID , ImageStatus.LOCKED ) ; org.ovirt.engine.core.common.businessentities.storage.Image imageFromDb = dao.get ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID ) ; org.junit.jupiter.api.Assertions.assertNotNull ( imageFromDb ) ; org.junit.jupiter.api.Assertions.assertEquals ( ImageStatus.LOCKED , imageFromDb.getStatus ( ) ) ; }
protected void AlertIfPowerManagementOperationSkipped ( java.lang.String operation , java.lang.Throwable throwable ) { Alert ( AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED , operation , throwable ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate mockVmTemplate ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; template.setId ( vmTemplateId ) ; template.setstorage_pool_id ( storagePoolId ) ; org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.setDiskList ( template ) ; return template ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterServer getServerByUuid ( org.ovirt.engine.core.compat.Guid uuid ) { return glusterServerDao.getByGlusterServerUuid ( uuid ) ; }
public void testMarkHostDevicesUsedByVmId ( ) { dao.markHostDevicesUsedByVmId ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = dao.getHostDeviceByHostIdAndDeviceName ( FixturesTool.VDS_RHEL6_NFS_SPM , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , hostDevice.getVmId ( ) ) ; }
private org.ovirt.engine.core.bll.network.macpool.MacPool getPoolWithoutLocking ( org.ovirt.engine.core.compat.Guid macPoolId ) { final org.ovirt.engine.core.bll.network.macpool.MacPool result = macPools.get ( macPoolId ) ; if ( result == null ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.INEXISTENT_POOL_EXCEPTION_MESSAGE ) ; } return result ; }
public void setTimeZone ( java.lang.String value ) { timeZone = value ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getAll ( ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromLUNs" , org.ovirt.engine.core.dao.LunDAODbFacadeImpl.MAPPER , parameterSource ) ; }
public void shouldDetectSuspendedVM ( ) { invalidVM.setStatus ( VMStatus.Suspended ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( UPGRADE_ERROR.VM_SUSPENDED ) ) ; }
private boolean findDefaultManagementNetwork ( ) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup ( ) . getStoragePoolId ( ) ) ; if ( ( managementNetwork ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND ) ; return false ; } return true ; }
protected void onAdd ( T value , V widget ) { modelItems.add ( value ) ; if ( widget instanceof com.google.gwt.user.client.ui.Focusable ) { ( ( com.google.gwt.user.client.ui.Focusable ) ( widget ) ) . setFocus ( true ) ; } }
public void testCanDoActionOvfDiskNotIllegal ( ) { ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) . setImageStatus ( ImageStatus.OK ) ; disk.setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_IN_APPLICABLE_STATUS ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void macAddressTooShortForUpdate ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.assertMacAddressFormatValidation ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.createShortMacAddress ( ) , org.ovirt.engine.core.common.validation.group.UpdateEntity.class , true ) ; }
public void handleVdsMaintenanceTimeout ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( java.util.Arrays.asList ( vdsId ) , true ) ) ; }
protected boolean validate ( ) { return canPauseVm ( org.ovirt.engine.core.bll.PauseVmCommand.getParameters ( ) . getVmId ( ) , org.ovirt.engine.core.bll.PauseVmCommand.getReturnValue ( ) . getValidationMessages ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { dcLabels = ( ( java.lang.Iterable < java.lang.String > ) ( returnValue ) ) ; stopProgress ( ) ; onExportChanged ( ) ; }
protected void moveOrCopyAllImageGroups ( ) { moveOrCopyAllImageGroups ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getId ( ) , getDisksBasedOnImage ( ) ) ; copyAllMemoryImages ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getId ( ) ) ; }
private static boolean shouldProcessVdsDomainReport ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( vds.getVdsGroupSupportsVirtService ( ) ) && ( ( StoragePoolDomainHelper.vdsDomainsActiveMonitoringStatus.contains ( vds.getStatus ( ) ) ) || ( StoragePoolDomainHelper.vdsDomainsMaintenanceMonitoringStatus.contains ( vds.getStatus ( ) ) ) ) ; }
private void readUsbItem ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node ) { vmBase.setUsbPolicy ( org.ovirt.engine.core.common.businessentities.UsbPolicy.forStringValue ( node.SelectSingleNode ( "rasd:UsbPolicy" , _xmlNS ) . innerText ) ) ; }
private void updateActionAvailability ( ) { getRemoveCommand ( ) . setIsExecutionAllowed ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) > 0 ) ) ) ; }
public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap getDetachables ( ) { return filter ( new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap.Predicate ( ) { @ java.lang.Override public boolean apply ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig config ) { return config.isDetachable ( ) ; } } ) ; }
public void networkDoesntExist ( ) { org.mockito.Mockito.when ( networkDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( null ) ; org.hamcrest.MatcherAssert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_HAVING_ID_NOT_EXISTS ) ) ; }
private org.ovirt.engine.api.model.VM removeRestrictedInfo ( org.ovirt.engine.api.model.VM vm ) { if ( isFiltered ( ) ) { vm.setHost ( null ) ; vm.setPlacementPolicy ( null ) ; } return vm ; }
public void iterate ( org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorFunc < T > func , org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate < T > action ) { iterate ( func , action , null ) ; }
public void setIsEmpty ( boolean value ) { if ( ( isEmpty ) != value ) { isEmpty = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsEmpty" ) ) ; } }
public void shouldDetectSameOs ( ) { org.hamcrest.MatcherAssert.assertThat ( new org.ovirt.engine.core.bll.scheduling.OS ( "os1" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) . isSameOsFamily ( new org.ovirt.engine.core.bll.scheduling.OS ( "os1" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) ) , org.hamcrest.core.Is.is ( true ) ) ; }
public org.ovirt.engine.ui.common.widget.table.ActionTable < T > getTable ( ) { return null ; }
protected void revertTask ( ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus ( getEnclosingCommand ( ) . getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
public java.util.Map < java.lang.String , java.lang.Integer > getVideoDeviceSettings ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( ( vmBase.getDefaultDisplayType ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) { return getQxlVideoDeviceSettings ( vmBase ) ; } else { return getVgaVideoDeviceSettings ( ) ; } }
public void testValidateNetworkExclusiveOnNicsTwoVmNetworksAttachedToInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK ) , vmNetwork1 , vmNetwork2 ) ; }
public java.lang.String getIsAvailablePropertyName ( ) { return isAvailablePropertyName ; }
public void testStorageDomainForMemoryIsValidOnlyForDataTypes ( org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType ) { storageDomain.setStorageDomainType ( storageDomainType ) ; org.junit.Assert.assertEquals ( filter.getPredicate ( memoryDisks ) . eval ( storageDomain ) , storageDomainType.isDataDomain ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getParentEntity ( ) { return ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( super . getEntity ( ) ) instanceof org.ovirt.engine.core.common.businessentities.StorageDomain ? super . getEntity ( ) : null ) ) ; }
protected org.ovirt.engine.api.model.Bookmark lookupBookmarkByName ( final java.lang.String name ) { return getEntity ( org.ovirt.engine.api.model.Bookmark.class , QueryType.GetBookmarkByBookmarkName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , name ) ; }
private boolean isAbstractClass ( java.lang.Class clazz ) { return ( clazz.isInterface ( ) ) || ( java.lang.reflect.Modifier.isAbstract ( clazz.getModifiers ( ) ) ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) . getName ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . addVmToPool ( new org.ovirt.engine.core.common.businessentities.vm_pool_map ( org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmId ( ) , org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolId ( ) ) ) ; org.ovirt.engine.core.bll.AddVmToPoolCommand.setSucceeded ( true ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return org.ovirt.engine.core.bll.utils.Injector.get ( org.ovirt.engine.core.bll.interfaces.BackendInternal.class ) ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot getSnapshot ( ) { return org.ovirt.engine.core.bll.AttachDiskToVmCommand.getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.AttachDiskToVmCommand.getParameters ( ) . getSnapshotId ( ) ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection ( ) . url ( "https://engine40.example.com/ovirt-engine/api" ) . user ( "admin@internal" ) . password ( "redhat123" ) . trustStoreFile ( "truststore.jks" ) . build ( ) ; org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService ( ) . hostsService ( ) ; org.ovirt.engine.sdk4.types.Host host = hostsService.add ( ) . host ( org.ovirt.engine.sdk4.builders.Builders.host ( ) . name ( "myhost" ) . description ( "My host" ) . address ( "node40.example.com" ) . rootPassword ( "redhat123" ) . cluster ( org.ovirt.engine.sdk4.builders.Builders.cluster ( ) . name ( "mycluster" ) ) ) . send ( ) . host ( ) ; org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService ( host.id ( ) ) ; for ( ; ; ) { java.lang.Thread.sleep ( ( 5 * 1000 ) ) ; host = hostService.get ( ) . send ( ) . host ( ) ; if ( ( host.status ( ) ) == ( org.ovirt.engine.sdk4.types.HostStatus.UP ) ) { break ; } } connection.close ( ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { _setVdsmId ( ( ( java.lang.String ) ( _parser.cliEnvironmentGet ( VdsmEnv.VDSM_ID ) ) ) ) ; return null ; }
public static java.util.Collection < java.lang.Object [ ] > data ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { org.ovirt.engine.core.bll.GetImagesListByStoragePoolIdQuery.class , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.ISO } , new java.lang.Object [ ] { org.ovirt.engine.core.bll.GetImagesListByStoragePoolIdQuery.class , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Floppy } } ) ; }
public void macAddressIsNullForDefault ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.assertNicValidation ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.createNic ( null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_NAME , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , javax.validation.groups.Default.class , false , VmNetworkInterface.VALIDATION_MESSAGE_MAC_ADDRESS_NOT_NULL ) ; }
public void testStorage ( ) { testValidSql ( "Storage: " , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search ) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Storage: datacenter = Default" , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search WHERE storage_domains_for_search.storage_pool_name::text LIKE Default ) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Storage: host.name = fake1" , "SELECT * FROM ((SELECT distinct storage_domains_for_search.* FROM storage_domains_for_search LEFT OUTER JOIN vds_with_tags ON storage_domains_for_search.id=vds_with_tags.storage_id WHERE vds_with_tags.vds_name LIKE fake1 ) ORDER BY storage_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > externalVmModel ) { return externalVmModel.getEntity ( ) . getName ( ) ; }
public boolean getIsVolumeFormatAvailable ( ) { return volumeFormatAvailable ; }
public void testCommonX86 ( ) { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu ( ArchitectureType.x86 , new java.lang.Integer ( 16 ) , new java.lang.Integer ( 288 ) , 2 , 12 ) ; org.junit.jupiter.api.Assertions.assertEquals ( new java.lang.Integer ( 192 ) , maxVCpu ) ; }
public void validateFailsOnNull ( ) { setVolumeId ( null ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testSubResourceLocatorBadGuid ( ) { verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> resource.getApplicationResource ( "foo" ) ) ) ; }
public void setSelectedItem ( java.lang.Object value ) { super . setSelectedItem ( value ) ; onEntityChanged ( ) ; }
public void setInstanceToHostAssignments ( java.util.Map < java.lang.Long , java.lang.String > instanceToHostAssignments ) { this . instanceToHostAssignments = instanceToHostAssignments ; }
private java.lang.String getTemplateSharedLockMessage ( ) { return new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM.name ( ) ) . append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmName ( ) ) ) . toString ( ) ; }
protected boolean isHotPlugDiskSnapshotSupported ( ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.hotPlugDiskSnapshot ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVds ( ) . getClusterCompatibilityVersion ( ) ) ) ) { return failValidation ( EngineMessage.HOT_PLUG_DISK_SNAPSHOT_IS_NOT_SUPPORTED ) ; } return true ; }
public void testRemoveVmPool ( ) { dao.remove ( deletableVmPool.getVmPoolId ( ) ) ; org.ovirt.engine.core.common.businessentities.VmPool result = dao.get ( deletableVmPool.getVmPoolId ( ) ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.FenceVdsBaseCommand.createFenceExclusiveLocksMap ( getProblematicVdsId ( ) ) ; }
public long getDbGeneration ( ) { return vmStatic.getDbGeneration ( ) ; }
private static boolean topLevel ( java.lang.String name ) { return ! ( name.contains ( "." ) ) ; }
public org.ovirt.engine.api.model.OpenStackImage get ( ) { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackStorageProviderHelper.getStorageDomainId ( this , providerId ) ; return performGet ( QueryType.GetImageById , new org.ovirt.engine.core.common.queries.GetImageByIdParameters ( storageDomainId , id ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllServers ( org.ovirt.engine.core.compat.Guid clusterId ) { return getVdsDao ( ) . getAllForCluster ( clusterId ) ; }
public boolean isAction ( ) { return ! ( ( NON_ACTION_METHOD_NAMES.contains ( getName ( ) ) ) || ( ( ( base ) != null ) && ( NON_ACTION_METHOD_NAMES.contains ( base.getName ( ) ) ) ) ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Integer > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability ( ) ; }
private boolean importSupported ( org.ovirt.engine.core.compat.Version spVersion , org.ovirt.engine.core.compat.Version clusterVersion ) { return ( ( spVersion.greaterOrEquals ( Version.v3_5 ) ) && ( clusterVersion.greaterOrEquals ( Version.v3_6 ) ) ) && ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.AutoImportHostedEngine ) ) ; }
private void addMemoryDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDiskForVm ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.getStorageDomain ( ) . getStorageType ( ) ) ; addDisk ( memoryDisk ) ; }
protected void setActionMessageParameters ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( cdImagePath ) ) ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__CHANGE_CD ) ; } else { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__EJECT_CD ) ; } addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__VM ) ; }
public void testIsNotLocalFsWithDefaultClusterWhenClusterIsDefault ( ) { storagePool.setIsLocal ( true ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . containsDefaultCluster ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isNotLocalfsWithDefaultCluster ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ) ; }
public javax.ws.rs.core.Response performAction ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.ActionParametersBase params , org.ovirt.engine.api.model.Action action ) { return performAction ( task , params , action , false ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__REFRESH ) ; addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_GEOREP_SESSION ) ; addValidationMessageVariable ( "volumeName" , org.ovirt.engine.core.bll.gluster.RefreshGeoRepSessionsCommand.getGlusterVolumeName ( ) ) ; addValidationMessageVariable ( "cluster" , org.ovirt.engine.core.bll.gluster.RefreshGeoRepSessionsCommand.getClusterName ( ) ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain , isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
private void setRootDSE ( org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType , javax.naming.directory.Attributes rootDseRecords ) throws javax.naming.NamingException { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.RootDSE rootDSE ; rootDSE = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.RootDSEFactory.get ( ldapProviderType , rootDseRecords ) ; configuration.put ( "config.rootDSE" , rootDSE ) ; configuration.put ( "config.LDAPProviderTypes" , ldapProviderType.toString ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider getProvider ( ) { return providerDao.get ( org.ovirt.engine.core.bll.GetHostListFromExternalProviderQuery.getParameters ( ) . getProviderId ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getQueryReturnValue ( ) . setReturnValue ( getDirectoryUser ( dbUserDao.get ( org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters ( ) . getId ( ) ) ) ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel model ) { networks.asEditor ( ) . edit ( model ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > getUserRequestForStorageDomainRepoFileList ( ) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) . getUserRequestForStorageDomainRepoFileList ( getStorageDomainIdForQuery ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getImageType ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getForceRefresh ( ) ) ; }
public void setSelectedItem ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType value ) { super . setSelectedItem ( value ) ; updateLinkChangability ( ) ; }
protected void executeCommand ( ) { fenceAgentDao.remove ( org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters ( ) . getAgent ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.RemoveFenceAgentCommand.setSucceeded ( true ) ; }
public void getQosByDiskProfileId ( ) { org.ovirt.engine.core.common.businessentities.qos.StorageQos qos = dao.getQosByDiskProfileId ( FixturesTool.DISK_PROFILE_1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( qos ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.QOS_ID_1 , qos.getId ( ) ) ; }
public final java.lang.String getDestinationVdsName ( ) { org.ovirt.engine.core.common.businessentities.VDS destinationVds = getDestinationVds ( ) ; return destinationVds != null ? destinationVds.getName ( ) : null ; }
protected org.ovirt.engine.api.model.NIC doPopulate ( org.ovirt.engine.api.model.NIC model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { return model ; }
public void newEntity ( ) { commandType = org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel.CommandType.New ; org.ovirt.engine.core.common.businessentities.Role role = new org.ovirt.engine.core.common.businessentities.Role ( ) ; initRoleDialog ( role ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface ) { org.ovirt.engine.ui.common.widget.uicommon.popup.networkinterface.NetworkInterfacePopupWidget.Driver.driver.edit ( iface ) ; hideMacWhenNotEnabled ( iface ) ; }
protected void migrateVM ( final org.ovirt.engine.core.common.businessentities.VM vmToMigrate ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vmToMigrate.getId ( ) ) ; backend.runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
public javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.Watchdogs > createWatchdogs ( org.ovirt.engine.sdk.entities.Watchdogs value ) { return new javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.Watchdogs > ( org.ovirt.engine.sdk.entities.ObjectFactory._Watchdogs_QNAME , org.ovirt.engine.sdk.entities.Watchdogs.class , null , value ) ; }
protected void logMonitorLockReleased ( java.lang.String commandName ) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.VdsCommand.getVds ( ) ; log.info ( "{} finished. Lock released. Monitoring can run now for host '{}' from data-center '{}'" , commandName , vds.getName ( ) , vds.getStoragePoolName ( ) ) ; }
public void testExtractVariableDeclarationsForStaticMsgs ( ) { java.util.List < java.lang.String > msgs = java.util.Arrays.asList ( "ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM" , "IRS_FAILED_RETRIEVING_SNAPSHOT_INFO" ) ; org.junit.jupiter.api.Assertions.assertTrue ( org.apache.commons.collections.CollectionUtils.isEqualCollection ( msgs , command.extractVariableDeclarations ( msgs ) ) , "extractVariableDeclarations didn't return the same static messages" ) ; }
public com.google.gwt.event.shared.HandlerRegistration addValueChangeHandler ( com.google.gwt.event.logical.shared.ValueChangeHandler handler ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.console.EntityModelValueCheckbox.asCheckBox ( ) . addValueChangeHandler ( new ValueChangeHandlerDecorator ( handler ) ) ; }
public boolean isInitialized ( ) { return this . vmStatic.isInitialized ( ) ; }
private void collapseAll ( ) { setIsExpandedRecursively ( false , getItems ( ) . get ( 0 ) ) ; }
private void mockExistingNetworks ( org.ovirt.engine.core.common.businessentities.network.Network ... networks ) { org.mockito.Mockito.when ( networkDao.getAllForCluster ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Arrays.asList ( networks ) ) ; }
public void canDoActionFailedVMNotFound ( ) throws java.lang.Exception { mockNullVm ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , java.lang.String description , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType snapshotType , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String memoryVolume , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addSnapshot ( snapshotId , description , SnapshotStatus.LOCKED , snapshotType , vm , true , memoryVolume , compensationContext ) ; }
protected org.ovirt.engine.core.common.businessentities.tags lookupTagByName ( java.lang.String name ) { return getEntity ( org.ovirt.engine.core.common.businessentities.tags.class , VdcQueryType.GetTagByTagName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , name ) ; }
public boolean evaluate ( java.lang.Object o ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( o ) ) ; return ( storageDomain.getStorageType ( ) . isCinderDomain ( ) ) && ( ( storageDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getEntity ( int index ) { return helper.getBrickEntity ( index , false ) ; }
public boolean isMultiCluster ( ) { return true ; }
public static java.util.Map < org.ovirt.engine.core.common.businessentities.VmDevice , java.lang.Integer > getVmDeviceUnitMapForVirtioScsiDisks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getVmDeviceUnitMapForScsiDisks ( vm , DiskInterface.VirtIO_SCSI , false ) ; }
public boolean isVmInAsyncRunningList ( org.ovirt.engine.core.compat.Guid vmId ) { return asyncRunningVms.contains ( vmId ) ; }
protected void verify ( org.ovirt.engine.api.model.Qos model , org.ovirt.engine.api.model.Qos transform ) { super . verify ( model , transform ) ; org.junit.Assert.assertEquals ( model.getCpuLimit ( ) , transform.getCpuLimit ( ) ) ; }
protected java.lang.String getSuffixCauseToClonedNameCollisionMessage ( java.lang.String existingName ) { return org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.suffixCauseToClonedTemplateNameCollision ( existingName ) ; }
public void validateFailsWithEmptyBricks ( ) { setVolume ( getVolume ( 0 , false ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED ) ; }
public void callToVDSMFailed ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { stubFailedCalls ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( vmsListFetcher.fetch ( ) ) ; }
private static java.lang.String generateEncodingJsonEntry ( int encoding ) { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . generateJsonField ( "Enc" , java.lang.String.valueOf ( encoding ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > getAll ( ) { return getCallsHandler ( ) . executeReadList ( "GetAllFromvm_interface" , mapper , getCustomMapSqlParameterSource ( ) ) ; }
public org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworksResource getParent ( ) { return parent ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getChildCommandIds ( org.ovirt.engine.core.compat.Guid cmdId ) { initChildHierarchy ( ) ; java.util.List < org.ovirt.engine.core.compat.Guid > childIds = java.util.Collections.EMPTY_LIST ; if ( childHierarchy.containsKey ( cmdId ) ) { childIds = childHierarchy.get ( cmdId ) ; } return childIds ; }
public void attachUserGroupToTag ( org.ovirt.engine.core.common.businessentities.TagsUserGroupMap tagUserGroupMap ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "group_id" , tagUserGroupMap.getgroup_id ( ) ) . addValue ( "tag_id" , tagUserGroupMap.gettag_id ( ) ) ; getCallsHandler ( ) . executeModification ( "Inserttags_user_group_map" , parameterSource ) ; }
public void persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ) ;
public java.util.Map < java.lang.String , java.lang.Object > glusterServicesGet ( java.lang.String [ ] serviceNames ) ;
public org.ovirt.engine.core.common.queries.QueryParametersBase withRefresh ( ) { setRefresh ( true ) ; return this ; }
public void testGetInnerJoin ( ) { org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter comp = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter ( true ) ; org.junit.Assert.assertNotNull ( "Sanity test" , comp.getInnerJoin ( "EVENT" , "USER" ) ) ; }
public void setPrestartedVmsHint ( java.lang.String value ) { if ( ( prestartedVmsHint ) != value ) { prestartedVmsHint = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "PrestartedVmsHint" ) ) ; } }
public void run ( ) { getKernelCmdline ( ) . setEntity ( kernelCmdline ) ; }
public boolean DisconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return runConnectionStorageToDomain ( storageDomain , vdsId , VdcActionType.RemoveStorageServerConnection.getValue ( ) ) ; }
public static com.google.gwt.resources.client.ImageResource getResource ( org.ovirt.engine.core.common.businessentities.network.InterfaceStatus status ) { switch ( status ) { case UP : return org.ovirt.engine.ui.webadmin.widget.host.InterfaceStatusImage.resources.upImage ( ) ; case NONE : case DOWN : default : return org.ovirt.engine.ui.webadmin.widget.host.InterfaceStatusImage.resources.downImage ( ) ; } }
public void testGetWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
protected void logSettingVmToDown ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vdsId , vmId ) ; auditLogDirector.log ( logable , AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE ) ; }
public java.lang.String GetTagNameAndChildrenNames ( org.ovirt.engine.core.compat.Guid tagId ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagNameAndChildrenNames ( tagId ) ; }
public boolean isPreviousIsQuotaAvailable ( ) { return previousIsQuotaAvailable ; }
public void setPmPort ( java.lang.Integer value ) { mVdsStatic.setPmPort ( value ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByConnId ( java.lang.String connectionId ) { return org.ovirt.engine.core.bll.storage.AddStorageDomainCommon.getStorageDomainDao ( ) . getAllByConnectionId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( connectionId ) ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond = createNewCreateOrUpdateBondWithNameAndId ( ) ; doTestValidModifiedBonds ( createOrUpdateBond , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , createOrUpdateBond.getName ( ) ) ) , ValidationResult.VALID ) ; }
public void setVmIp ( java.lang.String value ) { this . vmDynamic.setvm_ip ( value ) ; }
public void UpdateIsDisksAvailable ( ) { getModel ( ) . setIsDisksAvailable ( ( ( ( getModel ( ) . getDisks ( ) ) != null ) && ( getModel ( ) . getProvisioning ( ) . getIsChangable ( ) ) ) ) ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister createLegacyPersister ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > userNetworkAttachments , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ... vdsNetworkInterfaces ) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister ( networkAttachmentDao , hostId , new java.util.ArrayList ( java.util.Arrays.asList ( vdsNetworkInterfaces ) ) , customPropertiesForNics , userNetworkAttachments , clusterNetworks ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result2 ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel2 = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result2.getState ( ) ) ) ; localModel2.stopProgress ( ) ; cancel ( ) ; }
protected void executeDiskModifications ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) . setId ( vmId ) ; model.getInstanceImages ( ) . executeDiskModifications ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) ) ; }
public java.util.Date getCpuOverCommitTimestamp ( ) { return mVdsStatistics.getcpu_over_commit_time_stamp ( ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createDetachedDefaultVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ; group.setStoragePoolId ( null ) ; return group ; }
private org.ovirt.engine.core.common.businessentities.network.Network createManagementNetwork ( ) { org.mockito.Mockito.when ( managementNetworkUtil.isManagementNetwork ( org.mockito.Matchers.eq ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( true ) ; return createNetwork ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD , getSmartcardDeviceSpecParams ( ) , true , false ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleClient asSpice ( org.ovirt.engine.ui.uicommonweb.models.VmConsoles vmConsoles ) { return vmConsoles.getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class ) . getSpiceImpl ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByHosts ( ) { return networkNotUsed ( getDbFacade ( ) . getVdsDao ( ) . getAllForNetwork ( network.getId ( ) ) , EngineMessage.VAR__ENTITIES__HOSTS , EngineMessage.VAR__ENTITIES__HOST ) ; }
public void checkEmptyStringAllowed ( ) { underTest = new org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidation ( mockConstantsManager , true ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( "" ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.successfulValidationResult , validationResult ) ; }
private void handleException ( java.lang.Throwable e ) { log.error ( java.lang.String.format ( "Failed to import certificate: %1$s" , e.getMessage ( ) ) ) ; log.debug ( "Exception" , e ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.PROVIDER_IMPORT_CERTIFICATE_ERROR , e.getMessage ( ) ) ; }
private java.lang.String getUPN ( org.ovirt.engine.core.common.businessentities.DbUser user ) { java.lang.String retVal = user.getLoginName ( ) ; if ( ! ( retVal.contains ( "@" ) ) ) { retVal = ( retVal + "@" ) + ( user.getDomain ( ) ) ; } return retVal ; }
private void qosExistsTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , org.ovirt.engine.core.bll.validator.NetworkQosValidator validator ) { org.hamcrest.MatcherAssert.assertThat ( validator.qosExists ( ) , matcher ) ; }
org.ovirt.engine.core.common.businessentities.NonOperationalReason persistAndEnforceNetworkCompliance ( org.ovirt.engine.core.common.businessentities.VDS host , boolean skipManagementNetwork , org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredNetworkData ) ;
protected static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createHostNetworkAuditLog ( java.lang.String networkName , org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vds.getId ( ) ) ; logable.addCustomValue ( "NetworkName" , networkName ) ; return logable ; }
public void testValidateSnapshotNotActiveFalse ( ) { mockSnapshot ( SnapshotType.ACTIVE ) ; org.junit.Assert.assertFalse ( "validation should fail" , cmd.validateSnapshotType ( ) ) ; }
public void collapseAll ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel a : getEventGroupModels ( ) ) { a.setIsExpanded ( false ) ; } }
public java.util.HashSet < org.ovirt.engine.core.compat.Version > getSupportedENGINESVersionsSet ( ) { return this . mVdsDynamic.getSupportedEngineVersionsSet ( ) ; }
public void testAttachVmToTag ( ) { dao.attachVmToTag ( newVmTag ) ; org.ovirt.engine.core.common.businessentities.TagsVmMap result = dao.getTagVmByTagIdAndByVmId ( newVmTag.gettag_id ( ) , newVmTag.getvm_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; assertEqualsTagsVmMap ( newVmTag , result ) ; }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText ) { com.google.gwt.user.cellview.client.Header < ? > header = new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( headerText ) ) ; addColumn ( column , header ) ; }
< T > org.ovirt.engine.ui.common.editor.UiCommonEditor < T > getFunctionalEditor ( com.google.gwt.editor.client.LeafValueEditor < T > editor ) { if ( editor instanceof org.ovirt.engine.ui.common.editor.UiCommonEditor ) { return ( ( org.ovirt.engine.ui.common.editor.UiCommonEditor < T > ) ( editor ) ) ; } else { return null ; } }
public void updateWithCpuLowerThanHost ( ) { createCommandWithDefaultVdsGroup ( ) ; setupCpu ( ) ; clusterHasVds ( ) ; cpuFlagsMissing ( ) ; architectureIsUpdatable ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; org.ovirt.engine.ui.uicompat.Task.Create ( this , null ) . InvokeUIThread ( ) ; }
java.util.List < java.lang.String > translateErrorText ( java.util.List < java.lang.String > errorMsg , java.util.Locale locale ) ;
public void validateCanDoAction ( ) { mockVMPoolDAO ( ) ; setupForStorageTests ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public org.ovirt.engine.sdk.web.HttpProxyBuilder debug ( java.lang.Boolean debug ) { if ( debug != null ) { this . debug = debug.booleanValue ( ) ; } return this ; }
public void setIsExpanded ( boolean value ) { isExpanded = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsExpanded" ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > verifyUntrustedVolume ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID ) ;
public boolean checkProxyHostConnectionToHost ( ) { return runFenceAction ( FenceActionType.Status , FenceAgentOrder.Primary ) . getSucceeded ( ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters ( ) { return this . actionParameters ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { return qos.getName ( ) ; }
public boolean checkIfCpusSameManufacture ( java.lang.String cpuName1 , java.lang.String cpuName2 , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get ( ver ) ; return cpuFlagsManager != null ? cpuFlagsManager.checkIfCpusSameManufacture ( cpuName1 , cpuName2 ) : false ; }
public void updateUpdateAvailable ( org.ovirt.engine.core.compat.Guid id , boolean updateAvailable ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_guid" , id ) . addValue ( "is_update_available" , updateAvailable ) ; getCallsHandler ( ) . executeModification ( "UpdateVdsDynamicIsUpdateAvailable" , parameterSource ) ; }
public void setTitle ( com.google.gwt.safehtml.shared.SafeHtml text ) { tooltipPanel.setText ( text ) ; }
public java.lang.Object getQueryableId ( ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( "QueryableId not overridden in type" ) ; }
public void iscsiBondDoesNotExist ( ) { org.ovirt.engine.core.bll.ValidationResult res = validator.isIscsiBondExist ( null ) ; org.junit.Assert.assertThat ( res , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ISCSI_BOND_NOT_EXIST ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getMoveItemUpCommand ( ) ) ) { moveItemUp ( ) ; } else if ( command == ( getMoveItemDownCommand ( ) ) ) { moveItemDown ( ) ; } }
private boolean isDiskImage ( org.ovirt.engine.api.model.Disk disk ) { return ( disk.getDiskStorageType ( ) ) == org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.Disk ; }
public boolean isEnabled ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model : getNetworksTableItems ( ) ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkManageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel ) ( model ) ) ; if ( clusterNetworkManageModel.getIsChangable ( ) ) { return true ; } } return false ; }
public void validateNonExistingJobFails ( ) throws java.lang.Exception { setupMock ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.EndExternalJobCommandTest.jobId ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( ( ! ( commandMock.validate ( ) ) ) ) ; }
public void testValidateNetworkExclusiveOnNicsTwoVmNetworksAttachedToInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( false , java.util.Arrays.asList ( NetworkType.VM , NetworkType.VM ) , vmNetwork1 , vmNetwork2 ) ; }
public void setSerialNumberPolicy ( org.ovirt.engine.ui.uicommonweb.models.vms.SerialNumberPolicyModel value ) { this . serialNumberPolicy = value ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getValue ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity object ) { return object ; }
public void nameIsNullForDefault ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.assertNicValidation ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.createNic ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS , null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , javax.validation.groups.Default.class , false , VmNetworkInterface.VALIDATION_MESSAGE_NAME_NOT_NULL ) ; }
public org.ovirt.api.metamodel.concepts.Annotation getAnnotation ( org.ovirt.api.metamodel.concepts.Name name ) { return annotations.stream ( ) . filter ( org.ovirt.api.metamodel.concepts.Named.named ( name ) ) . findFirst ( ) . orElse ( null ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.businessentities.DbUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getId ( ) ) ; params.setSessionId ( getSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . Logoff ( params ) ; return returnValue ; }
protected boolean canDoAction ( ) { return ( super . canDoAction ( ) ) && ( validate ( getQosValidator ( getQos ( ) ) . peakConsistentWithAverage ( ) ) ) ; }
public org.ovirt.engine.api.v3.types.V3Template update ( org.ovirt.engine.api.v3.types.V3Template template ) { return adaptUpdate ( getDelegate ( ) :: update , template ) ; }
public void asGraphicsTypeInverseOfAsConsoleId ( org.ovirt.engine.core.common.businessentities.GraphicsType type ) { org.junit.jupiter.api.Assertions.assertEquals ( type , org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asGraphicsType ( org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId ( type ) ) ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage image , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImage ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) ) , vmId ) ; }
protected void executeCommand ( ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice watchdog : getWatchdogs ( ) ) { vmDeviceDao.remove ( watchdog.getId ( ) ) ; } setSucceeded ( true ) ; }
public void configure ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel ) { searchableListModel.setIsAsync ( getIsAsync ( ) ) ; }
private void updateVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { setVolumeFormat ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDiskVolumeFormat ( volumeType , storageType ) ) ; }
private void processExceptionToClient ( org.ovirt.engine.core.common.errors.VdcFault fault ) { fault.setSessionID ( getParameters ( ) . getSessionId ( ) ) ; _returnValue.setFault ( fault ) ; }
private com.google.gwt.safehtml.shared.SafeHtml bulletedItem ( java.lang.String msg ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.templates.unorderedList ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.templates.listItem ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( msg ) ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( "CancelError" . equals ( command.getName ( ) ) ) { parentModel.setConfirmWindow ( null ) ; } }
private void loadProviders ( ) { switch ( importSources.getSelectedItem ( ) ) { case VMWARE : loadVmwareProviders ( ) ; break ; case KVM : loadKvmProviders ( ) ; break ; case XEN : loadXenProviders ( ) ; break ; default : } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue ( ) ; if ( rebalanceStatusEntity != null ) { showStatus ( rebalanceStatusEntity ) ; } }
public void setSpmPriorityValue ( java.lang.Integer value ) { if ( spmInitialized ) { updateSpmPriority ( value ) ; } else { postponedSpmPriority = value ; } }
public void testCanDoActionStorageDomainIsFileStorage ( ) { storageDomain.setStorageType ( StorageType.NFS ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_ALIGNMENT_SCAN_STORAGE_TYPE ) ; }
public int getNiceLevel ( ) { return this . vmStatic.getnice_level ( ) ; }
public boolean isValid ( java.lang.String field , java.lang.String value ) { return org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.validChar.isMatch ( value ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser getExpectedResult ( ) { org.ovirt.engine.core.common.businessentities.LdapUser user = new org.ovirt.engine.core.common.businessentities.LdapUser ( ) ; user.setUserName ( org.ovirt.engine.core.bll.NAME_TO_SEARCH ) ; user.setPassword ( "melon!" ) ; user.setUserId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; user.setDomainControler ( org.ovirt.engine.core.bll.DOMAIN ) ; return user ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { addBadMacsValidationListener ( model ) ; }
private org.ovirt.engine.core.dao.StoragePoolDao getStoragePoolDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( ActionType.HostEnrollCertificateInternal , getParameters ( ) , cloneContextAndDetachFromParent ( ) ) ; setSucceeded ( true ) ; }
protected void setupSelectedProtocol ( final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model ) { selectedProtocol = consoleUtils.determineConnectionProtocol ( model ) ; }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForNewDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes ( ) ; double totalSizeForDisks = getTotalSizeForNewDisks ( diskImages ) ; return validateRequiredSpace ( availableSize , totalSizeForDisks ) ; }
private org.ovirt.engine.core.common.businessentities.AuditLog getEventWithOvirtOrigin ( ) { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = new org.ovirt.engine.core.common.businessentities.AuditLog ( ) ; auditLog.setaudit_log_id ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_2 ) ; auditLog.setOrigin ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.OVIRT_ORIGIN ) ; return auditLog ; }
public T convert ( java.lang.Object returnValue ) { T value = super . convert ( returnValue ) ; return value != null ? value : defaultValue ; }
public void clearAsyncTask ( ) { if ( Guid.Empty.equals ( getVdsmTaskId ( ) ) ) { removeTaskFromDB ( ) ; return ; } clearAsyncTask ( false ) ; }
protected boolean migrationSupportedForArch ( org.ovirt.engine.core.common.businessentities.ArchitectureType arch ) { return org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported ( arch , cluster.getCompatibilityVersion ( ) ) ; }
protected void updateReportsAvailability ( ) { commonModelProvider.get ( ) . updateReportsAvailability ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.getOptions ( ) . setWanDisableEffects ( ( ( java.util.List < org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects > ) ( returnValue ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.UICommand getDoubleClickCommand ( ) { return getDetailsCommand ( ) ; }
protected void setImageStatus ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus ) { setImageStatus ( imageStatus , getRelevantDiskImage ( ) ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryParametersBase getQueryParameters ( ) { return new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) ; }
public void nonPassthroughProfileContainsPortMirroringAndQos ( ) { passthroughProfileContainsSupportedPropertiesTest ( false , true , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.VALID_NETWORK_FILTER_ID ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendTemplateNicsResourceTest.setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index ) ; }
public boolean isPreviousWipeAfterDeleteEntity ( ) { return previousWipeAfterDeleteEntity ; }
private void mockBackend ( ) { org.mockito.Mockito.when ( backend.runAction ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.ActionType.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.CpuProfileParameters.class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ) ; }
public void testWrongKeyPair ( ) throws java.lang.Exception { sshDialog.setKeyPair ( java.security.KeyPairGenerator.getInstance ( "RSA" ) . generateKeyPair ( ) ) ; sshDialog.connect ( ) ; org.junit.jupiter.api.Assertions.assertThrows ( javax.naming.AuthenticationException.class , sshDialog :: authenticate ) ; }
private void testActionDisallowed ( ) { org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ; }
private void mockValidatePciAndIdeLimit ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . isValidPciAndIdeLimit ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
protected java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > getRunningVms ( ) { return _runningVms ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Cluster object ) { return object.getCompatibilityVersion ( ) . getValue ( ) ; }
public void testGetStrippedVdsUniqueIdWithoutValidChars ( ) { java.lang.String result = this . gerStrippedVdsUniqueId ( "^%^" ) ; org.junit.jupiter.api.Assertions.assertEquals ( "" , result , "Vds id is not empty as expected" ) ; }
public void setIsEmpty ( boolean value ) { if ( ( isEmpty ) != value ) { isEmpty = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsEmpty" ) ) ; } }
private void logAfterRefreshFailureMessage ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warnFormat ( "Failed to AfterRefreshTreatment VDS error = '{0}', continuing." , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) ) ; }
private void setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol ipv4BootProtocol ) { getTestedNetworkAttachment ( ) . getIpConfiguration ( ) . getIpv4PrimaryAddress ( ) . setBootProtocol ( ipv4BootProtocol ) ; }
public java.lang.String getDiskAlias ( ) { if ( ( disk ) != null ) { return disk.getDiskAlias ( ) ; } return "" ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runInternalQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParameters ) { return runInternalQuery ( queryType , queryParameters , null ) ; }
private boolean checkFreeSpaceOnDestinationDomain ( org.ovirt.engine.core.common.businessentities.storage_domains domain , int requestedSizeGB ) { return validate ( new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( domain ) . isDomainHasSpaceForRequest ( requestedSizeGB ) ) ; }
protected int getMaxVolumeChain ( ) { return org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.MaxImagesInChain ) ; }
public void anyStatusValidWhenNoInstallationRequired ( ) { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , oldHost , host , false , hostedEngineHelper ) ; org.junit.Assert.assertThat ( validator.statusSupportedForHostInstallation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createDefaultClusterWithDifferentCpuName ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster ( ) ; group.setCpuName ( "Another CPU name" ) ; return group ; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; pool.setName ( "Default" ) ; pool.setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_1 ) ; return pool ; }
public void testGetFilteredWithPermissionsNoPermissions ( ) { org.ovirt.engine.core.common.businessentities.VM result = dao.get ( existingVm.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getChildCommandIds ( org.ovirt.engine.core.compat.Guid commandId ) ;
public boolean isOvirtVintageNode ( ) { return ( getVdsType ( ) ) == ( VDSType.oVirtVintageNode ) ; }
public void setItems ( java.util.Collection value ) { if ( value != null ) { java.util.Collections.sort ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ) ( value ) ) , new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator ( ) ) ; } super . setItems ( value ) ; }
public void setTargetHistoryToken ( java.lang.String historyToken ) { hyperlink.setHref ( ( "#" + historyToken ) ) ; }
protected org.ovirt.engine.core.common.job.Step modifyEntity ( org.ovirt.engine.core.common.job.Step entity ) { entity.setStatus ( JobExecutionStatus.FINISHED ) ; entity.setEndTime ( new java.util.Date ( ) ) ; return entity ; }
public void setTooltipFallback ( com.google.gwt.safehtml.shared.SafeHtml tooltipFallback ) { this . tooltipFallback = tooltipFallback ; }
public void setup ( ) { storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( "test" , "" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , "test" , StorageType.UNKNOWN.getValue ( ) , StoragePoolStatus.Up.getValue ( ) ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool ) ) ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( true , false ) ; setupCpu ( ) ; vdsExist ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public boolean validate ( ) { getLabelsModel ( ) . validate ( ) ; return getLabelsModel ( ) . getIsValid ( ) ; }
public void setPmOptions ( java.lang.String value ) { mVdsStatic.setPmOptions ( value ) ; }
public org.ovirt.engine.ui.uicommonweb.models.SearchableListModel getImportDiskListModel ( ) { return templateImportDiskListModel ; }
private org.ovirt.engine.core.common.businessentities.MacPool getOldMacPool ( ) { if ( ( oldMacPool ) == null ) { oldMacPool = getMacPoolDao ( ) . get ( getMacPoolId ( ) ) ; } return oldMacPool ; }
public org.ovirt.engine.api.model.Network lookupEntity ( org.ovirt.engine.core.compat.Guid ignore ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return getEntity ( org.ovirt.engine.api.model.Network.class , VdcQueryType.GetNetworkById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , guid.toString ( ) ) ; }
private void mockStoragePoolIsoMap ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap spim = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; org.mockito.Mockito.when ( storagePoolIsoMapDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( spim ) ; }
public javax.ws.rs.core.Response remove ( ) ;
public boolean handlesEvent ( com.google.gwt.view.client.CellPreviewEvent < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { return ( org.ovirt.engine.ui.common.widget.table.cell.EventHandlingCellMixin.inputHandlesClick ( event ) ) || ( ElementTooltipUtils.HANDLED_CELL_EVENTS.contains ( event.getNativeEvent ( ) . getType ( ) ) ) ; }
public org.ovirt.vdsmfake.domain.Host getHostByName ( java.lang.String name ) { return org.ovirt.vdsmfake.domain.VdsmManager.getInstance ( ) . getHostByName ( name ) ; }
public void outboundPeakLowerThanAverage ( ) { qos.setInboundPeak ( org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_HIGH ) ; qos.setOutboundPeak ( org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_LOW ) ; peakConsistentWithAverageTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_QOS_PEAK_LOWER_THAN_AVERAGE ) ) ; }
public int getInteger ( java.lang.String key ) { return getInteger ( key , null ) ; }
protected boolean updateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getstorage_pool_id ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) , org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
public void testGetMaximumRam ( ) { org.junit.jupiter.api.Assertions.assertEquals ( 2048 , OsRepositoryImpl.INSTANCE.getMaximumRam ( 777 , null ) ) ; }
public void testMacIsContainedInRange ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( rangeOf10Macs.contains ( org.ovirt.engine.core.bll.network.macpool.RangeTest.MAC_FROM_RANGE ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected void writeCustomEmulatedMachine ( ) { _writer.writeElement ( org.ovirt.engine.core.utils.ovf.CUSTOM_EMULATED_MACHINE , emulatedMachine ) ; }
public org.ovirt.engine.core.bll.context.CommandContext get ( org.ovirt.engine.core.compat.Guid commandId ) { initializeCache ( ) ; return contextsMap.get ( commandId ) ; }
public org.ovirt.engine.ui.uicommonweb.UICommand getEnableGlobalHaMaintenanceCommand ( ) { return privateEnableGlobalHaMaintenanceCommand ; }
public java.lang.String getPmSecondaryType ( ) { return mVdsStatic.getPmSecondaryType ( ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.Network ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public final < T extends java.lang.Enum < T > > void addField ( java.lang.Iterable < T > statuses , java.lang.String fieldName ) { for ( T status : statuses ) { addField ( status , fieldName ) ; } }
public static void initLoggedInUser ( org.ovirt.engine.core.common.businessentities.DbUser loggedUser , java.lang.String loginPassword ) { org.ovirt.engine.ui.frontend.Frontend.loggedUser = loggedUser ; org.ovirt.engine.ui.frontend.Frontend.loginPassword = loginPassword ; }
public static void addPermission ( org.ovirt.engine.core.common.businessentities.Permission ... permissions ) { for ( org.ovirt.engine.core.common.businessentities.Permission perms : permissions ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.getPermissionDao ( ) . save ( perms ) ; } }
public void lowerVersionMgmtNetworkNonSupportedFeatures ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addManagementNetworksToPool ( 2 ) ; setupNetworkValidator ( false ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public void testDataCenterLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter ( ) ; dataCenter.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.DATA_CENTER_ID ) ; org.ovirt.engine.api.utils.LinkHelper.addLinks ( setUpUriExpectations ( ) , dataCenter ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.DATA_CENTER_HREF , dataCenter.getHref ( ) ) ; }
public void testGetVmDeviceByVmIdTypeAndDeviceFilteringWithPermissionsNoFiltering ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = dao.getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID , VmDeviceGeneralType.DISK , "disk" , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , false ) ; org.ovirt.engine.core.dao.VmDeviceDAOTest.assertGetVMDeviceByIdTypeAndDeviceFullResult ( devices ) ; }
public void getUsbTypeEnabledNative ( ) { org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.utils.UsbMapperUtils.getUsbType ( usbPolicy ) , UsbType.NATIVE ) ; }
protected org.ovirt.engine.core.dao.network.HostNetworkQosDao getQosDao ( ) { return dbFacade.getHostNetworkQosDao ( ) ; }
public void setComment ( java.lang.String value ) { comment = ( value == null ) ? "" : value ; }
public void testReturnsV4WhenGivenValidV4Address ( ) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip ( ) ; ip.setAddress ( "127.0.0.1" ) ; org.ovirt.engine.api.model.IpVersion version = org.ovirt.engine.api.restapi.types.IpHelper.getVersion ( ip ) ; org.junit.jupiter.api.Assertions.assertEquals ( IpVersion.V4 , version ) ; }
public void shouldDetectZeroHostNodes ( ) { vdsNumaNodes.clear ( ) ; assertValidationFailure ( underTest.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) , EngineMessage.VM_NUMA_PINNED_VDS_NODE_EMPTY ) ; }
public void tearDown ( ) { org.powermock.api.easymock.PowerMock.verifyAll ( ) ; org.ovirt.engine.api.common.invocation.CurrentManager.remove ( ) ; }
java.util.Map < java.lang.String , java.lang.String > allocate ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile , org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.businessentities.VDS host , boolean ignoreSecurityGroups ) ;
public java.lang.Object put ( java.lang.Object key , java.lang.Object value ) { if ( containsKey ( key ) ) { throw new org.ovirt.engine.core.utils.DuplicatePropertyException ( ( ( "The key " + key ) + " already exists" ) ) ; } return super . put ( key , value ) ; }
public boolean isUseHostCpuFlags ( ) { return useHostCpuFlags ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getMonitoredTaskIDsInDB ( ) { return stepDao.getExternalIdsForRunningSteps ( ExternalSystemType.GLUSTER ) ; }
protected void endMoveOrCopyCommand ( ) { endActionOnAllImageGroups ( ) ; endVmTemplateRelatedOps ( ) ; org.ovirt.engine.core.bll.exportimport.MoveOrCopyTemplateCommand.setSucceeded ( true ) ; }
public void setVdsGroupCpuName ( java.lang.String value ) { this . vdsGroupCpuName = value ; }
public void vdsIdDefault ( ) { final org.ovirt.engine.core.compat.Guid g = b.getVdsId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( Guid.Empty , g ) ; }
public void setRngPeriod ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NotChangableForVmInPoolEntityModel < java.lang.Integer > rngPeriod ) { this . rngPeriod = rngPeriod ; }
protected javax.ws.rs.core.UriInfo setUpRestoreExpectations ( ) { return setUpActionExpectations ( VdcActionType.RestoreAllSnapshots , org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters.class , new java.lang.String [ ] { "VmId" , "SnapshotAction" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.VM_ID , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT } , true , true , null , false ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel asUserPortalItem ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalConsolePopupModel model ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel ) ( model.getModel ( ) . getSelectedItem ( ) ) ) ; }
protected void setDiskAttributes ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , com.woorea.openstack.glance.model.Image glanceImage ) { setImageVirtualSizeAndCompat ( diskImage , glanceImage ) ; diskImage.setActualSizeInBytes ( glanceImage.getSize ( ) ) ; }
private boolean isIsoFileValid ( java.lang.String isoFile ) { return ( org.apache.commons.lang.StringUtils.isNotBlank ( isoFile ) ) && ( org.ovirt.engine.core.utils.FileUtil.fileExists ( ( ( ( org.ovirt.engine.core.common.config.Config.resolveOVirtISOsRepositoryPath ( ) ) + ( java.io.File.separator ) ) + isoFile ) ) ) ; }
public void setDomain ( java.lang.String value ) { domain = ( value == null ) ? "" : value ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterHooksResourceTest.setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class ) , index ) ; }
public java.util.Map < K , V > convert ( java.lang.Object source ) { return source != null ? ( ( java.util.Map < K , V > ) ( source ) ) : new java.util.HashMap < K , V > ( ) ; }
private void setVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { cmd.setGlusterVolumeId ( volumeId ) ; cmd.getParameters ( ) . setBricks ( getBricks ( volumeId ) ) ; }
protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public void testdefaultVersionedValue ( ) { org.junit.jupiter.api.Assertions.assertEquals ( 1024 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 888 , Version.v4_0 ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Permission , org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileListModel , org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.profile.SubTabVnicProfilePermissionPresenter.constants.vnicProfilePermissionSubTabLabel ( ) , 2 , modelProvider ) ; }
private java.lang.Integer getApplicationMode ( javax.servlet.http.HttpServletRequest request ) { return ( ( java.lang.Integer ) ( runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) , request ) ) ) ; }
boolean scheduleNextTimeToRun ( java.util.Date timeToRunTheVm ) { this . timeToRunTheVm = timeToRunTheVm ; return ( ++ ( numOfRuns ) ) < ( org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart.MAXIMUM_NUM_OF_TRIES_TO_AUTO_START_VM ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { return ( java.lang.String.valueOf ( object.getSizeInGigabytes ( ) ) ) + " GB" ; }
public void testRemoveWithParam ( ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE ) ; container.removeSessionOnLogout ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.jupiter.api.Assertions.assertNull ( container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) , "Get should return null since the session was removed" ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . Execute ( ) ; UpdateIsDiskHotPlugAvailable ( ) ; UpdateLiveStorageMigrationEnabled ( ) ; } UpdateActionAvailability ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getId ( ) . toString ( ) ; }
public void getVmChangedFieldsForNextRun ( org.ovirt.engine.core.common.businessentities.VM original , org.ovirt.engine.core.common.businessentities.VM updated , org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParameters , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmChangedFieldsForNextRun , new org.ovirt.engine.core.common.queries.GetVmChangedFieldsForNextRunParameters ( original , updated , updateVmParameters ) , aQuery ) ; }
private boolean isGlusterNetworkInUse ( ) { return ! ( glusterBrickDao.getAllByClusterAndNetworkId ( oldNetworkCluster.getClusterId ( ) , oldNetworkCluster.getNetworkId ( ) ) . isEmpty ( ) ) ; }
public void hideAndUnbind ( ) { super . hideAndUnbind ( ) ; model = null ; if ( ( org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getActivePopupCount ( ) ) == 0 ) { cleanupPopupResources ( ) ; } }
private void assertCorrectGetResult ( org.ovirt.engine.core.common.businessentities.VDS result ) { org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingVds , result ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ActivateVdsCommand.getParameters ( ) . getVdsId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VDS , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void setLdapServers ( java.util.List < java.net.URI > ldapServersURIs ) { lock.writeLock ( ) . lock ( ) ; try { this . ldapServers = ldapServersURIs ; } finally { lock.writeLock ( ) . unlock ( ) ; } }
public void getAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( java.lang.Boolean.TRUE ) ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void execute ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine ( ( ( this . getClass ( ) . getName ( ) ) + ": Executing search" ) ) ; syncSearch ( ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getDbFacade ( ) . getTagDao ( ) . getTagUserMapByTagName ( org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getParameters ( ) . getTagName ( ) ) ) ; }
protected void entityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . entityPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "name" ) ) { getSearchCommand ( ) . execute ( ) ; } }
protected boolean contentOverflows ( com.google.gwt.dom.client.Element parent ) { return ( parent != null ) && ( ( org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow ( parent ) ) || ( org.ovirt.engine.ui.common.utils.ElementUtils.detectVerticalOverflow ( parent ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getVmTemplateId ( ) { return vmTemplateId ; }
public void logout ( final org.ovirt.engine.ui.frontend.communication.UserCallback callback ) { xsrfRequestBuilder.setXsrfToken ( null ) ; org.ovirt.engine.core.common.action.ActionReturnValue retVal = new org.ovirt.engine.core.common.action.ActionReturnValue ( ) ; retVal.setSucceeded ( true ) ; callback.onSuccess ( retVal ) ; }
public static synchronized boolean isIsoDomain ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { org.ovirt.engine.api.model.StorageDomainType type = storageDomain.getStorageDomainType ( ) ; return ( type != null ) && ( type == org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ) ? true : false ; }
public static boolean isVlan ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return ( network.getVlanId ( ) ) != null ; }
protected void verifyModel ( org.ovirt.engine.api.model.Role model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.safehtml.shared.SafeHtml headerHtml , boolean present ) { ensureColumnPresent ( column , new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader ( headerHtml ) , present , null ) ; }
private boolean isReadOnly ( ) { return getProvider ( ) . getAdditionalProperties ( ) . getReadOnly ( ) ; }
public void testUpdate ( ) { existingDynamic.setUsedDiskSize ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.USED_DISK_SIZE ) ; dao.update ( existingDynamic ) ; org.ovirt.engine.core.common.businessentities.StorageDomainDynamic result = dao.get ( existingDynamic.getId ( ) ) ; org.junit.Assert.assertEquals ( existingDynamic , result ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.v3.types.V3MacPool pool ) { return adaptAdd ( getDelegate ( ) :: add , pool ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ( ) ; }
public void testGetAllForVmPools ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllForVmPools ( vmPool.toString ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
private void setWarningStatus ( java.lang.String message ) { statusPanel.setTextAndStyle ( message , style.warningPanel ( ) , style.warningLabel ( ) ) ; }
private void saveNetworksAndLabels ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig entity ) { massNetworksUpdate ( entity.getId ( ) , entity.getNetworks ( ) ) ; massLabelsUpdate ( entity.getId ( ) , entity.getNetworkLabels ( ) ) ; }
public void testIsInternalExecutionFalse ( ) { org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class ) ) ; query.setInternalExecution ( true ) ; query.setInternalExecution ( false ) ; org.junit.Assert.assertFalse ( "Query should not be marked for internal execution" , query.isInternalExecution ( ) ) ; }
public java.lang.String getTagIdAndChildrenIds ( java.lang.String tagName ) { org.ovirt.engine.core.common.businessentities.Tags tag = getTagByName ( tagName ) ; java.lang.StringBuilder sb = tag.getTagIdAndChildrenIds ( ) ; return sb.toString ( ) ; }
public void validateFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( null , getBricks ( volumeWithRemoveBricksTaskCompleted ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void typeMatchesProfileOnlyTypePassthrough ( ) { typeMatchesProfileCommon ( true , false ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void externalNetworkIsNotAVmNetwork ( ) { org.mockito.Mockito.when ( network.isVmNetwork ( ) ) . thenReturn ( false ) ; org.hamcrest.MatcherAssert.assertThat ( validator.externalNetworkIsVmNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; updateOptions ( ( ! ( disks.isEmpty ( ) ) ) ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getDedicatedVmForVdsList ( ) { return vmStatic.getDedicatedVmForVdsList ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingManagementNetwork ( ) { return getNetworkValidator ( ) . notRemovingManagementNetwork ( ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.Provider p1 , org.ovirt.engine.core.common.businessentities.Provider p2 ) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp ( p1.getName ( ) , p2.getName ( ) ) ; }
public void testGetMasterStorageDomainIdForPool ( ) { org.ovirt.engine.core.compat.Guid result = dao.getMasterStorageDomainIdForPool ( new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_DOMAIN_ID , result ) ; }
public void tearDown ( ) { java.util.Locale.setDefault ( locale ) ; control.verify ( ) ; org.ovirt.engine.api.restapi.invocation.CurrentManager.remove ( ) ; }
public void setAcpiEnable ( java.lang.Boolean value ) { this . vmDynamic.setacpi_enable ( value ) ; }
private void attachLabels ( java.lang.String bondName , java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel > labels ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bondModel = nicModelByName.get ( bondName ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachLabels ( bondModel , new java.util.ArrayList ( labels ) , hostSetupNetworksParametersData ) ; }
public void canDoActionFailsOnRemovingEventWithOvirtOrigin ( ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand < org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters > ( new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_2 ) ) ) ; prepareMocks ( command ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; }
protected void ExecuteVdsBrokerCommand ( ) { buildVmData ( ) ; mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker ( ) . create ( createInfo ) ; logCommandInfo ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vm.getDynamicData ( ) , mVmReturn.mVm ) ; }
public boolean hasTasks ( ) { return true ; }
public void doTest ( ) throws java.io.IOException , java.net.URISyntaxException { java.util.List < java.lang.String > errors = org.ovirt.engine.ui.uicompat.GwtMessagesValidator.validateClass ( org.ovirt.engine.ui.userportal.ApplicationMessages.class ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.ui.uicompat.GwtMessagesValidator.format ( errors ) , errors.isEmpty ( ) ) ; }
public void getHostListByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void setAsyncResult ( org.ovirt.engine.ui.frontend.RegistrationResult value ) { if ( ( asyncResult ) != value ) { AsyncResultChanging ( value , asyncResult ) ; asyncResult = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AsyncResult" ) ) ; } }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetPolicyNotSetUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
public void validateEnums ( org.ovirt.engine.api.model.NicConfiguration entity ) { if ( entity != null ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.BootProtocol.class , entity.getBootProtocol ( ) , true ) ; } }
public void getFreeVfNoFreeVf ( ) { freeVfCommon ( 0 , 1 , 2 , 3 , 4 ) ; org.junit.Assert.assertNull ( hostNicVfsConfigHelper.getFreeVf ( nic ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.EditDiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.EditDiskModel ) ( result.getState ( ) ) ) ; diskModel.stopProgress ( ) ; diskModel.cancel ( ) ; }
public void statusSupportedForHostInstallation ( ) { org.mockito.Mockito.when ( oldHost.getStatus ( ) ) . thenReturn ( VDSStatus.Maintenance ) ; validator = createValidatorForHostInstallation ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.statusSupportedForHostInstallation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private java.lang.String getNetworkNameReplacement ( ) { return java.lang.String.format ( "$NetworkName %s" , network.getName ( ) ) ; }
protected void initCustomProperties ( ) { getCustomPropertySheet ( ) . deserialize ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties ( getProfile ( ) . getCustomProperties ( ) ) ) ; }
public void setComment ( java.lang.String value ) { this . vmStatic.setComment ( value ) ; }
public void onUserLoginChange ( org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event ) { if ( ! ( user.isLoggedIn ( ) ) ) { getModel ( ) . ensureAsyncSearchStopped ( ) ; } }
public void getIdByTypeAndStatusReturnsNullForNonExistingVm ( ) throws java.lang.Exception { org.junit.Assert.assertNull ( dao.getId ( Guid.Empty , SnapshotType.REGULAR , SnapshotStatus.OK ) ) ; }
public void testAttachFailDomainTypeIncorrect ( ) { storageDomain.setStorageType ( StorageType.LOCALFS ) ; org.ovirt.engine.core.bll.ValidationResult attachIncorrectTypeResult = validator.validateDomainCanBeAttachedToPool ( ) ; org.junit.Assert.assertFalse ( "Attaching domain with an incorrect type succeeded while it should have failed" , attachIncorrectTypeResult.isValid ( ) ) ; assertFailingMessage ( "Attaching domain with an incorrect type failed with the wrong message" , attachIncorrectTypeResult , EngineMessage.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH ) ; }
public java.lang.String GetTagIdAndChildrenIds ( org.ovirt.engine.core.compat.Guid tagId ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagIdAndChildrenIds ( tagId ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.RestartVdsCommand.createFenceExclusiveLocksMap ( org.ovirt.engine.core.bll.RestartVdsCommand.getVdsId ( ) ) ; }
public void setInitrdUrl ( java.lang.String value ) { vmStatic.setInitrdUrl ( value ) ; }
public void testIsNetworkInSyncWhenIfaceQosIsNull ( ) { iface.setQos ( null ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void initDestStorageDomain ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; destDomain.setStorageType ( storageType ) ; destDomain.setStatus ( StorageDomainStatus.Active ) ; org.mockito.Mockito.doReturn ( destDomain ) . when ( command ) . getStorageDomain ( ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present , java.lang.String width ) { ensureColumnPresent ( column , com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( headerText ) , present , width ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetAffinityGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , null , failure ) ; }
public void testUpdate ( ) { existingDomain.setstorage_name ( "UpdatedName" ) ; dao.update ( existingDomain ) ; org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get ( existingDomain.getId ( ) ) ; org.junit.Assert.assertEquals ( after , existingDomain ) ; }
public void canCreateAsMuchNumaNodesAsVirtualCores ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 4 ) ; org.assertj.core.api.Assertions.assertThat ( command.canDoAction ( ) ) . isTrue ( ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient createClient ( org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor , java.nio.channels.Selector selector , java.lang.String hostname , int port ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { return new org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient ( reactor , selector , hostname , port , this . sslContext ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.Disk selectedItem ) { driver.edit ( getDetailModel ( ) ) ; formBuilder.showForm ( getDetailModel ( ) ) ; }
public void setTemplate ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( template , value ) ) ) { template = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Template" ) ) ; } }
public static org.ovirt.engine.core.compat.Guid createGuidFromString ( java.lang.String candidate ) { return org.ovirt.engine.core.compat.Guid.createGuidFromStringWithDefault ( candidate , null ) ; }
public void validateVmMemoryCantStartOnVdsBecauseOfPending ( ) { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance ( ) . hasPhysMemoryToRunVM ( vds , vm , 65 ) ; org.junit.Assert.assertFalse ( vmPassedMemoryRequirement ) ; }
boolean canUpdateField ( java.lang.Object obj , java.lang.String fieldName , java.lang.Enum < ? > status ) ;
private void handleException ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e , java.lang.String reason ) { setVdsRuntimeError ( e ) ; final java.lang.String msg = java.lang.String.format ( "Failed to poll host %s - %s." , org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters ( ) . getVdsId ( ) , reason ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug ( msg , e ) ; }
public void testExecuteQueryWithFilteringLUNsDisabled ( ) { lunsExpected = lunsInput ; internalExecuteQuery ( ) ; }
public void setCommandStatus ( org.ovirt.engine.core.compat.CommandStatus status ) { childCmdEntity.setCommandStatus ( status ) ; }
public void shouldDetectDuplicateNodeIndex ( ) { vmNumaNodes.get ( 0 ) . setIndex ( 1 ) ; vmNumaNodes.get ( 1 ) . setIndex ( 1 ) ; assertValidationFailure ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) , EngineMessage.VM_NUMA_NODE_INDEX_DUPLICATE ) ; }
public void parseLunReturnsUnknownForNoField ( ) { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLun ( xlun , Version.v4_1 ) ; org.junit.jupiter.api.Assertions.assertEquals ( StorageType.UNKNOWN , lun.getLunType ( ) ) ; }
protected void endWithFailure ( ) { updateOldImageActive ( SnapshotType.ACTIVE , true ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.UndoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.setSucceeded ( true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getDetailModel ( ) . getEditPolicyCommand ( ) . Execute ( java.lang.Boolean.TRUE ) ; }
public void checkExecuteCommandWithNullVdsId ( ) { parameters.setStorageServerConnection ( org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommandTest.NFSConnection ) ; parameters.setVdsId ( null ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.never ( ) ) . disconnectStorage ( ) ; }
private final org.ovirt.engine.core.common.interfaces.IVdcUser initUser ( ) { return org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . addUserToThreadContext ( parameters.getSessionId ( ) , parameters.getRefresh ( ) ) ; }
public void validateFailureOnCopyingCinderDisk ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; command.init ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void copyKeysDataTo ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.row11Struct other ) { other.var_name = this . var_name ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData ) { org.ovirt.engine.core.common.businessentities.ArchitectureType clusterArch = registerVmData.getVm ( ) . getClusterArch ( ) ; return java.lang.String.valueOf ( clusterArch ) ; }
private void refreshHostStorage ( org.ovirt.engine.core.compat.Guid hostId ) { getBackendCollection ( VdcQueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( hostId , org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI ) ) ; }
public void setEndProcedure ( org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure endProcedure ) { this . endProcedure = endProcedure ; }
public java.lang.String getIsoPath ( ) { return vmStatic.getIsoPath ( ) ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.StorageDomain source ) { return name.equals ( source.getStorageName ( ) ) ; }
public void nullNetworkWhenNoPortMirroring ( ) throws java.lang.Exception { portMirroringTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , null , false ) ; }
public boolean getHasVdssForSpmSelection ( ) { return ( getPrioritizedVdsInPool ( ) . size ( ) ) > 0 ; }
public void checkMissingPrimaryIpv6Address ( ) { initIpConfiguration ( ) ; initIpv4ConfigurationDetails ( Ipv4BootProtocol.DHCP , false , false ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void addToHistoryOneLimit ( ) { org.junit.jupiter.api.Assertions.assertEquals ( java.util.Collections.singletonList ( 13 ) , statistics.addToHistory ( java.util.Arrays.asList ( 9 , 10 , 11 , 12 ) , 13 , 1 ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos createHostNetworkQos ( int outAverageRealtime , int outAverageUpperlimit , int outAverageLinkshare ) { org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos qos = new org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos ( ) ; qos.setOutAverageRealtime ( outAverageRealtime ) ; qos.setOutAverageUpperlimit ( outAverageUpperlimit ) ; qos.setOutAverageLinkshare ( outAverageLinkshare ) ; return qos ; }
protected org.ovirt.engine.api.model.GraphicsConsole addParents ( org.ovirt.engine.api.model.GraphicsConsole model ) { model.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; model.getVm ( ) . setId ( getGuid ( ) . toString ( ) ) ; return model ; }
public void setGuestID ( java.lang.String value ) { guestID = value ; }
protected void setUpGetEntityExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetTasksStatusesByTasksIDs , org.ovirt.engine.core.common.queries.GetTasksStatusesByTasksIDsParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , getTaskStatuses ( ) ) ; }
public static void addDiskToVmIfNotExists ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { if ( ! ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getBaseDiskDao ( ) . exists ( disk.getId ( ) ) ) ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskToVm ( disk , vmId ) ; } }
public void testGetFilteredByPermissionsForUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > result = dao.getAllForCluster ( FixturesTool.CLUSTER_RHEL6_ISCSI , org.ovirt.engine.core.dao.profiles.UNPRIVILEGED_USER_ID , true , ActionGroup.ASSIGN_CPU_PROFILE ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
protected void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { org.ovirt.engine.core.common.businessentities.AuditLog al = new org.ovirt.engine.core.common.businessentities.AuditLog ( ) ; al.setLogType ( logType ) ; mockAuditLogDao.save ( al ) ; }
public void testGetMessageDefaultLocale ( ) { java.lang.String testKey = "obrand.common.main_header_label" ; java.lang.String result = testManager.getMessage ( testKey ) ; org.junit.jupiter.api.Assertions.assertEquals ( "Main header" , result , "The result should be 'Main header'" ) ; }
public boolean isEnabled ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel : getNetworksTableItems ( ) ) { if ( canEditRequired ( clusterNetworkModel ) ) { return true ; } } return false ; }
public java.util.List < java.lang.String > allocateMacAddresses ( int numberOfAddresses ) { java.util.List < java.lang.Long > macs = macsStorage.allocateAvailableMacs ( numberOfAddresses ) ; java.util.Collections.sort ( macs ) ; logWhenMacPoolIsEmpty ( ) ; return org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings ( macs ) ; }
public void setAttachedTagsToEntities ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > value ) { if ( ( attachedTagsToEntities ) != value ) { attachedTagsToEntities = value ; attachedTagsToEntitiesChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AttachedTagsToEntities" ) ) ; } }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getCACertificate ( ) { return backend.runInternalQuery ( QueryType.GetCACertificate , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmType getVmType ( ) { return this . vmStatic.getvm_type ( ) ; }
public void enableCifs ( ) { accessProtocols.add ( AccessProtocol.CIFS ) ; setOption ( GlusterConstants.OPTION_USER_CIFS , GlusterConstants.ON ) ; }
java.lang.String getRefreshRateItemKey ( ) { return ( ( org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.GRID_REFRESH_RATE_PREFIX ) + "_" ) + ( controller.getId ( ) ) ; }
private int getActiveUsersStat ( ) { return systemStatisticsDao.getSystemStatisticsValue ( org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ENTITY_NAME , org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ACTIVE_STATUS ) ; }
private void validateIconParameters ( org.ovirt.engine.api.model.VM vm ) { if ( ! ( org.ovirt.engine.api.restapi.util.IconHelper.validateIconParameters ( vm ) ) ) { throw new org.ovirt.engine.api.restapi.resource.BaseBackendResource.WebFaultException ( null , localize ( Messages.INVALID_ICON_PARAMETERS ) , Response.Status.BAD_REQUEST ) ; } }
public static org.ovirt.engine.api.model.IpVersion map ( org.ovirt.engine.api.model.IpVersion model ) { switch ( model ) { case V4 : return org.ovirt.engine.api.model.IpVersion.IPV4 ; case V6 : return org.ovirt.engine.api.model.IpVersion.IPV6 ; default : throw new java.lang.IllegalArgumentException ( ( ( "Unknown IP version \"" + model ) + "\"" ) ) ; } }
public boolean syncDomainInfo ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase ( storageDomain.getId ( ) ) ; parameters.setVdsId ( vdsId ) ; return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SyncLunsInfoForBlockStorageDomain , parameters ) . getSucceeded ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult managementNetworkUnset ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_UNSET ) . when ( ( ( oldNetworkCluster.isManagement ( ) ) && ( ! ( networkCluster.isManagement ( ) ) ) ) ) ; }
public void validateFailsWithInvalidBricks ( ) { cmd.setGlusterVolumeId ( volumeWithRemoveBricksTask ) ; cmd.getParameters ( ) . setBricks ( getInvalidBricks ( volumeWithRemoveBricksTask ) ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testNetworkCanBeAttached ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; java.lang.String networkName = "networkName" ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . networkCanBeAttached ( networkName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void getEngineSshPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.String > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.StringConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetEngineSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getRngDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return vmDeviceDao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.RNG ) ; }
public void testEmptyGetAllForDiskProfiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForDiskProfiles ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties ( org.ovirt.engine.core.common.action.LockProperties lockProperties ) { return lockProperties ; }
public org.ovirt.engine.ui.common.widget.form.FormItem withDefaultValue ( java.lang.String defaultValue , org.ovirt.engine.ui.common.widget.form.FormItem.DefaultValueCondition defaultValueCondition ) { this . defaultValueLabel = new org.ovirt.engine.ui.common.widget.label.StringValueLabel ( defaultValue ) ; this . defaultValueCondition = defaultValueCondition ; return this ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { updateDataCenterVersion ( ) ; getSearchCommand ( ) . execute ( ) ; updateIsDiskHotPlugAvailable ( ) ; updateLiveStorageMigrationEnabled ( ) ; } updateActionAvailability ( ) ; }
public void execute ( ) { lockInteractionManager.showLoadingIndicator ( ) ; getLoginModel ( ) . autoLogin ( vdcUser ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > getAll ( ) { return getAll ( null , false ) ; }
public void internalActiveDisallowed ( ) { testInternalExecution ( StorageDomainStatus.Active ) ; testActionDisallowed ( ) ; }
public void setSearchString ( java.lang.String value ) { if ( ! ( java.util.Objects.equals ( searchString , value ) ) ) { searchString = value ; pagingSearchString = null ; searchStringChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > getProviderComputeResource ( org.ovirt.engine.core.common.businessentities.Provider hostProvider ) { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = providerProxyFactory.create ( hostProvider ) ; return proxy.getComputeResources ( ) ; }
public static org.ovirt.engine.ui.frontend.FrontendLoginHandler getLoginHandler ( ) { return org.ovirt.engine.ui.frontend.Frontend.loginHandler ; }
public void updateCommandData ( final org.ovirt.engine.core.compat.Guid commandId , final java.util.Map < java.lang.String , java.io.Serializable > data ) { commandsRepository.updateCommandData ( commandId , data ) ; }
public java.lang.String getFirstMetadataDevice ( ) { return getStorageStaticData ( ) . getFirstMetadataDevice ( ) ; }
public void calculateNetworkImplementationDetailsManagedNetwork ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertManaged ( iface , true , createNetwork ( iface.getNetworkName ( ) , iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) ) ) ; }
public void init ( ) { init ( new org.codehaus.jackson.map.ObjectMapper ( ) , new org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager ( ) ) ; }
public void testGetAllForConnectionWithInvalidConnection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForConnection ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
protected boolean canPerformDiskHotPlug ( org.ovirt.engine.core.common.businessentities.Disk disk ) { return ( isHotPlugSupported ( ) ) && ( isDiskSupportedForPlugUnPlug ( disk ) ) ; }
public void execute ( ) { sourceListModel.setWindow ( null ) ; sourceListModel.search ( ) ; }
public void numOfVfsValidLessThanMax ( ) { numOfVfsInRangeTest ( org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS , ( ( org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS ) + 1 ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.nicSriovEnabled ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; setUpGetEntityExpectations ( true ) ; }
public void testGetMasterStorageDomainIdForPool ( ) { org.ovirt.engine.core.compat.Guid result = dao.getMasterStorageDomainIdForPool ( FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 , result ) ; }
public boolean isBalloonEnabled ( int osId , org.ovirt.engine.core.compat.Version version ) ;
private void updateItemsAvailability ( ) { if ( ( getItems ( ) ) == null ) { return ; } behavior.updateItemsAvailability ( ) ; }
public void clearErrorMessage ( ) { setErrorMessageHtml ( null ) ; tooltipPanel.hide ( ) ; }
public void setSpicePluginImplEnabled ( boolean enabled , java.lang.String reason ) { spicePluginImplRadioButton.setEnabled ( enabled ) ; if ( ! enabled ) { spicePluginImplRadioButtonTooltip.setText ( reason ) ; } }
public synchronized boolean entityHasTasks ( org.ovirt.engine.core.compat.Guid id ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( isCurrentTaskLookedFor ( id , task ) ) { return true ; } } return false ; }
public java.lang.String getPrincipalName ( java.lang.String sessionId ) { java.lang.String principal = null ; org.ovirt.engine.api.extensions.ExtMap authRecord = getAuthRecord ( sessionId ) ; if ( authRecord != null ) { principal = authRecord.< java.lang.String > get ( Authn.AuthRecord.PRINCIPAL ) ; } return principal ; }
public void setUsedDiskSize ( java.lang.Integer usedDiskSize ) { getStorageDynamicData ( ) . setused_disk_size ( usedDiskSize ) ; UpdateTotalDiskSize ( ) ; }
public void testGetAllForStoragePoolWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getDisksBasedOnImage ( ) { if ( ( disksImages ) == null ) { disksImages = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getDiskMap ( ) . values ( ) , true , false ) ; } return disksImages ; }
public org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource getParent ( ) { return parent ; }
public void canOnlyDoWithPinnedToHostPolicy ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb ( ) ; vm.setMigrationSupport ( MigrationSupport.MIGRATABLE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_NOT_PINNED_TO_HOST ) ; }
public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.ServiceInfo entity ) { if ( ( entity.getPort ( ) ) > 0 ) { return java.lang.String.valueOf ( entity.getPort ( ) ) ; } else { return constants.notAvailableLabel ( ) ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.mockito.Mockito.doReturn ( "config" ) . when ( getQuery ( ) ) . generateOvfConfig ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public void upperlimitLowerThanRealTime ( ) { mockQos ( generateValue ( ) , org.ovirt.engine.core.bll.validator.HostNetworkQosValidatorTest.LOW_BANDWIDTH , org.ovirt.engine.core.bll.validator.HostNetworkQosValidatorTest.HIGH_BANDWIDTH ) ; consistentValuesTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INCONSISTENT_VALUES ) ) ; }
public void initTable ( ) { getTable ( ) . enableColumnResizing ( ) ; addGeneralTypeColumn ( ) ; addDeviceTypeColumn ( ) ; addAddressColumn ( ) ; addReadOnlyColumn ( ) ; addPluggedColumn ( ) ; addManagedColumn ( ) ; addSpecParamsColumn ( ) ; addHotUnplugColumn ( ) ; }
public void testCDAStoragePoolHasTasks ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > tasks = java.util.Arrays.asList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.doReturn ( tasks ) . when ( asyncTaskDaoMock ) . getAsyncTaskIdsByStoragePoolId ( storagePoolId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( "validate did not fail on a Storage Pool with running tasks" , command , EngineMessage.CANNOT_FORCE_SELECT_SPM_STORAGE_POOL_HAS_RUNNING_TASKS ) ; }
public void setRunOnVds ( org.ovirt.engine.core.compat.NGuid value ) { this . vmDynamic.setrun_on_vds ( value ) ; }
public void validateNonExternalStepFails ( ) { parameters.setJobId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.jobId ) ; parameters.setId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.nonExternalStepId ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( command.validate ( ) ) ) ) ; }
public static void setUpClass ( ) { try { org.ovirt.engine.core.config.EngineConfigPropertiesTest.pc = new org.apache.commons.configuration.PropertiesConfiguration ( org.ovirt.engine.core.config.EngineConfigPropertiesTest.PROPERTIES_PATH ) ; } catch ( org.apache.commons.configuration.ConfigurationException e ) { org.junit.jupiter.api.Assertions.fail ( java.lang.String.format ( ( "Failed to load configuration from the engine-config.properties.production.file " + "environment variable set to %s." ) , org.ovirt.engine.core.config.EngineConfigPropertiesTest.PROPERTIES_PATH ) ) ; } }
public void testLogReturnDoesntLogWhenNoAnnotation ( ) throws java.lang.Exception { org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logReturn ( log , "" , new java.lang.Object ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito.verifyZeroInteractions ( log ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getDiskImageDao ( ) . get ( org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getImageId ( ) ) ) ) ; } return disk ; }
public int getVmtCpuPerSocket ( ) { return this . vmtCpuPerSocket ; }
public void getClusterIdDefault ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.compat.Guid g = b.getClusterId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , g ) ; }
protected boolean canDoAction ( ) { return ( validate ( networkClusterAttachmentExists ( ) ) ) && ( org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.validateAttachment ( ) ) ; }
public java.lang.String getType ( ) { return this . type ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password , java.util.List < java.lang.String > vmsNames ) ;
protected java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { return getBackend ( ) . runInternalMultipleActions ( actionType , parameters , context.clone ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; }
public long getDbGeneration ( ) { return vmStatic.getDbGeneration ( ) ; }
public void putEvent ( org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event ) { try ( org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper ( this . lock ) ) { this . events.addFirst ( event ) ; } }
private org.ovirt.engine.core.common.businessentities.VDSGroup getVDsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setId ( clusterId ) ; vdsGroup.setVirtService ( false ) ; vdsGroup.setGlusterService ( true ) ; vdsGroup.setCompatibilityVersion ( Version.v3_1 ) ; return vdsGroup ; }
public void setName ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( name , value ) ) ) { name = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Name" ) ) ; } }
private boolean isRoleSet ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { final org.ovirt.engine.core.common.businessentities.network.NetworkCluster originalNetworkCluster = clusterNetworkModel.getOriginalNetworkCluster ( ) ; return ( originalNetworkCluster != null ) && ( isRoleSet ( originalNetworkCluster ) ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permission > perms = permissionDao.getAllForEntity ( MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID ) ; org.ovirt.engine.core.bll.GetSystemPermissionsQuery.getQueryReturnValue ( ) . setReturnValue ( perms ) ; }
java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllValidationPass , boolean waitForResult ) ;
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDaoReturnVmTemplate ( ) ; mockDiskImageDaoGetSnapshotById ( ) ; mockStorageDomainDaoGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDaoGet ( domainSizeGB ) ; mockConfig ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; return vm ; }
public void testFindDefaultManagementNetworkNotFound ( ) { final org.ovirt.engine.core.common.businessentities.network.Network actual = underTest.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ; org.junit.jupiter.api.Assertions.assertNull ( actual ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext internalCommandContext ) { return getBackend ( ) . runInternalAction ( actionType , parameters , internalCommandContext ) ; }
protected void removeAllInBatch ( java.lang.String procedureName , java.util.Collection < T > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < T > mapper ) { org.ovirt.engine.core.dao.MassOperationsGenericDao.getCallsHandler ( ) . executeStoredProcAsBatch ( ( procedureName == null ? org.ovirt.engine.core.dao.MassOperationsGenericDao.getProcedureNameForRemove ( ) : procedureName ) , paramValues , mapper ) ; }
public void finished ( org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel frontendModel , org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel backendModel ) { org.hamcrest.MatcherAssert.assertThat ( frontendModel , org.hamcrest.core.Is.is ( org.hamcrest.core.IsEqual.equalTo ( new org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel ( prop1 , prop2 ) ) ) ) ; }
public void dataCenterExists ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( validator.dataCenterExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void nullNetworkNameWhenUnlinkingSupported ( ) throws java.lang.Exception { networkNameTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , null ) ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.getPredicate ( memoryDisks ) . eval ( storageDomain ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { return new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . addActiveSnapshot ( snapshotId , getVm ( ) , getCompensationContext ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturn getQemuImageInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) ;
protected java.util.List < ? extends org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainFilter > getStorageDomainFilters ( ) { return java.util.Arrays.asList ( new org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainStatusFilter ( ) , new org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainTypeFilter ( ) , new org.ovirt.engine.core.bll.memory.sdfilters.StorageDomainSpaceRequirementsFilter ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( ) { if ( ( storageDomain ) == null ) { storageDomain = getDbFacade ( ) . getStorageDomainDao ( ) . get ( getProfile ( ) . getStorageDomainId ( ) ) ; } return storageDomain ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createNic ( java.lang.String nicName , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , nicName , false , null , null , networkName , true , null ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.storage.DiskLunMap entity ) { return createIdParameterMapper ( entity.getId ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.importAllocationModifiedCollapse ( ) ) ; }
public void testBadGuid ( ) { try { new org.ovirt.engine.api.restapi.resource.BackendPermissionResource ( "foo" , null , null , null ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void updateVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { setVolumeFormat ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDiskVolumeFormat ( volumeType , storageType ) ) ; }
public void testUpdateFieldsQutoaDefault ( ) { vm.setIsQuotaDefault ( true ) ; vmStatic.setIsQuotaDefault ( false ) ; junit.framework.Assert.assertTrue ( "Quota default should be updatable" , command.areUpdatedFieldsLegal ( ) ) ; }
public static boolean hasMemoryBalloon ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao.isMemBalloonEnabled ( vmId ) ; }
public void testSelfMapper ( ) { org.ovirt.engine.api.restapi.types.Mapper < org.ovirt.engine.api.restapi.test.mappers.api.IFoo , org.ovirt.engine.api.restapi.test.mappers.api.IFoo > mapper = mappingLocator.getMapper ( org.ovirt.engine.api.restapi.test.mappers.api.IFoo.class , org.ovirt.engine.api.restapi.test.mappers.api.IFoo.class ) ; org.junit.jupiter.api.Assertions.assertNull ( mapper ) ; }
public int getmaster_domain_version ( ) { return masterDomainVersion ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) ;
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext internalCommandContext ) { return getBackend ( ) . runInternalAction ( actionType , parameters , internalCommandContext ) ; }
private void setUpGetEntityExpectations ( ) { setUpEntityQueryExpectations ( VdcQueryType.GetAllDisksByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { PARENT_ID } , getEntityList ( ) ) ; }
public static void updateAllDiskImageSnapshotsStatusWithCompensation ( final org.ovirt.engine.core.compat.Guid diskId , final org.ovirt.engine.core.common.businessentities.storage.ImageStatus status , org.ovirt.engine.core.common.businessentities.storage.ImageStatus statusForCompensation , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( java.util.Collections.singletonList ( diskId ) , status , statusForCompensation , compensationContext ) ; }
private static org.ovirt.engine.core.bll.ValidationResult createSnapshotExistsResult ( boolean snapshotExists ) { return snapshotExists ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
public Boot.DevicesList createBootDevicesList ( ) { return new org.ovirt.engine.sdk.entities.Boot.DevicesList ( ) ; }
private void cloudInitPasswordSetChanged ( ) { java.lang.Boolean passwordChangable = ! ( getCloudInitPasswordSet ( ) . getEntity ( ) ) ; getCloudInitRootPassword ( ) . setIsChangable ( passwordChangable ) ; getCloudInitRootPasswordVerification ( ) . setIsChangable ( passwordChangable ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory , boolean frozen ) ;
private boolean needToUpdateMissingNicIds ( ) { for ( org.ovirt.engine.core.common.businessentities.network.NicLabel addedLabel : addedLabels ) { if ( ( addedLabel.getNicId ( ) ) == null ) { return true ; } } return false ; }
public void testIsNetworkInSyncWhenIpv4GatewayBothNull ( ) { initIpv4ConfigurationStaticBootProtocol ( Ipv4BootProtocol.STATIC_IP ) ; ipv4Address.setGateway ( null ) ; iface.setIpv4Gateway ( null ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( result.getState ( ) ) ) ; dataCenterGuideModel.removeConnection = false ; dataCenterGuideModel.onFinish ( dataCenterGuideModel.context , true , dataCenterGuideModel.storageModel ) ; }
public void setHeader ( com.google.gwt.user.client.ui.Widget widget ) { widget.addStyleName ( style.headerTitleFloat ( ) ) ; headerTitlePanel.insert ( widget , 0 ) ; }
public void testGetAllForRoleAndAdElementAndObjectWithInvalidRole ( ) { org.ovirt.engine.core.common.businessentities.Permission result = dao.getForRoleAndAdElementAndObject ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.PermissionDaoTest.AD_ELEMENT_ID , org.ovirt.engine.core.dao.PermissionDaoTest.VM_ENTITY_ID ) ; org.junit.jupiter.api.Assertions.assertNull ( result ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__RESTART ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { Test ( ) ; }
private java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.api.model.Disk > queryVmDisksMap ( org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < org.ovirt.engine.api.model.Disk > vmDisks = getBackendCollection ( org.ovirt.engine.api.model.Disk.class , QueryType.GetAllDisksByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) ; return org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( vmDisks ) ; }
public void setVmtMemSizeMb ( int value ) { this . vmtMemSizeMb = value ; }
public void updateVolumeStatus ( org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterVolumeStatus" , createVolumeIdParams ( volumeId ) . addValue ( "status" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( status ) ) ) ; }
protected org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return runConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( vm.getQuotaId ( ) , vm.getQuotaName ( ) ) ; updateCpuPinningVisibility ( ) ; initNetworkInterfaces ( ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork vfsConfigNetwork : getNetworksTableItems ( ) ) { if ( ! ( vfsConfigNetwork.isAttachedViaLabel ( ) ) ) { vfsConfigNetwork.setAttached ( value ) ; } } refreshNetworksTable ( ) ; }
public java.lang.Object getConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , getDefaultConfigurationVersion ( ) ) ; return cachedConfigValuesPreConvert.get ( key ) ; }
org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType , org.ovirt.engine.core.common.vdscommands.VDSParametersBase parameters ) ;
public void testDefaultRouteNonDefaultRouteNetwork ( ) { iface.setIpv4DefaultRoute ( true ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; org.junit.Assert.assertThat ( createTestedInstance ( false , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
protected void toggleGhost ( T value , V widget , boolean becomingGhost ) { setButtonsEnabled ( widget , ( ( ! becomingGhost ) && ( enabled ) ) ) ; }
protected void teardown ( ) { org.ovirt.engine.core.bll.pm.StartVdsCommand.runSleepOnReboot ( ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void formatStringTestNotEnoughParams ( ) { testMessages.addFallback ( DynamicMessageKey.APPLICATION_TITLE , "Testing 123: {0}.{1}.{2}" ) ; testMessages.formatString ( DynamicMessageKey.APPLICATION_TITLE , "1.1.1" ) ; org.junit.Assert.fail ( "Should not get here" ) ; }
protected void verifyIfHostExistsToHandle404StatusCode ( ) { org.ovirt.engine.core.compat.Guid hostId = getHostId ( ) ; getEntity ( org.ovirt.engine.core.common.businessentities.VDS.class , QueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , hostId.toString ( ) , true ) ; }
public void testGetAllRunningForVds ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllRunningByVds ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator ( org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getAllStorageIdsForImageIds ( diskImages ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplateGeneralPresenter.constants.templateGeneralSubTabLabel ( ) , 0 ) ; }
protected < T > boolean matchEntity ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity , T id ) { return ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy getClientRetryPolicy ( ) { return this . client.getRetryPolicy ( ) ; }
protected void refreshModel ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; super . syncSearch ( QueryType.GetAllAuditLogsByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ; }
public void testGetAllForAdElementFilteredWithPermissions ( ) { org.junit.Assert.assertNotNull ( privilegedUserSession ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > result = dao.getAllForAdElement ( org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID , privilegedUserSession.getId ( ) , true ) ; org.ovirt.engine.core.dao.PermissionDAOTest.assertValidGetByAdElement ( result ) ; }
private void removeMemoryDisksIfNeeded ( java.lang.String hiberVol ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( hiberVol ) ) { org.ovirt.engine.core.bll.StopVmCommandBase.removeMemoryDisks ( hiberVol ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmPool object ) { return java.lang.Integer.toString ( object.getRunningVmsCount ( ) ) ; }
protected void executeCommand ( ) { registerRollbackHandler ( new org.ovirt.engine.core.bll.RemoveMacPoolCommand.CustomTransactionCompletionListener ( ) ) ; getMacPoolDao ( ) . remove ( getMacPoolId ( ) ) ; poolPerDc.removePool ( getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
private void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.GetVmByVmIdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
private void markHostDevicesAsUsed ( ) { if ( needsHostDevices ) { hostDeviceManager.allocateVmHostDevices ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } }
public org.ovirt.engine.core.common.queries.ValueObjectMap getPmSecondaryOptionsMap ( ) { return mVdsStatic.getPmSecondaryOptionsMap ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesList ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String [ ] serviceNames ) ;
public void testCanDoActionLunDisk ( ) { org.mockito.Mockito.when ( getDiskDao ( ) . get ( getDiskImageGroupId ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void replaceProductKeyEmptyKeyShouldNotRemoveTheWholeSectionForCustomScript ( ) { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey ( sysprepFile , "" , true ) ; org.hamcrest.MatcherAssert.assertThat ( res , org.hamcrest.core.StringContains.containsString ( "<ProductKey>" ) ) ; org.hamcrest.MatcherAssert.assertThat ( res , org.hamcrest.core.StringContains.containsString ( "</ProductKey>" ) ) ; }
public java.lang.String getName ( ) { return vmName ; }
public void setInitialized ( boolean value ) { this . vmStatic.setInitialized ( value ) ; }
public javax.ws.rs.core.Response suspend ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.HibernateVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( guid ) , action ) ; }
public void testIsManagementNetworkNameNullInGivenCluster ( ) throws java.lang.Exception { testIsManagementNetworkNameInGivenClusterCommon ( null , org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_CLUSTER_ID , false ) ; }
private org.ovirt.engine.core.common.action.VdcActionType getSnapshotActionType ( ) { return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . isQualifiedForLiveSnapshotMerge ( ) ? org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDiskLive : org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk ; }
private java.util.Collection < org.ovirt.engine.api.model.DetailedLink > getLinks ( ) { return org.ovirt.engine.api.restapi.util.ApiRootLinksCreator.getLinks ( getUriInfo ( ) ) ; }
public java.lang.Long getSwapFree ( ) { return this . swapFree ; }
public static void getTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected int colorDepthAsInt ( ) { if ( ( getWANColorDepth ( ) ) != null ) { return getWANColorDepth ( ) . asInt ( ) ; } return ConsoleOptions.WanColorDepth.depth16.asInt ( ) ; }
public org.ovirt.engine.core.bll.context.CommandContext cloneContextAndDetachFromParent ( ) { return cloneContext ( ) . withoutCompensationContext ( ) . withoutExecutionContext ( ) . withoutLock ( ) ; }
public org.ovirt.engine.api.model.Statistic setDatum ( org.ovirt.engine.api.model.Statistic statistic , long datum ) { return org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum ( statistic , datum ) ; }
private void mockConfig ( ) { mcr.mockConfigValue ( ConfigValues.PredefinedVMProperties , Version.v3_0 , "" ) ; mcr.mockConfigValue ( ConfigValues.UserDefinedVMProperties , Version.v3_0 , "" ) ; mcr.mockConfigValue ( ConfigValues.InitStorageSparseSizeInGB , 1 ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , diskAlias , diskDescription , propagateErrors , shareable , wipeAfterDelete , sgio , cinderVolumeType , contentType ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId ( ) . toString ( ) , LockMessagesMatchUtil.STORAGE ) ; }
public void testGetVMDefaultConstraint ( ) throws java.lang.Exception { doTestGetDefaultConstraint ( org.ovirt.engine.api.model.Vm.class , "VMs : " ) ; }
public java.lang.Integer getPid ( ) { return this . pid ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > ) ( source ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > ( ) ; }
protected org.ovirt.engine.api.model.HostStorage addParents ( org.ovirt.engine.api.model.HostStorage storage ) { storage.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; storage.getHost ( ) . setId ( hostId ) ; return storage ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { model.getImageSourceLocalEnabled ( ) . setEntity ( true ) ; setSourceVisibility ( model ) ; }
public java.lang.String getSearchString ( ) { return ( searchString ) + ( ( pagingSearchString ) == null ? "" : pagingSearchString ) ; }
public void setSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot value ) { if ( ( snapshot ) != value ) { snapshot = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Snapshot" ) ) ; } }
public void testGetVMsForStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao.getAllForStorageDomainByEntityType ( FixturesTool.STORAGE_DOMAIN_NFS2_1 , VmEntityType.VM ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( ovfEntityDataList.isEmpty ( ) ) ) , "A VM should be fetched for the specified storage domain" ) ; }
public void testIsNetworkInSyncWhenMtuDifferent ( ) { iface.setMtu ( 1 ) ; network.setMtu ( 2 ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public org.ovirt.engine.core.compat.Guid getStoragePoolId ( ) { return hostedEngineVm.getStoragePoolId ( ) ; }
public org.ovirt.engine.api.model.VmPool update ( org.ovirt.engine.api.model.VmPool incoming ) { return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmPoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , VdcActionType.UpdateVmPoolWithVms , new org.ovirt.engine.api.restapi.resource.BackendVmPoolResource.UpdateParametersProvider ( ) ) ; }
org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get ( org.ovirt.engine.core.compat.Guid diskId , org.ovirt.engine.core.compat.Guid userId , boolean isFiltered ) ;
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( super . getEntity ( ) ) != null ) { updateProperties ( ) ; } }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.HOSTED_ENGINE_DOMAIN_IMPORT_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.HOSTED_ENGINE_DOMAIN_IMPORT_FAILED ; }
public java.lang.String getDisplayIp ( ) { return this . vmDynamic.getDisplayIp ( ) ; }
public void removeVds ( org.ovirt.engine.core.compat.Guid vdsId , boolean newHost ) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = getVdsManager ( vdsId , newHost ) ; if ( vdsManager != null ) { vdsManager.dispose ( ) ; vdsManagersDict.remove ( vdsId ) ; } }
public void testQueryType ( ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException { org.junit.Assert.assertNotSame ( "The query can't be found in the enum VdcQueryType" , VdcQueryType.Unknown , org.ovirt.engine.core.bll.TestHelperQueriesCommandType.getQueryTypeFieldValue ( query ) ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.historydelete_3_5.HistoryDelete.row23Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryDelete ) { try { int length = 0 ; this . history_id = dis.readLong ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public boolean test ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { return ! ( existingSessionSlavesIds.contains ( slaveVolume.getId ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDevice , java.util.List < java.lang.String > networksToSync ) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment ( network , baseNic , vlanDevice , null , networksToSync ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; clusterGuideModel.localStorageHost = localStorageHost ; clusterGuideModel.updateOptionsLocalFS ( ) ; }
public void lowerVersionMgmtNetworkAndRegularNetworks ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworksToPool ( 2 ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
java.util.Set < java.lang.String > getUnsupportedCpus ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { showAvailableVolumes ( returnValue ) ; }
private static < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < ? > , ID extends java.io.Serializable > void updateAllInTransaction ( final java.util.Collection < T > entities , final org.ovirt.engine.core.dao.MassOperationsDao < T , ID > dao ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction ( null , entities , dao ) ; }
protected java.util.Collection < org.ovirt.engine.api.restapi.resource.VM > getEntitiesFromExportDomain ( ) { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenterId ( storageDomainId ) , storageDomainId ) ; return getBackendCollection ( QueryType.GetVmsFromExportDomain , params ) ; }
public void makeSortable ( ) { makeSortable ( java.util.Comparator.comparingInt ( LunModel :: getAdditionalAvailableSize ) ) ; }
protected org.ovirt.engine.core.common.businessentities.OriginType getRawValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData ) { return importVmData.getVm ( ) . getOrigin ( ) ; }
private void buildImageReference ( ) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = _document.SelectNodes ( "//*/File" , _xmlNS ) ; for ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node : list ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode xmlDiskStorageType = node.SelectSingleNode ( "rasd:DiskStorageType" , _xmlNS ) ; java.lang.String diskStorageTypeFromOvf = ( xmlDiskStorageType != null ) ? xmlDiskStorageType.innerText : null ; if ( org.apache.commons.lang.StringUtils.isNotEmpty ( diskStorageTypeFromOvf ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskStorageType diskStorageType = org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.valueOf ( diskStorageTypeFromOvf ) ; if ( diskStorageType == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER ) ) { disk = new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) ; } } disk.setImageId ( new org.ovirt.engine.core.compat.Guid ( node.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; disk.setId ( org.ovirt.engine.core.utils.ovf.OvfParser.GetImageGrupIdFromImageFile ( node.attributes.get ( "ovf:href" ) . getValue ( ) ) ) ; disk.setActive ( true ) ; disk.setImageStatus ( ImageStatus.OK ) ; disk.setDescription ( node.attributes.get ( "ovf:description" ) . getValue ( ) ) ; _images.add ( disk ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getProviders ( ) . setIsChangable ( false ) ; providers_SelectedItemChanged ( ) ; updateHostList ( ) ; }
public org.ovirt.engine.core.bll.snapshots.SnapshotsManager getSnapshotManager ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class ) ; }
public void ensureColumnVisible ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean visible ) { table.ensureColumnVisible ( column , headerText , visible ) ; tableHeader.ensureColumnVisible ( column , headerText , visible ) ; }
public void testParseNoOptions ( ) { java.util.List < org.ovirt.engine.api.model.Agent > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "foo:" , "" ) ; assertNotNull ( ret ) ; assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" ) ; }
public void testEmptyDiskStats ( ) { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setDisksStatsInXmlRpc ( disksStats ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.getVds ( ) , xml , false ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLunsByVgId ( java.lang.String vgId ) { return asCollection ( org.ovirt.engine.core.common.businessentities.storage.LUNs.class , getEntity ( java.util.List.class , QueryType.GetLunsByVgId , new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId ) , ( "LUNs for volume group: id=" + vgId ) ) ) ; }
protected void addCanDoActionMessageVariable ( java.lang.String varName , java.lang.Object varValue ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( java.lang.String.format ( "$%s %s" , varName , varValue ) ) ; }
public static < TSource > TSource firstOrDefault ( java.lang.Iterable < TSource > source ) { for ( TSource item : source ) { return item ; } return null ; }
private void testActionAllowed ( ) { org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
private org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel getEntry ( V widget ) { return ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getId ( ) , parentDeviceName , capability , iommuGroup , productName , productId , vendorName , vendorId , parentPhysicalFunction , totalVirtualFunctions , networkInterfaceName , vmId , driver ) ; }
private boolean validateNotTheSameName ( ) { if ( org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.isStorageWithSameNameExists ( ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST ) ; } return true ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { model.setAuthenticationMethod ( AuthenticationMethod.Password ) ; displayPasswordField ( true ) ; }
public void setPmOptions ( java.lang.String value ) { pmOptions = value ; pmOptionsMap = org.ovirt.engine.core.common.businessentities.VdsStatic.PmOptionsStringToMap ( value ) ; }
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; if ( ( e.PropertyName.equals ( "status" ) ) || ( e.PropertyName.equals ( "pm_enabled" ) ) ) { updateActionAvailability ( ) ; } }
public org.ovirt.engine.core.bll.ValidationResult valuesConsistent ( ) { return valuesConsistent ( null ) ; }
public java.lang.String getStopReason ( ) { return this . vmDynamic.getStopReason ( ) ; }
public void testGetAllForRoleAndAdElementWithInvalidElement ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.permissions > result = dao.getAllForRoleAndAdElement ( org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList ( result ) ; }
public void setUp ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand ( new org.ovirt.engine.core.common.action.ReconstructMasterParameters ( ) ) ) ; initializeStorageDomains ( ) ; initializeStoragePool ( ) ; initializeStoragePoolValidator ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . initializeVds ( ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeProviderResource ( "foo" , resource.getParent ( ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private boolean hasVms ( java.lang.Object selectedItem ) { if ( selectedItem instanceof org.ovirt.engine.core.common.businessentities.VmPool ) { return ( ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( selectedItem ) ) . getAssignedVmsCount ( ) ) != 0 ; } return false ; }
private static int compareSequence ( java.lang.String seq1 , java.lang.String seq2 , boolean digitSequence , boolean caseSensitive ) { return digitSequence ? org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compDigitSequence ( seq1 , seq2 , caseSensitive ) : org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compNonDigitSequence ( seq1 , seq2 , caseSensitive ) ; }
public void setUuid ( java.lang.String uuid ) { this . uuid = uuid ; }
public void setDedicatedHostList ( java.util.List < org.ovirt.engine.core.compat.Guid > dedicatedHosts ) { if ( dedicatedHosts == null ) { this . dedicatedHostList = java.util.Collections.< org.ovirt.engine.core.compat.Guid > emptyList ( ) ; return ; } this . dedicatedHostList = dedicatedHosts ; }
public void validateCanDoAction ( ) { mockVMPoolDao ( ) ; setupForStorageTests ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > executeAsyncCommand ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.businessentities.SubjectEntity ... subjectEntities ) ;
public final void disconnect ( ) { clearBuff ( ) ; closeChannel ( ) ; }
public void testGetAllForNetworkForUserWithPermission ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > result = dao.getAllForNetwork ( FixturesTool.NETWORK_ENGINE , org.ovirt.engine.core.dao.network.PRIVILEGED_USER_ID , true ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) ) ; }
public java.lang.String render ( java.lang.Integer object ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigWidget.messages.maxVfs ( object ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; }
public com.google.gwt.resources.client.ImageResource getDefaultImage ( ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.bootableDiskIcon ( ) ; }
public void testGetManagementNetworks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getManagementNetworks ( FixturesTool.DATA_CENTER ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.network.NetworkDaoTest.NUM_OF_MANAGEMENT_NETWORKS , result.size ( ) ) ; }
private boolean isProfilePermitted ( org.ovirt.engine.core.compat.Guid cpuProfileId , org.ovirt.engine.core.compat.Guid userId ) { return ( userId == null ) || ( ( permissionDao.getEntityPermissions ( userId , ActionGroup.ASSIGN_CPU_PROFILE , cpuProfileId , VdcObjectType.CpuProfile ) ) != null ) ; }
public void testParseNegative4 ( ) { org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( "include:message:_badSeverityTest_(kuku:pupu)" ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password ) ;
public java.lang.String toString ( ) { return ( "Host[" + ( ( mVdsStatic ) == null ? "null" : mVdsStatic.getVdsName ( ) ) ) + "]" ; }
public int compareTo ( org.ovirt.engine.core.common.businessentities.VmStatistics o ) { return org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator.< org.ovirt.engine.core.common.businessentities.VmStatistics , org.ovirt.engine.core.compat.Guid > newInstance ( ) . compare ( this , o ) ; }
public java.lang.String translateEngineFault ( final org.ovirt.engine.core.common.errors.EngineFault fault ) { return getVdsmErrorsTranslator ( ) . translateErrorTextSingle ( ( ( fault.getError ( ) ) == null ? fault.getMessage ( ) : fault.getError ( ) . toString ( ) ) ) ; }
public void setSessionItem ( java.lang.String key , java.lang.String value ) { setSessionItemImpl ( getPrefixedKey ( key ) , value ) ; }
public java.util.Map < java.lang.String , java.lang.String > getCustomValues ( ) { addCustomValue ( GlusterConstants.VOLUME_SNAPSHOT_NAME , org.ovirt.engine.core.bll.gluster.GlusterVolumeSnapshotCommandBase.getParameters ( ) . getSnapshotName ( ) ) ; return super . getCustomValues ( ) ; }
public void testChangeToExistingName ( ) { prepareVmToPassValidate ( ) ; mockSameNameQuery ( true ) ; org.junit.Assert.assertFalse ( "validate should have failed with vm name already in use." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ; }
public void ClearTasks ( ) { synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.EntityAsyncTask > CurrentActionTypeTasks = GetCurrentActionTypeTasks ( ) ; for ( org.ovirt.engine.core.bll.EntityAsyncTask task : CurrentActionTypeTasks ) { task.clearAsyncTask ( ) ; } StartPollingNextTask ( ) ; } }
public void validateSucceeds ( ) { command.getParameters ( ) . setAuditLogId ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ; prepareMocks ( command ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.StoragePool value ) { privateEntity = value ; initSelectedMacPool ( ) ; }
protected org.ovirt.engine.core.bll.pm.FenceAgentExecutor createAgentExecutor ( ) { return org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.bll.pm.FenceAgentExecutor ( fencedHost , fencingPolicy ) ) ; }
public java.util.List < org.ovirt.engine.core.common.job.Job > getJobsByCorrelationId ( java.lang.String correlationId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "correlation_id" , correlationId ) ; return getCallsHandler ( ) . executeReadList ( "GetJobsByCorrelationId" , createEntityRowMapper ( ) , parameterSource ) ; }
public void noCluster ( ) { simulateClusterDoesNotExist ( ) ; assertValidateFailure ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID.toString ( ) ) ; }
protected static org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResource getCollection ( ) { return new org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResource ( org.ovirt.engine.api.restapi.resource.BackendVmReportedDeviceResourceTest.VM_ID ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { if ( networkClusterModel.getIsChangable ( ) ) { networkClusterModel.setAttached ( value ) ; } } refreshClustersTable ( ) ; }
public java.lang.String getTagNamesAndChildrenNamesByRegExp ( java.lang.String tagNameRegExp ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . getTagNamesAndChildrenNamesByRegExp ( tagNameRegExp ) ; }
public static boolean isMatch ( java.lang.String string , java.lang.String expression , org.ovirt.engine.core.compat.RegexOptions options ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
public int getHostCpu ( ) { return hostCpu ; }
public void Cluster_SelectedItemChanged ( ) { UpdateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; UpdateMinAllocatedMemory ( ) ; UpdateNumOfSockets ( ) ; updateQuotaByCluster ( null , "" ) ; updateCpuPinningVisibility ( ) ; }
protected org.ovirt.engine.core.common.businessentities.VM getEntity ( int index ) { org.ovirt.engine.api.restapi.resource.VM vm = new org.ovirt.engine.api.restapi.resource.VM ( ) ; vm.setId ( GUIDS [ index ] ) ; vm.setName ( NAMES [ index ] ) ; return vm ; }
public java.lang.Integer getHostNodeIndex ( ) { return hostNodeIndex ; }
protected void afterExecute ( java.lang.Runnable r , java.lang.Throwable t ) { super . afterExecute ( r , t ) ; org.ovirt.engine.core.utils.CorrelationIdTracker.clean ( ) ; }
public void testValidateNotRemovingUsedNetworkByVmsWhenNotUsedByVms ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . build ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.validateNotRemovingUsedNetworkByVms ( "removedNet" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
com.google.gwt.safehtml.shared.SafeHtml vmCountWithMigrations ( java.lang.String title , com.google.gwt.safehtml.shared.SafeHtml incomingMigrations , java.lang.String vmCountStr , com.google.gwt.safehtml.shared.SafeHtml outgoingMigrations ) ;
protected boolean canDoAction ( ) { return ( ( ( super . canDoAction ( ) ) && ( vdsGroupExists ( ) ) ) && ( changesAreClusterCompatible ( ) ) ) && ( logicalNetworkExists ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmPool object ) { return java.lang.Integer.toString ( object.getvm_running_count ( ) ) ; }
public static void resume ( javax.transaction.Transaction transaction ) { try { javax.transaction.TransactionManager tm = org.ovirt.engine.core.utils.transaction.TransactionSupport.findTransactionManager ( ) ; tm.resume ( transaction ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( "Unable to resume transaction" , e ) ; } }
public void testLogOffDoesntLog ( ) { org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.ovirt.engine.core.utils.log.LoggedUtils.log ( log , LogLevel.OFF , "{}" , new java.lang.Object ( ) ) ; org.mockito.Mockito.verifyZeroInteractions ( log ) ; }
private org.ovirt.engine.core.bll.ImportVmTemplateCommand setupDiskSpaceTest ( final int extraDiskSpaceRequired ) { return setupVolumeFormatAndTypeTest ( VolumeFormat.RAW , VolumeType.Preallocated , StorageType.NFS , extraDiskSpaceRequired ) ; }
public void refreshRunningVmsWithDiskProfile ( org.ovirt.engine.core.compat.Guid diskProfileId ) { refreshVmsStorageQos ( getRunningVmDiskImageMapWithProfiles ( java.util.Collections.singleton ( diskProfileId ) ) , storageQosDao.getQosByDiskProfileId ( diskProfileId ) ) ; }
static java.util.ResourceBundle getResourceBundle ( ) { try { return java.util.ResourceBundle.getBundle ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName ( ) ) ; } catch ( java.util.MissingResourceException e ) { throw new java.lang.RuntimeException ( ( ( "Could not find ResourceBundle file '" + ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName ( ) ) ) + "'." ) ) ; } }
public void testVersionedValue ( ) { org.junit.Assert.assertEquals ( 1024 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 777 , null ) ) ; org.junit.Assert.assertEquals ( 512 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 777 , Version.v3_6 ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VM v ) { return ! ( vdsId.equals ( v.getDedicatedVmForVds ( ) ) ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.popupResourcesToCleanup.add ( org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView ( ) ) ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.popupResourcesToCleanup.add ( model ) ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView ( ) . focusInput ( ) ; }
public void setVncKeyboardLayout ( java.lang.String vncKeyboardLayout ) { vmStatic.setVncKeyboardLayout ( vncKeyboardLayout ) ; }
public int getNumOfSockets ( ) { return this . vmStatic.getNumOfSockets ( ) ; }
public void testAdjustLegacySecureChannels ( ) { java.lang.String legacyChannels = "smain,sdisplay,sinputs,scursor,splayback,srecord,ssmartcard,susbredir" ; java.lang.String correctChannels = "main,display,inputs,cursor,playback,record,smartcard,usbredir" ; org.junit.jupiter.api.Assertions.assertEquals ( correctChannels , org.ovirt.engine.core.common.console.ConsoleOptions.adjustLegacySecureChannels ( legacyChannels ) ) ; }
public void run ( ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . vdsNonOperational ( vdsId , NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , true , true , domainId , java.util.Collections.singletonMap ( "StorageDomainNames" , storageDomain.getStorageName ( ) ) ) ; }
void afterCompensation ( ) ;
public java.lang.String getDiskAlias ( ) { return getDisk ( ) . getDiskAlias ( ) ; }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel clusterPolicyClusterListModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasEntity < org.ovirt.engine.core.common.scheduling.ClusterPolicy > > list = new java.util.ArrayList < > ( ) ; list.add ( clusterPolicyClusterListModel ) ; setDetailModels ( list ) ; }
protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage ( com.google.gwt.resources.client.ImageResource value ) { return com.google.gwt.user.client.ui.AbstractImagePrototype.create ( value ) . getSafeHtml ( ) ; }
public java.lang.String getbuild_name ( ) { return this . buildName ; }
protected void attemptToActivateDomain ( ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase activateParameters = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getStoragePool ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getBackend ( ) . runInternalAction ( VdcActionType.ActivateStorageDomain , activateParameters ) ; }
void setSize ( long value ) ;
void addError ( java.lang.String error ) ;
private java.lang.String getTemplateExclusiveLockMessage ( ) { return new java.lang.StringBuilder ( EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IS_BEING_REMOVED.name ( ) ) . append ( java.lang.String.format ( "$TemplateName %1$s" , org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate ( ) . getName ( ) ) ) . toString ( ) ; }
public void initialize ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem ) { super . initialize ( systemTreeSelectedItem ) ; getModel ( ) . getVmType ( ) . setIsChangable ( true ) ; templateValidate ( ) ; instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager ( getModel ( ) ) ; }
protected void readGeneralData ( ) { org.ovirt.engine.core.utils.ovf.xml.XmlNode content = selectSingleNode ( _document , "//*/Content" ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode node ; vmBase.setVmInit ( new org.ovirt.engine.core.common.businessentities.VmInit ( ) ) ; vmBase.setOvfVersion ( getVersion ( ) ) ; node = selectSingleNode ( content , OvfProperties.DESCRIPTION ) ; if ( node != null ) { vmBase.setDescription ( node.innerText ) ; } node = selectSingleNode ( content , OvfProperties.COMMENT ) ; if ( node != null ) { vmBase.setComment ( node.innerText ) ; } node = selectSingleNode ( content , OvfProperties.DOMAIN ) ; if ( node != null ) { vmBase.getVmInit ( ) . setDomain ( node.innerText ) ; } node = selectSingleNode ( content , OvfProperties.CREATION_DATE ) ; if ( node != null ) { java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate ( node.innerText ) ; if ( creationDate != null ) { vmBase.setCreationDate ( creationDate ) ; } } node = selectSingleNode ( content , OvfProperties.EXPORT_DATE ) ; if ( node != null ) { java.util.Date exportDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate ( node.innerText ) ; if ( exportDate != null ) { vmBase.setExportDate ( exportDate ) ; } } node = selectSingleNode ( content , OvfProperties.DEFAULT_BOOT_SEQUENCE ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setDefaultBootSequence ( org.ovirt.engine.core.common.businessentities.BootSequence.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = selectSingleNode ( content , OvfProperties.INITRD_URL ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setInitrdUrl ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.KERNEL_URL ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setKernelUrl ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.KERNEL_PARAMS ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setKernelParams ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.GENERATION ) ; if ( node != null ) { vmBase.setDbGeneration ( java.lang.Long.parseLong ( node.innerText ) ) ; } else { vmBase.setDbGeneration ( 1L ) ; } node = selectSingleNode ( content , getDefaultDisplayTypeStringRepresentation ( ) ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { defaultDisplayType = org.ovirt.engine.core.common.businessentities.DisplayType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ; vmBase.setDefaultDisplayType ( defaultDisplayType ) ; } } org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes ( content , "Section" ) ; org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version ( getVersion ( ) ) ; if ( list != null ) { node = getNode ( list , "xsi:type" , "ovf:OperatingSystemSection_Type" ) ; if ( node != null ) { readOsSection ( node ) ; if ( ( ( ! ( osRepository.isLinux ( vmBase.getOsId ( ) ) ) ) || ( ! ( org.ovirt.engine.core.common.FeatureSupported.singleQxlPci ( version ) ) ) ) || ( ( vmBase.getDefaultDisplayType ( ) ) != ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) ) { vmBase.setSingleQxlPci ( false ) ; } } node = getNode ( list , "xsi:type" , "ovf:VirtualHardwareSection_Type" ) ; if ( node != null ) { readHardwareSection ( node ) ; } node = getNode ( list , "xsi:type" , "ovf:SnapshotsSection_Type" ) ; if ( node != null ) { readSnapshotsSection ( node ) ; } } node = selectSingleNode ( content , OvfProperties.TIMEZONE ) ; if ( ( node != null ) && ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) ) { vmBase.setTimeZone ( node.innerText ) ; } else { if ( osRepository.isWindows ( vmBase.getOsId ( ) ) ) { vmBase.setTimeZone ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DefaultWindowsTimeZone ) ) ; } else { vmBase.setTimeZone ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DefaultGeneralTimeZone ) ) ; } } node = selectSingleNode ( content , OvfProperties.ORIGIN ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setOrigin ( org.ovirt.engine.core.common.businessentities.OriginType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = selectSingleNode ( content , OvfProperties.VM_TYPE ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setVmType ( org.ovirt.engine.core.common.businessentities.VmType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = selectSingleNode ( content , OvfProperties.IS_SMARTCARD_ENABLED ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setSmartcardEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.NUM_OF_IOTHREADS ) ; if ( node != null ) { if ( ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) && ( ! ( org.ovirt.engine.core.common.FeatureSupported.isIoThreadsSupported ( version ) ) ) ) { vmBase.setNumOfIoThreads ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.DELETE_PROTECTED ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setDeleteProtected ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.SSO_METHOD ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setSsoMethod ( org.ovirt.engine.core.common.businessentities.SsoMethod.fromString ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.TUNNEL_MIGRATION ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setTunnelMigration ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.VNC_KEYBOARD_LAYOUT ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setVncKeyboardLayout ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.MIN_ALLOCATED_MEMORY ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMinAllocatedMem ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.IS_STATELESS ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setStateless ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.IS_RUN_AND_PAUSE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setRunAndPause ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.CREATED_BY_USER_ID ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCreatedByUserId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.MIGRATION_DOWNTIME ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMigrationDowntime ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.MIGRATION_SUPPORT ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport = org.ovirt.engine.core.common.businessentities.MigrationSupport.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ; vmBase.setMigrationSupport ( migrationSupport ) ; } } readDedicatedHostsList ( ) ; node = selectSingleNode ( content , OvfProperties.SERIAL_NUMBER_POLICY ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setSerialNumberPolicy ( org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = selectSingleNode ( content , OvfProperties.CUSTOM_SERIAL_NUMBER ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomSerialNumber ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.AUTO_STARTUP ) ; if ( node != null ) { vmBase.setAutoStartup ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = selectSingleNode ( content , OvfProperties.PRIORITY ) ; if ( node != null ) { vmBase.setPriority ( java.lang.Integer.parseInt ( node.innerText ) ) ; } node = selectSingleNode ( content , OvfProperties.IS_BOOT_MENU_ENABLED ) ; if ( node != null ) { vmBase.setBootMenuEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = selectSingleNode ( content , OvfProperties.IS_SPICE_FILE_TRANSFER_ENABLED ) ; if ( node != null ) { vmBase.setSpiceFileTransferEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = selectSingleNode ( content , OvfProperties.IS_SPICE_COPY_PASTE_ENABLED ) ; if ( node != null ) { vmBase.setSpiceCopyPasteEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = selectSingleNode ( content , OvfProperties.IS_AUTO_CONVERGE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setAutoConverge ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.IS_MIGRATE_COMPRESSED ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMigrateCompressed ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = selectSingleNode ( content , OvfProperties.CUSTOM_EMULATED_MACHINE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomEmulatedMachine ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.CUSTOM_CPU_NAME ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomCpuName ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.PREDEFINED_PROPERTIES ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setPredefinedProperties ( node.innerText ) ; } } node = selectSingleNode ( content , OvfProperties.USER_DEFINED_PROPERTIES ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setUserDefinedProperties ( node.innerText ) ; } } vmBase.setCustomProperties ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . customProperties ( vmBase.getPredefinedProperties ( ) , vmBase.getUserDefinedProperties ( ) ) ) ; readGeneralData ( content ) ; readVmInit ( content ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( applySortOptions ( getSearchString ( ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS , isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > drive , java.lang.String baseVolUUID , java.lang.String topVolUUID , java.lang.String bandwidth , java.lang.String jobUUID ) ;
public void handleFailure ( ) { updateDiskStatus ( ImageStatus.ILLEGAL ) ; removeDisk ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage_server_connections > GetStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_server_connections > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.storage_server_connections [ ] { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) } ) ) ; }
private boolean isBondRemoved ( java.lang.String bondName ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface removedBond : removedBondVdsNetworkInterface ) { if ( bondName.equals ( removedBond.getName ( ) ) ) { return true ; } } return false ; }
public void testValidateImageNotInTemplateTrue ( ) { org.mockito.Mockito.when ( vmTemplateDAO.get ( mockSourceImageAndGetId ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "validation should succeed" , cmd.validateImageNotInTemplate ( ) ) ; }
public T flush ( ) { profilesEditor.flush ( ) ; return null ; }
public void testDefaultPoolFlagIsNotSetValidUsage ( ) { macPool.setDefaultPool ( false ) ; org.hamcrest.MatcherAssert.assertThat ( macPoolValidator.defaultPoolFlagIsNotSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage.Disk createDisk ( org.ovirt.engine.core.compat.Guid id , boolean boot ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImageBase ( ) ; disk.setId ( id ) ; disk.setBoot ( boot ) ; return disk ; }
public void externalNetworkIsNotNewInDataCenter ( ) throws java.lang.Exception { externalNetworkNewInDataCenterTestSetup ( true ) ; org.junit.Assert.assertThat ( validator.externalNetworkNewInDataCenter ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_ALREADY_EXISTS ) ) ; }
public void setExternalId ( byte [ ] externalId ) { this . externalId = externalId ; }
public void setUp ( ) { vdsHandler.init ( ) ; }
protected org.ovirt.engine.api.model.DataCenter doPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.StoragePool entity ) { return parent.doPopulate ( model , entity ) ; }
public org.ovirt.engine.core.bll.ValidationResult notLabeled ( ) { return ! ( org.ovirt.engine.core.utils.NetworkUtils.isLabeled ( network ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_LOCKED ) ) ; }
public java.lang.String getDiskAlias ( ) { if ( ( getDisk ( ) ) != null ) { return getDisk ( ) . getDiskAlias ( ) ; } return "" ; }
public void testValidateNetworkExclusiveOnNicsVmAndNonVmAttachedToInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( false , java.util.Arrays.asList ( NetworkType.VM , NetworkType.NON_VM ) , vmNetwork1 , nonVmNetwork1 ) ; }
public static org.ovirt.engine.core.searchbackend.ISyntaxChecker createBackendSyntaxChecker ( java.lang.String AuthenticationMethod ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.ConfigAuthenticationMethod = AuthenticationMethod ; if ( ( org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ) == null ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.SearchResultsLimit ) ) ; } return org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ; }
protected org.ovirt.engine.api.model.OpenStackVolumeProvider doPopulate ( org.ovirt.engine.api.model.OpenStackVolumeProvider model , org.ovirt.engine.core.common.businessentities.Provider entity ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = getStoragePoolIdByStorageDomainName ( entity.getName ( ) ) ; if ( storagePool != null ) { model.setDataCenter ( org.ovirt.engine.api.restapi.types.DataCenterMapper.map ( storagePool , null ) ) ; } return model ; }
public void setDetachableIconVisible ( boolean visible ) { getContentWidget ( ) . setDetachableIconVisible ( visible ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { addCustomValue ( "AuditLogId" , java.lang.String.valueOf ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ) ; return org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.UNASSIGNED : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_AUDIT_LOG_FAILED ; }
org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig findVfsConfig ( org.ovirt.engine.core.compat.Guid nicId ) { final java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > hostNicVfsConfigs = findHostNicVfsConfigs ( ) ; return hostNicVfsConfigs.get ( nicId ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build ( ) { return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , params , existingInterfaces , existingAttachments , new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( networks ) , managementNetworkUtil , networkClusterDaoMock , networkDaoMock , vdsDaoMock , new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorHelper ( ) , vmDao , mockNetworkExclusivenessValidatorResolver ) ; }
public org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig getByNicId ( org.ovirt.engine.core.compat.Guid nicId ) { return getCallsHandler ( ) . executeRead ( "GetVfsConfigByNicId" , createEntityRowMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "nic_id" , nicId ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel flush ( ) { neutronAgentWidget.flush ( ) ; vmwarePropertiesWidget.flush ( ) ; kvmPropertiesWidget.flush ( ) ; return driver.flush ( ) ; }
public void shouldDetectClusterUpgradeIsEnabled ( ) { final org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.bll.validator.InClusterUpgradeValidatorTest.VERSION_1_1 ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkClusterUpgradeIsEnabled ( cluster ) , org.hamcrest.core.Is.is ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.MIXED_HOST_VERSIONS_NOT_ALLOWED ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkInterface findInterfaceByName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkInterface > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.NetworkInterface i : items ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( i.getName ( ) , name ) ) { return i ; } } return null ; }
public static java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > executeAsyncCommand ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.executeAsyncCommand ( actionType , parameters , cmdContext ) ; }
public org.ovirt.engine.core.bll.ValidationResult exists ( ) { if ( ( vds ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VDS_DOES_NOT_EXIST ) ; } return ValidationResult.VALID ; }
protected void setUpStorageDomainQueryExpectations ( ) { setUpEntityQueryExpectations ( QueryType.GetStorageDomainById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { STORAGE_DOMAIN_ID } , new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) ; }
protected final < T > javax.ws.rs.core.Response performCreate ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.ActionParametersBase taskParams , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver , boolean block ) { return performCreate ( task , taskParams , entityResolver , block , null ) ; }
public org.ovirt.engine.api.v3.servers.V3VmNicsServer getNicsResource ( ) { return new org.ovirt.engine.api.v3.servers.V3VmNicsServer ( id , getDelegate ( ) . getNicsResource ( ) ) ; }
public void onSuccess ( java.lang.String result ) { if ( result != null ) { restApiSessionId = result ; processSessionId ( result ) ; } else { processSessionIdException ( ) ; } }
public final void setSessionValid ( java.lang.String sessionId , boolean valid ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.SESSION_VALID_PARAMETER_NAME , valid ) ; }
public void testUpdateWithNonGuidId ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri ( "hosts" , "00000001-0001-0001-0001-000000000011" , "nics" , "116" ) ; javax.ws.rs.core.Request request = mockRequest ( "PUT" ) ; org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage ( uriInfo , request ) ; org.junit.Assert.assertEquals ( "For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nic/methods/update" , fault.getDetail ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( java.lang.Object object ) { java.lang.String problem = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getWarning ( ) ; return problem != null ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( problem ) : null ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getAllVMsForStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.bll.GetVmsByStorageDomainQuery.getDbFacade ( ) . getVmDao ( ) . getAllForStorageDomain ( domainId ) ; }
public boolean isDeleted ( ) { return deleted ; }
public void setExplanation ( com.google.gwt.safehtml.shared.SafeHtml text ) { infoIcon.setTitle ( text.asString ( ) ) ; }
java.lang.String decrypt ( java.lang.String value ) throws java.lang.Exception { return org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.decrypt ( value ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.StorageDomain , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
private void logException ( java.lang.RuntimeException ex ) { log.error ( "Command '{}' execution failed: {}" , this , ex.getMessage ( ) ) ; log.debug ( "Exception" , ex ) ; }
public void setVncPort ( java.lang.String vncPort ) { consoleOptions.setPort ( ( vncPort == null ? null : java.lang.Integer.parseInt ( vncPort ) ) ) ; }
public void setBridge ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bridge ) { this . vlanNic = bridge ; }
public void testDifferentVerbosity ( ) { java.lang.String command = createCommand ( new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder ( ) . verboseLevel ( AnsibleVerbosity.LEVEL2 ) . playbook ( org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( join ( AnsibleCommandBuilder.ANSIBLE_COMMAND , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.IGNORE_SSH_CONFIG , "-vv" , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.PRIVATE_KEY , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK_FULL_PATH ) , command ) ; }
public void typeMatchesProfileOnlyProfilePassthrough ( ) { typeMatchesProfileCommon ( false , true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void testSave ( ) { dao.save ( newOption ) ; org.ovirt.engine.core.common.businessentities.VdcOption result = dao.getByNameAndVersion ( newOption.getoption_name ( ) , newOption.getversion ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newOption , result ) ; }
public org.ovirt.engine.api.resource.ClusterNetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendClusterNetworkResource ( clusterId , id ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) { return item ; } } return null ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithNoCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setname ( "Default" ) ; group.setId ( VDSGroup.DEFAULT_VDS_GROUP_ID ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
private java.lang.String getSsoToken ( final java.lang.String engineSessionId ) { return ( ( java.lang.String ) ( runQuery ( QueryType.GetEngineSessionIdToken , new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) , engineSessionId ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser getExpectedResult ( ) { org.ovirt.engine.core.common.businessentities.LdapUser user = new org.ovirt.engine.core.common.businessentities.LdapUser ( ) ; user.setUserName ( org.ovirt.engine.core.bll.NAME_TO_SEARCH ) ; user.setUserId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; user.setDomainControler ( org.ovirt.engine.core.bll.DOMAIN ) ; return user ; }
private boolean volumeNameExists ( java.lang.String volumeName ) { return ( glusterVolumeDao.getByName ( getClusterId ( ) , volumeName ) ) != null ; }
public void passDiscardSupportedForCopyFloatingDiskOp ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.TEMPLATE ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; org.junit.Assert.assertTrue ( command.validatePassDiscardSupportedForDestinationStorageDomain ( ) ) ; }
public void setAttachedTagsToEntities ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > value ) { if ( ( attachedTagsToEntities ) != value ) { attachedTagsToEntities = value ; AttachedTagsToEntitiesChanged ( ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AttachedTagsToEntities" ) ) ; } }
protected void onHide ( ) { super . onHide ( ) ; org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.EventArgs > systemTreeSelectedItemChangedEvent = commonModelProvider.get ( ) . getSystemTree ( ) . getSelectedItemChangedEvent ( ) ; systemTreeSelectedItemChangedEvent.removeListener ( systemTreeListener ) ; }
protected void endVmCommand ( ) { getSnapshotDao ( ) . updateStatus ( org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getParameters ( ) . getSnapshotId ( ) , SnapshotStatus.OK ) ; super . endVmCommand ( ) ; }
protected abstract void setup ( ) ;
public java.lang.Boolean Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; }
public void runAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { runAction ( actionType , parameters , org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK ) ; }
public void testSimpleMatches ( ) { org.ovirt.engine.core.compat.Regex regex = new org.ovirt.engine.core.compat.Regex ( "[0-9]" ) ; org.junit.jupiter.api.Assertions.assertTrue ( regex.isMatch ( "1" ) , "A number should match" ) ; org.junit.jupiter.api.Assertions.assertFalse ( regex.isMatch ( "a" ) , "A letter should not match" ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageSnapshotPresenter.constants.snapshotsLabel ( ) , 9 ) ; }
private java.lang.String addSubResource ( java.lang.String className , org.ovirt.engine.sdk.generator.utils.Tree < org.ovirt.engine.sdk.generator.Location > entityTree ) { return new org.ovirt.engine.sdk.generator.java.templates.SubResourceTemplate ( ) . evaluate ( className , entityTree ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . storageImagesSubTabLabel ( ) , 6 , ginjector.getSubTabStorageIsoModelProvider ( ) ) ; }
public final boolean SetData ( java.lang.String key , java.lang.Object value ) { java.lang.String sessionId = org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getHttpSessionId ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( sessionId ) ) { return false ; } SetData ( sessionId , key , value ) ; return true ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue createVDSReturnValueForFailure ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; ret.setSucceeded ( false ) ; ret.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterServicesActionFailed , "VDSM Error" ) ) ; return ret ; }
protected org.ovirt.engine.core.common.businessentities.Cluster getCluster ( ) { if ( ( cluster ) == null ) { cluster = getDbFacade ( ) . getClusterDao ( ) . get ( getProfile ( ) . getClusterId ( ) ) ; } return cluster ; }
private void verifyCPU ( org.ovirt.engine.api.model.Cpu cpu , java.lang.String name , java.lang.Integer level ) { assertNotNull ( cpu ) ; assertEquals ( name , cpu.getType ( ) ) ; assertEquals ( level , cpu.getLevel ( ) ) ; }
public void getUsbTypeEnabledNative ( ) { org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; org.junit.jupiter.api.Assertions.assertEquals ( UsbType.NATIVE , org.ovirt.engine.api.restapi.utils.UsbMapperUtils.getUsbType ( usbPolicy ) ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "storageType" , getStorageType ( ) ) . append ( "connectionList" , getConnectionList ( ) ) . append ( "sendNetworkEventOnFailure" , getSendNetworkEventOnFailure ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getAllInterfacesByDataCenterId ( org.ovirt.engine.core.compat.Guid dataCenterId ) { return getCallsHandler ( ) . executeReadList ( "GetInterfacesByDataCenterId" , vdsNetworkInterfaceRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "data_center_id" , dataCenterId ) ) ; }
public static java.lang.String GetMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String value = "" ; if ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.containsKey ( logType ) ) { value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.get ( logType ) ; } return value ; }
public void autoCompletedInputMatchesItsNumericKeyValue ( java.util.Map.Entry < java.lang.Integer , java.lang.String > osCompletionEntry ) { org.junit.Assert.assertThat ( osCompletionEntry.getKey ( ) . toString ( ) , org.hamcrest.core.Is.is ( completer.convertFieldEnumValueToActualValue ( osCompletionEntry.getValue ( ) ) ) ) ; }
public void testNewStorageTypes ( ) { org.junit.jupiter.api.Assertions.assertEquals ( 9 , org.ovirt.engine.core.common.businessentities.storage.StorageType.values ( ) . length , ( "A storage type was added/removed. Update this test, and the isFileDomain/isBlockDomain " + "method accordingly" ) ) ; }
public void collapseAll ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel stm : getPermissionGroupModels ( ) ) { stm.setIsExpanded ( false ) ; for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel stmChild : stm.getChildren ( ) ) { stmChild.setIsExpanded ( false ) ; } } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.getOptions ( ) . setWanDisableEffects ( ( ( java.util.List < org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects > ) ( returnValue ) ) ) ; }
private boolean checkPermissions ( org.ovirt.engine.core.compat.Guid cpuProfileId , org.ovirt.engine.core.compat.Guid userId ) { return ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( userId ) ) || ( ( permissionDao.getEntityPermissions ( userId , ActionGroup.ASSIGN_CPU_PROFILE , cpuProfileId , VdcObjectType.CpuProfile ) ) != null ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, status=%s, nonOperationalReason=%s, stopSpmFailureLogged=%s, maintenanceReason=%s" , super . toString ( ) , getStatus ( ) , getNonOperationalReason ( ) , isStopSpmFailureLogged ( ) , getMaintenanceReason ( ) ) ; }
public void filterAllDomainsExceptForTheFirstOne ( ) { filterAllStorageDomainsExceptOne ( java.util.Arrays.asList ( validStorageDomain , invalidStorageDomain1 , invalidStorageDomain2 ) , validStorageDomain ) ; }
protected org.springframework.jdbc.core.RowMapper < java.lang.String > getStringMapper ( ) { return org.ovirt.engine.core.dao.BaseDao.stringRowMapper ; }
public boolean isMigrationPoliciesSupported ( org.ovirt.engine.core.compat.Version clusterVersion ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.MigrationPoliciesSupported , clusterVersion.toString ( ) ) ) ) ; }
void setTooltipFallback ( com.google.gwt.safehtml.shared.SafeHtml tooltipFallback ) ;
protected void addInvalidIdErrorMessages ( org.ovirt.engine.core.common.errors.VdcBllMessages messageActionTypeParameter ) { addErrorMessages ( messageActionTypeParameter , VdcBllMessages.ACTION_TYPE_FAILED_BOOKMARK_INVALID_ID ) ; }
private org.ovirt.engine.core.common.businessentities.GraphicsType deriveGraphicsType ( ) { org.ovirt.engine.api.restapi.resource.VM vm = getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , "GetVmByVmId" ) ; return vm == null ? null : org.ovirt.engine.api.restapi.types.VmMapper.deriveGraphicsType ( vm.getGraphicsInfos ( ) ) ; }
public org.ovirt.engine.core.compat.Guid getVdsmTaskId ( ) { return getParameters ( ) . getVdsmTaskId ( ) ; }
public void setAuthn ( java.lang.String sessionId , org.ovirt.engine.core.extensions.mgr.ExtensionProxy authn ) { setData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.AUTHN_PARAMETER_NAME , authn ) ; }
int getInterval ( ) { return 1000 ; }
public void setTitle ( java.lang.String text ) { tooltipPanel.setText ( text ) ; }
public void validateIsoPrefixWithTrippleSlash ( ) throws java.lang.Exception { java.lang.String initrd = ( RunVmCommand.ISO_PREFIX ) + "/" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( initrd , null ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network.isExternal ( ) ; }
public org.ovirt.engine.core.compat.NGuid getmigrating_to_vds ( ) { return this . vmDynamic.getmigrating_to_vds ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getAllRelevantQuotasForCluster ( org.ovirt.engine.core.compat.Guid clusterId , long engineSessionSeqId , boolean isFiltered ) ;
public java.util.Map < java.lang.String , java.lang.Object > prepareImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) ;
public java.lang.String getVmName ( ) { return this . vmStatic.getVmName ( ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) . getNumOfCpus ( ) ) ; }
public void setMessage ( java.lang.String message ) { super . setMessage ( message ) ; this . message.setText ( message ) ; this . message.setVisible ( ( ! ( org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty ( message ) ) ) ) ; }
private boolean isEveryoneVnicProfileUserPermission ( org.ovirt.engine.core.common.businessentities.permissions permission ) { return ( permission.getad_element_id ( ) . equals ( ApplicationGuids.everyone.asGuid ( ) ) ) && ( permission.getrole_id ( ) . equals ( ApplicationGuids.vnicProfileUser.asGuid ( ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addMemoryBalloon ( org.ovirt.engine.core.compat.Guid vmId ) { return addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.BALLOON , VmDeviceType.MEMBALLOON , getMemoryBalloonSpecParams ( ) , true , true ) ; }
private void unlockDisk ( ) { imageDao.updateStatusOfImagesByImageGroupId ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , org.ovirt.engine.ui.uicommonweb.models.events.EventListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.eventMainTabLabel ( ) , 13 , modelProvider , org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterGeoRepMountBrokerSetup ( java.lang.String userName , java.lang.String remoteGroupName , java.lang.String remoteVolumeName , java.lang.Boolean partial ) ;
public void canDoAction_vmNotExists_Test ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vmStaticDao ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INVALID_VM_FOR_AFFINITY_GROUP ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.VDS , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.hostMainTabLabel ( ) , 2 , modelProvider ) ; }
private void _callbackAddMessage ( java.lang.String message ) { if ( ( this . callback ) != null ) { this . callback.addMessage ( message ) ; } }
public void nullQosValuesPresent ( ) { org.hamcrest.MatcherAssert.assertThat ( nullValidator.requiredValuesPresent ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.DisplayType > > getGraphicsAndDisplays ( int osId , org.ovirt.engine.core.compat.Version version ) { return graphicsAndDisplays.get ( osId ) . get ( version ) ; }
public void testRemoveActionVersionMap ( ) { dao.removeActionVersionMap ( existingActionMap.getaction_type ( ) ) ; org.ovirt.engine.core.common.businessentities.ActionVersionMap result = dao.getActionVersionMapByActionType ( existingActionMap.getaction_type ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
public void setNumberOfMonitors ( int numberOfMonitors ) { this . consoleOptions.setNumberOfMonitors ( numberOfMonitors ) ; }
void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) ;
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "providerId" , getProviderId ( ) ) . append ( "externalId" , getExternalId ( ) ) . append ( "physicalNetworkId" , getPhysicalNetworkId ( ) ) . build ( ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.scheduling.ClusterPolicy result = dao.get ( existingPolicy.getId ( ) , java.util.Collections.emptyMap ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( result , existingPolicy ) ; }
protected void updateServerHookStatusInDb ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) { glusterHooksDao.updateGlusterServerHookStatus ( hookId , serverId , status ) ; }
public void testIsUpdInvalid ( ) { storagePool.setStatus ( StoragePoolStatus.NonResponsive ) ; org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage ( validator.isUp ( ) , VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ; }
public void lowerVersionNoHostsWithNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworkToPool ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public void setPmProxyPreferences ( java.lang.String pmProxyPreferences ) { setFenceProxySources ( org.ovirt.engine.core.common.utils.pm.FenceProxySourceTypeHelper.parseFromString ( pmProxyPreferences ) ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, srcHost=%s, dstVdsId=%s, dstHost=%s, migrationMethod=%s, tunnelMigration=%s, migrationDowntime=%s" , super . toString ( ) , getSrcHost ( ) , getDstVdsId ( ) , getDstHost ( ) , getMigrationMethod ( ) , isTunnelMigration ( ) , getMigrationDowntime ( ) ) ; }
public void nullVnicProfileWhenUnlinkingSupported ( ) throws java.lang.Exception { vnicProfileLinkingTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , null ) ; }
public void setLastAdminCheckStatus ( boolean value ) { lastAdminCheckStatus = value ; }
protected boolean migrateAllVms ( org.ovirt.engine.core.bll.job.ExecutionContext parentContext ) { return migrateAllVms ( parentContext , false ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Event event ) { validateParameters ( event , "origin" , "severity" , "customId" , "description" ) ; return performCreate ( ActionType.AddExternalEvent , getParameters ( event ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < java.lang.Long > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetAuditLogById , org.ovirt.engine.core.common.queries.GetAuditLogByIdParameters.class ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.gluster.StorageDevice device ) { if ( device.getCanCreateBrick ( ) ) { return null ; } return org.ovirt.engine.ui.webadmin.widget.table.column.StorageDeviceStatusColumn.resources.lockImage ( ) ; }
private boolean CanFindAnyVds ( java.util.List < java.lang.String > messages , boolean isMigrate ) { return CanFindVdsToRun ( messages , isMigrate , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDAO ( ) . getAllOfTypes ( new org.ovirt.engine.core.common.businessentities.VDSType [ ] { org.ovirt.engine.core.common.businessentities.VDSType.VDS , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode } ) ) ; }
public void allowEmptyProfileForNonHostedEngineVm ( ) { vm.setOrigin ( OriginType.RHEV ) ; org.hamcrest.MatcherAssert.assertThat ( validator.validateProfileNotEmptyForHostedEngineVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
void onIsValidPropertyChange ( org.ovirt.engine.ui.uicommonweb.models.Model model ) { if ( model.getIsValid ( ) ) { markAsValid ( ) ; } else { markAsInvalid ( model.getInvalidityReasons ( ) ) ; } }
public void setParentParameters ( org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { parentParameters = parameters ; }
public void getVmTemplateDefault ( ) { final org.ovirt.engine.core.common.businessentities.VmTemplate t = b.getVmTemplate ( ) ; org.junit.jupiter.api.Assertions.assertNull ( t ) ; }
public static org.ovirt.engine.api.extensions.ExtMap fetchPrincipalRecord ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , java.lang.String principal , boolean resolveGroups , boolean resolveGroupsRecursive ) { return org.ovirt.engine.core.aaa.AuthzUtils.fetchPrincipalRecordImpl ( extension , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Authz.InvokeKeys.PRINCIPAL , principal ) , resolveGroups , resolveGroupsRecursive ) ; }
public void handleVdsMaintenanceTimeout ( org.ovirt.engine.core.compat.Guid vdsId ) { backend.runInternalAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( java.util.Arrays.asList ( vdsId ) , true ) ) ; }
public void getAllForVmForPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( FixturesTool.VM_RHEL5_POOL_50 , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; assertVmGuestAgentInterfaceForVm ( interfaces ) ; }
public boolean isVisible ( ) { return ( getDetailModel ( ) . getPath ( ) ) != null ; }
public void setNoTaskMgrExecution ( boolean noTaskMgrExecution ) { this . consoleOptions.setNoTaskMgrExecution ( noTaskMgrExecution ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTasksStatusesByTasksIDsQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . pollTasks ( org.ovirt.engine.core.bll.GetTasksStatusesByTasksIDsQuery.getParameters ( ) . getTasksIDs ( ) ) ) ; }
public void validateVirtOnlySucceeds ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.validate ( ) ) ; }
org.ovirt.engine.core.common.businessentities.AsyncTask getByVdsmTaskId ( org.ovirt.engine.core.compat.Guid vdsmTaskId ) ;
public void rollbackQuota ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > list = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ; list.add ( getQuotaId ( ) ) ; org.ovirt.engine.core.bll.RunVmCommand.getQuotaManager ( ) . rollbackQuota ( org.ovirt.engine.core.bll.RunVmCommand.getStoragePool ( ) , list ) ; }
protected void setStatus ( ) { if ( org.ovirt.engine.core.bll.pm.StartVdsCommand.getParameters ( ) . isChangeHostToMaintenanceOnStart ( ) ) { setStatus ( VDSStatus.Maintenance ) ; } else { setStatus ( VDSStatus.Reboot ) ; } }
public void disableCifs ( ) { accessProtocols.remove ( AccessProtocol.CIFS ) ; setOption ( GlusterConstants.OPTION_USER_CIFS , GlusterConstants.DISABLE ) ; }
private java.lang.String getPoolSharedLockMessage ( ) { return new java.lang.StringBuilder ( EngineMessage.ACTION_TYPE_FAILED_VM_POOL_IS_USED_FOR_CREATE_VM.name ( ) ) . append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.AddVmCommand.getVmName ( ) ) ) . toString ( ) ; }
public void testNonExistentType ( ) { org.junit.jupiter.api.Assertions.assertFalse ( comp.validateFieldValue ( ProviderConditionFieldAutoCompleter.TYPE , "foo" ) ) ; }
protected java.lang.String prepareImage ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal = runVdsCommand ( VDSCommandType.PrepareImage , getPrepareParameters ( vdsId ) ) ; return ( ( org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc ) ( vdsRetVal.getReturnValue ( ) ) ) . getImagePath ( ) ; }
private void handleCancelled ( ) { log.info ( "Transfer cancelled for {}" , getTransferDescription ( ) ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.CANCELLED ) ; updateEntityPhase ( ImageTransferPhase.FINALIZING_FAILURE ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return new org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback ( ) ; }
public javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.Watchdog > createWatchdog ( org.ovirt.engine.sdk.entities.Watchdog value ) { return new javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.Watchdog > ( org.ovirt.engine.sdk.entities.ObjectFactory._Watchdog_QNAME , org.ovirt.engine.sdk.entities.Watchdog.class , null , value ) ; }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class ) . poolForDataCenter ( params.getStoragePoolId ( ) ) ; }
private void assertCompareTo ( org.ovirt.engine.core.common.businessentities.VmDevice device1 , org.ovirt.engine.core.common.businessentities.VmDevice device2 ) { org.junit.jupiter.api.Assertions.assertTrue ( ( ( device2.compareTo ( device1 ) ) > 0 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ( device1.compareTo ( device2 ) ) < 0 ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel flush ( ) { quotaClusterTable.flush ( ) ; quotaStorageTable.flush ( ) ; return driver.flush ( ) ; }
private void scheduleTooltipUpdate ( ) { if ( tooltipUpdateScheduled ) { return ; } com.google.gwt.core.client.Scheduler.get ( ) . scheduleFinally ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { applyTooltip ( ) ; tooltipUpdateScheduled = false ; } } ) ; tooltipUpdateScheduled = true ; }
protected boolean canAddDomain ( ) { return org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.checkExistingStorageDomain ( ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) , UsbPolicy.ENABLED_NATIVE ) ; }
protected int getEntitiesTotalCount ( ) { return 10 ; }
public void setVmPid ( java.lang.Integer value ) { this . vmPid = value ; }
public void testHasUniqueNamePersistingNewRecordWithNullId ( ) { org.hamcrest.MatcherAssert.assertThat ( callHasUniqueName ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null , "macPool1" , "whatever" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity , org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { commandsRepository.persistCommand ( cmdEntity , cmdContext ) ; }
protected void executeCommand ( ) { getSyncJobInstance ( ) . refreshHooksInCluster ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getCluster ( ) , true ) ; org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.setSucceeded ( true ) ; }
com.google.gwt.safehtml.shared.SafeHtml roleOnUser ( java.lang.String roleName , java.lang.String userName ) ;
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { if ( ! ( isUsingSPDMFlow ( ) ) ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.moveImage ; } return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ; }
public void networkDoesntExist ( ) { simulateVdsGroupExists ( ) ; assertCanDoActionFailure ( VdcBllMessages.NETWORK_NOT_EXISTS.toString ( ) ) ; }
protected org.ovirt.engine.core.dao.NetworkDAO getNetworkDAO ( ) { return org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getDbFacade ( ) . getNetworkDao ( ) ; }
public boolean canConnect ( ) { if ( ! ( canBeSelected ( ) ) ) { return false ; } return getForceVmStatusUp ( ) ? ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) : getEntity ( ) . isQualifiedForConsoleConnect ( ) ; }
public static boolean isActiveStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean isActive = ( ( storageDomain.getStatus ( ) ) != null ) && ( ( storageDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ; return isActive ; }
public void setStorageFormat ( org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormatType ) { getStorageStaticData ( ) . setStorageFormat ( storageFormatType ) ; }
public void setFirewall ( boolean doFirewall ) { if ( doFirewall ) { _iptables = _getIpTables ( ) ; _customizationConditions.add ( org.ovirt.engine.core.bll.VdsDeploy.CustomizationCondition.IPTABLES_OVERRIDE ) ; } }
protected void setupSelectedTemplate ( org.ovirt.engine.ui.uicommonweb.models.ListModel model , java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { getModel ( ) . getTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VmTemplate > firstOrDefault ( templates ) ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( disk.getIsNew ( ) ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.LUN ) ; revealDiskPanel ( disk ) ; } }
public void removeDiskFromVm ( org.ovirt.engine.core.compat.Guid vmGuid , org.ovirt.engine.core.compat.Guid diskId ) { vmDeviceDao.remove ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmGuid ) ) ; baseDiskDao.remove ( diskId ) ; }
public org.ovirt.engine.core.bll.ValidationResult parentEntityNotChanged ( ) { if ( java.util.Objects.equals ( getProfile ( ) . getStorageDomainId ( ) , getProfileFromDb ( ) . getStorageDomainId ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_CHANGE_PROFILE ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNetworkSetCorrectly ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL ) . unless ( ( ( network.isVmNetwork ( ) ) || ( org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork ( getDataCenter ( ) . getcompatibility_version ( ) ) ) ) ) ; }
public void saveAllInBatch ( java.util.Collection < T > entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDao.getCallsHandler ( ) . executeStoredProcAsBatch ( org.ovirt.engine.core.dao.MassOperationsGenericDao.getProcedureNameForSave ( ) , entities , getBatchMapper ( ) ) ; }
private void testActionAllowed ( ) { org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( cmd ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > object ) { return object.getSecond ( ) . getClusterName ( ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createIdParameterMapper ( org.ovirt.engine.core.compat.Guid id ) { return getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ; }
private void flushCheckBoxes ( org.ovirt.engine.ui.common.widget.uicommon.popup.console.EntityModelValueCheckBoxEditor < org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > ... checkBoxes ) { for ( org.ovirt.engine.ui.common.widget.uicommon.popup.console.EntityModelValueCheckBoxEditor < org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > checkBox : checkBoxes ) { checkBox.asEditor ( ) . getSubEditor ( ) . getValue ( ) ; } }
public boolean isQuotaDefault ( ) { return this . vmStatic.isQuotaDefault ( ) ; }
public void updateGlusterServerHook ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook ) ;
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "status" ) ) { updateActionAvailability ( ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return ( object.getProvidedBy ( ) ) == null ? "" : object.getProviderName ( ) ; }
public void testVms ( ) { testValidSql ( "Vms:" , "SELECT * FROM ((SELECT vms.* FROM vms ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: storage.name = 111" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm: template.name = temp1" , "SELECT * FROM ((SELECT vms.* FROM vms LEFT OUTER JOIN vm_templates_storage_domain ON vms.vmt_guid=vm_templates_storage_domain.vmt_guid WHERE vm_templates_storage_domain.name LIKE temp1 ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getAllRelevantQuotasForVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroupId , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) ;
public long getTotalMemorySizeInBytes ( ) { return ( ( ( long ) ( ( ( getVmMemSizeMb ( ) ) + 200 ) + ( 64 * ( getNumOfMonitors ( ) ) ) ) ) * 1024 ) * 1024 ; }
protected boolean shouldDestroyOnClose ( ) { return true ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl ( org.ovirt.engine.core.common.queries.QueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , boolean isPerformUserCheck ) { return runQueryImpl ( actionType , parameters , isPerformUserCheck , null ) ; }
public void setSearchString ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( searchString , value ) ) ) { searchString = value ; SearchStringChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.network.NetworkView selectedItem ) { driver.edit ( getDetailModel ( ) ) ; formBuilder.update ( getDetailModel ( ) ) ; }
public java.lang.Object runInTransaction ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . get ( storagePool.getId ( ) ) ; pool.setSpmVdsId ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( pool ) ; return null ; }
public void testFromBackendToRest ( ) { testStatusMapping ( StoragePoolStatus.Contend , DataCenterStatus.CONTEND ) ; testStatusMapping ( StoragePoolStatus.Maintenance , DataCenterStatus.MAINTENANCE ) ; testStatusMapping ( StoragePoolStatus.NotOperational , DataCenterStatus.NOT_OPERATIONAL ) ; testStatusMapping ( StoragePoolStatus.Problematic , DataCenterStatus.PROBLEMATIC ) ; testStatusMapping ( StoragePoolStatus.Uninitialized , DataCenterStatus.UNINITIALIZED ) ; testStatusMapping ( StoragePoolStatus.Up , DataCenterStatus.UP ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > getTagsAttachedToObject ( ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.tags > ( ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; }
public void validateFailsIsoVersionNotCompatible ( ) { mockVdsWithOsVersion ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION ) ; org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters ( ) ; param.setoVirtIsoFile ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME ) ; org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = createCommand ( param ) ; org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithValidateMessage ( command , EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION ) ; }
public void rerun ( ) { decreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmToServerCommand.getDestinationVds ( ) . getId ( ) ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.determineMigrationFailueForAuditLog ( ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.log ( ) ; }
public static org.ovirt.engine.core.common.mode.ApplicationMode getUiMode ( ) { java.lang.String applicationModeValue = getValueFrom ( "applicationMode" ) ; try { return org.ovirt.engine.core.common.mode.ApplicationMode.from ( java.lang.Integer.parseInt ( applicationModeValue ) ) ; } catch ( java.lang.NumberFormatException ex ) { return null ; } }
private static org.ovirt.engine.core.bll.tasks.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.tasks.AsyncTaskManager.getInstance ( org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco ) ; }
public void updateRunButton ( org.ovirt.engine.ui.uicommonweb.UICommand command , boolean isPool ) { runButton.setTooltipText ( ( isPool ? org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants.takeVm ( ) : org.ovirt.engine.ui.userportal.section.main.view.tab.basic.MainTabBasicListItemView.constants.runVm ( ) ) ) ; updateButton ( runButton , command ) ; }
private org.ovirt.engine.api.model.StorageDomain getStorageDomainById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.api.model.StorageDomain.class , QueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) ) ; }
private void initHandlers ( ) { mTagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler ( ) ; org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.ovirt.engine.core.bll.VdsHandler.Init ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.Init ( ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
protected java.lang.String getFormattedLunId ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun , java.lang.String usedByEntityName ) { return java.lang.String.format ( "%1$s (%2$s)" , lun.getLUNId ( ) , usedByEntityName ) ; }
public static void RunPublicQuery ( final org.ovirt.engine.core.common.queries.VdcQueryType queryType , final org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( queryType , parameters , callback ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { getBehavior ( ) . deactivateInstanceTypeManager ( ) ; updateWatchdogItems ( ( ( java.util.HashSet < org.ovirt.engine.core.common.businessentities.VmWatchdogType > ) ( returnValue.getReturnValue ( ) ) ) ) ; getBehavior ( ) . activateInstanceTypeManager ( ) ; }
public org.ovirt.engine.ui.common.widget.table.cell.ImageResourceCell getCell ( ) { return ( ( org.ovirt.engine.ui.common.widget.table.cell.ImageResourceCell ) ( super . getCell ( ) ) ) ; }
public void testFindStorageDomainForMemoryWithSingleDomain ( ) { verifyDomainForMemory ( java.util.Collections.singletonList ( validStorageDomain ) ) ; }
public < T extends java.lang.Enum < ? > > void snapshotEntityStatus ( org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus < ? , T > entity , T status ) ;
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback ) { runMultipleAction ( actionType , parameters , callback , null ) ; }
protected void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { command.Execute ( ) ; }
protected boolean canDoAction ( ) { if ( ! ( entityExists ( ) ) ) { return failCanDoAction ( ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . isVm ( ) ? org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND : org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST ) ) ; } return true ; }
public boolean isValid ( java.lang.String name , javax.validation.ConstraintValidatorContext context ) { return ( org.ovirt.engine.core.common.validation.NfsMountPointConstraint.LINUX_MOUNT_POINT_PATTERN.matcher ( name ) . matches ( ) ) && ( org.ovirt.engine.core.common.validation.NfsMountPointConstraint.ASCII_PATTERN.matcher ( name ) . matches ( ) ) ; }
public void versionHigherThanCluster ( ) { storagePoolWithVersionHigherThanCluster ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS ) ; }
public java.util.List < org.ovirt.engine.core.common.job.Step > getStepsByJobIdForVdsmAndGluster ( org.ovirt.engine.core.compat.Guid jobId ) { return multipleResults ( getEntityManager ( ) . createNamedQuery ( "Step.getStepsByJobIdForVdsmAndGluster" , org.ovirt.engine.core.common.job.Step.class ) . setParameter ( "jobId" , jobId ) . setParameter ( "systemType" , java.util.EnumSet.of ( ExternalSystemType.VDSM , ExternalSystemType.GLUSTER ) ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < T > items = returnValue.getReturnValue ( ) ; java.util.Collections.sort ( items , comparator ) ; setItems ( items ) ; }
public org.ovirt.engine.core.bll.ValidationResult interfaceHasNameSet ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.HOST_NETWORK_INTERFACE_DOES_NOT_HAVE_NAME_SET ) . when ( ( ( iface.getName ( ) ) == null ) ) ; }
public void testModifyPoolMethod ( ) throws java.lang.Exception { expectNotInitializedException ( ) ; pool.modifyPool ( new org.ovirt.engine.core.common.businessentities.MacPool ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.aaa.DbUser getLoggedInUser ( java.lang.String sessionId ) { return ( ( org.ovirt.engine.core.common.businessentities.aaa.DbUser ) ( runQuery ( QueryType.GetUserBySessionId , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , sessionId ) ) ) ; }
public void testAddValueNull ( ) { paramSource.addValue ( paramName , null ) ; org.junit.jupiter.api.Assertions.assertNull ( paramSource.getValue ( paramName ) , "wrong value returned from parameter source" ) ; }
protected void executeCommand ( ) { getMacPoolDao ( ) . remove ( getMacPoolId ( ) ) ; poolPerDc.removePool ( getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview ( org.ovirt.engine.core.compat.Guid vmId ) { return vmNotInStatus ( vmId , SnapshotStatus.IN_PREVIEW , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public void getJobById ( ) { org.junit.jupiter.api.Assertions.assertNotNull ( jobRepository.getJob ( job.getId ( ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP , job.getJobSubjectEntities ( ) ) ; }
public void onPowerringUp ( ) { decreasePendingVm ( org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDAO ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getNetworkByName ( java.lang.String networkName , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , org.ovirt.engine.core.compat.Guid dataCenterId ) { if ( clusterNetworks != null ) { return clusterNetworks.get ( networkName ) ; } else { return networkDao.getByNameAndDataCenter ( networkName , dataCenterId ) ; } }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createIdParameterMapper ( java.lang.String id ) { return getCustomMapSqlParameterSource ( ) . addValue ( "lun_id" , id ) ; }
public void testCheckVmHostDeviceAvailabilityOnAlreadyAllocatedDevice ( ) { org.junit.Assert.assertTrue ( dao.checkVmHostDeviceAvailability ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID_2 , FixturesTool.VDS_RHEL6_NFS_SPM ) ) ; }
com.gwtplatform.mvp.client.proxy.PlaceRequest resolveMainSectionPlace ( org.ovirt.engine.core.common.mode.ApplicationMode uiMode ) { switch ( uiMode ) { case GlusterOnly : return org.ovirt.engine.ui.common.place.PlaceRequestFactory.get ( WebAdminApplicationPlaces.volumeMainTabPlace ) ; case VirtOnly : case AllModes : default : return defaultMainSectionRequest ; } }
public void testGetForStoragePoolWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , FixturesTool.STORAGE_POOL_NFS ) ; org.junit.Assert.assertNull ( result ) ; }
public void testChangeToExistingName ( ) { prepareVmToPassValidate ( ) ; mockSameNameQuery ( true ) ; org.junit.Assert.assertFalse ( "validate should have failed with vm name already in use." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ; }
protected void endSuccessfully ( ) { endRemoveCinderDisk ( org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand.getParameters ( ) . getRemovedVolume ( ) ) ; }
public void parseLunFromXmlRpcReturnsFcpForFcp ( ) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommandTest.testParseLunFromXmlRpcForDevtypeField ( StorageType.FCP , GetDeviceListVDSCommand.DEVTYPE_VALUE_FCP ) ; }
public void lowerVersionHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addHostsToCluster ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
private java.lang.String generateFromStatement ( org.ovirt.engine.core.searchbackend.SyntaxContainer syntax ) { return generateFromStatement ( syntax , true ) ; }
public int compare ( java.lang.String str1 , java.lang.String str2 ) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp ( str1 , str2 ) ; }
private org.ovirt.engine.api.model.Network getNetwork ( ) { return getEntity ( org.ovirt.engine.api.model.Network.class , VdcQueryType.GetNetworkById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , guid.toString ( ) ) ; }
public static org.ovirt.engine.sdk.entities.StatisticKind fromValue ( java.lang.String v ) { return org.ovirt.engine.sdk.entities.StatisticKind.valueOf ( v ) ; }
protected abstract void perform ( ) ;
public T convert ( java.lang.Object source ) { return ( ( T ) ( source ) ) ; }
private java.lang.String getRequestName ( org.ovirt.api.metamodel.concepts.Method method ) { return ( javaNames.getJavaClassStyleName ( getFullName ( method ) ) ) + "Request" ; }
protected void SelectedItemsChanged ( ) { super . SelectedItemsChanged ( ) ; UpdateActionAvailability ( ) ; UpdateConsoleModels ( ) ; }
protected void executeCommand ( ) { registerRollbackHandler ( new org.ovirt.engine.core.bll.RemoveMacPoolCommand.CustomTransactionCompletionListener ( ) ) ; getMacPoolDao ( ) . remove ( getMacPoolId ( ) ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . removePool ( getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
public java.lang.String getJsonHost ( ) { return jsonHost ; }
public int compareTo ( org.ovirt.engine.core.common.businessentities.VmDevice other ) { return org.ovirt.engine.core.common.businessentities.BusinessEntityComparator.< org.ovirt.engine.core.common.businessentities.VmDevice , org.ovirt.engine.core.common.businessentities.VmDeviceId > newInstance ( ) . compare ( this , other ) ; }
public java.lang.Boolean convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) : java.lang.Boolean.FALSE ; }
protected void RemoveVmFromDb ( ) { removeLunDisks ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmUsers ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmNetwork ( ) ; new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmStatic ( ) ; }
public static java.lang.String getMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String value = "" ; if ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.containsKey ( logType ) ) { value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.get ( logType ) ; } return value ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( ) { if ( ( storageDomain ) == null ) { storageDomain = getDbFacade ( ) . getStorageDomainDao ( ) . get ( getProfile ( ) . getStorageDomainId ( ) ) ; } return storageDomain ; }
public boolean isClientWindowsExplorer ( ) { return ( isClientWindows ( ) ) && ( clientBrowserType ( ) . equalsIgnoreCase ( "Explorer" ) ) ; }
public void setEnumTitle ( java.lang.Enum < ? > enumObj ) { setTitle ( org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . translate ( enumObj ) ) ; }
public org.ovirt.vdsmfake.domain.Host getActiveHost ( ) { final java.lang.String serverName = org.ovirt.vdsmfake.ContextHolder.getServerName ( ) ; final org.ovirt.vdsmfake.domain.Host host = org.ovirt.vdsmfake.domain.VdsmManager.getInstance ( ) . getHostByName ( serverName ) ; return host ; }
private void doFinish ( ) { windowModel.StopProgress ( ) ; cancel ( ) ; ForceRefresh ( ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getVds ( org.ovirt.engine.core.compat.Guid id ) { return vdsDao.get ( id ) ; }
public void validateFailureOnMovingLunDisk ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) , null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void testSave ( ) { dao.save ( newUser ) ; org.ovirt.engine.core.common.businessentities.DbUser result = dao.getByUsernameAndDomain ( newUser.getLoginName ( ) , newUser.getDomain ( ) ) ; org.junit.Assert.assertEquals ( newUser , result ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT ) , ValidationResult.VALID ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDynamic > getAllRunningForVds ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) ; org.springframework.jdbc.core.RowMapper < org.ovirt.engine.core.common.businessentities.VmDynamic > mapper = createEntityRowMapper ( ) ; return getCallsHandler ( ) . executeReadList ( "GetVmsDynamicRunningOnVds" , mapper , parameterSource ) ; }
public void testIsNetworkInSyncWhenMtuSameViaDefault ( ) { org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues ( ) ; iface.setMtu ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.DEFAULT_MTU_VALUE ) ; network.setMtu ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.VALUE_DENOTING_THAT_MTU_SHOULD_BE_SET_TO_DEFAULT_VALUE ) ; org.hamcrest.MatcherAssert.assertThat ( testedInstanceWithSameNonQosValues.isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void getUsbPolicyIsSetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( UsbPolicy.DISABLED , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void testGetTreeForEntityWithVdsType ( ) { baseTestGetTreeForEntity ( FixturesTool.VDS_RHEL6_NFS_SPM , VdcObjectType.VDS , org.ovirt.engine.core.dao.PermissionDaoTest.CLUSTER_ID ) ; }
private void iconCleanup ( ) { vmIconDao.removeAllUnusedIcons ( ) ; }
public void nameIsEmpty ( ) { org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( "" ) ; org.junit.Assert.assertThat ( validator.nameNotEmpty ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY ) ) ; }
public java.lang.String getClusterName ( ) { if ( ( clusterName ) == null ) { if ( ( getCluster ( ) ) != null ) { clusterName = getCluster ( ) . getName ( ) ; } else { clusterName = "" ; } } return clusterName ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.jupiter.api.Assertions.assertFalse ( filter.test ( storageDomain ) ) ; }
public void setBootProtocolsAvailable ( boolean value ) { if ( ( bootProtocolsAvailable ) != value ) { bootProtocolsAvailable = value ; updateCanSpecifyIpv4 ( ) ; updateCanSpecifyIpv6 ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "BootProtocolsAvailable" ) ) ; } }
public void validateDescriptionOkSucceeds ( ) { org.junit.jupiter.api.Assertions.assertTrue ( command.validate ( ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; }
public javax.ws.rs.core.Response unregisteredStorageDomainsDiscover ( org.ovirt.engine.api.v3.types.V3Action action ) { return adaptAction ( getDelegate ( ) :: unregisteredStorageDomainsDiscover , action ) ; }
public void setDisplaySecurePort ( java.lang.Integer value ) { this . vmDynamic.setDisplaySecurePort ( value ) ; }
protected boolean isStorageWithSameNameExists ( ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainStaticDao ( ) . getByName ( getStorageDomain ( ) . getStorageName ( ) ) ) != null ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.HasFreeVmsInPoolQuery.getQueryReturnValue ( ) . setReturnValue ( ( ! ( org.ovirt.engine.core.bll.VmPoolCommandBase.getVmToAttach ( org.ovirt.engine.core.bll.HasFreeVmsInPoolQuery.getParameters ( ) . getPoolId ( ) ) . equals ( Guid.Empty ) ) ) ) ; }
public void passthroughProfileDoesNotContainFilterIdButDefaultWillBeUsed ( ) { passthroughProfileContainsSupportedPropertiesTest ( true , false , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID , null ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( true ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( ) { return org.ovirt.engine.ui.common.widget.table.resize.ResizableHeader.TEMPLATE.templatedContent ( style.cellTableHeaderContent ( ) , text ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Label , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.ClusterAffinityLabelListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.SubTabClusterAffinityLabelPresenter.constants.affinityLabelsSubTabLabel ( ) , 7 , modelProvider ) ; }
public static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > findGroupsByQuery ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final java.lang.String query ) { return org.ovirt.engine.core.aaa.AuthzUtils.queryGroups ( extension , namespace , org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap ( query , Authz.QueryEntity.GROUP ) ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel object ) { driver.edit ( object ) ; }
private void refreshCachedVds ( ) { cachedVds = dbFacade.getVdsDao ( ) . get ( getVdsId ( ) ) ; setMonitoringNeeded ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotConfigReturnForXmlRpc glusterSnapshotConfigList ( org.ovirt.engine.core.compat.Guid clusterId ) ;
public org.ovirt.engine.core.common.businessentities.DbUser getLoggedInUser ( ) { return loggedInUser ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateReportsAvailability ( constants ) ; }
public void canDoActionFailsUnsupportedExportFormat ( ) { sd.setStorageDomainType ( StorageDomainType.ImportExport ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST ) ; }
public org.ovirt.engine.api.model.Disks list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllDisks , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.Disk ) ) ; } }
protected void removeVmFromDb ( ) { removeLunDisks ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.removeVmUsers ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.removeVmNetwork ( ) ; new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmCommand.removeVmStatic ( ) ; }
protected void executeVdsBrokerCommand ( ) { hostDevListReturn = org.ovirt.engine.core.vdsbroker.HostDevListByCapsVDSCommand.getBroker ( ) . hostDevListByCaps ( ) ; org.ovirt.engine.core.vdsbroker.HostDevListByCapsVDSCommand.proceedProxyReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > devices = vdsBrokerObjectsBuilder.buildHostDevices ( hostDevListReturn.devices ) ; attachHostIdToDevices ( devices ) ; setReturnValue ( devices ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . isQualifiedForLiveSnapshotMerge ( ) ? new org.ovirt.engine.core.bll.RemoveSnapshotCommandCallback ( ) : null ; }
public boolean isAutoSuspend ( ) { return this . vmStatic.getis_auto_suspend ( ) ; }
private boolean isNextRunRequested ( ) { return org.ovirt.engine.api.common.util.QueryHelper.getBooleanMatrixParameter ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmResource.NEXT_RUN , true , false ) ; }
private void RemoveVdsFromCollection ( ) { runVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ) ; }
private void updateAuditLogFailedToUpdateHost ( java.lang.String vdsName ) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.addCustomValue ( "VdsName" , vdsName ) ; auditLogDirector.log ( this , AuditLogType.USER_EXTEND_DISK_SIZE_UPDATE_HOST_FAILURE ) ; }
protected void activeDetailModelChanged ( ) { super . activeDetailModelChanged ( ) ; }
public void addColumnWithHtmlHeader ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerHtml ) { table.addColumnWithHtmlHeader ( column , headerHtml ) ; tableHeader.addColumnWithHtmlHeader ( column , headerHtml ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress ( result.getState ( ) ) ; cancel ( ) ; }
public boolean isStorageDomainInProcess ( ) { return ( ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.PreparingForMaintenance ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Detaching ) ) ; }
protected void updateModel ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice , boolean value ) { spice.getOptions ( ) . setRemapCtrlAltDelete ( value ) ; }
public void setUpContainer ( ) { container = org.mockito.Mockito.spy ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance ( ) ) ; clearSession ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult requiredValuesPresent ( ) { if ( ( getQos ( ) . getCpuLimit ( ) ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_QOS_MISSING_VALUES ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void checkMissingPrimaryIpv4Address ( ) { initIpConfiguration ( ) ; initIpv6ConfigurationDetails ( Ipv6BootProtocol.AUTOCONF , false , false ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setSelectedItem ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView value ) { super . setSelectedItem ( value ) ; updateLinkChangability ( ) ; }
public void setVersion ( java.lang.String text ) { versionLabel.setText ( dynamicMessages.ovirtVersionAbout ( text ) ) ; }
private void initIpv4ConfigurationDetails ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol ipv4BootProtocol , boolean initAddress , boolean initNetmask ) { initIpv4ConfigurationWithBootProtocol ( ipv4BootProtocol ) ; if ( initAddress ) { initIpv4ConfigurationAddress ( ) ; } if ( initNetmask ) { initIpv4ConfigurationNetmask ( ) ; } }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue RunAutoQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backend.RunAutoQuery ( actionType , parameters ) ; return returnValue ; }
private void frontend_QueryComplete ( ) { ( queryCounter ) -- ; if ( ( queryCounter ) == 0 ) { stopProgress ( ) ; } }
public boolean showDefaultValue ( ) { java.lang.String quotaName = getModel ( ) . getQuotaName ( ) ; return ( quotaName == null ) || ( "" . equals ( quotaName ) ) ; }
public void cleaningCompensationDataAfterSuccess ( ) { log.debug ( ( "Command successfully executed, releasing macs: {}" + ( macsToReleaseOnCommit ) ) ) ; macPool.freeMacs ( macsToReleaseOnCommit ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetPolicyNotSetUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
com.google.gwt.safehtml.shared.SafeHtml imageContainerWithStyleClass ( java.lang.String style , java.lang.String styleClass , com.google.gwt.safehtml.shared.SafeHtml imageHtml ) ;
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > searchAuditLogEvents ( ) { return genericSearch ( auditLogDao , false ) ; }
public void testAddGroupWithExplicitDirectoryName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": allnames=" ) + ( NAMES [ 0 ] ) ) , SearchType.DirectoryGroup , getDirectoryGroup ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddGroup , org.ovirt.engine.core.common.action.AddGroupParameters.class , new java.lang.String [ ] { "GroupToAdd" } , new java.lang.Object [ ] { new org.ovirt.engine.core.common.businessentities.DbGroup ( getDirectoryGroup ( 0 ) ) } , true , true , GUIDS [ 0 ] , VdcQueryType.GetDbGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( NAMES [ 0 ] ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
private void decreasePendingVm ( ) { decreasePendingVm ( org.ovirt.engine.core.bll.RunVmCommandBase.getVm ( ) . getStaticData ( ) ) ; }
public boolean canConnect ( ) { if ( ! ( canBeSelected ( ) ) ) { return false ; } return getForceVmStatusUp ( ) ? ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) : isVmRunning ( ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.VmTemplate , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public void getTagIdAndChildrenNamesAsList ( java.util.HashSet < java.lang.String > tagIds ) { tagIds.add ( gettag_name ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Tags tag : _children ) { tag.getTagIdAndChildrenNamesAsList ( tagIds ) ; } }
private org.ovirt.engine.core.dao.NetworkDAO getNetworkDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDAO ( ) ; }
public void setBootSequence ( org.ovirt.engine.ui.uicommonweb.models.vms.BootSequenceModel value ) { if ( ( bootSequence ) != value ) { bootSequence = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "BootSequence" ) ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( returnValue ) ) ; diskModel.getStorageDomain ( ) . setSelectedItem ( storageDomain ) ; }
public org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase addCustomValue ( final java.lang.String name , final java.lang.String value ) { allocateCustomValues ( ) ; customValues.put ( name.toLowerCase ( ) , value ) ; return this ; }
public void setTooltip ( com.google.gwt.safehtml.shared.SafeHtml tooltip , org.gwtbootstrap3.client.ui.constants.Placement placement ) { buttonTooltip.setHtml ( tooltip ) ; buttonTooltip.setPlacement ( placement ) ; }
protected void UndoActionOnSourceAndDestination ( ) { if ( ( getDestinationDiskImage ( ) ) != null ) { RemoveSnapshot ( getDestinationDiskImage ( ) ) ; } if ( ( getDiskImage ( ) ) != null ) { UnLockImage ( ) ; } }
public boolean isVisible ( ) { return getDetailModel ( ) . isLun ( ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "OpenStackImageProviderProperties [pluginType=" ) . append ( ", tenantName=" ) . append ( getTenantName ( ) ) . append ( "]" ) ; return builder.toString ( ) ; }
public java.lang.String getQuotaName ( ) { return this . vmStatic.getQuotaName ( ) ; }
public void setPort ( int port ) { this . consoleOptions.setPort ( port ) ; }
public int getVersion ( final java.util.Properties properties ) { int result = 0 ; try { result = java.lang.Integer.parseInt ( properties.getProperty ( org.ovirt.engine.core.branding.BrandingTheme.VERSION_KEY ) ) ; } catch ( java.lang.NumberFormatException nfe ) { } return result ; }
public void buildIdSetterStatement ( ) { org.hamcrest.MatcherAssert.assertThat ( tested.buildIdSetterStatement ( ) , org.hamcrest.CoreMatchers.equalTo ( "setElementId(owner.a.b.c, \"abcId\")" ) ) ; }
public org.ovirt.engine.api.model.Network get ( ) { org.ovirt.engine.api.model.Network entity = getNetwork ( ) ; if ( entity == null ) { return notFound ( ) ; } return addLinks ( map ( entity ) ) ; }
protected org.ovirt.engine.api.model.CreationStatus getAsynchronousStatus ( org.ovirt.engine.core.common.action.ActionReturnValue result ) { return getVdsmTasksStatus ( result ) ; }
public void vmIdNull ( ) { b.setVmId ( null ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( Guid.Empty , i ) ; }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VmTemplate.class ) , index ) ; }
private org.ovirt.engine.core.compat.Guid GetAnyVdsToRunOn ( ) { return getVdsToRunOn ( getVdsDAO ( ) . getVdsToRun ( new org.ovirt.engine.core.common.businessentities.VDSType [ ] { org.ovirt.engine.core.common.businessentities.VDSType.VDS , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode } , getVm ( ) . getvds_group_id ( ) , VDSStatus.Up , getVm ( ) . getnum_of_cpus ( ) ) ) ; }
public void testGetByOperatingSystemIdExisting ( ) { final org.ovirt.engine.core.common.businessentities.VmIconDefault vmIconDefault = dao.getByOperatingSystemId ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT.getOsId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT , vmIconDefault ) ; }
public void canDoActionDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initVmDiskImage ( false ) ; command.getImage ( ) . setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
public void testHostKey ( ) throws java.lang.Exception { org.junit.Assume.assumeNotNull ( TestCommon.sshd ) ; client.connect ( ) ; assertEquals ( TestCommon.sshd.getKey ( ) , client.getHostKey ( ) ) ; }
public void onEditorStateUpdate ( org.ovirt.engine.ui.common.widget.editor.EditorStateUpdateEvent event ) { if ( event.isValid ( ) ) { editorStateValid = true ; markAsValid ( ) ; } else { handleInvalidState ( ) ; } }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; if ( ( getAppListModel ( ) ) != null ) { getAppListModel ( ) . setEntity ( getSelectedItem ( ) ) ; } }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand command ) { org.mockito.Mockito.doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils ( ) ; org.mockito.Mockito.doReturn ( getUpServers ( ) ) . when ( glusterUtils ) . getAllUpServers ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.safehtml.shared.SafeHtml headerHtml , boolean present , java.lang.String width ) { ensureColumnPresent ( column , new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader ( headerHtml ) , present , width ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return createTask ( asyncTaskCreationInfo , parentCommand , null , entityType , entityIds ) ; }
public void write ( int b ) { if ( ( count ) < ( _max ) ) { super . write ( b ) ; } else { _truncated = true ; } }
private static java.lang.StringBuilder replaceAll ( java.lang.StringBuilder builder , java.lang.String oldText , java.lang.String newText ) { java.lang.String t = builder.toString ( ) ; return new java.lang.StringBuilder ( t.replaceAll ( org.ovirt.engine.core.searchbackend.ADSyntaxChecker.quote ( oldText ) , newText ) ) ; }
public boolean getAllowConsoleReconnect ( ) { return this . vmStatic.getAllowConsoleReconnect ( ) ; }
protected org.ovirt.engine.api.model.Snapshot addParents ( org.ovirt.engine.api.model.Snapshot snapshot ) { snapshot.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; snapshot.getVm ( ) . setId ( parentId.toString ( ) ) ; return snapshot ; }
public java.util.Collection < java.lang.String > getGroupNames ( ) { return java.util.Collections.unmodifiableCollection ( groupNames ) ; }
public org.ovirt.engine.core.common.businessentities.Tags lookupTagById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Tags.class , QueryType.GetTagByTagId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) , true ) ; }
private void onIsValidPropertyChange ( org.ovirt.engine.ui.uicommonweb.models.Model model ) { if ( model.getIsValid ( ) ) { markAsValid ( ) ; } else { markAsInvalid ( model.getInvalidityReasons ( ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithNoCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setName ( "Default" ) ; group.setId ( VDSGroup.DEFAULT_VDS_GROUP_ID ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
public void testFetchStoragePoolWithNoQuota ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = dao.getQuotaByStoragePoolGuid ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertEquals ( true , ( ( quotaList.size ( ) ) == 0 ) ) ; }
public void testBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplayIsFalse ( ) { doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( false , createNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel , org.ovirt.engine.ui.uicommonweb.models.disks.DiskTemplateListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.diskTemplateSubTabLabel ( ) , 2 , modelProvider ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > getAllWithQuery ( java.lang.String query ) { return getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.AuditLogDAODbFacadeImpl.auditLogRowMapper ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { editedVm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) ; vmInitLoaded ( editedVm ) ; }
public void setFenceAgents ( java.util.List < org.ovirt.engine.core.common.businessentities.FenceAgent > fenceAgents ) { this . fenceAgents = fenceAgents ; }
public static boolean isWindowsOsType ( int osType ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsIds.contains ( osType ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { fetchSSHFingerprint ( ) ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel PrepareFcpStorageForEdit ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel ( ) ; model.setRole ( storage.getStorageDomainType ( ) ) ; PrepareSanStorageForEdit ( model ) ; return model ; }
public org.ovirt.engine.core.compat.Guid getClusterId ( ) { return this . vmStatic.getClusterId ( ) ; }
public java.lang.String getEntityNewName ( ) { return org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain ( ) . getStorageName ( ) ; }
protected void executeCommand ( ) { tagsDirector.updateTag ( org.ovirt.engine.core.bll.UpdateTagCommand.getTag ( ) ) ; tagDao.update ( org.ovirt.engine.core.bll.UpdateTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.UpdateTagCommand.setSucceeded ( true ) ; }
public void testGetAsyncTaskEntitiesById ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.AsyncTasks > tasks = dao.getTasksByEntity ( FixturesTool.ENTITY_WITH_TASKS_ID ) ; org.junit.Assert.assertNotNull ( tasks ) ; org.junit.Assert.assertEquals ( tasks.size ( ) , 1 ) ; }
public void testParseReloadActionWithUser ( ) { parser.parse ( new java.lang.String [ ] { "-r" , "--user=username" } ) ; org.junit.jupiter.api.Assertions.assertEquals ( ConfigActionType.ACTION_RELOAD , parser.getConfigAction ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "username" , parser.getUser ( ) ) ; }
public java.lang.Long getGuestMemoryCached ( ) { return vmDynamic.getGuestMemoryCached ( ) ; }
public void setEventNotificationMethod ( org.ovirt.engine.core.common.EventNotificationMethods eventNotificationMethod ) { this . eventNotificationMethod = eventNotificationMethod ; }
public void onMainTabSelected ( ) { commonModelProvider.get ( ) . setSelectedItem ( org.ovirt.engine.ui.common.uicommon.model.MainTabModelProvider.getModel ( ) ) ; }
public void vdsIdRefNull ( ) { b.setVdsIdRef ( null ) ; final org.ovirt.engine.core.compat.Guid g = b.getVdsIdRef ( ) ; org.junit.Assert.assertNull ( g ) ; }
protected void addConnection ( org.ovirt.engine.core.common.businessentities.LUNs lun , org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx ) { if ( ( lun.getLunConnections ( ) ) == null ) { lun.setLunConnections ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ) ; } lun.getLunConnections ( ) . add ( cnx ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.UNFILTERED ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetFileFrom_InsanePath ( ) { java.io.File file = new java.io.File ( "/etc" ) ; java.io.File testFile = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath ( "/../hosts" , file ) ; org.junit.jupiter.api.Assertions.assertNull ( testFile , "testfile should be null" ) ; }
public void addSelectionChangeHandler ( com.google.gwt.view.client.SelectionChangeEvent.Handler selectionHandler ) { selectionHandlers.add ( errataTable.getSelectionModel ( ) . addSelectionChangeHandler ( selectionHandler ) ) ; }
public void onFailure ( java.lang.Throwable caught ) { processSessionIdException ( ) ; }
void addClearAllAction ( java.lang.String label , org.ovirt.engine.ui.uicommonweb.UICommand command , org.ovirt.engine.ui.webadmin.widget.alert.AuditLogActionCallback callback ) ;
public void run ( ) { if ( exSchedulerDiscovery.discover ( ) ) { reloadPolicyUnits ( ) ; } }
public void setConfigureClusterSnapshotOptionsCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { this . configureClusterSnapshotOptionsCommand = command ; }
public void testValidateLunDisk ( ) { org.mockito.Mockito.when ( getDiskDao ( ) . get ( getDiskImageGroupId ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void testRemoveNonExistant ( ) { setUpGetEntityExpectations ( 1 , true ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.resource.remove ( ) ) ) ; }
public java.util.List < java.lang.Boolean > readBooleans ( ) { java.util.List < java.lang.Boolean > booleans = new java.util.ArrayList < > ( ) ; for ( java.lang.String string : readStrings ( ) ) { booleans.add ( parseBoolean ( string ) ) ; } return booleans ; }
public void run ( ) { runInternalActionWithTasksContext ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.IdParameters ( getVm ( ) . getId ( ) ) ) ; }
private < T > void invokeCallable ( java.util.concurrent.Callable < T > callable ) { try { callable.call ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper.log.error ( "Error in CinderStorageHelper." , e ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > getTemplates ( ) { if ( ( templates ) == null ) { templates = getDbFacade ( ) . getVmTemplateDao ( ) . getAllForNetwork ( network.getId ( ) ) ; } return templates ; }
public Q resolve ( T id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { Q entity = lookupEntity ( id ) ; if ( entity == null ) { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException ( id.toString ( ) ) ; } return entity ; }
public void setVersion ( org.ovirt.engine.core.compat.RpmVersion value ) { mVdsDynamic.setVersion ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "Version" ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getQueryReturnValue ( ) . setReturnValue ( vdsDao.getHostsForStorageOperation ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . isLocalFsOnly ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSoundDevice ( vmBase.getId ( ) , vmBase.getOsId ( ) , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vmBase ) ) ; }
public void setHost ( java.lang.String host ) { this . host = ( host == null ) ? "" : host ; }
private void writeStructLink ( org.ovirt.api.metamodel.concepts.Link link ) { writer.writeStartElement ( "link" ) ; writeCommon ( link ) ; writeTypeRef ( link.getType ( ) ) ; writer.writeEndElement ( ) ; }
public void testValidateGatewayIsNotManagementNetworkAndMultipleGatewaysSupported ( ) { doTestValidateGateway ( "someGateway" , false , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void closeClone ( ) { setConfirmWindow ( null ) ; clearCachedAssignedVmNames ( ) ; }
public com.google.gwt.safehtml.shared.SafeHtml noButton ( java.lang.String value , com.google.gwt.safecss.shared.SafeStyles customStyle , java.lang.String id ) ;
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocationOnMock ) throws java.lang.Throwable { final org.ovirt.engine.core.common.businessentities.DiskImage oldDisk = createDiskImage ( ) ; oldDisk.setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert.assertNotSame ( oldDisk.getDiskInterface ( ) , parameters.getDiskInfo ( ) . getDiskInterface ( ) ) ; return oldDisk ; }
public double getActualDiskSize ( ) { return getDiskImageMap ( ) . values ( ) . stream ( ) . mapToDouble ( DiskImage :: getActualSize ) . sum ( ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "libvirtSecrets" , getLibvirtSecrets ( ) ) . append ( "clearUnusedSecrets" , getLibvirtSecrets ( ) ) ; }
public void install ( ) { org.ovirt.engine.ui.common.uicommon.SpicePluginImpl.logger.finer ( "Spice must be installed ahead..." ) ; installNatively ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult statusSupportedForHostUpgrade ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.CANNOT_UPGRADE_HOST_STATUS_ILLEGAL ) . unless ( org.ovirt.engine.core.common.ActionUtils.canExecute ( java.util.Arrays.asList ( host ) , org.ovirt.engine.core.common.businessentities.VDS.class , ActionType.UpgradeHost ) ) ; }
public void setWidth ( java.lang.String width , boolean isFixedLayout ) { table.setWidth ( width , isFixedLayout ) ; tableHeader.setWidth ( width , isFixedLayout ) ; }
protected void executeVdsBrokerCommand ( ) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getBroker ( ) . setupNetworks ( generateNetworks ( ) , generateBonds ( ) , generateOptions ( ) ) ; }
public void buildVmSerialNumber ( ) { new org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilder ( vm , getCluster ( ) , createInfo ) . buildVmSerialNumber ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsWithinThresholds ( ) { return validOrFirstFailure ( new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.ValidatorPredicate ( ) { @ java.lang.Override public org.ovirt.engine.core.bll.ValidationResult evaluate ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.StorageDomainValidator > entry ) { return getStorageDomainValidator ( entry ) . isDomainWithinThresholds ( ) ; } } ) ; }
public java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > getPassthroughVnicToVfMap ( ) { return passthroughVnicToVfMap ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( getParameters ( ) . getContainerId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.REMOTE_VM , getVmIsBeingImportedMessage ( ) ) ) ; }
public void setStoragesNames ( java.util.ArrayList < java.lang.String > storagesNames ) { this . storagesNames = storagesNames ; }
public int compare ( org.ovirt.engine.core.common.businessentities.AuditLog x , org.ovirt.engine.core.common.businessentities.AuditLog y ) { long xid = x.getAuditLogId ( ) ; long yid = y.getAuditLogId ( ) ; return java.lang.Long.valueOf ( xid ) . compareTo ( yid ) ; }
public org.ovirt.engine.api.model.Host get ( ) { return getVdsByVdsId ( ) ; }
public void parse ( ) throws java.lang.Exception { try { org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse ( java.lang.System.getProperty ( "osinfo.properties" ) ) ; } catch ( java.lang.Exception e ) { java.lang.System.err.println ( "oVirt-engine will fail to load with a broken osinfo properties file." ) ; java.lang.System.err.println ( "Please fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo." ) ; throw e ; } }
public void setAppList ( java.lang.String value ) { this . vmDynamic.setapp_list ( value ) ; }
public javax.ws.rs.core.Response remove ( ) { return adaptRemove ( getDelegate ( ) :: remove ) ; }
public void testGetVmDeviceByVmIdTypeAndDeviceFilteringSetToFlase ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = dao.getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID , VmDeviceGeneralType.DISK , "disk" , null , false ) ; org.ovirt.engine.core.dao.VmDeviceDAOTest.assertGetVMDeviceByIdTypeAndDeviceFullResult ( devices ) ; }
public void testJsonNullDiskDescription ( ) throws java.io.IOException { disk1.setDiskAlias ( "DiskAlias" ) ; disk1.setDiskDescription ( null ) ; org.ovirt.engine.core.bll.ImagesHandlerTest.assertDiskDescriptionMap ( disk1 ) ; }
public void edit ( M excludedListModel , M includedListModel , org.ovirt.engine.ui.uicommonweb.UICommand onIncludeButtonPressed , org.ovirt.engine.ui.uicommonweb.UICommand onExcludeButtonPressed ) { edit ( excludedListModel , includedListModel ) ; this . onIncludeButtonPressed = onIncludeButtonPressed ; this . onExcludeButtonPressed = onExcludeButtonPressed ; }
public boolean showMask ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return ! ( value.isVmUp ( ) ) ; }
private void mockDao ( ) { org.mockito.Mockito.when ( macPoolDao.getDefaultPool ( ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.MacPool ( ) ) ; }
private void logInfoIfNeeded ( org.ovirt.engine.core.common.businessentities.StoragePool pool , java.lang.String message , java.lang.Object ... args ) { if ( ! ( ovfOnAnyDomainSupported ( pool ) ) ) { log.info ( message , args ) ; } }
public void testLimit ( ) { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu ( null , new java.lang.Integer ( 16 ) , new java.lang.Integer ( 100 ) , 2 , 8 ) ; org.junit.jupiter.api.Assertions.assertEquals ( new java.lang.Integer ( 96 ) , maxVCpu ) ; }
java.lang.String numOfVmsInPoolInvalid ( int maxNumOfVms , int poolNameLength ) ;
protected void alertPowerManagementStatusFailed ( java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters ( ) . getTargetVdsID ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; auditLogDirector.log ( alert , AuditLogType.VDS_ALERT_FENCE_TEST_FAILED ) ; }
private boolean validateDestStorageAndSourceStorageOfSameTypes ( org.ovirt.engine.core.common.businessentities.StorageDomain destDomain , org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain ) { if ( ( destDomain.getStorageType ( ) . getStorageSubtype ( ) ) != ( sourceDomain.getStorageType ( ) . getStorageSubtype ( ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT ) ; } return true ; }
public void showStatus ( java.lang.String status ) { if ( refreshManager.getModelTimer ( ) . isActive ( ) ) { setTitle ( status ) ; } }
private boolean shouldReturnValue ( ) { return ( ! ( org.ovirt.engine.core.bll.GetConfigurationValueQuery.getParameters ( ) . isFiltered ( ) ) ) || ( org.ovirt.engine.core.bll.GetConfigurationValueQuery.getParameters ( ) . getConfigValue ( ) . nonAdminVisible ( ) ) ; }
public org.ovirt.engine.api.resource.aaa.SshPublicKeyResource getKeyResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.aaa.BackendSSHPublicKeyResource ( id , userId , this ) ) ; }
public void setVmtNumOfSockets ( int value ) { this . vmtNumOfSockets = value ; }
protected void ChangeDefualtHost ( ) { super . ChangeDefualtHost ( ) ; doChangeDefautlHost ( pool.getDedicatedVmForVds ( ) ) ; }
public boolean isCloudInitUsed ( ) { return ( ( getInitializationType ( ) ) == ( InitializationType.CloudInit ) ) && ( ! ( org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . isWindows ( getVmOsId ( ) ) ) ) ; }
public void setup ( ) { org.mockito.Mockito.when ( version.getValue ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.VmNicValidator ( nic , version ) ) ; org.mockito.Mockito.doReturn ( dbFacade ) . when ( validator ) . getDbFacade ( ) ; }
void execute ( int iterationId ) ;
public static org.ovirt.engine.api.model.ScsiGenericIO map ( org.ovirt.engine.api.model.ScsiGenericIO scsiGenericIO , org.ovirt.engine.api.model.ScsiGenericIO template ) { switch ( scsiGenericIO ) { case FILTERED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.ScsiGenericIO ; case UNFILTERED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.ScsiGenericIO ; default : return null ; } }
public void initialize ( java.util.List < org.ovirt.engine.core.common.businessentities.Disk > currentDisks ) { commonInitialize ( ) ; updateBootableFrom ( ( currentDisks != null ? currentDisks : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.RemoveNetworkAttachmentParameters params = new org.ovirt.engine.core.common.action.RemoveNetworkAttachmentParameters ( parent.getHostId ( ) , guid ) ; return performAction ( ActionType.RemoveNetworkAttachment , params ) ; }
public void setApplyLater ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > applyLater ) { this . applyLater = applyLater ; }
protected void attachStorageDomainToDataCenter ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper CINDERStorageHelper = new org.ovirt.engine.core.bll.storage.CINDERStorageHelper ( ) ; CINDERStorageHelper.setRunInNewTransaction ( false ) ; CINDERStorageHelper.attachCinderDomainToPool ( storageDomainId , storagePoolId ) ; CINDERStorageHelper.activateCinderDomain ( storageDomainId , storagePoolId ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.EntityModel model , java.lang.Boolean value ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkManageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel ) ( model ) ) ; networks.asEditor ( ) . flush ( ) . setMigrationNetwork ( clusterNetworkManageModel , value ) ; refreshNetworksTable ( ) ; }
public static java.lang.Integer getMinMemorySizeInMb ( int osId , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getMinimumRam ( osId , version ) ; }
protected void handleError ( ) { addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_FENCE_OPERATION_FAILED ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VAR__TYPE__HOST ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VAR__ACTION__RESTART ) ; log.error ( "Failed to run RestartVdsCommand on vds '{}'" , org.ovirt.engine.core.bll.RestartVdsCommand.getVdsName ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Tags > getAllForTemplate ( java.lang.String ids ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_ids" , ids ) ; return getCallsHandler ( ) . executeReadList ( "GetTagsByVmId" , org.ovirt.engine.core.dao.TagDAODbFacadeImpl.TagRowMapper.instance , parameterSource ) ; }
public void trace ( java.lang.Object msg ) { if ( log.isTraceEnabled ( ) ) { log.trace ( addPrefixToLogMessage ( msg ) ) ; } }
public org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel flush ( ) { neutronAgentWidget.flush ( ) ; vmwarePropertiesWidget.flush ( ) ; kvmPropertiesWidget.flush ( ) ; xenPropertiesWidget.flush ( ) ; return driver.flush ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) ;
private void saveTaskAndPutInMap ( java.lang.String taskKey , org.ovirt.engine.core.common.businessentities.AsyncTask task ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.saveAsyncTaskToDb ( task ) ; taskKeyToTaskIdMap.put ( taskKey , task.getTaskId ( ) ) ; }
void addExternallyManagedVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > externalVmList ) ;
public void testCDANonExistingVds ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vdsDaoMock ) . get ( vdsId ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail for non existing VDS" , command , EngineMessage.VDS_NOT_EXIST ) ; }
public void testGetAllForStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAllForStorageDomain ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > filterDataCenter ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > source ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( source , new org.ovirt.engine.ui.uicommonweb.Linq.StatusPredicate < > ( StoragePoolStatus.NotOperational ) . negate ( ) ) ; }
public void allVfsAreFree ( ) { allVfsAreFreeTest ( true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.allVfsAreFree ( networkDeviceHelper ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void trace ( java.lang.Object msg , java.lang.Throwable t ) { if ( log.isTraceEnabled ( ) ) { log.trace ( addPrefixToLogMessage ( msg ) , t ) ; } }
public java.lang.String getCshMappingUrl ( java.lang.String application ) { return ( ( ( ( org.ovirt.engine.ui.frontend.utils.FrontendUrlUtils.getRootURL ( ) ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.CSH_ROOT ) ) + "/" ) + application ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.JSON ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface lookupInterfaceById ( java.lang.String id ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getCollection ( ) ) { if ( iface.getId ( ) . toString ( ) . equals ( id ) ) { return iface ; } } return null ; }
public void setNoVncEnabled ( boolean enabled , java.lang.String reason ) { noVncImplRadioButton.setEnabled ( enabled ) ; noVncImplRadioButtonTooltip.setText ( ( enabled ? "" : reason ) ) ; }
protected org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand < org.ovirt.engine.core.common.action.UpdateVmDiskParameters > getCommand ( org.ovirt.engine.core.compat.Guid cmdId ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand ( cmdId ) ; }
public void testGetAllForStoragePoolFilteredWithPermissions ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao.getAllForStoragePool ( storagePool.getId ( ) , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; assertGetAllForStoragePoolValidResult ( result ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork model , java.lang.Boolean value ) { model.setPublicUse ( value ) ; refreshImportedNetworks ( ) ; }
public void testHyperVLinux ( ) { org.junit.jupiter.api.Assertions.assertFalse ( OsRepositoryImpl.INSTANCE.isHypervEnabled ( OsRepositoryImpl.INSTANCE.getOsIdByUniqueName ( "rhel7" ) , Version.v3_6 ) ) ; }
public void cleanup ( ) { redirectUri = null ; authStack = null ; state = null ; }
public void vmId ( ) { b.setVmId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , i ) ; }
private java.util.Optional < org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult > parseDiscoverResults ( java.lang.Object result ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult retValue = new org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult ( ) ; if ( ! ( retValue.populate ( result ) ) ) { return java.util.Optional.empty ( ) ; } return java.util.Optional.of ( retValue ) ; }
private org.ovirt.engine.core.bll.utils.ClusterUtils getClusterUtils ( ) { return org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance ( ) ; }
public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > > getLastVmsList ( ) { return lastVmsList ; }
public static boolean isMatch ( java.lang.String candidate , java.lang.String regEx ) { return new org.ovirt.engine.core.compat.Regex ( regEx ) . isMatch ( candidate ) ; }
public void setUp ( ) { setUpUnitVmModelExpectations ( model ) ; origVm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; setUpOrigVm ( origVm ) ; origVm.setDedicatedVmForVdsList ( org.ovirt.engine.ui.uicommonweb.models.vms.HOST_ID_2 ) ; origVm.setMigrationSupport ( org.ovirt.engine.ui.uicommonweb.models.vms.MIGRATION_SUPPORT_2 ) ; origVm.setMigrationDowntime ( org.ovirt.engine.ui.uicommonweb.models.vms.MIGRATION_DOWNTIME_2 ) ; }
public void formatStringTest ( ) { testMessages.addFallback ( DynamicMessageKey.APPLICATION_TITLE , "Testing 123: {0}" ) ; java.lang.String result = testMessages.formatString ( DynamicMessageKey.APPLICATION_TITLE , "1.1.1" ) ; org.junit.Assert.assertNotNull ( "There should be a result" ) ; org.junit.Assert.assertEquals ( "Result should be 'Testing 123: 1.1.1'" , "Testing 123: 1.1.1" , result ) ; }
public void setTargetProfileId ( org.ovirt.engine.core.compat.Guid id ) { targetProfileId = id ; }
public void setupMocks ( ) { setUpCommand ( ) ; mockGetStorageDomainList ( ) ; mockDbDao ( ) ; command.init ( ) ; }
public static org.ovirt.engine.core.compat.Version getEffective ( org.ovirt.engine.core.compat.Version vmCustomCompatibilityVersion , org.ovirt.engine.core.compat.Version clusterCompatibilityVersion , org.ovirt.engine.core.compat.Version defaultVersion ) { if ( vmCustomCompatibilityVersion != null ) { return vmCustomCompatibilityVersion ; } if ( clusterCompatibilityVersion != null ) { return clusterCompatibilityVersion ; } return defaultVersion ; }
protected org.ovirt.engine.core.dao.StorageServerConnectionDAO setUpStorageServerConnectionDAO ( ) { storageServerConnectionDAO = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageServerConnectionDAO.class ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionDao ( ) ) . thenReturn ( storageServerConnectionDAO ) ; return storageServerConnectionDAO ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__HOT_SET_MEMORY ) ; addValidationMessage ( EngineMessage.VAR__TYPE__VM ) ; addValidationMessageVariable ( "clusterVersion" , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm ( ) . getCompatibilityVersion ( ) ) ; addValidationMessageVariable ( "architecture" , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm ( ) . getClusterArch ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { java.lang.String volumeName = org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.getParameters ( ) . getVolumeName ( ) ; status = org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.getBroker ( ) . glusterVolumeSnapshotDeleteAll ( volumeName ) ; org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.proceedProxyReturnValue ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getWatchdogs ( ) { return getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getId ( ) , VmDeviceGeneralType.WATCHDOG ) ; }
protected void mockFenceAgent ( ) { fenceAgents = createSingleAgentList ( 1 ) ; org.mockito.Mockito.when ( fenceAgentDao.getFenceAgentsForHost ( fencedHost.getId ( ) ) ) . thenReturn ( fenceAgents ) ; }
public void enableCifs ( ) { accessProtocols.add ( AccessProtocol.CIFS ) ; setOption ( GlusterConstants.OPTION_CIFS_DISABLE , GlusterConstants.OFF ) ; }
private void mockVdsGroupDaoReturnVdsGroup ( ) { org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.< org.ovirt.engine.core.compat.Guid > any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( createVdsGroup ( ) ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand , java.lang.Object ... parameters ) { Test ( ) ; }
public org.ovirt.engine.core.common.asynctasks.AsyncTaskType getAsyncTaskType ( ) { if ( ( getTaskType ( ) ) == ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ) ) { throw new java.lang.UnsupportedOperationException ( ) ; } return getTaskType ( ) ; }
public final boolean connect ( java.lang.String server , java.lang.String rootPassword , long hardTimeout , long softTimeout ) { return _doConnect ( server , "root" , rootPassword , null , null , hardTimeout , softTimeout ) ; }
public static void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.compat.Guid taskId , java.lang.String message ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getAsyncTaskManager ( ) . logAndFailTaskOfCommandWithEmptyVdsmId ( taskId , message ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getSmartcardDeviceSpecParams ( ) , true , false ) ; }
private void UpdateCanSpecify ( ) { boolean isChangable = ( bootProtocolsAvailable ) && ( getIsStaticAddress ( ) ) ; getAddress ( ) . setIsChangable ( isChangable ) ; getSubnet ( ) . setIsChangable ( isChangable ) ; getGateway ( ) . setIsChangable ( isChangable ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( EngineMessage.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT ) ; addCanDoActionMessageVariable ( "volumeName" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getGlusterVolumeName ( ) ) ; addCanDoActionMessageVariable ( "vdsGroup" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroupName ( ) ) ; }
public boolean IsOvfTemplate ( java.lang.String ovfstring ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { return new org.ovirt.engine.core.utils.ovf.OvfParser ( ovfstring ) . isTemplate ( ) ; }
private void writeJaxbClass ( org.ovirt.api.metamodel.tool.XmlWriter writer , java.lang.String value ) { writeJaxbCustomization ( writer , "class" , "name" , value ) ; }
public void setSearchPanel ( com.google.gwt.user.client.ui.IsWidget searchPanel ) { searchFormGroup.clear ( ) ; if ( searchPanel != null ) { searchFormGroup.add ( searchPanel ) ; actionFormGroup.removeStyleName ( Styles.ROW ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAllVmPoolsQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . getAll ( ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk , java.lang.String value ) { importModel.getDiskImportData ( disk.getId ( ) ) . setSelectedQuotaString ( value ) ; }
public boolean isSuspended ( ) { return getStatus ( ) . isSuspended ( ) ; }
protected boolean areUpdatedFieldsLegal ( ) { return org.ovirt.engine.core.bll.VmHandler.isUpdateValid ( org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVmStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStatus ( ) ) ; }
protected boolean isStatelessSnapshotExistsForVm ( ) { if ( ( cachedStatelessSnapshotExistsForVm ) == null ) { cachedStatelessSnapshotExistsForVm = getSnapshotDao ( ) . exists ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) , SnapshotType.STATELESS ) ; } return cachedStatelessSnapshotExistsForVm ; }
protected org.ovirt.engine.api.model.ReportedDevice addParents ( org.ovirt.engine.api.model.ReportedDevice model ) { model.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; model.getVm ( ) . setId ( vmId.toString ( ) ) ; return model ; }
public void setItems ( org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > value ) { super . setItems ( value ) ; }
public final java.lang.String consoleClientResources ( ) { return getString ( org.ovirt.engine.ui.common.utils.BaseDynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES ) ; }
private static javax.xml.datatype.DatatypeFactory getDatatypeFactory ( ) { if ( ( org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory ) == null ) { try { org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory = javax.xml.datatype.DatatypeFactory.newInstance ( ) ; } catch ( javax.xml.datatype.DatatypeConfigurationException dce ) { org.ovirt.engine.api.restapi.types.DateMapper.log.warn ( org.ovirt.engine.api.restapi.types.DateMapper.DATATYPE_FACTORY_CREATION_FAILED , dce ) ; } } return org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory ; }
protected boolean prepareFailureMessageForDisks ( java.lang.String diskNames ) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessage ( java.lang.String.format ( "$diskNames %1$s" , diskNames ) ) ; return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_DISKS ) ; }
public void setHeader ( com.google.gwt.user.client.ui.Widget widget ) { widget.addStyleName ( style.obrand_dialogHeaderTitleElement ( ) ) ; headerTitlePanel.insert ( widget , 0 ) ; }
public javax.ws.rs.core.Response activate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( guid , vmId ) ) ; return doAction ( ActionType.HotPlugDiskToVm , params , action ) ; }
protected abstract boolean showTransportProperties ( org.ovirt.engine.core.common.businessentities.VDS vds ) ;
protected void failedToMigrate ( ) { try { determineMigrationFailureForAuditLog ( ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmCommand.log ( ) ; failedToRunVm ( ) ; } finally { org.ovirt.engine.core.bll.MigrateVmCommand.freeLock ( ) ; } }
public java.lang.Long getGuestMemoryBuffered ( ) { return vmDynamic.getGuestMemoryBuffered ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network existingNetworkRelatedToAttachment ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { return clusterNetworks.get ( attachment.getNetworkId ( ) ) ; }
public void getFilteredWithPermissionsNoPermissionsAndNoFilter ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_SNAPSHOT_ID , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; org.junit.jupiter.api.Assertions.assertNotNull ( snapshot ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingEntity , snapshot ) ; }
public boolean canBeSelected ( ) { org.ovirt.engine.core.common.businessentities.DisplayType vmDisplayType = ( ( getEntity ( ) . getDisplayType ( ) ) != null ) ? getEntity ( ) . getDisplayType ( ) : getEntity ( ) . getDefaultDisplayType ( ) ; return vmDisplayType == ( org.ovirt.engine.core.common.businessentities.DisplayType.vga ) ; }
public org.ovirt.engine.ui.uicommonweb.UICommand getPauseSessionCommand ( ) { return pauseSessionCommand ; }
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { runMultipleAction ( actionType , parameters , null , null ) ; }
public void connect ( ) { org.ovirt.engine.ui.common.uicommon.SpicePluginImpl.logger.warning ( "Connecting via spice..." ) ; if ( configurator.isClientLinuxFirefox ( ) ) { connectNativelyViaXPI ( ) ; } else if ( configurator.isClientWindowsExplorer ( ) ) { connectNativelyViaActiveX ( ) ; } }
public int hashCode ( ) { return java.util.Objects.hashCode ( map ) ; }
public void setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport ) { this . vmStatic.setMigrationSupport ( migrationSupport ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageById ( org.ovirt.engine.core.compat.Guid id , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( diskImages , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate ( id ) ) ; }
public int getVmtMemSizeMb ( ) { return this . vmtMemSizeMb ; }
protected org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters createParameters ( org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid , org.ovirt.engine.core.compat.Guid destStorageDomainGuid , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = new org.ovirt.engine.core.common.action.MoveDiskParameters ( disk.getImageId ( ) , sourceStorageDomainGuid , destStorageDomainGuid ) ; moveDiskParameters.setImageGroupID ( disk.getId ( ) ) ; return moveDiskParameters ; }
public void detachedClusterMovesToDcWithExistingManagementNetwork ( ) { prepareManagementNetworkMocks ( ) ; mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID , Guid.Empty ) ; createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; setupCpu ( ) ; storagePoolIsLocalFS ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public void remove ( org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId id ) { getCallsHandler ( ) . executeModification ( "Deleteimage_storage_domain_map" , getCustomMapSqlParameterSource ( ) . addValue ( "image_id" , id.getImageId ( ) ) . addValue ( "storage_domain_id" , id.getStorageDomainId ( ) ) ) ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.ExternalNetworkProviderConfiguration > collection ) { org.junit.jupiter.api.Assertions.assertNotNull ( collection ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , collection.size ( ) ) ; verifyModel ( collection.get ( 0 ) , 0 ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ExportVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
protected boolean canCreateSnapshot ( ) { if ( ! ( new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator ( ) . vmNotDuringSnapshot ( org.ovirt.engine.core.bll.BaseImagesCommand.getVmId ( ) ) . isValid ( ) ) ) { log.error ( "Cannot create snapshot. Vm is in preview status" ) ; return false ; } return true ; }
private void RemoveVdsStaticFromDb ( ) { org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsStaticDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.businessentities.aaa.DbUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getId ( ) ) ; params.setSessionId ( getEngineSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . logoff ( params ) ; return returnValue ; }
public void testRemove ( ) { dao.remove ( FixturesTool.GLUSTER_BRICK_SERVER1 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServer entity = dao.getByServerId ( FixturesTool.GLUSTER_BRICK_SERVER1 ) ; org.junit.jupiter.api.Assertions.assertNull ( entity ) ; }
public void setAlignment ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( privateAlignment , value ) ) ) { privateAlignment = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Alignment" ) ) ; } }
public static java.lang.String migrationMethodtoString ( org.ovirt.engine.core.common.businessentities.MigrationMethod method ) { if ( method == ( org.ovirt.engine.core.common.businessentities.MigrationMethod.OFFLINE ) ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.offline ; } else if ( method == ( org.ovirt.engine.core.common.businessentities.MigrationMethod.ONLINE ) ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.online ; } else { return "" ; } }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { persistCommand ( parentCommand , getContext ( ) , false ) ; }
public void setMessages ( java.util.List < java.lang.String > value ) { if ( ! ( java.util.Objects.equals ( messages , value ) ) ) { messages = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Message" ) ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { Window.Location.reload ( ) ; }
private void checkConnection ( ) throws java.sql.SQLException { if ( ! ( connection.isValid ( 0 ) ) ) { throw new java.sql.SQLException ( "The connection has been closed or invalid." ) ; } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logoff ( org.ovirt.engine.core.common.action.ActionParametersBase parameters ) { return runAction ( ActionType.LogoutSession , parameters ) ; }
protected void afterExecute ( java.lang.Runnable r , java.lang.Throwable t ) { if ( t != null ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.error ( "Execution of task failed" , t ) ; } super . afterExecute ( r , t ) ; org.ovirt.engine.core.utils.CorrelationIdTracker.clean ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > getAllByCluster ( org.ovirt.engine.core.compat.Guid cluster ) { return getCallsHandler ( ) . executeReadList ( "GetVmStaticByCluster" , org.ovirt.engine.core.dao.VmStaticDaoImpl.VMStaticRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "cluster_id" , cluster ) ) ; }
int getMinimumRam ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public boolean getChangePasswordEnabled ( java.util.Map < java.lang.String , java.lang.Object > userInfoMap ) { return true ; }
protected org.ovirt.engine.api.model.GlusterBrick addParents ( org.ovirt.engine.api.model.GlusterBrick model ) { parent.addParents ( model ) ; return model ; }
private void markExternalPoliciesAsDisabled ( java.util.List < org.ovirt.engine.core.common.scheduling.PolicyUnit > units ) { for ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : units ) { if ( ! ( policyUnit.isInternal ( ) ) ) { policyUnit.setEnabled ( false ) ; policyUnitDao.update ( policyUnit ) ; } } }
private void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
public org.ovirt.engine.core.common.businessentities.VDS getCopyVds ( ) { return cachedVds.clone ( ) ; }
public void toFile ( java.lang.String krb5ConfPath , java.lang.StringBuffer sb ) throws java.io.FileNotFoundException , java.io.IOException { try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( krb5ConfPath ) ) { fos.write ( sb.toString ( ) . getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) ) ; } }
public void testIsNetworkInSyncWhenIpv4BootProtocolEqual ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocol ( true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( ) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterNetworkPresenter.constants.dataCenterNetworkSubTabLabel ( ) , 1 ) ; }
public void testIsManagementNetworkNameInGivenClusterPositive ( ) throws java.lang.Exception { testIsManagementNetworkNameInGivenClusterCommon ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_NAME , org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_CLUSTER_ID , true ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > getByName ( java.lang.String name , boolean isCaseSensitive ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "name" , name ) . addValue ( "is_case_sensitive" , isCaseSensitive ) ; return getCallsHandler ( ) . executeReadList ( "Getstorage_poolByName" , org.ovirt.engine.core.dao.StoragePoolDAODbFacadeImpl.mapper , parameterSource ) ; }
protected void addValidationMessage ( java.lang.String message ) { getReturnValue ( ) . getValidationMessages ( ) . add ( message ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.OVF_UPDATE , EngineMessage.ACTION_TYPE_FAILED_DOMAIN_OVF_ON_UPDATE ) ) ; }
org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) ;
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.userportal.ApplicationConstants applicationConstants ) { return new com.gwtplatform.mvp.client.TabDataBasic ( applicationConstants.extendedTemplateEventsSubTabLabel ( ) , 3 ) ; }
public static boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { java.util.List < org.ovirt.engine.core.common.businessentities.DisplayType > osDisplayTypes = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDisplayTypes ( osId , version ) ; return osDisplayTypes == null ? false : osDisplayTypes.contains ( DisplayType.qxl ) ; }
private void mockStorageDomainSpaceCheckerRequest ( org.ovirt.engine.core.common.businessentities.storage_domains domain , boolean succeeded ) { org.mockito.Mockito.doReturn ( succeeded ) . when ( command ) . doesStorageDomainhaveSpaceForRequest ( domain ) ; }
public org.ovirt.engine.api.resource.ActionResource getActionResource ( @ javax.ws.rs.PathParam ( value = "action" ) java.lang.String action , @ javax.ws.rs.PathParam ( value = "oid" ) java.lang.String oid ) ;
protected org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer getIsoDomainListSyncronizer ( ) { return org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance ( ) ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( ) ; setupCpu ( ) ; VdsExist ( ) ; canDoActionFailedWithReason ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public org.ovirt.engine.core.bll.utils.GlusterGeoRepUtil getGeoRepUtilInstance ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.utils.GlusterGeoRepUtil.class ) ; }
public void testUndelete ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.DisplayAllAuditLogAlerts , org.ovirt.engine.core.common.action.VdcActionParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; collection.undelete ( new org.ovirt.engine.api.model.Action ( ) ) ; }
public void testGlusterDcAndMatchingCompatiblityVersion ( ) { storagePool.setcompatibility_version ( org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.SUPPORTED_VERSION ) ; storagePool.setIsLocal ( false ) ; org.junit.Assert.assertTrue ( validator.isGlusterSupportedInDC ( ) . isValid ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Quota mockStorageQuotaGlobalInGrace ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = mockBasicQuota ( ) ; quota.setId ( org.ovirt.engine.core.bll.quota.QuotaManagerTest.STORAGE_QUOTA_GLOBAL_IN_GRACE ) ; quota.setGlobalQuotaStorage ( getQuotaStorage ( 100 , 104 ) ) ; return quota ; }
public void onElementReady ( com.google.gwt.dom.client.ImageElement imageElement ) { validationResult = new org.ovirt.engine.ui.uicommonweb.validation.IconValidation ( imageElement ) . validate ( icon ) ; updateErrorIconLabel ( validationResult ) ; final org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault newValue = getValue ( ) ; com.google.gwt.event.logical.shared.ValueChangeEvent.fireIfNotEqual ( this , oldValue , newValue ) ; }
public void onPowerringUp ( ) { decreasePendingVm ( vmStaticDao.get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
public void testAddUser_4 ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDomainList , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpDomains ( ) ) ; setUpAddUserExpectations ( ( ( ( "ADUSER@" + ( DOMAIN ) ) + ":: allnames=" ) + ( NAMES [ 0 ] ) ) ) ; org.ovirt.engine.api.model.User model = new org.ovirt.engine.api.model.User ( ) ; model.setUserName ( NAMES [ 0 ] ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setId ( new org.ovirt.engine.core.compat.Guid ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN.getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) , true ) . toString ( ) ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; verifyAddUser ( response ) ; }
public void setVmName ( java.lang.String value ) { this . vmStatic.setvm_name ( value ) ; }
public void testGetDiskIdByLunId ( ) { org.junit.jupiter.api.Assertions.assertEquals ( dao.getDiskIdByLunId ( org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getLunId ( ) ) , new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap ( org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getDiskId ( ) , org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getLunId ( ) ) ) ; }
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; UpdateActionAvailability ( ) ; }
protected void verifyActionModel ( org.ovirt.engine.api.model.Vm model , int index ) { assertNotNull ( model ) ; assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
public boolean connectHostToDomainsInActiveOrUnknownStatus ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get ( vds.getStoragePoolId ( ) ) ; org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters params = new org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters ( sp , vds , false ) ; return backend.runInternalAction ( VdcActionType.ConnectHostToStoragePoolServers , params ) . getSucceeded ( ) ; }
protected void onAdd ( T value , V widget ) { modelItems.add ( value ) ; }
protected boolean isQuotaDependant ( ) { if ( ( isInstanceType ( ) ) || ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate ( ) ) ) { return false ; } return super . isQuotaDependant ( ) ; }
public void clearErrorMessages ( ) { errorMessagePanel.clearMessages ( ) ; errorMessagePanel.setVisible ( false ) ; }
com.google.gwt.safehtml.shared.SafeHtml treeItem ( com.google.gwt.safehtml.shared.SafeHtml imageHtml , java.lang.String text , java.lang.String id ) ;
private void setUpGetDiskExpectations ( ) { setUpEntityQueryExpectations ( QueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest.DISK_ID } , asList ( getEntity ( 0 ) ) ) ; }
private boolean findDefaultManagementNetwork ( ) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.AddClusterCommand.getCluster ( ) . getStoragePoolId ( ) ) ; if ( ( managementNetwork ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND ) ; return false ; } return true ; }
public void versionDecreaseNoHostsOrNetwork ( ) { createCommandWithOlderVersion ( ) ; setupCpu ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFS ( ) ) ; initAndAssertValidation ( true ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createSparseDiskImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage image = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; image.setvolume_type ( VolumeType.Sparse ) ; image.setDiskInterface ( DiskInterface.IDE ) ; return image ; }
private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById ( org.ovirt.engine.core.compat.Guid macPoolId , java.util.List < org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator > decorators ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = readLockResource ( ) ) { return getMacPoolWithoutLocking ( macPoolId , decorators ) ; } }
public void testExistingUsbControllerModelWithoutVersion ( ) { final org.ovirt.engine.core.common.businessentities.UsbControllerModel model = OsRepositoryImpl.INSTANCE.getOsUsbControllerModel ( OsRepositoryImpl.INSTANCE.getOsIdByUniqueName ( "rhel7" ) , null , ChipsetType.I440FX ) ; org.junit.Assert.assertEquals ( UsbControllerModel.NEC_XHCI , model ) ; }
public void testVmDiskIsEmpty ( ) { org.ovirt.engine.sdk4.internal.containers.VmContainer vm = new org.ovirt.engine.sdk4.internal.containers.VmContainer ( ) ; vm.diskAttachments ( null ) ; org.junit.Assert.assertNotNull ( vm.diskAttachments ( ) ) ; org.junit.Assert.assertEquals ( 0 , vm.diskAttachments ( ) . size ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { addStorageDomainsColumn ( object ) ; }
public static org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask ( org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.createAsyncTask ( command , asyncTaskCreationInfo , parentCommand ) ; }
protected void ConcreteStartPollingTask ( ) { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = GetCommandMultiAsyncTasks ( ) ; entityInfo.StartPollingTask ( getVdsmTaskId ( ) ) ; }
public void setSessionTimeout ( java.lang.String engineSessionTimeout ) { try { setSessionTimeout ( java.lang.Integer.valueOf ( engineSessionTimeout ) ) ; } catch ( java.lang.NumberFormatException ex ) { setSessionTimeout ( org.ovirt.engine.ui.common.restapi.RestApiSessionManager.DEFAULT_ENGINE_SESSION_TIMEOUT ) ; } }
public static void TryRunHighAvailableVdsUp ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( vdsId ) ; org.ovirt.engine.core.bll.HighAvailableVmsDirector.TryRunHighAvailableVm ( vds.getvds_group_name ( ) ) ; }
public void switchTab ( org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab tab ) { switchTab ( tab.getTabListItem ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPool ( ) ; org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPoolDAO ( ) . save ( vmPool ) ; setActionReturnValue ( vmPool.getVmPoolId ( ) ) ; org.ovirt.engine.core.bll.AddVmPoolCommand.setSucceeded ( true ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; OnExecute ( ) ; }
public void getAllForVm ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( FixturesTool.VM_RHEL5_POOL_50 ) ; assertVmGuestAgentInterfaceForVm ( interfaces ) ; }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.bll.storage.pool.DisconnectStoragePoolAsyncOperation ( getVdss ( ) , getStoragePool ( ) ) ) ; }
public void setPlaceTransitionHandler ( org.ovirt.engine.ui.common.presenter.PlaceTransitionHandler handler ) { placeTransitionHandler = handler ; getModelBoundTableWidget ( ) . setPlaceTransitionHandler ( handler ) ; }
private void assertValidateSlaveHasNoLabelsFailed ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator , java.lang.String slaveName ) { final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE ; org.hamcrest.MatcherAssert.assertThat ( validator.validateSlaveHasNoLabels ( slaveName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , slaveName ) ) ) ; }
public void testGetByName ( ) { newVolume = insertTestVolume ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getByName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.NEW_VOL_NAME ) ; org.junit.jupiter.api.Assertions.assertNotNull ( volume ) ; org.junit.jupiter.api.Assertions.assertEquals ( newVolume , volume ) ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister createPersister ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > userNetworkAttachments ) { return createPersister ( userNetworkAttachments , interfaceWithAttachedClusterNetworkA , interfaceWithoutAttachedNetwork ) ; }
protected boolean isLastSuperUserGroup ( org.ovirt.engine.core.compat.Guid groupId ) { return org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserGroup ( groupId ) ; }
public static void updateCommandStatus ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.CommandStatus status ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.coco.updateCommandStatus ( commandId , status ) ; }
public void setForceHelp ( java.lang.String forceHelpText ) { boolean isForceHelpNonEmpty = forceHelpText != null ; if ( isForceHelpNonEmpty ) { geoRepForceHelpIcon.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.GeoRepActionConfirmPopUpView.templates.italicText ( forceHelpText ) ) ; } geoRepForceHelpIcon.setVisible ( isForceHelpNonEmpty ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VDSInfoReturn getCapabilities ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getCapabilities" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "info" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSInfoReturn ( response ) ; }
public void testSetup ( ) { mockQuotaDAO ( ) ; mockVmDAO ( ) ; mockStoragePoolDAO ( ) ; mockInjections ( ) ; }
private java.lang.String getDefaultUrl ( org.ovirt.engine.core.common.businessentities.ProviderType type ) { if ( type == null ) { return "" ; } switch ( type ) { case OPENSTACK_NETWORK : return "http://localhost:9696" ; case OPENSTACK_IMAGE : return "http://localhost:9292" ; case FOREMAN : default : return "http://localhost" ; } }
public void updateVisibility ( ) { super . updateVisibility ( ) ; messageLabel.setVisible ( false ) ; apply.setVisible ( false ) ; publicUseEditor.setVisible ( true ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.NetworkLabel label ) { validateParameters ( label , "id" ) ; final java.lang.String labelId = label.getId ( ) ; return performCreate ( labelId ) ; }
public java.lang.Boolean convert ( java.lang.Object source ) { if ( source != null ) { return ! ( ( ( java.util.Collection < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; }
public void onUpdateMainContentLayout ( org.ovirt.engine.ui.webadmin.section.main.presenter.UpdateMainContentLayoutEvent event ) { boolean subTabPanelVisible = event.isSubTabPanelVisible ( ) ; getView ( ) . setSubTabPanelVisible ( subTabPanelVisible ) ; if ( ! subTabPanelVisible ) { clearSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetSubTabPanelContent ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > getAllWithQuery ( java.lang.String query ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoDbFacadeImpl.volumeRowMapper ) ; fetchRelatedEntities ( volumes ) ; return volumes ; }
public void setDisplay ( java.lang.Integer value ) { this . vmDynamic.setDisplay ( value ) ; }
public void removeInterfaceFromVds ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkQosDao ( ) . remove ( id ) ; getCallsHandler ( ) . executeModification ( "Deletevds_interface" , parameterSource ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapGroup getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendGroupsResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.LdapGroup.class ) , index ) ; }
protected void updateCustomPropertySheet ( ) { if ( ( getModel ( ) . getSelectedCluster ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . getSelectedCluster ( ) ; updateCustomPropertySheet ( cluster.getCompatibilityVersion ( ) ) ; }
public void run ( ) { if ( exSchedulerDiscovery.discover ( ) ) { reloadPolicyUnits ( ) ; } }
private boolean canShowConsole ( ) { return consoleUtils.canShowConsole ( consoleUtils.determineConnectionProtocol ( model ) , model ) ; }
private void dbFacadeThrowOnNetworkClusterSave ( ) { org.mockito.Mockito.doThrow ( new org.springframework.dao.DataIntegrityViolationException ( "test violations" ) ) . when ( mockNetworkClusterDao ) . save ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster.class ) ) ; }
public java.util.List < org.ovirt.engine.core.common.action.ActionReturnValue > runInternalMultipleActions ( org.ovirt.engine.core.common.action.ActionType actionType , java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > parameters , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { return runMultipleActionsImpl ( actionType , parameters , true , false , false , commandContext ) ; }
private void initCheckBoxEditors ( ) { importGlusterConfigurationEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; countThreadsAsCoresEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; enableTrustedServiceEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; enableBallooning = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public void setStyleName ( java.lang.String style , boolean add ) { label.setStyleName ( style , add ) ; }
private org.ovirt.engine.core.common.businessentities.StoragePool getStoragePool ( ) { org.ovirt.engine.core.compat.Guid storagePoolId = ( ( org.ovirt.engine.core.common.businessentities.storage.OpenStackVolumeProviderProperties ) ( provider.getAdditionalProperties ( ) ) ) . getStoragePoolId ( ) ; return storagePoolDao.get ( storagePoolId ) ; }
public static void LogoffAsync ( org.ovirt.engine.core.common.businessentities.DbUser dbUser , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance ( ) ; org.ovirt.engine.ui.frontend.Frontend.LogoffAsync ( dbUser , callback , service ) ; }
protected boolean doesStorageDomainHaveSpaceForRequest ( long size ) { return validate ( new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) ) . isDomainHasSpaceForRequest ( size ) ) ; }
protected abstract boolean editTransportProperties ( org.ovirt.engine.core.common.businessentities.VDS vds ) ;
private void setUpTemplateDisksExpectations ( org.ovirt.engine.core.compat.Guid templateId ) { setUpEntityQueryExpectations ( QueryType.GetVmTemplatesDisks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { templateId } , createDiskList ( ) ) ; }
public void checkValidIpConfigurationStaticBootProtocol ( ) { initIpConfigurationDetails ( Ipv4BootProtocol.STATIC_IP , true , true ) ; org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , actual ) ; }
public void testGetAsyncTaskIdsByInvalidEntity ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = dao.getAsyncTaskIdsByEntity ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.junit.Assert.assertNotNull ( guids ) ; org.junit.Assert.assertTrue ( guids.isEmpty ( ) ) ; }
public void onBrowserEvent ( com.google.gwt.cell.client.Cell.Context context , com.google.gwt.dom.client.Element elem , T object , com.google.gwt.dom.client.NativeEvent event ) { getCell ( ) . setTooltipFallback ( getTooltip ( object ) ) ; super . onBrowserEvent ( context , elem , object , event ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > searchClusters ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getVdsGroupDao ( ) , true , null ) ; }
abstract void createEntityTable ( org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel model ) ;
public boolean evaluate ( java.lang.Object disk ) { return ( ( ( org.ovirt.engine.core.common.businessentities.storage.Disk ) ( disk ) ) . getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetBookmarkByBookmarkNameQuery.getQueryReturnValue ( ) . setReturnValue ( bookmarkDao.getByName ( org.ovirt.engine.core.bll.GetBookmarkByBookmarkNameQuery.getParameters ( ) . getName ( ) ) ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { revertCinderDisks ( childCmdIds ) ; getCommand ( cmdId ) . endAction ( ) ; getCommand ( cmdId ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; }
protected void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( command == ( loginModel.getLoginCommand ( ) ) ) { beforeLoginCommandExecuted ( loginModel ) ; } super . executeCommand ( command ) ; }
public void postProcess ( org.jboss.resteasy.core.ServerResponse response ) { org.ovirt.engine.api.common.invocation.Current.currents.set ( null ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskStorageType getDiskType ( ) { return getDisk ( ) . getDiskStorageType ( ) ; }
private boolean supportsGlusterSnapshotFeature ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return cluster.supportsGlusterService ( ) ; }
private void verifyDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory ( storageDomains , disksList ) ; org.junit.Assert.assertEquals ( storageDomain , validStorageDomain ) ; }
protected void buildVmVideoCards ( ) { createInfo.put ( VdsProperties.num_of_monitors , java.lang.String.valueOf ( vm.getNumOfMonitors ( ) ) ) ; }
public static java.util.Collection < java.lang.String > replaceWith ( java.lang.String propertyName , java.util.Collection < ? > items ) { return org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( propertyName , items , org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR , org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.NetworkQoS , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkQoSListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.dataCenterNetworkQoSSubTabLabel ( ) , 1 , modelProvider ) ; }
protected org.ovirt.engine.core.compat.Guid getQuotaId ( ) { if ( ( ( newDisk ) != null ) && ( isQuotaValidationNeeded ( ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( newDisk ) ) . getQuotaId ( ) ; } return null ; }
private void mockNullVm ( ) { org.mockito.Mockito.when ( vmDao.get ( command.getParameters ( ) . getVmId ( ) ) ) . thenReturn ( null ) ; createVirtIODisk ( ) ; }
private void refreshHostStorage ( org.ovirt.engine.core.compat.Guid hostId ) { getBackendCollection ( VdcQueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( hostId , org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI , false , null ) ) ; }
private static void addField ( java.lang.String fieldName , java.lang.Class < ? > fieldType , java.lang.String columnName ) { org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.fields.add ( new org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.AutoCompletionField ( fieldName , fieldType , columnName ) ) ; }
private static boolean vmIsRunningStateless ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vmId , SnapshotType.STATELESS ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.storage.Disk , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineVirtualDiskPresenter.constants.virtualMachineVirtualDiskSubTabLabel ( ) , 2 , modelProvider ) ; }
public void replace_patternNotPresent ( ) { runAndCheck ( "abcd" , "X" , "Y" , "abcd" ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond ) { return org.apache.commons.lang.StringUtils.equals ( bond.getBondName ( ) , nic.getName ( ) ) ; }
public void testEmptyStringIsValid ( ) { doTest ( "" , false ) ; }
protected boolean validate ( ) { return ( super . validate ( ) ) && ( validate ( getQosValidator ( getQos ( ) ) . peakConsistentWithAverage ( ) ) ) ; }
T getStoragePoolId ( ) ;
protected java.lang.String cdPathWindowsToLinux ( java.lang.String url ) { return org.ovirt.engine.core.bll.ImagesHandler.cdPathWindowsToLinux ( url , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getStoragePoolId ( ) ) ; }
public java.lang.String getPredefinedVMProperties ( org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.PredefinedVMProperties , version.getValue ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getForStoragePool ( domainId , vmTemplate.getStoragePoolId ( ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { setWindow ( null ) ; setWindow ( model ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . getAllForUsers ( org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters ( ) . getUserId ( ) ) ) ; }
public void testValidStatusForEnrollCertificate ( ) { mockHostForActivation ( VDSStatus.Maintenance ) ; org.junit.Assert.assertThat ( validator.validateStatusForEnrollCertificate ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue ( ) ; stopProgress ( ) ; setTestResultValue ( res ) ; }
default void onEvent ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , java.lang.Object eventData ) { }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { populateRoles ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Role > ) ( result ) ) ) ; }
public void testGetWithPermissionsDisabledUnprivilegedUser ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.get ( existingDomain.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; assertGetResult ( result ) ; }
public void onSessionExpired ( ) { Window.Location.reload ( ) ; }
public void testGetValue ( ) { org.junit.Assert.assertEquals ( ( "Wrong getValue() for " + ( value ) ) , value.ordinal ( ) , value.getValue ( ) ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.businessentities.StoragePool result = dao.get ( existingPool.getId ( ) ) ; assertGetResult ( result ) ; }
public java.lang.String getVdsName ( ) { if ( ( ( mVdsName ) == null ) && ( ( getVds ( ) ) != null ) ) { mVdsName = getVds ( ) . getVdsName ( ) ; } return mVdsName ; }
public void runMultipleQueries ( final java.util.List < org.ovirt.engine.core.common.queries.VdcQueryType > queryTypeList , final java.util.List < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > queryParamsList , final org.ovirt.engine.ui.uicompat.IFrontendMultipleQueryAsyncCallback callback ) { runMultipleQueries ( queryTypeList , queryParamsList , callback , null ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( "INITIALIZED" . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } else { } return retval ; }
protected java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { try { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . getJsonDiskDescription ( disk ) ; } catch ( java.io.IOException e ) { log.error ( "Exception while generating json for disk. ERROR: '{}'" , e ) ; return org.apache.commons.lang.StringUtils.EMPTY ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getCollection ( ) { return getBackendCollection ( VdcQueryType.GetVdsInterfacesByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( hostId ) ) ) ; }
protected boolean updateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) . getStoragePoolId ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) ) ) ; }
public java.lang.String generateDefaultQuotaName ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool ) { java.lang.String quotaName = getDefaultQuotaName ( storagePool.getname ( ) ) ; return getQuotaDAO ( ) . getDefaultQuotaName ( quotaName ) ; }
protected static java.util.List < org.ovirt.engine.core.common.businessentities.VmPoolMap > getListOfVmsInPool ( org.ovirt.engine.core.compat.Guid poolId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . getVmPoolsMapByVmPoolId ( poolId ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { neutronAgentPanel.setVisible ( neutronAgentModel.isPluginConfigurationAvailable ( ) . getEntity ( ) ) ; }
protected void onMouseOut ( ) { dragImage.setVisible ( false ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.hide ( true ) ; if ( ( parentPanel ) != null ) { parentPanel.onMouseOver ( ) ; } }
public void testGetAllNamesPinnedToHostReturnsVmNameForHostPinned ( ) throws java.lang.Exception { java.util.List < java.lang.String > namesPinnedToHost = dao.getAllNamesPinnedToHost ( org.ovirt.engine.core.dao.VmStaticDAOTest.VDS_STATIC_ID ) ; org.junit.Assert.assertFalse ( namesPinnedToHost.isEmpty ( ) ) ; org.junit.Assert.assertTrue ( namesPinnedToHost.contains ( existingVmStatic.getName ( ) ) ) ; }
private static org.ovirt.engine.core.common.osinfo.OsRepository getOsRepository ( ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; }
private boolean logicalNetworkExists ( ) { if ( ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.getNetworkDAO ( ) . get ( getNetworkCluster ( ) . getnetwork_id ( ) ) ) != null ) { return true ; } addCanDoActionMessage ( VdcBllMessages.NETWORK_NOT_EXISTS ) ; return false ; }
public void testExecuteGetAllEntitiesCommand ( ) throws java.io.IOException , org.ovirt.engine.core.utils.ovf.OvfReaderException { cmd.executeCommand ( ) ; org.junit.Assert.assertTrue ( "return value should be true" , cmd.getReturnValue ( ) . getSucceeded ( ) ) ; }
public void cleanup ( ) { if ( ( listModel ) != null ) { listModel.cleanup ( ) ; } }
protected void HandleError ( ) { log.errorFormat ( "Failed to run StartVdsCommand on vds :{0}" , org.ovirt.engine.core.bll.StartVdsCommand.getVdsName ( ) ) ; }
public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds.getHostName ( ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel ) { super . edit ( unitVmModel ) ; if ( unitVmModel.isVmAttachedToPool ( ) ) { specificHost.setEnabled ( false ) ; } }
protected void init ( ) { super . init ( ) ; setVdsId ( getVmManager ( ) . getConvertProxyHostId ( ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult hostExist ( ) { if ( ( host ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
int getRepetitions ( ) { return 2 ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.storage.GetStoragePoolsByStorageDomainIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . getAllForStorageDomain ( org.ovirt.engine.core.bll.storage.GetStoragePoolsByStorageDomainIdQuery.getParameters ( ) . getId ( ) ) ) ; }
public org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth convert ( java.lang.Object source ) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt ( ( ( java.lang.Integer ) ( source ) ) ) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16 ; }
public void setIsVmNetwork ( org.ovirt.engine.ui.uicommonweb.models.EntityModel value ) { privateIsVmNetwork = value ; }
private native boolean detectXpiPlugin ( ) ;
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( @ javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , org.ovirt.engine.core.common.scheduling.PerHostMessages messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error ( "Policy unit '{}' filter is not implemented" , getPolicyUnit ( ) . getName ( ) ) ; return hosts ; }
public static java.util.Map < java.lang.String , java.lang.Integer > getVgaVideoDeviceSettings ( ) { return java.util.Collections.singletonMap ( VdsProperties.VIDEO_VRAM , org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.BASE_RAM_SIZE ) ; }
protected void removeMemoryVolume ( java.lang.String memoryVolumes ) { if ( isMemoryStateRemovable ( memoryVolumes ) ) { removeMemoryVolumes ( memoryVolumes ) ; } }
private void assertValidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected boolean validate ( ) { return ( super . validate ( ) ) && ( validate ( validateInputForDuplication ( ) ) ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStatsForDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return runVdsCommand ( VDSCommandType.GetStorageDomainStats , new org.ovirt.engine.core.common.vdscommands.GetStorageDomainStatsVDSCommandParameters ( org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getVds ( ) . getId ( ) , storageDomain.getId ( ) ) ) ; }
public void stopRefresh ( ) { getTimer ( ) . stop ( ) ; }
public void onMainTabSelected ( ) { super . onMainTabSelected ( ) ; getModel ( ) . getDiskViewType ( ) . setEntity ( null ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.migration.MigrationPolicy > returnValue ) { migrationPolicies = returnValue ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = this ; behavior.maxCpusPerSocket = ( ( java.lang.Integer ) ( returnValue ) ) ; behavior.totalCpuCoresChanged ( ) ; }
public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureByCpuName ( java.lang.String cpuName ) { org.ovirt.engine.core.common.businessentities.ServerCpu cpu = getServerCpuByName ( cpuName ) ; if ( cpu != null ) { return cpu.getArchitecture ( ) ; } return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addInterface ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , boolean plugged , boolean hostDev ) { return addInterface ( vmId , deviceId , plugged , hostDev , null ) ; }
public void testGetDefaultQuotaForStoragePool ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = dao.getDefaultQuotaForStoragePool ( FixturesTool.STORAGE_POOL_NFS ) ; org.junit.Assert.assertNotNull ( quota ) ; org.junit.Assert.assertEquals ( FixturesTool.STORAGE_POOL_NFS , quota.getStoragePoolId ( ) ) ; org.junit.Assert.assertTrue ( quota.isDefault ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmWatchdog getWatchdog ( ) { return watchdog.getValue ( ) ; }
public void testGetAllForStoragePoolWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected boolean shouldDiskBePlugged ( ) { return ( ( org.ovirt.engine.core.bll.AddDiskCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) && ( ! ( java.lang.Boolean.FALSE.equals ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getPlugDiskToVm ( ) ) ) ) ; }
public static org.ovirt.engine.core.compat.Guid getGuidValue ( org.ovirt.engine.core.compat.Guid id ) { return id ; }
public void testIsNetworkInSyncWhenNetworkQosIsNullIfaceQosOverridden ( ) throws java.lang.Exception { networkQos = null ; org.junit.Assert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . masterDomainNotOperational ( masterDomainId , getParameters ( ) . getStoragePoolId ( ) , true ) ; }
public org.ovirt.engine.core.common.businessentities.Quota getDefaultQuotaForStoragePool ( org.ovirt.engine.core.compat.Guid storagePoolId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , storagePoolId ) ; return getCallsHandler ( ) . executeRead ( "GetDefaultQuotaForStoragePool" , getQuotaFromResultSet ( ) , parameterSource ) ; }
protected void startPollingAsyncTasks ( ) { startPollingAsyncTasks ( getReturnValue ( ) . getTaskIdList ( ) ) ; }
public void getAllForForConnection ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = dao.get ( existingConnection.getId ( ) ) ; conn.setId ( "copy" ) ; dao.save ( conn ) ; assertGetAllForConnectionResult ( java.util.Arrays.asList ( existingConnection , conn ) , existingConnection ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Vm model , int index ) { super . verifyModel ( model , index ) ; org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.verifyModelSpecific ( model ) ; }
public java.lang.String getBookmarkValue ( ) { return ( getBookmark ( ) ) != null ? getBookmark ( ) . getValue ( ) : null ; }
protected void registerObject ( java.lang.String name , O object ) { objectsByName.put ( name , object ) ; }
private void mockProxySourcesForFencedHost ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType > fenceProxySources ) { org.mockito.Mockito.when ( fencedHost.getFenceProxySources ( ) ) . thenReturn ( fenceProxySources ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel ) ( target ) ) ; boolean isNameUnique = ( ( java.lang.Boolean ) ( returnValue ) ) ; templateListModel.PostNameUniqueCheck ( isNameUnique ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile ) { driver.edit ( profile ) ; }
public void createParameters ( ) { parameters = new org.ovirt.engine.core.common.action.AddExternalStepParameters ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId , "step 1" , org.ovirt.engine.core.common.job.StepEnum.VALIDATING ) ; }
public boolean handshakeInProgress ( ) { return ! ( javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING.equals ( this . engine.getHandshakeStatus ( ) ) ) ; }
public static void getAAAProfilesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.convertAAAProfilesResult ( aQuery , true ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.AuditLog object ) { return org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.dismissEvent ( ) ; }
private void mockNullVm ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseMockUtils.mockVmDao ( command , vmDAO ) ; org.mockito.Mockito.when ( vmDAO.get ( command.getParameters ( ) . getVmId ( ) ) ) . thenReturn ( null ) ; cretaeVirtIODisk ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) { return snapshot ( vmId , disks , null , false ) ; }
protected void syncSearch ( org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase ) { vdcQueryParametersBase.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( vdcQueryType , vdcQueryParametersBase , new SetItemsAsyncQuery ( ) ) ; setIsQueryFirstTime ( false ) ; }
private void mockStorageDomainValidatorWithoutSpace ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForDiskWithSnapshots ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getTreeForEntity ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.VdcObjectType type ) { return getTreeForEntity ( id , type , ( - 1 ) , false ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes , getPmType ( ) ) ; updatePmTypeList ( pmTypes , getPmSecondaryType ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomainStatus getRawValue ( org.ovirt.engine.core.common.businessentities.StorageDomain object ) { return object.getStatus ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface.getId ( ) , iface.getName ( ) , false , bondName , null , null , null , true , null , null , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource ( "foo" ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void mockDaos ( ) { mockVmDao ( ) ; mockDiskImageDao ( ) ; mockDiskDao ( ) ; }
public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return storageDomain.getStorageName ( ) ; }
private org.ovirt.engine.core.aaa.DirectoryGroup mapGroup ( org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup ) { return new org.ovirt.engine.core.aaa.DirectoryGroup ( this . getName ( ) , ldapGroup.getid ( ) , ldapGroup.getname ( ) ) ; }
protected com.google.gwt.user.cellview.client.CellTree createDataDisplayWidget ( org.ovirt.engine.ui.webadmin.uicommon.model.TagModelProvider modelProvider ) { com.google.gwt.user.cellview.client.CellTree display = new org.ovirt.engine.ui.common.widget.tree.ElementIdCellTree ( modelProvider , null , org.ovirt.engine.ui.webadmin.widget.tags.TagList.res ) ; display.setAnimationEnabled ( true ) ; display.setKeyboardSelectionPolicy ( KeyboardSelectionPolicy.BOUND_TO_SELECTION ) ; return display ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmDefaultPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; updateSpmPriorityValues ( ) ; updateSpmPriority ( ) ; }
private void mockDbFacades ( ) { mockVdsGroupDao ( ) ; mockVmDao ( ) ; mockAuditLogDao ( ) ; mockVdsDao ( ) ; }
protected boolean saveDiskIfNotExists ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { if ( ! ( getBaseDiskDao ( ) . exists ( image.getId ( ) ) ) ) { getBaseDiskDao ( ) . save ( image ) ; return true ; } return false ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel model ) { return model.getName ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( ) { network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setname ( "test network" ) ; return network ; }
public void setCpuPerSocket ( int value ) { this . vmStatic.setCpuPerSocket ( value ) ; }
protected void cancel ( ) { setWindow ( null ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { if ( _isNode ) { _isLegacyNode = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( VdsmEnv.OVIRT_NODE_HAS_OWN_BRIDGES ) ) ) ; } else { _parser.cliNoop ( ) ; } return true ; }
public org.ovirt.engine.api.v3.servers.V3VmNicServer getNicResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return new org.ovirt.engine.api.v3.servers.V3VmNicServer ( vmId , delegate.getNicResource ( id ) ) ; }
public org.ovirt.engine.core.config.entity.ConfigKey generateBlankConfigKey ( java.lang.String keyName , java.lang.String keyType ) { return new org.ovirt.engine.core.config.entity.ConfigKey ( keyType , "" , "" , keyName , "" , null , "" , getHelperByType ( keyType ) , false , false ) ; }
public void validateFails ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DeleteGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( stoppedVolumeId , geoRepSessionId ) , null ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected void cancel ( ) { setWindow ( null ) ; setConfirmWindow ( null ) ; }
public void store ( org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback ) { }
protected void findUsers ( java.lang.String searchString , org.ovirt.engine.ui.frontend.AsyncQuery query ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDbUsers , getParameters ( ) , query ) ; }
public void setEntity ( java.lang.Boolean enableManualMac ) { super . setEntity ( enableManualMac ) ; getMAC ( ) . setIsChangable ( enableManualMac ) ; }
private java.util.ArrayList < java.lang.String > splitPreserveAllTokens ( java.lang.String str ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( str ) ) { return null ; } return new java.util.ArrayList ( java.util.Arrays.asList ( org.apache.commons.lang.StringUtils.splitPreserveAllTokens ( str , org.ovirt.engine.core.dao.SEPARATOR ) ) ) ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.test ( storageDomain ) ) ; }
public void processHardwareCapabilities ( org.ovirt.engine.core.common.businessentities.VDS vds ) { getEventListener ( ) . processOnCpuFlagsChange ( vds.getId ( ) ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData model , java.lang.Boolean value ) { model.getClone ( ) . setEntity ( value ) ; table.asEditor ( ) . edit ( importModel ) ; }
public boolean isMixedStorageDomainsSupported ( org.ovirt.engine.core.compat.Version version ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.MixedDomainTypesInDataCenter , version.toString ( ) ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.NetworkStatus getStatus ( ) { return ( cluster ) == null ? null : org.ovirt.engine.core.common.businessentities.NetworkStatus.forValue ( cluster.getstatus ( ) ) ; }
java.lang.String diskNote ( ) ;
public void testEmptyKeyVal ( ) { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.EMPTY_KEY_VAL ) ; org.junit.Assert.assertEquals ( 2 , map.size ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getDbFacade ( ) . getVdsDao ( ) . getHostsForStorageOperation ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . isLocalFsOnly ( ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( ) ; }
protected void validateClientAcceptHeader ( org.ovirt.engine.core.sso.utils.SsoSession ssoSession , javax.servlet.http.HttpServletRequest request ) { org.ovirt.engine.core.sso.utils.SsoUtils.validateClientAcceptHeader ( request ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _parser.cliEnvironmentSet ( OpenStackEnv.NEUTRON_OPENVSWITCH_ENABLE , true ) ; return true ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; }
protected void initBackendResource ( org.ovirt.engine.api.restapi.resource.BackendResource resource ) { resource.setMessageBundle ( messageBundle ) ; resource.setHttpHeaders ( httpHeaders ) ; }
private java.lang.String getDomainDN ( java.lang.String url ) throws javax.naming.NamingException { org.ovirt.engine.core.ldap.RootDSEData rootDSEData = new org.ovirt.engine.core.ldap.RootDSEData ( url ) ; return rootDSEData.getDomainDN ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.Model setIsChangeable ( boolean value ) { return setIsChangeable ( value , null ) ; }
public static org.ovirt.engine.core.common.businessentities.network.VmInterfaceType getDefaultNicType ( ) { return org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.pv ; }
public boolean checkDestDomains ( ) { return super . checkDestDomains ( ) ; }
public java.lang.Void runInTransaction ( ) { logAndFailTaskOfCommandWithEmptyVdsmId ( task , "Engine was restarted before all tasks of the command could be submitted to vdsm." ) ; return null ; }
public java.lang.String getData ( java.lang.String format ) { return getDataTransfer ( ) . getData ( format ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : - 1 ; }
protected org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getVmPropertiesUtils ( ) { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance ( ) ; }
public java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getTaskIdList ( ) { return super . getTaskIdList ( ) ; }
public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { return pool.getName ( ) ; }
public org.ovirt.engine.core.compat.Guid getMasterDomainId ( ) { return privateMasterDomainId ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.DisplayType > getDisplayTypes ( int osId , org.ovirt.engine.core.compat.Version version ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DisplayType > ( parseDisplayProtocols ( osId , version ) . keySet ( ) ) ; }
public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { if ( object.isBoot ( ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.bootableDisk ( ) ; } return null ; }
public org.ovirt.engine.api.v3.types.V3VM update ( org.ovirt.engine.api.v3.types.V3VM vm ) { vm = adaptUpdate ( getDelegate ( ) :: update , vm ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper.addDisksLink ( vm ) ; return vm ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object ) { return java.lang.String.join ( ", " , object.getDnsServers ( ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _aborted = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( BaseEnv.ABORTED ) ) ) ; return true ; }
private void writeJaxbClass ( java.lang.String value ) { writeJaxbCustomization ( "class" , "name" , value ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( getTemplate ( ) ) ; org.ovirt.engine.api.model.Cdrom cdrom = resource.get ( ) ; verifyModel ( cdrom ) ; verifyLinks ( cdrom ) ; }
public java.lang.Void runInTransaction ( ) { hostDeviceDao.saveAllInBatch ( newDevices ) ; hostDeviceDao.updateAllInBatch ( changedDevices ) ; hostDeviceDao.removeAllInBatch ( removedDevices ) ; handleHostNicVfsConfigUpdate ( newDevices , changedDevices , removedDevices ) ; vmDeviceDao.removeAllInBatch ( removedVmDevices ) ; return null ; }
private org.ovirt.engine.core.common.businessentities.Provider < ? > getHostProvider ( ) { return org.ovirt.engine.core.bll.AddVdsCommand.getProviderDao ( ) . get ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getProviderId ( ) ) ; }
protected org.ovirt.engine.api.model.HostNIC map ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifaces ) { return map ( iface , null , ifaces ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . getContainerId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.REMOTE_VM , org.ovirt.engine.core.bll.ImportVmCommand.getVmIsBeingImportedMessage ( ) ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.PauseVDSCommand.getBroker ( ) . pause ( mVmId.toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PauseVDSCommand.ProceedProxyReturnValue ( ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicData ( mVmReturn.mVm ) . getStatus ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; prepareMocks ( ) ; }
public void setup ( ) { org.mockito.Mockito.doReturn ( connExtDaoMock ) . when ( helper ) . getConnectionExtensionDao ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; vmID = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; }
private boolean handleDestStorageDomain ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { ensureDomainMap ( disksList , org.ovirt.engine.core.bll.ExportVmCommand.getStorageDomainId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > dummiesDisksList = createDiskDummiesForSpaceValidations ( disksList ) ; dummiesDisksList.addAll ( getMemoryVolumes ( ) ) ; return validateSpaceRequirements ( dummiesDisksList ) ; }
public static void GetConfigFromCache ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configValue , version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( parameters , aQuery ) ; }
protected void closeChannel ( ) { try { if ( ( this . channel ) != null ) { this . channel.close ( ) ; } } catch ( java.io.IOException e ) { } finally { this . channel = null ; } }
protected void updateCurrentCd ( java.lang.String cdPath ) { cdPath = ( org.apache.commons.lang.StringUtils.isEmpty ( cdPath ) ) ? null : cdPath ; vmHandler.updateCurrentCd ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) , cdPath ) ; }
protected void buildVmSoundDevices ( ) { if ( ( vm.getVmType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmType.Desktop ) ) { createInfo.put ( VdsProperties.soundDevice , getSoundDevice ( vm.getStaticData ( ) , vm.getVdsGroupCompatibilityVersion ( ) ) ) ; } }
public void testGetAllByStoragePoolAndConnectionWithInvalidConnection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllByStoragePoolAndConnection ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public static boolean interfaceBasedOn ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface proposedIface , java.lang.String iface ) { return ( ( iface != null ) && ( proposedIface != null ) ) && ( iface.equals ( org.ovirt.engine.core.utils.NetworkUtils.stripVlan ( proposedIface ) ) ) ; }
public void hostNameNotUsed ( ) { org.junit.Assert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { setTicketUsingUpdateDevice ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.proceedProxyReturnValue ( ) ; }
protected T getOldQos ( ) { if ( ( ( oldQos ) == null ) && ( ( qos ) != null ) ) { oldQos = getQosDao ( ) . get ( qos.getId ( ) ) ; } return oldQos ; }
public void saveInterfaceForVds ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createInterfaceParametersMapper ( nic ) ; getCallsHandler ( ) . executeModification ( "Insertvds_interface" , parameterSource ) ; }
public void updateFields ( ) { getModel ( ) . startProgress ( ) ; doUpdateManagedFieldsFrom ( getSource ( ) ) ; }
public void networkNotInCluster ( ) throws java.lang.Exception { vnicProfileValidationTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER ) , true , false ) ; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool ( org.ovirt.engine.core.bll.network.macpool.MacPool macPool ) { return new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges ( macPool.getId ( ) , org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges ( macPool ) , macPool.isAllowDuplicateMacAddresses ( ) ) ; }
private org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > createCommand ( org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters params ) { org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand ( params ) ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDao ( ) ; return command ; }
public org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( org.ovirt.engine.core.compat.Guid storagePoolId , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getAllForStoragePool ( storagePoolId ) ; return findStorageDomainForMemory ( domainsInPool , disksList ) ; }
private org.ovirt.engine.ui.uicompat.UIConstants getConstants ( ) { if ( ( constants ) == null ) { constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ; } return constants ; }
public void setTitle ( java.lang.String title ) { getCell ( ) . setTitle ( title ) ; }
public org.ovirt.engine.api.v3.servers.V3VmGraphicsConsoleServer getConsoleResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return new org.ovirt.engine.api.v3.servers.V3VmGraphicsConsoleServer ( getDelegate ( ) . getConsoleResource ( id ) ) ; }
public boolean isInSync ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails details = getNetworkImplementationDetails ( ) ; return ( details == null ) || ( details.isInSync ( ) ) ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { refreshClustersTable ( ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > getStoragePools ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent ) { return parent.getEntity ( java.util.List.class , VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , "Datacenters" , true ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index , java.lang.String networkName ) { return setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index , networkName ) ; }
public void setUserId ( final org.ovirt.engine.core.compat.Guid value ) { mUserId = value ; }
public org.ovirt.engine.core.compat.Guid getVmId ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return getParameters ( ) . getVm ( ) . getId ( ) ; } return super . getVmId ( ) ; }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return new org.ovirt.engine.core.bll.storage.pool.RefreshStoragePoolAndDisconnectAsyncOperation ( getVdss ( ) , getStorageDomain ( ) , getStoragePool ( ) ) ; }
public void getUsbPolicyNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) , UsbPolicy.DISABLED ) ; }
public boolean getTransparentHugepages ( ) { return transparentHugepages ; }
void buildVmNetworkInterfaces ( ) ;
public boolean eval ( org.ovirt.engine.core.common.businessentities.Network n ) { return n.getname ( ) . equals ( bond.getName ( ) ) ; }
public static java.util.List < java.lang.String > runAndAssertCanDoActionFailure ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.EngineMessage message ) { return org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "" , command , message ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDevice , java.util.Set < java.lang.String > networksToSync ) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment ( network , baseNic , vlanDevice , null , networksToSync , null , null ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { model.stopProgress ( ) ; setConfirmWindow ( null ) ; }
public java.lang.String getAdGroupName ( ) { if ( ( ( mGroupName ) == null ) && ( ( getAdGroup ( ) ) != null ) ) { mGroupName = getAdGroup ( ) . getName ( ) ; } return mGroupName ; }
public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { return org.ovirt.engine.core.bll.VdsGroupOperationCommandBase.getParameters ( ) . getVdsGroup ( ) ; }
public boolean isPmEnabled ( ) { return mVdsStatic.isPmEnabled ( ) ; }
protected void setModelProvider ( com.google.inject.Provider < ? extends org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel > importModelProvider ) { this . importModelProvider = importModelProvider ; }
public void removeTabWidget ( com.google.gwt.user.client.ui.IsWidget tabWidget ) { mainTabContainer.removeChild ( tabWidget.asWidget ( ) . getElement ( ) ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( ) ; super . syncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getuser_id ( ) ) ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendNetworkResource ( "foo" , null ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool , boolean isNewSpm ) { if ( isNewSpm ) { org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . StopStoragePoolTasks ( storagePool ) ; } else { org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . AddStoragePoolExistingTasks ( storagePool ) ; } }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { endAction ( getCommand ( cmdId ) , true ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain createDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setStorageName ( "mydomain" ) ; return domain ; }
public java.lang.Boolean isRequired ( ) { return ( cluster ) == null ? null : cluster.isRequired ( ) ; }
public void setupCommand ( ) { initSpyCommand ( ) ; mockBackend ( ) ; mockDaos ( ) ; mockVm ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkCluster createManagementNetworkCluster ( ) { return new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( org.ovirt.engine.core.bll.AddClusterCommand.getClusterId ( ) , getManagementNetwork ( ) . getId ( ) , org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL , true , true , true , true , false , true ) ; }
public org.ovirt.engine.api.model.VmPools list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllVmPoolsAttachedToUser , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , SearchType.VmPools ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.VmPools ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster createNetworkClusterWithDefaultValues ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.common.businessentities.network.Network net ) { return new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( clusterId , net.getId ( ) , org.ovirt.engine.core.common.businessentities.network.NetworkStatus.NON_OPERATIONAL , false , true , false , false , false , false ) ; }
public org.ovirt.engine.core.bll.SPMAsyncTask CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters taskParameters ) { return org.ovirt.engine.core.bll.AsyncTaskFactory.Construct ( taskType , taskParameters , false ) ; }
protected void endWithFailure ( ) { org.ovirt.engine.core.bll.ExportVmCommand.endActionOnAllImageGroups ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.unLockVm ( vm ) ; org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded ( true ) ; }
public void tearDown ( ) { org.ovirt.engine.api.restapi.invocation.CurrentManager.remove ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllWithQuery ( java.lang.String query ) { return jdbcTemplate.query ( query , org.ovirt.engine.core.dao.DiskDaoDbFacadeImpl.DiskRowMapper.instance ) ; }
public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; initializeCommand ( storageId ) ; mockVmWithDisk ( storageId ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; runAndAssertCanDoActionSuccess ( ) ; }
private org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase getAddParams ( org.ovirt.engine.core.common.businessentities.StorageServerConnections entity , org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase params = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( entity , hostId , false ) ; params.setVdsId ( hostId ) ; return params ; }
private java.lang.String getPostUpdateOvfStoreDescription ( long size ) { if ( ( postUpdateDescription ) == null ) { postUpdateDescription = generateOvfStoreDescription ( updateDate , true , size ) ; } return postUpdateDescription ; }
public void onSuccess ( java.lang.Object returnValue ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qoss = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > ) ( returnValue ) ) ; qosById = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( qoss ) ; queryInterfaces ( ) ; }
protected org.ovirt.engine.core.bll.storage.StoragePoolValidator createStoragePoolValidator ( ) { return new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.Cluster returnValue ) { cluster = returnValue ; updateActionAvailability ( ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.StorageDomain value ) { super . setEntity ( value ) ; }
public void testGetVolumesSupportedAsStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > vols = dao.getVolumesSupportedAsStorageDomain ( ) ; org.junit.Assert.assertEquals ( 2 , vols.size ( ) ) ; }
protected boolean validateDestStorage ( ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) ) ; return ( validate ( validator.isDomainExistAndActive ( ) ) ) && ( validate ( validator.domainIsValidDestination ( ) ) ) ; }
private void initListBoxEditors ( ) { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.RaidType > ( ) ) ; }
protected void initWidget ( T widget ) { super . initWidget ( widget ) ; widget.setModal ( true ) ; widget.setGlassEnabled ( true ) ; widget.addStyleName ( resources.dialogBoxStyle ( ) . getName ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpRestoreExpectations ( ) { return setUpActionExpectations ( VdcActionType.RestoreAllSnapshots , org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters.class , new java.lang.String [ ] { "VmId" , "SnapshotAction" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.VM_ID , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT } , true , true , null ) ; }
public void setSuperItems ( java.lang.Iterable value ) { super . setItems ( value ) ; }
void mockSessionDataContainer ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery query ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.SSO_TOKEN ) . when ( sessionDataContainer ) . getSsoAccessToken ( org.mockito.Matchers.anyString ( ) ) ; }
private org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeOptionsCommand createTestCommand ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeOptionsCommand ( new org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters ( volumeId , null , false ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > getDevicesCollection ( org.ovirt.engine.core.compat.Guid vmId ) { return getBackendCollection ( org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface.class , VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) ; }
private boolean allowedNetworkLabelManipulation ( ) { boolean labelNotChanged = ! ( labelChanged ( ) ) ; return ( ! ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) . isExternal ( ) ) ) && ( labelNotChanged || ( labelAdded ( ) ) ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( ) ; super . syncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }
org.ovirt.engine.api.resource.PermitsResource getPermitsResource ( ) ;
private org.ovirt.engine.core.bll.ValidationResult validateNetworkExclusiveOnNics ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator validator = new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( attachmentsToConfigure , networkBusinessEntityMap ) ; return validator.validateNetworkExclusiveOnNics ( ) ; }
public static boolean isGlusterSwiftSupported ( org.ovirt.engine.core.compat.Version version ) { return false ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; createInputLUNs ( ) ; }
void vdsNotResponding ( org.ovirt.engine.core.common.businessentities.VDS vds , long lastUpdate ) ;
private org.ovirt.engine.core.common.utils.SubnetUtils getsSubnetUtilsInstance ( ) { return org.ovirt.engine.core.common.utils.SubnetUtils.getInstance ( ) ; }
public java.lang.String GetCustomValue ( final java.lang.String name ) { if ( customValues.containsKey ( name ) ) { return customValues.get ( name ) ; } return "" ; }
private void mockMaxPciSlots ( ) { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddVmFromTemplateCommandTest.MAX_PCI_SLOTS ) . when ( osRepository ) . getMaxPciDevices ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
protected void beforeTask ( ) { }
public static java.lang.Object [ ] [ ] namesParams ( ) { return new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "a.a.a.a" , false , false } , new java.lang.Object [ ] { "//32" , false , false } , new java.lang.Object [ ] { "33" , false , false } , new java.lang.Object [ ] { "253.0.0.32" , true , false } , new java.lang.Object [ ] { "255.255.255.0" , true , true } , new java.lang.Object [ ] { "15" , true , true } } ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
protected abstract void initSelectedNetwork ( ) ;
public java.lang.Boolean call ( ) throws java.lang.Exception { _resultError = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( BaseEnv.ERROR ) ) ) ; return true ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior ) ( target ) ) ; behavior.PostInitTemplate ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) ; }
public void parseLunFromXmlRpcReturnsUnknownForNoField ( ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; org.ovirt.engine.core.common.businessentities.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.ParseLunFromXmlRpc ( xlun ) ; org.junit.Assert.assertEquals ( StorageType.UNKNOWN , lun.getLunType ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getDeviceList ( int storageType ) ;
protected void onReveal ( ) { super . onReveal ( ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetSearchPanel , searchPanel ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetTabBar , tabBar ) ; }
private void handleVdsMaintenanceTimeout ( ) { getVdsEventListener ( ) . handleVdsMaintenanceTimeout ( _vds.getId ( ) ) ; _vdsManager.calculateNextMaintenanceAttemptTime ( ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { return org.apache.commons.lang.StringUtils.equals ( i.getNetworkName ( ) , getParameters ( ) . getNetwork ( ) . getname ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . setTestResultImage ( model.getTestResult ( ) . getEntity ( ) ) ; }
public void setId ( org.ovirt.engine.core.compat.Guid id ) { Id = id ; }
private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap getStoragePoolIsoMap ( ) { return org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolIsoMapDAO ( ) . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolId ( ) ) ) ; }
protected boolean canDoAction ( ) { return org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.CommonNetworkValidation ( org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters ( ) . getNetwork ( ) , org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.network.Bond createBond ( java.lang.String bondName ) { return createBond ( bondName , null , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; }
public void canDoActionSucceeds ( ) { cmd = createTestCommand ( volumeId2 , 0 ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.DiskInterface forValue ( java.lang.String name ) { return org.ovirt.engine.core.common.businessentities.DiskInterface.mappings.get ( name ) ; }
private void setupForLun ( ) { lunDisk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createLunDisk ( ) ; lunValidator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( lunDisk ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isDirectLunDiskAvaialable = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > ) ( sender ) ) . getEntity ( ) ; externalDiskPanel.setVisible ( isDirectLunDiskAvaialable ) ; }
protected abstract java.lang.Object getValue ( org.ovirt.engine.core.common.config.DataType type , java.lang.String name , java.lang.String defaultValue ) ;
public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return diskImage.getId ( ) ; }
static org.ovirt.engine.api.model.Nic getModel ( int index ) { org.ovirt.engine.api.model.Nic model = new org.ovirt.engine.api.model.Nic ( ) ; model.setName ( NAMES [ index ] ) ; model.setInterface ( NicInterface.RTL8139_VIRTIO ) ; return model ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { populateDomains ( ( ( java.util.List < java.lang.String > ) ( result ) ) ) ; }
protected javax.ws.rs.core.Response actionFailure ( org.ovirt.engine.api.model.Action action , javax.ws.rs.WebApplicationException wae ) { action.setStatus ( CreationStatus.FAILED.value ( ) ) ; return javax.ws.rs.core.Response.fromResponse ( wae.getResponse ( ) ) . entity ( action ) . build ( ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.StoragePool source ) { return ( source.getStatus ( ) ) != ( status ) ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic.getLabels ( ) ) ; setCustomProperties ( sourceNic.getCustomProperties ( ) ) ; }
private void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } setWindow ( new org.ovirt.engine.ui.uicommonweb.models.providers.EditProviderModel ( this , getSelectedItem ( ) ) ) ; }
protected void addCanDoActionMessage ( org.ovirt.engine.core.common.errors.EngineMessage message ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( message.name ( ) ) ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( "" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public org.ovirt.engine.core.compat.Guid getMacPoolId ( ) { return getParameters ( ) . getMacPoolId ( ) ; }
void processOnVmPoweringUp ( org.ovirt.engine.core.compat.Guid vmId ) ;
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getSelectableModels ( ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > items = getModel ( ) . getStorageModels ( ) ; return getSelectableModels ( items ) ; }
protected boolean validate ( ) { return validate ( validator.isIscsiBondExist ( getIscsiBond ( ) ) ) ; }
protected void performLogout ( ) { getLoginModel ( ) . resetAfterLogout ( ) ; user.onUserLogout ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . clearCache ( ) ; org.ovirt.engine.ui.common.uicommon.model.CleanupModelEvent.fire ( eventBus ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > GetTagsAttachedToObject ( ) { return getTagDAO ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureFromItem ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { return template.getClusterArch ( ) ; }
private org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateWithPlugInfo getVMTemplatesWithPlugInfo ( org.ovirt.engine.core.compat.Guid imageId ) { return getCallsHandler ( ) . executeRead ( "GetVmTemplatesByImageId" , org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateWithPlugInfoRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "image_guid" , imageId ) ) ; }
public void validateFailsNullParameterForIsoFile ( ) { mockVdsWithOsVersion ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION ) ; command.getParameters ( ) . setoVirtIsoFile ( null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE ) ; }
public void stopRefresh ( ) { if ( ( getTimer ( ) ) != null ) { getTimer ( ) . stop ( ) ; } }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( boolean vmNetwork , int mtu , java.lang.Integer vlanId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setVmNetwork ( vmNetwork ) ; network.setMtu ( mtu ) ; network.setVlanId ( vlanId ) ; return network ; }
public org.ovirt.engine.core.common.businessentities.VDSType getVdsType ( ) { return vdsType ; }
public int compare ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2 ) { return ( - 1 ) * ( storageDomain.getAvailableDiskSize ( ) . compareTo ( storageDomain2.getAvailableDiskSize ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( getGlusterHook ( ) ) != null ) { setVdsGroupId ( getGlusterHook ( ) . getClusterId ( ) ) ; } return super . getVdsGroup ( ) ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic.getLabels ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) { return true ; } return false ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface.getId ( ) , iface.getName ( ) , false , bondName , null , null , true , null ) ; }
public void remove ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_pool_id" , id ) ; getCallsHandler ( ) . executeModification ( "DeleteVm_pools" , parameterSource ) ; }
public void setStorageDomainType ( org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType ) { getStorageStaticData ( ) . setStorageDomainType ( storageDomainType ) ; }
protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters ( ) { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; return parameters ; }
public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC device ) { validateEnums ( org.ovirt.engine.api.model.NIC.class , device ) ; return super . update ( device ) ; }
org.ovirt.engine.core.common.businessentities.AuditLog createAuditLog ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String message ) ;
public org.ovirt.engine.core.common.action.VdcActionParametersBase doWith ( final org.ovirt.engine.core.common.businessentities.StorageDomain arg ) { final org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( arg.getId ( ) , arg.getStoragePoolId ( ) ) ; params.setRunSilent ( true ) ; return params ; }
public static java.lang.String toPlural ( java.lang.String candidate ) { if ( ( ( candidate.length ( ) ) >= 1 ) && ( ! ( candidate.endsWith ( "s" ) ) ) ) { return candidate + "s" ; } return candidate ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider < ? > > returnValue ) { setProviders ( ( ( java.util.List ) ( returnValue ) ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.VmTemplate template , java.lang.String value ) { transitionHandler.handlePlaceTransition ( true ) ; }
public static java.lang.String getVmwareUrl ( java.lang.String username , java.lang.String vcenter , java.lang.String dataCenter , java.lang.String cluster , java.lang.String esx , boolean verify ) { if ( username != null ) { username = username.replace ( "@" , "%40" ) ; } return ( ( ( ( ( ( "vpx://" + ( org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty ( username ) ? "" : username + "@" ) ) + vcenter ) + "/" ) + ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel.mergeDcAndCluster ( dataCenter , cluster ) ) ) + "/" ) + esx ) + ( verify ? "" : "?no_verify=1" ) ; }
private void setDisksToBeAttached ( org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration ) { vmDisksToAttach = vmFromConfiguration.getDiskMap ( ) . values ( ) ; org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.clearVmDisks ( vmFromConfiguration ) ; org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters ( ) . setCopyCollapse ( true ) ; }
public org.ovirt.engine.api.model.StorageConnectionExtension update ( org.ovirt.engine.api.model.StorageConnectionExtension incoming ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionExtensionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; return performUpdate ( incoming , resolver , VdcActionType.UpdateStorageServerConnectionExtension , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionResource.UpdateParametersProvider ( ) ) ; }
public void onSuccess ( java.lang.Boolean returnValue ) { connect ( returnValue ) ; }
private void createTables ( org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel model ) { createEntityTable ( model ) ; createInfoPanel ( model ) ; entityTable.asEditor ( ) . edit ( model.getEntities ( ) ) ; }
public void removeCustomizationCondition ( java.lang.String cond ) { _customizationConditions.remove ( cond ) ; }
public org.ovirt.engine.api.model.VmPool get ( ) { return performGet ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.StoragePool storagePool , java.lang.String value ) { transitionHandler.handlePlaceTransition ( true ) ; }
public org.ovirt.engine.core.common.businessentities.VMStatus getRawValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getStatus ( ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage image , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImage ( image , image.getactive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getstorage_ids ( ) . get ( 0 ) ) , vmId ) ; }
org.ovirt.engine.ui.webadmin.widget.host.VLanPanel createVLanPanel ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel ) { org.ovirt.engine.ui.webadmin.widget.host.VLanPanel panel = new org.ovirt.engine.ui.webadmin.widget.host.VLanPanel ( ) ; panel.setWidth ( "100%" ) ; panel.setHeight ( "100%" ) ; panel.addVLans ( lineModel ) ; return panel ; }
public java.lang.String getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) ; return org.ovirt.engine.ui.uicompat.external.StringUtils.join ( diskImage.getStoragesNames ( ) , ", " ) ; }
public void canDoActionDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; command.getImage ( ) . setOvfStore ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
private void initHandlers ( ) { mTagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler ( ) ; org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.ovirt.engine.core.bll.VdsHandler.init ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.Init ( ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getAllForAdElement ( org.ovirt.engine.core.compat.Guid id ) { return getAllForAdElement ( id , ( - 1 ) , false ) ; }
public void reportCompleted ( ) { try { super . reportCompleted ( ) ; } finally { if ( ( getDestinationVdsId ( ) ) != null ) { decreasePendingVms ( getDestinationVdsId ( ) ) ; } } }
public org.ovirt.engine.core.common.businessentities.VolumeType getSelectedVolumeType ( ) { if ( ! ( ( java.lang.Boolean ) ( collapseSnapshots.getEntity ( ) ) ) ) { return getVolumeType ( ) ; } return selectedVolumeType ; }
protected void refreshEntityTable ( ) { entityTable.asEditor ( ) . edit ( entityTable.asEditor ( ) . flush ( ) ) ; entityTable.redraw ( ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getHookEntity ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = new org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity ( ) ; hook.setClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.CLUSTER_ID ) ; hook.setId ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.HOOK_ID ) ; hook.setServerHooks ( getGlusterServerHooks ( ) ) ; return hook ; }
public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds.getName ( ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader , header ) ; alertManager.setCanShowAlerts ( true ) ; }
public void onSuccess ( java.lang.Integer returnValue ) { spmDefaultPriorityValue = returnValue ; updateSpmPriorityValues ( ) ; updateSpmPriority ( ) ; }
public boolean isNetworkInSync ( ) { return ( ( ( isNetworkMtuInSync ( ) ) && ( isNetworkVlanIdInSync ( ) ) ) && ( isNetworkBridgedFlagInSync ( ) ) ) && ( qosParametersEqual ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB ) { mockVmTemplateDaoReturnVmTemplate ( ) ; mockStorageDomainDaoGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDaoGet ( domainSizeGB ) ; mockConfig ( ) ; return org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; }
protected void setupForStorageTests ( ) { org.mockito.Mockito.doReturn ( multipleSdValidator ) . when ( command ) . getStorageDomainsValidator ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { hostModel.setPmProxyPreferences ( ( ( java.lang.String ) ( returnValue ) ) ) ; }
protected boolean isWindows ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . isWindowsOsType ( osId ) ; }
private void validateNetworkQos ( ) { validateQosNotPartiallyConfigured ( ) ; validateQosCommitment ( ) ; }
public void setAddress ( java.lang.String value ) { address = value ; }
private boolean isHostAvailable ( org.ovirt.engine.core.common.businessentities.VDS host ) { boolean isStatusUp = ( host.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ; return isStatusUp ; }
public void testUpdate ( ) { existingPool.setdescription ( "Farkle" ) ; existingPool.setStoragePoolFormatType ( StorageFormatType.V1 ) ; dao.update ( existingPool ) ; org.ovirt.engine.core.common.businessentities.StoragePool result = dao.get ( existingPool.getId ( ) ) ; assertGetResult ( result ) ; }
public org.ovirt.engine.api.resource.AssignedPermissionsResource getPermissionsResource ( ) { return super . getPermissionsResource ( ) ; }
public void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.compat.Guid asyncTaskId , java.lang.String message ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = coco.getAsyncTaskFromDb ( asyncTaskId ) ; if ( task != null ) { logAndFailTaskOfCommandWithEmptyVdsmId ( task , message ) ; } }
public void setUserId ( final org.ovirt.engine.core.compat.Guid value ) { mUserId = value.getValue ( ) ; }
private java.lang.String createShortMacAddress ( ) { return org.ovirt.engine.core.common.businessentities.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS.substring ( ( ( random.nextInt ( ( ( org.ovirt.engine.core.common.businessentities.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS.length ( ) ) - 2 ) ) ) + 1 ) ) ; }
public void setOptionsMap ( java.util.Map < java.lang.String , java.lang.String > value ) { optionsMap = value ; options = org.ovirt.engine.core.common.businessentities.pm.FenceAgent.optionsMapToString ( value ) ; }
private boolean shouldTakeIpv4DataFromNic ( ) { if ( ( ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.DHCP ) == ( getIpv4BootProtocol ( ) ) ) && ( ( nic ) != null ) ) { return true ; } return false ; }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidator ( ) { return org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class ) ; }
private void assertInvalidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED ) ; }
public boolean getIsPlugged ( ) { return isPlugged ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { return org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . get ( object.getPolicyUnitType ( ) ) ; }
protected void mockGetStorageDomainList ( ) { storageDomainsList = getStorageDomainList ( ) ; mockDiskImageDao ( ) ; mockStorageDomainDao ( storageDomainsList ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; if ( cluster != null ) { powerAction ( actionName , title , message , cluster.isOptionalReasonRequired ( ) ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; rollback5 ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmDisksFromDB ( ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.VmHandler.filterImageDisksForVM ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) ) ; return org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) . getDiskList ( ) ; }
void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) ;
private org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand createTestCommand2 ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters ( volumeId , null , getBricks ( volumeId , "" , 1 ) . get ( 0 ) ) , null ) ; }
public java.lang.String getVmName ( ) { if ( ( ( mVmName ) == null ) && ( ( getVm ( ) ) != null ) ) { mVmName = getVm ( ) . getVmName ( ) ; } return mVmName ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { return runMultipleActionsImpl ( actionType , parameters , true , false , executionContext ) ; }
public void validate_vmNotExists_Test ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vmStaticDao ) . get ( org.mockito.ArgumentMatchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INVALID_ENTITY_FOR_AFFINITY_GROUP ) ; }
public void testBeanValidations ( ) { org.junit.Assert.assertTrue ( cmd.validateInputs ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( ( java.lang.Boolean ) ( getSpecificClusterQuota ( ) . getEntity ( ) ) ) == true ) { getGlobalClusterQuota ( ) . setEntity ( false ) ; } }
public void setEntity ( org.ovirt.engine.core.common.businessentities.Network value ) { super . setEntity ( value ) ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; if ( ( getAppListModel ( ) ) != null ) { getAppListModel ( ) . setEntity ( getSelectedItem ( ) ) ; } }
protected boolean getForce ( ) { return force ; }
protected boolean isVmWithSameNameExistStatic ( ) { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic ( org.ovirt.engine.core.bll.IsVmWithSameNameExistQuery.getParameters ( ) . getName ( ) ) ; }
public void validateFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.PauseGlusterVolumeGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( ) , null ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
private void mapIsEmpty ( final java.util.Map < java.lang.String , java.lang.String > map ) { junit.framework.Assert.assertEquals ( 0 , map.size ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( ( a.getStatus ( ) ) == domainStatus ) && ( ! ( a.getId ( ) . equals ( getStorageDomain ( ) . getId ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.IPv4Address getIpv4PrimaryAddress ( ) { return networkDataCenterIpConfigurationDefinition.getIpv4PrimaryAddress ( ) ; }
protected boolean runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return runConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
public void validate_vmNameExists_Test ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ) . when ( affinityGroupDao ) . getByName ( org.mockito.Matchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS ) ; }
public boolean isSingleSelectionOnly ( ) { return true ; }
public void removeStorageDomain ( org.ovirt.vdsmfake.domain.StorageDomain storageDomain ) { storageDomainMap.remove ( storageDomain.getId ( ) ) ; org.ovirt.vdsmfake.domain.VdsmManager.log.info ( "Removing storage domain: {}" , storageDomain.getId ( ) ) ; removeObject ( storageDomain ) ; }
protected void disableLoginScreen ( ) { getUserName ( ) . setIsChangeable ( false ) ; getProfile ( ) . setIsChangeable ( false ) ; }
protected org.ovirt.engine.core.compat.Guid getQuotaId ( ) { return getQuota ( ) . getId ( ) ; }
public void checkIPAdress ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.IPAddressPatternTest.IPAdress > > validate = validator.validate ( new org.ovirt.engine.core.common.utils.IPAddressPatternTest.IPAdress ( address ) ) ; org.junit.Assert.assertEquals ( expectedResult , validate.isEmpty ( ) ) ; }
public static org.ovirt.engine.core.common.queries.ValueObjectMap instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { return new org.ovirt.engine.core.common.queries.ValueObjectMap ( ) ; }
public void testDiskAttachedToAnyNonDownVM ( ) { org.junit.Assert.assertThat ( validator.isDiskPluggedToAnyNonDownVm ( false ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void noCluster ( ) { assertValidateFailure ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID.toString ( ) ) ; }
public org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createTestedInstance ( ) { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface ( iface , network , networkQos , testedNetworkAttachment , cluster ) ; }
private static org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider < ? > getHostProvider ( ) { return org.ovirt.engine.core.bll.AddVdsCommand.getProviderDao ( ) . get ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getProviderId ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; existingDomain = dao.get ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getVDSGroup ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup.class , VdcQueryType.GetVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , clusterId ) ; }
protected void writeBuffer ( java.nio.ByteBuffer buff ) throws java.io.IOException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ! ( isOpen ( ) ) ) { connect ( ) ; } write ( buff ) ; }
public void invalidLowMTU ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( 30 ) ) ; org.junit.Assert.assertTrue ( ( ! ( validate.isEmpty ( ) ) ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.HostNetworkQosValidator validator = getQosValidator ( getQos ( ) ) ; return ( ( super . validate ( ) ) && ( validate ( validator.requiredValuesPresent ( ) ) ) ) && ( validate ( validator.valuesConsistent ( ) ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { if ( ( i.getNetworkName ( ) ) != null ) { return i.getNetworkName ( ) . equals ( getParameters ( ) . getNetwork ( ) . getName ( ) ) ; } return false ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 , false , false , false ) ; verifyModel ( resource.get ( ) , 1 ) ; }
public void testMarkHostDevicesUsedByVmId ( ) { dao.markHostDevicesUsedByVmId ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = dao.getHostDeviceByHostIdAndDeviceName ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , hostDevice.getVmId ( ) ) ; }
public org.ovirt.vdsmfake.AppConfig.ArchitectureType getArchitectureType ( ) { return org.ovirt.vdsmfake.AppConfig.ArchitectureType.valueOf ( architectureType ) ; }
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > result = dao.getAllAttachableDisksByPoolId ( null , null , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; org.ovirt.engine.core.dao.DiskDaoTest.assertFullGetAllAttachableDisksByPoolId ( result ) ; }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { endAction ( cmdId , true ) ; }
static com.google.gwt.event.shared.EventBus getEventBus ( ) { return org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.getEventBus ( ) ; }
protected org.ovirt.engine.core.common.businessentities.permissions getPermissions ( java.lang.String id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.permissions.class , VdcQueryType.GetPermissionById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( new org.ovirt.engine.core.compat.Guid ( id ) ) , id ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; }
public void validate ( ) { setupForStorageTests ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public void checkCinderStorageDomainContainDisks ( ) { setCinderStorageDomainStatus ( StorageDomainStatus.Inactive ) ; storagePoolExists ( ) ; cinderStorageDomainContainsDisks ( ) ; masterDomainIsUp ( ) ; canDetachDomain ( ) ; org.junit.Assert.assertFalse ( cmd.canDetachDomain ( false ) ) ; }
public org.ovirt.engine.core.common.vdscommands.VDSReturnValue get ( ) { try { return get ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.vdsTimeout ) , java.util.concurrent.TimeUnit.SECONDS ) ; } catch ( java.util.concurrent.TimeoutException e ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getVDSReturnValue ( ) ; } }
public java.lang.Object getQueryableId ( ) { return id ; }
public static org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getInstance ( ) { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.vmPropertiesUtils ; }
public void discardAfterDeleteSupportedByDcVersion ( ) { domain.setDiscardAfterDelete ( true ) ; org.junit.Assert.assertThat ( validator.isDiscardAfterDeleteSupportedByDcVersion ( Version.v4_1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( jobDaoMock ) . when ( command ) . getJobDao ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; }
protected org.ovirt.engine.core.compat.Guid getDestinationStorageDomainId ( ) { return ( mNewCreatedDiskImage.getStorageIds ( ) ) != null ? mNewCreatedDiskImage.getStorageIds ( ) . get ( 0 ) : org.ovirt.engine.core.compat.Guid.Empty ; }
private void initTabAvailabilityListeners ( ) { highAvailabilityTab.setVisible ( false ) ; isStatelessEditor.setVisible ( true ) ; numOfMonitorsEditor.setVisible ( true ) ; }
protected java.lang.Number getRawValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { return object != null ? object.getStatistics ( ) . getTransmittedBytes ( ) : null ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getWatchdogs ( ) { return org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getId ( ) , VmDeviceGeneralType.WATCHDOG ) ; }
public static < T , W extends org.ovirt.engine.ui.common.widget.AbstractValidatedWidgetWithLabel < T , ? > > org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor < T , W > of ( com.google.gwt.editor.client.LeafValueEditor < T > subEditor , W widgetWithLabel ) { return new org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor ( subEditor , widgetWithLabel ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Disk incoming , org.ovirt.engine.api.model.Disk entity ) { return new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , map ( incoming , entity ) ) ; }
public int getVlanId ( ) { java.lang.Integer vlanId = getEntity ( ) . getVlanId ( ) ; return vlanId == null ? - 1 : vlanId ; }
protected org.ovirt.engine.ui.webadmin.ApplicationResources getApplicationResources ( ) { return org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.getApplicationResources ( ) ; }
private org.ovirt.engine.api.model.Template getFromDataDomain ( ) { return performGet ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( guid ) ) ; }
public org.ovirt.engine.api.resource.NetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendNetworkResource ( id ) ) ; }
public void run ( ) { try { returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , actionParameters ) ; } catch ( java.lang.RuntimeException ex ) { log.error ( "RegisterVdsQuery::WorkMethod [within thread]: An exception has been thrown." , ex ) ; } finally { latch.countDown ( ) ; } }
public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode ( java.lang.String image ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE ) . when ( ( ( ( host.getVdsType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode ) ) && ( org.apache.commons.lang.StringUtils.isBlank ( image ) ) ) ) ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.api.model.Network.class ) , false , false , false , index ) ; }
public void add ( ) { runAddAndVerify ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , false , org.mockito.Mockito.times ( 0 ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic result = dao.getByName ( existingEntity.getStorageName ( ) ) ; org.junit.Assert.assertEquals ( existingEntity , result ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getCollection ( ) { return getBackendCollection ( VdcQueryType.GetVdsInterfacesByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( hostId ) ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getSelectedItems ( ) { return getSelectedItems ( false ) ; }
public void discardIsFalseWhenDiscardAfterDeleteIsTrueAndDomainDoesNotSupportDiscard ( ) { assertDiscardValue ( true , false , false , false ) ; assertDiscardValue ( true , null , false , false ) ; }
private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters ( ) { org.ovirt.engine.core.common.businessentities.DiskImage image = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; image.setDiskInterface ( DiskInterface.IDE ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , image ) ; return parameters ; }
public org.ovirt.engine.api.model.Host get ( ) { org.ovirt.engine.api.model.Host host = getVdsByVdsId ( ) ; deprecatedAddLinksToAgents ( host ) ; return host ; }
private void initGeneralForm ( ) { generalForm = new org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoGeneral ( ) ; }
private void fillPasswordsMap ( ) { passwordPerDomain = org.ovirt.engine.core.common.config.Config.< org.ovirt.engine.core.dal.dbbroker.generic.DomainsPasswordMap > getValue ( ConfigValues.AdUserPassword ) ; }
public void cleanup ( ) { }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { setGuestAgentData ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ) ( result ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel.super . SyncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ; }
public void setUp ( ) { disk1 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk2 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk3 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; }
public void testJsonNullDiskDescription ( ) throws java.io.IOException { disk.setDiskAlias ( "DiskAlias" ) ; disk.setDiskDescription ( null ) ; assertDiskDescriptionMap ( disk ) ; }
public org.ovirt.engine.core.dao.VdsDAO getVdsDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) ; }
public void testGetMessagesBundleLocale ( ) { java.util.List < java.util.ResourceBundle > bundle = testTheme.getMessagesBundle ( java.util.Locale.FRENCH ) ; org.junit.Assert.assertNotNull ( "There should be a bundle" , bundle ) ; org.junit.Assert.assertEquals ( "Login header(fr)" , bundle.get ( 0 ) . getString ( "obrand.common.login_header_label" ) ) ; }
public boolean isOvfTemplate ( java.lang.String ovfstring ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { return ovfManager.isOvfTemplate ( ovfstring ) ; }
protected org.ovirt.engine.core.bll.HotPlugDiskToVmCommand < org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters > createCommand ( ) { return new org.ovirt.engine.core.bll.HotPlugDiskToVmCommand ( createParameters ( ) ) ; }
public void testVmFailNoDisks ( ) { org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , new java.util.ArrayList < > ( ) , null ) , false , EngineMessage.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK ) ; }
public int getMaxPciDevices ( int osId , org.ovirt.engine.core.compat.Version version ) ;
private static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > queryGroups ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final org.ovirt.engine.api.extensions.ExtMap filter ) { return org.ovirt.engine.core.aaa.AuthzUtils.populateGroups ( extension , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Authz.InvokeKeys.QUERY_ENTITY , Authz.QueryEntity.GROUP ) . mput ( Authz.InvokeKeys.QUERY_FILTER , filter ) ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build ( ) { return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , params , existingInterfaces , existingAttachments , networkBusinessEntityMap , managementNetworkUtil , networkClusterDaoMock , networkDaoMock , vdsDaoMock , new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorHelper ( ) , vmDao ) ; }
public void canDetachMaintenanceDomain ( ) { setStorageDomainStatus ( StorageDomainStatus.Maintenance ) ; storagePoolExists ( ) ; masterDomainIsUp ( ) ; canDetachDomain ( ) ; org.junit.Assert.assertTrue ( cmd.canDetachDomain ( false ) ) ; }
private void commitNetworkChanges ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networks ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bondModel = nicMap.get ( iface.getName ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks ( bondModel , new java.util.ArrayList ( networks ) , hostSetupNetworksParametersData ) ; }
protected boolean runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return runConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
private static java.lang.Integer getLowDiskSpaceThreshold ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.FreeSpaceCriticalLowInGB ) ; }
private boolean hasTasks ( ) { return ! ( getReturnValue ( ) . getTaskIdList ( ) . isEmpty ( ) ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VolumeFormat getVolumeFormat ( ) { return getImage ( ) . getVolumeFormat ( ) ; }
public void testSave ( ) { dao.save ( newPool ) ; org.ovirt.engine.core.common.businessentities.StoragePool result = dao.getByName ( newPool.getname ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newPool , result ) ; }
protected boolean isAtLeastOneVmIsNotDown ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsDiskPluggedTo ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo ) { if ( ( vm.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { return true ; } } return false ; }
public java.lang.String getStorageDomainName ( ) { if ( ( org.apache.commons.lang.StringUtils.isEmpty ( storageDomainName ) ) && ( ( getStorageDomain ( ) ) != null ) ) { storageDomainName = getStorageDomain ( ) . getStorageName ( ) ; } return org.apache.commons.lang.StringUtils.defaultString ( storageDomainName ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . getvm_name ( ) ; }
private boolean templateExists ( ) { if ( ( ( org.ovirt.engine.core.bll.ImportVmCommand.getVmTemplate ( ) ) == null ) && ( ! ( org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . getCopyCollapse ( ) ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST ) ; } return true ; }
protected boolean updateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getStoragePoolId ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) , org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
public void poolHasDefaultCluster ( ) { addDefaultClusterToPool ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ) . when ( poolValidator ) . isNotLocalfsWithDefaultCluster ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ; }
public void vnicCreated ( org.ovirt.engine.core.compat.Guid vmId ) { }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.GuestContainer row ) { return java.lang.String.join ( ", " , row.getNames ( ) ) ; }
public org.ovirt.engine.core.common.TimeZoneType getTimeZoneType ( ) { java.lang.Integer vmOsType = getModel ( ) . getOSType ( ) . getSelectedItem ( ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . isWindowsOsType ( vmOsType ) ? org.ovirt.engine.core.common.TimeZoneType.WINDOWS_TIMEZONE : org.ovirt.engine.core.common.TimeZoneType.GENERAL_TIMEZONE ; }
public static boolean CanRemoveVmPoolWithoutReasons ( org.ovirt.engine.core.compat.Guid vmPoolId ) { java.util.ArrayList < java.lang.String > reasons = new java.util.ArrayList < java.lang.String > ( ) ; return org.ovirt.engine.core.bll.RemoveVmPoolCommand.CanRemoveVmPool ( vmPoolId , reasons ) ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.scheduling.ClusterPolicy > result = dao.getAll ( java.util.Collections.emptyMap ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.ClusterPolicyDaoTest.NUMBER_OF_CLUSTER_POLICIES , result.size ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomainStatus getStatus ( ) { return getStoragePoolIsoMapData ( ) . getstatus ( ) ; }
public static org.ovirt.engine.api.model.User map ( org.ovirt.engine.core.common.businessentities.aaa.DbUser entity , org.ovirt.engine.api.model.User template ) { org.ovirt.engine.api.model.User model = ( template != null ) ? template : new org.ovirt.engine.api.model.User ( ) ; model.setName ( entity.getFirstName ( ) ) ; model.setUserName ( ( ( ( entity.getLoginName ( ) ) + "@" ) + ( entity.getDomain ( ) ) ) ) ; model.setPrincipal ( entity.getLoginName ( ) ) ; model.setId ( entity.getId ( ) . toString ( ) ) ; model.setLastName ( entity.getLastName ( ) ) ; model.setEmail ( entity.getEmail ( ) ) ; model.setDepartment ( entity.getDepartment ( ) ) ; model.setDomainEntryId ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( entity.getExternalId ( ) ) ) ; model.setNamespace ( entity.getNamespace ( ) ) ; if ( ( ( entity.getGroupNames ( ) ) != null ) && ( ( entity.getGroupNames ( ) . size ( ) ) > 0 ) ) { model.setGroups ( new org.ovirt.engine.api.model.Groups ( ) ) ; for ( java.lang.String name : entity.getGroupNames ( ) ) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group ( ) ; group.setName ( name ) ; model.getGroups ( ) . getGroups ( ) . add ( group ) ; } } if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( entity.getDomain ( ) ) ) ) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain ( ) ; dom.setName ( entity.getDomain ( ) ) ; dom.setId ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( dom.getName ( ) ) ) ; model.setDomain ( dom ) ; } return model ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { context.dataCenterFoundByName = org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault ( ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( returnValue ) ) ) ; prepare2 ( ) ; }
private void WriteToAuditLog ( ) { try { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , getAuditLogTypeValue ( ) ) ; } catch ( java.lang.RuntimeException ex ) { log.error ( "RegisterVdsQuery::WriteToAuditLog: An exception has been thrown." , ex ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { cachedMaxPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; updatePriority ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ) ; }
public void getClusterNameNullVds ( ) { final org.ovirt.engine.core.common.businessentities.Cluster g = null ; b.setCluster ( g ) ; final java.lang.String n = b.getClusterName ( ) ; org.junit.Assert.assertEquals ( "" , n ) ; }
public void testPhasesCorrelation ( org.ovirt.engine.api.model.ImageTransferPhase phase ) { org.ovirt.engine.api.model.ImageTransferPhase.valueOf ( phase.name ( ) ) ; }
public void setmethod_id ( int value ) { this . id.methodId = value ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _setCliEnvironmentIfNecessary ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_CONFIG_PREFIX ) + "DEFAULT/qpid_username" ) , _openStackAgentProperties.getAgentConfiguration ( ) . getQpidConfiguration ( ) . getUsername ( ) ) ; return true ; }
public void rollbackQuotaByVmId ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . get ( vmId ) ; if ( vm != null ) { removeQuotaFromCache ( vm.getStoragePoolId ( ) , vm.getQuotaId ( ) ) ; } }
public org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleMode getDefaultConsoleMode ( ) { return org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleMode.valueOf ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.ClientModeSpiceDefault ) ) ) ) ; }
public void vnicProfileNotExist ( ) throws java.lang.Exception { vnicProfileValidationTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) , false , false ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return super . getBackend ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmMaxPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; retrieveDefaultSpmPriority ( ) ; }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return new org.ovirt.engine.core.bll.storage.pool.DisconnectStoragePoolAsyncOperation ( getVdss ( ) , getStoragePool ( ) ) ; }
private void editInstanceType ( ) { createWindow ( new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingInstanceTypeModelBehavior ( getSelectedItem ( ) ) , "edit_instance_type" , "OnEditInstanceType" , false , org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . editInstanceTypeTitle ( ) , HelpTag.edit_instance_type ) ; }
protected void getHostListByCluster ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.ui.frontend.AsyncQuery query ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getHostListByCluster ( query , cluster.getName ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > cpuProfiles = returnValue.getReturnValue ( ) ; getCpuProfiles ( ) . setItems ( cpuProfiles ) ; }
protected org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel getEntry ( V widget ) { return ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) ; }
static java.lang.String replace ( java.lang.String sysPrepContent , java.lang.String pattern , java.lang.String value ) { return sysPrepContent.replaceAll ( java.util.regex.Pattern.quote ( pattern ) , java.util.regex.Matcher.quoteReplacement ( value ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain createDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setStorageName ( "mydomain" ) ; return domain ; }
public org.ovirt.engine.core.compat.Guid getImageId ( ) { return this . id.getImageId ( ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addActiveSnapshot ( snapshotId , vm , SnapshotStatus.OK , "" , null , compensationContext ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) , UsbPolicy.ENABLED_LEGACY ) ; }
public void moveDiskToGluster ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( false ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public org.ovirt.engine.core.aaa.DirectoryGroup mapGroupRecordToDirectoryGroup ( final java.lang.String authzName , final org.ovirt.engine.api.extensions.ExtMap group ) { return mapGroupRecordToDirectoryGroup ( authzName , group , new java.util.HashSet < > ( ) ) ; }
public int getVmCount ( ) { return this . mVdsDynamic.getVmCount ( ) ; }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm , vm.getstatus ( ) ) ; vm.setstatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.VmHandler.UnLockVm ( vm ) ; compensationContext.stateChanged ( ) ; return null ; }
public void snapshotObject ( org.ovirt.engine.core.common.businessentities.TransientCompensationBusinessEntity entity ) { snapshotEntityInMemory ( entity , entity , SnapshotType.TRANSIENT_ENTITY ) ; }
public < P extends org.ovirt.engine.core.common.action.VdcActionParametersBase > org.ovirt.engine.core.bll.CommandBase < P > createCommand ( org.ovirt.engine.core.common.action.VdcActionType action , P parameters ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( action , parameters ) ; }
public void CancelConfirmFocusPM ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( getWindow ( ) ) ) ; hostModel.setIsPowerManagementTabSelected ( true ) ; setConfirmWindow ( null ) ; }
protected boolean ignoreFailure ( final java.lang.Throwable caught ) { if ( ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) && ( ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode ( ) ) == 0 ) ) { return true ; } return false ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.String > event ) { onRefresh ( event.getValue ( ) ) ; }
protected void init ( ) { struct.put ( VdsProperties.vm_guid , org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters ( ) . getVm ( ) . getId ( ) . toString ( ) ) ; struct.put ( VdsProperties.VM_NETWORK_INTERFACE , initNicStructure ( ) ) ; }
public void runQuery ( final org.ovirt.engine.core.common.queries.VdcQueryType queryType , final org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { runQuery ( queryType , parameters , callback , false ) ; }
public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Succesful returned result from logoff." ) ; callback.getDel ( ) . onSuccess ( result ) ; }
public org.ovirt.engine.core.compat.Guid getVdsId ( ) { return ( mVdsId ) != null ? mVdsId : org.ovirt.engine.core.compat.Guid.Empty ; }
