public org.ovirt.engine.api.resource.ReadOnlyDeviceResource < org.ovirt.engine.api.model.Disk > getDeviceSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendReadOnlyDeviceResource < org.ovirt.engine.api.model.Disk , org.ovirt.engine.api.model.Disks , org.ovirt.engine.api.model.Disk > ( modelType , entityType , asGuidOr404 ( id ) , this ) ) ; }
protected void storageType_SelectedItemChanged ( ) { updateCurrentStorageItem ( ) ; if ( ( getCurrentStorageItem ( ) ) != null ) { updateFormat ( ) ; updateHost ( ) ; } updateWipeAfterDelete ( ) ; }
public org.ovirt.engine.core.common.businessentities.aaa.DbUser getEntity ( ) { return ( ( org.ovirt.engine.core.common.businessentities.aaa.DbUser ) ( super . getEntity ( ) ) ) ; }
private boolean hasReportsModelRefreshEvent ( ) { for ( org.ovirt.engine.ui.uicompat.IEventListener listnr : getModel ( ) . getReportModelRefreshEvent ( ) . getListeners ( ) ) { if ( listnr instanceof org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ) { return true ; } } return false ; }
public void rerun ( ) { cleanupPassthroughVnics ( ) ; setFlow ( null ) ; super . rerun ( ) ; }
public static void updateBootOrderInVmDeviceAndStoreToDB ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDevice ( vmBase ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.updateBootOrderInBatch ( devices ) ; }
private void init ( ) { setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . newLogicalNetworkTitle ( ) ) ; setHashName ( "new_logical_network" ) ; }
private void setStoredSplitterWidth ( java.lang.Double width ) { clientStorage.setLocalItem ( org.ovirt.engine.ui.webadmin.widget.main.TabbedSplitLayoutPanel.WEST_SPLITTER_KEY , width.toString ( ) ) ; }
public void testGetForStoragePoolWithInvalidPool ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( existingDomain.getId ( ) , org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.getBroker ( ) . desktopLogoff ( mVmId.toString ( ) , java.lang.String.valueOf ( mForce ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.proceedProxyReturnValue ( ) ; }
public void storagePoolWithId ( ) { b.setStoragePoolId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = b.getStoragePool ( ) ; org.junit.Assert.assertNotNull ( p ) ; }
public void setServerSslEnabled ( boolean value ) { this . mVdsStatic.setServerSslEnabled ( value ) ; }
private org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator createNetworkAttachmentValidator ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator ( attachment , host , managementNetworkUtilMock , networkAttachmentDaoMock , vmInterfaceManager , networkClusterDaoMock , networkDaoMock , vdsDaoMock ) ; }
protected java.lang.String getPlace ( ) { return null ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model ) { driver.edit ( model ) ; initListerners ( model ) ; updateColumnsAvailability ( model ) ; updateListHeader ( model ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( "deviceId = " ) . append ( getDeviceId ( ) ) ; sb.append ( ", vmId = " ) . append ( getVmId ( ) ) ; return sb.toString ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return diskImage.getDiskAlias ( ) ; }
private java.lang.String getJsonDiskDescription ( ) throws java.io.IOException { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . getJsonDiskDescription ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters ( ) . getDiskInfo ( ) ) ; }
java.lang.String numaNode ( int index ) ;
public java.util.Map < java.lang.String , java.lang.Object > validateStorageDomain ( java.lang.String sdUUID ) ;
public void onKeyPress ( com.google.gwt.event.dom.client.KeyPressEvent event ) { if ( ( com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER ) == ( event.getNativeEvent ( ) . getKeyCode ( ) ) ) { object.getDiscoverTargetsCommand ( ) . Execute ( ) ; setIsFocused ( false ) ; } }
public void testGetUserAndSetUserWithSessionParam ( ) { org.ovirt.engine.core.common.interfaces.IVdcUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.interfaces.IVdcUser.class ) ; container.setUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , user ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , user , container.getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; }
private org.ovirt.engine.core.common.businessentities.VmTemplate mockVmTemplate ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ; template.setId ( vmTemplateId ) ; template.setStoragePoolId ( storagePoolId ) ; template.setClusterArch ( ArchitectureType.x86_64 ) ; org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.setDiskList ( template ) ; return template ; }
public void testGetNetworkIdsByIscsiBondId ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > networkIds = dao.getNetworkIdsByIscsiBondId ( newIscsiBond.getId ( ) ) ; junit.framework.Assert.assertTrue ( networkIds.isEmpty ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase params = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = new org.ovirt.engine.core.common.businessentities.pm.FenceAgent ( ) ; agent.setId ( guid ) ; params.setAgent ( agent ) ; return performAction ( VdcActionType.RemoveFenceAgent , params ) ; }
public void setstorage_pool_id ( org.ovirt.engine.core.compat.Guid value ) { storagePoolId = value ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.userportal.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . extendedVirtualMachineNetworkInterfaceSubTabLabel ( ) , 2 , ginjector.getVmInterfaceListModelProvider ( ) ) ; }
public void testSave ( ) { dao.save ( newAdGroup ) ; org.ovirt.engine.core.common.businessentities.ad_groups result = dao.getByName ( newAdGroup.getname ( ) ) ; assertEquals ( newAdGroup , result ) ; }
protected java.lang.Double [ ] getRawValue ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface object ) { return new java.lang.Double [ ] { object.getStatistics ( ) . getReceiveDropRate ( ) , object.getStatistics ( ) . getTransmitDropRate ( ) } ; }
public void vnicProfileSet ( ) { org.junit.Assert.assertThat ( validator.vnicProfileIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setGuestLastLogoutTime ( java.util.Date value ) { this . vmDynamic.setGuestLastLogoutTime ( value ) ; }
public java.lang.String toString ( ) { return ( ( ( "HttpLocationInfo [url=" + ( url ) ) + ", headers=" ) + ( headers ) ) + "]" ; }
private void stopGeoRepSessionCommand ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.StopGeoRepSession , new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( session.getMasterVolumeId ( ) , session.getId ( ) ) , command.cloneContextAndDetachFromParent ( ) ) ; }
public org.ovirt.engine.api.resource.GraphicsConsoleResource getConsoleResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmGraphicsConsoleResource ( this , getGuid ( ) , id ) ) ; }
private org.ovirt.engine.core.bll.gluster.GlusterVolumeRemoveBricksCommand createTestCommand ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.GlusterVolumeRemoveBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeId , getBricks ( volumeId , 1 ) ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade ( ) . getNetworkProviderDao ( ) . remove ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand.setSucceeded ( true ) ; }
public java.lang.String getOsName ( int osId ) ;
public org.ovirt.engine.api.model.Quotas list ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; return mapCollection ( getBackendCollection ( VdcQueryType.GetQuotaByStoragePoolId , params ) ) ; }
public org.ovirt.engine.api.resource.NetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendNetworkResource ( id ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; }
private java.lang.String getRunActionErrorMessage ( final java.util.List < java.lang.String > messages ) { if ( ( messages.size ( ) ) < 1 ) { return "No Message" ; } else { return messages.iterator ( ) . next ( ) ; } }
public boolean showImportAsTemplateOptions ( ) { return false ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT ) ; addValidationMessageVariable ( "volumeName" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getGlusterVolumeName ( ) ) ; addValidationMessageVariable ( "vdsGroup" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroupName ( ) ) ; }
public org.ovirt.engine.core.compat.Guid persistAsyncTaskPlaceHolder ( ) { return super . persistAsyncTaskPlaceHolder ( getActionType ( ) ) ; }
private java.lang.String buildResponse ( javax.servlet.http.HttpServletRequest request , org.ovirt.engine.core.sso.utils.SsoSession ssoSession ) throws java.lang.Exception { return org.ovirt.engine.core.sso.utils.SsoUtils.createJWT ( request , ssoSession , ssoSession.getClientId ( ) ) . toString ( ) ; }
public void unsetEvent ( ) { this . event = null ; }
public boolean equals ( org.ovirt.engine.core.common.businessentities.tags x , org.ovirt.engine.core.common.businessentities.tags y ) { return x.gettag_id ( ) . equals ( y.gettag_id ( ) ) ; }
public void setpm_port ( java.lang.Integer value ) { mVdsStatic.setpm_port ( value ) ; }
public void setkernel_version ( java.lang.String value ) { this . mVdsDynamic.setkernel_version ( value ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc vmUpdateDevice ( java.lang.String vmId , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct device ) ;
private void overrideMigrationDowntimeChanged ( ) { java.lang.Boolean entity = getOverrideMigrationDowntime ( ) . getEntity ( ) ; getMigrationDowntime ( ) . setIsChangable ( java.lang.Boolean.TRUE.equals ( entity ) ) ; }
public void clusterServiceDefined ( ) { org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( true ) ; org.junit.Assert.assertThat ( validator.clusterServiceDefined ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void defaultClusterInLocalFs ( ) { prepareManagementNetworkMocks ( ) ; mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultClusterID , org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_CLUSTER_ID ) ; createCommandWithDefaultCluster ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; setupCpu ( ) ; architectureIsUpdatable ( ) ; validateFailedWithReason ( EngineMessage.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
private boolean isConsoleCommandsExecutionAllowed ( ) { org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol = consoleUtils.determineConnectionProtocol ( this ) ; return consoleUtils.canShowConsole ( protocol , this ) ; }
public void setIsQuotaDefault ( boolean isQuotaDefault ) { this . mVmStatic.setIsQuotaDefault ( isQuotaDefault ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolNotStaticAddressDifferent ( ) { initIpv4ConfigurationBootProtocolAddress ( Ipv4BootProtocol.NONE , false ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void addUpdatedVm ( ) { runInternalAction ( VdcActionType.AddVm , buildAddVmParameters ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.UpdateVmVersionCommand.getContext ( ) , org.ovirt.engine.core.bll.UpdateVmVersionCommand.getLock ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.ad_groups getAdGroup ( int index ) { org.ovirt.engine.core.common.businessentities.ad_groups adGroup = new org.ovirt.engine.core.common.businessentities.ad_groups ( ) ; adGroup.setid ( GUIDS [ index ] ) ; adGroup.setname ( NAMES [ index ] ) ; adGroup.setdomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; return adGroup ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.UriInfo uriInfo , java.lang.String defaultQuery , java.lang.Class < ? > clz ) { return org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( uriInfo , defaultQuery , clz , true ) ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.VDSGroup source ) { return id.equals ( source.getId ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ( ) ; } return source ; }
public void testGetByNullClusterId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > hooks = dao.getByClusterId ( null ) ; org.junit.Assert.assertNotNull ( hooks ) ; org.junit.Assert.assertTrue ( hooks.isEmpty ( ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.getBroker ( ) . glusterVolumeDelete ( org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.getParameters ( ) . getVolumeName ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.DeleteGlusterVolumeVDSCommand.ProceedProxyReturnValue ( ) ; }
public java.lang.String render ( java.lang.Object object ) { return object == null ? "" : ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getvds_name ( ) ; }
private org.ovirt.engine.core.dao.VdsDao mockVdsDao ( ) { org.ovirt.engine.core.dao.VdsDao mock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VdsDao.class ) ; org.mockito.Mockito.when ( mock.getFirstUpRhelForVdsGroup ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsFromDb ) ; return mock ; }
private org.ovirt.engine.core.utils.lock.EngineLock getEngineLock ( org.ovirt.engine.core.compat.Guid clusterId ) { return new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( clusterId.toString ( ) , LockingGroup.GLUSTER.name ( ) ) , null ) ; }
public void testGetStorageDomainByTypeForStoragePoolId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getStorageDomains ( new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) , StorageDomainType.Master ) ; assertGetResult ( result.get ( 0 ) ) ; }
public void setDisplay ( java.lang.Integer value ) { this . vmDynamic.setDisplay ( value ) ; }
protected java.util.List < Q > getBackendCollection ( org.ovirt.engine.core.common.queries.VdcQueryType query , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams ) { return getBackendCollection ( entityType , query , queryParams ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( UsbType.NATIVE ) ; assertEquals ( UsbPolicy.ENABLED_NATIVE , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) ) ; }
private void init ( ) { virtMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.VirtMonitoringStrategy ( clusterDao , vdsDao ) ; glusterMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.GlusterMonitoringStrategy ( ) ; multipleMonitoringStrategy = new org.ovirt.engine.core.vdsbroker.monitoring.MultipleServicesMonitoringStrategy ( ) ; multipleMonitoringStrategy.addMonitoringStrategy ( virtMonitoringStrategy ) ; multipleMonitoringStrategy.addMonitoringStrategy ( glusterMonitoringStrategy ) ; }
private static org.ovirt.engine.core.common.businessentities.VdsNetworkStatistics CloneVdsNetworkStatistics ( org.ovirt.engine.core.common.businessentities.VdsNetworkStatistics instance ) { org.ovirt.engine.core.common.businessentities.VdsNetworkStatistics obj = new org.ovirt.engine.core.common.businessentities.VdsNetworkStatistics ( ) ; org.ovirt.engine.ui.uicommonweb.Cloner.CloneNetworkStatisticss ( instance , obj ) ; obj.setVdsId ( instance.getVdsId ( ) ) ; return obj ; }
public int hashCode ( ) { int result = super . hashCode ( ) ; result = ( 31 * result ) + ( ( cinderConnectionInfo ) != null ? cinderConnectionInfo.hashCode ( ) : 0 ) ; return result ; }
public int getnum_of_monitors ( ) { return this . mVmStatic.getnum_of_monitors ( ) ; }
private void writeServiceLocator ( org.ovirt.api.metamodel.concepts.Locator locator ) { writer.writeStartElement ( "locator" ) ; writeCommon ( locator ) ; locator.parameters ( ) . forEach ( this :: writeParameter ) ; writer.writeEndElement ( ) ; }
public org.ovirt.engine.api.v3.types.V3Host update ( org.ovirt.engine.api.v3.types.V3Host host ) { return adaptUpdate ( delegate :: update , host ) ; }
public static void setUp ( ) throws java.lang.Exception { final org.reflections.Reflections reflections = new org.reflections.Reflections ( "org.ovirt.engine" ) ; org.ovirt.engine.core.dao.DaoCdiIntegrationTest.daoClasses = java.util.Collections.unmodifiableSet ( reflections.getSubTypesOf ( org.ovirt.engine.core.dao.DAO.class ) ) ; }
public void info ( java.lang.Object msg , java.lang.Throwable t ) { log.info ( addPrefixToLogMessage ( msg ) , t ) ; }
public void refreshGeoRepData ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getClusterDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { refreshGeoRepDataInCluster ( cluster ) ; } }
public void clearError ( ) { getImportSourceValid ( ) . setMessage ( "" ) ; getImportSourceValid ( ) . setEntity ( true ) ; }
public int getvds_strength ( ) { return this . mVdsStatic.getvds_strength ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Provider < ? > > searchProviders ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getProviderDao ( ) , true ) ; }
public javax.ws.rs.core.Response performAction ( org.ovirt.engine.core.common.action.VdcActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { return performAction ( task , params , null , false ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; if ( command == ( getTestCommand ( ) ) ) { Test ( ) ; } }
public org.ovirt.engine.api.model.StorageDomains list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllStorageDomains , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , SearchType.StorageDomain ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.StorageDomain ) ) ; } }
private boolean isVmRunningOnHost ( org.ovirt.engine.core.compat.Guid hostId ) { return ! ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . getAllRunningForVds ( hostId ) . isEmpty ( ) ) ; }
void clearSessionId ( ) { setSessionId ( null ) ; }
public org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel > getStorageGeneralProvider ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider < org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel > ( ginjector , org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class , org.ovirt.engine.ui.uicommonweb.models.storage.StorageGeneralModel.class ) ; }
protected org.ovirt.engine.core.common.businessentities.tags getTag ( ) { if ( ( ( mTag ) == null ) && ( ( getTagId ( ) ) != null ) ) { mTag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDAO ( ) . get ( getTagId ( ) ) ; } return mTag ; }
public void testClone ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.businessentities.VDS cloned = vds.clone ( ) ; org.junit.Assert.assertEquals ( "clones not equal" , vds , cloned ) ; org.junit.Assert.assertEquals ( "clones do not have equal hashCodes" , vds.hashCode ( ) , cloned.hashCode ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { importGlusterExplanationLabel.setVisible ( ( ( object.getEnableGlusterService ( ) . getEntity ( ) ) && ( object.getIsNew ( ) ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getvm_template_id ( ) { return this . vmTemplateId ; }
public void DefaultHost_SelectedItemChanged ( ) { UpdateCdImage ( ) ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getReturnStatus ( ) { return this . result.getXmlRpcStatus ( ) ; }
public java.lang.String getTemplate ( java.lang.String realUrlParamName , java.lang.String headerParamName ) { org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper templateWrapper = new org.ovirt.engine.sdk.codegen.utils.StringTemplateWrapper ( getTemplate ( ) ) ; templateWrapper.set ( "realUrlParamName" , realUrlParamName ) ; templateWrapper.set ( "headerParamName" , headerParamName ) ; return templateWrapper.toString ( ) ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , org.ovirt.engine.core.common.businessentities.VDS vds ) { vds.setNonOperationalReason ( reason ) ; vds.setStatus ( VDSStatus.NonOperational ) ; vdsDynamicDao.update ( vds.getDynamicData ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomainById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.StorageDomain.class , VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.users.VdcUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getUserId ( ) ) ; params.setSessionId ( getSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . Logoff ( params ) ; return returnValue ; }
public void setSessionTimeout ( java.lang.String sessionTimeout ) { this . restApiSessionTimeout = sessionTimeout ; }
public org.ovirt.engine.sdk.Api connect ( ) throws java.io.IOException , org.ovirt.engine.sdk.exceptions.ServerException , org.ovirt.engine.sdk.exceptions.UnsecuredConnectionAttemptError { java.lang.String url = java.lang.String.format ( "https://%s:%s/ovirt-engine/api" , server , port ) ; org.ovirt.optimizer.service.OvirtClient.log.debug ( java.lang.String.format ( "Logging to %s as %s" , url , username ) ) ; return new org.ovirt.engine.sdk.Api ( url , username , password , true ) ; }
public org.ovirt.engine.api.model.Template get ( ) { org.ovirt.engine.api.model.Template template = performGet ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( guid ) ) ; if ( template != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , template ) ; } return template ; }
private int calculateCpuUsage ( org.ovirt.engine.core.common.businessentities.VDS o1 ) { return ( ( o1.getUsageCpuPercent ( ) ) * ( org.ovirt.engine.core.bll.scheduling.VdsSelector.getEffectiveCpuCores ( o1 ) ) ) / ( o1.getVdsStrength ( ) ) ; }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.bll.tasks.SPMAsyncTask task : newlyAddedTasks ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB ( task ) ; } return null ; }
private void runAndAssertCanDoActionSuccess ( ) { boolean canDoAction = command.canDoAction ( ) ; org.ovirt.engine.core.bll.AddDiskCommandTest.log.info ( command.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; org.junit.Assert.assertTrue ( canDoAction ) ; }
protected org.ovirt.engine.core.bll.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "Cancel" ) ) { Cancel ( ) ; } }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.get ( getParameters ( ) . getActionType ( ) ) . getCanDoActionMsg ( ) ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__GLUSTER_SERVICE ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus snapshotStatus , java.lang.String memoryVolume , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addSnapshot ( snapshotId , "Active VM" , snapshotStatus , SnapshotType.ACTIVE , vm , false , memoryVolume , compensationContext ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.bll.profiles.DiskProfileValidator validator = new org.ovirt.engine.core.bll.profiles.DiskProfileValidator ( getProfile ( ) ) ; return ( validate ( validator.diskProfileIsSet ( ) ) ) && ( validate ( validator.diskProfileExists ( ) ) ) ; }
org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network.Network > getExternalNetworkPredicate ( ) { return mockNetworkPredicate ; }
public java.util.Map < java.lang.String , java.lang.Object > sendHcCmdToDesktop ( java.lang.String vmId , java.lang.String hcCommand ) ;
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigWidget.templates.textForCheckBoxHeader ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsConfigWidget.constants.attachAll ( ) ) ; }
public void setStatus ( org.ovirt.engine.core.sso.utils.SsoSession.Status status ) { this . status = status ; }
private void initializeCommand ( ) { initializeCommand ( createParameters ( ) ) ; }
protected boolean failPassthroughVnicHotPlug ( ) { if ( ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.pciPassthrough ) == ( org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) . getType ( ) ) ) ) { addCanDoActionMessage ( EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED ) ; return true ; } return false ; }
public void testAllocateMacNoEnoughMacs ( ) { rangeOf10Macs.allocateMacs ( ( ( org.ovirt.engine.core.bll.network.macpool.RangeTest.NUMBER_OF_MACS ) + 1 ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; }
protected void executeVdsBrokerCommand ( ) { infoReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getBroker ( ) . getCapabilities ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.proceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVDSDynamicData ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getVds ( ) , infoReturn.mInfo ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesVDSCommand.getVds ( ) ) ; }
public boolean shouldUseCompensation ( ) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this . commandContext.getCompensationContext ( ) ; return ( compensationContext != null ) && ( compensationContext.isCompensationEnabled ( ) ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.VmPool model ) { assertNotNull ( model.getCluster ( ) ) ; assertEquals ( GUIDS [ 2 ] . toString ( ) , model.getCluster ( ) . getId ( ) ) ; }
public void rollback ( ) { super . rollback ( ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.getInstance ( ) . modifyPool ( oldMacPool ) ; }
public java.lang.String getDefaultTitle ( ) { return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.readOnly ( ) ; }
private org.ovirt.engine.core.common.businessentities.AsyncTasks getAsyncTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.getAsyncTask ( taskId , this , asyncTaskCreationInfo , parentCommand ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Agent incoming , org.ovirt.engine.core.common.businessentities.FenceAgent entity ) { org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase updateParams = new org.ovirt.engine.core.common.action.FenceAgentCommandParameterBase ( ) ; org.ovirt.engine.core.common.businessentities.FenceAgent agent = map ( incoming , entity ) ; updateParams.setAgent ( agent ) ; return updateParams ; }
public org.ovirt.engine.core.common.businessentities.Cluster update ( org.ovirt.engine.core.common.businessentities.Cluster incoming ) { return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.QueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) , ActionType.UpdateCluster , new UpdateParametersProvider ( ) ) ; }
public org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network network ) { network.setCluster ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) ) ; network.getCluster ( ) . setId ( clusterId ) ; return network ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface ) { org.ovirt.engine.ui.common.widget.uicommon.popup.networkinterface.NetworkInterfacePopupWidget.Driver.driver.edit ( iface ) ; hideMacWhenNotEnabled ( iface ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.Network result = dao.getByName ( "engine" ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( "engine" , result.getname ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { removeAllBricksButton.getCommand ( ) . execute ( ) ; clearSelections ( ) ; bricksTable.flush ( ) ; bricksTable.redraw ( ) ; }
public void validate_duplicateVm_Test ( ) { affinityGroup.getEntityIds ( ) . add ( vmId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DUPLICTE_VM_IN_AFFINITY_GROUP ) ; }
public void setvmt_description ( java.lang.String value ) { this . vmt_descriptionField = value ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Quota , org.ovirt.engine.ui.uicommonweb.models.users.UserListModel , org.ovirt.engine.ui.uicommonweb.models.users.UserQuotaListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.user.SubTabUserQuotaPresenter.constants.userQuotaSubTabLabel ( ) , 2 , modelProvider ) ; }
public boolean isApplicable ( org.ovirt.engine.core.common.businessentities.VDSGroup oldCluster , org.ovirt.engine.core.common.businessentities.VDSGroup newCluster ) { newCpuName = newCluster.getCpuName ( ) ; return ! ( oldCluster.getCpuName ( ) . equals ( newCluster.getCpuName ( ) ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepStatus ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) ;
protected void OnCollectionChanged ( org.ovirt.engine.ui.uicompat.NotifyCollectionChangedEventArgs e ) { collectionChangedEvent.raise ( this , e ) ; }
private void mockMaxPciSlots ( ) { org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddVmCommandTest.MAX_PCI_SLOTS ) . when ( osRepository ) . getMaxPciDevices ( org.mockito.Matchers.anyInt ( ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ; }
private java.lang.String getSsoToken ( final java.lang.String engineSessionId ) { return ( ( java.lang.String ) ( runQuery ( VdcQueryType.GetEngineSessionIdToken , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , engineSessionId ) ) ) ; }
protected org.ovirt.engine.core.dao.NetworkDAO getNetworkDAO ( ) { return getDbFacade ( ) . getNetworkDAO ( ) ; }
protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams ( java.util.List < org.ovirt.engine.core.compat.Guid > guids ) { return org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero ( new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters ( guids.get ( 1 ) , guids.get ( 0 ) , guids.get ( 2 ) , isPostZero ( ) , false ) ) ; }
org.ovirt.api.metamodel.tool.JavaTypeReference getTypeReference ( org.ovirt.api.metamodel.concepts.Type type ) ;
public void onConsoleModelChanged ( org.ovirt.engine.ui.userportal.section.main.presenter.popup.console.ConsoleModelChangedEvent event ) { if ( sameEntity ( model , event.getItemModel ( ) ) ) { setupSelectedProtocol ( model ) ; } }
public static java.lang.Integer getDefaultMtu ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.DefaultMtu ) ; }
public void reload ( ) { onImportSourceChanged ( ) ; }
public void validNetworkNameWhenUnlinkingNotSupported ( ) throws java.lang.Exception { networkNameTest ( ValidationResult.VALID , false , "net" ) ; }
public void setpm_enabled ( boolean value ) { mVdsStatic.setpm_enabled ( value ) ; }
public void setHashName ( java.lang.String value ) { sethashName ( value ) ; setOpenDocumentationCommand ( new org.ovirt.engine.ui.uicommonweb.UICommand ( "OpenDocumentation" , this ) ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "HashName" ) ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getBrickListModel ( ) . getStatusRemoveBricksCommand ( ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, srcHost=%s, dstVdsId=%s, dstHost=%s, migrationMethod=%s, tunnelMigration=%s" , super . toString ( ) , getSrcHost ( ) , getDstVdsId ( ) , getDstHost ( ) , getMigrationMethod ( ) , getTunnelMigration ( ) ) ; }
public void BuildVirtualSystem ( ) { readGeneralData ( ) ; }
public void setHost ( java.lang.String host , int port ) { this . host = host ; this . port = port ; this . serverKey = null ; }
public void setSnapshotsMap ( java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel > value ) { snapshotsMap = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SnapshotsMap" ) ) ; }
public org.ovirt.engine.core.common.businessentities.DiskLunMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.DiskLunMap diskLunMap = new org.ovirt.engine.core.common.businessentities.DiskLunMap ( ) ; diskLunMap.setDiskId ( org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( rs.getString ( "disk_id" ) ) ) ; diskLunMap.setLunId ( rs.getString ( "lun_id" ) ) ; return diskLunMap ; }
protected void PostDiscoverTargets ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel > newItems ) { }
protected void verifyModelClearingPayloads ( org.ovirt.engine.api.model.Vm model , int index ) { verifyModel ( model , index ) ; assertNull ( model.getPayloads ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult providerIsSet ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) . when ( ( ( provider ) == null ) ) ; }
public org.ovirt.engine.core.compat.Guid mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { return org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( rs.getString ( "id" ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > isSsoWebappDeployed ( ) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.isSsoDeployed ( ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection ( ) . url ( "https://engine40.example.com/ovirt-engine/api" ) . user ( "admin@internal" ) . password ( "redhat123" ) . trustStoreFile ( "truststore.jks" ) . build ( ) ; org.ovirt.engine.sdk4.services.VmsService vmsService = connection.systemService ( ) . vmsService ( ) ; org.ovirt.engine.sdk4.types.Vm vm = vmsService.list ( ) . search ( "name=myvm" ) . send ( ) . vms ( ) . get ( 0 ) ; org.ovirt.engine.sdk4.services.VnicProfilesService profilesService = connection.systemService ( ) . vnicProfilesService ( ) ; java.lang.String profileId = null ; for ( org.ovirt.engine.sdk4.types.VnicProfile profile : profilesService.list ( ) . send ( ) . profiles ( ) ) { if ( "mynetwork" . equals ( profile.name ( ) ) ) { profileId = profile.id ( ) ; } } org.ovirt.engine.sdk4.services.VmNicsService nicsService = vmsService.vmService ( vm.id ( ) ) . nicsService ( ) ; nicsService.add ( ) . nic ( org.ovirt.engine.sdk4.builders.Builders.nic ( ) . name ( "mynic" ) . description ( "My network interface card" ) . vnicProfile ( org.ovirt.engine.sdk4.builders.Builders.vnicProfile ( ) . id ( profileId ) ) ) . send ( ) ; connection.close ( ) ; }
protected org.ovirt.engine.core.common.action.HibernateVmParameters getHibernateVmParams ( ) { org.ovirt.engine.core.common.action.VdcActionParametersBase tempVar = org.ovirt.engine.core.bll.HibernateVmCommand.getParameters ( ) ; return ( ( org.ovirt.engine.core.common.action.HibernateVmParameters ) ( tempVar instanceof org.ovirt.engine.core.common.action.HibernateVmParameters ? tempVar : null ) ) ; }
protected void onSavePortMirroring ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface nicToSave ) { nicToSave.setPortMirroring ( false ) ; }
public void unlinkedWhenUnlinkingNotSupported ( ) throws java.lang.Exception { unlinkingTest ( org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.UNLINKING_IS_NOT_SUPPORTED ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.junit.matchers.JUnitMatchers.hasItem ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT ) ) ) , false , false ) ; }
public void setPrincipal ( java.lang.String sessionId , java.lang.String principal ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.PRINCIPAL_PARAMETER_NAME , principal ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "Message" . equals ( propName ) ) { appendMessage ( model.getMessage ( ) ) ; } }
static void verifyParent ( org.ovirt.engine.api.model.Tag model , java.lang.String parentId ) { org.junit.Assert.assertNotNull ( model.getParent ( ) ) ; org.junit.Assert.assertEquals ( parentId , model.getParent ( ) . getId ( ) ) ; }
public void moveItemUp ( ) { if ( ( getSelectedItemIndex ( ) ) > 0 ) { getItems ( ) . Move ( getSelectedItemIndex ( ) , ( ( getSelectedItemIndex ( ) ) - 1 ) ) ; } }
public void setvmt_guid ( org.ovirt.engine.core.compat.Guid value ) { this . mVmStatic.setvmt_guid ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "vmt_guid" ) ) ; }
private void initListerners ( final org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model ) { model.getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { addItems ( model ) ; } } ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.DiskImage object ) { setTitle ( ( object.isBoot ( ) ? getDefaultTitle ( ) : null ) ) ; return object.isBoot ( ) ? getDefaultImage ( ) : null ; }
protected java.lang.String getTitle ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return value.isPool ( ) ? constants.returnVmLabel ( ) : constants.shutDownVm ( ) ; }
public void canDoActionFailsNoConnection ( ) { org.mockito.Mockito.when ( sscDao.get ( connId.toString ( ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { networkClusterModel.setRequired ( value ) ; } refreshClustersTable ( ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.ListModel < T > topListModel , org.ovirt.engine.ui.uicommonweb.models.ListModel < T > bottomListModel , org.ovirt.engine.ui.uicommonweb.UICommand onDownButtonPressed , org.ovirt.engine.ui.uicommonweb.UICommand onUpButtonPressed ) { edit ( topListModel , bottomListModel ) ; this . onDownButtonPressed = onDownButtonPressed ; this . onUpButtonPressed = onUpButtonPressed ; }
public void testIsNetworkExclusiveValid3 ( ) { org.junit.Assert.assertTrue ( underTest.isNetworkExclusive ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.validator.network.NetworkType.VLAN ) ) ) ; }
org.ovirt.engine.api.model.Disk update ( org.ovirt.engine.api.model.Disk device ) ;
protected void executeCommand ( ) { initConnectionList ( true ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.common.businessentities.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > connectionToType : getConnectionsTypeMap ( ) . entrySet ( ) ) { disconnectStorageByType ( connectionToType.getKey ( ) , connectionToType.getValue ( ) ) ; } }
public void versionHigherThanCluster ( ) { storagePoolWithVersionHigherThanCluster ( ) ; canDoActionFailed ( VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS ) ; }
private void assertNoViolations ( java.util.List < org.ovirt.engine.core.dal.VdcBllMessages > violations ) { junit.framework.Assert.assertTrue ( ( "Expecting no violations, but got: " + violations ) , violations.isEmpty ( ) ) ; }
protected void executeCommand ( ) { affinityGroupDao.remove ( getParameters ( ) . getAffinityGroupId ( ) ) ; setSucceeded ( true ) ; }
public void testIsNetworkInSyncWhenBothQosIsNull ( ) throws java.lang.Exception { iface.setQos ( null ) ; networkQos = null ; org.junit.Assert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network.Network > getManagementNetworkCandidatePredicate ( ) { return org.ovirt.engine.core.utils.linq.LinqUtils.not ( getExternalNetworkPredicate ( ) ) ; }
protected java.util.List < java.lang.String > mockl10n ( java.util.List < java.lang.String > errors ) { java.util.ArrayList < java.lang.String > ret = new java.util.ArrayList < > ( ) ; for ( java.lang.String error : errors ) { ret.add ( mockl10n ( error ) ) ; } return ret ; }
public void setExitMessage ( java.lang.String value ) { this . mVmDynamic.setExitMessage ( value ) ; }
public void testCleanExpiredUsersSessionsNoUsers ( ) { org.ovirt.engine.core.dao.DbUserDAO dbUserDAOMcok = initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ; container.cleanExpiredUsersSessions ( ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNull ( "Get should return null since the session was removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY ) ) ; org.mockito.Mockito.verifyZeroInteractions ( dbUserDAOMcok ) ; }
public void Info ( java.lang.String message ) { org.ovirt.engine.ui.common.uicommon.LoggerImpl.logger.log ( java.util.logging.Level.INFO , message ) ; }
public java.lang.String getstorage_name ( ) { return getStorageStaticData ( ) . getstorage_name ( ) ; }
public void setVncKeyboardLayout ( java.lang.String vncKeyboardLayout ) { vmStatic.setVncKeyboardLayout ( vncKeyboardLayout ) ; }
public java.util.Map deleteImage ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgGUID , java.lang.String postZero , java.lang.String force ) { return getOKStatusNotImplemented ( ) ; }
public void testGetAllForVm ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllForVm ( vm.getUuid ( ) . toString ( ) ) ; assertNotNull ( result ) ; assertFalse ( result.isEmpty ( ) ) ; }
public void canDoActionVirtOnlySucceeds ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.Assert.assertTrue ( commandMock.canDoAction ( ) ) ; }
private boolean isEveyoneUserPortalBasedVmPermission ( org.ovirt.engine.core.common.businessentities.permissions permission ) { return ( permission.getad_element_id ( ) . equals ( ApplicationGuids.everyone.asGuid ( ) ) ) && ( permission.getrole_id ( ) . equals ( ApplicationGuids.userTemplateBasedVM.asGuid ( ) ) ) ; }
protected void updateVmDisksAndDevice ( ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm ( ) . getStaticData ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; return performAction ( VdcActionType.DetachVmFromTag , new org.ovirt.engine.core.common.action.AttachEntityToTagParameters ( guid , asList ( vmId ) ) ) ; }
private org.ovirt.engine.core.common.action.UploadImageStatusParameters prepareStatusParams ( org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase ) { org.ovirt.engine.api.model.ImageTransfer updates = new org.ovirt.engine.api.model.ImageTransfer ( guid ) ; updates.setPhase ( phase ) ; org.ovirt.engine.core.common.action.UploadImageStatusParameters params = new org.ovirt.engine.core.common.action.UploadImageStatusParameters ( ) ; params.setUploadImageCommandId ( guid ) ; params.setUpdates ( updates ) ; return params ; }
protected void ConnectAllHostsToPool ( ) { runSynchronizeOperation ( new org.ovirt.engine.core.bll.storage.ConnectSingleAsyncOperationFactory ( ) ) ; }
public static < T > boolean contains ( java.lang.Iterable < T > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super T > predicate ) { return ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( source , predicate ) ) == null ? false : true ; }
public void testRemoveFailed ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupsByStoragePoolId , org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class , new java.lang.String [ ] { "StoragePoolId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClustersResourceTest.dataCenterId } , setUpVDSGroups ( ) , null ) ; doTestBadRemove ( true , false , org.ovirt.engine.api.restapi.resource.FAILURE ) ; }
public void testMapOriginTypeRhev ( ) { java.lang.String s = org.ovirt.engine.api.restapi.types.VmBaseMapper.map ( OriginType.RHEV , null ) ; org.junit.Assert.assertEquals ( "rhev" , s ) ; org.ovirt.engine.core.common.businessentities.OriginType s2 = org.ovirt.engine.api.restapi.types.VmMapper.map ( s , OriginType.RHEV ) ; org.junit.Assert.assertEquals ( OriginType.RHEV , s2 ) ; }
private org.ovirt.engine.core.utils.lock.EngineLock getEngineLock ( org.ovirt.engine.core.compat.Guid clusterId ) { return new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( clusterId.toString ( ) , LockMessagesMatchUtil.GLUSTER ) , null ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( getStoragePool ( ) ) ; getStoragePoolDAO ( ) . remove ( getStoragePool ( ) . getId ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void masterDomainIsUp ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . CheckMasterDomainIsUp ( ) ; }
public void await ( ) throws java.lang.InterruptedException { this . latch.await ( ) ; }
public void testGetStorageDomainDRs ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainDR > result = dao.getAllForStorageDomain ( FixturesTool.POSIX_STORAGE_DOMAIN_ID ) ; org.junit.Assert.assertEquals ( 1 , result.size ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.AsyncTask createAsyncTask ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return coCoAsyncTaskHelper.createAsyncTask ( command , asyncTaskCreationInfo , parentCommand ) ; }
public static void hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.HasSpiceSupport , osId , version ) , callback ) ; }
public void setPassword ( java.lang.String password ) { this . password = password ; }
protected void prepareMethod ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getMethod ( ) . setRequestHeader ( "Size" , org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getParameters ( ) . getSize ( ) . toString ( ) ) ; }
private boolean migrateVm ( ) { setActionReturnValue ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsBroker ( ) . RunAsyncVdsCommand ( VDSCommandType.Migrate , createMigrateVDSCommandParameters ( ) , this ) . getReturnValue ( ) ) ; return ( org.ovirt.engine.core.bll.MigrateVmCommand.getActionReturnValue ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ; }
public void getUsbPolicyOnUpdateCurrentlyLegacyGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_LEGACY , null ) , UsbPolicy.ENABLED_NATIVE ) ; }
public void removeAll ( java.util.Collection < org.ovirt.engine.core.compat.Guid > ids ) { for ( org.ovirt.engine.core.compat.Guid id : ids ) { remove ( id ) ; } }
private org.ovirt.engine.core.bll.context.CommandContext getCommandContext ( ) { org.ovirt.engine.core.bll.context.CommandContext commandContext = org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( enclosingCommand.getExecutionContext ( ) ) ; commandContext.getExecutionContext ( ) . setShouldEndJob ( isLastTaskHandler ( ) ) ; return commandContext ; }
public void testIsExternalVM ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData ( ) ) ; org.junit.Assert.assertFalse ( "VM should not be external VM" , ovfUtils.isExternalVM ( xmlDocument ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult stpForVmNetworkOnly ( ) { return ( network.isVmNetwork ( ) ) || ( ! ( network.getStp ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP ) ; }
public boolean isVisible ( ) { return getModel ( ) . getHasDomain ( ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.storageEventSubTabLabel ( ) , 9 , modelProvider , org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public void setCtrlAltDeleteRemapHotkey ( java.lang.String hotkey ) { remapCtrlAltDeleteSpice.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; remapCtrlAltDeleteVnc.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; }
public void validateImageNotFound ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST ) ; }
private void initJobRepository ( ) { try { org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository ( ) . finalizeJobs ( ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.Backend.log.error ( "Failed to finalize running Jobs" , e ) ; } }
public void writeDate ( java.lang.String name , java.util.Date value ) { writeElement ( name , org.ovirt.api.metamodel.runtime.xml.XmlWriter.DATE_FORMAT.get ( ) . format ( value ) ) ; }
public static boolean interfaceBasedOn ( java.lang.String proposedIface , java.lang.String iface ) { return ( ( iface != null ) && ( proposedIface != null ) ) && ( iface.equals ( org.ovirt.engine.core.utils.NetworkUtils.StripVlan ( proposedIface ) ) ) ; }
public void testNicExistsWhenNicNameIsNotNull ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNicId ( null ) ; attachment.setNicName ( "whatever" ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . nicNameIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void increment ( ) { ( count ) ++ ; }
public org.ovirt.engine.core.common.businessentities.OriginType getOrigin ( ) { return vmStatic.getorigin ( ) ; }
protected boolean canDoAction ( ) { Q validator = getProfileValidator ( ) ; return ( validate ( validator.profileIsSet ( ) ) ) && ( validate ( validator.profileExists ( ) ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > searchClusters ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getClusterDao ( ) , true ) ; }
public static org.ovirt.engine.core.common.errors.ErrorType getErrorType ( java.lang.String error ) { try { return org.ovirt.engine.core.common.errors.VdcBllMessages.valueOf ( error ) . getErrorType ( ) ; } catch ( java.lang.Exception e ) { return null ; } }
public void executeCommand ( ) { setupMocks ( ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_HOOK_REFRESH , cmd.getAuditLogTypeValue ( ) ) ; }
protected void ChangeDefualtHost ( ) { super . ChangeDefualtHost ( ) ; doChangeDefautlHost ( vm.getDedicatedVmForVds ( ) ) ; }
public static org.ovirt.engine.core.bll.AutoStartVmsRunner getInstance ( ) { return org.ovirt.engine.core.bll.AutoStartVmsRunner.instance ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.addTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags fromTagsDirector = tagsDirector.GetTagByName ( "tag1" ) ; org.junit.Assert.assertNotNull ( fromTagsDirector ) ; org.junit.Assert.assertEquals ( tag , fromTagsDirector ) ; }
private void addTypeColumn ( ) { org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addColumn ( new org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn ( ) , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.empty ( ) , "30px" ) ; }
protected void onMouseOut ( ) { dragImage.setVisible ( false ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.hide ( true ) ; if ( ( parentPanel ) != null ) { parentPanel.onMouseOver ( ) ; } }
private void assertValidateSlaveHasNoLabelsFailed ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator , java.lang.String slaveName ) { org.junit.Assert.assertThat ( validator.validateSlaveHasNoLabels ( slaveName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "LABEL_ATTACH_TO_IMPROPER_INTERFACE_ENTITY" , slaveName ) ) ) ; }
private boolean containsLun ( java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > luns , org.ovirt.engine.core.common.businessentities.LUNs lunToFind ) { for ( org.ovirt.engine.core.common.businessentities.LUNs lun : luns ) { if ( lun.getLUN_id ( ) . equals ( lunToFind.getLUN_id ( ) ) ) { return true ; } } return false ; }
public javax.ws.rs.core.Response performRemove ( java.lang.String id ) { org.ovirt.engine.api.model.Network entity = lookupNetwork ( asGuidOr404 ( id ) ) ; if ( entity == null ) { notFound ( ) ; return null ; } return performAction ( removeAction , getActionParameters ( null , entity ) ) ; }
private static org.ovirt.engine.core.common.action.VdcReturnValueBase NotAutorizedError ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; returnValue.setCanDoAction ( false ) ; returnValue.getCanDoActionMessages ( ) . add ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION.toString ( ) ) ; return returnValue ; }
private org.ovirt.engine.api.model.VM removeRestrictedInfoFromVM ( org.ovirt.engine.api.model.VM vm ) { if ( vm != null ) { vm.setHost ( null ) ; vm.setPlacementPolicy ( null ) ; } return vm ; }
public static boolean isWindowsOsType ( org.ovirt.engine.core.common.businessentities.VmOsType osType ) { if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getWindowsOsTypes ( ) . contains ( osType ) ) { return true ; } return false ; }
protected java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( object ) ) . getName ( ) ; }
public void lowerVersionMgmtNetworkSupportedFeatures ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addManagementNetworksToPool ( 2 ) ; setupNetworkValidator ( true ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
protected void callbackFailed ( java.lang.String message ) { if ( haveCallback ( ) ) { callback.failed ( message ) ; } }
protected org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > getPredicate ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { return new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return ! ( sdToReject.equals ( storageDomain ) ) ; } } ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.ServerConnectionListReturnForXmlRpc getStorageConnectionsList ( java.lang.String spUUID ) ;
public java.lang.Void runInTransaction ( ) { getNetworkClusterDAO ( ) . remove ( getParameters ( ) . getVdsGroupId ( ) , getNetwork ( ) . getId ( ) ) ; return null ; }
public org.ovirt.engine.api.model.DiskAttachment update ( org.ovirt.engine.api.model.DiskAttachment diskAttachment ) { return null ; }
public org.ovirt.engine.api.resource.FenceAgentResource getAgentResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendFenceAgentResource ( id ) ) ; }
public boolean checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( ( vm.getDedicatedVmForVds ( ) ) != null ) && ( org.ovirt.engine.core.bll.hostdev.HostDeviceManager.supportsHostDevicePassthrough ( vm ) ) ) && ( checkVmNeedsDirectPassthrough ( vm.getId ( ) ) ) ; }
private void generateClasses ( org.ovirt.api.metamodel.concepts.StructType type ) { generateReader ( type ) ; generateWriter ( type ) ; }
public void RemoveVmFromDownVms ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.compat.Guid vmId ) { java.util.HashSet < org.ovirt.engine.core.compat.Guid > vms = vdsAndVmsList.get ( vdsId ) ; if ( vms != null ) { vms.remove ( vmId ) ; } }
protected final boolean failCanDoAction ( org.ovirt.engine.core.dal.VdcBllMessages message ) { addCanDoActionMessage ( message ) ; return false ; }
public static org.ovirt.engine.core.common.queries.SearchParameters eqSearchParams ( org.ovirt.engine.core.common.queries.SearchParameters expected ) { return org.mockito.Matchers.argThat ( new org.ovirt.engine.api.restapi.test.util.TestHelper.SearchParametersEquals ( expected ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.VDSGroup source ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.SupportCustomDeviceProperties , source.getcompatibility_version ( ) . getValue ( ) ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getVdsId ( ) { return ( getVm ( ) . getrun_on_vds ( ) ) != null ? getVm ( ) . getrun_on_vds ( ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; }
protected boolean failVmStatusIllegal ( ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL , org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) ) ; }
protected void init ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) != null ) { needsHostDevices = hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; } }
public java.lang.String getPassword ( ) { return ( ( java.lang.String ) ( GetData ( org.ovirt.engine.core.bll.session.SessionDataContainer.PASSWORD_PARAMETER_NAME , false ) ) ) ; }
public void testGlusterVolumeBricksByServerId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = dao.getGlusterVolumeBricksByServerId ( org.ovirt.engine.core.dao.gluster.GlusterBrickDaoTest.SERVER_ID ) ; org.junit.Assert.assertNotNull ( bricks ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { optimizationForServerFormatter ( object ) ; }
public void testParseEmpty ( ) { java.util.List < org.ovirt.engine.api.model.PowerManagement > ret = org.ovirt.engine.api.restapi.util.FencingOptionsParser.parse ( "" , "" ) ; assertNotNull ( ret ) ; assertEquals ( 0 , ret.size ( ) ) ; }
public void before ( ) { rangeOf10Macs = new org.ovirt.engine.core.bll.network.macpoolmanager.Range ( org.ovirt.engine.core.bll.network.macpoolmanager.RangeTest.RANGE_FROM , org.ovirt.engine.core.bll.network.macpoolmanager.RangeTest.RANGE_TO ) ; }
private void initTree ( ) { com.google.gwt.user.cellview.client.CellTree.Resources res = com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.webadmin.section.main.view.popup.configure.RolePopupView.AssignTagTreeResources.class ) ; tree = new org.ovirt.engine.ui.webadmin.widget.editor.EntityModelCellTree < org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel , org.ovirt.engine.ui.webadmin.uicommon.model.SimpleSelectionTreeNodeModel > ( res ) ; }
public void runTest ( ) { org.ovirt.engine.ui.uicommonweb.Uri uri = new org.ovirt.engine.ui.uicommonweb.Uri ( uriCandidate ) ; org.junit.Assert.assertTrue ( uri.isValid ( ) ) ; org.junit.Assert.assertEquals ( uriCandidate.toLowerCase ( ) , uri.toString ( ) ) ; }
public void setStatus ( org.ovirt.engine.core.common.businessentities.VMStatus value ) { if ( ( status ) != value ) { status = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Status" ) ) ; } }
protected org.ovirt.engine.core.dao.VmStaticDAO getVmStaticDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmStaticDao ( ) ; }
public void addMethod ( org.ovirt.api.metamodel.concepts.Method newMethod ) { methods.add ( newMethod ) ; methods.sort ( java.util.Comparator.comparing ( Method :: getName ) ) ; }
public void testSave ( ) { dao.save ( newLUNStorageMap ) ; org.ovirt.engine.core.common.businessentities.storage.LUN_storage_server_connection_map result = dao.get ( newLUNStorageMap.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newLUNStorageMap , result ) ; }
public void testSave ( ) { dao.save ( newGroup ) ; org.ovirt.engine.core.common.businessentities.aaa.DbGroup result = dao.getByName ( newGroup.getName ( ) ) ; org.junit.Assert.assertEquals ( newGroup , result ) ; }
public void testBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplayIsFalse ( ) { doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( false , createNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testAddGroup ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": name=*" ) , SearchType.AdGroup , getAdGroup ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddUser , org.ovirt.engine.core.common.action.AddUserParameters.class , new java.lang.String [ ] { "AdGroup.id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true , null , VdcQueryType.GetAdGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( NAMES [ 0 ] ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( ReturnValue ) ) ; setExportPath ( ( connection == null ? null : connection.getconnection ( ) ) ) ; stopProgress ( ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public final void setSoftLimit ( java.lang.String sessionId , java.util.Date softLimit ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.SOFT_LIMIT_PARAMETER_NAME , softLimit ) ; }
protected void RunCommands ( ) { SortCommands ( ) ; super . RunCommands ( ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__DETACH_ACTION_TO ) ; addValidationMessage ( EngineMessage.VAR__TYPE__VM_DISK ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getStorageDomainDao ( ) . getForStoragePool ( domainId , org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getStoragePool ( ) . getId ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { getView ( ) . hideRoleSelection ( java.lang.Boolean.parseBoolean ( model.getIsRoleListHiddenModel ( ) . getEntity ( ) . toString ( ) ) ) ; }
protected void onNoVmsAdded ( org.ovirt.engine.core.compat.Guid poolId ) { org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPoolDao ( ) . remove ( poolId ) ; }
protected boolean addVmLease ( org.ovirt.engine.core.compat.Guid leaseStorageDomainId , org.ovirt.engine.core.compat.Guid vmId ) { if ( leaseStorageDomainId == null ) { return true ; } return runInternalActionWithTasksContext ( ActionType.AddVmLease , new org.ovirt.engine.core.common.action.VmLeaseParameters ( getStoragePoolId ( ) , leaseStorageDomainId , vmId ) ) . getSucceeded ( ) ; }
public final void setHardLimit ( java.lang.String sessionId , java.util.Date hardLimit ) { setData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.HARD_LIMIT_PARAMETER_NAME , hardLimit ) ; }
private boolean wasSkippedDueToPolicy ( org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result ) { return ( ( result != null ) && ( result.isSkipped ( ) ) ) && ( ( org.ovirt.engine.core.bll.FenceVdsBaseCommand.getParameters ( ) . getParentCommand ( ) ) == ( org.ovirt.engine.core.common.action.VdcActionType.RestartVds ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , boot , diskInterface , usingScsiReservation ) ; }
public void setlog_time ( java.util.Date value ) { this . logTime = value ; }
public static org.ovirt.engine.core.common.businessentities.NetworkInterface FindInterfaceByNetworkName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.NetworkInterface > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.NetworkInterface i : items ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( i.getNetworkName ( ) , name ) ) { return i ; } } return null ; }
public java.lang.String getDefaultTitle ( ) { return org.ovirt.engine.ui.webadmin.widget.table.column.CONSTANTS.commentLabel ( ) ; }
protected org.ovirt.engine.core.common.businessentities.tags getRootTag ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.tags.class , VdcQueryType.GetRootTag , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , "root" ) ; }
public void sethypervisor_type ( org.ovirt.engine.core.common.businessentities.HypervisorType value ) { mVdsDynamic.sethypervisor_type ( value ) ; }
public void getHostListByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
private void Template_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.Template_SelectedItemChanged ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionLunMapDao ( ) ; existingLUNStorageMap = dao.get ( new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMapId ( FixturesTool.LUN_ID1 , FixturesTool.STORAGE_CONNECTION_ID ) ) ; newLUNStorageMap = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDaoTest.FREE_LUN_ID , FixturesTool.STORAGE_CONNECTION_ID ) ; }
public void separatorNotEmpty ( ) { java.util.List < java.lang.Object > items = createItems ( ) ; java.lang.String separator = "" ; org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( org.ovirt.engine.core.utils.ReplacementUtilsTest.PROPERTY_NAME , items , separator , 5 ) ; }
public static boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDisplayTypes ( osId , version ) . contains ( DisplayType.qxl ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( oldIface ) ; getVmNicDao ( ) . update ( getInterface ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getOvaInfo ( java.lang.String ovaPath ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getOvaInfo ( ovaPath ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( xmlRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public boolean IsMatch ( java.lang.String input ) { return impl.test ( input ) ; }
public void testGetAllForClusterWithInvalidCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > result = dao.getAllForCluster ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( ) { if ( ( entity ) == null ) { entity = org.ovirt.engine.core.bll.gluster.GlusterHookCommandBase.getGlusterHooksDao ( ) . getById ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandBase.getParameters ( ) . getHookId ( ) , true ) ; } return entity ; }
public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { return new org.ovirt.engine.core.common.utils.Pair ( getGuid ( rs , "assigned_vm_numa_node_id" ) , rs.getInt ( "last_run_in_vds_numa_node_index" ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) ) ) ; }
public void testGetPluggedForMac ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > result = dao.getPluggedForMac ( FixturesTool.MAC_ADDRESS ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic vmNetworkInterface : result ) { org.junit.Assert.assertEquals ( FixturesTool.MAC_ADDRESS , vmNetworkInterface.getMacAddress ( ) ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkClusterDao ( ) . remove ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters ( ) . getVdsGroupId ( ) , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.setSucceeded ( true ) ; }
public void updateVolumeStatus ( org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus newStatus ) { getGlusterVolumeDao ( ) . updateVolumeStatus ( volumeId , newStatus ) ; updateBricksStatuses ( volumeId , newStatus ) ; }
protected java.lang.String generateVmMetadata ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > AllVmImages ) { return ovfManager.ExportVm ( vm , AllVmImages , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vm ) ) ; }
protected void rerunInternal ( ) { DecreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmToServerCommand.getDestinationVds ( ) . getId ( ) ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.determineMigrationFailueForAuditLog ( ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.log ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc reset ( java.lang.String vmId ) ;
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__STOP ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME ) ; }
public void testGetById ( ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig result = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( FixturesTool.HOST_NIC_VFS_CONFIG , result.getId ( ) ) ; checkNetworksAndLabels ( result , 0 , 0 ) ; }
private java.lang.String generateTokenValueResponse ( ) { byte [ ] tokenBytes = getThreadLocalRequest ( ) . getSession ( ) . getId ( ) . getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) ; return com.google.gwt.util.tools.shared.StringUtils.toHexString ( com.google.gwt.util.tools.shared.Md5Utils.getMd5Digest ( tokenBytes ) ) ; }
protected boolean validate ( ) { if ( ( org.ovirt.engine.core.bll.RemoveBookmarkCommand.getBookmark ( ) ) == null ) { addInvalidIdErrorMessages ( EngineMessage.VAR__ACTION__UPDATE ) ; return false ; } return true ; }
protected void applyCommonValidationStyles ( ) { super . applyCommonValidationStyles ( ) ; org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.getValidatedWidgetStyle ( ) . setPadding ( 5 , Unit.PX ) ; }
public boolean execute ( ) { if ( ( restApiSessionId ) != null ) { sendRequest ( createRequest ( ) , new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback ( ) ) ; return true ; } else { return false ; } }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . Execute ( ) ; } }
com.google.gwt.safehtml.shared.SafeHtml lineChartWithoutImage ( int textWidth , java.lang.String textColor , java.lang.String fontWeight ) ;
protected java.lang.String getTitle ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return value.isPool ( ) ? constants.takeVmLabel ( ) : constants.runVmLabel ( ) ; }
public org.ovirt.engine.api.resource.VirtualFunctionAllowedNetworksResource getVfAllowedNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVirtualFunctionAllowedNetworksResource ( guid , parent.getHostId ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc heartBeat ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.ping" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot prepareSnapshotConfigWithoutImageSingleImage ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot , org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.utils.ovf.OvfManager ovfManager ) { return prepareSnapshotConfigWithAlternateImage ( snapshot , imageId , null , ovfManager ) ; }
public void unsetBlockStatistic ( ) { this . blockStatistic = null ; }
public boolean getis_display ( ) { return this . isDisplay ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getVdsDao ( ) ) ; existingVds = dao.get ( org.ovirt.engine.core.dao.VdsDAOTest.EXISTING_VDS_ID ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getDbFacade ( ) . getQosDao ( ) . getAllForStoragePoolId ( org.ovirt.engine.core.bll.GetAllNetworkQosByStoragePoolIdQuery.getParameters ( ) . getId ( ) ) ) ; }
protected org.ovirt.engine.api.model.StorageDomain getEntity ( int index ) { org.ovirt.engine.api.model.StorageDomain entity = control.createMock ( org.ovirt.engine.api.model.StorageDomain.class ) ; return org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainsResourceTest.setUpEntityExpectations ( entity , index , StorageType.NFS ) ; }
protected void setUpGetEntityExpectations ( int index ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , getEntity ( index ) ) ; }
public void preventRollback ( ) { getParameters ( ) . setExecutionIndex ( 0 ) ; org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatus ( getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
public void qosOverCommitmentReportedNicSpeed ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmentNicSetup ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
public void setIsVolumeFormatAvailable ( boolean isVolumeFormatAvailable ) { this . isVolumeFormatAvailable = isVolumeFormatAvailable ; }
public void testIsNetworkInSyncWhenBootProtocolEqual ( ) throws java.lang.Exception { initIpConfigurationBootProtocol ( true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas ( ) throws java.lang.Exception { assertGetAllRelevantQuoatsForStorage ( FixturesTool.STORAGE_DOAMIN_NFS_ISO , ( ( org.ovirt.engine.core.dao.QuotaDaoTest.STORAGE_NUM_QUOTAS ) - 1 ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepStatus ( java.lang.String volumeName ) ;
public org.ovirt.engine.api.model.Quota get ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ; org.ovirt.engine.api.model.Quota quota = performGet ( VdcQueryType.GetQuotaByQuotaId , params ) ; return quota ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( ) ; }
protected void SyncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . SyncSearch ( ) ; super . SyncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.GetEventSubscribersBySubscriberIdParameters ( getEntity ( ) . getuser_id ( ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getHardDiskOption ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel a : getItems ( ) ) { if ( ( ( org.ovirt.engine.core.common.businessentities.BootSequence ) ( a.getEntity ( ) ) ) == ( org.ovirt.engine.core.common.businessentities.BootSequence.C ) ) { return a ; } } throw new java.lang.IndexOutOfBoundsException ( ) ; }
public org.ovirt.engine.core.common.businessentities.BootSequence getdefault_boot_sequence ( ) { return this . mVmStatic.getdefault_boot_sequence ( ) ; }
public void setVdsName ( java.lang.String value ) { vdsStatic.setVdsName ( value ) ; }
public void canDoActionFailsWithEmptyBricksList ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutRemoveBricksTask , new java.util.ArrayList < > ( ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( FixturesTool.USER_EXISTING_ID , ActionGroup.CONSUME_QUOTA , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > reset ( java.lang.String vmId ) ;
public long getImageVirtualSize ( java.lang.String id ) { com.woorea.openstack.glance.model.Image glanceImage = getGlanceClient ( ) . images ( ) . show ( id ) . execute ( ) ; return getImageVirtualSize ( glanceImage ) ; }
public void sriovFeatureNotSupported ( ) { sriovFeatureSupportTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_SRIOV_FEATURE_NOT_SUPPORTED ) , false ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__VOLUME_SNAPSHOT_CONFIG_UPDATE ) ; }
protected java.math.BigDecimal asDec ( double d ) { return new java.math.BigDecimal ( d ) ; }
private org.ovirt.engine.core.common.businessentities.VM getVm ( ) { return hostedEngineVm ; }
public void shouldDetectNonMigratableVMs ( ) { invalidVM.setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( UPGRADE_ERROR.VM_NOT_MIGRATABLE ) ) ; }
public void testRemoveCantDo ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResourceTest.dataCenterId } , setUpVDSGroups ( ) , null ) ; doTestBadRemove ( false , true , org.ovirt.engine.api.restapi.resource.CANT_DO ) ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot getActiveSnapshot ( ) { return org.ovirt.engine.core.bll.VmCommand.getSnapshotDAO ( ) . get ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getId ( ) , SnapshotType.ACTIVE ) ; }
public void setdisplay_secure_port ( java.lang.Integer value ) { this . mVmDynamic.setdisplay_secure_port ( value ) ; }
private void markVfsAsUsedByVm ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.compat.Guid vmId , java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > passthroughVnicToVfMap ) { org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper hostNicVfsConfigHelper = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelper.class ) ; hostNicVfsConfigHelper.setVmIdOnVfs ( hostId , vmId , new java.util.HashSet ( passthroughVnicToVfMap.values ( ) ) ) ; }
public java.lang.String getCertificateSubject ( ) { return vdsStatic.getCertificateSubject ( ) ; }
public void externalNetworkPortMirroring ( ) throws java.lang.Exception { externalNetworkPortMirroringTest ( true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_PORT_MIRRORED ) ) ; }
public void setVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeFormat volumeFormat ) { this . volumeFormat = volumeFormat ; }
protected org.ovirt.engine.core.common.businessentities.StoragePool getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendDataCentersResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.StoragePool.class ) , index ) ; }
protected org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getVmPropertiesUtils ( ) { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sendHcCmdToDesktop ( java.lang.String vmId , java.lang.String hcCommand ) ;
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePoolId ( ) . toString ( ) , LockMessagesMatchUtil.POOL ) ; }
protected void executeQueryCommand ( ) { P params = org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getParameters ( ) ; setReturnValue ( org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getDbFacade ( ) . getVdsGroupDAO ( ) . getClustersWithPermittedAction ( org.ovirt.engine.core.bll.GetClustersWithPermittedActionQuery.getUserID ( ) , params.getActionGroup ( ) ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc createVolumeContainer ( java.lang.String sdUUID , java.lang.String imgGUID , java.lang.String size , int volFormat , int diskType , java.lang.String volUUID , java.lang.String descr , java.lang.String srcImgGUID , java.lang.String srcVolUUID ) ;
protected void executeCommand ( ) { setReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . logoff ( new org.ovirt.engine.core.common.action.LogoutUserParameters ( user.getId ( ) ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; getExternalProviders ( ) . setItems ( providers ) ; selectExternalProvider ( ) ; }
public void testCDAStoragePoolNotUp ( ) { storagePool.setStatus ( StoragePoolStatus.Uninitialized ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( "validate did not fail on a Storage Pool which is not up" , command , EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ; }
public void testGetRelevantVdsGroupQuotaForUserWithoutPrivileges ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas = dao.getAllRelevantQuotasForVdsGroup ( FixturesTool.VDS_GROUP_RHEL6_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertEquals ( "Unprivileged user is not allowed to fetch for quota" , 0 , quotas.size ( ) ) ; }
public void testGetWithPermissionsUnprivilegedUser ( ) { org.ovirt.engine.core.common.businessentities.VDS result = dao.get ( existingVds.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNull ( result ) ; }
private java.lang.Integer getApplicationMode ( javax.servlet.http.HttpServletRequest request ) { return ( ( java.lang.Integer ) ( runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode ) , request ) ) ) ; }
private void SearchAllRoles ( ) { setItemsFilter ( null ) ; getSearchCommand ( ) . Execute ( ) ; }
public void updateStatusAndReasons ( org.ovirt.engine.core.common.businessentities.VdsDynamic host ) { update ( host ) ; }
protected void EndWithFailure ( ) { endCommand ( ) ; rollbackQuota ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { onLogin ( loginModel ) ; }
public void setvm_pid ( java.lang.Integer value ) { this . mVmDynamic.setvm_pid ( value ) ; }
public java.lang.String encode ( org.ovirt.engineextensions.aaa.ldap.ASN1OctetString value ) { return value.stringValue ( ) ; }
public org.ovirt.engine.api.model.VnicPassThrough adapt ( org.ovirt.engine.api.v3.types.V3VnicPassThrough from ) { org.ovirt.engine.api.model.VnicPassThrough to = new org.ovirt.engine.api.model.VnicPassThrough ( ) ; if ( from.isSetMode ( ) ) { to.setMode ( org.ovirt.engine.api.model.VnicPassThroughMode.valueOf ( from.getMode ( ) ) ) ; } return to ; }
public org.ovirt.engine.core.compat.Guid getVmId ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return getParameters ( ) . getVm ( ) . getId ( ) ; } return super . getVmId ( ) ; }
public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment ( ) { return org.jboss.shrinkwrap.api.ShrinkWrap.create ( org.jboss.shrinkwrap.api.spec.JavaArchive.class ) . addClasses ( org.ovirt.engine.core.bll.scheduling.TestDeps.class , org.ovirt.engine.core.bll.scheduling.SchedulingManager.class ) . addAsManifestResource ( EmptyAsset.INSTANCE , org.jboss.shrinkwrap.api.ArchivePaths.create ( "beans.xml" ) ) ; }
private void onShutdown ( ) { onPowerAction ( VdcActionType.ShutdownVm , new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.PowerActionParametersFactory < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.ShutdownVmParameters ( vm.getId ( ) , true ) ; } } ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallBackEnabled ( ) ;
public void setRunOnce ( boolean value ) { runOnce = value ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( final org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VDS ... hosts ) { return inClusterUpgradeFilterPolicyUnit.filter ( java.util.Arrays.asList ( hosts ) , vm , null , org.mockito.Mockito.mock ( org.ovirt.engine.core.common.scheduling.PerHostMessages.class ) ) ; }
public static org.ovirt.engine.core.compat.Match Match ( java.lang.String string , java.lang.String pattern ) { return org.ovirt.engine.core.compat.Regex.Match ( string , pattern , 0 ) ; }
public void setVmBalloonInfo ( org.ovirt.engine.core.common.businessentities.VmBalloonInfo vmBalloonInfo ) { this . vmBalloonInfo = vmBalloonInfo ; }
protected void enableDisableByBootProtocol ( org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model ) { boolean bootProtocolsAvailable = model.getBootProtocolsAvailable ( ) ; ipv4BootProtocolLabel.setEnabled ( bootProtocolsAvailable ) ; ipv4BootProtocol.setEnabled ( bootProtocolsAvailable ) ; ipv4BootProtocol.setEnabled ( NetworkBootProtocol.NONE , model.getNoneBootProtocolAvailable ( ) ) ; }
public int getnum_of_sockets ( ) { return this . mVmStatic.getnum_of_sockets ( ) ; }
java.lang.String noActiveStorageDomains ( ) ;
private void logFailureToRestartVm ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ) ; event.setVmId ( vmId ) ; auditLogDirector.log ( event , getExceededMaxNumOfRestartsAuditLogType ( ) ) ; }
public void Cancel ( ) { org.ovirt.engine.ui.frontend.Frontend.Unsubscribe ( ) ; CancelConfirmation ( ) ; setGuideContext ( null ) ; setWindow ( null ) ; UpdateActionAvailability ( ) ; }
public void spiceSelected ( boolean selected ) { rdpPanel.setVisible ( selected ) ; }
protected boolean RemoveVmInSpm ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmID , org.ovirt.engine.core.compat.Guid storageDomainId ) { return runVdsCommand ( VDSCommandType.RemoveVM , new org.ovirt.engine.core.common.vdscommands.RemoveVMVDSCommandParameters ( storagePoolId , vmID , storageDomainId ) ) . getSucceeded ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider < ? > generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties > provider = new org.ovirt.engine.core.common.businessentities.Provider ( ) ; provider.setId ( generateNonExistingId ( ) ) ; provider.setName ( "brovider" ) ; provider.setUrl ( "http://brovider.com/" ) ; provider.setType ( ProviderType.OPENSTACK_NETWORK ) ; org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties additionalProperties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ( ) ; additionalProperties.setReadOnly ( java.lang.Boolean.FALSE ) ; additionalProperties.setTenantName ( "10ant" ) ; additionalProperties.setPluginType ( OpenstackNetworkPluginType.LINUX_BRIDGE.name ( ) ) ; provider.setAdditionalProperties ( additionalProperties ) ; provider.setAuthUrl ( "http://keystone-server:35357/v2.0/" ) ; return provider ; }
private void loadProviders ( ) { switch ( importSources.getSelectedItem ( ) ) { case VMWARE : loadVmwareProviders ( ) ; break ; default : } }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf ( java.lang.String ovf ) { try { return new org.ovirt.engine.core.bll.OvfHelper ( ) . readVmFromOvf ( ovf ) ; } catch ( org.ovirt.engine.core.utils.ovf.OvfReaderException e ) { log.debug ( ( "failed to parse a given ovf configuration: \n" + ovf ) , e ) ; convertFailed ( ) ; return null ; } }
public void testCDANonExistingVds ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vdsDAOMock ) . get ( vdsId ) ; org.junit.Assert.assertFalse ( "canDoAction did not fail for non existing VDS" , command.canDoAction ( ) ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkMessages ( command , VdcBllMessages.VDS_NOT_EXIST ) ; }
public void testAddIpv4BootProtocolWithNoAddressSet ( ) { final java.util.Map < java.lang.String , java.lang.Object > opts = new java.util.HashMap < > ( ) ; underTest.addIpv4BootProtocol ( opts , mockHostNetwork ) ; org.junit.Assert.assertTrue ( opts.isEmpty ( ) ) ; }
protected java.lang.String getDefaultDomain ( ) { return org.ovirt.engine.core.aaa.DirectoryManager.getInstance ( ) . getDirectories ( ) . get ( 0 ) . getName ( ) ; }
private void setTooltipText ( java.lang.String text ) { tooltip.setText ( ( useItalic ? wrapItalic ( text ) : text ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain mockFirstStorageDomain ( int availabeDiskSize ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setavailable_disk_size ( availabeDiskSize ) ; storageDomain.setstatus ( StorageDomainStatus.Active ) ; storageDomain.setId ( firstStorageDomainId ) ; storageDomain.setstorage_domain_type ( StorageDomainType.Data ) ; return storageDomain ; }
public void clearSession ( ) { container.removeSession ( ) ; container.removeSession ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( null ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } return source ; }
static org.ovirt.engine.core.common.businessentities.VmNetworkInterface setUpEntityExpectations ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity , org.ovirt.engine.core.common.businessentities.VmNetworkStatistics statistics , int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.setUpEntityExpectations ( entity , statistics , index , NAMES [ 2 ] ) ; }
public void testUrlWithFilterByTypes ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setErrataTypes ( java.util.EnumSet.of ( Erratum.ErrataType.BUGFIX , Erratum.ErrataType.SECURITY ) ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.Assert.assertEquals ( "/katello/api/v2/systems/xxx/errata?search=type+%3D+bugfix+or+type+%3D+security" , underTest.build ( ) ) ; }
protected abstract void setValueByKey ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel , java.lang.String key ) ;
public void setDisks ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > value ) { if ( ( disks ) != value ) { disks = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "Disks" ) ) ; } }
protected javax.ws.rs.core.Response doAction ( final org.ovirt.engine.core.common.action.VdcActionType task , final org.ovirt.engine.core.common.action.VdcActionParametersBase params , final org.ovirt.engine.api.model.Action action ) { return doAction ( task , params , action , PollingType.VDSM_TASKS ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VdsStatic > getAllForHost ( java.lang.String host ) { return getCallsHandler ( ) . executeReadList ( "GetVdsStaticByHostName" , new org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.VdsStaticRowMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "host_name" , host ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage_server_connections > getStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_server_connections > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.storage_server_connections [ ] { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) } ) ) ; }
public void setLabelStyleName ( java.lang.String styleName ) { labelElement.setClassName ( styleName ) ; }
public org.ovirt.engine.api.restapi.rsdl.RsdlBuilder.LinkBuilder requestParameter ( final java.lang.String requestParameter ) { link.setRequest ( new org.ovirt.engine.api.model.Request ( ) ) ; link.getRequest ( ) . setBody ( new org.ovirt.engine.api.model.Body ( ) { { setType ( requestParameter ) ; } } ) ; return this ; }
public java.lang.String render ( java.util.Date object ) { if ( object == null ) { return org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer.CONSTANTS.notAvailableLabel ( ) ; } return org.ovirt.engine.ui.common.widget.renderer.FullDateTimeRenderer.getLocalizedDateTimeFormat ( ) . format ( object ) ; }
public void getUsbPolicyNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.junit.Assert.assertEquals ( UsbPolicy.DISABLED , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
public void lowerVersionNoHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( cmd ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; cancel ( ) ; }
private void setSupportedFeatures ( ) { networkCustomPropertiesSupported = org.ovirt.engine.core.common.FeatureSupported.networkCustomProperties ( host.getVdsGroupCompatibilityVersion ( ) ) ; }
private boolean isTypeTenantAware ( ) { org.ovirt.engine.core.common.businessentities.ProviderType type = getType ( ) . getSelectedItem ( ) ; return ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK ) ) || ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_IMAGE ) ) ; }
public void setup ( ) { initAgents ( ) ; mockDbFacades ( ) ; initCommand ( ) ; mockBackend ( ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.getBroker ( ) . snapshot ( org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) , createSnapshotParameters ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.ProceedProxyReturnValue ( ) ; }
private org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator createNetworkClusterValidator ( ) { return new org.ovirt.engine.core.bll.network.cluster.AttachNetworkClusterValidator ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getNetworkCluster ( ) , getClusterVersion ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.VmValidator getVmValidator ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ; }
public void checkExecuteCommandWithNullVdsId ( ) { parameters.setStorageServerConnection ( NFSConnection ) ; parameters.setVdsId ( null ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.never ( ) ) . disconnectStorage ( ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomainType getEnum ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { return storage.getstorage_domain_type ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkPrefixValid ( ) { return network.getName ( ) . toLowerCase ( ) . startsWith ( "bond" ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CANNOT_CONTAIN_BOND_NAME ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private boolean isSameSourceAndDest ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain = getImageSourceDomain ( parameters.getImageId ( ) ) ; if ( sourceDomain.getId ( ) . equals ( parameters.getTargetStorageDomainId ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME ) ; } return true ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getReturnStatus ( ) { return result.mStatus ; }
protected org.ovirt.engine.core.bll.storage.IStorageHelper getStorageHelper ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( storageDomain.getStorageType ( ) ) ; }
public void persistCommandWithContext ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { persistCommand ( parentCommand , getContext ( ) , enableCallBack ) ; }
public void testNotContainsUnregisteredEntities ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = dao.get ( org.ovirt.engine.core.dao.StorageDomainDaoTest.EXISTING_DOMAIN_ID ) ; org.junit.Assert.assertFalse ( storageDomain.isContainsUnregisteredEntities ( ) ) ; }
public void validateVmMemoryCanStartOnVds ( ) { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance ( ) . hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertEquals ( vmPassedMemoryRequirement , true ) ; }
private void _setCliEnvironmentIfNecessary ( java.lang.String name , java.lang.Object value ) throws java.io.IOException { if ( value == null ) { _deploy.getParser ( ) . cliNoop ( ) ; } else { _deploy.getParser ( ) . cliEnvironmentSet ( name , value ) ; } }
public void saveAll ( java.util.Collection < T > entities ) { for ( T entity : entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDao.save ( entity ) ; } }
private boolean wasQuotaEnforcementDisabled ( ) { return ( ( _oldStoragePool.getQuotaEnforcementType ( ) ) != ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) && ( ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool ( ) . getQuotaEnforcementType ( ) ) == ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) ; }
public javax.ws.rs.core.Response deactivate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.api.model.NIC nic = get ( ) ; nic.setPlugged ( false ) ; update ( nic ) ; return actionSuccess ( action ) ; }
public void testAddValueNull ( ) { paramSource.addValue ( paramName , null ) ; org.junit.Assert.assertNull ( "wrong value returned from parameter source" , paramSource.getValue ( paramName ) ) ; }
public void labelAppearsOnlyOnceInParamsInBothLabelsAndRemoveLabels ( ) { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = setLabelsOnParams ( createSet ( createNicLabel ( "lbl1" ) ) , createSet ( "lbl1" ) ) ; asserThatLabelAppearsOnlyOnceInParamsFailed ( createNicLabelValidator ( params ) , new java.util.HashSet < java.lang.String > ( java.util.Arrays.asList ( "lbl1" ) ) ) ; }
public void nameExists ( ) { newPoolNameIsAlreadyTaken ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST ) ; }
protected java.lang.String defaultImageName ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { return ( "otherOs" + ( nameUniquePart ) ) + ( org.ovirt.engine.ui.userportal.widget.basic.OsTypeImage.IMAGE ) ; }
public java.lang.Boolean getRawValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { return object.isPortMirroring ( ) ; }
public void updateNetConfigDirty ( org.ovirt.engine.core.compat.Guid id , java.lang.Boolean netConfigDirty ) { org.ovirt.engine.core.common.businessentities.VdsDynamic entity = get ( id ) ; entity.setNetConfigDirty ( netConfigDirty ) ; update ( entity ) ; }
public void testDatacenter ( ) { testValidSql ( "DataCenter: sortby name" , "SELECT * FROM ((SELECT distinct storage_pool.* FROM storage_pool ) ORDER BY name,name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "DataCenter: Clusters.name =Default" , "SELECT * FROM ((SELECT distinct storage_pool.* FROM storage_pool LEFT OUTER JOIN vds_groups_storage_domain ON storage_pool.id=vds_groups_storage_domain.storage_pool_id WHERE vds_groups_storage_domain.name LIKE Default ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
protected R populate ( R model , Q entity ) { return model ; }
protected void setVds ( final org.ovirt.engine.core.common.businessentities.VDS value ) { mVds = value ; mVdsName = null ; }
public org.ovirt.api.metamodel.tool.JavaClassName getBuilderName ( org.ovirt.api.metamodel.concepts.Type type ) { return getTypeName ( type , javaPackages.getBuildersPackageName ( ) , org.ovirt.api.metamodel.tool.PlainJavaTypes.BUILDER_SUFFIX ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity ) { verifyRelationWithHostNetworkQos ( entity ) ; verifyUnsetStoragePoolIdAndNameOnQos ( entity ) ; super . save ( entity ) ; hostNetworkQosDao.save ( entity.getHostNetworkQos ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > validateStorageServerConnection ( int serverType , java.lang.String spUUID , java.util.Map < java.lang.String , java.lang.String > [ ] args ) ;
public void testEvalNegative ( ) { org.mockito.Mockito.when ( mockNetwork.isExternal ( ) ) . thenReturn ( false ) ; org.junit.Assert.assertFalse ( underTest.test ( mockNetwork ) ) ; }
public void addColumnWithHtmlHeader ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerHtml ) { addColumn ( column , createHeader ( column , headerHtml , true ) ) ; }
public void checkValidMask ( ) { runSetup ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , true , true , "" ) ; org.junit.Assert.assertTrue ( underTest.isValid ( org.ovirt.engine.core.common.validation.MaskConstraintTest.TEST_MASK , contextMock ) ) ; org.mockito.Mockito.verifyZeroInteractions ( contextMock ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( a.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Data ) ; }
void setTooltip ( com.google.gwt.safehtml.shared.SafeHtml setTooltipText ) ;
public java.lang.Void call ( ) { proxy.extendVolume ( cinderDisk.getId ( ) . toString ( ) , newSize ) ; return null ; }
private boolean doesUserHavePemissionsOnStoragePool ( ) { org.ovirt.engine.core.common.businessentities.storage_pool pool = org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getDbFacade ( ) . getStoragePoolDao ( ) . get ( getStoragePoolId ( ) , org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.AbstractGetAllImagesListByStoragePoolIdQuery.getParameters ( ) . isFiltered ( ) ) ; return pool != null ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( getDiskDao ( ) . get ( org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommandCallback.getCommand ( ) . getParameters ( ) . getDestinationImageId ( ) ) ) ) ; } return disk ; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkIsVmNetwork ( ) { return network.isVmNetwork ( ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK ) ; }
public void canDoActionFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( null , getBricks ( volumeWithRemoveBricksTaskCompleted , 2 ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator getDiskValidator ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ; }
public void setParentParameters ( org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { parentParameters = parameters ; }
public void getIdByTypeReturnsNullForNonExistingVm ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( null , dao.getId ( new org.ovirt.engine.core.compat.Guid ( ) , SnapshotType.REGULAR ) ) ; }
public void testGetNonePermittedStorageDomains ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getPermittedStorageDomainsByStoragePool ( org.ovirt.engine.core.dao.StorageDomainDaoTest.EXISTING_USER_ID , ActionGroup.CONSUME_QUOTA , new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public org.ovirt.engine.api.resource.VmDiskResource getDeviceSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmDiskResource ( parentId , id , this , updateType , getUpdateParametersProvider ( ) , getRequiredUpdateFields ( ) , subCollections ) ) ; }
private void validateSource ( ) { clearError ( ) ; if ( ( ( importSources.getSelectedItem ( ) ) == ( ImportSource.EXPORT_DOMAIN ) ) && ( ( exportDomain ) == null ) ) { setError ( constants.notAvailableWithNoActiveExportDomain ( ) ) ; } }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; }
protected org.ovirt.engine.core.compat.Guid getCurrentVdsId ( ) { return ( getVdsDestinationId ( ) ) != null ? getVdsDestinationId ( ) : super . getCurrentVdsId ( ) ; }
public java.lang.String toString ( ) { return uuid.toString ( ) ; }
public void dispose ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( "vdsManager::disposing" ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( onTimerJobId ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.shutDownConnection ( ( ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper ) ( vdsProxy ) ) . getHttpClient ( ) ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > setDisksUsageInXmlRpc ( java.lang.Object [ ] disksUsageData ) { java.util.Map < java.lang.String , java.lang.Object > map = new java.util.HashMap < > ( ) ; map.put ( VdsProperties.VM_DISKS_USAGE , disksUsageData ) ; return map ; }
public void getVdsDefault ( ) { final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.Assert.assertNull ( v ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addConsoleDevice ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.CONSOLE , VmDeviceType.CONSOLE , org.ovirt.engine.core.bll.utils.VmDeviceUtils.EMPTY_SPEC_PARAMS , true , false ) ; }
public void setDetailPlaceTransitionHandler ( org.ovirt.engine.ui.webadmin.section.main.presenter.DetailsTransitionHandler < org.ovirt.engine.core.common.businessentities.Erratum > handler ) { super . setDetailPlaceTransitionHandler ( handler ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.initErrataGrid ( getTable ( ) , true , transitionHandler ) ; }
public void updateCallbackNotified ( org.ovirt.engine.core.compat.Guid commandId ) ;
public static org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( org.ovirt.engine.core.compat.Guid storagePoolId , long sizeRequested ) { return org.ovirt.engine.core.bll.VmHandler.findStorageDomainForMemory ( storagePoolId , sizeRequested , java.util.Collections.< org.ovirt.engine.core.common.businessentities.StorageDomain , java.lang.Integer > emptyMap ( ) ) ; }
private java.util.List < org.ovirt.engine.api.model.UnmanagedNetwork > getAllUnmanagedNetworksByVdsId ( ) { return getBackendCollection ( VdcQueryType.GetAllUnmanagedNetworksByHostId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ) ; }
public void testDefaultPoolFlagIsNotSetValidUsage ( ) throws java.lang.Exception { macPool.setDefaultPool ( false ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.MacPoolValidator ( macPool ) . defaultPoolFlagIsNotSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetVmsListForDisk ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getVmsListForDisk ( FixturesTool.IMAGE_GROUP_ID , false ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( "wrong number of VMs" , 1 , result.size ( ) ) ; }
public void testCanDoAction ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateVmNotDuringSnapshot ( ) ; vm.setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM ) ; }
public < T > void mockConfigValue ( org.ovirt.engine.core.utils.MockConfigRule.MockConfigDescriptor < T > mcd ) { org.ovirt.engine.core.utils.MockConfigRule.mockConfigValue ( mcd.getValue ( ) , mcd.getVersion ( ) , mcd.getReturnValue ( ) ) ; }
protected void RunCommands ( ) { for ( org.ovirt.engine.core.bll.CommandBase < ? > command : getCommands ( ) ) { if ( command.getReturnValue ( ) . getCanDoAction ( ) ) { executeValidatedCommand ( command ) ; } } }
public void setTitle ( java.lang.String title ) { this . title = ( title != null ) ? title : "" ; }
protected void setUpGetEntityNextRunExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmNextRunConfiguration , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; }
public org.ovirt.engine.core.common.TimeZoneType getTimeZoneType ( ) { org.ovirt.engine.core.common.businessentities.VmOsType vmOsType = ( ( org.ovirt.engine.core.common.businessentities.VmOsType ) ( getModel ( ) . getOSType ( ) . getSelectedItem ( ) ) ) ; return org.ovirt.engine.core.common.TimeZoneType.getTimeZoneByOs ( vmOsType ) ; }
public void vmIdDefault ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , i ) ; }
protected void openReport ( ) { setWidgetModel ( createReportModel ( ) ) ; }
public void update ( org.ovirt.engine.core.common.businessentities.DbGroup group ) { insertOrUpdate ( group , "UpdateGroup" ) ; }
public void setLabelStyleName ( java.lang.String styleName ) { getLabelElement ( ) . setClassName ( styleName ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getConnections ( ) { return getEntity ( java.util.List.class , VdcQueryType.GetStorageServerConnectionsForDomain , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , ( "storage domain: id=" + ( storageDomainId ) ) ) ; }
protected org.ovirt.engine.core.compat.Guid CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return CreateTask ( asyncTaskCreationInfo , parentCommand , null ) ; }
public void updateAllInBatch ( java.lang.String procedureName , java.util.Collection < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > mapper ) { getCallsHandler ( ) . executeStoredProcAsBatch ( procedureName , paramValues , mapper ) ; }
public void testGetByLargeIconId ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VmIconDefault > result = dao.getByLargeIconId ( FixturesTool.LARGE_ICON_ID ) ; org.junit.Assert.assertTrue ( result.contains ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsNetworkInterface ( java.lang.String name ) { return createVdsNetworkInterface ( null , name ) ; }
public org.ovirt.engine.core.bll.ValidationResult domainIsValidDestination ( ) { if ( storageDomain.getStorageDomainType ( ) . isIsoOrImportExportDomain ( ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static void updateDiskVolumeType ( org.ovirt.engine.core.common.businessentities.StorageType storageType , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.VolumeType volumeType = ( storageType.isFileDomain ( ) ) ? org.ovirt.engine.core.common.businessentities.VolumeType.Sparse : org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated ; disk.setVolumeType ( volumeType ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack getCallBack ( ) { return null ; }
public void testGetAllInterfacesWithIpAddress ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces = dao.getAllInterfacesWithIpAddress ( FixturesTool.CLUSTER , org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.IP_ADDR ) ; org.junit.Assert.assertNotNull ( interfaces ) ; org.junit.Assert.assertEquals ( 1 , interfaces.size ( ) ) ; assertGetAllForVdsCorrectResult ( interfaces ) ; }
public void DefaultHost_SelectedItemChanged ( ) { UpdateCdImage ( ) ; }
public void testGetAllForStoragePoolWithPermissionsPrivilegedUser ( ) { org.ovirt.engine.core.compat.Guid storagePoolId = new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( storagePoolId , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.ovirt.engine.core.dao.StorageDomainDaoTest.assertGetAllForStoragePoolResult ( result , storagePoolId ) ; }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( actionType , parameters , org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK ) ; }
public void setVfsChangeability ( boolean isPathEditable ) { getVfsType ( ) . setIsChangable ( isPathEditable ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > listFailedAutorecoverables ( ) { return getCallsHandler ( ) . executeReadList ( "GetFailingVdss" , org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance , null ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.StorageDomain source ) { return name.equals ( source.getStorageName ( ) ) ; }
private java.lang.Boolean isNfsStatistics ( ) { return org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.NFS_CONSTRAINT_PARAMETER , true , false ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "imageId" , imageId ) . append ( "volumeId" , volumeId ) . append ( "qcowCompat" , qcowCompat ) ; }
public boolean isEnableDeprecatedClientModeSpicePlugin ( ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.EnableDeprecatedClientModeSpicePlugin , getDefaultConfigurationVersion ( ) ) ) ) ; }
public void checkServerTrusted ( java.security.cert.X509Certificate [ ] certs , java.lang.String authType ) { }
public org.ovirt.engine.core.compat.Version getcompatibility_version ( ) { return compatVersion ; }
public void snapshotExistsByGuidReturnsInvalidResultWhenNoSnapshot ( ) throws java.lang.Exception { org.mockito.Mockito.when ( snapshotDao.exists ( vmId , snapshot.getId ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult ( validator.snapshotExists ( vmId , snapshot.getId ( ) ) , VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
private void CancelConfirm ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = model.getSanStorageModel ( ) ; sanStorageModel.setForce ( false ) ; setConfirmWindow ( null ) ; }
public void reuseCurrentSession ( ) { java.lang.String currentSessionId = getCurrentSessionId ( ) ; if ( currentSessionId != null ) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire ( eventBus , currentSessionId ) ; scheduleKeepAliveHeartbeat ( ) ; } else { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe ( "Engine REST API session ID is not available" ) ; } }
public void testSameNotIpv6Strings ( ) { org.junit.Assert.assertTrue ( new org.ovirt.engine.core.utils.network.predicate.IpAddressPredicate ( org.ovirt.engine.core.utils.network.predicate.IpAddressPredicateTest.SOME_NON_IPV6_STRING ) . test ( org.ovirt.engine.core.utils.network.predicate.IpAddressPredicateTest.SOME_NON_IPV6_STRING ) ) ; }
public void testTemplate ( ) { testValidSql ( "Template: " , "SELECT * FROM ((SELECT distinct vm_templates_view.* FROM vm_templates_view ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Template: hosts.name = fake1" , "SELECT * FROM ((SELECT distinct vm_templates_view.* FROM vm_templates_view LEFT OUTER JOIN vms_with_tags ON vm_templates_view.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN vds_with_tags ON vms_with_tags.run_on_vds=vds_with_tags.vds_id WHERE (vds_with_tags.vds_name IS NULL OR vds_with_tags.vds_name LIKE fake1) ) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Templates: storage.name = 111" , "SELECT * FROM (SELECT * FROM vm_templates_view WHERE ( vmt_guid IN (SELECT distinct vm_templates_storage_domain.vmt_guid FROM vm_templates_storage_domain LEFT OUTER JOIN vms_with_tags ON vm_templates_storage_domain.vmt_guid=vms_with_tags.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vm_templates_storage_domain.storage_id=storage_domains_with_hosts_view.id WHERE (storage_domains_with_hosts_view.storage_name IS NULL OR storage_domains_with_hosts_view.storage_name LIKE 111) )) ORDER BY name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; StopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; postOnSave ( ) ; } }
public void testBadGuid ( ) { try { new org.ovirt.engine.api.restapi.resource.BackendClusterResource ( "foo" , new org.ovirt.engine.api.restapi.resource.BackendClustersResource ( ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapSingleMappingEntry ( org.ovirt.engine.api.model.VnicProfileMapping model ) { return new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping ( model.getSourceNetworkName ( ) , model.getSourceNetworkProfileName ( ) , org.ovirt.engine.core.compat.Guid.createGuidFromString ( model.getTargetVnicProfile ( ) . getId ( ) ) ) ; }
public void makeSortable ( ) { makeSortable ( new java.util.Comparator < T > ( ) { @ java.lang.Override public int compare ( T arg0 , T arg1 ) { return getProgressValue ( arg0 ) . compareTo ( getProgressValue ( arg1 ) ) ; } } ) ; }
public void Init ( org.ovirt.engine.core.common.businessentities.VDS vds ) { mCurrentVdsId = vds.getId ( ) ; setmIrsPort ( vds.getPort ( ) ) ; privatemCurrentIrsHost = vds.getHostName ( ) ; }
private void movePoolToProblematicInDB ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { updateStoragePoolStatus ( storagePool.getId ( ) , StoragePoolStatus.NonResponsive , AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC , VdcBllErrors.ENGINE ) ; storagePool.setSpmVdsId ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( storagePool ) ; }
public void passthroughProfileContainsQos ( ) { passthroughProfileContainsSupportedPropertiesTest ( true , false , DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_PASSTHROUGH_PROFILE_CONTAINS_NOT_SUPPORTED_PROPERTIES ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getBootProtocol ( ) , getAddress ( ) , getNetmask ( ) , getGateway ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . remove ( org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.RemoveNetworkCommand.setSucceeded ( true ) ; }
private void verifyModel ( org.ovirt.engine.api.model.Watchdog model ) { org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendInstanceTypeWatchdogResourceTest.WATCHDOG_ID.toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
public void testAddGroupFailure ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": name=*" ) , SearchType.AdGroup , getAdGroup ( 0 ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( BAD_NAMES [ 0 ] ) ; try { javax.ws.rs.core.Response response = collection.add ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public java.util.Map < java.lang.String , java.lang.Object > desktopLock ( java.lang.String vmId ) ;
public int getProxyHttpPort ( ) { return getInteger ( "ENGINE_PROXY_HTTP_PORT" ) ; }
public void getAllByStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots = dao.getAllByStorageDomain ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 ) ; org.junit.Assert.assertFalse ( "Snapshots list shouldn't be empty" , snapshots.isEmpty ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDAO ( ) . save ( org.ovirt.engine.core.bll.AddTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . AddTag ( org.ovirt.engine.core.bll.AddTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.AddTagCommand.setSucceeded ( true ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( ( ( org.ovirt.engine.core.bll.PlugUnplugVmNicCommand.getParameters ( ) . getAction ( ) ) == ( org.ovirt.engine.core.common.action.PlugAction.PLUG ) ? org.ovirt.engine.core.dal.VdcBllMessages.VAR__ACTION__ACTIVATE : org.ovirt.engine.core.dal.VdcBllMessages.VAR__ACTION__DEACTIVATE ) ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__INTERFACE ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.setSucceeded ( true ) ; }
public void getVmTemplateWithId ( ) { b.setVmTemplate ( null ) ; b.setVmTemplateId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.common.businessentities.VmTemplate t = b.getVmTemplate ( ) ; org.junit.Assert.assertNotNull ( t ) ; }
private double getRequestDiskSpace ( ) { if ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getDiskInfo ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return getDiskImageInfo ( ) . getSizeInGigabytes ( ) ; } return 0 ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getReturnStatus ( ) { return result.getStatus ( ) ; }
public void lowerVersionHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addHostsToCluster ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public void Search ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( ( getEntity ( ) ) != null ) { preSearchCalled ( vm ) ; super . Search ( ) ; } }
private org.ovirt.engine.core.compat.Guid getClusterIdByName ( java.lang.String name ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , VdcQueryType.GetClusterByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , ( "Cluster: name=" + name ) ) . getId ( ) ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( domain.getStorageType ( ) ) . storageDomainRemoved ( domain.getStorageStaticData ( ) ) ; getStorageDomainDAO ( ) . remove ( domain.getId ( ) ) ; return null ; }
public void typeMatchesProfileTypePassthroughProfileIsNull ( ) { typeMatchesProfileCommon ( true , null ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void doPolling ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { return ; }
public java.lang.String getappList ( ) { return this . appList ; }
protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel model ) { org.ovirt.engine.ui.common.widget.uicommon.vm.VmGeneralModelForm.Driver.driver.edit ( model ) ; monitorCount.setText ( java.lang.Integer.toString ( getModel ( ) . getMonitorCount ( ) ) ) ; }
public final void disconnect ( ) { postDisconnect ( ) ; closeChannel ( ) ; }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { warningLabel.setText ( constants.removeBricksWarning ( ) ) ; migrateEditor.setLabel ( constants.removeBricksMigrateData ( ) ) ; }
public void testRemoveAllOfTypeForVds ( ) throws java.lang.Exception { dao.removeAllOfTypeForVds ( org.ovirt.engine.core.dao.AuditLogDAOTest.VDS_ID , AuditLogType.IRS_DISK_SPACE_LOW_ERROR.getValue ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > result = dao.getAll ( ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( actionType , correlationId , endTime , id , isVisible , jobSubjectEntities , lastUpdateTime , ownerId , startTime , status , steps , external , autoCleared ) ; }
public javax.ws.rs.core.Response remove ( org.ovirt.engine.api.v3.types.V3Action action ) { try { return adaptResponse ( delegate.remove ( org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( action ) ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.HostDeviceView > hostDevice ) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join ( hostDevice.getEntity ( ) . getAttachedVmNames ( ) , ", " ) ; }
protected int compareCpuLevels ( org.ovirt.engine.core.common.businessentities.VDSGroup otherGroup ) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.compareCpuLevels ( org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup ( ) . getcpu_name ( ) , otherGroup.getcpu_name ( ) , otherGroup.getcompatibility_version ( ) ) ; }
protected long GigabyteToBytes ( long gb ) { return gb * ( org.ovirt.engine.core.utils.ovf.OvfReader.BYTES_IN_GB ) ; }
public void nullVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NULL_NETWORK_IS_NOT_SUPPORTED ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.junit.matchers.JUnitMatchers.hasItem ( org.ovirt.engine.core.bll.validator.VmNicValidatorTest.CLUSTER_VERSION_REPLACEMENT ) ) ) , false , null ) ; }
protected void fetchDocumentationFile ( ) { fetchFile ( ( ( getDocumentationBaseURL ( ) ) + "DocumentationPath.csv" ) , documentationFileFetchedEvent ) ; }
protected boolean hasParentCommand ( ) { return ( getParentCommandType ( ) ) != ( org.ovirt.engine.core.common.action.VdcActionType.Unknown ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > getAllByVMTemplateName ( java.lang.String vmTemplateName ) { return null ; }
org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) ; }
private void setUpGetEntityExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; }
public void setClusterPolicyModel ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterPolicyModel clusterPolicyModel ) { this . clusterPolicyModel = clusterPolicyModel ; }
public void setcompatibility_version ( org.ovirt.engine.core.compat.Version value ) { compatibilityVersion = value.toString ( ) ; version = null ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( java.lang.String networkName ) { return new org.ovirt.engine.core.common.businessentities.network.Network ( "" , "" , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , networkName , "" , "" , 0 , null , false , 0 , true ) ; }
public void setHighlyAvailableIsConfigured ( boolean value ) { this . mVdsStatistics.setHighlyAvailableIsConfigured ( value ) ; }
public void setGuestRequestedMemory ( java.lang.Integer value ) { this . vmDynamic.setguest_requested_memory ( value ) ; }
public java.lang.String getBondOptions ( ) { return getEntity ( ) . getBondOptions ( ) ; }
public void setCertificateSubject ( java.lang.String certificateSubject ) { vdsStatic.setCertificateSubject ( certificateSubject ) ; }
public void setactive ( java.lang.Boolean value ) { getImage ( ) . setActive ( java.lang.Boolean.TRUE.equals ( value ) ) ; }
protected void executeCommand ( ) { getOldVnicProfile ( ) ; org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getVnicProfileDao ( ) . update ( org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getVnicProfile ( ) ) ; org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.setSucceeded ( true ) ; }
java.lang.String getCdInterface ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public void testEvalPositive ( ) { org.mockito.Mockito.when ( mockExternalNetworkPredicate.eval ( mockNetwork ) ) . thenReturn ( false ) ; org.junit.Assert.assertTrue ( underTest.eval ( mockNetwork ) ) ; }
public void afterCompletion ( int status ) { if ( ! ( org.ovirt.engine.core.utils.transaction.TransactionSupport.needToRollback ( status ) ) ) return ; rollbackHandler.Rollback ( ) ; }
public void setIsVolumeFormatChangable ( boolean isVolumeFormatChangable ) { if ( ( this . isVolumeFormatChangable ) != isVolumeFormatChangable ) { this . isVolumeFormatChangable = isVolumeFormatChangable ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "VolumeFormat" ) ) ; } }
public void testMemoryDisks ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( getXmlOvfData ( ) ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > memoryDisks = ovfUtils.fetchMemoryDisks ( xmlDocument ) ; org.junit.Assert.assertFalse ( "The list of memory disks for snapshot should not be empty" , memoryDisks.isEmpty ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateVmStatusUsingMatrix ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ! ( org.ovirt.engine.core.common.VdcActionUtils.CanExecute ( java.util.Arrays.asList ( vm ) , org.ovirt.engine.core.common.businessentities.VM.class , VdcActionType.RunVm ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage getNewDiskImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return diskImage ; }
public java.lang.Integer getpending_vcpus_count ( ) { return mVdsDynamic.getpending_vcpus_count ( ) ; }
public void networkPrefixInnocent ( ) throws java.lang.Exception { networkPrefixValidTest ( ValidationResult.VALID , DEFAULT_NETWORK_NAME ) ; }
protected boolean doesStorageDomainhaveSpaceForRequest ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , long totalImagesSize ) { return validate ( new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( storageDomain ) . isDomainHasSpaceForRequest ( totalImagesSize ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > sendHcCmdToDesktop ( java.lang.String vmId , java.lang.String hcCommand ) ;
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAuditLogDao ( ) . displayAllEvents ( ) ; org.ovirt.engine.core.bll.DisplayAllAuditLogEventsCommand.setSucceeded ( true ) ; }
private java.lang.String resolveSystemHostName ( ) { try { return java.net.InetAddress.getLocalHost ( ) . getHostName ( ) ; } catch ( java.net.UnknownHostException e ) { org.ovirt.engine.core.bll.host.provider.foreman.SystemProviderFinder.log.error ( "Failed to resolve hostname for the ovir-engine server" , e ) ; return null ; } }
public void testGetSystemStatisticsValueWithSpecifiedStatus ( ) { int numOfVmWithStatusMigratingFrom = dbFacade.GetSystemStatisticsValue ( "VM" , java.lang.Integer.toString ( VMStatus.MigratingFrom.getValue ( ) ) ) ; org.junit.Assert.assertTrue ( ( numOfVmWithStatusMigratingFrom == ( org.ovirt.engine.core.dao.DbFacadeDAOTest.NUM_OF_VM_IN_FIXTURES_WITH_STATUS_MIGRATING_FROM ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.Cluster createNewCluster ( ) { org.ovirt.engine.core.common.businessentities.Cluster group = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_1 ) ; group.setName ( "Default" ) ; return group ; }
public void testInvalidStatusForEnrollCertificate ( ) { validator = mockHostForActivation ( VDSStatus.Up ) ; org.junit.Assert.assertThat ( validator.validateStatusForEnrollCertificate ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.CANNOT_ENROLL_CERTIFICATE_HOST_STATUS_ILLEGAL ) ) ; }
protected void LogEndTaskSuccess ( ) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.infoFormat ( "BaseAsyncTask::OnTaskEndSuccess: Task '{0}' (Parent Command {1}, Parameters Type {2}) ended successfully." , getVdsmTaskId ( ) , getParameters ( ) . getDbAsyncTask ( ) . getaction_type ( ) , getParameters ( ) . getClass ( ) . getName ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > fenceSpmStorage ( java.lang.String spUUID , int prevID , java.lang.String prevLVER ) ;
public void saveGlusterServerHook ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid hostId , java.lang.String checksum , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) ;
private void debugAction ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Action type '{}', Parameters '{}'" , actionType , params ) ; }
public int getTasksCountCurrentActionType ( ) { int returnValue = 0 ; synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.EntityAsyncTask > CurrentActionTypeTasks = getCurrentTasks ( ) ; returnValue = CurrentActionTypeTasks.size ( ) ; } return returnValue ; }
protected void removeVmSnapshots ( ) { new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; }
protected void removeNodeSpi ( ) { throw new java.lang.UnsupportedOperationException ( "Not supported for sake of simplicity, non blocking API" ) ; }
protected void executeVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.RegisterLibvirtSecretsVDSCommand.getBroker ( ) . registerSecrets ( buildStructFromLibvirtSecretsList ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.RegisterLibvirtSecretsVDSCommand.proceedProxyReturnValue ( ) ; }
public java.util.HashSet < org.ovirt.engine.core.compat.Version > getSupportedClusterVersionsSet ( ) { return supportedClusterVersionsSet ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade ( ) . getNetworkProviderDao ( ) . remove ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand.setSucceeded ( true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { disk.getIsInternal ( ) . setEntity ( true ) ; revealDiskPanel ( disk ) ; }
public void testCanDoFailReadOnlyOnInterface ( ) { org.mockito.Mockito.when ( diskValidator.isReadOnlyPropertyCompatibleWithInterface ( ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ; org.mockito.Mockito.verify ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface ( ) ; }
public java.util.Map < java.lang.String , java.lang.Object > setVmTicket ( java.lang.String vmId , java.lang.String otp64 , java.lang.String sec ) ;
public void passthroughNotChangedNotUsedByVms ( ) { passthroughNotChangedIfUsedByVmsTest ( false , false , true ) ; org.junit.Assert.assertThat ( validator.passthroughNotChangedIfUsedByVms ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private boolean isTypeTenantAware ( ) { org.ovirt.engine.core.common.businessentities.ProviderType type = getType ( ) . getSelectedItem ( ) ; return ( ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK ) ) || ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_IMAGE ) ) ) || ( type == ( org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_VOLUME ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn createVolumeContainer ( java.lang.String jobId , java.util.Map < java.lang.String , java.lang.Object > createVolumeInfo ) ;
public org.ovirt.engine.core.common.errors.VdcFault getFault ( ) { if ( ( fault ) == null ) { fault = new org.ovirt.engine.core.common.errors.VdcFault ( ) ; fault.setError ( EngineError.ENGINE ) ; fault.setMessage ( EngineError.ENGINE.name ( ) ) ; } return fault ; }
public void stopProgress ( ) { org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . setContent ( popupContent ) ; org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . setFooterPanelVisible ( true ) ; focusInput ( ) ; }
public void getPlaceHolderListTestNoPlaceHolder ( ) { java.lang.String testMessage = "This is a test without place holders" ; java.util.List < java.lang.Integer > result = testMessages.getPlaceHolderList ( testMessage ) ; org.junit.Assert.assertTrue ( "Result should be empty" , result.isEmpty ( ) ) ; }
public java.lang.String getValue ( java.util.Map < java.lang.String , java.lang.String > object ) { return object.get ( "PropertyValue" ) ; }
public void testMacIsNotContainedInRange ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( rangeOf10Macs.contains ( org.ovirt.engine.core.bll.network.macpoolmanager.RangeTest.MAC_OUTSIDE_OF_RANGE ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public void testIsNetworkInSyncWhenBootProtocolEqual ( ) throws java.lang.Exception { initIpConfigurationBootProtocol ( true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void testAddUser_4 ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDomainList , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpDomains ( ) ) ; setUpAddUserExpectations ( ( ( ( "ADUSER@" + ( DOMAIN ) ) + ":: username=" ) + ( NAMES [ 0 ] ) ) ) ; org.ovirt.engine.api.model.User model = new org.ovirt.engine.api.model.User ( ) ; model.setUserName ( NAMES [ 0 ] ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setId ( new org.ovirt.engine.core.compat.Guid ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN.getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) , true ) . toString ( ) ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; verifyAddUser ( response ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.FenceVdsBaseCommand.createFenceExclusiveLocksMap ( getProblematicVdsId ( ) ) ; }
public void passwordIsEmpty ( ) { org.junit.Assert.assertThat ( validator.passwordNotEmpty ( false , AuthenticationMethod.Password , null ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD ) ) ; }
public org.ovirt.engine.api.resource.openstack.OpenStackVolumeTypesResource getOpenStackVolumeTypes ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeTypesResource ( id ) ) ; }
public void testGetAllVfsConfigByHostIdWithNoVfsConfigs ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > vfsConfigs = dao.getAllVfsConfigByHostId ( org.ovirt.engine.core.dao.network.HostNicVfsConfigDaoTest.HOST_WITH_NO_VFS_CONFIGS_ID ) ; org.junit.Assert.assertEquals ( vfsConfigs.size ( ) , 0 ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } return source ; }
public static boolean isVmTemlateWithSameNameExist ( java.lang.String name ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . getByName ( name , null , false ) ) != null ; }
public final boolean ConnectToServer ( java.lang.String server ) { return ConnectToServer ( server , org.ovirt.engine.core.common.config.Config.resolveKeyStorePath ( ) , org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.keystorePass ) ) ; }
public java.lang.Integer getdisplay ( ) { return this . mVmDynamic.getdisplay ( ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return new org.ovirt.engine.core.bll.RemoveAllCinderDisksCommandCallBack ( ) ; }
public static void persistCommand ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid rootCommandId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.core.compat.CommandStatus status , boolean enableCallBack ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.persistCommand ( commandId , rootCommandId , actionType , params , status , enableCallBack ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { logSsoOnDesktopFailedAgentNonResp ( spiceConsoleModel.getLogger ( ) , ( logonCommandReturnValue != null ? logonCommandReturnValue.getDescription ( ) : "" ) ) ; spiceConsoleModel.ExecuteQuery ( getEntity ( ) ) ; parentModel.setWindow ( null ) ; }
protected void EntityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . EntityPropertyChanged ( sender , e ) ; UpdateProperties ( ) ; }
protected void doNetworkOperation ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue , java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.NicWithLogicalNetworks > nicWithLogicalNetworks ) { networkCreatingManager.updateNetworks ( idToUpdate , nicWithLogicalNetworks ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain mockSecondStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setStatus ( StorageDomainStatus.Active ) ; storageDomain.setId ( secondStorageDomainId ) ; storageDomain.setStorageDomainType ( StorageDomainType.Data ) ; return storageDomain ; }
public boolean getIsStaticAddress ( ) { return ( getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.StaticIp ) ; }
public void validateChangeNamePoolNotUp ( ) { sd.setStorageName ( org.apache.commons.lang.StringUtils.reverse ( sd.getStorageName ( ) ) ) ; sp.setStatus ( StoragePoolStatus.Maintenance ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ; }
public void onPowerringUp ( ) { decreasePendingVm ( org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDAO ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
public void testRemove ( ) { dao.remove ( existingAuditLog.getaudit_log_id ( ) ) ; org.ovirt.engine.core.common.businessentities.AuditLog result = dao.get ( existingAuditLog.getaudit_log_id ( ) ) ; org.junit.Assert.assertTrue ( result.isDeleted ( ) ) ; }
public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { return org.ovirt.engine.core.bll.job.ExecutionHandler.modifyContextForIntenralJob ( new org.ovirt.engine.core.bll.context.CommandContext ( new org.ovirt.engine.core.bll.context.EngineContext ( ) ) , lock ) ; }
public java.lang.String getstorage_pool_name ( ) { return this . storage_pool_nameField ; }
public void bondWithNoSlaves ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; mockExistingIfaces ( bond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( bond ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ; }
public void setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport ) { this . migrationSupport = migrationSupport ; }
public void testMacToLong ( ) { org.junit.Assert.assertThat ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( "00:1a:4a:01:00:00" ) , org.hamcrest.CoreMatchers.is ( 112910729216L ) ) ; }
protected org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector getAuditLogDirector ( ) { return new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) ; }
protected void ExecuteVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksStatusesVDSCommand.getBroker ( ) . getAllTasksStatuses ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetAllTasksStatusesVDSCommand.ProceedProxyReturnValue ( ) ; setReturnValue ( ParseTaskStatusList ( _result.TaskStatusList ) ) ; }
public void testEvalNegative ( ) { org.mockito.Mockito.doReturn ( true ) . when ( mockExternalNetworkPredicate ) . test ( mockNetwork ) ; org.junit.Assert.assertFalse ( underTest.test ( mockNetwork ) ) ; }
public void stringToVCpupinIntervalsList ( ) { org.ovirt.engine.api.model.VCpuPin pin = org.ovirt.engine.api.restapi.types.VmMapper.stringToVCpupin ( "1#1-4,6" ) ; assertEquals ( 1 , ( ( int ) ( pin.getVcpu ( ) ) ) ) ; assertEquals ( "1-4,6" , pin.getCpuSet ( ) ) ; }
org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType determineNetworkType ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return org.ovirt.engine.core.utils.NetworkUtils.isVlan ( network ) ? org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.VLAN : network.isVmNetwork ( ) ? org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.VM : org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.NON_VM ; }
public void setAllowConsoleReconnect ( boolean value ) { this . mVmStatic.setAllowConsoleReconnect ( value ) ; }
public void search ( ) { if ( ( getEntityStronglyTyped ( ) ) != null ) { super . search ( ) ; } }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm , vm.getstatus ( ) ) ; org.ovirt.engine.core.bll.VmHandler.UnLockVm ( vm ) ; compensationContext.stateChanged ( ) ; return null ; }
public static org.ovirt.engine.core.common.businessentities.StorageDomain setUpStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainType domainType ) { org.ovirt.engine.api.restapi.resource.StorageDomain entity = new org.ovirt.engine.api.restapi.resource.StorageDomain ( ) ; entity.setId ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmsResourceTest.STORAGE_DOMAIN_ID ) ; entity.setstorage_domain_type ( domainType ) ; return entity ; }
public void testBeanValidations ( ) { initializeMock ( 1 ) ; org.junit.Assert.assertTrue ( cmd.validateInputs ( ) ) ; }
public void testGetAllVdsNumaNodeByVdsId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > result = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId ( org.ovirt.engine.core.dao.VdsNumaNodeDaoTest.EXISTING_VDS_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public static void deserialize ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader , org.ovirt.engine.core.common.action.VdcReturnValueBase instance ) throws com.google.gwt.user.client.rpc.SerializationException { }
public void testDisksUsages ( ) { java.lang.Object [ ] disksUsages = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.initDisksUsageData ( ) ; java.util.Map < java.lang.String , java.lang.Object > map = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( disksUsages ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.validateDisksUsagesList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) , disksUsages , map ) ; }
public void setUsePatternFly ( boolean use ) { super . setUsePatternFly ( use ) ; if ( use ) { contentWidget.addStyleName ( ColumnSize.LG_1.getCssName ( ) ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllRunningVdssInPool ( ) { return org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getVdsDAO ( ) . getAllForStoragePoolAndStatus ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) . getId ( ) , VDSStatus.Up ) ; }
public void testGetAllForDiskProfile ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForDiskProfile ( FixturesTool.DISK_PROFILE_1 ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public void vnicProfileNull ( ) throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator ( vmDao , null ) ; org.junit.Assert.assertThat ( validator.vnicProfileIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) ) ; }
private void setStorageDomainStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setstatus ( status ) ; org.mockito.Mockito.when ( cmd.getStorageDomain ( ) ) . thenReturn ( domain ) ; }
public abstract void Execute ( int iterationId ) ;
public void testChangeClusterForbidden ( ) { prepareVmToPassCanDoAction ( ) ; vmStatic.setvds_group_id ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; junit.framework.Assert.assertFalse ( "canDoAction should have failed with cant change cluster." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return diskImage.getImageId ( ) . equals ( guid ) ; }
public void testNotDescetor ( ) { org.ovirt.engine.core.common.businessentities.Tags tag1 = createTag ( "tag1" , "desc1" ) ; org.ovirt.engine.core.common.businessentities.Tags tag2 = createTag ( "tag2" , "desc2" ) ; org.junit.Assert.assertFalse ( tagsDirector.isTagDescestorOfTag ( tag1.gettag_id ( ) , tag2.gettag_id ( ) ) ) ; }
public void invalidVdsGroup ( ) { createSimpleCommand ( ) ; org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; validateFailedWithReason ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID ) ; }
protected void syncSearch ( ) { super . syncSearch ( ) ; asyncSearch ( ) ; }
public static int getOptimizeSchedulerForSpeedPendingRequests ( ) { return ( ( java.lang.Integer ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.OptimizeSchedulerForSpeedPendingRequests , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) ) ) ; }
public void setUsbPolicy ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( usbPolicy , value ) ) ) { usbPolicy = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "UsbPolicy" ) ) ; } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setVmTicket ( java.lang.String vmId , java.lang.String otp64 , java.lang.String sec , java.lang.String connectionAction , java.util.Map < java.lang.String , java.lang.String > params ) ;
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . Execute ( ) ; UpdateIsDiskHotPlugAvailable ( ) ; UpdateLiveStorageMigrationEnabled ( ) ; } UpdateActionAvailability ( ) ; }
public org.ovirt.engine.api.model.Labels list ( ) { return mapCollection ( getHostNicLabels ( nicId ) ) ; }
public org.ovirt.engine.api.resource.DataCenterNetworksResource getNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource ( guid ) ) ; }
public static java.lang.Boolean isMigrationSupported ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.migrationSupport.get ( architecture ) . get ( version ) ; }
public static java.lang.Object GetConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , version ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get ( key ) ; }
public org.ovirt.engine.core.bll.ValidationResult parentEntityNotChanged ( ) { if ( org.apache.commons.lang.ObjectUtils.equals ( getProfile ( ) . getClusterId ( ) , getProfileFromDb ( ) . getClusterId ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_PROFILE ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( EngineMessage.VAR__ACTION__REMOVE ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__GLUSTER_GEOREP_SESSION ) ; addCanDoActionMessageVariable ( "volumeName" , getGlusterVolumeName ( ) ) ; addCanDoActionMessageVariable ( "vdsGroup" , getVdsGroupName ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingDefaultPool ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_DEFAULT_MAC_POOL ) . when ( macPool.isDefaultPool ( ) ) ; }
public void managementNetworkUnsetInvalid ( ) { testManagementNetworkUnset ( true , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_UNSET ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getAllWithQuery ( java.lang.String query ) { return jdbcTemplate.query ( query , org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance ) ; }
public void saveAsyncTaskToDb ( final org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAsyncTaskDao ( ) . save ( asyncTask ) ; persistCommand ( copyToCommandEntity ( asyncTask , commandsCache.get ( asyncTask.getCommandId ( ) ) ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; }
public void canDoActionBlankDescriptionFails ( ) throws java.lang.Exception { setupMock ( ) ; parameters.setDescription ( " " ) ; org.junit.Assert.assertTrue ( ( ! ( commandMock.canDoAction ( ) ) ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.provider.ProviderValidator validator = new org.ovirt.engine.core.bll.provider.ProviderValidator ( getProvider ( ) ) ; return validate ( validator.providerIsSet ( ) ) ; }
public void setItems ( java.lang.Iterable value ) { if ( ( items ) != value ) { itemsChanging ( value , items ) ; items = value ; getItemsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Items" ) ) ; } }
public void setDeletesPending ( java.lang.Long deletesPending ) { this . deletesPending = deletesPending ; }
protected void verifyBuiltTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { super . verifyBuiltCommonVm ( template ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModelTest.VERSION_NAME , template.getTemplateVersionName ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index ) { return setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index ) ; }
public void testCanDoActionVmMigrating ( ) { prepareForVmValidatorTests ( ) ; cmd.getVm ( ) . setStatus ( VMStatus.MigratingTo ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP ) ; }
protected void updateVmGuestAgentVersion ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion ( vm ) ; }
public java.util.Set < org.ovirt.engine.core.compat.Version > getSupportedClusterLevels ( ) { java.util.Set < org.ovirt.engine.core.compat.Version > versions = org.ovirt.engine.core.common.config.Config.< java.util.HashSet < org.ovirt.engine.core.compat.Version > > GetValue ( ConfigValues.SupportedClusterLevels ) ; return versions ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getSoundDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.SOUND ) ; }
boolean DisconnectStorageFromDomainByStoragePoolId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid storagePoolId ) ;
com.google.gwt.safehtml.shared.SafeHtml image ( java.lang.String url , int height , int width ) ;
private void setEnforcing ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > enforcing ) { this . enforcing = enforcing ; }
private java.util.List < org.ovirt.engine.core.compat.Guid > getRunVdssList ( ) { return getVdsSelector ( ) . getRunVdssList ( ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior createBehavior ( org.ovirt.engine.core.common.businessentities.VmTemplate template ) { return new org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior ( template ) ; }
public void setOS ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( os , value ) ) ) { os = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "OS" ) ) ; } }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; getSearchCommand ( ) . execute ( ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getMultiBrickVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume ( volumeId ) ; volume.setStatus ( GlusterStatus.UP ) ; volume.setBricks ( getBricks ( volumeId , 2 ) ) ; volume.setClusterId ( clusterId ) ; return volume ; }
protected void setUpMockQueryParameters ( ) { super . setUpMockQueryParameters ( ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getStoragePoolId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getImageType ( ) ) . thenReturn ( expectedType ) ; }
protected void EndSuccessfully ( ) { org.ovirt.engine.core.bll.AddVmToPoolCommand.setSucceeded ( true ) ; }
public void testNetworkAttachmentIsSetWhenAttachmentIsNull ( ) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( null ) . networkAttachmentIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , null ) ) ) ; }
public void setErrorToFetchData ( java.lang.String msg ) { getImportSourceValid ( ) . setMessage ( msg ) ; getImportSourceValid ( ) . setEntity ( false ) ; }
protected org.ovirt.engine.core.compat.Guid getPredefinedDestinationVdsId ( ) { return org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage mockDiskImage ( org.ovirt.engine.core.compat.Guid diskImageId ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( diskImageId ) ; diskImage.setImageId ( diskImageId ) ; return diskImage ; }
protected boolean isImageExclusiveLockNeeded ( ) { return ( ( getDiskType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) && ( ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getDisk ( ) ) ) . getVolumeFormat ( ) ) != ( org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW ) ) ; }
public void testQuery ( ) throws java.lang.Exception { collection.setUriInfo ( setUpUriExpectations ( org.ovirt.engine.api.restapi.resource.gluster.QUERY ) ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.gluster.QUERY ) ; collection.setParent ( parentMock ) ; verifyCollection ( getCollection ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase Logoff ( org.ovirt.engine.core.common.action.LogoutUserParameters parameters ) { return RunAction ( VdcActionType.LogoutUser , parameters ) ; }
public void onDrop ( com.google.gwt.event.dom.client.DropEvent event ) { event.preventDefault ( ) ; doDrag ( event , true ) ; table.getElement ( ) . removeClassName ( style.networkGroupDragOver ( ) ) ; }
public java.lang.String getFileStyleName ( org.ovirt.api.metamodel.concepts.Name name ) { return name.words ( ) . map ( java.lang.String :: toLowerCase ) . collect ( java.util.stream.Collectors.joining ( "_" ) ) ; }
private void initAgents ( ) { agent1 = new org.ovirt.engine.core.common.businessentities.FenceAgent ( ) ; agent1.setOrder ( 1 ) ; agent2 = new org.ovirt.engine.core.common.businessentities.FenceAgent ( ) ; agent2.setOrder ( 2 ) ; }
public void activated ( ) { if ( ( getBehavior ( ) . getInstanceTypeManager ( ) ) != null ) { getBehavior ( ) . getInstanceTypeManager ( ) . updateFields ( ) ; } }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . clusterNetworkSubTabLabel ( ) , 2 , ginjector.getSubTabClusterNetworkModelProvider ( ) ) ; }
private boolean hasVms ( java.lang.Object selectedItem ) { if ( selectedItem instanceof org.ovirt.engine.core.common.businessentities.vm_pools ) { return ( ( ( org.ovirt.engine.core.common.businessentities.vm_pools ) ( selectedItem ) ) . getvm_assigned_count ( ) ) != 0 ; } return false ; }
public void forceRefresh ( ) { getTimer ( ) . stop ( ) ; setIsQueryFirstTime ( true ) ; syncSearch ( ) ; if ( ! ( getIsTimerDisabled ( ) ) ) { getTimer ( ) . start ( ) ; } }
private void cpuFlagsMissing ( ) { java.util.List < java.lang.String > strings = new java.util.ArrayList < > ( ) ; strings.add ( "foo" ) ; org.mockito.Mockito.doReturn ( strings ) . when ( cmd ) . missingServerCpuFlags ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; }
public static org.ovirt.engine.core.utils.log.Log getLog ( java.lang.Class < ? > loggedClass ) { return new org.ovirt.engine.core.utils.log.Log ( org.apache.commons.logging.LogFactory.getLog ( loggedClass ) ) ; }
public void testOnlyLoginNameWhenNoDirectorySet ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; user.setLoginName ( "Legolas" ) ; user.setDomain ( "" ) ; command.setCurrentUser ( user ) ; org.junit.Assert.assertEquals ( "Legolas" , command.getConsoleUserName ( ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.getBroker ( ) . migrate ( migrationInfo ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateBrokerVDSCommand.ProceedProxyReturnValue ( ) ; }
public void testGetAllWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAll ( org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public void writeElement ( java.lang.String name , java.lang.String content ) { WriteStartElement ( name ) ; WriteRaw ( content ) ; WriteEndElement ( ) ; }
private boolean isCopyCollapseOrNoSnapshots ( ) { return ! ( isCopyCollapseDisabledWithSnapshots ( ) ) ; }
private void verifyCPU ( org.ovirt.engine.api.model.CPU cpu , java.lang.String name , java.lang.Integer level ) { assertNotNull ( cpu ) ; assertEquals ( name , cpu.getId ( ) ) ; assertEquals ( level , cpu.getLevel ( ) ) ; }
protected boolean isNicSupportedForPlugUnPlug ( ) { if ( osRepository.hasNicHotplugSupport ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ) { return true ; } return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; }
public java.lang.Object getEntityId ( ) { return ( _entityId ) == null ? getDbAsyncTask ( ) . getaction_parameters ( ) . getEntityId ( ) : _entityId ; }
public java.lang.String getVdcUserPassword ( ) { return org.ovirt.engine.ui.frontend.Frontend.getLoginPassword ( ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , null , org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY ) ; }
private org.ovirt.engine.core.bll.tasks.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.tasks.AsyncTaskManager.getInstance ( this ) ; }
protected boolean isHotPlugSupported ( ) { if ( org.ovirt.engine.core.common.FeatureSupported.hotPlug ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ) { return true ; } return failValidation ( EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED ) ; }
public boolean isRunningOrPaused ( ) { return ( ( ( this . isRunning ( ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.SavingState ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState ) ) ; }
protected void persistCollectedData ( ) { updateNetConfigDirtyFlag ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CollectVdsNetworkDataVDSCommand.persistAndEnforceNetworkCompliance ( getVds ( ) , skipManagementNetwork ( ) , org.ovirt.engine.core.common.businessentities.Entities.entitiesByName ( getParameters ( ) . getInterfaces ( ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.VmImportGeneralModel getModel ( ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmImportGeneralModel ) ( importModel.getDetailModels ( ) . get ( 0 ) ) ) ; }
public void setlast_modified_date ( java.util.Date value ) { this . last_modified_dateField = value ; }
public void addPermissionsOnNetwork ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.compat.Guid networkId ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission ( userId , networkId , PredefinedRoles.NETWORK_ADMIN , VdcObjectType.Network ) ; }
public void testExecuteQueryGetAllEntitiesCommand ( ) { getQuery ( ) . executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > result = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.Assert.assertEquals ( "Wrong number of Templates in result" , 2 , result.size ( ) ) ; }
public void setvm_pool_id ( org.ovirt.engine.core.compat.Guid value ) { this . id = value ; }
public void setName ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > value ) { this . name = value ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageTransfer > searchImageTransfer ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getImageTransferDao ( ) , false ) ; }
public void executeCommand ( ) { setupMocks ( ) ; mockBackendStatusChange ( true ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_HOOK_ENABLE , cmd.getAuditLogTypeValue ( ) ) ; }
protected org.ovirt.engine.core.dao.gluster.GlusterVolumeDao getGlusterVolumeDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getGlusterVolumeDao ( ) ; }
public void validVnicProfileWhenUnlinkingSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
public void qosBondAndSlaveSpeedsZero ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosBondSpeedSetup ( 0 , 0 ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INVALID_INTERFACE_SPEED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) ; }
public void testFirstParameterIsNotNull ( ) { org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged ( null , new org.ovirt.engine.core.common.businessentities.MacPool ( ) ) ; }
public void testConnection ( ) { getAll ( ) ; }
public void testHasPeersFalse ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.utils.gluster.GlusterUtilTest.OUTPUT_XML_NO_PEERS ) . when ( glusterUtil ) . executePeerStatusCommand ( client ) ; org.junit.Assert.assertFalse ( glusterUtil.hasPeers ( client ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingManagementNetwork ( ) { return createNetworkValidator ( ) . notRemovingManagementNetwork ( ) ; }
public void Search ( ) { if ( ( getEntity ( ) ) != null ) { setSearchString ( org.ovirt.engine.core.compat.StringFormat.format ( "events: event_storage=%1$s" , getEntity ( ) . getstorage_name ( ) ) ) ; super . Search ( ) ; } }
public void validateVmMemoryCanRunOnVdsHighMem ( ) { vm.setMinAllocatedMem ( 10000 ) ; vm.setVmMemSizeMb ( 10000 ) ; vds.setPhysicalMemMb ( 15000 ) ; boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM ( vds , vm ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
protected void setDestinationVdsId ( org.ovirt.engine.core.compat.Guid vdsId ) { destinationVds = ( vdsId != null ) ? org.ovirt.engine.core.bll.MigrateVmCommand.getVdsDAO ( ) . get ( vdsId ) : null ; }
private void initSearchDependencies ( ) { org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . getUniqueOsNames ( ) ) ) ; }
public void typeMatchesProfileOnlyProfilePassthrough ( ) { typeMatchesProfileCommon ( false , true ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
protected org.ovirt.engine.core.bll.network.macpool.MacPool getMacPool ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.class ) . poolForDataCenter ( params.getStoragePoolId ( ) ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.AddTag ( tag ) ; org.ovirt.engine.core.common.businessentities.tags fromTagsDirector = tagsDirector.GetTagByName ( "tag1" ) ; org.junit.Assert.assertNotNull ( fromTagsDirector ) ; org.junit.Assert.assertEquals ( tag , fromTagsDirector ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.VDS o1 , org.ovirt.engine.core.common.businessentities.VDS o2 ) { return ( o1.getvm_count ( ) ) - ( o2.getvm_count ( ) ) ; }
private java.lang.String showVncConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model ) { model.getDefaultConsoleModel ( ) . getConnectCommand ( ) . Execute ( ) ; return null ; }
private int calculateJsonFieldPotentialOverhead ( java.lang.String fieldName , java.util.Map < java.lang.String , java.lang.Object > descriptionMap ) { return ( java.lang.String.format ( "\"%s\":\"\"" , fieldName ) . length ( ) ) + ( descriptionMap.isEmpty ( ) ? 0 : 1 ) ; }
public boolean render ( org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel value ) { if ( value instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) { return extractBoolean ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) ( value ) ) . getspice ( ) ) ; } return false ; }
public java.lang.String render ( org.ovirt.engine.core.compat.RpmVersion version ) { java.lang.String formattedVersion ; formattedVersion = version.getRpmName ( ) ; return new org.ovirt.engine.ui.common.widget.renderer.EmptyValueRenderer < java.lang.String > ( org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.getApplicationConstants ( ) . unAvailablePropertyLabel ( ) ) . render ( formattedVersion ) ; }
public void cutFromTree ( ) { if ( hasParent ( ) ) { parent.getNodes ( ) . remove ( this ) ; if ( parent.getNodes ( ) . isEmpty ( ) ) { parent.cutFromTree ( ) ; } } }
private void initProcessedInfoLists ( ) { proccessedIdsInfo = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ; proccessedOvfGenerationsInfo = new java.util.LinkedList < java.lang.Long > ( ) ; }
protected org.ovirt.engine.api.model.StorageDomain addParents ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { storageDomain.setDataCenter ( new org.ovirt.engine.api.model.DataCenter ( ) ) ; storageDomain.getDataCenter ( ) . setId ( dataCenterId.toString ( ) ) ; return storageDomain ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { loginModel.getLoginCommand ( ) . Execute ( ) ; }
public void setUp ( ) throws java.lang.Exception { java.io.File etcDir = new java.io.File ( this . getClass ( ) . getClassLoader ( ) . getResource ( "./org/ovirt/engine/core/utils" ) . getFile ( ) ) ; testManager = new org.ovirt.engine.core.utils.branding.BrandingManager ( etcDir ) ; }
private boolean isHostedEngineOnVds ( ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { if ( vm.isHostedEngine ( ) ) { return true ; } } return false ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { getCommand ( cmdId ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
public void testGetByNameWithInvalidName ( ) { org.ovirt.engine.core.common.businessentities.VdsStatic result = dao.get ( "farkle" ) ; org.junit.Assert.assertNull ( result ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getGlusterHookDao ( ) . getByClusterId ( org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getParameters ( ) . getClusterId ( ) ) ) ; org.ovirt.engine.core.bll.gluster.GetGlusterHooksQuery.getQueryReturnValue ( ) . setSucceeded ( true ) ; }
public void tearDown ( ) { org.ovirt.engine.core.aaa.AuthenticatorManager.getInstance ( ) . clear ( ) ; org.ovirt.engine.core.aaa.DirectoryManager.getInstance ( ) . clear ( ) ; org.ovirt.engine.core.aaa.AuthenticationProfileManager.getInstance ( ) . clear ( ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getIPv4Addresses ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc copyData ( java.util.Map src , java.util.Map dst , boolean collapse ) ;
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . isUseCinderCommandCallback ( ) ? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback ( ) : null ; }
public void testValidModifiedBondsFailsWhenBondNotHaveNameAndId ( ) throws java.lang.Exception { doTestValidModifiedBonds ( new org.ovirt.engine.core.common.businessentities.network.Bond ( ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.BOND_DOES_NOT_HAVE_NEITHER_ID_NOR_NAME_SPECIFIED ) , ValidationResult.VALID ) ; }
protected boolean validateTemplateArchitecture ( ) { if ( ( getVmTemplate ( ) . getClusterArch ( ) ) == ( org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE ) ; return false ; } return true ; }
public void prepareSetupNetworksParamsToAttachTo ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createAttachmentWhenAttachingTo ( targetNic.getOriginalIface ( ) ) ; networkModel.getSetupModel ( ) . getHostSetupNetworksParametersData ( ) . getNetworkAttachments ( ) . add ( networkAttachment ) ; }
public void testGetTagVmMapByTag ( ) { org.ovirt.engine.core.common.businessentities.tags_vm_map result = dao.getTagVmByTagIdAndByVmId ( existingVmTag.gettag_id ( ) , existingVmTag.getvm_id ( ) ) ; assertNotNull ( result ) ; assertEqualsTagsVmMap ( existingVmTag , result ) ; }
public boolean isVmNetwork ( ) { return getEntity ( ) . isVmNetwork ( ) ; }
protected org.ovirt.engine.api.model.DataCenter postPopulate ( org.ovirt.engine.api.model.DataCenter model ) { model.setStorageFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.restapi.model.StorageFormat.class ) . value ( ) ) ; model.setQuotaMode ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.QuotaModeType.class ) . value ( ) ) ; return model ; }
public void testGetAllForNetworkHasPermission ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > result = dao.getAllForNetwork ( FixturesTool.NETWORK_ENGINE , org.ovirt.engine.core.dao.network.VnicProfileDaoTest.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public void testGetDataAndSetDataWithFullSession ( ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData < E > object , java.lang.String value ) { registerEntityModel.selectQuotaByName ( value , object.getClusterQuota ( ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView ( ) . flush ( ) ; getView ( ) . getTestButton ( ) . getCommand ( ) . execute ( ) ; }
public void testSave ( ) { dao.save ( new_bookmark ) ; org.ovirt.engine.core.common.businessentities.bookmarks result = dao.getByName ( new_bookmark.getbookmark_name ( ) ) ; assertNotNull ( result ) ; }
public void onSuccess ( ) { releaseMacs ( ) ; }
public org.ovirt.engine.ui.common.widget.table.column.TextCellWithEditableTooltip getCell ( ) { org.ovirt.engine.ui.common.widget.table.column.TextCellWithEditableTooltip textCellWithEditableTooltip = super . getCell ( ) ; textCellWithEditableTooltip.setTitle ( constants.quotaCalculationsMessage ( ) ) ; return textCellWithEditableTooltip ; }
com.google.gwt.safehtml.shared.SafeHtml volumeActivityMenu ( com.google.gwt.safehtml.shared.SafeHtml statusImage ) ;
public void warn ( java.lang.Object msg ) { log.warn ( addPrefixToLogMessage ( msg ) ) ; }
public void canDoActionSucceeds ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookStatusChangeParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
protected void freeCustomLocks ( ) { releaseHostDevicesLock ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getVmDynamicDao ( ) ; existingVm = dao.get ( new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4355" ) ) ; existingVm.setStatus ( VMStatus.Up ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { command.Execute ( ) ; }
public void updateStatusForNonExistingSnapshot ( ) { org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.compat.Guid.Empty ; org.junit.Assert.assertNull ( dao.get ( snapshotId ) ) ; dao.updateStatus ( snapshotId , SnapshotStatus.LOCKED ) ; org.junit.Assert.assertNull ( dao.get ( snapshotId ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotDisabledLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE , null ) , UsbPolicy.DISABLED ) ; }
public void testRemoveCantDo ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.Search , org.ovirt.engine.core.common.queries.SearchParameters.class , new java.lang.String [ ] { "SearchPattern" , "SearchTypeValue" } , new java.lang.Object [ ] { "users:" , org.ovirt.engine.core.common.interfaces.SearchType.DBUser } , getUsers ( ) ) ; doTestBadRemove ( false , true , org.ovirt.engine.api.restapi.resource.CANT_DO ) ; }
public void removeNetwork ( org.ovirt.engine.core.compat.Guid vfsConfigId , org.ovirt.engine.core.compat.Guid networkId ) { getCallsHandler ( ) . executeModification ( "DeletevfsConfigNetwork" , createNetworkParametersMapper ( vfsConfigId , networkId ) ) ; }
public org.ovirt.engine.api.v3.types.V3VM update ( org.ovirt.engine.api.v3.types.V3VM vm ) { vm = adaptUpdate ( getDelegate ( ) :: update , vm ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper.addDisksLink ( vm ) ; return vm ; }
private void updateItemsAvailability ( ) { if ( ( getItems ( ) ) == null ) { return ; } behavior.updateItemsAvailability ( ) ; }
public void testRemove ( ) { dao.remove ( existingAdGroup.getid ( ) ) ; org.ovirt.engine.core.common.businessentities.ad_groups result = dao.get ( existingAdGroup.getid ( ) ) ; assertNull ( result ) ; }
public void defaultClusterInLocalFs ( ) { createCommandWithDefaultVdsGroup ( ) ; oldGroupIsDetachedDefault ( ) ; storagePoolIsLocalFS ( ) ; cpuExists ( ) ; cpuManufacturersMatch ( ) ; allQueriesEmpty ( ) ; canDoActionFailedWithReason ( VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS ) ; }
private void prepareMessageSubject ( java.lang.String hostName , org.ovirt.engine.core.common.businessentities.AuditLogEvent event ) { subject = org.ovirt.engine.core.notifier.transport.smtp.MessageHelper.prepareMessageSubject ( event.getType ( ) , hostName , event.getMessage ( ) ) ; }
private void Alert ( org.ovirt.engine.core.common.AuditLogType logType , java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( getVdsId ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.Alert ( alert , logType ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { revertCinderDisks ( childCmdIds ) ; getCommand ( cmdId ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDS object ) { return java.lang.String.valueOf ( object.getvm_count ( ) ) ; }
public void attachmentAndNicLabelReferenceSameLabelConflict ( ) { attachmentAndNicLabelReferenceSameLabelCommonTest ( false , false ) ; }
public void testAllDomainsExistAndActiveAllActive ( ) { domain1.setStatus ( StorageDomainStatus.Active ) ; domain2.setStatus ( StorageDomainStatus.Active ) ; org.junit.Assert.assertTrue ( "Both domains should be active" , validator.allDomainsExistAndActive ( ) . isValid ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.DbUser getUser ( java.lang.String sessionId , boolean refresh ) { return ( ( org.ovirt.engine.core.common.businessentities.DbUser ) ( getData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.USER_PARAMETER_NAME , refresh ) ) ) ; }
public void setAutoStartup ( boolean value ) { vmStatic.setauto_startup ( value ) ; }
public void testNetworkAttachmentIsSetWhenAttachmentIsNull ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( null ) . networkAttachmentIsSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS ) ) ; }
private void debugQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Query type '{}', Parameters '{}'" , queryType , parameters ) ; }
void initStyles ( ) { tableContainer.setStyleName ( ( showDefaultHeader ? style.contentWithDefaultHeader ( ) : style.content ( ) ) ) ; }
public void canRebalanceOnDistributedVolume ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume ( volumeId1 , 5 ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRebalance ( volumeEntity ) ; org.junit.Assert.assertTrue ( validationResult.isValid ( ) ) ; }
protected boolean canDoAction ( ) { return canDetachDomain ( org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getParameters ( ) . getDestroyingPool ( ) , org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getParameters ( ) . getRemoveLast ( ) , org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.isInternalExecution ( ) ) ; }
public void testSave ( ) { dao.save ( new_bookmark ) ; org.ovirt.engine.core.common.businessentities.Bookmark result = dao.getByName ( new_bookmark.getName ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; }
public void setDeviceInfoText ( java.lang.String raidType ) { deviceSelectionInfo.setText ( ( ( ( "(" + ( constants.getStorageDeviceSelectionInfo ( ) ) ) + raidType ) + ")" ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getServer ( ) { org.ovirt.engine.core.common.businessentities.VDS server = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; server.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; server.setVdsName ( "VDS1" ) ; server.setStatus ( VDSStatus.Up ) ; server.setVdsGroupId ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ; return server ; }
public void testSave ( ) { dao.save ( newVmStatistics ) ; org.ovirt.engine.core.common.businessentities.VmNetworkStatistics savedStatistics = dao.get ( org.ovirt.engine.core.dao.VmNetworkStatisticsDAOTest.NEW_INTERFACE_ID ) ; org.junit.Assert.assertNotNull ( savedStatistics ) ; org.junit.Assert.assertEquals ( newVmStatistics.getStatus ( ) , savedStatistics.getStatus ( ) ) ; }
public void validateEnums ( ) { org.ovirt.engine.api.model.CPU entity = new org.ovirt.engine.api.model.CPU ( ) ; entity.setArchitecture ( "X86_64" ) ; new org.ovirt.engine.api.restapi.resource.validation.CPUValidator ( ) . validateEnums ( entity ) ; }
public void setvmt_guid ( org.ovirt.engine.core.compat.Guid value ) { this . mVmStatic.setvmt_guid ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "vmt_guid" ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ev.matchesDefinition ( ChangeCDModel.ExecutedEventDefinition ) ) { ChangeCD ( sender , args ) ; } }
private void assertInvalidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) , EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED ) ; }
protected org.ovirt.engine.core.compat.Guid getDataCenterId ( org.ovirt.engine.api.model.Network network ) { return getEntity ( org.ovirt.engine.core.common.businessentities.storage_pool.class , SearchType.StoragePool , ( "Datacenter: name=" + ( network.getDataCenter ( ) . getName ( ) ) ) ) . getId ( ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllValidationPass ) { return runMultipleActions ( actionType , parameters , isRunOnlyIfAllValidationPass , false ) ; }
public org.ovirt.engine.api.model.Users list ( ) { return mapDomainUserCollection ( getUsersFromDomain ( ) ) ; }
protected boolean hasModel ( ) { return ( ( getCommonModel ( ) ) != null ) && ( ( org.ovirt.engine.ui.common.uicommon.model.TabModelProvider.getModel ( ) ) != null ) ; }
public org.ovirt.engine.ui.uicommonweb.models.Model getWindowModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > source , java.lang.String propertyName ) { if ( VmListModel.DISK_WINDOW.equals ( propertyName ) ) { return source.getDiskWindow ( ) ; } return super . getWindowModel ( source , propertyName ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( getSpecificCpu ( ) . getEntity ( ) ) { getUnlimitedCpu ( ) . setEntity ( false ) ; getSpecificCpuValue ( ) . setIsChangable ( true ) ; } }
public void validVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
public org.ovirt.engine.api.model.Host get ( ) { if ( isForce ( ) ) { performAction ( VdcActionType.RefreshHostCapabilities , new org.ovirt.engine.core.common.action.VdsActionParameters ( guid ) ) ; } return performGet ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade ( ) . getNetworkProviderDao ( ) . remove ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.provider.RemoveProviderCommand.setSucceeded ( true ) ; }
public javax.ws.rs.core.Response setupNetworks ( org.ovirt.engine.api.model.Action action ) { getVdsByVdsId ( ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters parameters = toParameters ( action ) ; return performAction ( VdcActionType.HostSetupNetworks , parameters , action ) ; }
public org.ovirt.engine.core.bll.provider.ProviderProxy getProviderProxy ( ) { if ( ( providerProxy ) == null ) { providerProxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters ( ) . getProvider ( ) ) ; } return providerProxy ; }
public void testGetAllVfsConfigByHostId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > vfsConfigs = dao.getAllVfsConfigByHostId ( FixturesTool.HOST_ID ) ; org.junit.Assert.assertEquals ( 2 , vfsConfigs.size ( ) ) ; }
public void setSerialNumberPolicy ( org.ovirt.engine.core.common.businessentities.SerialNumberPolicy serialNumberPolicy ) { vmStatic.setSerialNumberPolicy ( serialNumberPolicy ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getSoundDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.SOUND ) ; }
public void setvm_os ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { this . mVmStatic.setos ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "vm_os" ) ) ; }
private void updateAuditLogFailedToUpdateVM ( java.lang.String vmName ) { org.ovirt.engine.core.bll.ExtendImageSizeCommand.addCustomValue ( "VmName" , vmName ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( this , AuditLogType.USER_EXTEND_DISK_SIZE_UPDATE_VM_FAILURE ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { logSsoOnDesktopFailedAgentNonResp ( spiceConsoleModel.getLogger ( ) , ( logonCommandReturnValue != null ? logonCommandReturnValue.getDescription ( ) : "" ) ) ; spiceConsoleModel.executeQuery ( getEntity ( ) ) ; parentModel.setWindow ( null ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > getUserRequestForStorageDomainRepoFileList ( ) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) . getUserRequestForStorageDomainRepoFileList ( getStorageDomainIdForQuery ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getImageType ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getForceRefresh ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.VDSGroup , org.ovirt.engine.core.common.businessentities.network.NetworkCluster > object ) { return object.getFirst ( ) . getcompatibility_version ( ) . getValue ( ) ; }
private static < T extends org.ovirt.engine.core.common.businessentities.VmBase > java.lang.String getAddress ( T entity , final org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.VmDevice device = entity.getManagedDeviceMap ( ) . get ( id ) ; if ( device != null ) return device.getAddress ( ) ; else return org.apache.commons.lang.StringUtils.EMPTY ; }
public org.ovirt.engine.api.resource.NetworksResource getNetworksResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResource ( id ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.vm_pools > getPrivilegedQueryReturnValue ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.vm_pools > returnValue = org.ovirt.engine.core.bll.GetAllVmPoolsAttachedToUserQuery.getDbFacade ( ) . getVmPoolDAO ( ) . getAllForUser ( org.ovirt.engine.core.bll.GetAllVmPoolsAttachedToUserQuery.getParameters ( ) . getUserId ( ) ) ; return returnValue ; }
public static org.ovirt.engine.core.common.businessentities.VMStatus forValue ( int value ) { return org.ovirt.engine.core.common.businessentities.VMStatus.mappings.get ( value ) ; }
public void testValidationFailsDiskConnectedToRunningVm ( ) { org.mockito.Mockito.when ( diskValidator.isDiskPluggedToVmsThatAreNotDown ( org.mockito.ArgumentMatchers.anyBoolean ( ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; }
protected static org.ovirt.engine.core.compat.Guid getGuidDefaultEmpty ( java.sql.ResultSet resultSet , java.lang.String columnName ) throws java.sql.SQLException { return org.ovirt.engine.core.dao.BaseDaoDbFacade.getGuid ( resultSet , columnName , Guid.Empty ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDS host ) { return ( host.getConsoleAddress ( ) ) != null ? constants.yes ( ) : constants.no ( ) ; }
private boolean isManagementOriginally ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return ( ( clusterNetworkModel.getOriginalNetworkCluster ( ) ) != null ) && ( clusterNetworkModel.getOriginalNetworkCluster ( ) . isManagement ( ) ) ; }
public void removeLabel ( org.ovirt.engine.core.compat.Guid vfsConfigId , java.lang.String label ) { getCallsHandler ( ) . executeModification ( "DeletevfsConfigLabel" , createLabelParametersMapper ( vfsConfigId , label ) ) ; }
protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration ( ) { return super . createWidgetConfiguration ( ) . update ( hostTab , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) ; }
private void initIpConfigurationStaticBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol ) { initIpConfiguration ( ) ; org.mockito.Mockito.when ( mockedIPv4Address.getBootProtocol ( ) ) . thenReturn ( networkBootProtocol ) ; iface.setBootProtocol ( networkBootProtocol ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters ( org.ovirt.engine.api.model.Network network , org.ovirt.engine.api.model.Network entity ) { return new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter ( getVDSGroup ( ) , entity ) ; }
protected void postConnect ( org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback callback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { super . postConnect ( this . callback ) ; }
protected java.util.Map < java.lang.String , java.lang.String > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( getAdUserId ( ) . toString ( ) , getClass ( ) . getName ( ) ) ; }
public static org.ovirt.engine.ui.uicommonweb.models.userportal.ConsoleProtocol getProtocolByModel ( java.lang.Class < ? extends org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > model ) { for ( org.ovirt.engine.ui.uicommonweb.models.userportal.ConsoleProtocol value : org.ovirt.engine.ui.uicommonweb.models.userportal.ConsoleProtocol.values ( ) ) { if ( value.isBackedBy ( model ) ) { return value ; } } return null ; }
public void setDisplay ( java.lang.Integer value ) { this . vmDynamic.setDisplay ( value ) ; }
protected java.util.List < org.ovirt.engine.api.model.DiskProfile > getDiskProfilesCollection ( ) { return getBackendCollection ( VdcQueryType.GetDiskProfilesByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuidOr404 ( storageDomainId ) ) ) ; }
public void addToHistoryNullBefore ( ) { org.junit.Assert.assertEquals ( java.util.Collections.singletonList ( 12 ) , statistics.addToHistory ( null , 12 , 100 ) ) ; }
public void setMessage ( java.lang.String msg , com.google.gwt.user.client.ui.Label errorLabel ) { errorLabel.setText ( msg ) ; errorLabel.setVisible ( ( ! ( msg.isEmpty ( ) ) ) ) ; }
public void nullTest ( ) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( null ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidationTest.failureValidationResultEmptyNotAllowed , validationResult ) ; }
public org.ovirt.engine.core.bll.ValidationResult clusterNetworkNotUsedByBricks ( ) { return networkNotUsed ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkFromClusterInternalCommand.DetachNetworkValidator.getGlusterBrickDao ( ) . getAllByClusterAndNetworkId ( networkCluster.getClusterId ( ) , network.getId ( ) ) , VdcBllMessages.VAR__ENTITIES__GLUSTER_BRICKS , VdcBllMessages.VAR__ENTITIES__GLUSTER_BRICK ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { StopProgress ( ) ; commandTarget.executeCommand ( runOnceCommand ) ; }
public void testExtractIpv6PrefixNoPrefix ( ) { org.junit.Assert.assertThat ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Prefix ( "::" ) , org.hamcrest.Matchers.nullValue ( ) ) ; }
java.lang.String getSoundDevice ( int osId , org.ovirt.engine.core.compat.Version version ) ;
private java.lang.String generateVlanName ( java.lang.String iface ) { return ( iface + "." ) + ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextInt ( 100 ) ) ; }
public org.ovirt.engine.core.common.businessentities.LdapRefStatus getAdStatus ( ) { if ( ( getstatus ( ) ) == 0 ) { return LdapRefStatus.Inactive ; } return LdapRefStatus.Active ; }
public void testSaveUserDuplicatedDomainAndExternalId ( ) { newUser.setDomain ( existingUser.getDomain ( ) ) ; newUser.setExternalId ( existingUser.getExternalId ( ) ) ; dao.save ( newUser ) ; }
public void saveAll ( java.util.Collection < T > entities ) { for ( T entity : entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.save ( entity ) ; } }
public void UpdateIsDisksAvailable ( ) { getModel ( ) . setIsDisksAvailable ( ( ( ( getModel ( ) . getDisks ( ) ) != null ) && ( getModel ( ) . getProvisioning ( ) . getIsChangable ( ) ) ) ) ; }
public < P extends org.ovirt.engine.core.common.action.VdcActionParametersBase > org.ovirt.engine.core.bll.CommandBase < P > createCommand ( org.ovirt.engine.core.common.action.ActionType action , P parameters ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( action , parameters ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections createConnection ( org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String mountOptions ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; conn.setstorage_type ( storageType ) ; conn.setMountOptions ( mountOptions ) ; return conn ; }
public void setguest_cur_user_name ( java.lang.String value ) { this . mVmDynamic.setguest_cur_user_name ( value ) ; }
public void onSuccess ( final org.ovirt.engine.core.common.users.VdcUser result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Sucessfully executed sync getIsUserLoggedIn!" ) ; callback.onSuccess ( result ) ; }
public final java.lang.String TranslateErrorTextSingle ( java.lang.String errorMsg ) { return TranslateErrorTextSingle ( errorMsg , true ) ; }
private void initIpConfigurationBootProtocolGateway ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol networkBootProtocol , boolean syncGateway ) { initIpConfigurationStaticBootProtocol ( networkBootProtocol ) ; org.mockito.Mockito.when ( mockedIPv4Address.getGateway ( ) ) . thenReturn ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY ) ; iface.setGateway ( ( syncGateway ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.GATEWAY : null ) ) ; }
public org.ovirt.engine.core.common.businessentities.Bookmark getByName ( java.lang.String name ) { final javax.persistence.TypedQuery < org.ovirt.engine.core.common.businessentities.Bookmark > query = getEntityManager ( ) . createNamedQuery ( "Bookmark.byName" , org.ovirt.engine.core.common.businessentities.Bookmark.class ) ; query.setParameter ( "name" , name ) ; return singleResult ( query ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Provider < ? > > searchProviders ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getProviderDao ( ) , true ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.ServerConnectionStatusReturnForXmlRpc validateStorageServerConnection ( int serverType , java.lang.String spUUID , java.util.Map < java.lang.String , java.lang.String > [ ] args ) ;
public void setBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol value ) { if ( ( bootProtocol ) != value ) { bootProtocol = value ; BootProtocolChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "BootProtocol" ) ) ; } }
protected void endSuccessfully ( ) { endActionOnDisks ( ) ; org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.freeLock ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.ConvertVm , buildConvertVmParameters ( ) , org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent ( ) ) ; org.ovirt.engine.core.bll.ImportVmFromExternalProviderCommand.setSucceeded ( true ) ; }
public static boolean isUpdateValidForVmDevices ( org.ovirt.engine.core.compat.Guid vmId , java.lang.Object objectWithEditableDeviceFields ) { if ( objectWithEditableDeviceFields == null ) { return true ; } return org.ovirt.engine.core.bll.VmHandler.getVmDevicesFieldsToUpdateOnNextRun ( vmId , objectWithEditableDeviceFields ) . isEmpty ( ) ; }
protected void setUpGetStorageDomainExpectations ( org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetStorageDomainById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendExportDomainDisksResourceTest.STORAGE_DOMAIN_ID } , org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplatesResourceTest.setUpStorageDomain ( domainType ) , failure ) ; }
public org.ovirt.engine.sdk.services.SystemService systemService ( ) { return new org.ovirt.engine.sdk.services.internal.SystemServiceImpl ( this , "" ) ; }
private org.ovirt.engine.core.bll.ValidationResult getManagementNetworkValidationResult ( final boolean isManagementNetwork ) { return isManagementNetwork ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , getNetworkNameReplacement ( ) ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void init ( org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel errataListModel ) { this . errataListModel = errataListModel ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index , boolean isDisplay , boolean isMigration , boolean isRequired ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.api.model.Network.class ) , isDisplay , isMigration , isRequired , index ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.CdRom cdrom = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.verifyModelSpecific ( cdrom , 1 ) ; verifyLinks ( cdrom ) ; }
public void vnicProfileNameTakenCaseSensitivelyByDifferentVnicProfile ( ) throws java.lang.Exception { vnicProfileAvailableTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , getSingletonNamedVnicProfileList ( DEFAULT_VNIC_PROFILE_NAME.toUpperCase ( ) , OTHER_GUID ) ) ; }
public void getPrefixedKey ( ) { java.lang.String prefixedKey = tested.getPrefixedKey ( "Key" ) ; org.junit.Assert.assertThat ( prefixedKey , org.hamcrest.CoreMatchers.equalTo ( ( ( ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX ) + "Key" ) ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( vmDynamic , vmGuestAgentInterfaces , vmStatistics , lunsMap , interfaceStatistics ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; cancel ( ) ; }
public void updateGlusterHookStatus ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) ;
public void releaseVolumeLock ( org.ovirt.engine.core.compat.Guid taskId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol = getVolumeDao ( ) . getVolumeByGlusterTask ( taskId ) ; if ( vol != null ) { releaseLock ( vol.getId ( ) ) ; } else { org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.log.debugFormat ( "Did not find a volume associated with task {0}" , taskId ) ; } }
public boolean isSetVMs ( ) { return ( this . vMs ) != null ; }
private static org.ovirt.engine.api.restapi.util.LinkHelper.Collection getCollection ( org.ovirt.engine.api.model.BaseResource model ) { return org.ovirt.engine.api.restapi.util.LinkHelper.getCollection ( model , null ) ; }
private java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > createAddNetworkParameters ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsForAdd ) { org.ovirt.engine.core.bll.network.AddNetworkParametersBuilder builder = new org.ovirt.engine.core.bll.network.AddNetworkParametersBuilder ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetwork ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getContext ( ) ) ; return builder.buildParameters ( nicsForAdd ) ; }
public void setstatus ( boolean value ) { this . status = value ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; }
public < T > void mockConfigValue ( org.ovirt.engine.core.common.config.ConfigValues value , T returnValue ) { mockConfigValue ( value , Config.DefaultConfigurationVersion , returnValue ) ; }
public void testGetVdsSpmIdMapForStoragePoolAndVdsId ( ) { org.ovirt.engine.core.common.businessentities.VdsSpmIdMap result = dao.get ( existingEntity.getStoragePoolId ( ) , existingEntity.getVdsSpmId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingEntity , result ) ; }
public void subscribe ( org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber ) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker ( ) . getPublisher ( ) . subscribe ( subscriber ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getDisableGlobalHaMaintenanceCommand ( ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getModel ( ) . getNewVmCommand ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkAttachmentIsSet ( ) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , null ) ) . when ( ( ( attachment ) == null ) ) ; }
public void testGetDataAndSetDataWithFullSession ( ) { container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; cancel ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.ClientConsoleMode getClientConsoleMode ( ) { return org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.ClientConsoleMode.valueOf ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted ( ConfigurationValues.ClientConsoleModeDefault ) ) ) ) ; }
public static boolean isDisk ( org.ovirt.engine.core.common.businessentities.VmDevice device ) { return ( device.getType ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) && ( device.getDevice ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) ; }
public static boolean is64bitOsType ( org.ovirt.engine.core.common.businessentities.VmOsType osType ) { if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.get64bitOsTypes ( ) . contains ( osType ) ) { return true ; } return false ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder setHost ( org.ovirt.engine.core.common.businessentities.VDS host ) { this . host = host ; return this ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.Cdrom > collection ) { org.junit.Assert.assertNotNull ( collection ) ; org.junit.Assert.assertEquals ( 1 , collection.size ( ) ) ; verifyModel ( collection.get ( 0 ) ) ; }
protected static void buildTemplateOnSave ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VmTemplate template ) { org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( model , template , new org.ovirt.engine.ui.uicommonweb.builders.vm.FullUnitToVmBaseBuilder ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult clusterNetworkNotUsedByVms ( ) { return networkNotUsed ( org.ovirt.engine.core.bll.network.cluster.DetachNetworkFromClusterInternalCommand.DetachNetworkValidator.getVmStaticDao ( ) . getAllByGroupAndNetworkName ( networkCluster.getClusterId ( ) , network.getName ( ) ) , VdcBllMessages.VAR__ENTITIES__VMS , VdcBllMessages.VAR__ENTITIES__VM ) ; }
protected void executeQueryCommand ( ) { java.lang.String method_typeField = org.ovirt.engine.core.bll.GetEventNotificationMethodByTypeQuery.getParameters ( ) . getMethodType ( ) . name ( ) ; org.ovirt.engine.core.bll.GetEventNotificationMethodByTypeQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getEventDAO ( ) . getEventNotificationMethodsByType ( method_typeField ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.setIsEveryoneSelected ( false ) ; getView ( ) . changeStateOfElementsWhenAccessIsForEveryone ( false ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.MainModelProvider < org.ovirt.engine.core.common.businessentities.StoragePool , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.dataCenterMainTabLabel ( ) , 0 , modelProvider ) ; }
public void setMessage ( java.lang.String message ) { super . setMessage ( message ) ; this . message.setText ( message ) ; this . message.setVisible ( ( ! ( org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty ( message ) ) ) ) ; }
public void setvm_guid ( org.ovirt.engine.core.compat.Guid value ) { this . vm_guidField = value ; }
public void setRunOnVds ( org.ovirt.engine.core.compat.NGuid value ) { this . vmDynamic.setRunOnVds ( value ) ; }
public void commandFailsSlaveVolumeNotMonitoredByOvirt ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeGeoRepSessionCommandTest.SUPPORTED_VERSION ) . when ( cluster ) . getCompatibilityVersion ( ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . getSlaveHost ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; }
protected void postConnect ( org.ovirt.vdsm.jsonrpc.client.utils.OneTimeCallback callback ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { super . postConnect ( this . callback ) ; }
private java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActionsImpl ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isInternal , boolean isRunOnlyIfAllCanDoPass , boolean isWaitForResult ) { return runMultipleActionsImpl ( actionType , parameters , isInternal , isRunOnlyIfAllCanDoPass , isWaitForResult , null ) ; }
public void testInvalidNumberOfMonitors ( ) { prepareVmToPassCanDoAction ( ) ; vmStatic.setNumOfMonitors ( 99 ) ; org.junit.Assert.assertFalse ( "canDoAction should have failed with invalid number of monitors." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_NUM_OF_MONITORS ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( getDiskImageDAO ( ) . getSnapshotById ( getDiskId ( ) ) ) ) ; } return disk ; }
protected java.lang.Long asLong ( java.lang.String id ) { try { return new java.lang.Long ( id ) ; } catch ( java.lang.IllegalArgumentException e ) { throw new org.ovirt.engine.api.restapi.resource.BaseBackendResource.MalformedIdException ( e ) ; } }
public boolean prepareConnectStorageServer ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { return true ; }
void localize ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { searchButton.setLabel ( constants.goPermissionsPopup ( ) ) ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { _setCliEnvironmentIfNecessary ( ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_CONFIG_PREFIX ) + "DEFAULT/" ) + ( _messagingConfiguration.getBrokerType ( ) . getHostKey ( ) ) ) , _messagingConfiguration.getAddress ( ) ) ; return true ; }
public void validateSucceedsOnRemoveNotLastAdGroupWithSuperUserPrivileges ( ) { mockIsLastSuperUserGroup ( false ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public int getNumOfSnapshotsByMemory ( java.lang.String memoryVolume ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "memory_volume" , getNullableRepresentation ( memoryVolume ) ) ; return getCallsHandler ( ) . executeRead ( "GetNumOfSnapshotsByMemoryVolume" , getIntegerMapper ( ) , parameterSource ) ; }
public void clean ( ) { this . events.clear ( ) ; }
protected org.ovirt.engine.core.compat.Guid asGuid ( org.ovirt.engine.core.compat.NGuid nGuid ) { return new org.ovirt.engine.core.compat.Guid ( nGuid.getUuid ( ) ) ; }
public static void GetAllVmTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmTemplates , params , aQuery ) ; }
public static boolean IsFieldsUpdated ( org.ovirt.engine.core.common.businessentities.VdsStatic source , org.ovirt.engine.core.common.businessentities.VdsStatic destination , java.lang.Iterable < java.lang.String > list ) { return org.ovirt.engine.core.bll.VdsHandler.mUpdateVdsStatic.IsFieldsUpdated ( source , destination , list ) ; }
public static void adjustDisplayData ( org.ovirt.engine.api.restapi.resource.BackendResource res , org.ovirt.engine.api.model.Vm vm ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( res , vm , null ) ; }
protected void onEntityContentChanged ( ) { super . onEntityContentChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . execute ( ) ; } else { setItems ( null ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.bookmarks bookmark = org.ovirt.engine.core.bll.DbFacade.getInstance ( ) . getBookmarkDao ( ) . get ( org.ovirt.engine.core.bll.GetBookmarkByIdQuery.getParameters ( ) . getBookmarkId ( ) ) ; org.ovirt.engine.core.bll.GetBookmarkByIdQuery.getQueryReturnValue ( ) . setReturnValue ( bookmark ) ; }
protected boolean matchEntity ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity , org.ovirt.engine.core.compat.Guid id ) { return ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( PropertyChangedEventArgs.PROGRESS.equals ( pcArgs.propertyName ) ) { clearData ( ) ; } } }
protected void ExecuteIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMStopTask , new org.ovirt.engine.core.vdsbroker.irsbroker.HSMTaskGuidBaseVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMStopTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run ( org.codehaus.jackson.JsonNode params , org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder ) { return builder.withResult ( ResultCodes.OK.map ( ) ) ; }
public void passwordIsEmptyForOvirtNode ( ) { org.junit.Assert.assertThat ( validator.passwordNotEmpty ( true , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextEnum ( org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.class ) , null ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getLun ( ) . getSerial ( ) ; }
private boolean runVm ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.utils.lock.EngineLock lock ) { return backend.runInternalAction ( VdcActionType.RunVm , new org.ovirt.engine.core.common.action.RunVmParams ( vmId ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( lock ) ) . getSucceeded ( ) ; }
private static long computeCowImageNeededSize ( long actualSize ) { return java.lang.Double.valueOf ( java.lang.Math.ceil ( ( actualSize / ( org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR ) ) ) ) . longValue ( ) ; }
public void testAdd ( ) throws java.lang.Exception { setUpGetGraphicsExpectations ( 1 ) ; setUpGetConsoleExpectations ( new int [ ] { 0 , 0 } ) ; super . testAdd ( ) ; }
protected boolean isSoundDeviceEnabled ( org.ovirt.engine.core.compat.Guid vmId ) { return getVmDeviceUtils ( ) . hasSoundDevice ( vmId ) ; }
private static void setValidCpuVersionMap ( ) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler.InitDictionaries ( ) ; org.powermock.api.mockito.PowerMockito.when ( org.ovirt.engine.core.common.config.Config.GetValue ( ConfigValues.SupportedClusterLevels ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVersionSet ( ) ) ; }
protected void endWithFailure ( ) { UndoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.BaseImagesCommand.setSucceeded ( true ) ; }
public void setVmName ( java.lang.String vmName ) { consoleTitle.setText ( messages.selectConsoleFor ( vmName ) ) ; }
public boolean syncDomainInfo ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.action.SyncLunsInfoForBlockStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.SyncLunsInfoForBlockStorageDomainParameters ( storageDomain.getId ( ) ) ; parameters.setVdsId ( vdsId ) ; return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SyncLunsInfoForBlockStorageDomain , parameters ) . getSucceeded ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; setWindow ( null ) ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runInternalQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { return runQueryImpl ( actionType , parameters , false ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; OnExecute ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { cachedMaxPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; updatePriority ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ) ; }
protected java.lang.Object ProvideDetailModelEntity ( java.lang.Object selectedItem ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( selectedItem ) ) ; if ( model == null ) { return null ; } return model.getEntity ( ) ; }
private int toSortingIndex ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { return ( vmDevice == null ) || ( ! ( org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable ( vmDevice ) ) ) ? 0 : 1 ; }
public void testSetInvalidIntValue ( ) throws java.lang.Exception { final java.lang.String key = "VdsRefreshRate" ; org.ovirt.engine.core.config.EngineConfigLogicTest.engineConfigLogic.persist ( key , "Not A Number" , "" ) ; }
public void setdefault_boot_sequence ( org.ovirt.engine.core.common.businessentities.BootSequence value ) { this . mVmStatic.setdefault_boot_sequence ( value ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( model ) ) ; hostModel.postGetPmOptions ( ( ( java.util.ArrayList < java.lang.String > ) ( result ) ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetStepByStepIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository ( ) . getStep ( org.ovirt.engine.core.bll.GetStepByStepIdQuery.getParameters ( ) . getId ( ) ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.StorageConnection model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
private void mockVdsWithStatus ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setstatus ( status ) ; org.mockito.Mockito.when ( vdsDAO.get ( command.getParameters ( ) . getVdsId ( ) ) ) . thenReturn ( vds ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { Cancel ( ) ; }
public boolean supportsGlusterAsyncTasksFeature ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { return ( cluster.supportsGlusterService ( ) ) && ( org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterAsyncTasks ( cluster.getCompatibilityVersion ( ) ) ) ; }
private void saveTaskAndPutInMap ( java.lang.String taskKey , org.ovirt.engine.core.common.businessentities.AsyncTasks task ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.saveAsyncTaskToDb ( task ) ; taskKeyToTaskIdMap.put ( taskKey , task.getTaskId ( ) ) ; }
public void setup ( ) { validation = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.uicommonweb.validation.CidrValidation ( ) ) ; org.mockito.Mockito.doReturn ( "" ) . when ( validation ) . getMessage ( ) ; }
public void testGetAllSupportedNetworkFiltersByInvalidVersion ( ) { final org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version ( org.ovirt.engine.core.dao.network.NetworkFilterDaoTest.INVALID_VERSION ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > allNetworkFilter = dao.getAllSupportedNetworkFiltersByVersion ( version ) ; org.junit.Assert.assertTrue ( allNetworkFilter.isEmpty ( ) ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createIdParameterMapper ( org.ovirt.engine.core.compat.Guid id ) { return getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ; }
public void setParser ( org.ovirt.engine.core.config.EngineConfigCLIParser parser ) { }
protected org.ovirt.engine.core.common.businessentities.FenceAgent createFenceAgent ( int order ) { org.ovirt.engine.core.common.businessentities.FenceAgent agent = new org.ovirt.engine.core.common.businessentities.FenceAgent ( ) ; agent.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; agent.setOrder ( order ) ; return agent ; }
public org.ovirt.engine.api.model.GlusterBricks list ( ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel object ) { java.lang.String osId = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getOsName ( object.getOsId ( ) ) ; return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( osId ) ; }
public void testNoNicId ( ) { setup ( org.ovirt.engine.core.bll.network.host.GetTlvsByHostNicIdQueryTest.ExpectedError.NIC_ID_NOT_NULL ) ; org.junit.Assert.assertFalse ( getQuery ( ) . validateInputs ( ) ) ; org.junit.Assert.assertEquals ( EngineMessage.NIC_ID_IS_NULL.name ( ) , getQuery ( ) . getQueryReturnValue ( ) . getExceptionString ( ) ) ; }
public int hashCode ( ) { int hashCode = 23 ; hashCode = ( hashCode * 37 ) + ( ( mainModel ) == null ? 1 : mainModel.hashCode ( ) ) ; return hashCode ; }
java.lang.String clusterPopupOptimizationForDesktopExplainationLabel ( java.lang.String a ) ;
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { convertFailed ( ) ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalMultipleActions ( actionType , parameters , executionContext ) ; }
public org.ovirt.engine.core.bll.ValidationResult evaluate ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator > entry ) { return getStorageDomainValidator ( entry ) . isDomainExistAndActive ( ) ; }
public boolean getUseLocalDrives ( ) { return false ; }
protected boolean setAndValidateDiskProfiles ( ) { return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles ( java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getDiskImage ( ) , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getStorageDomainId ( ) ) , org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getCurrentUser ( ) ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > createVG ( java.lang.String sdUUID , java.lang.String [ ] deviceList ) ;
public void testAlreadyExistStorageDomain ( ) { org.mockito.Mockito.when ( command.getStorageDomainStaticDAO ( ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( parameters.getStorageDomain ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVmAndReturnFromDao ( ) { vm = mockVm ( ) ; org.mockito.Mockito.when ( vmDao.get ( org.ovirt.engine.core.bll.GetNextAvailableDiskAliasNameByVMIdQueryTest.vmId , getQuery ( ) . getUserID ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( vm ) ; return vm ; }
protected void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
public org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand GetAsyncCommandForVm ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand result = null ; result = _asyncRunningCommands.get ( vmId ) ; return result ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateTabsData ( snapshotModel ) ; }
public static < TSource > TSource firstOrNull ( java.lang.Iterable < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super TSource > predicate ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( source , predicate , null ) ; }
public void canDoActionFails ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DeleteGlusterVolumeCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeActionParameters ( startedVolumeId , false ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE , null ) , UsbPolicy.ENABLED_LEGACY ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkView > getAllWithQuery ( java.lang.String query ) { return jdbcTemplate.query ( query , org.ovirt.engine.core.dao.network.NetworkViewDaoDbFacadeImpl.NetworkViewRowMapper.instance ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext context ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , parameters , context ) ; }
public void canCreateAsMuchNumaNodesAsVirtualCores ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommand ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 2 ) ; org.assertj.core.api.Assertions.assertThat ( command.canDoAction ( ) ) . isTrue ( ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getBrickListModel ( ) . getCommitRemoveBricksCommand ( ) ; }
private boolean isSysprepUsed ( final org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( vm.useSysPrep ( ) ) && ( vm.getVmOs ( ) . isWindows ( ) ) ) && ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getFloppyPath ( ) ) ) ; }
public java.util.Map < org.ovirt.engine.core.common.utils.Pair < java.lang.Integer , org.ovirt.engine.core.compat.Version > , java.util.Set < java.lang.String > > getUnsupportedCpus ( ) ;
public org.ovirt.engine.core.common.action.VdcReturnValueBase Login ( java.lang.String user , java.lang.String password , java.lang.String domain ) ;
public static < TSource > TSource firstOrNull ( java.lang.Iterable < TSource > source ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( source , new org.ovirt.engine.ui.uicommonweb.Linq.TruePredicate < TSource > ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; }
public boolean isManaged ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface.NetworkImplementationDetails details = getNetworkImplementationDetails ( ) ; return details != null ? details.isManaged ( ) : true ; }
protected boolean isUserAuthorizedToRunAction ( ) { if ( isSystemSuperUserPredicate.eval ( org.ovirt.engine.core.bll.aaa.TerminateSessionCommand.getCurrentUser ( ) . getId ( ) ) ) { return true ; } else { addCanDoActionMessage ( VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; return false ; } }
public javax.ws.rs.core.Response clone ( org.ovirt.engine.api.v3.types.V3Action action ) { return adaptAction ( getDelegate ( ) :: clone , action ) ; }
public void shouldAllowUpgradeForVM ( ) { org.hamcrest.MatcherAssert.assertThat ( validator.isVmReadyForUpgrade ( validVM ) , org.hamcrest.core.Is.is ( org.hamcrest.Matchers.empty ( ) ) ) ; }
public void SpiceConnect ( ) { try { getspice ( ) . Connect ( ) ; } catch ( java.lang.RuntimeException ex ) { getLogger ( ) . Error ( "Exception on Spice connect" , ex ) ; } }
public org.ovirt.engine.core.bll.CommandBase < ? > createAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext context ) { return org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters , context ) ; }
protected void executeQueryCommand ( ) { getQueryReturnValue ( ) . setReturnValue ( getDbFacade ( ) . getStorageQosDao ( ) . get ( getParameters ( ) . getId ( ) ) ) ; }
public boolean validate ( ) { if ( isNoSelection ( ) ) { getInvalidityReasons ( ) . add ( org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.CONSTANTS.noDisksSelected ( ) ) ; setIsValid ( false ) ; return false ; } return true ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsmVm setLunsMap ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsMap ) { this . lunsMap = lunsMap ; return this ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { if ( event.getValue ( ) ) { roleModelProvider.getModel ( ) . setItemsFilter ( RoleType.USER ) ; roleModelProvider.getModel ( ) . ForceRefresh ( ) ; } }
protected void logAutheticationFailure ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.setUserName ( org.ovirt.engine.core.bll.aaa.LoginBaseCommand.getUserName ( ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.USER_VDC_LOGIN_FAILED ) ; }
org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.core.common.businessentities.AuditLog > createActionTable ( org.ovirt.engine.ui.common.uicommon.model.SearchableTabModelProvider < org.ovirt.engine.core.common.businessentities.AuditLog , ? > modelProvider ) { return new org.ovirt.engine.ui.common.widget.table.SimpleActionTable < org.ovirt.engine.core.common.businessentities.AuditLog > ( modelProvider , getTableResources ( ) , org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.getEventBus ( ) , org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.getClientStorage ( ) ) ; }
public void testSingletonDaoAnnotation ( ) { for ( java.lang.Class < ? extends org.ovirt.engine.core.dao.DAO > dao : org.ovirt.engine.core.dao.DaoCdiIntegrationTest.daos ) { if ( isConcreteClass ( dao ) ) { org.junit.Assert.assertTrue ( ( "A concrete DAO class has to be annotated with @Singleton: " + ( dao.getCanonicalName ( ) ) ) , dao.isAnnotationPresent ( javax.inject.Singleton.class ) ) ; } } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > getTagsAttachedToObject ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . getAllForVmPools ( org.ovirt.engine.core.bll.VmPoolCommandBase.getParameters ( ) . getVmPoolId ( ) . toString ( ) ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( getSucceeded ( ) ) { return org.ovirt.engine.core.common.AuditLogType.GEOREP_SESSION_DELETE ; } else { return ( errorType ) == null ? org.ovirt.engine.core.common.AuditLogType.GEOREP_SESSION_DELETE_FAILED : errorType ; } }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { return new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) ;
protected void AlertIfPowerManagementOperationSkipped ( java.lang.String operation , java.lang.Throwable throwable ) { Alert ( AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED , operation , throwable ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createShareableDisk ( org.ovirt.engine.core.common.businessentities.VolumeFormat volumeFormat ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = createDiskImage ( ) ; disk.setvolumeFormat ( volumeFormat ) ; disk.setShareable ( true ) ; return disk ; }
private void cpuManufacturersMatch ( ) { org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . checkIfCpusSameManufacture ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDSGroup.class ) ) ; }
public static boolean isGlusterBrickProvisioningSupported ( org.ovirt.engine.core.compat.Version version ) { return ( Version.v3_6.compareTo ( version ) ) <= 0 ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance ( ) . removeExternalPolicyUnit ( getPolicyUnitId ( ) ) ; setSucceeded ( true ) ; }
protected void validateContainerFormat ( com.woorea.openstack.glance.model.Image glanceImage ) { if ( ! ( glanceImage.getContainerFormat ( ) . equals ( org.ovirt.engine.core.bll.provider.OpenstackImageProviderProxy.GlanceImageContainer.BARE.getValue ( ) ) ) ) { throw new java.lang.RuntimeException ( "Unsupported container format" ) ; } }
private void BootProtocolChanged ( ) { UpdateCanSpecify ( ) ; getAddress ( ) . setIsValid ( true ) ; getSubnet ( ) . setIsValid ( true ) ; }
public boolean eval ( T a ) { return ( a.getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.DiskInterface.IDE ) ; }
protected org.ovirt.engine.core.common.businessentities.storage_domains getStorageDomainEntity ( int index ) { org.ovirt.engine.core.common.businessentities.storage_domains entity = control.createMock ( org.ovirt.engine.core.common.businessentities.storage_domains.class ) ; return org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.setUpStorageDomainEntityExpectations ( entity , index , StorageType.NFS ) ; }
public org.ovirt.engine.core.common.businessentities.VmPoolType getvm_pool_type ( ) { return type ; }
protected void configure ( ) { bindInfrastructure ( ) ; bindConfiguration ( ) ; }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . removeVmFromVmPool ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded ( true ) ; } }
public boolean getBondingOptionsOverrideNotification ( ) { return getbondingOptionsOverrideNotification ( ) ; }
public void testUrlWithPagination ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setPageSize ( 20 ) ; errataFilter.setPageNumber ( 3 ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.Assert.assertEquals ( "/katello/api/v2/systems/xxx/errata?page=3&per_page=20" , underTest.build ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; }
public void canDoActionFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( null , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.NFS , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . dataCenterStorageSubTabLabel ( ) , 0 , ginjector.getSubTabDataCenterStorageModelProvider ( ) ) ; }
public org.ovirt.engine.api.model.Nic get ( ) { return super . get ( ) ; }
public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return runConnectionStorageToDomain ( storageDomain , vdsId , VdcActionType.RemoveStorageServerConnection.getValue ( ) ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; getBrickListModel ( ) . setEntity ( provideDetailModelEntity ( getSelectedItem ( ) ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase runAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { return returnValue ; } return runActionImpl ( actionType , parameters , false , null ) ; }
protected void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( auditLogable , logType ) ; }
public void testPosixEmptyVFSType ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data1" , StorageType.POSIXFS , null , "timeo=30" ) ; parameters.setStorageServerConnection ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( getCommand ( ) , EngineMessage.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE ) ; }
public static java.lang.String getConstraint ( javax.ws.rs.core.UriInfo uriInfo , java.lang.Class < ? > clz , boolean typePrefix ) { return org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( uriInfo , null , clz , typePrefix ) ; }
protected void handleVmNotUp ( ) { if ( org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand.isEndSuccessfully ( ) ) { getParameters ( ) . incrementExecutionIndex ( ) ; } getParameters ( ) . setTaskGroupSuccess ( false ) ; org.ovirt.engine.core.bll.lsm.LiveMigrateDiskCommand.setSucceeded ( true ) ; }
public void calculateNetworkImplementationDetailsNetworkDefaultMtuOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface.isBridged ( ) , 0 , iface.getVlanId ( ) , createQos ( ) ) ; }
protected org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network model ) { return org.ovirt.engine.api.restapi.resource.BackendNetworkHelper.addParents ( model ) ; }
public void InvokeUIThread ( org.ovirt.engine.ui.uicompat.ITaskTarget target , java.lang.Object state ) { setState ( state ) ; target.run ( this ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire ( this , object ) ; updateKeyTitle ( object ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.getDetachAllCommand ( ) . Execute ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeProfileInfoReturnForXmlRpc glusterVolumeProfileInfo ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) ;
public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , java.lang.String value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { org.ovirt.engine.ui.common.widget.table.column.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create ( org.ovirt.engine.ui.common.widget.table.column.ScrollableTextCell.CellTemplate.class ) ; sb.append ( template.input ( value , "" ) ) ; }
public org.ovirt.engine.api.model.Statistic setDatum ( org.ovirt.engine.api.model.Statistic statistic , java.lang.String datum ) { statistic.getValues ( ) . getValues ( ) . get ( 0 ) . setDetail ( datum ) ; return statistic ; }
public void isVlanDeviceNonNetworkFree ( ) { freeVfCommon ( 0 , 0 , 0 , 0 , 1 ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = getSingleMockedNonFreeDevice ( ) ; org.junit.Assert.assertFalse ( networkDeviceHelper.isDeviceNetworkFree ( hostDevice ) ) ; }
public void setUser ( java.lang.String user ) { _dialog.setUser ( user ) ; }
protected void verifyModel ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model ) { assertEquals ( org.ovirt.engine.api.restapi.resource.HOST_NIC_ID.toString ( ) , model.getHostNic ( ) . getId ( ) ) ; }
public void lowerVersionNoHostsNoNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
private void mockStepDao ( org.ovirt.engine.core.compat.Guid jobId ) { org.ovirt.engine.core.common.job.Step step = new org.ovirt.engine.core.common.job.Step ( ) ; step.setJobId ( jobId ) ; org.mockito.Mockito.when ( stepDao.getStepsByJobId ( org.mockito.Matchers.eq ( jobId ) ) ) . thenReturn ( java.util.Collections.singletonList ( step ) ) ; }
public void setSelectionAlgorithm ( org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm value ) { this . selectionAlgorithm = value ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( UsbType.NATIVE ) ; assertEquals ( UsbPolicy.DISABLED , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED ) ) ; }
public boolean isSetValue ( ) { return ( this . value ) != null ; }
public java.util.List < java.lang.String > getMessages ( org.ovirt.engine.core.compat.Guid hostId ) { if ( messages.containsKey ( hostId ) ) { return messages.get ( hostId ) ; } else { return null ; } }
public void setTemplate ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( template , value ) ) ) { template = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Template" ) ) ; } }
public java.lang.String getDisplayIp ( ) { return this . vmDynamic.getdisplay_ip ( ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface lookupInterfaceById ( java.lang.String id ) { for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : getCollection ( ) ) { if ( iface.getId ( ) . toString ( ) . equals ( id ) ) { return iface ; } } return null ; }
public static java.util.List < java.lang.String > runAndAssertValidateFailure ( java.lang.String assertionMessage , org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.EngineMessage message ) { org.junit.Assert.assertFalse ( "Command's validate expected to fail, but succeeded" , command.validate ( ) ) ; return org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( assertionMessage , command , message ) ; }
private void RemoveVdsFromCollection ( ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ) ; }
public void InternalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status ) { InternalSetVmStatus ( vm , status , VmExitStatus.Normal , StringUtils.EMPTY , VmExitReason.Unknown ) ; }
private void updateVmDevices ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct [ ] vms ) { for ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct vm : vms ) { processVmDevices ( vm ) ; } }
protected final void addCanDoActionMessages ( org.ovirt.engine.core.common.errors.EngineMessage ... messages ) { for ( org.ovirt.engine.core.common.errors.EngineMessage msg : messages ) { addCanDoActionMessage ( msg ) ; } }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE , null ) , UsbPolicy.ENABLED_NATIVE ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.UNFILTERED ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskVmElementUsingScsiReserevation ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.String getError ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getVdsErrorsTranslator ( ) . TranslateErrorTextSingle ( org.ovirt.engine.core.bll.storage.pool.SetStoragePoolStatusCommand.getParameters ( ) . getError ( ) . toString ( ) ) ; }
public void run ( ) { int mSecToWait = ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.DisableFenceAtStartupInSec ) ) * 1000 ; org.ovirt.engine.core.utils.ThreadUtils.sleep ( mSecToWait ) ; startHosts ( hostsWithPMInReboot ) ; }
public void UpdateVmConfigurationBySnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get ( snapshotId ) ; snapshotModel.UpdateVmConfiguration ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol resolveSelectedProtocol ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { return consoleModelsCache.resolveSelectedProtocol ( item ) ; }
protected org.ovirt.engine.core.common.businessentities.OriginType getRawValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . getOrigin ( ) ; }
public void onFailureTryNextAgent ( ) { mockExecutor ( agent1 , false ) ; mockExecutor ( agent2 , true ) ; mockCheckStatus ( "on" ) ; command.executeCommand ( ) ; org.junit.Assert.assertTrue ( command.getSucceeded ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult checkStorageDomainSharedStatusNotLocked ( ) { if ( ( storageDomain ) != null ) { if ( ( storageDomain.getStorageDomainSharedStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Locked ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void setNonOperationalReasonEntity ( org.ovirt.engine.core.common.businessentities.NonOperationalReason value ) { if ( ( nonOperationalReasonEntity ) != value ) { nonOperationalReasonEntity = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "NonOperationalReasonEntity" ) ) ; } }
protected void executeVmCommand ( ) { super . executeVmCommand ( ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm ( null ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm ( ) . setvmt_guid ( VmTemplateHandler.BlankVmTemplateId ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVmStaticDao ( ) . update ( org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm ( ) . getStaticData ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return java.lang.String.valueOf ( disk.getLun ( ) . getPathCount ( ) ) ; }
public void testNullGuidListValues ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.compat.Guid.createGuidListFromString ( null ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < > ( ) ; org.junit.Assert.assertEquals ( expectedList , stringList ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { updateDisksStorage ( storageDomain , disksList ) ; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator ( storageDomain ) ; return ( storageDomainValidator.isDomainWithinThresholds ( ) . isValid ( ) ) && ( storageDomainValidator.hasSpaceForClonedDisks ( disksList ) . isValid ( ) ) ; }
public void validate_vmNameExists_Test ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ) . when ( affinityGroupDao ) . getByName ( org.mockito.Matchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS ) ; }
protected void EntityChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { super . EntityChanging ( newValue , oldValue ) ; entitiesChanged = calculateEntitiesChanged ( newValue , oldValue ) ; }
private org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilder createBuilder ( ) { final org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderFactory vmInfoBuilderFactory = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.vdsbroker.builder.vminfo.VmInfoBuilderFactory.class ) ; return vmInfoBuilderFactory.createVmInfoBuilder ( vm , org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters ( ) . getVdsId ( ) , createInfo ) ; }
public void testVeryLong ( ) { org.ovirt.engine.api.types.V4Vm object = objectFromXml ( "<vm><memory>92233720368547758070</memory></vm>" ) ; org.junit.Assert.assertEquals ( java.math.BigInteger.TEN.multiply ( java.math.BigInteger.valueOf ( java.lang.Long.MAX_VALUE ) ) , object.getMemory ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey ) ;
public java.lang.String getVdcObjectName ( ) { org.ovirt.engine.core.common.businessentities.Permission perms = org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) ; return org.ovirt.engine.core.bll.PermissionsCommandBase.getDbFacade ( ) . getEntityNameByIdAndType ( perms.getObjectId ( ) , perms.getObjectType ( ) ) ; }
public void testGetAllEntitiesForStorageDomainWithNoUnregisteredEntities ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao.getAllForStorageDomainByEntityType ( FixturesTool.STORAGE_DOAMIN_NFS2_2 , null ) ; org.junit.Assert.assertTrue ( "No entities should be fetched for the specified storage domain" , ovfEntityDataList.isEmpty ( ) ) ; }
public void updateVisibility ( ) { super . updateVisibility ( ) ; attachPanel.setVisible ( false ) ; clusterTab.setVisible ( false ) ; toggleSubnetVisibility ( false ) ; }
private void initStyles ( ) { nameEditor.addContentWidgetStyleName ( style.name ( ) ) ; publicUseEditor.addContentWidgetStyleName ( style.publicUse ( ) ) ; networkQoSEditor.addContentWidgetStyleName ( style.qos ( ) ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolEqual ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocol ( true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void shutdown ( ) { org.ovirt.engine.core.common.businessentities.VM entity = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getItem ( ) . getEntity ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.ShutdownVm , new org.ovirt.engine.core.common.action.ShutdownVmParameters ( entity.getId ( ) , true ) ) ; }
public int Integer ( ) { return java.lang.Integer.parseInt ( subject.getEntity ( ) . toString ( ) ) ; }
public void getUsbPolicySetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup ) , UsbPolicy.DISABLED ) ; }
public int getnum_of_cpus ( ) { return this . mVmStatic.getnum_of_cpus ( ) ; }
protected void initializeVdsError ( org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus ) { org.ovirt.engine.core.common.errors.VDSError tempVar = new org.ovirt.engine.core.common.errors.VDSError ( ) ; tempVar.setCode ( returnStatus ) ; tempVar.setMessage ( getReturnStatus ( ) . mMessage ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getVDSReturnValue ( ) . setVdsError ( tempVar ) ; }
public void testUpdateStatus ( ) { dao.updateStatus ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID , ImageStatus.LOCKED ) ; org.ovirt.engine.core.common.businessentities.storage.Image imageFromDb = dao.get ( org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID ) ; org.junit.Assert.assertNotNull ( imageFromDb ) ; org.junit.Assert.assertEquals ( ImageStatus.LOCKED , imageFromDb.getStatus ( ) ) ; }
protected void AlertIfPowerManagementOperationSkipped ( java.lang.String operation ) { Alert ( AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED , operation ) ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setvds_group_id ( vdsGroupId ) ; vdsGroup.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( ) ) ; vdsGroup.setstorage_pool_id ( storagePoolId ) ; return vdsGroup ; }
public void updateVolumeStatus ( org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus newStatus ) { getGlusterVolumeDao ( ) . updateVolumeStatus ( volumeId , newStatus ) ; updateBricksStatuses ( volumeId , newStatus ) ; }
public void testMarkHostDevicesUsedByVmId ( ) { dao.markHostDevicesUsedByVmId ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = dao.getHostDeviceByHostIdAndDeviceName ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , hostDevice.getVmId ( ) ) ; }
private org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getPoolWithoutLocking ( org.ovirt.engine.core.compat.Guid macPoolId ) { final org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy result = macPools.get ( macPoolId ) ; if ( result == null ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.INEXISTENT_POOL_EXCEPTION_MESSAGE ) ; } return result ; }
public void setOsType ( org.ovirt.engine.core.common.businessentities.VmOsType value ) { setOs ( value ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > getAll ( ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromLUNs" , org.ovirt.engine.core.dao.LunDAODbFacadeImpl.MAPPER , parameterSource ) ; }
public void shouldDetectPassThroughDeviceOnVM ( ) { org.mockito.Mockito.when ( hostDeviceManager.checkVmNeedsDirectPassthrough ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH ) ) ; }
private boolean findDefaultManagementNetwork ( ) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup ( ) . getStoragePoolId ( ) ) ; if ( ( managementNetwork ) == null ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND ) ; return false ; } return true ; }
protected void onAdd ( T value , V widget ) { modelItems.add ( value ) ; }
public void testCanDoActionTemplateWithNoDomain ( ) { disk.setVmEntityType ( VmEntityType.TEMPLATE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CANT_DELETE_TEMPLATE_DISK_WITHOUT_SPECIFYING_DOMAIN ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) , LockMessagesMatchUtil.STORAGE ) ; }
public void macAddressTooLongForUpdate ( ) throws java.lang.Exception { assertMacAddressFormatValidation ( ( ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS ) + ":00" ) , org.ovirt.engine.core.common.validation.group.UpdateEntity.class , true ) ; }
public void handleVdsMaintenanceTimeout ( final org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( java.util.Arrays.asList ( vds.getId ( ) ) , true ) ) ; }
protected boolean canDoAction ( ) { return canPauseVm ( org.ovirt.engine.core.bll.PauseVmCommand.getParameters ( ) . getVmId ( ) , org.ovirt.engine.core.bll.PauseVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
protected abstract void onExportChanged ( ) ;
protected void moveOrCopyAllImageGroups ( ) { moveOrCopyAllImageGroups ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getId ( ) , getDisksBasedOnImage ( ) ) ; }
private boolean shouldProcessVdsDomainReport ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return ( StoragePoolDomainHelper.reportingVdsStatus.contains ( vds.getStatus ( ) ) ) && ( vds.getVdsGroupSupportsVirtService ( ) ) ; }
private void readUsbItem ( org.ovirt.engine.core.compat.backendcompat.XmlNode node ) { vmBase.setUsbPolicy ( org.ovirt.engine.core.common.businessentities.UsbPolicy.forStringValue ( node.SelectSingleNode ( "rasd:UsbPolicy" , _xmlNS ) . innerText ) ) ; }
private void UpdateActionAvailability ( ) { getRemoveCommand ( ) . setIsExecutionAllowed ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) > 0 ) ) ) ; }
public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap getMarkedAsSpecial ( ) { return filter ( new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap.Predicate ( ) { @ java.lang.Override public boolean apply ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig config ) { return config.isMarkedAsSpecial ( ) ; } } ) ; }
public void networkDoesntExist ( ) { org.mockito.Mockito.when ( networkDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_HAVING_ID_NOT_EXISTS ) ) ; }
private javax.ws.rs.core.Response removeRestrictedInfoFromResponse ( javax.ws.rs.core.Response response ) { if ( isFiltered ( ) ) { org.ovirt.engine.api.model.VM vm = ( ( org.ovirt.engine.api.model.VM ) ( response.getEntity ( ) ) ) ; removeRestrictedInfoFromVM ( vm ) ; } return response ; }
public void Iterate ( org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorFunc < T > func , org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate < T > action ) { Iterate ( func , action , null ) ; }
public void setIsEmpty ( boolean value ) { if ( ( isEmpty ) != value ) { isEmpty = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "IsEmpty" ) ) ; } }
public void shouldDetectSameOs ( ) { org.hamcrest.MatcherAssert.assertThat ( new org.ovirt.engine.core.bll.scheduling.OS ( "os1" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) . isSameOs ( new org.ovirt.engine.core.bll.scheduling.OS ( "os1" , new org.ovirt.engine.core.compat.Version ( "6.3" ) ) ) , org.hamcrest.core.Is.is ( true ) ) ; }
public org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel < ? > getTableSelectionModel ( ) { return null ; }
protected void revertTask ( ) { org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImageSnapshotsStatus ( getEnclosingCommand ( ) . getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( ( vmBase.getDefaultDisplayType ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) { return getQxlVideoDeviceSpecParams ( vmBase ) ; } else { return getVgaVideoDeviceSpecParams ( ) ; } }
public void testValidateNetworkExclusiveOnNicsTwoVmNetworksAttachedToInterface ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK ) , vmNetwork1 , vmNetwork2 ) ; }
public void setColumn ( int column ) { this . column = column ; }
public void testStorageDomainForMemoryIsValidOnlyForDataTypes ( org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType ) { storageDomain.setStorageDomainType ( storageDomainType ) ; org.junit.Assert.assertEquals ( filter.getPredicate ( disksList ) . eval ( storageDomain ) , storageDomainType.isDataDomain ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomain getEntity ( ) { return ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( super . getEntity ( ) ) instanceof org.ovirt.engine.core.common.businessentities.StorageDomain ? super . getEntity ( ) : null ) ) ; }
protected org.ovirt.engine.api.model.Bookmark lookupBookmarkByName ( final java.lang.String name ) { return getEntity ( org.ovirt.engine.api.model.Bookmark.class , VdcQueryType.GetBookmarkByBookmarkName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , name ) ; }
private boolean isConcreteClass ( java.lang.Class < ? extends org.ovirt.engine.core.dao.DAO > clazz ) { return ! ( ( clazz.isInterface ( ) ) || ( java.lang.reflect.Modifier.isAbstract ( clazz.getModifiers ( ) ) ) ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . getVmName ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDAO ( ) . addVmToPool ( new org.ovirt.engine.core.common.businessentities.vm_pool_map ( org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmId ( ) , org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolId ( ) ) ) ; org.ovirt.engine.core.bll.AddVmToPoolCommand.setSucceeded ( true ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) ; }
private org.ovirt.engine.core.common.businessentities.Disk loadDiskById ( org.ovirt.engine.core.compat.Guid id ) { return org.ovirt.engine.core.bll.AttachDiskToVmCommand.getDiskDao ( ) . get ( id ) ; }
public static void main ( java.lang.String [ ] args ) throws java.lang.Exception { org.ovirt.engine.sdk4.Connection connection = org.ovirt.engine.sdk4.ConnectionBuilder.connection ( ) . url ( "https://engine40.example.com/ovirt-engine/api" ) . user ( "admin@internal" ) . password ( "redhat123" ) . trustStoreFile ( "truststore.jks" ) . build ( ) ; org.ovirt.engine.sdk4.services.HostsService hostsService = connection.systemService ( ) . hostsService ( ) ; org.ovirt.engine.sdk4.types.Host host = hostsService.add ( ) . host ( org.ovirt.engine.sdk4.builders.Builders.host ( ) . name ( "myhost" ) . description ( "My host" ) . address ( "node40.example.com" ) . rootPassword ( "readhat123" ) . cluster ( org.ovirt.engine.sdk4.builders.Builders.cluster ( ) . name ( "mycluster" ) ) ) . send ( ) . host ( ) ; org.ovirt.engine.sdk4.services.HostService hostService = hostsService.hostService ( host.id ( ) ) ; for ( ; ; ) { java.lang.Thread.sleep ( ( 5 * 1000 ) ) ; host = hostService.get ( ) . send ( ) . host ( ) ; java.lang.String state = host.status ( ) . state ( ) ; if ( "up" . equals ( state ) ) { break ; } } connection.close ( ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { setVdsmId ( ( ( java.lang.String ) ( _parser.cliEnvironmentGet ( VdsmEnv.VDSM_ID ) ) ) ) ; return null ; }
public static java.util.Collection < java.lang.Object [ ] > data ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { org.ovirt.engine.core.bll.GetImagesListByStoragePoolIdQuery.class , org.ovirt.engine.core.common.businessentities.ImageFileType.ISO } , new java.lang.Object [ ] { org.ovirt.engine.core.bll.GetImagesListByStoragePoolIdQuery.class , org.ovirt.engine.core.common.businessentities.ImageFileType.Floppy } } ) ; }
public void macAddressIsNullForUpdate ( ) throws java.lang.Exception { assertNicValidation ( createNic ( null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_NAME , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , org.ovirt.engine.core.common.validation.group.UpdateEntity.class , false , VmNetworkInterface.VALIDATION_MESSAGE_MAC_ADDRESS_NOT_NULL ) ; }
public void testDisk ( ) { testValidSql ( "disk: " , "SELECT * FROM ((SELECT all_disks.* FROM all_disks ) ORDER BY disk_alias ASC, disk_id ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "disk: alias=vm1" , "SELECT * FROM ((SELECT all_disks.* FROM all_disks WHERE all_disks.disk_alias LIKE vm1 ) ORDER BY disk_alias ASC, disk_id ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ExternalVm vm ) { return vm.getName ( ) ; }
public void setIsVolumeFormatChangable ( boolean isVolumeFormatChangable ) { if ( ( this . isVolumeFormatChangable ) != isVolumeFormatChangable ) { this . isVolumeFormatChangable = isVolumeFormatChangable ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "VolumeFormat" ) ) ; } }
public void testCommonX86 ( ) { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu ( ArchitectureType.x86 , new java.lang.Integer ( 16 ) , new java.lang.Integer ( 288 ) , 2 , 12 ) ; org.junit.Assert.assertEquals ( new java.lang.Integer ( 192 ) , maxVCpu ) ; }
public void validateFailsOnNoBrick ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand2 ( volumeId4 ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testSubResourceLocatorBadGuid ( ) { try { resource.getApplicationResource ( "foo" ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void setSelectedItem ( java.lang.Object value ) { super . setSelectedItem ( value ) ; OnEntityChanged ( ) ; }
public void setVmToHostAssignments ( java.util.Map < java.lang.String , java.lang.String > vmToHostAssignments ) { this . vmToHostAssignments = vmToHostAssignments ; }
private java.lang.String createTemplateSharedLockMessage ( ) { return new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM.name ( ) ) . append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmName ( ) ) ) . toString ( ) ; }
protected boolean isHotPlugDiskSnapshotSupported ( ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.hotPlugDiskSnapshot ( org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVds ( ) . getVdsGroupCompatibilityVersion ( ) ) ) ) { return failValidation ( EngineMessage.HOT_PLUG_DISK_SNAPSHOT_IS_NOT_SUPPORTED ) ; } return true ; }
public void testRemoveVmPool ( ) { dao.remove ( deletableVmPool.getVmPoolId ( ) ) ; org.ovirt.engine.core.common.businessentities.VmPool result = dao.get ( deletableVmPool.getVmPoolId ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( getProblematicVdsId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VDS_FENCE , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public java.util.ArrayList < java.lang.String > getChangeablePropertiesList ( ) { return org.ovirt.engine.core.common.businessentities.VM.vmProperties ; }
private static boolean topLevel ( java.lang.String name ) { return ( name.indexOf ( "." ) ) == ( - 1 ) ; }
public org.ovirt.engine.api.model.OpenStackImage get ( ) { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackStorageProviderHelper.getStorageDomainId ( this , providerId ) ; return performGet ( VdcQueryType.GetImageById , new org.ovirt.engine.core.common.queries.GetImageByIdParameters ( storageDomainId , id ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllServers ( org.ovirt.engine.core.compat.Guid clusterId ) { return getVdsDao ( ) . getAllForVdsGroup ( clusterId ) ; }
public boolean isAction ( ) { switch ( getName ( ) . toString ( ) . toLowerCase ( ) ) { case "add" : case "get" : case "list" : case "update" : case "remove" : return false ; default : return true ; } }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { performLogin ( loginModel ) ; }
private boolean importSupported ( org.ovirt.engine.core.compat.Version spVersion , org.ovirt.engine.core.compat.Version vdsGroupVersion ) { return ( ( spVersion.greaterOrEquals ( Version.v3_5 ) ) && ( vdsGroupVersion.greaterOrEquals ( Version.v3_6 ) ) ) && ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.AutoImportHostedEngine ) ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage getDisk ( org.ovirt.engine.core.compat.Guid diskId ) { return runInternalQuery ( VdcQueryType.GetDiskByDiskId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( diskId ) ) . getReturnValue ( ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__CHANGE_CD ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__VM ) ; }
public void testIsNotLocalFsWithDefaultClusterWhenClusterIsDefault ( ) { storagePool.setIsLocal ( true ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . containsDefaultCluster ( ) ; org.junit.Assert.assertThat ( validator.isNotLocalfsWithDefaultCluster ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ) ; }
public javax.ws.rs.core.Response performAction ( org.ovirt.engine.core.common.action.VdcActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.api.model.Action action ) { return performAction ( task , params , action , false ) ; }
protected void setActionMessageParameters ( ) { addValidationMessage ( EngineMessage.VAR__ACTION__REFRESH ) ; addValidationMessage ( EngineMessage.VAR__TYPE__GLUSTER_GEOREP_SESSION ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
private void setRootDSE ( org.ovirt.engine.extensions.aaa.builtin.kerberosldap.Domain domainObject , org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType , javax.naming.directory.Attributes rootDseRecords ) throws javax.naming.NamingException { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.RootDSE rootDSE ; rootDSE = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.RootDSEFactory.get ( ldapProviderType , rootDseRecords ) ; domainObject.setRootDSE ( rootDSE ) ; domainObject.setLdapProviderType ( ldapProviderType ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider getProvider ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getProviderDao ( ) . get ( org.ovirt.engine.core.bll.GetHostListFromExternalProviderQuery.getParameters ( ) . getProviderId ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getQueryReturnValue ( ) . setReturnValue ( getDirectoryUser ( org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getDbFacade ( ) . getDbUserDao ( ) . get ( org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters ( ) . getId ( ) ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel flush ( ) { return networks.flush ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > getUserRequestForStorageDomainRepoFileList ( ) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) . getUserRequestForStorageDomainRepoFileList ( getStorageDomainId ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getImageType ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getForceRefresh ( ) ) ; }
public void setSelectedItem ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView value ) { super . setSelectedItem ( value ) ; updateLinkChangability ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters ( ) . getAgent ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.RemoveFenceAgentCommand.setSucceeded ( true ) ; }
public void getQosByDiskProfileId ( ) { org.ovirt.engine.core.common.businessentities.qos.StorageQos qos = dao.getQosByDiskProfileId ( FixturesTool.DISK_PROFILE_1 ) ; org.junit.Assert.assertNotNull ( qos ) ; org.junit.Assert.assertEquals ( FixturesTool.QOS_ID_1 , qos.getId ( ) ) ; }
public final java.lang.String getDestinationVdsName ( ) { return ( getDestinationVds ( ) ) != null ? getDestinationVds ( ) . getName ( ) : null ; }
protected org.ovirt.engine.api.model.NIC populate ( org.ovirt.engine.api.model.NIC model , org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity ) { return addStatistics ( model , entity , uriInfo , httpHeaders ) ; }
public void New ( ) { commandType = org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel.CommandType.New ; org.ovirt.engine.core.common.businessentities.Role role = new org.ovirt.engine.core.common.businessentities.Role ( ) ; InitRoleDialog ( role ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { iface.getMAC ( ) . setIsChangable ( enableManualMacCheckbox.getValue ( ) ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase executeMigration ( org.ovirt.engine.core.common.action.MigrateVmParameters parameters ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
public javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.WatchDogs > createWatchdogs ( org.ovirt.engine.sdk.entities.WatchDogs value ) { return new javax.xml.bind.JAXBElement < org.ovirt.engine.sdk.entities.WatchDogs > ( org.ovirt.engine.sdk.entities.ObjectFactory._Watchdogs_QNAME , org.ovirt.engine.sdk.entities.WatchDogs.class , null , value ) ; }
protected void logMonitorLockReleased ( java.lang.String commandName ) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.VdsCommand.getVds ( ) ; log.infoFormat ( ( commandName + " finished. Lock released. Monitoring can run now for host {0} from data-center {1}" ) , vds.getName ( ) , vds.getStoragePoolName ( ) ) ; }
public void testExtractVariableDeclarationsForStaticMsgs ( ) { java.util.List < java.lang.String > msgs = java.util.Arrays.asList ( "ACTION_TYPE_FAILED_TEMPLATE_IS_USED_FOR_CREATE_VM" , "IRS_FAILED_RETRIEVING_SNAPSHOT_INFO" ) ; org.junit.Assert.assertTrue ( "extractVariableDeclarations didn't return the same static messages" , org.apache.commons.collections.CollectionUtils.isEqualCollection ( msgs , command.extractVariableDeclarations ( msgs ) ) ) ; }
public com.google.gwt.event.shared.HandlerRegistration addValueChangeHandler ( com.google.gwt.event.logical.shared.ValueChangeHandler handler ) { return org.ovirt.engine.ui.userportal.widget.popup.console.EntityModelValueCheckbox.asCheckBox ( ) . addValueChangeHandler ( new ValueChangeHandlerDecorator ( handler ) ) ; }
public void setvm_description ( java.lang.String value ) { this . mVmStatic.setdescription ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "vm_description" ) ) ; }
private void ExpandAll ( ) { SetIsExpandedRecursively ( true , getItems ( ) . get ( 0 ) ) ; }
public void qosBondSpeedReported ( ) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosBondSpeedSetup ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED , null ) ; validateAndExpectNoViolations ( helper ) ; }
public void canDoActionFailedVMNotFound ( ) throws java.lang.Exception { mockNullVm ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , java.lang.String description , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType snapshotType , org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addSnapshot ( snapshotId , description , SnapshotStatus.LOCKED , snapshotType , vm , true , StringUtils.EMPTY , compensationContext ) ; }
protected org.ovirt.engine.core.common.businessentities.tags lookupTagByName ( java.lang.String name ) { return getEntity ( org.ovirt.engine.core.common.businessentities.tags.class , VdcQueryType.GetTagByTagName , new org.ovirt.engine.core.common.queries.GetTagByTagNameParameters ( name ) , name ) ; }
private void setNonOperational ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , org.ovirt.engine.core.common.businessentities.VDS vds ) { vds.setNonOperationalReason ( reason ) ; vds.setStatus ( VDSStatus.NonOperational ) ; vdsDynamicDao.update ( vds.getDynamicData ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getEntity ( int index ) { return setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.class ) , index , false ) ; }
public boolean isMultiDisplay ( ) { return true ; }
public static java.util.Map < org.ovirt.engine.core.common.businessentities.VmDevice , java.lang.Integer > getVmDeviceUnitMapForSpaprScsiDisks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getVmDeviceUnitMapForScsiDisks ( vm , DiskInterface.SPAPR_VSCSI , true ) ; }
public boolean IsVmInAsyncRunningList ( org.ovirt.engine.core.compat.Guid vmId ) { return asyncRunningVms.contains ( vmId ) ; }
protected void verify ( org.ovirt.engine.api.model.Qos model , org.ovirt.engine.api.model.Qos transform ) { super . verify ( model , transform ) ; assertEquals ( model.getCpuLimit ( ) , transform.getCpuLimit ( ) ) ; }
protected java.lang.String getSuffixCauseToClonedNameCollisionMessage ( java.lang.String existingName ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . suffixCauseToClonedTemplateNameCollision ( existingName ) ; }
public void validateFailsWithEmptyBricks ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( getVolume ( 0 , false ) ) ) ; prepareMocks ( cmd ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED ) ; }
public void callToVDSMFailed ( org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data ) { stubFailedCalls ( ) ; org.junit.Assert.assertFalse ( vmsListFetcher.fetch ( ) ) ; }
private static java.lang.String generateJsonEntry ( java.lang.String key , java.lang.String value ) { return java.lang.String.format ( "\"%s\":\"%s\"" , key , value ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > getAll ( ) { throw new org.apache.commons.lang.NotImplementedException ( ) ; }
public org.ovirt.engine.api.resource.AssignedVnicProfilesResource getVnicProfilesResource ( ) { return null ; }
public void saveAsyncTaskToDb ( final org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAsyncTaskDao ( ) . save ( asyncTask ) ; persistCommand ( copyToCommandEntity ( asyncTask , commandsCache.get ( asyncTask.getCommandId ( ) ) ) ) ; }
public void attachUserGroupToTag ( org.ovirt.engine.core.common.businessentities.tags_user_group_map tagUserGroupMap ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "group_id" , tagUserGroupMap.getgroup_id ( ) ) . addValue ( "tag_id" , tagUserGroupMap.gettag_id ( ) ) ; getCallsHandler ( ) . executeModification ( "Inserttags_user_group_map" , parameterSource ) ; }
public abstract void persistCommand ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid rootCommandId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase params , org.ovirt.engine.core.compat.CommandStatus status , boolean enableCallBack ) ;
public java.util.Map < java.lang.String , java.lang.Object > validateStorageDomain ( java.lang.String sdUUID ) ;
public org.ovirt.engine.core.common.queries.VdcQueryParametersBase withRefresh ( ) { setRefresh ( true ) ; return this ; }
public void testGetInnerJoin ( ) { org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter comp = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter ( true ) ; assertNotNull ( "Sanity test" , comp.getInnerJoin ( "EVENT" , "USER" ) ) ; }
public void setIsPoolTabValid ( boolean value ) { if ( ( isPoolTabValid ) != value ) { isPoolTabValid = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "IsPoolTabValid" ) ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes , getPmType ( ) ) ; updatePmTypeList ( pmTypes , getPmSecondaryType ( ) ) ; }
public boolean DisconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { return RunConnectionStorageToDomain ( storageDomain , vdsId , VdcActionType.RemoveStorageServerConnection.getValue ( ) ) ; }
public static com.google.gwt.resources.client.ImageResource getResource ( org.ovirt.engine.core.common.businessentities.network.InterfaceStatus status ) { switch ( status ) { case Up : return org.ovirt.engine.ui.webadmin.widget.host.InterfaceStatusImage.resources.upImage ( ) ; case None : case Down : default : return org.ovirt.engine.ui.webadmin.widget.host.InterfaceStatusImage.resources.downImage ( ) ; } }
public void testGetWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
protected void logSettingVmToDown ( org.ovirt.engine.core.compat.Guid vdsId , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vdsId , vmId ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE ) ; }
public java.lang.String GetTagIdAndChildrenIds ( org.ovirt.engine.core.bll.Guid tagId ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagIdAndChildrenIds ( tagId ) ; }
public void setIsDirectLunDiskAvaialable ( org.ovirt.engine.ui.uicommonweb.models.EntityModel value ) { isDirectLunDiskAvaialable = value ; }
public void setpm_password ( java.lang.String value ) { mVdsStatic.setpm_password ( value ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByConnId ( java.lang.String connectionId ) { return org.ovirt.engine.core.bll.storage.AddStorageDomainCommon.getStorageDomainDAO ( ) . getAllByConnectionId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( connectionId ) ) ; }
public void testValidModifiedBondsFailsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , bond.getName ( ) ) ) , ValidationResult.VALID ) ; }
public int getnum_of_sockets ( ) { return this . mVmStatic.getnum_of_sockets ( ) ; }
public void UpdateIsDisksAvailable ( ) { }
private org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister createPersister ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > userNetworkAttachments , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ... hostInterfaces ) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister ( networkAttachmentDao , hostId , new java.util.ArrayList ( java.util.Arrays.asList ( hostInterfaces ) ) , customPropertiesForNics , userNetworkAttachments , clusterNetworks ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result2 ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel2 = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result2.getState ( ) ) ) ; localModel2.StopProgress ( ) ; Cancel ( ) ; }
protected java.lang.String composeMessage ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . newNameWithSuffixCannotContainBlankOrSpecialChars ( maxClonedNameLength ) ; }
public java.util.Date getCpuOverCommitTimestamp ( ) { return mVdsDynamic.getcpu_over_commit_time_stamp ( ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createDetachedDefaultVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ; group.setstorage_pool_id ( null ) ; return group ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , name , true , null , null , null , networkName , true , null , false , null ) ; }
public static void removeConsoleDevices ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeVmDevices ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.getConsoleDevices ( vmId ) ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.vms.ISpice asSpice ( org.ovirt.engine.ui.uicommonweb.models.VmConsoles vmConsoles ) { return vmConsoles.getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class ) . getspice ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByHosts ( ) { return networkNotUsed ( getDbFacade ( ) . getVdsDao ( ) . getAllForNetwork ( network.getId ( ) ) , VdcBllMessages.VAR__ENTITIES__HOSTS , VdcBllMessages.VAR__ENTITIES__HOST ) ; }
public void checkEmptyStringAllowed ( ) { underTest = new org.ovirt.engine.ui.uicommonweb.validation.KeyValueFormatValidation ( mockConstantsManager , true ) ; org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate ( "" ) ; org.junit.Assert.assertEquals ( successfulValidationResult , validationResult ) ; }
private void handleException ( java.lang.Throwable e ) { log.error ( java.lang.String.format ( "Failed to import certificate: %1$s" , e.getMessage ( ) ) ) ; log.debug ( "Exception" , e ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_IMPORT_CERTIFICATE_ERROR , e.getMessage ( ) ) ; }
private java.lang.String getUPN ( org.ovirt.engine.core.common.users.VdcUser vdcUser ) { java.lang.String retVal = vdcUser.getUserName ( ) ; if ( ! ( retVal.contains ( "@" ) ) ) { retVal = ( retVal + "@" ) + ( vdcUser.getDomainControler ( ) ) ; } return retVal ; }
private void qosExistsTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , org.ovirt.engine.core.bll.validator.NetworkQosValidator validator ) { org.junit.Assert.assertThat ( validator.qosExists ( ) , matcher ) ; }
org.ovirt.engine.core.common.businessentities.NonOperationalReason persistAndEnforceNetworkCompliance ( org.ovirt.engine.core.common.businessentities.VDS host , boolean skipManagementNetwork , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > userConfiguredNics ) ;
protected static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createHostNetworkAuditLog ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vds.getId ( ) ) ; logable.addCustomValue ( "NetworkName" , network.getName ( ) ) ; return logable ; }
public void testValidateImageNotActiveTrue ( ) { org.mockito.Mockito.when ( diskImageDAO.get ( mockSourceImage ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "validation should succeed" , cmd.validateImageNotActive ( ) ) ; }
public void CollapseAll ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel a : getEventGroupModels ( ) ) { a.setIsExpanded ( false ) ; } }
public java.util.HashSet < org.ovirt.engine.core.compat.Version > getSupportedENGINESVersionsSet ( ) { return this . mVdsDynamic.getSupportedENGINESVersionsSet ( ) ; }
public void testAttachVmToTag ( ) { dao.attachVmToTag ( newVmTag ) ; org.ovirt.engine.core.common.businessentities.TagsVmMap result = dao.getTagVmByTagIdAndByVmId ( newVmTag.gettag_id ( ) , newVmTag.getvm_id ( ) ) ; assertNotNull ( result ) ; assertEqualsTagsVmMap ( newVmTag , result ) ; }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText ) { com.google.gwt.user.cellview.client.Header < ? > header = new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( headerText ) ) ; addColumn ( column , header ) ; }
< T > org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor < T , ? > getFunctionalEditor ( com.google.gwt.editor.client.LeafValueEditor < T > editor ) { if ( editor instanceof org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor ) { return ( ( org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor < T , ? > ) ( editor ) ) ; } else { return null ; } }
public void updateWithCpuLowerThanHost ( ) { createCommandWithDefaultVdsGroup ( ) ; cpuExists ( ) ; cpuManufacturersMatch ( ) ; clusterHasVds ( ) ; cpuFlagsMissing ( ) ; architectureIsUpdatable ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS ) ; }
protected void AsyncSearch ( ) { super . AsyncSearch ( ) ; org.ovirt.engine.ui.uicompat.Task.Create ( this , null ) . InvokeUIThread ( ) ; }
java.util.List < java.lang.String > TranslateErrorText ( java.util.List < java.lang.String > errorMsg , java.util.Locale locale ) ;
public void validateCanDoAction ( ) { mockVMPoolDAO ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public org.ovirt.engine.sdk.web.HttpProxyBuilder debug ( boolean debug ) { this . debug = debug ; return this ; }
public void setIsExpanded ( boolean value ) { isExpanded = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsExpanded" ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > prepareImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID ) ;
public boolean checkProxyHostConnectionToHost ( ) { return runFencingAction ( FenceActionType.Status , FenceAgentOrder.Primary ) . getSucceeded ( ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getaction_parameters ( ) { return this . actionParameters ; }
protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos ) { return qos.getName ( ) ; }
public boolean checkIfCpusSameManufacture ( java.lang.String cpuName1 , java.lang.String cpuName2 , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get ( ver ) ; if ( cpuFlagsManager != null ) { return cpuFlagsManager.checkIfCpusSameManufacture ( cpuName1 , cpuName2 ) ; } return false ; }
public void updateAll ( java.lang.String procedureName , java.util.Collection < org.ovirt.engine.core.common.businessentities.VdsDynamic > entities ) { updateAll ( entities ) ; }
public void setTitle ( java.lang.String text ) { this . title = text ; }
public java.lang.Object getQueryableId ( ) { throw new org.ovirt.engine.core.common.businessentities.NotImplementedException ( "QueryableId not overridden in type" ) ; }
public void iscsiBondDoesNotExist ( ) { org.ovirt.engine.core.bll.ValidationResult res = validator.isIscsiBondExist ( null ) ; org.junit.Assert.assertEquals ( EngineMessage.ISCSI_BOND_NOT_EXIST , res.getMessage ( ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getMoveItemUpCommand ( ) ) ) { MoveItemUp ( ) ; } else if ( command == ( getMoveItemDownCommand ( ) ) ) { MoveItemDown ( ) ; } }
private boolean isDiskImage ( org.ovirt.engine.api.model.Disk disk ) { return ( disk.getDiskStorageType ( ) ) == org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.Disk ; }
public boolean isEnabled ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model : getNetworksTableItems ( ) ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel clusterNetworkManageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel ) ( model ) ) ; if ( clusterNetworkManageModel.getIsChangable ( ) ) { return true ; } } return false ; }
public void validateNonExternalJobFails ( ) throws java.lang.Exception { setupMock ( ) ; parameters.setJobId ( org.ovirt.engine.core.bll.EndExternalJobCommandTest.nonExternalJobId ) ; org.junit.Assert.assertTrue ( ( ! ( commandMock.validate ( ) ) ) ) ; }
public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface1 ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK ) , vmNetwork1 , vmNetwork2 ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel vmModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; vmModel.set_MaxMemSize64 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getNewVolumeCommand ( ) ; }
public void nameIsNullForDefault ( ) throws java.lang.Exception { assertNicValidation ( createNic ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS , null , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterfaceValidationTest.VALID_NIC_TYPE ) , javax.validation.groups.Default.class , false , VmNetworkInterface.VALIDATION_MESSAGE_NAME_NOT_NULL ) ; }
public int compareTo ( org.ovirt.api.metamodel.concepts.Concept that ) { return this . getName ( ) . compareTo ( that.getName ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.users.VdcUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getUserId ( ) ) ; params.setSessionId ( getSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . Logoff ( params ) ; return returnValue ; }
protected void setActionMessageParameters ( ) { super . setActionMessageParameters ( ) ; addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__ADD ) ; }
public org.ovirt.engine.api.v3.types.V3Template update ( org.ovirt.engine.api.v3.types.V3Template template ) { return adaptUpdate ( delegate :: update , template ) ; }
public void asGraphicsTypeInverseOfAsConsoleId ( org.ovirt.engine.core.common.businessentities.GraphicsType type ) { org.junit.Assert.assertEquals ( type , org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asGraphicsType ( org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId ( type ) ) ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage image , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImage ( image , image.getactive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getstorage_ids ( ) . get ( 0 ) ) , vmId ) ; }
protected void executeCommand ( ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice watchdog : getWatchdogs ( ) ) { getVmDeviceDao ( ) . remove ( watchdog.getId ( ) ) ; } setSucceeded ( true ) ; }
public void Configure ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel ) { searchableListModel.setIsAsync ( getIsAsync ( ) ) ; }
private void updateVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { setVolumeFormat ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDiskVolumeFormat ( volumeType , storageType ) ) ; }
private void ProcessExceptionToClient ( org.ovirt.engine.core.common.errors.VdcFault fault ) { fault.setSessionID ( getParameters ( ) . getSessionId ( ) ) ; _returnValue.setFault ( fault ) ; }
private com.google.gwt.safehtml.shared.SafeHtml listItem ( java.lang.String msg ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.templates.listItem ( com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( msg ) ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( "CancelError" . equals ( command.getName ( ) ) ) { parentModel.setConfirmWindow ( null ) ; } }
private void loadProviders ( ) { switch ( importSources.getSelectedItem ( ) ) { case VMWARE : loadVmwareProviders ( ) ; break ; case KVM : loadKvmProviders ( ) ; break ; default : } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceEntity = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity ) ( returnValue ) ) ; showStatus ( rebalanceEntity ) ; }
public void setSpmPriorityValue ( java.lang.Integer value ) { if ( spmInitialized ) { UpdateSpmPriority ( value ) ; } else { postponedSpmPriority = value ; } }
public void testCanDoActionStorageDomainIsFileStorage ( ) { storageDomain.setStorageType ( StorageType.NFS ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_ALIGNMENT_SCAN_STORAGE_TYPE ) ; }
public org.ovirt.engine.core.common.businessentities.MigrationSupport getMigrationSupport ( ) { return this . mVmStatic.getMigrationSupport ( ) ; }
public boolean isValid ( java.lang.String field , java.lang.String value ) { return org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.validChar.IsMatch ( value ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser getExpectedResult ( ) { return new org.ovirt.engine.core.common.businessentities.LdapUser ( NAME_TO_SEARCH , "melon!" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , DOMAIN ) ; }
private org.ovirt.engine.core.common.businessentities.VM getEntity ( java.lang.Object object ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getVm ( ) ; }
private org.ovirt.engine.core.dao.StoragePoolDAO getStoragePoolDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.HostEnrollCertificateInternal , getParameters ( ) , cloneContextAndDetachFromParent ( ) ) ; setSucceeded ( true ) ; }
protected void setupSelectedProtocol ( final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model ) { selectedProtocol = consoleUtils.determineDefaultProtocol ( model ) ; }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForNewDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { double availableSize = storageDomain.getAvailableDiskSizeInBytes ( ) ; double totalSizeForDisks = getTotalSizeForNewDisks ( diskImages ) ; return validateRequiredSpace ( availableSize , totalSizeForDisks ) ; }
private org.ovirt.engine.core.common.businessentities.AuditLog getEventWithOvirtOrigin ( ) { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = new org.ovirt.engine.core.common.businessentities.AuditLog ( ) ; auditLog.setaudit_log_id ( org.ovirt.engine.core.bll.RemoveExternalEventCommandTest.EVENT_ID_2 ) ; auditLog.setOrigin ( org.ovirt.engine.core.bll.RemoveExternalEventCommandTest.OVIRT_ORIGIN ) ; return auditLog ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VdsNumaNode > ( ) ; } return source ; }
public void clearAsyncTask ( ) { if ( Guid.Empty.equals ( getVdsmTaskId ( ) ) ) { RemoveTaskFromDB ( ) ; return ; } clearAsyncTask ( false ) ; }
protected boolean migrationSupportedForArch ( org.ovirt.engine.core.common.businessentities.ArchitectureType arch ) { return org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported ( arch , cluster.getcompatibility_version ( ) ) ; }
protected void updateReportsAvailability ( ) { if ( ( org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.instance ( ) ) != null ) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.instance ( ) . updateReportsAvailability ( ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.setWANDisableEffects ( ( ( java.util.List < org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects > ) ( returnValue ) ) ) ; }
public org.ovirt.engine.ui.uicommonweb.UICommand getDefaultCommand ( ) { return getDetailsCommand ( ) ; }
protected void setImageStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus imageStatus ) { setImageStatus ( imageStatus , getRelevantDiskImage ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , clusterId.toString ( ) ) ; }
public void passthroughProfileValidProprerties ( ) { passthroughProfileContainsSupportedPropertiesTest ( true , false , null ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendTemplateNicsResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index ) ; }
public void setSanStorageModel ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel value ) { sanStorageModel = value ; }
private void mockBackend ( ) { org.mockito.Mockito.when ( backend.runAction ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.VdcActionType.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.CpuProfileParameters.class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ) ; }
public void testWrongKeyPair ( ) throws java.lang.Exception { sshDialog.setKeyPair ( java.security.KeyPairGenerator.getInstance ( "RSA" ) . generateKeyPair ( ) ) ; sshDialog.connect ( ) ; sshDialog.authenticate ( ) ; }
private void testActionDisallowed ( ) { canDoActionFails ( ) ; hasIllegalStatusMessage ( ) ; }
private void mockValidatePciAndIdeLimit ( ) { org.mockito.Mockito.doReturn ( true ) . when ( command ) . isValidPciAndIdeLimit ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
private static java.lang.String getDeviceType ( java.util.Map device ) { return ( ( java.lang.String ) ( device.get ( VdsProperties.Device ) ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDSGroup object ) { return object.getCompatibilityVersion ( ) . getValue ( ) ; }
public void testGetStrippedVdsUniqueIdWithoutValidChars ( ) { java.lang.String result = this . gerStrippedVdsUniqueId ( "^%^" ) ; org.junit.Assert.assertEquals ( "Vds id is not empty as expected" , "" , result ) ; }
public void setIsEmpty ( boolean value ) { if ( ( isEmpty ) != value ) { isEmpty = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsEmpty" ) ) ; } }
private void logFailureMessage ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warnFormat ( "VdsManager::refreshVdsRunTimeInfo::Failed to refresh VDS , vds = {0} : {1}, error = '{2}', continuing." , _vds.getId ( ) , _vds.getvds_name ( ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) ) ; }
private void initIpConfigurationWithBootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol ipv4BootProtocol ) { initIpConfigurationWithPrimaryAddress ( ) ; getTestedNetworkAttachment ( ) . getIpConfiguration ( ) . getIpv4PrimaryAddress ( ) . setBootProtocol ( ipv4BootProtocol ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsForDiskId ( ) { if ( ( listVms ) == null ) { listVms = org.ovirt.engine.core.bll.RemoveDiskCommand.getVmDAO ( ) . getVmsListForDisk ( disk.getId ( ) ) ; } return listVms ; }
private java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActionsImpl ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isInternal , boolean isRunOnlyIfAllCanDoPass , boolean isWaitForResult ) { return runMultipleActionsImpl ( actionType , parameters , isInternal , isRunOnlyIfAllCanDoPass , isWaitForResult , null ) ; }
private boolean checkFreeSpaceOnDestinationDomain ( org.ovirt.engine.core.common.businessentities.storage_domains domain , int requestedSizeGB ) { if ( ! ( org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest ( domain , requestedSizeGB ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW ) ; return false ; } return true ; }
protected int getMaxVolumeChain ( ) { return org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator.maxImagesInChain ; }
public void anyStatusValidWhenNoInstallationRequired ( ) { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , oldHost , host , false ) ; org.junit.Assert.assertThat ( validator.statusSupportedForHostInstallation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createDefaultVdsGroupWithDifferentCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ; group.setCpuName ( "Another CPU name" ) ; return group ; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createBasicPool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; pool.setName ( "Default" ) ; return pool ; }
public void testGetFilteredWithPermissionsNoPermissions ( ) { org.ovirt.engine.core.common.businessentities.VM result = dao.get ( existingVm.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNull ( result ) ; }
public abstract org.ovirt.engine.core.compat.CommandStatus getCommandStatus ( org.ovirt.engine.core.compat.Guid commandId ) ;
public boolean isOvirtNode ( ) { return ( getVdsType ( ) ) == ( VDSType.oVirtNode ) ; }
public void setItems ( java.lang.Iterable value ) { if ( value != null ) { java.util.Collections.sort ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ) ( value ) ) , new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator ( ) ) ; } super . setItems ( value ) ; }
public void setTargetHistoryToken ( java.lang.String historyToken ) { hyperlink.setTargetHistoryToken ( historyToken ) ; }
protected void updateExistingEntity ( ) { existingEntity.setStatus ( JobExecutionStatus.FINISHED ) ; existingEntity.setEndTime ( new java.util.Date ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( C value ) { return null ; }
public void setup ( ) { storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( "test" , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , "test" , StorageType.UNKNOWN.getValue ( ) , StoragePoolStatus.Up.getValue ( ) ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool ) ) ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( true , false ) ; setupCpu ( ) ; vdsExist ( ) ; canDoActionFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public boolean validate ( ) { return getLabelsModel ( ) . validate ( ) ; }
public void setpm_options ( java.lang.String value ) { mVdsStatic.setpm_options ( value ) ; }
public void setExtendedItems ( java.util.ArrayList < java.util.Map.Entry < org.ovirt.engine.core.common.businessentities.VmTemplate , org.ovirt.engine.core.common.queries.DiskImageList > > arrayList ) { templateImportDiskListModel.setExtendedItems ( arrayList ) ; }
public java.lang.String getMacPoolName ( ) { return oldMacPool.getName ( ) ; }
protected org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters ( org.ovirt.engine.api.model.Network network , org.ovirt.engine.api.model.Network entity ) { return new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter ( getCluster ( ) , entity ) ; }
private void mockStoragePoolIsoMap ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap spim = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; org.mockito.Mockito.when ( storagePoolIsoMapDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId.class ) ) ) . thenReturn ( spim ) ; }
public org.ovirt.engine.api.model.Quota get ( ) ;
public boolean handlesEvent ( com.google.gwt.view.client.CellPreviewEvent < org.ovirt.engine.ui.uicommonweb.models.EntityModel > event ) { return org.ovirt.engine.ui.common.widget.table.cell.EventHandlingCellMixin.inputHandlesClick ( event ) ; }
public org.ovirt.vdsmfake.service.Host getHostByName ( java.lang.String name ) { return org.ovirt.vdsmfake.service.VdsmManager.getInstance ( ) . getHostByName ( name ) ; }
public void outboundPeakLowerThanAverage ( ) { qos.setInboundPeak ( org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_HIGH ) ; qos.setOutboundPeak ( org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_LOW ) ; peakConsistentWithAverageTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_PEAK_LOWER_THAN_AVERAGE ) ) ; }
public boolean isHttpEnabled ( ) { return getBoolean ( "ENGINE_HTTP_ENABLED" ) ; }
protected boolean UpdateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.UpdateVmInSpm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getstorage_pool_id ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) , org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
public void testGetMaximumRam ( ) { org.junit.Assert.assertEquals ( 2048 , OsRepositoryImpl.INSTANCE.getMaximumRam ( 777 , null ) ) ; }
public void testMacIsContainedInRange ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( rangeOf10Macs.contains ( org.ovirt.engine.core.bll.network.macpoolmanager.RangeTest.MAC_FROM_RANGE ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected void writeCustomEmulatedMachine ( ) { _writer.writeElement ( OvfProperties.CUSTOM_EMULATED_MACHINE , emulatedMachine ) ; }
public org.ovirt.engine.core.bll.context.CommandContext get ( org.ovirt.engine.core.compat.Guid commandId ) { return contextsMap.get ( commandId ) ; }
private java.util.HashMap < org.ovirt.engine.core.compat.Version , java.util.ArrayList < java.lang.String > > getCustomPropertiesKeysList ( ) { return privateCustomPropertiesKeysList ; }
public void setnet_config_dirty ( java.lang.Boolean value ) { mVdsDynamic.setnet_config_dirty ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "net_config_dirty" ) ) ; }
protected void SyncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.Network ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . SyncSearch ( VdcQueryType.Search , tempVar ) ; }
public final < T extends java.lang.Enum < T > > void AddField ( java.lang.Iterable < T > statuses , java.lang.String fieldName ) { for ( T status : statuses ) { AddField ( status , fieldName ) ; } }
public static void setLoggedInUser ( org.ovirt.engine.core.common.users.VdcUser loggedUser ) { org.ovirt.engine.ui.frontend.Frontend.loggedUser = loggedUser ; }
public static void addPermission ( org.ovirt.engine.core.common.businessentities.Permission ... permissions ) { for ( org.ovirt.engine.core.common.businessentities.Permission perms : permissions ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.getPermissionDAO ( ) . save ( perms ) ; } }
public void lowerVersionMgmtNetworkNonSupportedFeatures ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addManagementNetworkToPool ( ) ; setupNetworkValidator ( false ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public void testDataCenterLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter ( ) ; dataCenter.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.DATA_CENTER_ID ) ; org.ovirt.engine.api.common.util.LinkHelper.addLinks ( setUpUriExpectations ( ) , dataCenter ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.DATA_CENTER_HREF , dataCenter.getHref ( ) ) ; }
public void testGetVmDeviceByVmIdTypeAndDeviceFilteringWithPermissionsNoFiltering ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = dao.getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID , "disk" , "disk" , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , false ) ; org.ovirt.engine.core.dao.VmDeviceDAOTest.assertGetVMDeviceByIdTypeAndDeviceFullResult ( devices ) ; }
public void getUsbTypeEnabledNative ( ) { org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assert org.ovirt.engine.api.restapi.utils.UsbMapperUtils.getUsbType ( usbPolicy ) . equals ( UsbType.NATIVE ) ; }
protected org.ovirt.engine.core.dao.network.HostNetworkQosDao getQosDao ( ) { return getDbFacade ( ) . getHostNetworkQosDao ( ) ; }
public void setComment ( java.lang.String value ) { comment = value ; }
public void testReturnsV4WhenGivenValidV4Address ( ) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip ( ) ; ip.setAddress ( "127.0.0.1" ) ; org.ovirt.engine.api.model.IpVersion version = org.ovirt.engine.api.restapi.types.IpHelper.getVersion ( ip ) ; org.junit.Assert.assertEquals ( IpVersion.V4 , version ) ; }
public void shouldDetectZeroHostNodes ( ) { vdsNumaNodes.clear ( ) ; assertValidationFailure ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) , EngineMessage.VM_NUMA_PINNED_VDS_NODE_EMPTY ) ; }
public void tearDown ( ) { org.powermock.api.easymock.PowerMock.verifyAll ( ) ; }
java.util.Map < java.lang.String , java.lang.String > allocate ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile , org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.businessentities.VDS host ) ;
public java.lang.Object put ( java.lang.Object key , java.lang.Object value ) { if ( containsKey ( key ) ) { throw new java.lang.RuntimeException ( ( ( "The key " + key ) + " already exists" ) ) ; } return super . put ( key , value ) ; }
public java.util.ArrayList < java.lang.String > getChangeablePropertiesList ( ) { return null ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetPolicyNotSetUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy , null ) , currentPolicy ) ; }
public java.util.List < org.ovirt.engine.core.compat.Guid > getMonitoredTaskIDsInDB ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStepDao ( ) . getExternalIdsForRunningSteps ( ExternalSystemType.GLUSTER ) ; }
protected void endMoveOrCopyCommand ( ) { endActionOnAllImageGroups ( ) ; endVmTemplateRelatedOps ( ) ; org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.setSucceeded ( true ) ; }
public void setvds_group_compatibility_version ( org.ovirt.engine.core.compat.Version value ) { if ( org.ovirt.engine.core.compat.Version.OpInequality ( getvds_group_compatibility_version ( ) , value ) ) { this . vds_group_compatibility_versionField = value ; } }
public void vdsIdDefault ( ) { final org.ovirt.engine.core.compat.Guid g = b.getVdsId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , g ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel vmModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; vmModel.set_MinMemSize ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; }
protected javax.ws.rs.core.UriInfo setUpRestoreExpectations ( ) { return setUpActionExpectations ( VdcActionType.RestoreAllSnapshots , org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters.class , new java.lang.String [ ] { "VmId" , "DstSnapshotId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.VM_ID , org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.SNAPSHOT_ID } , true , true , null , false ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel asUserPortalItem ( org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel ) ( model.getSelectedItem ( ) ) ) ; }
protected void setDiskAttributes ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , com.woorea.openstack.glance.model.Image glanceImage ) { setImageVirtualSize ( diskImage , glanceImage ) ; diskImage.setActualSizeInBytes ( glanceImage.getSize ( ) ) ; }
private boolean isIsoFileValid ( java.lang.String isoFile ) { return ( org.apache.commons.lang.StringUtils.isNotBlank ( isoFile ) ) && ( org.ovirt.engine.core.utils.FileUtil.fileExists ( org.ovirt.engine.core.compat.backendcompat.Path.Combine ( org.ovirt.engine.core.common.config.Config.resolveOVirtISOsRepositoryPath ( ) , isoFile ) ) ) ; }
public void setDomain ( java.lang.String value ) { domain = value ; }
protected org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterHooksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class ) , index ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; }
public void validateSucceedsOnVolumeWithRemoveBricksTask ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithRemoveBricksTask , getBricks ( volumeWithRemoveBricksTask ) ) , null ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask ( @ java.lang.SuppressWarnings ( value = "unused" ) org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , @ java.lang.SuppressWarnings ( value = "unused" ) org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
public void testdefaultVersionedValue ( ) { org.junit.Assert.assertEquals ( 1024 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 888 , Version.v4_0 ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Permission , org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileListModel , org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.vnicProfilePermissionSubTabLabel ( ) , 2 , modelProvider ) ; }
private java.lang.Integer getApplicationMode ( javax.servlet.http.HttpServletRequest request ) { return ( ( java.lang.Integer ) ( runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , request ) ) ) ; }
boolean scheduleNextTimeToRun ( java.util.Date timeToRunTheVm ) { this . timeToRunTheVm = timeToRunTheVm ; return ( ++ ( numOfRuns ) ) < ( org.ovirt.engine.core.bll.AutoStartVmsRunner.AutoStartVmToRestart.MAXIMUM_NUM_OF_TRIES_TO_RESTART_HA_VM ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.DiskImage object ) { return ( java.lang.String.valueOf ( object.getSizeInGigabytes ( ) ) ) + " GB" ; }
public void testRemoveWithParam ( ) { container.setData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_VALUE ) ; container.removeSessionOnLogout ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert.assertNull ( "Get should return null since the session was removed" , container.getData ( org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_KEY , false ) ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; if ( ( getEntity ( ) ) == null ) { return ; } setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . Execute ( ) ; } UpdateActionAvailability ( ) ; UpdateIsDiskHotPlugAvailable ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getId ( ) . toString ( ) ; }
public void isNextRunConfigurationChanged ( org.ovirt.engine.core.common.businessentities.VM original , org.ovirt.engine.core.common.businessentities.VM updated , org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParameters , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmUpdatesOnNextRunExists , new org.ovirt.engine.core.common.queries.GetVmUpdatesOnNextRunExistsParameters ( original , updated , updateVmParameters ) , aQuery ) ; }
private boolean isGlusterNetworkInUse ( ) { return ! ( getGlusterBrickDao ( ) . getAllByClusterAndNetworkId ( oldNetworkCluster.getClusterId ( ) , oldNetworkCluster.getNetworkId ( ) ) . isEmpty ( ) ) ; }
public void hideAndUnbind ( ) { super . hideAndUnbind ( ) ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView ( ) . cleanup ( ) ; if ( ( this . model ) != null ) { this . model.cleanup ( ) ; this . model = null ; } }
private void assertCorrectGetResult ( org.ovirt.engine.core.common.businessentities.VDS result ) { org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingVds , result ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ActivateVdsCommand.getParameters ( ) . getVdsId ( ) . toString ( ) , LockMessagesMatchUtil.VDS ) ; }
public void setLdapServers ( java.util.List < java.net.URI > ldapServersURIs ) { for ( java.net.URI uri : ldapServersURIs ) { ldapServers.put ( uri , new org.ovirt.engine.core.bll.adbroker.ScorableLDAPServer ( uri ) ) ; } }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; }
protected void doGridTimerExecute ( ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine ( ( ( this . getClass ( ) . getName ( ) ) + ": Executing search" ) ) ; syncSearch ( ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getDbFacade ( ) . getTagDAO ( ) . getTagUserMapByTagName ( org.ovirt.engine.core.bll.GetTagUserMapByTagNameQuery.getParameters ( ) . getTagName ( ) ) ) ; }
protected void entityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . entityPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "name" ) ) { getSearchCommand ( ) . Execute ( ) ; } }
protected boolean contentOverflows ( com.google.gwt.dom.client.Element parent ) { return ( parent != null ) && ( ( org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth ( parent ) ) || ( org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingClientHeight ( parent ) ) ) ; }
public void setstorage_domain_name ( java.lang.String value ) { storageDomainName = value ; }
public void logout ( final org.ovirt.engine.ui.frontend.communication.UserCallback callback ) { xsrfRequestBuilder.setXsrfToken ( null ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; retVal.setSucceeded ( true ) ; callback.onSuccess ( retVal ) ; }
public static synchronized boolean isIsoDomain ( org.ovirt.engine.api.model.StorageDomain storageDomain ) { org.ovirt.engine.api.model.StorageDomainType type = storageDomain.getstorage_domain_type ( ) ; return ( type != null ) && ( type == org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ) ? true : false ; }
public static boolean isNonVmNonVlanNetwork ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return ( ! ( network.isVmNetwork ( ) ) ) && ( ( network.getVlanId ( ) ) == null ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Role model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present ) { ensureColumnPresent ( column , headerText , present , null ) ; }
private boolean isReadOnly ( ) { return provider.getAdditionalProperties ( ) . getReadOnly ( ) ; }
public void testUpdate ( ) { existingDynamic.setUsedDiskSize ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.USED_DISK_SIZE ) ; dao.update ( existingDynamic ) ; org.ovirt.engine.core.common.businessentities.StorageDomainDynamic result = dao.get ( existingDynamic.getId ( ) ) ; assertEquals ( existingDynamic , result ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.v3.types.V3MacPool pool ) { return adaptAdd ( delegate :: add , pool ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; }
public void testGetAllVmTagsWithIds ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.tags > result = dao.getAllVmTagsWithIds ( existingTag.gettag_id ( ) . toString ( ) ) ; assertNotNull ( result ) ; assertFalse ( result.isEmpty ( ) ) ; }
private void localize ( ) { checkConnectivity.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostSetupNetworksPopupView.constants.checkConHostPopup ( ) ) ; commitChanges.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostSetupNetworksPopupView.constants.saveNetConfigHostPopup ( ) ) ; }
private void saveNetworksAndLabels ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig entity ) { massNetworksUpdate ( entity.getId ( ) , entity.getNetworks ( ) ) ; massLabelsUpdate ( entity.getId ( ) , entity.getLabels ( ) ) ; }
public void testIsInternalExecutionFalse ( ) { org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class ) ) ; query.setInternalExecution ( true ) ; query.setInternalExecution ( false ) ; org.junit.Assert.assertFalse ( "Query should not be marked for internel execution" , query.isInternalExecution ( ) ) ; }
public java.lang.String GetTagIdAndChildrenIds ( java.lang.String tagName ) { org.ovirt.engine.core.common.businessentities.Tags tag = GetTagByName ( tagName ) ; java.lang.StringBuilder sb = tag.getTagIdAndChildrenIds ( ) ; return sb.toString ( ) ; }
public void canDoActionFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( null , getBricks ( volumeWithRemoveBricksTaskCompleted ) ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public void typeMatchesProfileOnlyTypePassthrough ( ) { typeMatchesProfileCommon ( true , false ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void externalNetworkIsNotAVmNetwork ( ) { org.mockito.Mockito.when ( network.isVmNetwork ( ) ) . thenReturn ( false ) ; org.junit.Assert.assertThat ( validator.externalNetworkIsVmNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { updateOptionsPostData ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ) ; }
public org.ovirt.engine.core.compat.Guid getDedicatedVmForVds ( ) { return vmStatic.getDedicatedVmForVds ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingManagementNetwork ( ) { return createNetworkValidator ( ) . notManagementNetwork ( ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.storage_pool x , org.ovirt.engine.core.common.businessentities.storage_pool y ) { return x.getname ( ) . compareTo ( y.getname ( ) ) ; }
public void testGetMasterStorageDomainIdForPool ( ) { org.ovirt.engine.core.compat.Guid result = dao.getMasterStorageDomainIdForPool ( org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_STORAGE_POOL_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.StorageDomainDAOTest.EXISTING_DOMAIN_ID , result ) ; }
public void tearDown ( ) { java.util.Locale.setDefault ( locale ) ; control.verify ( ) ; org.ovirt.engine.api.common.invocation.CurrentManager.remove ( ) ; }
public java.lang.String getdisplay_ip ( ) { return this . mVmDynamic.getdisplay_ip ( ) ; }
private void commitLabelChanges ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > srcIfaces , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.moveLabels ( srcIfaces , dstIface , hostSetupNetworksParametersData ) ; }
public void canDoActionFailsOnRemovingEventWithOvirtOrigin ( ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveExternalEventCommand < org.ovirt.engine.core.common.action.RemoveExternalEventParameters > ( new org.ovirt.engine.core.common.action.RemoveExternalEventParameters ( org.ovirt.engine.core.bll.RemoveExternalEventCommandTest.EVENT_ID_2 ) ) ) ; prepareMocks ( command ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; }
protected void ExecuteVdsBrokerCommand ( ) { buildVmData ( ) ; mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker ( ) . create ( createInfo ) ; logCommandInfo ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.ProceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vm.getDynamicData ( ) , mVmReturn.mVm ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback ( ) { return new ConvertVmCallback ( org.ovirt.engine.core.bll.ConvertVmCommand.getVmId ( ) , org.ovirt.engine.core.bll.ConvertVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePool ( ) . getCompatibilityVersion ( ) ) ; }
public void doTest ( ) throws java.io.IOException , java.net.URISyntaxException { java.util.List < java.lang.String > errors = org.ovirt.engine.ui.common.GwtMessagesValidator.validateClass ( org.ovirt.engine.ui.userportal.ApplicationMessages.class ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.ui.common.GwtMessagesValidator.format ( errors ) , errors.isEmpty ( ) ) ; }
public void getHostListByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void setAsyncResult ( org.ovirt.engine.ui.frontend.RegistrationResult value ) { if ( ( asyncResult ) != value ) { AsyncResultChanging ( value , asyncResult ) ; asyncResult = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AsyncResult" ) ) ; } }
public void getUsbPolicyOnUpdateCurrentlyNativeGotNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy , null ) , currentPolicy ) ; }
public void validateEnums ( org.ovirt.engine.api.model.GuestNicConfiguration entity ) { if ( entity != null ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.BootProtocol.class , entity.getBootProtocol ( ) , true ) ; } }
public void getFreeVfNotSriovNic ( ) { commonIsSriovDevice ( false ) ; hostNicVfsConfigHelper.getFreeVf ( nic , null ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.EditDiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.EditDiskModel ) ( result.getState ( ) ) ) ; diskModel.StopProgress ( ) ; diskModel.cancel ( ) ; }
public void statusSupportedForHostInstallation ( ) { org.mockito.Mockito.when ( oldHost.getStatus ( ) ) . thenReturn ( VDSStatus.Maintenance ) ; validator = createValidatorForHostInstallation ( ) ; org.junit.Assert.assertThat ( validator.statusSupportedForHostInstallation ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notManagementNetwork ( ) { return org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork ( network ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , java.lang.String.format ( "$NetworkName %s" , network.getName ( ) ) ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void initCustomProperties ( ) { getCustomPropertySheet ( ) . setEntity ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties ( getProfile ( ) . getCustomProperties ( ) ) ) ; }
public boolean isAutoSuspend ( ) { return this . vmStatic.isAutoSuspend ( ) ; }
public void onUserLoginChange ( org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event ) { if ( ! ( user.isLoggedIn ( ) ) ) { getModel ( ) . EnsureAsyncSearchStopped ( ) ; } }
public void getIdByTypeAndStatusReturnsNullForNonExistingVm ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( null , dao.getId ( Guid.Empty , SnapshotType.REGULAR , SnapshotStatus.OK ) ) ; }
public void testAttachFailDomainTypeIncorrect ( ) { storageDomain.setStorageType ( StorageType.LOCALFS ) ; org.ovirt.engine.core.bll.ValidationResult attachIncorrectTypeResult = validator.validateDomainCanBeAttachedToPool ( ) ; org.junit.Assert.assertFalse ( "Attaching domain with an incorrect type succeeded while it should have failed" , attachIncorrectTypeResult.isValid ( ) ) ; assertFailingMessage ( "Attaching domain with an incorrect type failed with the wrong message" , attachIncorrectTypeResult , VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH ) ; }
public java.lang.String GetTagIdsAndChildrenIdsByRegExp ( java.lang.String tagNameRegExp ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagIdsAndChildrenIdsByRegExp ( tagNameRegExp ) ; }
protected void handleSpecificCommandActions ( ) { }
public java.lang.String getInitrdUrl ( ) { return vmStatic.getinitrd_url ( ) ; }
public void testIsNetworkInSyncWhenNetworkQosIsNull ( ) throws java.lang.Exception { networkQos = null ; org.junit.Assert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private void initDestStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; destDomain.setStorageType ( storageType ) ; destDomain.setStatus ( StorageDomainStatus.Active ) ; org.mockito.Mockito.doReturn ( destDomain ) . when ( command ) . getStorageDomain ( ) ; }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.safehtml.shared.SafeHtml headerHtml ) { addColumn ( column , createHeader ( column , headerHtml ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAffinityGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , null , failure ) ; }
public void testUpdate ( ) { existingDomain.setstorage_name ( "UpdatedName" ) ; dao.update ( existingDomain ) ; org.ovirt.engine.core.common.businessentities.storage_domain_static after = dao.get ( existingDomain.getId ( ) ) ; org.junit.Assert.assertEquals ( after , existingDomain ) ; }
public void failCreateMoreNumaNodesThanVirtualCores ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommand ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 1 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient createClient ( org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor , java.nio.channels.Selector selector , java.lang.String hostname , int port ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { return new org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient ( reactor , selector , hostname , port , createSSLEngine ( true ) ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.Disk selectedItem ) { org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.SubTabDiskGeneralView.Driver.driver.edit ( getDetailModel ( ) ) ; formBuilder.showForm ( getDetailModel ( ) ) ; }
public void setTemplate ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( template , value ) ) ) { template = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "Template" ) ) ; } }
public static org.ovirt.engine.core.compat.Guid createGuidFromString ( java.lang.String candidate ) { if ( candidate == null ) { return null ; } return new org.ovirt.engine.core.compat.Guid ( candidate ) ; }
public void validateVmMemoryCantStartOnVdsBecauseOfPending ( ) { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance ( ) . hasPhysMemoryToRunVM ( vds , vm , 65 ) ; org.junit.Assert.assertEquals ( vmPassedMemoryRequirement , false ) ; }
boolean CanUpdateField ( java.lang.Object obj , java.lang.String fieldName , java.lang.Enum < ? > status ) ;
protected void proceedProxyReturnValue ( ) { try { super . proceedProxyReturnValue ( ) ; } catch ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ignored ) { org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug ( "VDSNetworkException was caught and ignored" , ignored ) ; } }
public void testExecuteQueryWithFilteringLUNsEnabled ( ) { lunsExpected = java.util.Collections.emptyList ( ) ; internalExecuteQuery ( ) ; }
public void setCommandStatus ( org.ovirt.engine.core.compat.CommandStatus status ) { cmdEntity.setCommandStatus ( status ) ; }
public void shouldSetNumaPinning ( ) { assertTrue ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
public void parseLunReturnsUnknownForNoField ( ) { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLun ( xlun , Version.v4_1 ) ; org.junit.Assert.assertEquals ( StorageType.UNKNOWN , lun.getLunType ( ) ) ; }
protected void EndWithFailure ( ) { updateOldImageActive ( SnapshotType.ACTIVE , true ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.UndoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.setSucceeded ( true ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getDetailModel ( ) . ExecuteCommand ( getDetailModel ( ) . getEditPolicyCommand ( ) ) ; }
public void checkExecuteCommandWithEmptyVdsId ( ) { parameters.setStorageServerConnection ( NFSConnection ) ; parameters.setVdsId ( Guid.Empty ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.never ( ) ) . disconnectStorage ( ) ; }
private final org.ovirt.engine.core.common.interfaces.IVdcUser initUser ( ) { return org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . addUserToThreadContext ( parameters.getSessionId ( ) ) ; }
public void validateFailureOnMovingLunDisk ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void copyDataTo ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.dc_aggregate_dateStruct other ) { other.var_name = this . var_name ; other.var_value = this . var_value ; other.var_datetime = this . var_datetime ; }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData ) { org.ovirt.engine.core.common.businessentities.ArchitectureType clusterArch = importVmData.getVm ( ) . getClusterArch ( ) ; return java.lang.String.valueOf ( clusterArch ) ; }
private void refreshHostStorage ( org.ovirt.engine.core.compat.Guid hostId ) { getBackendCollection ( VdcQueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( hostId , org.ovirt.engine.core.common.businessentities.StorageType.ISCSI ) ) ; }
public void setShouldBeEndedByParent ( boolean shouldBeEndedByParent ) { this . shouldBeEndedByParent = shouldBeEndedByParent ; }
public void setPriority ( int value ) { vmStatic.setpriority ( value ) ; }
public boolean Match ( org.ovirt.engine.core.common.businessentities.storage_domains source ) { return name.equals ( source.getstorage_name ( ) ) ; }
public void nullNetworkWhenNoPortMirroring ( ) throws java.lang.Exception { portMirroringTest ( ValidationResult.VALID , null , false ) ; }
public boolean getHasVdssForSpmSelection ( ) { return ( GetPrioritizedVdsInPool ( ) . size ( ) ) > 0 ; }
public void checkValidIpConfigurationNoneBootProtocol ( ) { initIpConfigurationDetails ( Ipv4BootProtocol.NONE , false , false ) ; org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , actual ) ; }
public void addToHistoryOneLimit ( ) { org.junit.Assert.assertEquals ( java.util.Collections.singletonList ( 13 ) , statistics.addToHistory ( java.util.Arrays.asList ( 9 , 10 , 11 , 12 ) , 13 , 1 ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.HostNetworkQos createHostNetworkQos ( int outAverageRealtime , int outAverageUpperlimit , int outAverageLinkshare ) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; qos.setOutAverageRealtime ( outAverageRealtime ) ; qos.setOutAverageUpperlimit ( outAverageUpperlimit ) ; qos.setOutAverageLinkshare ( outAverageLinkshare ) ; return qos ; }
protected org.ovirt.engine.api.model.GraphicsConsole addParents ( org.ovirt.engine.api.model.GraphicsConsole model ) { model.setVm ( new org.ovirt.engine.api.model.VM ( ) ) ; model.getVm ( ) . setId ( getGuid ( ) . toString ( ) ) ; return model ; }
public void setGuestID ( java.lang.String value ) { }
protected void setUpGetEntityExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetTasksStatusesByTasksIDs , org.ovirt.engine.core.common.queries.GetTasksStatusesByTasksIDsParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , getTaskStatuses ( ) ) ; }
public static void addDiskToVmIfNotExists ( org.ovirt.engine.core.common.businessentities.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { if ( ! ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getBaseDiskDao ( ) . exists ( disk.getId ( ) ) ) ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskToVm ( disk , vmId ) ; } }
public void testGetFilteredByPermissionsForUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > result = dao.getAllForCluster ( FixturesTool.CLUSTER_RHEL6_ISCSI , org.ovirt.engine.core.dao.profiles.UNPRIVILEGED_USER_ID , true , ActionGroup.ASSIGN_CPU_PROFILE ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected void auditLog ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType ) { org.ovirt.engine.core.common.businessentities.AuditLog al = new org.ovirt.engine.core.common.businessentities.AuditLog ( ) ; al.setlog_type ( logType ) ; mockAuditLogDao.save ( al ) ; }
public void testGetMessageDefaultLocale ( ) { java.lang.String testKey = "obrand.common.main_header_label" ; java.lang.String result = testManager.getMessage ( testKey ) ; org.junit.Assert.assertEquals ( "The result should be 'Main header'" , "Main header" , result ) ; }
public boolean isEnabled ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel : getNetworksTableItems ( ) ) { if ( clusterNetworkModel.getIsChangable ( ) ) { return true ; } } return false ; }
private java.util.List < java.lang.String > allocateNewMacsWithoutLocking ( int numberOfMacs ) { java.util.List < java.lang.Long > macs = macsStorage.allocateAvailableMacs ( numberOfMacs ) ; java.util.Collections.sort ( macs ) ; logWhenMacPoolIsEmpty ( ) ; return org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings ( macs ) ; }
public void setAttachedTagsToEntities ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > value ) { if ( ( attachedTagsToEntities ) != value ) { attachedTagsToEntities = value ; AttachedTagsToEntitiesChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "AttachedTagsToEntities" ) ) ; } }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getCACertificate ( ) { return backend.runInternalQuery ( VdcQueryType.GetCACertificate , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; }
public java.lang.String gethibernation_vol_handle ( ) { return this . mVmDynamic.gethibernation_vol_handle ( ) ; }
public void enableCifs ( ) { accessProtocols.add ( AccessProtocol.CIFS ) ; setOption ( GlusterConstants.OPTION_CIFS_DISABLE , GlusterConstants.OFF ) ; }
java.lang.String getRefreshRateItemKey ( ) { return org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.GRID_REFRESH_RATE_KEY ; }
private int getActiveUsersStat ( ) { return org.ovirt.engine.core.bll.GetSystemStatisticsQuery.getDbFacade ( ) . getSystemStatisticsValue ( org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ENTITY_NAME , org.ovirt.engine.core.bll.GetSystemStatisticsQuery.USER_ACTIVE_STATUS ) ; }
public javax.ws.rs.core.Response performRemove ( java.lang.String id ) { return performAction ( VdcActionType.RemoveVm , new org.ovirt.engine.core.common.action.RemoveVmParameters ( asGuid ( id ) , false ) ) ; }
public static ExternalSubnet.IpVersion map ( org.ovirt.engine.api.restapi.types.IpVersion model ) { switch ( model ) { case V4 : return ExternalSubnet.IpVersion.IPV4 ; case V6 : return ExternalSubnet.IpVersion.IPV6 ; default : throw new java.lang.IllegalArgumentException ( ( ( "Unknown IP version \"" + model ) + "\"" ) ) ; } }
public boolean connectStorageToDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase ( storageDomain.getId ( ) ) ; parameters.setVdsId ( vdsId ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.SyncLunsInfoForBlockStorageDomain , parameters ) ; return true ; }
public org.ovirt.engine.core.bll.ValidationResult managementNetworkUnset ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_UNSET ) . when ( ( ( oldNetworkCluster.isManagement ( ) ) && ( ! ( networkCluster.isManagement ( ) ) ) ) ) ; }
public void validateFailsWithEmptyBricksList ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithoutRemoveBricksTask , new java.util.ArrayList < > ( ) ) , null ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testInterfaceIsValidSlaveWhenInterfaceIsVlan ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setVlanId ( 1 ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceIsValidSlave ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getGraphicsDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.GRAPHICS ) ; }
public void testEmptyGetAllForDiskProfiles ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForDiskProfiles ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }
public org.ovirt.engine.ui.common.widget.form.FormItem withDefaultValue ( java.lang.String defaultValue , org.ovirt.engine.ui.common.widget.form.FormItem.DefaultValueCondition defaultValueCondition ) { this . defaultValueLabel = new org.ovirt.engine.ui.common.widget.label.TextBoxLabel ( defaultValue ) ; this . defaultValueCondition = defaultValueCondition ; return this ; }
protected void onEntityChanged ( ) { super . onEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . execute ( ) ; updateIsDiskHotPlugAvailable ( ) ; updateLiveStorageMigrationEnabled ( ) ; } updateActionAvailability ( ) ; }
public void execute ( ) { lockInteractionManager.showLoadingIndicator ( ) ; getLoginModel ( ) . AutoLogin ( vdcUser ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > getAll ( ) { return getAll ( null , false ) ; }
public void nonInternalInactiveAllowed ( ) { testExecution ( StorageDomainStatus.InActive ) ; canDoActionSucceeds ( ) ; noIllegalStatusMessage ( ) ; }
public void setSearchString ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( searchString , value ) ) ) { searchString = value ; pagingSearchString = null ; searchStringChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > getProviderComputeResource ( org.ovirt.engine.core.common.businessentities.Provider hostProvider ) { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( hostProvider ) ; return proxy.getComputeResources ( ) ; }
private static void failureEventHandler ( java.util.ArrayList < org.ovirt.engine.ui.frontend.Message > messages ) { org.ovirt.engine.ui.frontend.Frontend.frontendFailureEvent.raise ( org.ovirt.engine.ui.frontend.Frontend.class , new org.ovirt.engine.ui.frontend.FrontendFailureEventArgs ( messages ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallbackEnabled ( ) { return getCommands ( true ) ; }
public java.lang.String getMetadataDevice ( ) { return getStorageStaticData ( ) . getMetadataDevice ( ) ; }
public void calculateNetworkImplementationDetailsManagedNetwork ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertManaged ( iface , true , createNetworksMap ( iface.getNetworkName ( ) , iface.isBridged ( ) , iface.getMtu ( ) , iface.getVlanId ( ) ) ) ; }
public void setBrandingManager ( final org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager manager ) { brandingManager = manager ; }
public void testGetAllForConnectionWithInvalidConnection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForConnection ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > getTagsAttachedToObject ( ) { return getTagDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; }
protected void onActionExecuted ( ) { sourceListModel.setWindow ( null ) ; sourceListModel.search ( ) ; }
public void numOfVfsValidZero ( ) { numOfVfsInRangeTest ( 0 , org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NUM_OF_VFS ) ; org.junit.Assert.assertThat ( validator.nicSriovEnabled ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpGetEntityExpectations ( true ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageDomainDao ( ) ; existingDomain = dao.get ( org.ovirt.engine.core.dao.StorageDomainDaoTest.EXISTING_DOMAIN_ID ) ; }
public org.ovirt.engine.core.common.utils.VmDeviceType getDisplayDevice ( int osId , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.DisplayType displayType ) ;
private void UpdateItemsAvailability ( ) { if ( ( getItems ( ) ) == null ) { return ; } behavior.UpdateItemsAvailability ( ) ; }
public void clearErrorMessage ( ) { setErrorMessageHtml ( null ) ; }
public void setCtrlAltDeleteRemapHotkey ( java.lang.String hotkey ) { remapCtrlAltDeleteSpice.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; remapCtrlAltDeleteVnc.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; }
public synchronized boolean EntityHasTasks ( org.ovirt.engine.core.compat.Guid id ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( isCurrentTaskLookedFor ( id , task ) ) { return true ; } } return false ; }
public void setPrincipal ( java.lang.String sessionId , java.lang.String principal ) { setData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.PRINCIPAL_PARAMETER_NAME , principal ) ; }
public void setused_disk_size ( java.lang.Integer value ) { getStorageDynamicData ( ) . setused_disk_size ( value ) ; UpdateTotalDiskSize ( ) ; }
public void testGetAllForStoragePoolWithPermissionsPrivilegedUser ( ) { org.ovirt.engine.core.compat.Guid storagePoolId = new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( storagePoolId , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.ovirt.engine.core.dao.StorageDomainDaoTest.assertGetAllForStoragePoolResult ( result , storagePoolId ) ; }
private java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > getDisksBasedOnImage ( ) { if ( ( disksImages ) == null ) { disksImages = org.ovirt.engine.core.bll.ImagesHandler.filterEditableImageDisks ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getDiskMap ( ) . values ( ) ) ; } return disksImages ; }
protected org.ovirt.engine.api.model.Network addParents ( org.ovirt.engine.api.model.Network model ) { return org.ovirt.engine.api.restapi.resource.BackendNetworkHelper.addParents ( model ) ; }
public void failCreateMoreNumaNodesThanVirtualCores ( ) { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommand ( ) ; vm.setNumOfSockets ( 1 ) ; vm.setCpuPerSocket ( 1 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.VM_NUMA_NODE_MORE_NODES_THAN_CPUS ) ; }
public java.lang.String getText ( org.ovirt.engine.core.common.businessentities.gluster.ServiceInfo entity ) { return java.lang.String.valueOf ( entity.getPort ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; org.mockito.Mockito.doReturn ( "config" ) . when ( getQuery ( ) ) . generateOvfConfig ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; }
public void upperlimitLowerThanRealTime ( ) { mockQos ( generateValue ( ) , org.ovirt.engine.core.bll.validator.HostNetworkQosValidatorTest.LOW_BANDWIDTH , org.ovirt.engine.core.bll.validator.HostNetworkQosValidatorTest.HIGH_BANDWIDTH ) ; consistentValuesTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INCONSISTENT_VALUES ) ) ; }
public void initTable ( ) { getTable ( ) . enableColumnResizing ( ) ; addGeneralTypeColumn ( ) ; addDeviceTypeColumn ( ) ; addAddressColumn ( ) ; addReadOnlyColumn ( ) ; addPluggedColumn ( ) ; addManagedColumn ( ) ; addSpecParamsColumn ( ) ; }
public void testCDAStoragePoolHasTasks ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > tasks = java.util.Arrays.asList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.doReturn ( tasks ) . when ( asyncTaskDaoMock ) . getAsyncTaskIdsByStoragePoolId ( storagePoolId ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail on a Storage Pool with running tasks" , command , EngineMessage.CANNOT_FORCE_SELECT_SPM_STORAGE_POOL_HAS_RUNNING_TASKS ) ; }
public void setguest_cur_user_name ( java.lang.String value ) { this . mVmDynamic.setguest_cur_user_name ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "guest_cur_user_name" ) ) ; }
public void validateNonExternalStepFails ( ) { parameters.setJobId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.jobId ) ; parameters.setId ( org.ovirt.engine.core.bll.EndExternalStepCommandTest.nonExternalStepId ) ; org.junit.Assert.assertTrue ( ( ! ( command.validate ( ) ) ) ) ; }
public static void setUpClass ( ) { try { org.ovirt.engine.core.config.EngineConfigPropertiesTest.pc = new org.apache.commons.configuration.PropertiesConfiguration ( org.ovirt.engine.core.config.EngineConfigPropertiesTest.PROPERTIES_PATH ) ; } catch ( org.apache.commons.configuration.ConfigurationException e ) { org.junit.Assert.fail ( java.lang.String.format ( ( "Failed to load configuration from the engine-config.properties.production.file " + "environment variable set to %s." ) , org.ovirt.engine.core.config.EngineConfigPropertiesTest.PROPERTIES_PATH ) ) ; } }
public void testLogReturnDoesntLogWhenNoAnnotation ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.log.Log log = org.mockito.Mockito.mock ( org.ovirt.engine.core.utils.log.Log.class ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logReturn ( log , "" , new java.lang.Object ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito.verifyZeroInteractions ( log ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.CinderDisk getDisk ( ) { if ( ( disk ) == null ) { disk = ( ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk ) ( org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getDiskDao ( ) . get ( org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getImageId ( ) ) ) ) ; } return disk ; }
public void setvmt_description ( java.lang.String value ) { this . vmt_descriptionField = value ; }
public void getVdsGroupIdDefault ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.compat.Guid g = b.getVdsGroupId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , g ) ; }
protected boolean canDoAction ( ) { return ( validate ( networkClusterAttachmentExists ( ) ) ) && ( validateAttachment ( ) ) ; }
public java.lang.String getTime ( ) { return this . time ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password ) ;
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , parameters ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; }
public void setStaticData ( org.ovirt.engine.core.common.businessentities.VmStatic value ) { if ( ( vmStatic ) == null ) { vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; } vmStatic = value ; }
public void putEvent ( org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event ) { this . events.addFirst ( event ) ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup getVDsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setId ( clusterId ) ; vdsGroup.setVirtService ( false ) ; vdsGroup.setGlusterService ( true ) ; vdsGroup.setcompatibility_version ( Version.v3_1 ) ; return vdsGroup ; }
public void setName ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( name , value ) ) ) { name = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Name" ) ) ; } }
private boolean isManagementOriginally ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return ( ( clusterNetworkModel.getOriginalNetworkCluster ( ) ) != null ) && ( clusterNetworkModel.getOriginalNetworkCluster ( ) . isManagement ( ) ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permission > perms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) . getAllForEntity ( MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID ) ; org.ovirt.engine.core.bll.GetSystemPermissionsQuery.getQueryReturnValue ( ) . setReturnValue ( perms ) ; }
java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass , boolean waitForResult ) ;
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB , final int sizeRequired ) { mockVmTemplateDAOReturnVmTemplate ( ) ; mockDiskImageDAOGetSnapshotById ( ) ; mockStorageDomainDAOGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDAOGet ( domainSizeGB ) ; mockConfig ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; return vm ; }
public void testFindDefaultManagementNetworkNotFound ( ) { final org.ovirt.engine.core.common.businessentities.network.Network actual = underTest.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.network.cluster.DefaultManagementNetworkFinderImplTest.TEST_DC_ID ) ; org.junit.Assert.assertNull ( actual ) ; }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext context ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , parameters , context ) ; }
protected void removeAllInBatch ( java.lang.String procedureName , java.util.Collection < T > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < T > mapper ) { org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getCallsHandler ( ) . executeStoredProcAsBatch ( ( procedureName == null ? org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getProcedureNameForRemove ( ) : procedureName ) , paramValues , mapper ) ; }
public void finished ( org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel frontendModel , org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel backendModel ) { org.junit.Assert.assertThat ( frontendModel , org.hamcrest.core.Is.is ( org.hamcrest.core.IsEqual.equalTo ( new org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel ( prop1 , prop2 ) ) ) ) ; }
public void dataCenterExists ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( ValidationResult.VALID , validator.dataCenterExists ( ) ) ; }
public void validNetworkWhenPortMirroring ( ) throws java.lang.Exception { portMirroringTest ( ValidationResult.VALID , "net" , true ) ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( disksList ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.getPredicate ( disksList ) . eval ( storageDomain ) ) ; }
private static boolean hasSnappableDisks ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ! ( vm.getImages ( ) . isEmpty ( ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list ( java.lang.String isFull , java.lang.String [ ] vmIds ) ;
protected org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator getStorageDomainValidator ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { return new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( storageDomain ) ; }
public org.ovirt.engine.core.bll.ValidationResult diskProfileIsSet ( ) { return ( getDiskProfile ( ) ) == null ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_PROFILE_NOT_EXISTS ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , name , true , null , null , networkName , true ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.DiskLunMap entity ) { return createIdParameterMapper ( entity.getId ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.DiskImage object ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( constants.importAllocationModifiedCollapse ( ) ) ; }
public void testBadGuid ( ) { try { new org.ovirt.engine.api.restapi.resource.BackendPermissionResource ( "foo" , null , null , null ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void updateVolumeFormat ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { setVolumeFormat ( org.ovirt.engine.ui.uicommonweb.DataProvider.GetDiskVolumeFormat ( volumeType , storageType ) ) ; }
public void testUpdateFieldsQutoaDefault ( ) { vm.setIsQuotaDefault ( true ) ; vmStatic.setIsQuotaDefault ( false ) ; org.junit.Assert.assertTrue ( "Quota default should be updatable" , command.areUpdatedFieldsLegal ( ) ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getGraphicsDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.GRAPHICS ) ; }
public void testSelfMapper ( ) { org.ovirt.engine.api.restapi.types.Mapper < org.ovirt.engine.api.restapi.test.mappers.api.IFoo , org.ovirt.engine.api.restapi.test.mappers.api.IFoo > mapper = mappingLocator.getMapper ( org.ovirt.engine.api.restapi.test.mappers.api.IFoo.class , org.ovirt.engine.api.restapi.test.mappers.api.IFoo.class ) ; org.junit.Assert.assertNull ( mapper ) ; }
public java.lang.String getName ( ) { return this . name ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sendHcCmdToDesktop ( java.lang.String vmId , java.lang.String hcCommand ) ;
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , parameters ) ; }
private void setUpGetEntityExpectations ( ) { setUpEntityQueryExpectations ( VdcQueryType.GetAllDisksByVmId , org.ovirt.engine.core.common.queries.GetAllDisksByVmIdParameters.class , new java.lang.String [ ] { "VmId" } , new java.lang.Object [ ] { PARENT_ID } , getEntityList ( ) ) ; }
public static void updateAllDiskImageSnapshotsStatusWithCompensation ( final org.ovirt.engine.core.compat.Guid diskId , final org.ovirt.engine.core.common.businessentities.ImageStatus status , org.ovirt.engine.core.common.businessentities.ImageStatus statusForCompensation , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { org.ovirt.engine.core.bll.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( java.util.Collections.singletonList ( diskId ) , status , statusForCompensation , compensationContext ) ; }
private static org.ovirt.engine.core.bll.ValidationResult createSnapshotExistsResult ( boolean snapshotExists ) { return snapshotExists ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
public org.ovirt.engine.sdk.entities.BaseDevices createBaseDevices ( ) { return new org.ovirt.engine.sdk.entities.BaseDevices ( ) ; }
private void passwordSetChanged ( ) { java.lang.Boolean passwordChangable = ! ( getPasswordSet ( ) . getEntity ( ) ) ; getRootPassword ( ) . setIsChangable ( passwordChangable ) ; getRootPasswordVerification ( ) . setIsChangable ( passwordChangable ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setVmTicket ( java.lang.String vmId , java.lang.String otp64 , java.lang.String sec , java.lang.String connectionAction , java.util.Map < java.lang.String , java.lang.String > params ) ;
private boolean needToUpdateMissingNicIds ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel.LabelOnNic addedLabel : addedLabels ) { if ( ( addedLabel.getNicId ( ) ) == null ) { return true ; } } return false ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolNotStaticAddressDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolAddress ( Ipv4BootProtocol.NONE , false ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel dataCenterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterGuideModel ) ( result.getState ( ) ) ) ; dataCenterGuideModel.removeConnection = false ; dataCenterGuideModel.OnFinish ( dataCenterGuideModel.context , true , dataCenterGuideModel.storageModel ) ; }
public void setHeader ( com.google.gwt.user.client.ui.Widget widget ) { headerTitlePanel.setWidget ( widget ) ; updateHeaderContainerStyle ( ) ; }
public void testGetAllForRoleAndAdElementAndObjectWithInvalidRole ( ) { org.ovirt.engine.core.common.businessentities.Permission result = dao.getForRoleAndAdElementAndObject ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.PermissionDaoTest.AD_ELEMENT_ID , org.ovirt.engine.core.dao.PermissionDaoTest.VM_ENTITY_ID ) ; org.junit.Assert.assertNull ( result ) ; }
protected void handleError ( ) { addCanDoActionMessage ( VdcBllMessages.VDS_FENCE_OPERATION_FAILED ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__HOST ) ; addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__RESTART ) ; log.errorFormat ( "Failed to run RestartVdsCommand on vds :{0}" , org.ovirt.engine.core.bll.RestartVdsCommand.getVdsName ( ) ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; InitSpmPriorities1 ( ) ; }
private java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.api.model.Disk > queryVmDisksMap ( org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < org.ovirt.engine.api.model.Disk > vmDisks = getBackendCollection ( org.ovirt.engine.api.model.Disk.class , VdcQueryType.GetAllDisksByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) ; return org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( vmDisks ) ; }
public java.lang.Integer getusage_network_percent ( ) { return this . mVmStatistics.getusage_network_percent ( ) ; }
public void updateVolumeStatus ( org.ovirt.engine.core.compat.Guid volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus status ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterVolumeStatus" , createVolumeIdParams ( volumeId ) . addValue ( "status" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( status ) ) ) ; }
protected org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return runConnectionStorageToDomain ( storageDomain , vdsId , type , null , storageDomain.getStoragePoolId ( ) ) ; }
public void cluster_SelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( vm.getQuotaId ( ) , vm.getQuotaName ( ) ) ; updateCpuPinningVisibility ( ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.VfsConfigNetwork vfsConfigNetwork : getNetworksTableItems ( ) ) { if ( canEditAssign ( vfsConfigNetwork ) ) { vfsConfigNetwork.setAttached ( value ) ; } } refreshNetworksTable ( ) ; }
public static java.lang.Object getConfigValuePreConverted ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , java.lang.String version ) { org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > key = new org.ovirt.engine.core.compat.KeyValuePairCompat < org.ovirt.engine.core.common.queries.ConfigurationValues , java.lang.String > ( configValue , version ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValuesPreConvert.get ( key ) ; }
org.ovirt.engine.core.common.vdscommands.VDSReturnValue RunVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType , org.ovirt.engine.core.common.vdscommands.VDSParametersBase parameters ) ;
public void testDefaultRouteNonDefaultRouteNetworkIsIgnored ( ) { iface.setIpv4DefaultRoute ( true ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; org.junit.Assert.assertThat ( createTestedInstance ( false , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
protected abstract void toggleGhost ( T value , V widget , boolean becomingGhost ) ;
protected void teardown ( ) { }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void formatStringTestNotEnoughParams ( ) { testMessages.addFallback ( DynamicMessageKey.VERSION_ABOUT , "This is version about: {0}.{1}.{2}" ) ; testMessages.formatString ( DynamicMessageKey.VERSION_ABOUT , "1.1.1" ) ; org.junit.Assert.fail ( "Should not get here" ) ; }
protected void verifyIfHostExistsToHandle404StatusCode ( ) { org.ovirt.engine.core.compat.Guid hostId = getHostId ( ) ; getEntity ( org.ovirt.engine.core.common.businessentities.VDS.class , VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , hostId.toString ( ) , true ) ; }
public void testGetAllForStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao.getAllForStorageDomain ( org.ovirt.engine.core.dao.VmDAOTest.STORAGE_DOMAIN_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator createMultipleStorageDomainsValidator ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator ( org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand.getStoragePoolId ( ) , org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds ( diskImages ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider < org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel , org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplateGeneralPresenter.constants.templateGeneralSubTabLabel ( ) , 0 , modelProvider ) ; }
protected < T > boolean matchEntity ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity , T id ) { return ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy getRetryPolicy ( ) { return this . client.getRetryPolicy ( ) ; }
protected void refreshModel ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; super . syncSearch ( VdcQueryType.GetAllAuditLogsByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ; }
public void testGetAllForAdElementFilteredWithNoPermissions ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > result = dao.getAllForAdElement ( org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_SESSION_ID , true ) ; org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList ( result ) ; }
private void removeMemoryDisksIfNeeded ( java.lang.String hiberVol ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( hiberVol ) ) { org.ovirt.engine.core.bll.StopVmCommandBase.removeHibernationDisks ( hiberVol ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmPool object ) { return java.lang.Integer.toString ( object.getvm_running_count ( ) ) ; }
protected void executeCommand ( ) { getMacPoolDao ( ) . remove ( getMacPoolId ( ) ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . removePool ( getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
protected void setUpGetPayloadsExpectations ( int times ) throws java.lang.Exception { for ( int i = 0 ; i < times ; i ++ ) { setUpGetPayloadExpectations ( i ) ; } }
private void releaseHostDevicesLock ( ) { if ( needsHostDevices ) { hostDeviceManager.releaseHostDevicesLock ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDedicatedVmForVds ( ) ) ; } }
public void setpm_enabled ( boolean value ) { mVdsStatic.setpm_enabled ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "pm_enabled" ) ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc reset ( java.lang.String vmId ) ;
public void testCanDoActionLunDisk ( ) { org.mockito.Mockito.when ( getDiskDao ( ) . get ( getDiskImageGroupId ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_LUN_DISK ) ; }
public void replaceProductKeyEmptyKeyShouldNotRemoveTheWholeSectionForCustomScript ( ) { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey ( sysprepFile , "" , true ) ; org.junit.Assert.assertThat ( res , org.hamcrest.core.StringContains.containsString ( "<ProductKey>" ) ) ; org.junit.Assert.assertThat ( res , org.hamcrest.core.StringContains.containsString ( "</ProductKey>" ) ) ; }
public java.lang.String getName ( ) { return getEntity ( ) . getName ( ) ; }
public void setis_initialized ( boolean value ) { this . mVmStatic.setis_initialized ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "is_initialized" ) ) ; }
public javax.ws.rs.core.Response suspend ( org.ovirt.engine.api.model.Action action ) { return doAction ( VdcActionType.HibernateVm , new org.ovirt.engine.core.common.action.HibernateVmParameters ( guid ) , action ) ; }
public void testIsManagementNetworkNameInGivenClusterNull ( ) throws java.lang.Exception { testIsManagementNetworkNameInGivenClusterCommon ( null , false ) ; }
private org.ovirt.engine.core.common.action.VdcActionType getSnapshotActionType ( ) { return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . isDown ( ) ? org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk : org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDiskLive ; }
private org.ovirt.engine.api.model.DetailedLink createLink ( java.lang.String rel , org.ovirt.engine.api.common.util.LinkHelper.LinkFlags flags , org.ovirt.engine.api.model.ParametersSet params ) { return org.ovirt.engine.api.common.util.LinkHelper.createLink ( getUriInfo ( ) . getBaseUri ( ) . getPath ( ) , rel , flags , params ) ; }
public java.lang.Long getswap_free ( ) { return this . swap_free ; }
public static void GetTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.GetVmTemplatesByStoragePoolIdParameters ( dataCenterId ) , aQuery ) ; }
protected int colorDepthAsInt ( ) { if ( ( getWANColorDepth ( ) ) != null ) { return getWANColorDepth ( ) . asInt ( ) ; } return WanColorDepth.depth16.asInt ( ) ; }
protected org.ovirt.engine.core.bll.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) ; }
public org.ovirt.engine.api.model.Statistic setDatum ( org.ovirt.engine.api.model.Statistic statistic , long datum ) { return setDatum ( statistic , new java.math.BigDecimal ( datum ) ) ; }
private void mockConfig ( ) { mcr.mockConfigValue ( ConfigValues.PredefinedVMProperties , "3.0" , "" ) ; mcr.mockConfigValue ( ConfigValues.UserDefinedVMProperties , "3.0" , "" ) ; mcr.mockConfigValue ( ConfigValues.InitStorageSparseSizeInGB , 1 ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , diskAlias , diskDescription , propagateErrors , shareable , wipeAfterDelete , sgio , cinderVolumeType ) ; }
protected java.util.Map < java.lang.String , java.lang.String > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId ( ) . toString ( ) , LockingGroup.STORAGE.name ( ) ) ; }
public void testGetVMDefaultConstraint ( ) throws java.lang.Exception { doTestGetDefaultConstraint ( org.ovirt.engine.api.model.VM.class , "VMs : " ) ; }
public java.lang.Integer getVmPid ( ) { return this . vmPid ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > ) ( source ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > ( ) ; }
protected org.ovirt.engine.api.model.Storage addParents ( org.ovirt.engine.api.model.Storage storage ) { storage.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; storage.getHost ( ) . setId ( hostId ) ; return storage ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { model.getImageSourceLocalEnabled ( ) . setEntity ( true ) ; setSourceVisibility ( model ) ; }
public java.lang.String getSearchString ( ) { return searchString ; }
public void setSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot value ) { if ( ( snapshot ) != value ) { snapshot = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Snapshot" ) ) ; } }
public void testGetVMsForStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.OvfEntityData > ovfEntityDataList = dao.getAllForStorageDomainByEntityType ( FixturesTool.STORAGE_DOMAIN_NFS2_1 , VmEntityType.VM ) ; org.junit.Assert.assertTrue ( "A VM should be fetched for the specified storage domain" , ( ! ( ovfEntityDataList.isEmpty ( ) ) ) ) ; }
public void testIsNetworkInSyncWhenMtuDifferent ( ) throws java.lang.Exception { iface.setMtu ( 1 ) ; network.setMtu ( 2 ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getVmDisks ( ) { return getVm ( ) . getDiskList ( ) ; }
public org.ovirt.engine.api.model.VmPool update ( org.ovirt.engine.api.model.VmPool incoming ) { return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVmPoolById , org.ovirt.engine.core.common.queries.GetVmPoolByIdParameters.class ) , VdcActionType.UpdateVmPoolWithVms , new org.ovirt.engine.api.restapi.resource.BackendVmPoolResource.UpdateParametersProvider ( ) ) ; }
java.util.List < org.ovirt.engine.core.compat.Guid > getAllIds ( ) ;
protected void EntityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . EntityPropertyChanged ( sender , e ) ; UpdateProperties ( ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.HOSTED_ENGINE_DOMAIN_IMPORT_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.HOSTED_ENGINE_DOMAIN_IMPORT_FAILED ; }
public void setGuestOs ( java.lang.String value ) { this . vmDynamic.setguest_os ( value ) ; }
public void RemoveVds ( org.ovirt.engine.core.compat.Guid vdsId , boolean newHost ) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = GetVdsManager ( vdsId , newHost ) ; if ( vdsManager != null ) { vdsManager.dispose ( ) ; vdsManagersDict.remove ( vdsId ) ; } }
public void testQueryType ( ) throws java.lang.IllegalAccessException , java.lang.IllegalArgumentException { junit.framework.Assert.assertNotSame ( "The query can't be found in the enum VdcQueryType" , VdcQueryType.Unknown , org.ovirt.engine.core.bll.TestHelperQueriesCommandType.getQueryTypeFieldValue ( query ) ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.historydelete_3_5.HistoryDelete.row23Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryDelete ) { try { int length = 0 ; this . history_id = dis.readInt ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { return ! ( existingSessionSlavesIds.contains ( slaveVolume.getId ( ) ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface targetNic , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel ) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment ( network , targetNic , null , dataFromHostSetupNetworksModel ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; clusterGuideModel.localStorageHost = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; clusterGuideModel.updateOptionsLocalFS ( ) ; }
public void lowerVersionMgmtNetworkNonSupportedFeatures ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; final org.ovirt.engine.core.compat.Guid anotherManagementNetworkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; addManagementNetworksToPool ( anotherManagementNetworkId , org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.TEST_MANAGEMENT_NETWORK_ID ) ; setupNetworkValidator ( false ) ; canDoActionFailed ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public int getMaxPciDevices ( int osId , org.ovirt.engine.core.compat.Version version ) ;
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { showAvailableVolumes ( ReturnValue ) ; }
private static < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < ? > > void updateAllInTransaction ( final java.util.Collection < T > entities , final org.ovirt.engine.core.dao.MassOperationsDao < T > dao ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction ( null , entities , dao ) ; }
protected java.util.Collection < org.ovirt.engine.api.restapi.resource.VM > getEntitiesFromExportDomain ( ) { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenterId ( storageDomainId ) , storageDomainId ) ; return getBackendCollection ( VdcQueryType.GetVmsFromExportDomain , params ) ; }
public int compare ( org.ovirt.engine.ui.uicommonweb.models.storage.LunModel o1 , org.ovirt.engine.ui.uicommonweb.models.storage.LunModel o2 ) { int val1 = o1.getAdditionalAvailableSize ( ) ; int val2 = o2.getAdditionalAvailableSize ( ) ; return java.lang.Integer.compare ( val1 , val2 ) ; }
protected org.ovirt.engine.core.common.businessentities.OriginType getRawValue ( java.lang.Object object ) { return getEntity ( object ) . getOrigin ( ) ; }
private void buildImageReference ( ) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = _document.SelectNodes ( "//*/File" , _xmlNS ) ; for ( org.ovirt.engine.core.utils.ovf.xml.XmlNode node : list ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setImageId ( new org.ovirt.engine.core.compat.Guid ( node.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; image.setId ( org.ovirt.engine.core.utils.ovf.OvfParser.GetImageGrupIdFromImageFile ( node.attributes.get ( "ovf:href" ) . getValue ( ) ) ) ; image.setActive ( true ) ; image.setImageStatus ( ImageStatus.OK ) ; image.setDescription ( node.attributes.get ( "ovf:description" ) . getValue ( ) ) ; _images.add ( image ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { cleanHostParametersFields ( ) ; if ( ( getIsDiscorveredHosts ( ) . getEntity ( ) ) != null ) { updateHostList ( getIsDiscorveredHosts ( ) . getEntity ( ) ) ; } }
public org.ovirt.engine.core.bll.snapshots.SnapshotsManager getSnapshotManager ( ) { return new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) ; }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present , java.lang.String width ) { table.ensureColumnPresent ( column , headerText , present , width ) ; tableHeader.ensureColumnPresent ( column , headerText , present , width ) ; }
public void testParseNoOptions ( ) { java.util.List < org.ovirt.engine.api.model.PowerManagement > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "foo:" , "" ) ; assertNotNull ( ret ) ; assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" ) ; }
public void testEmptyDiskStats ( ) { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xml = setDisksStatsInXmlRpc ( disksStats ) ; validateDisksStatsList ( getVds ( ) , xml , false ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > getLunsByVgId ( java.lang.String vgId ) { return asCollection ( org.ovirt.engine.core.common.businessentities.storage.LUNs.class , getEntity ( java.util.List.class , VdcQueryType.GetLunsByVgId , new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId ) , ( "LUNs for volume group: id=" + vgId ) ) ) ; }
protected void addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages message ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( message.name ( ) ) ; }
public static < TSource > TSource FirstOrDefault ( java.lang.Iterable < TSource > source ) { for ( TSource item : source ) { return item ; } return null ; }
private void testActionAllowed ( ) { org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( cmd ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) . swapButton ( createButton ( item ) ) ; addGhostEntry ( ) ; onAdd ( value , widget ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( getId ( ) , parentDeviceName , capability , iommuGroup , productName , productId , vendorName , vendorId , parentPhysicalFunction , totalVirtualFunctions , networkInterfaceName , vmId ) ; }
private boolean validateNotTheSameName ( ) { if ( org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.isStorageWithSameNameExists ( ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST ) ; } return true ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { model.setAuthenticationMethod ( AuthenticationMethod.Password ) ; displayPassPkWindow ( true ) ; }
public void setpm_options ( java.lang.String value ) { pmOptions = value ; pmOptionsMap = org.ovirt.engine.core.common.businessentities.VdsStatic.PmOptionsStringToMap ( value ) ; }
protected void selectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . selectedItemPropertyChanged ( sender , e ) ; if ( ( e.PropertyName.equals ( "status" ) ) || ( e.PropertyName.equals ( "pm_enabled" ) ) ) { UpdateActionAvailability ( ) ; } }
public org.ovirt.engine.core.bll.ValidationResult requiredValuesPresent ( ) { return ( ( getQos ( ) ) != null ) && ( ( getQos ( ) . getOutAverageLinkshare ( ) ) == null ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_MISSING_VALUES ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public java.lang.String getVmDomain ( ) { return this . vmStatic.getDomain ( ) ; }
public void testGetAllForRoleAndAdElementWithInvalidElement ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.permissions > result = dao.getAllForRoleAndAdElement ( org.ovirt.engine.core.dao.PermissionDAOTest.ROLE_ID , org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList ( result ) ; }
public void testAddInvalidSDStatusMessagePreparingForMaintenance ( ) { testAddInvalidSDStatusMessage ( StorageDomainStatus.PreparingForMaintenance ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeProviderResource ( "foo" , resource.getParent ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private boolean hasVms ( java.lang.Object selectedItem ) { if ( selectedItem instanceof org.ovirt.engine.core.common.businessentities.VmPool ) { return ( ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( selectedItem ) ) . getvm_assigned_count ( ) ) != 0 ; } return false ; }
private static int compareSequence ( java.lang.String seq1 , java.lang.String seq2 , boolean digitSequence ) { return digitSequence ? org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compDigitSequence ( seq1 , seq2 ) : org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.compNonDigitSequence ( seq1 , seq2 ) ; }
public void setId ( java.lang.String id ) { this . id = id ; }
public void setDedicatedHost ( org.ovirt.engine.core.compat.Guid dedicatedHost ) { this . dedicatedHost = dedicatedHost ; }
public void validateCanDoAction ( ) { mockVMPoolDAO ( ) ; setupForStorageTests ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public abstract java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > executeAsyncCommand ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.context.CommandContext cmdContext ) ;
public java.util.concurrent.Future < java.lang.Void > close ( ) { return disconnect ( ) ; }
public void testGetAllForNetworkForUserWithPermission ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > result = dao.getAllForNetwork ( FixturesTool.NETWORK_ENGINE , org.ovirt.engine.core.dao.network.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , result.size ( ) ) ; }
public java.lang.String render ( java.lang.Integer object ) { return messages.maxVfs ( object ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation ( ) { throw new org.apache.commons.lang.NotImplementedException ( ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; } return source ; }
public java.lang.String getDefaultTitle ( ) { return constants.bootableDisk ( ) ; }
public void testGetManagementNetworks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getManagementNetworks ( FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.network.NetworkDaoTest.NUM_OF_MANAGEMENT_NETWORKS , result.size ( ) ) ; }
private static boolean checkPermissions ( org.ovirt.engine.core.compat.Guid cpuProfileId , org.ovirt.engine.core.compat.Guid userId ) { return ( userId == null ) || ( ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.getPermissionDao ( ) . getEntityPermissions ( userId , ActionGroup.ASSIGN_CPU_PROFILE , cpuProfileId , VdcObjectType.CpuProfile ) ) != null ) ; }
public void testParseNegative3 ( ) { org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( "lorem ipsum" ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String url , java.lang.String username , java.lang.String password ) ;
public java.lang.String toString ( ) { return ( "Host[" + ( ( mVdsStatic ) == null ? "null" : mVdsStatic.getvds_name ( ) ) ) + "]" ; }
public int compareTo ( org.ovirt.engine.core.common.businessentities.VmStatistics o ) { return org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityGuidComparator.< org.ovirt.engine.core.common.businessentities.VmStatistics > newInstance ( ) . compare ( this , o ) ; }
private void translateErrors ( final java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > errors ) { for ( org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors ) { retVal.setCanDoActionMessages ( ( ( java.util.ArrayList < java.lang.String > ) ( translateError ( retVal ) ) ) ) ; } }
public void removeSessionItem ( java.lang.String key ) { if ( ( org.ovirt.engine.ui.common.system.ClientStorageImpl.sessionStorage ) != null ) { org.ovirt.engine.ui.common.system.ClientStorageImpl.sessionStorage.removeItem ( key ) ; } else { com.google.gwt.user.client.Cookies.removeCookie ( key ) ; } }
protected void setActionMessageParameters ( ) { addCustomValue ( GlusterConstants.VOLUME_SNAPSHOT_NAME , org.ovirt.engine.core.bll.gluster.GlusterVolumeSnapshotCommandBase.getParameters ( ) . getSnapshotName ( ) ) ; }
public void testChangeToExistingName ( ) { prepareVmToPassCanDoAction ( ) ; mockSameNameQuery ( true ) ; org.junit.Assert.assertFalse ( "canDoAction should have failed with vm name already in use." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_NAME_ALREADY_USED ) ; }
public void ClearTasks ( ) { synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.EntityAsyncTask > CurrentActionTypeTasks = GetCurrentActionTypeTasks ( ) ; for ( org.ovirt.engine.core.bll.EntityAsyncTask task : CurrentActionTypeTasks ) { task.ClearAsyncTask ( ) ; } StartPollingNextTask ( ) ; } }
public void validateSucceeds ( ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand ( new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) , null ) ) ; prepareMocks ( command ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.StoragePool value ) { privateEntity = value ; }
protected org.ovirt.engine.core.bll.pm.FenceAgentExecutor createAgentExecutor ( ) { return new org.ovirt.engine.core.bll.pm.FenceAgentExecutor ( fencedHost , fencingPolicy ) ; }
public java.util.List < org.ovirt.engine.core.common.job.Job > getJobsByCorrelationId ( java.lang.String correlationId ) { return multipleResults ( getEntityManager ( ) . createNamedQuery ( "Job.getJobsByCorrelationId" , org.ovirt.engine.core.common.job.Job.class ) . setParameter ( "correlationId" , correlationId ) ) ; }
public void noVdsGroup ( ) { simulateVdsGroupDoesNotExist ( ) ; assertValidateFailure ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID.toString ( ) ) ; }
protected static org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResource getCollection ( ) { return new org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResource ( org.ovirt.engine.api.restapi.resource.AbstractBackendDisksResourceTest.PARENT_ID ) ; }
public java.lang.Boolean getValue ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { if ( ! ( networkClusterModel.isRequired ( ) ) ) { return false ; } } return true ; }
public java.lang.String GetTagNamesAndChildrenNamesByRegExp ( java.lang.String tagNameRegExp ) { return org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . GetTagNamesAndChildrenNamesByRegExp ( tagNameRegExp ) ; }
public static boolean IsMatch ( java.lang.String string , java.lang.String expression , org.ovirt.engine.core.compat.RegexOptions options ) { throw new org.ovirt.engine.core.compat.NotImplementedException ( ) ; }
public void initTemplate ( ) { setupTemplate ( vm , getModel ( ) . getTemplate ( ) ) ; }
protected void UpdateCustomProperties ( ) { super . UpdateCustomProperties ( ) ; updateCustomPropertySheet ( ) ; }
protected org.ovirt.engine.api.model.VM getEntity ( int index ) { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM ( ) ; vm.setId ( GUIDS [ index ] ) ; vm.setName ( NAMES [ index ] ) ; return vm ; }
public boolean isSplitted ( ) { return ( ( getVmNumaNode ( ) . getVdsNumaNodeList ( ) ) != null ) && ( ( getVmNumaNode ( ) . getVdsNumaNodeList ( ) . size ( ) ) > 1 ) ; }
protected void afterExecute ( java.lang.Runnable r , java.lang.Throwable t ) { super . afterExecute ( r , t ) ; org.ovirt.engine.core.utils.ThreadLocalParamsContainer.clean ( ) ; }
public void testValidateNotRemovingUsedNetworkByVmsWhenNotUsedByVms ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . build ( ) ) ; org.junit.Assert.assertThat ( validator.validateNotRemovingUsedNetworkByVms ( "removedNet" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
com.google.gwt.safehtml.shared.SafeHtml vmCountWithMigrating ( java.lang.String vmCountStr , java.lang.String vmMigratingStr , java.lang.String title , com.google.gwt.safehtml.shared.SafeHtml image ) ;
protected boolean canDoAction ( ) { return ( ( ( super . canDoAction ( ) ) && ( VdsGroupExists ( ) ) ) && ( changesAreClusterCompatible ( ) ) ) && ( logicalNetworkExists ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.vm_pools object ) { return java.lang.Integer.toString ( object.getvm_running_count ( ) ) ; }
public static void resume ( org.ovirt.engine.core.utils.transaction.Transaction transaction ) { try { org.ovirt.engine.core.utils.transaction.TransactionManager tm = org.ovirt.engine.core.utils.transaction.TransactionSupport.findTransactionManager ( ) ; tm.resume ( transaction ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( "Unable to resume transaction" , e ) ; } }
public void testLogOffDoesntLog ( ) { org.ovirt.engine.core.utils.log.Log log = org.mockito.Mockito.mock ( org.ovirt.engine.core.utils.log.Log.class ) ; org.ovirt.engine.core.utils.log.LoggedUtils.log ( log , LogLevel.OFF , "{0}" , new java.lang.Object ( ) ) ; org.mockito.Mockito.verifyZeroInteractions ( log ) ; }
private org.ovirt.engine.core.bll.ImportVmTemplateCommand setupDiskSpaceTest ( final int extraDiskSpaceRequired ) { mcr.mockConfigValue ( ConfigValues.FreeSpaceCriticalLowInGB , extraDiskSpaceRequired ) ; return new org.ovirt.engine.core.bll.TestHelperImportVmTemplateCommand ( createParameters ( ) ) ; }
public void refreshRunningVmsWithDiskProfile ( org.ovirt.engine.core.compat.Guid diskProfileId , org.ovirt.engine.core.common.businessentities.qos.StorageQos newQos ) { refreshVmsStorageQos ( getRunningVmDiskImageMapWithProfiles ( java.util.Collections.singleton ( diskProfileId ) ) , newQos ) ; }
static java.util.ResourceBundle readMessagesFromBundle ( ) { try { return java.util.ResourceBundle.getBundle ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.APP_ERRORS_MESSAGES_FILE_NAME ) ; } catch ( java.util.MissingResourceException e ) { throw new java.lang.RuntimeException ( ( "Could not load audit log messages from the file " + ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.APP_ERRORS_MESSAGES_FILE_NAME ) ) ) ; } }
public void testVersionedValue ( ) { org.junit.Assert.assertEquals ( 1024 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 777 , null ) ) ; org.junit.Assert.assertEquals ( 512 , OsRepositoryImpl.INSTANCE.getMinimumRam ( 777 , Version.v3_5 ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VM v ) { return ! ( vdsId.equals ( v.getdedicated_vm_for_vds ( ) ) ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget.getView ( ) . focusInput ( ) ; }
public java.lang.String getName ( ) { return getVmName ( ) ; }
public void setnum_of_cpus ( int value ) { }
public void testAdjustLegacySecureChannels ( ) { java.lang.String legacyChannels = "smain,sdisplay,sinputs,scursor,splayback,srecord,ssmartcard,susbredir" ; java.lang.String correctChannels = "main,display,inputs,cursor,playback,record,smartcard,usbredir" ; org.junit.Assert.assertEquals ( correctChannels , org.ovirt.engine.core.common.console.ConsoleOptions.adjustLegacySecureChannels ( legacyChannels ) ) ; }
public void run ( ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . vdsNonOperational ( vdsId , NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , true , true , domainId ) ; }
public void resetCompensation ( ) ;
public java.lang.String getDiskAlias ( ) { return disk.getDiskAlias ( ) ; }
protected void initDetailModels ( ) { super . initDetailModels ( ) ; org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.ui.uicompat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel ( ) ) ; setDetailModels ( list ) ; }
public void setStyleClass ( java.lang.String styleClass ) { this . styleClass = ( styleClass == null ) ? "" : styleClass ; }
public void setbuild_name ( java.lang.String value ) { this . buildName = value ; this . getVersion ( ) . setBuildName ( value ) ; }
protected void attemptToActivateDomain ( ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase activateParameters = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getStoragePool ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.ActivateStorageDomain , activateParameters ) ; }
void setsize ( long value ) ;
void AddError ( java.lang.String error ) ;
private java.lang.String getTemplateExclusiveLockMessage ( ) { return new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_IS_BEING_REMOVED.name ( ) ) . append ( java.lang.String.format ( "$TemplateName %1$s" , org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate ( ) . getName ( ) ) ) . toString ( ) ; }
public void initialize ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem ) { super . initialize ( systemTreeSelectedItem ) ; getModel ( ) . getVmType ( ) . setIsChangable ( true ) ; templateValidate ( ) ; }
protected void readGeneralData ( ) { org.ovirt.engine.core.utils.ovf.xml.XmlNode content = _document.SelectSingleNode ( "//*/Content" ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode node ; vmBase.setVmInit ( new org.ovirt.engine.core.common.businessentities.VmInit ( ) ) ; vmBase.setOvfVersion ( getVersion ( ) ) ; node = content.SelectSingleNode ( OvfProperties.DESCRIPTION ) ; if ( node != null ) { vmBase.setDescription ( node.innerText ) ; } node = content.SelectSingleNode ( OvfProperties.COMMENT ) ; if ( node != null ) { vmBase.setComment ( node.innerText ) ; } node = content.SelectSingleNode ( OvfProperties.DOMAIN ) ; if ( node != null ) { vmBase.getVmInit ( ) . setDomain ( node.innerText ) ; } node = content.SelectSingleNode ( OvfProperties.CREATION_DATE ) ; if ( node != null ) { java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate ( node.innerText ) ; if ( creationDate != null ) { vmBase.setCreationDate ( creationDate ) ; } } node = content.SelectSingleNode ( OvfProperties.EXPORT_DATE ) ; if ( node != null ) { java.util.Date exportDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate ( node.innerText ) ; if ( exportDate != null ) { vmBase.setExportDate ( exportDate ) ; } } node = content.SelectSingleNode ( OvfProperties.DEFAULT_BOOT_SEQUENCE ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setDefaultBootSequence ( org.ovirt.engine.core.common.businessentities.BootSequence.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = content.SelectSingleNode ( OvfProperties.INITRD_URL ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setInitrdUrl ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.KERNEL_URL ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setKernelUrl ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.KERNEL_PARAMS ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setKernelParams ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.GENERATION ) ; if ( node != null ) { vmBase.setDbGeneration ( java.lang.Long.parseLong ( node.innerText ) ) ; } else { vmBase.setDbGeneration ( 1L ) ; } node = content.SelectSingleNode ( getDefaultDisplayTypeStringRepresentation ( ) ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { defaultDisplayType = org.ovirt.engine.core.common.businessentities.DisplayType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ; vmBase.setDefaultDisplayType ( defaultDisplayType ) ; } } org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = content.SelectNodes ( "Section" ) ; org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version ( getVersion ( ) ) ; if ( list != null ) { node = getNode ( list , "xsi:type" , "ovf:OperatingSystemSection_Type" ) ; if ( node != null ) { readOsSection ( node ) ; if ( ( ( ! ( osRepository.isLinux ( vmBase.getOsId ( ) ) ) ) || ( ! ( org.ovirt.engine.core.common.FeatureSupported.singleQxlPci ( version ) ) ) ) || ( ( vmBase.getDefaultDisplayType ( ) ) != ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) ) { vmBase.setSingleQxlPci ( false ) ; } } node = getNode ( list , "xsi:type" , "ovf:VirtualHardwareSection_Type" ) ; if ( node != null ) { readHardwareSection ( node ) ; } node = getNode ( list , "xsi:type" , "ovf:SnapshotsSection_Type" ) ; if ( node != null ) { readSnapshotsSection ( node ) ; } } node = content.SelectSingleNode ( OvfProperties.TIMEZONE ) ; if ( ( node != null ) && ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) ) { vmBase.setTimeZone ( node.innerText ) ; } else { if ( osRepository.isWindows ( vmBase.getOsId ( ) ) ) { vmBase.setTimeZone ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DefaultWindowsTimeZone ) ) ; } else { vmBase.setTimeZone ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.DefaultGeneralTimeZone ) ) ; } } node = content.SelectSingleNode ( OvfProperties.ORIGIN ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setOrigin ( org.ovirt.engine.core.common.businessentities.OriginType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = content.SelectSingleNode ( OvfProperties.VM_TYPE ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setVmType ( org.ovirt.engine.core.common.businessentities.VmType.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = content.SelectSingleNode ( OvfProperties.IS_SMARTCARD_ENABLED ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setSmartcardEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.NUM_OF_IOTHREADS ) ; if ( node != null ) { if ( ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) && ( ! ( org.ovirt.engine.core.common.FeatureSupported.isIoThreadsSupported ( version ) ) ) ) { vmBase.setNumOfIoThreads ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.DELETE_PROTECTED ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setDeleteProtected ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.SSO_METHOD ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setSsoMethod ( org.ovirt.engine.core.common.businessentities.SsoMethod.fromString ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.TUNNEL_MIGRATION ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setTunnelMigration ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.VNC_KEYBOARD_LAYOUT ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.innerText ) ) ) { vmBase.setVncKeyboardLayout ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.MIN_ALLOCATED_MEMORY ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMinAllocatedMem ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.IS_STATELESS ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setStateless ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.IS_RUN_AND_PAUSE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setRunAndPause ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.CREATED_BY_USER_ID ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCreatedByUserId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.MIGRATION_DOWNTIME ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMigrationDowntime ( java.lang.Integer.parseInt ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.MIGRATION_SUPPORT ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport = org.ovirt.engine.core.common.businessentities.MigrationSupport.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ; vmBase.setMigrationSupport ( migrationSupport ) ; } } readDedicatedHostsList ( ) ; node = content.SelectSingleNode ( OvfProperties.SERIAL_NUMBER_POLICY ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setSerialNumberPolicy ( org.ovirt.engine.core.common.businessentities.SerialNumberPolicy.forValue ( java.lang.Integer.parseInt ( node.innerText ) ) ) ; } } node = content.SelectSingleNode ( OvfProperties.CUSTOM_SERIAL_NUMBER ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomSerialNumber ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.AUTO_STARTUP ) ; if ( node != null ) { vmBase.setAutoStartup ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = content.SelectSingleNode ( OvfProperties.PRIORITY ) ; if ( node != null ) { vmBase.setPriority ( java.lang.Integer.parseInt ( node.innerText ) ) ; } node = content.SelectSingleNode ( OvfProperties.IS_BOOT_MENU_ENABLED ) ; if ( node != null ) { vmBase.setBootMenuEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = content.SelectSingleNode ( OvfProperties.IS_SPICE_FILE_TRANSFER_ENABLED ) ; if ( node != null ) { vmBase.setSpiceFileTransferEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = content.SelectSingleNode ( OvfProperties.IS_SPICE_COPY_PASTE_ENABLED ) ; if ( node != null ) { vmBase.setSpiceCopyPasteEnabled ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } node = content.SelectSingleNode ( OvfProperties.IS_AUTO_CONVERGE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setAutoConverge ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.IS_MIGRATE_COMPRESSED ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setMigrateCompressed ( java.lang.Boolean.parseBoolean ( node.innerText ) ) ; } } node = content.SelectSingleNode ( OvfProperties.CUSTOM_EMULATED_MACHINE ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomEmulatedMachine ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.CUSTOM_CPU_NAME ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setCustomCpuName ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.PREDEFINED_PROPERTIES ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setPredefinedProperties ( node.innerText ) ; } } node = content.SelectSingleNode ( OvfProperties.USER_DEFINED_PROPERTIES ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.innerText ) ) { vmBase.setUserDefinedProperties ( node.innerText ) ; } } vmBase.setCustomProperties ( org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance ( ) . customProperties ( vmBase.getPredefinedProperties ( ) , vmBase.getUserDefinedProperties ( ) ) ) ; readGeneralData ( content ) ; readVmInit ( content ) ; }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( getSearchString ( ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS , isCaseSensitiveSearch ( ) ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; super . syncSearch ( VdcQueryType.Search , tempVar ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc fenceSpmStorage ( java.lang.String spUUID , int prevID , java.lang.String prevLVER ) ;
public org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return super . createTask ( taskId , asyncTaskCreationInfo , parentCommand ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage_server_connections > GetStorageServerConnectionsByDomain ( org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_server_connections > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.storage_server_connections [ ] { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDAO ( ) . get ( storageDomain.getstorage ( ) ) } ) ) ; }
private boolean bondIsBeingRemoved ( java.lang.String bondName ) { for ( org.ovirt.engine.core.common.businessentities.network.Bond removedBond : params.getRemovedBonds ( ) ) { if ( bondName.equals ( removedBond.getName ( ) ) ) { return true ; } } return false ; }
public void testValidateImageNotInTemplateTrue ( ) { org.mockito.Mockito.when ( vmTemplateDAO.get ( mockSourceImage ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "validation should succeed" , cmd.validateImageNotInTemplate ( ) ) ; }
public void editProfiles ( org.ovirt.engine.ui.uicommonweb.models.ListModel profiles , org.ovirt.engine.core.compat.Version dcCompatibilityVersion , org.ovirt.engine.core.compat.Guid dcId , org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel defaultProfile ) { profilesEditor.edit ( profiles , dcCompatibilityVersion , dcId , defaultProfile ) ; }
public void testDefaultPoolFlagIsNotSetValidUsage ( ) { macPool.setDefaultPool ( false ) ; org.junit.Assert.assertThat ( macPoolValidator.defaultPoolFlagIsNotSet ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Disk createDisk ( org.ovirt.engine.core.compat.Guid id , boolean boot ) { org.ovirt.engine.core.common.businessentities.Disk disk = new org.ovirt.engine.core.common.businessentities.DiskImageBase ( ) ; disk.setId ( id ) ; disk.setBoot ( boot ) ; return disk ; }
public void externalNetworkIsNotNewInDataCenter ( ) throws java.lang.Exception { externalNetworkNewInDataCenterTestSetup ( true ) ; org.junit.Assert.assertThat ( validator.externalNetworkNewInDataCenter ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_ALREADY_EXISTS ) ) ; }
public void setdepartment ( java.lang.String value ) { this . department = value ; }
public void setUp ( ) { org.ovirt.engine.core.bll.VdsHandler.init ( ) ; }
protected org.ovirt.engine.api.model.DataCenter deprecatedPopulate ( org.ovirt.engine.api.model.DataCenter model , org.ovirt.engine.core.common.businessentities.storage_pool entity ) { return parent.deprecatedPopulate ( model , entity ) ; }
public org.ovirt.engine.core.bll.ValidationResult notLabeled ( ) { return ( network.getLabel ( ) ) == null ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType getDiskType ( ) { return getDisk ( ) . getDiskStorageType ( ) ; }
public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface3 ( ) throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK ) , vmNetwork1 , vlanNetwork ) ; }
public static org.ovirt.engine.core.searchbackend.ISyntaxChecker CreateBackendSyntaxChecker ( java.lang.String AuthenticationMethod ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.ConfigAuthenticationMethod = AuthenticationMethod ; if ( ( org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ) == null ) { org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.SearchResultsLimit ) ) ; } return org.ovirt.engine.core.searchbackend.SyntaxCheckerFactory.backendSyntaxChecker ; }
public org.ovirt.engine.api.resource.openstack.OpenStackVolumeProviderResource getOpenStackVolumeProvider ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.openstack.BackendOpenStackVolumeProviderResource ( id ) ) ; }
public void setDetachableIconVisible ( boolean visible ) { ( ( org.ovirt.engine.ui.common.widget.HasDetachable ) ( contentWidget ) ) . setDetachableIconVisible ( visible ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { addCustomValue ( "AuditLogId" , java.lang.String.valueOf ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ) ; return org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_AUDIT_LOG : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_AUDIT_LOG_FAILED ; }
protected boolean isSlave ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String masterName ) { return ( ( iface.getBondName ( ) ) != null ) && ( iface.getBondName ( ) . equals ( masterName ) ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build ( ) { return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , params , existingInterfaces , existingAttachments , new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( networks ) , managementNetworkUtil , networkClusterDaoMock , networkDaoMock , vdsDaoMock , new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorHelper ( ) , vmDao , effectiveHostNetworkQos ) ; }
public org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig get ( org.ovirt.engine.core.compat.Guid id ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig = super . get ( id ) ; return vfsConfig ; }
public org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel flush ( ) { neutronAgentWidget.flush ( ) ; vmwarePropertiesWidget.flush ( ) ; return driver.flush ( ) ; }
public void shouldDetectSuspendedVM ( ) { invalidVM.setStatus ( VMStatus.Suspended ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( UPGRADE_ERROR.VM_SUSPENDED ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkInterface FindInterfaceByName ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkInterface > items , java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.NetworkInterface i : items ) { if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( i.getName ( ) , name ) ) { return i ; } } return null ; }
public static java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > executeAsyncCommand ( org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.executeAsyncCommand ( actionType , parameters ) ; }
public org.ovirt.engine.core.bll.ValidationResult exists ( ) { if ( ( vds ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_DOES_NOT_EXIST ) ; } return ValidationResult.VALID ; }
protected void setUpStorageDomainQueryExpectations ( ) { setUpEntityQueryExpectations ( VdcQueryType.GetStorageDomainById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { STORAGE_DOMAIN_ID } , new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) ; }
protected final < T > javax.ws.rs.core.Response performCreate ( org.ovirt.engine.core.common.action.ActionType task , org.ovirt.engine.core.common.action.VdcActionParametersBase taskParams , org.ovirt.engine.api.restapi.resource.IResolver < T , Q > entityResolver , boolean block ) { return performCreate ( task , taskParams , entityResolver , block , null ) ; }
public org.ovirt.engine.api.v3.servers.V3VmNicsServer getNicsResource ( ) { return new org.ovirt.engine.api.v3.servers.V3VmNicsServer ( id , delegate.getNicsResource ( ) ) ; }
java.lang.String getSessionId ( ) { return clientStorage.getLocalItem ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.SESSION_ID_KEY ) ; }
public org.ovirt.engine.core.extensions.mgr.ExtensionProxy getAuthn ( java.lang.String sessionId ) { return ( ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy ) ( getData ( sessionId , org.ovirt.engine.core.bll.aaa.SessionDataContainer.AUTHN_PARAMETER_NAME , false ) ) ) ; }
public void testUpdateWithNonGuidId ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri ( "hosts" , "00000001-0001-0001-0001-000000000011" , "nics" , "116" ) ; javax.ws.rs.core.Request request = mockRequest ( "PUT" ) ; org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage ( uriInfo , request ) ; assertEquals ( "For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nic/methods/update" , fault.getDetail ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( java.lang.Object object ) { java.lang.String problem = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) . getProblem ( ) ; return problem != null ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( problem ) : null ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VM > getAllVMsForStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.bll.storage.GetVmsByStorageDomainQuery.getDbFacade ( ) . getVmDao ( ) . getAllForStorageDomain ( domainId ) ; }
public java.util.ArrayList < java.lang.String > getChangeablePropertiesList ( ) { return new java.util.ArrayList < java.lang.String > ( ) ; }
public void setExplanation ( com.google.gwt.safehtml.shared.SafeHtml text ) { infoIcon.setText ( text ) ; }
java.lang.String decrypt ( java.lang.String value ) throws java.lang.Exception { return org.ovirt.engine.core.utils.crypt.EncryptionUtils.decrypt ( value , org.ovirt.engine.core.config.entity.helper.PasswordValueHelper.keyStoreURL , org.ovirt.engine.core.config.entity.helper.PasswordValueHelper.keyStorePass , org.ovirt.engine.core.config.entity.helper.PasswordValueHelper.certAlias ) ; }
protected void AsyncSearch ( ) { super . AsyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.StorageDomain , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
private void logException ( java.lang.RuntimeException ex ) { log.errorFormat ( "Command {0} execution failed. Exception: {1}" , this , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( ex ) ) ; if ( log.isDebugEnabled ( ) ) { log.debugFormat ( "Detailed stacktrace:" , ex ) ; } }
public void setVncPort ( java.lang.String vncPort ) { this . vncPort = vncPort ; }
public void setBridge ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bridge ) { this . bridge = bridge ; }
public void testDifferentVerbosity ( ) { java.lang.String command = createCommand ( new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder ( ) . verboseLevel ( AnsibleVerbosity.LEVEL2 ) . playbook ( org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK ) ) ; org.junit.Assert.assertEquals ( join ( AnsibleCommandBuilder.ANSIBLE_COMMAND , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.IGNORE_SSH_CONFIG , "-vv" , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.PRIVATE_KEY , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK_FULL_PATH ) , command ) ; }
public void typeMatchesProfileOnlyProfilePassthrough ( ) { typeMatchesProfileCommon ( false , true ) ; org.junit.Assert.assertThat ( validator.typeMatchesProfile ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE ) ) ; }
public void testSave ( ) { dao.save ( newOption ) ; org.ovirt.engine.core.common.businessentities.VdcOption result = dao.getByNameAndVersion ( newOption.getoption_name ( ) , newOption.getversion ( ) ) ; assertNotNull ( result ) ; assertEquals ( newOption , result ) ; }
public org.ovirt.engine.api.resource.AssignedNetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendClusterNetworkResource ( id , this ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) { return item ; } } return null ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithNoCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setname ( "Default" ) ; group.setId ( VDSGroup.DEFAULT_VDS_GROUP_ID ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setstorage_pool_id ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
private java.lang.String getSsoToken ( final java.lang.String engineSessionId ) { return ( ( java.lang.String ) ( runQuery ( QueryType.GetEngineSessionIdToken , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , engineSessionId ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser getExpectedResult ( ) { return new org.ovirt.engine.core.common.businessentities.LdapUser ( NAME_TO_SEARCH , "melon!" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , DOMAIN ) ; }
private boolean volumeNameExists ( java.lang.String volumeName ) { return ( getGlusterVolumeDao ( ) . getByName ( getClusterId ( ) , volumeName ) ) != null ; }
public void passDiscardSupportedForCopyFloatingDiskOp ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; initTemplateDiskImage ( ) ; org.junit.Assert.assertTrue ( command.validatePassDiscardSupportedForDestinationStorageDomain ( ) ) ; }
public void setAttachedTagsToEntities ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > value ) { if ( ( attachedTagsToEntities ) != value ) { attachedTagsToEntities = value ; AttachedTagsToEntitiesChanged ( ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "AttachedTagsToEntities" ) ) ; } }
protected void onHide ( ) { super . onHide ( ) ; org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.EventArgs > systemTreeSelectedItemChangedEvent = org.ovirt.engine.ui.uicommonweb.models.CommonModel.getInstance ( ) . getSystemTree ( ) . getSelectedItemChangedEvent ( ) ; systemTreeSelectedItemChangedEvent.removeListener ( systemTreeListener ) ; }
protected void endVmCommand ( ) { getSnapshotDao ( ) . updateStatus ( getSnapshotId ( ) , SnapshotStatus.OK ) ; super . endVmCommand ( ) ; }
public void setSucceeded ( boolean succeeded ) { this . succeeded = succeeded ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final boolean showErrorDialog ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( actionType , parameters , org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK , null , showErrorDialog ) ; }
public void testSimpleMatches ( ) { org.ovirt.engine.core.compat.Regex regex = new org.ovirt.engine.core.compat.Regex ( "[0-9]" ) ; org.junit.Assert.assertTrue ( "A number should match" , regex.isMatch ( "1" ) ) ; org.junit.Assert.assertFalse ( "A letter should not match" , regex.isMatch ( "a" ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.storage.Disk , org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel , org.ovirt.engine.ui.uicommonweb.models.storage.StorageSnapshotListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageSnapshotPresenter.constants.snapshotsLabel ( ) , 9 , modelProvider ) ; }
private void addResource ( org.ovirt.engine.sdk.generator.utils.Tree < org.ovirt.engine.sdk.generator.Location > entityTree ) { java.lang.String className = org.ovirt.engine.sdk.generator.BrokerRules.getBrokerType ( entityTree ) ; java.lang.String classCode = new org.ovirt.engine.sdk.generator.java.templates.ResourceTemplate ( ) . evaluate ( entityTree ) ; code.put ( className , classCode ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . storageIsoSubTabLabel ( ) , 6 , ginjector.getSubTabStorageIsoModelProvider ( ) ) ; }
public final boolean SetData ( java.lang.String key , java.lang.Object value ) { java.lang.String sessionId = org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getHttpSessionId ( ) ; if ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( sessionId ) ) { return false ; } SetData ( sessionId , key , value ) ; return true ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue createVDSReturnValueForFailure ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; ret.setSucceeded ( false ) ; ret.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterServicesListFailed , "VDSM Error" ) ) ; return ret ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getCluster ( ) { if ( ( cluster ) == null ) { cluster = getDbFacade ( ) . getVdsGroupDao ( ) . get ( getProfile ( ) . getClusterId ( ) ) ; } return cluster ; }
private void verifyCPU ( org.ovirt.engine.api.model.CPU cpu , java.lang.String name , java.lang.Integer level ) { assertNotNull ( cpu ) ; assertEquals ( name , cpu.getId ( ) ) ; assertEquals ( level , cpu.getLevel ( ) ) ; }
public void getUsbTypeEnabledNative ( ) { org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; org.junit.Assert.assertEquals ( UsbType.NATIVE , org.ovirt.engine.api.restapi.utils.UsbMapperUtils.getUsbType ( usbPolicy ) ) ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "storageType" , getStorageType ( ) ) . append ( "connectionList" , getConnectionList ( ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getAllInterfacesByDataCenterId ( org.ovirt.engine.core.compat.Guid dataCenterId ) { return getCallsHandler ( ) . executeReadList ( "GetInterfacesByDataCenterId" , org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.vdsNetworkInterfaceRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "data_center_id" , dataCenterId ) ) ; }
public static java.lang.String GetMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String value = "" ; if ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.mMessages.containsKey ( logType ) ) { value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.mMessages.get ( logType ) ; } return value ; }
public void testConvertStringToId ( ) { junit.framework.Assert.assertEquals ( "0" , completer.convertFieldEnumValueToActualValue ( "other" ) ) ; junit.framework.Assert.assertEquals ( "1" , completer.convertFieldEnumValueToActualValue ( "rhel_x" ) ) ; junit.framework.Assert.assertEquals ( "2" , completer.convertFieldEnumValueToActualValue ( "rhel_x_y" ) ) ; }
public void testNewStorageTypes ( ) { org.junit.Assert.assertEquals ( ( "A storage type was added/removed. Update this test, and the isFileDomain/isBlockDomain " + "method accordingly" ) , 9 , org.ovirt.engine.core.common.businessentities.storage.StorageType.values ( ) . length ) ; }
public void CollapseAll ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel stm : getPermissionGroupModels ( ) ) { stm.setIsExpanded ( false ) ; for ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel stmChild : stm.getChildren ( ) ) { stmChild.setIsExpanded ( false ) ; } } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.setWANDisableEffects ( ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects > ) ( returnValue ) ) ) ; }
private boolean checkPermissions ( org.ovirt.engine.core.compat.Guid cpuProfileId , org.ovirt.engine.core.compat.Guid userId ) { return ( userId == null ) || ( ( permissionDao.getEntityPermissions ( userId , ActionGroup.ASSIGN_CPU_PROFILE , cpuProfileId , VdcObjectType.CpuProfile ) ) != null ) ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, status=%s, nonOperationalReason=%s, stopSpmFailureLogged=%s" , super . toString ( ) , getStatus ( ) , getNonOperationalReason ( ) , isStopSpmFailureLogged ( ) ) ; }
public void verifyFirstDomainForMemory ( ) { verifyDomainForMemory ( java.util.Arrays.asList ( validStorageDomain , invalidStorageDomain1 , invalidStorageDomain2 ) ) ; }
protected org.springframework.jdbc.core.RowMapper < java.lang.String > getStringMapper ( ) { return org.ovirt.engine.core.dao.BaseDaoDbFacade.stringRowMapper ; }
public boolean isLsmBetweenMixedStorageDomainsSupported ( org.ovirt.engine.core.compat.Version version ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.LiveStorageMigrationBetweenDifferentStorageTypes , version.toString ( ) ) ) ) ; }
void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , final com.google.gwt.dom.client.Element parent , C value , final com.google.gwt.safehtml.shared.SafeHtml tooltipContent , final com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < C > valueUpdater ) ;
protected void AddInvalidIdErrorMessages ( org.ovirt.engine.core.common.errors.VdcBllMessages messageActionTypeParameter ) { AddErrorMessages ( messageActionTypeParameter , VdcBllMessages.ACTION_TYPE_FAILED_BOOKMARK_INVALID_ID ) ; }
private org.ovirt.engine.core.common.businessentities.GraphicsType deriveGraphicsType ( ) { org.ovirt.engine.api.model.VM vm = getEntity ( org.ovirt.engine.api.model.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , "GetVmByVmId" ) ; return vm == null ? null : org.ovirt.engine.api.restapi.types.VmMapper.deriveGraphicsType ( vm.getGraphicsInfos ( ) ) ; }
public org.ovirt.engine.core.compat.Guid getTaskID ( ) { return getParameters ( ) . getTaskID ( ) ; }
public org.ovirt.engine.core.extensions.mgr.ExtensionProxy getAuthn ( ) { return ( ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy ) ( getData ( org.ovirt.engine.core.bll.session.SessionDataContainer.AUTHN_PARAMETER_NAME , false ) ) ) ; }
int getInterval ( ) { return 4000 ; }
public void setTitle ( java.lang.String text ) { this . title = text ; }
public void validateIsoPrefixWithTrippleSlash ( ) throws java.lang.Exception { java.lang.String initrd = ( org.ovirt.engine.core.bll.RunVmCommandTest.ISO_PREFIX ) + "/" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( initrd , null ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network.isExternal ( ) ; }
public void setmigrating_to_vds ( org.ovirt.engine.core.compat.NGuid value ) { this . mVmDynamic.setmigrating_to_vds ( value ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getAllRelevantQuotasForVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroupId , long engineSessionSeqId , boolean isFiltered ) ;
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeCreate ( java.lang.String volumeName , java.lang.String [ ] brickList , int replicaCount , int stripeCount , java.lang.String [ ] transportList ) ;
public void setCpuPerSocket ( int value ) { this . vmStatic.setcpu_per_socket ( value ) ; }
public java.lang.String getValue ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . getVmName ( ) ; }
private void localize ( ) { keyListBoxEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.optionKeyVolumeParameter ( ) ) ; descriptionEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.descriptionVolumeParameter ( ) ) ; valueEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.optionValueVolumeParameter ( ) ) ; }
private boolean isEveyoneNetworUserPermission ( org.ovirt.engine.core.common.businessentities.permissions permission ) { return ( permission.getad_element_id ( ) . equals ( ApplicationGuids.everyone.asGuid ( ) ) ) && ( permission.getrole_id ( ) . equals ( ApplicationGuids.networkUser.asGuid ( ) ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getRngDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdAndType ( vmId , VmDeviceGeneralType.RNG ) ; }
private void unlockDisk ( ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters ( ) . getImageGroupID ( ) , ImageStatus.OK ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . eventMainTabLabel ( ) , 13 , ginjector.getMainTabEventModelProvider ( ) , org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public java.util.Map < java.lang.String , java.lang.Object > glusterVolumeGeoRepSessionStop ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.Boolean force ) ;
public void canDoAction_vmNotExists_Test ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vmStaticDao ) . get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VM_FOR_AFFINITY_GROUP ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . hostMainTabLabel ( ) , 2 , ginjector.getMainTabHostModelProvider ( ) ) ; }
protected void callbackAddError ( java.lang.String message ) { if ( haveCallback ( ) ) { callback.addError ( message ) ; } }
public void nullQosValuesPresent ( ) { org.junit.Assert.assertThat ( nullValidator.requiredValuesPresent ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { return getDisplayTypes ( osId , version ) . contains ( DisplayType.qxl ) ; }
public void testRemoveActionVersionMap ( ) { dao.removeActionVersionMap ( existingActionMap.getaction_type ( ) ) ; org.ovirt.engine.core.common.businessentities.action_version_map result = dao.getActionVersionMapByActionType ( existingActionMap.getaction_type ( ) ) ; org.junit.Assert.assertNull ( result ) ; }
public void setLocalizedStrings ( java.lang.String [ ] localizedStrings ) { this . localizedStrings = localizedStrings ; }
void Executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) ;
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "providerId" , getProviderId ( ) ) . append ( "externalId" , getExternalId ( ) ) . build ( ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.scheduling.ClusterPolicy result = dao.get ( existingPolicy.getId ( ) , java.util.Collections.emptyMap ( ) ) ; org.junit.Assert.assertEquals ( result , existingPolicy ) ; }
protected void updateServerHookStatusInDb ( org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status ) { org.ovirt.engine.core.bll.gluster.GlusterHookCommandBase.getGlusterHooksDao ( ) . updateGlusterServerHookStatus ( hookId , serverId , status ) ; }
public void testIsUpdInvalid ( ) { storagePool.setstatus ( StoragePoolStatus.NonResponsive ) ; org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage ( validator.isUp ( ) , VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND ) ; }
public void lowerVersionNoHostsWithNetwork ( ) { storagePoolWithLowerVersion ( ) ; addNonDefaultClusterToPool ( ) ; addNonManagementNetworkToPool ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public void setPmProxyPreferences ( java.lang.String pmProxyPreferences ) { this . pmProxyPreferences = pmProxyPreferences ; }
public java.lang.String toString ( ) { return java.lang.String.format ( "%s, srcHost=%s, dstVdsId=%s, dstHost=%s, migrationMethod=%s, tunnelMigration=%s" , super . toString ( ) , getSrcHost ( ) , getDstVdsId ( ) , getDstHost ( ) , getMigrationMethod ( ) , isTunnelMigration ( ) ) ; }
public void nullVnicProfileWhenUnlinkingSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , true , null ) ; }
public void setIsGroup ( boolean value ) { }
protected boolean MigrateAllVms ( org.ovirt.engine.core.bll.job.ExecutionContext parentContext ) { return MigrateAllVms ( parentContext , false ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Event event ) { validateParameters ( event , "origin" , "severity" , "customId" , "description" ) ; return performCreate ( VdcActionType.AddExternalEvent , getParameters ( event ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < java.lang.Long > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetAuditLogById , org.ovirt.engine.core.common.queries.GetAuditLogByIdParameters.class ) ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.StorageDevice getValue ( org.ovirt.engine.core.common.businessentities.gluster.StorageDevice object ) { return object ; }
org.ovirt.engine.core.dao.VdsDAO getVdsDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDAO ( ) ; }
public void allowEmptyProfileForNonHostedEngineVm ( ) { vm.setOrigin ( OriginType.RHEV ) ; org.junit.Assert.assertThat ( validator.validateProfileNotEmptyForHostedEngineVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
void onIsValidPropertyChange ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { if ( model.getIsValid ( ) ) { markAsValid ( ) ; } else { markAsInvalid ( model.getInvalidityReasons ( ) ) ; } }
public void setParentParemeters ( org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { parentParameters = parameters ; }
public void getVmTemplateDefault ( ) { final org.ovirt.engine.core.common.businessentities.VmTemplate t = b.getVmTemplate ( ) ; org.junit.Assert.assertNull ( t ) ; }
public static org.ovirt.engine.api.extensions.ExtMap fetchPrincipalRecord ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , java.lang.String principal , boolean resolveGroups , boolean resolveGroupsRecursive ) { return org.ovirt.engine.core.aaa.AuthzUtils.fetchPrincipalRecordImpl ( extension , Authz.InvokeKeys.PRINCIPAL , principal , resolveGroups , resolveGroupsRecursive ) ; }
public void handleVdsMaintenanceTimeout ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.MaintenanceNumberOfVdss , new org.ovirt.engine.core.common.action.MaintenanceNumberOfVdssParameters ( java.util.Arrays.asList ( vdsId ) , true ) ) ; }
public void getAllForVmForPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( org.ovirt.engine.core.dao.VmGuestAgentInterfaceDaoTest.EXISTING_VM_ID , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; assertVmGuestAgentInterfaceForVm ( interfaces ) ; }
public boolean isVisible ( ) { return getDetailModel ( ) . getIsNfs ( ) ; }
public void setTitle ( java.lang.String title ) { this . title = title ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetTasksStatusesByTasksIDsQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . PollTasks ( org.ovirt.engine.core.bll.GetTasksStatusesByTasksIDsQuery.getParameters ( ) . getTasksIDs ( ) ) ) ; }
public void validateVirtOnlySucceeds ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public abstract int removeByVdsmTaskId ( org.ovirt.engine.core.compat.Guid vdsmTaskId ) ;
protected void removeQuotaCommandLeftOver ( ) { org.ovirt.engine.core.bll.QuotaManager.removeVdsGroupDeltaQuotaCommand ( org.ovirt.engine.core.bll.RunVmCommand.getQuotaId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getvds_group_id ( ) , org.ovirt.engine.core.bll.RunVmCommand.getCommandId ( ) ) ; }
protected void setStatus ( ) { if ( org.ovirt.engine.core.bll.pm.StartVdsCommand.getParameters ( ) . isChangeHostToMaintenanceOnStart ( ) ) { setStatus ( VDSStatus.Maintenance ) ; } else { setStatus ( VDSStatus.NonResponsive ) ; } }
public void enableCifs ( ) { accessProtocols.add ( AccessProtocol.CIFS ) ; setOption ( GlusterConstants.OPTION_USER_CIFS , GlusterConstants.ON ) ; }
protected org.ovirt.engine.core.dao.VmDynamicDAO getVmDynamicDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) ; }
public void testNonExistentType ( ) { org.junit.Assert.assertFalse ( comp.validateFieldValue ( ProviderConditionFieldAutoCompleter.TYPE , "foo" ) ) ; }
protected java.lang.String prepareImage ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetVal = runVdsCommand ( VDSCommandType.PrepareImage , getPrepareTeardownParameters ( vdsId ) ) ; return ( ( org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc ) ( vdsRetVal.getReturnValue ( ) ) ) . getImagePath ( ) ; }
private void handleCancelled ( ) { log.info ( "Upload cancelled for {}" , getUploadDescription ( ) ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.CANCELLED ) ; updateEntityPhase ( ImageTransferPhase.FINALIZING_FAILURE ) ; }
public void onSucceeded ( ) { }
public javax.xml.bind.JAXBElement < java.lang.String > createSource ( java.lang.String value ) { return new javax.xml.bind.JAXBElement < java.lang.String > ( org.ovirt.engine.sdk.entities.ObjectFactory._Source_QNAME , java.lang.String.class , null , value ) ; }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool ( ) { return org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . poolForDataCenter ( params.getStoragePoolId ( ) ) ; }
private void assertCompareTo ( org.ovirt.engine.core.common.businessentities.VmDevice device1 , org.ovirt.engine.core.common.businessentities.VmDevice device2 ) { org.junit.Assert.assertTrue ( ( ( device2.compareTo ( device1 ) ) > 0 ) ) ; org.junit.Assert.assertTrue ( ( ( device1.compareTo ( device2 ) ) < 0 ) ) ; }
public org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel flush ( ) { quotaClusterTable.flush ( ) ; quotaStorageTable.flush ( ) ; return org.ovirt.engine.ui.webadmin.section.main.view.popup.quota.QuotaPopupView.Driver.driver.flush ( ) ; }
public void setMaxWidth ( org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width ) { addTooltipClassName ( width.getWidthClass ( ) ) ; }
protected boolean canAddDomain ( ) { return org.ovirt.engine.core.bll.storage.AddExistingNFSStorageDomainCommand.checkExistingStorageDomain ( ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotDisabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED , null ) , UsbPolicy.DISABLED ) ; }
protected int getEntitiesTotalCount ( ) { return 8 ; }
public java.lang.String getdisplay_ip ( ) { return this . display_ip ; }
public void testHasUniqueNamePersistingNewRecordWithNullId ( ) { org.junit.Assert.assertThat ( callHasUniqueName ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null , "macPool1" , "whatever" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity , org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { initChildHierarchy ( ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( cmdEntity.getId ( ) ) ) { return ; } persistCommand ( cmdEntity ) ; saveCommandContext ( cmdEntity.getId ( ) , cmdContext ) ; }
protected void executeCommand ( ) { getSyncJobInstance ( ) . refreshHooksInCluster ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.getVdsGroup ( ) , true ) ; org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand.setSucceeded ( true ) ; }
com.google.gwt.safehtml.shared.SafeHtml userWithRole ( java.lang.String userName , java.lang.String roleName ) ;
protected org.ovirt.engine.core.common.asynctasks.AsyncTaskType getTaskType ( ) { if ( org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.isDataOperationsBySpm ( ) ) { return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.moveImage ; } return org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ; }
public void networkDoesntExist ( ) { simulateVdsGroupExists ( ) ; assertCanDoActionFailure ( VdcBllMessages.NETWROK_NOT_EXISTS.toString ( ) ) ; }
protected org.ovirt.engine.core.dao.NetworkDAO getNetworkDAO ( ) { return org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getDbFacade ( ) . getNetworkDAO ( ) ; }
public boolean canConnect ( ) { if ( ! ( canBeSelected ( ) ) ) { return false ; } return getForceVmStatusUp ( ) ? ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) : isVmRunning ( ) ; }
public static boolean IsActiveStorageDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { boolean isActive = ( ( storageDomain.getStatus ( ) ) != null ) && ( ( storageDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ; return isActive ; }
public void setStorageFormat ( org.ovirt.engine.core.common.businessentities.StorageFormatType value ) { getStorageStaticData ( ) . setStorageFormat ( value ) ; }
public void setFirewall ( boolean doFirewall ) { if ( doFirewall ) { _iptables = _getIpTables ( ) ; } }
protected void setupSelectedTemplate ( org.ovirt.engine.ui.uicommonweb.models.ListModel model , java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { getModel ( ) . getTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VmTemplate > FirstOrDefault ( templates ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.LUN ) ; revealDiskPanel ( disk ) ; }
public static void removeDiskFromVm ( org.ovirt.engine.core.compat.Guid vmGuid , org.ovirt.engine.core.compat.Guid diskId ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDeviceDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( diskId , vmGuid ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getBaseDiskDao ( ) . remove ( diskId ) ; }
public org.ovirt.engine.core.bll.ValidationResult parentEntityNotChanged ( ) { if ( org.apache.commons.lang.ObjectUtils.equals ( getProfile ( ) . getStorageDomainId ( ) , getProfileFromDb ( ) . getStorageDomainId ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_CHANGE_PROFILE ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNetworkSetCorrectly ( ) { return ( network.isVmNetwork ( ) ) || ( org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork ( getDataCenter ( ) . getcompatibility_version ( ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL ) ; }
public void saveAllInBatch ( java.util.Collection < T > entities ) { org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getCallsHandler ( ) . executeStoredProcAsBatch ( org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getProcedureNameForSave ( ) , entities , getBatchMapper ( ) ) ; }
private void canDoActionFails ( ) { org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > object ) { return object.getSecond ( ) . getVdsGroupName ( ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity getById ( org.ovirt.engine.core.compat.Guid id ) { return getCallsHandler ( ) . executeRead ( "GetGlusterBrickById" , brickRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ) ; }
private void flushCheckBoxes ( org.ovirt.engine.ui.userportal.widget.popup.console.EntityModelValueCheckBoxEditor < org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > ... checkBoxes ) { for ( org.ovirt.engine.ui.userportal.widget.popup.console.EntityModelValueCheckBoxEditor < org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel > checkBox : checkBoxes ) { checkBox.asEditor ( ) . getSubEditor ( ) . getValue ( ) ; } }
public void setvm_creation_date ( java.util.Date value ) { this . mVmStatic.setcreation_date ( value ) ; }
public void updateGlusterServerHook ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.compat.Guid hostId ) ;
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.VmTemplate , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.NetworkView object ) { return ( object.getProvidedBy ( ) ) == null ? new java.lang.String ( ) : object.getProviderName ( ) ; }
public void testVms ( ) { testValidSql ( "Vms:" , "SELECT * FROM ((SELECT distinct vms.* FROM vms ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: storage.name = 111" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vm: template.name = temp1" , "SELECT * FROM ((SELECT distinct vms.* FROM vms LEFT OUTER JOIN vm_templates_storage_domain ON vms.vmt_guid=vm_templates_storage_domain.vmt_guid WHERE vm_templates_storage_domain.name LIKE temp1 ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getAllRelevantQuotasForVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroupId ) ;
public java.lang.String getName ( ) { return getVmName ( ) ; }
public void hide ( ) { getView ( ) . hide ( ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , boolean isPerformUserCheck ) { return runQueryImpl ( actionType , parameters , isPerformUserCheck , null ) ; }
public void setSearchString ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( searchString , value ) ) ) { searchString = value ; SearchStringChanged ( ) ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.network.NetworkView selectedItem ) { org.ovirt.engine.ui.webadmin.section.main.view.tab.network.SubTabNetworkGeneralView.Driver.driver.edit ( getDetailModel ( ) ) ; formBuilder.showForm ( getDetailModel ( ) ) ; }
public java.lang.Object runInTransaction ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . get ( storagePool.getId ( ) ) ; pool.setspm_vds_id ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( pool ) ; return null ; }
public void testFromBackendToRest ( ) { testStatusMapping ( StoragePoolStatus.Contend , DataCenterStatus.CONTEND ) ; testStatusMapping ( StoragePoolStatus.Maintanance , DataCenterStatus.MAINTENANCE ) ; testStatusMapping ( StoragePoolStatus.NotOperational , DataCenterStatus.NOT_OPERATIONAL ) ; testStatusMapping ( StoragePoolStatus.Problematic , DataCenterStatus.PROBLEMATIC ) ; testStatusMapping ( StoragePoolStatus.Uninitialized , DataCenterStatus.UNINITIALIZED ) ; testStatusMapping ( StoragePoolStatus.Up , DataCenterStatus.UP ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > GetTagsAttachedToObject ( ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.tags > ( ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; }
public void canDoActionFailsIsoVersionNotCompatible ( ) { mockVdsWithOsVersion ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.INVALID_OVIRT_VERSION ) ; org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters ( ) ; param.setoVirtIsoFile ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME ) ; org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = createCommand ( param ) ; org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithCanDoActionMessage ( command , EngineMessage.VDS_CANNOT_UPGRADE_BETWEEN_MAJOR_VERSION ) ; }
protected void rerunInternal ( ) { decreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmToServerCommand.getDestinationVds ( ) . getId ( ) ) ; _isRerun = false ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.setSucceeded ( false ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.determineMigrationFailueForAuditLog ( ) ; org.ovirt.engine.core.bll.MigrateVmToServerCommand.log ( ) ; }
public org.ovirt.engine.core.common.mode.ApplicationMode getUiMode ( ) { try { return org.ovirt.engine.core.common.mode.ApplicationMode.from ( java.lang.Integer.parseInt ( getValue ( ) ) ) ; } catch ( java.lang.NumberFormatException ex ) { return null ; } }
private static org.ovirt.engine.core.bll.tasks.AsyncTaskManager getAsyncTaskManager ( ) { return org.ovirt.engine.core.bll.tasks.AsyncTaskManager.getInstance ( ) ; }
public void updateRunButton ( org.ovirt.engine.ui.uicommonweb.UICommand command , boolean isPool ) { runButton.setTitle ( ( isPool ? constants.takeVm ( ) : constants.runVm ( ) ) ) ; updateButton ( runButton , command ) ; }
private org.ovirt.engine.api.model.StorageDomain getStorageDomainById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.api.model.StorageDomain.class , VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) ) ; }
private void initHandlers ( ) { mTagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler ( ) ; org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.TagsHandler = mTagsHandler ; org.ovirt.engine.core.bll.VmHandler.Init ( ) ; org.ovirt.engine.core.bll.VdsHandler.Init ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.Init ( ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
protected java.lang.String getFormattedLunId ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun , java.lang.String usedByEntityName ) { return java.lang.String.format ( "%1$s (%2$s)" , lun.getLUN_id ( ) , usedByEntityName ) ; }
public static void LoginAsync ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance ( ) ; org.ovirt.engine.ui.frontend.Frontend.LoginAsync ( userName , password , domain , callback , service ) ; }
public void onCreated ( org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault instance ) { getIcon ( ) . setEntity ( instance ) ; }
public org.ovirt.engine.ui.common.widget.table.column.ImageResourceCell getCell ( ) { return ( ( org.ovirt.engine.ui.common.widget.table.column.ImageResourceCell ) ( super . getCell ( ) ) ) ; }
public void setUp ( ) { disksList = new java.util.LinkedList < > ( ) ; initStorageDomains ( ) ; initStorageDomainValidators ( ) ; initMemoryStorageHandler ( ) ; }
public void snapshotEntityStatus ( org.ovirt.engine.core.common.businessentities.BusinessEntity < ? > entity , java.lang.Enum < ? > status ) ;
public void runMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { runMultipleAction ( actionType , parameters , null , null , true , false ) ; }
public void execute ( ) { try { command.Execute ( ) ; } catch ( java.lang.Exception ex ) { org.ovirt.engine.ui.common.uicommon.model.DeferredModelCommandInvoker.logger.log ( java.util.logging.Level.SEVERE , "UICommand execution failed" , ex ) ; commandFailed ( command ) ; } finally { commandFinished ( command ) ; } }
protected boolean canDoAction ( ) { if ( ! ( entityExists ( ) ) ) { return failCanDoAction ( ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . isVm ( ) ? org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND : org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST ) ) ; } return true ; }
public boolean isValid ( java.lang.String name , javax.validation.ConstraintValidatorContext context ) { return ( java.util.regex.Pattern.matches ( org.ovirt.engine.core.common.validation.NfsMountPointConstraint.LINUX_MOUNT_POINT , name ) ) && ( java.util.regex.Pattern.matches ( org.ovirt.engine.core.common.validation.NfsMountPointConstraint.ASCII , name ) ) ; }
public void versionHigherThanCluster ( ) { storagePoolWithVersionHigherThanCluster ( ) ; canDoActionFailed ( EngineMessage.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS ) ; }
public java.util.List < org.ovirt.engine.core.common.job.Step > getStepsByJobIdForVdsmAndGluster ( org.ovirt.engine.core.compat.Guid jobId ) { return multipleResults ( entityManager.createNamedQuery ( "Step.getStepsByJobIdForVdsmAndGluster" , org.ovirt.engine.core.common.job.Step.class ) . setParameter ( "jobId" , jobId ) . setParameter ( "systemType" , java.util.EnumSet.of ( ExternalSystemType.VDSM , ExternalSystemType.GLUSTER ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { setItems ( ( ( java.util.Collection < T > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult interfaceByNameExists ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) . when ( ( ( ( iface ) == null ) || ( ( iface.getName ( ) ) == null ) ) ) ; }
public void testRemovePoolMethod ( ) throws java.lang.Exception { expectNotInitializedException ( ) ; new org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc ( ) . removePool ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.aaa.DbUser getLoggedInUser ( java.lang.String sessionId ) { return ( ( org.ovirt.engine.core.common.businessentities.aaa.DbUser ) ( runQuery ( VdcQueryType.GetUserBySessionId , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , sessionId ) ) ) ; }
public void testAddValueNull ( ) { paramSource.addValue ( paramName , null ) ; org.junit.Assert.assertNull ( "wrong value returned from parameter source" , paramSource.getValue ( paramName ) ) ; }
protected void executeCommand ( ) { getMacPoolDao ( ) . remove ( getMacPoolId ( ) ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . removePool ( getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview ( org.ovirt.engine.core.compat.Guid vmId ) { return vmNotInStatus ( vmId , SnapshotStatus.IN_PREVIEW , VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public void getJobById ( ) { org.junit.Assert.assertNotNull ( jobRepository.getJob ( job.getId ( ) ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP , job.getJobSubjectEntities ( ) ) ; }
public void onPowerringUp ( ) { decreasePendingVms ( org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDAO ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getNetworkByName ( java.lang.String networkName , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks ) { if ( clusterNetworks != null ) { return clusterNetworks.get ( networkName ) ; } else { return networkDao.getByName ( networkName ) ; } }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createIdParameterMapper ( java.lang.String id ) { return getCustomMapSqlParameterSource ( ) . addValue ( "LUN_id" , id ) ; }
public void testCheckVmHostDeviceAvailabilityOnAlreadyAllocatedDevice ( ) { org.junit.Assert.assertTrue ( dao.checkVmHostDeviceAvailability ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID_2 , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID ) ) ; }
com.gwtplatform.mvp.client.proxy.PlaceRequest resolveMainSectionPlace ( org.ovirt.engine.core.common.mode.ApplicationMode uiMode ) { switch ( uiMode ) { case GlusterOnly : return org.ovirt.engine.ui.common.place.PlaceRequestFactory.get ( ApplicationPlaces.volumeMainTabPlace ) ; case VirtOnly : case AllModes : default : return defaultMainSectionRequest ; } }
public void testGetForStoragePoolWithInvalidId ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain result = dao.getForStoragePool ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.StorageDomainDaoTest.EXISTING_STORAGE_POOL_ID ) ; org.junit.Assert.assertNull ( result ) ; }
public void testNameNotChanged ( ) { prepareVmToPassCanDoAction ( ) ; vm.setName ( "vm1" ) ; mockSameNameQuery ( true ) ; mockVmValidator ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.junit.Assert.assertTrue ( "canDoAction should have passed." , command.canDoAction ( ) ) ; }
protected void endSuccessfully ( ) { org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand.setSucceeded ( true ) ; }
public void parseLunFromXmlRpcReturnsUnknownForFcp ( ) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommandTest.testParseLunFromXmlRpcForDevtypeField ( StorageType.UNKNOWN , GetDeviceListVDSCommand.DEVTYPE_VALUE_FCP ) ; }
public void hasDomains ( ) { domainListNotEmpty ( ) ; canDoActionFailed ( VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS.toString ( ) ) ; }
public void setVmCompletionMap ( java.util.HashMap < java.lang.Integer , java.lang.String > map ) { this . vmCompletionMap = map ; }
public int compare ( java.lang.String str1 , java.lang.String str2 ) { return org.ovirt.engine.core.common.utils.LexoNumericComparator.comp ( str1 , str2 ) ; }
public org.ovirt.engine.api.resource.AssignedPermissionsResource getPermissionsResource ( ) { return null ; }
public static org.ovirt.engine.sdk.entities.StatisticType fromValue ( java.lang.String v ) { return org.ovirt.engine.sdk.entities.StatisticType.valueOf ( v ) ; }
protected abstract void Perform ( ) ;
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; }
private java.lang.String getRequestName ( org.ovirt.api.metamodel.concepts.Method method ) { return ( javaNames.getJavaClassStyleName ( method.getName ( ) ) ) + "Request" ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; UpdateActionAvailability ( ) ; UpdateConsoleModels ( ) ; }
public void rollback ( ) { super . rollback ( ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . createPool ( getOldMacPool ( ) ) ; }
public int getEventsThreadPoolSize ( ) { return this . eventsThreadPoolSize ; }
public int compareTo ( org.ovirt.engine.core.common.businessentities.VmDevice other ) { return getId ( ) . compareTo ( other.getId ( ) ) ; }
public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) : java.lang.Boolean.FALSE ; }
protected void RemoveVmFromDb ( ) { org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmUsers ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmNetwork ( ) ; new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmStatic ( ) ; }
public static java.lang.String GetMessage ( org.ovirt.engine.core.common.AuditLogType logType ) { java.lang.String value = "" ; if ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.mMessages.containsKey ( logType ) ) { value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.mMessages.get ( logType ) ; } return value ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( ) { if ( ( storageDomain ) == null ) { storageDomain = getDbFacade ( ) . getStorageDomainDao ( ) . get ( getDiskProfile ( ) . getStorageDomainId ( ) ) ; } return storageDomain ; }
public boolean isClientWindownsExplorer ( ) { return ( clientOsType ( ) . equalsIgnoreCase ( "Windows" ) ) && ( clientBrowserType ( ) . equalsIgnoreCase ( "Explorer" ) ) ; }
public void setEnumTitle ( java.lang.Enum < ? > enumObj ) { setTitle ( org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . get ( enumObj ) ) ; }
public org.ovirt.vdsmfake.service.Host getActiveHost ( ) { final java.lang.String serverName = org.ovirt.vdsmfake.ContextHolder.getServerName ( ) ; final org.ovirt.vdsmfake.service.Host host = org.ovirt.vdsmfake.service.VdsmManager.getInstance ( ) . getHostByName ( serverName ) ; return host ; }
private void doFinish ( ) { windowModel.StopProgress ( ) ; Cancel ( ) ; ForceRefresh ( ) ; }
protected org.ovirt.engine.core.common.businessentities.VDS getVds ( org.ovirt.engine.core.compat.Guid id ) { return org.ovirt.engine.core.bll.VmManagementCommandBase.getVdsDao ( ) . get ( id ) ; }
public void validateFailureOnCopyingCinderDisk ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.CinderDisk ( ) ) ; command.getParameters ( ) . setOperation ( ImageOperation.Copy ) ; command.init ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void testSave ( ) { dao.save ( newUser ) ; org.ovirt.engine.core.common.businessentities.DbUser result = dao.getByUsername ( newUser.getLoginName ( ) ) ; org.junit.Assert.assertEquals ( newUser , result ) ; }
public void testValidModifiedBonds_failsWhenInsufficientNumberOfSlaves ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT , false , false ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDynamic > getAllRunningForVds ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) ; org.springframework.jdbc.core.simple.ParameterizedRowMapper < org.ovirt.engine.core.common.businessentities.VmDynamic > mapper = createEntityRowMapper ( ) ; return getCallsHandler ( ) . executeReadList ( "GetVmsDynamicRunningOnVds" , mapper , parameterSource ) ; }
public void testIsNetworkInSyncWhenMtuSameViaDefault ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues ( ) ; iface.setMtu ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.DEFAULT_MTU_VALUE ) ; network.setMtu ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.VALUE_DENOTING_THAT_MTU_SHOULD_BE_SET_TO_DEFAULT_VALUE ) ; org.junit.Assert.assertThat ( testedInstanceWithSameNonQosValues.isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void getUsbPolicySetDisabled ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( false ) ; org.junit.Assert.assertEquals ( UsbPolicy.DISABLED , org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; }
public void testGetTreeForEntityWithVdsType ( ) { baseTestGetTreeForEntity ( org.ovirt.engine.core.dao.PermissionDaoTest.VDS_ENTITY_ID , VdcObjectType.VDS , org.ovirt.engine.core.dao.PermissionDaoTest.CLUSTER_ID ) ; }
private void iconCleanup ( ) { dbFacade.getVmIconDao ( ) . removeAllUnusedIcons ( ) ; }
public void nameIsEmpty ( ) { org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( "" ) ; org.junit.Assert.assertThat ( validator.nameNotEmpty ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY ) ) ; }
public java.lang.String getStoragePoolName ( ) { if ( ( getStoragePool ( ) ) != null ) { return getStoragePool ( ) . getName ( ) ; } return "" ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.test ( storageDomain ) ) ; }
public void setBootProtocolsAvailable ( boolean value ) { if ( ( bootProtocolsAvailable ) != value ) { bootProtocolsAvailable = value ; updateCanSpecify ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "BootProtocolsAvailable" ) ) ; } }
public void validateDescriptionOkSucceeds ( ) { org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; }
public org.ovirt.engine.api.v3.types.V3Host update ( org.ovirt.engine.api.v3.types.V3Host host ) { return adaptUpdate ( delegate :: update , host ) ; }
public java.lang.String getClientIp ( ) { return this . vmDynamic.getclient_ip ( ) ; }
protected boolean IsStorageWithSameNameExists ( ) { return ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainStaticDao ( ) . getByName ( getStorageDomain ( ) . getStorageName ( ) ) ) != null ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.HasFreeVmsInPoolQuery.getQueryReturnValue ( ) . setReturnValue ( ( ! ( org.ovirt.engine.core.bll.VmPoolCommandBase.GetVmToAttach ( org.ovirt.engine.core.bll.HasFreeVmsInPoolQuery.getParameters ( ) . getPoolId ( ) ) . equals ( Guid.Empty ) ) ) ) ; }
public void nonPassthroughProfileContainsPortMirroringAndQos ( ) { passthroughProfileContainsSupportedPropertiesTest ( false , true , org.ovirt.engine.core.bll.validator.VnicProfileValidatorTest.DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.passthroughProfileContainsSupportedProperties ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( ) { return text ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Label , org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.ClusterAffinityLabelListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.cluster.SubTabClusterAffinityLabelPresenter.constants.affinityLabelsSubTabLabel ( ) , 9 , modelProvider ) ; }
public static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > findGroupsByQuery ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String query ) { return org.ovirt.engine.core.aaa.AuthzUtils.queryGroups ( extension , org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap ( query , Authz.QueryEntity.GROUP ) ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel object ) { org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.DataCenterPopupView.Driver.driver.edit ( object ) ; }
private void refreshCachedVds ( ) { cachedVds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( getVdsId ( ) ) ; setMonitoringNeeded ( ) ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getGuideCommand ( ) ; }
org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotConfigReturnForXmlRpc glusterVolumeSnapshotConfigGet ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) ;
public org.ovirt.engine.core.common.users.VdcUser getLoggedInUser ( ) { return loggedInUser ; }
protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getMainModel ( ) . getGuideCommand ( ) ; }
public void canDoActionFailsUnsupportedExportFormat ( ) { sd.setStorageDomainType ( StorageDomainType.ImportExport ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL_HOST ) ; }
public org.ovirt.engine.api.model.Disks list ( ) { return mapCollection ( getBackendCollection ( SearchType.Disk ) ) ; }
protected void RemoveVmFromDb ( ) { removeLunDisks ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmUsers ( ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmNetwork ( ) ; new org.ovirt.engine.core.bll.snapshots.SnapshotsManager ( ) . removeSnapshots ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ; org.ovirt.engine.core.bll.RemoveVmCommand.RemoveVmStatic ( ) ; }
protected void executeVdsBrokerCommand ( ) { hostDevListReturn = org.ovirt.engine.core.vdsbroker.HostDevListByCapsVDSCommand.getBroker ( ) . hostDevListByCaps ( ) ; org.ovirt.engine.core.vdsbroker.HostDevListByCapsVDSCommand.proceedProxyReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > devices = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildHostDevices ( hostDevListReturn.devices ) ; attachHostIdToDevices ( devices ) ; setReturnValue ( devices ) ; }
public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack getCallBack ( ) { return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . isQualifiedForLiveSnapshotMerge ( ) ? new org.ovirt.engine.core.bll.RemoveSnapshotCommandCallback ( ) : null ; }
public void setis_initialized ( boolean value ) { this . mVmStatic.setis_initialized ( value ) ; }
private boolean isNextRunRequested ( ) { return org.ovirt.engine.api.common.util.QueryHelper.getMatrixConstraints ( getUriInfo ( ) , org.ovirt.engine.api.restapi.resource.BackendVmResource.NEXT_RUN ) . containsKey ( org.ovirt.engine.api.restapi.resource.BackendVmResource.NEXT_RUN ) ; }
private void RemoveVdsFromCollection ( ) { org.ovirt.engine.core.bll.RemoveVdsCommand.getBackend ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RemoveVds , new org.ovirt.engine.core.common.vdscommands.RemoveVdsVDSCommandParameters ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ) ; }
private void updateAuditLogFailedToUpdateVM ( java.lang.String vmName ) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.addCustomValue ( "VmName" , vmName ) ; auditLogDirector.log ( this , AuditLogType.USER_EXTEND_DISK_SIZE_UPDATE_VM_FAILURE ) ; }
protected void ActiveDetailModelChanged ( ) { super . ActiveDetailModelChanged ( ) ; }
public void addColumnWithHtmlHeader ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerHtml ) { addColumn ( column , getHeader ( column , headerHtml , true ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress ( result.getState ( ) ) ; cancel ( ) ; }
public boolean isLocked ( ) { return ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.MovingToMaintenance ) ) ; }
protected void updateModel ( org.ovirt.engine.ui.uicommonweb.models.vms.IVnc vnc , boolean value ) { vnc.setRemapCtrlAltDelete ( value ) ; }
public void setUpContainer ( ) { container = org.mockito.Mockito.spy ( org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) ) ; clearSession ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult requiredValuesPresent ( ) { if ( ( getQos ( ) . getCpuLimit ( ) ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_QOS_MISSING_VALUES ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void checkMissingBootProtocol ( ) { initIpConfigurationWithPrimaryAddress ( ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_MISSING_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_NETWORK_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.NETWORK_NAME ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_INTERFACE_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.INTERFACE_NAME ) ) ) ; }
public void setSelectedItem ( java.lang.Object value ) { super . setSelectedItem ( value ) ; updateLinkChangability ( ) ; }
public void setVersion ( java.lang.String text ) { versionLabel.setText ( text ) ; }
private void initIpConfigurationDetails ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol ipv4BootProtocol , boolean initAddress , boolean initNetmask ) { initIpConfigurationWithBootProtocol ( ipv4BootProtocol ) ; if ( initAddress ) { initIpConfigurationAddress ( ) ; } if ( initNetmask ) { initIpConfigurationNetmask ( ) ; } }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue RunAutoQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.ui.genericapi.GenericApiService.backend.RunAutoQuery ( actionType , parameters ) ; return returnValue ; }
private void Cluster_SelectedItemChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { behavior.Cluster_SelectedItemChanged ( ) ; UpdateMaximalVmMemSize ( ) ; }
public boolean getIsAvailable ( ) { return getModel ( ) . getHasDomain ( ) ; }
public void cleaningCompensationDataAfterSuccess ( ) { macsToReleaseOnCommit.forEach ( macPool :: freeMac ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledNotSetPolicyNotSetUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
com.google.gwt.safehtml.shared.SafeHtml imageContainer ( java.lang.String style , com.google.gwt.safehtml.shared.SafeHtml imageHtml ) ;
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.Quota > searchQuota ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getQuotaDao ( ) , true ) ; getQuotaManager ( ) . updateUsage ( quotaList ) ; return quotaList ; }
public void testAddGroupWithExplicitDirectoryName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ( ( ( "ADGROUP@" + ( DOMAIN ) ) + ": allnames=" ) + ( NAMES [ 0 ] ) ) , SearchType.DirectoryGroup , getDirectoryGroup ( 0 ) ) ; setUpCreationExpectations ( VdcActionType.AddGroup , org.ovirt.engine.core.common.action.DirectoryIdParameters.class , new java.lang.String [ ] { "Directory" , "Id" } , new java.lang.Object [ ] { DOMAIN , EXTERNAL_IDS [ 0 ] } , true , true , GUIDS [ 0 ] , VdcQueryType.GetDbGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setName ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; org.ovirt.engine.api.model.Group model = new org.ovirt.engine.api.model.Group ( ) ; model.setName ( NAMES [ 0 ] ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; assertEquals ( 201 , response.getStatus ( ) ) ; assertTrue ( ( ( response.getEntity ( ) ) instanceof org.ovirt.engine.api.model.Group ) ) ; verifyModel ( ( ( org.ovirt.engine.api.model.Group ) ( response.getEntity ( ) ) ) , 0 ) ; }
public boolean getAutoStart ( ) { return org.ovirt.engine.core.bll.RunVmCommandBase.getVm ( ) . isAutoStartup ( ) ; }
protected void entityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . entityPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "status" ) ) { updateActionAvailability ( ) ; } }
protected void AsyncSearch ( ) { super . AsyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterSearch ( getSearchString ( ) , SearchType.VmTemplate , getSearchPageSize ( ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public void getTagIdAndChildrenNamesAsList ( java.util.HashSet < java.lang.String > tagIds ) { tagIds.add ( gettag_name ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.tags tag : _children ) { tag.getTagIdAndChildrenNamesAsList ( tagIds ) ; } }
org.ovirt.engine.core.dao.InterfaceDAO getInterfaceDAO ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getInterfaceDAO ( ) ; }
public void setBootSequence ( org.ovirt.engine.ui.uicommonweb.models.vms.BootSequenceModel value ) { if ( ( bootSequence ) != value ) { bootSequence = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "BootSequence" ) ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel.maxDiskSize = ( ( java.lang.Integer ) ( returnValue ) ) ; }
public void addCustomValue ( final java.lang.String name , final java.lang.String value ) { allocateCustomValues ( ) ; customValues.put ( name.toLowerCase ( ) , value ) ; }
public void setTooltip ( com.google.gwt.safehtml.shared.SafeHtml tooltip , org.gwtbootstrap3.client.ui.constants.Placement placement ) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement ( tooltip , getElement ( ) , placement ) ; }
protected void UndoActionOnSourceAndDestination ( ) { if ( ( getDestinationDiskImage ( ) ) != null ) { RemoveSnapshotFromDB ( getDestinationDiskImage ( ) ) ; } if ( ( getDiskImage ( ) ) != null ) { UnLockImage ( ) ; } }
public boolean isVisible ( ) { return getDetailModel ( ) . isImage ( ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "OpenstackImageProviderProperties [pluginType=" ) . append ( ", tenantName=" ) . append ( getTenantName ( ) ) . append ( "]" ) ; return builder.toString ( ) ; }
public void setQuotaId ( org.ovirt.engine.core.compat.Guid value ) { this . mVmStatic.setQuotaId ( value ) ; }
public void setPort ( int port ) { this . port = port ; }
public int getVersion ( final java.util.Properties properties ) { int result = 0 ; try { result = java.lang.Integer.valueOf ( properties.getProperty ( org.ovirt.engine.core.branding.BrandingTheme.VERSION_KEY ) ) ; } catch ( java.lang.NumberFormatException nfe ) { } return result ; }
public void buildIdSetterStatement ( ) { org.junit.Assert.assertThat ( tested.buildIdSetterStatement ( ) , org.hamcrest.CoreMatchers.equalTo ( "setElementId(owner.a.b.c, \"abcId\")" ) ) ; }
public org.ovirt.engine.api.model.Network update ( org.ovirt.engine.api.model.Network incoming ) { return performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource.UpdatedNetworkResolver ( ) , VdcActionType.UpdateNetwork , new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource.UpdateParametersProvider ( ) ) ; }
protected org.ovirt.engine.api.model.CreationStatus getAsynchronousStatus ( org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { return getVdsmTasksStatus ( result ) ; }
public void vmIdNull ( ) { b.setVmId ( null ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.Assert.assertEquals ( Guid.Empty , i ) ; }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.VmTemplate.class ) , index ) ; }
private org.ovirt.engine.core.compat.Guid GetAnyVdsToRunOn ( ) { return getVdsToRunOn ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDAO ( ) . getAllOfTypes ( new org.ovirt.engine.core.common.businessentities.VDSType [ ] { org.ovirt.engine.core.common.businessentities.VDSType.VDS , org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode } ) ) ; }
public void testGetByOperatingSystemIdExisting ( ) { final org.ovirt.engine.core.common.businessentities.VmIconDefault vmIconDefault = dao.getByOperatingSystemId ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT.getOsId ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.VmIconDefaultDaoTest.OTHER_OS_VM_ICON_DEFAULT , vmIconDefault ) ; }
public void canDoActionDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; command.getImage ( ) . setContentType ( DiskContentType.OVF_STORE ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
public void testServerKey ( ) throws java.lang.Exception { org.junit.Assume.assumeNotNull ( TestCommon.sshd ) ; client.connect ( ) ; assertEquals ( TestCommon.sshd.getKey ( ) , client.getServerKey ( ) ) ; }
public void setKeepTitleOnSetEnabled ( boolean keepTitleOnSetEnabled ) { this . keepTitleOnSetEnabled = keepTitleOnSetEnabled ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; if ( ( getAppListModel ( ) ) != null ) { getAppListModel ( ) . setEntity ( getSelectedItem ( ) ) ; } }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand command ) { org.mockito.Mockito.doReturn ( glusterUtils ) . when ( command ) . getGlusterUtils ( ) ; org.mockito.Mockito.doReturn ( getUpServers ( ) ) . when ( glusterUtils ) . getAllUpServers ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
public void addColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText ) { addColumn ( column , createHeader ( column , headerText , false ) ) ; }
protected org.ovirt.engine.core.compat.Guid CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return CreateTask ( asyncTaskCreationInfo , parentCommand , null , entityType , entityIds ) ; }
public void write ( int b ) { if ( ( count ) < ( this . max ) ) { super . write ( b ) ; } else { this . truncated = true ; } }
private static java.lang.StringBuilder replaceAll ( java.lang.StringBuilder builder , java.lang.String oldText , java.lang.String newText ) { java.lang.String t = builder.toString ( ) ; return new java.lang.StringBuilder ( t.replaceAll ( org.ovirt.engine.core.compat.StringHelper.quote ( oldText ) , newText ) ) ; }
public void setnum_of_monitors ( int value ) { this . mVmStatic.setnum_of_monitors ( value ) ; }
protected org.ovirt.engine.api.model.Snapshot addParents ( org.ovirt.engine.api.model.Snapshot snapshot ) { snapshot.setVm ( new org.ovirt.engine.api.model.VM ( ) ) ; snapshot.getVm ( ) . setId ( parentId.toString ( ) ) ; return snapshot ; }
public java.util.LinkedList < java.lang.String > getGroupNames ( ) { return groupNames ; }
public org.ovirt.engine.core.common.businessentities.Tags lookupTagById ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.Tags.class , VdcQueryType.GetTagByTagId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id.toString ( ) , true ) ; }
private void onIsValidPropertyChange ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { if ( model.getIsValid ( ) ) { markAsValid ( ) ; } else { markAsInvalid ( model.getInvalidityReasons ( ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithNoCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setname ( "Default" ) ; group.setId ( VDSGroup.DEFAULT_VDS_GROUP_ID ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
public void testFetchStoragePoolWithNoQuota ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaList = dao.getQuotaByStoragePoolGuid ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertEquals ( true , ( ( quotaList.size ( ) ) == 0 ) ) ; }
public void testBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplayIsFalse ( ) { doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplayIsFalse ( false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( ginjector.getApplicationConstants ( ) . diskTemplateSubTabLabel ( ) , 2 , ginjector.getSubTabDiskTemplateModelProvider ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > getAllWithQuery ( java.lang.String query ) { return jdbcTemplate.query ( query , org.ovirt.engine.core.dao.AuditLogDAODbFacadeImpl.auditLogRowMapper ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { vmInitLoaded ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) ) ; }
public void setPmOptions ( java.lang.String value ) { mVdsStatic.setPmOptions ( value ) ; }
public static boolean IsLinuxOsType ( org.ovirt.engine.core.common.businessentities.VmOsType osType ) { if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetLinuxOsTypes ( ) . contains ( osType ) ) { return true ; } return false ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updatePmModels ( ) ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel PrepareFcpStorageForEdit ( org.ovirt.engine.core.common.businessentities.storage_domains storage ) { org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.FcpStorageModel ( ) ; model.setRole ( storage.getstorage_domain_type ( ) ) ; PrepareSanStorageForEdit ( model ) ; return model ; }
public org.ovirt.engine.core.compat.Guid getVdsGroupId ( ) { return this . vmStatic.getVdsGroupId ( ) ; }
public java.lang.String getEntityNewName ( ) { return org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain ( ) . getstorage_name ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.TagsDirector.getInstance ( ) . updateTag ( org.ovirt.engine.core.bll.UpdateTagCommand.getTag ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDao ( ) . update ( org.ovirt.engine.core.bll.UpdateTagCommand.getTag ( ) ) ; org.ovirt.engine.core.bll.UpdateTagCommand.setSucceeded ( true ) ; }
public void testGetAsyncTaskIdsByInvalidEntity ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = dao.getAsyncTaskIdsByEntity ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNotNull ( guids ) ; org.junit.Assert.assertTrue ( guids.isEmpty ( ) ) ; }
public void testParseReloadActionWithUser ( ) { parser.parse ( new java.lang.String [ ] { "-r" , "--user=username" } ) ; org.junit.Assert.assertEquals ( ConfigActionType.ACTION_RELOAD , parser.getConfigAction ( ) ) ; org.junit.Assert.assertEquals ( "username" , parser.getUser ( ) ) ; }
public java.lang.String getDisplayIp ( ) { return this . vmDynamic.getDisplayIp ( ) ; }
public void setmethod_id ( int value ) { this . method_idField = value ; }
public void onMainTabSelected ( ) { org.ovirt.engine.ui.common.uicommon.model.MainTabModelProvider.getCommonModel ( ) . setSelectedItem ( getModel ( ) ) ; }
public void vdsIdRefDefault ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.compat.Guid g = b.getVdsIdRef ( ) ; org.junit.Assert.assertNull ( g ) ; }
protected void addConnection ( org.ovirt.engine.core.common.businessentities.LUNs lun , org.ovirt.engine.core.common.businessentities.storage_server_connections cnx ) { if ( ( lun.getLunConnections ( ) ) == null ) { lun.setLunConnections ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_server_connections > ( ) ) ; } lun.getLunConnections ( ) . add ( cnx ) ; }
public void testIsUsingScsiReservationValidWhenSgioIsUnFiltered ( ) { setupForLun ( ) ; org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk ( ScsiGenericIO.UNFILTERED , true ) ; org.junit.Assert.assertThat ( lunValidator.isUsingScsiReservationValid ( org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) , lunDisk1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetFileFrom_InsanePath ( ) { java.io.File file = new java.io.File ( "/etc" ) ; java.io.File testFile = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath ( "/../hosts" , file ) ; org.junit.Assert.assertNull ( "testfile should be null" , testFile ) ; }
public void addSelectionChangeHandler ( com.google.gwt.view.client.SelectionChangeEvent.Handler selectionHandler ) { errataTable.getSelectionModel ( ) . addSelectionChangeHandler ( selectionHandler ) ; }
public void onSuccess ( java.lang.String result ) { if ( result != null ) { restApiSessionId = result ; processSessionId ( result ) ; } else { processSessionIdException ( ) ; } }
void addAllAction ( java.lang.String label , org.ovirt.engine.ui.uicommonweb.UICommand command , org.ovirt.engine.ui.webadmin.widget.alert.AuditLogActionCallback callback ) ;
public void setMigrationHandler ( org.ovirt.engine.core.bll.scheduling.MigrationHandler migrationHandler ) { if ( ( this . migrationHandler ) != null ) { throw new java.lang.RuntimeException ( "Load balance migration handler should be set only once" ) ; } this . migrationHandler = migrationHandler ; }
public void setCreateSnapshotCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { this . createSnapshotCommand = command ; }
public void testCanDoActionLunDisk ( ) { org.mockito.Mockito.when ( getDiskDao ( ) . get ( getDiskImageGroupId ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.storage.LunDisk ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void testRemoveNonExistant ( ) { setUpGetEntityExpectations ( 1 , true ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public java.util.List < java.math.BigInteger > readIntegers ( ) { return readStrings ( ) . stream ( ) . map ( this :: parseInteger ) . collect ( java.util.stream.Collectors.toList ( ) ) ; }
public void run ( ) { org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm ( getVm ( ) . getId ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( getExecutionContext ( ) ) ) ; }
private < T > void invokeCallable ( java.util.concurrent.Callable < T > callable ) { try { callable.call ( ) ; } catch ( java.lang.Exception e ) { log.error ( "Error in CinderStorageHelper." , e ) ; } }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByTemplates ( ) { return networkNotUsed ( getDbFacade ( ) . getVmTemplateDao ( ) . getAllForNetwork ( network.getId ( ) ) , VdcBllMessages.VAR__ENTITIES__VM_TEMPLATES ) ; }
public java.lang.Object resolve ( org.ovirt.engine.core.compat.Guid id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { java.lang.Object entity = lookupEntity ( id ) ; if ( entity == null ) { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException ( id.toString ( ) ) ; } return entity ; }
public void setVersion ( org.ovirt.engine.core.common.businessentities.VdsVersion value ) { mVdsDynamic.setVersion ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "Version" ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getDbFacade ( ) . getVdsDao ( ) . getHostsForStorageOperation ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . isLocalFsOnly ( ) ) ) ; }
private static void addSoundCard ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSoundCard ( vmBase , org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vmBase ) ) ; }
public void setHost ( java.lang.String host ) { this . host = ( host == null ) ? new java.lang.String ( ) : host ; }
private void writeStructLink ( org.ovirt.api.metamodel.concepts.Link link ) { writeStartElement ( "link" ) ; writeCommon ( link ) ; writeTypeRef ( link.getType ( ) ) ; writeEndElement ( ) ; }
public void testValidateGatewayWhenGatewayIsNull ( ) { doTestValidateGateway ( null , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void closeClone ( ) { setConfirmWindow ( null ) ; }
public com.google.gwt.safehtml.shared.SafeHtml noButton ( java.lang.String value , java.lang.String customStyle , java.lang.String id ) ;
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocationOnMock ) throws java.lang.Throwable { final org.ovirt.engine.core.common.businessentities.DiskImage oldDisk = createDiskImage ( ) ; oldDisk.setDiskInterface ( DiskInterface.VirtIO ) ; assert ( oldDisk.getDiskInterface ( ) ) != ( parameters.getDiskInfo ( ) . getDiskInterface ( ) ) ; return oldDisk ; }
public double getActualDiskSize ( ) { double result = 0 ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : getDiskImageMap ( ) . values ( ) ) { result += disk.getActualSize ( ) ; } return result ; }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes ( org.ovirt.engine.core.common.utils.ToStringBuilder tsb ) { return super . appendAttributes ( tsb ) . append ( "libvirtSecrets" , getLibvirtSecrets ( ) ) ; }
public void install ( ) { org.ovirt.engine.ui.common.uicommon.SpicePluginImpl.logger.finer ( "Spice must be installed ahead..." ) ; InstallNatively ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult statusSupportedForHostUpgrade ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.CANNOT_UPGRADE_HOST_STATUS_ILLEGAL ) . unless ( org.ovirt.engine.core.common.VdcActionUtils.canExecute ( java.util.Arrays.asList ( host ) , org.ovirt.engine.core.common.businessentities.VDS.class , ActionType.UpgradeHost ) ) ; }
void removeColumn ( com.google.gwt.user.cellview.client.Column < T , ? > column ) { table.removeColumn ( column ) ; tableHeader.removeColumn ( column ) ; }
protected void ExecuteVdsBrokerCommand ( ) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getBroker ( ) . setupNetworks ( generateNetworks ( ) , generateBonds ( ) , generateOptions ( ) ) ; }
public void buildVmSerialNumber ( ) { new org.ovirt.engine.core.vdsbroker.vdsbroker.VmSerialNumberBuilder ( vm , getVdsGroup ( ) , createInfo ) . buildVmSerialNumber ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsExistAndActive ( ) { return validOrFirstFailure ( new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.ValidatorPredicate ( ) { @ java.lang.Override public org.ovirt.engine.core.bll.ValidationResult evaluate ( org.ovirt.engine.core.bll.validator.StorageDomainValidator validator ) { return validator.isDomainExistAndActive ( ) ; } } ) ; }
public java.util.Date getGuestLastLoginTime ( ) { return this . vmDynamic.getGuestLastLoginTime ( ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.REMOTE_VM , getVmIsBeingImportedMessage ( ) ) ) ; }
public java.lang.String getdescription ( ) { return this . description ; }
public int compare ( org.ovirt.engine.core.common.businessentities.AuditLog x , org.ovirt.engine.core.common.businessentities.AuditLog y ) { long xid = x.getaudit_log_id ( ) ; long yid = y.getaudit_log_id ( ) ; return java.lang.Long.valueOf ( xid ) . compareTo ( yid ) ; }
public org.ovirt.engine.api.model.Host get ( ) { if ( isForce ( ) ) { performAction ( VdcActionType.RefreshHost , new org.ovirt.engine.core.common.action.VdsActionParameters ( guid ) ) ; } org.ovirt.engine.api.model.Host host = performGet ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) ) ; deprecatedAddLinksToAgents ( host ) ; return host ; }
public void parse ( ) throws java.lang.Exception { try { org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse ( java.lang.System.getProperty ( "osinfo.properties" ) ) ; } catch ( java.lang.Exception e ) { java.lang.System.err.println ( "Ovirt-engine will fail to load with a broken osinfo properties file." ) ; java.lang.System.err.println ( "Please fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo." ) ; throw e ; } }
public void setapp_list ( java.lang.String value ) { this . mVmDynamic.setapp_list ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "app_list" ) ) ; }
public javax.ws.rs.core.Response remove ( ) { return adaptRemove ( delegate :: remove ) ; }
public void testGetVmDeviceByVmIdTypeAndDeviceFilteringSetToFlase ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = dao.getVmDeviceByVmIdTypeAndDevice ( org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID , "disk" , "disk" , null , false ) ; org.ovirt.engine.core.dao.VmDeviceDAOTest.assertGetVMDeviceByIdTypeAndDeviceFullResult ( devices ) ; }
public void testJsonEmptyDiskDescription ( ) throws java.io.IOException { assertDiskDescriptionMap ( "DiskAlias" , "" ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.ListModel < T > excludedListModel , org.ovirt.engine.ui.uicommonweb.models.ListModel < T > includedListModel , org.ovirt.engine.ui.uicommonweb.UICommand onIncludeButtonPressed , org.ovirt.engine.ui.uicommonweb.UICommand onExcludeButtonPressed ) { edit ( excludedListModel , includedListModel ) ; this . onIncludeButtonPressed = onIncludeButtonPressed ; this . onExcludeButtonPressed = onExcludeButtonPressed ; }
public boolean showMask ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value ) { return ! ( value.IsVmUp ( ) ) ; }
private void injectMocks ( ) { injectorRule.bind ( org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class , cpuFlagsManagerHandler ) ; injectorRule.bind ( org.ovirt.engine.core.dao.ClusterDao.class , clusterDao ) ; injectorRule.bind ( org.ovirt.engine.core.common.businessentities.network.Network.class , managementNetwork ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.NetworkClusterDao.class , networkClusterDao ) ; }
private void logInfoIfNeeded ( org.ovirt.engine.core.common.businessentities.StoragePool pool , java.lang.String message , java.lang.Object ... args ) { if ( ! ( ovfOnAnyDomainSupported ( pool ) ) ) { log.infoFormat ( message , args ) ; } }
public void testLimit ( ) { java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu ( null , new java.lang.Integer ( 16 ) , new java.lang.Integer ( 100 ) , 2 , 8 ) ; org.junit.Assert.assertEquals ( new java.lang.Integer ( 96 ) , maxVCpu ) ; }
java.lang.String numOfVmsInPoolInvalod ( int maxLength , int vmsInPool ) ;
protected void alertPowerManagementStatusFailed ( java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters ( ) . getTargetVdsID ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.Alert ( alert , AuditLogType.VDS_ALERT_FENCE_TEST_FAILED ) ; }
private boolean validateDestStorageAndSourceStorageOfSameTypes ( org.ovirt.engine.core.common.businessentities.StorageDomain destDomain , org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain ) { if ( ( destDomain.getStorageType ( ) . getStorageSubtype ( ) ) != ( sourceDomain.getStorageType ( ) . getStorageSubtype ( ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT ) ; } return true ; }
public void showStatus ( java.lang.String status ) { setTitle ( status ) ; }
private boolean shouldReturnValue ( ) { return ( ! ( org.ovirt.engine.core.bll.GetConfigurationValueQuery.getParameters ( ) . isFiltered ( ) ) ) || ( ! ( org.ovirt.engine.core.bll.GetConfigurationValueQuery.getParameters ( ) . getConfigValue ( ) . isAdmin ( ) ) ) ; }
public org.ovirt.engine.api.resource.aaa.SSHPublicKeyResource getSSHPublicKeyResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.aaa.BackendSSHPublicKeyResource ( id , userId , this ) ) ; }
public void setvmt_name ( java.lang.String value ) { this . vmt_nameField = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "vmt_name" ) ) ; }
protected void ChangeDefualtHost ( ) { super . ChangeDefualtHost ( ) ; doChangeDefautlHost ( pool.getdedicated_vm_for_vds ( ) ) ; }
public boolean isCloudInitUsed ( ) { return ( ( getInitializationType ( ) ) == ( InitializationType.CloudInit ) ) && ( ! ( org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) . isWindows ( getVmOsId ( ) ) ) ) ; }
public void validVnicProfileWhenUnlinkingNotSupported ( ) throws java.lang.Exception { vnicProfileTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , false , org.ovirt.engine.core.bll.validator.VmNicValidatorTest.VNIC_PROFILE_ID ) ; }
void Execute ( int iterationId ) ;
public static org.ovirt.engine.api.model.ScsiGenericIO map ( org.ovirt.engine.api.model.ScsiGenericIO scsiGenericIO , org.ovirt.engine.api.model.ScsiGenericIO template ) { switch ( scsiGenericIO ) { case FILTERED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ScsiGenericIO ; case UNFILTERED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ScsiGenericIO ; default : return null ; } }
public void setHash ( java.lang.String hash ) { this . hash = hash ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.RemoveNetworkAttachmentParameters params = new org.ovirt.engine.core.common.action.RemoveNetworkAttachmentParameters ( parent.getHostId ( ) , guid ) ; return performAction ( VdcActionType.RemoveNetworkAttachment , params ) ; }
public void setApplyCpuLater ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > applyCpuLater ) { this . applyCpuLater = applyCpuLater ; }
protected void attachStorageDomainToDataCenter ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper CINDERStorageHelper = new org.ovirt.engine.core.bll.storage.CINDERStorageHelper ( false ) ; CINDERStorageHelper.attachCinderDomainToPool ( storageDomainId , storagePoolId ) ; CINDERStorageHelper.activateCinderDomain ( storageDomainId , storagePoolId ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.EntityModel model , java.lang.Boolean value ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkManageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel ) ( model ) ) ; networks.flush ( ) . setMigrationNetwork ( clusterNetworkManageModel , value ) ; refreshNetworksTable ( ) ; }
public static java.lang.Integer getMinMemorySizeInMb ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.VMMinMemorySizeInMB ) ; }
protected void handleError ( ) { addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_FENCE_OPERATION_FAILED ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VAR__TYPE__HOST ) ; addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages.VAR__ACTION__RESTART ) ; log.errorFormat ( "Failed to run RestartVdsCommand on vds :{0}" , org.ovirt.engine.core.bll.RestartVdsCommand.getVdsName ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Tags > getAllForVm ( java.lang.String ids ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_ids" , ids ) ; return getCallsHandler ( ) . executeReadList ( "GetTagsByVmId" , org.ovirt.engine.core.dao.TagDAODbFacadeImpl.TagRowMapper.instance , parameterSource ) ; }
public void info ( java.lang.Object arg0 , java.lang.Throwable arg1 ) { log.info ( addPrefixToLogMessage ( arg0 ) , arg1 ) ; }
public org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel flush ( ) { neutronAgentWidget.flush ( ) ; vmwarePropertiesWidget.flush ( ) ; kvmPropertiesWidget.flush ( ) ; return driver.flush ( ) ; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStart ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.Boolean force ) ;
private void saveTaskAndPutInMap ( java.lang.String taskKey , org.ovirt.engine.core.common.businessentities.AsyncTasks task ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.saveAsyncTaskToDb ( task ) ; taskKeyToTaskIdMap.put ( taskKey , task.getTaskId ( ) ) ; }
void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool , boolean isNewSpm ) ;
public void testCDANonExistingVds ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vdsDaoMock ) . get ( vdsId ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail for non existing VDS" , command , VdcBllMessages.VDS_NOT_EXIST ) ; }
public void testGetAllForStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAllForStorageDomain ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > filterDataCenter ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > source ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( source , new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterStatusPredicate ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational ) . negate ( ) ) ; }
public void allVfsAreFree ( ) { allVfsAreFreeTest ( true ) ; org.junit.Assert.assertThat ( validator.allVfsAreFree ( networkDeviceHelper ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void warn ( java.lang.Object arg0 ) { log.warn ( addPrefixToLogMessage ( arg0 ) ) ; }
public java.lang.String getDocumentationLibURL ( ) { return ( ( getDocumentationBaseURL ( ) ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.documentationLangPath ) ) + ( org.ovirt.engine.ui.uicommonweb.Configurator.DOCUMENTATION_LIB_PATH ) ; }
protected org.ovirt.engine.core.common.businessentities.VdsNetworkInterface lookupInterfaceByName ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : getCollection ( ) ) { if ( iface.getName ( ) . equals ( name ) ) { return iface ; } } return null ; }
public void setCtrlAltDeleteRemapHotkey ( java.lang.String hotkey ) { remapCtrlAltDeleteSpice.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; remapCtrlAltDeleteVnc.setLabel ( messages.remapCtrlAltDelete ( hotkey ) ) ; }
protected org.ovirt.engine.core.bll.storage.disk.cinder.CinderBroker getCinderBroker ( ) { return getCommand ( ) . getCinderBroker ( ) ; }
public void testGetAllForStoragePoolFilteredWithPermissions ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > result = dao.getAllForStoragePool ( storagePool.getId ( ) , org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; assertGetAllForStoragePoolValidResult ( result ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { for ( org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork model : getAllImportedNetworks ( ) ) { model.setPublicUse ( value ) ; } refreshImportedNetworks ( ) ; }
public void testHyperVLinux ( ) { org.junit.Assert.assertFalse ( OsRepositoryImpl.INSTANCE.isHypervEnabled ( OsRepositoryImpl.INSTANCE.getOsIdByUniqueName ( "rhel7" ) , Version.v3_6 ) ) ; }
public void cleanup ( ) { redirectUri = null ; authStack = null ; }
public void vmId ( ) { b.setVmId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; final org.ovirt.engine.core.compat.Guid i = b.getVmId ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , i ) ; }
private org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult parseDiscoverResults ( java.lang.Object result ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult retValue = new org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult ( ) ; if ( ! ( retValue.populate ( result ) ) ) { return null ; } return retValue ; }
protected org.ovirt.engine.core.common.businessentities.VDS getUpServer ( ) { return org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance ( ) . getUpServer ( org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroupId ( ) ) ; }
public int getMemCommited ( ) { return this . memCommited.get ( ) ; }
public static boolean IsMatch ( java.lang.String candidate , java.lang.String regEx ) { return new org.ovirt.engine.core.compat.Regex ( regEx ) . IsMatch ( candidate ) ; }
public void setUp ( ) { setUpUnitVmModelExpectations ( model ) ; origVm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; setUpOrigVm ( origVm ) ; origVm.setDedicatedVmForVds ( org.ovirt.engine.ui.uicommonweb.models.vms.HOST_ID_2 ) ; origVm.setMigrationSupport ( org.ovirt.engine.ui.uicommonweb.models.vms.MIGRATION_SUPPORT_2 ) ; origVm.setMigrationDowntime ( org.ovirt.engine.ui.uicommonweb.models.vms.MIGRATION_DOWNTIME_2 ) ; }
public void formatStringTest ( ) { testMessages.addFallback ( DynamicMessageKey.VERSION_ABOUT , "This is version about: {0}" ) ; java.lang.String result = testMessages.formatString ( DynamicMessageKey.VERSION_ABOUT , "1.1.1" ) ; org.junit.Assert.assertNotNull ( "There should be a result" ) ; org.junit.Assert.assertEquals ( "Result should be 'This is version about: 1.1.1'" , "This is version about: 1.1.1" , result ) ; }
public void setVnicProfileId ( org.ovirt.engine.core.compat.Guid vnicProfileId ) { this . vnicProfileId = vnicProfileId ; }
public void setupMocks ( ) { setUpCommand ( ) ; mockVds ( ) ; mockDbDao ( ) ; command.init ( ) ; }
public static org.ovirt.engine.core.compat.Version getEffective ( org.ovirt.engine.core.compat.Version vmCustomCompatibilityVersion , org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion , org.ovirt.engine.core.compat.Version defaultVersion ) { if ( vmCustomCompatibilityVersion != null ) { return vmCustomCompatibilityVersion ; } if ( vdsGroupCompatibilityVersion != null ) { return vdsGroupCompatibilityVersion ; } return defaultVersion ; }
protected org.ovirt.engine.core.dao.StorageServerConnectionDAO setUpStorageServerConnectionDAO ( ) { org.ovirt.engine.core.dao.StorageServerConnectionDAO dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageServerConnectionDAO.class ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionDao ( ) ) . thenReturn ( dao ) ; return dao ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( EngineMessage.VAR__ACTION__HOT_SET_MEMORY ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__VM ) ; addCanDoActionMessageVariable ( "clusterVersion" , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ; addCanDoActionMessageVariable ( "architecture" , org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm ( ) . getClusterArch ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { java.lang.String volumeName = org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.getParameters ( ) . getVolumeName ( ) ; status = org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.getBroker ( ) . glusterVolumeSnapshotDelete ( volumeName ) ; org.ovirt.engine.core.vdsbroker.gluster.DeleteAllGlusterVolumeSnapshotsVDSCommand.proceedProxyReturnValue ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getWatchdogs ( ) { return getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getId ( ) , VmDeviceType.WATCHDOG.getName ( ) ) ; }
protected void mockFenceAgent ( ) { fenceAgents = createSingleAgentList ( 1 ) ; org.mockito.Mockito.doReturn ( fenceAgents ) . when ( fencedHost ) . getFenceAgents ( ) ; }
public void enableCifs ( ) { accessProtocols.add ( AccessProtocol.CIFS ) ; }
private void mockVdsGroupDAOReturnVdsGroup ( ) { org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.< org.ovirt.engine.core.compat.Guid > any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( createVdsGroup ( ) ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; InitSpmPriorities1 ( ) ; }
protected void startPollingAsyncTasks ( java.util.Collection < org.ovirt.engine.core.compat.Guid > taskIds ) { for ( org.ovirt.engine.core.compat.Guid taskID : taskIds ) { getAsyncTaskManager ( ) . startPollingTask ( taskID ) ; } }
public final boolean connect ( java.lang.String server , java.lang.String rootPassword , long timeout ) { return _doConnect ( server , "root" , rootPassword , null , null , timeout ) ; }
public static void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.compat.Guid taskId , java.lang.String message ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.getAsyncTaskManager ( ) . logAndFailTaskOfCommandWithEmptyVdsmId ( taskId , message ) ; }
public static void addSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD , new org.ovirt.engine.core.bll.smartcard.SmartcardSpecParams ( ) , true , false , null , false ) ; }
private void UpdateCanSpecify ( ) { getAddress ( ) . setIsChangable ( getIsStaticAddress ( ) ) ; getSubnet ( ) . setIsChangable ( getIsStaticAddress ( ) ) ; getGateway ( ) . setIsChangable ( getIsStaticAddress ( ) ) ; }
protected void setActionMessageParameters ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT ) ; addCanDoActionMessageVariable ( "volumeName" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getGlusterVolumeName ( ) ) ; addCanDoActionMessageVariable ( "vdsGroup" , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroupName ( ) ) ; }
public boolean IsOvfTemplate ( java.lang.String ovfstring ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { return new org.ovirt.engine.core.utils.ovf.OvfParser ( ovfstring ) . IsTemplate ( ) ; }
private void writeJaxbClass ( javax.xml.stream.XMLStreamWriter writer , java.lang.String value ) throws javax.xml.stream.XMLStreamException { writeJaxbCustomization ( writer , "class" , "name" , value ) ; }
public void setSearchPanel ( com.google.gwt.user.client.ui.IsWidget searchPanel ) { searchFormGroup.clear ( ) ; if ( searchPanel != null ) { searchFormGroup.add ( searchPanel ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetAllVmPoolsQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDAO ( ) . getAll ( ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.DiskImage disk , java.lang.String value ) { importModel.getDiskImportData ( disk.getId ( ) ) . setSelectedQuotaString ( value ) ; }
public int getNumOfCpus ( boolean countThreadsAsCPU ) { return countThreadsAsCPU ? this . getNumOfCpus ( ) : ( getNumOfSockets ( ) ) * ( getCpuPerSocket ( ) ) ; }
protected boolean areUpdatedFieldsLegal ( ) { return VmHandler.mUpdateVmsStatic.IsUpdateValid ( org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVmStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStatus ( ) ) ; }
private boolean isStatelessSnapshotExistsForVm ( ) { return getSnapshotDao ( ) . exists ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) , SnapshotType.STATELESS ) ; }
protected org.ovirt.engine.api.model.ReportedDevice addParents ( org.ovirt.engine.api.model.ReportedDevice model ) { model.setVm ( new org.ovirt.engine.api.model.VM ( ) ) ; model.getVm ( ) . setId ( vmId.toString ( ) ) ; return model ; }
public void setItems ( org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > value ) { super . setItems ( value ) ; }
public final java.lang.String consoleClientResources ( ) { return getString ( org.ovirt.engine.ui.common.utils.DynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES ) ; }
private static javax.xml.datatype.DatatypeFactory getDatatypeFactory ( ) { if ( ( org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory ) == null ) { try { org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory = javax.xml.datatype.DatatypeFactory.newInstance ( ) ; } catch ( javax.xml.datatype.DatatypeConfigurationException dce ) { org.ovirt.engine.api.restapi.types.DateMapper.LOG.warn ( org.ovirt.engine.api.restapi.types.DateMapper.DATATYPE_FACTORY_CREATION_FAILED , dce ) ; } } return org.ovirt.engine.api.restapi.types.DateMapper.datatypeFactory ; }
protected boolean prepareFailureMessageForDisks ( java.lang.String diskNames ) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessage ( java.lang.String.format ( "$diskNames %1$s" , diskNames ) ) ; return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL__DISKS ) ; }
public void setHeader ( com.google.gwt.user.client.ui.Widget widget ) { headerTitlePanel.insert ( widget , 0 ) ; }
public javax.ws.rs.core.Response activate ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase params = new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( guid , vmId ) ) ; return doAction ( VdcActionType.HotPlugDiskToVm , params , action ) ; }
protected abstract void updateHosts ( ) ;
private void processVm ( ) { if ( ( org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { decreasePendingVms ( org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getId ( ) ) ; } }
public org.ovirt.engine.core.common.businessentities.DisplayType getDisplayType ( ) { return this . vmDynamic.getDisplayType ( ) ; }
private boolean validate ( org.ovirt.engine.core.bll.ValidationResult validationResult , java.lang.String violatingEntity ) { if ( ! ( validationResult.isValid ( ) ) ) { addViolation ( validationResult.getMessage ( ) , violatingEntity ) ; } return validationResult.isValid ( ) ; }
public void getFilteredWithPermissionsNoPermissionsAndNoFilter ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_SNAPSHOT_ID , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; org.junit.Assert.assertNotNull ( snapshot ) ; org.junit.Assert.assertEquals ( existingEntity , snapshot ) ; }
public boolean canBeSelected ( ) { org.ovirt.engine.core.common.businessentities.DisplayType vmDisplayType = ( ( getEntity ( ) . getDisplayType ( ) ) != null ) ? getEntity ( ) . getDisplayType ( ) : getEntity ( ) . getDefaultDisplayType ( ) ; return vmDisplayType == ( org.ovirt.engine.core.common.businessentities.DisplayType.vnc ) ; }
protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( getEntity ( ) ) ; }
public static void RunMultipleAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters ) { org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction ( actionType , parameters , null , null ) ; }
public void Connect ( ) { org.ovirt.engine.ui.common.uicommon.SpicePluginImpl.logger.warning ( "Connecting via spice..." ) ; if ( configurator.isClientLinuxFirefox ( ) ) { connectNativelyViaXPI ( ) ; } else if ( configurator.isClientWindowsExplorer ( ) ) { connectNativelyViaActiveX ( ) ; } }
public int hashCode ( ) { return map.hashCode ( ) ; }
public void setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport ) { this . mVmStatic.setMigrationSupport ( migrationSupport ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageById ( org.ovirt.engine.core.compat.Guid id , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { return org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( diskImages , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate ( id ) ) ; }
public void setRoundedElapsedTime ( java.lang.Double value ) { this . mVmStatistics.setRoundedElapsedTime ( value ) ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "roundedElapsedTime" ) ) ; }
protected org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters createParameters ( org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid , org.ovirt.engine.core.compat.Guid destStorageDomainGuid , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { return new org.ovirt.engine.core.common.action.MoveDiskParameters ( disk.getImageId ( ) , sourceStorageDomainGuid , destStorageDomainGuid ) ; }
private static void setValidCpuVersionMap ( ) { org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.SupportedClusterLevels , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVersionSet ( ) ) ; }
public void remove ( org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId id ) { getCallsHandler ( ) . executeModification ( "Deleteimage_storage_domain_map" , getCustomMapSqlParameterSource ( ) . addValue ( "image_id" , id.getImageId ( ) ) . addValue ( "storage_domain_id" , id.getStorageDomainId ( ) ) ) ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.ExternalNetworkProviderConfiguration > collection ) { org.junit.Assert.assertNotNull ( collection ) ; org.junit.Assert.assertEquals ( 1 , collection.size ( ) ) ; verifyModel ( collection.get ( 0 ) , 0 ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ExportVmCommand.getVmId ( ) . toString ( ) , LockMessagesMatchUtil.VM ) ; }
protected boolean canCreateSnapshot ( ) { if ( org.ovirt.engine.core.bll.ImagesHandler.isVmInPreview ( org.ovirt.engine.core.bll.BaseImagesCommand.getVmId ( ) ) ) { log.error ( "Cannot create snapshot. Vm is in preview status" ) ; return false ; } return true ; }
private void RemoveVdsStaticFromDb ( ) { org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsStaticDAO ( ) . remove ( org.ovirt.engine.core.bll.RemoveVdsCommand.getVdsId ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logOff ( org.ovirt.engine.core.common.businessentities.DbUser userToLogoff ) { org.ovirt.engine.core.common.action.LogoutUserParameters params = new org.ovirt.engine.core.common.action.LogoutUserParameters ( userToLogoff.getId ( ) ) ; params.setSessionId ( getEngineSessionId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend ( ) . logoff ( params ) ; return returnValue ; }
public void testRemove ( ) { dao.remove ( FixturesTool.GLUSTER_BRICK_SERVER1 ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterServer entity = dao.getByServerId ( FixturesTool.GLUSTER_BRICK_SERVER1 ) ; org.junit.Assert.assertNull ( entity ) ; }
public void setAlignment ( java.lang.String value ) { if ( ( privateAlignment ) != value ) { privateAlignment = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Alignment" ) ) ; } }
public static java.lang.String MigrationMethostoString ( org.ovirt.engine.core.common.businessentities.MigrationMethod method ) { if ( method == ( org.ovirt.engine.core.common.businessentities.MigrationMethod.OFFLINE ) ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.offline ; } else if ( method == ( org.ovirt.engine.core.common.businessentities.MigrationMethod.ONLINE ) ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.VdsProperties.online ; } else { return "" ; } }
public void persistCommandWithoutContext ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { persistCommand ( parentCommand , null , enableCallBack ) ; }
public void setMessages ( java.util.List < java.lang.String > value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( messages , value ) ) ) { messages = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Message" ) ) ; } }
protected void performLogout ( ) { getLoginModel ( ) . resetAfterLogout ( ) ; user.onUserLogout ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . clearCache ( ) ; org.ovirt.engine.ui.common.uicommon.model.CleanupModelEvent.fire ( eventBus ) ; }
private void checkConnection ( ) throws java.sql.SQLException { java.sql.Statement statement = null ; try { statement = connection.createStatement ( ) ; statement.executeQuery ( "select null" ) ; } finally { if ( statement != null ) { statement.close ( ) ; } } }
public org.ovirt.engine.core.common.action.VdcReturnValueBase logoff ( org.ovirt.engine.core.common.action.VdcActionParametersBase parameters ) { return runAction ( ActionType.LogoutSession , parameters ) ; }
protected void afterExecute ( java.lang.Runnable r , java.lang.Throwable t ) { super . afterExecute ( r , t ) ; org.ovirt.engine.core.utils.CorrelationIdTracker.clean ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > getAllByVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroup ) { return getCallsHandler ( ) . executeReadList ( "GetVmStaticByVdsGroup" , org.ovirt.engine.core.dao.VmStaticDaoImpl.VMStaticRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vds_group_id" , vdsGroup ) ) ; }
public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureFromOS ( int osId ) ;
public void setUp ( ) throws java.lang.Exception { testServlet = new org.ovirt.engine.core.WelcomeServlet ( ) { private static final long serialVersionUID = 1446616158991683162L ; @ java.lang.Override public java.lang.String getCurrentSsoSessionUser ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , java.lang.String token ) { return "admin@internal" ; } @ java.lang.Override public boolean isSessionValid ( javax.servlet.http.HttpServletRequest request , java.lang.String token ) { return true ; } @ java.lang.Override public java.util.Map < java.lang.String , java.lang.Object > isSsoWebappDeployed ( ) { return java.util.Collections.emptyMap ( ) ; } } ; testServlet.setBackend ( mockBackend ) ; testServlet.init ( mockBrandingManager , "/ovirt-engine" ) ; mockBackendQuery ( VdcQueryType.GetConfigurationValue , "oVirtVersion" ) ; org.mockito.Mockito.when ( mockBrandingManager.getBrandingThemes ( ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ; org.mockito.Mockito.when ( mockBrandingManager.getWelcomeSections ( org.mockito.Matchers.any ( java.util.Locale.class ) ) ) . thenReturn ( "Welcome Section HTML" ) ; }
protected org.ovirt.engine.api.model.GlusterBrick doPopulate ( org.ovirt.engine.api.model.GlusterBrick model , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { return model ; }
private void markExternalPoliciesAsDisabled ( java.util.List < org.ovirt.engine.core.common.scheduling.PolicyUnit > units ) { for ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : units ) { if ( ! ( policyUnit.isInternal ( ) ) ) { policyUnit.setEnabled ( false ) ; getPolicyUnitDao ( ) . update ( policyUnit ) ; } } }
private void setUpGetBallooningExpectations ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.GetVmByVmIdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true ) ; }
org.ovirt.engine.core.common.businessentities.VDS getVds ( ) { return cachedVds.clone ( ) ; }
public void toFile ( java.lang.String krb5ConfPath , java.lang.StringBuffer sb ) throws java.io.FileNotFoundException , java.io.IOException { try ( java.io.FileOutputStream fos = new java.io.FileOutputStream ( krb5ConfPath ) ) { fos.write ( sb.toString ( ) . getBytes ( ) ) ; } }
public void testIsNetworkInSyncWhenStaticBootProtocolAddressEqual ( ) throws java.lang.Exception { initIpConfigurationBootProtocolAddress ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.BOOT_PROTOCOL , true ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.Network , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterNetworkPresenter.constants.dataCenterNetworkSubTabLabel ( ) , 1 , modelProvider ) ; }
public void testIsManagementNetworkNameInGivenClusterPositive ( ) throws java.lang.Exception { testIsManagementNetworkNameInGivenClusterCommon ( org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtilImplTest.TEST_NETWORK_NAME , true ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePool getByName ( java.lang.String name ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "name" , name ) ; return getCallsHandler ( ) . executeRead ( "Getstorage_poolByName" , org.ovirt.engine.core.dao.StoragePoolDAODbFacadeImpl.mapper , parameterSource ) ; }
protected void addCanDoActionMessageVariable ( java.lang.String varName , java.lang.Object varValue ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( java.lang.String.format ( "$%s %s" , varName , varValue ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.OVF_UPDATE , VdcBllMessages.ACTION_TYPE_FAILED_DOMAIN_OVF_ON_UPDATE ) ) ; }
org.ovirt.engine.core.common.queries.VdcQueryReturnValue RunPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters ) ;
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.userportal.gin.ClientGinjector ginjector ) { return new com.gwtplatform.mvp.client.TabDataBasic ( ginjector.getApplicationConstants ( ) . extendedTemplateEventsSubTabLabel ( ) , 3 ) ; }
public static boolean hasSpiceSupport ( int osId , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDisplayTypes ( osId , version ) . contains ( DisplayType.qxl ) ; }
private void mockStorageDomainSpaceChecker ( org.ovirt.engine.core.common.businessentities.storage_domains domain , boolean succeeded ) { org.powermock.api.mockito.PowerMockito.when ( org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds ( domain ) ) . thenReturn ( succeeded ) ; }
public org.ovirt.engine.api.resource.ActionResource getActionSubresource ( @ javax.ws.rs.PathParam ( value = "action" ) java.lang.String action , @ javax.ws.rs.PathParam ( value = "oid" ) java.lang.String oid ) ;
protected org.ovirt.engine.core.bll.IsoDomainListSyncronizer getIsoDomainListSyncronizer ( ) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( ) ; cpuExists ( ) ; cpuManufacturersMatch ( ) ; VdsExist ( ) ; canDoActionFailedWithReason ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION ) ; }
public org.ovirt.engine.core.bll.utils.GlusterGeoRepUtil getGeoRepUtilInstance ( ) { return org.ovirt.engine.core.bll.utils.Injector.get ( org.ovirt.engine.core.bll.utils.GlusterGeoRepUtil.class ) ; }
public void testUndelete ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.ClearAllDismissedAuditLogs , org.ovirt.engine.core.common.action.VdcActionParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; collection.undelete ( new org.ovirt.engine.api.model.Action ( ) ) ; }
public void testGlusterDcAndMatchingCompatiblityVersion ( ) { storagePool.setcompatibility_version ( Version.v3_3 ) ; storagePool.setIsLocal ( false ) ; org.junit.Assert.assertTrue ( validator.isGlusterSupportedInDC ( ) . isValid ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Quota mockStorageQuotaGlobalInGrace ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = mockBasicQuota ( ) ; quota.setGlobalQuotaStorage ( getQuotaStorage ( 100 , 104 ) ) ; return quota ; }
public void onLoadOrError ( ) { final org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validation = new org.ovirt.engine.ui.uicommonweb.validation.IconValidation ( ) . validate ( icon ) ; updateErrorIconLabel ( validation ) ; image.getElement ( ) . setAttribute ( "src" , icon ) ; }
public void onPowerringUp ( ) { decreasePendingVm ( org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDao ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ) ; }
public void testAddUser_4 ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDomainList , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , setUpDomains ( ) ) ; setUpAddUserExpectations ( ( ( ( "ADUSER@" + ( DOMAIN ) ) + ":: allnames=" ) + ( NAMES [ 0 ] ) ) ) ; org.ovirt.engine.api.model.User model = new org.ovirt.engine.api.model.User ( ) ; model.setUserName ( NAMES [ 0 ] ) ; org.ovirt.engine.api.model.Domain domain = new org.ovirt.engine.api.model.Domain ( ) ; domain.setId ( new org.ovirt.engine.core.compat.Guid ( org.ovirt.engine.api.restapi.resource.aaa.DOMAIN.getBytes ( ) , true ) . toString ( ) ) ; model.setDomain ( domain ) ; javax.ws.rs.core.Response response = collection.add ( model ) ; verifyAddUser ( response ) ; }
public java.lang.String getvm_name ( ) { return this . mVmStatic.getvm_name ( ) ; }
public void testGetDiskIdByLunId ( ) { org.junit.Assert.assertEquals ( dao.getDiskIdByLunId ( org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getLunId ( ) ) , new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap ( org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getDiskId ( ) , org.ovirt.engine.core.dao.DiskLunMapDaoTest.EXISTING_DISK_LUN_MAP_ID.getLunId ( ) ) ) ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; UpdateActionAvailability ( ) ; }
protected void verifyActionModel ( org.ovirt.engine.api.model.VM model , int index ) { assertNotNull ( model ) ; assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; verifyLinks ( model ) ; }
public void processOnVmPoweringUp ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = backend.getResourceManager ( ) . GetAsyncCommandForVm ( vmId ) ; if ( command != null ) { command.onPowerringUp ( ) ; } }
protected void onAdd ( T value , V widget ) { }
protected boolean isQuotaDependant ( ) { if ( ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) . getTemplateType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE ) ) { return false ; } return super . isQuotaDependant ( ) ; }
public void clearErrorMessages ( ) { com.google.gwt.user.client.ui.IsWidget errorIconWidget = errorMessagePanel.getWidget ( 0 ) ; errorMessagePanel.clear ( ) ; errorMessagePanel.add ( errorIconWidget ) ; errorMessagePanel.setVisible ( false ) ; }
com.google.gwt.safehtml.shared.SafeHtml bookmarkItem ( java.lang.String id , java.lang.String text ) ;
private void setUpGetDiskExpectations ( ) { setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest.DISK_ID } , asList ( getEntity ( 0 ) ) ) ; }
private boolean findDefaultManagementNetwork ( ) { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork ( org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup ( ) . getStoragePoolId ( ) ) ; if ( ( managementNetwork ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND ) ; return false ; } return true ; }
public void versionDecreaseWithHost ( ) { createCommandWithOlderVersion ( true , false ) ; setupCpu ( ) ; vdsExist ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_CLUSTER_WITH_HOSTS_COMPATIBILITY_VERSION ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImageBase createSparseDiskImageBase ( ) { org.ovirt.engine.core.common.businessentities.DiskImageBase base = new org.ovirt.engine.core.common.businessentities.DiskImageBase ( ) ; base.setvolume_type ( VolumeType.Sparse ) ; base.setDiskInterface ( DiskInterface.IDE ) ; return base ; }
public org.ovirt.engine.core.bll.network.macpool.MacPool getPoolById ( org.ovirt.engine.core.compat.Guid macPoolId ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = readLockResource ( ) ) { return getPoolWithoutLocking ( macPoolId ) ; } }
public void testExistingUsbControllerModelWithoutVersion ( ) { final org.ovirt.engine.core.common.businessentities.UsbControllerModel model = OsRepositoryImpl.INSTANCE.getOsUsbControllerModel ( OsRepositoryImpl.INSTANCE.getOsIdByUniqueName ( "rhel7" ) , null ) ; org.junit.Assert.assertEquals ( UsbControllerModel.NEC_XHCI , model ) ; }
public void testVmDiskIsEmpty ( ) { org.ovirt.engine.sdk4.internal.containers.VmContainer vm = new org.ovirt.engine.sdk4.internal.containers.VmContainer ( ) ; vm.disks ( null ) ; org.junit.Assert.assertNotNull ( vm.disks ( ) ) ; org.junit.Assert.assertEquals ( 0 , vm.disks ( ) . size ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { UpdateStorageDomainCells ( ) ; }
public static org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask ( org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.createAsyncTask ( command , asyncTaskCreationInfo , parentCommand ) ; }
protected void ConcreteStartPollingTask ( ) { org.ovirt.engine.core.bll.EntityMultiAsyncTasks entityInfo = GetEntityMultiAsyncTasks ( ) ; entityInfo.StartPollingTask ( getVdsmTaskId ( ) ) ; }
public void setSessionTimeout ( java.lang.String engineSessionTimeout ) { try { setSessionTimeout ( java.lang.Integer.valueOf ( engineSessionTimeout ) ) ; } catch ( java.lang.NumberFormatException ex ) { setSessionTimeout ( org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.DEFAULT_ENGINE_SESSION_TIMEOUT ) ; } }
public static void TryRunHighAvailableVdsUp ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDAO ( ) . get ( vdsId ) ; org.ovirt.engine.core.bll.HighAvailableVmsDirector.TryRunHighAvailableVm ( vds.getvds_group_name ( ) ) ; }
void setActiveTab ( org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab tab ) { if ( ( activeTab ) != null ) { activeTab.deactivate ( ) ; } if ( tab != null ) { tab.activate ( ) ; } activeTab = tab ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolCommand.getVmPool ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . save ( vmPool ) ; setActionReturnValue ( vmPool.getVmPoolId ( ) ) ; org.ovirt.engine.core.bll.AddVmPoolCommand.setSucceeded ( true ) ; }
public void ExecuteCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . ExecuteCommand ( command ) ; OnExecute ( ) ; }
public void getAllForVm ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( org.ovirt.engine.core.dao.VmGuestAgentInterfaceDaoTest.EXISTING_VM_ID ) ; assertVmGuestAgentInterfaceForVm ( interfaces ) ; }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return new org.ovirt.engine.core.bll.storage.pool.DisconnectStoragePoolAsyncOperation ( getVdss ( ) , getStoragePool ( ) ) ; }
public void setPlaceTransitionHandler ( org.ovirt.engine.ui.common.presenter.PlaceTransitionHandler handler ) { placeTransitionHandler = handler ; }
private void assertValidateSlaveHasNoLabelsFailed ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator , java.lang.String slaveName ) { final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE ; org.junit.Assert.assertThat ( validator.validateSlaveHasNoLabels ( slaveName ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , slaveName ) ) ) ; }
public void testGetByName ( ) { newVolume = insertTestVolume ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = dao.getByName ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.NEW_VOL_NAME ) ; org.junit.Assert.assertNotNull ( volume ) ; org.junit.Assert.assertEquals ( newVolume , volume ) ; }
private org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister createLegacyPersister ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > userNetworkAttachments ) { return createLegacyPersister ( userNetworkAttachments , interfaceWithAttachedClusterNetworkA , interfaceWithoutAttachedNetwork ) ; }
protected boolean canDoAction ( ) { return org.ovirt.engine.core.bll.RemoveAdGroupCommand.CanRemoveAdGroup ( org.ovirt.engine.core.bll.RemoveAdGroupCommand.getParameters ( ) . getAdElementId ( ) , org.ovirt.engine.core.bll.RemoveAdGroupCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public static void updateCommandStatus ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.CommandStatus status ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.coco.updateCommandStatus ( commandId , status ) ; }
public void setForceHelp ( java.lang.String forceHelpText ) { geoRepForceHelpIcon.setText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.GeoRepActionConfirmPopUpView.templates.italicText ( forceHelpText ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VDSInfoReturnForXmlRpc getCapabilities ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getCapabilities" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "info" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSInfoReturnForXmlRpc ( response ) ; }
public void testSetup ( ) { mockQuotaDAO ( ) ; mockVmDAO ( ) ; mockStoragePoolDAO ( ) ; }
private java.lang.String getDefaultUrl ( org.ovirt.engine.core.common.businessentities.ProviderType type ) { if ( type == null ) { return new java.lang.String ( ) ; } switch ( type ) { case OPENSTACK_NETWORK : return "http://localhost:9696" ; case OPENSTACK_IMAGE : return "http://localhost:9292" ; case FOREMAN : default : return "http://localhost" ; } }
public void updateVisibility ( ) { super . updateVisibility ( ) ; messageLabel.setVisible ( false ) ; apply.setVisible ( false ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Label label ) { validateParameters ( label , "id" ) ; final java.lang.String labelId = label.getId ( ) ; return performCreate ( labelId ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
public void onUpdateMainContentLayout ( org.ovirt.engine.ui.webadmin.section.main.presenter.UpdateMainContentLayoutEvent event ) { getView ( ) . setSubTabPanelVisible ( event.isSubTabPanelVisible ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > getAllWithQuery ( java.lang.String query ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = jdbcTemplate.query ( query , org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoDbFacadeImpl.volumeRowMapper ) ; fetchRelatedEntities ( volumes ) ; return volumes ; }
public org.ovirt.engine.core.compat.NGuid getmigrating_to_vds ( ) { return this . vmDynamic.getmigrating_to_vds ( ) ; }
public void removeInterfaceFromVds ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getQosDao ( ) . remove ( id ) ; getCallsHandler ( ) . executeModification ( "Deletevds_interface" , parameterSource ) ; }
protected org.ovirt.engine.core.common.businessentities.ad_groups getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendGroupsResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.ad_groups.class ) , index ) ; }
protected void updateCustomPropertySheet ( ) { if ( ( getModel ( ) . getSelectedCluster ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . getSelectedCluster ( ) ; updateCustomPropertySheet ( cluster.getcompatibility_version ( ) ) ; }
public int compare ( org.ovirt.engine.core.compat.Guid filter1 , org.ovirt.engine.core.compat.Guid filter2 ) { java.lang.Integer position1 = getPosition ( filterPositionMap.get ( filter1 ) ) ; java.lang.Integer position2 = getPosition ( filterPositionMap.get ( filter2 ) ) ; return position1 - position2 ; }
public void onConsoleModelChanged ( org.ovirt.engine.ui.userportal.section.main.presenter.popup.console.ConsoleModelChangedEvent event ) { if ( sameEntity ( model , event.getItemModel ( ) ) ) { setupSelectedProtocol ( model ) ; } }
private void dbFacadeThrowOnNetworkClusterSave ( ) { org.mockito.Mockito.doThrow ( new org.springframework.dao.DataIntegrityViolationException ( "test violations" ) ) . when ( mockNetworkClusterDao ) . save ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster.class ) ) ; }
protected org.ovirt.engine.core.common.queries.VdcQueryReturnValue runQueryImpl ( org.ovirt.engine.core.common.queries.VdcQueryType actionType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , boolean isPerformUserCheck ) { return runQueryImpl ( actionType , parameters , isPerformUserCheck , null ) ; }
private void initCheckBoxEditors ( ) { importGlusterConfigurationEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; countThreadsAsCoresEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; enableTrustedServiceEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public void setStyleName ( java.lang.String style , boolean add ) { getLabel ( ) . setStyleName ( style , add ) ; }
private org.ovirt.engine.core.common.businessentities.StoragePool getStoragePool ( ) { org.ovirt.engine.core.compat.Guid storagePoolId = ( ( org.ovirt.engine.core.common.businessentities.storage.OpenStackVolumeProviderProperties ) ( provider.getAdditionalProperties ( ) ) ) . getStoragePoolId ( ) ; return getStoragePoolDao ( ) . get ( storagePoolId ) ; }
public static void setLoggedInUser ( org.ovirt.engine.core.common.users.VdcUser loggedUser ) { org.ovirt.engine.ui.frontend.Frontend.loggedUser = loggedUser ; }
protected boolean doesStorageDomainHaveSpaceForRequest ( long size ) { return org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) , size ) ; }
protected abstract boolean showTransportProperties ( ) ;
private void setUpTemplateDisksExpectations ( org.ovirt.engine.core.compat.Guid templateId ) { setUpEntityQueryExpectations ( VdcQueryType.GetVmTemplatesDisks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { templateId } , createDiskList ( ) ) ; }
public void checkValidIpConfigurationStaticBootProtocol ( ) { initIpConfigurationDetails ( NetworkBootProtocol.STATIC_IP , true , true ) ; org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , actual ) ; }
public void testGetAsyncTaskIdsByInvalidEntity ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = dao.getAsyncTaskIdsByEntity ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.junit.Assert.assertNotNull ( guids ) ; org.junit.Assert.assertTrue ( guids.isEmpty ( ) ) ; }
public void update ( C value ) { getFieldUpdater ( ) . update ( index , object , value ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > searchClusters ( ) { return genericSearch ( org.ovirt.engine.core.bll.SearchQuery.getDbFacade ( ) . getVdsGroupDAO ( ) , true , null ) ; }
abstract void createEntityTable ( ) ;
public boolean evaluate ( java.lang.Object disk ) { return ( ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( disk ) ) . getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.DiskInterface.VirtIO_SCSI ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetBookmarkByBookmarkNameQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getBookmarkDao ( ) . getByName ( org.ovirt.engine.core.bll.GetBookmarkByBookmarkNameQuery.getParameters ( ) . getName ( ) ) ) ; }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { getCommand ( cmdId ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
protected void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( command == ( loginModel.getLoginCommand ( ) ) ) { lockInteractionManager.showLoadingIndicator ( ) ; } super . executeCommand ( command ) ; }
public void postProcess ( org.jboss.resteasy.core.ServerResponse response ) { currents.set ( null ) ; }
public java.lang.String getDiskAlias ( ) { if ( ( getDisk ( ) ) != null ) { return getDisk ( ) . getDiskAlias ( ) ; } return "" ; }
private boolean supportsGlusterSnapshotFeature ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return ( cluster.supportsGlusterService ( ) ) && ( getGlusterUtil ( ) . isGlusterSnapshotSupported ( cluster.getCompatibilityVersion ( ) , cluster.getId ( ) ) ) ; }
private void verifyDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory ( storageDomains , disksList ) ; org.junit.Assert.assertNotNull ( storageDomain ) ; org.junit.Assert.assertEquals ( storageDomain , validStorageDomain ) ; }
protected void buildVmVideoCards ( ) { createInfo.put ( VdsProperties.display , vm.getDisplayType ( ) . toString ( ) ) ; createInfo.put ( VdsProperties.num_of_monitors , java.lang.String.valueOf ( vm.getNumOfMonitors ( ) ) ) ; }
public static java.util.Collection < java.lang.String > replaceWith ( java.lang.String propertyName , java.util.List < ? > items ) { return org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( propertyName , items , org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_SEPARATOR , org.ovirt.engine.core.utils.ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.ApplicationConstants applicationConstants , org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.network.NetworkQoS , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel , org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkQoSListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( applicationConstants.dataCenterNetworkQoSSubTabLabel ( ) , 2 , modelProvider ) ; }
private org.ovirt.engine.core.compat.Guid getQuotaId ( ) { if ( ( ( newDisk ) != null ) && ( isQuotaValidationNeeded ( ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( newDisk ) ) . getQuotaId ( ) ; } return null ; }
private void mockNullVm ( ) { org.mockito.Mockito.doReturn ( vmDao ) . when ( command ) . getVmDao ( ) ; org.mockito.Mockito.when ( vmDao.get ( command.getParameters ( ) . getVmId ( ) ) ) . thenReturn ( null ) ; createVirtIODisk ( ) ; }
private void refreshHostStorage ( org.ovirt.engine.core.compat.Guid hostId ) { getBackendCollection ( VdcQueryType.GetDeviceList , new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters ( hostId , org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI ) ) ; }
private static void addField ( java.lang.String fieldName , java.lang.Class < ? > fieldType , java.lang.String columnName ) { org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.fields.add ( new org.ovirt.engine.core.searchbackend.gluster.GlusterVolumeConditionFieldAutoCompleter.AutoCompletionField ( fieldName , fieldName , fieldType , columnName ) ) ; }
private static boolean vmIsRunningStateless ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > messages ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vmId , SnapshotType.STATELESS ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.storage.Disk , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel > modelProvider ) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData ( org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineVirtualDiskPresenter.constants.virtualMachineVirtualDiskSubTabLabel ( ) , 3 , modelProvider ) ; }
public void replace_patternNotPresent ( ) { runAndCheck ( sb ( "abcd" ) , "X" , "Y" , "abcd" ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond ) { return org.apache.commons.lang.StringUtils.equals ( bond.getBondName ( ) , i.getName ( ) ) ; }
public void testEmptyStringIsValid ( ) { doTest ( "" , true ) ; }
protected boolean canDoAction ( ) { return ( super . canDoAction ( ) ) && ( validate ( getQosValidator ( getQos ( ) ) . peakConsistentWithAverage ( ) ) ) ; }
T getstorage_pool_id ( ) ;
protected java.lang.String cdPathWindowsToLinux ( java.lang.String url ) { return org.ovirt.engine.core.bll.ImagesHandler.cdPathWindowsToLinux ( url , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getstorage_pool_id ( ) ) ; }
protected java.lang.String getPredefinedVMProperties ( org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.PredefinedVMProperties , version.getValue ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid domainId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getForStoragePool ( domainId , vmTemplate.getStoragePoolId ( ) . getValue ( ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { model.onRestoreVms ( new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { setWindow ( null ) ; } } ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.VdcQueryParametersBase tempVar = org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters ( ) ; org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.DbFacade.getInstance ( ) . getTagDao ( ) . getAllForUsers ( org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters ( ) . getUserId ( ) ) ) ; }
public void testValidStatusForEnrollCertificate ( ) { validator = mockHostForActivation ( VDSStatus.Maintenance ) ; org.junit.Assert.assertThat ( validator.validateStatusForEnrollCertificate ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue ( ) ; setTestResultValue ( res ) ; stopProgress ( ) ; }
public void onEvent ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds , java.lang.Object eventData ) { }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { populateRoles ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Role > ) ( result ) ) ) ; }
public void testGetWithPermissionsDisabledUnprivilegedUser ( ) { org.ovirt.engine.core.common.businessentities.storage_domains result = dao.get ( existingDomain.getId ( ) , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; assertGetResult ( result ) ; }
public void onSessionExpired ( ) { if ( ( frontend.getLoginHandler ( ) ) != null ) { frontend.getLoginHandler ( ) . onLogout ( ) ; } Window.Location.reload ( ) ; }
public void testGetValue ( ) { java.lang.System.out.println ( "test1" ) ; org.junit.Assert.assertEquals ( ( "Wrong getValue() for " + ( value ) ) , value.ordinal ( ) , value.getValue ( ) ) ; }
public void testGet ( ) { org.ovirt.engine.core.common.businessentities.storage_pool result = dao.get ( existingPool.getId ( ) ) ; assertGetResult ( result ) ; }
public java.lang.String getVdsName ( ) { if ( ( ( mVdsName ) == null ) && ( ( getVds ( ) ) != null ) ) { mVdsName = getVds ( ) . getvds_name ( ) ; } return mVdsName ; }
public static void RunMultipleQueries ( final java.util.List < org.ovirt.engine.core.common.queries.VdcQueryType > queryTypeList , final java.util.List < org.ovirt.engine.core.common.queries.VdcQueryParametersBase > queryParamsList , final org.ovirt.engine.ui.uicompat.IFrontendMultipleQueryAsyncCallback callback , final java.lang.String context ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleQueries ( queryTypeList , queryParamsList , callback , context ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( org.ovirt.engine.core.searchbackend.StringHelper.EqOp ( fieldName , "INITIALIZED" ) ) { retval = new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } else { } return retval ; }
protected java.lang.String getJsonDiskDescription ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { try { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getJsonDiskDescription ( disk ) ; } catch ( java.io.IOException e ) { log.error ( "Exception while generating json for disk. ERROR: '{}'" , e ) ; return org.apache.commons.lang.StringUtils.EMPTY ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > getCollection ( ) { return getBackendCollection ( VdcQueryType.GetVdsInterfacesByVdsId , new org.ovirt.engine.core.common.queries.GetVdsByVdsIdParameters ( asGuid ( hostId ) ) ) ; }
protected boolean updateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) . getstorage_pool_id ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) ) ) ; }
private java.lang.String generateDefaultQuotaName ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool ) { java.lang.String quotaName = getDefaultQuotaName ( storagePool.getname ( ) ) ; return getQuotaDAO ( ) . getDefaultQuotaName ( quotaName ) ; }
protected static java.util.List < org.ovirt.engine.core.common.businessentities.VmPoolMap > getListOfVmsInPool ( org.ovirt.engine.core.compat.NGuid poolId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . getVmPoolsMapByVmPoolId ( poolId ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { neutronAgentPanel.setVisible ( ( ( java.lang.Boolean ) ( neutronAgentModel.isPluginConfigurationAvailable ( ) . getEntity ( ) ) ) ) ; }
protected void onMouseOut ( ) { dragImage.setVisible ( false ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.hide ( true ) ; if ( ( parentPanel ) != null ) { parentPanel.onMouseOver ( ) ; } actionButton.setVisible ( false ) ; }
public void testGetAllNamesPinnedToHostReturnsVmNameForHostPinned ( ) throws java.lang.Exception { java.util.List < java.lang.String > namesPinnedToHost = dao.getAllNamesPinnedToHost ( org.ovirt.engine.core.dao.VmStaticDAOTest.VDS_STATIC_ID ) ; org.junit.Assert.assertFalse ( namesPinnedToHost.isEmpty ( ) ) ; org.junit.Assert.assertTrue ( namesPinnedToHost.contains ( existingVmStatic.getVmName ( ) ) ) ; }
private org.ovirt.engine.core.common.osinfo.OsRepository getOsRepository ( ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; }
private boolean logicalNetworkExists ( ) { if ( ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.getNetworkDAO ( ) . get ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.getParameters ( ) . getNetworkCluster ( ) . getnetwork_id ( ) ) ) != null ) { return true ; } addCanDoActionMessage ( VdcBllMessages.NETWORK_NOT_EXISTS ) ; return false ; }
public void testExecuteGetAllEntitiesCommand ( ) throws java.io.IOException , org.ovirt.engine.core.utils.ovf.OvfReaderException { createCommand ( ) ; mockCommand ( ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertTrue ( "return value should be true" , cmd.getReturnValue ( ) . getSucceeded ( ) ) ; }
public void cleanup ( ) { listModel.cleanup ( ) ; }
protected void HandleError ( ) { org.ovirt.engine.core.bll.StartVdsCommand.log.errorFormat ( "Failed to run StartVdsCommand on vds :{0}" , org.ovirt.engine.core.bll.StartVdsCommand.getVdsName ( ) ) ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getHostName ( ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel ) { super . edit ( unitVmModel ) ; if ( unitVmModel.isVmAttachedToPool ( ) ) { specificHost.setEnabled ( false ) ; specificHostLabel.setStyleName ( style.labelDisabled ( ) , true ) ; } }
protected void init ( ) { setVdsId ( getVmManager ( ) . getConvertProxyHostId ( ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult hostExist ( ) { if ( ( host ) == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST , host.getName ( ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
int getRepetitions ( ) { return 3 ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.storage.GetStoragePoolsByStorageDomainIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . getAllForStorageDomain ( org.ovirt.engine.core.bll.storage.GetStoragePoolsByStorageDomainIdQuery.getParameters ( ) . getStorageDomainId ( ) ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt ( ( ( java.lang.Integer ) ( source ) ) ) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16 ; }
private void setIsVmNetwork ( org.ovirt.engine.ui.uicommonweb.models.EntityModel value ) { privateIsVmNetwork = value ; }
public native boolean detectXpiPlugin ( ) ;
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > filter ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters , org.ovirt.engine.core.common.scheduling.PerHostMessages messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error ( "Policy unit '{}' filter is not implemented" , getPolicyUnit ( ) . getName ( ) ) ; return hosts ; }
private java.util.Map < java.lang.String , java.lang.Integer > getVgaVideoDeviceSettings ( ) { return java.util.Collections.singletonMap ( VdsProperties.VIDEO_VRAM , org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoSettings.BASE_RAM_SIZE ) ; }
public void removeMemoryVolume ( java.lang.String memoryVolumes ) { if ( isMemoryStateRemovable ( memoryVolumes ) ) { removeMemoryVolumes ( memoryVolumes ) ; } }
private void assertValidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) ; mockMemorySize ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected boolean canDoAction ( ) { return ( super . canDoAction ( ) ) && ( validate ( validateInputForDuplication ( ) ) ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStatsForDomain ( ) { return runVdsCommand ( VDSCommandType.GetStorageDomainStats , new org.ovirt.engine.core.common.vdscommands.GetStorageDomainStatsVDSCommandParameters ( org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getVds ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getStorageDomain ( ) . getId ( ) ) ) ; }
public void stopRefresh ( ) { if ( ( getTimer ( ) ) != null ) { getTimer ( ) . stop ( ) ; } }
public void onMainTabSelected ( ) { super . onMainTabSelected ( ) ; getModel ( ) . getDiskViewType ( ) . setEntity ( DiskStorageType.IMAGE ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { migrationPolicies = ( ( java.util.List < org.ovirt.engine.core.common.migration.MigrationPolicy > ) ( returnValue ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase ) ( target ) ) ; behavior.maxCpusPerSocket = ( ( java.lang.Integer ) ( returnValue ) ) ; behavior.totalCpuCoresChanged ( ) ; }
public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureByCpuName ( java.lang.String cpuName ) { org.ovirt.engine.core.common.businessentities.ServerCpu cpu = getServerCpuByName ( cpuName ) ; org.ovirt.engine.core.common.businessentities.ArchitectureType result = org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ; if ( cpu != null ) { result = cpu.getArchitecture ( ) ; } return result ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addInterface ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId , boolean plugged , boolean hostDev ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.addInterface ( vmId , deviceId , plugged , hostDev , null ) ; }
public void testGetDefaultQuotaForStoragePool ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = dao.getDefaultQuotaForStoragePool ( FixturesTool.STORAGE_POOL_NFS ) ; org.junit.Assert.assertNotNull ( quota ) ; org.junit.Assert.assertEquals ( quota.getStoragePoolId ( ) , FixturesTool.STORAGE_POOL_NFS ) ; org.junit.Assert.assertTrue ( quota.isDefault ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmWatchdog getWatchdog ( ) { return watchdog ; }
public void testGetAllForStoragePoolWithPermissionsUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllForStoragePool ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
private boolean shouldDiskBePlugged ( ) { return ( ( org.ovirt.engine.core.bll.AddDiskCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) && ( ! ( java.lang.Boolean.FALSE.equals ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getPlugDiskToVm ( ) ) ) ) ; }
public static org.ovirt.engine.core.compat.Guid getGuidValue ( org.ovirt.engine.core.compat.Guid id ) { return id == null ? null : id.getValue ( ) ; }
public void testIsNetworkInSyncWhenNetworkQosIsNullIfaceQosOverridden ( ) throws java.lang.Exception { networkQos = null ; iface.setQosOverridden ( true ) ; org.junit.Assert.assertThat ( createTestedInstanceWithSameNonQosValues ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . masterDomainNotOperational ( masterDomainId , getParameters ( ) . getStoragePoolId ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.Quota getDefaultQuotaForStoragePool ( org.ovirt.engine.core.compat.Guid storagePoolId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , storagePoolId ) ; org.ovirt.engine.core.common.businessentities.Quota quota = getCallsHandler ( ) . executeRead ( "GetDefaultQuotaForStoragePool" , getQuotaFromResultSet ( ) , parameterSource ) ; return quota ; }
protected void StartPollingAsyncTasks ( ) { startPollingAsyncTasks ( getReturnValue ( ) . getTaskIdList ( ) ) ; }
public void getAllForForConnection ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = dao.get ( existingConnection.getid ( ) ) ; conn.setid ( "copy" ) ; dao.save ( conn ) ; assertGetAllForConnectionResult ( java.util.Arrays.asList ( existingConnection , conn ) , existingConnection ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Vm model , int index ) { super . verifyModel ( model , index ) ; org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.verifyModelSpecific ( model , index ) ; }
public java.lang.String getBookmarkValue ( ) { return ( getBookmark ( ) ) != null ? getBookmark ( ) . getbookmark_value ( ) : null ; }
protected synchronized void registerObject ( java.lang.String name , O object ) { java.util.HashMap < java.lang.String , O > newObjects = new java.util.HashMap < java.lang.String , O > ( objectsByName ) ; newObjects.put ( name , object ) ; objectsByName = newObjects ; }
private void mockProxySourcesForFencedHost ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceProxySourceType > fenceProxySources ) { org.mockito.Mockito.doReturn ( fenceProxySources ) . when ( fencedHost ) . getFenceProxySources ( ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel ) ( target ) ) ; boolean isNameUnique = ( ( java.lang.Boolean ) ( returnValue ) ) ; templateListModel.PostNameUniqueCheck ( isNameUnique ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile ) { driver.edit ( profile ) ; initCustomPropertySheet ( profile ) ; }
public void createParameters ( ) { parameters = new org.ovirt.engine.core.common.action.AddExternalStepParameters ( org.ovirt.engine.core.bll.AddExternalStepCommandTest.jobId , "step 1" , org.ovirt.engine.core.common.job.StepEnum.VALIDATING , org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED ) ; }
public boolean handshakeInProgress ( ) { final javax.net.ssl.SSLEngineResult.HandshakeStatus hs = this . engine.getHandshakeStatus ( ) ; final java.util.EnumSet < javax.net.ssl.SSLEngineResult.HandshakeStatus > handshakeEndStates = java.util.EnumSet.of ( javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED , javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING ) ; return ! ( handshakeEndStates.contains ( hs ) ) ; }
public static void getAAAProfilesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.convertAAAProfilesResult ( aQuery ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.AuditLog object ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.dismissEvent ( ) ) ; }
private void mockNullVm ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseMockUtils.mockVmDao ( command , vmDAO ) ; org.powermock.api.mockito.PowerMockito.when ( vmDAO.get ( command.getParameters ( ) . getVmId ( ) ) ) . thenReturn ( null ) ; cretaeVirtIODisk ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) { return snapshot ( vmId , disks , null ) ; }
public void syncSearch ( org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase ) { vdcQueryParametersBase.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( vdcQueryType , vdcQueryParametersBase , new SetItemsAsyncQuery ( ) ) ; setIsQueryFirstTime ( false ) ; }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidatorWithoutSpace ( ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommandTest.mockStorageDomainValidator ( ) ; org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForDiskWithSnapshots ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; return storageDomainValidator ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getTreeForEntity ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.VdcObjectType type ) { return getTreeForEntity ( id , type , null , false ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes , getPmType ( ) ) ; updatePmTypeList ( pmTypes , getPmSecondaryType ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomainStatus getRawValue ( org.ovirt.engine.core.common.businessentities.StorageDomain object ) { return object.getstatus ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface.getId ( ) , iface.getName ( ) , false , bondName , null , null , null , true , null , false , null , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource ( "foo" , null ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void mockDaos ( ) { mockVmDao ( ) ; mockDiskImageDao ( ) ; mockDiskDao ( ) ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( object ) ) . getStorageName ( ) ; }
private org.ovirt.engine.core.aaa.DirectoryGroup mapGroup ( org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup ) { return new org.ovirt.engine.core.aaa.DirectoryGroup ( this . getProfileName ( ) , ldapGroup.getid ( ) , ldapGroup.getname ( ) ) ; }
protected com.google.gwt.user.cellview.client.CellTree createDataDisplayWidget ( org.ovirt.engine.ui.webadmin.uicommon.model.TagModelProvider modelProvider ) { com.google.gwt.user.cellview.client.CellTree display = new org.ovirt.engine.ui.common.widget.tree.ElementIdCellTree < org.ovirt.engine.ui.webadmin.uicommon.model.TagModelProvider > ( modelProvider , null , org.ovirt.engine.ui.webadmin.widget.tags.TagList.res ) ; display.setAnimationEnabled ( true ) ; display.setKeyboardSelectionPolicy ( KeyboardSelectionPolicy.BOUND_TO_SELECTION ) ; return display ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmDefaultPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; updateSpmPriorityValues ( ) ; updateSpmPriority ( ) ; }
private void mockDbFacades ( ) { mockVdsGroupDao ( ) ; mockVmDao ( ) ; mockAuditLogDao ( ) ; mockVdsDao ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.setDbFacade ( dbFacade ) ; }
protected void saveDiskIfNotExists ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { if ( ! ( getBaseDiskDao ( ) . exists ( image.getId ( ) ) ) ) { getBaseDiskDao ( ) . save ( image ) ; } }
public java.lang.String getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { return ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel ) ( model ) ) . getName ( ) ; }
private org.ovirt.engine.core.common.businessentities.Network createNetwork ( ) { network = new org.ovirt.engine.core.common.businessentities.Network ( ) ; network.setname ( "test network" ) ; return network ; }
public void setCpuPerSocket ( int value ) { this . vmStatic.setcpu_per_socket ( value ) ; }
public void cancel ( ) { setWindow ( null ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { if ( _isNode ) { _isLegacyNode = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( VdsmEnv.OVIRT_NODE_HAS_OWN_BRIDGES ) ) ) ; } else { _parser.cliNoop ( ) ; } return null ; }
public org.ovirt.engine.api.v3.servers.V3VmNicServer getNicResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return new org.ovirt.engine.api.v3.servers.V3VmNicServer ( delegate.getNicResource ( id ) ) ; }
public org.ovirt.engine.core.config.entity.ConfigKey generateBlankConfigKey ( java.lang.String keyName , java.lang.String keyType ) { return new org.ovirt.engine.core.config.entity.ConfigKey ( keyType , "" , "" , keyName , "" , null , "" , getHelperByType ( keyType ) , false ) ; }
public void validateFails ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DeleteGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( stoppedVolumeId , geoRepSessionId ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected void cancel ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . unsubscribe ( ) ; setWindow ( null ) ; setConfirmWindow ( null ) ; }
public void store ( org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback ) { return ; }
protected void findUsers ( java.lang.String searchString , org.ovirt.engine.ui.frontend.AsyncQuery query ) { org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllDbUsers , getParameters ( ) , query ) ; }
public void setEntity ( java.lang.Object value ) { super . setEntity ( value ) ; java.lang.Boolean enableManualMac = ( ( java.lang.Boolean ) ( value ) ) ; getMAC ( ) . setIsChangable ( enableManualMac ) ; }
private java.util.ArrayList < java.lang.String > splitPreserveAllTokens ( java.lang.String str ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( str ) ) { return null ; } return new java.util.ArrayList < java.lang.String > ( java.util.Arrays.asList ( org.apache.commons.lang.StringUtils.splitPreserveAllTokens ( str , org.ovirt.engine.core.dao.SEPARATOR ) ) ) ; }
public void testStorageDomainForMemoryIsNotValidWhenItHasNoSpaceForClonedDisks ( ) { org.mockito.Mockito.when ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.junit.Assert.assertFalse ( filter.getPredicate ( memoryDisks ) . test ( storageDomain ) ) ; }
public void processHardwareCapabilities ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . processOnCpuFlagsChange ( vds.getId ( ) ) ; }
public void update ( int index , org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData model , java.lang.Boolean value ) { ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( model ) ) . getClone ( ) . setEntity ( value ) ; table.asEditor ( ) . edit ( importModel ) ; }
public static boolean isMixedStorageDomainsSupported ( org.ovirt.engine.core.compat.Version version ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MixedDomainTypesInDataCenter , version.toString ( ) ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.NetworkStatus getStatus ( ) { return org.ovirt.engine.core.common.businessentities.NetworkStatus.forValue ( cluster.getstatus ( ) ) ; }
java.lang.String diskNote ( java.lang.String diskAlias , java.lang.String formattedNote ) ;
public void testEmptyKeyVal ( ) { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map ( org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtilsTest.EMPTY_KEY_VAL ) ; org.junit.Assert.assertEquals ( map.size ( ) , 2 ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getDbFacade ( ) . getVdsDao ( ) . getHostsForStorageOperation ( org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.GetHostsForStorageOperationQuery.getParameters ( ) . isLocalFsOnly ( ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { doInit ( ) ; } } , externalVms ) ; }
private void validateClientAcceptHeader ( org.ovirt.engine.core.sso.utils.SsoSession ssoSession , javax.servlet.http.HttpServletRequest request ) { if ( ! ( org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList ( ssoSession.getScope ( ) ) . contains ( SsoConstants.OPENID_SCOPE ) ) ) { org.ovirt.engine.core.sso.utils.SsoUtils.validateClientAcceptHeader ( request ) ; } }
public java.lang.Void call ( ) throws java.lang.Exception { _parser.cliEnvironmentSet ( OpenStackEnv.NEUTRON_OPENVSWITCH_ENABLE , true ) ; return null ; }
public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; }
protected void initBackendResource ( org.ovirt.engine.api.restapi.resource.BackendResource resource ) { resource.setBackend ( backend ) ; resource.setMessageBundle ( messageBundle ) ; resource.setHttpHeaders ( httpHeaders ) ; }
private java.lang.String getDomainDN ( javax.naming.directory.DirContext ctx ) throws javax.naming.NamingException { org.ovirt.engine.core.ldap.RootDSEData rootDSEData = new org.ovirt.engine.core.ldap.RootDSEData ( ctx ) ; return rootDSEData.getDomainDN ( ) ; }
public org.ovirt.engine.ui.uicommonweb.models.Model setIsChangeable ( boolean value ) { if ( ( isChangable ) != value ) { isChangable = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "IsChangable" ) ) ; if ( isChangable ) { setChangeProhibitionReason ( null ) ; } } return this ; }
public static org.ovirt.engine.core.common.businessentities.network.VmInterfaceType getDefaultNicType ( org.ovirt.engine.core.common.businessentities.VmOsType osType ) { return org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.pv ; }
public boolean checkDestDomains ( ) { return ( super . checkDestDomains ( ) ) && ( validateSpaceRequirements ( ) ) ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.logAndFailTaskOfCommandWithEmptyVdsmId ( task , "Engine was restarted before all tasks of the command could be submitted to vdsm." ) ; return null ; }
public java.lang.String getData ( java.lang.String format ) { com.google.gwt.dom.client.DataTransfer dt = getDataTransfer ( ) ; return getDataTransfer ( ) . getData ( format ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 262144 ; }
public org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getVmPropertiesUtils ( ) { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance ( ) ; }
public java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getTaskIdList ( ) { return org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.dummyTaskIdList ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( object ) ) . getName ( ) ; }
public org.ovirt.engine.core.common.vdscommands.Guid getMasterDomainId ( ) { return privateMasterDomainId ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DisplayType > getDisplayTypes ( int osId , org.ovirt.engine.core.compat.Version version ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DisplayType > ( parseDisplayProtocols ( osId , version ) . keySet ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.DiskImage object ) { if ( object.isBoot ( ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.bootableDisk ( ) ) ; } return null ; }
public org.ovirt.engine.api.v3.types.V3VM update ( org.ovirt.engine.api.v3.types.V3VM vm ) { return org.ovirt.engine.api.v3.helpers.V3VmHelper.addDisksLink ( adaptUpdate ( getDelegate ( ) :: update , vm ) ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object ) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join ( object.getDnsServers ( ) , ", " ) ; }
public java.lang.Object call ( ) throws java.lang.Exception { _aborted = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( BaseEnv.ABORTED ) ) ) ; return null ; }
private void writeJaxbClass ( org.ovirt.api.metamodel.tool.XmlWriter writer , java.lang.String value ) { writeJaxbCustomization ( writer , "class" , "name" , value ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( getTemplate ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.Cdrom cdrom = resource.get ( ) ; verifyModel ( cdrom ) ; verifyLinks ( cdrom ) ; }
public java.lang.Void runInTransaction ( ) { hostDeviceDao.removeAllInBatch ( removedDevices ) ; hostDeviceDao.saveAllInBatch ( newDevices ) ; hostDeviceDao.updateAllInBatch ( changedDevices ) ; handleHostNicVfsConfigUpdate ( newDevices , changedDevices , removedDevices ) ; vmDeviceDao.removeAllInBatch ( removedVmDevices ) ; return null ; }
protected org.ovirt.engine.core.common.businessentities.Provider getHostProvider ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getProviderDao ( ) . get ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getProviderId ( ) ) ; }
protected org.ovirt.engine.api.model.HostNIC map ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > ifaces ) { return map ( iface , null , ifaces ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { return java.util.Collections.singletonMap ( getParameters ( ) . getContainerId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.REMOTE_VM , org.ovirt.engine.core.bll.ImportVmCommand.getVmIsBeingImportedMessage ( ) ) ) ; }
protected void ExecuteVdsBrokerCommand ( ) { mVmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.PauseVDSCommand.getBroker ( ) . pause ( mVmId.toString ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PauseVDSCommand.ProceedProxyReturnValue ( ) ; setReturnValue ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildVMDynamicData ( mVmReturn.mVm ) . getstatus ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; prepareMocks ( ) ; setUpStorageServerConnectionLunMapDao ( ) ; setUpStorageServerConnectionDao ( ) ; }
public void setup ( ) { helper = org.mockito.Mockito.spy ( org.ovirt.engine.core.vdsbroker.storage.StorageConnectionHelper.getInstance ( ) ) ; org.mockito.Mockito.doReturn ( connExtDaoMock ) . when ( helper ) . getConnectionExtensionDao ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; vmID = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; setUpDaoMocks ( ) ; }
protected boolean handleDestStorageDomain ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { ensureDomainMap ( disksList , org.ovirt.engine.core.bll.ExportVmCommand.getStorageDomainId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > dummiesDisksList = createDiskDummiesForSpaceValidations ( disksList ) ; dummiesDisksList.addAll ( getMemoryVolumes ( ) ) ; return validateSpaceRequirements ( dummiesDisksList ) ; }
public static void GetConfigFromCache ( org.ovirt.engine.core.common.queries.ConfigurationValues configValue , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configValue ) , aQuery ) ; }
private void closeChannel ( ) { try { if ( ( this . channel ) != null ) { this . channel.close ( ) ; } } catch ( java.io.IOException e ) { } finally { this . channel = null ; } }
protected void updateCurrentCd ( java.lang.String cdPath ) { cdPath = ( org.apache.commons.lang.StringUtils.isEmpty ( cdPath ) ) ? null : cdPath ; vmHandler.updateCurrentCd ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) , cdPath ) ; }
protected void buildVmSoundDevices ( ) { if ( ( vm.getVmType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmType.Desktop ) ) { createInfo.add ( VdsProperties.soundDevice , getSoundDevice ( vm.getStaticData ( ) , vm.getVdsGroupCompatibilityVersion ( ) ) ) ; } }
public void testGetAllByStoragePoolAndConnectionWithInvalidConnection ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllByStoragePoolAndConnection ( FixturesTool.STORAGE_POOL_NFS , org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
public static boolean interfaceBasedOn ( java.lang.String proposedIface , java.lang.String iface ) { return ( ( iface != null ) && ( proposedIface != null ) ) && ( iface.equals ( org.ovirt.engine.core.utils.NetworkUtils.stripVlan ( proposedIface ) ) ) ; }
public void hostNameNotUsed ( ) { org.mockito.Mockito.when ( hostDao.getAllForHostname ( org.mockito.ArgumentMatchers.anyString ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.junit.Assert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void executeVdsBrokerCommand ( ) { if ( org.ovirt.engine.core.common.FeatureSupported.graphicsDeviceEnabled ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds ( ) . getClusterCompatibilityVersion ( ) ) ) { setTicketUsingUpdateDevice ( ) ; } else { setTicketLegacy ( ) ; } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.proceedProxyReturnValue ( ) ; }
protected T getOldQos ( ) { if ( ( oldQos ) == null ) { oldQos = getQosDao ( ) . get ( qos.getId ( ) ) ; } return oldQos ; }
public void saveInterfaceForVds ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface stats ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createInterfaceParametersMapper ( stats ) ; getCallsHandler ( ) . executeModification ( "Insertvds_interface" , parameterSource ) ; }
public void updateFields ( ) { getModel ( ) . startProgress ( null ) ; doUpdateManagedFieldsFrom ( getSource ( ) ) ; }
public void networkNotInCluster ( ) throws java.lang.Exception { vnicProfileValidationTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER ) , true , false , false , false ) ; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool ( org.ovirt.engine.core.bll.network.macpool.MacPool macPool ) { return new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges ( macPool ) , macPool.isAllowDuplicateMacAddresses ( ) ) ; }
private org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > createCommand ( org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters params ) { org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > ( params ) ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( command ) . getVdsDao ( ) ; return command ; }
protected org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) ; }
public static org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( org.ovirt.engine.core.compat.Guid storagePoolId , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getAllForStoragePool ( storagePoolId ) ; return org.ovirt.engine.core.bll.memory.MemoryStorageHandler.findStorageDomainForMemory ( domainsInPool , disksList ) ; }
static org.ovirt.engine.ui.uicompat.UIConstants getConstants ( ) { if ( ( org.ovirt.engine.ui.frontend.Frontend.constants ) == null ) { org.ovirt.engine.ui.frontend.Frontend.constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ; } return org.ovirt.engine.ui.frontend.Frontend.constants ; }
public void setTitle ( java.lang.String title ) { ( ( org.ovirt.engine.ui.common.widget.table.column.StyledImageResourceCell ) ( org.ovirt.engine.ui.common.widget.table.column.ImageResourceColumn.getCell ( ) ) ) . setTitle ( title ) ; }
public org.ovirt.engine.api.v3.servers.V3VmGraphicsConsoleServer getConsoleResource ( @ javax.ws.rs.PathParam ( value = "id" ) java.lang.String id ) { return new org.ovirt.engine.api.v3.servers.V3VmGraphicsConsoleServer ( ( ( org.ovirt.engine.api.resource.VmGraphicsConsoleResource ) ( getDelegate ( ) . getConsoleResource ( id ) ) ) ) ; }
public boolean isInSync ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails details = getNetworkImplementationDetails ( ) ; return details != null ? details.isInSync ( ) : true ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Boolean > event ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { networkClusterModel.setRequired ( ( ! ( event.getValue ( ) ) ) ) ; refreshClustersTable ( ) ; } }
public static java.util.List < org.ovirt.engine.core.common.businessentities.storage_pool > getStoragePools ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent ) { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( parent.getEntity ( java.util.List.class , VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , "Datacenters" , true ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getEntity ( int index , java.lang.String networkName ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class ) , control.createMock ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics.class ) , index , networkName ) ; }
public void setUserId ( final org.ovirt.engine.core.compat.Guid value ) { mUserId = value.getValue ( ) ; }
public org.ovirt.engine.core.compat.Guid getVmId ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return getParameters ( ) . getVm ( ) . getId ( ) ; } else { return super . getVmId ( ) ; } }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.bll.storage.pool.RefreshStoragePoolAndDisconnectAsyncOperation ( getVdss ( ) , getStorageDomain ( ) , getStoragePool ( ) ) ) ; }
public void getUsbPolicyNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getCompatibilityVersion ( ) ) , UsbPolicy.DISABLED ) ; }
public boolean getTransparentHugepages ( ) { return this . transparentHugepages ; }
void buildVmNetworkInterfaces ( java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > passthroughVnicToVfMap ) ;
public boolean eval ( org.ovirt.engine.core.common.businessentities.network n ) { return n.getname ( ) . equals ( bond.getName ( ) ) ; }
public static java.util.List < java.lang.String > runAndAssertCanDoActionFailure ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.errors.VdcBllMessages message ) { return org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "" , command , message ) ; }
public static org.ovirt.engine.core.common.businessentities.network.NetworkAttachment newNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanDevice , java.util.Set < java.lang.String > networksToSync ) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment ( network , baseNic , vlanDevice , null , networksToSync , null ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; localModel.stopProgress ( ) ; setConfirmWindow ( null ) ; }
public java.lang.String getAdGroupName ( ) { if ( ( ( mGroupName ) == null ) && ( ( getAdGroup ( ) ) != null ) ) { mGroupName = getAdGroup ( ) . getname ( ) ; } return mGroupName ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { return org.ovirt.engine.core.bll.VdsGroupOperationCommandBase.getParameters ( ) . getVdsGroup ( ) ; }
public boolean getpm_enabled ( ) { return mVdsStatic.isPmEnabled ( ) ; }
protected void setModelProvider ( com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel > importModelProvider ) { this . importModelProvider = importModelProvider ; }
public void removeTabWidget ( com.google.gwt.user.client.ui.IsWidget tabWidget ) { mainTabContainer.getElement ( ) . removeChild ( tabWidget.asWidget ( ) . getElement ( ) ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( ) ; super . syncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.GetEventSubscribersBySubscriberIdParameters ( getEntity ( ) . getuser_id ( ) ) ) ; }
public void testBadGuid ( ) throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendNetworkResource ( "foo" ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.storage_pool storagePool , boolean isNewSpm ) { if ( isNewSpm ) { org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . StopStoragePoolTasks ( storagePool ) ; } else { org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . AddStoragePoolExistingTasks ( storagePool ) ; } }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { endAction ( getCommand ( cmdId ) , childCmdIds , true ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain createDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setStorageName ( "mydomain" ) ; return domain ; }
public java.lang.Boolean isRequired ( ) { return cluster.isRequired ( ) ; }
public void setupCommand ( ) { initSpyCommand ( ) ; mockBackend ( ) ; mockDaos ( ) ; mockVm ( ) ; mockIsValidVdsCommand ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkCluster createManagementNetworkCluster ( ) { return new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( org.ovirt.engine.core.bll.AddClusterCommand.getClusterId ( ) , getManagementNetwork ( ) . getId ( ) , org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL , true , true , true , true , false ) ; }
public org.ovirt.engine.api.model.VmPools list ( ) { if ( isFiltered ( ) ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllVmPoolsAttachedToUser , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ) ; } else { return mapCollection ( getBackendCollection ( SearchType.VmPools ) ) ; } }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster createNetworkClusterWithDefaultValues ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.common.businessentities.network.Network net ) { return new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( clusterId , net.getId ( ) , org.ovirt.engine.core.common.businessentities.network.NetworkStatus.NON_OPERATIONAL , false , true , false , false , false ) ; }
public org.ovirt.engine.core.bll.SPMAsyncTask CreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters taskParameters ) { return org.ovirt.engine.core.bll.AsyncTaskFactory.Construct ( taskType , taskParameters ) ; }
protected void endWithFailure ( ) { org.ovirt.engine.core.bll.ExportVmCommand.endActionOnAllImageGroups ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.unLockVm ( vm ) ; org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( vm ) ; org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded ( true ) ; }
public void tearDown ( ) { verifyAll ( ) ; org.ovirt.engine.api.restapi.invocation.CurrentManager.remove ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllWithQuery ( java.lang.String query ) { return new org.springframework.jdbc.core.simple.SimpleJdbcTemplate ( jdbcTemplate ) . query ( query , org.ovirt.engine.core.dao.DiskDaoDbFacadeImpl.DiskRowMapper.instance ) ; }
public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; initializeCommand ( storageId ) ; mockVmWithDisk ( storageId ) ; mockVmNetworks ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; runAndAssertCanDoActionSuccess ( ) ; }
private org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase getAddParams ( org.ovirt.engine.core.common.businessentities.StorageServerConnections entity , org.ovirt.engine.core.compat.Guid hostId ) { org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase params = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( entity , hostId ) ; params.setVdsId ( hostId ) ; return params ; }
private java.lang.String getPostUpdateOvfStoreDescription ( java.util.Date updateDate ) { if ( ( postUpdateDescription ) == null ) { postUpdateDescription = generateOvfStoreDescription ( updateDate , true ) ; } return postUpdateDescription ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qoss = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > ) ( returnValue ) ) ; qosById = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( qoss ) ; queryInterfaces ( ) ; }
protected org.ovirt.engine.core.bll.storage.StoragePoolValidator createStoragePoolValidator ( ) { return new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool ( ) , org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public void onSuccess ( java.lang.Object listModel , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; updateActionAvailability ( ) ; }
public void setEntity ( org.ovirt.engine.core.common.businessentities.storage_domains value ) { super . setEntity ( value ) ; }
public void testGetVolumesSupportedAsStorageDomain ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > vols = dao.getVolumesSupportedAsStorageDomain ( ) ; org.junit.Assert.assertEquals ( 1 , vols.size ( ) ) ; }
protected boolean validateDestStorage ( java.util.ArrayList < java.lang.String > canDoActionMessages ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain ( ) ) ; return ( validator.isDomainExistAndActive ( canDoActionMessages ) ) && ( validator.domainIsValidDestination ( canDoActionMessages ) ) ; }
private void initListBoxEditors ( ) { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.RaidType > ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.RaidType > ( ) ) ; }
protected void initWidget ( T widget ) { this . widget = widget ; widget.setModal ( true ) ; widget.setGlassEnabled ( true ) ; widget.addStyleName ( resources.dialogBoxStyle ( ) . getName ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpRestoreExpectations ( ) { return setUpActionExpectations ( VdcActionType.RestoreAllSnapshots , org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters.class , new java.lang.String [ ] { "VmId" , "SnapshotAction" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendSnapshotResourceTest.VM_ID , org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT } , true , true , null , false ) ; }
protected void setSuperItems ( java.lang.Iterable value ) { super . setItems ( value ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > list = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( getItems ( ) ) ) ; }
void mockSessionDataContainer ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery query ) { org.mockito.Mockito.doReturn ( sessionDataContainer ) . when ( query ) . getSessionDataContainer ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.SSO_TOKEN ) . when ( sessionDataContainer ) . getSsoAccessToken ( org.mockito.Matchers.anyString ( ) ) ; }
private org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeOptionsCommand createTestCommand ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeOptionsCommand ( new org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters ( volumeId , "" , false ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > getDevicesCollection ( org.ovirt.engine.core.compat.Guid vmId ) { return getBackendCollection ( org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface.class , VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( vmId ) ) ) ; }
private boolean allowedNetworkLabelManipulation ( ) { boolean labelNotChanged = ! ( labelChanged ( ) ) ; boolean newLabelAssigned = ! ( labelAdded ( ) ) ; return ( ! ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) . isExternal ( ) ) ) && ( labelNotChanged || newLabelAssigned ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . syncSearch ( ) ; super . syncSearch ( VdcQueryType.GetEventSubscribersBySubscriberIdGrouped , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getuser_id ( ) ) ) ; }
public org.ovirt.engine.api.resource.PermitsResource getPermitsResource ( ) ;
private org.ovirt.engine.core.bll.ValidationResult validateNetworkExclusiveOnNics ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( attachmentsToConfigure , networkBusinessEntityMap ) . validateNetworkExclusiveOnNics ( ) ; }
public static boolean isGlusterSwiftSupported ( org.ovirt.engine.core.compat.Version version ) { return ( Version.v3_3.compareTo ( version ) ) <= 0 ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; prepareMocks ( ) ; createInputLUNs ( ) ; }
void vdsNotResponding ( org.ovirt.engine.core.common.businessentities.VDS vds , boolean executeSshSoftFencing , long lastUpdate ) ;
public org.ovirt.engine.core.common.utils.SubnetUtils getsSubnetUtilsInstance ( ) { return org.ovirt.engine.core.common.utils.SubnetUtils.getInstance ( ) ; }
public java.lang.String GetCustomValue ( final java.lang.String name ) { if ( customValues.containsKey ( name ) ) { return customValues.get ( name ) ; } else { return "" ; } }
private void mockMaxPciSlots ( ) { org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddVmFromTemplateCommandTest.MAX_PCI_SLOTS ) . when ( osRepository ) . getMaxPciDevices ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ; }
protected void beforeTask ( ) { org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( getEnclosingCommand ( ) . getParameters ( ) . getDestinationImageId ( ) , ImageStatus.LOCKED ) ; }
public static java.util.Collection < java.lang.Object [ ] > namesParams ( ) { return java.util.Arrays.asList ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { "a.a.a.a" , false , false } , new java.lang.Object [ ] { "//32" , false , false } , new java.lang.Object [ ] { "33" , false , false } , new java.lang.Object [ ] { "253.0.0.32" , true , false } , new java.lang.Object [ ] { "255.255.255.0" , true , true } , new java.lang.Object [ ] { "15" , true , true } } ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
protected abstract void initSelectedNetwork ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > networks ) ;
public java.lang.Object call ( ) throws java.lang.Exception { _resultError = ( ( java.lang.Boolean ) ( _parser.cliEnvironmentGet ( BaseEnv.ERROR ) ) ) ; return null ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior ) ( target ) ) ; behavior.PostInitTemplate ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) ; }
public void parseLunFromXmlRpcReturnsUnknownForNoField ( ) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xlun = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct ( ) ; org.ovirt.engine.core.common.businessentities.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.ParseLunFromXmlRpc ( xlun ) ; org.junit.Assert.assertEquals ( StorageType.UNKNOWN , lun.getLunType ( ) ) ; }
public java.util.Map < java.lang.String , java.lang.Object > getDeviceList ( int storageType , java.util.Map options ) ;
protected void onReveal ( ) { super . onReveal ( ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetSearchPanel , searchPanel ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetTabBar , tabBar ) ; configureFeedbackUrl ( ) ; }
private void handleVdsMaintenanceTimeout ( ) { getVdsEventListener ( ) . handleVdsMaintenanceTimeout ( _vds ) ; _vdsManager.calculateNextMaintenanceAttemptTime ( ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface i ) { return org.apache.commons.lang.StringUtils.equals ( i.getNetworkName ( ) , getParameters ( ) . getNetwork ( ) . getname ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . setTestResultImage ( ( ( java.lang.String ) ( model.getTestResult ( ) . getEntity ( ) ) ) ) ; }
protected void setId ( org.ovirt.engine.core.compat.Guid id ) { Id = id ; }
private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap getStoragePoolIsoMap ( ) { return getStoragePoolIsoMapDAO ( ) . get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolId ( ) ) ) ; }
protected boolean canDoAction ( ) { addCanDoActionMessage ( VdcBllMessages.VAR__ACTION__REMOVE ) ; addCanDoActionMessage ( VdcBllMessages.VAR__TYPE__NETWORK ) ; return org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.CommonNetworkValidation ( org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters ( ) . getNetwork ( ) , org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.network.Bond createBond ( java.lang.String bondName ) { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( ) ; bond.setName ( bondName ) ; bond.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return bond ; }
public void canDoActionSucceeds ( ) { cmd = createTestCommand ( volumeId2 ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.DiskInterface forValue ( int value ) { return org.ovirt.engine.core.common.businessentities.DiskInterface.mappings.get ( value ) ; }
private void setupForLun ( ) { lunDisk = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createLunDisk ( ) ; lunValidator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( lunDisk ) ) ; org.mockito.Mockito.doReturn ( vmDao ) . when ( lunValidator ) . getVmDao ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isDirectLunDiskAvaialable = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ; externalDiskPanel.setVisible ( isDirectLunDiskAvaialable ) ; }
protected abstract java.lang.Object GetValue ( org.ovirt.engine.core.common.config.DataType type , java.lang.String name , java.lang.String defaultValue ) ;
public org.ovirt.engine.core.compat.Guid eval ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage ) { return diskImage.getId ( ) . getValue ( ) ; }
static org.ovirt.engine.api.model.Nic getModel ( int index ) { org.ovirt.engine.api.model.Nic model = new org.ovirt.engine.api.model.Nic ( ) ; model.setName ( NAMES [ index ] ) ; model.setInterface ( NicInterface.RTL8139_VIRTIO.value ( ) ) ; return model ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { populateDomains ( ( ( java.util.List < java.lang.String > ) ( result ) ) ) ; }
protected javax.ws.rs.core.Response actionFailure ( org.ovirt.engine.api.model.Action action , javax.ws.rs.WebApplicationException wae ) { action.setStatus ( org.ovirt.engine.api.common.util.StatusUtils.create ( CreationStatus.FAILED ) ) ; return javax.ws.rs.core.Response.fromResponse ( wae.getResponse ( ) ) . entity ( action ) . build ( ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.StoragePool source ) { return ( source.getstatus ( ) ) != ( status ) ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic.getLabels ( ) ) ; setQosOverridden ( sourceNic.isQosOverridden ( ) ) ; setCustomProperties ( sourceNic.getCustomProperties ( ) ) ; }
private void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } setWindow ( new org.ovirt.engine.ui.uicommonweb.models.providers.EditProviderModel ( this , ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( getSelectedItem ( ) ) ) ) ) ; }
protected void addCanDoActionMessage ( org.ovirt.engine.core.common.errors.VdcBllMessages message ) { getReturnValue ( ) . getCanDoActionMessages ( ) . add ( message.name ( ) ) ; }
public void testGetDataAndSetDataWithEmptySession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( "" ) ; org.junit.Assert.assertFalse ( "Set should fail with an empty session" , container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
protected void executeCommand ( ) { getMacPoolDao ( ) . remove ( getParameters ( ) . getMacPoolId ( ) ) ; org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance ( ) . removePool ( getParameters ( ) . getMacPoolId ( ) ) ; getReturnValue ( ) . setSucceeded ( true ) ; }
void processOnVmPoweringUp ( org.ovirt.engine.core.compat.Guid vds_id , org.ovirt.engine.core.compat.Guid vmid , java.lang.String display_ip , int display_port ) ;
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getSelectableModels ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > items = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > cast ( getModel ( ) . getStorageModels ( ) ) ; return getSelectableModels ( items ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator ( ) ; return validate ( validator.isIscsiBondExist ( getIscsiBond ( ) ) ) ; }
protected void performLogout ( ) { getLoginModel ( ) . resetAfterLogout ( ) ; user.onUserLogout ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.clearCache ( ) ; org.ovirt.engine.ui.common.uicommon.model.CleanupModelEvent.fire ( eventBus ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.tags > GetTagsAttachedToObject ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getTagDAO ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitectureFromItem ( java.lang.Object item ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( item ) ) ; return template.getClusterArch ( ) ; }
private org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateWithPlugInfo getVMTemplatesWithPlugInfo ( org.ovirt.engine.core.compat.Guid imageId ) { org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateWithPlugInfo plugInfo = getCallsHandler ( ) . executeRead ( "GetVmTemplatesByImageId" , org.ovirt.engine.core.dao.VmTemplateDaoImpl.VMTemplateWithPlugInfoRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "image_guid" , imageId ) ) ; return plugInfo ; }
public void validateFailsNullParameterForIsoFile ( ) { mockVdsWithOsVersion ( org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION ) ; org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters ( ) ; param.setoVirtIsoFile ( null ) ; org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = createCommand ( param ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE ) ; }
public void stopRefresh ( ) { getTimer ( ) . stop ( ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( java.lang.String networkName , boolean vmNetwork , int mtu , java.lang.Integer vlanId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setVmNetwork ( vmNetwork ) ; network.setMtu ( mtu ) ; network.setVlanId ( vlanId ) ; return network ; }
public org.ovirt.engine.core.common.businessentities.VDSType getVdsType ( ) { return this . vdsType ; }
public int compare ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain2 ) { return storageDomain.getAvailableDiskSize ( ) . compareTo ( storageDomain2.getAvailableDiskSize ( ) ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( getGlusterHook ( ) ) != null ) { setVdsGroupId ( getGlusterHook ( ) . getClusterId ( ) ) ; } return super . getVdsGroup ( ) ; }
public void overrideEngineManagedAttributes ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface sourceNic ) { setLabels ( sourceNic.getLabels ( ) ) ; setCustomProperties ( sourceNic.getCustomProperties ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface.getId ( ) , iface.getName ( ) , false , bondName , null , null , true ) ; }
public void remove ( org.ovirt.engine.core.compat.NGuid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_pool_id" , id ) ; getCallsHandler ( ) . executeModification ( "DeleteVm_pools" , parameterSource ) ; }
public void setStorageDomainType ( org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType ) { getStorageStaticData ( ) . setstorage_domain_type ( storageDomainType ) ; }
protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters ( ) { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; parameters.setVmInit ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmInit ( ) ) ; return parameters ; }
public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC device ) { validateEnums ( org.ovirt.engine.api.model.NIC.class , device ) ; if ( ( device.isSetPortMirroring ( ) ) || ( device.isSetNetwork ( ) ) ) { validatePortMirroring ( device ) ; } return super . update ( device ) ; }
org.ovirt.engine.core.common.businessentities.AuditLog createAuditLog ( org.ovirt.engine.core.common.AuditLogType logType , org.ovirt.engine.core.common.AuditLogSeverity severity , java.lang.String message ) ;
public org.ovirt.engine.core.common.action.VdcActionParametersBase doWith ( final org.ovirt.engine.core.common.businessentities.StorageDomain arg ) { final org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( arg.getId ( ) , new org.ovirt.engine.core.compat.Guid ( arg.getStoragePoolId ( ) . getUuid ( ) ) ) ; params.setRunSilent ( true ) ; return params ; }
public static java.lang.String toPlural ( java.lang.String candidate ) { if ( ! ( candidate.endsWith ( "s" ) ) ) { return candidate + "s" ; } return candidate ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setProviders ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( returnValue ) ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.VmTemplate template , java.lang.String value ) { transitionHandler.handlePlaceTransition ( ) ; }
public static java.lang.String getVmwareUrl ( java.lang.String username , java.lang.String vcenter , java.lang.String dataCenter , java.lang.String esx , boolean verify ) { if ( username != null ) { username = username.replace ( "@" , "%40" ) ; } return ( ( ( ( ( ( "vpx://" + ( org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty ( username ) ? "" : username + "@" ) ) + vcenter ) + "/" ) + dataCenter ) + "/" ) + esx ) + ( verify ? "" : "?no_verify=1" ) ; }
private void setDisksToBeAttached ( org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration ) { vmDisksToAttach = vmFromConfiguration.getDiskMap ( ) . values ( ) ; clearVmDisks ( vmFromConfiguration ) ; org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters ( ) . setCopyCollapse ( true ) ; }
public org.ovirt.engine.api.model.StorageConnectionExtension update ( org.ovirt.engine.api.model.StorageConnectionExtension incoming ) { org.ovirt.engine.api.restapi.resource.QueryIdResolver resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageServerConnectionExtensionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; return performUpdate ( incoming , resolver , VdcActionType.UpdateStorageServerConnectionExtension , new org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionResource.UpdateParametersProvider ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { connect ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }
private void createTables ( org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel model ) { createEntityTable ( model ) ; createInfoPanel ( ) ; entityTable.asEditor ( ) . edit ( model.getEntities ( ) ) ; }
protected void removeCustomizationCondition ( java.lang.String cond ) { _customizationConditions.remove ( cond ) ; }
public org.ovirt.engine.api.model.VmPool get ( ) { return performGet ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.GetVmPoolByIdParameters ( guid ) ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.StoragePool storagePool , java.lang.String value ) { transitionHandler.handlePlaceTransition ( ) ; }
public org.ovirt.engine.core.common.businessentities.VMStatus getRawValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getstatus ( ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage image ) { org.ovirt.engine.core.bll.ImagesHandler.addDiskImage ( image , image.getactive ( ) , new org.ovirt.engine.core.common.businessentities.image_storage_domain_map ( image.getImageId ( ) , image.getstorage_ids ( ) . get ( 0 ) ) ) ; }
org.ovirt.engine.ui.webadmin.widget.host.VLanPanel createVLanPanel ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel ) { org.ovirt.engine.ui.webadmin.widget.host.VLanPanel panel = new org.ovirt.engine.ui.webadmin.widget.host.VLanPanel ( ) ; panel.setWidth ( "100%" ) ; panel.setHeight ( "100%" ) ; panel.addVLans ( lineModel ) ; addClickHandlerToPanel ( panel , lineModel ) ; return panel ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.storage.Disk object ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( object ) ) ; return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( org.ovirt.engine.ui.uicompat.external.StringUtils.join ( diskImage.getStoragesNames ( ) , ", " ) ) ; }
public void canDoActionDiskIsOvfStore ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( ) ; command.getImage ( ) . setOvfStore ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED ) ; }
private void initHandlers ( ) { mTagsHandler = org.ovirt.engine.core.bll.HandlersFactory.createTagsHandler ( ) ; org.ovirt.engine.core.searchbackend.BaseConditionFieldAutoCompleter.tagsHandler = mTagsHandler ; org.ovirt.engine.core.bll.VmHandler.init ( ) ; org.ovirt.engine.core.bll.VdsHandler.Init ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.Init ( ) ; org.ovirt.engine.core.bll.Backend.log.info ( "Completed initializing handlers" ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getAllForAdElement ( org.ovirt.engine.core.compat.Guid id ) { return getAllForAdElement ( id , null , false ) ; }
public void reportCompleted ( ) { try { super . reportCompleted ( ) ; } finally { if ( ( getDestinationVdsId ( ) ) != null ) { decreasePendingVms ( getDestinationVdsId ( ) ) ; } org.ovirt.engine.core.bll.MigrateVmCommand.freeLock ( ) ; } }
public org.ovirt.engine.core.common.businessentities.VolumeType getSelectedVolumeType ( ) { if ( ( ( java.lang.Boolean ) ( collapseSnapshots.getEntity ( ) ) ) && ( ( selectedVolumeType ) != null ) ) { return selectedVolumeType ; } return getVolumeType ( ) ; }
private void refreshEntityTable ( ) { entityTable.asEditor ( ) . edit ( entityTable.asEditor ( ) . flush ( ) ) ; entityTable.redraw ( ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getHookEntity ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = new org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity ( ) ; hook.setClusterId ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.CLUSTER_ID ) ; hook.setId ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.HOOK_ID ) ; hook.setServerHooks ( getGlusterServerHooks ( ) ) ; return hook ; }
public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getName ( ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader , header ) ; pluginManager.enablePluginInvocation ( ) ; alertManager.setCanShowAlerts ( true ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmDefaultPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; updateSpmPriorityValues ( ) ; updateSpmPriority ( ) ; }
public boolean isNetworkInSync ( ) { return ( ( ( isNetworkMtuInSync ( ) ) && ( isNetworkVlanIdInSync ( ) ) ) && ( isNetworkBridgedFlagInSync ( ) ) ) && ( ( qosParametersEqual ( ) ) || ( iface.isQosOverridden ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VM initializeMock ( final int domainSizeGB ) { mockVmTemplateDaoReturnVmTemplate ( ) ; mockDiskImageDaoGetSnapshotById ( ) ; mockStorageDomainDaoGetForStoragePool ( domainSizeGB ) ; mockStorageDomainDaoGet ( domainSizeGB ) ; mockConfig ( ) ; return org.ovirt.engine.core.bll.AddVmCommandTest.createVm ( ) ; }
protected void setupForStorageTests ( ) { org.mockito.Mockito.doReturn ( multipleSdValidator ) . when ( command ) . getStorageDomainsValidator ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.anySet ( ) ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object returnValue ) { hostModel.setPmProxyPreferences ( ( ( java.lang.String ) ( returnValue ) ) ) ; }
protected boolean isWindows ( ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( osId ) ; }
private void validateNetworkQos ( ) { validateQosOverriddenInterfaces ( ) ; validateQosNotPartiallyConfigured ( ) ; validateQosCommitment ( ) ; }
public void setAddress ( java.lang.String value ) { if ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( address , value ) ) ) { address = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Address" ) ) ; } }
private boolean isHostAvailable ( org.ovirt.engine.core.common.businessentities.VDS host ) { boolean isStatusUp = ( host.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ; return isStatusUp ; }
public void testUpdate ( ) { existingPool.setdescription ( "Farkle" ) ; existingPool.setStoragePoolFormatType ( StorageFormatType.V1 ) ; dao.update ( existingPool ) ; org.ovirt.engine.core.common.businessentities.storage_pool result = dao.get ( existingPool.getId ( ) ) ; assertGetResult ( result ) ; }
public org.ovirt.engine.api.resource.AssignedPermissionsResource getPermissionsResource ( ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendAssignedPermissionsResource ( guid , org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionsForObject , new org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters ( guid ) , org.ovirt.engine.api.model.VnicProfile.class , org.ovirt.engine.core.common.VdcObjectType.VnicProfile ) ) ; }
public void logAndFailTaskOfCommandWithEmptyVdsmId ( org.ovirt.engine.core.compat.Guid asyncTaskId , java.lang.String message ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = coco.getAsyncTaskFromDb ( asyncTaskId ) ; logAndFailTaskOfCommandWithEmptyVdsmId ( task , message ) ; }
public void setUserId ( final org.ovirt.engine.core.compat.NGuid value ) { mUserId = value.getValue ( ) ; }
private java.lang.String createShortMacAddress ( ) { return org.ovirt.engine.core.common.businessentities.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS.substring ( 0 , random.nextInt ( org.ovirt.engine.core.common.businessentities.VmNetworkInterfaceValidationTest.VALID_MAC_ADDRESS.length ( ) ) ) ; }
public void setOptionsMap ( java.util.HashMap < java.lang.String , java.lang.String > value ) { optionsMap = value ; options = org.ovirt.engine.core.common.businessentities.pm.FenceAgent.optionsMapToString ( value ) ; }
private boolean shouldTakeIpv4DataFromNic ( ) { if ( ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.DHCP ) == ( getIpv4BootProtocol ( ) ) ) { return true ; } return false ; }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidator ( ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class ) ; org.mockito.Mockito.when ( storageDomainValidator.isDomainExistAndActive ( ) ) . thenReturn ( ValidationResult.VALID ) ; org.mockito.Mockito.when ( storageDomainValidator.isDomainWithinThresholds ( ) ) . thenReturn ( ValidationResult.VALID ) ; return storageDomainValidator ; }
private void assertInvalidVolumeInfoCombination ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( setupVolumeFormatAndTypeTest ( volumeFormat , volumeType , storageType ) , EngineMessage.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED ) ; }
public java.lang.Boolean getIsPlugged ( ) { return ( isPlugged ) == null ? java.lang.Boolean.FALSE : isPlugged ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { return org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate ( object.getPolicyUnitType ( ) ) ; }
protected void mockGetStorageDomainList ( int availableDiskSizeFirstDomain , int availableDiskSizeSecondDomain ) { storageDomainsList = getStorageDomainList ( availableDiskSizeFirstDomain , availableDiskSizeSecondDomain ) ; mockDiskImageDao ( ) ; mockStorageDomainDao ( storageDomainsList ) ; }
public void onSuccess ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { if ( cluster != null ) { powerAction ( actionName , title , message , cluster.isOptionalReasonRequired ( ) ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; context.removeVDSGroupReturnValue = returnValue ; rollback5 ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getVmDisksFromDB ( ) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.VmHandler.filterImageDisksForVM ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) , false , false , true ) ; return org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm ( ) . getDiskList ( ) ; }
void storagePoolUpEvent ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool , boolean isNewSpm ) ;
private org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand createTestCommand2 ( org.ovirt.engine.core.compat.Guid volumeId ) { return new org.ovirt.engine.core.bll.gluster.ReplaceGlusterVolumeBrickCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters ( volumeId , org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskOperation.START , null , getBricks ( volumeId , "" , 1 ) . get ( 0 ) , false ) ) ; }
public java.lang.String getVmName ( ) { if ( ( ( mVmName ) == null ) && ( ( getVm ( ) ) != null ) ) { mVmName = getVm ( ) . getvm_name ( ) ; } return mVmName ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runInternalMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext ) { return runMultipleActionsImpl ( actionType , parameters , true , executionContext ) ; }
public void validate_vmNotExists_Test ( ) { org.mockito.Mockito.doReturn ( null ) . when ( vmStaticDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_INVALID_ENTITY_FOR_AFFINITY_GROUP ) ; }
public void testBeanValidations ( ) { initializeMock ( ) ; org.junit.Assert.assertTrue ( cmd.validateInputs ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( ( java.lang.Boolean ) ( getGlobalClusterQuota ( ) . getEntity ( ) ) ) == true ) { getSpecificClusterQuota ( ) . setEntity ( false ) ; } }
public void setEntity ( org.ovirt.engine.core.common.businessentities.network value ) { super . setEntity ( value ) ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; getAppListModel ( ) . setEntity ( getSelectedItem ( ) ) ; }
protected boolean getForce ( ) { return this . force ; }
protected boolean isVmWithSameNameExistStatic ( ) { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic ( org.ovirt.engine.core.bll.IsVmWithSameNameExistQuery.getParameters ( ) . getVmName ( ) ) ; }
public void validateFailsOnNull ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.PauseGlusterVolumeGeoRepSessionCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters ( ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
private void mapIsEmpty ( final org.ovirt.engine.core.common.queries.ValueObjectMap map ) { junit.framework.Assert.assertEquals ( 0 , map.getValuePairs ( ) . size ( ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.StorageDomain a ) { return ( ( a.getstatus ( ) ) == domainStatus ) && ( ! ( a.getId ( ) . equals ( getStorageDomain ( ) . getId ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress ( ) { return networkDataCenterIpConfigurationDefinition.getIpv4PrimaryAddress ( ) ; }
protected boolean runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return runConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
public void validate_vmNameExists_Test ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ) . when ( affinityGroupDao ) . getByName ( org.mockito.Matchers.anyString ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS ) ; }
public boolean isSingleSelectionOnly ( ) { return false ; }
public synchronized void removeStorageDomain ( org.ovirt.vdsmfake.domain.StorageDomain storageDomain ) { storageDomainMap.remove ( storageDomain.getId ( ) ) ; org.ovirt.vdsmfake.domain.VdsmManager.log.info ( "Removing storage domain: {}" , storageDomain.getId ( ) ) ; removeObject ( storageDomain ) ; }
protected void disableLoginScreen ( ) { getUserName ( ) . setIsChangeable ( false ) ; getPassword ( ) . setIsChangeable ( false ) ; getProfile ( ) . setIsChangeable ( false ) ; }
public org.ovirt.engine.core.compat.Guid getQuotaId ( ) { return getQuota ( ) . getId ( ) ; }
public void checkIPAdress ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.IPAddressPatternTest.IPAdress > > validate = validator.validate ( new org.ovirt.engine.core.common.utils.IPAddressPatternTest.IPAdress ( address ) ) ; org.junit.Assert.assertEquals ( validate.isEmpty ( ) , expectedResult ) ; }
public static org.ovirt.engine.core.common.queries.ValueObjectMap instantiate ( com.google.gwt.user.client.rpc.SerializationStreamReader streamReader ) throws com.google.gwt.user.client.rpc.SerializationException { org.ovirt.engine.core.common.queries.ValueObjectMap instance = new org.ovirt.engine.core.common.queries.ValueObjectMap ( ) ; return instance ; }
public void testDiskAttachedToAnyNonDownVM ( ) { org.junit.Assert.assertThat ( validator.isDiskPluggedToAnyNonDownVm ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void noCluster ( ) { simulateClusterDoesNotExist ( ) ; assertValidateFailure ( EngineMessage.VDS_CLUSTER_IS_NOT_VALID.toString ( ) ) ; }
public org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface createTestedInstance ( ) { return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface ( iface , network , networkQos , testedNetworkAttachment ) ; }
protected org.ovirt.engine.core.dal.dbbroker.DbFacade getDbFacade ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider getHostProvider ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getProviderDao ( ) . get ( org.ovirt.engine.core.bll.AddVdsCommand.getParameters ( ) . getProviderId ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageDomainDao ( ) ; existingDomain = dao.get ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ; }
protected org.ovirt.engine.core.common.businessentities.VDSGroup getVDSGroup ( ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup.class , VdcQueryType.GetVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.GetVdsGroupByVdsGroupIdParameters ( asGuid ( clusterId ) ) , clusterId ) ; }
private void writeBuffer ( java.nio.ByteBuffer buff ) throws java.io.IOException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ! ( isOpen ( ) ) ) { connect ( ) ; } write ( buff ) ; }
public void invalidLowMTU ( ) { java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer > > validate = validate ( new org.ovirt.engine.core.common.utils.MTUValidatorTest.MtuContainer ( 30 ) ) ; org.junit.Assert.assertTrue ( ( ( validate.size ( ) ) > 0 ) ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.bll.validator.HostNetworkQosValidator validator = getQosValidator ( getQos ( ) ) ; return ( ( super . canDoAction ( ) ) && ( validate ( validator.requiredValuesPresent ( ) ) ) ) && ( validate ( validator.valuesConsistent ( ) ) ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i ) { if ( ( i.getNetworkName ( ) ) != null ) { return i.getNetworkName ( ) . equals ( getParameters ( ) . getNetwork ( ) . getname ( ) ) ; } return false ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 , false , false , false ) ; control.replay ( ) ; verifyModel ( resource.get ( ) , 1 ) ; }
public void testMarkHostDevicesUsedByVmId ( ) { dao.markHostDevicesUsedByVmId ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID ) ; org.ovirt.engine.core.common.businessentities.HostDevice hostDevice = dao.getHostDeviceByHostIdAndDeviceName ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_VM_ID , hostDevice.getVmId ( ) ) ; }
public org.ovirt.vdsmfake.AppConfig.ArchitectureType getArchitectureType ( ) { return architectureType ; }
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > result = dao.getAllAttachableDisksByPoolId ( null , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , false ) ; org.ovirt.engine.core.dao.DiskDaoTest.assertFullGetAllAttachableDisksByPoolId ( result ) ; }
public void onSucceeded ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { getCommand ( cmdId ) . endAction ( ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy ( cmdId ) ; }
static com.google.gwt.event.shared.EventBus getEventBus ( ) { return org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance ( ) . getEventBus ( ) ; }
protected org.ovirt.engine.core.common.businessentities.permissions getPermissions ( java.lang.String id ) { return getEntity ( org.ovirt.engine.core.common.businessentities.permissions.class , VdcQueryType.GetPermissionById , new org.ovirt.engine.core.common.queries.MultilevelAdministrationByPermissionIdParameters ( new org.ovirt.engine.core.compat.Guid ( id ) ) , id ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; updateAlerts ( ) ; }
public void validateCanDoAction ( ) { setupForStorageTests ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public void checkCinderStorageDomainContainDisks ( ) { setCinderStorageDomainStatus ( StorageDomainStatus.Inactive ) ; storagePoolExists ( ) ; cinderStorageDomainContainsDisks ( ) ; masterDomainIsUp ( ) ; canDetachDomain ( ) ; org.junit.Assert.assertFalse ( cmd.canDetachDomain ( false , false ) ) ; }
public org.ovirt.engine.core.common.vdscommands.VDSReturnValue get ( ) { try { return get ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.vdsTimeout ) , java.util.concurrent.TimeUnit.SECONDS ) ; } catch ( java.util.concurrent.TimeoutException e ) { return org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getVDSReturnValue ( ) ; } }
public java.lang.Object getQueryableId ( ) { return null ; }
public static org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getInstance ( ) { if ( ( org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.vmPropertiesUtils ) == null ) { org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.vmPropertiesUtils = new org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils ( ) ; org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.vmPropertiesUtils.init ( ) ; } return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.vmPropertiesUtils ; }
public void discardAfterDeleteSupportedByDcVersion ( ) { domain.setDiscardAfterDelete ( true ) ; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidatorTest.mcr.mockConfigValue ( ConfigValues.DiscardAfterDeleteSupported , Version.v4_1 , true ) ; org.junit.Assert.assertThat ( validator.isDiscardAfterDeleteSupportedByDcVersion ( Version.v4_1 ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void setupMock ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( jobDaoMock ) . when ( command ) . getJobDao ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; }
protected org.ovirt.engine.core.compat.Guid getDestinationStorageDomainId ( ) { return ( mNewCreatedDiskImage.getStorageIds ( ) ) != null ? mNewCreatedDiskImage.getStorageIds ( ) . get ( 0 ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; }
private void initTabAvailabilityListeners ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel vm ) { highAvailabilityTab.setVisible ( false ) ; isStatelessEditor.setVisible ( true ) ; numOfMonitorsEditor.setVisible ( true ) ; allowConsoleReconnectEditor.setVisible ( true ) ; expander.setVisible ( true ) ; }
protected java.lang.Number getRawValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { return object.getStatistics ( ) . getTransmittedBytes ( ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getWatchdogs ( ) { return getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . getId ( ) , VmDeviceGeneralType.WATCHDOG ) ; }
public static < T , W extends org.ovirt.engine.ui.common.widget.AbstractValidatedWidgetWithLabel < T , ? > > org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor < T , W > of ( com.google.gwt.editor.client.LeafValueEditor < T > subEditor , W widgetWithLabel ) { return new org.ovirt.engine.ui.common.widget.editor.WidgetWithLabelEditor < T , W > ( subEditor , widgetWithLabel ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Disk incoming , org.ovirt.engine.api.model.Disk entity ) { return new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , entity.getId ( ) , map ( incoming , entity ) ) ; }
public int getVlanId ( ) { java.lang.Integer vlanId = getEntity ( ) . getvlan_id ( ) ; return vlanId == null ? - 1 : vlanId ; }
protected org.ovirt.engine.ui.webadmin.ApplicationResources getApplicationResources ( ) { return org.ovirt.engine.ui.webadmin.gin.ClientGinjectorProvider.instance ( ) . getApplicationResources ( ) ; }
protected org.ovirt.engine.api.model.Template getFromDataDomain ( ) { return performGet ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( guid ) ) ; }
public org.ovirt.engine.api.resource.NetworkResource getNetworkResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendNetworkResource ( id , this ) ) ; }
public void run ( ) { try { returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( actionType , actionParameters ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.RegisterVdsQuery.log.error ( "RegisterVdsQuery::WorkMethod [within thread]: An exception has been thrown." , ex ) ; } finally { latch.countDown ( ) ; } }
public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode ( java.lang.String image ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE ) . when ( ( ( ( getHost ( ) . getVdsType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode ) ) && ( org.apache.commons.lang.StringUtils.isBlank ( image ) ) ) ) ; }
protected org.ovirt.engine.api.model.Network getEntity ( int index ) { return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations ( control.createMock ( org.ovirt.engine.api.model.Network.class ) , false , false , index ) ; }
public void add ( ) { runAddAndVerify ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , false , org.mockito.Mockito.times ( 0 ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VERSION_3_2 ) ; }
public void testGetByName ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic result = dao.getByName ( existingEntity.getStorageName ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingEntity.getId ( ) , result.getId ( ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getCollection ( ) { return getBackendCollection ( VdcQueryType.GetVdsInterfacesByVdsId , new org.ovirt.engine.core.common.queries.GetVdsByVdsIdParameters ( asGuid ( hostId ) ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > getSelectedItems ( ) { return GetSelectedItems ( false ) ; }
public void discardIsFalseWhenDiscardAfterDeleteIsTrueAndDomainDoesNotSupportDiscard ( ) { assertDiscardValue ( true , false , false ) ; assertDiscardValue ( true , null , false ) ; }
private org.ovirt.engine.core.common.action.AddDiskParameters createParameters ( ) { org.ovirt.engine.core.common.businessentities.DiskImageBase image = new org.ovirt.engine.core.common.businessentities.DiskImageBase ( ) ; image.setDiskInterface ( DiskInterface.IDE ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = new org.ovirt.engine.core.common.action.AddDiskParameters ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , image ) ; return parameters ; }
public org.ovirt.engine.api.model.Host get ( ) { if ( isForce ( ) ) { performAction ( VdcActionType.RefreshHost , new org.ovirt.engine.core.common.action.VdsActionParameters ( guid ) ) ; } org.ovirt.engine.api.model.Host host = getVdsByVdsId ( ) ; deprecatedAddLinksToAgents ( host ) ; return host ; }
private void initGeneralForm ( ) { generalForm = new org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoGeneral ( constants , messages ) ; }
private void fillPasswordsMap ( ) { passwordPerDomain = org.ovirt.engine.core.common.config.Config.< org.ovirt.engine.core.dal.dbbroker.generic.DomainsPasswordMap > GetValue ( ConfigValues.AdUserPassword ) ; }
public void cleanup ( ) { driver.cleanup ( ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { setGuestAgentData ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ) ( result ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel.super . SyncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters ( vm.getId ( ) ) ) ; }
public void setUp ( ) { disk1 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk2 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk3 = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) ) . thenReturn ( storageDomainDaoMock ) ; }
public void testJsonNullDiskDescription ( ) throws java.io.IOException { disk.setDiskAlias ( "DiskAlias" ) ; disk.setDiskDescription ( null ) ; org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.assertDiskDescriptionMap ( disk ) ; }
public org.ovirt.engine.core.dao.VdsDAO getVdsDao ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDAO ( ) ; }
public void testGetMessagesBundleLocale ( ) { java.util.ResourceBundle bundle = testTheme.getMessagesBundle ( java.util.Locale.FRENCH ) ; org.junit.Assert.assertNotNull ( "There should be a bundle" , bundle ) ; org.junit.Assert.assertEquals ( "Login header(fr)" , bundle.getString ( "obrand.common.login_header_label" ) ) ; }
public boolean isOvfTemplate ( java.lang.String ovfstring ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { return ovfManager.IsOvfTemplate ( ovfstring ) ; }
protected org.ovirt.engine.core.bll.HotPlugDiskToVmCommand < org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters > createCommand ( ) { return new org.ovirt.engine.core.bll.HotPlugDiskToVmCommand < org.ovirt.engine.core.common.action.HotPlugDiskToVmParameters > ( createParameters ( ) ) ; }
public void testVmFailNoDisks ( ) { org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < > ( ) , null ) , false , EngineMessage.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK ) ; }
public int getMaxPciDevices ( int osId , org.ovirt.engine.core.compat.Version Version ) ;
private static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > queryGroups ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final org.ovirt.engine.api.extensions.ExtMap filter ) { return org.ovirt.engine.core.aaa.AuthzUtils.populateGroups ( extension , Authz.InvokeCommands.QUERY_OPEN , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Authz.InvokeKeys.QUERY_ENTITY , Authz.QueryEntity.GROUP ) . mput ( Authz.InvokeKeys.QUERY_FILTER , filter ) ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build ( ) { return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , params , existingInterfaces , existingAttachments , networkBusinessEntityMap , managementNetworkUtil , networkClusterDaoMock , networkAttachmentDaoMock , networkDaoMock , vdsDaoMock , new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorHelper ( ) , vmDao ) ; }
public void canDetachMaintenanceDomain ( ) { setStorageDomainStatus ( StorageDomainStatus.Maintenance ) ; storagePoolExists ( ) ; masterDomainIsUp ( ) ; canDetachDomain ( ) ; org.junit.Assert.assertTrue ( cmd.canDetachDomain ( false , false ) ) ; }
private void commitNetworkChanges ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networks ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel bondModel = nicMap.get ( iface.getName ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks ( bondModel , new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > ( networks ) , hostSetupNetworksParametersData ) ; }
protected boolean runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { return RunConnectionStorageToDomain ( storageDomain , vdsId , type , null , Guid.Empty ) ; }
private static java.lang.Integer getLowDiskSpaceThreshold ( ) { return org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.FreeSpaceCriticalLowInGB ) ; }
public boolean hasTasks ( ) { return ! ( getReturnValue ( ) . getTaskIdList ( ) . isEmpty ( ) ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , null , entityType , entityIds ) ; }
public org.ovirt.engine.core.common.businessentities.VolumeFormat getvolume_format ( ) { return getImage ( ) . getVolumeFormat ( ) ; }
public void testSave ( ) { dao.save ( newPool ) ; org.ovirt.engine.core.common.businessentities.storage_pool result = dao.getByName ( newPool.getname ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( newPool , result ) ; }
private boolean isAtLeastOneVmIsNotDown ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsDiskPluggedTo ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo ) { if ( ( vm.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { return true ; } } return false ; }
public java.lang.String getStorageDomainName ( ) { if ( ( ( storageDomainName ) == null ) && ( ( getStorageDomain ( ) ) != null ) ) { storageDomainName = getStorageDomain ( ) . getStorageName ( ) ; } return org.apache.commons.lang.StringUtils.defaultString ( storageDomainName ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return object.getvm_name ( ) ; }
private boolean templateExists ( ) { if ( ( ( org.ovirt.engine.core.bll.ImportVmCommand.getVmTemplate ( ) ) == null ) && ( ! ( getParameters ( ) . getCopyCollapse ( ) ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST ) ; } return true ; }
protected boolean updateVmImSpm ( ) { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) . getstorage_pool_id ( ) , java.util.Arrays.asList ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) , org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
public void poolHasDefaultCluster ( ) { org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultClusterID , org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.DEFAULT_CLUSTER_ID ) ; addDefaultClusterToPool ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ) . when ( poolValidator ) . isNotLocalfsWithDefaultCluster ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_CLUSTER_CANNOT_BE_LOCALFS ) ; }
public void vnicCreated ( org.ovirt.engine.core.compat.Guid vmId ) { getWindow ( ) . stopProgress ( ) ; cancel ( ) ; setGuideContext ( vmId ) ; updateActionAvailability ( ) ; getGuideCommand ( ) . execute ( ) ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.GuestContainer row ) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join ( row.getNames ( ) , ", " ) ; }
public org.ovirt.engine.core.common.TimeZoneType getTimeZoneType ( ) { java.lang.Integer vmOsType = getModel ( ) . getOSType ( ) . getSelectedItem ( ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType ( vmOsType ) ? org.ovirt.engine.core.common.TimeZoneType.WINDOWS_TIMEZONE : org.ovirt.engine.core.common.TimeZoneType.GENERAL_TIMEZONE ; }
public static boolean CanRemoveVmPoolWithoutReasons ( org.ovirt.engine.core.compat.NGuid vmPoolId ) { java.util.ArrayList < java.lang.String > reasons = new java.util.ArrayList < java.lang.String > ( ) ; return org.ovirt.engine.core.bll.RemoveVmPoolCommand.CanRemoveVmPool ( vmPoolId , reasons ) ; }
public void testGetAll ( ) { java.util.List < org.ovirt.engine.core.common.scheduling.ClusterPolicy > result = dao.getAll ( java.util.Collections.emptyMap ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( result.size ( ) , org.ovirt.engine.core.dao.ClusterPolicyDaoTest.NUMBER_OF_CLUSTER_POLICIES ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomainStatus getstatus ( ) { return getStoragePoolIsoMapData ( ) . getstatus ( ) ; }
public static org.ovirt.engine.api.model.User map ( org.ovirt.engine.core.common.businessentities.aaa.DbUser entity , org.ovirt.engine.api.model.User template ) { org.ovirt.engine.api.model.User model = ( template != null ) ? template : new org.ovirt.engine.api.model.User ( ) ; model.setName ( entity.getFirstName ( ) ) ; model.setUserName ( ( ( ( entity.getLoginName ( ) ) + "@" ) + ( entity.getDomain ( ) ) ) ) ; model.setPrincipal ( entity.getLoginName ( ) ) ; model.setId ( entity.getId ( ) . toString ( ) ) ; model.setLastName ( entity.getLastName ( ) ) ; model.setEmail ( entity.getEmail ( ) ) ; model.setDepartment ( entity.getDepartment ( ) ) ; model.setDomainEntryId ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( entity.getExternalId ( ) ) ) ; model.setNamespace ( entity.getNamespace ( ) ) ; if ( ( ( entity.getGroupNames ( ) ) != null ) && ( ( entity.getGroupNames ( ) . size ( ) ) > 0 ) ) { model.setGroups ( new org.ovirt.engine.api.model.Groups ( ) ) ; for ( java.lang.String name : entity.getGroupNames ( ) ) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group ( ) ; group.setName ( name ) ; model.getGroups ( ) . getGroups ( ) . add ( group ) ; } } if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( entity.getDomain ( ) ) ) ) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain ( ) ; dom.setId ( new org.ovirt.engine.core.compat.Guid ( entity.getDomain ( ) . getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) , true ) . toString ( ) ) ; model.setDomain ( dom ) ; } return model ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object returnValue ) { context.dataCenterFoundByName = org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault ( ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( returnValue ) ) ) ; prepare2 ( ) ; }
private void WriteToAuditLog ( ) { try { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , getAuditLogTypeValue ( ) ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.RegisterVdsQuery.log.error ( "RegisterVdsQuery::WriteToAuditLog: An exception has been thrown." , ex ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { cachedMaxPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; updatePriority ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ) ; }
public void getClusterNameNullVds ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase ( ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = null ; b.setCluster ( g ) ; final java.lang.String n = b.getClusterName ( ) ; org.junit.Assert.assertEquals ( "" , n ) ; }
public void testPhasesCorrelation ( ) { for ( org.ovirt.engine.api.model.ImageTransferPhase phase : org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.values ( ) ) { try { org.ovirt.engine.api.model.ImageTransferPhase.valueOf ( phase.name ( ) ) ; } catch ( java.lang.Exception ex ) { org.junit.jupiter.api.Assertions.fail ( ) ; } } }
public void setmethod_id ( int value ) { this . id.methodId = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "method_id" ) ) ; }
public java.lang.Void call ( ) throws java.lang.Exception { _setCliEnvironmentIfNecessary ( ( ( org.ovirt.ovirt_host_deploy.constants.OpenStackEnv.NEUTRON_CONFIG_PREFIX ) + "DEFAULT/qpid_username" ) , _openStackAgentProperties.getAgentConfiguration ( ) . getQpidConfiguration ( ) . getUsername ( ) ) ; return null ; }
public void rollbackQuotaByVmId ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . get ( vmId ) ; if ( vm != null ) { removeQuotaFromCache ( vm.getstorage_pool_id ( ) , vm.getQuotaId ( ) ) ; } }
protected org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleMode getDefaultConsoleMode ( ) { return org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.ClientConsoleMode.valueOf ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.ClientModeSpiceDefault ) ) ) ) ; }
public void vnicProfileNotExist ( ) throws java.lang.Exception { vnicProfileValidationTest ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NOT_EXISTS ) , false , false , false , false ) ; }
protected org.ovirt.engine.core.bll.interfaces.BackendInternal getBackend ( ) { return org.ovirt.engine.core.bll.Backend.getInstance ( ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spmMaxPriorityValue = ( ( java.lang.Integer ) ( returnValue ) ) ; retrieveDefaultSpmPriority ( ) ; }
public org.ovirt.engine.core.utils.ISingleAsyncOperation createSingleAsyncOperation ( ) { return org.ovirt.engine.core.di.Injector.injectMembers ( new org.ovirt.engine.core.bll.storage.pool.DisconnectStoragePoolAsyncOperation ( getVdss ( ) , getStoragePool ( ) ) ) ; }
private void editInstanceType ( ) { createWindow ( new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingInstanceTypeModelBehavior ( ( ( org.ovirt.engine.core.common.businessentities.InstanceType ) ( getSelectedItem ( ) ) ) ) , "edit_instance_type" , "OnEditInstanceType" , false , org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . editInstanceTypeTitle ( ) , HelpTag.edit_instance_type ) ; }
protected void getHostListByCluster ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.ui.frontend.AsyncQuery query ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getHostListByCluster ( query , cluster.getName ( ) ) ; }
public void onSuccess ( java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > cpuProfiles = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getCpuProfiles ( ) . setItems ( cpuProfiles ) ; }
private org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel getEntry ( V widget ) { return ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) ; }
static java.lang.StringBuilder replace ( java.lang.StringBuilder sysPrepContent , java.lang.String pattern , java.lang.String value ) { return new java.lang.StringBuilder ( sysPrepContent.toString ( ) . replaceAll ( java.util.regex.Pattern.quote ( pattern ) , java.util.regex.Matcher.quoteReplacement ( value ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain createDomain ( org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; domain.setStorageName ( "mydomain" ) ; return domain ; }
public org.ovirt.engine.core.compat.Guid getimage_id ( ) { return this . id.getImageId ( ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addActiveSnapshot ( snapshotId , vm , SnapshotStatus.OK , "" , compensationContext ) ; }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetLegacyPolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setType ( "legacy" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE , null ) , UsbPolicy.ENABLED_LEGACY ) ; }
public void moveDiskToGluster ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( false ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public static org.ovirt.engine.core.aaa.DirectoryGroup mapGroupRecordToDirectoryGroup ( final java.lang.String authzName , final org.ovirt.engine.api.extensions.ExtMap group ) { return org.ovirt.engine.core.bll.aaa.DirectoryUtils.mapGroupRecordToDirectoryGroup ( authzName , group , new java.util.HashSet < > ( ) ) ; }
public int getVmCount ( ) { return this . mVdsDynamic.getvm_count ( ) ; }
public java.lang.Void runInTransaction ( ) { compensationContext.snapshotEntityStatus ( vm , vm.getstatus ( ) ) ; vm.setstatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.VmHandler.UnLockVm ( vm.getId ( ) ) ; compensationContext.stateChanged ( ) ; return null ; }
public void snapshotObject ( org.ovirt.engine.core.common.businessentities.TransientCompensationBusinessEntity entity ) { snapshotEntityInMemory ( entity , entity.getId ( ) , SnapshotType.TRANSIENT_ENTITY ) ; }
public < P extends org.ovirt.engine.core.common.action.VdcActionParametersBase > org.ovirt.engine.core.bll.CommandBase < P > createCommand ( org.ovirt.engine.core.common.action.VdcActionType action , P parameters ) { return org.ovirt.engine.core.bll.CommandsFactory.getInstance ( ) . createCommand ( action , parameters ) ; }
public void CancelConfirmFocusPM ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel hostModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( getWindow ( ) ) ) ; hostModel.setIsPowerManagementTabSelected ( true ) ; hostModel.getIsPm ( ) . setEntity ( true ) ; setConfirmWindow ( null ) ; }
protected static boolean ignoreFailure ( java.lang.Throwable caught ) { if ( ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) && ( ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode ( ) ) == 0 ) ) { return true ; } return false ; }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < java.lang.Integer > event ) { onRefresh ( modelTimer.getTimerRefreshStatus ( ) ) ; }
protected void init ( ) { struct.add ( VdsProperties.vm_guid , org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters ( ) . getVm ( ) . getId ( ) . toString ( ) ) ; struct.add ( VdsProperties.VM_NETWORK_INTERFACE , initNicStructure ( ) ) ; }
public static void RunQuery ( final org.ovirt.engine.core.common.queries.VdcQueryType queryType , final org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters , final org.ovirt.engine.ui.frontend.AsyncQuery callback ) { org.ovirt.engine.ui.frontend.Frontend.RunQuery ( queryType , parameters , callback , false ) ; }
public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Succesful returned result from logoff." ) ; callback.getDel ( ) . onSuccess ( callback.getModel ( ) , result ) ; }
public org.ovirt.engine.core.compat.Guid getVdsId ( ) { return ( mVdsId ) != null ? mVdsId.getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; }
