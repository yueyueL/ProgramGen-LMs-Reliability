private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsInterface ( org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.lang.Boolean bonded , java.lang.String bondName , java.lang.Integer vlanId , java.lang.String networkName , boolean bridged , java.lang.String address ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; iface.setId ( id ) ; iface.setName ( name ) ; iface.setBonded ( bonded ) ; iface.setBondName ( bondName ) ; iface.setVlanId ( vlanId ) ; iface.setNetworkName ( networkName ) ; iface.setBridged ( bridged ) ; iface.setAddress ( address ) ; return iface ; }
public static void UpdateVdsDomainsData ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid storagePoolId , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSDomainsData > vdsDomainData ) { if ( ( vds.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData proxy = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.get ( storagePoolId ) ; if ( proxy != null ) { proxy.UpdateVdsDomainsData ( vds.getId ( ) , vds.getName ( ) , vdsDomainData ) ; } } }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } if ( VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals ( org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters ( ) . getVmStaticData ( ) . getVmtGuid ( ) ) ) { return failCanDoAction ( VdcBllMessages.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE ) ; } return true ; }
private void checkEntityForRollback ( org.ovirt.engine.core.common.businessentities.BusinessEntity < ? > entity ) { if ( entity == null ) { throw new java.lang.IllegalArgumentException ( "Can not create snapshot from a null entity" ) ; } @ java.lang.SuppressWarnings ( value = "unchecked" ) java.lang.Class < org.ovirt.engine.core.common.businessentities.BusinessEntity < java.io.Serializable > > entityClass = ( ( java.lang.Class < org.ovirt.engine.core.common.businessentities.BusinessEntity < java.io.Serializable > > ) ( entity.getClass ( ) ) ) ; boolean verifyDaoExistence = ! ( entity instanceof org.ovirt.engine.core.common.businessentities.TransientCompensationBusinessEntity ) ; if ( verifyDaoExistence ) { org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class ) . getDaoForEntity ( entityClass ) ; } }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final boolean showErrorDialog ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( actionType , parameters , org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK , null , showErrorDialog ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue removeImage ( org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters ) { try { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.DeleteImageGroup , parameters ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { if ( ( e.getErrorCode ( ) ) == ( org.ovirt.engine.core.common.errors.EngineError.ImageDoesNotExistInDomainError ) ) { return createImageDoesNotExistInDomainReturnValue ( ) ; } throw e ; } }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { switch ( diskImage.getImageStatus ( ) ) { case OK : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.upImage ( ) ; case LOCKED : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.waitImage ( ) ; case ILLEGAL : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.logErrorImage ( ) ; default : return null ; } }
protected void removeOvfForTemplatesAndVmsOfStoragePool ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid poolId = pool.getId ( ) ; removedOvfIdsInfo = org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getVmAndTemplatesGenerationsDao ( ) . getIdsForOvfDeletion ( poolId ) ; if ( ! ( ovfOnAnyDomainSupported ( pool ) ) ) { for ( org.ovirt.engine.core.compat.Guid id : removedOvfIdsInfo ) { getOvfUpdateProcessHelper ( ) . executeRemoveVmInSpm ( poolId , id , Guid.Empty ) ; } } markDomainsWithOvfsForOvfUpdate ( removedOvfIdsInfo ) ; org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getVmAndTemplatesGenerationsDao ( ) . deleteOvfGenerations ( removedOvfIdsInfo ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > getRepoListForStorageDomain ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.storage.ImageFileType fileType ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "storage_domain_id" , storageDomainId ) ; if ( ( fileType == null ) || ( fileType == ( org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All ) ) ) { parameterSource.addValue ( "file_type" , null ) ; } else { parameterSource.addValue ( "file_type" , fileType.getValue ( ) ) ; } return getCallsHandler ( ) . executeReadList ( "GetRepo_files_by_storage_domain" , org.ovirt.engine.core.dao.RepoFileMetaDataDAODbFacadeImpl.RepoImageMapper.instance , parameterSource ) ; }
private javax.ws.rs.core.Response handleConfigureConsoleError ( java.lang.String exceptionMessage ) { org.ovirt.engine.api.restapi.resource.BackendVmGraphicsConsoleResource.log.error ( localize ( Messages.BACKEND_FAILED_TEMPLATE , exceptionMessage ) ) ; if ( EngineMessage.USER_CANNOT_FORCE_RECONNECT_TO_VM.name ( ) . equals ( exceptionMessage ) ) { return javax.ws.rs.core.Response.status ( Response.Status.FORBIDDEN ) . build ( ) ; } return javax.ws.rs.core.Response.serverError ( ) . build ( ) ; }
private void assertFailsWith ( java.lang.String errorMessage , org.ovirt.engine.core.bll.ValidationResult validationResult , org.ovirt.engine.core.common.errors.EngineMessage engineMessage ) { org.junit.Assert.assertThat ( errorMessage , validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage ) ) ; }
protected void updateMigrateOnError ( ) { if ( ( ( getCluster ( ) ) != null ) && ( ( getCluster ( ) . getMigrateOnError ( ) ) == null ) ) { boolean isMigrationSupported = org.ovirt.engine.core.common.FeatureSupported.isMigrationSupported ( getArchitecture ( ) , getCluster ( ) . getCompatibilityVersion ( ) ) ; org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions migrateOnError = ( isMigrationSupported ) ? org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.YES : org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.NO ; getCluster ( ) . setMigrateOnError ( migrateOnError ) ; } }
public void testGetEventNotificationMethodsByType ( ) { java.lang.String target = "Email" ; java.util.List < org.ovirt.engine.core.common.businessentities.EventNotificationMethod > result = dao.getEventNotificationMethodsByType ( target ) ; assertNotNull ( result ) ; assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.EventNotificationMethod method : result ) { assertEquals ( EventNotificationMethods.EMAIL , method.getmethod_type ( ) ) ; } }
public void testMigrateWithHostName ( ) throws java.lang.Exception { setUpGetHostByNameExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.MigrateVmToServer , org.ovirt.engine.core.common.action.MigrateVmToServerParameters.class , new java.lang.String [ ] { "VmId" , "VdsId" , "ForceMigrationForNonMigratableVm" } , new java.lang.Object [ ] { GUIDS [ 0 ] , GUIDS [ 1 ] , java.lang.Boolean.FALSE } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; action.getHost ( ) . setName ( NAMES [ 1 ] ) ; verifyActionResponse ( resource.migrate ( action ) ) ; }
private void initializeMacPool ( org.ovirt.engine.core.bll.network.macpool.MacPool macPool ) { java.util.List < java.lang.String > macsForMacPool = macPoolDao.getAllMacsForMacPool ( macPool.getId ( ) ) ; final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal ( macPool ) ; for ( java.lang.String mac : macsForMacPool ) { pool.forceAddMac ( mac ) ; } }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromExportDomain ( org.ovirt.engine.core.compat.Guid vmId ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : getVmsFromExportDomain ( ) ) { if ( vmId.equals ( vm.getId ( ) ) ) { return vm ; } } return null ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Quota quota ) { validateParameters ( quota , "name" ) ; org.ovirt.engine.api.model.Quota entity = map ( quota ) ; entity.setStoragePoolId ( dataCenterId ) ; return performCreate ( VdcActionType.AddQuota , new org.ovirt.engine.core.common.action.QuotaCRUDParameters ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetQuotaByQuotaId , org.ovirt.engine.core.common.queries.GetQuotaByQuotaIdQueryParameters.class ) ) ; }
public void executeCommand ( ) { setUpMocksForRemove ( ) ; mockBackend ( true , null ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.times ( 1 ) ) . remove ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_HOOK_REMOVED , cmd.getAuditLogTypeValue ( ) ) ; }
protected boolean canDoAction ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) ) == null ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId ( ) ) == null ) { return failCanDoAction ( VdcBllMessages.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL ) ; } if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) . isRunningOrPaused ( ) ) || ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Unknown ) ) ) { return failCanDoAction ( VdcBllMessages.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL ) ; } return true ; }
public void getExternalProviderComputeResourceList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetComputeResourceFromExternalProvider , params , aQuery ) ; }
public void onRollback ( ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object runInTransaction ( ) { if ( ! ( getParameters ( ) . isLeaveLocked ( ) ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage ( ) ; if ( diskImage != null ) { getImageDao ( ) . updateStatus ( diskImage.getImage ( ) . getId ( ) , ImageStatus.OK ) ; } unLockImage ( ) ; } return null ; } } ) ; }
public void prepareParams ( ) { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( ) ; parameters.setVdsId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; parameters.setStoragePoolId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand < org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase > ( parameters ) ) ; }
public void testUrlWithPaginationAndTypes ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setErrataTypes ( java.util.EnumSet.of ( Erratum.ErrataType.BUGFIX , Erratum.ErrataType.SECURITY ) ) ; errataFilter.setPageSize ( 20 ) ; errataFilter.setPageNumber ( 3 ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.Assert.assertEquals ( "/katello/api/v2/systems/xxx/errata?search=type+%3D+bugfix+or+type+%3D+security&page=3&per_page=20" , underTest.build ( ) ) ; }
private static void assertGetByNameValidResults ( java.util.List < org.ovirt.engine.core.common.businessentities.AuditLog > results ) { org.ovirt.engine.core.dao.AuditLogDAOTest.assertGetByNameResults ( results , org.ovirt.engine.core.dao.AuditLogDAOTest.FILTERED_COUNT ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qosList = ( returnValue == null ) ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > ( ) : ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > ) ( returnValue ) ) ; qosList.add ( 0 , NetworkModel.EMPTY_HOST_NETWORK_QOS ) ; return qosList ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) { org.junit.jupiter.api.Assertions.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetStepsWithSubjectEntitiesByJobId , org.ovirt.engine.core.common.queries.GetStepsWithSubjectEntitiesByJobIdQueryParameters.class , new java.lang.String [ ] { "JobId" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpSteps ( ) , failure ) ; }
public void getVmNextRunConfiguration ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmNextRunConfiguration , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void setUpManagementNetworkExpectation ( ) throws java.lang.Exception { setUpPopulateExpectation ( ) ; final org.ovirt.engine.core.common.businessentities.network.Network mockNetwork = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.network.Network.class ) ; org.mockito.Mockito.when ( mockNetwork.getId ( ) ) . thenReturn ( org.ovirt.engine.api.restapi.resource.BackendClusterResourceTest.MANAGEMENT_NETWORK_ID ) ; setUpGetEntityExpectations ( QueryType.GetManagementNetwork , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , mockNetwork ) ; }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolNetmaskDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocolNetmask ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , false ) ; iface.setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public void SaveDefaultValues ( ) { if ( ( getSelectionAlgorithm ( ) ) == ( org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm.EvenlyDistribute ) ) { ClusterGeneralModel.highLimitEvenlyDistributed = getOverCommitHighLevel ( ) ; } else if ( ( getSelectionAlgorithm ( ) ) == ( org.ovirt.engine.core.common.businessentities.VdsSelectionAlgorithm.PowerSave ) ) { ClusterGeneralModel.lowLimitPowerSaving = getOverCommitLowLevel ( ) ; ClusterGeneralModel.highLimitPowerSaving = getOverCommitHighLevel ( ) ; } }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveNetwork , org.ovirt.engine.core.common.action.RemoveNetworkParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.networkId } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public boolean isMacInUse ( java.lang.String mac ) { lockObj.readLock ( ) . lock ( ) ; try { return ( allocatedMacs.contains ( mac ) ) || ( allocatedCustomMacs.contains ( mac ) ) ; } finally { lockObj.readLock ( ) . unlock ( ) ; } }
public void testGetEventNotificationMethodsById ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.EventNotificationMethod > result = dao.getEventNotificationMethodsById ( 1 ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( 1 , result.size ( ) ) ; }
public javax.ws.rs.core.Response exportToPathOnHost ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters ( ) ; params.setEntityType ( VmEntityType.TEMPLATE ) ; params.setEntityId ( guid ) ; params.setProxyHostId ( getHostId ( action ) ) ; params.setDirectory ( action.getDirectory ( ) ) ; params.setName ( action.getFilename ( ) ) ; return doAction ( ActionType.ExportVmTemplateToOva , params , action ) ; }
private org.ovirt.engine.core.common.migration.MigrationPolicy findMigrationPolicyById ( org.ovirt.engine.core.compat.Guid id , java.util.List < org.ovirt.engine.core.common.migration.MigrationPolicy > policies ) { for ( org.ovirt.engine.core.common.migration.MigrationPolicy policy : policies ) { if ( java.util.Objects.equals ( policy.getId ( ) , id ) ) { return policy ; } } return null ; }
private org.ovirt.engine.core.common.action.ActionParametersBase createUpgradeParameters ( org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters ) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters upgradeParams = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters ( parameters.getVdsId ( ) ) ; upgradeParams.setSessionId ( parameters.getSessionId ( ) ) ; upgradeParams.setCorrelationId ( parameters.getCorrelationId ( ) ) ; upgradeParams.setInitialStatus ( parameters.getInitialStatus ( ) ) ; upgradeParams.setoVirtIsoFile ( parameters.getoVirtIsoFile ( ) ) ; upgradeParams.setParentCommand ( ActionType.UpgradeHost ) ; upgradeParams.setParentParameters ( parameters ) ; return upgradeParams ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public java.lang.Object findOne ( org.ovirt.engine.core.bll.adbroker.LdapQueryData ldapQueryData ) { java.util.List < ? > userObjects = find ( ldapQueryData , 1 ) ; if ( ( userObjects == null ) || ( ( userObjects.size ( ) ) == 0 ) ) { return null ; } return userObjects.get ( 0 ) ; }
protected org.ovirt.engine.core.compat.Guid findImageForSameDrive ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType snapshotType ) { return findImageForSameDrive ( org.ovirt.engine.core.bll.BaseImagesCommand.getSnapshotDao ( ) . getId ( org.ovirt.engine.core.bll.BaseImagesCommand.getVmDao ( ) . getVmsListForDisk ( getImage ( ) . getId ( ) , false ) . get ( 0 ) . getId ( ) , snapshotType ) ) ; }
private org.ovirt.engine.core.common.mode.ApplicationMode findApplicationMode ( java.lang.String sessionId ) { org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.config.ConfigValues.ApplicationMode , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) ; parameters.setSessionId ( sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend.runPublicQuery ( QueryType.GetConfigurationValue , parameters ) ; return org.ovirt.engine.core.common.mode.ApplicationMode.from ( result.getReturnValue ( ) ) ; }
public void testValidUpdateOfHostedEngineEditableFieldOnRunningVm ( ) { org.ovirt.engine.core.common.businessentities.VmStatic src = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; src.setOrigin ( OriginType.MANAGED_HOSTED_ENGINE ) ; src.setDescription ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.ovirt.engine.core.common.businessentities.VmStatic dest = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; dest.setOrigin ( OriginType.MANAGED_HOSTED_ENGINE ) ; dest.setDescription ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; boolean updateIsValid = vmHandler.isUpdateValid ( src , dest , VMStatus.Up , false ) ; org.junit.Assert.assertTrue ( "Update should be valid for different descriptions on a running, hosted engine VM" , updateIsValid ) ; }
public void deleteJobOlderThanDateWithStatus ( java.util.Date sinceDate , java.util.List < org.ovirt.engine.core.common.job.JobExecutionStatus > statusesList ) { updateQuery ( entityManager.createNamedQuery ( "Job.deleteJobOlderThanDateWithStatus" ) . setParameter ( "sinceDate" , sinceDate ) . setParameter ( "statuses" , statusesList ) ) ; }
public void invoke ( org.ovirt.engine.api.extensions.ExtMap context , java.util.Map < java.lang.String , java.lang.Object > args ) { context.mput ( Schema.InvokeKeys.ENTITY , Schema.Entities.GROUP ) . mput ( Schema.InvokeKeys.ENTITY_KEYS , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Schema.GroupIdentifiers.NAME , args.get ( "group" ) ) . mput ( Schema.SharedKeys.ADD_GROUP , context.get ( ContextKeys.POSITIONAL ) ) ) ; org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get ( "_schema-modify" ) . invoke ( context ) ; context.putIfAbsent ( ContextKeys.EXIT_STATUS , org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS ) ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 0 , null ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.Assert.assertNotNull ( wae.getResponse ( ) ) ; org.junit.Assert.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterGeoRepMountBrokerSetup ( java.lang.String remoteVolumeName , java.lang.String userName , java.lang.String remoteGroupName , java.lang.Boolean partial ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepMountBrokerSetup" ) . withParameter ( "remoteVolumeName" , remoteVolumeName ) . withParameter ( "partial" , partial ) . withOptionalParameter ( "remoteUserName" , userName ) . withOptionalParameter ( "remoteGroupName" , remoteGroupName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . withParameter ( "volumeName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookStatusChangeParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertFalse ( cmd.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_DISABLE_FAILED ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.IpVersion > getExternalSubnetIpVerionList ( ) { return java.util.Arrays.asList ( org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.IpVersion.values ( ) ) ; }
protected void setImageStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus imageStatus ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getRelevantDiskImage ( ) ; diskImage.setimageStatus ( imageStatus ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( diskImage.getImage ( ) . getId ( ) , imageStatus ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap ( ) ; changeDomainStatusWithCompensation ( map , StorageDomainStatus.Unknown , StorageDomainStatus.Locked , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext ( ) ) ; if ( shouldPerformOvfUpdate ( ) ) { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId ( ) ) ; runInternalAction ( ActionType.ProcessOvfUpdateForStoragePool , parameters , null ) ; runInternalAction ( ActionType.UpdateOvfStoreForStorageDomain , createUpdateOvfStoreParams ( ) , org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getContext ( ) ) ; } if ( org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations ( ) ) { executeDeactivateCommand ( ) ; } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded ( true ) ; }
public void validateEnums ( org.ovirt.engine.api.model.Event event ) { if ( event.isSetSeverity ( ) ) { org.ovirt.engine.api.common.util.EnumValidator.validateEnum ( org.ovirt.engine.api.model.LogSeverity.class , event.getSeverity ( ) , true ) ; } if ( event.isSetHost ( ) ) { hostValidator.validateEnums ( event.getHost ( ) ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateAttachmentNotReferenceVlanDevice ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = existingInterfacesMap.get ( attachment.getNicName ( ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ATTACHMENT_REFERENCE_VLAN_DEVICE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "ATTACHMENT_REFERENCE_VLAN_DEVICE_ENTITY" , attachment.getNetworkName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "nicName" , attachment.getNicName ( ) ) ) . when ( ( ( nic != null ) && ( org.ovirt.engine.core.utils.NetworkUtils.isVlan ( nic ) ) ) ) ; }
public void onFailure ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > operation , final java.lang.Throwable caught ) { if ( ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute runAction: " + caught ) , caught ) ; failureEventHandler ( caught ) ; org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult ( actionType , parameters , null , state ) ; if ( callback != null ) { callback.executed ( f ) ; } fireAsyncOperationCompleteEvent ( state ) ; }
private org.ovirt.engine.core.common.businessentities.network.IPv4Address createIpv4Address ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol ipv4BootProtocol ) { org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryIpv4Address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address ( ) ; primaryIpv4Address.setBootProtocol ( ipv4BootProtocol ) ; primaryIpv4Address.setAddress ( randomIpv4Address ( ) ) ; primaryIpv4Address.setGateway ( randomIpv4Address ( ) ) ; primaryIpv4Address.setNetmask ( randomIpv4Address ( ) ) ; return primaryIpv4Address ; }
public java.lang.String getTooltip ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; if ( disk.isBoot ( ) ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants.bootableDisk ( ) ; } return "" ; }
private java.lang.String getOuterClassNames ( ) { java.util.Set < java.lang.String > classNames = new java.util.LinkedHashSet < > ( ) ; classNames.add ( org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER ) ; classNames.addAll ( extraTooltipClassNames ) ; return java.lang.String.join ( " " , classNames ) ; }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
protected void setUpEntityQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid.Empty } , getEntityList ( ) ) ; } }
protected boolean isRunAsStateless ( ) { return ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getRunAsStateless ( ) ) != null ? org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getRunAsStateless ( ) : ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmPoolId ( ) ) == null ) && ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . isStateless ( ) ) ; }
private static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > getClusterByServiceList ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list , boolean supportsVirtService , boolean supportsGlusterService ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : list ) { if ( ( supportsVirtService && ( cluster.supportsVirtService ( ) ) ) || ( supportsGlusterService && ( cluster.supportsGlusterService ( ) ) ) ) { filteredList.add ( cluster ) ; } } java.util.Collections.sort ( filteredList , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return filteredList ; }
org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore computeScore ( java.util.List < java.util.Map < java.lang.String , java.lang.String > > migrationIds ) { org.ovirt.optimizer.service.problemspace.OptimalDistributionStepsSolution sourceSolution = null ; synchronized ( this ) { sourceSolution = bestSolution ; } return org.ovirt.optimizer.service.ScoreOnlySolver.computeScore ( sourceSolution , migrationIds , java.util.Collections.< java.lang.String > emptySet ( ) , customDrlFiles ) ; }
public java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getIsoStorageModels ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > models = new java.util.ArrayList < > ( ) ; org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel nfsIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ( ) ; models.add ( nfsIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel posixIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel ( ) ; models.add ( posixIsoModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel glusterStorageModel = new org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel ( ) ; models.add ( glusterStorageModel ) ; org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel localIsoModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel ( ) ; models.add ( localIsoModel ) ; addTypeToStorageModels ( StorageDomainType.ISO , models ) ; return models ; }
protected static org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel createSelectionTreeNodeModel ( boolean isReadOnly , org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode roleNode ) { org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel nodeModel ; nodeModel = new org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel ( ) ; nodeModel.setTitle ( roleNode.getName ( ) ) ; nodeModel.setDescription ( roleNode.getDesc ( ) ) ; nodeModel.setIsChangeable ( ( ! isReadOnly ) ) ; return nodeModel ; }
private void initImportClonedTemplateDisks ( ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages ( ) ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { generateNewDiskId ( image ) ; updateManagedDeviceMap ( image , getVmTemplate ( ) . getManagedDeviceMap ( ) ) ; } else { newDiskIdForDisk.put ( image.getId ( ) , image ) ; } } }
public < T extends java.lang.Object > T instanceOf ( java.lang.Class < T > clazz ) { javax.enterprise.inject.spi.Bean < ? > bean = org.ovirt.engine.core.di.Injector.injector.getManager ( ) . getBeans ( clazz ) . iterator ( ) . next ( ) ; return ( ( T ) ( org.ovirt.engine.core.di.Injector.injector.getManager ( ) . getReference ( bean , clazz , org.ovirt.engine.core.di.Injector.injector.getManager ( ) . createCreationalContext ( bean ) ) ) ) ; }
private java.util.List < java.lang.String > getAllHostNames ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > allHosts ) { java.util.List < java.lang.String > allHostNames = new java.util.ArrayList < java.lang.String > ( allHosts.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : allHosts ) { allHostNames.add ( vds.getVdsName ( ) ) ; } return allHostNames ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isRunOnlyIfAllCanDoPass ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = notAllowToRunAction ( actionType ) ; if ( returnValue != null ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > ( ) ; list.add ( returnValue ) ; return list ; } else { return runMultipleActionsImpl ( actionType , parameters , false , isRunOnlyIfAllCanDoPass ) ; } }
public void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > getAll ( org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromCluster" , org.ovirt.engine.core.dao.ClusterDaoImpl.ClusterRowMapper.instance , parameterSource ) ; }
public void validateFailsIHostDoesNotExists ( ) { org.mockito.Mockito.when ( vdsDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.createParameters ( ) ; org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand < org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters > command = createCommand ( param ) ; org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommandTest.assertFailsWithValidateMessage ( command , EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; }
public void getSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( source == null ) || ( ( java.lang.Boolean ) ( source ) ) ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void updateVmAfterMigrationToDifferentCluster ( ) { if ( org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getClusterId ( ) . equals ( org.ovirt.engine.core.bll.MigrateVmCommand.getParameters ( ) . getTargetClusterId ( ) ) ) { return ; } org.ovirt.engine.core.common.action.ChangeVMClusterParameters params = new org.ovirt.engine.core.common.action.ChangeVMClusterParameters ( org.ovirt.engine.core.bll.MigrateVmCommand.getParameters ( ) . getTargetClusterId ( ) , org.ovirt.engine.core.bll.MigrateVmCommand.getVmId ( ) , org.ovirt.engine.core.bll.MigrateVmCommand.getVm ( ) . getCustomCompatibilityVersion ( ) ) ; setSucceeded ( org.ovirt.engine.core.bll.MigrateVmCommand.getBackend ( ) . runInternalAction ( VdcActionType.ChangeVMCluster , params ) . getSucceeded ( ) ) ; }
public void testWindowsTimeZonesKeys ( ) { final java.util.Set < java.lang.String > windowsTimeZoneKeys = org.ovirt.engine.core.compat.WindowsJavaTimezoneMapping.getKeys ( ) ; for ( java.lang.String timeZoneKey : TimeZoneType.WINDOWS_TIMEZONE.getTimeZoneList ( ) . keySet ( ) ) { org.junit.Assert.assertThat ( windowsTimeZoneKeys , org.hamcrest.core.IsCollectionContaining.hasItem ( timeZoneKey ) ) ; } }
public static void getDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean filterInternalDomain ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters ( ) ; tempVar.setFilterInternalDomain ( filterInternalDomain ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDomainList , tempVar , aQuery ) ; }
public void testValidateClusterSupportForVirtioScsi ( ) { org.ovirt.engine.core.bll.ImportVmCommand < org.ovirt.engine.core.common.action.ImportVmParameters > cmd = setupDiskSpaceTest ( createParameters ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers.any ( java.util.Map.class ) ) ; cmd.getParameters ( ) . getVm ( ) . getDiskMap ( ) . values ( ) . iterator ( ) . next ( ) . setDiskInterface ( DiskInterface.VirtIO_SCSI ) ; cmd.getVdsGroup ( ) . setCompatibilityVersion ( Version.v3_2 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; }
public void executeCommand ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackend ( cmd , true ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.atLeast ( 1 ) ) . addServerHookInDb ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook.class ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_ENABLE ) ; }
public void removeAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces = java.util.Arrays.asList ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) ) ; org.mockito.Mockito.when ( vmNicDao.getAllForVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( interfaces ) ; vmInterfaceManager.removeAll ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces ) { verifyRemoveAllDelegatedCorrectly ( iface ) ; } }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
public void canRunVmDuringInit ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( runVmValidator ) . isVmDuringInitiating ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.vmDuringInitialization ( vm ) , false , VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; }
protected void loadPayloadDevice ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getVmPayload ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.VmPayload payload = getVmPayloadByDeviceType ( VmDeviceType.CDROM ) ; if ( payload != null ) { org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setVmPayload ( payload ) ; } else { org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setVmPayload ( getVmPayloadByDeviceType ( VmDeviceType.FLOPPY ) ) ; } } }
public org.ovirt.engine.core.common.businessentities.VDS getValue ( S object ) { if ( object instanceof org.ovirt.engine.core.common.businessentities.VDS ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) ; } if ( object instanceof org.ovirt.engine.core.common.utils.PairQueryable ) { if ( ( ( ( org.ovirt.engine.core.common.utils.PairQueryable ) ( object ) ) . getSecond ( ) ) instanceof org.ovirt.engine.core.common.businessentities.VDS ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( ( ( org.ovirt.engine.core.common.utils.PairQueryable ) ( object ) ) . getSecond ( ) ) ) ; } } return null ; }
public static void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public org.ovirt.engine.api.model.Disks list ( ) { boolean unregistered = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendStorageDomainDisksResource.UNREGISTERED_CONSTRAINT_PARAMETER , true , false ) ; if ( unregistered ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetUnregisteredDisks , new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters ( storageDomainId , getStoragePoolIdForDomain ( storageDomainId ) ) ) ) ; } else { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllDisksByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( this . storageDomainId ) ) ) ; } }
public void testCheckIfRoleIsReadOnlyTrue ( ) { getRole ( ) . setReadonly ( true ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < > ( 1 ) ; org.junit.Assert.assertTrue ( "Role should be read only" , getCommand ( ) . checkIfRoleIsReadOnly ( messages ) ) ; org.junit.Assert.assertEquals ( "Wrong validate message" , EngineMessage.ACTION_TYPE_FAILED_ROLE_IS_READ_ONLY.toString ( ) , messages.get ( 0 ) ) ; }
public void massUpdateNumaNodeStatistics ( java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > numaNodes ) { java.util.List < org.springframework.jdbc.core.namedparam.MapSqlParameterSource > executions = new java.util.ArrayList ( numaNodes.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VdsNumaNode node : numaNodes ) { executions.add ( createNumaNodeStatisticsParametersMapper ( node ) ) ; } getCallsHandler ( ) . executeStoredProcAsBatch ( "UpdateNumaNodeStatistics" , executions ) ; }
private boolean isDiskNotShareable ( org.ovirt.engine.core.compat.Guid imageId ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageByImageId ( imageId ) ; if ( diskImage.isShareable ( ) ) { addCanDoActionMessage ( java.lang.String.format ( "$%1$s %2$s" , "diskAliases" , diskImage.getDiskAlias ( ) ) ) ; return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED ) ; } return true ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addNetworkAttachments ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ... networkAttachments ) { if ( nullParameters ( networkAttachments ) ) { return this ; } if ( ( parameters.getNetworkAttachments ( ) ) == null ) { parameters.setNetworkAttachments ( new java.util.ArrayList < > ( ) ) ; } parameters.getNetworkAttachments ( ) . addAll ( java.util.Arrays.asList ( networkAttachments ) ) ; return this ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImages ( ) { return java.util.Collections.emptyList ( ) ; }
protected boolean isDiskSupportedForPlugUnPlug ( org.ovirt.engine.core.common.businessentities.Disk disk ) { java.util.Set < java.lang.String > diskHotpluggableInterfaces = osRepository.getDiskHotpluggableInterfaces ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getOs ( ) , org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ; if ( ( org.springframework.util.CollectionUtils.isEmpty ( diskHotpluggableInterfaces ) ) || ( ! ( diskHotpluggableInterfaces.contains ( disk.getDiskInterface ( ) . name ( ) ) ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED ) ; } return true ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DataCenter dataCenter ) { validateParameters ( dataCenter , "name" , "storageType" ) ; validateEnums ( org.ovirt.engine.api.model.DataCenter.class , dataCenter ) ; validateEnum ( org.ovirt.engine.api.model.StorageType.class , dataCenter.getStorageType ( ) . toUpperCase ( ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( dataCenter ) ; return performCreate ( VdcActionType.AddEmptyStoragePool , new org.ovirt.engine.core.common.action.StoragePoolManagementParameter ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > getUserRequestForStorageDomainRepoFileList ( ) { org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainIdForQuery ( ) ; if ( Guid.Empty.equals ( storageDomainId ) ) { return new java.util.ArrayList < > ( ) ; } return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance ( ) . getUserRequestForStorageDomainRepoFileList ( storageDomainId , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getImageType ( ) , org.ovirt.engine.core.bll.GetImagesListQueryBase.getParameters ( ) . getForceRefresh ( ) ) ; }
protected void analyze ( ) { if ( ( vdsmVm ) == null ) { removeVmFromCache ( ) ; return ; } proceedDownVms ( ) ; proceedWatchdogEvents ( ) ; proceedBalloonCheck ( ) ; proceedGuaranteedMemoryCheck ( ) ; updateRepository ( ) ; prepareGuestAgentNetworkDevicesForUpdate ( ) ; updateLunDisks ( ) ; updateVmJobs ( ) ; analyzeExternalVms ( ) ; analyzeHostedEngineVm ( ) ; }
void bindConfiguration ( ) { bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultLoginSectionPlace.class ) . to ( UserPortalApplicationPlaces.DEFAULT_LOGIN_SECTION_PLACE ) ; bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace.class ) . to ( UserPortalApplicationPlaces.DEFAULT_MAIN_SECTION_BASIC_PLACE ) ; bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.userportal.section.DefaultMainSectionExtendedPlace.class ) . to ( UserPortalApplicationPlaces.DEFAULT_MAIN_SECTION_EXTENDED_PLACE ) ; bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.system.ClientStorageKeyPrefix.class ) . to ( org.ovirt.engine.ui.userportal.gin.SystemModule.CLIENT_STORAGE_KEY_PREFIX ) ; bindResourceConfiguration ( org.ovirt.engine.ui.userportal.ApplicationConstants.class , org.ovirt.engine.ui.userportal.ApplicationMessages.class , org.ovirt.engine.ui.userportal.ApplicationResources.class , org.ovirt.engine.ui.userportal.ApplicationTemplates.class , org.ovirt.engine.ui.userportal.ApplicationDynamicMessages.class ) ; bind ( org.ovirt.engine.ui.userportal.ApplicationResourcesWithLookup.class ) . in ( com.google.inject.Singleton.class ) ; }
public void OnRemove ( ) { org.ovirt.engine.core.common.businessentities.Bookmark selectedBookmark = ( ( org.ovirt.engine.core.common.businessentities.Bookmark ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.core.common.action.BookmarksParametersBase parameters = new org.ovirt.engine.core.common.action.BookmarksParametersBase ( selectedBookmark.getbookmark_id ( ) ) ; org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback async = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { PostOnSave ( result.getReturnValue ( ) ) ; } } ; getWindow ( ) . StartProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RemoveBookmark , parameters , async ) ; }
private java.lang.String getPrintableDomainsList ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( org.ovirt.engine.core.common.vdscommands.StoragePoolIsoMap map : getDomainsList ( ) ) { sb.append ( "{ domainId: " ) ; sb.append ( map.getstorage_id ( ) ) ; sb.append ( ", status: " ) ; sb.append ( map.getstatus ( ) . name ( ) ) ; sb.append ( " };" ) ; } return sb.toString ( ) ; }
public void testNicLinks ( ) { org.ovirt.engine.api.model.Nic nic = new org.ovirt.engine.api.model.Nic ( ) ; nic.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.NIC_ID ) ; nic.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; nic.getVm ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( nic ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.NIC_HREF , nic.getHref ( ) ) ; }
private void doLoad ( org.ovirt.engineextensions.aaa.misc.http.ExtMap input , org.ovirt.engineextensions.aaa.misc.http.ExtMap output ) throws java.lang.Exception { org.ovirt.engineextensions.aaa.misc.http.ExtMap context = input.< org.ovirt.engineextensions.aaa.misc.http.ExtMap > get ( Base.InvokeKeys.CONTEXT ) ; java.util.Properties configuration = context.< java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) ; context.mput ( Base.ContextKeys.AUTHOR , "The oVirt Project" ) . mput ( Base.ContextKeys.LICENSE , "ASL 2.0" ) . mput ( Base.ContextKeys.HOME_URL , "http://www.ovirt.org" ) . mput ( Base.ContextKeys.VERSION , Config.PACKAGE_VERSION ) . mput ( Base.ContextKeys.EXTENSION_NOTES , java.lang.String.format ( "Display name: %s" , Config.PACKAGE_DISPLAY_NAME ) ) . mput ( Base.ContextKeys.BUILD_INTERFACE_VERSION , Base.INTERFACE_VERSION_CURRENT ) . mput ( Base.ContextKeys.EXTENSION_NAME , "aaa.misc.http.authn" ) . mput ( Authn.ContextKeys.CAPABILITIES , ( ( Authn.Capabilities.AUTHENTICATE_NEGOTIATE_NON_INTERACTIVE ) | 0 ) ) ; artifact = org.ovirt.engineextensions.aaa.misc.http.AuthnExtension.Artifact.valueOf ( configuration.getProperty ( "config.artifact.name" , org.ovirt.engineextensions.aaa.misc.http.AuthnExtension.Artifact.PRINCIPAL.toString ( ) ) ) ; artifactArg = configuration.getProperty ( "config.artifact.arg" ) ; }
private < T extends org.ovirt.engine.core.common.businessentities.BusinessEntity < org.ovirt.engine.core.compat.Guid > & org.ovirt.engine.core.common.businessentities.Nameable > org.ovirt.engine.core.bll.ValidationResult validateCoherentIdentification ( org.ovirt.engine.core.compat.Guid violatingEntityId , org.ovirt.engine.core.compat.Guid referringId , java.lang.String referringName , org.ovirt.engine.core.common.errors.EngineMessage message , org.ovirt.engine.core.common.businessentities.BusinessEntityMap < T > map ) { boolean bothIdentificationSet = ( referringId != null ) && ( referringName != null ) ; java.lang.String [ ] replacements = createIncoherentIdentificationErrorReplacements ( violatingEntityId , referringId , referringName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNameAndIdIncoherent ( referringId , referringName , map ) ) ) ) ; }
public void testInvalidNetworkAttachmentIpConfiguration ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = initValidator ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = validator.getAttachmentsToConfigure ( ) . iterator ( ) . next ( ) ; java.util.Collection < java.lang.String > replacements = createReplacement ( networkAttachment ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_MISSING_IP_CONFIGURATION ; initMockNetworkAttachmentIpConfigurationValidator ( engineMessage , replacements ) ; org.junit.Assert.assertThat ( validator.validNewOrModifiedNetworkAttachments ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , replacements ) ) ; }
public static void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
private void addVideoCardByDisplayType ( org.ovirt.engine.core.common.businessentities.DisplayType displayType ) { java.util.Map < java.lang.String , java.lang.Object > struct = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; struct.put ( VdsProperties.Type , VmDeviceGeneralType.VIDEO.getValue ( ) ) ; struct.put ( VdsProperties.Device , displayType.getVmDeviceType ( ) . getName ( ) ) ; struct.put ( VdsProperties.SpecParams , org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getNewMonitorSpecParams ( ) ) ; struct.put ( VdsProperties.DeviceId , java.lang.String.valueOf ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ) ; devices.add ( struct ) ; }
public org.ovirt.engine.api.v3.types.V3Cluster update ( org.ovirt.engine.api.v3.types.V3Cluster v3Cluster ) { org.ovirt.engine.api.model.Cluster v4Cluster = org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( v3Cluster ) ; org.ovirt.engine.api.v3.helpers.V3ClusterHelper.assignCompatiblePolicy ( v3Cluster , v4Cluster ) ; try { return org.ovirt.engine.api.v3.adapters.V3OutAdapters.adaptOut ( delegate.update ( v4Cluster ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } }
protected final boolean failCanDoAction ( org.ovirt.engine.core.common.errors.VdcBllMessages message ) { addCanDoActionMessage ( message ) ; return false ; }
public void setUp ( ) { super . setUp ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . checkNumberOfMonitors ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateCustomProperties ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VmStatic.class ) , org.mockito.ArgumentMatchers.anyList ( ) ) ; initCommandMethods ( ) ; initDestSDs ( ) ; generateStorageToDisksMap ( ) ; cmd.init ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateDiskListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.Linq.sort ( storageDomains , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; setStorageDomains ( storageDomains ) ; setItems ( model.value ) ; }
private boolean isTaskStateError ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue ) { if ( ( ( vdsReturnValue != null ) && ( ( vdsReturnValue.getVdsError ( ) ) != null ) ) && ( ( vdsReturnValue.getVdsError ( ) . getCode ( ) ) == ( org.ovirt.engine.core.common.errors.VdcBllErrors.TaskStateError ) ) ) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.info ( ( "SPMAsyncTask::ClearAsyncTask: At time of attempt to clear task '{}' the response code" + " was '{}' and message was '{}'. Task will not be cleaned" ) , getVdsmTaskId ( ) , vdsReturnValue.getVdsError ( ) . getCode ( ) , vdsReturnValue.getVdsError ( ) . getMessage ( ) ) ; return true ; } return false ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
private void calculateNetworkImplementationDetailsAndAssertSync ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , boolean expectSync , boolean vmNet , int mtu , int vlanId , org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( vmNet , mtu , vlanId ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails ( network , qos , iface ) ; org.junit.Assert.assertNotNull ( "Network implementation details should be filled." , networkImplementationDetails ) ; org.junit.Assert.assertEquals ( ( ( "Network implementation details should be " + ( expectSync ? "in" : "out of" ) ) + " sync." ) , expectSync , networkImplementationDetails.isInSync ( ) ) ; }
public void setUp ( ) { org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager pendingResourceManager = new org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager ( ) ; powerSavingCPUWeightPolicyUnit = new org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingCPUWeightPolicyUnit ( null , pendingResourceManager ) ; powerSavingMemoryWeightPolicyUnit = new org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingMemoryWeightPolicyUnit ( null , pendingResourceManager ) ; parameters.put ( PolicyUnitParameter.HIGH_UTILIZATION.getDbName ( ) , "80" ) ; parameters.put ( PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName ( ) , "700" ) ; parameters.put ( PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName ( ) , "900" ) ; }
public void testFaultyResize ( ) { org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( createDiskImage ( ) ) ; org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters ( ) ; ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( parameters.getDiskInfo ( ) ) ) . setSize ( ( ( parameters.getDiskInfo ( ) . getSize ( ) ) / 2 ) ) ; initializeCommand ( parameters ) ; org.junit.Assert.assertFalse ( command.validateCanResizeDisk ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages ( "wrong failure" , command , EngineMessage.ACTION_TYPE_FAILED_REQUESTED_DISK_SIZE_IS_TOO_SMALL ) ; }
public static void GetExternalProviderHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId , boolean filterOutExistingHosts , java.lang.String searchFilter ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetHostListFromExternalProvider , new org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters ( providerId , filterOutExistingHosts , searchFilter ) , aQuery ) ; }
public void disableGlusterWhenVolumesExist ( ) { createCommandWithVirtEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDao.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; allQueriesForVms ( ) ; clusterHasGlusterVolumes ( ) ; validateFailedWithReason ( EngineMessage.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES ) ; }
public static void GetExternalProviderHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId , boolean filterOutExistingHosts , java.lang.String searchFilter ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetHostListFromExternalProvider , new org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters ( providerId , filterOutExistingHosts , searchFilter ) , aQuery ) ; }
static void checkMessages ( ) { org.ovirt.engine.core.common.AuditLogType [ ] values = org.ovirt.engine.core.common.AuditLogType.values ( ) ; if ( ( values.length ) != ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.size ( ) ) ) { for ( org.ovirt.engine.core.common.AuditLogType value : values ) { if ( ! ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.containsKey ( value ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.infoFormat ( "AuditLogType: {0} not exist in string table" , value.toString ( ) ) ; } } } }
protected void executeCommand ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.network.host.LabelNicCommand.getBackend ( ) . runInternalAction ( VdcActionType.PersistentSetupNetworks , new org.ovirt.engine.core.bll.network.AddNetworksByLabelParametersBuilder ( ) . buildParameters ( getNic ( ) , getLabel ( ) , getClusterNetworksByLabel ( ) ) ) ; if ( result.getSucceeded ( ) ) { org.ovirt.engine.core.bll.network.host.LabelNicCommand.getReturnValue ( ) . setActionReturnValue ( getLabel ( ) ) ; } else { propagateFailure ( result ) ; } setSucceeded ( result.getSucceeded ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.GuestAgentStatus getGuestAgentStatus ( ) { return vmDynamic.getGuestAgentStatus ( ) ; }
public void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.VDS makeTestVds ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.VDS newVdsData = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; newVdsData.setHostName ( "BUZZ" ) ; newVdsData.setVdsName ( "BAR" ) ; newVdsData.setVdsGroupCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( "1.2.3" ) ) ; newVdsData.setVdsGroupId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newVdsData.setId ( vdsId ) ; return newVdsData ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.common.VdcObjectType vdcObjectType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , createEntitiesMapForSingleEntityType ( vdcObjectType , entityIds ) ) ; }
public boolean isQuotaEnabled ( ) { return ( ( getStoragePool ( ) ) != null ) && ( ( getStoragePool ( ) . getQuotaEnforcementType ( ) ) != ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) ; }
private boolean isCompatibleAgentExists ( java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > fenceAgents , org.ovirt.engine.core.common.businessentities.Cluster cluster , java.util.List < java.lang.String > messages ) { for ( org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent : fenceAgents ) { if ( isFenceAgentVersionCompatible ( agent , cluster.getCompatibilityVersion ( ) . toString ( ) , messages ) ) { return true ; } } return false ; }
public void getVmsFromExternalServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.compat.Guid vdsId , java.lang.String url , java.lang.String username , java.lang.String password , org.ovirt.engine.core.common.businessentities.OriginType originType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExternalProvider , new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters ( url , username , password , originType , vdsId , dataCenterId ) , aQuery ) ; }
public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( ! ( isVisible ( value ) ) ) { return ; } com.google.gwt.resources.client.ImageResource image = org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.resources.expanderDownImage ( ) ; com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( image ) . getHTML ( ) ) ; sb.append ( org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.templates.volumeActivityMenu ( imageHtml , id ) ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public static void getRpmVersion ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion ) ; tempVar.setVersion ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
protected void verify ( org.ovirt.engine.api.model.ExternalHost model , org.ovirt.engine.api.model.ExternalHost transform ) { org.junit.jupiter.api.Assertions.assertNotNull ( transform ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getId ( ) , transform.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getName ( ) , transform.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getAddress ( ) , transform.getAddress ( ) ) ; }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
private boolean validateExternalNetwork ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator ) { return ( ( validate ( validator.externalNetworkSupported ( ) ) ) && ( validate ( validator.externalNetworkNotDisplay ( getNetworkName ( ) ) ) ) ) && ( validate ( validator.externalNetworkNotRequired ( getNetworkName ( ) ) ) ) ; }
public void lowThresholdStorageSpace ( ) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters ( ) ; org.ovirt.engine.core.bll.validator.ImportValidator validator = setupDiskSpaceTest ( parameters ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.junit.Assert.assertEquals ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN , validator.validateSpaceRequirements ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.storage.DiskImage > emptyList ( ) ) . getMessage ( ) ) ; }
public void setLibvirtVersion ( org.ovirt.engine.core.compat.RpmVersion value ) { if ( org.ovirt.engine.core.compat.Version.OpInequality ( libvirtVersion , value ) ) { libvirtVersion = value ; OnPropertyChanged ( new org.ovirt.engine.core.compat.PropertyChangedEventArgs ( "LibvirtVersion" ) ) ; } }
public void testGetAnnotationFromClass ( ) { org.ovirt.engine.core.utils.log.Logged logged = org.ovirt.engine.core.utils.log.LoggedUtils.getAnnotation ( new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedClass ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( LogLevel.OFF , logged.executionLevel ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( LogLevel.OFF , logged.errorLevel ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( LogLevel.INFO , logged.parametersLevel ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( LogLevel.INFO , logged.returnLevel ( ) ) ; }
protected void executeVDSCommand ( ) { vmManager = resourceManager.getVmManager ( org.ovirt.engine.core.vdsbroker.ManagingVmCommand.getParameters ( ) . getVmId ( ) ) ; vmManager.lock ( ) ; try { executeVmCommand ( ) ; vmManager.updateVmDataChangedTime ( ) ; } finally { vmManager.unlock ( ) ; } }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
private void verifyCertificate ( org.ovirt.engine.api.model.Vm model ) { org.junit.jupiter.api.Assertions.assertNotNull ( model.getDisplay ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getDisplay ( ) . getCertificate ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmResourceTest.CERTIFICATE , model.getDisplay ( ) . getCertificate ( ) . getSubject ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage.ImageStatus checkImageStatus ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume ) { if ( ( removedVolume.getVolumeClassification ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { return getCinderBroker ( ) . getDiskStatus ( removedVolume.getImageId ( ) ) ; } else if ( ( removedVolume.getVolumeClassification ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { return getCinderBroker ( ) . getSnapshotStatus ( removedVolume.getImageId ( ) ) ; } else { log.error ( "No valid cinder volume type enum has been initialized in the Cinder disk business entity." ) ; return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ; } }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected static java.util.Set < org.ovirt.engine.core.common.businessentities.storage.BaseDisk > getDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.BaseDisk > diskMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.BaseDisk > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk diskImage : diskImages ) { diskMap.put ( diskImage.getId ( ) , diskImage ) ; } return new java.util.HashSet < org.ovirt.engine.core.common.businessentities.storage.BaseDisk > ( diskMap.values ( ) ) ; }
private org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > setupCanAddVmTests ( final int domainSizeGB , final int sizeRequired ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = createCommand ( vm ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; initializeVmStaticDaoMock ( vm ) ; org.mockito.Mockito.doReturn ( createVmTemplate ( ) ) . when ( cmd ) . getVmTemplate ( ) ; org.mockito.Mockito.doReturn ( createStoragePool ( ) ) . when ( cmd ) . getStoragePool ( ) ; return cmd ; }
private org.ovirt.engine.core.common.businessentities.VDS getPreviousHost ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { org.ovirt.engine.core.compat.Guid previousProxyHostId = getProxyHostPropertiesModel ( ) . getLastProxyHostId ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( host.getId ( ) . equals ( previousProxyHostId ) ) { return host ; } } return null ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void testList ( ) { resource.setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetHostDevicesByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { HOST_ID } , getHostDeviceCollection ( ) ) ; verifyHostDevices ( resource.list ( ) . getHostDevices ( ) ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParentParameters ( ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParameters ( ) ; if ( parentHasCallback ( ) ) { if ( ( ! ( getParameters ( ) . getShouldBeEndedByParent ( ) ) ) || ( ( getTaskType ( ) ) == ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ) ) ) { parentParameters = getParameters ( ) . getParentParameters ( ) ; } } else if ( getParameters ( ) . getShouldBeEndedByParent ( ) ) { parentParameters = getParameters ( ) . getParentParameters ( ) ; } return parentParameters ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > getUserRequestForStorageDomainRepoFileList ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageFileType imageType , boolean forceRefresh ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > repoList = null ; if ( ! ( isStorageDomainValid ( storageDomainId , imageType , forceRefresh ) ) ) { return null ; } repoList = getCachedIsoListByDomainId ( storageDomainId , imageType ) ; return repoList ; }
private void logRemoveCinderDiskError ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk , org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue ) { log.error ( "Can't remove cinder disk id '{}' for VM id '{}' from domain id '{}' due to: {}." , cinderDisk.getImageId ( ) , org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters ( ) . getVmId ( ) , cinderDisk.getStorageIds ( ) . get ( 0 ) , ( actionReturnValue != null ? actionReturnValue.getFault ( ) . getMessage ( ) : "" ) ) ; }
public static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getSlave ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; entity.setId ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SLAVE_GUID ) ; entity.setName ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SLAVE_NAME ) ; entity.setNetworkName ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NETWORK_NAME ) ; entity.setSpeed ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.NIC_SPEED ) ; entity.setBondName ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.MASTER_NAME ) ; entity.setIpv4BootProtocol ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.IPV4_BOOT_PROTOCOL ) ; entity.setIpv6BootProtocol ( org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.IPV6_BOOT_PROTOCOL ) ; return org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.setUpStatistics ( entity , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.SLAVE_GUID ) ; }
public void testSave ( ) { dao.save ( vnicProfile ) ; org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get ( vnicProfile.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( vnicProfile.getId ( ) , result.getId ( ) ) ; org.junit.Assert.assertEquals ( false , result.isPortMirroring ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc prepareImage ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.prepareImage ( sdID , spID , imageID , volumeID , allowIllegal ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getNetworkConnectivityCheckTimeoutInSeconds ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Integer > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( 120 ) ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.NetworkConnectivityCheckTimeoutInSeconds , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImage ( image , image.getActive ( ) , new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ( image.getImageId ( ) , image.getStorageIds ( ) . get ( 0 ) , image.getQuotaId ( ) , image.getDiskProfileId ( ) ) , vmId ) ; }
public org.ovirt.engine.core.bll.ValidationResult vnicProfileNameNotUsed ( ) { for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : getVnicProfiles ( ) ) { if ( ( profile.getName ( ) . equals ( vnicProfile.getName ( ) ) ) && ( ! ( profile.getId ( ) . equals ( vnicProfile.getId ( ) ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VNIC_PROFILE_NAME_IN_USE ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void mixedClusterServicesSupported ( ) { mockConfigRule.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , true ) ; org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster.supportsVirtService ( ) ) . thenReturn ( true ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert.assertThat ( validator.mixedClusterServicesSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static boolean isSpiceCopyPasteToggleSupported ( java.lang.String version ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.SpiceCopyPasteToggleSupported , version ) ) ) ; }
public void getLabelList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Label > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllLabels , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private void updateDestinationVdsThreaded ( org.ovirt.engine.core.compat.Guid dstVdsId , final org.ovirt.engine.core.common.businessentities.VM vm ) { final org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . GetVdsManager ( dstVdsId ) ; if ( vdsManager != null ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { updateDestinationVdsOnTimer ( vdsManager , vm ) ; } } ) ; } }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.Disk disk = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.verifyModelSpecific ( disk , 1 ) ; verifyLinks ( disk ) ; }
private void doQueryExecute ( org.ovirt.engine.api.extensions.ExtMap input , org.ovirt.engine.api.extensions.ExtMap output ) { org.ovirt.engine.extensions.aaa.builtin.internal.InternalAuthz.Opaque opaque = input.get ( Authz.InvokeKeys.QUERY_OPAQUE ) ; output.put ( Authz.InvokeKeys.QUERY_RESULT , ( ( opaque.firstCall ) && ( opaque.found ) ? java.util.Collections.singletonList ( adminUser ) : null ) ) ; opaque.firstCall = false ; }
private void mockBackend ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase addCpuProfileReturnValue = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.action.VdcReturnValueBase.class ) ; org.mockito.Mockito.when ( addCpuProfileReturnValue.getSucceeded ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.backend.runAction ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.VdcActionType.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.CpuProfileParameters.class ) ) ) . thenReturn ( addCpuProfileReturnValue ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVnicProfile , org.ovirt.engine.core.common.action.VnicProfileParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfileResourceTest.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void ensureColumnPresent ( com.google.gwt.user.cellview.client.Column < T , ? > column , java.lang.String headerText , boolean present ) { table.ensureColumnPresent ( column , headerText , present ) ; tableHeader.ensureColumnPresent ( column , headerText , present ) ; }
protected void doNonBlockingAction ( final org.ovirt.engine.core.common.action.ActionType task , final org.ovirt.engine.core.common.action.VdcActionParametersBase params ) { org.ovirt.engine.core.common.interfaces.BackendLocal backend = getBackend ( ) ; setCorrelationId ( params ) ; setJobOrStepId ( params ) ; backend.runAction ( ActionType.RunAsyncAction , sessionize ( new org.ovirt.engine.core.common.action.RunAsyncActionParameters ( task , sessionize ( params ) ) ) ) ; }
protected void moveOrCopyAllImageGroups ( org.ovirt.engine.core.compat.Guid containerID , java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disks ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext ( VdcActionType.CopyImageGroup , buildMoveOrCopyImageGroupParametersForDisk ( disk , containerID ) ) ; if ( ! ( vdcRetValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( vdcRetValue.getFault ( ) . getError ( ) , "ImportVmCommand::MoveOrCopyAllImageGroups: Failed to copy disk!" ) ; } org.ovirt.engine.core.bll.ImportVmCommand.getReturnValue ( ) . getVdsmTaskIdList ( ) . addAll ( vdcRetValue.getInternalVdsmTaskIdList ( ) ) ; } }
public void storagePoolIdWithStoragePool ( ) { b.setStoragePoolId ( null ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; p.setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setStoragePool ( p ) ; final org.ovirt.engine.core.compat.Guid n = b.getStoragePoolId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
public java.lang.Long parse ( java.lang.CharSequence text ) throws java.text.ParseException { if ( ( text == null ) || ( "" . equals ( text.toString ( ) ) ) ) { return null ; } java.lang.Long ret = null ; try { ret = java.lang.Long.parseLong ( text.toString ( ) ) ; } catch ( java.lang.NumberFormatException e ) { throw new java.text.ParseException ( "Unable to parse String to Long" , 0 ) ; } return ret ; }
java.lang.String getFullPath ( final java.io.File brandingRootPath , final java.lang.String path ) { java.lang.String result = null ; java.lang.String mergedPath = java.nio.file.FileSystems.getDefault ( ) . getPath ( brandingRootPath.getAbsolutePath ( ) , ( path == null ? "" : path ) ) . toString ( ) ; if ( ( path != null ) && ( org.ovirt.engine.core.utils.servlet.ServletUtils.isSane ( mergedPath ) ) ) { result = mergedPath ; } else { org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet.log.error ( ( ( "The path \"" + mergedPath ) + "\" is not sane" ) ) ; } return result ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond ) { org.ovirt.engine.core.compat.Guid nicId = createOrUpdateBond.getId ( ) ; java.lang.String nicName = createOrUpdateBond.getName ( ) ; org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.BOND_REFERENCES_NICS_INCOHERENTLY ; return hostSetupNetworksValidatorHelper.validateCoherentIdentification ( nicName , nicId , nicName , message , existingInterfacesMap ) ; }
private void mockOsRepository ( ) { org.ovirt.engine.core.common.osinfo.OsRepository mockOsRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.mockito.Mockito.when ( mockOsRepository.getUniqueOsNames ( ) ) . thenReturn ( new java.util.HashMap < > ( ) ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , mockOsRepository ) ; }
public void testValidateSuccessOnAddFloatingDiskWithPlugUnset ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createDiskImage ( 1 ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; parameters.setVmId ( Guid.Empty ) ; parameters.setPlugDiskToVm ( false ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , parameters ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotAttachedToHost ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NETWORK_ALREADY_ATTACHED_TO_HOST , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "networkName" , getNetwork ( ) . getName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "hostName" , host.getName ( ) ) ) . when ( networkAttachedToHost ( ) ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public java.util.Map < java.lang.String , java.lang.String > getCustomValues ( ) { addCustomValue ( GlusterConstants.OPTION_KEY , getParameters ( ) . getVolumeOption ( ) . getKey ( ) ) ; addCustomValue ( GlusterConstants.OPTION_VALUE , getParameters ( ) . getVolumeOption ( ) . getValue ( ) ) ; return super . getCustomValues ( ) ; }
public boolean isInline ( ) { return inline ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel.stopProgress ( ) ; boolean isAllCanDoPassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result.getReturnValue ( ) ) { isAllCanDoPassed = isAllCanDoPassed && ( returnValueBase.getCanDoAction ( ) ) ; if ( ! isAllCanDoPassed ) { break ; } } if ( isAllCanDoPassed ) { updateAlerts ( ) ; cancel ( ) ; } }
public void testStaticBarToFooInterfaceMapper ( ) { org.ovirt.engine.api.restapi.types.Mapper < org.ovirt.engine.api.restapi.test.mappers.api.IBar , org.ovirt.engine.api.restapi.test.mappers.api.IFoo > mapper = mappingLocator.getMapper ( org.ovirt.engine.api.restapi.test.mappers.api.IBar.class , org.ovirt.engine.api.restapi.test.mappers.api.IFoo.class ) ; org.junit.jupiter.api.Assertions.assertNotNull ( mapper ) ; org.ovirt.engine.api.restapi.test.mappers.api.IFoo foo = mapper.map ( new org.ovirt.engine.api.restapi.test.mappers.impl.BarImpl ( "bar" ) , null ) ; org.junit.jupiter.api.Assertions.assertEquals ( "bar" , foo.get ( ) ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > ( ) ; org.ovirt.engine.core.common.businessentities.Permission permission = org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( permission.getObjectId ( ) , permission.getObjectType ( ) , org.ovirt.engine.core.bll.PermissionsCommandBase.getActionType ( ) . getActionGroup ( ) ) ) ; return permissionList ; }
public void cancelRecoveryJob ( ) { java.lang.String jobId = org.ovirt.engine.core.vdsbroker.VdsManager.recoveringJobIdMap.remove ( vdsId ) ; if ( jobId != null ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( "Cancelling the recovery from crash timer for VDS '{}' because vds started initializing" , vdsId ) ; try { org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . deleteJob ( jobId ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.warn ( "Failed deleting job '{}' at cancelRecoveryJob: {}" , jobId , e.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.VdsManager.log.debug ( "Exception" , e ) ; } } }
public void testGetNetworkNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetIscsiBondById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.ISCSI_BOND_ID } , getIscsiBondContainingNetwork ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.NETWORK_ID } , null , null ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void removeDiskImage ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.ImagesHandler.removeDiskFromVm ( vmId , diskImage.getId ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.removeImage ( diskImage ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.DB , ex ) ; } }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
protected void endMoveVmCommand ( ) { boolean vmExists = ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) ) != null ; if ( vmExists ) { incrementDbGeneration ( ) ; } org.ovirt.engine.core.bll.MoveVmCommand.endActionOnAllImageGroups ( ) ; if ( vmExists ) { org.ovirt.engine.core.bll.VmHandler.unLockVm ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.MoveVmCommand.getVm ( ) ) ; } else { org.ovirt.engine.core.bll.MoveVmCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "MoveVmCommand::EndMoveVmCommand: Vm is null - not performing full EndAction" ) ; } org.ovirt.engine.core.bll.MoveVmCommand.setSucceeded ( true ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHookEnable ( glusterCommand , stage , hookName ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void canDoActionFailsOnNullDiskInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.DiskImage image = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; image.setvolumeFormat ( VolumeFormat.COW ) ; image.setVolumeType ( VolumeType.Preallocated ) ; org.ovirt.engine.core.common.action.AddDiskParameters params = new org.ovirt.engine.core.common.action.AddDiskParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , image ) ; initializeCommand ( storageId , params ) ; org.junit.Assert.assertFalse ( command.validateInputs ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( "VALIDATION.DISK_INTERFACE.NOT_NULL" ) ) ; }
public void confFileConvertToMapFails ( ) throws java.io.IOException , java.net.URISyntaxException { givenListOfImagesAndVolumes ( ) ; givenTheWantedDiskImage ( ) ; mockVdcCommand ( ActionType.RetrieveImageData , successfulActionReturnValue ( load ( "not-a-valid-hosted-engine-config-tar.tar" ) ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; verifyCalled ( ActionType.RetrieveImageData , org.mockito.Mockito.times ( 1 ) ) ; org.junit.Assert.assertThat ( config , org.hamcrest.core.Is.is ( java.util.Collections.emptyMap ( ) ) ) ; }
public void testGetWithName ( ) { org.ovirt.engine.core.common.businessentities.VDS result = dao.getByName ( existingVds.getName ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingVds.getName ( ) , result.getName ( ) ) ; }
public void init ( ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Initializing Scheduling manager" ) ; loadPolicyUnits ( ) ; loadClusterPolicies ( ) ; org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryThread discoveryThread = exSchedulerDiscoveryProvider.get ( ) ; if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.ExternalSchedulerEnabled ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Starting external scheduler discovery thread" ) ; discoveryThread.start ( ) ; } else { discoveryThread.markAllExternalPoliciesAsDisabled ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "External scheduler disabled, discovery skipped" ) ; } enableLoadBalancer ( ) ; enableHaReservationCheck ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Initialized Scheduling manager" ) ; }
public void testNetworkNotChanged ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; oldAttachment.setNetworkId ( networkId ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNetworkId ( networkId ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . networkNotChanged ( oldAttachment ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public void testCronExpressionForInvalidHourDaily ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule ( ) ; schedule.setFrequency ( Frequency.DAILY ) ; schedule.setHour ( 24 ) ; schedule.setMins ( 59 ) ; java.util.List < java.lang.Class < ? > > validationGroup = new java.util.ArrayList < > ( ) ; java.util.List < java.lang.String > result = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs ( validationGroup , schedule ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.contains ( "SCHEDULE_HOUR_OUT_OF_RANGE" ) ) ; }
public void testInterfaceByNameExistsWhenInterfaceIsNull ( ) throws java.lang.Exception { org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( null ) . interfaceByNameExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotEnabledPolicyNotSetUsbOnPost3_0Cluster ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setcompatibility_version ( Version.v3_1 ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.DISABLED , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.ENABLED_NATIVE ) ; }
protected void selectionChanged ( java.lang.Boolean value ) { org.ovirt.engine.ui.uicommonweb.models.ListModel tableModel = clustersTable.flush ( ) ; for ( java.lang.Object model : tableModel.getItems ( ) ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel ) ( model ) ) ; if ( networkClusterModel.getIsChangable ( ) ) { networkClusterModel.setAttached ( value ) ; } } clustersTable.edit ( tableModel ) ; }
protected void updateAllInBatch ( java.lang.String procedureName , java.util.Collection < T > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < T > mapper ) { java.util.List < T > sortedParamValues = new java.util.ArrayList < > ( paramValues ) ; java.util.Collections.sort ( sortedParamValues , org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityComparator.< T , ID > newInstance ( ) ) ; org.ovirt.engine.core.dao.MassOperationsGenericDao.getCallsHandler ( ) . executeStoredProcAsBatch ( ( procedureName == null ? org.ovirt.engine.core.dao.MassOperationsGenericDao.getProcedureNameForUpdate ( ) : procedureName ) , sortedParamValues , mapper ) ; }
protected org.ovirt.engine.core.vdsbroker.ResourceManager getResourceManager ( ) { return org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) ; }
protected boolean isDiskPassPciAndIdeLimit ( org.ovirt.engine.core.common.businessentities.Disk diskInfo ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNetworkInterfaceDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Disk > allVmDisks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getDiskMap ( ) . values ( ) ) ; allVmDisks.add ( diskInfo ) ; return checkPciAndIdeLimit ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getNumOfMonitors ( ) , vmInterfaces , allVmDisks , org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
protected org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask handleTaskReturn ( org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask ) { org.ovirt.engine.core.compat.Guid externalTaskId = asyncTask.getTaskId ( ) ; asyncTaskStep.setStatus ( JobExecutionStatus.STARTED ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.updateStepExternalId ( asyncTaskStep , externalTaskId , ExternalSystemType.GLUSTER ) ; org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getExecutionContext ( ) . getJob ( ) . setStatus ( JobExecutionStatus.STARTED ) ; asyncTask.setStepId ( asyncTaskStep.getId ( ) ) ; return asyncTask ; }
public void updateExistingVariable ( ) { java.lang.String name = "fence-kdump-listener" ; org.ovirt.engine.core.common.ExternalVariable existing = dao.get ( name ) ; existing.setValue ( "123456" ) ; existing.setUpdateDate ( new java.util.Date ( ) ) ; dao.update ( existing ) ; org.ovirt.engine.core.common.ExternalVariable found = dao.get ( name ) ; org.junit.jupiter.api.Assertions.assertNotNull ( found ) ; org.junit.jupiter.api.Assertions.assertEquals ( existing , found ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ; auditLogDao.remove ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ; setAuditLogDetails ( auditLog ) ; auditLog.setUserId ( Guid.Empty ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( auditLog ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator ( logableToClear , auditLog.getLogType ( ) ) ; eventFloodRegulator.evict ( ) ; org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded ( true ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult ( org.ovirt.engine.core.common.vdscommands.VDSReturnValue result ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( result.getExceptionString ( ) ) ) { org.ovirt.engine.core.common.errors.VdcBLLException exp ; if ( ( result.getVdsError ( ) ) != null ) { exp = new org.ovirt.engine.core.common.errors.VdcBLLException ( result.getVdsError ( ) . getCode ( ) , result.getExceptionString ( ) ) ; } else { exp = new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE , result.getExceptionString ( ) ) ; } throw exp ; } return result ; }
public void twoArgsWithSameShortName ( ) { org.ovirt.engine.core.uutils.cli.ExtendedCliParser parser = new org.ovirt.engine.core.uutils.cli.ExtendedCliParser ( ) ; parser.addArg ( new org.ovirt.engine.core.uutils.cli.ArgumentBuilder ( ) . shortName ( "-a" ) . longName ( "--aa" ) . valueRequired ( true ) . build ( ) ) ; parser.addArg ( new org.ovirt.engine.core.uutils.cli.ArgumentBuilder ( ) . shortName ( "-a" ) . longName ( "--bb" ) . valueRequired ( true ) . build ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model.setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , vm.getVdsGroupId ( ) . getValue ( ) ) ; initTemplate ( ) ; initCdImage ( ) ; initSoundCard ( vm.getId ( ) ) ; }
protected boolean containsDefaultCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = getClusterDao ( ) . getAllForStoragePool ( storagePool.getId ( ) ) ; boolean hasDefaultCluster = false ; for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters ) { if ( cluster.getId ( ) . equals ( org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.AutoRegistrationDefaultClusterID ) ) ) { hasDefaultCluster = true ; break ; } } return hasDefaultCluster ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.gluster.StorageDevice object ) { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit , java.lang.Double > convertedSize = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert ( object.getSize ( ) , SizeUnit.MiB ) ; return ( ( formatSize ( convertedSize.getSecond ( ) ) ) + " " ) + ( convertedSize.getFirst ( ) . toString ( ) ) ; }
private void initVmDiskImage ( boolean isShareable ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setVmEntityType ( VmEntityType.VM ) ; diskImage.setShareable ( isShareable ) ; org.mockito.Mockito.when ( diskImageDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( diskImage ) ; }
public static void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public static void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Network > getAllForDataCenter ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { return getCallsHandler ( ) . executeReadList ( "GetAllNetworkByStoragePoolId" , org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ) ; }
public void testPositiveCanDoActionWithDisks ( ) { setUpGeneralValidations ( ) ; setUpDiskValidations ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) . when ( cmd ) . getStorageDomainId ( ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . isEmpty ( ) ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { org.junit.jupiter.api.Assertions.assertNotNull ( model ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getId ( ) , java.lang.String.valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( LogSeverity.ALERT , model.getSeverity ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getDescription ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getOrigin ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getCustomId ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
public static boolean isPrestartedVmForAssignment ( org.ovirt.engine.core.compat.Guid vm_guid ) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDAO ( ) . get ( vm_guid ) ; if ( ( ( vmDynamic != null ) && ( ( vmDynamic.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) ) && ( org.ovirt.engine.core.bll.VmPoolCommandBase.canAttachPrestartedVmToUser ( vm_guid ) ) ) { return true ; } else { return false ; } }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStoragePoolIsoMapDao ( ) ; storagePoolIsoMapDao = dbFacade.getStoragePoolDao ( ) ; existingPool = storagePoolIsoMapDao.get ( FixturesTool.DATA_CENTER ) ; existingStoragePoolIsoMap = dao.get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 , existingPool.getId ( ) ) ) ; newStoragePoolIsoMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( FixturesTool.STORAGE_DOMAIN_SCALE_SD6 , existingPool.getId ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unattached ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] array = ( ( java.lang.Object [ ] ) ( target ) ) ; org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel ) ( array [ 0 ] ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel exportVmModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( array [ 1 ] ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePools = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; vmListModel.postShowWarningOnExistingVms ( exportVmModel , storagePools , getVmOrTemplateQuery ) ; }
public void parseInvalidString ( ) { java.lang.String [ ] invalidValues = new java.lang.String [ ] { "clust" , "clust,dc" , "cluster,d" , "cluster, dc" } ; for ( java.lang.String invalidValue : invalidValues ) { try { org.ovirt.engine.core.common.utils.pm.FenceProxySourceTypeHelper.parseFromString ( invalidValue ) ; org.junit.jupiter.api.Assertions.fail ( java.lang.String.format ( "Value '%s' is not valid argument of FenceProxySourceTypeHelper.parseFromString." , invalidValue ) ) ; } catch ( java.lang.IllegalArgumentException ignore ) { } } }
private void refreshClusterData ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { log.debug ( "Refreshing Gluster lightweight Data for cluster '{}'" , cluster.getName ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > existingServers = getVdsDao ( ) . getAllForVdsGroup ( cluster.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS upServer = getClusterUtils ( ) . getUpServer ( cluster.getId ( ) ) ; if ( upServer == null ) { log.debug ( "No server UP in cluster '{}'. Can't refresh it's data at this point." , cluster.getName ( ) ) ; return ; } refreshServerData ( cluster , upServer , existingServers ) ; refreshVolumeData ( cluster , upServer , existingServers ) ; }
private void initCommandExecutor ( ) { if ( ! ( cmdExecutorInitialized ) ) { for ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled ( ) ) { if ( ! ( cmdEntity.isExecuted ( ) ) ) { coco.retrieveCommand ( cmdEntity.getId ( ) ) . setCommandStatus ( CommandStatus.FAILED_RESTARTED ) ; } else if ( ! ( cmdEntity.isCallBackNotified ( ) ) ) { addToCallBackMap ( cmdEntity ) ; } } cmdExecutorInitialized = true ; } }
public void validCustomDevPropSpec ( ) { java.lang.String customDevPropSpec = "{type=disk;prop={bootable=^(true|false)$}};" + ( ( ( ( ( ( ( ( "{type=interface;prop={speed=[0-9]{1,5};duplex=^(full|half)$;debug=([a-z0-9A-Z]*)$}};" + "{type=video;prop={turned_on=^(true|false)$}};" ) + "{type=sound;prop={volume=[0-9]{1,2}}};" ) + "{type=controller;prop={hotplug=^(true|false)$}};" ) + "{type=balloon;prop={max_size=[0-9]{1,15}}};" ) + "{type=channel;prop={auth_type=^(plain|md5|kerberos)$}};" ) + "{type=redir;prop={max_len=[0-9]{1,15}}};" ) + "{type=console;prop={type=^(text|vnc)$}};" ) + "{type=smartcard;prop={version=([1-9]{1}).([0-9]{1})}}" ) ; org.ovirt.engine.core.utils.customprop.DevicePropertiesUtils utils = org.ovirt.engine.core.utils.customprop.DevicePropertiesUtils.getInstance ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( utils.isDevicePropertiesDefinitionValid ( customDevPropSpec ) ) ; }
private void runHttpMethod ( org.apache.commons.httpclient.HttpClient httpClient , org.apache.commons.httpclient.HttpMethod httpMethod ) { try { int result = httpClient.executeMethod ( httpMethod ) ; if ( result != ( java.net.HttpURLConnection.HTTP_OK ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE ) ; } } catch ( org.apache.commons.httpclient.HttpException e ) { handleException ( e ) ; } catch ( javax.net.ssl.SSLException e ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_SSL_FAILURE , e.getMessage ( ) ) ; } catch ( java.io.IOException e ) { handleException ( e ) ; } }
public org.ovirt.engine.core.common.businessentities.DbUser addUserToThreadContext ( java.lang.String sessionId , boolean refresh ) { org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getUser ( ) ; if ( dbUser == null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( sessionId ) ) ) { dbUser = getUser ( sessionId , refresh ) ; org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( sessionId ) ; } else { dbUser = getUser ( refresh ) ; } org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setUser ( dbUser ) ; } return dbUser ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( masterDomain.getStoragePoolIsoMapData ( ) ) ; masterDomain.setStatus ( StorageDomainStatus.Locked ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . update ( masterDomain.getStoragePoolIsoMapData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void onBondEditUpdateParams ( org.ovirt.engine.core.common.businessentities.network.Bond bond ) { for ( java.util.Iterator < org.ovirt.engine.core.common.businessentities.network.Bond > iter = hostSetupNetworksParametersData.newOrModifiedBonds.iterator ( ) ; iter.hasNext ( ) ; ) { org.ovirt.engine.core.common.businessentities.network.Bond oldModifiedBond = iter.next ( ) ; if ( oldModifiedBond.getName ( ) . equals ( bond.getName ( ) ) ) { iter.remove ( ) ; break ; } } hostSetupNetworksParametersData.newOrModifiedBonds.add ( bond ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { syncSelectedItemWithNetworkInterface ( model ) ; com.google.gwt.event.logical.shared.ValueChangeEvent.fire ( this , model ) ; }
public void testNetworkExistsWhenValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator networkAttachmentValidatorSpy = org.mockito.Mockito.spy ( createNetworkAttachmentValidator ( new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ) ) ; org.mockito.Mockito.doReturn ( networkValidatorMock ) . when ( networkAttachmentValidatorSpy ) . getNetworkValidator ( ) ; java.lang.String variableReplacements = "a" ; org.ovirt.engine.core.bll.ValidationResult propagatedResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NOT_EXISTS , variableReplacements ) ; org.mockito.Mockito.when ( networkValidatorMock.networkIsSet ( ) ) . thenReturn ( propagatedResult ) ; org.junit.Assert.assertThat ( "ValidationResult is not correctly propagated" , networkAttachmentValidatorSpy.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_NOT_EXISTS , variableReplacements ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( ev.matchesDefinition ( ListModel.itemsChangedEventDefinition ) ) { handleItemsChangedEventDefinition ( sender ) ; } else if ( ev.matchesDefinition ( ListModel.selectedItemChangedEventDefinition ) ) { handleSelectedItemChangedEventDefinition ( sender , args ) ; } else if ( ev.matchesDefinition ( HasEntity.entityChangedEventDefinition ) ) { handleEntityChangedEventDefinition ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn extendStorageDomain ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String [ ] devlist , boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "StorageDomain.extend" ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "devlist" , new java.util.ArrayList < > ( java.util.Arrays.asList ( devlist ) ) ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Role > getAll ( ) { java.lang.Integer appMode = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.ApplicationMode ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "app_mode" , appMode.intValue ( ) ) ; return getCallsHandler ( ) . executeReadList ( "GetAllFromRole" , org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance , parameterSource ) ; }
public void testGetDefaultQuotaToDCWithoutDefaultQuota ( ) throws java.lang.Exception { java.lang.String defaultQuotaName = quotaHelper.getDefaultQuotaName ( storagePool.getname ( ) ) ; org.mockito.Mockito.when ( quotaHelper.generateDefaultQuotaName ( storagePool ) ) . thenReturn ( defaultQuotaName ) ; org.ovirt.engine.core.common.businessentities.Quota quotaUnlimited = quotaHelper.getUnlimitedQuota ( mockStoragePool ( ) , true ) ; assertQuotaUnlimited ( quotaUnlimited ) ; assertQuotaUnlimitedName ( quotaUnlimited ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue ( ) ; boolean succeeded = false ; if ( ( retVal != null ) && ( retVal.getSucceeded ( ) ) ) { succeeded = true ; } postSaveAction ( ( succeeded ? ( ( org.ovirt.engine.core.compat.Guid ) ( retVal.getActionReturnValue ( ) ) ) : null ) , succeeded ) ; }
private static int setCDBootOrder ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices , int bootOrder ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isCD ( device ) ) { if ( device.getIsPlugged ( ) ) { device.setBootOrder ( ( ++ bootOrder ) ) ; } break ; } } return bootOrder ; }
protected void initSelectedType ( ) { final org.ovirt.engine.core.common.businessentities.network.VmInterfaceType defaultNicType = getDeafultNicTypeByProfile ( ) ; final java.util.Collection < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > vnicTypes = ( ( supportedVnicTypes ) == null ) ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ( ) : supportedVnicTypes ; if ( ( getNicType ( ) . getItems ( ) ) == null ) { getNicType ( ) . setItems ( vnicTypes , defaultNicType ) ; } else { getNicType ( ) . setSelectedItem ( defaultNicType ) ; } }
public void setup ( ) { qos = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS ( ) ; oldQos = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS ( ) ; allQos = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.NetworkQosValidator ( qos ) ) ; org.mockito.Mockito.doReturn ( oldQos ) . when ( validator ) . getOldQos ( ) ; org.mockito.Mockito.doReturn ( allQos ) . when ( validator ) . getAllQosInDc ( ) ; nullValidator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.validator.NetworkQosValidator ( null ) ) ; org.mockito.Mockito.doReturn ( oldQos ) . when ( nullValidator ) . getOldQos ( ) ; }
public void testFilter ( ) throws org.apache.xmlrpc.XmlRpcException { java.util.List < java.lang.String > result = proxy.filter ( new java.lang.String [ ] { org.ovirt.schedulerproxy.SchedulerProxyTest.FILE_NAME } , org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ARRAY , org.ovirt.schedulerproxy.SchedulerProxyTest.VM_ID , "" ) ; org.junit.Assert.assertTrue ( ( ( result.size ( ) ) == 2 ) ) ; org.junit.Assert.assertTrue ( result.contains ( org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ID1 ) ) ; org.junit.Assert.assertTrue ( result.contains ( org.ovirt.schedulerproxy.SchedulerProxyTest.HOST_ID2 ) ) ; }
public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead ( ) { vm.setMinAllocatedMem ( 8865 ) ; vm.setVmMemSizeMb ( 8865 ) ; org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
private final < T extends org.ovirt.engine.core.common.businessentities.IVdcQueryable > java.util.List < T > genericSearch ( final org.ovirt.engine.core.dao.SearchDAO < T > dao , final boolean useCache , final org.ovirt.engine.core.common.utils.ListUtils.Filter < T > filter ) { final org.ovirt.engine.core.bll.QueryData data = initQueryData ( useCache ) ; if ( data == null ) { return new java.util.ArrayList < T > ( ) ; } return org.ovirt.engine.core.common.utils.ListUtils.filter ( dao.getAllWithQuery ( data.getQuery ( ) ) , filter ) ; }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters ( org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters , org.ovirt.engine.core.compat.Guid vmId ) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters ( moveDiskParameters.getImageId ( ) , moveDiskParameters.getSourceDomainId ( ) , moveDiskParameters.getStorageDomainId ( ) , vmId , moveDiskParameters.getQuotaId ( ) , moveDiskParameters.getDiskProfileId ( ) , diskMap.get ( moveDiskParameters.getImageId ( ) ) . getId ( ) ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public java.lang.Void runInTransaction ( ) { processOldImageFromDb ( ) ; addDiskImageToDb ( mNewCreatedDiskImage , getCompensationContext ( ) ) ; setActionReturnValue ( mNewCreatedDiskImage ) ; setSucceeded ( true ) ; return null ; }
protected boolean migrateVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.bll.job.ExecutionContext parentContext ) { org.ovirt.engine.core.common.action.InternalMigrateVmParameters parameters = new org.ovirt.engine.core.common.action.InternalMigrateVmParameters ( vm.getId ( ) , org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType ( ) ) ; parameters.setReason ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage ( AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE ) ) ; return runInternalAction ( VdcActionType.InternalMigrateVm , parameters , createMigrateVmContext ( parentContext , vm ) ) . getSucceeded ( ) ; }
protected boolean isDiskPassPciAndIdeLimit ( org.ovirt.engine.core.common.businessentities.Disk diskInfo ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNicDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Disk > allVmDisks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getDiskMap ( ) . values ( ) ) ; allVmDisks.add ( diskInfo ) ; return checkPciAndIdeLimit ( org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm ( ) . getNumOfMonitors ( ) , vmInterfaces , allVmDisks , org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDS getHost ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getParameters ( ) . getVdsId ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( ( ( org.ovirt.engine.core.compat.Guid ) ( id != null ? id : org.ovirt.engine.core.compat.Guid.Empty ) ) ) ; vds.setStoragePoolId ( org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getParameters ( ) . getStoragePoolId ( ) ) ; vds.setPmProxyPreferences ( org.ovirt.engine.core.bll.GetFenceAgentStatusQuery.getParameters ( ) . getPmProxyPreferences ( ) ) ; return vds ; }
public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap = asyncTask.getEntitiesMap ( ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entry : entitiesMap.entrySet ( ) ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.getAsyncTaskDao ( ) . insertAsyncTaskEntity ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) . getTaskId ( ) , entry.getKey ( ) , entry.getValue ( ) ) ; } return null ; }
protected boolean canDoAction ( ) { if ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget ( ) ) { org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getImportValidator ( ) ; if ( ! ( validate ( importValidator.validateUnregisteredEntity ( vmFromConfiguration , ovfEntityData , org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getImages ( ) ) ) ) ) { return false ; } setImagesWithStoragePoolId ( org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm ( ) . getImages ( ) ) ; } return super . canDoAction ( ) ; }
protected java.lang.Object runQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , java.lang.String sessionId , javax.naming.InitialContext ctx ) { org.ovirt.engine.core.common.queries.QueryParametersBase queryParams = new org.ovirt.engine.core.common.queries.QueryParametersBase ( ) ; queryParams.setSessionId ( sessionId ) ; queryParams.setFiltered ( org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.FILTER_QUERIES ) ; org.ovirt.engine.core.common.queries.QueryReturnValue result = org.ovirt.engine.core.aaa.filters.FiltersHelper.getBackend ( ctx ) . runQuery ( queryType , queryParams ) ; return ( result != null ) && ( result.getSucceeded ( ) ) ? result.getReturnValue ( ) : null ; }
private void UpdateActionAvailability ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( getSelectedItem ( ) ) ) ; getSetAsDisplayCommand ( ) . setIsExecutionAllowed ( ( ( ( ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItems ( ) . size ( ) ) == 1 ) ) && ( network != null ) ) && ( ! ( network.getCluster ( ) . isDisplay ( ) ) ) ) && ( ( network.getCluster ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.network.NetworkStatus.NON_OPERATIONAL ) ) ) ) ; }
private java.util.List < org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError > validateProperties ( org.ovirt.engine.core.compat.Version version , java.lang.String properties ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( properties ) ) { return java.util.Collections.emptyList ( ) ; } if ( syntaxErrorInProperties ( properties ) ) { return invalidSyntaxValidationError ; } java.util.Map < java.lang.String , java.lang.String > map = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; java.util.List < org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError > result = populateVMProperties ( version , properties , map ) ; return result ; }
private org.ovirt.engine.core.common.scheduling.AffinityGroup createAffinityGroup ( org.ovirt.engine.core.common.businessentities.Cluster cluster , java.lang.Boolean isPositive , final org.ovirt.engine.core.common.businessentities.VM ... vmList ) { org.ovirt.engine.core.common.scheduling.AffinityGroup ag = new org.ovirt.engine.core.common.scheduling.AffinityGroup ( ) ; ag.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; ag.setPositive ( isPositive ) ; ag.setClusterId ( cluster.getId ( ) ) ; ag.setEnforcing ( true ) ; ag.setEntityIds ( java.util.Arrays.stream ( vmList ) . map ( VM :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ) ; return ag ; }
public void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public void updateCommandStatus ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.compat.CommandStatus status ) { final org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get ( commandId ) ; if ( cmdEntity != null ) { cmdEntity.setCommandStatus ( status ) ; if ( ( taskType.equals ( AsyncTaskType.notSupported ) ) || ( cmdEntity.isCallBackEnabled ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . saveOrUpdate ( cmdEntity ) ; } } }
public void networkExists ( ) { simulateClusterExists ( ) ; org.mockito.Mockito.when ( mockNetworkDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( getNetwork ( ) ) ; org.mockito.Mockito.when ( mockNetworkClusterDao.get ( param.getNetworkCluster ( ) . getId ( ) ) ) . thenReturn ( param.getNetworkCluster ( ) ) ; assertValidateFailure ( EngineMessage.NETWORK_ALREADY_ATTACHED_TO_CLUSTER.toString ( ) ) ; }
private static void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
public void testUpdateNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) ; try { resource.update ( getNic ( false ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void shouldNotCreateCpuPinningForVirtualNumaNodes ( ) { for ( org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode : org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) { numaNode.getVdsNumaNodeList ( ) . clear ( ) ; } java.util.Map < java.lang.String , java.lang.Object > cpuPinning = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildCpuPinningWithNumaSetting ( org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes ) ; org.assertj.core.api.Assertions.assertThat ( cpuPinning ) . isEmpty ( ) ; java.util.Map < java.lang.String , java.lang.Object > mapping = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting ( NumaTuneMode.INTERLEAVE , org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes ) ; org.assertj.core.api.Assertions.assertThat ( mapping ) . doesNotContainKeys ( VdsProperties.NUMA_TUNE_MODE , VdsProperties.NUMA_TUNE_NODESET ) ; }
public void canRemoveIncreaseReplica ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedReplicatedVolume ( volumeId1 , 12 , 4 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricksToRemove = new java.util.ArrayList < > ( ) ; bricksToRemove.add ( volumeEntity.getBricks ( ) . get ( 0 ) ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick ( bricksToRemove , volumeEntity , 5 , false ) ; org.junit.Assert.assertThat ( validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT ) ) ; }
public void getLunConnectionsForFC ( ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( ) ; lun.setLunConnections ( connections ) ; java.util.Map < org.ovirt.engine.core.common.businessentities.storage.StorageType , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > connectionsByType = org.ovirt.engine.core.bll.storage.StorageHelperBase.filterConnectionsByStorageType ( lun ) ; org.junit.Assert.assertTrue ( "Map of storage connections should be empty." , connectionsByType.isEmpty ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc prepareImage ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Image.prepare" ) . withParameter ( "storagepoolID" , spID ) . withParameter ( "storagedomainID" , sdID ) . withParameter ( "imageID" , imageID ) . withParameter ( "volumeID" , volumeID ) . withParameter ( "allowIllegal" , allowIllegal ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc ( response ) ; }
public void testNetworkExistWhenOnlyNetworkNameIsSet ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkName ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidatorTest.NETWORK_NAME ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( networkAttachment ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_HAVING_NAME_NOT_EXISTS ; org.junit.Assert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , org.ovirt.engine.core.bll.validator.NetworkAttachmentValidatorTest.NETWORK_NAME ) ) ) ; }
public static void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( T value ) { if ( ( value == null ) || ( ( value.getComment ( ) ) == null ) ) { return null ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( value.getComment ( ) ) ; }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = getReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case UnknownTask : log.error ( "Trying to remove unknown task '{}'" , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ; return ; case TaskStateError : initializeVdsError ( returnStatus ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.HSMClearTaskVDSCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; return ; } super . proceedProxyReturnValue ( ) ; }
protected java.util.List < org.ovirt.engine.core.compat.Guid > getPredefinedVdsIdListToRunOn ( ) { if ( ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getDestinationVdsId ( ) ) != null ) { java.util.List < org.ovirt.engine.core.compat.Guid > destIdList = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ; destIdList.add ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getDestinationVdsId ( ) ) ; return destIdList ; } return super . getPredefinedVdsIdListToRunOn ( ) ; }
public void testCanDoSuccessOnAddFloatingDiskWithPlugUnset ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createDiskImage ( 1 ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; parameters.setVmId ( Guid.Empty ) ; parameters.setPlugDiskToVm ( false ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , parameters ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
public void testExecuteNoTaskHandlers ( ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameterMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.action.VdcActionParametersBase.class ) ; org.mockito.Mockito.when ( parameterMock.getTransactionScopeOption ( ) ) . thenReturn ( TransactionScopeOption.Required ) ; org.mockito.Mockito.when ( parameterMock.getLockProperties ( ) ) . thenReturn ( org.ovirt.engine.core.common.action.LockProperties.create ( LockProperties.Scope.None ) ) ; org.ovirt.engine.core.bll.CommandBase < org.ovirt.engine.core.common.action.VdcActionParametersBase > command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy ( parameterMock ) ) ; command.insertAsyncTaskPlaceHolders ( ) ; command.executeAction ( ) ; org.mockito.Mockito.verify ( command ) . executeCommand ( ) ; }
public static void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public boolean isVisible ( ) { return ( ( getDetailModel ( ) . getIsPosix ( ) ) && ( ( getDetailModel ( ) . getVfsType ( ) ) != null ) ) && ( ! ( getDetailModel ( ) . getVfsType ( ) . isEmpty ( ) ) ) ; }
public static void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
public void runMultipleActionsFailed ( java.util.Map < org.ovirt.engine.core.common.action.VdcActionType , java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > > failedActionsMap , org.ovirt.engine.ui.frontend.IFrontendEventsHandler.MessageFormatter messageFormatter ) { java.util.Collection < org.ovirt.engine.core.common.action.VdcReturnValueBase > failedResults = new java.util.ArrayList < > ( ) ; for ( java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > vdcActionTypeResults : failedActionsMap.values ( ) ) { failedResults.addAll ( vdcActionTypeResults ) ; } translateErrors ( failedResults ) ; getEventsHandler ( ) . runMultipleActionsFailed ( failedActionsMap , messageFormatter ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { org.ovirt.engine.core.compat.Guid macPoolIdToUse = ( ( getParameters ( ) . getMacPool ( ) ) == null ) ? null : getParameters ( ) . getMacPool ( ) . getId ( ) ; return java.util.Collections.singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( macPoolIdToUse , org.ovirt.engine.core.common.VdcObjectType.MacPool , org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_MAC_POOL ) ) ; }
public boolean equals ( java.lang.Object other ) { return org.ovirt.engine.core.bll.scheduling.utils.VmSpecificPendingResourceEqualizer.isEqual ( this , other ) ; }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void getVmById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
java.lang.String resolveMessage ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable ) { java.lang.String returnValue = message ; if ( logable != null ) { java.util.Map < java.lang.String , java.lang.String > map = getAvailableValues ( message , logable ) ; returnValue = resolveMessage ( message , map ) ; } return returnValue ; }
private void RestoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { log.infoFormat ( "Deleting snapshots for stateless vm {0}" , vm.getId ( ) ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; restoreParams.setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.RestoreStatelessVm , restoreParams , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getExecutionContext ( ) , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getLock ( ) ) ) ; } }
public void testAllDomainsHaveSpaceForNewDisksFailure ( ) { setUpGeneralValidations ( ) ; setUpDiskValidations ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = java.util.Collections.emptyList ( ) ; org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getDisksListForChecks ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleStorageDomainsValidator ) . allDomainsHaveSpaceForNewDisks ( disksList ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; org.mockito.Mockito.verify ( multipleStorageDomainsValidator ) . allDomainsHaveSpaceForNewDisks ( disksList ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getEnableKsm ( ) . getEntity ( ) ) == null ) { return ; } if ( ( getEnableKsm ( ) . getEntity ( ) ) == true ) { getKsmPolicyForNumaSelection ( ) . setIsChangeable ( true ) ; } if ( ( getEnableKsm ( ) . getEntity ( ) ) == false ) { getKsmPolicyForNumaSelection ( ) . setIsChangeable ( false ) ; } }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public void provisioningValidated ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; org.mockito.Mockito.verify ( validator , org.mockito.Mockito.times ( 1 ) ) . provisioningComputeResourceValid ( org.mockito.ArgumentMatchers.anyBoolean ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( validator , org.mockito.Mockito.times ( 1 ) ) . provisioningHostGroupValid ( org.mockito.ArgumentMatchers.anyBoolean ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( "STATUS" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ImageStatus.class ) ; } else if ( "DISK_TYPE" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.class ) ; } else if ( ( "BOOTABLE" . equals ( fieldName ) ) || ( "SHAREABLE" . equals ( fieldName ) ) ) { return new org.ovirt.engine.core.searchbackend.BitValueAutoCompleter ( ) ; } return null ; }
protected void HandleUserSession ( org.ovirt.engine.core.common.businessentities.AdUser adUser ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getHttpSessionId ( ) ) ) ) { org.ovirt.engine.core.dal.dbbroker.user_sessions user_sessions = new org.ovirt.engine.core.dal.dbbroker.user_sessions ( "" , "" , new java.util.Date ( ) , "" , org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getHttpSessionId ( ) , adUser.getUserId ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . saveSession ( user_sessions ) ; } }
public void testResetOption ( ) throws java.lang.Exception { setupParentExpectations ( ) ; resource.setParent ( volumesResourceMock ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.ResetGlusterVolumeOptions , org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters.class , new java.lang.String [ ] { "VolumeId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setOption ( new org.ovirt.engine.api.model.Option ( ) ) ; action.getOption ( ) . setName ( "auth.allow" ) ; verifyActionResponse ( resource.resetOption ( action ) ) ; }
protected boolean isDiskExist ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator ( disk ) ; if ( ! ( validate ( diskValidator.isDiskExists ( ) ) ) ) { return false ; } if ( ! ( isDiskExistInVm ( disk ) ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST ) ; return false ; } return true ; }
public void testMigrateWithHostId ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.MigrateVmToServer , org.ovirt.engine.core.common.action.MigrateVmToServerParameters.class , new java.lang.String [ ] { "VmId" , "VdsId" , "ForceMigrationForNonMigratableVm" } , new java.lang.Object [ ] { GUIDS [ 0 ] , GUIDS [ 1 ] , java.lang.Boolean.FALSE } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; action.getHost ( ) . setId ( GUIDS [ 1 ] . toString ( ) ) ; verifyActionResponse ( resource.migrate ( action ) ) ; }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParameters ( ) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) , "stateless snapshot" ) ; createAllSnapshotsFromVmParameters.setShouldBeLogged ( false ) ; createAllSnapshotsFromVmParameters.setParentCommand ( org.ovirt.engine.core.bll.RunVmCommand.getActionType ( ) ) ; createAllSnapshotsFromVmParameters.setParentParameters ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) ) ; createAllSnapshotsFromVmParameters.setEntityInfo ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getEntityInfo ( ) ) ; createAllSnapshotsFromVmParameters.setSnapshotType ( SnapshotType.STATELESS ) ; return createAllSnapshotsFromVmParameters ; }
public static java.lang.String encryptPassword ( java.lang.String password ) { try { return org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.encrypt ( password ) ; } catch ( java.lang.Exception e ) { throw new java.lang.SecurityException ( e ) ; } }
private void addQuotaToStorageQuotaList ( org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser quotaPerUserUsageEntity ) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar storageQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaStorageProgressBar ( quotaPerUserUsageEntity ) ; addQuotaRow ( storageQuotasList , quotaPerUserUsageEntity.getQuotaName ( ) , storageQuotaProgressBar ) ; }
private void buildVmData ( ) { builder.buildVmProperties ( ) ; builder.buildVmVideoCards ( ) ; builder.buildVmCD ( ) ; builder.buildVmFloppy ( ) ; builder.buildVmDrives ( ) ; builder.buildVmNetworkInterfaces ( ) ; builder.buildVmNetworkCluster ( ) ; builder.buildVmBootSequence ( ) ; builder.buildVmBootOptions ( ) ; builder.buildVmSoundDevices ( ) ; builder.buildVmTimeZone ( ) ; builder.buildVmUsbDevices ( ) ; builder.buildVmMemoryBalloon ( ) ; builder.buildVmWatchdog ( ) ; builder.buildUnmanagedDevices ( ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( 2 , false , false , false , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public java.lang.Void runInTransaction ( ) { if ( ( ! ( imageTemplates.isEmpty ( ) ) ) && ( removeVmTemplateImages ( ) ) ) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB ( getVmTemplate ( ) ) ; setSucceeded ( true ) ; } if ( ! ( cinderDisks.isEmpty ( ) ) ) { removeCinderDisks ( cinderDisks ) ; setSucceeded ( true ) ; } return null ; }
private java.lang.Object getBackendParameter ( final org.ovirt.engine.core.common.config.ConfigValues key ) throws javax.servlet.ServletException { final org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( ) ; parameters.setConfigValue ( key ) ; parameters.setVersion ( ConfigCommon.defaultConfigurationVersion ) ; org.ovirt.engine.core.common.queries.QueryReturnValue value = backend.runPublicQuery ( QueryType.GetConfigurationValue , parameters ) ; if ( ! ( value.getSucceeded ( ) ) ) { throw new javax.servlet.ServletException ( ( ( "Can\'t get value of backend parameter \"" + key ) + "\"." ) ) ; } return value.getReturnValue ( ) ; }
public org.ovirt.engine.sdk.entities.Action suspend ( org.ovirt.engine.sdk.entities.Action action ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( this . getHref ( ) ) + "/suspend" ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . action ( url , action , org.ovirt.engine.sdk.entities.Action.class , org.ovirt.engine.sdk.entities.Action.class , headers ) ; }
private boolean deviceCanBeRemoved ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { if ( ( ! ( vmDevice.getDevice ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) ) || ( ! ( vmDevice.isManaged ( ) ) ) ) { return true ; } return ( ( vmDevice.getSnapshotId ( ) ) == null ) && ( getDiskDao ( ) . get ( vmDevice.getDeviceId ( ) ) . isAllowSnapshot ( ) ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.GetVmByVmIdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > ( ) ) ; control.replay ( ) ; try { resource.update ( getNic ( false ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public static org.ovirt.vdsm.jsonrpc.client.TestManagerProvider createProvider ( ) { return new org.ovirt.vdsm.jsonrpc.client.TestManagerProvider ( java.lang.ClassLoader.getSystemResourceAsStream ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.KEYSTORE_NAME ) , java.lang.ClassLoader.getSystemResourceAsStream ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.TRUSTSTORE_NAME ) , org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.PASSWORD ) ; }
private void addNetworkToHosts ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getDbFacade ( ) . getInterfaceDao ( ) . getAllInterfacesByLabelForCluster ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getParameters ( ) . getVdsGroupId ( ) , getPersistedNetwork ( ) . getLabel ( ) ) ; org.ovirt.engine.core.bll.network.AddNetworkParametersBuilder builder = new org.ovirt.engine.core.bll.network.AddNetworkParametersBuilder ( getPersistedNetwork ( ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = builder.buildParameters ( nics ) ; if ( ! ( parameters.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getBackend ( ) . runInternalMultipleActions ( VdcActionType.PersistentSetupNetworks , parameters ) ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { org.ovirt.engine.core.dao.VdsGroupDao vdsGroupDao = getVdsGroupDao ( ) ; org.ovirt.engine.core.compat.Version slaveCompatibilityVersion = vdsGroupDao.get ( slaveVolume.getClusterId ( ) ) . getCompatibilityVersion ( ) ; org.ovirt.engine.core.compat.Version masterCompatibilityVersion = vdsGroupDao.get ( masterVolume.getClusterId ( ) ) . getCompatibilityVersion ( ) ; return masterCompatibilityVersion.equals ( slaveCompatibilityVersion ) ; }
public void saveJobSubjectEntity ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitybeforeSave = dao.getJobSubjectEntityByJobId ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( entitybeforeSave.isEmpty ( ) ) ) ) ; dao.save ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID , org.ovirt.engine.core.compat.Guid.newGuid ( ) , VdcObjectType.VmPool ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entityAfterSave = dao.getJobSubjectEntityByJobId ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID ) ; org.junit.jupiter.api.Assertions.assertEquals ( ( ( entitybeforeSave.size ( ) ) + 1 ) , entityAfterSave.size ( ) , "Job subject entities before and after adding new entity" ) ; }
public java.util.List < org.ovirt.engine.core.common.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.common.PermissionSubject > permissionList = super . getPermissionCheckSubjects ( ) ; if ( ( ( getVm ( ) ) != null ) && ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( getVm ( ) . getCustomProperties ( ) ) ) ) ) { permissionList.add ( new org.ovirt.engine.core.common.PermissionSubject ( getVm ( ) . getvds_group_id ( ) , org.ovirt.engine.core.common.VdcObjectType.VdsGroups , org.ovirt.engine.core.common.businessentities.ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES ) ) ; } return permissionList ; }
public static void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.vms.VmGeneralModel vmGeneralModel , final org.ovirt.engine.ui.uicommonweb.models.vms.VmImportInterfaceListModel vmImportInterfaceListModel , final org.ovirt.engine.ui.uicommonweb.models.vms.VmAppListModel vmAppListModel ) { getClusterQuota ( ) . setIsAvailable ( false ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( vmGeneralModel ) ; list.add ( vmImportInterfaceListModel ) ; list.add ( importDiskListModel ) ; list.add ( vmAppListModel ) ; setDetailModels ( list ) ; }
protected abstract org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters createParameters ( org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid , org.ovirt.engine.core.compat.Guid destStorageDomainGuid , org.ovirt.engine.core.common.businessentities.DiskImage disk ) ;
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskResourceTest.DISK_ID } , getEntity ( 1 , true ) ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void addNetworkFiltersToNic ( java.util.Map < java.lang.String , java.lang.Object > struct , org.ovirt.engine.core.common.businessentities.network.VmNic vmNic ) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.fetchVnicProfileNetworkFilter ( vmNic ) ; if ( networkFilter != null ) { final java.lang.String networkFilterName = networkFilter.getName ( ) ; struct.put ( VdsProperties.NW_FILTER , networkFilterName ) ; } }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel poolGeneralModel , final org.ovirt.engine.ui.uicommonweb.models.pools.PoolVmListModel poolVmListModel , final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel permissionListModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( poolGeneralModel ) ; list.add ( poolVmListModel ) ; list.add ( permissionListModel ) ; setDetailModels ( list ) ; }
protected void syncSearch ( ) { super . syncSearch ( ) ; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ; params.setRefresh ( false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSystemPermissions , params , new org.ovirt.engine.ui.uicommonweb.models.configure.SetItemsAsyncQuery ( ) ) ; }
public static void addDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskToVmIfNotExists ( image , vmId ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
protected void removeVmUsers ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.TagsVmMap > all = getTagDao ( ) . getTagVmMapByVmIdAndDefaultTag ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.TagsVmMap tagVm : all ) { getTagDao ( ) . detachVmFromTag ( tagVm.gettag_id ( ) , org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } }
public void testInterfaceIsValidSlaveWhenInterfaceIsBond ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setBonded ( true ) ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostInterfaceValidator.VAR_INTERFACE_NAME , vdsNetworkInterface.getName ( ) ) ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceIsValidSlave ( ) , matcher ) ; }
private static void exportResource ( java.lang.String apiVersion , java.lang.String resourceName , java.io.File outputDirectory ) throws java.io.IOException { java.lang.String resourcePath = java.lang.String.format ( "/v%s/%s" , apiVersion , resourceName ) ; java.io.InputStream inputResource = org.ovirt.engine.api.rsdl.RsdlIOManager.class . getResourceAsStream ( resourcePath ) ; java.io.File outputFile = new java.io.File ( outputDirectory , resourceName ) ; java.lang.System.out.printf ( "Copying resource \"%s\" to file \"%s\"\n" , resourcePath , outputFile.getAbsolutePath ( ) ) ; org.apache.commons.io.FileUtils.copyInputStreamToFile ( inputResource , outputFile ) ; }
private java.util.List < org.ovirt.engine.core.common.queries.QueryReturnValue > createQueryResultList ( final org.ovirt.engine.core.common.queries.QueryReturnValue resultValue , int count ) { java.util.List < org.ovirt.engine.core.common.queries.QueryReturnValue > result = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { result.add ( resultValue ) ; } return result ; }
public static void removeDiskImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , org.ovirt.engine.core.compat.Guid vmId ) { try { org.ovirt.engine.core.bll.ImagesHandler.removeDiskFromVm ( vmId , diskImage.getId ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.removeImage ( diskImage ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
com.google.gwt.user.cellview.client.Header < ? > createSafeHtmlHeader ( final com.google.gwt.safehtml.shared.SafeHtml text ) { return new com.google.gwt.user.cellview.client.Header < com.google.gwt.safehtml.shared.SafeHtml > ( new org.ovirt.engine.ui.common.widget.table.cell.SafeHtmlCellWithTooltip ( ) ) { @ java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue ( ) { if ( ( text != null ) && ( applyResizableHeaderStyle ) ) { return templates.nonResizeableColumnHeader ( text ) ; } return text ; } } ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.util.Collections.emptyList ( ) ; } } ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
public boolean getIsQxlSupported ( ) { boolean isLinux = getIsLinuxOS ( ) ; boolean isQxl = ( getDisplayType ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ; boolean clusterSupportsSinglePci = ( ( getSelectedCluster ( ) ) != null ) && ( ( Version.v3_3.compareTo ( getSelectedCluster ( ) . getcompatibility_version ( ) ) ) <= 0 ) ; return ( isLinux && isQxl ) && clusterSupportsSinglePci ; }
private void revertPreviousHandlers ( ) { getParameters ( ) . decrementExecutionIndex ( ) ; if ( ( getExecutionIndex ( ) ) >= 0 ) { log.errorFormat ( "Reverting task handler: {0}" , getCurrentTaskHandler ( ) . getClass ( ) . getName ( ) ) ; getParameters ( ) . setExecutionReason ( CommandExecutionReason.ROLLBACK_FLOW ) ; getCurrentTaskHandler ( ) . compensate ( ) ; if ( ! ( hasRevertTask ( ) ) ) { revertPreviousHandlers ( ) ; } } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; }
public void execute ( ) { maybeInvokePluginsReadyCallback ( ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Quota > getQuotaByAdElementId ( org.ovirt.engine.core.compat.Guid adElementId , org.ovirt.engine.core.compat.Guid storagePoolId , boolean recursive ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource quotaParameterSource = getCustomMapSqlParameterSource ( ) ; quotaParameterSource.addValue ( "ad_element_id" , adElementId ) ; quotaParameterSource.addValue ( "storage_pool_id" , storagePoolId ) ; quotaParameterSource.addValue ( "recursive" , recursive ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotaEntityList = getCallsHandler ( ) . executeReadList ( "GetQuotaByAdElementId" , getQuotaMetaDataFromResultSet ( ) , quotaParameterSource ) ; return quotaEntityList ; }
private java.lang.String renderGigabyteSize ( long sizeInBytes ) { long sizeInGB = org.ovirt.engine.ui.uicommonweb.models.SizeConverter.convert ( sizeInBytes , SizeConverter.SizeUnit.BYTES , SizeUnit.GB ) . longValue ( ) ; return sizeInGB >= 1 ? sizeInGB + " GB" : "< 1 GB" ; }
protected void executeCommand ( ) { for ( org.ovirt.engine.core.common.businessentities.permissions permission : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) . getAllDirectPermissionsForAdElement ( org.ovirt.engine.core.bll.RemoveUserCommand.getAdUserId ( ) ) ) { org.ovirt.engine.core.common.action.PermissionsOperationsParametes tempVar = new org.ovirt.engine.core.common.action.PermissionsOperationsParametes ( permission ) ; tempVar.setShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.RemovePermission , tempVar , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks ( org.ovirt.engine.core.bll.RemoveUserCommand.getExecutionContext ( ) ) ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveUserCommand.getAdUserId ( ) ) ; org.ovirt.engine.core.bll.RemoveUserCommand.setSucceeded ( true ) ; }
public void setup ( ) { urlValidation = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation ( new java.lang.String [ ] { org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP } ) ) ; hostValidation = new org.ovirt.engine.ui.uicommonweb.validation.UriHostAddressValidation ( null ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getUriMessage ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getSchemeMessage ( org.mockito.ArgumentMatchers.anyString ( ) ) ; org.mockito.Mockito.doReturn ( hostValidation ) . when ( urlValidation ) . getHostValidation ( ) ; }
public void testIsNetworkInSyncWhenIpv4BootProtocolDifferent ( ) throws java.lang.Exception { initIpv4ConfigurationBootProtocol ( false ) ; iface.setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ) ; org.junit.Assert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigSet ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String configKey , java.lang.String configValue ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepConfigSet ( volumeName , slaveHost , slaveVolumeName , configKey , configValue ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private org.ovirt.engine.core.common.action.VdcReturnValueBase addVmFromScratch ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmFromScratchParameters parameters = new org.ovirt.engine.core.common.action.AddVmFromScratchParameters ( vmStatic , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getDiskInfoList ( ) , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getStorageDomainId ( ) ) ; parameters.setSessionId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getSessionId ( ) ) ; parameters.setPoolId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getPoolId ( ) ) ; parameters.setDontAttachToDefaultTag ( true ) ; parameters.setDiskOperatorAuthzPrincipalDbId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getDiskOperatorAuthzPrincipalDbId ( ) ) ; return runInternalActionWithTasksContext ( VdcActionType.AddVmFromScratch , parameters ) ; }
public org.ovirt.engine.sdk.entities.Action iscsidiscover ( org.ovirt.engine.sdk.entities.Action action , java.lang.String correlationId ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( this . getHref ( ) ) + "/iscsidiscover" ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . add ( "Correlation-Id" , correlationId ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . action ( url , action , org.ovirt.engine.sdk.entities.Action.class , org.ovirt.engine.sdk.entities.Action.class , headers ) ; }
private java.util.List < org.ovirt.engine.core.compat.Guid > generateGuidList ( int size ) { java.util.List < org.ovirt.engine.core.compat.Guid > toReturn = new java.util.LinkedList < org.ovirt.engine.core.compat.Guid > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { toReturn.add ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } return toReturn ; }
public void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
void localize ( ) { applyNowCpuMessage.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.nextRunConfigurationCpuValue ( ) ) ) ; applyNowMemoryMessage.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.nextRunConfigurationMemoryValue ( ) ) ) ; applyNowMinAllocatedMemoryMessage.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.nextRunConfigurationMinAllocatedMemoryValue ( ) ) ) ; applyNowVmLeaseMessage.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.nextRunConfigurationVmLeaseValue ( ) ) ) ; vmUnpinnedMessage1.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.unpinnedRunningVmWarningIncompatability ( ) ) ) ; vmUnpinnedMessage2.setHTML ( bulletedItem ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.messages.unpinnedRunningVmWarningSecurity ( ) ) ) ; }
protected org.ovirt.engine.core.common.errors.VdcBllErrors GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc xmlRpcStatus ) { try { org.ovirt.engine.core.common.errors.VdcBllErrors bllErrors = org.ovirt.engine.core.common.errors.VdcBllErrors.forValue ( xmlRpcStatus.mCode ) ; if ( bllErrors == null ) { log.warn ( ( "Unexpected return value: " + xmlRpcStatus ) ) ; bllErrors = org.ovirt.engine.core.common.errors.VdcBllErrors.unexpected ; } return bllErrors ; } catch ( java.lang.Exception e ) { return org.ovirt.engine.core.common.errors.VdcBllErrors.unexpected ; } }
public org.ovirt.engine.core.bll.validator.QuotaValidator createQuotaValidator ( org.ovirt.engine.core.compat.Guid quotaId ) { return org.ovirt.engine.core.bll.validator.QuotaValidator.createInstance ( quotaId , true ) ; }
private void TotalCPUCores_EntityChanged ( java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { getNumOfSockets ( ) . getSelectedItemChangedEvent ( ) . removeListener ( this ) ; getTotalCPUCores ( ) . getEntityChangedEvent ( ) . removeListener ( this ) ; getCoresPerSocket ( ) . getSelectedItemChangedEvent ( ) . removeListener ( this ) ; behavior.totalCpuCoresChanged ( ) ; getTotalCPUCores ( ) . getEntityChangedEvent ( ) . addListener ( this ) ; getNumOfSockets ( ) . getSelectedItemChangedEvent ( ) . addListener ( this ) ; getCoresPerSocket ( ) . getSelectedItemChangedEvent ( ) . addListener ( this ) ; }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
protected com.google.gwt.safehtml.shared.SafeHtml templateWithLabels ( java.lang.String quota , int totalUsagePercentage , java.lang.String totalUsage , int usedByYouPercentage , java.lang.String usedByYou , int usedByOthersPercentage , java.lang.String usedByOthers , int freePercentage , java.lang.String free ) { return org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.templates.quotaForUserBarToolTip ( org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.constants.tooltipQuotaLabel ( ) , quota , org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.constants.tooltipTotalUsageLabel ( ) , totalUsagePercentage , totalUsage , org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.constants.youUseQuota ( ) , usedByYouPercentage , usedByYou , org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.constants.othersUseQuota ( ) , usedByOthersPercentage , usedByOthers , org.ovirt.engine.ui.userportal.widget.QuotaProgressBar.constants.freeQuota ( ) , freePercentage , free ) ; }
public void testCanAttachSingleISOOrExport ( ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomainType type : java.util.Arrays.< org.ovirt.engine.core.common.businessentities.StorageDomainType > asList ( StorageDomainType.ISO , StorageDomainType.ImportExport ) ) { storageDomain.setStorageDomainType ( type ) ; spyValidator ( ) ; org.junit.Assert.assertThat ( validator.validateDomainCanBeAttachedToPool ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; } }
public org.ovirt.engine.core.common.businessentities.VDS activate ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = null ; try { vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( getVdsId ( ) ) ; refreshHost ( vds ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat ( "Failed to activate VDS = {0} with error: {1}." , getVdsId ( ) , e.getMessage ( ) ) ; } return vds ; }
protected java.util.Set < java.lang.String > extractServers ( java.lang.String serversXml ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( serversXml ) ) { throw new java.lang.RuntimeException ( "Could not get the peer list!" ) ; } try { return getServers ( org.ovirt.engine.core.utils.XmlUtils.loadXmlDoc ( serversXml ) . getElementsByTagName ( org.ovirt.engine.core.bll.utils.GlusterUtil.PEER ) ) ; } catch ( java.lang.Exception e ) { log.error ( "Error while parsing peer list xml [{}]: {}" , serversXml , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; throw new java.lang.RuntimeException ( e ) ; } }
protected void localize ( ) { latch.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.checkConnectivityManageConfirmPopup ( ) ) ; messageLabel.setHTML ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.templates.blackRedBold ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.youAreAboutManageConfirmPopup ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.thisMightCauseManageConfirmPopup ( ) ) ) ; noteLabel.setHTML ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.templates.middleBold ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.itIsManageConfirmPopup ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.highlyRecommendedManageConfirmPopup ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostManagementConfirmationPopupView.constants.toProceeedWithConnectivityCheckManageConfirmPopup ( ) ) ) ; }
public static org.ovirt.engine.core.bll.adbroker.RootDSE get ( org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType , javax.naming.directory.Attributes rootDseRecords ) throws java.lang.NumberFormatException , javax.naming.NamingException { switch ( ldapProviderType ) { case activeDirectory : return new org.ovirt.engine.core.bll.adbroker.ADRootDSE ( rootDseRecords ) ; case ipa : return new org.ovirt.engine.core.bll.adbroker.IPARootDSE ( rootDseRecords ) ; case rhds : return new org.ovirt.engine.core.bll.adbroker.RHDSRootDSE ( rootDseRecords ) ; case itds : return new org.ovirt.engine.core.bll.adbroker.ITDSRootDSE ( rootDseRecords ) ; case openLdap : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE ( rootDseRecords ) ; default : throw new java.lang.IllegalArgumentException ( "Invalid LDAP provider type." ) ; } }
private void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
public void testTimeout ( ) throws java.lang.Throwable { org.ovirt.engine.core.uutils.ssh.SSHDialogTest.Sink sink = new org.ovirt.engine.core.uutils.ssh.SSHDialogTest.Sink ( new java.lang.String [ ] { "start" } , new java.lang.String [ ] { } ) ; sshDialog.setSoftTimeout ( ( 1 * 1000 ) ) ; sshDialog.connect ( ) ; sshDialog.authenticate ( ) ; org.junit.jupiter.api.Assertions.assertThrows ( javax.naming.TimeLimitExceededException.class , ( ) -> { sshDialog.executeCommand ( sink , "cat" , null ) ; sink.exception ( ) ; } ) ; }
public void testAllowedHostedEngineEditing ( ) { org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue ( ConfigValues.AllowEditingHostedEngine , true ) ; vmStatic.setOrigin ( OriginType.MANAGED_HOSTED_ENGINE ) ; boolean validInput = command.validateInputs ( ) ; org.junit.Assert.assertThat ( validInput , org.hamcrest.core.Is.is ( true ) ) ; }
private static void handleErrorLog ( org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > tempProblematicRepoFileList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage = new org.ovirt.engine.core.common.businessentities.storage.RepoImage ( ) ; repoImage.setStoragePoolId ( storagePoolId ) ; repoImage.setRepoDomainId ( storageDomainId ) ; repoImage.setFileType ( imageType ) ; tempProblematicRepoFileList.add ( repoImage ) ; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog ( tempProblematicRepoFileList ) ; }
public void separateCustomPropertiesToUserAndPredefined ( org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { java.lang.String customProperties = vmBase.getCustomProperties ( ) ; org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.VMCustomProperties properties = parseProperties ( version , customProperties ) ; vmBase.setPredefinedProperties ( properties.getPredefinedProperties ( ) ) ; vmBase.setUserDefinedProperties ( properties.getUseDefinedProperties ( ) ) ; }
private void initIpv6ConfigurationBootProtocol ( boolean sameBootProtocol ) { initIpv6Configuration ( ) ; ipv6Address.setBootProtocol ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV6_BOOT_PROTOCOL ) ; org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol ifaceBootProtocol = ( sameBootProtocol ) ? org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV6_BOOT_PROTOCOL : org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ; iface.setIpv6BootProtocol ( ifaceBootProtocol ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = org.ovirt.engine.core.bll.network.dc.GetNetworkLabelsByHostNicIdQuery.getDbFacade ( ) . getInterfaceDao ( ) . get ( org.ovirt.engine.core.bll.network.dc.GetNetworkLabelsByHostNicIdQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.dc.GetNetworkLabelsByHostNicIdQuery.getQueryReturnValue ( ) . setReturnValue ( ( ( nic == null ) || ( ! ( org.ovirt.engine.core.utils.NetworkUtils.isLabeled ( nic ) ) ) ? java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > emptyList ( ) : convertToNetworkLabels ( nic.getLabels ( ) ) ) ) ; }
private void setUpGetBallooningExpectations ( int times ) throws java.lang.Exception { for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.IsBalloonEnabled , org.ovirt.engine.core.common.queries.GetVmByVmIdParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , true ) ; } }
public void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) . withoutRefresh ( ) , aQuery ) ; }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepConfigList" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc ( response ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { setGuestAgentData ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ) ( result ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel.super . SyncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters ( vm.getId ( ) ) ) ; }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms ( ) { java.util.Collection < java.lang.String > removedNetworks = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments ) { removedNetworks.add ( existingNetworkRelatedToAttachment ( removedAttachment ) . getName ( ) ) ; } java.util.List < java.lang.String > vmNames = getVmInterfaceManager ( ) . findActiveVmsUsingNetworks ( host.getId ( ) , removedNetworks ) ; if ( vmNames.isEmpty ( ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } else { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS , org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS_LIST , vmNames ) ) ; } }
public static void getDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean filterInternalDomain ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters ( ) ; tempVar.setFilterInternalDomain ( filterInternalDomain ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDomainList , tempVar , aQuery ) ; }
public void setUp ( ) { injectorRule.bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; initializeInterfaceValidation ( DiskInterface.VirtIO ) ; disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( ) ; validator = new org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidator ( disk , dve ) ; }
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic CloneStorageDomainStatic ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ; obj.setConnection ( instance.getConnection ( ) ) ; obj.setId ( instance.getId ( ) ) ; obj.setStorage ( instance.getStorage ( ) ) ; obj.setStorageDomainType ( instance.getStorageDomainType ( ) ) ; obj.setStorageType ( instance.getStorageType ( ) ) ; obj.setStorageName ( instance.getStorageName ( ) ) ; obj.setStorageFormat ( instance.getStorageFormat ( ) ) ; return obj ; }
public void testGetStorageDomainWithCorrectStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getStorageDomains ( FixturesTool.STORAGE_POOL_NFS_INACTIVE_ISO , StorageDomainType.ISO , StorageDomainStatus.Inactive ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = result.get ( 0 ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.STORAGE_DOMAIN_NFS_INACTIVE_ISO , domain.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , domain.getCommittedDiskSize ( ) , "Wrong committed disk size" ) ; org.junit.jupiter.api.Assertions.assertEquals ( 0 , domain.getActualImagesSize ( ) , "Wrong actual disk size" ) ; }
private void postInitTemplate ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > rootTemplates = filterNotBaseTemplates ( templates ) ; org.ovirt.engine.core.common.businessentities.VmTemplate oldTemplate = getModel ( ) . getBaseTemplate ( ) . getSelectedItem ( ) ; getModel ( ) . getBaseTemplate ( ) . setItems ( rootTemplates ) ; getModel ( ) . getBaseTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( rootTemplates , ( oldTemplate != null ? new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( oldTemplate.getId ( ) ) : new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( org.ovirt.engine.core.compat.Guid.Empty ) ) ) ) ; updateIsDisksAvailable ( ) ; }
public boolean ShouldEndAction ( ) { synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.EntityAsyncTask > CurrentActionTypeTasks = GetCurrentActionTypeTasks ( ) ; for ( org.ovirt.engine.core.bll.EntityAsyncTask task : CurrentActionTypeTasks ) { if ( ( task.getState ( ) ) != ( AsyncTaskState.Ended ) ) { org.ovirt.engine.core.bll.EntityMultiAsyncTasks.log.infoFormat ( "Task ID: '{0}' is in state {1}. End action for entity {2} will proceed when all the entity's tasks are completed." , task.getTaskID ( ) , task.getState ( ) , getContainerId ( ) ) ; return false ; } } } return true ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterHooksListReturnForXmlRpc glusterHooksList ( ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHooksList ( ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterHooksListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterHooksListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private static org.ovirt.engine.core.common.businessentities.DiskImage createDiskImageTemplate ( ) { org.ovirt.engine.core.common.businessentities.DiskImage i = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; i.setSizeInGigabytes ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.USED_SPACE_GB ) + ( org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB ) ) ) ; i.setActualSizeInBytes ( ( ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.REQUIRED_DISK_SIZE_GB ) * 1024L ) * 1024L ) * 1024L ) ) ; i.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; i.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID ) ) ) ; return i ; }
private static void assertCorrectSnapshots ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { for ( int i = 0 ; i < ( org.ovirt.engine.core.bll.storage.disk.GetAllDisksByVmIdQueryTest.NUM_DISKS_OF_EACH_KIND ) ; ++ i ) { org.junit.jupiter.api.Assertions.assertEquals ( disk.getId ( ) , disk.getSnapshots ( ) . get ( i ) . getId ( ) , ( ( "Wrong snapshot " + i ) + " for disk " ) ) ; } }
protected boolean removeCinderVolume ( int removedVolumeIndex ) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters param = org.ovirt.engine.core.bll.storage.RemoveCinderDiskCommand.getParameters ( ) . getChildCommandsParameters ( ) . get ( removedVolumeIndex ) ; try { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = getFutureRemoveCinderDiskVolume ( removedVolumeIndex ) . get ( ) ; if ( ( vdcReturnValueBase == null ) || ( ! ( vdcReturnValueBase.getSucceeded ( ) ) ) ) { handleExecutionFailure ( param.getRemovedVolume ( ) , vdcReturnValueBase ) ; return false ; } } catch ( java.lang.InterruptedException | java.util.concurrent.ExecutionException e ) { e.printStackTrace ( ) ; return false ; } return true ; }
private org.ovirt.engine.core.common.businessentities.storage_domains getExistingStorageDomain ( org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageType storageType , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage_domains > existing = asCollection ( org.ovirt.engine.core.common.businessentities.storage_domains.class , getEntity ( java.util.ArrayList.class , VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , cnx.getconnection ( ) ) , ( "Existing storage domains: path=" + ( cnx.getconnection ( ) ) ) ) ) ; return ( existing.size ( ) ) != 0 ? existing.get ( 0 ) : null ; }
private void initializeCache ( ) { if ( ! ( cacheInitialized ) ) { synchronized ( LOCK ) { java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > cmdEntities = cmdEntityDao.getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : cmdEntities ) { commandMap.put ( cmdEntity.getId ( ) , cmdEntity ) ; } cacheInitialized = true ; } } }
public void testList ( ) { resource.setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( QueryType.GetVdsHooksById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.Hooks hooks = resource.list ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( hooks.getHooks ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 4 , hooks.getHooks ( ) . size ( ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result.getState ( ) ) ) ; vmListModel.getWindow ( ) . StopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; if ( ( returnValueBase != null ) && ( returnValueBase.getSucceeded ( ) ) ) { vmListModel.cancel ( ) ; } }
public javax.ws.rs.core.Response setOption ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.api.model.Option option = action.getOption ( ) ; validateParameters ( option , "name" , "value" ) ; return doAction ( ActionType.SetGlusterVolumeOption , new org.ovirt.engine.core.common.action.gluster.GlusterVolumeOptionParameters ( new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity ( guid , option.getName ( ) , option.getValue ( ) ) ) , action ) ; }
protected final void init ( ) { super . init ( ) ; if ( ( org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getParameters ( ) . getVmId ( ) ) != null ) { setVmId ( org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getParameters ( ) . getVmId ( ) ) ; } else { setVm ( org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getParameters ( ) . getVm ( ) ) ; } if ( ( org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm ( ) ) != null ) { setVmNumaNodesForValidation ( getVmNumaNodeDao ( ) . getAllVmNumaNodeByVmId ( org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm ( ) . getId ( ) ) ) ; doInit ( ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondarySources ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long requiredMemory = ( parameters.containsKey ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) ? java.lang.Long.valueOf ( parameters.get ( org.ovirt.engine.core.bll.scheduling.policyunits.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED ) ) : 0L ; return getOverUtilizedMemoryHosts ( candidateHosts , requiredMemory ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName , slaveHost , slaveVolumeName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void executeCommand ( ) { addAuditLogForPartialVMs ( ) ; super . executeCommand ( ) ; if ( org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters ( ) . isImagesExistOnTargetStorageDomain ( ) ) { if ( ! ( getImages ( ) . isEmpty ( ) ) ) { findAndSaveDiskCopies ( ) ; } unregisteredOVFDataDao.removeEntity ( ovfEntityData.getEntityId ( ) , null ) ; unregisteredDisksDao.removeUnregisteredDiskRelatedToVM ( ovfEntityData.getEntityId ( ) , null ) ; } setActionReturnValue ( org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getVmTemplate ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.setSucceeded ( true ) ; }
private void vdsExist ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.Up ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = new java.util.ArrayList < > ( ) ; vdsList.add ( vds ) ; org.mockito.Mockito.when ( vdsDao.getAllForVdsGroup ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsList ) ; }
protected boolean validateInputManagementNetwork ( ) { if ( ! ( org.ovirt.engine.core.bll.AddClusterCommand.findInputManagementNetwork ( ) ) ) { return false ; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator ( ) ; return ( ( validate ( networkClusterValidator.networkBelongsToClusterDataCenter ( org.ovirt.engine.core.bll.AddClusterCommand.getCluster ( ) , managementNetwork ) ) ) && ( validate ( networkClusterValidator.managementNetworkRequired ( managementNetwork ) ) ) ) && ( validate ( networkClusterValidator.managementNetworkNotExternal ( managementNetwork ) ) ) ; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > getAllocationColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn < org.ovirt.engine.core.common.businessentities.Disk , org.ovirt.engine.core.common.businessentities.VolumeType > ( ) { @ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VolumeType getRawValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ? ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getVolumeType ( ) : null ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable ( column , sortBy ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 3 ) ; setGetVmQueryExpectations ( 2 ) ; setGetNetworksQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ 1 ] } , true , true ) ) ; org.ovirt.engine.api.model.NIC nic = resource.update ( getNic ( false ) ) ; assertNotNull ( nic ) ; }
public static void GetStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.GetStorageDomainsByVmTemplateIdQueryParameters ( templateId ) , aQuery ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void executeCommandFailedWhenServerIdPresent ( ) { setUpMocksForUpdate ( ) ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd.executeCommand ( ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.jupiter.api.Assertions.assertEquals ( EngineError.GlusterHookNotFound , e.getErrorCode ( ) ) ; } org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.never ( ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
private static void assertCorrectGetAllResult ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > result ) { org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.VmDAOTest.VM_COUNT , result.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : result ) { org.junit.Assert.assertEquals ( "Vm db generation wasn't loaded as expected" , 1 , vm.getDbGeneration ( ) ) ; } }
private boolean addInterfaceToProcessedList ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface ) { if ( ifaceNames.contains ( iface.getName ( ) ) ) { if ( isBond ( iface ) ) { violations.add ( VdcBllMessages.NETWORK_BOND_NAME_EXISTS ) ; } else { violations.add ( VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE ) ; } return false ; } ifaceNames.add ( iface.getName ( ) ) ; return true ; }
private void connect ( boolean isPasswordDelegationPossible ) { if ( isPasswordDelegationPossible ) { try { model.getAutoConnectableConsoles ( ) . get ( 0 ) . connect ( ) ; alreadyOpened = true ; } catch ( org.ovirt.engine.ui.uicommonweb.models.VmConsoles e ) { errorPopupManager.show ( e.getLocalizedErrorMessage ( ) ) ; } } unregisterModels ( ) ; }
public void template_SelectedItemChanged ( ) { super . template_SelectedItemChanged ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; if ( template == null ) { return ; } setupWindowModelFrom ( template , template.getStoragePoolId ( ) . getValue ( ) ) ; updateHostPinning ( template.getMigrationSupport ( ) ) ; doChangeDefautlHost ( template.getDedicatedVmForVds ( ) ) ; }
public void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private java.lang.String parseRangePart ( java.lang.String start ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( java.lang.String part : start.split ( "[:]" , ( - 1 ) ) ) { java.lang.String tempPart = part.trim ( ) ; if ( ( tempPart.length ( ) ) == 1 ) { builder.append ( '0' ) ; } else if ( ( tempPart.length ( ) ) > 2 ) { return null ; } builder.append ( tempPart ) ; } return builder.toString ( ) ; }
private void mockGetVmsListForDisk ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.ovirt.engine.core.common.businessentities.VM vm1 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm1.setStatus ( VMStatus.PoweredDown ) ; org.ovirt.engine.core.common.businessentities.VM vm2 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm2.setStatus ( VMStatus.Down ) ; vmList.add ( vm1 ) ; vmList.add ( vm2 ) ; org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vmList ) ; }
public void testUnknownTypeLunCantBeAdded ( ) { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskCommandTest.createISCSILunDisk ( ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; initializeCommand ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , parameters ) ; disk.getLun ( ) . setLunType ( StorageType.UNKNOWN ) ; org.junit.Assert.assertFalse ( "checkIfLunDiskCanBeAdded() succeded for LUN with UNKNOWN type" , command.checkIfLunDiskCanBeAdded ( spyDiskValidator ( disk ) ) ) ; org.junit.Assert.assertTrue ( "checkIfLunDiskCanBeAdded() failed but correct can do action hasn't been added to the return response" , verifyCanDoActionMessagesContainMessage ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_HAS_NO_VALID_TYPE ) ) ; }
public org.ovirt.engine.core.common.businessentities.VdsSpmIdMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VdsSpmIdMap entity = new org.ovirt.engine.core.common.businessentities.VdsSpmIdMap ( ) ; entity.setStoragePoolId ( getGuidDefaultEmpty ( rs , "storage_pool_id" ) ) ; entity.setId ( getGuidDefaultEmpty ( rs , "vds_id" ) ) ; entity.setVdsSpmId ( rs.getInt ( "vds_spm_id" ) ) ; return entity ; }
public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , com.google.gwt.safehtml.shared.SafeHtml value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { java.lang.String rawData = ( value != null ) ? value.asString ( ) : "" ; sb.append ( org.ovirt.engine.ui.common.widget.table.column.TextCellWithTooltip.template.textContainer ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createTableCellElementId ( elementIdPrefix , columnId , context ) , getRenderedValue ( rawData ) ) ) ; }
public void testValidateNotRemovingUsedNetworkByVmsSingleNetworkSingleVm ( ) { final java.util.List < java.lang.String > vmsNames = java.util.Arrays.asList ( org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidatorTest.VM_A ) ; final java.util.List < java.lang.String > removedNetworks = java.util.Arrays.asList ( org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidatorTest.NETWORK_A ) ; underTest = new org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidator ( vmsNames , removedNetworks ) ; org.junit.Assert.assertThat ( underTest.validate ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.SINGLE_NETWORK_CANNOT_DETACH_NETWORK_USED_BY_SINGLE_VM , org.ovirt.engine.core.utils.linq.LinqUtils.concat ( org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( DetachNetworkUsedByVmValidator.VAR_VM_NAME , vmsNames ) , org.ovirt.engine.core.utils.ReplacementUtils.replaceWith ( DetachNetworkUsedByVmValidator.VAR_NETWORK_NAME , removedNetworks ) ) ) ) ; }
public void setItems ( java.lang.Iterable value ) { if ( value == null ) { super . setItems ( null ) ; return ; } java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.Disk > cast ( value ) ; super . setItems ( disks ) ; }
protected boolean checkCpuSockets ( ) { return org.ovirt.engine.core.bll.AddVmCommand.checkCpuSockets ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getNumOfSockets ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getCpuPerSocket ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getThreadsPerCpu ( ) , org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion ( ) . toString ( ) , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getValidationMessages ( ) ) ; }
private void setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.core.compat.Guid id , int times ) { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetStoragePoolsByStorageDomainId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { id } , org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplatesResourceTest.setUpStoragePool ( ) ) ; } }
public void validateFailsForNoStorageDevice ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > emptyList ( ) ) ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public void testQueryWithNonExistingHostId ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getVdsId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; getQuery ( ) . setInternalExecution ( true ) ; getQuery ( ) . executeCommand ( ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded ( getQuery ( ) , true ) ; org.ovirt.engine.core.bll.GetoVirtISOsTest.checkReturnValueEmpty ( getQuery ( ) ) ; }
protected java.lang.String getIconToShow ( java.lang.String currentOsDefaultIcon ) { if ( ( getIcon ( ) . getEntity ( ) ) == null ) { return currentOsDefaultIcon ; } return getIcon ( ) . getEntity ( ) . isCustom ( ) ? getIcon ( ) . getEntity ( ) . getIcon ( ) : currentOsDefaultIcon ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getDisksList ( ) { if ( ( cachedSelectedActiveDisks ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesAndCinderForVm = getDiskImagesForVm ( ) ; if ( ( getParameters ( ) . getDisks ( ) ) == null ) { cachedSelectedActiveDisks = imagesAndCinderForVm ; } else { cachedSelectedActiveDisks = org.ovirt.engine.core.bll.ImagesHandler.imagesIntersection ( imagesAndCinderForVm , getParameters ( ) . getDisks ( ) ) ; } } return cachedSelectedActiveDisks ; }
public void testDeleteOvfGenerations ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > vmsGuids = new java.util.LinkedList < > ( ) ; vmsGuids.add ( FixturesTool.VM_RHEL5_POOL_50 ) ; vmsGuids.add ( FixturesTool.VM_RHEL5_POOL_51 ) ; vmDao.remove ( FixturesTool.VM_RHEL5_POOL_50 ) ; vmDao.remove ( FixturesTool.VM_RHEL5_POOL_51 ) ; vmAndTemplatesGenerationsDao.deleteOvfGenerations ( vmsGuids ) ; java.lang.Long value = vmAndTemplatesGenerationsDao.getOvfGeneration ( FixturesTool.VM_RHEL5_POOL_50 ) ; org.junit.Assert.assertNull ( "ovf generation wasn't deleted succesfully" , value ) ; value = vmAndTemplatesGenerationsDao.getOvfGeneration ( FixturesTool.VM_RHEL5_POOL_51 ) ; org.junit.Assert.assertNull ( "ovf generation wasn't deleted succesfully" , value ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 ) ; setGetVmQueryExpectations ( 1 ) ; setGetNetworksQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmInterface , org.ovirt.engine.core.common.action.RemoveVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "InterfaceId" } , new java.lang.Object [ ] { PARENT_ID , GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( collection.remove ( GUIDS [ 0 ] . toString ( ) ) ) ; }
public void testAnotherInterfaceAlreadyLabeledWithThisLabel ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( "name" ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface preexistingVdsNetworkInterface = createVdsNetworkInterfaceWithName ( "differentName" ) ; java.lang.String label = "label" ; vdsNetworkInterface.setLabels ( java.util.Collections.singleton ( label ) ) ; preexistingVdsNetworkInterface.setLabels ( java.util.Collections.singleton ( label ) ) ; org.ovirt.engine.core.bll.validator.HostInterfaceValidator validator = new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > preexistingInterfaces = java.util.Collections.singletonList ( preexistingVdsNetworkInterface ) ; org.junit.Assert.assertThat ( "different nics cannot have same label set." , validator.anotherInterfaceAlreadyLabeledWithThisLabel ( label , preexistingInterfaces ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.OTHER_INTERFACE_ALREADY_LABELED ) ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.aggregationtohourly_3_4.AggregationToHourly.row11Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_AggregationToHourly ) { try { int length = 0 ; this . key = readString ( dis ) ; this . value = readString ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . withoutRefresh ( ) , aQuery ) ; }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { if ( isMigrate && ( ( ( getVm ( ) . getrun_on_vds ( ) ) != null ) && ( getVm ( ) . getrun_on_vds ( ) . equals ( vds.getId ( ) ) ) ) ) { sb.append ( "is the same host the VM is currently running on" ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_MIGRATION_TO_SAME_HOST ; } return null ; }
private void Commit ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getInPreview ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm.getId ( ) , snapshot.getId ( ) ) , null , null ) ; } }
private org.ovirt.engine.core.compat.Guid addDisk ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.interfaces.BackendInternal.class ) . runInternalAction ( ActionType.AddDisk , buildAddDiskParameters ( disk ) , enclosingCommand.getContext ( ) . clone ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.EngineException ( returnValue.getFault ( ) . getError ( ) , java.lang.String.format ( "Failed to create disk! %s" , disk.getDiskAlias ( ) ) ) ; } return returnValue.getActionReturnValue ( ) ; }
public int compare ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile1 , org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile2 ) { if ( vnicProfile1 == ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY ) ) { return vnicProfile2 == ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY ) ? 0 : 1 ; } else if ( vnicProfile2 == ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY ) ) { return - 1 ; } int retVal = lexoNumeric.compare ( vnicProfile1.getNetworkName ( ) , vnicProfile2.getNetworkName ( ) ) ; return retVal == 0 ? lexoNumeric.compare ( vnicProfile1.getName ( ) , vnicProfile2.getName ( ) ) : retVal ; }
public org.ovirt.engine.core.bll.ValidationResult networkMappingsProvided ( java.lang.String networkMappings ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_MISSING_NETWORK_MAPPINGS ) . when ( ( ( org.apache.commons.lang.StringUtils.isBlank ( networkMappings ) ) && ( ( ( getAgentConfiguration ( ) ) == null ) || ( org.apache.commons.lang.StringUtils.isBlank ( getAgentConfiguration ( ) . getNetworkMappings ( ) ) ) ) ) ) ; }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost object ) { if ( ! ( object.isMultiSelection ( ) ) ) table.setSelectionModel ( new com.google.gwt.view.client.SingleSelectionModel < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; driver.edit ( object ) ; table.asEditor ( ) . edit ( object ) ; }
public java.lang.Object runInTransaction ( ) { detachStorageDomainWithEntities ( getStorageDomain ( ) ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove = getStorageDomain ( ) . getStoragePoolIsoMapData ( ) ; getCompensationContext ( ) . snapshotEntity ( mapToRemove ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( mapToRemove.getstorage_id ( ) , mapToRemove.getstorage_pool_id ( ) ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getRenderedValue ( vm ) ; }
private void validateDataUrlFormat ( java.lang.String dataUrl ) { final java.lang.String dataUrlRegex = "^data:(\\w+/\\w+);base64,([\\w+/]+={0,2})$" ; final java.util.regex.Matcher matcher = java.util.regex.Pattern.compile ( dataUrlRegex ) . matcher ( dataUrl ) ; final boolean matches = matcher.find ( ) ; if ( ! matches ) { validationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VM_ICON_DATAURL_MALFORMED ) ; return ; } mimeType = matcher.group ( 1 ) ; base64Data = matcher.group ( 2 ) ; }
private org.ovirt.engine.api.model.Snapshot populateSnapshotConfiguration ( org.ovirt.engine.api.model.Snapshot model ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery ( VdcQueryType.GetVmOvfConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( model.getId ( ) ) ) ) ; if ( ( queryReturnValue.getSucceeded ( ) ) && ( ( queryReturnValue.getReturnValue ( ) ) != null ) ) { return org.ovirt.engine.api.restapi.types.SnapshotMapper.mapSnapshotConfiguration ( ( ( java.lang.String ) ( queryReturnValue.getReturnValue ( ) ) ) , ConfigurationType.OVF , model ) ; } return model ; }
public static boolean qosConfiguredOnInterface ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( iface.isQosOverridden ( ) ) { return ( ( iface.getQos ( ) ) != null ) && ( ! ( iface.getQos ( ) . isEmpty ( ) ) ) ; } else { return ( network != null ) && ( ( network.getQosId ( ) ) != null ) ; } }
public void testCreateAndGetById ( ) { org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.Label label = new org.ovirt.engine.core.common.businessentities.LabelBuilder ( ) . name ( "test label" ) . id ( guid ) . build ( ) ; dao.save ( label ) ; org.ovirt.engine.core.common.businessentities.Label read = dao.get ( guid ) ; org.junit.jupiter.api.Assertions.assertNotNull ( read ) ; org.junit.jupiter.api.Assertions.assertEquals ( guid , read.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( label.getName ( ) , read.getName ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName , slaveHost , slaveVolumeName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testDiscoverGeoRepDataWhenNoSessions ( ) { org.mockito.Mockito.doReturn ( getSessionsVDSReturnVal ( true , 0 ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepStatus ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters.class ) ) ; syncJob.discoverGeoRepData ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 0 ) ) . save ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession.class ) ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.compat.Guid groupId = org.ovirt.engine.core.bll.RemoveAdGroupCommand.getParameters ( ) . getAdElementId ( ) ; java.util.List < java.lang.String > reasons = org.ovirt.engine.core.bll.RemoveAdGroupCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ; boolean returnValue = true ; if ( isLastSuperUserGroup ( groupId ) ) { returnValue = false ; reasons.add ( VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString ( ) ) ; } if ( groupId.equals ( MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID ) ) { returnValue = false ; reasons.add ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE.name ( ) ) ; } return returnValue ; }
public static void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms ( ) { java.util.Collection < java.lang.String > removedNetworks = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments ) { removedNetworks.add ( existingNetworkRelatedToAttachment ( removedAttachment ) . getName ( ) ) ; } java.util.List < java.lang.String > vmNames = getVmInterfaceManager ( ) . findActiveVmsUsingNetworks ( host.getId ( ) , removedNetworks ) ; if ( vmNames.isEmpty ( ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } else { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS , commaSeparated ( vmNames ) ) ; } }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { if ( "OS" . equals ( fieldName ) ) { return org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . get ( org.ovirt.engine.core.searchbackend.OsValueAutoCompleter.class ) ; } else if ( "CREATIONDATE" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.DateEnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.DateEnumForSearch.class ) ; } else if ( "STATUS" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus.class ) ; } else if ( "QUOTA" . equals ( fieldName ) ) { return new org.ovirt.engine.core.searchbackend.NullableStringAutoCompleter ( ) ; } return null ; }
public void successfulFenceWith1stError2ndSuccess ( ) { mockFenceAgents ( ) ; mockFenceResult ( agentExecutor1 , new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR , org.ovirt.engine.core.common.businessentities.pm.PowerStatus.UNKNOWN ) ) ; mockFenceResult ( agentExecutor2 , new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS , org.ovirt.engine.core.common.businessentities.pm.PowerStatus.ON ) ) ; org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = executor.fence ( FenceActionType.STATUS ) ; org.junit.jupiter.api.Assertions.assertEquals ( Status.SUCCESS , result.getStatus ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( PowerStatus.ON , result.getPowerStatus ( ) ) ; }
public void removeMemoryFromActiveSnapshot ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_SNAPSHOT_ID2 ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_MEMORY_VOLUME , snapshot.getMemoryVolume ( ) ) ; dao.removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_VM_ID2 ) ; snapshot = dao.get ( org.ovirt.engine.core.dao.SnapshotDaoTest.EXISTING_SNAPSHOT_ID2 ) ; org.junit.Assert.assertEquals ( StringUtils.EMPTY , snapshot.getMemoryVolume ( ) ) ; }
public void getMaxNumOfThreadsPerCpu ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfThreadsPerCpu ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
protected void executeCommand ( ) { if ( isLiveMerge ( ) ) { org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters ( ) . setLiveMerge ( true ) ; persistCommand ( org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getParameters ( ) . getParentCommand ( ) , true ) ; } removeCinderSnapshotDisks ( ) ; org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.setSucceeded ( true ) ; }
public boolean shouldVdsBeFenced ( ) { boolean result = false ; if ( ( vds ) == null ) { return false ; } switch ( vds.getStatus ( ) ) { case Down : case InstallFailed : case Maintenance : case NonOperational : case NonResponsive : case Kdumping : result = true ; break ; default : break ; } return result ; }
public static java.lang.String rangeParsser ( java.util.List < java.lang.String > values ) { return java.lang.String.valueOf ( ( ( org.ovirt.vdsmfake.Utils.RND.nextInt ( ( ( java.lang.Integer.valueOf ( values.get ( 1 ) . toString ( ) ) ) - ( java.lang.Integer.valueOf ( values.get ( 0 ) . toString ( ) ) ) ) ) ) + ( java.lang.Integer.valueOf ( values.get ( 0 ) . toString ( ) ) ) ) ) ; }
public void canDoActionMissingTemplateDisk ( ) { createParameters ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage ( diskImageGroupId , diskImageId ) ; org.ovirt.engine.core.compat.Guid templateImageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; diskImage.setImageTemplateId ( templateImageId ) ; initDiskImage ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , templateImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN.toString ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getById ( org.ovirt.engine.core.compat.Guid id , boolean eagerLoad ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity glusterHook = getCallsHandler ( ) . executeRead ( "GetGlusterHookById" , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoDbFacadeImpl.glusterHookRowMapper , createIdParameterMapper ( id ) . addValue ( "includeContent" , eagerLoad ) ) ; if ( eagerLoad ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook > serverHooks = getCallsHandler ( ) . executeReadList ( "GetGlusterServerHooksById" , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoDbFacadeImpl.glusterServerHookRowMapper , createIdParameterMapper ( id ) ) ; if ( serverHooks != null ) { glusterHook.setServerHooks ( serverHooks ) ; } } return glusterHook ; }
private boolean ContainsLocalStorage ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.StorageDomain > Cast ( getSelectedItems ( ) ) ) { if ( ( a.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) { return true ; } } return false ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc teardownImage ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Image.teardown" ) . withParameter ( "storagepoolID" , spID ) . withParameter ( "storagedomainID" , sdID ) . withParameter ( "imageID" , imageID ) . withParameter ( "leafVolID" , volumeID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( response ) ; }
public void executeCommand ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookStatusChangeParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_DISABLE ) ; }
public void ensureAsyncSearchStopped ( ) { getTimer ( ) . stop ( ) ; if ( ( ( getAsyncResult ( ) ) != null ) && ( ! ( getAsyncResult ( ) . getId ( ) . equals ( NGuid.Empty ) ) ) ) { setAsyncResult ( null ) ; } }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForDisplayNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( getNetworkCluster ( ) . isDisplay ( ) ) && ( ( ipConfiguration == null ) || ( ( ipConfiguration.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_DISPLAY_NETWORK_HAS_NO_BOOT_PROTOCOL ) . when ( failWhen ) ; }
private void mockIsoDomainListSyncronizer ( ) { org.mockito.Mockito.doNothing ( ) . when ( isoDomainListSyncronizer ) . init ( ) ; org.mockito.Mockito.doReturn ( isoDomainListSyncronizer ) . when ( command ) . getIsoDomainListSyncronizer ( ) ; }
private void cpuFlagsMissing ( ) { java.util.List < java.lang.String > strings = new java.util.ArrayList < java.lang.String > ( ) ; strings.add ( "foo" ) ; org.mockito.Mockito.doReturn ( strings ) . when ( cmd ) . missingServerCpuFlags ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName , slaveHost , slaveVolumeName , userName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public org.ovirt.engine.api.v3.types.V3VM get ( @ javax.ws.rs.core.Context javax.ws.rs.core.HttpHeaders headers , @ javax.ws.rs.core.Context javax.ws.rs.core.UriInfo ui ) { org.ovirt.engine.api.v3.types.V3VM vm = adaptGet ( getDelegate ( ) :: get ) ; org.ovirt.engine.api.v3.helpers.V3VmHelper.addDisksLink ( vm ) ; java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( headers , ui ) ; if ( ( details != null ) && ( ! ( details.isEmpty ( ) ) ) ) { org.ovirt.engine.api.v3.helpers.V3VmHelper.addInlineDetails ( vm , this , details ) ; } return vm ; }
public boolean isEnableDeprecatedClientModeSpicePlugin ( ) { return ( ( java.lang.Boolean ) ( getConfigValuePreConverted ( ConfigurationValues.EnableDeprecatedClientModeSpicePlugin , getDefaultConfigurationVersion ( ) ) ) ) ; }
protected void initFrontend ( ) { org.ovirt.engine.ui.frontend.Frontend.setEventsHandler ( frontendEventsHandler ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendFailureEvent ( ) . addListener ( frontendFailureEventListener ) ; org.ovirt.engine.ui.frontend.Frontend.getFrontendNotLoggedInEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user.logout ( ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend.setFilterQueries ( filterFrontendQueries ( ) ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( new org.ovirt.engine.core.searchbackend.OsValueAutoCompleter ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getOsUniqueOsNames ( ) ) ) ; }
private java.lang.String decodeDiskProperty ( java.lang.String diskProperty ) throws org.apache.commons.codec.DecoderException { return new java.lang.String ( org.apache.commons.codec.binary.Hex.decodeHex ( diskProperty.toCharArray ( ) ) , org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.CHARSET ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.HashMap < java.lang.Integer , java.lang.String > result = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; java.lang.String defaultValue = result.get ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames = new org.ovirt.engine.ui.uicommonweb.MapWithDefaults < java.lang.Integer , java.lang.String > ( result , defaultValue ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsIds ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturn create ( java.util.Map createInfo ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.create" ) . withParameter ( "vmID" , getVmId ( createInfo ) ) . withParameter ( "vmParams" , createInfo ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturn ( response ) ; }
public void testConstructor ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class ) ; org.mockito.Mockito.when ( user.getId ( ) ) . thenReturn ( Guid.EVERYONE ) ; sessionDataContainer.setUser ( session , user ) ; command.postConstruct ( ) ; org.junit.Assert.assertEquals ( "wrong user id on command" , user.getId ( ) , command.getUserId ( ) ) ; }
private boolean Register ( org.ovirt.engine.core.common.businessentities.VDS vdsByUniqueId , org.ovirt.engine.core.compat.Guid vdsGroupId , boolean IsPending ) { boolean returnValue = true ; log.debug ( "RegisterVdsQuery::Register - Entering" ) ; if ( vdsByUniqueId == null ) { returnValue = registerNewHost ( vdsGroupId , IsPending ) ; } else { returnValue = updateExistingHost ( vdsByUniqueId , IsPending ) ; } log.debug ( "RegisterVdsQuery::Register - Leaving with value {}" , returnValue ) ; return returnValue ; }
public void testChangeClusterForbidden ( ) { prepareVmToPassValidate ( ) ; org.ovirt.engine.core.common.businessentities.Cluster newGroup = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setCompatibilityVersion ( Version.v3_0 ) ; vmStatic.setClusterId ( newGroup.getId ( ) ) ; org.mockito.Mockito.doReturn ( clusterDao ) . when ( command ) . getClusterDao ( ) ; org.junit.Assert.assertFalse ( "validate should have failed with can't change cluster." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public static void GetPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunAction: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; if ( callback != null ) { callback.executed ( new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult ( actionType , parameters , null , state ) ) ; } }
public void onError ( java.lang.String message ) { org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.severe ( ( ( ( ( ( "Exception caught while invoking event handler function [" + functionName ) + "] for plugin [" ) + pluginName ) + "]: " ) + message ) ) ; com.google.gwt.dom.client.Document.get ( ) . getBody ( ) . removeChild ( plugin.getIFrameElement ( ) ) ; plugin.markAsFailed ( ) ; org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.warning ( ( ( "Plugin [" + pluginName ) + "] removed from service due to failure" ) ) ; }
private void setUpDaoMocks ( ) { snapshotDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.SnapshotDao.class ) ; org.mockito.Mockito.doReturn ( snapshotDaoMock ) . when ( getQuery ( ) ) . getSnapshotDao ( ) ; org.mockito.Mockito.when ( snapshotDaoMock.getAllWithConfiguration ( vmId ) ) . thenReturn ( java.util.Collections.singletonList ( snapshot ) ) ; }
public void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
public static void getGlusterRemoveBricksStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks ) { aQuery.setHandleFailure ( true ) ; org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters ( clusterId , volumeId , bricks ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeRemoveBricksStatus , parameters , aQuery ) ; }
public java.lang.String getAdUserName ( ) { if ( ( mAdUserName ) == null ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbUserDao ( ) . get ( getAdUserId ( ) ) ; if ( user != null ) { mAdUserName = user.getLoginName ( ) ; } } return mAdUserName ; }
public void canRemoveBrickEmptyList ( ) { org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick ( java.util.Collections.emptyList ( ) , getDistributedVolume ( volumeId1 , 1 ) , 3 , false ) ; org.junit.Assert.assertThat ( validationResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED ) ) ; }
private void mockSnapshotsValidator ( ) { org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotInPreview ( org.mockito.ArgumentMatchers.any ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster createCluster ( int index ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterHookSyncJobTest.CLUSTER_GUIDS [ index ] ) ; cluster.setName ( "cluster" ) ; cluster.setGlusterService ( true ) ; cluster.setVirtService ( false ) ; cluster.setCompatibilityVersion ( Version.v3_2 ) ; return cluster ; }
public void updateDocumentationBaseURL ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDocumentationBaseURL ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.String documentationBaseURL = ( ( java.lang.String ) ( returnValue ) ) ; boolean isDocumentationAvailable = ! ( documentationBaseURL.equals ( "" ) ) ; setDocumentationAvailable ( isDocumentationAvailable ) ; setDocumentationBasePath ( documentationBaseURL ) ; onUpdateDocumentationBaseURL ( ) ; } } ) ) ; }
public void updateDefaultDisplayForVmTag ( org.ovirt.engine.core.common.businessentities.TagsVmMap tagsVmMap ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "tag_id" , tagsVmMap.getTagId ( ) ) . addValue ( "vm_id" , tagsVmMap.getVmId ( ) ) . addValue ( "DefaultDisplayType" , tagsVmMap.getDefaultDisplayType ( ) ) ; getCallsHandler ( ) . executeModification ( "UpdateVmTagsDefaultDisplayType" , parameterSource ) ; }
private void generateEnum ( org.ovirt.api.metamodel.concepts.EnumType type ) { org.ovirt.sdk.python.PythonClassName typeName = pythonNames.getTypeName ( type ) ; buffer.addLine ( "@unique" ) ; buffer.addLine ( "class %1$s(Enum):" , typeName.getClassName ( ) ) ; buffer.startBlock ( ) ; type.values ( ) . sorted ( ) . forEach ( this :: generateEnumValue ) ; buffer.addLine ( ) ; buffer.addLine ( "def __init__(self, image):" ) ; buffer.startBlock ( ) ; buffer.addLine ( "self._image = image" ) ; buffer.endBlock ( ) ; buffer.addLine ( ) ; buffer.addLine ( "def __str__(self):" ) ; buffer.startBlock ( ) ; buffer.addLine ( "return self._image" ) ; buffer.endBlock ( ) ; buffer.addLine ( ) ; buffer.endBlock ( ) ; buffer.addLine ( ) ; }
private void handleAddPermissions ( java.lang.String domainName , java.lang.String userName , java.lang.String userId ) { if ( args.containsKey ( org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_ADD_PERMISSIONS ) ) { updatePermissionsTable ( userName , domainName , userId ) ; } else if ( ! ( userHasPermissions ( userName , domainName ) ) ) { java.lang.System.out.println ( java.lang.String.format ( INFO_ABOUT_NOT_ADDING_PERMISSIONS , domainName ) ) ; } }
protected void populateTabMap ( ) { org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.GENERAL_TAB , this . generalTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.CLUSTERS_TAB , this . clusterTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.PROFILES_TAB , this . profilesTab ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.AbstractNetworkPopupView.getTabNameMapping ( ) . put ( TabName.SUBNET_TAB , this . subnetTab ) ; }
private static boolean updateDiskProfileForBackwardCompatibility ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage , java.util.List < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > diskProfilesList , java.util.Set < org.ovirt.engine.core.compat.Guid > permittedDiskProfilesIds , org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { for ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : diskProfilesList ) { if ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper.isDiskProfilePermitted ( diskProfile , permittedDiskProfilesIds , user ) ) { permittedDiskProfilesIds.add ( diskProfile.getId ( ) ) ; diskImage.setDiskProfileId ( diskProfile.getId ( ) ) ; return true ; } } return false ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
private boolean isExceedMaxBlockDiskSize ( ) { if ( org.ovirt.engine.core.bll.AddDiskCommand.getStorageDomain ( ) . getStorageType ( ) . isBlockDomain ( ) ) { return ( getRequestDiskSpace ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.MaxBlockDiskSize ) ) ; } return false ; }
public void getUsbPolicyOnUpdateCurrentlyDisabledGotNullUsb ( ) { org.ovirt.engine.api.model.Usb usb = null ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
public static boolean isCpuUpdatable ( java.lang.String cpuName , org.ovirt.engine.core.compat.Version ver ) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get ( ver ) ; org.ovirt.engine.core.common.businessentities.ServerCpu server = null ; if ( cpuFlagsManager != null ) { server = cpuFlagsManager.getServerCpuByName ( cpuName ) ; } int serverLevel = ( server != null ) ? server.getLevel ( ) : 0 ; return serverLevel != 0 ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getAddCommand ( ) ) ) { add ( ) ; } else if ( command == ( getEditCommand ( ) ) ) { edit ( ) ; } else if ( command == ( getRemoveCommand ( ) ) ) { remove ( ) ; } }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
private java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > getNicNameToNetworksMap ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > nicNameToNetworksMap = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure ) { java.lang.String mapKey = attachment.getNicName ( ) ; org.ovirt.engine.core.common.businessentities.network.Network networkToConfigure = existingNetworkRelatedToAttachment ( attachment ) ; org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( mapKey , networkToConfigure , nicNameToNetworksMap , new org.ovirt.engine.core.utils.collections.MultiValueMapUtils.ListCreator < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ) ; } return nicNameToNetworksMap ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool a : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) { if ( ( a.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up ) ) { list.add ( a ) ; } } model.setDataCenter ( model , list ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroupWithNoCpuName ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setName ( "Default" ) ; group.setId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.DEFAULT_VDS_GROUP_ID ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.DC_ID1 ) ; group.setArchitecture ( ArchitectureType.undefined ) ; group.setClusterPolicyId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return group ; }
public void shouldDetectNonContinuousNodeIndices ( ) { vmNumaNodes.get ( 0 ) . setIndex ( 0 ) ; vmNumaNodes.get ( 1 ) . setIndex ( 2 ) ; assertValidationFailure ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) , EngineMessage.VM_NUMA_NODE_NON_CONTINUOUS_INDEX ) ; }
public void testAddVersionNoBaseTemplateId ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Template t = org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.getModel ( 2 ) ; t.getVersion ( ) . setBaseTemplate ( null ) ; verifyBadRequest ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.collection.add ( t ) ) ) ; }
private boolean showWarningForByVmSnapshotsValidation ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > snapshots ) { for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots ) { if ( ( ! ( validateNewSnapshotByStatus ( snapshot.getStatus ( ) ) ) ) || ( ! ( validateNewSnapshotByType ( snapshot.getType ( ) ) ) ) ) { getDescription ( ) . setIsAvailable ( false ) ; getMemory ( ) . setIsAvailable ( false ) ; return true ; } } return false ; }
public boolean parseReport ( java.lang.String xmlPath ) { try { com.google.gwt.xml.client.Document messageDom = com.google.gwt.xml.client.XMLParser.parse ( xmlPath ) ; com.google.gwt.xml.client.Element reportsElement = ( ( com.google.gwt.xml.client.Element ) ( messageDom.getElementsByTagName ( "reports" ) . item ( 0 ) ) ) ; com.google.gwt.xml.client.NodeList dashboradsNodeList = reportsElement.getElementsByTagName ( "dashboard" ) ; initDashboards ( dashboradsNodeList ) ; com.google.gwt.xml.client.NodeList resourcesNodeList = reportsElement.getElementsByTagName ( "resource" ) ; initResources ( resourcesNodeList ) ; } catch ( java.lang.Throwable e ) { return false ; } return true ; }
public void testRemove ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( ActionType.DetachDiskFromVm , org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters.class , new java.lang.String [ ] { "VmId" , "EntityInfo" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID ) } , true , true , false ) ; setUriInfo ( uriInfo ) ; verifyRemove ( resource.remove ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , hostName , consoleAddress , name , otpValidity , pmEnabled , pmKdumpDetection , port , sshPort , sshUsername , serverSslEnabled , uniqueId , clusterId , vdsStrength , vdsType , disablePowerManagementPolicy , hostProviderId , openstackNetworkProviderId , currentKernelCmdline , kernelCmdlineParsable , lastStoredKernelCmdline , kernelCmdlineIommu , kernelCmdlineKvmNested , kernelCmdlinePciRealloc , kernelCmdlineUnsafeInterrupts , reinstallRequired ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; } }
public void validateFailsOnNoConflictServers ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity ( ) ; hook.setServerHooks ( java.util.Collections.singletonList ( getGlusterServerHook ( 0 , GlusterHookStatus.MISSING ) ) ) ; setUpMocksForUpdate ( true , hook ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString ( ) ) ) ; }
public void autoLogin ( org.ovirt.engine.core.common.businessentities.DbUser user ) { loggingInAutomatically = true ; getUserName ( ) . setEntity ( user.getLoginName ( ) ) ; getDomain ( ) . setSelectedItem ( user.getDomain ( ) ) ; disableLoginScreen ( ) ; setLoggedUser ( user ) ; raiseLoggedInEvent ( ) ; }
protected final java.util.Collection < T > sortItems ( java.util.Collection < T > items ) { if ( ( items == null ) || ( ( comparator ) == null ) ) { return items ; } java.util.SortedSet < T > sortedItems = new java.util.TreeSet < T > ( comparator ) ; sortedItems.addAll ( items ) ; return sortedItems ; }
public void getDataCenterVersions ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.compat.Version > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SortListConverter < > ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAvailableClusterVersionsByStoragePool , tempVar , aQuery ) ; }
protected void setStatus ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VdsDynamic currentHost = org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getDbFacade ( ) . getVdsDynamicDao ( ) . get ( org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getVds ( ) . getId ( ) ) ; if ( ( currentHost != null ) && ( ( currentHost.getStatus ( ) ) != status ) ) { setVdsStatus ( status ) ; } }
public void testHotsetUpdateableWhenHotsetNotRequestedWithStatus ( ) { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker ( org.ovirt.engine.core.utils.Jedi.class ) ; oic.addField ( VMStatus.Down , "name" ) ; oic.addHotsetField ( "name" , java.util.EnumSet.of ( VMStatus.Up ) ) ; org.junit.Assert.assertTrue ( "hot set not requested field should be updateable according to status" , oic.isFieldUpdatable ( VMStatus.Down , "name" , null , false ) ) ; }
public void cleanDownVmsTest ( ) { org.ovirt.engine.core.common.businessentities.HostDevice device = getNetworkDevice ( ) ; org.ovirt.engine.core.common.businessentities.HostDeviceId deviceId = device.getId ( ) ; org.ovirt.engine.core.compat.Guid vmId = FixturesTool.VM_WITH_NO_ATTACHED_DISKS ; dao.setVmIdOnHostDevice ( deviceId , vmId ) ; device = dao.get ( deviceId ) ; org.junit.jupiter.api.Assertions.assertNotNull ( device ) ; org.junit.jupiter.api.Assertions.assertEquals ( vmId , device.getVmId ( ) ) ; dao.cleanDownVms ( ) ; device = dao.get ( deviceId ) ; org.junit.jupiter.api.Assertions.assertNull ( device.getVmId ( ) ) ; }
private final R mapEntity ( java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType , Q created ) { R model = org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.map ( created ) ; model = org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.deprecatedPopulate ( model , created ) ; model = org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.doPopulate ( model , created ) ; return org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource.addLinks ( model , suggestedParentType ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > mockDisksList ( int numberOfDisks ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = new java.util.ArrayList < > ( numberOfDisks ) ; for ( int index = 0 ; index < numberOfDisks ; index ++ ) { org.ovirt.engine.core.common.businessentities.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; disksList.add ( image ) ; } org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getSnapshotsDummiesForStorageAllocations ( ) ; return disksList ; }
private java.lang.Object getStorageDomains ( ) { java.util.List < org.ovirt.engine.api.model.StorageDomain > sds = new java.util.LinkedList < org.ovirt.engine.api.model.StorageDomain > ( ) ; org.ovirt.engine.api.model.StorageDomain sd = new org.ovirt.engine.api.model.StorageDomain ( ) ; sd.setStorageName ( "Storage_Domain_1" ) ; sd.setId ( GUIDS [ 2 ] ) ; sds.add ( sd ) ; return sds ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( object.getIsDiscorveredHosts ( ) . getEntity ( ) ) == true ) { rbDiscoveredHost.setValue ( true ) ; showDiscoveredHostsWidgets ( true ) ; } else { rbProvisionedHost.setValue ( true ) ; showProvisionedHostsWidgets ( true ) ; } }
public boolean detectBrowserPlugin ( ) { if ( configurator.isClientLinuxFirefox ( ) ) { return detectXpiPlugin ( ) ; } else if ( ( configurator.isClientWindowsExplorer ( ) ) || ( cu.isIE11 ( ) ) ) { return detectActiveXPlugin ( ) ; } return false ; }
public static void getDefaultTimeZone ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.TimeZoneType timeZoneType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return "" ; } } ; org.ovirt.engine.core.common.queries.TimeZoneQueryParams params = new org.ovirt.engine.core.common.queries.TimeZoneQueryParams ( ) ; params.setTimeZoneType ( timeZoneType ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDefaultTimeZone , params , aQuery ) ; }
public void onSuccess ( java.util.Set < java.lang.String > returnValue ) { if ( returnValue != null ) { java.util.Set < java.lang.String > emulatedSet = new java.util.TreeSet < > ( returnValue ) ; emulatedSet.add ( "" ) ; java.lang.String oldVal = getModel ( ) . getEmulatedMachine ( ) . getSelectedItem ( ) ; getModel ( ) . getEmulatedMachine ( ) . setItems ( emulatedSet ) ; getModel ( ) . getEmulatedMachine ( ) . setSelectedItem ( oldVal ) ; } }
private boolean doesHostSupportAnyCluster ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusterList , org.ovirt.engine.core.common.businessentities.VDS host ) { for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusterList ) { if ( host.getSupportedClusterVersionsSet ( ) . contains ( cluster.getcompatibility_version ( ) ) ) { return true ; } } return false ; }
public static void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; return getClusterByServiceList ( list , supportsVirtService , supportsGlusterService ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; }
private static boolean isBalloonEnabled ( org.ovirt.engine.core.common.action.VmManagementParametersBase params ) { java.lang.Boolean balloonEnabled = params.isBalloonEnabled ( ) ; return balloonEnabled != null ? balloonEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.isBalloonEnabled ( params.getVmStaticData ( ) . getId ( ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.qos.CpuQos ) ) { return false ; } org.ovirt.engine.core.common.businessentities.qos.CpuQos other = ( ( org.ovirt.engine.core.common.businessentities.qos.CpuQos ) ( obj ) ) ; return ( super . equals ( obj ) ) && ( java.util.Objects.equals ( cpuLimit , other.cpuLimit ) ) ; }
public void testReportConfigurationsOnHostWhenSwitchTypeIsOutOfSync ( ) throws java.lang.Exception { cluster.setRequiredSwitchTypeForCluster ( SwitchType.OVS ) ; org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createTestedInstance ( ) . reportConfigurationsOnHost ( ) ; org.junit.Assert.assertThat ( reportedConfigurations.isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration > reportedConfigurationList = reportedConfigurations.getReportedConfigurationList ( ) ; org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration expectedReportedConfiguration = new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration ( org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE , org.ovirt.engine.core.common.network.SwitchType.LEGACY , org.ovirt.engine.core.common.network.SwitchType.OVS , false ) ; org.junit.Assert.assertThat ( reportedConfigurationList.contains ( expectedReportedConfiguration ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
public void setUp ( ) { newEnoughHost = newHost ( "RHEL - 7.2 - 1.el7" ) ; tooOldHost = newHost ( "RHEL - 5.0 - 1.el5" ) ; currentHost = newHost ( "RHEL - 6.1 - 1.el6" ) ; runningVm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; runningVm.setRunOnVds ( currentHost.getId ( ) ) ; org.mockito.Mockito.when ( vdsDynamicDao.get ( org.mockito.ArgumentMatchers.eq ( currentHost.getId ( ) ) ) ) . thenReturn ( currentHost.getDynamicData ( ) ) ; }
private boolean networkRequiredOnVds ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmIface , java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > networksByName , boolean onlyRequiredNetworks ) { boolean networkRequiredOnVds = true ; if ( ! ( vmIface.isPlugged ( ) ) ) { networkRequiredOnVds = false ; } else if ( onlyRequiredNetworks ) { networkRequiredOnVds = networksByName.get ( vmIface.getNetworkName ( ) ) . getCluster ( ) . isRequired ( ) ; } return networkRequiredOnVds ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( ) { com.google.gwt.safehtml.shared.SafeHtml tooltip = null ; if ( ( getModel ( ) . isHotPlugAvailable ( ) ) && ( ! ( getModel ( ) . isPlugAvailableByDisks ( true ) ) ) ) { tooltip = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( org.ovirt.engine.ui.common.widget.uicommon.vm.VmDiskListModelTable.constants.diskHotPlugNotSupported ( ) ) ; } return tooltip ; }
public void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
protected void updateCpuSharesAvailability ( ) { if ( ( getModel ( ) . getSelectedCluster ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . getSelectedCluster ( ) ; boolean availableCpuShares = ( cluster.getCompatibilityVersion ( ) . compareTo ( Version.v3_3 ) ) >= 0 ; getModel ( ) . getCpuSharesAmountSelection ( ) . setIsAvailable ( availableCpuShares ) ; getModel ( ) . getCpuSharesAmount ( ) . setIsAvailable ( availableCpuShares ) ; } }
protected org.ovirt.engine.core.common.businessentities.Cluster postPopulate ( org.ovirt.engine.core.common.businessentities.Cluster model ) { org.ovirt.engine.api.model.ErrorHandling errorHandling = new org.ovirt.engine.api.model.ErrorHandling ( ) ; errorHandling.setOnError ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.MigrateOnError.class ) . value ( ) ) ; model.setErrorHandling ( errorHandling ) ; model.getSerialNumber ( ) . setPolicy ( SerialNumberPolicy.CUSTOM.value ( ) ) ; model.getRequiredRngSources ( ) . getRequiredRngSources ( ) . clear ( ) ; model.getRequiredRngSources ( ) . getRequiredRngSources ( ) . add ( RngSource.RANDOM.name ( ) ) ; return model ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageDomainDynamicDao ( ) ; staticDao = dbFacade.getStorageDomainStaticDao ( ) ; existingDynamic = dao.get ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.EXISTING_DOMAIN_ID ) ; newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ; newStaticDomain.setStorage ( "fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl" ) ; newDynamicDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic ( ) ; newDynamicDomain.setavailable_disk_size ( org.ovirt.engine.core.dao.StorageDomainDynamicDAOTest.USED_DISK_SIZE ) ; }
void localize ( org.ovirt.engine.ui.userportal.ApplicationConstants constants ) { headerLabel.setText ( constants.loginHeaderLabel ( ) ) ; userNameLabel.setText ( constants.loginFormUserNameLabel ( ) ) ; passwordLabel.setText ( constants.loginFormPasswordLabel ( ) ) ; domainLabel.setText ( constants.loginFormDomainLabel ( ) ) ; connectAutomatically.setLabel ( constants.loginFormConnectAutomaticallyLabel ( ) ) ; loginButton.setLabel ( constants.loginButtonLabel ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { initImportClonedTemplateDisks ( ) ; AddVmTemplateToDb ( ) ; AddVmInterfaces ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; } } ) ; MoveOrCopyAllImageGroups ( getVmTemplateId ( ) , getParameters ( ) . getImages ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices ( getVmTemplate ( ) , getParameters ( ) . isImportAsNewEntity ( ) ) ; setSucceeded ( true ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > generateDisksList ( int size ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < size ; ++ i ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; disksList.add ( diskImage ) ; } return disksList ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid.Empty } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) , null ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( p.getvm_count ( ) ) < ( highVdsCountTemp * ( org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores ( p ) ) ) ) && ( ( p.getvm_count ( ) ) >= ( lowVdsCountTemp * ( org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores ( p ) ) ) ) ; }
protected java.lang.Double [ ] getRawValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { java.lang.Double receiveDropRate = ( object != null ) ? object.getStatistics ( ) . getReceiveDropRate ( ) : null ; java.lang.Double transmitDropRate = ( object != null ) ? object.getStatistics ( ) . getTransmitDropRate ( ) : null ; return new java.lang.Double [ ] { receiveDropRate , transmitDropRate } ; }
public void getConfigurationValueBoolean ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.queries.ConfigurationValues configVal ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( configVal , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void validateQueryType ( javax.servlet.http.HttpServletRequest request ) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter ( request , SsoConstants.HTTP_PARAM_SEARCH_QUERY_TYPE ) ; if ( ( ! ( directoryQueries.containsKey ( queryType ) ) ) && ( ! ( directoryPublicQueries.containsKey ( queryType ) ) ) ) { throw new org.ovirt.engine.core.sso.utils.OAuthException ( org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST , java.lang.String.format ( ssoContext.getLocalizationUtils ( ) . localize ( SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST , ( ( java.util.Locale ) ( request.getAttribute ( SsoConstants.LOCALE ) ) ) ) , queryType , SsoConstants.HTTP_PARAM_SEARCH_QUERY_TYPE ) ) ; } }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNotSetPolicyNotSetUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; org.ovirt.engine.core.common.businessentities.UsbPolicy currentPolicy = org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , currentPolicy ) , currentPolicy ) ; }
private void assignVNumaToPhysicalNuma ( org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel vNodeModel , java.lang.Integer hostNodeIndex ) { if ( ! ( p2vNumaNodesMap.containsKey ( hostNodeIndex ) ) ) { p2vNumaNodesMap.put ( hostNodeIndex , new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel > ( ) ) ; } p2vNumaNodesMap.get ( hostNodeIndex ) . add ( vNodeModel ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( 2 , false , false , false , false ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.DetachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public < T > T getEntity ( java.lang.Class < T > clz , org.ovirt.engine.core.common.queries.QueryType query , org.ovirt.engine.core.common.queries.QueryParametersBase queryParams , java.lang.String identifier , boolean notFoundAs404 , boolean isMandatory ) { try { return doGetEntity ( clz , query , queryParams , identifier , isMandatory ) ; } catch ( java.lang.Exception e ) { return handleError ( clz , e , notFoundAs404 ) ; } }
public void getDataCenterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "DataCenter: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( connectAutomatically.readConnectAutomatically ( ) ) && ( model.getCanConnectAutomatically ( ) ) ) && ( ! ( alreadyOpened ) ) ) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel userPortalItemModel = model.GetUpVms ( model.getItems ( ) ) . get ( 0 ) ; if ( userPortalItemModel != null ) { userPortalItemModel.getDefaultConsoleModel ( ) . getConnectCommand ( ) . Execute ( ) ; alreadyOpened = true ; } } unregisterModels ( ) ; }
private org.ovirt.engine.core.common.businessentities.HostDevice fetchHostDevice ( java.lang.String deviceName ) { return hostDeviceDao.getHostDeviceByHostIdAndDeviceName ( org.ovirt.engine.core.bll.hostdev.AbstractVmHostDevicesCommand.getVm ( ) . getDedicatedVmForVdsList ( ) . get ( 0 ) , deviceName ) ; }
public void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private static com.google.gwt.resources.client.ImageResource getPoolVmImageResource ( org.ovirt.engine.core.common.businessentities.VmType vmType , boolean nextRunConfigurationExists ) { switch ( vmType ) { case Server : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersChangesImage ( ) : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyServersImage ( ) ; case Desktop : default : return nextRunConfigurationExists ? org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsChangesImage ( ) : org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.manyDesktopsImage ( ) ; } }
public void schedulJobs ( ) { org.ovirt.engine.core.utils.timer.SchedulerUtil sched = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) ; int refreshRate = ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsRefreshRate ) ) * 1000 ; refreshIteration = ( numberRefreshesBeforeSave ) - 1 ; onTimerJobId = sched.scheduleAFixedDelayJob ( this , "onTimer" , new java.lang.Class [ 0 ] , new java.lang.Object [ 0 ] , refreshRate , refreshRate , java.util.concurrent.TimeUnit.MILLISECONDS ) ; vmsMonitoringJobId = sched.scheduleAFixedDelayJob ( this , "vmsMonitoring" , new java.lang.Class [ 0 ] , new java.lang.Object [ 0 ] , refreshRate , refreshRate , java.util.concurrent.TimeUnit.MILLISECONDS ) ; }
private void initValueChangeListeners ( ) { org.ovirt.engine.ui.uicompat.IEventListener onPropertyChangeValidate = new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { validate ( true ) ; } } ; getSnapshotName ( ) . getEntityChangedEvent ( ) . addListener ( onPropertyChangeValidate ) ; getDaysOfTheWeek ( ) . getSelectedItemChangedEvent ( ) . addListener ( onPropertyChangeValidate ) ; getDaysOfMonth ( ) . getSelectedItemChangedEvent ( ) . addListener ( onPropertyChangeValidate ) ; getEndDate ( ) . getEntityChangedEvent ( ) . addListener ( onPropertyChangeValidate ) ; }
private void initTestCommand ( org.ovirt.engine.core.compat.Guid volumeId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks , int replicaCount , int stripeCount , boolean force ) { cmd.setGlusterVolumeId ( volumeId ) ; cmd.getParameters ( ) . setBricks ( bricks ) ; cmd.getParameters ( ) . setReplicaCount ( replicaCount ) ; cmd.getParameters ( ) . setStripeCount ( stripeCount ) ; cmd.getParameters ( ) . setForce ( force ) ; }
protected java.util.List < java.lang.Class < ? > > getValidationGroups ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return org.ovirt.engine.core.bll.ImportVmCommand.addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportClonedEntity.class ) ; } return org.ovirt.engine.core.bll.ImportVmCommand.addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportEntity.class ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetworkDAO ( ) . save ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) ) ; org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissions ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getCurrentUser ( ) . getUserId ( ) , org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . getId ( ) , org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getParameters ( ) . isPublicUse ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue ( ) . setActionReturnValue ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded ( true ) ; }
private org.ovirt.engine.core.compat.Guid getPrestartedVmToAttach ( org.ovirt.engine.core.compat.Guid vmPoolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmPoolMap > vmPoolMaps = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolDao ( ) . getVmMapsInVmPoolByVmPoolIdAndStatus ( vmPoolId , VMStatus.Up ) ; if ( vmPoolMaps != null ) { for ( org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps ) { if ( canAttachPrestartedVmToUser ( map.getVmId ( ) , org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue ( ) . getValidationMessages ( ) ) ) { return map.getVmId ( ) ; } } } return org.ovirt.engine.core.compat.Guid.Empty ; }
private org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel getPosixModelByStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain storage ) { switch ( storage.getStorageType ( ) ) { case GLUSTERFS : return new org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel ( ) ; default : return new org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel ( ) ; } }
public void moveUnpluggedDiskVmUp ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageId , false ) ; command.updateParameters ( ) ; org.junit.Assert.assertEquals ( command.getMoveDiskParametersList ( ) . size ( ) , 1 ) ; }
public org.ovirt.engine.sdk.decorators.DataCenterCluster add ( org.ovirt.engine.sdk.decorators.Cluster cluster ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , cluster , org.ovirt.engine.sdk.entities.Cluster.class , org.ovirt.engine.sdk.decorators.DataCenterCluster.class , headers ) ; }
private void fetchImageTemplates ( ) { if ( ( imageTemplates ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > allImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId ( ) ) ; imageTemplates = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks ( allImages , false , false , true ) ; imageTemplates.addAll ( org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder ( allImages , true ) ) ; } }
private void removeVmStatelessImages ( ) { if ( ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getSnapshotDao ( ) . exists ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) , SnapshotType.STATELESS ) ) && ( ( getVmPoolType ( ) ) != ( org.ovirt.engine.core.common.businessentities.VmPoolType.Manual ) ) ) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.info ( "Deleting snapshot for stateless vm '{}'" , org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVmId ( ) ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getContext ( ) , org.ovirt.engine.core.bll.ProcessDownVmCommand.getLock ( ) ) ) ; } }
protected org.ovirt.engine.core.bll.ValidationResult isStorageDomainCompatibleWithDC ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainStatic ) { org.ovirt.engine.core.bll.storage.StoragePoolValidator spv = new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) ) ; if ( ( domainStatic.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.GLUSTERFS ) ) { return spv.isGlusterSupportedInDC ( ) ; } if ( ( domainStatic.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.POSIXFS ) ) { return spv.isPosixSupportedInDC ( ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void testGetHostDevicesByHostIdAndIommuGroup ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > hostDevices = dao.getHostDevicesByHostIdAndIommuGroup ( FixturesTool.VDS_RHEL6_NFS_SPM , org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_IOMMU_GROUP ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.HostDeviceDaoTest.TOTAL_DEVICES_IN_GROUP , hostDevices.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.HostDevice hostDevice : hostDevices ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.VDS_RHEL6_NFS_SPM , hostDevice.getHostId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( java.lang.Integer.valueOf ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_IOMMU_GROUP ) , hostDevice.getIommuGroup ( ) ) ; } }
protected boolean checkImagesStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId ( ) ) , true , false ) ; org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator ( disksToCheck ) ; return validate ( diskImagesValidator.diskImagesNotLocked ( ) ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { org.ovirt.engine.api.resource.StorageResource subresource = collection.getStorageResource ( "foo" ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpQueryExpectations ( "" ) ; try { subresource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public java.lang.String getSnapshotName ( ) { if ( ( super . getSnapshotName ( ) ) == null ) { final org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getDstSnapshot ( ) ; if ( snapshot != null ) { setSnapshotName ( snapshot.getDescription ( ) ) ; } } return super . getSnapshotName ( ) ; }
public void testRemoveNonExistant ( ) { setUpEntityQueryExpectations ( java.util.Collections.emptyList ( ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.jupiter.api.Assertions.assertNotNull ( wae.getResponse ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
protected org.ovirt.engine.api.model.Vm setVmOvfConfiguration ( org.ovirt.engine.api.model.Vm model , org.ovirt.engine.api.restapi.resource.VM entity ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery ( VdcQueryType.GetVmOvfByVmId , new org.ovirt.engine.core.common.queries.GetVmOvfByVmIdParameters ( entity.getId ( ) , entity.getDbGeneration ( ) ) ) ; if ( ( queryReturnValue.getSucceeded ( ) ) && ( ( queryReturnValue.getReturnValue ( ) ) != null ) ) { java.lang.String configuration = queryReturnValue.getReturnValue ( ) ; return org.ovirt.engine.api.restapi.types.VmMapper.map ( configuration , ConfigurationType.OVF , model ) ; } return model ; }
protected org.ovirt.engine.core.compat.Guid getClusterId ( org.ovirt.engine.api.model.VM vm ) { return isFiltered ( ) ? lookupClusterByName ( vm.getCluster ( ) . getName ( ) ) . getId ( ) : getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup.class , SearchType.Cluster , ( "Cluster: name=" + ( vm.getCluster ( ) . getName ( ) ) ) ) . getId ( ) ; }
public void testPersistentAuthWithSeveralHeaders ( ) { org.junit.jupiter.api.Assertions.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "persistent-auth" , "x" , "y" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "x" , "persistent-auth" , "y" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( FiltersHelper.PREFER_PERSISTENCE_AUTH , getPrefer ( "x" , "y" , "persistent-auth" ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { java.lang.String status = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance ( ) . translate ( snapshot.getStatus ( ) ) ; return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( status ) ; }
public void checkMissingIpv4AddressDetailsBootProtocolStatic ( ) { final boolean initAddress = random.nextBoolean ( ) ; initIpv4ConfigurationDetails ( Ipv4BootProtocol.STATIC_IP , initAddress , ( ! initAddress ) ) ; org.junit.Assert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_STATIC_BOOT_PROTOCOL_MISSING_IP_ADDRESS_DETAILS , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_NETWORK_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.NETWORK_NAME ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_INTERFACE_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.INTERFACE_NAME ) ) ) ; }
protected void Perform ( ) { if ( org.ovirt.engine.core.bll.PauseVmCommand.getVm ( ) . isRunning ( ) ) { setActionReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.Pause , new org.ovirt.engine.core.common.vdscommands.PauseVDSCommandParameters ( org.ovirt.engine.core.bll.PauseVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.PauseVmCommand.getVmId ( ) ) ) . getReturnValue ( ) ) ; org.ovirt.engine.core.bll.PauseVmCommand.setSucceeded ( true ) ; } else { setActionReturnValue ( org.ovirt.engine.core.bll.PauseVmCommand.getVm ( ) . getStatus ( ) ) ; } }
public void setUp ( ) { sourceMacPoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; targetMacPoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; macsToMigrate = new java.util.ArrayList < > ( java.util.Arrays.asList ( "mac1" , "mac2" , "mac3" ) ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( sourceMacPoolId , commandContext ) ) . thenReturn ( sourceMacPool ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( targetMacPoolId , commandContext ) ) . thenReturn ( targetMacPool ) ; org.mockito.Mockito.when ( macPoolPerCluster.getMacPoolById ( targetMacPoolId ) ) . thenReturn ( targetMacPool ) ; cluster = createCluster ( sourceMacPoolId ) ; }
public static void getExternalProviderDiscoveredHostList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetDiscoveredHostListFromExternalProvider , params , aQuery ) ; }
private void updateOps ( byte [ ] message ) { if ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.isDebugEnabled ( ) ) { try { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.debug ( ( "Message sent: " + ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse ( message ) ) ) ) ; } catch ( org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ignored ) { } } final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = this ; scheduleTask ( new java.util.concurrent.Callable < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void call ( ) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { client.updateInterestedOps ( ) ; return null ; } } ) ; }
public void testValidate ( ) { org.ovirt.engine.core.searchbackend.VdsConditionFieldAutoCompleter comp = new org.ovirt.engine.core.searchbackend.VdsConditionFieldAutoCompleter ( ) ; org.junit.Assert.assertTrue ( "1" , comp.validateFieldValue ( "LOAD" , "1" ) ) ; org.junit.Assert.assertTrue ( "123" , comp.validateFieldValue ( "LOAD" , "123" ) ) ; org.junit.Assert.assertTrue ( "123.456" , comp.validateFieldValue ( "LOAD" , "123.456" ) ) ; org.junit.Assert.assertFalse ( "JarJar" , comp.validateFieldValue ( "LOAD" , "JarJar" ) ) ; }
private void persistEngineSession ( java.lang.String sessionId ) { org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo = getSessionInfo ( sessionId ) ; if ( sessionInfo != null ) { sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID , engineSessionDao.save ( new org.ovirt.engine.core.common.businessentities.EngineSession ( getUser ( sessionId , false ) , sessionId , getSourceIp ( sessionId ) ) ) ) ; setSessionStartTime ( sessionId ) ; } }
public void testCheckForIndex_Exists2 ( ) throws java.io.IOException , java.net.URISyntaxException { java.io.File file = new java.io.File ( this . getClass ( ) . getResource ( "filetest" ) . toURI ( ) ) ; org.mockito.Mockito.when ( mockRequest.getServletPath ( ) ) . thenReturn ( "/test/path" ) ; java.io.File indexFile = testServlet.checkForIndex ( mockRequest , mockResponse , file , "/path2" ) ; org.junit.jupiter.api.Assertions.assertNotNull ( indexFile , "indexFile should not be null" ) ; org.junit.jupiter.api.Assertions.assertTrue ( indexFile.exists ( ) , "indexFile should exist" ) ; org.mockito.Mockito.verify ( mockResponse ) . sendRedirect ( "/test/path/path2/index.html" ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getEnableTrustedService ( ) . getEntity ( ) ) != null ) && ( getEnableTrustedService ( ) . getEntity ( ) ) ) { getEnableGlusterService ( ) . setEntity ( false ) ; getEnableGlusterService ( ) . setIsChangeable ( false ) ; } else { getEnableGlusterService ( ) . setIsChangeable ( true ) ; } }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { validateParameters ( network , getRequiredAddFields ( ) ) ; validateEnums ( org.ovirt.engine.api.model.Network.class , network ) ; org.ovirt.engine.api.model.Network entity = map ( network ) ; org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = getAddParameters ( network , entity ) ; return performCreate ( addAction , params , new org.ovirt.engine.api.restapi.resource.DataCenterNetworkIdResolver ( network.getName ( ) , params.getStoragePoolId ( ) . toString ( ) ) ) ; }
private org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery createProviderReadOnlyCallback ( ) { org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery asyncQuery = new org.ovirt.engine.ui.uicommonweb.models.networks.AsyncQuery ( ) ; asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.AsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { setCommandExecutionAllowedForProvider ( ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } } ; return asyncQuery ; }
public void validate ( ) { java.util.List lunsFromDb = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun1.setLUNId ( "1" ) ; lun1.setStorageDomainId ( sdId ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun2.setLUNId ( "2" ) ; lun2.setStorageDomainId ( sdId ) ; lunsFromDb.add ( lun1 ) ; lunsFromDb.add ( lun2 ) ; org.mockito.Mockito.when ( lunsDao.getAllForVolumeGroup ( org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommandTest.STORAGE ) ) . thenReturn ( lunsFromDb ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > > aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.DbGroup getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.DbGroup entity = new org.ovirt.engine.core.common.businessentities.DbGroup ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setName ( org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.GROUP_NAMES [ index ] ) ; entity.setDomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; entity.setExternalId ( new org.ovirt.engine.core.common.utils.ExternalId ( GUIDS [ index ] . toByteArray ( ) ) ) ; return entity ; }
public void canDoActionSpaceValidationSucceeds ( ) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , VolumeType.Preallocated ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.NonOperationalReason persistAndEnforceNetworkCompliance ( org.ovirt.engine.core.common.businessentities.VDS host , boolean skipManagementNetwork , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > userConfiguredNics ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbIfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getInterfaceDao ( ) . getAllInterfacesForVds ( host.getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . getAllForCluster ( host.getVdsGroupId ( ) ) ; persistTopology ( host.getInterfaces ( ) , dbIfaces , userConfiguredNics ) ; return enforceNetworkCompliance ( host , skipManagementNetwork , dbIfaces , clusterNetworks ) ; }
protected boolean commandSpecificCanDoAction ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage targetDisk = org.ovirt.engine.core.bll.UploadStreamCommand.getDiskImage ( ) ; if ( ( targetDisk.getVolumeType ( ) ) != ( org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_VOLUME_TYPE_UNSUPPORTED , java.lang.String.format ( "$volumeType %1$s" , targetDisk.getVolumeType ( ) . toString ( ) ) , java.lang.String.format ( "$supportedVolumeTypes %1$s" , VolumeType.Preallocated ) ) ; } return true ; }
public static void getHostFingerprint ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHKeyFingerprint , new org.ovirt.engine.core.common.queries.ServerParameters ( hostAddress ) , aQuery ) ; }
public void onFailureAlertShown ( ) { mockExecutor ( false ) ; try { command.executeCommand ( ) ; org.junit.Assert.fail ( ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException ex ) { org.mockito.Mockito.verify ( auditLogDirector , org.mockito.Mockito.times ( 3 ) ) . log ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.AuditLogType.class ) ) ; } }
private void addChildren ( org.ovirt.engine.core.common.businessentities.Tags tag ) { org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added to tree" , tag.getTagName ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Tags > children = tagDao.getAllForParent ( tag.getTagId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Tags child : children ) { addChildren ( child ) ; org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added as child to parent '{}'" , child.getTagName ( ) , tag.getTagName ( ) ) ; tag.getChildren ( ) . add ( child ) ; addTagToHash ( tag ) ; addTagToHash ( child ) ; } }
public void execute ( int iterationId ) { try { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( getStorageDomain ( ) . getStorageType ( ) ) . connectStorageToDomainByVdsId ( getStorageDomain ( ) , getVdss ( ) . get ( iterationId ) . getId ( ) ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.storage.ConnectSingleAsyncOperation.log.errorFormat ( "Failed to connect host {0} to storage pool {1}. Exception: {3}" , getVdss ( ) . get ( iterationId ) . getVdsName ( ) , getStoragePool ( ) . getname ( ) , e ) ; } }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runUpdateMomPolicy ( final org.ovirt.engine.core.common.businessentities.VDSGroup cluster , final org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; if ( ( cluster.getCompatibilityVersion ( ) . compareTo ( Version.v3_3 ) ) >= 0 ) { try { returnValue = runVdsCommand ( VDSCommandType.SetMOMPolicyParameters , new org.ovirt.engine.core.common.vdscommands.MomPolicyVDSParameters ( vds , cluster.isEnableBallooning ( ) , cluster.isEnableKsm ( ) ) ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.error ( "Could not update MoM policy on host '{}'" , vds.getName ( ) ) ; returnValue.setSucceeded ( false ) ; } } return returnValue ; }
protected void endExecutionMonitoring ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . isRunAndPause ( ) ) && ( ( org.ovirt.engine.core.bll.RunVmCommand.getVmDynamicDao ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) { final org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , true ) ; } else { super . endExecutionMonitoring ( ) ; } }
public java.util.Map < java.lang.Long , java.lang.String > getInstanceToHostAssignments ( ) { java.util.Map < java.lang.Long , java.lang.String > situation = new java.util.HashMap < > ( ) ; for ( org.ovirt.optimizer.solver.facts.Instance instance : instances ) { org.ovirt.engine.sdk.entities.VM vm = vms.get ( instance.getVmId ( ) ) ; situation.put ( instance.getId ( ) , ( ( vm.getHost ( ) ) == null ? null : vm.getHost ( ) . getId ( ) ) ) ; } return situation ; }
private void PollAndUpdateAsyncTasks ( ) { if ( logChangedMap ) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat ( "Polling and updating Async Tasks: {0} tasks, {1} tasks to poll now" , _tasks.size ( ) , NumberOfTasksToPoll ( ) ) ; } java.util.Set < org.ovirt.engine.core.compat.Guid > poolsOfActiveTasks = getPoolIdsTasks ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > > poolsAllTasksMap = getSPMsTasksStatuses ( poolsOfActiveTasks ) ; updateTaskStatuses ( poolsAllTasksMap ) ; }
public org.ovirt.engine.core.bll.CommandBase < ? > createWrappedCommand ( org.ovirt.engine.core.bll.context.CommandContext commandContext , org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.ActionParametersBase parameter , boolean isInternal ) { org.ovirt.engine.core.bll.CommandBase < ? > command = ( isInternal ) ? org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameter , ( commandContext != null ? commandContext.clone ( ) . withoutCompensationContext ( ) : null ) ) : org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameter ) ; command.setInternalExecution ( isInternal ) ; return command ; }
public void testDetermineNetworkType ( ) { org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator validator = new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator ( null , null , networkExclusivenessValidator ) ; org.hamcrest.MatcherAssert.assertThat ( validator.determineNetworkType ( vlanNetwork ) , org.hamcrest.CoreMatchers.is ( NetworkType.VLAN ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.determineNetworkType ( vmNetwork1 ) , org.hamcrest.CoreMatchers.is ( NetworkType.VM ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.determineNetworkType ( nonVmNetwork1 ) , org.hamcrest.CoreMatchers.is ( NetworkType.NON_VM ) ) ; }
public void testGetCascadingResource_missingResourcesFile ( ) throws java.net.URISyntaxException { java.io.File testThemeRootPath = new java.io.File ( this . getClass ( ) . getClassLoader ( ) . getResource ( "./org/ovirt/engine/core/utils/branding" ) . toURI ( ) . getPath ( ) ) ; java.io.File testThemePath = new java.io.File ( testThemeRootPath.getAbsoluteFile ( ) , "04-test4.brand" ) ; org.ovirt.engine.core.utils.branding.BrandingTheme theme4 = new org.ovirt.engine.core.utils.branding.BrandingTheme ( testThemePath.getAbsolutePath ( ) , testThemeRootPath , 1 ) ; org.junit.Assert.assertTrue ( "Theme 4 should load" , theme4.load ( ) ) ; org.junit.Assert.assertNull ( "getCascadingResource not handling missing resources.properties gracefully" , theme4.getCascadingResource ( "this_file_is_missing_anyway" ) ) ; }
private org.ovirt.engine.core.common.action.VdcActionParametersBase createUpgradeParameters ( org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters ) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters upgradeParams = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters ( parameters.getVdsId ( ) ) ; upgradeParams.setSessionId ( parameters.getSessionId ( ) ) ; upgradeParams.setCorrelationId ( parameters.getCorrelationId ( ) ) ; upgradeParams.setInitialStatus ( parameters.getInitialStatus ( ) ) ; upgradeParams.setoVirtIsoFile ( parameters.getoVirtIsoFile ( ) ) ; upgradeParams.setParentCommand ( ActionType.UpgradeHost ) ; upgradeParams.setParentParameters ( parameters ) ; return upgradeParams ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < java.lang.String > pmTypes = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; updatePmTypeList ( pmTypes , getPmType ( ) ) ; updatePmTypeList ( pmTypes , getPmSecondaryType ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; }
protected org.ovirt.engine.core.common.businessentities.Permissions mapCollection ( java.util.Set < org.ovirt.engine.core.common.businessentities.Permissions > entities ) { org.ovirt.engine.core.common.businessentities.Permissions collection = new org.ovirt.engine.core.common.businessentities.Permissions ( ) ; for ( org.ovirt.engine.core.common.businessentities.Permissions entity : entities ) { castEveryonePermissionsToUser ( entity ) ; org.ovirt.engine.api.model.Permission permission = map ( entity , getUserById ( entity.getAdElementId ( ) ) ) ; collection.getPermissions ( ) . add ( addLinks ( permission , ( ( permission.getUser ( ) ) != null ? suggestedParentType : org.ovirt.engine.api.model.Group.class ) ) ) ; } return collection ; }
public void canDoActionVmInPreview ( ) { initializeCommand ( ImageOperation.Move ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.when ( snapshotsValidator.vmNotInPreview ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
protected void endVmCommand ( ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) ) != null ) { org.ovirt.engine.core.bll.VmCommand.getVmStaticDao ( ) . incrementDbGeneration ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getId ( ) ) ; } endActionOnDisks ( ) ; unlockVm ( ) ; org.ovirt.engine.core.bll.VmCommand.setSucceeded ( true ) ; }
void bindConfiguration ( ) { bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultLoginSectionPlace.class ) . to ( ApplicationPlaces.DEFAULT_LOGIN_SECTION_PLACE ) ; bindConstant ( ) . annotatedWith ( org.ovirt.engine.ui.common.section.DefaultMainSectionPlace.class ) . to ( ApplicationPlaces.DEFAULT_MAIN_SECTION_PLACE ) ; bindResourceConfiguration ( org.ovirt.engine.ui.webadmin.ApplicationConstants.class , org.ovirt.engine.ui.webadmin.ApplicationMessages.class , org.ovirt.engine.ui.webadmin.ApplicationResources.class , org.ovirt.engine.ui.webadmin.ApplicationTemplates.class , org.ovirt.engine.ui.webadmin.ApplicationDynamicConstants.class ) ; }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase getRestoreFromSnapshotParams ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters params = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters ( cinderDisk.getImageId ( ) ) ; params.setRemovedVolume ( cinderDisk ) ; params.setParentCommand ( org.ovirt.engine.core.bll.storage.disk.cinder.RestoreAllCinderSnapshotsCommand.getActionType ( ) ) ; params.setStorageDomainId ( cinderDisk.getStorageIds ( ) . get ( 0 ) ) ; params.setParentParameters ( org.ovirt.engine.core.bll.storage.disk.cinder.RestoreAllCinderSnapshotsCommand.getParameters ( ) ) ; return params ; }
public void getFreeVfOneFreeVf ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( 1 , 4 , 3 , 2 , 1 ) ; org.junit.Assert.assertEquals ( 1 , freeVfs.size ( ) ) ; org.junit.Assert.assertTrue ( freeVfs.contains ( hostNicVfsConfigHelper.getFreeVf ( nic , null ) ) ) ; }
public void testGetAllForVolumeGroup ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > result = dao.getAllForVolumeGroup ( existingLUN.getvolume_group_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage.LUNs lun : result ) { org.junit.Assert.assertEquals ( existingLUN.getvolume_group_id ( ) , lun.getvolume_group_id ( ) ) ; } }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.VM_ID } , null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public boolean getLegal ( ) { if ( getUseTimout ( ) ) { java.lang.String keyForCheck = getkeyForCheck ( ) ; synchronized ( keyForCheck.intern ( ) ) { if ( ! ( org.ovirt.engine.core.utils.cache.CacheManager.getTimeoutBaseCache ( ) . containsKey ( keyForCheck ) ) ) { org.ovirt.engine.core.utils.cache.CacheManager.getTimeoutBaseCache ( ) . put ( keyForCheck , keyForCheck , getEndTime ( ) , java.util.concurrent.TimeUnit.MILLISECONDS ) ; return true ; } } return false ; } return true ; }
public static void GetDocumentationBaseURL ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private java.lang.String getTimeZoneForVm ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getTimeZone ( ) ) ) ) { return vm.getTimeZone ( ) ; } if ( OsRepositoryImpl.INSTANCE.isWindows ( vm.getOs ( ) ) ) { return org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.DefaultWindowsTimeZone ) ; } else { return "Etc/GMT" ; } }
protected void onActionSucceeded ( org.ovirt.engine.core.compat.Guid macPoolId ) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity ( ) ; macPool.setId ( macPoolId ) ; java.util.Collection < org.ovirt.engine.core.common.businessentities.MacPool > macPools = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.MacPool > ( dcModel.getMacPoolListModel ( ) . getItems ( ) ) ; macPools.add ( macPool ) ; dcModel.getMacPoolListModel ( ) . setItems ( macPools ) ; dcModel.getMacPoolListModel ( ) . setSelectedItem ( macPool ) ; this . setConfirmWindow ( null ) ; }
public int compare ( org.ovirt.engine.core.aaa.ProfileEntry lhs , org.ovirt.engine.core.aaa.ProfileEntry rhs ) { return ( lhs.getProfile ( ) . compareTo ( rhs.getProfile ( ) ) ) != 0 ? lhs.getProfile ( ) . compareTo ( rhs.getProfile ( ) ) : lhs.getAuthz ( ) . compareTo ( rhs.getAuthz ( ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getView ( ) . setAgentTabVisibility ( ( ( java.lang.Boolean ) ( model.getNeutronAgentModel ( ) . isPluginConfigurationAvailable ( ) . getEntity ( ) ) ) ) ; }
public void testUpdateDoesntChangeExternalId ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser userBefore = dao.get ( existingUser.getId ( ) ) ; dao.update ( userBefore ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser userAfter = dao.get ( existingUser.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( userBefore.getExternalId ( ) , userAfter.getExternalId ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotplugDisk ( java.util.Map info ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.hotplugDisk ( info ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public static void getGlusterVolumeGeoRepStatusForMasterVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeGeoRepSessions , new org.ovirt.engine.core.common.queries.IdQueryParameters ( masterVolumeId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.VdsManager getVdsManager ( ) { return vdsManager ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Permissions > getTreeForEntity ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.VdcObjectType type , long engineSessionSeqId , boolean isFiltered , int appMode ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "id" , id ) . addValue ( "object_type_id" , type.getValue ( ) ) . addValue ( "engine_session_seq_id" , engineSessionSeqId ) . addValue ( "is_filtered" , isFiltered ) . addValue ( "app_mode" , appMode ) ; return getCallsHandler ( ) . executeReadList ( "GetPermissionsTreeByEntityId" , org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance , parameterSource ) ; }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ; if ( java.lang.Boolean.TRUE.equals ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getRunAsStateless ( ) ) ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.RunVmOnceCommand.getVm ( ) . getDiskList ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( image.getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , image.getstorage_ids ( ) . get ( 0 ) , image.getActualSize ( ) ) ) ; } } return list ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageSizeReturn diskSizeExtend ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > diskParams , java.lang.String newSize ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.diskSizeExtend" ) . withParameter ( "vmID" , vmId ) . withParameter ( "driveSpecs" , diskParams ) . withParameter ( "newSize" , newSize ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "size" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageSizeReturn ( response ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { updateKeyTitle ( object ) ; }
protected void updateSelectedCdImage ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { getModel ( ) . getCdImage ( ) . setSelectedItem ( vmBase.getIsoPath ( ) ) ; boolean hasCd = ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vmBase.getIsoPath ( ) ) ) ; getModel ( ) . getCdImage ( ) . setIsChangable ( hasCd ) ; getModel ( ) . getCdAttached ( ) . setEntity ( hasCd ) ; }
public void testUpdateCantDo ( ) throws java.lang.Exception { try { update ( false , false , 1 ) ; } catch ( javax.ws.rs.WebApplicationException e ) { org.junit.Assert.assertNotNull ( e.getResponse ( ) ) ; org.junit.Assert.assertEquals ( 400 , e.getResponse ( ) . getStatus ( ) ) ; } }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
private void endVmRelatedOps ( ) { org.ovirt.engine.core.bll.ImportVmCommand.setVm ( null ) ; if ( ( getVm ( ) ) != null ) { org.ovirt.engine.core.bll.VmHandler.unLockVm ( getVm ( ) ) ; } else { org.ovirt.engine.core.bll.ImportVmCommand.setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log.warn ( "VM is null, not performing full endAction" ) ; } }
private org.ovirt.engine.core.compat.Version getForemanVersion ( ) { try { org.ovirt.engine.core.bll.host.provider.foreman.ReportedForemanStatus status = objectMapper.readValue ( runHttpGetMethod ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.API_VERSION_ENTRY_POINT ) , org.ovirt.engine.core.bll.host.provider.foreman.ReportedForemanStatus.class ) ; return new org.ovirt.engine.core.compat.Version ( status.getVersion ( ) ) ; } catch ( java.io.IOException e ) { log.warn ( "Unable to detect Foreman version for provider {}. Using older version to connect to the provider" , getProvider ( ) . getName ( ) ) ; return null ; } }
private void updateProperties ( ) { org.ovirt.engine.core.common.businessentities.Provider provider = ( ( org.ovirt.engine.core.common.businessentities.Provider ) ( getEntity ( ) ) ) ; setName ( provider.getName ( ) ) ; setType ( provider.getType ( ) ) ; setDescription ( provider.getDescription ( ) ) ; setUrl ( provider.getUrl ( ) ) ; }
public void getGlusterVolumeSnapshotsForVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotsByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
public void testCronExpressionForWeeklyNoDays ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule ( ) ; schedule.setFrequency ( Frequency.WEEKLY ) ; schedule.setHour ( 12 ) ; schedule.setMins ( 50 ) ; java.lang.String expectedExpression = "" ; org.junit.jupiter.api.Assertions.assertEquals ( expectedExpression , schedule.toCronExpression ( ) ) ; java.util.List < java.lang.Class < ? > > validationGroup = new java.util.ArrayList < > ( ) ; java.util.List < java.lang.String > result = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs ( validationGroup , schedule ) ; org.junit.jupiter.api.Assertions.assertTrue ( result.isEmpty ( ) ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE_ENTITY , "slaveA" ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , "networkName" ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > createDiskImageList ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setImageId ( diskImageId ) ; disk.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( storageDomainId ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImageList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; diskImageList.add ( disk ) ; return diskImageList ; }
public void updateSortOptions ( java.lang.String sortBy , boolean sortAscending ) { boolean shouldRefresh = ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( this . sortBy , sortBy ) ) ) || ( ( this . sortAscending ) != sortAscending ) ; this . sortBy = sortBy ; this . sortAscending = sortAscending ; if ( shouldRefresh ) { searchString = stripPageKeyword ( searchString ) ; setSearchStringPage ( 1 ) ; refresh ( ) ; } }
public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 , 0 , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateNetworkAttachment , org.ovirt.engine.core.common.action.NetworkAttachmentParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; verifyModel ( resource.update ( getModel ( 0 ) ) , 0 ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid poolId , org.ovirt.engine.core.common.businessentities.StorageDomainType type , org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { java.lang.Integer statusNum = ( status == null ) ? null : status.getValue ( ) ; return getCallsHandler ( ) . executeRead ( "Getstorage_domain_by_type_storagePoolId_and_status" , org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , poolId ) . addValue ( "storage_domain_type" , type.getValue ( ) ) . addValue ( "status" , statusNum ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageType > GetStorageTypeList ( ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageType > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StorageType [ ] { org.ovirt.engine.core.common.businessentities.StorageType.ISCSI , org.ovirt.engine.core.common.businessentities.StorageType.FCP } ) ) ; }
public void initUserAndGroupData ( ) { if ( ( dbUser ) == null ) { dbUser = dbUserDao.get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getAdElementId ( ) ) ; } if ( ( ( dbUser ) == null ) && ( ( dbGroup ) == null ) ) { dbGroup = dbGroupDao.get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getAdElementId ( ) ) ; } }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return ( ( ( clusterNetworkModel.isAttached ( ) ) && ( clusterNetworkModel.isRequired ( ) ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ) && ( ! ( ( multiCluster ) && ( isManagementOriginally ( clusterNetworkModel ) ) ) ) ; }
public static org.ovirt.engine.core.compat.Guid getVmToAttach ( org.ovirt.engine.core.compat.NGuid poolId ) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.Empty ; vmGuid = org.ovirt.engine.core.bll.VmPoolCommandBase.getPrestartedVmToAttach ( poolId ) ; if ( ( vmGuid == null ) || ( Guid.Empty.equals ( vmGuid ) ) ) { vmGuid = org.ovirt.engine.core.bll.VmPoolCommandBase.getNonPrestartedVmToAttach ( poolId ) ; } return vmGuid ; }
public void testSaveMemoryPciPassthroughFailure ( ) { cmd.getParameters ( ) . setSaveMemory ( true ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES ) ) . when ( vmValidator ) . vmNotHavingPciPassthroughDevices ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES ) ; }
protected boolean validateNoDuplicateDiskImages ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > images ) { if ( ( ! ( getParameters ( ) . isImportAsNewEntity ( ) ) ) && ( ! ( isImagesAlreadyOnTarget ( ) ) ) ) { org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( images ) ; return validate ( diskImagesValidator.diskImagesAlreadyExist ( ) ) ; } return true ; }
public void bondWithNoNetworkDidntChange ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.SetupNetworksHelperTest.BOND_NAME , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > ifaces = createNics ( bond.getName ( ) ) ; mockExistingIfacesWithBond ( bond , ifaces ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.SetupNetworksParameters ( ) ; ifaces.add ( bond ) ; parameters.setInterfaces ( ifaces ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNoNetworksModified ( helper ) ; assertNoBondsRemoved ( helper ) ; assertNoNetworksRemoved ( helper ) ; }
public void loadVmsFromKvm ( ) { clearForLoad ( ) ; if ( ! ( validateKvmConfiguration ( ) ) ) { return ; } org.ovirt.engine.core.compat.Guid proxyId = ( ( getXenProxyHosts ( ) . getSelectedItem ( ) ) != null ) ? getXenProxyHosts ( ) . getSelectedItem ( ) . getId ( ) : null ; loadVMsFromExternalProvider ( OriginType.KVM , getKvmUri ( ) . getEntity ( ) , getKvmUsername ( ) . getEntity ( ) , getKvmPassword ( ) . getEntity ( ) , proxyId ) ; }
public java.lang.StringBuilder getTagNameAndChildrenNames ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "'" ) . append ( gettag_name ( ) ) . append ( "'" ) ; for ( org.ovirt.engine.core.common.businessentities.Tags tag : _children ) { builder.append ( ( "," + ( tag.getTagNameAndChildrenNames ( ) ) ) ) ; } return builder ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.DevicesVisibilityMapReturnForXmlRpc getDevicesVisibility ( java.lang.String [ ] devicesList ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getDevicesVisibility" ) . withParameter ( "guidList" , new java.util.ArrayList < java.lang.String > ( java.util.Arrays.asList ( devicesList ) ) ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "visible" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.DevicesVisibilityMapReturnForXmlRpc ( response ) ; }
private boolean isConsoleCommandsExecutionAllowed ( ) { final java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel > list = getSelectedHasConsoleModels ( ) ; if ( ( list == null ) || ( list.isEmpty ( ) ) ) { return false ; } for ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel hasConsoleModel : list ) { final org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol = consoleUtils.determineConnectionProtocol ( hasConsoleModel ) ; if ( consoleUtils.canShowConsole ( protocol , hasConsoleModel ) ) { return true ; } } return false ; }
protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice ( ) ; device.setHostId ( FixturesTool.VDS_RHEL6_NFS_SPM ) ; device.setDeviceName ( ( ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) + "___child" ) ) ; device.setParentDeviceName ( org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME ) ; device.setCapability ( "pci" ) ; device.setDriver ( "mock driver" ) ; device.setAssignable ( true ) ; return device ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ev.equals ( spiceVersionFileFetchedEvent_Definition ) ) { org.ovirt.engine.core.compat.Version spiceVersion = parseVersion ( ( ( org.ovirt.engine.ui.webadmin.uicommon.FileFetchEventArgs ) ( args ) ) . getFileContent ( ) ) ; setSpiceVersion ( spiceVersion ) ; } else if ( ev.equals ( documentationFileFetchedEvent_Definition ) ) { java.lang.String documentationPathFileContent = ( ( org.ovirt.engine.ui.webadmin.uicommon.FileFetchEventArgs ) ( args ) ) . getFileContent ( ) ; org.ovirt.engine.ui.common.uicommon.DocumentationPathTranslator.init ( documentationPathFileContent ) ; } }
private org.ovirt.engine.core.bll.ValidationResult createMissingIpValidationResult ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface missingIpNic , java.lang.String networkName ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ADDR_MANDATORY_FOR_ROLE_NETWORK , java.lang.String.format ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT , networkName ) , java.lang.String.format ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NIC_NAME_REPLACEMENT , missingIpNic.getName ( ) ) , java.lang.String.format ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.HOST_NAME_REPLACEMENT , missingIpNic.getVdsName ( ) ) ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { switch ( org.ovirt.engine.core.bll.RemoveDiskCommand.getActionState ( ) ) { case EXECUTE : if ( ( getDisk ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN ) ) { return org.ovirt.engine.core.bll.RemoveDiskCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.USER_FINISHED_REMOVE_DISK_NO_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK_NO_DOMAIN ; } return org.ovirt.engine.core.bll.RemoveDiskCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.USER_FINISHED_REMOVE_DISK : org.ovirt.engine.core.common.AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK ; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.defaultSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( postponedSpmPriority ) != null ) { updateSpmPriority ( postponedSpmPriority ) ; } spmInitialized = true ; }
protected void addVmWatchdog ( ) { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getWatchdog ( ) ; if ( vmWatchdog != null ) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters ( ) ; parameters.setId ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmId ( ) ) ; parameters.setAction ( vmWatchdog.getAction ( ) ) ; parameters.setModel ( vmWatchdog.getModel ( ) ) ; org.ovirt.engine.core.bll.AddVmCommand.getBackend ( ) . runInternalAction ( VdcActionType.AddWatchdog , parameters ) ; } }
private org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter lookupEntity ( org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter > parameters = getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter.class , QueryType.GetVmInterfaceFilterParameterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter parameter : parameters ) { if ( ( id.equals ( parameter.getId ( ) ) ) || ( name.equals ( parameter.getName ( ) ) ) ) { return parameter ; } } return null ; }
public java.util.List < org.ovirt.engine.core.common.action.ActionReturnValue > runInternalMultipleActions ( org.ovirt.engine.core.common.action.ActionType actionType , java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > parameters ) { return runMultipleActionsImpl ( actionType , parameters , true , false , false , null ) ; }
private static void updateAdditionalFeatures ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { java.lang.String [ ] addtionalFeaturesSupportedByHost = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringArrayValue ( xmlRpcStruct , VdsProperties.ADDITIONAL_FEATURES ) ; if ( addtionalFeaturesSupportedByHost != null ) { for ( java.lang.String feature : addtionalFeaturesSupportedByHost ) { vds.getAdditionalFeatures ( ) . add ( feature ) ; } } }
private void setUpParentMock ( org.ovirt.engine.api.restapi.resource.BackendHostsResource parent ) { parent.setBackend ( backend ) ; parent.setMappingLocator ( mapperLocator ) ; parent.setValidatorLocator ( validatorLocator ) ; parent.setSessionHelper ( sessionHelper ) ; parent.setMessageBundle ( messageBundle ) ; parent.setHttpHeaders ( httpHeaders ) ; }
private void remove ( org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking tracking , org.codehaus.jackson.JsonNode id , org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response ) { this . runningCalls.remove ( id ) ; removeRequestFromTracking ( id ) ; tracking.getCall ( ) . addResponse ( response ) ; }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery , java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.Converter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object source ) { return ( source != null ) && ( ! ( ( java.lang.Boolean ) ( source ) ) ) ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , params , aQuery ) ; }
public int compare ( org.ovirt.engine.api.model.DetailedLink dl1 , org.ovirt.engine.api.model.DetailedLink dl2 ) { int res = dl1.getHref ( ) . compareTo ( dl2.getHref ( ) ) ; return res != 0 ? res : dl1.getRel ( ) . compareTo ( dl2.getRel ( ) ) ; }
public void testGetUserIDWithNoUser ( ) { org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery query = new org.ovirt.engine.core.bll.QueriesCommandBaseTest.ThereIsNoSuchQuery ( new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) ) ; org.junit.Assert.assertEquals ( "wrong guid" , null , query.getUserID ( ) ) ; }
public static java.lang.String getPassFromFile ( java.lang.String passFile ) throws java.io.IOException { java.io.File f = new java.io.File ( passFile ) ; if ( ! ( f.exists ( ) ) ) { return org.apache.commons.lang.StringUtils.EMPTY ; } java.io.FileReader input = new java.io.FileReader ( passFile ) ; java.io.BufferedReader br = new java.io.BufferedReader ( input ) ; java.lang.String pass = br.readLine ( ) ; try { input.close ( ) ; br.close ( ) ; } catch ( java.lang.Exception e ) { } if ( pass == null ) { return org.apache.commons.lang.StringUtils.EMPTY ; } return pass ; }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
private javax.servlet.http.HttpSession getSession ( ) { javax.servlet.http.HttpServletRequest request = this . getThreadLocalRequest ( ) ; javax.servlet.http.HttpSession session = request.getSession ( ) ; org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "IP '{}', Session ID '{}'" , request.getRemoteAddr ( ) , session.getId ( ) ) ; return session ; }
public void dump ( org.ovirt.engine.exttool.aaa.AAAServiceImpl module , org.ovirt.engine.api.extensions.ExtMap map , java.lang.String indent ) { if ( map != null ) { org.ovirt.engine.exttool.aaa.AAAServiceImpl.log.info ( "--- Begin AuthRecord ---" ) ; org.ovirt.engine.exttool.aaa.AAAServiceImpl.Dump.dumpRecord ( module , map , java.util.Collections.< org.ovirt.engine.api.extensions.ExtKey > emptyList ( ) , "AuthRecord" , "" ) ; org.ovirt.engine.exttool.aaa.AAAServiceImpl.log.info ( "--- End AuthRecord ---" ) ; } }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( volumeDao ) . when ( cmd ) . getGlusterVolumeDao ( ) ; org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > mockDisksList ( int numberOfDisks ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = new java.util.ArrayList < > ( numberOfDisks ) ; for ( int index = 0 ; index < numberOfDisks ; index ++ ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; disksList.add ( image ) ; } org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.doReturn ( disksList ) . when ( cmd ) . getSnapshotsDummiesForStorageAllocations ( ) ; return disksList ; }
public void checkNoHost ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data2" , StorageType.NFS , NfsVersion.V4 , 300 , 0 ) ; parameters.setStorageServerConnection ( newNFSConnection ) ; parameters.setVdsId ( null ) ; parameters.setStorageServerConnection ( newNFSConnection ) ; org.mockito.Mockito.when ( storageConnDao.get ( newNFSConnection.getid ( ) ) ) . thenReturn ( oldNFSConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
public void testAddIdSuppliedButNoName ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setId ( "11111111-1111-1111-1111-111111111111" ) ; setUpEntityQueryExpectations ( 1 , null ) ; setUpGetClusterExpectations ( 1 , null ) ; setUpGetNetworksByDataCenterExpectations ( 1 , null ) ; setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpActionExpectations ( VdcActionType.AttachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , true , true ) ; collection.add ( model ) ; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildChildCommandParameters ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters ( cinderDisk.getId ( ) ) ; removeDiskParams.setParentCommand ( org.ovirt.engine.core.bll.RemoveAllVmCinderDisksCommand.getActionType ( ) ) ; removeDiskParams.setParentParameters ( org.ovirt.engine.core.bll.RemoveAllVmCinderDisksCommand.getParameters ( ) ) ; removeDiskParams.setShouldBeLogged ( false ) ; return removeDiskParams ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; java.util.Collections.sort ( disks , new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer ( ) ) ; java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > diskModels = org.ovirt.engine.ui.uicommonweb.Linq.disksToDiskModelList ( disks ) ; model.getInternalAttachableDisks ( ) . setItems ( org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList ( org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType ( diskModels , DiskStorageType.IMAGE ) ) ) ; }
public void setup ( ) { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainCommand ( params , org.ovirt.engine.core.bll.context.CommandContext.createContext ( params.getSessionId ( ) ) ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao ( ) ; org.mockito.Mockito.doReturn ( eventQueue ) . when ( cmd ) . getEventQueue ( ) ; }
protected void onRunOnce ( ) { startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RunVmOnce , createRunVmOnceParams ( ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { stopProgress ( ) ; commandTarget.executeCommand ( runOnceCommand ) ; } } , this ) ; }
public void testNicLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Nic nic = new org.ovirt.engine.api.model.Nic ( ) ; nic.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.NIC_ID ) ; nic.setVm ( new org.ovirt.engine.api.model.VM ( ) ) ; nic.getVm ( ) . setId ( org.ovirt.engine.api.common.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.utils.LinkHelper.addLinks ( setUpUriExpectations ( ) , nic ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.NIC_HREF , nic.getHref ( ) ) ; }
public static void GetGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.StoragePool getTargetStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool targetStoragePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePool ( ) ; if ( targetStoragePool == null ) { targetStoragePool = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStoragePoolDAO ( ) . get ( org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getVds ( ) . getStoragePoolId ( ) ) ; } return targetStoragePool ; }
public void resetAfterLogout ( ) { getUserName ( ) . setEntity ( null ) ; getPassword ( ) . setEntity ( null ) ; getPassword ( ) . setIsChangable ( true ) ; getUserName ( ) . setIsChangable ( true ) ; getDomain ( ) . setIsChangable ( true ) ; getLoginCommand ( ) . setIsExecutionAllowed ( true ) ; loggingInAutomatically = false ; stopProgress ( ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < com.google.gwt.safehtml.shared.SafeHtml , java.lang.String > imagesToText = getImagesToTooltipTextMap ( vm ) ; return imagesToText.isEmpty ( ) ? null : org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip ( imagesToText ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( "Disks" . equals ( args.propertyName ) ) { addDiskList ( model ) ; } else if ( "QuotaEnforcmentType" . equals ( args.propertyName ) ) { updateColumnsAvailability ( model ) ; updateListHeader ( model ) ; } }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.aaa.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.aaa.BackendGroupsResourceTest.QUERY , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.aaa.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
public static void addOrUpdateTaskInDB ( org.ovirt.engine.core.bll.SPMAsyncTask asyncTask ) { try { if ( ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAsyncTaskDao ( ) . saveOrUpdate ( asyncTask.getParameters ( ) . getDbAsyncTask ( ) , asyncTask.getEntityType ( ) , asyncTask.getAssociatedEntities ( ) ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.log.error ( java.lang.String.format ( "Adding/Updating task %1$s to DataBase threw an exception." , asyncTask.getVdsmTaskId ( ) ) , e ) ; } }
public void unsupportedHostedEngineDeployWhenClusterLevelIsUnsupported ( ) { org.mockito.Mockito.when ( hostedEngineHelper.isVmManaged ( ) ) . thenReturn ( false ) ; mockCluster ( Version.v3_6 ) ; org.mockito.Mockito.when ( host.getClusterId ( ) ) . thenReturn ( Guid.Empty ) ; org.junit.Assert.assertThat ( validator.supportsDeployingHostedEngine ( new org.ovirt.engine.core.common.businessentities.HostedEngineDeployConfiguration ( HostedEngineDeployConfiguration.Action.DEPLOY ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_DEPLOYMENT_UNSUPPORTED ) ) ; }
public static void GetAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.storage.VolumeFormat getTargetVolumeFormat ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.compat.Guid storageDomainId ) { if ( ( volumeFormat == ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW ) ) && ( volumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse ) ) ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get ( storageDomainId ) ; if ( destDomain.getStorageType ( ) . isBlockDomain ( ) ) { return org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ; } } return volumeFormat ; }
public static void initCache ( org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cacheConfigValues ( new org.ovirt.engine.ui.frontend.AsyncQuery ( loginModel , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( target ) ; } } ) ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initUniqueOsNames ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initLinuxOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initWindowsOsTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDisplayTypes ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initNicHotplugSupportMap ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initDiskHotpluggableInterfacesMap ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsArchitecture ( ) ; }
public org.ovirt.engine.core.common.businessentities.RepoFileMetaData mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.RepoFileMetaData entity = new org.ovirt.engine.core.common.businessentities.RepoFileMetaData ( ) ; entity.setRepoDomainId ( org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( rs.getString ( "storage_domain_id" ) ) ) ; entity.setLastRefreshed ( rs.getLong ( "last_refreshed" ) ) ; entity.setFileType ( org.ovirt.engine.core.common.businessentities.ImageFileType.forValue ( rs.getInt ( "file_type" ) ) ) ; return entity ; }
protected boolean canDoAction ( ) { if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) ) == null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND ) ; } if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId ( ) ) == null ) { return failCanDoAction ( EngineMessage.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL ) ; } if ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) . isRunningOrPaused ( ) ) || ( ( org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Unknown ) ) ) { return failCanDoAction ( EngineMessage.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL ) ; } return true ; }
public void onSuccess ( java.lang.Object model , java.lang.Object loadedCluster ) { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster newItem = new org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( loadedDataCenter ) ) , ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( loadedCluster ) ) ) ; unitModel.getDataCenterWithClustersList ( ) . setItems ( java.util.Arrays.asList ( newItem ) ) ; unitModel.getDataCenterWithClustersList ( ) . setSelectedItem ( newItem ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) ) ; }
private void doLoad ( org.ovirt.engine.api.extensions.ExtMap inputMap , org.ovirt.engine.api.extensions.ExtMap outputMap ) { context = inputMap.< org.ovirt.engine.api.extensions.ExtMap > get ( Base.InvokeKeys.CONTEXT ) ; configuration = context.< java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) ; broker = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapFactory.getInstance ( getAuthzName ( ) ) ; context.< java.util.List < java.lang.String > > get ( Base.ContextKeys.CONFIGURATION_SENSITIVE_KEYS ) . add ( "config.authn.user.password" ) ; context.mput ( Base.ContextKeys.AUTHOR , "The oVirt Project" ) . mput ( Base.ContextKeys.EXTENSION_NAME , "Kerberos/Ldap Authn (Built-in)" ) . mput ( Base.ContextKeys.LICENSE , "ASL 2.0" ) . mput ( Base.ContextKeys.HOME_URL , "http://www.ovirt.org" ) . mput ( Base.ContextKeys.VERSION , "N/A" ) . mput ( Authn.ContextKeys.CAPABILITIES , Authn.Capabilities.AUTHENTICATE_PASSWORD ) . mput ( Base.ContextKeys.BUILD_INTERFACE_VERSION , Base.INTERFACE_VERSION_CURRENT ) ; }
public int read ( byte [ ] b , int off , int len ) throws java.io.IOException { int ret = in.read ( b , off , len ) ; if ( ret != ( - 1 ) ) { _index += ret ; } return ret ; }
public void canDoActionSuccess ( ) { mockVmStatusUp ( ) ; mockInterfaceList ( ) ; cretaeVirtIODisk ( ) ; initStorageDomain ( ) ; org.junit.Assert.assertTrue ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . isEmpty ( ) ) ; }
public static void Init ( ) { for ( org.ovirt.engine.core.common.businessentities.storage_pool sp : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . getAll ( ) ) { if ( ! ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.containsKey ( sp.getId ( ) ) ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.put ( sp.getId ( ) , new org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData ( sp.getId ( ) ) ) ; } } }
private void onRemove ( ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ( ( org.ovirt.engine.core.common.businessentities.Snapshot ) ( getSelectedItem ( ) ) ) ; if ( snapshot == null ) { cancel ( ) ; return ; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RemoveSnapshot , new org.ovirt.engine.core.common.action.RemoveSnapshotParameters ( snapshot.getId ( ) , vm.getId ( ) ) , null , null ) ; } getCanSelectSnapshot ( ) . setEntity ( false ) ; cancel ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( "IsAvailable" . equals ( args.propertyName ) ) { boolean isAvailable = modelProvider.getModel ( ) . getIsAvailable ( ) ; setAccessible ( isAvailable ) ; } }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = vdsDao.getAllForCluster ( org.ovirt.engine.core.bll.IsDisplayAddressConsistentInClusterQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.IsDisplayAddressConsistentInClusterQuery.getUserID ( ) , org.ovirt.engine.core.bll.IsDisplayAddressConsistentInClusterQuery.getParameters ( ) . isFiltered ( ) ) ; org.ovirt.engine.core.bll.IsDisplayAddressConsistentInClusterQuery.getQueryReturnValue ( ) . setReturnValue ( ( ! ( isDisplayAddressPartiallyOverridden ( hosts ) ) ) ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupByVdsGroupId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 2 ] } , getVdsGroupEntity ( ) ) ; setUpGetRngDeviceExpectations ( new int [ ] { 0 } ) ; super . testUpdate ( ) ; }
public void verifyEngineMessagesSupported ( ) { java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle ( org.ovirt.engine.core.dal.job.ExecutionMessageDirector.EXECUTION_MESSAGES_FILE_PATH ) ; for ( java.lang.String key : bundle.keySet ( ) ) { if ( key.startsWith ( ExecutionMessageDirector.JOB_MESSAGE_PREFIX ) ) { org.ovirt.engine.core.common.action.ActionType.valueOf ( key.substring ( org.ovirt.engine.core.dal.job.ExecutionMessageDirector.JOB_MESSAGE_PREFIX.length ( ) ) ) ; } else if ( key.startsWith ( ExecutionMessageDirector.STEP_MESSAGE_PREFIX ) ) { org.ovirt.engine.core.common.job.StepEnum.valueOf ( key.substring ( org.ovirt.engine.core.dal.job.ExecutionMessageDirector.STEP_MESSAGE_PREFIX.length ( ) ) ) ; } } }
public void testEffectiveEmulatedMachineCCV ( ) { final org.ovirt.engine.core.common.businessentities.VmBase vmBase = new org.ovirt.engine.core.common.businessentities.VmBase ( ) ; final org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setEmulatedMachine ( "pc-i440fx-rhel7.3.0" ) ; vmBase.setCustomCompatibilityVersion ( Version.v4_0 ) ; org.junit.jupiter.api.Assertions.assertEquals ( "pc-i440fx-rhel7.2.0" , org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffective ( vmBase , ( ) -> cluster ) ) ; }
public void preferProxyHostFromSameCluster ( ) { mockExistingHosts ( createHost ( VDSStatus.Up , org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.OTHER_CLUSTER_ID , org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID ) , createHost ( VDSStatus.Up , org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID , org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_DATACENTER_ID ) ) ; org.ovirt.engine.core.common.businessentities.VDS proxyHost = setupLocator ( ) . findProxyHost ( false ) ; org.junit.Assert.assertNotNull ( proxyHost ) ; org.junit.Assert.assertEquals ( proxyHost.getClusterId ( ) , org.ovirt.engine.core.bll.pm.FenceProxyLocatorTest.FENCED_HOST_CLUSTER_ID ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createImage ( ) { final org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; diskImage.setstorage_ids ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) ; return diskImage ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.sampletimekeepingjob_3_2.SampleTimeKeepingJob.row6Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_SampleTimeKeepingJob ) { try { int length = 0 ; this . var_name = readString ( dis ) ; this . var_value = readString ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
protected void setUpGetEntityExpectations ( int times , boolean notFound ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( QueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; } }
public static void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) , aQuery ) ; }
protected org.ovirt.engine.core.utils.lock.EngineLock acquireEngineLock ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.locks.LockingGroup group ) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock ( java.util.Collections.singletonMap ( id.toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( group , EngineMessage.ACTION_TYPE_FAILED_VOLUME_OPERATION_IN_PROGRESS ) ) , null ) ; org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager ( ) . acquireLockWait ( lock ) ; return lock ; }
public void validateSuccess ( ) { mockVmStatusUp ( ) ; mockInterfaceList ( ) ; cretaeVirtIODisk ( ) ; initStorageDomain ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage getDiskForVolumeInfo ( org.ovirt.engine.core.common.businessentities.DiskImage disk ) { if ( org.ovirt.engine.core.bll.ExportVmCommand.getParameters ( ) . getCopyCollapse ( ) ) { org.ovirt.engine.core.common.businessentities.DiskImage ancestor = org.ovirt.engine.core.bll.ExportVmCommand.getDiskImageDao ( ) . getAncestor ( disk.getImageId ( ) ) ; if ( ancestor == null ) { log.warn ( "Can't find ancestor of Disk with ID '{}', using original disk for volume info." , disk.getImageId ( ) ) ; ancestor = disk ; } return ancestor ; } else { return disk ; } }
public void shouldDetectNumaPinning ( ) { invalidVM.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( UpgradeError.VM_NUMA_PINNED ) ; }
private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator createValidatorForTestingValidateQosOverridden ( org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkId ( network.getId ( ) ) ; networkAttachment.setHostNetworkQos ( new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments = java.util.Collections.singletonList ( networkAttachment ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setNetworkAttachments ( networkAttachments ) ; return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setHost ( host ) . setParams ( params ) . addNetworks ( network ) . build ( ) ; }
protected void initFrontend ( ) { super . initFrontend ( ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . initHandlers ( eventBus ) ; frontend.setLoginHandler ( new org.ovirt.engine.ui.frontend.FrontendLoginHandler ( ) { @ java.lang.Override public void onLoginSuccess ( final java.lang.String userName , final java.lang.String password , final java.lang.String domain ) { com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { final java.lang.String domainToken = "@" ; restApiSessionManager.acquireSession ( ( userName.contains ( domainToken ) ? userName : ( userName + domainToken ) + domain ) , password ) ; } } ) ; } @ java.lang.Override public void onLogout ( ) { restApiSessionManager.releaseSession ( ) ; } } ) ; }
public void initBalloonSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { balloonSupportMap = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat.Version , java.lang.Boolean > > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetBalloonSupportMap ) , callback ) ; }
private static void addSoundCard ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion ) { java.lang.String soundDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.getSoundDevice ( vmBase , vdsGroupCompatibilityVersion ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , vmBase.getId ( ) ) , VmDeviceGeneralType.SOUND , org.ovirt.engine.core.common.utils.VmDeviceType.getSoundDeviceType ( soundDevice ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true ) ; }
public void onSuccess ( final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Succesful returned result from Logoff." ) ; callback.getDel ( ) . onSuccess ( callback.getModel ( ) , result ) ; if ( ( org.ovirt.engine.ui.frontend.Frontend.getLoginHandler ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler ( ) . onLogout ( ) ; } }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( oldIface ) ; getCompensationContext ( ) . snapshotEntity ( oldVmDevice ) ; getVmNetworkInterfaceDao ( ) . update ( getInterface ( ) ) ; oldVmDevice.setCustomProperties ( getInterface ( ) . getCustomProperties ( ) ) ; getDbFacade ( ) . getVmDeviceDao ( ) . update ( oldVmDevice ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.datacenters.BaseNetworkQosModel model ) { driver.edit ( model ) ; if ( ( this . model ) != null ) { this . model.getPropertyChangedEvent ( ) . removeListener ( availabilityListener ) ; } this . model = model ; model.getPropertyChangedEvent ( ) . addListener ( availabilityListener ) ; toggleVisibility ( ) ; }
public void testDnsResolverConfigurationNonDefaultRouteNetwork ( ) { iface.setIpv4DefaultRoute ( true ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration ) ; testedNetworkAttachment.setDnsResolverConfiguration ( sampleDnsResolverConfiguration2 ) ; org.junit.Assert.assertThat ( createTestedInstance ( false , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
public static void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap ) { try { org.ovirt.engine.core.bll.ImagesHandler.addImage ( image , active , imageStorageDomainMap ) ; org.ovirt.engine.core.bll.ImagesHandler.addDisk ( image ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.DB , ex ) ; } }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testUpdateNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 , 0 , true ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendMacPoolResourceTest.getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void processOnVmStopInternal ( final java.util.Collection < org.ovirt.engine.core.compat.Guid > vmIds , final org.ovirt.engine.core.compat.Guid hostId ) { for ( org.ovirt.engine.core.compat.Guid vmId : vmIds ) { backend.runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.ProcessDownVmParameters ( vmId , true ) ) ; } org.ovirt.engine.core.bll.hostdev.HostDeviceManager hostDeviceManager = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.hostdev.HostDeviceManager.class ) ; hostDeviceManager.refreshHostIfAnyVmHasHostDevices ( vmIds , hostId ) ; }
private void initOsRepository ( ) { OsInfoPreferencesLoader.INSTANCE.init ( java.nio.file.FileSystems.getDefault ( ) . getPath ( org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) . getEtcDir ( ) . getAbsolutePath ( ) , org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.OsRepositoryConfDir ) ) ) ; OsRepositoryImpl.INSTANCE.init ( OsInfoPreferencesLoader.INSTANCE.getPreferences ( ) ) ; org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.utils.OsRepositoryImpl.INSTANCE ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . populateDwhOsInfo ( osRepository.getOsNames ( ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters ( ) . getId ( ) ; if ( org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getCurrentUser ( ) . getId ( ) . equals ( id ) ) { addValidationMessage ( EngineMessage.USER_CANNOT_REMOVE_HIMSELF ) ; return false ; } org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getDbUserDao ( ) . get ( id ) ; if ( dbUser == null ) { addValidationMessage ( EngineMessage.USER_MUST_EXIST_IN_DB ) ; return false ; } return true ; }
public void testStatisticLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Statistic statistic = new org.ovirt.engine.api.model.Statistic ( ) ; statistic.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STATISTIC_ID ) ; statistic.setVm ( new org.ovirt.engine.api.model.Vm ( ) ) ; statistic.getVm ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( statistic ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STATISTIC_HREF , statistic.getHref ( ) ) ; }
protected java.util.List < java.lang.Class < ? > > getValidationGroups ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportClonedEntity.class ) ; } return addValidationGroup ( org.ovirt.engine.core.common.validation.group.ImportEntity.class ) ; }
protected org.ovirt.engine.core.common.businessentities.VM getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; vmDynamic.setConsoleCurrentUserName ( "admin@internal" ) ; vmDynamic.setClientIp ( "1.1.1.1" ) ; vmDynamic.setGuestCurrentUserName ( "Ori" ) ; vm.setDynamicData ( vmDynamic ) ; return vm ; }
private static void AddEventNotificationEntry ( org.ovirt.engine.core.common.EventNotificationEntity entity , org.ovirt.engine.core.common.AuditLogType auditLogType ) { java.util.HashSet < org.ovirt.engine.core.common.AuditLogType > entry = org.ovirt.engine.core.common.VdcEventNotificationUtils.eventNotificationTypeMap.get ( entity ) ; if ( entry == null ) { entry = new java.util.HashSet < org.ovirt.engine.core.common.AuditLogType > ( ) ; org.ovirt.engine.core.common.VdcEventNotificationUtils.eventNotificationTypeMap.put ( entity , entry ) ; } entry.add ( auditLogType ) ; }
public boolean isCidrNetworkAddressValid ( java.lang.String cidr ) { java.lang.String [ ] temp = cidr.split ( "/" ) ; long ipAsInteger = ipAddressConverter.convertIpAddressToLong ( temp [ 0 ] ) ; int mask = java.lang.Integer.parseInt ( temp [ 1 ] ) ; return org.ovirt.engine.core.common.validation.CidrValidator.isNetworkAddress ( ipAsInteger , mask ) ; }
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocationOnMock ) throws java.lang.Throwable { final org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDisk = createDiskImage ( ) ; oldDisk.setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert.assertNotSame ( oldDisk.getDiskInterface ( ) , parameters.getDiskInfo ( ) . getDiskInterface ( ) ) ; return oldDisk ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { populateProfiles ( ( ( java.util.List < org.ovirt.engine.core.aaa.ProfileEntry > ) ( result ) ) ) ; getProfile ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { populateNamespaces ( ) ; } } ) ; }
public void getVmById ( org.ovirt.engine.ui.frontend.AsyncQuery < org.ovirt.engine.core.common.businessentities.VM > aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
protected float getMaxMemoryOfVdsInCluster ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { float maxMemoryOfVds = 0 ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { if ( ( host.getFreeVirtualMemory ( ) ) > maxMemoryOfVds ) { maxMemoryOfVds = host.getFreeVirtualMemory ( ) ; } } return maxMemoryOfVds ; }
public void testVmWithDisks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; disks.add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , disks ) , true , null ) ; }
protected boolean canAddVm ( ) { boolean exists = ( ( java.lang.Boolean ) ( getBackend ( ) . runInternalQuery ( VdcQueryType.IsVmWithSameNameExist , new org.ovirt.engine.core.common.queries.IsVmWithSameNameExistParameters ( getVm ( ) . getVmName ( ) ) ) . getReturnValue ( ) ) ) ; if ( exists ) { addCanDoActionMessage ( VdcBllMessages.VM_CANNOT_IMPORT_VM_NAME_EXISTS ) ; } return ! exists ; }
public void testConfigDirWithFlagSet ( ) throws java.lang.Exception { final java.lang.String path = java.net.URLDecoder.decode ( java.lang.ClassLoader.getSystemResource ( "engine-config.conf" ) . getPath ( ) , "UTF-8" ) ; org.junit.jupiter.api.Assertions.assertNotNull ( path ) ; org.ovirt.engine.core.config.EngineConfigExecutor.main ( "-a" , ( "--config=" + path ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment ) { org.ovirt.engine.core.compat.Guid oldAttachmentId = ( oldAttachment == null ) ? null : oldAttachment.getId ( ) ; boolean when = ( oldAttachment != null ) && ( ! ( java.util.Objects.equals ( oldAttachment.getNetworkId ( ) , attachment.getNetworkId ( ) ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID , oldAttachmentId ) ) . when ( when ) ; }
protected boolean canDoAction ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage_pool_iso_map > poolDomains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStoragePool ( ) . getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage_pool_iso_map poolDomain : poolDomains ) { if ( ( poolDomain.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) { addInvalidSDStatusMessage ( poolDomain.getstatus ( ) ) ; return false ; } } return org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.InitializeVds ( ) ; }
public org.ovirt.engine.api.model.Networks list ( ) { java.util.List < org.ovirt.engine.api.model.Network > entities = getBackendCollection ( VdcQueryType.GetNetworksByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ) ; org.ovirt.engine.api.model.Networks networks = mapCollection ( entities ) ; for ( org.ovirt.engine.api.model.Network network : networks.getNetworks ( ) ) { network.setDisplay ( null ) ; } return networks ; }
protected void bindCommonIntegration ( ) { bind ( org.ovirt.engine.ui.uicommonweb.ITypeResolver.class ) . to ( org.ovirt.engine.ui.common.uicommon.UiCommonDefaultTypeResolver.class ) . asEagerSingleton ( ) ; bind ( org.ovirt.engine.ui.common.uicommon.FrontendEventsHandlerImpl.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.common.uicommon.FrontendFailureEventListener.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.uicommonweb.ILogger.class ) . to ( org.ovirt.engine.ui.common.uicommon.LoggerImpl.class ) . in ( com.google.inject.Singleton.class ) ; bindConsoles ( ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addBonds ( org.ovirt.engine.core.common.businessentities.network.Bond ... bonds ) { if ( nullParameters ( bonds ) ) { return this ; } if ( ( parameters.getBonds ( ) ) == null ) { parameters.setBonds ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Bond > ( ) ) ; } parameters.getBonds ( ) . addAll ( java.util.Arrays.asList ( bonds ) ) ; return this ; }
void addStyles ( ) { linuxBootOptionsPanel.setVisible ( false ) ; initialRunPanel.setVisible ( false ) ; systemPanel.setVisible ( true ) ; hostPanel.setVisible ( true ) ; attachFloppyEditor.addContentWidgetContainerStyleName ( style.attachImageCheckBoxLabel ( ) ) ; attachIsoEditor.addContentWidgetContainerStyleName ( style.attachImageCheckBoxLabel ( ) ) ; floppyImageEditor.addLabelStyleName ( style.attachImageSelectBoxLabel ( ) ) ; isoImageEditor.addLabelStyleName ( style.attachImageSelectBoxLabel ( ) ) ; floppyImageEditor.addContentWidgetContainerStyleName ( style.attachImageSelectbox ( ) ) ; isoImageEditor.addContentWidgetContainerStyleName ( style.attachImageSelectbox ( ) ) ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.ServerCpu getVdsGroupServerCpu ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model , org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup ) { org.ovirt.engine.core.common.businessentities.ServerCpu retVal = null ; for ( org.ovirt.engine.core.common.businessentities.ServerCpu cpu : model.getCPU ( ) . getItems ( ) ) { if ( java.util.Objects.equals ( cpu.getCpuName ( ) , vdsGroup.getCpuName ( ) ) ) { retVal = cpu ; break ; } } return retVal ; }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
private void MigrationMode_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) == ( getMigrationMode ( ) . getSelectedItem ( ) ) ) { getHostCpu ( ) . setIsChangable ( true ) ; } else { getHostCpu ( ) . setEntity ( false ) ; getHostCpu ( ) . setIsChangable ( false ) ; } behavior.updateCpuPinningVisibility ( ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.storage.Image image = new org.ovirt.engine.core.common.businessentities.storage.Image ( ) ; image.setVolumeType ( VolumeType.Sparse ) ; disk.setImage ( image ) ; return disk ; }
protected void perform ( ) { setActionReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.ChangeDisk , new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters ( org.ovirt.engine.core.bll.ChangeDiskCommand.getVdsId ( ) , org.ovirt.engine.core.bll.ChangeDiskCommand.getVm ( ) . getId ( ) , cdImagePath ) ) . getReturnValue ( ) ) ; org.ovirt.engine.core.bll.VmHandler.updateCurrentCd ( org.ovirt.engine.core.bll.ChangeDiskCommand.getVdsId ( ) , org.ovirt.engine.core.bll.ChangeDiskCommand.getVm ( ) , org.ovirt.engine.core.bll.ChangeDiskCommand.getParameters ( ) . getCdImagePath ( ) ) ; org.ovirt.engine.core.bll.ChangeDiskCommand.setSucceeded ( true ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder setExistingInterfaces ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > existingInterfaces ) { this . existingInterfaces = existingInterfaces ; return this ; }
public void testUpdateStatus ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate before = dao.get ( existingEntity.getId ( ) ) ; before.setStatus ( VmTemplateStatus.Locked ) ; dao.updateStatus ( existingEntity.getId ( ) , VmTemplateStatus.Locked ) ; org.ovirt.engine.core.common.businessentities.VmTemplate after = dao.get ( existingEntity.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( before , after ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery ( VdcQueryType.GetAllPoolVms , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool ( ) . getVmPoolId ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > poolVmsBeforeAdd = ( currentVmsInPoolQuery.getSucceeded ( ) ) ? currentVmsInPoolQuery.< java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; super . executeCommand ( ) ; org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getCompensationContext ( ) . cleanupCompensationDataAfterSuccessfulCommand ( ) ; if ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded ( ) ) { updatePoolVms ( poolVmsBeforeAdd ) ; } vmPoolMonitor.triggerPoolMonitoringJob ( ) ; }
public int compareTo ( ovirt_engine_dwh.configurationsync_3_2.ConfigurationSync.after_tJDBCInput_33Struct other ) { int returnValue = - 1 ; returnValue = checkNullsAndCompare ( this . storage_id , other.storage_id ) ; if ( returnValue != 0 ) { return returnValue ; } returnValue = checkNullsAndCompare ( this . storage_pool_id , other.storage_pool_id ) ; if ( returnValue != 0 ) { return returnValue ; } return returnValue ; }
void initUncaughtExceptionHandler ( ) { com.google.gwt.core.client.GWT.setUncaughtExceptionHandler ( new com.google.gwt.core.client.GWT.UncaughtExceptionHandler ( ) { @ java.lang.Override public void onUncaughtException ( java.lang.Throwable t ) { applicationLogManager.logUncaughtException ( t ) ; if ( org.ovirt.engine.ui.common.DisplayUncaughtUIExceptions.getValue ( ) ) { alertManager.showUncaughtExceptionAlert ( t ) ; } } } ) ; }
protected void OnEntityChanged ( ) { super . OnEntityChanged ( ) ; if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData ) ( getEntity ( ) ) ) . getTemplate ( ) ; setItems ( template.getInterfaces ( ) ) ; } else { setItems ( null ) ; } }
public void testNetworkNotAttachedToHost ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.when ( vdsDaoMock.getAllForNetwork ( org.mockito.Matchers.eq ( networkId ) ) ) . thenReturn ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > emptyList ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNetworkId ( networkId ) ; org.junit.Assert.assertThat ( createNetworkAttachmentValidator ( attachment ) . networkNotAttachedToHost ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { numaSupport ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { populateRoles ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Role > ) ( result ) ) ) ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
protected void onExportChanged ( ) { boolean externalNetwork = getExport ( ) . getEntity ( ) ; getNetworkLabel ( ) . setIsChangeable ( ( ! externalNetwork ) ) ; getNeutronPhysicalNetwork ( ) . setIsChangeable ( externalNetwork ) ; getQos ( ) . setIsChangeable ( ( ! externalNetwork ) ) ; getAddQosCommand ( ) . setIsExecutionAllowed ( ( ! externalNetwork ) ) ; updateMtuSelectorsChangeability ( ) ; }
protected void endSuccessfully ( ) { org.ovirt.engine.core.bll.RemoveVmPoolCommand.setSucceeded ( ( ( removeAllVmsInPool ( ) ) && ( removeVmPool ( ) ) ) ) ; org.ovirt.engine.core.bll.RemoveVmPoolCommand.log ( ) ; }
public void testSetStatusForRequiredNetworksAbsentOnHost ( ) { networkCluster.setStatus ( NetworkStatus.OPERATIONAL ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = java.util.Arrays.asList ( createNetwork ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1 , org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1 ) , createNetwork ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2 , org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2 ) ) ; testSetStatusForRequiredNetwork ( networks , org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2 ) ; org.mockito.Mockito.verify ( networkClusterDao ) . updateStatus ( org.mockito.Matchers.same ( networkCluster ) ) ; org.junit.Assert.assertThat ( networkCluster.getStatus ( ) , org.hamcrest.Matchers.is ( NetworkStatus.NON_OPERATIONAL ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingManagementNetwork ( ) { return isManagementNetwork ( ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK , getNetworkNameReplacement ( ) ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private static void doTestLocaleOverride ( java.lang.String name ) { org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( name ) ; java.util.List < java.lang.String > errors = et.TranslateErrorText ( java.util.Arrays.asList ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_NO_REPLACEMENT ) , java.util.Locale.ITALIAN ) ; org.junit.Assert.assertEquals ( "Unexpected Size" , 1 , errors.size ( ) ) ; org.junit.Assert.assertEquals ( "String should equal" , "Impossibile trovare il desktop" , errors.get ( 0 ) ) ; java.lang.String error = et.TranslateErrorTextSingle ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_NO_REPLACEMENT , java.util.Locale.ITALIAN ) ; org.junit.Assert.assertEquals ( "String should equal" , "Impossibile trovare il desktop" , error ) ; }
public static void GetLowUtilizationForPowerSave ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.LowUtilizationForPowerSave , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void autoCompletedInputIsAlwaysValid ( java.util.Map.Entry < java.lang.Integer , java.lang.String > osCompletionEntry ) { java.lang.String reason = ( "input " + ( osCompletionEntry.getValue ( ) ) ) + " is invalid" ; org.junit.Assert.assertThat ( reason , true , org.hamcrest.core.Is.is ( completer.validate ( osCompletionEntry.getValue ( ) ) ) ) ; }
protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > qosItems = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.HostNetworkQos > ( this . getQos ( ) . getItems ( ) ) ; qosItems.add ( 1 , getQos ( ) ) ; this . getQos ( ) . setItems ( qosItems ) ; this . getQos ( ) . setSelectedItem ( getQos ( ) ) ; } super . postSaveAction ( succeeded ) ; }
private void updateFenceAgents ( ) { if ( ( getParameters ( ) . getFenceAgents ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . removeByVdsId ( getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.FenceAgent agent : getParameters ( ) . getFenceAgents ( ) ) { agent.setHostId ( getVdsId ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . save ( agent ) ; } } }
public static java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > mapPrincipalRecordsToDirectoryUsers ( final java.lang.String authzName , final java.util.List < org.ovirt.engine.api.extensions.ExtMap > users ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > results = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.api.extensions.ExtMap user : users ) { results.add ( org.ovirt.engine.core.aaa.DirectoryUtils.mapPrincipalRecordToDirectoryUser ( authzName , user ) ) ; } return results ; }
public void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected org.ovirt.engine.api.model.GlusterBricks resolveCreatedList ( org.ovirt.engine.core.common.action.VdcReturnValueBase result , org.ovirt.engine.api.restapi.resource.gluster.EntityIdResolver < org.ovirt.engine.core.compat.Guid > entityResolver ) { try { org.ovirt.engine.api.model.GlusterBricks bricks = new org.ovirt.engine.api.model.GlusterBricks ( ) ; for ( org.ovirt.engine.core.compat.Guid id : ( ( java.util.List < org.ovirt.engine.core.compat.Guid > ) ( result.getActionReturnValue ( ) ) ) ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity created = entityResolver.resolve ( id ) ; bricks.getGlusterBricks ( ) . add ( addLinks ( doPopulate ( map ( created ) , created ) ) ) ; } return bricks ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; return null ; } }
protected boolean isStorageDomainTypeCorrect ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( ( ! ( isStorageDomainOfTypeIsoOrExport ( storageDomain ) ) ) && ( ( storageDomain.isLocal ( ) ) != ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) . isLocal ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH ) ; return false ; } return true ; }
public void testGetFileFromString_Happy ( ) throws java.net.URISyntaxException { java.lang.String path = this . getClass ( ) . getResource ( "." ) . toURI ( ) . toASCIIString ( ) . replaceAll ( "file:" , "" ) ; java.io.File file = new java.io.File ( path ) ; java.io.File testFile = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath ( "small_file.txt" , file ) ; org.junit.Assert.assertEquals ( "new file should be same as old file" , new java.io.File ( canReadFileName ) , testFile ) ; }
private org.ovirt.engine.core.common.mode.ApplicationMode getApplicationMode ( ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend.runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) ) ; org.ovirt.engine.core.common.mode.ApplicationMode appMode = null ; if ( result.getSucceeded ( ) ) { appMode = org.ovirt.engine.core.common.mode.ApplicationMode.from ( ( ( java.lang.Integer ) ( result.getReturnValue ( ) ) ) ) ; } else { appMode = org.ovirt.engine.core.common.mode.ApplicationMode.AllModes ; } return appMode ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel ( ) . getManageCommand ( ) ) ) { return managePopupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
private void ensureStorageFormatInitialized ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain ( ) ; if ( ( sd.getStorageFormat ( ) ) == null ) { if ( sd.getStorageDomainType ( ) . isDataDomain ( ) ) { org.ovirt.engine.core.common.businessentities.StoragePool sp = getTargetStoragePool ( ) ; if ( sp != null ) { sd.setStorageFormat ( org.ovirt.engine.core.common.utils.VersionStorageFormatUtil.getPreferredForVersion ( sp.getCompatibilityVersion ( ) , sd.getStorageType ( ) ) ) ; } } else { sd.setStorageFormat ( StorageFormatType.V1 ) ; } } }
protected org.ovirt.engine.core.compat.Guid getClusterId ( org.ovirt.engine.api.model.VM vm ) { return isFiltered ( ) ? lookupClusterByName ( vm.getCluster ( ) . getName ( ) ) . getId ( ) : getEntity ( org.ovirt.engine.core.common.businessentities.VDSGroup.class , VdcQueryType.GetVdsGroupByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( vm.getCluster ( ) . getName ( ) ) , ( "Cluster: name=" + ( vm.getCluster ( ) . getName ( ) ) ) ) . getId ( ) ; }
public void successfulConfFileConvertToMap ( ) throws java.io.IOException , java.net.URISyntaxException { givenListOfImagesAndVolumes ( ) ; givenTheWantedDiskImage ( ) ; mockVdcCommand ( ActionType.RetrieveImageData , successfulActionReturnValue ( load ( "hosted-engine-config.tar" ) ) ) ; java.util.Map < java.lang.String , java.lang.String > config = fetchConfig ( ) ; verifyCalled ( ActionType.RetrieveImageData , org.mockito.Mockito.times ( 1 ) ) ; org.hamcrest.MatcherAssert.assertThat ( config , org.hamcrest.Matchers.hasKey ( "sdUUID" ) ) ; org.hamcrest.MatcherAssert.assertThat ( config , org.hamcrest.Matchers.hasKey ( "host_id" ) ) ; }
private void movePoolToProblematicInDB ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . getEventListener ( ) . storagePoolStatusChange ( storagePool.getId ( ) , StoragePoolStatus.NonResponsive , AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC , VdcBllErrors.ENGINE ) ; storagePool.setspm_vds_id ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( storagePool ) ; }
public void retrieveFromHttpSession ( final java.lang.String key , final org.ovirt.engine.ui.frontend.communication.StorageCallback callback ) { getOperationManager ( ) . retrieveFromHttpSession ( key , callback ) ; }
private boolean networkExists ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > networks = org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO ( ) . getAllForCluster ( org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster : networks ) { if ( networkCluster.getNetworkId ( ) . equals ( getNetworkCluster ( ) . getNetworkId ( ) ) ) { return true ; } } return false ; }
public javax.ws.rs.core.Response toResponse ( org.codehaus.jackson.JsonProcessingException exception ) { try { return javax.ws.rs.core.Response.status ( Status.BAD_REQUEST ) . entity ( new org.ovirt.engine.api.restapi.resource.validation.UsageFinder ( ) . getUsageMessage ( application , uriInfo , request ) ) . build ( ) ; } catch ( java.lang.Exception e ) { throw new javax.ws.rs.WebApplicationException ( e , javax.ws.rs.core.Response.status ( Response.Status.INTERNAL_SERVER_ERROR ) . build ( ) ) ; } }
default void inputDetail ( ) { org.ovirt.api.metamodel.language.ApiLanguage.mandatory ( disk ( ) . provisionedSize ( ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.or ( org.ovirt.api.metamodel.language.ApiLanguage.optional ( disk ( ) . storageDomains ( ) [ org.ovirt.api.metamodel.language.ApiLanguage.COLLECTION ] . id ( ) ) , org.ovirt.api.metamodel.language.ApiLanguage.optional ( disk ( ) . storageDomains ( ) [ org.ovirt.api.metamodel.language.ApiLanguage.COLLECTION ] . name ( ) ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.optional ( disk ( ) . diskProfile ( ) . id ( ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.optional ( disk ( ) . name ( ) ) ; org.ovirt.api.metamodel.language.ApiLanguage.optional ( disk ( ) . openstackVolumeType ( ) . name ( ) ) ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public java.util.List < org.ovirt.api.metamodel.concepts.Attribute > getAttributes ( ) { java.util.List < org.ovirt.api.metamodel.concepts.Attribute > result = new java.util.ArrayList ( attributes ) ; if ( ( ( base ) != null ) && ( ( base ) instanceof org.ovirt.api.metamodel.concepts.StructType ) ) { result.addAll ( ( ( org.ovirt.api.metamodel.concepts.StructType ) ( base ) ) . getAttributes ( ) ) ; } result.sort ( java.util.Comparator.comparing ( Attribute :: getName ) ) ; return result ; }
private static java.io.File [ ] getMessagesLocalePropertiesFiles ( final java.io.File currentDir , final java.lang.String fileNamePrefix ) throws java.net.URISyntaxException { return currentDir.listFiles ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean accept ( java.io.File dir , java.lang.String name ) { return name.matches ( ( ( "^" + fileNamePrefix ) + "_[a-zA-Z]{2}.*\\.properties$" ) ) ; } } ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.ExternalVariable ) ) { return false ; } org.ovirt.engine.core.common.ExternalVariable other = ( ( org.ovirt.engine.core.common.ExternalVariable ) ( obj ) ) ; return ( java.util.Objects.equals ( name , other.getName ( ) ) ) && ( java.util.Objects.equals ( value , other.getValue ( ) ) ) ; }
public static void GetStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.GetStorageDomainsByVmTemplateIdQueryParameters ( templateId ) , aQuery ) ; }
public static void RunAction ( final org.ovirt.engine.core.common.action.VdcActionType actionType , final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback , final java.lang.Object state , final boolean showErrorDialog ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( actionType , parameters , callback , state , showErrorDialog ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturn getHostJobs ( java.lang.String jobType , java.util.List < java.lang.String > jobIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getJobs" ) . withOptionalParameter ( "job_type" , jobType ) . withOptionalParameterAsList ( "job_ids" , jobIds ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "jobs" ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.HostJobsReturn ( response ) ; }
private boolean performStorageDomainsChecks ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain = getImageSourceDomain ( parameters.getImageId ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = getStorageDomainById ( parameters.getTargetStorageDomainId ( ) , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePoolId ( ) ) ; return ( ( validateSourceStorageDomain ( sourceDomain ) ) && ( validateDestStorage ( destDomain ) ) ) && ( validateDestStorageAndSourceStorageOfSameTypes ( destDomain , sourceDomain ) ) ; }
private static void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
private void buildVmGraphicsDevicesFromDb ( boolean usesGraphicsAsDevice , java.util.Map < java.lang.String , java.lang.Object > extraSpecParams ) { if ( usesGraphicsAsDevice ) { buildVmDevicesFromDb ( VmDeviceGeneralType.GRAPHICS , false , extraSpecParams ) ; } java.lang.String legacyDisplay = deriveDisplayTypeLegacy ( ) ; if ( legacyDisplay != null ) { createInfo.put ( VdsProperties.display , legacyDisplay ) ; } }
private java.util.Map getUserInfoObject ( org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser , java.lang.String ssoToken ) { java.util.Map < java.lang.String , java.lang.String > obj = new java.util.HashMap < > ( ) ; obj.put ( "userName" , loggedInUser.getLoginName ( ) ) ; obj.put ( "domain" , loggedInUser.getDomain ( ) ) ; obj.put ( "isAdmin" , java.lang.Boolean.toString ( loggedInUser.isAdmin ( ) ) ) ; obj.put ( "ssoToken" , ssoToken ) ; obj.put ( "userId" , loggedInUser.getId ( ) . toString ( ) ) ; return obj ; }
private static void setNewIdInImportedCollections ( org.ovirt.engine.core.common.businessentities.VmBase entity ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice managedDevice : entity.getManagedDeviceMap ( ) . values ( ) ) { if ( ! ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.isDiskOrInterface ( managedDevice ) ) ) { managedDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , entity.getId ( ) ) ) ; } } for ( org.ovirt.engine.core.common.businessentities.VmDevice unMnagedDevice : entity.getUnmanagedDeviceList ( ) ) { unMnagedDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , entity.getId ( ) ) ) ; } }
protected org.ovirt.engine.core.common.businessentities.network.NetworkAttachment addParents ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model ) { model.setHostNic ( new org.ovirt.engine.api.model.HostNic ( ) ) ; model.getHostNic ( ) . setId ( nicId.toString ( ) ) ; model.getHostNic ( ) . setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; model.getHostNic ( ) . getHost ( ) . setId ( getHostId ( ) . toString ( ) ) ; return model ; }
public static org.ovirt.engine.api.model.CdRom map ( org.ovirt.engine.core.common.businessentities.VM entity , org.ovirt.engine.api.model.CdRom template ) { org.ovirt.engine.api.model.CdRom model = ( template != null ) ? template : new org.ovirt.engine.api.model.CdRom ( ) ; model.setId ( org.ovirt.engine.api.restapi.types.CdRomMapper.CDROM_ID.toString ( ) ) ; if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( entity.getStaticData ( ) . getIsoPath ( ) ) ) ) { model.setFile ( new org.ovirt.engine.api.model.File ( ) ) ; model.getFile ( ) . setId ( entity.getStaticData ( ) . getIsoPath ( ) ) ; } return model ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , aQuery ) ; }
private java.util.List getStorageDomains ( ) { java.util.List < org.ovirt.engine.api.model.StorageDomain > sds = new java.util.LinkedList < > ( ) ; sds.add ( getStorageDomain ( GUIDS [ 2 ] ) ) ; return sds ; }
public void testGetAllMultiVdsSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Hosts" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( vdsResultList , searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ; org.junit.Assert.assertEquals ( 1 , vdsResultList.size ( ) ) ; org.junit.Assert.assertEquals ( "cpu" , vdsResultList.get ( 0 ) . getCpuName ( ) . getCpuName ( ) ) ; }
public void testUpdateIncompleteParameters ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Cdrom update = new org.ovirt.engine.api.model.Cdrom ( ) ; update.setFile ( null ) ; control.replay ( ) ; try { resource.update ( update ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Cdrom" , "update" , "file" ) ; } }
private void writeCleanup ( ) { com.google.gwt.core.ext.typeinfo.JClassType editorType = model.getEditorType ( ) ; logger.log ( Type.DEBUG , ( "Starting to write cleanup impl. for editor " + ( editorType.getQualifiedSourceName ( ) ) ) ) ; sw.println ( ) ; sw.println ( "@Override" ) ; sw.println ( "public void cleanup() {" ) ; sw.indent ( ) ; sw.println ( "if (getObject() != null) {" ) ; sw.indent ( ) ; if ( model.getProxyType ( ) . isAssignableTo ( hasCleanupType ) ) { sw.println ( "getObject().cleanup();" ) ; } for ( com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData ( ) ) { if ( editorData.getPropertyOwnerType ( ) . isAssignableTo ( hasCleanupType ) ) { sw.println ( java.lang.String.format ( "getObject()%s.cleanup();" , editorData.getBeanOwnerExpression ( ) ) ) ; } } sw.outdent ( ) ; sw.println ( "}" ) ; for ( com.google.gwt.core.ext.typeinfo.JField field : editorType.getFields ( ) ) { com.google.gwt.core.ext.typeinfo.JClassType fieldClassType = field.getType ( ) . isClassOrInterface ( ) ; if ( ( ( fieldClassType != null ) && ( fieldClassType.isAssignableTo ( hasCleanupType ) ) ) && ( ! ( field.getType ( ) . isClassOrInterface ( ) . isAssignableTo ( baseModelType ) ) ) ) { java.lang.String fieldName = field.getName ( ) ; sw.println ( java.lang.String.format ( "if (getEditor().%s != null) {" , fieldName ) ) ; sw.indent ( ) ; sw.println ( java.lang.String.format ( "getEditor().%s.cleanup();" , fieldName ) ) ; sw.outdent ( ) ; sw.println ( "}" ) ; } } sw.outdent ( ) ; sw.println ( "}" ) ; }
private void verifyPermit ( org.ovirt.engine.api.model.Permit permit , org.ovirt.engine.core.common.businessentities.ActionGroup action ) { assertEquals ( java.lang.Integer.toString ( action.getId ( ) ) , permit.getId ( ) ) ; assertEquals ( action.name ( ) . toLowerCase ( ) , permit.getName ( ) ) ; assertNotNull ( permit.getRole ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendPermitResourceTest.ROLE_ID.toString ( ) , permit.getRole ( ) . getId ( ) ) ; }
public void testPositiveAffinity ( ) throws java.lang.Exception { hosts = java.util.Arrays.asList ( host_positive_enforcing , host_not_in_affinity_group ) ; java.util.List < org.ovirt.engine.core.common.scheduling.AffinityGroup > affinityGroups = java.util.Arrays.asList ( positive_enforcing_group ) ; org.mockito.Mockito.doReturn ( affinityGroups ) . when ( affinityGroupDao ) . getAllAffinityGroupsByVmId ( org.mockito.ArgumentMatchers.any ( ) ) ; org.assertj.core.api.Assertions.assertThat ( unit.filter ( cluster , hosts , vm , new java.util.HashMap < > ( ) , new org.ovirt.engine.core.common.scheduling.PerHostMessages ( ) ) ) . contains ( host_positive_enforcing ) . doesNotContain ( host_not_in_affinity_group ) ; }
public void oneDiskImagesDoesntExist ( ) { org.mockito.Mockito.doReturn ( false ) . when ( baseDiskDao ) . exists ( disk1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( baseDiskDao ) . exists ( disk2 ) ; org.hamcrest.MatcherAssert.assertThat ( diskExistenceValidator.disksNotExist ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST , ( "$diskIds " + ( disk1.toString ( ) ) ) ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = this ; behavior.maxCpus = ( ( java.lang.Integer ) ( returnValue ) ) ; behavior.postUpdateNumOfSockets2 ( ) ; }
public static java.lang.String getRandomInRange ( int high , int min ) { if ( min == 0 ) { min = 1 ; } return java.lang.String.valueOf ( ( ( org.ovirt.vdsmfake.Utils.RND.nextInt ( ( high - min ) ) ) + min ) ) ; }
public void getHostListByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
private void doTestBadAdd ( boolean valid , boolean success , java.lang.String detail ) { setUriInfo ( setUpActionExpectations ( ActionType.LabelNetwork , org.ovirt.engine.core.common.action.LabelNetworkParameters.class , new java.lang.String [ ] { "NetworkId" , "Label" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResourceTest.NETWORK_ID , org.ovirt.engine.api.restapi.resource.BackendNetworkLabelsResourceTest.LABELS [ 0 ] } , valid , success ) ) ; try { collection.add ( getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private void writeAnnotations ( org.ovirt.api.metamodel.concepts.Concept concept ) { java.util.List < org.ovirt.api.metamodel.concepts.Annotation > annotations = concept.getAnnotations ( ) ; if ( ! ( annotations.isEmpty ( ) ) ) { writer.writeStartArray ( "annotations" ) ; annotations.forEach ( this :: writeAnnotation ) ; writer.writeEnd ( ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > posixStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ) ( sender ) ) ; boolean isNfs = ( ( posixStorageModel.getEntity ( ) ) != null ) ? posixStorageModel.getEntity ( ) . toLowerCase ( ) . equals ( "nfs" ) : false ; nfsPosixAlertIcon.setVisible ( isNfs ) ; }
public void rollbackQuota ( ) { if ( canPerformQuotaValidation ( ) ) { org.ovirt.engine.core.bll.UpdateVmDiskCommand.getQuotaManager ( ) . rollbackQuota ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getQuotaManager ( ) . getQuotaListFromParameters ( getOldStorageQuotaListParameters ( ) ) ) ; org.ovirt.engine.core.bll.UpdateVmDiskCommand.getQuotaManager ( ) . rollbackQuota ( org.ovirt.engine.core.bll.UpdateVmDiskCommand.getStoragePool ( ) , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getQuotaManager ( ) . getQuotaListFromParameters ( getUpdatedStorageQuotaListParameters ( ) ) ) ; } }
public static void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void authenticate ( java.lang.String user , java.lang.String password ) { java.lang.String adminUser = ( ( java.util.Properties ) ( context.get ( ExtensionProperties.CONFIGURATION ) ) ) . getProperty ( "config.authn.user.name" ) ; java.lang.String adminPassword = ( ( java.util.Properties ) ( context.get ( ExtensionProperties.CONFIGURATION ) ) ) . getProperty ( "config.authn.user.password" ) ; if ( ! ( ( user.equals ( adminUser ) ) && ( password.equals ( adminPassword ) ) ) ) { throw new org.ovirt.engine.api.extensions.AAAExtensionException ( AAAExtensionException.AAAExtensionError.INCORRECT_CREDENTIALS , "" ) ; } }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void init ( final org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model ) { this . model = model ; initView ( model ) ; initListeners ( model ) ; java.lang.String vmName = ( ( model.getVmConsoles ( ) ) instanceof org.ovirt.engine.ui.uicommonweb.models.VmConsolesImpl ) ? model.getVmConsoles ( ) . getVm ( ) . getName ( ) : model.getVmConsoles ( ) . getVm ( ) . getVmPoolName ( ) ; getView ( ) . setVmName ( vmName ) ; getView ( ) . setCtrlAltDeleteRemapHotkey ( ConsoleOptions.SECURE_ATTENTION_MAPPING ) ; super . init ( model ) ; }
public static void getVmById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.event_subscriber mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.event_subscriber entity = new org.ovirt.engine.core.common.businessentities.event_subscriber ( ) ; entity.setevent_up_name ( rs.getString ( "event_up_name" ) ) ; entity.setevent_notification_method ( org.ovirt.engine.core.common.EventNotificationMethods.valueOf ( rs.getString ( "notification_method" ) ) ) ; entity.setmethod_address ( rs.getString ( "method_address" ) ) ; entity.setsubscriber_id ( getGuidDefaultEmpty ( rs , "subscriber_id" ) ) ; entity.settag_name ( rs.getString ( "tag_name" ) ) ; return entity ; }
private void assertAllDisksAreActive ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk ) { continue ; } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( diskImage.getActive ( ) , "disk should be active" ) ; } }
public void testReadBooleanList ( ) { java.util.List < java.lang.Boolean > expected = java.util.Arrays.asList ( true , false ) ; org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader ( "<action><values><value>true</value><value>false</value></values></action>" ) ; reader.next ( ) ; java.util.List < java.lang.Boolean > booleans = reader.readBooleans ( ) ; org.junit.Assert.assertEquals ( expected , booleans ) ; }
public boolean runForSingleConnectionInHost ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain , org.ovirt.engine.core.compat.Guid storagePoolId , int type ) { boolean returnValue = false ; org.ovirt.engine.core.common.businessentities.storage_pool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . get ( storagePoolId ) ; org.ovirt.engine.core.compat.Guid vdsId = ( ( pool.getspm_vds_id ( ) ) != null ) ? pool.getspm_vds_id ( ) . getValue ( ) : org.ovirt.engine.core.compat.Guid.Empty ; if ( ! ( vdsId.equals ( Guid.Empty ) ) ) { returnValue = runConnectionStorageToDomain ( storageDomain , vdsId , type ) ; } return returnValue ; }
public void testRemoveNotFound ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetAllNetworksByClusterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void testPermissionSubjectOnProvidedImage ( ) { initializeSuppliedImage ( ) ; org.junit.Assert.assertEquals ( transferImageCommand.getPermissionCheckSubjects ( ) . get ( 0 ) , new org.ovirt.engine.core.bll.utils.PermissionSubject ( transferImageCommand.getParameters ( ) . getImageGroupID ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VmDevice addManagedDevice ( org.ovirt.engine.core.common.businessentities.VmDeviceId id , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , org.ovirt.engine.core.common.utils.VmDeviceType device , java.util.Map < java.lang.String , java.lang.Object > specParams , boolean plugged , boolean readOnly , java.lang.String address ) { org.ovirt.engine.core.common.businessentities.VmDevice managedDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( id , type , device , specParams , plugged , readOnly ) ; if ( org.apache.commons.lang.StringUtils.isNotBlank ( address ) ) { managedDevice.setAddress ( address ) ; } return managedDevice ; }
public void getHugePagesMemoryDoesNotFitIntoOne ( ) { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase ( ) ; base.setCustomProperties ( "hugepages=1048576" ) ; base.setMemSizeMb ( 1025 ) ; org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages ( base ) . size ( ) , org.hamcrest.core.Is.is ( 1 ) ) ; org.hamcrest.MatcherAssert.assertThat ( org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages ( base ) . get ( 1048576 ) , org.hamcrest.core.Is.is ( 2 ) ) ; }
public void testGetLunsToUpdateInDbDiffLunIdSamePvId ( ) { org.ovirt.engine.core.compat.Guid pvID = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.compat.Guid lunFromVgLunId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; java.util.Map < org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunHandler , java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > > lunsToUpdateInDb = getLunsToUpdateInDb ( lunFromVgLunId , org.ovirt.engine.core.compat.Guid.newGuid ( ) , pvID , pvID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > newLunsToSaveInDb = lunsToUpdateInDb.get ( command.saveLunsHandler ) ; org.junit.Assert.assertEquals ( java.util.stream.Stream.of ( command.saveLunsHandler , command.removeLunsHandler ) . collect ( java.util.stream.Collectors.toSet ( ) ) , lunsToUpdateInDb.keySet ( ) ) ; assertLunIdInList ( newLunsToSaveInDb , lunFromVgLunId ) ; }
public void getVolumeList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { getVolumeList ( aQuery , clusterName , true ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn deactivateStorageDomain ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String msdUUID , int masterVersion ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "StorageDomain.deactivate" ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "masterSdUUID" , msdUUID ) . withParameter ( "masterVersion" , masterVersion ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void setCollapseSnapshot ( org.ovirt.engine.ui.uicommonweb.models.EntityModel collapseSnapshotsModel ) { this . collapseSnapshots = collapseSnapshotsModel ; collapseSnapshots.getEntityChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { setVolumeType ( VolumeType.Sparse ) ; } } ) ; }
private void updateDiskVmSnapshotId ( ) { org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.bll.AttachDiskToVmCommand.getSnapshotDao ( ) . getId ( org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVmId ( ) , SnapshotType.ACTIVE ) ; if ( disk.getDiskStorageType ( ) . isInternal ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; org.ovirt.engine.core.bll.AttachDiskToVmCommand.getImageDao ( ) . updateImageVmSnapshotId ( diskImage.getImageId ( ) , snapshotId ) ; } else { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.StorageException , "update of snapshot id was initiated for unsupported disk type" ) ; } }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : diskInfoDestinationMap.values ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( disk.getQuotaId ( ) , null , QuotaStorageConsumptionParameter.QuotaAction.CONSUME , disk.getStorageIds ( ) . get ( 0 ) , ( ( double ) ( disk.getSizeInGigabytes ( ) ) ) ) ) ; } return list ; }
public java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VM > getAllRunningByVds ( org.ovirt.engine.core.compat.Guid id ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = getCallsHandler ( ) . executeReadList ( "GetVmsRunningByVds" , org.ovirt.engine.core.dao.VmDaoImpl.VmMonitoringRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vds_id" , id ) ) ; java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.VM > map = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { map.put ( vm.getId ( ) , vm ) ; } return map ; }
public void moveUnpluggedDiskVmUp ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageId , false ) ; command.updateParameters ( ) ; org.junit.Assert.assertEquals ( command.getMoveDiskParametersList ( ) . size ( ) , 1 ) ; }
protected void init ( ) { super . init ( ) ; resource.getParent ( ) . backend = backend ; resource.getParent ( ) . sessionHelper = sessionHelper ; resource.getParent ( ) . mappingLocator = resource.mappingLocator ; resource.getParent ( ) . httpHeaders = httpHeaders ; resource.getParent ( ) . messageBundle = messageBundle ; }
public void testVmWithDisks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; disks.add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , disks ) , true , null ) ; }
protected void storageItemsChanged ( ) { if ( ( getStorageModels ( ) ) != null ) { for ( java.lang.Object item : getStorageModels ( ) ) { org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel ) ( item ) ) ; model.setContainer ( this ) ; if ( item instanceof org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) { org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel nfsModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel ) ( item ) ) ; nfsModel.getPathChangedEvent ( ) . addListener ( this ) ; } } } }
private static java.lang.String getModules ( java.util.Map < java.lang.String , org.ovirt.engine.exttool.core.ModuleService > modules ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( java.util.Map.Entry < java.lang.String , org.ovirt.engine.exttool.core.ModuleService > entry : new java.util.TreeMap ( modules ) . entrySet ( ) ) { sb.append ( java.lang.String.format ( " %-10s - %s%n" , entry.getKey ( ) , entry.getValue ( ) . getDescription ( ) ) ) ; } return sb.toString ( ) ; }
public javax.ws.rs.core.Response refreshLuns ( org.ovirt.engine.api.model.Action action ) { java.util.List < org.ovirt.engine.api.model.LogicalUnit > incomingLuns ; if ( action.isSetLogicalUnits ( ) ) { incomingLuns = action.getLogicalUnits ( ) . getLogicalUnits ( ) ; } else { incomingLuns = java.util.Collections.emptyList ( ) ; } org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = createParameters ( guid , incomingLuns , false ) ; return performAction ( VdcActionType.RefreshLunsSize , params ) ; }
private void createSnapshot ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem ( ) ; if ( ( vm == null ) || ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow ( ) ) != null ) ) { return ; } org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel.createNewSnapshotModel ( this ) ; model.setValidateByVmSnapshots ( true ) ; setWindow ( model ) ; model.setVm ( vm ) ; model.initialize ( ) ; }
private void expandTree ( com.google.gwt.user.cellview.client.TreeNode node , boolean expand , int expandFromLevel ) { if ( node == null ) { return ; } if ( ( node.getChildCount ( ) ) > 0 ) { for ( int i = 0 ; i < ( node.getChildCount ( ) ) ; i ++ ) { boolean expandNode = ( 0 < expandFromLevel ) ? ! expand : expand ; expandTree ( node.setChildOpen ( i , expandNode ) , expand , ( expandFromLevel - 1 ) ) ; } } }
public void testUrlWithPaginationAndTypes ( ) { org.ovirt.engine.core.common.queries.ErrataFilter errataFilter = new org.ovirt.engine.core.common.queries.ErrataFilter ( ) ; errataFilter.setErrataTypes ( java.util.EnumSet.of ( Erratum.ErrataType.BUGFIX , Erratum.ErrataType.SECURITY ) ) ; errataFilter.setPageSize ( 20 ) ; errataFilter.setPageNumber ( 3 ) ; org.ovirt.engine.core.bll.host.provider.foreman.FilteredErrataRelativeUrlBuilder underTest = createFilteredErrataRelativeUrlBuilder ( errataFilter ) ; org.junit.jupiter.api.Assertions.assertEquals ( "/katello/api/v2/systems/xxx/errata?search=type+%3D+bugfix+or+type+%3D+security&page=3&per_page=20" , underTest.build ( ) ) ; }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
private void refreshCapabilities ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( vds.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.RefreshHostCapabilities , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
protected com.google.gwt.user.client.ui.TreeItem getLeafItem ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { if ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE ) ) { return getSnapshotNode ( ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) . getSnapshots ( ) ) ; } else { return null ; } }
public void getDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void setup ( ) { executor = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor ( fencedHost , new org.ovirt.engine.core.common.businessentities.FencingPolicy ( ) ) ) ; org.mockito.Mockito.doReturn ( agentExecutor1 ) . doReturn ( agentExecutor2 ) . when ( executor ) . createFenceActionExecutor ( org.mockito.ArgumentMatchers.any ( java.util.List.class ) ) ; }
public void testExecuteCommand ( ) { setVolumeId ( volumeWithRemoveBricksTask ) ; mockBackend ( true , null ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 1 ) ) . endStepJobAborted ( org.mockito.Matchers.any ( java.lang.String.class ) ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 1 ) ) . releaseVolumeLock ( ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_STOP , cmd.getAuditLogTypeValue ( ) ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.historyetl_3_2.HistoryETL.copyOfevent_outputStruct.commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL ) { try { int length = 0 ; this . log_time = readDate ( dis ) ; this . log_type_name = readString ( dis ) ; this . log_type = dis.readInt ( ) ; this . severity = dis.readInt ( ) ; this . message = readString ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public static void GetWANColorDepth ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth.fromInt ( ( ( java.lang.Integer ) ( source ) ) . intValue ( ) ) : org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth.depth16 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
private static void flatGroups ( org.ovirt.engine.api.extensions.ExtMap entity , org.ovirt.engine.api.extensions.ExtKey key , java.util.List < java.lang.String > accumulator ) { for ( org.ovirt.engine.api.extensions.ExtMap group : entity.< java.util.Collection < org.ovirt.engine.api.extensions.ExtMap > > get ( key , java.util.Collections.< org.ovirt.engine.api.extensions.ExtMap > emptyList ( ) ) ) { if ( ! ( accumulator.contains ( group.< java.lang.String > get ( Authz.GroupRecord.ID ) ) ) ) { accumulator.add ( group.< java.lang.String > get ( Authz.GroupRecord.ID ) ) ; org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups ( group , Authz.GroupRecord.GROUPS , accumulator ) ; } } }
public static < TSource > java.lang.Iterable < TSource > where ( java.lang.Iterable < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < TSource > predicate ) { java.util.ArrayList < TSource > list = new java.util.ArrayList < TSource > ( ) ; for ( TSource item : source ) { if ( predicate.match ( item ) ) { list.add ( item ) ; } } return list ; }
public javax.ws.rs.core.Response doClone ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "vm.name" ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , ( "VM: id=" + ( guid ) ) ) ; org.ovirt.engine.core.common.action.CloneVmParameters cloneVmParameters = new org.ovirt.engine.core.common.action.CloneVmParameters ( vm , action.getVm ( ) . getName ( ) ) ; cloneVmParameters.setMakeCreatorExplicitOwner ( isFiltered ( ) ) ; javax.ws.rs.core.Response response = doAction ( ActionType.CloneVm , cloneVmParameters , action ) ; return response ; }
public void testGuidListValuesWithOneGuid ( ) { java.lang.String listValues = "e61f7070-cd52-46ca-88c2-686e1c70fe44" ; java.util.List < org.ovirt.engine.core.compat.Guid > stringList = org.ovirt.engine.core.compat.Guid.createGuidListFromString ( listValues ) ; java.util.List < org.ovirt.engine.core.compat.Guid > expectedList = new java.util.ArrayList < > ( ) ; expectedList.add ( new org.ovirt.engine.core.compat.Guid ( "e61f7070-cd52-46ca-88c2-686e1c70fe44" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedList , stringList ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateStatusForActivation ( ) { org.ovirt.engine.core.bll.ValidationResult existsValidation = exists ( ) ; if ( ! ( existsValidation.isValid ( ) ) ) { return existsValidation ; } if ( ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) == ( vds.getStatus ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VDS_ALREADY_UP ) ; } if ( ( org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ) == ( vds.getStatus ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VDS_NON_RESPONSIVE ) ; } return ValidationResult.VALID ; }
public void setUp ( ) { super . setUp ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . checkNumberOfMonitors ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateCustomProperties ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VmStatic.class ) , org.mockito.ArgumentMatchers.anyListOf ( java.lang.String.class ) ) ; initCommandMethods ( ) ; initDestSDs ( ) ; generateStorageToDisksMap ( ) ; cmd.init ( ) ; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return coCoAsyncTaskHelper.concreteCreateTask ( taskId , command , asyncTaskCreationInfo , parentCommand ) ; }
public void successVmInPreviewForAttachedSnapshot ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice.setSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void testGetSysprepFileName ( ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.SYSPREP_INF , OsRepositoryImpl.INSTANCE.getSysprepFileName ( 1 , null ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.UNATTEND_XML , OsRepositoryImpl.INSTANCE.getSysprepFileName ( 11 , null ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.utils.OsRepositoryImplTest.UNATTEND_XML , OsRepositoryImpl.INSTANCE.getSysprepFileName ( 20 , null ) ) ; }
private boolean isVmPartOfManualPool ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmPoolId ( ) ) == null ) { return false ; } final org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.RunVmCommand.getDbFacade ( ) . getVmPoolDao ( ) . get ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmPoolId ( ) ) ; return vmPool.getVmPoolType ( ) . equals ( VmPoolType.Manual ) ; }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
private void removeDiskImages ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( getVm ( ) . getDiskMap ( ) . values ( ) , true , false , true ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { image.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ) ; image.setStoragePoolId ( org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters ( ) . getStoragePoolId ( ) ) ; } removeVmImages ( images ) ; }
public void testCompareTo ( ) { org.ovirt.engine.core.compat.NGuid guid1 = org.ovirt.engine.core.compat.NGuid.createGuidFromString ( "5b411bc1-c220-4421-9abd-cfa484aecb6e" ) ; org.ovirt.engine.core.compat.NGuid guid2 = org.ovirt.engine.core.compat.NGuid.createGuidFromString ( "5b411bc1-c220-4421-9abd-cfa484aecb6f" ) ; org.junit.Assert.assertTrue ( ( ( guid1.compareTo ( guid2 ) ) < 0 ) ) ; org.junit.Assert.assertTrue ( ( ( guid1.compareTo ( guid1 ) ) == 0 ) ) ; org.junit.Assert.assertTrue ( ( ( guid2.compareTo ( guid1 ) ) > 0 ) ) ; }
public static void getAAAProfilesListViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetAAAProfileList , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > createActionParameterList ( final org.ovirt.engine.core.common.action.ActionParametersBase parameters , final int count ) { java.util.List < org.ovirt.engine.core.common.action.ActionParametersBase > result = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { result.add ( parameters ) ; } return result ; }
public static org.ovirt.engine.api.model.DiskStorageType map ( org.ovirt.engine.api.model.DiskStorageType diskStorageType ) { switch ( diskStorageType ) { case IMAGE : return org.ovirt.engine.api.model.DiskStorageType.IMAGE ; case CINDER : return org.ovirt.engine.api.model.DiskStorageType.CINDER ; case LUN : return org.ovirt.engine.api.model.DiskStorageType.LUN ; default : return null ; } }
public org.ovirt.engine.api.model.Networks list ( ) { org.ovirt.engine.api.model.Networks networks ; if ( isFiltered ( ) ) { networks = mapCollection ( getBackendCollection ( queryType , getQueryParameters ( ) , SearchType.Network ) ) ; } else { networks = mapCollection ( getBackendCollection ( SearchType.Network ) ) ; } for ( org.ovirt.engine.api.model.Network network : networks.getNetworks ( ) ) { network.setDisplay ( null ) ; } return networks ; }
public void getWANColorDepth ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.fromInt ( ( ( java.lang.Integer ) ( source ) ) . intValue ( ) ) : org.ovirt.engine.core.common.console.ConsoleOptions.WanColorDepth.depth16 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.WANColorDepth , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.network.host.PersistentHostSetupNetworksCommand.getParameters ( ) . getNetworkNames ( ) ) ) { return org.ovirt.engine.core.bll.network.host.PersistentHostSetupNetworksCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.PERSIST_SETUP_NETWORK_ON_HOST_FINISHED : org.ovirt.engine.core.common.AuditLogType.PERSIST_SETUP_NETWORK_ON_HOST_FAILED ; } else { return org.ovirt.engine.core.bll.network.host.PersistentHostSetupNetworksCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.PERSIST_NETWORK_ON_HOST_FINISHED : org.ovirt.engine.core.common.AuditLogType.PERSIST_NETWORK_ON_HOST_FAILED ; } }
protected void revertTasks ( ) { org.ovirt.engine.core.compat.Guid destImageId = org.ovirt.engine.core.bll.CreateImageTemplateCommand.getDestinationDiskImage ( ) . getImageId ( ) ; org.ovirt.engine.core.common.action.RemoveImageParameters p = new org.ovirt.engine.core.common.action.RemoveImageParameters ( destImageId ) ; p.setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.VM , destImageId ) ) ; p.setParentParameters ( p ) ; p.setParentCommand ( VdcActionType.RemoveImage ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = checkAndPerformRollbackUsingCommand ( VdcActionType.RemoveImage , p ) ; if ( returnValue.getSucceeded ( ) ) { startPollingAsyncTasks ( returnValue.getInternalVdsmTaskIdList ( ) ) ; } }
protected java.lang.Long getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return ( ( long ) ( disk.getLun ( ) . getDeviceSize ( ) ) ) ; }
private void testAddingMixedTypes ( org.ovirt.engine.core.compat.Version version , boolean addingMixedTypesShouldSucceed ) { storagePool.setCompatibilityVersion ( version ) ; org.ovirt.engine.core.bll.ValidationResult attachDomainResult = validator.validateDomainCanBeAttachedToPool ( ) ; if ( addingMixedTypesShouldSucceed ) { org.junit.Assert.assertTrue ( ( "Attaching an ISCSI domain to a pool with NFS domain with with mixed type allowed failed, version: " + version ) , attachDomainResult.isValid ( ) ) ; } else { org.junit.Assert.assertFalse ( ( "Attaching an ISCSI domain to a pool with NFS domain with no mixed type allowed succeeded, version: " + version ) , attachDomainResult.isValid ( ) ) ; assertFailingMessage ( "Attaching an ISCSI domain to a pool with NFS domain with no mixed type failed with the wrong message" , attachDomainResult , VdcBllMessages.ACTION_TYPE_FAILED_MIXED_STORAGE_TYPES_NOT_ALLOWED ) ; } }
public void testEjectCd ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , "current" ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( getVm ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO , org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.NO_ISO , VMStatus.Up ) ) ; setUpActionExpectations ( ActionType.ChangeDisk , org.ovirt.engine.core.common.action.ChangeDiskCommandParameters.class , new java.lang.String [ ] { "CdImagePath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.NO_ISO } , true , true ) ; org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.NO_ISO ) ; cdrom = resource.update ( cdrom ) ; assertNull ( cdrom.getFile ( ) ) ; }
public void testGet ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetDiskSnapshotByImageId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest.IMAGE_ID } , getEntity ( 1 ) ) ; org.ovirt.engine.api.model.DiskSnapshot diskSnapshot = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotResourceTest.verifyModelSpecific ( diskSnapshot , 1 ) ; }
public void testCreatingBusinessEntityMapWithDuplicatesAmongName ( ) { org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem first = new org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , "name" ) ; org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem second = new org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , "name" ) ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> new org.ovirt.engine.core.common.businessentities.BusinessEntityMap < > ( java.util.Arrays.asList ( first , second ) ) ) ; }
protected boolean validateVM ( org.ovirt.engine.core.bll.validator.VmValidator vmValidator ) { org.ovirt.engine.core.bll.validator.LiveSnapshotValidator validator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getStoragePool ( ) . getcompatibility_version ( ) , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVds ( ) ) ; return ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm ( ) . isDown ( ) ) || ( validate ( validator.canDoSnapshot ( ) ) ) ) && ( validate ( vmValidator.vmNotSavingRestoring ( ) ) ) ; }
public static void GetSANWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete ) , aQuery ) ; }
public void testInterfaceInHostWhenInDifferentHost ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setVdsId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NIC_NOT_EXISTS_ON_HOST ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , hostId.toString ( ) ) ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceInHost ( hostId ) , matcher ) ; }
public static void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
protected org.ovirt.engine.core.common.businessentities.DiskInterface getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.Disk disk = ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return disk.getDiskInterface ( ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , true ) ; try { resource.update ( getRestModel ( 0 ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected static org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain currDomain : domainsInPool ) { org.ovirt.engine.core.bll.VmHandler.updateDisksStorage ( currDomain , disksList ) ; if ( ( ( currDomain.getStorageDomainType ( ) . isDataDomain ( ) ) && ( ( currDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) && ( org.ovirt.engine.core.bll.VmHandler.validateSpaceRequirements ( currDomain , disksList ) ) ) { return currDomain ; } } return null ; }
public void testDeactivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = resource ; setAllContentHeaderExpectation ( ) ; setUpGetEntityExpectations ( 3 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID , org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID } ) ) ; verifyActionResponse ( backendVmNicResource.deactivate ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile ) { return ( java.util.Objects.equals ( getEntity ( ) . getExternalNetworkName ( ) , vnicProfile.getNetworkName ( ) ) ) && ( java.util.Objects.equals ( getEntity ( ) . getExternalNetworkName ( ) , vnicProfile.getName ( ) ) ) ; }
public org.ovirt.engine.core.common.businessentities.VM getVm ( ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { return getParameters ( ) . getVm ( ) ; } else { return super . getVm ( ) ; } }
private boolean validateReplacementContains ( java.util.Collection < java.lang.String > replacements , java.lang.String property ) { return replacements.stream ( ) . anyMatch ( ( r ) -> r.contains ( property ) ) ; }
public org.ovirt.engine.core.common.businessentities.Snapshot addSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId , java.lang.String description , org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType snapshotType , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String memoryVolume , final org.ovirt.engine.core.bll.context.CompensationContext compensationContext ) { return addSnapshot ( snapshotId , description , SnapshotStatus.LOCKED , snapshotType , vm , true , memoryVolume , null , compensationContext ) ; }
public void testCleanNotExpiredUsersSessionsWithUsers ( ) { initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; }
public void flush ( ) { try { writer.flush ( ) ; } catch ( javax.xml.stream.XMLStreamException exception ) { throw new org.ovirt.api.metamodel.runtime.xml.XmlException ( "Can't flush" , exception ) ; } }
private void validateParameters ( org.ovirt.engine.api.model.Vm incoming ) { if ( ( incoming.isSetDomain ( ) ) && ( ! ( incoming.getDomain ( ) . isSetName ( ) ) ) ) { throw new org.ovirt.engine.api.restapi.resource.WebFaultException ( null , localize ( Messages.INCOMPLETE_PARAMS_REASON ) , localize ( Messages.INCOMPLETE_PARAMS_CONDITIONAL , "Domain" , "Domain name" ) , Response.Status.BAD_REQUEST ) ; } if ( ! ( org.ovirt.engine.api.restapi.util.IconHelper.validateIconParameters ( incoming ) ) ) { throw new org.ovirt.engine.api.restapi.resource.BaseBackendResource.WebFaultException ( null , localize ( Messages.INVALID_ICON_PARAMETERS ) , Response.Status.BAD_REQUEST ) ; } }
public void testNoStorageQuotaAssigned ( ) { org.mockito.Mockito.when ( storageQosDao.getQosByDiskProfileId ( diskImage.getDiskProfileId ( ) ) ) . thenReturn ( null ) ; underTest.handleIoTune ( vmDevice , underTest.loadStorageQos ( diskImage ) ) ; org.junit.Assert.assertNull ( vmDevice.getSpecParams ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.Disk get ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { return getCallsHandler ( ) . executeRead ( "GetDiskByDiskId" , org.ovirt.engine.core.dao.DiskDaoDbFacadeImpl.DiskRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "disk_id" , id ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ) ; }
public void getAllErrata ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Erratum > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetErrataForSystem , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.VDS createServer ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String hostname ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( serverId ) ; vds.setHostName ( hostname ) ; vds.setStatus ( VDSStatus.Up ) ; return vds ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.Integer > result = connectHostToStorage ( ) ; setSucceeded ( result.getFirst ( ) ) ; if ( ! ( result.getFirst ( ) ) ) { setErrorMessageAtReturn ( result ) ; } }
public void testChangeClusterForbidden ( ) { prepareVmToPassValidate ( ) ; org.ovirt.engine.core.common.businessentities.Cluster newGroup = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setCompatibilityVersion ( Version.v3_6 ) ; vmStatic.setClusterId ( newGroup.getId ( ) ) ; org.mockito.Mockito.doReturn ( clusterDao ) . when ( command ) . getClusterDao ( ) ; org.junit.Assert.assertFalse ( "validate should have failed with can't change cluster." , command.validate ( ) ) ; assertValidateMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
public static void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void setUp ( ) throws java.lang.Exception { ifaceQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; networkQos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ; iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; iface.setBridged ( true ) ; iface.setQos ( ifaceQos ) ; iface.setReportedSwitchType ( SwitchType.LEGACY ) ; network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; testedNetworkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; testedNetworkAttachment.setIpConfiguration ( new org.ovirt.engine.core.common.businessentities.network.IpConfiguration ( ) ) ; cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setRequiredSwitchTypeForCluster ( SwitchType.LEGACY ) ; }
public void testGetAllVMSearch ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "VM" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.VM ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( vmResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
void initComboBox ( ) { sysPrepDomainNameListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < java.lang.Object > ( ) ; sysPrepDomainNameTextBoxEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelTextBoxEditor ( ) ; sysPrepDomainNameComboBox = new org.ovirt.engine.ui.common.widget.ComboBox ( sysPrepDomainNameListBoxEditor , sysPrepDomainNameTextBoxEditor ) ; defaultHostEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < java.lang.Object > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String renderNullSafe ( java.lang.Object object ) { return ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( object ) ) . getvds_name ( ) ; } } ) ; }
public void onForceRemove ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow ( ) ) ) ; if ( ! ( model.validate ( ) ) ) { return ; } org.ovirt.engine.core.common.action.VdcActionParametersBase parametersBase = new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) ; org.ovirt.engine.core.common.action.StoragePoolParametersBase tempVar = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) . getId ( ) ) ; tempVar.setForceDelete ( true ) ; parametersBase = tempVar ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RemoveStoragePool , parametersBase ) ; cancel ( ) ; }
private void internalEndSuccessfully ( ) { log.info ( "Ending command '{}' successfully." , getClass ( ) . getName ( ) ) ; if ( hasTaskHandlers ( ) ) { getCurrentTaskHandler ( ) . endSuccessfully ( ) ; getParameters ( ) . incrementExecutionIndex ( ) ; if ( ( getExecutionIndex ( ) ) < ( getTaskHandlers ( ) . size ( ) ) ) { _actionState = CommandActionState.EXECUTE ; execute ( ) ; } } else { endSuccessfully ( ) ; } }
public void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
private void getService ( final org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider.ServiceCallback callback ) { if ( ( xsrfRequestBuilder.getXsrfToken ( ) ) != null ) { callback.serviceFound ( service ) ; } else { xsrfService.getNewXsrfToken ( new com.google.gwt.user.client.rpc.AsyncCallback < com.google.gwt.user.client.rpc.XsrfToken > ( ) { @ java.lang.Override public void onSuccess ( com.google.gwt.user.client.rpc.XsrfToken token ) { xsrfRequestBuilder.setXsrfToken ( token ) ; callback.serviceFound ( service ) ; } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { callback.onFailure ( caught ) ; } } ) ; } }
public void run ( ) { org.ovirt.engine.core.bll.VdsEventListener.log.info ( "ResourceManager::vdsNotResponding entered for Host '{}', '{}'" , vds.getId ( ) , vds.getHostName ( ) ) ; org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds.getId ( ) , org.ovirt.engine.core.common.businessentities.pm.FenceActionType.RESTART ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , params , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; moveBricksToUnknown ( vds ) ; }
public org.ovirt.engine.core.common.businessentities.network.Network mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.Network entity = super . mapRow ( rs , rowNum ) ; entity.setCluster ( new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( ) ) ; entity.getCluster ( ) . setDisplay ( ( ( java.lang.Boolean ) ( rs.getObject ( "is_display" ) ) ) ) ; entity.getCluster ( ) . setRequired ( rs.getBoolean ( "required" ) ) ; entity.getCluster ( ) . setStatus ( org.ovirt.engine.core.common.businessentities.network.NetworkStatus.forValue ( rs.getInt ( "status" ) ) ) ; return entity ; }
private boolean isDiskNotShareable ( org.ovirt.engine.core.compat.Guid imageId ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageByImageId ( imageId ) ; if ( diskImage.isShareable ( ) ) { addCanDoActionMessageVariable ( "diskAliases" , diskImage.getDiskAlias ( ) ) ; return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED ) ; } return true ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getGlusterSwiftServices ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ) ( returnValue ) ) ) ; updateActionAvailability ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }
public static com.google.gwt.safehtml.shared.SafeHtml getTooltip ( java.util.Map < com.google.gwt.safehtml.shared.SafeHtml , java.lang.String > imagesToText ) { java.lang.String tooltip = "" ; for ( java.util.Map.Entry < com.google.gwt.safehtml.shared.SafeHtml , java.lang.String > imageToText : imagesToText.entrySet ( ) ) { if ( ! ( tooltip.isEmpty ( ) ) ) { tooltip = tooltip.concat ( org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.constants.lineBreak ( ) ) ; } tooltip = tooltip.concat ( org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.templates.imageTextSetupNetwork ( imageToText.getKey ( ) , imageToText.getValue ( ) ) . asString ( ) ) ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( tooltip ) ; }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface lookupNic ( org.ovirt.engine.core.compat.Guid nicId ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > nics = getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class , VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics ) { if ( java.util.Objects.equals ( nic.getId ( ) , nicId ) ) { return nic ; } } return null ; }
private boolean shouldResizeDiskImage ( ) { return ( ( ( getNewDisk ( ) . getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) && ( ( vmDeviceForVm.getSnapshotId ( ) ) == null ) ) && ( ( getNewDisk ( ) . getSize ( ) ) != ( getOldDisk ( ) . getSize ( ) ) ) ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) , null ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertNotNull ( wae.getResponse ( ) ) ; assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.ClusterDaoTest.NUMBER_OF_GROUPS_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.junit.Assert.assertEquals ( result.iterator ( ) . next ( ) , existingCluster ) ; }
public void networkInUseByTemplates ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VmTemplate.class ) ; org.mockito.Mockito.when ( template.getName ( ) ) . thenReturn ( NAMEABLE_NAME ) ; networkNotUsedByTemplatesTest ( failsWithNetworkInUse ( ) , java.util.Collections.singletonList ( template ) ) ; }
private boolean _doConnect ( java.lang.String server , java.lang.String user , java.lang.String userPassword , java.lang.String keyStore , java.lang.String keyStorePassword ) { return _doConnect ( server , user , userPassword , keyStore , keyStorePassword , ( ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.SSHInactivityHardTimoutSeconds ) ) * 1000 ) , ( ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.SSHInactivityTimoutSeconds ) ) * 1000 ) ) ; }
private void removeUser ( ) { org.ovirt.engine.core.compat.Guid userId = getUser ( ) . getUserId ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.permissions > perms = org.ovirt.engine.core.itests.BasicTestSetup.DB_FACADE.getPermissionDao ( ) . getAllForAdElement ( userId ) ; for ( org.ovirt.engine.core.common.businessentities.permissions p : perms ) { org.ovirt.engine.core.itests.BasicTestSetup.DB_FACADE.getPermissionDao ( ) . remove ( p.getId ( ) ) ; } org.ovirt.engine.core.itests.BasicTestSetup.DB_FACADE.getDbUserDao ( ) . remove ( userId ) ; java.lang.System.out.println ( ( ( "-- removed user " + ( getUser ( ) . getUserName ( ) ) ) + " and its permissions -- " ) ) ; }
private org.ovirt.engine.api.model.NetworkAttachments mapCollection ( java.util.List < org.ovirt.engine.api.model.NetworkAttachment > networkAttachments ) { org.ovirt.engine.api.model.NetworkAttachments collection = new org.ovirt.engine.api.model.NetworkAttachments ( ) ; for ( org.ovirt.engine.api.model.NetworkAttachment networkAttachmentEntity : networkAttachments ) { org.ovirt.engine.api.model.NetworkAttachment networkAttachmentModel = populate ( map ( networkAttachmentEntity ) , networkAttachmentEntity ) ; collection.getNetworkAttachments ( ) . add ( addLinks ( networkAttachmentModel , getParentClass ( ) ) ) ; } return collection ; }
private static void checkMessages ( ) { org.ovirt.engine.core.common.AuditLogType [ ] values = org.ovirt.engine.core.common.AuditLogType.values ( ) ; if ( ( values.length ) != ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.size ( ) ) ) { for ( org.ovirt.engine.core.common.AuditLogType value : values ) { if ( ! ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.containsKey ( value ) ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.infoFormat ( "AuditLogType: {0} not exist in string table" , value.toString ( ) ) ; } } } }
public void testValidateClusterSupportForVirtioScsi ( ) { org.ovirt.engine.core.bll.ImportVmCommand < org.ovirt.engine.core.common.action.ImportVmParameters > cmd = setupDiskSpaceTest ( createParameters ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateImages ( org.mockito.Matchers.any ( java.util.Map.class ) ) ; cmd.getParameters ( ) . getVm ( ) . getDiskMap ( ) . values ( ) . iterator ( ) . next ( ) . setDiskInterface ( DiskInterface.VirtIO_SCSI ) ; cmd.getVdsGroup ( ) . setCompatibilityVersion ( Version.v3_2 ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; }
private void updateItemSizes ( org.ovirt.engine.ui.common.widget.form.FormItem item , int labelWidth , int valueWidth ) { java.util.List < java.lang.Integer > sizesList = formSizeMap.get ( item ) ; if ( sizesList == null ) { sizesList = new java.util.ArrayList < > ( ) ; formSizeMap.put ( item , sizesList ) ; } sizesList.clear ( ) ; sizesList.add ( labelWidth ) ; sizesList.add ( valueWidth ) ; }
public org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils getGlusterTaskUtils ( ) { return org.ovirt.engine.core.bll.gluster.tasks.GlusterTaskUtils.getInstance ( ) ; }
private void persistEngineSession ( java.lang.String sessionId ) { org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo = getSessionInfo ( sessionId ) ; if ( sessionInfo != null ) { sessionInfo.contentOfSession.put ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID , engineSessionDao.save ( new org.ovirt.engine.core.common.businessentities.EngineSession ( getUser ( sessionId , false ) , sessionId ) ) ) ; } }
private org.ovirt.engine.core.compat.Guid getStorageDomainIdForPoolByType ( org.ovirt.engine.core.compat.Guid pool , org.ovirt.engine.core.common.businessentities.StorageDomainType type ) { org.ovirt.engine.core.compat.Guid returnValue = org.ovirt.engine.core.compat.Guid.Empty ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = getAllForStoragePool ( pool ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains ) { if ( ( domain.getStorageDomainType ( ) ) == type ) { returnValue = domain.getId ( ) ; break ; } } return returnValue ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.storage.AddNetworkCommand.getParameters ( ) . getNetwork ( ) . setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . save ( org.ovirt.engine.core.bll.storage.AddNetworkCommand.getParameters ( ) . getNetwork ( ) ) ; addPermissions ( ) ; org.ovirt.engine.core.bll.storage.AddNetworkCommand.getReturnValue ( ) . setActionReturnValue ( org.ovirt.engine.core.bll.storage.AddNetworkCommand.getParameters ( ) . getNetwork ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.AddNetworkCommand.setSucceeded ( true ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel localStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( returnValue ) ) ; localStorageModel.getPath ( ) . setEntity ( connection.getconnection ( ) ) ; }
public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( ! ( isVisible ( value ) ) ) { return ; } com.google.gwt.resources.client.ImageResource image = org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.resources.expanderDownImage ( ) ; com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( image ) . getHTML ( ) ) ; sb.append ( org.ovirt.engine.ui.webadmin.widget.table.cell.MenuCell.templates.volumeActivityMenu ( imageHtml , id ) ) ; }
public void shouldValidateSingleNodePinning ( ) { vm.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; vm.setNumaTuneMode ( NumaTuneMode.PREFERRED ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
public void legalTimedOut ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase ( ) ; t.setUseTimout ( true ) ; long c = java.lang.System.currentTimeMillis ( ) ; c -= 1000 ; final java.util.Date d = new java.util.Date ( c ) ; t.setEndTime ( d ) ; final java.lang.String s = "legal-timeout" ; t.setTimeoutObjectId ( s ) ; t.getLegal ( ) ; final boolean result = t.getLegal ( ) ; org.junit.Assert.assertTrue ( result ) ; }
private void assertReturnedRange ( java.util.List < org.ovirt.engine.core.bll.network.macpool.Range > ranges , org.ovirt.engine.core.bll.network.macpool.MacsStorage macsStorage , java.util.List < java.lang.Integer > expectedRangeIndices ) { for ( int expectedRangeIndex : expectedRangeIndices ) { org.ovirt.engine.core.bll.network.macpool.Range actualRange = macsStorage.getRangeWithAvailableMac ( ) ; org.ovirt.engine.core.bll.network.macpool.Range expectedRange = ranges.get ( expectedRangeIndex ) ; org.hamcrest.MatcherAssert.assertThat ( actualRange , new org.hamcrest.core.IsSame ( expectedRange ) ) ; } }
public void nGuidGuidCtor ( ) { b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; final org.ovirt.engine.core.compat.Guid g = b.getVdsId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g ) ; final org.ovirt.engine.core.compat.Guid gu = b.getVmId ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 , gu ) ; }
private void onApproveInternal ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction ( VdcActionType.ApproveVds , new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.action.VdcActionParametersBase [ ] { new org.ovirt.engine.core.common.action.ApproveVdsParameters ( vds.getId ( ) ) } ) ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
public void moveDisk ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Down , null , diskImageId ) ; command.updateParameters ( ) ; org.junit.Assert.assertTrue ( ( ( command.getMoveDiskParametersList ( ) . size ( ) ) == 1 ) ) ; }
public void testChangeCdNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( null ) ; try { resource.update ( getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.B_ISO ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( masterDomain.getStoragePoolIsoMapData ( ) ) ; masterDomain.setStatus ( StorageDomainStatus.Locked ) ; getDbFacade ( ) . getStoragePoolIsoMapDao ( ) . update ( masterDomain.getStoragePoolIsoMapData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
protected void writeFile ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image ) { _writer.writeAttributeString ( org.ovirt.engine.core.utils.ovf.OVF_PREFIX , org.ovirt.engine.core.utils.ovf.OVF_URI , "href" , image.getImageId ( ) . toString ( ) ) ; _writer.writeAttributeString ( org.ovirt.engine.core.utils.ovf.OVF_PREFIX , org.ovirt.engine.core.utils.ovf.OVF_URI , "id" , image.getImageId ( ) . toString ( ) ) ; _writer.writeAttributeString ( org.ovirt.engine.core.utils.ovf.OVF_PREFIX , org.ovirt.engine.core.utils.ovf.OVF_URI , "size" , java.lang.String.valueOf ( image.getActualSizeInBytes ( ) ) ) ; }
public void testUnsubscribe ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.EventSubscriber > before = dao.getAllForSubscriber ( existingSubscriber ) ; org.junit.jupiter.api.Assertions.assertFalse ( before.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.EventSubscriber subscriber : before ) { dao.unsubscribe ( subscriber ) ; } java.util.List < org.ovirt.engine.core.common.businessentities.EventSubscriber > after = dao.getAllForSubscriber ( existingSubscriber ) ; org.junit.jupiter.api.Assertions.assertNotNull ( after ) ; org.junit.jupiter.api.Assertions.assertTrue ( after.isEmpty ( ) ) ; }
public void canDoActionSpaceValidationFails ( ) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , VolumeType.Sparse ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.AddDiskToVmCommandTest.mockStorageDomainValidatorWithoutSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString ( ) ) ) ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
private void testStatusMapping ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus backendStatus , org.ovirt.engine.api.model.GlusterBrickStatus restStatus ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( ) ; brick.setStatus ( backendStatus ) ; org.ovirt.engine.api.model.GlusterBrick restBrick = org.ovirt.engine.api.restapi.types.GlusterBrickMapper.map ( brick , null ) ; assertEquals ( restBrick.getStatus ( ) , restStatus ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotplugDisk ( java.util.Map info ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.hotplugDisk ( info ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( org.ovirt.engine.core.common.vdscommands.VDSCommandType commandType , org.ovirt.engine.core.common.vdscommands.VDSParametersBase parameters ) throws org.ovirt.engine.core.common.errors.EngineException { return getVdsBroker ( ) . RunVdsCommand ( commandType , parameters ) ; }
public void init ( javax.servlet.ServletConfig config ) throws javax.servlet.ServletException { super . init ( config ) ; type = config.getInitParameter ( org.ovirt.engine.core.FileServlet.TYPE ) ; final java.lang.String name = config.getInitParameter ( org.ovirt.engine.core.FileServlet.FILE ) ; if ( name == null ) { final java.lang.String message = ( "Can\'t get base name from parameter \"" + ( org.ovirt.engine.core.FileServlet.FILE ) ) + "\"." ; org.ovirt.engine.core.FileServlet.log.error ( message ) ; throw new javax.servlet.ServletException ( message ) ; } base = new java.io.File ( org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) . expandString ( name.replaceAll ( "%\\{" , "\\${" ) ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , getNetwork ( ) . getName ( ) ) ) . unless ( validBootProtocolForRoleNetwork ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.compat.Guid nicId = org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostNicIdQuery.getParameters ( ) . getId ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments = networkAttachmentDao.getAllForNic ( nicId ) ; if ( ! ( networkAttachments.isEmpty ( ) ) ) { fillReportedConfigurations ( nicId , networkAttachments ) ; } org.ovirt.engine.core.bll.network.host.GetNetworkAttachmentsByHostNicIdQuery.getQueryReturnValue ( ) . setReturnValue ( networkAttachments ) ; }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void testRemoveNetworkAndReassignRolesNoReassign ( ) { testRemoveNetworkAndReassignRoles ( ) ; org.mockito.Mockito.verify ( networkClusterDao , org.mockito.Mockito.never ( ) ) . update ( org.mockito.Matchers.same ( managementNetworkCluster ) ) ; org.junit.Assert.assertFalse ( managementNetworkCluster.isDisplay ( ) ) ; org.junit.Assert.assertFalse ( managementNetworkCluster.isMigration ( ) ) ; }
public void remove ( final org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RemoveExternalPolicyUnit , new org.ovirt.engine.core.common.scheduling.parameters.RemoveExternalPolicyUnitParameters ( policyUnit.getId ( ) ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { getRefreshPolicyUnitsEvent ( ) . raise ( this , null ) ; } } ) ; }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , params , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ; if ( org.ovirt.engine.core.bll.RunVmOnceCommand.isRunAsStateless ( ) ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.RunVmOnceCommand.getVm ( ) . getDiskList ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( image.getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , image.getStorageIds ( ) . get ( 0 ) , image.getActualSize ( ) ) ) ; } } return list ; }
protected org.ovirt.engine.core.common.businessentities.network.Network getClusterNetwork ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( org.ovirt.engine.api.restapi.resource.Network entity : getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.Network.class , VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) ) ) { if ( ( ( id != null ) && ( id.equals ( entity.getId ( ) ) ) ) || ( ( name != null ) && ( name.equals ( entity.getName ( ) ) ) ) ) { return entity ; } } return null ; }
public void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
public void initTest ( ) { mockCpuFlagsManagerHandler ( ) ; mockOsRepository ( ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class , dbFacade ) ; org.mockito.Mockito.doReturn ( deviceDao ) . when ( dbFacade ) . getVmDeviceDao ( ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.init ( ) ; }
protected void setUpGetEntityExpectations ( int times , org.ovirt.engine.core.compat.Guid entityId , org.ovirt.engine.api.model.Permission permission ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetPermissionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { entityId } , permission ) ; } }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.NetworkCluster net_cluster ) { setEnumTitle ( net_cluster.getstatus ( ) ) ; switch ( net_cluster.getstatus ( ) ) { case Operational : return getApplicationResources ( ) . upImage ( ) ; case NonOperational : return getApplicationResources ( ) . downImage ( ) ; default : return getApplicationResources ( ) . downImage ( ) ; } }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setAllContentHeaderExpectation ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID , org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID } , true , true ) ) ; org.ovirt.engine.api.model.Nic nic = resource.update ( getNic ( false ) ) ; assertNotNull ( nic ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > watchdogs = getWatchdogs ( ) ; if ( watchdogs.isEmpty ( ) ) { return failCanDoAction ( VdcBllMessages.WATCHDOG_NOT_FOUND ) ; } if ( ( ! ( getParameters ( ) . isClusterIndependent ( ) ) ) && ( ! ( validate ( validateModelCompatibleWithOs ( ) ) ) ) ) { return false ; } return true ; }
public double getDiskSize ( ) { if ( ( diskSize ) == 0 ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : getDiskMap ( ) . values ( ) ) { if ( ( org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE ) == ( disk.getDiskStorageType ( ) ) ) { diskSize += ( ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) . getSize ( ) ) / ( java.lang.Double.valueOf ( ( ( 1024 * 1024 ) * 1024 ) ) ) ; } } } return diskSize ; }
public void setMemoryPageSharing ( java.lang.Boolean value ) { if ( ( ( memoryPageSharing ) == null ) && ( value == null ) ) { return ; } if ( ( ( memoryPageSharing ) == null ) || ( ! ( memoryPageSharing.equals ( value ) ) ) ) { memoryPageSharing = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "MemoryPageSharing" ) ) ; } }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void vdsNotResponding ( final org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.bll.job.ExecutionHandler.updateSpecificActionJobCompleted ( vds.getId ( ) , VdcActionType.MaintenanceVds , false ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat ( "ResourceManager::vdsNotResponding entered for Host {0}, {1}" , vds.getId ( ) , vds.getHostName ( ) ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.VdsNotRespondingTreatment , new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( vds.getId ( ) , org.ovirt.engine.core.common.businessentities.FenceActionType.Restart ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; } } ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain mockGetExistingDomain ( boolean answerWithDomain ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = java.util.Collections.emptyList ( ) ; if ( answerWithDomain ) { sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.getStorageStaticData ( ) . setConnection ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ) ; domains = java.util.Collections.singletonList ( sd ) ; } org.mockito.Mockito.doReturn ( createQueryReturnValueWith ( domains ) ) . when ( backend ) . runInternalQuery ( org.mockito.ArgumentMatchers.eq ( VdcQueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class ) ) ; return sd ; }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private java.lang.String GetOptionType ( java.lang.String key ) { java.lang.String result = "" ; if ( ( org.apache.commons.lang.StringUtils.isNotEmpty ( key ) ) && ( org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionTypes.containsKey ( key ) ) ) { result = org.ovirt.engine.core.utils.pm.VdsFenceOptions.fencingOptionTypes.get ( key ) ; } return result ; }
public void testGetAllWithQuery ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > services = dao.getAllWithQuery ( ( ( "select * from gluster_server_services_view where status = '" + ( GlusterServiceStatus.STOPPED.name ( ) ) ) + "'" ) ) ; org.junit.Assert.assertNotNull ( services ) ; org.junit.Assert.assertEquals ( 1 , services.size ( ) ) ; verifyServiceOnServer2 ( services.get ( 0 ) ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void initCommand ( ) { final org.ovirt.engine.core.compat.Guid sourceSnapshotId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; command = setupCanAddVmFromSnapshotTests ( 0 , 0 , sourceSnapshotId ) ; generateStorageToDisksMap ( command ) ; initDestSDs ( command ) ; storageDomainValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class ) ; snapshotsValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class ) ; }
public static final < T extends org.ovirt.engine.core.common.businessentities.storage.Disk > java.util.Collection < T > filterNonSnapableDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.Disk > source ) { return ( ( java.util.Collection < T > ) ( org.ovirt.engine.ui.uicommonweb.Linq.where ( source , new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) { @ java.lang.Override public boolean match ( org.ovirt.engine.core.common.businessentities.storage.Disk source ) { return source.isAllowSnapshot ( ) ; } } ) ) ) ; }
public void appendTo ( java.lang.StringBuffer buffer ) { buffer.append ( "eqQueryParams(" ) ; for ( int i = 0 ; i < ( names.length ) ; i ++ ) { if ( i > 0 ) { buffer.append ( ", " ) ; } buffer.append ( names [ i ] ) ; buffer.append ( "=" ) ; buffer.append ( values [ i ] ) ; } buffer.append ( ")" ) ; }
public void testValidModifiedBondsFailsWhenBondIsUnnamed ( ) throws java.lang.Exception { doTestValidModifiedBonds ( new org.ovirt.engine.core.common.businessentities.network.Bond ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID ) ; }
protected java.lang.String getImportConflictTitle ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . importVmConflictTitle ( ) ; }
protected org.ovirt.engine.api.model.VM getInverse ( org.ovirt.engine.core.common.businessentities.VmStatic to ) { org.ovirt.engine.core.common.businessentities.VmStatistics statistics = new org.ovirt.engine.core.common.businessentities.VmStatistics ( ) ; statistics.setcpu_user ( new java.lang.Double ( 10L ) ) ; statistics.setcpu_sys ( new java.lang.Double ( 20L ) ) ; org.ovirt.engine.core.common.businessentities.VmDynamic dynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; dynamic.setdisplay_type ( to.getdefault_display_type ( ) ) ; org.ovirt.engine.api.model.VM ret = new org.ovirt.engine.api.model.VM ( to , dynamic , statistics ) ; ret.setUsageMemPercent ( java.lang.Integer.valueOf ( 50 ) ) ; return ret ; }
private void doProcessRequest ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { java.lang.String sessionID = request.getParameter ( SESSION_ID_PARAMETER ) ; if ( runQuery ( request , response , sessionID ) ) { response.setStatus ( SUCCESS_CODE ) ; org.ovirt.engine.core.services.GetSessionUser.log.debug ( "Validate Session '{}' succeeded" , sessionID ) ; } else { response.setStatus ( FAILED_CODE ) ; org.ovirt.engine.core.services.GetSessionUser.log.debug ( "Validate Session '{}' failed" , sessionID ) ; } }
public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.safehtml.shared.SafeHtml value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { if ( value != null ) { sb.append ( org.ovirt.engine.ui.common.widget.table.cell.SafeHtmlCell.templates.div ( id , value ) ) ; } }
public void testGetAllForNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > result = dao.getAllForNetwork ( network.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster cluster : result ) { org.junit.Assert.assertEquals ( network.getId ( ) , cluster.getNetworkId ( ) ) ; } }
public org.ovirt.engine.sdk.decorators.DataCenterNetwork update ( java.lang.String correlationId ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; if ( correlationId != null ) { headersBuilder.add ( "Correlation-Id" , correlationId ) ; } java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.Network.class , org.ovirt.engine.sdk.decorators.DataCenterNetwork.class , headers ) ; }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter.getCompatibilityVersion ( ) . getValue ( ) ) ) ) ; getIsShareable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.shareableDiskNotSupported ( ) ) ; getIsShareable ( ) . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled ( ) ) ) ) ; }
public static void addUsbSlots ( org.ovirt.engine.core.compat.Guid vmId , int numberOfSlots ) { for ( int index = 1 ; index <= numberOfSlots ; index ++ ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmId ) , VmDeviceGeneralType.REDIR , VmDeviceType.SPICEVMC , org.ovirt.engine.core.bll.utils.VmDeviceUtils.EMPTY_SPEC_PARAMS , true , false ) ; } }
public void setMainTabSelectedItem ( I selectedItem ) { if ( ( org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabTreeView.getDetailModel ( ) . getItems ( ) ) == null ) { table.setLoadingState ( LoadingState.LOADING ) ; } if ( ! ( org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabTreeView.getDetailModel ( ) . getItemsChangedEvent ( ) . getListeners ( ) . contains ( itemsChangedListener ) ) ) { org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabTreeView.getDetailModel ( ) . getItemsChangedEvent ( ) . addListener ( itemsChangedListener ) ; } tree.clearTree ( ) ; tree.updateTree ( org.ovirt.engine.ui.webadmin.section.main.view.AbstractSubTabTreeView.getDetailModel ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > storagePools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = ( ( storagePools.size ( ) ) > 0 ) ? storagePools.get ( 0 ) : null ; vmListModel.postGetTemplatesNotPresentOnExportDomain ( storagePool ) ; }
public void shouldCreateNiceValidationResult ( ) throws java.io.IOException { invalidVM.setCpuPinning ( "i am pinned" ) ; invalidVM.setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; invalidVM.setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) ; invalidVM.setId ( Guid.Empty ) ; newHost1.setHostOs ( "invalid os" ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible ( java.util.Collections.singletonList ( newHost1 ) , java.util.Collections.singletonList ( invalidVM ) ) ; org.assertj.core.api.Assertions.assertThat ( validationResult.getVariableReplacements ( ) ) . contains ( "CLUSTER_UPGRADE_DETAIL_HOST_INVALID_OS" , "CLUSTER_UPGRADE_DETAIL_VM_CPUS_PINNED" , "CLUSTER_UPGRADE_DETAIL_VM_NOT_MIGRATABLE" ) ; }
void initEditors ( ) { selectHostAutomaticallyEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "1" ) ; selectDestinationHostEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "1" ) ; hostsListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.VDS > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.VDS > ( ) { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDS vds ) { return vds.getName ( ) ; } } ) ; clustersEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.VDSGroup > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) { @ java.lang.Override protected java.lang.String renderNullSafe ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { return cluster.getName ( ) ; } } ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list ( java.lang.String isFull , java.lang.String [ ] vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getVMFullList" ) . withOptionalParameterAsList ( "vmList" , new java.util.ArrayList < > ( java.util.Arrays.asList ( vmIds ) ) ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( response ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ; model.getBaseTemplate ( ) . setItems ( java.util.Collections.singletonList ( template ) ) ; model.getBaseTemplate ( ) . setSelectedItem ( template ) ; model.getBaseTemplate ( ) . setIsChangable ( false ) ; }
public static void GetClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit ) , aQuery ) ; }
public static java.lang.String startPasswordDialog ( java.lang.String user , java.lang.String msg ) throws java.io.IOException { org.ovirt.engine.core.config.EngineConfigLogic.log.debug ( "starting password dialog." ) ; java.lang.String prompt = null ; if ( user != null ) { prompt = ( ( msg + " for " ) + user ) + ": " ; } else { prompt = msg + ": " ; } char [ ] passwd = org.ovirt.engine.core.config.EngineConfigLogic.console.readPassword ( prompt ) ; return passwd == null ? "" : new java.lang.String ( passwd ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { modelProvider.setSelectedItems ( getSelectedItems ( ) ) ; fireTableSelectionChangeEvent ( ) ; onSelection ( ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return org.ovirt.engine.core.bll.MigrateVmCommand.getSucceeded ( ) ? ( org.ovirt.engine.core.bll.MigrateVmCommand.getActionReturnValue ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_DONE : org.ovirt.engine.core.bll.MigrateVmCommand.isInternalExecution ( ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_START_SYSTEM_INITIATED : org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_START : _isRerun ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_TRYING_RERUN : ( org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance ) ? org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE : org.ovirt.engine.core.common.AuditLogType.VM_MIGRATION_FAILED ; }
public void initLinuxOsTypes ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { linuxOsIds = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetLinuxOss ) , callback ) ; }
public void setItems ( java.lang.Iterable value ) { if ( ( items ) != value ) { ItemsChanging ( value , items ) ; items = value ; ItemsChanged ( ) ; getItemsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Items" ) ) ; } }
public void testNullObjectForNonExistingID ( ) { boolean raised = false ; org.ovirt.engine.sdk4.services.VmService vmService = vmsService.vmService ( "456" ) ; try { vmService.get ( ) . send ( ) . vm ( ) ; } catch ( java.lang.Error e ) { org.junit.Assert.assertTrue ( e.getMessage ( ) . contains ( "404" ) ) ; raised = true ; } org.junit.Assert.assertTrue ( raised ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStoragePoolDao ( ) ; existingPool = dao.get ( new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ) ; existingPool.setStatus ( StoragePoolStatus.Up ) ; vds = new org.ovirt.engine.core.compat.Guid ( "afce7a39-8e8c-4819-ba9c-796d316592e6" ) ; vdsGroup = new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( "72e3a666-89e1-4005-a7ca-f7548004a9ab" ) ; newPool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; newPool.setName ( "newPoolDude" ) ; newPool.setcompatibility_version ( new org.ovirt.engine.core.compat.Version ( "3.0" ) ) ; }
public static void GetDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { java.lang.Object returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) . getReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > allHostVfs = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig > ) ( returnValue ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : allHostVfs ) { originalVfsConfigs.add ( vfsConfig ) ; nicToVfsConfig.put ( vfsConfig.getNicId ( ) , new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig ( vfsConfig ) ) ; } queryVfMap ( ) ; }
public org.ovirt.engine.sdk.decorators.TemplateNIC add ( org.ovirt.engine.sdk.decorators.NIC nic ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . add ( url , nic , org.ovirt.engine.sdk.entities.NIC.class , org.ovirt.engine.sdk.decorators.TemplateNIC.class , headers ) ; }
public void setBootMenuEnabled ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.Boolean > bootMenuEnabled ) { this . bootMenuEnabled = bootMenuEnabled ; }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
private void expectGetDeviceList ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; returnValue.setReturnValue ( org.ovirt.engine.core.bll.storage.disk.lun.GetLunsByVgIdQueryTest.setUpLunsFromDeviceList ( ) ) ; org.mockito.Mockito.when ( vdsBrokerFrontendMock.RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.GetDeviceList ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters.class ) ) ) . thenReturn ( returnValue ) ; }
public void moveShareableDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setShareable ( true ) ; initializeCommand ( disk , VmEntityType.VM ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) != null ) && ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) ) { getGlusterHostAddress ( ) . setIsChangeable ( true ) ; getGlusterHostPassword ( ) . setIsChangeable ( true ) ; } else { getGlusterHostAddress ( ) . setIsChangeable ( false ) ; getGlusterHostPassword ( ) . setIsChangeable ( false ) ; } }
private void setupDisks ( final org.ovirt.engine.ui.userportal.uicommon.model.basic.UserPortalBasicListProvider modelProvider ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = modelProvider.getModel ( ) . getvmBasicDiskListModel ( ) . getItems ( ) ; if ( diskImages != null ) { getView ( ) . editDistItems ( diskImages ) ; } }
public org.ovirt.optimizer.solver.test.TestOptimizer addVm ( org.ovirt.engine.sdk.entities.VM vm ) { bestSolution.getVms ( ) . put ( vm.getId ( ) , vm ) ; final org.ovirt.optimizer.solver.facts.Instance instance = new org.ovirt.optimizer.solver.facts.Instance ( vm ) ; primaryInstances.put ( vm , instance ) ; bestSolution.getInstances ( ) . add ( instance ) ; return this ; }
public void edit ( ) { if ( ( getWindow ( ) ) != null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel model = new org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel ( this , getEntity ( ) . getCompatibilityVersion ( ) , ( ( org.ovirt.engine.core.common.businessentities.network.VnicProfileView ) ( getSelectedItem ( ) ) ) , getEntity ( ) . getDataCenterId ( ) ) ; setWindow ( model ) ; initProfileNetwork ( model ) ; }
protected void authenticate ( org.ovirt.engine.core.bll.utils.EngineSSHClient client , java.lang.String userId , java.lang.String password ) throws javax.naming.AuthenticationException { client.setUser ( userId ) ; client.setPassword ( password ) ; try { client.authenticate ( ) ; } catch ( javax.naming.AuthenticationException e ) { throw e ; } catch ( java.lang.Exception e ) { log.errorFormat ( "Exception during authentication!" , e ) ; throw new java.lang.RuntimeException ( e ) ; } }
public static void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
private org.ovirt.engine.core.common.AuditLogType getExecuteAuditLogTypeValue ( boolean successful ) { boolean isVmNameExist = org.apache.commons.lang.StringUtils.isNotEmpty ( org.ovirt.engine.core.bll.AddDiskCommand.getVmName ( ) ) ; if ( successful ) { if ( isVmNameExist ) { return org.ovirt.engine.core.common.AuditLogType.USER_ADD_DISK_TO_VM ; } else { return org.ovirt.engine.core.common.AuditLogType.USER_ADD_DISK ; } } else { if ( isVmNameExist ) { return org.ovirt.engine.core.common.AuditLogType.USER_FAILED_ADD_DISK_TO_VM ; } else { return org.ovirt.engine.core.common.AuditLogType.USER_FAILED_ADD_DISK ; } } }
public org.ovirt.engine.core.common.businessentities.TagsVmMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.TagsVmMap entity = new org.ovirt.engine.core.common.businessentities.TagsVmMap ( ) ; entity.settag_id ( org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( rs.getString ( "tag_id" ) ) ) ; entity.setvm_id ( org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( rs.getString ( "vm_id" ) ) ) ; entity.setDefaultDisplayType ( ( ( java.lang.Integer ) ( rs.getObject ( "DefaultDisplayType" ) ) ) ) ; return entity ; }
protected boolean performLiveSnapshot ( final org.ovirt.engine.core.common.businessentities.Snapshot snapshot ) { try { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope ( TransactionScopeOption.Suppress , new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { runVdsCommand ( VDSCommandType.Snapshot , buildLiveSnapshotParameters ( snapshot ) ) ; return null ; } } ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { handleVdsLiveSnapshotFailure ( e ) ; return false ; } return true ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { if ( selectionModel.getSelectedList ( ) . isEmpty ( ) ) { scrollOffset = 0 ; } else { updateScrollPosition ( ) ; } enforceScrollPosition ( ) ; }
public void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster cloneNetworkCluster ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster instance ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster obj = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( ) ; obj.setId ( instance.getId ( ) ) ; obj.setStatus ( instance.getStatus ( ) ) ; obj.setDisplay ( instance.isDisplay ( ) ) ; obj.setRequired ( instance.isRequired ( ) ) ; obj.setMigration ( instance.isMigration ( ) ) ; obj.setManagement ( instance.isManagement ( ) ) ; obj.setGluster ( instance.isGluster ( ) ) ; return obj ; }
private void mockVdsGroup ( ) { vdsGroup = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDSGroup.class ) ; org.mockito.Mockito.doReturn ( clusterId ) . when ( vdsGroup ) . getId ( ) ; org.mockito.Mockito.doReturn ( storagePoolId ) . when ( vdsGroup ) . getStoragePoolId ( ) ; org.mockito.Mockito.doReturn ( ArchitectureType.x86_64 ) . when ( vdsGroup ) . getArchitecture ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( vdsGroup ) . getCompatibilityVersion ( ) ; }
public void setUp ( ) throws java.lang.Exception { this . macPoolValidator = createMacPoolValidator ( macPool ) ; org.mockito.Mockito.when ( dbFacadeMock.getMacPoolDao ( ) ) . thenReturn ( macPoolDaoMock ) ; org.mockito.Mockito.when ( dbFacadeMock.getStoragePoolDao ( ) ) . thenReturn ( storagePoolDao ) ; }
public void testGetAllQuotaSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Quota" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.Quota ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertTrue ( ( ( quotaResultList ) == ( searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name , boolean isHostedEngine ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = createDataStorageDomain ( status , name , HE_SD_ID ) ; domain.setHostedEngineStorage ( isHostedEngine ) ; org.mockito.Mockito.when ( storageDomainDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( domain ) ) ; cmd.setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return domain ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; UpdateActionAvailability ( ) ; if ( ( ( getSelectedItem ( ) ) != null ) && ( ! ( getIsBookmarkInitiated ( ) ) ) ) { setIsBookmarkInitiated ( true ) ; getNavigatedEvent ( ) . raise ( this , new org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkEventArgs ( ( ( org.ovirt.engine.core.common.businessentities.Bookmark ) ( getSelectedItem ( ) ) ) ) ) ; setIsBookmarkInitiated ( false ) ; } }
protected void doTestBadAdd ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpVm ( GUIDS [ 1 ] ) ) ; setUpGetConsoleExpectations ( 1 ) ; setUpGetSoundcardExpectations ( 1 ) ; super . doTestBadAdd ( valid , success , detail ) ; }
public org.ovirt.engine.core.bll.ValidationResult isStorageDomainTypeFitsPoolIfMixed ( ) { boolean isBlockDomain = storageDomainStatic.getStorageType ( ) . isBlockDomain ( ) ; if ( ! ( isMixedTypesAllowedInDC ( ) ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.StorageType > storageTypesOnPool = getStoragePoolDao ( ) . getStorageTypesInPool ( storagePool.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType : storageTypesOnPool ) { if ( ( storageType.isBlockDomain ( ) ) != isBlockDomain ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIXED_STORAGE_TYPES_NOT_ALLOWED ) ; } } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( ( java.lang.Boolean ) ( model.getSpecificClusterQuota ( ) . getEntity ( ) ) ) ) { quotaClusterTable.insertColumn ( 0 , isClusterInQuotaColumn ) ; quotaClusterTable.setColumnWidth ( isClusterInQuotaColumn , "30px" ) ; quotaClusterTable.edit ( model.getAllDataCenterClusters ( ) ) ; } else { quotaClusterTable.removeColumn ( isClusterInQuotaColumn ) ; quotaClusterTable.edit ( model.getQuotaClusters ( ) ) ; } }
public void testGetBaseNicVerifyDelegation ( ) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = org.mockito.Mockito.spy ( calculateBaseNic ) ; spy.getBaseNic ( baseNic ) ; org.mockito.Mockito.verify ( spy ) . getBaseNic ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.class ) , org.mockito.ArgumentMatchers.isNull ( ) ) ; }
private void removeTemplateFromDb ( ) { org.ovirt.engine.core.bll.RemoveVmTemplateCommand.removeNetwork ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) . remove ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate ( ) . getId ( ) ) ; vmIconDao.removeIfUnused ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate ( ) . getSmallIconId ( ) ) ; vmIconDao.removeIfUnused ( org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate ( ) . getLargeIconId ( ) ) ; }
private void setUpGetVmExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( QueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getVmEntity ( ) ) ; } }
public void isTemplateNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String templateName , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( source != null ) && ( ! ( ( java.lang.Boolean ) ( source ) ) ) ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( templateName ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmTemlateWithSameNameExist , params , aQuery ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; boolean detach = org.ovirt.engine.api.common.util.QueryHelper.getBooleanMatrixParameter ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmDiskResource.DETACH_ONLY , true , false ) ; if ( detach ) { return performAction ( VdcActionType.DetachDiskFromVm , new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters ( vmId , guid ) ) ; } else { return performAction ( VdcActionType.RemoveDisk , new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guid ) ) ; } }
public void hostProviderDoesNotExist ( ) { org.mockito.Mockito.when ( host.getHostProviderId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( providerDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.when ( dbFacade.getProviderDao ( ) ) . thenReturn ( providerDao ) ; validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator ( dbFacade , oldHost , host , false ) ; org.junit.Assert.assertThat ( validator.hostProviderExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) ) ; }
protected void detachStorageDomainWithEntities ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsForStorageDomain = org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getVmDao ( ) . getAllForStorageDomain ( storageDomain.getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > vmTemplatesForStorageDomain = org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getVmTemplateDao ( ) . getAllForStorageDomain ( storageDomain.getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksForStorageDomain = getDiskImageDao ( ) . getAllForStorageDomain ( storageDomain.getId ( ) ) ; removeEntitiesFromStorageDomain ( vmsForStorageDomain , vmTemplatesForStorageDomain , disksForStorageDomain , storageDomain.getId ( ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ) { return false ; } org.ovirt.engine.core.common.businessentities.storage.LunDisk other = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( obj ) ) ; return ( java.util.Objects.equals ( lun , other.lun ) ) && ( java.util.Objects.equals ( usingScsiReservation , other.usingScsiReservation ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getMovedDisks ( ) { java.util.Set < org.ovirt.engine.core.compat.Guid > movedDiskIds = getMovedDiskIds ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid diskId : movedDiskIds ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setId ( diskId ) ; disks.add ( disk ) ; } return disks ; }
protected void updateDiskProfile ( ) { if ( isDiskImage ( ) ) { org.ovirt.engine.core.common.businessentities.DiskImage oldDisk = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getOldDisk ( ) ) ) ; org.ovirt.engine.core.common.businessentities.DiskImage newDisk = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getNewDisk ( ) ) ) ; if ( ! ( java.util.Objects.equals ( oldDisk.getDiskProfileId ( ) , newDisk.getDiskProfileId ( ) ) ) ) { org.ovirt.engine.core.bll.UpdateVmDiskCommand.getImageStorageDomainMapDao ( ) . updateDiskProfileByImageGroupIdAndStorageDomainId ( newDisk.getId ( ) , newDisk.getStorageIds ( ) . get ( 0 ) , newDisk.getDiskProfileId ( ) ) ; } } }
public static void GetDocumentationBaseURL ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Step model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.isExternal ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getJob ( ) ) ; verifyLinks ( model ) ; }
private static java.lang.String getDomainIdTuple ( org.ovirt.engine.core.compat.Guid domainId ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage_domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainStaticDao ( ) . get ( domainId ) ; if ( storage_domain != null ) { return ( domainId + ":" ) + ( storage_domain.getStorageName ( ) ) ; } else { return domainId.toString ( ) ; } }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public static void GetLowUtilizationForPowerSave ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.LowUtilizationForPowerSave , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private static void addAddress ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice , org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct ) { java.util.Map < java.lang.String , java.lang.String > addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map ( vmDevice.getAddress ( ) ) ; if ( ( addressMap.size ( ) ) > 0 ) { struct.add ( VdsProperties.Address , addressMap ) ; } }
public void shouldDetectNumaPinning ( ) { invalidVM.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( UpgradeError.VM_NUMA_PINNED ) ; }
public void testReorderMacAddresses ( ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , control.createMock ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.ReorderVmNics , org.ovirt.engine.core.common.action.VmOperationParameterBase.class , new java.lang.String [ ] { "VmId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } ) ) ; verifyActionResponse ( resource.reorderMacAddresses ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
public java.lang.String getItemsCountString ( ) { if ( ( getItems ( ) ) == null ) { return "" ; } int fromItemCount = ( ( getSearchPageSize ( ) ) * ( ( getSearchPageNumber ( ) ) - 1 ) ) + 1 ; int toItemCount = ( fromItemCount - 1 ) + ( ( ( java.util.Collection ) ( getItems ( ) ) ) . size ( ) ) ; if ( ( toItemCount == 0 ) || ( fromItemCount > toItemCount ) ) { return "" ; } return ( fromItemCount + "-" ) + toItemCount ; }
public void testIscsiLunCanBeAdded ( ) { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk ( ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; initializeCommand ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , parameters ) ; org.mockito.Mockito.when ( diskLunMapDAO.getDiskIdByLunId ( disk.getLun ( ) . getLUN_id ( ) ) ) . thenReturn ( null ) ; org.junit.Assert.assertTrue ( "checkIfLunDiskCanBeAdded() failed for valid iscsi lun" , command.checkIfLunDiskCanBeAdded ( spyDiskValidator ( disk ) ) ) ; }
private void failureEventHandler ( final java.lang.Throwable caught ) { java.lang.String errorMessage ; if ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) { errorMessage = ( ( getConstants ( ) . requestToServerFailedWithCode ( ) ) + ": " ) + ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode ( ) ) ; } else { errorMessage = ( ( getConstants ( ) . requestToServerFailed ( ) ) + ": " ) + ( caught.getLocalizedMessage ( ) ) ; } failureEventHandler ( null , java.util.Collections.singletonList ( errorMessage ) ) ; }
public void testCDAVdsNotUp ( ) { vds.setStatus ( VDSStatus.Down ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( "canDoAction did not fail for a VDS with a status different from UP" , command , VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_NOT_UP ) ; }
public void setUp ( ) { vm = createVm ( ) ; validator = new org.ovirt.engine.core.bll.validator.VmValidator ( vm ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.VmNetworkInterfaceDao.class , vmNetworkInterfaceDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.network.VnicProfileDao.class , vnicProfileDao ) ; injectorRule.bind ( org.ovirt.engine.core.dao.DiskVmElementDao.class , diskVmElementDao ) ; }
protected void removeOvfForTemplatesAndVmsOfStoragePool ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid poolId = pool.getId ( ) ; removedOvfIdsInfo = getVmAndTemplatesGenerationsDao ( ) . getIdsForOvfDeletion ( poolId ) ; if ( ! ( ovfOnAnyDomainSupported ( pool ) ) ) { for ( org.ovirt.engine.core.compat.Guid id : removedOvfIdsInfo ) { executeRemoveVmInSpm ( poolId , id , Guid.Empty ) ; } } markDomainsWithOvfsForOvfUpdate ( removedOvfIdsInfo ) ; getVmAndTemplatesGenerationsDao ( ) . deleteOvfGenerations ( removedOvfIdsInfo ) ; }
public void getVmTemplatesByBaseTemplateId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid baseTemplate ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesByBaseTemplateId , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( baseTemplate ) , asyncQuery ) ; }
public void init ( ) { super . init ( ) ; getIsAutoAssign ( ) . setEntity ( true ) ; getCustomPropertySheet ( ) . setKeyValueString ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getCustomPropertiesList ( ) . get ( vm.getVdsGroupCompatibilityVersion ( ) ) ) ; getCustomPropertySheet ( ) . deserialize ( vm.getCustomProperties ( ) ) ; loadHosts ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getNetworkDao ( ) ) ; cluster = new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ; datacenter = new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ; new_net = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; new_net.setName ( "newnet1" ) ; new_net.setDescription ( "New network" ) ; new_net.setDataCenterId ( datacenter ) ; }
public T convert ( java.lang.Object source ) { java.lang.Iterable < T > iterable = ( ( java.lang.Iterable < T > ) ( source ) ) ; java.util.Iterator < T > iterator = iterable.iterator ( ) ; while ( iterator.hasNext ( ) ) { return iterator.next ( ) ; } return null ; }
public void validateWrongStorage ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic nfsStatic = createStorageDomain ( ) ; nfsStatic.setStorageType ( StorageType.NFS ) ; org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setStorageStaticData ( nfsStatic ) ; sd.setStatus ( StorageDomainStatus.Active ) ; sd.setStoragePoolId ( spId ) ; org.mockito.Mockito.doReturn ( sd ) . when ( cmd ) . getStorageDomain ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , true ) ; try { resource.get ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private void initProfiles ( ) { java.lang.Iterable < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > existingProfiles = getProfiles ( ) . getItems ( ) ; if ( existingProfiles == null ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > profiles = new java.util.LinkedList < org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel > ( ) ; profiles.add ( getDefaultProfile ( ) ) ; getProfiles ( ) . setItems ( profiles ) ; } else { for ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profile : existingProfiles ) { profile.updateDc ( getSelectedDc ( ) . getcompatibility_version ( ) , getSelectedDc ( ) . getId ( ) ) ; } } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { getWindow ( ) . stopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { setWindow ( null ) ; setGuideContext ( returnValue.getActionReturnValue ( ) ) ; updateActionAvailability ( ) ; getGuideCommand ( ) . execute ( ) ; } else { cancel ( ) ; } super . executed ( result ) ; }
private void setIsRunAndPause ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NotChangableForVmInPoolEntityModel value ) { privateIsRunAndPause = value ; }
public static org.ovirt.engine.core.compat.RpmVersion getOvirtHostOsVersion ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.compat.RpmVersion vdsOsVersion = null ; try { vdsOsVersion = new org.ovirt.engine.core.compat.RpmVersion ( vds.getHostOs ( ) , "RHEV Hypervisor -" , true ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.VdsHandler.log.errorFormat ( "Failed to parse version of Host {0},{1} and Host OS '{2}' with error {3}" , vds.getId ( ) , vds.getName ( ) , vds.getHostOs ( ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( e ) ) ; } return vdsOsVersion ; }
public void failRunStatelessHA_VM ( ) { canRunVmAsStateless ( true , false , true , true , false , EngineMessage.VM_CANNOT_RUN_STATELESS_HA ) ; canRunVmAsStateless ( true , false , true , null , false , EngineMessage.VM_CANNOT_RUN_STATELESS_HA ) ; canRunVmAsStateless ( true , false , false , true , false , EngineMessage.VM_CANNOT_RUN_STATELESS_HA ) ; }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void removeNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDAO ( ) . getAllForTemplate ( getVmTemplateId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : list ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDAO ( ) . remove ( iface.getId ( ) ) ; } }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotCreateReturnForXmlRpc glusterSnapshotCreate ( java.lang.String volumeName , java.lang.String snapshotName , java.lang.String description , boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotCreate" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "snapName" , snapshotName ) . withOptionalParameter ( "snapDescription" , description ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotCreateReturnForXmlRpc ( response ) ; }
private void afterMigrationFrom ( org.ovirt.engine.core.common.businessentities.VmDynamic runningVm , org.ovirt.engine.core.common.businessentities.VM vmToUpdate ) { org.ovirt.engine.core.common.businessentities.VMStatus oldVmStatus = vmToUpdate.getstatus ( ) ; if ( ( oldVmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) && ( org.ovirt.engine.core.common.businessentities.VM.isGuestUp ( runningVm.getstatus ( ) ) ) ) { _vmsToRerun.add ( runningVm.getId ( ) ) ; org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( "adding VM {0} to re-run list" , runningVm.getId ( ) ) ; vmToUpdate.setmigrating_to_vds ( null ) ; } }
public org.ovirt.engine.core.bll.ValidationResult checkClusterUpgradeIsEnabled ( final org.ovirt.engine.core.common.businessentities.Cluster cluster ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.MIXED_HOST_VERSIONS_NOT_ALLOWED ) . when ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.CheckMixedRhelVersions , cluster.getCompatibilityVersion ( ) . getValue ( ) ) ) ; }
private void handleFinalizingFailure ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { log.error ( "Finalizing failed transfer. {}" , getTransferDescription ( ) ) ; stopImageTransferSession ( context.entity ) ; setImageStatus ( ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getTransferType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload ) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) ; updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; }
public static void GetAllProviders ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( ) , aQuery ) ; }
private org.ovirt.engine.core.bll.validator.HostValidator mockHostForUniqueId ( java.lang.String value ) { mockConfigRule.mockConfigValue ( ConfigValues.InstallVds , java.lang.Boolean.TRUE ) ; org.ovirt.engine.core.common.businessentities.VDS host = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ; org.mockito.Mockito.when ( host.getUniqueId ( ) ) . thenReturn ( value ) ; return new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; }
public void testGetCascadingResourceMissingResourcesFile ( ) throws java.net.URISyntaxException { java.io.File testThemeRootPath = new java.io.File ( this . getClass ( ) . getClassLoader ( ) . getResource ( "./org/ovirt/engine/core/branding" ) . toURI ( ) . getPath ( ) ) ; java.io.File testThemePath = new java.io.File ( testThemeRootPath.getAbsoluteFile ( ) , "04-test4.brand" ) ; org.ovirt.engine.core.branding.BrandingTheme theme4 = new org.ovirt.engine.core.branding.BrandingTheme ( testThemePath.getAbsolutePath ( ) , testThemeRootPath , 2 ) ; org.junit.Assert.assertTrue ( "Theme 4 should load" , theme4.load ( ) ) ; org.junit.Assert.assertNull ( "getCascadingResource not handling missing resources.properties gracefully" , theme4.getCascadingResource ( "this_file_is_missing_anyway" ) ) ; }
private void executeVolumeStatusInfo ( java.lang.String volumeStatusOption ) { result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.getBroker ( ) . glusterVolumeStatus ( org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.getParameters ( ) . getClusterId ( ) , org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.getParameters ( ) . getVolumeName ( ) , ( ( org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.getParameters ( ) . getBrickName ( ) ) == null ? "" : org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.getParameters ( ) . getBrickName ( ) ) , volumeStatusOption ) ; org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeAdvancedDetailsVDSCommand.proceedProxyReturnValue ( ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object virtioScsiEnabledReturnValue ) { if ( java.lang.Boolean.FALSE.equals ( virtioScsiEnabledReturnValue ) ) { diskInterfaces.remove ( DiskInterface.VirtIO_SCSI ) ; } for ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels ) { diskModel.getDiskInterface ( ) . setItems ( diskInterfaces ) ; diskModel.getDiskInterface ( ) . setSelectedItem ( DiskInterface.VirtIO ) ; } java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel > > entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList ( org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByType ( diskModels , diskStorageType ) ) ; initAttachableDisks ( entities ) ; }
protected void syncSearch ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getGlusterVolumeSnapshotsForVolume ( new org.ovirt.engine.ui.uicommonweb.models.gluster.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > snapshots ) { java.util.Collections.sort ( snapshots , new org.ovirt.engine.ui.uicommonweb.Linq.GlusterVolumeSnapshotComparer ( ) ) ; setItems ( snapshots ) ; } } ) , getEntity ( ) . getId ( ) ) ; }
private int getOccupiedVmSlots ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.Map < java.lang.String , java.lang.String > parameters ) { int occupiedSlots = vds.getVmActive ( ) ; final int SPMVMCountGrace = org.apache.commons.lang.math.NumberUtils.toInt ( parameters.get ( PolicyUnitParameter.SPM_VM_GRACE.getDbName ( ) ) , spmVmGrace ) ; if ( vds.isSpm ( ) ) occupiedSlots += SPMVMCountGrace ; return occupiedSlots ; }
private void mockVmDevice ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { org.mockito.Mockito.when ( vmDeviceDAO.getVmDeviceByVmIdAndType ( vm.getId ( ) , vmDevice.getType ( ) ) ) . thenReturn ( java.util.Arrays.asList ( vmDevice ) ) ; org.mockito.Mockito.doReturn ( vmDeviceDAO ) . when ( dbFacade ) . getVmDeviceDao ( ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testGetAllSupportedNetworkFiltersByVersion ( ) { final org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version ( "4.0" ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkFilter > allNetworkFilter = dao.getAllSupportedNetworkFiltersByVersion ( version ) ; org.junit.jupiter.api.Assertions.assertNotNull ( allNetworkFilter ) ; org.junit.jupiter.api.Assertions.assertEquals ( 3 , allNetworkFilter.size ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkFilter expectedNetworkFilter = initOvirtNoFilter ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedNetworkFilter , allNetworkFilter.get ( 1 ) ) ; expectedNetworkFilter = expectedNetworkFilter ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedNetworkFilter , allNetworkFilter.get ( 0 ) ) ; }
public void testDiscoverGeoRepDataWhenNoSessions ( ) { org.mockito.Mockito.doReturn ( getSessionsVDSReturnVal ( 0 ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionList ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters.class ) ) ; syncJob.discoverGeoRepData ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 0 ) ) . save ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession.class ) ) ; }
protected java.util.List < org.ovirt.engine.api.model.StorageDomain > getExistingStorageDomains ( boolean existing ) { java.util.List < org.ovirt.engine.api.model.StorageDomain > ret = new java.util.ArrayList < org.ovirt.engine.api.model.StorageDomain > ( ) ; if ( existing ) { ret.add ( new org.ovirt.engine.api.model.StorageDomain ( ) ) ; } return ret ; }
public void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; getConfigFromCache ( tempVar , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.storage.GetStorageDomainByIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.storage.GetStorageDomainByIdQuery.getDbFacade ( ) . getStorageDomainDao ( ) . get ( org.ovirt.engine.core.bll.storage.GetStorageDomainByIdQuery.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.bll.storage.GetStorageDomainByIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.storage.GetStorageDomainByIdQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
public javax.ws.rs.core.Response exportToExportDomain ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.MoveOrCopyParameters params = new org.ovirt.engine.core.common.action.MoveOrCopyParameters ( guid , getStorageDomainId ( action ) ) ; if ( ( action.isSetExclusive ( ) ) && ( action.isExclusive ( ) ) ) { params.setForceOverride ( true ) ; } if ( ( action.isSetDiscardSnapshots ( ) ) && ( action.isDiscardSnapshots ( ) ) ) { params.setCopyCollapse ( true ) ; } return doAction ( ActionType.ExportVm , params , action ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpQueryExpectations ( "" , null , StorageDomainType.ImportExport ) ; setUpGetDataCenterByStorageDomainExpectations ( GUIDS [ 3 ] , 2 ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveVmTemplateFromImportExport , org.ovirt.engine.core.common.action.VmTemplateImportExportParameters.class , new java.lang.String [ ] { "VmTemplateId" , "StorageDomainId" , "StoragePoolId" } , new java.lang.Object [ ] { GUIDS [ 1 ] , GUIDS [ 3 ] , GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterSnapshotConfigSet ( java.lang.String configName , java.lang.String configValue ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterSnapshot.configSet" ) . withParameter ( "option" , configName ) . withParameter ( "value" , configValue ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void onRollback ( ) { log.error ( "Transaction rolled-back for command '{}'." , this . getClass ( ) . getName ( ) ) ; try { if ( isQuotaDependant ( ) ) { rollbackQuota ( ) ; } } catch ( java.lang.NullPointerException e ) { log.error ( "RollbackQuota: failed (may be because quota is disabled)" , e ) ; } cancelTasks ( ) ; }
protected void gatherChangedVms ( org.ovirt.engine.core.common.businessentities.VM dbVm , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VdsmVm vdsmVm ) { changedVms.add ( new org.ovirt.engine.core.common.utils.Pair ( dbVm , vdsmVm ) ) ; if ( org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled ( ) ) { logBuilder.append ( java.lang.String.format ( "%s:%s " , vdsmVm.getVmDynamic ( ) . getId ( ) . toString ( ) . substring ( 0 , 8 ) , vdsmVm.getVmDynamic ( ) . getStatus ( ) ) ) ; } }
protected void executeCommand ( ) { boolean succeeded = false ; try { succeeded = runVdsCommand ( VDSCommandType.SetMOMPolicyParameters , new org.ovirt.engine.core.common.vdscommands.MomPolicyVDSParameters ( getVds ( ) , getVdsGroup ( ) . isEnableBallooning ( ) , getVdsGroup ( ) . isEnableKsm ( ) ) ) . getSucceeded ( ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.error ( "Could not update MoM policy on host '{}': {}" , getVdsName ( ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; } getReturnValue ( ) . setSucceeded ( succeeded ) ; }
public void disableVirtWhenVmsExist ( ) { createCommandWithGlusterEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createDefaultVdsGroup ( ) ) ; mcr.mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 , java.lang.Boolean.TRUE ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; clusterHasVds ( ) ; clusterHasVMs ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS ) ; }
public void copyDataTo ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.row11Struct other ) { other.var_name = this . var_name ; other.var_datetime = this . var_datetime ; }
public void update ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment entity ) { verifyRelationWithHostNetworkQos ( entity ) ; hostNetworkQosDao.persistQosChanges ( entity.getId ( ) , entity.getHostNetworkQos ( ) ) ; super . update ( entity ) ; }
public void testIsNetworkInSyncWhenIpv4StaticBootProtocolAddressDifferent ( ) { initIpv4ConfigurationBootProtocolAddress ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL , false ) ; iface.setIpv4BootProtocol ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.forValue ( ( ( ( org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterfaceTest.IPV4_BOOT_PROTOCOL.getValue ( ) ) + 1 ) % ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.values ( ) . length ) ) ) ) ; org.hamcrest.MatcherAssert.assertThat ( createTestedInstance ( ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage_domains createDomain ( org.ovirt.engine.core.common.businessentities.storage_domain_static staticPart ) { org.ovirt.engine.core.common.businessentities.storage_domains result = null ; if ( staticPart != null ) { org.ovirt.engine.core.common.businessentities.StorageDomainDynamic dynamicPart = dynamicDAO.get ( staticPart.getId ( ) ) ; if ( dynamicPart != null ) { result = new org.ovirt.engine.core.common.businessentities.storage_domains ( ) ; result.setStorageStaticData ( staticPart ) ; result.setStorageDynamicData ( dynamicPart ) ; fillInDetails ( result ) ; } } return result ; }
private boolean isDiskOnBlockDevice ( org.ovirt.engine.core.common.businessentities.Disk disk ) { if ( disk instanceof org.ovirt.engine.core.common.businessentities.DiskImage ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageType > diskStorageTypes = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) . getStorageTypes ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageType type : diskStorageTypes ) { if ( ! ( type.isBlockDomain ( ) ) ) { return false ; } } return true ; } return false ; }
protected void executeCommand ( ) { if ( shouldSkipCommandExecutionCached ( ) ) { org.ovirt.engine.core.bll.VmCommand.setSucceeded ( true ) ; return ; } executeVmCommand ( ) ; if ( ( ( shouldUpdateHostedEngineOvf ( ) ) && ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . isHostedEngine ( ) ) ) && ( org.ovirt.engine.core.bll.VmCommand.getSucceeded ( ) ) ) { updateHeOvf ( ) ; } }
protected void RunCommands ( ) { for ( org.ovirt.engine.core.bll.CommandBase < ? > command : getCommands ( ) ) { if ( command.getReturnValue ( ) . getCanDoAction ( ) ) { executeValidatedCommand ( command ) ; } } }
protected org.ovirt.engine.core.common.businessentities.DbUser getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.DbUser entity = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setExternalId ( EXTERNAL_IDS [ index ] ) ; entity.setFirstName ( NAMES [ index ] ) ; entity.setGroupNames ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.GROUPS ) ; entity.setDomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; return entity ; }
public void onSuccess ( java.lang.Object model1 , java.lang.Object result1 ) { getProfile ( ) . setItems ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ) ( result1 ) ) ) ; profileBehavior.initSelectedProfile ( getProfile ( ) , getNic ( ) ) ; updateProfileChangability ( ) ; okCommand.setIsExecutionAllowed ( true ) ; initSelectedType ( ) ; }
public static void enableLoadBalancer ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start scheduling to enable vds load balancer" ) ; org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . scheduleAFixedDelayJob ( org.ovirt.engine.core.bll.scheduling.SchedulingManager.instance , "performLoadBalancing" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingeIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingeIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished scheduling to enable vds load balancer" ) ; } }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareLocalStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain localDomain = createDataStorageDomain ( status , name , LOCAL_SD_ID ) ; localDomain.setStorageType ( StorageType.LOCALFS ) ; org.mockito.Mockito.when ( storageDomainDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( localDomain ) ) ; cmd.setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return localDomain ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { org.ovirt.engine.core.common.eventqueue.EventResult result = null ; if ( _domainsInProblem.containsKey ( domainId ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info ( ( "starting processDomainRecovery for domain " + ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData.getDomainIdTuple ( domainId ) ) ) ) ; result = processDomainRecovery ( domainId ) ; } _timers.remove ( domainId ) ; return result ; }
public void testGetDeviceListWithNoDeviceList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > deviceList = new java.util.LinkedList ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ) ) ; org.mockito.Mockito.doReturn ( deviceList ) . when ( command ) . runGetDeviceList ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( deviceList , command.getDeviceList ( ) ) ; }
private void endCommand ( ) { if ( org.ovirt.engine.core.bll.RemoveImageCommand.getParameters ( ) . getRemoveFromDB ( ) ) { removeImageFromDB ( true ) ; } else { org.ovirt.engine.core.bll.RemoveImageCommand.getImageStorageDomainMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.image_storage_domain_map_id ( org.ovirt.engine.core.bll.RemoveImageCommand.getParameters ( ) . getImageId ( ) , org.ovirt.engine.core.bll.RemoveImageCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ; org.ovirt.engine.core.bll.RemoveImageCommand.unLockImage ( ) ; } org.ovirt.engine.core.bll.RemoveImageCommand.setSucceeded ( true ) ; }
public static java.lang.String map ( org.ovirt.engine.api.model.StorageDomainType storageDomainType , java.lang.String template ) { switch ( storageDomainType ) { case Master : return StorageDomainType.DATA.value ( ) ; case Data : return StorageDomainType.DATA.value ( ) ; case ISO : return StorageDomainType.ISO.value ( ) ; case ImportExport : return StorageDomainType.EXPORT.value ( ) ; case Image : return StorageDomainType.IMAGE.value ( ) ; case Volume : return StorageDomainType.VOLUME.value ( ) ; case Unknown : default : return null ; } }
private org.ovirt.engine.core.bll.ValidationResult validateRequiredSpace ( java.lang.Long availableSize , double requiredSize ) { if ( ( availableSize == null ) || ( ( availableSize.doubleValue ( ) ) >= requiredSize ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN , storageName ( ) ) ; }
public java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getForDisk ( org.ovirt.engine.core.compat.Guid id ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > result = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ; java.util.List < org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMWithPlugInfo > vms = getVmsWithPlugInfo ( id ) ; for ( org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMWithPlugInfo vm : vms ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( vm.isPlugged ( ) , vm.getVM ( ) , result ) ; } return result ; }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveAuditLogById , org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters.class , new java.lang.String [ ] { "AuditLogId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendEventResourceTest.LOG_IDS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public static void getStorageDomainById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull ( ) { return ( ( vnicProfile.getNetworkQosId ( ) ) == null ) || ( ( getDbFacade ( ) . getNetworkQosDao ( ) . get ( vnicProfile.getNetworkQosId ( ) ) ) != null ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS ) ; }
protected void verifyCollection ( java.util.List < R > collection ) throws java.lang.Exception { super . verifyCollection ( collection ) ; java.util.List < java.lang.String > populateHeader = httpHeaders.getRequestHeader ( BackendResource.POPULATE ) ; boolean populated = ( populateHeader != null ) ? populateHeader.contains ( "true" ) : false ; for ( R template : collection ) { org.junit.Assert.assertTrue ( ( populated ? template.isSetConsole ( ) : ! ( template.isSetConsole ( ) ) ) ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( getClass ( ) ) != ( obj.getClass ( ) ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmPoolMap other = ( ( org.ovirt.engine.core.common.businessentities.VmPoolMap ) ( obj ) ) ; return ( java.util.Objects.equals ( vmId , other.vmId ) ) && ( java.util.Objects.equals ( vmPoolId , other.vmPoolId ) ) ; }
public java.util.List < java.lang.String > addMacs ( java.util.List < java.lang.String > macs ) { java.util.List < java.lang.String > notAddedMacs = new java.util.ArrayList < > ( macs.size ( ) ) ; for ( java.lang.String mac : macs ) { if ( ! ( addMac ( mac ) ) ) { notAddedMacs.add ( mac ) ; } } return notAddedMacs ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc extend_image_ticket ( java.lang.String ticketId , long timeout ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.extend_image_ticket ( ticketId , timeout ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter.getcompatibility_version ( ) . getValue ( ) ) ) ) ; if ( getIsShareable ( ) . getIsChangable ( ) ) { getIsShareable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.shareableDiskNotSupported ( ) ) ; getIsShareable ( ) . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled ( ) ) ) ) ; } }
public void testValidateWithAttachedStorageDomainAndNoFormat ( ) { storageDomain.setStorageType ( StorageType.NFS ) ; storageDomain.setStorageDomainType ( StorageDomainType.Data ) ; org.mockito.Mockito.doReturn ( java.lang.Boolean.TRUE ) . when ( command ) . isStorageDomainAttached ( storageDomain ) ; command.getParameters ( ) . setDoFormat ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
private void addInterfaceToDb ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmNetworkInterface ) { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; dbFacade.getVmNetworkInterfaceDAO ( ) . save ( vmNetworkInterface ) ; org.ovirt.engine.core.bll.AddVmInterfaceCommand.getCompensationContext ( ) . snapshotNewEntity ( vmNetworkInterface ) ; dbFacade.getVmNetworkStatisticsDAO ( ) . save ( vmNetworkInterface.getStatistics ( ) ) ; org.ovirt.engine.core.bll.AddVmInterfaceCommand.getCompensationContext ( ) . snapshotNewEntity ( vmNetworkInterface.getStatistics ( ) ) ; }
private void setUpGetEntityExpectations ( org.ovirt.engine.core.compat.Guid entityId , java.lang.Boolean returnNull ) throws java.lang.Exception { org.ovirt.engine.api.model.Role role = null ; if ( ! returnNull ) { role = new org.ovirt.engine.api.model.Role ( ) ; role.setId ( entityId ) ; } setUpGetEntityExpectations ( VdcQueryType.GetRoleById , org.ovirt.engine.core.common.queries.MultilevelAdministrationByRoleIdParameters.class , new java.lang.String [ ] { "RoleId" } , new java.lang.Object [ ] { entityId } , role ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { if ( getSucceeded ( ) ) { return org.ovirt.engine.core.common.AuditLogType.MAC_POOL_EDIT_SUCCESS ; } else { return org.ovirt.engine.core.common.AuditLogType.MAC_POOL_EDIT_FAILED ; } }
public void getEngineSshPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetEngineSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( "IsAvailable" . equals ( ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ) ) { getView ( ) . setAgentTabVisibility ( model.getNeutronAgentModel ( ) . getIsAvailable ( ) ) ; } }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
private static org.ovirt.engine.core.common.businessentities.VM createVM ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setName ( "test-vm" ) ; vm.setOrigin ( OriginType.OVIRT ) ; vm.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vm.setVmDescription ( "test-description" ) ; vm.getStaticData ( ) . setDomain ( "domain_name" ) ; vm.setTimeZone ( "Israel Standard Time" ) ; vm.setDbGeneration ( 2L ) ; vm.setSingleQxlPci ( false ) ; vm.setClusterArch ( ArchitectureType.x86_64 ) ; org.ovirt.engine.core.utils.ovf.OvfManagerTest.initInterfaces ( vm ) ; return vm ; }
public void setup ( ) { org.ovirt.engine.core.CommandMocks.mockDbFacade ( cmd , dbFacade ) ; org.mockito.Mockito.when ( dbFacade.getStoragePoolDao ( ) ) . thenReturn ( storagePoolDAO ) ; org.mockito.Mockito.when ( dbFacade.getStorageDomainDao ( ) ) . thenReturn ( storageDomainDAO ) ; org.mockito.Mockito.doReturn ( eventQueue ) . when ( cmd ) . getEventQueue ( ) ; }
public javax.ws.rs.core.Response toResponse ( org.ovirt.engine.api.restapi.utils.MalformedIdException exception ) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error ( "Malformed id detected while processing \"{}\" request for path \"{}\"" , request.getMethod ( ) , uriInfo.getPath ( ) ) ; org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error ( "Exception" , exception ) ; return javax.ws.rs.core.Response.status ( Status.BAD_REQUEST ) . entity ( exception.getCause ( ) . getMessage ( ) ) . build ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( sender == ( getPlugged ( ) ) ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs propArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( propArgs.propertyName.equals ( "Entity" ) ) { onPlugChange ( ) ; } } }
void addTab ( com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.RequestTabsHandler > requestTabsEventType , com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.ChangeTabHandler > changeTabEventType , com.google.gwt.event.shared.GwtEvent.Type < com.gwtplatform.mvp.client.proxy.RevealContentHandler < ? > > slot , java.lang.String label , java.lang.String historyToken , boolean isMainTab , java.lang.String contentUrl , org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options ) { dynamicUrlContentTabProxyFactory.create ( requestTabsEventType , changeTabEventType , slot , label , historyToken , isMainTab , contentUrl , ( options.getAlignRight ( ) ? org.ovirt.engine.ui.common.widget.Align.RIGHT : org.ovirt.engine.ui.common.widget.Align.LEFT ) ) ; org.ovirt.engine.ui.common.presenter.RedrawDynamicTabContainerEvent.fire ( this , requestTabsEventType ) ; }
public void create ( ) { log.info ( "oVirt optimizer service starting" ) ; threads = new java.util.HashSet < > ( ) ; int refresh = java.lang.Integer.valueOf ( configProvider.load ( ) . getConfig ( ) . getProperty ( ConfigProvider.SOLVER_CLUSTER_REFRESH ) ) ; discoveryTimer = scheduler.createTimer ( refresh , org.ovirt.optimizer.service.DiscoveryTimeout.class ) ; }
public void moveShareableDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setShareable ( true ) ; initializeCommand ( diskImage , VmEntityType.VM ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; }
public static org.ovirt.engine.core.bll.CommandBase < ? > buildCommand ( org.ovirt.engine.core.common.action.ActionType actionType , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.bll.job.ExecutionContext executionContext , org.ovirt.engine.core.compat.CommandStatus cmdStatus ) { org.ovirt.engine.core.bll.job.ExecutionContext cmdExecutionContext = ( executionContext == null ) ? new org.ovirt.engine.core.bll.job.ExecutionContext ( ) : executionContext ; org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters , new org.ovirt.engine.core.bll.context.CommandContext ( new org.ovirt.engine.core.bll.context.EngineContext ( ) ) . withExecutionContext ( cmdExecutionContext ) ) ; command.setCommandStatus ( cmdStatus , false ) ; return command ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.FencingPolicy ) ) { return false ; } org.ovirt.engine.core.common.businessentities.FencingPolicy other = ( ( org.ovirt.engine.core.common.businessentities.FencingPolicy ) ( obj ) ) ; return ( ( ( skipFencingIfSDActive ) == ( other.skipFencingIfSDActive ) ) && ( ( skipFencingIfConnectivityBroken ) == ( other.skipFencingIfConnectivityBroken ) ) ) && ( ( hostsWithBrokenConnectivityThreshold ) == ( other.hostsWithBrokenConnectivityThreshold ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRemovingUsedPool ( ) { final org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDao = getDbFacade ( ) . getStoragePoolDao ( ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters = storagePoolDao.getAllDataCentersByMacPoolId ( macPool.getId ( ) ) ; final java.util.Collection < java.lang.String > replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable ( "DATACENTERS_USING_MAC_POOL" , dataCenters ) ; replacements.add ( VdcBllMessages.VAR__ENTITIES__DATA_CENTERS.name ( ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL , replacements.toArray ( new java.lang.String [ 0 ] ) ) . when ( ( ( dataCenters.size ( ) ) != 0 ) ) ; }
private void generateCode ( org.ovirt.engine.sdk.codegen.utils.Tree < org.ovirt.engine.sdk.codegen.rsdl.Location > tree ) { if ( org.ovirt.engine.sdk.codegen.rsdl.LocationRules.isEntity ( tree ) ) { if ( org.ovirt.engine.sdk.codegen.rsdl.LocationRules.isSubEntity ( tree ) ) { addSubResource ( tree ) ; } else { addResource ( tree ) ; } } else if ( org.ovirt.engine.sdk.codegen.rsdl.LocationRules.isCollection ( tree ) ) { if ( org.ovirt.engine.sdk.codegen.rsdl.LocationRules.isSubCollection ( tree ) ) { addSubCollection ( tree ) ; } else { addCollection ( tree ) ; } } }
public java.lang.Void runInTransaction ( ) { if ( ( isNameChanged ( ) ) || ( isDescriptionChanged ( ) ) ) { getDbFacade ( ) . getIscsiBondDao ( ) . update ( getIscsiBond ( ) ) ; } removedNetworks = updateNetworksIds ( ) ; updateConnectionsIds ( ) ; return null ; }
protected java.lang.String getIconToShow ( java.lang.String currentOsDefaultIcon ) { if ( ( getIcon ( ) . getEntity ( ) ) == null ) { return currentOsDefaultIcon ; } return getIcon ( ) . getEntity ( ) . isCustom ( ) ? getIcon ( ) . getEntity ( ) . getIcon ( ) : currentOsDefaultIcon ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment model = createIncompleteNetworkAttachment ( ) ; setUriInfo ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest.setUpBasicUriExpectations ( ) ) ; setUpVerifyHostExpectations ( ) ; control.replay ( ) ; try { collection.add ( model ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNetworkAttachmentsResourceTest.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "NetworkAttachment" , "add" , getIncompleteFields ( ) ) ; } }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
protected void setUpGetHostByNameExpectations ( int idx ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations ( org.mockito.Mockito.spy ( new org.ovirt.engine.core.common.businessentities.VDS ( ) ) , idx ) ; setUpGetEntityExpectations ( QueryType.GetVdsByName , org.ovirt.engine.core.common.queries.NameQueryParameters.class , new java.lang.String [ ] { "Name" } , new java.lang.Object [ ] { NAMES [ idx ] } , host ) ; }
public void testMoveBySdId ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , getEntity ( 1 ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.MoveDisks , org.ovirt.engine.core.common.action.MoveDisksParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } ) ) ; verifyActionResponse ( resource.move ( setUpMoveParams ( false ) ) ) ; }
private < T > void maybeSetEntity ( org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > listModel , T value ) { if ( ( ( listModel != null ) && ( listModel.getIsChangable ( ) ) ) && ( listModel.getIsAvailable ( ) ) ) { listModel.setEntity ( value ) ; } }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.quota.QuotaModel object ) { this . model = object ; if ( ! ( firstTime ) ) { registerHandlers ( ) ; firstTime = true ; updateSliders ( ) ; if ( object.isClusterQuota ( ) ) { quotaStoragePanel.setVisible ( false ) ; } else { quotaClusterPanel.setVisible ( false ) ; } } quotaClusterTable.edit ( object.getQuotaClusters ( ) ) ; quotaStorageTable.edit ( object.getQuotaStorages ( ) ) ; org.ovirt.engine.ui.webadmin.section.main.view.popup.quota.QuotaPopupView.Driver.driver.edit ( object ) ; }
public org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getMainModel ( ) { return null ; }
public java.lang.Void runInTransaction ( ) { jobDao.update ( job ) ; stepDao.updateJobStepsCompleted ( job.getId ( ) , job.getStatus ( ) , job.getEndTime ( ) ) ; return null ; }
public void getVmsFromExternalServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.compat.Guid vdsId , java.lang.String url , java.lang.String username , java.lang.String password , org.ovirt.engine.core.common.businessentities.OriginType originType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExternalProvider , new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters ( url , username , password , originType , vdsId , dataCenterId ) , aQuery ) ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.network.Network before = dao.getByNameAndCluster ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 , FixturesTool.CLUSTER ) ; before.setDescription ( "This is a completely changed description" ) ; before.getDnsResolverConfiguration ( ) . getNameServers ( ) . add ( new org.ovirt.engine.core.common.businessentities.network.NameServer ( "1.1.1.1" ) ) ; dao.update ( before ) ; org.ovirt.engine.core.common.businessentities.network.Network after = dao.getByNameAndCluster ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME1 , FixturesTool.CLUSTER ) ; org.junit.jupiter.api.Assertions.assertNotNull ( after ) ; org.junit.jupiter.api.Assertions.assertEquals ( before , after ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( int numOfMonitors , boolean singleQxlPci ) { int heads = ( singleQxlPci ) ? numOfMonitors : 1 ; java.util.Map < java.lang.String , java.lang.Object > specParams = new java.util.HashMap < > ( ) ; specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.HEADS , java.lang.String.valueOf ( heads ) ) ; specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.VRAM , org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.singlePciVRamByHeads ( heads ) ) ; if ( singleQxlPci ) { specParams.put ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.RAM , org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.singlePciRamByHeads ( heads ) ) ; } return specParams ; }
public void mapWatchdog ( ) { org.ovirt.engine.api.model.Watchdog model = new org.ovirt.engine.api.model.Watchdog ( ) ; model.setAction ( WatchdogAction.RESET ) ; model.setModel ( WatchdogModel.I6300ESB ) ; model.setId ( Guid.Empty.toString ( ) ) ; org.ovirt.engine.core.common.businessentities.VmWatchdog entity = org.ovirt.engine.api.restapi.types.WatchdogMapper.map ( model , null ) ; org.junit.jupiter.api.Assertions.assertNotNull ( entity ) ; org.junit.jupiter.api.Assertions.assertEquals ( VmWatchdogAction.RESET , entity.getAction ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( VmWatchdogType.i6300esb , entity.getModel ( ) ) ; }
private void editNetworkThreadCompat ( org.ovirt.engine.core.common.vdscommands.NetworkVdsmVDSCommandParameters parameters ) { try { retVal = runVdsCommand ( VDSCommandType.EditNetwork , parameters ) ; editNetworkDone = true ; } catch ( java.lang.RuntimeException e ) { if ( e instanceof org.ovirt.engine.core.common.errors.EngineException ) { org.ovirt.engine.core.bll.network.host.UpdateNetworkToVdsInterfaceCommand.getReturnValue ( ) . setFault ( new org.ovirt.engine.core.common.errors.EngineFault ( e , ( ( org.ovirt.engine.core.common.errors.EngineException ) ( e ) ) . getVdsError ( ) . getCode ( ) ) ) ; } } catch ( java.lang.Exception e ) { } finally { editNetworkThreadFinish = true ; } }
public void onSuccess ( org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Succesful returned result from Logoff." ) ; callback.asyncCallback.OnSuccess ( callback.getModel ( ) , result ) ; if ( ( org.ovirt.engine.ui.frontend.Frontend.getLoginHandler ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler ( ) . onLogout ( ) ; } }
private com.google.gwt.user.client.ui.HTML createInterfaceLabel ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { boolean hasLabels = ( ( iface.getLabels ( ) ) != null ) && ( ! ( iface.getLabels ( ) . isEmpty ( ) ) ) ; com.google.gwt.user.client.ui.HTML interfaceNameWithLabel = new com.google.gwt.user.client.ui.HTML ( ( hasLabels ? org.ovirt.engine.ui.webadmin.widget.host.InterfaceLabel.templates.textImageLabels ( iface.getName ( ) , org.ovirt.engine.ui.webadmin.widget.host.InterfaceLabel.labelImage ) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString ( iface.getName ( ) ) ) ) ; return interfaceNameWithLabel ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByIds ( java.util.List < org.ovirt.engine.core.compat.Guid > storageIds , java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { return org.ovirt.engine.ui.uicommonweb.Linq.where ( storageDomains , new org.ovirt.engine.ui.uicommonweb.Linq.IdsPredicate ( storageIds ) ) ; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask createTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters taskParameters ) { return coCoAsyncTaskHelper.createTask ( taskType , taskParameters ) ; }
public void testActionsInList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpActionsUriExpectations ( ) ; setGetVdsQueryExpectations ( 1 ) ; setGetNetworksQueryExpectations ( 1 ) ; setUpQueryExpectations ( "" ) ; collection.setUriInfo ( uriInfo ) ; verifyActions ( collection.list ( ) ) ; }
public static void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private java.lang.String prepareEntityNamesForMessage ( java.util.List < java.lang.String > entityNames ) { return org.apache.commons.lang.StringUtils.join ( entityNames , "," ) ; }
public void generateVersion ( ) { java.lang.String moduleName = rubyNames.getModuleName ( ) ; java.lang.String version = rubyNames.getVersion ( ) ; buffer.beginModule ( moduleName ) ; buffer.addLine ( "VERSION = '%1$s'.freeze" , version.toLowerCase ( ) ) ; buffer.endModule ( moduleName ) ; }
public void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
public void testRefreshUserSession ( ) { initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container.cleanExpiredUsersSessions ( ) ; container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , true ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return null since the session wasn't refresh" , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateRequiredSpace ( java.lang.Long availableSize , double requiredSize ) { if ( ( availableSize == null ) || ( ( availableSize.doubleValue ( ) ) >= requiredSize ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN , storageName ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult qosExistsInDc ( ) { org.ovirt.engine.core.bll.validator.NetworkQosValidator qosValidator = new org.ovirt.engine.core.bll.validator.NetworkQosValidator ( getDbFacade ( ) . getNetworkQosDao ( ) . get ( network.getQosId ( ) ) ) ; org.ovirt.engine.core.bll.ValidationResult res = qosValidator.qosExists ( ) ; return res == ( org.ovirt.engine.core.bll.ValidationResult.VALID ) ? qosValidator.consistentDataCenter ( ) : res ; }
public void testRemoveVmsFromExistingAffinityGroup ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup existing = dao.get ( FixturesTool.EXISTING_AFFINITY_GROUP_ID ) ; org.junit.Assert.assertFalse ( existing.getVmEntityNames ( ) . isEmpty ( ) ) ; existing.getVmIds ( ) . clear ( ) ; dao.update ( existing ) ; org.ovirt.engine.core.common.scheduling.AffinityGroup fetched = dao.get ( existing.getId ( ) ) ; org.junit.Assert.assertTrue ( fetched.getVmEntityNames ( ) . isEmpty ( ) ) ; }
public void getVMsWithVNumaNodesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid clusterId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmsWithNumaByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , asyncQuery ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper ( org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret entity ) { return createIdParameterMapper ( entity.getId ( ) ) . addValue ( "secret_value" , org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.encryptPassword ( entity.getValue ( ) ) ) . addValue ( "secret_usage_type" , entity.getUsageType ( ) ) . addValue ( "secret_description" , entity.getDescription ( ) ) . addValue ( "provider_id" , entity.getProviderId ( ) ) . addValue ( "_create_date" , entity.getCreationDate ( ) ) ; }
public void testExistingPassDiscardFunctionalityIsNotPreservedSdDiscardSupportBreaks ( ) { storageDomain.setSupportsDiscard ( true ) ; createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( false , true ) ; org.junit.Assert.assertFalse ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 0L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
protected void updateIsHotPlugAvailable ( ) { if ( ( getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; org.ovirt.engine.core.compat.Version clusterCompatibilityVersion = ( ( vm.getVdsGroupCompatibilityVersion ( ) ) != null ) ? vm.getVdsGroupCompatibilityVersion ( ) : new org.ovirt.engine.core.compat.Version ( ) ; isHotPlugSupported = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted ( ConfigurationValues.HotPlugEnabled , clusterCompatibilityVersion.toString ( ) ) ) ) ; }
private boolean serverExists ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > serversList , org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo glusterServer ) { for ( org.ovirt.engine.core.common.businessentities.VDS server : serversList ) { java.lang.String serverHostnameOrIp = ( server.getHostName ( ) . isEmpty ( ) ) ? server.getManagmentIp ( ) : server.getHostName ( ) ; if ( serverHostnameOrIp.equalsIgnoreCase ( glusterServer.getHostnameOrIp ( ) ) ) { return true ; } } return false ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > mapHosts ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost > foremanHosts ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( foremanHosts.size ( ) ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost host : foremanHosts ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setVdsName ( host.getName ( ) ) ; vds.setHostName ( host.getIp ( ) ) ; hosts.add ( vds ) ; } return hosts ; }
public void testHotsetUpdateableWhenHotsetRequestedWithStatus ( ) { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker ( org.ovirt.engine.core.utils.Jedi.class ) ; oic.addField ( VMStatus.Down , "name" ) ; oic.addHotsetField ( "name" , java.util.EnumSet.of ( VMStatus.Up ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( oic.isFieldUpdatable ( VMStatus.Down , "name" , null , true ) , "hot set requested for hot set fields should be true" ) ; }
protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration ( ) { return super . createWidgetConfiguration ( ) . update ( numOfVmsEditor , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( newPoolEditVmsPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( newPoolEditMaxAssignedVmsPerUserPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.hiddenField ( ) ) . update ( editPoolEditVmsPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.simpleField ( ) ) . update ( editPoolIncraseNumOfVmsPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.simpleField ( ) ) . update ( editPoolEditMaxAssignedVmsPerUserPanel , org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig.simpleField ( ) ) ; }
private void send ( org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response , java.lang.String method ) { if ( org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.isDebugEnabled ( ) ) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.debug ( ( ( ( "Request is " + method ) + " got response " ) + ( new java.lang.String ( response.toByteArray ( ) ) ) ) ) ; } try { client.sendMessage ( response.toByteArray ( ) ) ; } catch ( org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e ) { org.ovirt.vdsmfake.rpc.json.JsonRpcServer.log.error ( "Error in sending" , e ) ; client.close ( ) ; } }
public int getavailableMacsCount ( ) { org.ovirt.engine.core.bll.network.MacPoolManager.log.infoFormat ( "MacPoolManager::getAvailableMacsCount - entered" ) ; lockObj.readLock ( ) . lock ( ) ; try { if ( ! ( initialized ) ) { logInitializationError ( "Failed to get available Macs count." ) ; throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NOT_INITIALIZED ) ; } int availableMacsSize = availableMacs.size ( ) ; org.ovirt.engine.core.bll.network.MacPoolManager.log.infoFormat ( "MacPoolManager:: AvailableMacsCount = {0}" , availableMacsSize ) ; return availableMacsSize ; } finally { lockObj.readLock ( ) . unlock ( ) ; } }
protected java.util.List < org.ovirt.engine.api.restapi.resource.VM > setUpVms ( boolean notFound ) { java.util.List < org.ovirt.engine.api.restapi.resource.VM > ret = new java.util.ArrayList < org.ovirt.engine.api.restapi.resource.VM > ( ) ; if ( notFound ) { return ret ; } for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { ret.add ( getEntity ( i ) ) ; } return ret ; }
protected void endWithFailure ( ) { if ( isVmRunningStateless ( ) ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , buildCreateSnapshotParametersForEndAction ( ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getCompensationContext ( ) ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . endWithFailure ( ) ; } }
private void prepareMocks ( ) { vdsBrokerFrontendMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.interfaces.VDSBrokerFrontend.class ) ; org.mockito.Mockito.doReturn ( vdsBrokerFrontendMock ) . when ( getQuery ( ) ) . getVdsBroker ( ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionDao ( ) ) . thenReturn ( storageServerConnectionDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionLunMapDao ( ) ) . thenReturn ( storageServerConnectionLunMapDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getLunDao ( ) ) . thenReturn ( lunDao ) ; }
public void setModel ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model ) { this . model = model ; setupDefaultVmStyles ( ) ; getView ( ) . updateRunButton ( getRunCommand ( ) , model.isPool ( ) ) ; getView ( ) . updateShutdownButton ( getShutdownCommand ( ) ) ; getView ( ) . updateSuspendButton ( getSuspendCommand ( ) ) ; getView ( ) . updateRebootButton ( getRebootCommand ( ) ) ; getView ( ) . edit ( model ) ; if ( sameEntity ( listModel.getSelectedItem ( ) , model ) ) { setSelectedItem ( ) ; } }
public void render ( org.ovirt.engine.ui.common.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { sb.appendHtmlConstant ( ( ( ( ( "<span id=\"" + ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createTableCellElementId ( elementIdPrefix , columnId , context ) ) ) + "\" style=\"vertical-align: middle;\" title=\"" ) + ( com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape ( getTitle ( value ) ) ) ) + "\">" ) ) ; sb.append ( imageHtml ) ; sb.appendHtmlConstant ( "</span>" ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public static boolean canRemoveVmFromPool ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > messages ) { boolean returnValue = true ; if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDAO ( ) . getVmPoolMapByVmGuid ( vmId ) ) == null ) { messages.add ( VdcBllMessages.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL.toString ( ) ) ; returnValue = false ; } if ( returnValue ) { if ( org.ovirt.engine.core.bll.RemoveVmCommand.IsVmRunning ( vmId ) ) { messages.add ( VdcBllMessages.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL.toString ( ) ) ; returnValue = false ; } } return returnValue ; }
com.google.gwt.safehtml.shared.SafeHtml getRenderedValue ( com.google.gwt.safehtml.shared.SafeHtml value ) { java.lang.String result = value.asString ( ) ; if ( ( ( maxTextLength ) > 0 ) && ( ( result.length ( ) ) > ( maxTextLength ) ) ) { result = result.substring ( 0 , java.lang.Math.max ( ( ( maxTextLength ) - ( org.ovirt.engine.ui.common.widget.table.column.TextCellWithTooltip.TOO_LONG_TEXT_POSTFIX.length ( ) ) ) , 0 ) ) ; result = result + ( org.ovirt.engine.ui.common.widget.table.column.TextCellWithTooltip.TOO_LONG_TEXT_POSTFIX ) ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( result ) ; }
protected final void endVmTemplateRelatedOps ( ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) ; org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) , true ) ; incrementDbGeneration ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId ( ) ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full endAction" ) ; } }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { headerLabel.setText ( constants.loginHeaderLabel ( ) ) ; userNameLabel.setText ( constants.loginFormUserNameLabel ( ) ) ; passwordLabel.setText ( constants.loginFormPasswordLabel ( ) ) ; domainLabel.setText ( constants.loginFormDomainLabel ( ) ) ; loginButton.setLabel ( constants.loginButtonLabel ( ) ) ; }
public java.util.List < java.security.cert.Certificate > getPeerCertificates ( ) { try { javax.net.ssl.SSLSession sslSession = nioEngine.getSSLEngine ( ) . getSession ( ) ; if ( ( sslSession == null ) || ( ! ( sslSession.isValid ( ) ) ) ) { throw new java.lang.IllegalStateException ( "SSL session is invalid" ) ; } return java.util.Arrays.asList ( sslSession.getPeerCertificates ( ) ) ; } catch ( javax.net.ssl.SSLPeerUnverifiedException e ) { org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.logException ( org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient.log , "Failed to get peer certificates" , e ) ; } return null ; }
public static java.lang.String map ( org.ovirt.engine.api.model.NfsVersion version , java.lang.String outgoing ) { switch ( version ) { case V3 : return NfsVersion.V3.value ( ) ; case V4 : return NfsVersion.V4.value ( ) ; case V4_1 : return NfsVersion.V4_1.value ( ) ; case AUTO : return NfsVersion.AUTO.value ( ) ; default : return null ; } }
public void testDelay ( ) throws java.lang.Throwable { org.ovirt.engine.core.uutils.ssh.SSHDialogTest.ReaderSink sink = new org.ovirt.engine.core.uutils.ssh.SSHDialogTest.ReaderSink ( 10 ) ; sshDialog.setSoftTimeout ( ( 60 * 1000 ) ) ; sshDialog.setHardTimeout ( ( 60 * 1000 ) ) ; sshDialog.connect ( ) ; sshDialog.authenticate ( ) ; sshDialog.executeCommand ( sink , "x=0;while [ $x -lt 100 ]; do echo line$x; x=$(($x+1)); done" , null ) ; sink.exception ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( "line99" , sink.getLast ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue response ) { if ( response.getSucceeded ( ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > checkedLuns = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( response.getReturnValue ( ) ) ) ; postGetLunsMessages ( sanStorageModelBase.getUsedLunsMessages ( checkedLuns ) ) ; } else { sanStorageModelBase.setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . couldNotRetrieveLUNsLunsFailure ( ) ) ; } }
public void testGetAllForProvider ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > result = dao.getAllForProvider ( FixturesTool.PROVIDER_ID ) ; org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : result ) { org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.PROVIDER_ID , network.getProvidedBy ( ) . getProviderId ( ) ) ; } }
private void AddDiskUpdateData ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVmDiskList ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmGuideModel vmGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; vmGuideModel.disks = disks ; vmGuideModel.AddDiskPostData ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }
public void create10GBVmWith11GbAvailableAndA5GbBuffer ( ) throws java.lang.Exception { mockStorageDomainDaoGetForStoragePool ( ) ; mockMaxPciSlots ( ) ; mockStorageDomainDaoGetAllForStoragePool ( ) ; mockUninterestingMethods ( ) ; mockGetAllSnapshots ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( storageDomainValidator ) . isDomainWithinThresholds ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( storageDomainValidator ) . hasSpaceForClonedDisks ( org.mockito.ArgumentMatchers.anyList ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc freeze ( java.lang.String vmId ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.freeze ( vmId ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void postOnCreateVolume ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume ) { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel ) ( getWindow ( ) ) ) ; model.stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; if ( ( ( java.lang.Boolean ) ( model.getOptimizeForVirtStore ( ) . getEntity ( ) ) ) ) { optimizeVolumesForVirtStore ( java.util.Arrays.asList ( volume ) ) ; } } }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.DbUser user ) { if ( user.isAdmin ( ) ) { return getApplicationResources ( ) . adminImage ( ) ; } if ( user.isGroup ( ) ) { return getApplicationResources ( ) . userGroupImage ( ) ; } return getApplicationResources ( ) . userImage ( ) ; }
public void testStorageDomainTemplateLinks ( ) { org.ovirt.engine.api.model.Template template = new org.ovirt.engine.api.model.Template ( ) ; template.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.TEMPLATE_ID ) ; template.setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain ( ) ) ; template.getStorageDomain ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; template = org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( template ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_TEMPLATE_HREF , template.getHref ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , template.getStorageDomain ( ) . getHref ( ) ) ; }
private void disableAllTabs ( ) { generalTab.disableContent ( ) ; poolTab.disableContent ( ) ; initialRunTab.disableContent ( ) ; consoleTab.disableContent ( ) ; hostTab.disableContent ( ) ; highAvailabilityTab.disableContent ( ) ; resourceAllocationTab.disableContent ( ) ; bootOptionsTab.disableContent ( ) ; customPropertiesTab.disableContent ( ) ; systemTab.disableContent ( ) ; oSTypeEditor.setEnabled ( false ) ; }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public static void handleCustomPropertiesError ( java.util.List < org.ovirt.engine.core.utils.customprop.CustomPropertiesUtils.ValidationError > validationErrors , java.util.List < java.lang.String > message ) { java.lang.String invalidSyntaxMsg = VdcBllMessages.ACTION_TYPE_FAILED_INVALID_CUSTOM_VM_PROPERTIES_INVALID_SYNTAX.name ( ) ; java.util.List < java.lang.String > errorMessages = org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance ( ) . generateErrorMessages ( validationErrors , invalidSyntaxMsg , org.ovirt.engine.core.bll.VmHandler.failureReasonsToVdcBllMessagesMap , org.ovirt.engine.core.bll.VmHandler.failureReasonsToFormatMessages ) ; message.addAll ( errorMessages ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.compat.Guid storagePoolId = org.ovirt.engine.core.bll.storage.domain.GetStorageDomainsByConnectionQuery.getParameters ( ) . getStoragePoolId ( ) ; java.lang.String connection = org.ovirt.engine.core.bll.storage.domain.GetStorageDomainsByConnectionQuery.getParameters ( ) . getConnection ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsList ; if ( storagePoolId != null ) { domainsList = storageDomainDao.getAllByStoragePoolAndConnection ( storagePoolId , connection ) ; } else { domainsList = storageDomainDao.getAllForConnection ( connection ) ; } org.ovirt.engine.core.bll.storage.domain.GetStorageDomainsByConnectionQuery.getQueryReturnValue ( ) . setReturnValue ( domainsList ) ; }
private static java.lang.String getRelativePath ( java.lang.Class < ? > clz ) { for ( java.lang.reflect.Method method : org.ovirt.engine.api.resource.SystemResource.class . getMethods ( ) ) { if ( ( method.getReturnType ( ) ) == clz ) { javax.ws.rs.Path annotation = method.getAnnotation ( javax.ws.rs.Path.class ) ; if ( annotation != null ) { return annotation.value ( ) ; } } } org.ovirt.engine.api.restapi.util.LinkHelper.log.error ( ( ( "Can\'t find relative path for class \"" + ( clz.getName ( ) ) ) + "\", will return null" ) ) ; return null ; }
public void setEmulatedMachine ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String emulatedMachine , boolean detectEmulatedMachine ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "cluster_id" , clusterId ) . addValue ( "emulated_machine" , emulatedMachine ) . addValue ( "detect_emulated_machine" , detectEmulatedMachine ) ; getCallsHandler ( ) . executeModification ( "UpdateClusterEmulatedMachine" , parameterSource ) ; }
public static void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private boolean noChangesDetected ( ) { return ( ( ( getNetworksToConfigure ( ) . isEmpty ( ) ) && ( getRemovedNetworks ( ) . isEmpty ( ) ) ) && ( org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getBonds ( ) . isEmpty ( ) ) ) && ( getRemovedBondNames ( ) . isEmpty ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionPause ( java.lang.String masterVolumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionPause" ) . withParameter ( "volumeName" , masterVolumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void delay ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debug ( "Try to wait for te engine update the host memory and cpu stats" ) ; try { long t = java.lang.Math.max ( org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . GetVdsManager ( vdsId ) . getLastUpdateElapsed ( ) , java.util.concurrent.TimeUnit.SECONDS.toMillis ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( org.ovirt.engine.core.common.config.ConfigValues.VdsRefreshRate ) ) ) ; t = java.lang.Math.max ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis ) , t ) ; getBlockingQueue ( vdsId ) . poll ( t , java.util.concurrent.TimeUnit.MILLISECONDS ) ; } catch ( java.lang.InterruptedException e ) { } }
public void testAddIscsiLunDiskIncompleteParametersConnectionAddress ( ) { org.ovirt.engine.api.model.Disk model = createIscsiLunDisk ( ) ; model.getLunStorage ( ) . getLogicalUnits ( ) . getLogicalUnits ( ) . get ( 0 ) . setAddress ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "LogicalUnit" , "testAddIscsiLunDiskIncompleteParametersConnectionAddress" , "address" ) ; } }
protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qosItems = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( getQos ( ) . getItems ( ) ) ; qosItems.add ( 1 , networkQoS ) ; getQos ( ) . setItems ( qosItems ) ; getQos ( ) . setSelectedItem ( networkQoS ) ; } super . postSaveAction ( succeeded ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.CinderProviderSupported , storagePool.getCompatibilityVersion ( ) . toString ( ) ) ) ) ; }
private void executeNewAndEdit ( final org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( getItems ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getVmDiskList ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel > lineModelIterator = orderedDisksIterator ( disks , vm ) ; storeNextDisk ( lineModelIterator , vm ) ; } } ) , vm.getId ( ) ) ; }
protected long getEngineSessionSeqId ( ) { java.lang.String sessionId = getParameters ( ) . getSessionId ( ) ; if ( ( sessionId == null ) && ( ( getContext ( ) ) != null ) ) { sessionId = getContext ( ) . getEngineContext ( ) . getSessionId ( ) ; } if ( sessionId == null ) { throw new java.lang.RuntimeException ( ( "No sessionId found for command " + ( getClass ( ) . getName ( ) ) ) ) ; } return getSessionDataContainer ( ) . getEngineSessionSeqId ( sessionId ) ; }
protected void onSelectedItemChanged ( ) { super . onSelectedItemChanged ( ) ; updateActionAvailability ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedVolume = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( provideDetailModelEntity ( getSelectedItem ( ) ) ) ) ; getBrickListModel ( ) . setVolumeEntity ( selectedVolume ) ; getGeoRepListModel ( ) . setEntity ( selectedVolume ) ; getSnapshotListModel ( ) . setEntity ( selectedVolume ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getMemoryMetadataDisk ( java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues ) { for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue : returnValues ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = returnValue.getActionReturnValue ( ) ; if ( ( disk.getSize ( ) ) == ( org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES ) ) { return disk ; } } return null ; }
public static void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void testAll ( ) throws java.lang.Exception { filter.clearFilterEntries ( ) ; filter.addFilterEntries ( java.util.Collections.singletonList ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.FilterEntry ( "kuku" , false , "snmp" , "pupu" ) ) ) ; filter.addFilterEntries ( java.util.Collections.singletonList ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.FilterEntry ( "kuku" , false , "smtp" , "pupu" ) ) ) ; filter.addFilterEntries ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse ( ( "" + "include:*" ) ) ) ; filter.processEvent ( new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E ( "message1" ) ) ; org.junit.Assert.assertTrue ( snmp.getEvents ( ) . contains ( "message1-->pupu" ) ) ; org.junit.Assert.assertTrue ( smtp.getEvents ( ) . contains ( "message1-->pupu" ) ) ; }
protected void initResource ( org.ovirt.engine.api.restapi.resource.AbstractBackendResource < R , Q > resource ) { resource.setBackend ( backend ) ; resource.setMappingLocator ( mapperLocator ) ; resource.setValidatorLocator ( validatorLocator ) ; resource.setSessionHelper ( sessionHelper ) ; resource.setMessageBundle ( messageBundle ) ; resource.setHttpHeaders ( httpHeaders ) ; }
public void testUpdateStatus ( ) { org.ovirt.engine.core.common.businessentities.VmTemplate before = dao.get ( existingTemplate.getId ( ) ) ; before.setStatus ( VmTemplateStatus.Locked ) ; dao.updateStatus ( existingTemplate.getId ( ) , VmTemplateStatus.Locked ) ; org.ovirt.engine.core.common.businessentities.VmTemplate after = dao.get ( existingTemplate.getId ( ) ) ; org.junit.Assert.assertEquals ( before , after ) ; }
private void testFillRemoteViewerUrl ( java.lang.String toRepalce , java.lang.String baseUrl , java.lang.String resourceUrl , java.lang.String expected ) { org.ovirt.engine.core.common.console.ConsoleOptions options = new org.ovirt.engine.core.common.console.ConsoleOptions ( ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( getValidOptions ( GraphicsType.SPICE ) ) ; getQuery ( ) . fillRemoteViewerUrl ( options , toRepalce , baseUrl , resourceUrl ) ; org.junit.Assert.assertEquals ( expected , options.getRemoteViewerNewerVersionUrl ( ) ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 , false , false , false , false ) ; setUpEntityQueryExpectations ( 1 , true , true , true , true ) ; setUpClusterExpectations ( GUIDS [ 1 ] ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateNetworkOnCluster , org.ovirt.engine.core.common.action.NetworkClusterParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; verifyUpdate ( resource.update ( getModel ( 0 ) ) ) ; }
public java.lang.Void runInTransaction ( ) { RemoveVdsStatisticsFromDb ( ) ; RemoveVdsDynamicFromDb ( ) ; RemoveVdsStaticFromDb ( ) ; return null ; }
protected void executeQueryCommand ( ) { if ( ( org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters ( ) . getIds ( ) ) != null ) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue ( ) . setReturnValue ( vmHandler.getVmInitWithoutPasswordByIds ( org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters ( ) . getIds ( ) ) ) ; } }
public void testConnectionWithInvalidMountOptionsFails ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data1" , StorageType.NFS , "nfs" , "timeo=30" ) ; parameters.setStorageServerConnection ( newPosixConnection ) ; parameters.setVdsId ( Guid.Empty ) ; org.ovirt.engine.core.bll.storage.connection.StorageServerConnectionTestCommon.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY ) ) . when ( command ) . validateMountOptions ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY ) ; }
public void testParseInvalidOption ( ) { java.util.List < org.ovirt.engine.api.model.Agent > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "foo:one=1,two=2,three" , "one=bool,two=int,three=bool" ) ; org.junit.Assert.assertNotNull ( ret ) ; org.junit.Assert.assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" , "one" , "bool" , "1" , "two" , "int" , "2" ) ; }
public void addFilterEntries ( java.util.List < org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.FilterEntry > entries ) { for ( org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.FilterEntry entry : entries ) { org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.log.debug ( "addFilterEntry: {}" , entry ) ; notify.add ( entry ) ; if ( ( entry.getRecipient ( ) ) != null ) { addRecipient ( entry.getRecipient ( ) ) ; } } }
public boolean isPowerManagementEnabledAndLegal ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.Cluster cluster , java.util.List < java.lang.String > messages ) { if ( ! ( ( vds.isPmEnabled ( ) ) && ( isPowerManagementLegal ( vds.getFenceAgents ( ) , cluster , messages ) ) ) ) { messages.add ( EngineMessage.VDS_FENCE_DISABLED.name ( ) ) ; return false ; } else { return true ; } }
protected void verifyLinks ( org.ovirt.engine.api.model.BaseResource model ) { assertNotNull ( model.getHref ( ) ) ; assertTrue ( model.getHref ( ) . startsWith ( "/ovirt-engine/api" ) ) ; for ( org.ovirt.engine.api.model.Link link : model.getLinks ( ) ) { assertTrue ( link.getHref ( ) . startsWith ( "/ovirt-engine/api" ) ) ; } }
private static org.ovirt.engine.api.model.Network getModel ( int index ) { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setId ( GUIDS [ 0 ] . toString ( ) ) ; model.setName ( NAMES [ index ] ) ; model.setDescription ( DESCRIPTIONS [ index ] ) ; return model ; }
protected boolean checkNumberOfMonitors ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphicsTypes = org.ovirt.engine.core.bll.VmHandler.getResultingVmGraphics ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.getGraphicsTypesOfEntity ( org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId ( ) ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getGraphicsDevices ( ) ) ; int numOfMonitors = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getNumOfMonitors ( ) ; return org.ovirt.engine.core.bll.VmHandler.isNumOfMonitorsLegal ( graphicsTypes , numOfMonitors , org.ovirt.engine.core.bll.AddVmCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
public void getHostsForStorageOperation ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean localFsOnly ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostsForStorageOperation , new org.ovirt.engine.core.common.queries.GetHostsForStorageOperationParameters ( storagePoolId , localFsOnly ) , aQuery ) ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
protected void addBootProtocolForRoleNetwork ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic ) { if ( ( org.ovirt.engine.core.utils.NetworkUtils.isRoleNetwork ( networkCluster ) ) && ( ( ( nic.getBootProtocol ( ) ) == null ) || ( ( nic.getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE ) ) ) ) { nic.setBootProtocol ( NetworkBootProtocol.DHCP ) ; } }
public static void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private java.lang.String getInstalledVdsIdIfExists ( org.ovirt.engine.core.bll.utils.EngineSSHClient client ) { try { java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.utils.ssh.ConstraintByteArrayOutputStream ( 256 ) ; client.executeCommand ( org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.GetVdsmIdByVdsmToolCommand ) , null , out , null ) ; return new java.lang.String ( out.toByteArray ( ) , java.nio.charset.Charset.forName ( "UTF-8" ) ) ; } catch ( java.lang.Exception e ) { log.warnFormat ( "Failed to initiate vdsm-id request on host" , e ) ; return null ; } }
protected void saveDiskImageDynamic ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic ( ) ; diskDynamic.setId ( disk.getImageId ( ) ) ; diskDynamic.setactual_size ( disk.getActualSizeInBytes ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.getDiskImageDynamicDAO ( ) . save ( diskDynamic ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage ( ) { if ( ( diskImage ) == null ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = diskDao.get ( org.ovirt.engine.core.bll.storage.repoimage.ExportRepoImageCommand.getParameters ( ) . getImageGroupID ( ) ) ; if ( ( disk != null ) && ( ( disk.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) ) { diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; } } return diskImage ; }
private void createNetworkAttachmentForReportedNetworksNotHavingOne ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; networkAttachment.setNetworkId ( clusterNetworks.get ( networkName ) . getId ( ) ) ; org.ovirt.engine.core.compat.Guid nicId = getBaseInterfaceNicOrThis ( nic ) . getId ( ) ; networkAttachment.setNicId ( nicId ) ; networkAttachment.setProperties ( nic.getCustomProperties ( ) ) ; networkAttachment.setIpConfiguration ( createIpConfigurationFromVdsNetworkInterface ( nic ) ) ; networkAttachmentDao.save ( networkAttachment ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpManagementNetworkExpectation ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVdsGroup , org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; final org.ovirt.engine.api.model.Cluster updatedCluster = resource.update ( org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel ( 0 ) ) ; verifyModel ( updatedCluster , 0 ) ; verifyManagementNetwork ( updatedCluster ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.ActionGroup > returnValue ) { setEngineUserActionGroupList ( returnValue ) ; getEngineUserActionGroupList ( ) . add ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel.ConsumeQuotaActionGroup ) ; getUserRoles ( ) ; }
public void externalVMWhenMissingInDb ( org.ovirt.engine.core.vdsbroker.VmTestPairs data ) { initMocks ( data , false ) ; mockVmStatic ( false ) ; mockVmNotInDb ( data ) ; org.junit.Assume.assumeTrue ( ( ( data.dbVm ( ) ) == null ) ) ; org.junit.Assume.assumeTrue ( ( ( data.vdsmVm ( ) ) != null ) ) ; vmAnalyzer.analyze ( ) ; org.junit.Assert.assertTrue ( vmAnalyzer.isExternalVm ( ) ) ; }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot ) { org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getImageStorageDomainMapDao ( ) . remove ( snapshot.getImageId ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getImageDao ( ) . remove ( snapshot.getImageId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesForDisk = diskImageDao.getAllSnapshotsForImageGroup ( snapshot.getId ( ) ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getBaseDiskDao ( ) . remove ( snapshot.getId ( ) ) ; } }
public static void isMTUOverrideSupported ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MTUOverrideSupported ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
private static org.ovirt.engine.core.common.businessentities.QuotaStorage getSpecificQuotaStorage ( org.ovirt.engine.core.compat.Guid quotaId ) { org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage = new org.ovirt.engine.core.common.businessentities.QuotaStorage ( ) ; quotaStorage.setQuotaId ( quotaId ) ; quotaStorage.setQuotaStorageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; quotaStorage.setStorageId ( FixturesTool.STORAGE_DOMAIN_NFS_MASTER ) ; quotaStorage.setStorageSizeGB ( 10000L ) ; quotaStorage.setStorageSizeGBUsage ( 0.0 ) ; return quotaStorage ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , ipv4Address , ipv6Address , bondName , bondOptions , bondType , bonded , ipv4BootProtocol , ipv6BootProtocol , reportedSwitchType , networkName , bridged , ipv4Gateway , ipv4DefaultRoute , ipv6Gateway , mtu , ipv4Subnet , ipv6Prefix , vdsId , baseInterface , vlanId , qos , labels , adPartnerMac , adAggregatorId ) ; }
private static java.lang.String getDeviceTypeSearchExpr ( org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type , java.lang.String device ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; sb.append ( "type=" ) ; sb.append ( type.getValue ( ) ) ; sb.append ( " device=" ) ; sb.append ( device ) ; sb.append ( " " ) ; return sb.toString ( ) ; }
public org.ovirt.engine.sdk.decorators.VmPool update ( java.lang.String correlationId ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; if ( correlationId != null ) { headersBuilder.add ( "Correlation-Id" , correlationId ) ; } java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.VmPool.class , org.ovirt.engine.sdk.decorators.VmPool.class , headers ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object ) { driver.edit ( object ) ; initLists ( object ) ; object.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.String propName = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( propName.equals ( "IsValid" ) ) { onIsValidPropertyChange ( object ) ; } } } ) ; }
public org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.compat.Guid > , org.ovirt.engine.core.compat.Guid > balance ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.String > parameters , java.util.ArrayList < java.lang.String > messages ) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error ( ( ( "policy unit:" + ( getPolicyUnit ( ) . getName ( ) ) ) + "balance is not implemented" ) ) ; return null ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getDistributedVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getVolume ( volumeId ) ; volume.setStatus ( ( volumeId == ( volumeId1 ) ? org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP : org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN ) ) ; volume.setBricks ( getBricks ( volumeId , "distrib" , 2 ) ) ; volume.setVolumeType ( GlusterVolumeType.DISTRIBUTE ) ; volume.setClusterId ( clusterId ) ; return volume ; }
public static org.ovirt.engine.core.vdsbroker.MonitoringStrategy getMonitoringStrategyForVds ( org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.vdsbroker.MonitoringStrategy returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.virtMonitoringStrategy ; org.ovirt.engine.core.compat.Guid vdsGroupId = vds.getVdsGroupId ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.vdsGroupDao.get ( vdsGroupId ) ; if ( ( vdsGroup.supportsVirtService ( ) ) && ( vdsGroup.supportsGlusterService ( ) ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.multipleMonitoringStrategy ; } else if ( vdsGroup.supportsVirtService ( ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.virtMonitoringStrategy ; } else if ( vdsGroup.supportsGlusterService ( ) ) { returnedStrategy = org.ovirt.engine.core.vdsbroker.MonitoringStrategyFactory.glusterMonitoringStrategy ; } return returnedStrategy ; }
private boolean evaluateNewVisibility ( com.google.gwt.user.client.ui.Widget source , boolean desiredVisibility ) { if ( ! ( widgetConfiguration.containsKey ( source ) ) ) { return desiredVisibility ; } org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfig vmPopupWidgetConfig = widgetConfiguration.get ( source ) ; if ( vmPopupWidgetConfig.isAlwaysHidden ( ) ) { return false ; } vmPopupWidgetConfig.setApplicationLevelVisible ( desiredVisibility ) ; boolean advancedMode = model.getAdvancedMode ( ) . getEntity ( ) ; return vmPopupWidgetConfig.isCurrentlyVisible ( advancedMode , createInstanceMode ) ; }
private static java.lang.String getPath ( java.lang.Class < ? > clz ) { for ( java.lang.reflect.Method method : org.ovirt.engine.api.resource.SystemResource.class . getMethods ( ) ) { if ( ( method.getReturnType ( ) ) == clz ) { javax.ws.rs.Path annotation = method.getAnnotation ( javax.ws.rs.Path.class ) ; if ( annotation != null ) { return annotation.value ( ) ; } } } org.ovirt.engine.api.utils.LinkHelper.log.error ( ( ( "Can\'t find relative path for class \"" + ( clz.getName ( ) ) ) + "\", will return null" ) ) ; return null ; }
public org.ovirt.engine.core.bll.ValidationResult isVmPluggedDiskNotUsingScsiReservation ( ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = getDbFacade ( ) . getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( vm.getId ( ) , VmDeviceGeneralType.DISK ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( device.getIsPlugged ( ) ) && ( device.isUsingScsiReservation ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USES_SCSI_RESERVATION , java.lang.String.format ( "$VmName %s" , vm.getName ( ) ) ) ; } } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void save ( org.ovirt.engine.core.common.businessentities.Bookmark bookmark ) { org.ovirt.engine.core.compat.Guid id = bookmark.getbookmark_id ( ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( id ) ) { id = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; bookmark.setbookmark_id ( id ) ; } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.ovirt.engine.core.dao.BookmarkDAODbFacadeImpl.BookmarkSqlParameterSource ( bookmark ) ; getCallsHandler ( ) . executeModification ( "InsertBookmark" , parameterSource ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc ( vdsServer.glusterVolumeGeoRepConfigList ( volumeName , slaveHost , slaveVolumeName , userName ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getStorageDomainByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String storageDomainName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainByName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( storageDomainName ) , aQuery ) ; }
public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunQuery: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.getEventsHandler ( ) . runQueryFailed ( null ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; if ( callback.isHandleFailure ( ) ) { callback.asyncCallback.OnSuccess ( callback.getModel ( ) , null ) ; } }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.Integer > result = connect ( org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getVds ( ) . getId ( ) ) ; setSucceeded ( result.getFirst ( ) ) ; if ( ! ( result.getFirst ( ) ) ) { setErrorMessageAtReturn ( result ) ; } }
public void updateVmTag ( ) { existingVmTag.setDefaultDisplayType ( ( ( existingVmTag.getDefaultDisplayType ( ) ) + 1 ) ) ; dao.updateDefaultDisplayForVmTag ( existingVmTag ) ; org.ovirt.engine.core.common.businessentities.TagsVmMap result = dao.getTagVmByTagIdAndByVmId ( existingVmTag.getTagId ( ) , existingVmTag.getVmId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; assertEqualsTagsVmMap ( existingVmTag , result ) ; }
public void testChangeClusterForbidden ( ) { prepareVmToPassCanDoAction ( ) ; org.ovirt.engine.core.common.businessentities.VDSGroup newGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setCompatibilityVersion ( Version.v3_0 ) ; vmStatic.setVdsGroupId ( newGroup.getId ( ) ) ; org.mockito.Mockito.doReturn ( vdsGroupDao ) . when ( command ) . getVdsGroupDao ( ) ; org.junit.Assert.assertFalse ( "canDoAction should have failed with can't change cluster." , command.canDoAction ( ) ) ; assertCanDoActionMessage ( EngineMessage.VM_CANNOT_UPDATE_CLUSTER ) ; }
protected boolean canDoAction ( ) { boolean result = true ; if ( ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVds ( ) ) == null ) { addCanDoActionMessage ( EngineMessage.VDS_INVALID_SERVER_ID ) ; result = false ; } else if ( ( ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVds ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Connecting ) ) || ( ( org.ovirt.engine.core.bll.HandleVdsVersionCommand.getVds ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive ) ) ) { addCanDoActionMessage ( EngineMessage.VDS_CANNOT_CHECK_VERSION_HOST_NON_RESPONSIVE ) ; result = false ; } return result ; }
public static void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
private void buildFaultResult ( ) { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault ( ) ; fault.setError ( EngineError.ReachedMaxNumberOfHostsInDC ) ; fault.setMessage ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getVdsErrorsTranslator ( ) . translateErrorTextSingle ( fault.getError ( ) . toString ( ) ) ) ; org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getReturnValue ( ) . setFault ( fault ) ; }
public void calculateNetworkImplementationDetailsNetworkMtuOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , iface.getNetworkName ( ) , iface.isBridged ( ) , ( ( iface.getMtu ( ) ) + 1 ) , iface.getVlanId ( ) , createQos ( ) ) ; }
private void onRemove ( ) { cancel ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > params = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.MacPool macPool : getSelectedItems ( ) ) { params.add ( new org.ovirt.engine.core.common.action.RemoveMacPoolByIdParameters ( macPool.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( ActionType.RemoveMacPool , params ) ; }
public void onFailure ( final java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunQuery: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.getEventsHandler ( ) . runQueryFailed ( null ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; if ( callback.isHandleFailure ( ) ) { org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser ( null ) ; callback.getDel ( ) . onSuccess ( callback.getModel ( ) , null ) ; } }
protected void postSaveAction ( org.ovirt.engine.core.compat.Guid networkGuid , boolean succeeded ) { if ( succeeded ) { cancel ( ) ; } StopProgress ( ) ; }
public void testNoActiveImagesReturned ( ) { org.ovirt.engine.core.common.queries.IdQueryParameters params = getQueryParameters ( ) ; org.mockito.Mockito.when ( params.getId ( ) ) . thenReturn ( storageDoaminId ) ; org.ovirt.engine.core.bll.snapshots.GetAllDiskSnapshotsByStorageDomainIdQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery ( ) ; query.executeQueryCommand ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages = query.getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( diskImages.stream ( ) . noneMatch ( DiskImage :: getActive ) , "Active images shouldn't be returned" ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , getCluster ( 0 ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllNetworks , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.DATA_CENTER_ID } , getNetworks ( ) , failure ) ; }
public void testExceptionWhileLocking ( ) { org.mockito.Mockito.doThrow ( new java.lang.RuntimeException ( ) ) . when ( lock ) . lock ( ) ; try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lock ) ) { org.junit.jupiter.api.Assertions.fail ( "Lock wasn't acquired, this code shouldn't happen." ) ; } catch ( java.lang.RuntimeException e ) { } org.mockito.Mockito.verify ( lock , org.mockito.Mockito.never ( ) ) . unlock ( ) ; }
public void close ( ) throws java.io.IOException { try { if ( ( session ) != null ) { session.close ( true ) ; session = null ; } if ( ( client ) != null ) { client.stop ( ) ; client = null ; } } catch ( java.lang.Exception e ) { org.ovirt.engine.core.uutils.ssh.SSHClient.log.error ( "Failed to close session" , org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage ( e ) ) ; org.ovirt.engine.core.uutils.ssh.SSHClient.log.debug ( "Exception" , e ) ; throw new java.io.IOException ( e ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( taskButton.getValue ( ) ) { alertButton.setValue ( false ) ; eventButton.setValue ( false ) ; tablePanel.clear ( ) ; tablePanel.add ( tasksTree ) ; firstRowTablePanel.clear ( ) ; firstRowTablePanel.add ( _tasksTable ) ; message.setText ( org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView.constants.lastTaskEventFooter ( ) ) ; collapseButton.setVisible ( true ) ; } else { taskButton.setValue ( true ) ; } }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void vlanBondNameMismatch ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface anotherBond = createBond ( ( ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME ) + "1" ) , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifacesToBond = createNics ( null ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createParametersForBond ( bond , ifacesToBond ) ; parameters.getInterfaces ( ) . add ( createVlan ( anotherBond , 100 , "net" ) ) ; mockExistingIfacesWithBond ( bond , ifacesToBond ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORK_INTERFACES_DONT_EXIST , anotherBond.getName ( ) ) ; }
protected boolean verifyAddVM ( ) { final java.util.List < java.lang.String > reasons = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ; final int nicsCount = ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters ( ) . getVmsCount ( ) ) * ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmNicDao ( ) . getAllForTemplate ( org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateId ( ) ) . size ( ) ) ; final int priority = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters ( ) . getVmStaticData ( ) . getPriority ( ) ; return org.ovirt.engine.core.bll.VmHandler.verifyAddVm ( reasons , nicsCount , priority , org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getMacPool ( ) ) ; }
private org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > createProviderReadOnlyCallback ( final java.util.Set < org.ovirt.engine.core.compat.Guid > externalProviderIds ) { return new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = returnValue.getReturnValue ( ) ; boolean isReadOnly = checkForRemoveExternalNetworkAvailability ( providers , externalProviderIds ) ; makeRemoveExternalNetworkCheckboxAvailable ( isReadOnly ) ; } } ) ; }
public void setDataSources ( java.util.Map < java.lang.String , javax.sql.DataSource > dataSources ) { java.util.Map < java.lang.String , ovirt_engine_dwh.historyetl_3_3.TalendDataSource > talendDataSources = new java.util.HashMap < java.lang.String , ovirt_engine_dwh.historyetl_3_3.TalendDataSource > ( ) ; for ( java.util.Map.Entry < java.lang.String , javax.sql.DataSource > dataSourceEntry : dataSources.entrySet ( ) ) { talendDataSources.put ( dataSourceEntry.getKey ( ) , new ovirt_engine_dwh.historyetl_3_3.TalendDataSource ( dataSourceEntry.getValue ( ) ) ) ; } globalMap.put ( ovirt_engine_dwh.historyetl_3_3.HistoryETL.KEY_DB_DATASOURCES , talendDataSources ) ; }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = getReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case UnknownTask : log.error ( "Trying to revert unknown task '{}'" , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ; return ; } super . proceedProxyReturnValue ( ) ; }
protected org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB ) ; initializeVmDaoMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; return cmd ; }
public static void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
protected boolean shouldUpdateReadOnly ( ) { return ! ( vmDeviceForVm.getIsReadOnly ( ) . equals ( getNewDisk ( ) . getReadOnly ( ) ) ) ; }
public void checkMissingIpv6AddressDetailsBootProtocolStatic ( ) { final boolean initAddress = random.nextBoolean ( ) ; initIpv6ConfigurationDetails ( Ipv6BootProtocol.STATIC_IP , initAddress , ( ! initAddress ) ) ; org.hamcrest.MatcherAssert.assertThat ( underTest.validateNetworkAttachmentIpConfiguration ( networkAttachments ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_ATTACHMENT_IP_CONFIGURATION_STATIC_BOOT_PROTOCOL_MISSING_IP_ADDRESS_DETAILS , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_NETWORK_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.NETWORK_NAME ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentIpConfigurationValidator.VAR_INTERFACE_NAME , org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.INTERFACE_NAME ) ) ) ; }
public void testImagesDoesNotExist ( ) { java.util.Set < org.ovirt.engine.core.compat.Guid > guidsForDiskImages = new java.util.HashSet ( java.util.Arrays.asList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ; cmd.getParameters ( ) . setDiskIds ( guidsForDiskImages ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST ) ) . when ( diskExistenceValidator ) . disksNotExist ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST ) ; }
protected java.lang.String getTicketValue ( org.ovirt.engine.api.model.Action action ) { if ( ! ( ensureTicket ( action ) . isSetValue ( ) ) ) { action.getTicket ( ) . setValue ( org.ovirt.engine.core.utils.Ticketing.generateOTP ( ) ) ; } return action.getTicket ( ) . getValue ( ) ; }
public void testRemoveNonExistant ( ) { setUpGetDomainExpectations ( StorageType.NFS , false ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.jupiter.api.Assertions.assertNotNull ( wae.getResponse ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
protected boolean hostToRunExist ( ) { java.util.List < org.ovirt.engine.core.compat.Guid > dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getDedicatedVmForVdsList ( ) ; if ( dedicatedHostsList.isEmpty ( ) ) { return true ; } for ( org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList ) { if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( candidateHostGuid ) ) == null ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST ) ; return false ; } } return true ; }
public org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel getSelectedHasConsoleModel ( ) { if ( ( ( selectedHasConsoleModels ) == null ) || ( ( selectedHasConsoleModels.size ( ) ) != 1 ) ) { return null ; } return selectedHasConsoleModels.get ( 0 ) ; }
protected void bindCommonPresenters ( ) { bindSingletonPresenterWidget ( org.ovirt.engine.ui.common.presenter.popup.ErrorPopupPresenterWidget.class , ErrorPopupPresenterWidget.ViewDef.class , org.ovirt.engine.ui.common.view.popup.ErrorPopupView.class ) ; bindPresenterWidget ( org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget.class , DefaultConfirmationPopupPresenterWidget.ViewDef.class , org.ovirt.engine.ui.common.view.popup.DefaultConfirmationPopupView.class ) ; bindPresenterWidget ( org.ovirt.engine.ui.common.presenter.popup.RemoveConfirmationPopupPresenterWidget.class , RemoveConfirmationPopupPresenterWidget.ViewDef.class , org.ovirt.engine.ui.common.view.popup.RemoveConfirmationPopupView.class ) ; bindPresenterWidget ( org.ovirt.engine.ui.common.presenter.popup.RolePermissionsRemoveConfirmationPopupPresenterWidget.class , RolePermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class , org.ovirt.engine.ui.common.view.popup.RolePermissionsRemoveConfirmationPopupView.class ) ; bindPresenterWidget ( org.ovirt.engine.ui.common.presenter.popup.ConsolePopupPresenterWidget.class , ConsolePopupPresenterWidget.ViewDef.class , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.class ) ; }
public void testRemoveLabel ( ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 ) ; checkLabels ( vfsConfig , 3 ) ; dao.removeLabel ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 , vfsConfig.getNetworkLabels ( ) . iterator ( ) . next ( ) ) ; vfsConfig = dao.get ( FixturesTool.HOST_NIC_VFS_CONFIG_NOT_ALL_NETWORKS_ALLOWED_2 ) ; checkLabels ( vfsConfig , 2 ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > ( ) ; }
protected void readOsSection ( org.ovirt.engine.core.compat.backendcompat.XmlNode section ) { _vm.getStaticData ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( section.Attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = section.SelectSingleNode ( "Description" ) ; if ( node != null ) { _vm.getStaticData ( ) . setos ( org.ovirt.engine.core.common.businessentities.VmOsType.valueOf ( node.InnerText ) ) ; } else { _vm.getStaticData ( ) . setos ( VmOsType.Unassigned ) ; } }
private void setUpGetEntityExpectations ( org.ovirt.engine.core.compat.Guid entityId , java.lang.Boolean returnNull ) throws java.lang.Exception { org.ovirt.engine.api.model.Role role = null ; if ( ! returnNull ) { role = new org.ovirt.engine.api.model.Role ( ) ; role.setId ( entityId ) ; } setUpGetEntityExpectations ( VdcQueryType.GetRoleById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { entityId } , role ) ; }
public void edit ( ) { final org.ovirt.engine.core.common.businessentities.network.Network network = getSelectedItem ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel ( network , this ) ; setWindow ( networkModel ) ; networkModel.getDataCenters ( ) . setItems ( java.util.Arrays.asList ( getEntity ( ) ) ) ; networkModel.getDataCenters ( ) . setSelectedItem ( getEntity ( ) ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
private void validateReplacementsDoNotContainUnexpectedItems ( java.util.Collection < java.lang.String > replacements , java.util.List < java.lang.Object > items ) { java.util.Iterator < java.lang.String > iterator = replacements.iterator ( ) ; while ( iterator.hasNext ( ) ) { java.lang.String replacement = iterator.next ( ) ; for ( int i = ReplacementUtils.DEFAULT_MAX_NUMBER_OF_PRINTED_ITEMS ; i < ( items.size ( ) ) ; i ++ ) { org.junit.Assert.assertFalse ( replacement.contains ( buildPropertyValue ( i ) ) ) ; } } }
public void testDiskAttachedToAnyNonDownVM ( ) { org.junit.Assert.assertThat ( validator.isDiskAttachedToAnyNonDownVm ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public java.lang.Boolean getValue ( org.ovirt.engine.core.common.businessentities.QuotaVdsGroup object ) { if ( ( selectedClusterGuid.contains ( object.getVdsGroupId ( ) ) ) || ( ( ( object.getMemSizeMB ( ) ) != null ) && ( ( object.getVirtualCpu ( ) ) != null ) ) ) { if ( ! ( selectedClusterGuid.contains ( object.getVdsGroupId ( ) ) ) ) { selectedClusterGuid.add ( object.getVdsGroupId ( ) ) ; } return true ; } return false ; }
public static boolean canRemoveVmFromPool ( org.ovirt.engine.core.compat.Guid vmId , java.util.ArrayList < java.lang.String > messages ) { boolean returnValue = true ; if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmPoolDao ( ) . getVmPoolMapByVmGuid ( vmId ) ) == null ) { messages.add ( VdcBllMessages.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL.toString ( ) ) ; returnValue = false ; } if ( returnValue ) { if ( org.ovirt.engine.core.bll.RemoveVmCommand.isVmRunning ( vmId ) ) { messages.add ( VdcBllMessages.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL.toString ( ) ) ; returnValue = false ; } } return returnValue ; }
public void unmanagedVlanAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; java.lang.String networkName = "net" ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , 100 , networkName ) ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , networkName ) ; }
public void onSuccess ( java.util.SortedSet < java.lang.String > returnValue ) { java.lang.String label = getNetworkLabel ( ) . getSelectedItem ( ) ; getNetworkLabel ( ) . setItems ( returnValue ) ; getNetworkLabel ( ) . setSelectedItem ( label ) ; onExportChanged ( ) ; }
private org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface build ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos = effectiveHostNetworkQos.getQos ( networkAttachment , network ) ; return new org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface ( vdsNetworkInterface , network , hostNetworkQos , ( networkAttachment == null ? null : networkAttachment.getIpConfiguration ( ) ) ) ; }
protected boolean checkImagesStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksToCheck = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getVmId ( ) ) , true , false , true ) ; org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( disksToCheck ) ; return validate ( diskImagesValidator.diskImagesNotLocked ( ) ) ; }
protected void postInitDisks ( ) { onDataLoad ( ) ; checkDestFormatCompatibility ( ) ; StopProgress ( ) ; getStorage ( ) . getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { onDataLoad ( ) ; } } ) ; }
public final void onBootstrap ( ) { java.util.logging.Logger rootLogger = java.util.logging.Logger.getLogger ( "" ) ; initLocalStorageLogHandler ( rootLogger ) ; initUncaughtExceptionHandler ( rootLogger ) ; com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { performBootstrap ( ) ; } } ) ; }
void initCheckBoxEditors ( ) { attachFloppyEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; attachIsoEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; bootMenuEnabledEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; runAsStatelessEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; runAndPauseEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; useAlternateCredentialsEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; spiceFileTransferEnabledEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; spiceCopyPasteEnabledEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; cloudInitEnabledEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc updateVmPolicy ( java.util.Map params ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.updateVmPolicy" ) . withParameter ( "vmID" , ( ( java.lang.String ) ( params.get ( "vmId" ) ) ) ) . withParameter ( "params" , params ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void testAggregateDisksSnapshots ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks = new java.util.ArrayList ( snapshotsList ) ; java.util.Collections.addAll ( disks , diskWithSnapshots , diskWithoutSnapshots , ovfImage , cinderDisk , lunDisk ) ; java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.Disk > result = getQuery ( ) . aggregateDisksSnapshots ( disks ) ; assertAllDisksAreActive ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 5 , result.size ( ) , "wrong number of disks returned" ) ; }
private void verifyModelSpecific ( org.ovirt.engine.api.model.NetworkFilterParameter model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VALUES [ index ] , model.getValue ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.isSetNic ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResourceTest.VM_NIC_ID.toString ( ) , model.getNic ( ) . getId ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent = org.ovirt.engine.core.bll.AddFenceAgentCommand.getParameters ( ) . getAgent ( ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getFenceAgentDao ( ) . save ( agent ) ; org.ovirt.engine.core.bll.AddFenceAgentCommand.getReturnValue ( ) . setActionReturnValue ( agent.getId ( ) ) ; org.ovirt.engine.core.bll.AddFenceAgentCommand.setSucceeded ( true ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > getSessions ( int count , boolean populateVoId ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > sessions = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { sessions.add ( getSession ( populateVoId ) ) ; } return sessions ; }
private void updateActionAvailability ( ) { getRemoveCommand ( ) . setIsExecutionAllowed ( ( ! ( getSelectedPrimaryDeviceNames ( ) . isEmpty ( ) ) ) ) ; }
public void validateFailedDiskInterfaceUnsupported ( ) { mockVmStatusUp ( ) ; createVirtIODisk ( ) ; initStorageDomain ( ) ; org.mockito.Mockito.when ( diskVmElementValidator.isDiskInterfaceSupported ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public void testGetAllForUsersAndGroupsInvalidUserAndGroups ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Role > result = dao.getAllForUserAndGroups ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) , ApplicationMode.AllModes.getValue ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertTrue ( result.isEmpty ( ) ) ; }
protected boolean checkMasterDomainIsUp ( ) { boolean hasUpMaster = ! ( org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStorageDomainDao ( ) . getStorageDomains ( org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool ( ) . getId ( ) , StorageDomainType.Master , StorageDomainStatus.Active ) . isEmpty ( ) ) ; if ( ! hasUpMaster ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_MASTER_STORAGE_DOMAIN_NOT_ACTIVE ) ; } return true ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface enslaveOrReleaseNIC ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , java.lang.String bondName ) { return createVdsInterface ( iface.getId ( ) , iface.getName ( ) , false , bondName , null , null ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetAllStorageDomains , org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , getStorageDomains ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters.class , new java.lang.String [ ] { "StorageDomainId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getImages ( ) , failure ) ; }
public void ipChanged ( ) { org.ovirt.engine.core.common.businessentities.Network net = createNetwork ( "net" ) ; mockExistingNetworks ( net ) ; org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic ( "nic0" , net.getName ( ) ) ; nic.setBootProtocol ( NetworkBootProtocol.StaticIp ) ; nic.setAddress ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; mockExistingIfaces ( nic ) ; nic.setAddress ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndAssertNetworkModified ( helper , net ) ; }
private void styleTextBoxEditor ( org.ovirt.engine.ui.common.widget.editor.EntityModelTextBoxOnlyEditor editor , boolean enabled ) { if ( ! enabled ) { editor.setEnabled ( true ) ; com.google.gwt.user.client.ui.ValueBox < java.lang.Object > valueBox = editor.asValueBox ( ) ; valueBox.setReadOnly ( true ) ; valueBox.getElement ( ) . getStyle ( ) . setBorderWidth ( 0 , Style.Unit.PX ) ; } }
protected void endVmCommand ( ) { org.ovirt.engine.core.bll.StopVmCommandBase.setCommandShouldBeLogged ( false ) ; if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) ) != null ) { org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . setStatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getSnapshotDao ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.StopVmCommandBase.getVmId ( ) ) ; org.ovirt.engine.core.bll.StopVmCommandBase.getVmDynamicDao ( ) . update ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getDynamicData ( ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.log.warn ( "StopVmCommandBase::EndVmCommand: Vm is null - not performing full endAction" ) ; } org.ovirt.engine.core.bll.StopVmCommandBase.setSucceeded ( true ) ; }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster CloneNetworkCluster ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster instance ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster obj = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( ) ; obj.setStatus ( instance.getStatus ( ) ) ; obj.setDisplay ( instance.isDisplay ( ) ) ; obj.setRequired ( instance.isRequired ( ) ) ; return obj ; }
public void onFailureResetInitialStatus ( ) { mockExecutor ( false ) ; try { command.executeCommand ( ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException exception ) { org.mockito.Mockito.verify ( vdsBrokerFrontend ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.SetVdsStatus ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters.class ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.Boolean entity = getOptimizeForSpeed ( ) . getEntity ( ) ; if ( entity ) { getGuarantyResources ( ) . setEntity ( true ) ; } getAllowOverbooking ( ) . setIsChangeable ( ( ! entity ) ) ; }
protected void service ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { java.util.Map < java.lang.String , java.lang.Object > data = new java.util.HashMap < > ( ) ; data.put ( "status" , "active" ) ; data.put ( "status_description" , "SSO Webapp Deployed" ) ; data.put ( "version" , SsoConstants.OVIRT_SSO_VERSION ) ; org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonData ( response , data ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn formatStorageDomain ( java.lang.String sdUUID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "StorageDomain.format" ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "autoDetach" , false ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void testListCrashClientLocale ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.aaa.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpQueryExpectations ( org.ovirt.engine.api.restapi.resource.aaa.BackendUsersResourceTest.QUERY , t ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , org.ovirt.engine.api.restapi.resource.aaa.BACKEND_FAILED_CLIENT_LOCALE , t ) ; } finally { locales.clear ( ) ; } }
protected void verifyModel ( org.ovirt.engine.api.model.Role model , int index ) { super . verifyModel ( model , index ) ; org.junit.Assert.assertTrue ( model.isSetUser ( ) ) ; org.junit.Assert.assertTrue ( model.getUser ( ) . isSetId ( ) ) ; org.junit.Assert.assertEquals ( GUIDS [ 1 ] . toString ( ) , model.getUser ( ) . getId ( ) ) ; }
public void testAttachFailFormatType ( ) { storageDomain.setStorageFormat ( StorageFormatType.V3 ) ; storagePool.setCompatibilityVersion ( Version.v3_0 ) ; org.ovirt.engine.core.bll.ValidationResult invalidFormatAttachingResult = validator.validateDomainCanBeAttachedToPool ( ) ; org.junit.Assert.assertFalse ( "Attaching domain with unsupported version succeeded while it should have failed" , invalidFormatAttachingResult.isValid ( ) ) ; assertFailingMessage ( "Attaching domain with unsupported version failed with the wrong message" , invalidFormatAttachingResult , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL ) ; }
public org.ovirt.engine.sdk.decorators.HostHostNicLabel get ( java.util.UUID id ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ) + ( SLASH ) ) + ( id.toString ( ) ) ; return getProxy ( ) . get ( url , org.ovirt.engine.sdk.entities.Label.class , org.ovirt.engine.sdk.decorators.HostHostNicLabel.class ) ; }
public void setupEnvironment ( ) { org.ovirt.engine.core.utils.CorrelationIdTracker.clean ( ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.aaa.DbUser.class ) ; org.mockito.Mockito.when ( engineSessionDao.remove ( org.mockito.Matchers.any ( java.lang.Long.class ) ) ) . thenReturn ( 1 ) ; sessionDataContainer.setUser ( session , user ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlanSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createVlan ( nicName , network.getVlanId ( ) , network.getName ( ) ) ; nic.setBridged ( network.isVmNetwork ( ) ) ; nic.setMtu ( network.getMtu ( ) ) ; return nic ; }
public void provisioningValidated ( ) throws java.lang.Exception { setupVirtMock ( ) ; org.junit.Assert.assertTrue ( command.validate ( ) ) ; org.mockito.Mockito.verify ( validator , org.mockito.Mockito.times ( 1 ) ) . provisioningComputeResourceValid ( org.mockito.ArgumentMatchers.any ( java.lang.Boolean.class ) , org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( validator , org.mockito.Mockito.times ( 1 ) ) . provisioningHostGroupValid ( org.mockito.ArgumentMatchers.any ( java.lang.Boolean.class ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
private void verifyIps ( org.ovirt.engine.api.model.ReportedDevice device ) { java.util.List < org.ovirt.engine.api.model.Ip > ips = device.getIps ( ) . getIps ( ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResourceTest.ADDRESSES.length , ips.size ( ) ) ; for ( int i = 0 ; i < ( org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResourceTest.ADDRESSES.length ) ; i ++ ) { assertEquals ( org.ovirt.engine.api.restapi.resource.BackendVmReportedDevicesResourceTest.ADDRESSES [ i ] , ips.get ( i ) . getAddress ( ) ) ; } }
public static void GetPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.MultilevelAdministrationByAdElementIdParameters ( userId ) , aQuery ) ; }
private void initCommand ( ) { org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( ) ; params.setVdsId ( org.ovirt.engine.core.bll.StartVdsCommandTest.FENCECD_HOST_ID ) ; command = new org.ovirt.engine.core.bll.StartVdsCommand ( params ) ; command.setFenceExecutor ( executor ) ; command = org.mockito.Mockito.spy ( command ) ; org.mockito.Mockito.stub ( command.getSleepBeforeFirstAttempt ( ) ) . toReturn ( 0 ) ; command.setAuditLogDirector ( auditLogDirector ) ; command.setVdsGroupId ( org.ovirt.engine.core.bll.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
protected void initializeCommand ( org.ovirt.engine.core.common.businessentities.ImageOperation operation ) { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.MoveOrCopyDiskCommandDummy ( new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters ( diskImageGuid , srcStorageId , destStorageId , operation ) ) ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) . when ( command ) . getAllImageSnapshots ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . acquireLock ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles ( ) ; }
public void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpClusterExpectations ( org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID ) ; setUpEntityQueryExpectations ( 2 , false , false , false , false ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachNetworkToCluster , org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter.class , new java.lang.String [ ] { "ClusterId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResourceTest.CLUSTER_ID } , valid , success ) ) ; verifyFault ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , resource :: remove ) , detail ) ; }
private java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByIds ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > getstorage_ids ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.compat.Guid storageDomainId : getstorage_ids ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : filteredStorageDomains ) { if ( storageDomainId.equals ( storageDomain.getId ( ) ) ) { domains.add ( storageDomain ) ; break ; } } } return domains ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > bonds = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; allBonds = bonds ; queryLabels ( ) ; }
public void diskImagesNotIllegalBothIllegal ( ) { disk1.setImageStatus ( ImageStatus.ILLEGAL ) ; disk2.setImageStatus ( ImageStatus.ILLEGAL ) ; org.junit.Assert.assertThat ( validator.diskImagesNotIllegal ( ) , org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_DISKS_ILLEGAL ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.hamcrest.CoreMatchers.hasItem ( org.ovirt.engine.core.bll.validator.DiskImagesValidatorTest.createAliasReplacements ( disk1 , disk2 ) ) ) ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ) ) { return false ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } return java.util.Objects.equals ( getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionConfiguration ) ( obj ) ) . getId ( ) ) ; }
public static boolean isLunDisk ( org.ovirt.engine.api.model.Disk disk ) { return ( ( disk.isSetLunStorage ( ) ) && ( disk.getLunStorage ( ) . isSetLogicalUnits ( ) ) ) && ( disk.getLunStorage ( ) . getLogicalUnits ( ) . isSetLogicalUnits ( ) ) ; }
public void stopHostSkippedDueToFencingPolicy ( ) { setupCommand ( setupCommandParams ( FenceActionType.STOP ) ) ; setupBrokerResult ( createBrokerResultMap ( 0 , "" , "on" , null ) , createBrokerResultMap ( 0 , "" , "unknown" , "skipped" ) ) ; command.execute ( ) ; org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = ( ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ) ( command.getVDSReturnValue ( ) . getReturnValue ( ) ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( Status.SKIPPED_DUE_TO_POLICY , result.getStatus ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( PowerStatus.UNKNOWN , result.getPowerStatus ( ) ) ; }
public org.ovirt.engine.api.resource.VmNicResource getNicResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendVmNicResource ( id , vmId ) ) ; }
protected void executeCommand ( ) { final org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter attachNetworkToClusterParameter = getParameters ( ) ; final org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction ( ActionType.AttachNetworkToClusterInternal , attachNetworkToClusterParameter ) ; setSucceeded ( returnValue.getSucceeded ( ) ) ; if ( returnValue.getSucceeded ( ) ) { attachLabeledNetwork ( ) ; } else { propagateFailure ( returnValue ) ; } }
protected boolean updateVnicForBackwardCompatibility ( ) { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper.updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getInterface ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getNetworkName ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . isPortMirroring ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getCurrentUser ( ) . getUserId ( ) ) ) ) ) { return false ; } return true ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createNicSyncedWithNetwork ( java.lang.String nicName , org.ovirt.engine.core.common.businessentities.Network network ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createVdsInterface ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , nicName , false , null , network.getvlan_id ( ) , network.getName ( ) , network.isVmNetwork ( ) ) ; return nic ; }
public void validateInvalidDestinationDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain.setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain.setStatus ( StorageDomainStatus.Active ) ; dstStorageDomain.setStorageDomainType ( StorageDomainType.ISO ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; }
public void SetVmUnknown ( org.ovirt.engine.core.common.businessentities.VM vm ) { RemoveAsyncRunningVm ( vm.getId ( ) ) ; InternalSetVmStatus ( vm , VMStatus.Unknown ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.setVmId ( vm.getId ( ) ) ; auditLogDirector.log ( logable , AuditLogType.VM_SET_TO_UNKNOWN_STATUS ) ; storeVm ( vm ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network getGlusterNetworkId ( org.ovirt.engine.core.common.businessentities.VdsStatic server , java.lang.String networkAddress ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > allNetworksInCluster = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . getAllForCluster ( server.getClusterId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : allNetworksInCluster ) { if ( ( network.getCluster ( ) . isGluster ( ) ) && ( isSameNetworkAddress ( server.getId ( ) , network.getName ( ) , networkAddress ) ) ) { return network ; } } return null ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; if ( disk.isBoot ( ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( constants.bootableDisk ( ) ) ; } return null ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc teardownImage ( java.lang.String sdID , java.lang.String spID , java.lang.String imageID , java.lang.String volumeID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.teardownImage ( sdID , spID , imageID , volumeID ) ; org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testNullDisksUsages ( ) { org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVmStatistics ( ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksUsage ( null ) ; vdsBrokerObjectsBuilder.updateVMStatisticsData ( vmStatistics , xml ) ; org.junit.Assert.assertNull ( vmStatistics.getDisksUsage ( ) ) ; }
public void onScroll ( com.google.gwt.event.dom.client.ScrollEvent event ) { updateScrollPosition ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc allocateVolume ( java.lang.String spUUID , java.lang.String sdUUID , java.lang.String imgGUID , java.lang.String volUUID , java.lang.String size ) { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.allocateVolume ( sdUUID , spUUID , imgGUID , volUUID , size ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; }
public void testAttachFailFormatType ( ) { storageDomain.setStorageFormat ( StorageFormatType.V3 ) ; storagePool.setCompatibilityVersion ( Version.v3_0 ) ; org.ovirt.engine.core.bll.ValidationResult invalidFormatAttachingResult = validator.validateDomainCanBeAttachedToPool ( ) ; org.junit.Assert.assertThat ( invalidFormatAttachingResult , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL ) ) ; }
public static void updateSoundDevice ( org.ovirt.engine.core.common.businessentities.VmBase oldVmBase , org.ovirt.engine.core.common.businessentities.VmBase newVmBase , org.ovirt.engine.core.compat.Version compatibilityVersion , java.lang.Boolean isSoundDeviceEnabled ) { boolean osChanged = ( oldVmBase.getOsId ( ) ) != ( newVmBase.getOsId ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSoundDevice ( newVmBase.getId ( ) , newVmBase.getOsId ( ) , compatibilityVersion , isSoundDeviceEnabled , osChanged ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setAllContentHeaderExpectation ( ) ; setUpEntityQueryExpectations ( 1 ) ; setGetVmQueryExpectations ( 1 ) ; setGetNetworksQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; control.replay ( ) ; org.ovirt.engine.api.model.NIC nic = resource.get ( ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.verifyModelSpecific ( nic , 1 ) ; verifyLinks ( nic ) ; }
public void unmanagedVlanAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; java.lang.String networkName = "net" ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , 100 , networkName ) ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , networkName ) ; }
protected boolean validate ( ) { if ( ( getProvider ( ) ) == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST ) ; } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy ( ) ; if ( providerProxy == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED , java.lang.String.format ( "$providerType %1$s" , getProvider ( ) . getType ( ) ) ) ; } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy ( ) . getProviderValidator ( ) ; return ( validate ( validator.nameAvailable ( ) ) ) && ( validate ( validator.validateAddProvider ( ) ) ) ; }
private org.ovirt.engine.core.dao.ClusterDao mockCluster ( ) { org.ovirt.engine.core.dao.ClusterDao mock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.ClusterDao.class ) ; org.ovirt.engine.core.common.businessentities.Cluster value = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; value.setEmulatedMachine ( "pc-1.0" ) ; value.getRequiredRngSources ( ) . add ( VmRngDevice.Source.RANDOM ) ; value.setCompatibilityVersion ( Version.v3_5 ) ; org.mockito.Mockito.when ( mock.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( value ) ; return mock ; }
private void UpdatePmCommandAvailability ( ) { boolean isPm = ( ( java.lang.Boolean ) ( getIsPm ( ) . getEntity ( ) ) ) ; java.lang.Object proxySelectedItem = getPmProxyPreferencesList ( ) . getSelectedItem ( ) ; getTestCommand ( ) . setIsExecutionAllowed ( isPm ) ; getProxyUpCommand ( ) . setIsExecutionAllowed ( ( isPm && ( proxySelectedItem != null ) ) ) ; getProxyDownCommand ( ) . setIsExecutionAllowed ( ( isPm && ( proxySelectedItem != null ) ) ) ; }
public static void initDictionaries ( ) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info ( "Start initializing dictionaries" ) ; org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.clear ( ) ; for ( org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config.< java.util.HashSet < org.ovirt.engine.core.compat.Version > > getValue ( ConfigValues.SupportedClusterLevels ) ) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.put ( ver , new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager ( ver ) ) ; } org.ovirt.engine.core.bll.CpuFlagsManagerHandler.log.info ( "Finished initializing dictionaries" ) ; }
public static java.net.URI buildSsoRevokeUrl ( java.lang.String url , java.lang.String ssoToken ) { try { java.net.URI uri = new java.net.URI ( url ) ; org.apache.http.client.utils.URIBuilder uriBuilder = new org.apache.http.client.utils.URIBuilder ( java.lang.String.format ( "%1$s://%2$s/ovirt-engine/services/sso-logout" , uri.getScheme ( ) , uri.getAuthority ( ) ) ) ; uriBuilder.addParameter ( "scope" , org.ovirt.engine.sdk4.internal.SsoUtils.SCOPE ) ; uriBuilder.addParameter ( "token" , ssoToken ) ; return uriBuilder.build ( ) ; } catch ( java.net.URISyntaxException ex ) { throw new java.lang.Error ( "Failed to build SSO revoke URL" , ex ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.compat.Guid oldQos = diskProfileDao.get ( getProfileId ( ) ) . getQosId ( ) ; org.ovirt.engine.core.compat.Guid newQos = getProfile ( ) . getQosId ( ) ; super . executeCommand ( ) ; if ( java.util.Objects.equals ( oldQos , newQos ) ) { return ; } if ( getSucceeded ( ) ) { vmSlaPolicyUtils.refreshRunningVmsWithDiskProfile ( getProfileId ( ) ) ; } }
public org.ovirt.engine.api.v3.types.V3Cluster update ( org.ovirt.engine.api.v3.types.V3Cluster v3Cluster ) { org.ovirt.engine.api.model.Cluster v4Cluster = org.ovirt.engine.api.v3.adapters.V3InAdapters.adaptIn ( v3Cluster ) ; org.ovirt.engine.api.v3.helpers.V3ClusterHelper.assignCompatiblePolicy ( v3Cluster , v4Cluster ) ; try { return org.ovirt.engine.api.v3.adapters.V3OutAdapters.adaptOut ( getDelegate ( ) . update ( v4Cluster ) ) ; } catch ( javax.ws.rs.WebApplicationException exception ) { throw adaptException ( exception ) ; } }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testCleanNotExpiredUsersSessionsWithUsers ( ) { initDataForClearTest ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER ) ; container.cleanExpiredUsersSessions ( ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.USER , false ) ) ; org.junit.Assert.assertNotNull ( "Get should return the value since the session was not removed" , container.getUser ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , false ) ) ; }
public static void GetRpmVersionViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.VM getVM ( org.ovirt.engine.api.model.VmPool model ) { if ( isFiltered ( ) ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , QueryType.GetVmDataByPoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( model.getId ( ) ) ) , model.getId ( ) ) ; } return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , QueryType.GetVmDataByPoolName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( model.getName ( ) ) , ( "Vms: pool=" + ( model.getName ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.VDS getVds ( org.ovirt.engine.core.common.businessentities.VDSStatus status ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; vds.setVdsName ( "gfs1" ) ; vds.setClusterId ( org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommandTest.clusterId ) ; vds.setStatus ( status ) ; return vds ; }
public void createCommand ( ) { org.ovirt.engine.core.common.action.RunVmParams param = new org.ovirt.engine.core.common.action.RunVmParams ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > ( param ) ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . removeQuotaCommandLeftOver ( ) ; mockVmRunHandler ( ) ; mockSuccessfulSnapshotValidator ( ) ; mockVmPropertiesUtils ( ) ; mockBackend ( ) ; }
protected java.util.Collection < org.ovirt.engine.core.compat.Guid > getStorageDomainsIds ( ) { return org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds ( getSourceImages ( ) ) ; }
public static org.apache.commons.httpclient.HttpClient getClient ( ) { org.apache.commons.httpclient.HttpClient httpClient = new org.apache.commons.httpclient.HttpClient ( ) ; if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.SecureConnectionWithOATServers ) ) { java.net.URL trustStoreUrl ; try { int port = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.AttestationPort ) ; trustStoreUrl = new java.net.URL ( ( "file://" + ( org.ovirt.engine.core.common.config.Config.resolveAttestationTrustStorePath ( ) ) ) ) ; java.lang.String truststorePassword = org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.AttestationTruststorePass ) ; java.lang.String attestationServer = org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.AttestationServer ) ; org.apache.commons.httpclient.protocol.ProtocolSocketFactory factory = new org.ovirt.engine.core.utils.ssl.AuthSSLProtocolSocketFactory ( org.ovirt.engine.core.vdsbroker.attestation.AttestationService.getTrustStore ( trustStoreUrl.getPath ( ) , truststorePassword ) , "SSLv3" ) ; org.apache.commons.httpclient.protocol.Protocol clientAuthHTTPS = new org.apache.commons.httpclient.protocol.Protocol ( "https" , factory , port ) ; httpClient.getHostConfiguration ( ) . setHost ( attestationServer , port , clientAuthHTTPS ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.attestation.AttestationService.log.error ( "Failed to init AuthSSLProtocolSocketFactory. SSL connections will not work: {}" , e.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.attestation.AttestationService.log.debug ( "Exception" , e ) ; } } return httpClient ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { org.ovirt.engine.api.model.Network entity = org.ovirt.engine.api.restapi.types.NetworkMapper.map ( network , null ) ; org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = getIscsiBond ( ) ; iscsiBond.getNetworkIds ( ) . add ( entity.getId ( ) ) ; return performAction ( VdcActionType.EditIscsiBond , new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( iscsiBond ) ) ; }
private static java.util.Properties getLanguageProperties ( ) { java.util.Properties prop = new java.util.Properties ( ) ; try { prop = org.ovirt.engine.core.utils.ResourceUtils.loadProperties ( org.ovirt.engine.core.utils.servlet.LocaleFilter.class , org.ovirt.engine.core.utils.servlet.LocaleFilter.LANGUAGES_FILE ) ; } catch ( java.io.IOException e ) { org.ovirt.engine.core.utils.servlet.LocaleFilter.log.error ( "Unable to load supported langauges file" , e ) ; } return prop ; }
private org.ovirt.engine.core.common.businessentities.network.VnicProfile findVnicProfileForUser ( org.ovirt.engine.core.compat.Guid userId , org.ovirt.engine.core.common.businessentities.network.Network network ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VnicProfile > networkProfiles = org.ovirt.engine.core.bll.ImportVmCommand.getVnicProfileDao ( ) . getAllForNetwork ( network.getId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : networkProfiles ) { if ( profile.isPortMirroring ( ) ) { if ( isVnicProfilePermitted ( userId , profile , ActionGroup.PORT_MIRRORING ) ) { return profile ; } } else { if ( isVnicProfilePermitted ( userId , profile , ActionGroup.CONFIGURE_VM_NETWORK ) ) { return profile ; } } } return null ; }
public void testQueryWithoutHostId ( ) { getQuery ( ) . setInternalExecution ( true ) ; getQuery ( ) . ExecuteCommand ( ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded ( getQuery ( ) , true ) ; org.ovirt.engine.core.bll.GetoVirtISOsTest.checkReturnValue ( getQuery ( ) ) ; }
public static void getTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; if ( cluster != null ) { powerAction ( actionName , title , message , cluster.isOptionalReasonRequired ( ) ) ; } }
private void clusterHasVMs ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setClusterId ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.DEFAULT_CLUSTER_ID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList = new java.util.ArrayList < > ( ) ; vmList.add ( vm ) ; org.mockito.Mockito.when ( vmDao.getAllForCluster ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( vmList ) ; }
private static void testParseLunFromXmlRpcForDevtypeField ( org.ovirt.engine.core.common.businessentities.storage.StorageType expectedStorageType , java.lang.String mockDevtype ) { java.util.Map < java.lang.String , java.lang.Object > xlun = new java.util.HashMap < > ( ) ; xlun.put ( GetDeviceListVDSCommand.DEVTYPE_FIELD , mockDevtype ) ; org.ovirt.engine.core.common.businessentities.storage.LUNs lun = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLunFromXmlRpc ( xlun , Version.v4_1 ) ; org.junit.Assert.assertEquals ( expectedStorageType , lun.getLunType ( ) ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.UpdateVm , new org.ovirt.engine.core.common.action.VmManagementParametersBase ( gettempVm ( ) ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult a ) { stopProgress ( a.getState ( ) ) ; cancel ( ) ; } } , this ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createDiskImage ( int size ) { org.ovirt.engine.core.common.businessentities.DiskImage img = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; img.setSizeInGigabytes ( size ) ; img.setActualSize ( size ) ; img.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; img.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return img ; }
public void getUsbPolicyUsbTypeNull30 ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; vdsGroup.setCompatibilityVersion ( Version.v3_0 ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getCompatibilityVersion ( ) ) , UsbPolicy.ENABLED_LEGACY ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.StorageConnection model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionsResourceTest.STORAGE_TYPES_MAPPED [ index ] . toString ( ) . toLowerCase ( ) , model.getType ( ) . value ( ) ) ; verifyLinks ( model ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionList" ) . withParameter ( "volName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; }
public static java.lang.String concatenateValues ( java.util.Map < java.lang.String , java.lang.String > map ) { java.util.List < java.lang.String > keys = new java.util.ArrayList < > ( map.keySet ( ) ) ; java.util.Collections.sort ( keys ) ; java.lang.StringBuilder buffer = new java.lang.StringBuilder ( ) ; keys.forEach ( ( key ) -> buffer.append ( map.get ( key ) ) ) ; return buffer.toString ( ) ; }
public static org.ovirt.engine.api.model.StorageDomainType map ( org.ovirt.engine.api.model.StorageDomainType storageDomainType , org.ovirt.engine.api.model.StorageDomainType template ) { switch ( storageDomainType ) { case Master : return org.ovirt.engine.api.model.StorageDomainType.DATA ; case Data : return org.ovirt.engine.api.model.StorageDomainType.DATA ; case ISO : return org.ovirt.engine.api.model.StorageDomainType.ISO ; case ImportExport : return org.ovirt.engine.api.model.StorageDomainType.EXPORT ; case Image : return org.ovirt.engine.api.model.StorageDomainType.IMAGE ; case Volume : return org.ovirt.engine.api.model.StorageDomainType.VOLUME ; case Unknown : default : return null ; } }
private org.ovirt.engine.core.bll.interfaces.BackendCommandObjectsHandler getBackendCommandObjectsHandler ( ) { try { javax.naming.InitialContext ctx = new javax.naming.InitialContext ( ) ; return ( ( org.ovirt.engine.core.bll.interfaces.BackendCommandObjectsHandler ) ( ctx.lookup ( org.ovirt.engine.core.bll.CommandBase.BACKEND_COMMAND_OBJECTS_HANDLER_JNDI_NAME ) ) ) ; } catch ( javax.naming.NamingException e ) { log.error ( ( "Getting backend command objects handler failed" + ( e.getMessage ( ) ) ) ) ; log.debug ( "" , e ) ; return null ; } }
private void setDetailList ( final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel vmGeneralModel , final org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportInterfaceListModel templateImportInterfaceListModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasEntity > list = new java.util.ArrayList < > ( ) ; list.add ( vmGeneralModel ) ; list.add ( templateImportInterfaceListModel ) ; list.add ( templateImportDiskListModel ) ; setDetailModels ( list ) ; }
protected org.ovirt.engine.api.model.Permit postPopulate ( org.ovirt.engine.api.model.Permit from ) { org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup = org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.core.common.businessentities.ActionGroup.class ) ; from.setId ( java.lang.Integer.toString ( actionGroup.getId ( ) ) ) ; org.ovirt.engine.api.model.PermitType permitType = org.ovirt.engine.api.restapi.types.PermitMapper.map ( actionGroup , ( ( org.ovirt.engine.api.model.PermitType ) ( null ) ) ) ; from.setName ( permitType.value ( ) ) ; from.setAdministrative ( actionGroup.getRoleType ( ) . toString ( ) . equals ( RoleType.ADMIN.toString ( ) ) ) ; return from ; }
public void isConnWithSameDetailsExistNoConnections ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data2" , StorageType.NFS , NfsVersion.V4 , 300 , 0 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.when ( storageConnDao.getAllForStorage ( newNFSConnection.getconnection ( ) ) ) . thenReturn ( connections ) ; boolean isExists = command.isConnWithSameDetailsExists ( newNFSConnection , null ) ; org.junit.Assert.assertFalse ( isExists ) ; }
private void initialize ( ) { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info ( "Start initializing {}" , getClass ( ) . getSimpleName ( ) ) ; long backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.< java.lang.Long > getValue ( ConfigValues.BackupCheckPeriodInHours ) ; if ( backupCheckPeriodInHours > 0 ) { executor.scheduleWithFixedDelay ( this :: backupCheck , backupCheckPeriodInHours , backupCheckPeriodInHours , java.util.concurrent.TimeUnit.HOURS ) ; org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info ( "Finished initializing {}" , getClass ( ) . getSimpleName ( ) ) ; } }
public void onFailure ( final java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunQuery: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.getEventsHandler ( ) . runQueryFailed ( null ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; if ( callback.isHandleFailure ( ) ) { org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser ( null ) ; callback.getDel ( ) . onSuccess ( callback.getModel ( ) , null ) ; } }
protected void alertPowerManagementStatusFailed ( java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters ( ) . getTargetVdsID ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; auditLogDirector.log ( alert , AuditLogType.VDS_ALERT_FENCE_TEST_FAILED ) ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected void executeCommand ( ) { boolean succeeded = false ; try { succeeded = runVdsCommand ( VDSCommandType.SetMOMPolicyParameters , new org.ovirt.engine.core.common.vdscommands.MomPolicyVDSParameters ( getVds ( ) , getVdsGroup ( ) . isEnableBallooning ( ) , getVdsGroup ( ) . isEnableKsm ( ) ) ) . getSucceeded ( ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.errorFormat ( "Could not update MoM policy on host {0}" , getVdsName ( ) ) ; } getReturnValue ( ) . setSucceeded ( succeeded ) ; }
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker ( org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . GetVdsManager ( vdsId ) ; if ( vdsmanager == null ) { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND , java.lang.String.format ( "Vds with id: %1$s was not found" , vdsId ) ) ; } setVdsAndVdsStatic ( vdsmanager.getCopyVds ( ) ) ; return vdsmanager.getVdsProxy ( ) ; }
private boolean initVirtResources ( ) { if ( InitializeStorage ( ) ) { processFencing ( ) ; processStoragePoolStatus ( ) ; } else { java.util.Map < java.lang.String , java.lang.String > customLogValues = java.util.Collections.singletonMap ( "StoragePoolName" , org.ovirt.engine.core.bll.InitVdsOnUpCommand.getStoragePoolName ( ) ) ; setNonOperational ( NonOperationalReason.STORAGE_DOMAIN_UNREACHABLE , customLogValues ) ; return false ; } return true ; }
public void testNotLinkedToExternalNetworkPositive ( ) { org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( networkDao.getAllExternalNetworksLinkedToPhysicalNetwork ( org.mockito.ArgumentMatchers.eq ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notLinkedToExternalNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Disk > getAllocationColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < org.ovirt.engine.core.common.businessentities.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn < org.ovirt.engine.core.common.businessentities.Disk , org.ovirt.engine.core.common.businessentities.VolumeType > ( ) { @ java.lang.Override protected org.ovirt.engine.core.common.businessentities.VolumeType getRawValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return ( object.getDiskStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ? ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . getVolumeType ( ) : null ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable ( column , sortBy ) ; }
protected void updateDetailsAvailability ( ) { if ( ( getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser adUser = ( ( org.ovirt.engine.core.common.businessentities.aaa.DbUser ) ( getSelectedItem ( ) ) ) ; userGroupListModel.setIsAvailable ( ( ! ( adUser.isGroup ( ) ) ) ) ; userEventNotifierListModel.setIsAvailable ( ( ! ( adUser.isGroup ( ) ) ) ) ; } }
public static boolean supportedInConfig ( org.ovirt.engine.core.common.config.ConfigValues feature , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.ArchitectureType arch ) { java.util.Map < java.lang.String , java.lang.String > archOptions = org.ovirt.engine.core.common.config.Config.< java.util.Map > getValue ( feature , version.getValue ( ) ) ; java.lang.String value = archOptions.get ( arch.name ( ) ) ; if ( value == null ) { value = archOptions.get ( arch.getFamily ( ) . name ( ) ) ; } return java.lang.Boolean.parseBoolean ( value ) ; }
public void testBadGuidValidation ( ) { setUpGetEntityExpectations ( false ) ; org.ovirt.engine.api.model.Host host = new org.ovirt.engine.api.model.Host ( ) ; host.setCluster ( new org.ovirt.engine.api.model.Cluster ( ) ) ; host.getCluster ( ) . setId ( "!!!" ) ; org.junit.jupiter.api.Assertions.assertThrows ( org.ovirt.engine.api.restapi.utils.MalformedIdException.class , ( ) -> resource.update ( host ) ) ; }
protected boolean validateVdsCluster ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupDao ( ) . get ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId ( ) ) ; return vdsGroup == null ? failCanDoAction ( VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID ) : ( vdsGroup.getArchitecture ( ) ) != ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVm ( ) . getClusterArch ( ) ) ? failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER ) : true ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
private org.ovirt.engine.core.bll.network.vm.BackwardCompatibilityVnicHelper getBackwardCompatibilityVnicHelper ( ) { return org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.vm.BackwardCompatibilityVnicHelper.class ) ; }
public void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
public void managementNetworkAttachmentInvalid ( ) throws java.lang.Exception { org.mockito.Mockito.when ( networkCluster.isRequired ( ) ) . thenReturn ( java.lang.Boolean.FALSE ) ; org.junit.Assert.assertThat ( validator.managementNetworkAttachment ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTest.NETWORK_NAME ) , org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_REQUIRED ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.junit.matchers.JUnitMatchers.hasItem ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTest.NETWORK_NAME_REPLACEMENT ) ) ) ) ; }
private void nullifyInternalProxies ( ) { if ( ( privatemIrsProxy ) != null ) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.shutDownConnection ( ( ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsServerWrapper ) ( privatemIrsProxy ) ) . getHttpClient ( ) ) ; } setmCurrentIrsHost ( null ) ; privatemIrsProxy = null ; mCurrentVdsId = null ; }
public void canAddCloneVmFromSnapshotNoConfiguration ( ) { initializeMock ( ) ; cmd.getVm ( ) . setName ( "vm1" ) ; mockUninterestingMethods ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.when ( snapshotDao.get ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommandTest.SOURCE_SNAPSHOT_ID ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.Snapshot ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION ) ; }
public void validateSucceedsWithStopActionType ( ) { cmd.getParameters ( ) . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected void setUpGetNoPayloadExpectations ( int index , int times ) throws java.lang.Exception { for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , null ) ; } }
private boolean validateNetworkExclusiveOnNic ( java.util.List < org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType > networksOnIface ) { if ( ( networksOnIface.size ( ) ) <= 1 ) { return true ; } org.apache.commons.collections.Bag networkTypes = new org.apache.commons.collections.bag.HashBag ( networksOnIface ) ; if ( ( networkTypes.contains ( org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.VM ) ) || ( ( networkTypes.contains ( org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.NON_VM ) ) && ( ( networkTypes.getCount ( org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator.NetworkType.NON_VM ) ) > 1 ) ) ) { return false ; } return true ; }
private void createDummyPolicyUnit ( ) { dummyPolicyUnit = new org.ovirt.engine.core.common.scheduling.PolicyUnit ( ) ; dummyPolicyUnit.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; dummyPolicyUnit.setName ( "Dummy policy unit" ) ; dummyPolicyUnit.setDescription ( "Description" ) ; dummyPolicyUnit.setPolicyUnitType ( PolicyUnitType.Filter ) ; dummyPolicyUnit.setParameterRegExMap ( new java.util.LinkedHashMap < java.lang.String , java.lang.String > ( ) ) ; }
protected void buildSysprepVmPayload ( java.lang.String strSysPrepContent ) { byte [ ] binarySysPrep ; try { binarySysPrep = strSysPrepContent.getBytes ( org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder.UTF8_CHARSET_ENCODING ) ; } catch ( java.io.UnsupportedEncodingException e ) { throw new java.lang.RuntimeException ( "Unsupported charset while building VM sysprep" , e ) ; } createInfo.add ( VdsProperties.sysprepInf , binarySysPrep ) ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume ) { org.ovirt.engine.core.dao.VdsGroupDao vdsGroupDao = getVdsGroupDao ( ) ; org.ovirt.engine.core.compat.Version slaveCompatibilityVersion = vdsGroupDao.get ( slaveVolume.getClusterId ( ) ) . getCompatibilityVersion ( ) ; org.ovirt.engine.core.compat.Version masterCompatibilityVersion = vdsGroupDao.get ( masterVolume.getClusterId ( ) ) . getCompatibilityVersion ( ) ; return masterCompatibilityVersion.equals ( slaveCompatibilityVersion ) ; }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommandParameters params = new org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommandParameters ( getStoragePoolForVds ( ) . getId ( ) , org.ovirt.engine.core.bll.ForceSelectSPMCommand.getParameters ( ) . getPreferredSPMId ( ) ) ; if ( runVdsCommand ( VDSCommandType.SpmStopOnIrs , params ) . getSucceeded ( ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( this , AuditLogType.USER_FORCE_SELECTED_SPM ) ; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( this , AuditLogType.USER_FORCE_SELECTED_SPM_STOP_FAILED ) ; } org.ovirt.engine.core.bll.ForceSelectSPMCommand.setSucceeded ( true ) ; }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
public void setUp ( ) { quota = setUpQuota ( org.ovirt.engine.core.bll.UpdateQuotaCommandTest.QUOTA_ID ) ; org.mockito.Mockito.when ( quotaDao.getById ( org.ovirt.engine.core.bll.UpdateQuotaCommandTest.QUOTA_ID ) ) . thenReturn ( quota ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . removeQuotaFromCache ( ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . afterUpdate ( ) ; command.init ( ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; parameters.put ( FragmentParams.NAME.getName ( ) , vnicProfile.getName ( ) ) ; parameters.put ( FragmentParams.NETWORK.getName ( ) , vnicProfile.getNetworkName ( ) ) ; parameters.put ( FragmentParams.DATACENTER.getName ( ) , vnicProfile.getDataCenterName ( ) ) ; getPlaceTransitionHandler ( ) . handlePlaceTransition ( WebAdminApplicationPlaces.vnicProfileVmSubTabPlace , parameters ) ; }
public void onlyOneSlaveForBonding ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.SetupNetworksHelperTest.BOND_NAME , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > slaves = java.util.Arrays.asList ( createNic ( "nic0" , null ) ) ; mockExistingIfacesWithBond ( bond , slaves ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForBond ( bond , slaves ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_BOND_PARAMETERS_INVALID ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId ( ) ; java.lang.String networkName = attachment.getNetworkName ( ) ; org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId ( ) ; return hostSetupNetworksValidatorHelper.validateCoherentIdentification ( java.lang.String.valueOf ( violatingEntityId ) , networkId , networkName , EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY , networkBusinessEntityMap ) ; }
protected void init ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) == null ) { return ; } super . init ( ) ; setStoragePoolId ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getStoragePoolId ( ) ) ; loadPayloadDevice ( ) ; needsHostDevices = hostDeviceManager.checkVmNeedsDirectPassthrough ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) ) ; loadVmInit ( ) ; fetchVmDisksFromDb ( ) ; org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setBootSequence ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getDefaultBootSequence ( ) ) ; org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . setRunOnce ( false ) ; }
public void loadVmsFromExportDomain ( ) { clearProblem ( ) ; startProgress ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExportDomain , new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenters ( ) . getSelectedItem ( ) . getId ( ) , exportDomain.getEntity ( ) . getId ( ) ) , new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { updateVms ( returnValue.< java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ; }
protected void setUpGetPayloadExpectations ( int times , int index ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload ( ) ; for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ index ] } , payload ) ; } }
public synchronized void timerElapsed ( ) { if ( thereAreTasksToPoll ( ) ) { pollAndUpdateAsyncTasks ( ) ; if ( ( thereAreTasksToPoll ( ) ) && ( logChangedMap ) ) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.info ( "Finished polling Tasks, will poll again in {} seconds." , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.AsyncTaskPollingRate ) ) ; logChangedMap = false ; } if ( ( _tasks.size ( ) ) > 0 ) { cleanZombieTasks ( ) ; } } }
protected void executeCommand ( ) { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation ( getMovedDiskIds ( ) , ImageStatus.LOCKED , ImageStatus.OK , org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext ( ) ) ; org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValueurnValue = runInternalAction ( ActionType.CreateAllSnapshotsFromVm , getCreateSnapshotParameters ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext ( ) ) ) ; org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters ( ) . setAutoGeneratedSnapshotId ( actionReturnValueurnValue.getActionReturnValue ( ) ) ; persistCommand ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters ( ) . getParentCommand ( ) , ( ( getCallback ( ) ) != null ) ) ; org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded ( true ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { setEnumTitle ( diskImage.getImageStatus ( ) ) ; switch ( diskImage.getImageStatus ( ) ) { case OK : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.upImage ( ) ; case LOCKED : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.waitImage ( ) ; case ILLEGAL : return org.ovirt.engine.ui.common.widget.table.column.DiskImageStatusColumn.resources.logErrorImage ( ) ; default : return null ; } }
private void addSpmStates ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.SpmStatus [ ] values ) { if ( org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual ( version , org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5 ) ) { org.ovirt.engine.api.model.SpmStates states = new org.ovirt.engine.api.model.SpmStates ( ) ; for ( org.ovirt.engine.api.model.SpmStatus state : values ) { states.getSpmStates ( ) . add ( state.value ( ) ) ; } version.setSpmStates ( states ) ; } }
private boolean isConsoleCommandsExecutionAllowed ( ) { final java.util.List < org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel > list = getSelectedHasConsoleModels ( ) ; if ( ( list == null ) || ( list.isEmpty ( ) ) ) { return false ; } for ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel hasConsoleModel : list ) { final org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol = consoleUtils.determineConnectionProtocol ( hasConsoleModel ) ; if ( consoleUtils.canShowConsole ( protocol , hasConsoleModel ) ) { return true ; } } return false ; }
public void testBuildFreeTextConditionSql ( ) { org.ovirt.engine.core.searchbackend.IConditionFieldAutoCompleter comp = new org.ovirt.engine.core.searchbackend.AdGroupConditionFieldAutoCompleter ( ) ; java.lang.String sql = comp.buildFreeTextConditionSql ( "ATable" , "=" , "JarJar" , false ) ; org.junit.jupiter.api.Assertions.assertEquals ( " ( ATable.cn LIKE '%JarJar%' ) " , sql , " ( ATable.cn LIKE '%JarJar%' ) " ) ; sql = comp.buildFreeTextConditionSql ( "ATable" , "!=" , "JarJar" , false ) ; org.junit.jupiter.api.Assertions.assertEquals ( " ( ATable.cn NOT LIKE '%JarJar%' ) " , sql , " ( ATable.cn NOT LIKE '%JarJar%' ) " ) ; }
public void canDoActionFailsOnNoHook ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString ( ) ) ) ; }
public void testSave ( ) { dao.save ( vnicProfile ) ; org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get ( vnicProfile.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( vnicProfile.getId ( ) , result.getId ( ) ) ; org.junit.Assert.assertEquals ( false , result.isPortMirroring ( ) ) ; }
private void updateNumOfMonitors ( ) { if ( ( getDisplayType ( ) . getSelectedItem ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) { getNumOfMonitors ( ) . setIsChangable ( true ) ; } else { getNumOfMonitors ( ) . setSelectedItem ( 1 ) ; getNumOfMonitors ( ) . setIsChangable ( false ) ; } }
protected java.lang.Long getRawValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = ( ( org.ovirt.engine.core.common.businessentities.storage.LunDisk ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ) ) ; return ( ( long ) ( disk.getLun ( ) . getDeviceSize ( ) ) ) ; }
public void getSupportedCpuList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String cpuName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > cpuList = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.ServerCpu > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) ) ; return cpuList ; } return null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSupportedCpuList , new org.ovirt.engine.core.common.queries.GetSupportedCpuListParameters ( cpuName ) , aQuery ) ; }
public void canDoActionDiskIsLocked ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmDiskImage ( false ) ; mockGetVmsListForDisk ( ) ; command.getImage ( ) . setImageStatus ( ImageStatus.LOCKED ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDAO ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.toString ( ) ) ) ; }
public void validateFailsOnNullHookId ( ) { cmd.getParameters ( ) . setHookId ( null ) ; setUpMocksForUpdate ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
protected void onSelectedItemChanging ( java.lang.Object newValue , java.lang.Object oldValue ) { super . onSelectedItemChanging ( newValue , oldValue ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel oldModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( oldValue ) ) ; if ( oldValue != null ) { oldModel.setIsEmpty ( false ) ; oldModel.setItems ( null ) ; org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel listWithDetails = ( ( org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel ) ( ( oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel ) ? oldValue : null ) ) ; if ( listWithDetails != null ) { listWithDetails.setActiveDetailModel ( null ) ; } oldModel.EnsureAsyncSearchStopped ( ) ; } }
private void scanAlignment ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameterList = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : getSelectedItems ( ) ) { parameterList.add ( new org.ovirt.engine.core.common.action.GetDiskAlignmentParameters ( disk.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.GetDiskAlignment , parameterList , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , this ) ; }
private void mockPassDiscardSupport ( org.ovirt.engine.core.bll.ValidationResult validationResult ) { org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( runVmValidator ) . getVmDisks ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyMap ( ) ) . when ( runVmValidator ) . getVmDiskVmElementMap ( ) ; org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator multipleDiskVmElementValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator.class ) ; org.mockito.Mockito.doReturn ( multipleDiskVmElementValidator ) . when ( runVmValidator ) . createMultipleDiskVmElementValidator ( org.mockito.ArgumentMatchers.anyMap ( ) ) ; org.mockito.Mockito.when ( multipleDiskVmElementValidator.isPassDiscardSupportedForDestSds ( org.mockito.ArgumentMatchers.anyMap ( ) ) ) . thenReturn ( validationResult ) ; }
private void setUpVlanQueryExpectations ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface hostNicModel ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > vlans = new java.util.LinkedList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ; vlan.setNetworkName ( "some network name" ) ; vlans.add ( vlan ) ; setUpEntityQueryExpectations ( VdcQueryType.GetAllChildVlanInterfaces , org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters.class , new java.lang.String [ ] { "Id" , "Interface" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID , hostNicModel } , vlans ) ; }
protected boolean activateOrDeactivateNic ( org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.action.PlugAction plugAction , boolean newNic ) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters ( nic , plugAction , newNic ) ; parameters.setVmId ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getVmId ( ) ) ; org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction ( ActionType.ActivateDeactivateVmNic , parameters , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.cloneContextAndDetachFromParent ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; } return returnValue.getSucceeded ( ) ; }
protected boolean migrateVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.bll.job.ExecutionContext parentContext ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vm.getId ( ) ) ; parameters.setReason ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.MessageBundler.getMessage ( AuditLogType.MIGRATION_REASON_HOST_IN_MAINTENANCE ) ) ; return runInternalAction ( VdcActionType.MigrateVm , parameters , createMigrateVmContext ( parentContext , vm ) ) . getSucceeded ( ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( p.getUsageCpuPercent ( ) ) <= ( p.getLowUtilization ( ) ) ) && ( ( p.getCpuOverCommitTimestamp ( ) ) != null ) ) && ( ( ( new java.util.Date ( ) . getTime ( ) ) - ( p.getCpuOverCommitTimestamp ( ) . getTime ( ) ) ) >= ( ( ( p.getCpuOverCommitDurationMinutes ( ) ) * 60 ) * 1000 ) ) ; }
public void testRemoveById ( ) { dao.remove ( new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID , FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap > entries = dao.getAllByStorageDomainId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) ; for ( org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entry : entries ) { org.junit.jupiter.api.Assertions.assertNotEquals ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 , entry.getStorageDomainId ( ) ) ; } org.junit.jupiter.api.Assertions.assertNotNull ( entries ) ; org.junit.jupiter.api.Assertions.assertTrue ( entries.isEmpty ( ) ) ; }
public boolean shouldOverrideSoundDevice ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic , org.ovirt.engine.core.compat.Version compatibilityVersion , java.lang.Boolean soundDeviceEnabled ) { return ( ( soundDeviceEnabled == null ) && ( osRepository.isSoundDeviceEnabled ( vmStatic.getOsId ( ) , compatibilityVersion ) ) ) && ( ( vmStatic.getVmType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmType.Desktop ) ) ; }
protected java.lang.String getSizeString ( java.lang.Double size , org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit inUnit ) { if ( size == null ) { return constants.notAvailableLabel ( ) ; } else { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit , java.lang.Double > sizeWithUnits = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert ( size.longValue ( ) , inUnit ) ; return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . sizeUnitString ( formatSize ( sizeWithUnits.getSecond ( ) ) , sizeWithUnits.getFirst ( ) ) ; } }
protected void executeCommand ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters ( ) . getId ( ) ; for ( org.ovirt.engine.core.common.businessentities.Permission permission : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) . getAllDirectPermissionsForAdElement ( id ) ) { org.ovirt.engine.core.common.action.PermissionsOperationsParameters tempVar = new org.ovirt.engine.core.common.action.PermissionsOperationsParameters ( permission ) ; tempVar.setShouldBeLogged ( false ) ; runInternalActionWithTasksContext ( VdcActionType.RemovePermission , tempVar ) ; } org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getDbUserDao ( ) . remove ( id ) ; org.ovirt.engine.core.bll.aaa.RemoveUserCommand.setSucceeded ( true ) ; }
private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters ( ) { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters ( getProxyHostId ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getUrl ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getUsername ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getPassword ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getOriginType ( ) , org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters ( ) . getNamesOfVms ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate ( java.lang.String url , java.lang.String bearerToken ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterEvent.webhookUpdate" ) . withParameter ( "url" , url ) . withParameter ( "bearerToken" , bearerToken ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
private void initListBoxEditors ( ) { destClusterEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) ; destClusterQuotaEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.Quota > ( ) ) ; destStorageEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StorageDomainFreeSpaceRenderer ( ) ) ; cpuProfileEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.profiles.CpuProfile > ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > getAllImagesAsRepoImages ( ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoImage > repoImages = new java.util.ArrayList < > ( ) ; long currentTime = java.lang.System.currentTimeMillis ( ) ; for ( com.woorea.openstack.glance.model.Image glanceImage : getClient ( ) . images ( ) . list ( true ) . execute ( ) ) { org.ovirt.engine.core.common.businessentities.RepoImage repoImage = org.ovirt.engine.core.bll.provider.OpenstackImageProviderProxy.imageToRepoImage ( glanceImage ) ; repoImage.setLastRefreshed ( currentTime ) ; repoImages.add ( repoImage ) ; } return repoImages ; }
private void buildExclusiveLockMap ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsDiskPluggedTo ) { if ( newDisk.isBoot ( ) ) { exclusiveLockMap = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo ) { exclusiveLockMap.put ( vm.getId ( ) . toString ( ) , LockMessagesMatchUtil.VM_DISK_BOOT ) ; } } }
protected org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType cinderVolumeType = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType.class ) ; org.mockito.Mockito.when ( cinderVolumeType.getId ( ) ) . thenReturn ( GUIDS [ index ] . toString ( ) ) ; org.mockito.Mockito.when ( cinderVolumeType.getName ( ) ) . thenReturn ( NAMES [ index ] ) ; return cinderVolumeType ; }
private void externalNetworkPortMirroringTest ( boolean externalNetwork , boolean portMirroring , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher ) { org.mockito.Mockito.when ( networkDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( network ) ; org.mockito.Mockito.when ( network.isExternal ( ) ) . thenReturn ( externalNetwork ) ; org.mockito.Mockito.when ( vnicProfile.isPortMirroring ( ) ) . thenReturn ( portMirroring ) ; org.hamcrest.MatcherAssert.assertThat ( validator.portMirroringNotSetIfExternalNetwork ( ) , matcher ) ; }
private static boolean isVlanOverBondNetwork ( java.lang.String bondName , java.lang.String networkName , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : interfaces ) { if ( ( ( org.ovirt.engine.core.utils.NetworkUtils.isVlan ( iface ) ) && ( org.ovirt.engine.core.utils.NetworkUtils.interfaceBasedOn ( iface , bondName ) ) ) && ( networkName.equals ( iface.getNetworkName ( ) ) ) ) { return true ; } } return false ; }
protected void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; org.ovirt.engine.core.bll.tasks.TaskManagerUtil.persistCommand ( getCommandId ( ) , parentParameters.getCommandId ( ) , getActionType ( ) , getParameters ( ) , commandStatus , enableCallBack ) ; }
private void createCluster ( org.ovirt.engine.core.compat.Version version ) { existingCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; existingCluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterSyncJobTest.CLUSTER_ID ) ; existingCluster.setName ( "cluster" ) ; existingCluster.setGlusterService ( true ) ; existingCluster.setVirtService ( false ) ; existingCluster.setcompatibility_version ( version ) ; }
protected void addVmPayload ( ) { org.ovirt.engine.core.common.businessentities.VmPayload payload = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmPayload ( ) ; if ( payload != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmId ( ) ) , VmDeviceGeneralType.DISK , payload.getType ( ) , payload.getSpecParams ( ) , true , true , null ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.Disk > getAllAttachableDisksByPoolId ( org.ovirt.engine.core.compat.Guid poolId , org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid userId , boolean isFiltered ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , poolId ) . addValue ( "vm_id" , vmId ) . addValue ( "user_id" , userId ) . addValue ( "is_filtered" , isFiltered ) ; return getCallsHandler ( ) . executeReadList ( "GetAllAttachableDisksByPoolId" , org.ovirt.engine.core.dao.DiskDaoDbFacadeImpl.DiskRowMapper.instance , parameterSource ) ; }
public void attachStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.ListModel listModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel ( ) ; listModel.setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . attachStorageTitle ( ) ) ; listModel.setHelpTag ( HelpTag.attach_storage ) ; listModel.setHashName ( "attach_storage" ) ; attachInternal ( listModel , StorageDomainType.Data ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > getHostLuns ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > ) ( runVdsCommand ( VDSCommandType.GetDeviceList , new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters ( vds.getId ( ) , org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) . getstorage_type ( ) ) ) . getReturnValue ( ) ) ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { ( ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.ConnectAllHostsToLunCommandReturnValue ) ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getReturnValue ( ) ) ) . setFailedVds ( vds ) ; throw e ; } }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
public static boolean isVmPriorityValueLegal ( int value , java.util.List < java.lang.String > reasons ) { boolean res = false ; if ( ( value >= 0 ) && ( value <= ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.VmPriorityMaxValue ) ) ) ) { res = true ; } else { reasons.add ( VdcBllMessages.VM_OR_TEMPLATE_ILLEGAL_PRIORITY_VALUE.toString ( ) ) ; reasons.add ( java.lang.String.format ( "$MaxValue %1$s" , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.VmPriorityMaxValue ) ) ) ; } return res ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.List < ? > ) ( source ) ) ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; }
public java.lang.String getConfigurationValue ( java.lang.String miimonValue ) { java.lang.String extraOption ; if ( value.equals ( org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value ) ) { extraOption = " xmit_hash_policy=" + ( org.ovirt.engine.core.common.businessentities.network.BondMode.BOND_XMIT_POLICY_LAYER23 ) ; } else { extraOption = "" ; } return ( ( ( ( org.ovirt.engine.core.common.businessentities.network.BondMode.MODE ) + ( value ) ) + " miimon=" ) + miimonValue ) + extraOption ; }
private org.ovirt.engine.core.common.job.Job getJob ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.action.ActionType actionType ) { org.ovirt.engine.core.common.action.ActionParametersBase params = command.getParameters ( ) ; org.ovirt.engine.core.common.job.Job job ; if ( ( params.getJobId ( ) ) != null ) { job = jobDao.get ( params.getJobId ( ) ) ; } else { job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob ( actionType , command ) ; jobRepository.saveJob ( job ) ; } return job ; }
public static void GetDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setSize ( org.ovirt.engine.core.bll.memory.MemoryUtils.METADATA_SIZE_IN_BYTES ) ; image.setVolumeType ( VolumeType.Preallocated ) ; image.setVolumeFormat ( VolumeFormat.RAW ) ; return image ; }
public void getFloppyImageList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { getIrsImageList ( aQuery , storagePoolId , false , ImageFileType.Floppy ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { return java.util.Collections.singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( ( ( org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getStoragePoolId ( ) ) == null ? null : org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getStoragePoolId ( ) . getValue ( ) ) , org.ovirt.engine.core.common.VdcObjectType.StoragePool , org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getActionType ( ) . getActionGroup ( ) ) ) ; }
protected void addStoragePoolToDb ( ) { org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) . setStatus ( StoragePoolStatus.Uninitialized ) ; org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) . setMacPoolId ( calculateMacPoolIdToUse ( ) ) ; org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePoolDao ( ) . save ( org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool ( ) ) ; }
public void setItems ( java.util.Collection value ) { if ( value == null ) { super . setItems ( null ) ; return ; } java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.Disk > cast ( value ) ; super . setItems ( disks ) ; }
private void assertNoBondsModified ( org.ovirt.engine.core.bll.SetupNetworksHelper helper ) { org.junit.Assert.assertEquals ( java.text.MessageFormat.format ( "Expected no bonds to be modified but some were modified. Modified bonds: {0}" , helper.getBonds ( ) ) , 0 , helper.getBonds ( ) . size ( ) ) ; }
protected void unlockVm ( ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) ) != null ) { if ( ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { org.ovirt.engine.core.bll.VmHandler.unlockVm ( org.ovirt.engine.core.bll.VmCommand.getVm ( ) , org.ovirt.engine.core.bll.VmCommand.getCompensationContext ( ) ) ; } } else { setLoggingForCommand ( ) ; log.warn ( "VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm" ) ; } }
public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( org.ovirt.engine.core.compat.Guid vdsGroupId ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsGroupDao ( ) . get ( vdsGroupId ) ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn createVG ( java.lang.String sdUUID , java.lang.String [ ] deviceList , boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "LVMVolumeGroup.create" ) . withParameter ( "name" , sdUUID ) . withParameter ( "devlist" , new java.util.ArrayList < > ( java.util.Arrays.asList ( deviceList ) ) ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "uuid" ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn ( response ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue addStoragePoolInIrs ( ) { return runVdsCommand ( VDSCommandType.CreateStoragePool , new org.ovirt.engine.core.common.vdscommands.CreateStoragePoolVDSCommandParameters ( org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getVds ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getStorageType ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getName ( ) , masterStorageDomain.getId ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getParameters ( ) . getStorages ( ) , org.ovirt.engine.core.bll.storage.AddStoragePoolWithStoragesCommand.getStoragePool ( ) . getmaster_domain_version ( ) ) ) ; }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
protected void revertTask ( ) { org.ovirt.engine.core.compat.Guid targetStorageDomainId = getEnclosingCommand ( ) . getParameters ( ) . getTargetStorageDomainId ( ) ; if ( isMoveDiskInDbSucceded ( targetStorageDomainId ) ) { getEnclosingCommand ( ) . preventRollback ( ) ; } }
private org.ovirt.engine.api.model.Labels mapCollection ( java.util.List < org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > networkLabels ) { org.ovirt.engine.api.model.Labels labels = new org.ovirt.engine.api.model.Labels ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel networkLabel : networkLabels ) { org.ovirt.engine.api.model.Label label = new org.ovirt.engine.api.model.Label ( ) ; label.setId ( networkLabel.getId ( ) ) ; labels.getLabels ( ) . add ( label ) ; addLinks ( label , org.ovirt.engine.api.model.HostNic.class ) ; } return labels ; }
private org.ovirt.engine.core.common.action.VdcReturnValueBase addVmFromScratch ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic ) { org.ovirt.engine.core.common.action.AddVmFromScratchParameters parameters = new org.ovirt.engine.core.common.action.AddVmFromScratchParameters ( vmStatic , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getDiskInfoList ( ) , org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getStorageDomainId ( ) ) ; parameters.setSessionId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getSessionId ( ) ) ; parameters.setDontAttachToDefaultTag ( true ) ; parameters.setDiskOperatorAuthzPrincipalDbId ( org.ovirt.engine.core.bll.AddVmAndAttachToPoolCommand.getParameters ( ) . getDiskOperatorAuthzPrincipalDbId ( ) ) ; return runInternalActionWithTasksContext ( VdcActionType.AddVmFromScratch , parameters ) ; }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addBonds ( org.ovirt.engine.core.common.businessentities.network.Bond ... bonds ) { if ( nullParameters ( bonds ) ) { return this ; } if ( ( parameters.getBonds ( ) ) == null ) { parameters.setBonds ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Bond > ( ) ) ; } parameters.getBonds ( ) . addAll ( java.util.Arrays.asList ( bonds ) ) ; return this ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entity = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) ; boolean inputFieldsEnabled = ( ( java.lang.Boolean ) ( entity.getEntity ( ) ) ) ; getView ( ) . postModelEnabled ( inputFieldsEnabled ) ; }
private org.ovirt.engine.core.common.action.VmManagementParametersBase getUpdateVmParameters ( boolean applyCpuChangesLater ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.core.common.action.VmManagementParametersBase params = new org.ovirt.engine.core.common.action.VmManagementParametersBase ( gettempVm ( ) ) ; params.setSoundDeviceEnabled ( model.getIsSoundcardEnabled ( ) . getEntity ( ) ) ; params.setConsoleEnabled ( model.getIsConsoleDeviceEnabled ( ) . getEntity ( ) ) ; setRngDeviceToParams ( model , params ) ; params.setApplyChangesLater ( applyCpuChangesLater ) ; org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build ( model , params , new org.ovirt.engine.ui.uicommonweb.builders.vm.UnitToGraphicsDeviceParamsBuilder ( ) ) ; return params ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc getQemuImageInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Volume.getQemuImageInfo" ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "imageID" , imgUUID ) . withParameter ( "volumeID" , volUUID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturnForXmlRpc ( response ) ; }
public void testAddOperationAction ( ) { org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.ActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > testOperation = new org.ovirt.engine.ui.frontend.communication.VdcOperation ( org.ovirt.engine.core.common.action.ActionType.AddNetworkOnProvider , new org.ovirt.engine.core.common.action.VdcActionParametersBase ( ) , null ) ; testManager.addOperation ( testOperation ) ; org.mockito.Mockito.verify ( mockOperationProcessor ) . processOperation ( testManager ) ; org.mockito.Mockito.verify ( mockEventBus ) . fireEvent ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.ui.frontend.communication.EngineSessionRefreshedEvent.class ) ) ; org.junit.Assert.assertEquals ( "Operations must match" , testOperation , testManager.pollOperation ( ) ) ; }
public void onAsyncCallFail ( com.gwtplatform.mvp.client.proxy.AsyncCallFailEvent event ) { java.lang.Throwable caught = event.getCaught ( ) ; org.ovirt.engine.ui.common.system.AsyncCallFailureHandler.logger.warning ( ( "Error while performing async call: " + ( caught.getLocalizedMessage ( ) ) ) ) ; errorPopupManager.show ( org.ovirt.engine.ui.common.system.AsyncCallFailureHandler.messages.asyncCallFailure ( caught.getLocalizedMessage ( ) ) ) ; }
public void appendCustomValueUsesNullSeparator ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase ( ) ; final java.lang.String key = "foo" ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String newVal = "bar" ; final java.lang.String sep = null ; b.addCustomValue ( key , value ) ; b.appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn uploadImage ( java.util.Map methodInfo , java.lang.String spUUID , java.lang.String sdUUID , java.lang.String srcImgGUID , java.lang.String srcVolUUID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Image.upload" ) . withParameter ( "methodArgs" , methodInfo ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "imageID" , srcImgGUID ) . withParameter ( "volumeID" , srcVolUUID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "uuid" ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn ( response ) ; }
public void testSubscribe ( ) { dao.subscribe ( newSubscription ) ; java.util.List < org.ovirt.engine.core.common.businessentities.event_subscriber > result = dao.getAllForSubscriber ( newSubscription.getsubscriber_id ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.event_subscriber subscription : result ) { org.junit.Assert.assertEquals ( newSubscriber , subscription.getsubscriber_id ( ) ) ; } }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { validateParameters ( network , getRequiredAddFields ( ) ) ; org.ovirt.engine.api.model.Network entity = map ( network ) ; org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = getAddParameters ( network , entity ) ; return performCreate ( addAction , params , new org.ovirt.engine.api.restapi.resource.DataCenterNetworkIdResolver ( network.getName ( ) , params.getStoragePoolId ( ) . toString ( ) ) ) ; }
public void shouldWeightNothingOnVmStartWithDifferenOsFamilies ( ) { org.ovirt.engine.core.common.businessentities.VDS fedoraHost = newHost ( "Fedora - 23 - 1.fc23" ) ; final org.ovirt.engine.core.common.businessentities.VM newVM = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.assertj.core.api.Assertions.assertThat ( filter ( newVM , tooOldHost , newEnoughHost , fedoraHost ) ) . contains ( org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( tooOldHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( newEnoughHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnitTest.weight ( fedoraHost , org.ovirt.engine.core.bll.scheduling.policyunits.InClusterUpgradeWeightPolicyUnit.BEST_WEIGHT ) ) ; org.assertj.core.api.Assertions.assertThat ( filter ( newVM , tooOldHost , newEnoughHost , fedoraHost ) ) . hasSize ( 3 ) ; }
protected boolean validateBallonDevice ( ) { if ( ! ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBalloonDeviceExists ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVm ( ) . getManagedVmDeviceMap ( ) . values ( ) ) ) ) { return true ; } if ( ! ( osRepository.isBalloonEnabled ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVm ( ) . getStaticData ( ) . getOsId ( ) , getEffectiveCompatibilityVersion ( ) ) ) ) { addValidationMessageVariable ( "clusterArch" , org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup ( ) . getArchitecture ( ) ) ; return failValidation ( EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; } return true ; }
public static void GetSANWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete , org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion ) , aQuery ) ; }
public void getFreeVfNoFreeVf ( ) { freeVfCommon ( 0 , 1 , 2 , 3 , 4 ) ; org.junit.Assert.assertNull ( hostNicVfsConfigHelper.getFreeVf ( nic , null ) ) ; }
private void postGetLunsMessages ( java.util.ArrayList < java.lang.String > usedLunsMessages ) { if ( usedLunsMessages.isEmpty ( ) ) { onSaveSanStorage ( ) ; } else { forceCreationWarning ( usedLunsMessages ) ; } }
public void testUpdateFailed ( ) { try { update ( true , false , 1 ) ; } catch ( javax.ws.rs.WebApplicationException e ) { org.junit.jupiter.api.Assertions.assertNotNull ( e.getResponse ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 400 , e.getResponse ( ) . getStatus ( ) ) ; } }
public void setSelectedItems ( java.util.List value ) { if ( ( selectedItems ) != value ) { SelectedItemsChanging ( value , selectedItems ) ; selectedItems = value ; SelectedItemsChanged ( ) ; getSelectedItemsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SelectedItems" ) ) ; } }
public void setSearchString ( java.lang.String value , boolean checkIfNewValue ) { if ( ( ! checkIfNewValue ) || ( ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( searchString , value ) ) ) ) { searchString = value ; searchStringChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRemoveBricksVDSCommand.getBroker ( ) . glusterVolumeRemoveBrickForce ( org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRemoveBricksVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRemoveBricksVDSCommand.getParameters ( ) . getBrickDirectories ( ) . toArray ( new java.lang.String [ 0 ] ) , org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRemoveBricksVDSCommand.getParameters ( ) . getReplicaCount ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRemoveBricksVDSCommand.ProceedProxyReturnValue ( ) ; }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } upServer = getUpServer ( ) ; if ( ( upServer ) == null ) { addCanDoActionMessage ( java.lang.String.format ( "$clusterName %1$s" , org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroup ( ) . getname ( ) ) ) ; addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND ) ; return false ; } return true ; }
private void addNonDefaultClusterToPool ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup defaultCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; defaultCluster.setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1 ) ; defaultCluster.setId ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.NON_DEFAULT_VDS_GROUP_ID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; clusters.add ( defaultCluster ) ; org.mockito.Mockito.when ( vdsGroupDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( clusters ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assert query.equals ( "" ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.setUpInterfaces ( ) , failure ) ; control.replay ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filteredStorageDomains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : storageDomains ) { if ( ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { filteredStorageDomains.add ( a ) ; } } vmListModel.postExportGetStorageDomainList ( filteredStorageDomains ) ; }
protected void postSaveAction ( boolean succeeded ) { if ( succeeded ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qosItems = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ( ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ) ( getQos ( ) . getItems ( ) ) ) ) ; qosItems.add ( 1 , networkQoS ) ; getQos ( ) . setItems ( qosItems ) ; getQos ( ) . setSelectedItem ( networkQoS ) ; } super . postSaveAction ( succeeded ) ; }
public static boolean isOsTypeSupportedForVirtioScsi ( int osId , org.ovirt.engine.core.compat.Version clusterVersion , java.util.List < java.lang.String > reasons ) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs ( osId , clusterVersion , DiskInterface.VirtIO_SCSI ) ; if ( ! result ) { reasons.add ( EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name ( ) ) ; } return result ; }
private org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Boolean > updateVdsNetworksInTx ( ) { return new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean runInTransaction ( ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.CollectVdsNetworkData , new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase ( getVds ( ) ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks ( ) ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( getVdsGroupId ( ) , net ) ; } return java.lang.Boolean.TRUE ; } } ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData selectedObject = ( ( com.google.gwt.view.client.SingleSelectionModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData > ) ( event.getSource ( ) ) ) . getSelectedObject ( ) ; customSelectionCellFormatType.setEnabledWithToolTip ( selectedObject.getCollapseSnapshots ( ) . getEntity ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.importAllocationModifiedCollapse ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotCreateReturnForXmlRpc glusterVolumeSnapshotCreate ( java.lang.String volumeName , java.lang.String snapshotName , java.lang.String description , boolean force ) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotCreateReturnForXmlRpc ( vdsServer.glusterVolumeSnapshotCreate ( volumeName , snapshotName , description , force ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void vmsMonitoring ( ) { if ( isMonitoringNeeded ( ) ) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = ( getRefreshStatistics ( ) ) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher ( this ) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher ( this ) ; fetcher.fetch ( ) ; new org.ovirt.engine.core.vdsbroker.VmsMonitoring ( this , fetcher.getChangedVms ( ) , fetcher.getVmsWithChangedDevices ( ) , auditLogDirector ) . perform ( ) ; } }
public void testDnsResolverConfigurationInSyncWithHostWhenDhcpIsUsed ( ) { iface.setIpv4DefaultRoute ( false ) ; network.setDnsResolverConfiguration ( sampleDnsResolverConfiguration2 ) ; testedNetworkAttachment.setDnsResolverConfiguration ( null ) ; iface.setIpv4BootProtocol ( Ipv4BootProtocol.DHCP ) ; org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address ( ) ; address.setBootProtocol ( Ipv4BootProtocol.DHCP ) ; testedNetworkAttachment.getIpConfiguration ( ) . setIPv4Addresses ( java.util.Collections.singletonList ( address ) ) ; org.junit.Assert.assertThat ( createTestedInstance ( true , sampleDnsResolverConfiguration ) . isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
private void Preset_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.DiskImageBase preset = ( ( ( org.ovirt.engine.core.common.businessentities.DiskImageBase ) ( getPreset ( ) . getSelectedItem ( ) ) ) != null ) ? ( ( org.ovirt.engine.core.common.businessentities.DiskImageBase ) ( getPreset ( ) . getSelectedItem ( ) ) ) : ( ( org.ovirt.engine.core.common.businessentities.DiskImageBase ) ( org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.DiskImageBase > FirstOrDefault ( getPreset ( ) . getItems ( ) ) ) ) ; setVolumeFormat ( preset.getVolumeFormat ( ) ) ; getVolumeType ( ) . setSelectedItem ( preset.getVolumeType ( ) ) ; }
public void getCinderVolumeTypesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > > ( ) { @ java.lang.Override public java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetCinderVolumeTypesByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.job.Job getJob ( org.ovirt.engine.core.bll.CommandBase < ? > command , org.ovirt.engine.core.common.action.ActionType actionType ) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = command.getParameters ( ) ; org.ovirt.engine.core.common.job.Job job ; if ( ( params.getJobId ( ) ) != null ) { job = jobDao.get ( params.getJobId ( ) ) ; } else { job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob ( actionType , command ) ; jobRepository.saveJob ( job ) ; } return job ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.CancelMigrate , new org.ovirt.engine.core.vdsbroker.vdsbroker.CancelMigrationVDSParameters ( org.ovirt.engine.core.bll.CancelMigrateVmCommand.getVm ( ) . getRunOnVds ( ) , org.ovirt.engine.core.bll.CancelMigrateVmCommand.getParameters ( ) . getVmId ( ) , false ) ) ; setSucceeded ( retVal.getSucceeded ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment createNetworkAttachment ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.HostNetworkQos hostNetworkQos ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; networkAttachment.setHostNetworkQos ( org.ovirt.engine.core.common.businessentities.network.AnonymousHostNetworkQos.fromHostNetworkQos ( hostNetworkQos ) ) ; networkAttachment.setNetworkId ( network.getId ( ) ) ; return networkAttachment ; }
public static void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
private void qos ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.network.NetworkQoS expectedQos ) { qos ( network , iface , expectedQos , false ) ; }
private void addStatistics ( org.ovirt.engine.api.model.HostNic model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { model.setStatistics ( new org.ovirt.engine.api.model.Statistics ( ) ) ; org.ovirt.engine.api.restapi.resource.HostNicStatisticalQuery query = new org.ovirt.engine.api.restapi.resource.HostNicStatisticalQuery ( newModel ( model.getId ( ) ) ) ; java.util.List < org.ovirt.engine.api.model.Statistic > statistics = query.getStatistics ( entity ) ; for ( org.ovirt.engine.api.model.Statistic statistic : statistics ) { org.ovirt.engine.api.utils.LinkHelper.addLinks ( uriInfo , statistic , query.getParentType ( ) ) ; } model.getStatistics ( ) . getStatistics ( ) . addAll ( statistics ) ; }
private java.util.Set < org.ovirt.engine.core.compat.Guid > getStorageGuidSet ( ) { java.util.Set < org.ovirt.engine.core.compat.Guid > destImageDomains = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskInfoDestinationMap.values ( ) ) { destImageDomains.add ( diskImage.getStorageIds ( ) . get ( 0 ) ) ; } return destImageDomains ; }
public org.ovirt.engine.core.bll.ValidationResult passwordNotEmpty ( boolean addPending , org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod authMethod , java.lang.String password ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.VDS_CANNOT_INSTALL_EMPTY_PASSWORD ) . when ( ( ( ( ! addPending ) && ( authMethod == ( org.ovirt.engine.core.common.action.VdsOperationActionParameters.AuthenticationMethod.Password ) ) ) && ( org.apache.commons.lang.StringUtils.isEmpty ( password ) ) ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > getBricksToRemove ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity ( ) ; brick.setId ( GUIDS [ 0 ] ) ; brick.setVolumeId ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId ) ; bricks.add ( brick ) ; return bricks ; }
private boolean networkExists ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network_cluster > networks = org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO ( ) . getAllForCluster ( org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.getVdsGroupId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network_cluster network_cluster : networks ) { if ( network_cluster.getnetwork_id ( ) . equals ( getNetwork ( ) . getId ( ) ) ) { return true ; } } return false ; }
public boolean validate ( ) { if ( ! ( getIsAvailable ( ) ) ) { return true ; } getCpuLimit ( ) . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) , new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation ( 0 , ( ( java.lang.Integer ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigValues.MaxCpuLimitQosValue ) ) ) ) } ) ; setIsValid ( getCpuLimit ( ) . getIsValid ( ) ) ; return getIsValid ( ) ; }
public void setSessionid ( java.lang.String sessionid ) { this . sessionid = sessionid ; }
public void testRefreshStatusNoSessions ( ) { org.mockito.Mockito.doReturn ( getSessionDetailsVDSReturnVal ( false ) ) . when ( syncJob ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeGeoRepSessionStatus ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters.class ) ) ; syncJob.refreshGeoRepSessionStatus ( ) ; org.mockito.Mockito.verify ( geoRepDao , org.mockito.Mockito.times ( 0 ) ) . saveOrUpdateDetailsInBatch ( org.mockito.ArgumentMatchers.anyList ( ) ) ; }
private static void GetVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVlanParanet , new org.ovirt.engine.core.common.queries.GetAllChildVlanInterfacesQueryParameters ( vdsID , iface ) , aQuery ) ; }
public void removeRepoDomainFileList ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.businessentities.storage.ImageFileType fileType ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "storage_domain_id" , id ) ; if ( ( fileType == null ) || ( fileType == ( org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All ) ) ) { parameterSource.addValue ( "file_type" , null ) ; } else { parameterSource.addValue ( "file_type" , fileType.getValue ( ) ) ; } getCallsHandler ( ) . executeModification ( "DeleteRepo_domain_file_list" , parameterSource ) ; }
private org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters createParameters ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters parameters = new org.ovirt.engine.core.common.action.hostdeploy.UpdateVdsActionParameters ( ) ; parameters.setvds ( host ) ; parameters.setVdsId ( host.getId ( ) ) ; parameters.setAuthMethod ( AuthenticationMethod.PublicKey ) ; parameters.setPassword ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommandTest.PASSWORD ) ; parameters.setHostedEngineDeployConfiguration ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommandTest.HOSTED_ENGINE_DEPLOY_CONFIGURATION ) ; return parameters ; }
protected java.lang.String getSearchPattern ( java.lang.String username , java.lang.String domain ) { java.lang.String constraint = org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( getUriInfo ( ) , org.ovirt.engine.core.common.businessentities.DbUser.class , false ) ; final java.lang.StringBuilder sb = new java.lang.StringBuilder ( 128 ) ; sb.append ( java.text.MessageFormat.format ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceBase.AD_SEARCH_TEMPLATE , ( ( parent ) != null ? parent.getDirectory ( ) . getName ( ) : domain ) ) ) ; sb.append ( ( org.apache.commons.lang.StringUtils.isEmpty ( constraint ) ? "allnames=" + username : constraint ) ) ; return sb.toString ( ) ; }
private void setFinalStatic ( java.lang.reflect.Field field , java.lang.Object newValue ) throws java.lang.Exception { field.setAccessible ( true ) ; java.lang.reflect.Field modifiersField = java.lang.reflect.Field.class . getDeclaredField ( "modifiers" ) ; modifiersField.setAccessible ( true ) ; modifiersField.setInt ( field , ( ( field.getModifiers ( ) ) & ( ~ ( java.lang.reflect.Modifier.FINAL ) ) ) ) ; field.set ( null , newValue ) ; }
public void isClusterEmpty ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { runQueryByIdParameter ( VdcQueryType.IsClusterEmpty , aQuery , clusterId ) ; }
public void oneDiskImagesDoesntExist ( ) { org.mockito.Mockito.doReturn ( false ) . when ( baseDiskDao ) . exists ( disk1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( baseDiskDao ) . exists ( disk2 ) ; org.junit.Assert.assertThat ( diskExistenceValidator.disksNotExist ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST , ( "$diskIds " + ( disk1.toString ( ) ) ) ) ) ; }
public static org.ovirt.engine.api.model.StorageDomainType map ( org.ovirt.engine.api.model.StorageDomainType storageDomainType , org.ovirt.engine.api.model.StorageDomainType template ) { switch ( storageDomainType ) { case DATA : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ; case EXPORT : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ; case IMAGE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ; case VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.StorageDomainType ; default : return null ; } }
protected void executeDiskModifications ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) . setId ( vmId ) ; model.getInstanceImages ( ) . executeDiskModifications ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getcurrentVm ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getAllForStoragePoolAndStatus ( org.ovirt.engine.core.compat.Guid storagePool , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { return getAllForStoragePoolAndStatuses ( storagePool , ( status != null ? java.util.EnumSet.of ( status ) : null ) ) ; }
private void storageDomain_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain selectedStorage = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getStorageDomain ( ) . getSelectedItem ( ) ) ) ; if ( ( selectedStorage != null ) && ( getIsNew ( ) ) ) { setDefaultVolumeType ( selectedStorage.getStorageType ( ) ) ; } updateQuota ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallBackEnabled ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > cmdEntities = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ; for ( org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet ( ) ) { cmdEntity = commandsCache.get ( cmdId ) ; if ( commandsCache.get ( cmdId ) . isCallBackEnabled ( ) ) { cmdEntities.add ( cmdEntity ) ; } } return cmdEntities ; }
public com.google.gwt.resources.client.ImageResource getValue ( T item ) { java.lang.String osTypeName = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getOsUniqueOsNames ( ) . get ( extractor.extractOsType ( item ) ) ; com.google.gwt.resources.client.ResourcePrototype resource = org.ovirt.engine.ui.userportal.widget.table.column.AbstractMaskedVmImageColumn.resourcesWithLookup.getResource ( ( osTypeName + "SmallImage" ) ) ; if ( ! ( resource instanceof com.google.gwt.resources.client.ImageResource ) ) { resource = org.ovirt.engine.ui.userportal.widget.table.column.AbstractMaskedVmImageColumn.resourcesWithLookup.otherSmallImage ( ) ; } return ( ( com.google.gwt.resources.client.ImageResource ) ( resource ) ) ; }
protected void executeVmCommand ( ) { if ( diskShouldBeUnPlugged ( ) ) { performPlugCommand ( VDSCommandType.HotUnPlugDisk , disk , vmDevice ) ; } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao ( ) . remove ( vmDevice.getId ( ) ) ; org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB ( org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm ( ) . getStaticData ( ) ) ; org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded ( true ) ; }
protected org.ovirt.engine.api.model.Storage lookupStorage ( java.lang.String id ) { for ( org.ovirt.engine.core.common.businessentities.LUNs lun : getLogicalUnits ( ) ) { if ( lun.getLUN_id ( ) . equals ( id ) ) { return addLinks ( map ( lun ) ) ; } } for ( org.ovirt.engine.api.restapi.resource.StorageDomain vg : getVolumeGroups ( ) ) { if ( vg.getstorage ( ) . equals ( id ) ) { return addLinks ( map ( vg ) ) ; } } return notFound ( ) ; }
private void verifyPowerManagement ( org.ovirt.engine.api.model.Agent agent ) { assertNotNull ( agent ) ; assertEquals ( "foo" , agent.getType ( ) ) ; assertEquals ( 2 , agent.getOptions ( ) . getOptions ( ) . size ( ) ) ; verifyOption ( agent.getOptions ( ) . getOptions ( ) . get ( 0 ) , "one" , "int" ) ; verifyOption ( agent.getOptions ( ) . getOptions ( ) . get ( 1 ) , "two" , "bool" ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > pmOptions = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; if ( pmOptions != null ) { getPmSecondaryPort ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey ) ) ; getPmSecondarySlot ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey ) ) ; getPmSecondarySecure ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey ) ) ; } }
private void initStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setId ( storageDomainId ) ; storageDomain.setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito.when ( storageDomainDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( storageDomainDao.getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; }
public boolean Validate ( ) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation tempVar = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation ( ) ; tempVar.setMinimum ( 1 ) ; tempVar.setMaximum ( 100 ) ; getOverCommitTime ( ) . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) , tempVar } ) ; return getOverCommitTime ( ) . getIsValid ( ) ; }
public static org.apache.commons.httpclient.HttpClient getClient ( ) { org.apache.commons.httpclient.HttpClient httpClient = new org.apache.commons.httpclient.HttpClient ( ) ; if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.SecureConnectionWithOATServers ) ) { java.net.URL trustStoreUrl ; try { int port = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.AttestationPort ) ; trustStoreUrl = new java.net.URL ( ( "file://" + ( org.ovirt.engine.core.common.config.Config.resolveAttestationTrustStorePath ( ) ) ) ) ; java.lang.String truststorePassword = org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.AttestationTruststorePass ) ; java.lang.String attestationServer = org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.AttestationServer ) ; org.apache.commons.httpclient.protocol.ProtocolSocketFactory factory = new org.ovirt.engine.core.utils.ssl.AuthSSLProtocolSocketFactory ( org.ovirt.engine.core.vdsbroker.attestation.AttestationService.getTrustStore ( trustStoreUrl.getPath ( ) , truststorePassword ) , org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.ExternalCommunicationProtocol ) ) ; org.apache.commons.httpclient.protocol.Protocol clientAuthHTTPS = new org.apache.commons.httpclient.protocol.Protocol ( "https" , factory , port ) ; httpClient.getHostConfiguration ( ) . setHost ( attestationServer , port , clientAuthHTTPS ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.attestation.AttestationService.log.error ( "Failed to init AuthSSLProtocolSocketFactory. SSL connections will not work: {}" , e.getMessage ( ) ) ; org.ovirt.engine.core.vdsbroker.attestation.AttestationService.log.debug ( "Exception" , e ) ; } } return httpClient ; }
public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance ( ) { initCommand ( getOvfEntityData ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain ( ) ; storageDomain.setStatus ( StorageDomainStatus.Maintenance ) ; org.mockito.Mockito.doReturn ( storageDomain ) . when ( cmd ) . getStorageDomain ( ) ; org.mockito.Mockito.when ( validator.validateUnregisteredEntity ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.IVdcQueryable.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.OvfEntityData.class ) , org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ; }
public void generateDiskDescriptionWhenAliasIsTruncated ( ) throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateRandomString ( 200 ) ; disk.setDiskAlias ( alias ) ; disk.setDiskDescription ( "DiskDescription" ) ; assertDiskDescriptionMap ( disk , org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry ( alias.substring ( 0 , org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.DISK_ALIAS_MAX_LENGTH ) ) ) ; }
public static void getHostById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void testValidModifiedBondsFailsWhenReferencingExistingNonBondInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_IS_NOT_BOND ; org.ovirt.engine.core.bll.ValidationResult notABondValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , bond.getName ( ) ) ) ; doTestValidModifiedBonds ( bond , notABondValidationResult , notABondValidationResult , ValidationResult.VALID ) ; }
private void syncStorageDomainInfo ( java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > > hostConnectionInfo ) { for ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Boolean > pair : hostConnectionInfo ) { if ( java.lang.Boolean.TRUE.equals ( pair.getSecond ( ) ) ) { if ( org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance ( ) . getItem ( org.ovirt.engine.core.bll.storage.domain.ActivateStorageDomainCommand.getStorageDomain ( ) . getStorageType ( ) ) . syncDomainInfo ( org.ovirt.engine.core.bll.storage.domain.ActivateStorageDomainCommand.getStorageDomain ( ) , pair.getFirst ( ) ) ) { break ; } } } }
public void testRemove ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetVmHostDevicesExpectations ( ) ; setUpActionExpectations ( ActionType.RemoveVmHostDevices , org.ovirt.engine.core.common.action.VmHostDevicesParameters.class , new java.lang.String [ ] { "VmId" , "DeviceNames" } , new java.lang.Object [ ] { VM_ID , java.util.Collections.singletonList ( org.ovirt.engine.api.restapi.resource.DEVICE_NAME ) } , true , true ) ; verifyRemove ( resource.remove ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult validateStoragePoolUp ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.StoragePool storagePool , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > vmImages ) { if ( ( vmImages.isEmpty ( ) ) || ( vm.isAutoStartup ( ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool ) . isUp ( ) ; }
public static void getNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void updateOriginalTemplateNameOnDerivedVms ( ) { boolean templateNameChanged = ! ( java.util.Objects.equals ( oldTemplate.getName ( ) , org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) . getName ( ) ) ) ; if ( templateNameChanged ) { vmDao.updateOriginalTemplateName ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) . getId ( ) , org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) . getName ( ) ) ; } }
private void vmInitEnabledChanged ( ) { if ( ! ( getVmInitEnabled ( ) . getEntity ( ) ) ) { getSysprepEnabled ( ) . setEntity ( false ) ; getCloudInitEnabled ( ) . setEntity ( false ) ; } else { getSysprepEnabled ( ) . setEntity ( getIsWindowsOS ( ) ) ; getCloudInitEnabled ( ) . setEntity ( ( ! ( getIsWindowsOS ( ) ) ) ) ; autoSetHostname ( ) ; } }
public void testGenerateFullSpecParams ( ) { org.ovirt.engine.core.common.businessentities.VmRngDevice dev = new org.ovirt.engine.core.common.businessentities.VmRngDevice ( ) ; dev.setBytes ( 12 ) ; dev.setPeriod ( 34 ) ; dev.setSource ( VmRngDevice.Source.RANDOM ) ; java.util.Map < java.lang.String , java.lang.Object > expectedParams = new java.util.HashMap < > ( ) ; expectedParams.put ( "bytes" , "12" ) ; expectedParams.put ( "period" , "34" ) ; expectedParams.put ( "source" , "random" ) ; org.junit.jupiter.api.Assertions.assertEquals ( expectedParams , dev.getSpecParams ( ) ) ; }
protected void verifyRemoveAllDelegatedCorrectly ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface ) { org.mockito.Mockito.verify ( macPoolManager , org.mockito.Mockito.times ( 1 ) ) . freeMac ( iface.getMacAddress ( ) ) ; org.mockito.Mockito.verify ( vmNicDao ) . remove ( iface.getId ( ) ) ; org.mockito.Mockito.verify ( vmNetworkStatisticsDAO ) . remove ( iface.getId ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( isRoleNetwork ( ) ) && ( ( ( ipConfiguration == null ) || ( ! ( ipConfiguration.hasIpv4PrimaryAddressSet ( ) ) ) ) || ( ( ipConfiguration.getIpv4PrimaryAddress ( ) . getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.NONE ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , getNetwork ( ) . getName ( ) ) ) . when ( failWhen ) ; }
private java.lang.String getTicket ( org.ovirt.engine.api.model.GraphicsType graphicsTypeEntity ) { final org.ovirt.engine.core.common.queries.GetSignedWebsocketProxyTicketParams params = new org.ovirt.engine.core.common.queries.GetSignedWebsocketProxyTicketParams ( guid , graphicsTypeEntity ) ; final org.ovirt.engine.core.common.queries.VdcQueryReturnValue ticketQueryReturnValue = runQuery ( VdcQueryType.GetSignedWebsocketProxyTicket , params ) ; if ( ! ( ticketQueryReturnValue.getSucceeded ( ) ) ) { try { backendFailure ( ticketQueryReturnValue.getExceptionString ( ) ) ; } catch ( org.ovirt.engine.api.restapi.resource.BackendFailureException ex ) { handleError ( ex , false ) ; } } return ticketQueryReturnValue.getReturnValue ( ) ; }
public boolean isValid ( org.ovirt.engine.core.common.businessentities.VDSGroup value , javax.validation.ConstraintValidatorContext context ) { if ( ( value.supportsVirtService ( ) ) && ( ( value.getCpuName ( ) ) == null ) ) { context.disableDefaultConstraintViolation ( ) ; context.buildConstraintViolationWithTemplate ( "VDS_GROUP_CPU_TYPE_CANNOT_BE_NULL" ) . addNode ( "cpu_name" ) . addConstraintViolation ( ) ; return false ; } return true ; }
private void createUpVds ( ) { org.mockito.Mockito.when ( vdsDao.getAllForStoragePoolAndStatus ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.Matchers.eq ( VDSStatus.Up ) ) ) . thenReturn ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.businessentities.VDS ( ) ) ) ; }
protected void onLogin ( final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel ) { org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . setSsoToken ( user.getEngineSessionId ( ) ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . init ( ) ; org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . getReportsInitEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { commonModelProvider.get ( ) . updateReportsAvailability ( ) ; } } ) ; performLogin ( loginModel ) ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook entity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook ( ) ; entity.setHookId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "hook_id" ) ) ) ; entity.setServerId ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "server_id" ) ) ) ; entity.setStatus ( rs.getString ( "hook_status" ) ) ; entity.setContentType ( rs.getString ( "content_type" ) ) ; entity.setChecksum ( rs.getString ( "checksum" ) ) ; return entity ; }
protected org.ovirt.engine.api.model.Host postPopulate ( org.ovirt.engine.api.model.Host from ) { while ( ( from.getPort ( ) ) == 0 ) { from.setPort ( org.ovirt.engine.api.restapi.types.MappingTestHelper.rand ( 65535 ) ) ; } from.setProtocol ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.HostProtocol.class ) . value ( ) ) ; from.getSpm ( ) . setPriority ( 3 ) ; return from ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "AddNetwork" ) ) { addNetwork ( ) ; } if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "AddDisk" ) ) { addDisk ( ) ; } if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "Cancel" ) ) { cancel ( ) ; } }
protected boolean setAndValidateCpuProfile ( ) { getVm ( ) . getStaticData ( ) . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroupId ( ) ) ; getVm ( ) . getStaticData ( ) . setCpuProfileId ( getParameters ( ) . getCpuProfileId ( ) ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ) ; }
private java.lang.String composeExistingVmsWarningMessage ( java.util.List < T > existingVms ) { final java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( T t : existingVms ) { list.add ( extractNameFromEntity ( t ) ) ; } return org.ovirt.engine.ui.uicompat.external.StringUtils.join ( list , ", " ) ; }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > getAliasColumn ( java.lang.String sortBy ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < org.ovirt.engine.core.common.businessentities.Disk > ( ) { @ java.lang.Override public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { return object.getDiskAlias ( ) ; } } ; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable ( column , sortBy ) ; }
public void ResetIrs ( ) { nullifyInternalProxies ( ) ; org.ovirt.engine.core.common.businessentities.storage_pool storagePool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . get ( _storagePoolId ) ; if ( storagePool != null ) { storagePool.setspm_vds_id ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolDao ( ) . update ( storagePool ) ; } }
private void handleResuming ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.lockImage ( ) ; log.info ( "Resuming transfer for {}" , getTransferDescription ( ) ) ; auditLog ( this , AuditLogType.TRANSFER_IMAGE_RESUMED_BY_USER ) ; extendTicketIfNecessary ( context ) ; updateEntityPhase ( ImageTransferPhase.TRANSFERRING ) ; resetPeriodicPauseLogTime ( 0 ) ; }
public java.util.Map < java.lang.String , org.ovirt.optimizer.rest.dto.DebugSnapshot > getDebugSnapshot ( ) throws java.io.IOException { response.getOutputHeaders ( ) . putSingle ( "Access-Control-Allow-Origin" , "*" ) ; response.getOutputHeaders ( ) . putSingle ( "Access-Control-Allow-Methods" , "GET" ) ; if ( ! ( configProvider.load ( ) . getConfig ( ) . getProperty ( ConfigProvider.DEBUG_ENDPOINT_ENABLED , "false" ) . equals ( "true" ) ) ) { response.sendError ( 403 , "Debug url is disabled, please check your configuration." ) ; return null ; } return optimizer.getDebugSnapshot ( ) ; }
private void addChildren ( org.ovirt.engine.core.common.businessentities.Tags tag ) { org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added to tree" , tag.getTagName ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Tags > children = tagDao.getAllForParent ( tag.getTagId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Tags child : children ) { addChildren ( child ) ; org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added as child to parent '{}'" , child.getTagName ( ) , tag.getTagName ( ) ) ; tag.getChildren ( ) . add ( child ) ; addTagToHash ( tag ) ; addTagToHash ( child ) ; } }
private java.util.stream.Stream < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > createRegularNics ( int numberOfMocks ) { boolean migratable = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextBoolean ( ) ; return createMocks ( ( ) -> mockVnic ( false , migratable , true ) , numberOfMocks ) ; }
public void getCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > getNumaNodes ( org.ovirt.engine.core.compat.Guid vmId ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VmNumaNode > numaNodes = new java.util.ArrayList < > ( ) ; java.util.Map < java.lang.Integer , org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel > numaModels = numaModelsPerVm.get ( vmId ) ; if ( numaModels != null ) { for ( final org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel model : numaModels.values ( ) ) { if ( model != null ) { numaNodes.add ( model.toVmNumaNode ( ) ) ; } } } return numaNodes ; }
private static java.lang.Double computeInterfaceUsage ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { java.lang.Double receiveRate = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.truncatePercentage ( iface.getStatistics ( ) . getReceiveRate ( ) ) ; java.lang.Double transmitRate = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.truncatePercentage ( iface.getStatistics ( ) . getTransmitRate ( ) ) ; if ( receiveRate == null ) { return transmitRate ; } else if ( transmitRate == null ) { return receiveRate ; } else { return java.lang.Math.max ( receiveRate , transmitRate ) ; } }
public void onSuccess ( java.lang.Object nothing , java.lang.Object returnValue ) { org.ovirt.engine.core.common.businessentities.VmTemplate baseTemplate = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion templateCouple = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion ( baseTemplate , template ) ; setReadOnlyTemplateWithVersion ( templateCouple ) ; }
public void failWhenProxyHostNotAvailable ( ) { org.mockito.Mockito.when ( proxyLocator.isProxyHostAvailable ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > messages = new java.util.LinkedList < > ( ) ; boolean result = validator.isProxyHostAvailable ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , messages ) ; org.junit.jupiter.api.Assertions.assertFalse ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , messages.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "VDS_NO_VDS_PROXY_FOUND" , messages.get ( 0 ) ) ; }
private void removeMacFromMap ( java.util.Map < java.lang.String , java.lang.Integer > macMap , java.lang.String mac ) { if ( ( macMap.get ( mac ) ) <= 1 ) { macMap.remove ( mac ) ; } else { decrementMacInMap ( macMap , mac ) ; } }
private org.ovirt.engine.core.bll.ValidationResult vmNotDuringMigration ( ) { if ( ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm ( ) . getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom ) ) || ( ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm ( ) . getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_MIGRATION_IN_PROGRESS ) ; } return ValidationResult.VALID ; }
public void appendCustomValueDoesntHandleNullKeys ( ) { final java.lang.String key = null ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String sep = "_" ; b.appendCustomValue ( key , value , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( value , s ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , cinderConnectionInfo ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > getVideoDeviceSpecParams ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { return org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceSpecParams ( vmBase ) ; }
private static org.ovirt.engine.core.common.businessentities.network.NetworkQoS getEmptyQos ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.emptyQos ) == null ) { org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.emptyQos = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS ( ) ; org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.emptyQos.setName ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . unlimitedQoSTitle ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.emptyQos.setId ( Guid.Empty ) ; } return org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel.emptyQos ; }
protected void verifyModel ( org.ovirt.engine.api.model.GlusterHook model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "create" , model.getGlusterCommand ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterHooksResourceTest.clusterId.toString ( ) , model.getCluster ( ) . getId ( ) ) ; verifyLinks ( model ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.VmPool getVmPoolCached ( ) { if ( ( ( vmPoolCached ) == null ) && ( ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) . getVmPoolId ( ) ) != null ) ) { vmPoolCached = getVmPoolDao ( ) . get ( org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm ( ) . getVmPoolId ( ) ) ; } return vmPoolCached ; }
public static java.lang.String map ( org.ovirt.engine.api.model.DiskInterface diskInterface , java.lang.String template ) { switch ( diskInterface ) { case IDE : return DiskInterface.IDE.value ( ) ; case VirtIO : return DiskInterface.VIRTIO.value ( ) ; case VirtIO_SCSI : return DiskInterface.VIRTIO_SCSI.value ( ) ; default : return null ; } }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.Statistic > collection ) throws java.lang.Exception { org.junit.Assert.assertNotNull ( collection ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResourceTest.STATISTICS.length , collection.size ( ) ) ; for ( int i = 0 ; i < ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResourceTest.STATISTICS.length ) ; i ++ ) { org.ovirt.engine.api.model.Statistic statistic = collection.get ( i ) ; org.ovirt.engine.api.restapi.resource.BackendStatisticsResourceTest.verify ( statistic , org.ovirt.engine.api.restapi.resource.BackendStatisticsResourceTest.STATISTICS [ i ] ) ; verifyLinks ( statistic ) ; } }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpGetPayloadExpectations ( 0 ) ; setUpGetBallooningExpectations ( ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void testNoChanges ( ) { org.ovirt.engine.core.utils.Jedi jedi1 = new org.ovirt.engine.core.utils.Jedi ( ) ; org.ovirt.engine.core.utils.Jedi jedi2 = new org.ovirt.engine.core.utils.Jedi ( ) ; java.util.List < java.lang.String > changes = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields ( jedi1 , jedi2 ) ; org.junit.Assert.assertTrue ( "Should be no changes" , ( ( changes.size ( ) ) == 0 ) ) ; }
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { return ( ( org.ovirt.engine.core.utils.transaction.TransactionMethod < ? > ) ( invocation.getArguments ( ) [ 0 ] ) ) . runInTransaction ( ) ; }
protected void sendWarningForNonExportableDisks ( org.ovirt.engine.core.common.businessentities.VM entity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getVmDiskList ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > > ( ) { @ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > vmDisks ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( model , vmDisks , VmModelHelper.WarningType.VM_EXPORT ) ; } } ) , entity.getId ( ) ) ; }
public void qosNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; iface.setQosOverridden ( true ) ; iface.setQos ( createQos ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO ( ) . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusters ( ) ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( cluster.getId ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded ( true ) ; }
public void testUpdateNotExistingConnection ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetNotExistingEntityExpectations ( ) ; try { resource.update ( getModel ( 3 ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public java.lang.Integer answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { for ( java.util.Map.Entry < java.lang.Integer , java.lang.String > entry : osIdsToNames.entrySet ( ) ) { if ( invocation.getArguments ( ) [ 0 ] . equals ( entry.getValue ( ) ) ) { return entry.getKey ( ) ; } } return 0 ; }
public void testGetAllDiskImageSearch ( ) throws java.lang.Exception { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "Disk" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.Disk ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( diskImageResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
private void mockVmWithDisk ( org.ovirt.engine.core.compat.Guid storageId ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( storageId ) ) ) ; mockVm ( ) . getDiskMap ( ) . put ( image.getId ( ) , image ) ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { return ( ( clusterNetworkModel.isAttached ( ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ) && ( ( ! ( isMultipleSelectionAllowed ( ) ) ) || ( ! ( clusterNetworkModel.isManagement ( ) ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName , java.lang.String content , java.lang.String checksum ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHookUpdate ( glusterCommand , stage , hookName , content , checksum ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc changeDisk ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.Object > driveSpec ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.changeCD ( vmId , driveSpec ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.OneVmReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private boolean deviceCanBeRemoved ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { if ( ( ! ( vmDevice.getDevice ( ) . equals ( VmDeviceType.DISK.getName ( ) ) ) ) || ( ! ( vmDevice.isManaged ( ) ) ) ) { return true ; } return ( ( vmDevice.getSnapshotId ( ) ) == null ) && ( diskDao.get ( vmDevice.getDeviceId ( ) ) . isAllowSnapshot ( ) ) ; }
public void writeData ( java.io.ObjectOutputStream dos ) { try { writeString ( this . var_name , dos ) ; writeDate ( this . var_datetime , dos ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } }
public void addSubTabActionButton ( org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType , org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType , java.lang.String label , org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface ) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken ( subTabEntityType ) ; if ( historyToken != null ) { org.ovirt.engine.ui.common.presenter.AddTabActionButtonEvent.fire ( this , historyToken , createButtonDefinition ( label , actionButtonInterface ) ) ; } }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { org.ovirt.engine.core.common.eventqueue.EventResult result = new org.ovirt.engine.core.common.eventqueue.EventResult ( true , org.ovirt.engine.core.common.eventqueue.EventType.DOMAINMONITORING ) ; updateProblematicVdsData ( vdsId , vdsName , domainsInProblems ) ; updateMaintenanceVdsData ( vdsId , vdsName , domainsInMaintenance ) ; return result ; }
public void setup ( ) { createValidator ( ) ; org.mockito.Mockito.when ( dbFacade.getInterfaceDao ( ) ) . thenReturn ( interfaceDao ) ; org.mockito.Mockito.when ( dbFacade.getHostNicVfsConfigDao ( ) ) . thenReturn ( vfsConfigDao ) ; org.mockito.Mockito.when ( dbFacade.getVdsDao ( ) ) . thenReturn ( vdsDao ) ; org.mockito.Mockito.when ( dbFacade.getNetworkDao ( ) ) . thenReturn ( networkDao ) ; }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected org.ovirt.engine.api.model.Disk addParents ( org.ovirt.engine.api.model.Disk disk ) { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( storageDomainId.toString ( ) ) ; org.ovirt.engine.api.model.StorageDomains storageDomains = new org.ovirt.engine.api.model.StorageDomains ( ) ; storageDomains.getStorageDomains ( ) . add ( storageDomain ) ; disk.setStorageDomain ( storageDomain ) ; disk.setStorageDomains ( storageDomains ) ; return disk ; }
public void moveFloatingDisk ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; command.init ( ) ; command.updateParameters ( ) ; org.junit.Assert.assertEquals ( 1 , command.getMoveDiskParametersList ( ) . size ( ) ) ; }
public java.lang.Void runInTransaction ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getNetworkDao ( ) . getAllForCluster ( vds.getVdsGroupId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : networks ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( vds.getVdsGroupId ( ) , net ) ; } return null ; }
protected org.ovirt.engine.api.model.GlusterVolume addParents ( org.ovirt.engine.api.model.GlusterVolume model ) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster ( ) ; cluster.setId ( org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResourceTest.clusterId.toString ( ) ) ; model.setCluster ( cluster ) ; return model ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters ( ) . getEntityId ( ) . toString ( ) , new org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > ( LockingGroup.DISK.name ( ) , getDiskIsBeingRemovedLockMessage ( ) ) ) ; }
private void proposeDiscover ( ) { boolean proposeDiscover = ( ! ( getProposeDiscoverTargets ( ) ) ) && ( ( ( getItems ( ) ) == null ) || ( ( org.ovirt.engine.ui.uicommonweb.Linq.count ( getItems ( ) ) ) == 0 ) ) ; setProposeDiscoverTargets ( proposeDiscover ) ; }
private void remoteFileName ( java.lang.String file ) { if ( ( ( ( ( file.indexOf ( '\'' ) ) != ( - 1 ) ) || ( ( file.indexOf ( '\n' ) ) != ( - 1 ) ) ) || ( ( file.indexOf ( '\r' ) ) != ( - 1 ) ) ) || false ) { throw new java.lang.IllegalArgumentException ( "File name should not contain \"\'\"" ) ; } }
protected void endSuccessfully ( ) { if ( ( ! ( org.ovirt.engine.core.bll.RemoveAllCinderSnapshotDisksCommand.getParameters ( ) . isParentHasTasks ( ) ) ) && ( org.ovirt.engine.core.bll.RemoveAllCinderSnapshotDisksCommand.getParameters ( ) . isInvokeEndActionOnParent ( ) ) ) { org.ovirt.engine.core.bll.RemoveAllCinderSnapshotDisksCommand.getBackend ( ) . endAction ( org.ovirt.engine.core.bll.RemoveAllCinderSnapshotDisksCommand.getParameters ( ) . getParentCommand ( ) , org.ovirt.engine.core.bll.RemoveAllCinderSnapshotDisksCommand.getParameters ( ) . getParentParameters ( ) , null ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.initOsIds ( ) ; }
public void testExecuteQueryWithDirectOnly ( ) { org.ovirt.engine.core.dao.PermissionDAO permissionDAOMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.PermissionDAO.class ) ; org.mockito.Mockito.when ( permissionDAOMock.getAllForEntity ( objectID , getUser ( ) . getUserId ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( mockedPermissions ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getPermissionDao ( ) ) . thenReturn ( permissionDAOMock ) ; assertQueryDAOCall ( true ) ; }
protected void executeVdsBrokerCommand ( ) { try { status = org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.getBroker ( ) . setNumberOfCpus ( org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) , java.lang.String.valueOf ( org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.getParameters ( ) . getNumberOfCpus ( ) ) ) ; org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.proceedProxyReturnValue ( ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.setVdsRuntimeErrorAndReport ( e ) ; org.ovirt.engine.core.vdsbroker.SetNumberOfCpusVDSCommand.getVDSReturnValue ( ) . setExceptionString ( null ) ; } }
private void addVmStatistics ( ) { org.ovirt.engine.core.common.businessentities.VmStatistics stats = new org.ovirt.engine.core.common.businessentities.VmStatistics ( ) ; stats.setId ( getVmId ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmStatisticsDAO ( ) . save ( stats ) ; getCompensationContext ( ) . snapshotNewEntity ( stats ) ; getCompensationContext ( ) . stateChanged ( ) ; }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) ) ; }
public void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; initializeObjectState ( ) ; jobProperties.put ( VdcObjectType.Snapshot.name ( ) . toLowerCase ( ) , org.ovirt.engine.core.bll.RemoveSnapshotCommand.getSnapshotName ( ) ) ; } return jobProperties ; }
public static org.ovirt.engine.api.model.StorageType map ( org.ovirt.engine.api.model.StorageType storageType , org.ovirt.engine.api.model.StorageType template ) { switch ( storageType ) { case ISCSI : return org.ovirt.engine.api.model.StorageType.ISCSI ; case FCP : return org.ovirt.engine.api.model.StorageType.FCP ; case NFS : return org.ovirt.engine.api.model.StorageType.NFS ; case LOCALFS : return org.ovirt.engine.api.model.StorageType.LOCALFS ; case POSIXFS : return org.ovirt.engine.api.model.StorageType.POSIXFS ; case GLUSTERFS : return org.ovirt.engine.api.model.StorageType.GLUSTERFS ; case GLANCE : return org.ovirt.engine.api.model.StorageType.GLANCE ; case CINDER : return org.ovirt.engine.api.model.StorageType.CINDER ; default : return null ; } }
public static void getVmNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.aggregationtohourly_3_4.AggregationToHourly.row11Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_AggregationToHourly ) { try { int length = 0 ; this . key = readString ( dis ) ; this . value = readString ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRestoreCommand ( ) ) ) { restore ( ) ; } else if ( command == ( getRemoveCommand ( ) ) ) { remove ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "Cancel" ) ) { cancel ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "CancelConfirm" ) ) { cancelConfirm ( ) ; } }
public void initNicHotplugSupportMap ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.AsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object returnValue ) { nicHotplugSupportMap = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetNicHotplugSupportMap ) , callback ) ; }
private boolean canRemoveLunDisk ( ) { if ( ( disk.getVmEntityType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmEntityType.VM ) ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : getVmsForDiskId ( ) ) { if ( ( vm.getstatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VMStatus.Down ) ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = getVmDeviceDAO ( ) . get ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( disk.getId ( ) , vm.getId ( ) ) ) ; if ( vmDevice.getIsPlugged ( ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ; return false ; } } } } return true ; }
public static void GetDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
public static void getGlusterHook ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , boolean includeServerHooks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHookById , new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters ( hookId , includeServerHooks ) , aQuery ) ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private void initVersion ( ) { if ( ! ( isVersionInit ) ) { isVersionInit = true ; for ( java.lang.Object a : getVersion ( ) . getItems ( ) ) { org.ovirt.engine.core.compat.Version item = ( ( org.ovirt.engine.core.compat.Version ) ( a ) ) ; if ( org.ovirt.engine.core.compat.Version.OpEquality ( item , getEntity ( ) . getcompatibility_version ( ) ) ) { getVersion ( ) . setSelectedItem ( item ) ; break ; } } } }
public void testImagesIllegal ( ) { setUpGeneralValidations ( ) ; setUpDiskValidations ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL ) ) . when ( diskImagesValidator ) . diskImagesNotIllegal ( ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISKS_ILLEGAL.name ( ) ) ) ; }
public void setCustomCommaSeparatedValues ( ) { final java.lang.String key = "foo" ; final java.lang.String s1 = ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) + 1 ; final java.lang.String s2 = ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) + 2 ; final java.util.List < java.lang.String > values = java.util.Arrays.asList ( s1 , s2 ) ; final java.lang.String sep = ", " ; b.setCustomCommaSeparatedValues ( key , values ) ; final java.lang.String actual = b.getCustomValue ( key ) ; org.junit.jupiter.api.Assertions.assertEquals ( java.lang.String.format ( "%s%s%s" , s1 , sep , s2 ) , actual ) ; }
public void postOnSave ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { getWindow ( ) . stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; getSearchCommand ( ) . execute ( ) ; } privateItemSavedEvent.raise ( this , EventArgs.EMPTY ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName , slaveHost , slaveVolumeName , userName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public java.lang.String getQualifiedName ( ) { if ( ( ( ( networkId ) != null ) && ( ( networkAddress ) != null ) ) && ( ! ( networkAddress.isEmpty ( ) ) ) ) { return ( ( networkAddress ) + ":" ) + ( brickDirectory ) ; } return ( ( serverName ) + ":" ) + ( brickDirectory ) ; }
protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters ( asyncTaskCreationInfo , new org.ovirt.engine.core.common.businessentities.async_tasks ( parentCommand , org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success , org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running , asyncTaskCreationInfo.getTaskID ( ) , getParametersForTask ( parentCommand , org.ovirt.engine.core.bll.RemoveImageCommand.getParameters ( ) ) , asyncTaskCreationInfo.getStepId ( ) , org.ovirt.engine.core.bll.RemoveImageCommand.getCommandId ( ) ) ) ; p.setEntityId ( org.ovirt.engine.core.bll.RemoveImageCommand.getParameters ( ) . getEntityId ( ) ) ; return org.ovirt.engine.core.bll.AsyncTaskManager.getInstance ( ) . CreateTask ( AsyncTaskType.deleteImage , p ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.compat.Guid poolId , org.ovirt.engine.core.common.businessentities.StorageDomainType type , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain dom = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; dom.setId ( id ) ; dom.setStoragePoolId ( poolId ) ; dom.setStorageDomainType ( type ) ; dom.setStorageType ( storageType ) ; dom.setStorageDomainSharedStatus ( StorageDomainSharedStatus.Unattached ) ; return dom ; }
private void mockDaos ( ) { org.mockito.Mockito.doReturn ( clusterDao ) . when ( hookSyncJob ) . getClusterDao ( ) ; org.mockito.Mockito.doReturn ( hooksDao ) . when ( hookSyncJob ) . getHooksDao ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; clusters.add ( createCluster ( 0 ) ) ; clusters.add ( createCluster ( 1 ) ) ; org.mockito.Mockito.doReturn ( clusters ) . when ( clusterDao ) . getAll ( ) ; }
protected void onCommonModelChange ( ) { super . onCommonModelChange ( ) ; getModel ( ) . getResetRequestedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = getModel ( ) . getItems ( ) . iterator ( ) ; if ( iterator.hasNext ( ) ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = getModel ( ) . CloneTagModel ( iterator.next ( ) ) ; updateDataProvider ( java.util.Arrays.asList ( root ) ) ; } } } ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.VDS i ) { return i.isPmEnabled ( ) ; }
public void testInsert ( ) { org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension newssce = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension ( ) ; newssce.setId ( newId ) ; fillWithRandomData ( newssce ) ; dao.save ( newssce ) ; org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension ssceFromDb = dao.get ( newId ) ; org.junit.Assert.assertEquals ( newssce , ssceFromDb ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getAdGroupDao ( ) ) ; newAdGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( ) ; newAdGroup.setid ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; newAdGroup.setdomain ( "domain" ) ; newAdGroup.setname ( "name" ) ; newAdGroup.setstatus ( AdRefStatus.Active ) ; existingAdGroup = dao.get ( new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ) ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
public void getClusterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private java.lang.String getDirectoryGroupSearchPattern ( java.lang.String groupname , java.lang.String domain ) { java.lang.String constraint = org.ovirt.engine.api.common.util.QueryHelper.getConstraint ( getUriInfo ( ) , org.ovirt.engine.core.common.businessentities.DbGroup.class , false ) ; final java.lang.StringBuilder sb = new java.lang.StringBuilder ( 128 ) ; sb.append ( java.text.MessageFormat.format ( org.ovirt.engine.api.restapi.resource.BackendGroupsResource.DIRECTORY_GROUP_SEARCH_TEMPLATE , domain ) ) ; sb.append ( ( org.apache.commons.lang.StringUtils.isEmpty ( constraint ) ? "allnames=" + groupname : constraint ) ) ; return sb.toString ( ) ; }
private void updateIsMemorySnapshotSupported ( java.lang.Object entity ) { if ( entity == null ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( entity ) ) ; setMemorySnapshotSupported ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isMemorySnapshotSupported ( vm ) ) ; }
protected void storageType_SelectedItemChanged ( ) { updateCurrentStorageItem ( ) ; if ( ( getCurrentStorageItem ( ) ) != null ) { updateFormat ( ) ; updateHost ( ) ; } updateWipeAfterDelete ( ) ; }
private void onClone ( ) { ( ( org.ovirt.engine.ui.uicommonweb.models.vms.CloneVmModel ) ( getWindow ( ) ) ) . onClone ( this , false ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( ( lastExecutedCommand == ( getModel ( ) . getNewCommand ( ) ) ) || ( lastExecutedCommand == ( getModel ( ) . getEditCommand ( ) ) ) ) { return popupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
public void getClusterNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc remove_image_ticket ( java.lang.String ticketId ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.remove_image_ticket ( ticketId ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) ) : false ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , params , aQuery ) ; }
public void RequestSearch ( ) { searchRequested = true ; model.setItems ( new java.util.ArrayList < T > ( ) ) ; model.getSelectedItemChangedEvent ( ) . raise ( this , new org.ovirt.engine.ui.uicompat.EventArgs ( ) ) ; model.getSelectedItemsChangedEvent ( ) . raise ( this , new org.ovirt.engine.ui.uicompat.EventArgs ( ) ) ; }
public void removeLun ( org.ovirt.engine.core.common.businessentities.LUNs lun ) { java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > lunsList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getLunDao ( ) . getAllForVolumeGroup ( lun.getvolume_group_id ( ) ) ; if ( ( lunsList.size ( ) ) == 1 ) { for ( org.ovirt.engine.core.common.businessentities.storage_server_connections connection : filterConnectionsUsedByOthers ( lun.getLunConnections ( ) , "" , lun.getLUN_id ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } } }
com.google.gwt.safehtml.shared.SafeHtml getRenderedValue ( com.google.gwt.safehtml.shared.SafeHtml value ) { java.lang.String result = value.asString ( ) ; if ( ( ( maxTextLength ) > 0 ) && ( ( result.length ( ) ) > ( maxTextLength ) ) ) { result = result.substring ( 0 , java.lang.Math.max ( ( ( maxTextLength ) - ( org.ovirt.engine.ui.common.widget.table.cell.TextCell.TOO_LONG_TEXT_POSTFIX.length ( ) ) ) , 0 ) ) ; result = result + ( org.ovirt.engine.ui.common.widget.table.cell.TextCell.TOO_LONG_TEXT_POSTFIX ) ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( result ) ; }
private void removeVmStatlessImages ( ) { runInternalAction ( VdcActionType.ProcessDownVm , new org.ovirt.engine.core.common.action.IdParameters ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getId ( ) ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( org.ovirt.engine.core.bll.RunVmCommand.getContext ( ) , org.ovirt.engine.core.bll.RunVmCommand.getLock ( ) ) ) ; org.ovirt.engine.core.bll.RunVmCommand.setLock ( null ) ; org.ovirt.engine.core.bll.RunVmCommand.setSucceeded ( true ) ; }
public void testUpdateChildren ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.addTag ( tag ) ; tag.settag_name ( "booboo" ) ; tagsDirector.UpdateTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags rootTag = tagsDirector.getRootTag ( ) ; tag = rootTag.getChildren ( ) . get ( 0 ) ; org.junit.Assert.assertEquals ( "booboo" , tag.gettag_name ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( returnValue ) ) ; if ( ( cluster.getEmulatedMachine ( ) ) != null ) { getEmulatedMachine ( ) . setSelectedItem ( cluster.getEmulatedMachine ( ) ) ; } } }
private java.lang.String createSpiceInvocationInfo ( ) { org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker rowMaker = new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto ( ) ) ; rowMaker.append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative ( ) ) ; if ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . isEnableDeprecatedClientModeSpicePlugin ( ) ) { rowMaker.append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin ( ) ) ; } rowMaker.append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5 ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5 ( ) ) ; return rowMaker.toString ( ) ; }
private void setUpGetEntityExpectations ( boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetDbGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getEntity ( 0 ) ) ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsToMoveToUnknown ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . getAllRunningForVds ( getVdsId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > migratingVms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . getAllMigratingToHost ( getVdsId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM incomingVm : migratingVms ) { if ( ( incomingVm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo ) ) { vmList.add ( incomingVm ) ; } } return vmList ; }
public void setActiveDetailModel ( org.ovirt.engine.ui.uicommonweb.models.HasEntity < D > value ) { if ( ! ( activeDetailModels.contains ( value ) ) ) { activeDetailModelChanging ( value , true ) ; activeDetailModels.clear ( ) ; activeDetailModels.add ( value ) ; activeDetailModelChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODELS ) ) ; } }
protected < T > void render ( com.google.gwt.cell.client.Cell.Context context , org.ovirt.engine.core.common.businessentities.VM value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , com.google.gwt.cell.client.HasCell < org.ovirt.engine.core.common.businessentities.VM , T > hasCell ) { com.google.gwt.cell.client.Cell < T > cell = hasCell.getCell ( ) ; if ( cell instanceof org.ovirt.engine.ui.common.widget.table.HasStyleClass ) { ( ( org.ovirt.engine.ui.common.widget.table.HasStyleClass ) ( cell ) ) . setStyleClass ( style.divInlineBlock ( ) ) ; } cell.render ( context , hasCell.getValue ( value ) , sb ) ; }
public static void addLdapConfigValues ( java.util.Properties config , java.util.Hashtable < java.lang.String , java.lang.String > env ) { env.put ( "com.sun.jndi.ldap.read.timeout" , java.lang.Long.toString ( ( ( java.lang.Long.parseLong ( config.getProperty ( "config.LDAPQueryTimeout" ) ) ) * 1000 ) ) ) ; env.put ( "com.sun.jndi.ldap.connect.timeout" , java.lang.Long.toString ( ( ( java.lang.Long.parseLong ( config.getProperty ( "config.LDAPConnectTimeout" ) ) ) * 1000 ) ) ) ; }
protected void executeQueryCommand ( ) { java.lang.String version = org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getParameters ( ) . getVersion ( ) ; org.ovirt.engine.core.utils.pm.VdsFenceOptions options = new org.ovirt.engine.core.utils.pm.VdsFenceOptions ( version ) ; java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > map = options.getFenceOptionMappingMap ( ) ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getQueryReturnValue ( ) . setReturnValue ( map ) ; org.ovirt.engine.core.bll.GetAgentFenceOptionsQuery.getQueryReturnValue ( ) . setSucceeded ( ( ( map.size ( ) ) > 0 ) ) ; }
protected void onHide ( ) { super . onHide ( ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel currentModel = modelProvider.getModel ( ) ; currentModel.setItems ( null ) ; currentModel.stopRefresh ( ) ; }
public void successfulFence ( ) { mockProxyHost ( ) ; mockFenceSuccess ( ) ; org.ovirt.engine.core.common.businessentities.FenceAgent agent = createAgent ( ) ; org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.fence ( FenceActionType.START , agent ) ; org.junit.Assert.assertTrue ( result.getSucceeded ( ) ) ; org.junit.Assert.assertEquals ( result.getFenceAgentUsed ( ) , agent ) ; }
protected void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmTemplate , org.ovirt.engine.core.common.action.UpdateVmTemplateParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( getRestModel ( 0 ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void logServerMessage ( final org.ovirt.engine.core.common.businessentities.VDS server , final org.ovirt.engine.core.common.AuditLogType logType ) { logAuditMessage ( ( server == null ? org.ovirt.engine.core.compat.Guid.Empty : server.getVdsGroupId ( ) ) , null , server , logType , java.util.Collections.< java.lang.String , java.lang.String > emptyMap ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createHibernationMemoryDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDisk ( vm , storageType ) ; image.setDiskAlias ( org.ovirt.engine.core.bll.memory.MemoryUtils.generateHibernationMemoryDiskAlias ( vm.getName ( ) ) ) ; image.setDescription ( org.ovirt.engine.core.bll.memory.MemoryUtils.VM_HIBERNATION_MEMORY_DISK_DESCRIPTION ) ; return image ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filterStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > availableStorageDomains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainItem : storageDomains ) { if ( ( storageDomainItem.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE ) ) { availableStorageDomains.add ( storageDomainItem ) ; } } java.util.Collections.sort ( availableStorageDomains , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return availableStorageDomains ; }
public void externalNetworkNameChanged ( ) { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = createExternalNetwork ( ) ; externalNetwork.setName ( "aaa" ) ; network.setName ( "bbb" ) ; org.junit.Assert.assertThat ( validator.externalNetworkDetailsUnchanged ( externalNetwork ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected void readOsSection ( org.ovirt.engine.core.utils.ovf.xml.XmlNode section ) { _vmTemplate.setId ( new org.ovirt.engine.core.compat.Guid ( section.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode node = selectSingleNode ( section , "Description" ) ; if ( node != null ) { int osId = osRepository.getOsIdByUniqueName ( node.innerText ) ; _vmTemplate.setOsId ( osId ) ; _vmTemplate.setClusterArch ( osRepository.getArchitectureFromOS ( osId ) ) ; } else { _vmTemplate.setClusterArch ( ArchitectureType.undefined ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( sender == ( getPlugged ( ) ) ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs propArgs = ( ( org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ) ( args ) ) ; if ( propArgs.PropertyName.equals ( "Entity" ) ) { onPlugChange ( ) ; } } }
private void Commit ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ; if ( vm != null ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getInPreview ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.RestoreAllSnapshots , new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters ( vm.getId ( ) , snapshot.getId ( ) ) , null , null ) ; } }
private void updateCanSpecify ( ) { boolean isChangable = ( bootProtocolsAvailable ) && ( getIsStaticAddress ( ) ) ; getIpv4Address ( ) . setChangeProhibitionReason ( ( isChangable && ( ! ( staticIpChangeAllowed ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . staticIpAddressSameAsHostname ( ) : null ) ) ; getIpv4Address ( ) . setIsChangeable ( ( isChangable && ( staticIpChangeAllowed ) ) ) ; getIpv4Subnet ( ) . setIsChangeable ( isChangable ) ; getIpv4Gateway ( ) . setIsChangeable ( isChangable ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { if ( ! ( labelPopup.validate ( ) ) ) { return ; } sourceListModel.setConfirmWindow ( null ) ; java.lang.String label = labelPopup.getLabel ( ) . getEntity ( ) ; dcLabels.add ( label ) ; NetworkOperation.LABEL.getCommand ( new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel ( label , this ) , networkCommand.getOp2 ( ) , allNics ) . execute ( ) ; redraw ( ) ; }
private void addAddPermissionsButton ( ) { org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addActionButton ( new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition < org.ovirt.engine.core.common.businessentities.Permission > ( org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getEventBus ( ) , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.addPermission ( ) ) { @ java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand ( ) { return getModel ( ) . getAddCommand ( ) ; } } ) ; }
public org.ovirt.engine.core.bll.ValidationResult isSameStorageType ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { org.ovirt.engine.core.common.businessentities.storage.StorageType connectionStorageType = connection.getstorage_type ( ) ; org.ovirt.engine.core.common.businessentities.storage.StorageType storageDomainType = storageDomain.getStorageType ( ) ; if ( ! ( connectionStorageType.equals ( storageDomainType ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_NOT_SAME_STORAGE_TYPE ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void executeVdsBrokerCommand ( ) { switch ( org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.getParameters ( ) . getAction ( ) ) { case START : status = org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.getBroker ( ) . glusterVolumeReplaceBrickStart ( org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.getParameters ( ) . getVolumeName ( ) , org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.getParameters ( ) . getExistingBrickDir ( ) , org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.getParameters ( ) . getNewBrickDir ( ) ) ; break ; } org.ovirt.engine.core.vdsbroker.gluster.ReplaceGlusterVolumeBrickVDSCommand.proceedProxyReturnValue ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { clearVms ( ) ; exportDomain.setEntity ( null ) ; loadProviders ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenter.getId ( ) ) , new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( createGetStorageDomainsByStoragePoolIdCallback ( ) ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool a : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) { if ( ( a.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up ) ) { list.add ( a ) ; } } model.setDataCenter ( model , list ) ; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode ( int index , java.util.List < org.ovirt.engine.core.common.businessentities.VdsNumaNode > vdsNumaNodes ) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( index ) ; final java.util.List < java.lang.Integer > numaPinning = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes ) { numaPinning.add ( vdsNumaNode.getIndex ( ) ) ; } numaNode.setVdsNumaNodeList ( numaPinning ) ; return numaNode ; }
public void postModelEnabled ( boolean enabled ) { messageLabel.setVisible ( ( ! enabled ) ) ; }
public void getAllowClusterWithVirtGlusterEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean.TRUE ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void getMigrationPolicies ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( returnValue == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.migration.MigrationPolicy > ( ) ; } return returnValue ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllMigrationPolicies , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.storage.VolumeFormat getTargetVolumeFormat ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat volumeFormat , org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType , org.ovirt.engine.core.compat.Guid storageDomainId ) { if ( ( volumeFormat == ( org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW ) ) && ( volumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse ) ) ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = org.ovirt.engine.core.bll.CreateImageTemplateCommand.getStorageDomainStaticDao ( ) . get ( storageDomainId ) ; if ( destDomain.getStorageType ( ) . isBlockDomain ( ) ) { return org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW ; } } return volumeFormat ; }
public void mapNoneSsoFromBackendToRest ( ) { org.ovirt.engine.core.common.businessentities.SsoMethod backendSsoMethod = org.ovirt.engine.core.common.businessentities.SsoMethod.NONE ; org.ovirt.engine.api.model.Sso restSso = org.ovirt.engine.api.restapi.types.SsoMapper.map ( backendSsoMethod , null ) ; org.junit.jupiter.api.Assertions.assertNotNull ( restSso ) ; org.junit.jupiter.api.Assertions.assertNotNull ( restSso.getMethods ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( restSso.getMethods ( ) . getMethods ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( restSso.getMethods ( ) . getMethods ( ) . isEmpty ( ) ) ; }
public void shouldDetectNumaPinning ( ) { invalidVM.setvNumaNodeList ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 1 , java.util.Collections.singletonList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; org.assertj.core.api.Assertions.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) ) . contains ( EngineMessage.CLUSTER_UPGRADE_DETAIL_VM_NUMA_PINNED.name ( ) ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { onGetClusterList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( ReturnValue ) ) ) ; }
private void createCommand ( ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( ) ; params.setStorageDomainId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; params.setStoragePoolId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.domain.ActivateStorageDomainCommand ( params , null ) ) ; cmd.init ( ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( cmd ) . getVdsDao ( ) ; }
public void testIsConnectionDoesNotExistForHostAndTargetFails ( ) { org.mockito.Mockito.when ( storageServerConnectionExtensionDao.getByHostIdAndTarget ( conn.getHostId ( ) , conn.getIqn ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.isConnectionDoesNotExistForHostAndTarget ( conn ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_ALREADY_EXISTS ) ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } if ( ! ( getGlusterUtil ( ) . isGlusterSnapshotSupported ( org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup ( ) . getId ( ) ) ) ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED ) ; } return true ; }
public java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > score ( org.ovirt.engine.core.common.businessentities.Cluster cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < java.lang.String , java.lang.String > parameters ) { boolean countThreadsAsCores = cluster.getCountThreadsAsCores ( ) ; java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { scores.add ( new org.ovirt.engine.core.common.utils.Pair ( vds.getId ( ) , calcHostScore ( vds , vm , countThreadsAsCores ) ) ) ; } return scores ; }
protected java.lang.String getColorByProgress ( int progress ) { if ( progress < 70 ) { return org.ovirt.engine.ui.webadmin.widget.table.column.ProgressBarColumn.ProgressBarColors.GREEN.asCode ( ) ; } else if ( progress < 95 ) { return org.ovirt.engine.ui.webadmin.widget.table.column.ProgressBarColumn.ProgressBarColors.ORANGE.asCode ( ) ; } else { return org.ovirt.engine.ui.webadmin.widget.table.column.ProgressBarColumn.ProgressBarColors.RED.asCode ( ) ; } }
private org.ovirt.engine.core.common.businessentities.Cluster createClusterAndMockMacs ( org.ovirt.engine.core.compat.Guid sourceMacPoolId , java.util.List < java.lang.String > macsToMigrate ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = createCluster ( sourceMacPoolId ) ; org.mockito.Mockito.when ( vmNicDao.getAllMacsByClusterId ( cluster.getId ( ) ) ) . thenReturn ( macsToMigrate ) ; return cluster ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getVirtioScsiControllers ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType.CONTROLLER , VmDeviceType.VIRTIOSCSI.getName ( ) , userID , isFiltered ) ; }
public void autoCompletedInputIsAlwaysValid ( java.util.Map.Entry < java.lang.Integer , java.lang.String > osCompletionEntry ) { java.lang.String reason = ( "input " + ( osCompletionEntry.getValue ( ) ) ) + " is invalid" ; org.hamcrest.MatcherAssert.assertThat ( reason , true , org.hamcrest.core.Is.is ( completer.validate ( osCompletionEntry.getValue ( ) ) ) ) ; }
public void setUp ( ) { storagePool = cmd.getParameters ( ) . getStoragePool ( ) ; cmd.init ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( storagePool.getId ( ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito.when ( storagePoolIsoMapDao.getAllForStorage ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > networkQoSes = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ) ( ReturnValue ) ) ; getNetworkQoS ( ) . setItems ( networkQoSes ) ; defaultQos = org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById ( networkQoSes , defaultQosId ) ; getNetworkQoS ( ) . setSelectedItem ( defaultQos ) ; }
public void getConfiguredVmHostDevices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmHostDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void testPK ( ) throws java.lang.Exception { try ( final java.io.ByteArrayOutputStream out = new org.ovirt.engine.core.uutils.ssh.ConstraintByteArrayOutputStream ( 500 ) ) { client.setKeyPair ( TestCommon.keyPair ) ; client.connect ( ) ; client.authenticate ( ) ; client.executeCommand ( org.ovirt.engine.core.uutils.ssh.BasicTest.helloCommand , null , out , null ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.uutils.ssh.BasicTest.helloResult , new java.lang.String ( out.toByteArray ( ) , "UTF-8" ) ) ; } }
public static void getExternalNetworkMap ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid providerId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , java.util.Set < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllExternalNetworksOnProvider , new org.ovirt.engine.core.common.queries.IdQueryParameters ( providerId ) , aQuery ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { java.lang.Object [ ] array = ( ( java.lang.Object [ ] ) ( result.getState ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel ) ( array [ 0 ] ) ) ; boolean localApproveInitiated = ( ( java.lang.Boolean ) ( array [ 1 ] ) ) ; localModel.postOnSaveInternal ( result.getReturnValue ( ) , localApproveInitiated ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetail glusterVolumeGeoRepSessionStatus ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionStatus" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , slaveHost ) . withParameter ( "remoteVolumeName" , slaveVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusDetail ( response ) ; }
public void addImportedDevices ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , boolean isImportAsNewEntity ) { if ( isImportAsNewEntity ) { setNewIdInImportedCollections ( vmBase ) ; } java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevicesToAdd = new java.util.ArrayList < > ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevicesToUpdate = new java.util.ArrayList < > ( ) ; addImportedDiskDevices ( vmBase , vmDevicesToUpdate ) ; addImportedInterfaces ( vmBase , vmDevicesToUpdate ) ; addImportedOtherDevices ( vmBase , vmDevicesToAdd ) ; vmDeviceDao.saveAll ( vmDevicesToAdd ) ; vmDeviceDao.updateAll ( vmDevicesToUpdate ) ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
private static boolean canPlugInterface ( org.ovirt.engine.core.common.businessentities.network.VmNic iface , org.ovirt.engine.core.compat.Guid vdsGroupId ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVdsGroupDao ( ) . get ( vdsGroupId ) ; org.ovirt.engine.core.compat.Guid dataCenterId = ( vdsGroup == null ) ? null : vdsGroup.getStoragePoolId ( ) ; java.lang.String macAddress = iface.getMacAddress ( ) ; boolean canPlugInterface = org.ovirt.engine.core.bll.utils.VmDeviceUtils.canPlugInterfaceInDc ( macAddress , dataCenterId ) ; if ( ! canPlugInterface ) { new org.ovirt.engine.core.bll.network.VmInterfaceManager ( ) . auditLogMacInUseUnplug ( iface ) ; } return canPlugInterface ; }
public org.ovirt.engine.core.bll.ValidationResult isDomainOfConnectionExistsAndInactive ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( storageDomain == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; } if ( ( ( storageDomain.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance ) ) && ( ( storageDomain.getStorageDomainSharedStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_ACTION_DOMAIN_MUST_BE_IN_MAINTENANCE_OR_UNATTACHED , java.lang.String.format ( org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator.STORAGE_DOMAIN_NAME_REPLACEMENT , storageDomain.getStorageName ( ) ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void addNetworkFiltersToNic ( java.util.Map < java.lang.String , java.lang.Object > struct , org.ovirt.engine.core.common.businessentities.network.VmNic vmNic ) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.fetchVnicProfileNetworkFilter ( vmNic ) ; if ( networkFilter != null ) { final java.lang.String networkFilterName = networkFilter.getName ( ) ; struct.put ( VdsProperties.NW_FILTER , networkFilterName ) ; } }
public void run ( ) { try { org.ovirt.engine.core.common.action.VdcReturnValueBase ret = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.ApproveVds , params ) ; if ( ( ret == null ) || ( ! ( ret.getSucceeded ( ) ) ) ) { log.error ( "Approval of oVirt '{}' failed. " , params.getVdsId ( ) ) ; } else if ( ret.getSucceeded ( ) ) { log.info ( "Approval of oVirt '{}' ended successfully. " , params.getVdsId ( ) ) ; } } catch ( java.lang.RuntimeException ex ) { log.error ( "Failed to Approve host" , ex ) ; } }
protected void syncSearch ( ) { org.ovirt.engine.core.common.queries.SearchParameters tempVar = new org.ovirt.engine.core.common.queries.SearchParameters ( "Events: severity=alert" , org.ovirt.engine.core.common.interfaces.SearchType.AuditLog ) ; tempVar.setMaxCount ( getSearchPageSize ( ) ) ; tempVar.setRefresh ( false ) ; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = tempVar ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParameters , new org.ovirt.engine.ui.uicommonweb.models.events.SetItemsAsyncQuery ( ) ) ; }
public void testGetImagesWithNoDisk ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > result = dao.getImagesWithNoDisk ( FixturesTool.VM_RHEL5_POOL_57 ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : result ) { org.junit.Assert.assertFalse ( diskDao.exists ( image.getId ( ) ) ) ; } }
private org.ovirt.engine.core.common.action.VdcReturnValueBase notAllowToRunAction ( org.ovirt.engine.core.common.action.VdcActionType actionType ) { java.lang.String mode = vdcOptionDao.getByNameAndVersion ( ConfigValues.EngineMode.name ( ) , ConfigCommon.defaultConfigurationVersion ) . getOptionValue ( ) ; if ( EngineWorkingMode.MAINTENANCE.name ( ) . equalsIgnoreCase ( mode ) ) { return getErrorCommandReturnValue ( EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE ) ; } else if ( EngineWorkingMode.PREPARE.name ( ) . equalsIgnoreCase ( mode ) ) { return notAllowedInPrepForMaintMode ( actionType ) ; } return null ; }
public void successVmInPreviewForAttachedSnapshot ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.VM ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice.setSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.NIC model = new org.ovirt.engine.api.model.NIC ( ) ; model.setName ( null ) ; model.setNetwork ( new org.ovirt.engine.api.model.Network ( ) ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "NIC" , "add" , "name" ) ; } }
public void testBootFromNetworkNoNetwork ( ) { org.ovirt.engine.core.dao.network.VmNicDao dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.network.VmNicDao.class ) ; org.mockito.Mockito.doReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNic > ( ) ) . when ( dao ) . getAllForVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( dao ) . when ( runVmValidator ) . getVmNicDao ( ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , BootSequence.N , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) , null ) , false , EngineMessage.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK ) ; }
public void testChangeCdUsingMatrixParameter ( ) throws java.lang.Exception { resource.setUriInfo ( setUpChangeCdUriMatrixExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , VMStatus.Up ) ; setUpActionExpectations ( VdcActionType.ChangeDisk , org.ovirt.engine.core.common.action.ChangeDiskCommandParameters.class , new java.lang.String [ ] { "CdImagePath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.ISO_PATH } , true , true ) ; org.ovirt.engine.api.model.CdRom cdrom = resource.update ( getUpdate ( ) ) ; assertTrue ( cdrom.isSetFile ( ) ) ; }
public void checkStorageDomainNotEqualWithStatusActive ( ) { setStorageDomainStatus ( StorageDomainStatus.Active ) ; org.junit.Assert.assertFalse ( cmd.CheckStorageDomainStatusNotEqual ( StorageDomainStatus.Active ) ) ; java.util.List < java.lang.String > messages = cmd.getReturnValue ( ) . getCanDoActionMessages ( ) ; org.junit.Assert.assertEquals ( messages.size ( ) , 2 ) ; org.junit.Assert.assertEquals ( messages.get ( 0 ) , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString ( ) ) ; org.junit.Assert.assertEquals ( messages.get ( 1 ) , java.lang.String.format ( "$status %1$s" , StorageDomainStatus.Active ) ) ; }
private java.util.Set < java.lang.String > getNetworkAttachmentInterfaceNames ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > networkAttachments ) { java.util.Set < java.lang.String > networkAttachmentNicNames = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : networkAttachments ) { networkAttachmentNicNames.add ( attachment.getNicName ( ) ) ; } return networkAttachmentNicNames ; }
protected void initWidget ( com.google.gwt.user.client.ui.Widget widget ) { super . initWidget ( widget ) ; contextPopupPanel.setWidget ( contextMenuBar ) ; cascadePopupPanel.setWidget ( cascadeMenu ) ; contentPanel.add ( cascadeButton ) ; actionPanel.add ( contentPanel ) ; actionPanel.addStyleName ( style.actionPanel ( ) ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.column.Context context , com.google.gwt.dom.client.Element parent , C value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < C > valueUpdater ) { super . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; tooltipPanel.applyTo ( parent ) ; if ( ( value != null ) && ( showTooltip ( parent , value ) ) ) { tooltipPanel.setText ( getTooltip ( value ) ) ; } else { tooltipPanel.setText ( "" ) ; } tooltipPanel.handleNativeBrowserEvent ( parent , event ) ; }
private void listenOnDiskModelChangeEvent ( final org.ovirt.engine.ui.userportal.uicommon.model.basic.UserPortalBasicListProvider modelProvider ) { modelProvider.getModel ( ) . getvmBasicDiskListModel ( ) . getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( modelProvider.getModel ( ) . getSelectedItem ( ) ) == null ) { return ; } @ java.lang.SuppressWarnings ( value = "unchecked" ) java.lang.Iterable < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages = modelProvider.getModel ( ) . getvmBasicDiskListModel ( ) . getItems ( ) ; getView ( ) . editDistItems ( diskImages ) ; } } ) ; }
private void initSelectedMacPool ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.MacPool > allMacPools = getMacPoolListModel ( ) . getItems ( ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity ( ) ; if ( ( allMacPools != null ) && ( cluster != null ) ) { org.ovirt.engine.core.compat.Guid macPoolId = cluster.getMacPoolId ( ) ; for ( org.ovirt.engine.core.common.businessentities.MacPool macPool : allMacPools ) { if ( macPool.getId ( ) . equals ( macPoolId ) ) { getMacPoolListModel ( ) . setSelectedItem ( macPool ) ; break ; } } } }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.AddUserProfileCommand.getParameters ( ) . getUserProfile ( ) ; profile.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; profile.setUserId ( org.ovirt.engine.core.bll.AddUserProfileCommand.getUserId ( ) ) ; if ( ( ! ( profile.getSshPublicKey ( ) . isEmpty ( ) ) ) && ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( profile.getSshPublicKeyId ( ) ) ) ) { profile.setSshPublicKeyId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } userProfileDao.save ( profile ) ; org.ovirt.engine.core.bll.AddUserProfileCommand.setSucceeded ( true ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void testGetAllForStoragePoolAndStatuses ( ) { prepareHostWithDifferentStatus ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao.getAllForStoragePoolAndStatuses ( existingVds.getStoragePoolId ( ) , java.util.EnumSet.of ( existingVds.getStatus ( ) , existingVds2.getStatus ( ) ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( org.apache.commons.collections.CollectionUtils.disjunction ( result , java.util.Arrays.asList ( existingVds , existingVds2 ) ) . isEmpty ( ) ) ; assertCorrectGetAllResult ( result ) ; }
private void addSyncDiff ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel ) { addRow ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.imageTextSetupNetwork ( notInSyncImage , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostOutOfSync ( ) ) ) ; com.google.gwt.safehtml.shared.SafeHtml safeHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostOutOfSyncPreviewSentence ( ) ) ; addRow ( safeHtml ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration > panelParameters = filterSyncProperties ( networkModel ) ; com.google.gwt.user.client.ui.Widget networkOutOfSyncPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkOutOfSyncPanel ( panelParameters ) . outOfSyncTableAsWidget ( ) ; contents.insertRow ( contents.getRowCount ( ) ) ; contents.setWidget ( contents.getRowCount ( ) , 0 , networkOutOfSyncPanel ) ; }
private void setUpMockUpForStop ( ) { prepareMocks ( ) ; org.mockito.Mockito.when ( serviceDao.getByServiceType ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.ServiceType.class ) ) ) . thenReturn ( getGlusterServiceListByServiceType ( ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.RUNNING ) ) ; org.mockito.Mockito.doReturn ( getGlusterServerServicesByServerIdAndServiceType ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , ServiceType.GLUSTER_SWIFT , GlusterServiceStatus.RUNNING ) ) . when ( serverServiceDao ) . getByServerIdAndServiceType ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.gluster.ServiceType.class ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc createVolumeContainer ( java.lang.String jobId , java.util.Map < java.lang.String , java.lang.Object > createVolumeInfo ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "SDM.create_volume" ) . withParameter ( "job_id" , jobId ) . withParameter ( "vol_info" , createVolumeInfo ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
private static void setActions ( org.ovirt.engine.api.model.BaseResource model , java.lang.String path ) { org.ovirt.engine.api.restapi.util.LinkHelper.ApiLocationMetadata collection = org.ovirt.engine.api.restapi.util.LinkHelper.getCollection ( model ) ; if ( collection != null ) { org.ovirt.engine.api.restapi.util.ActionsBuilder actionsBuilder = new org.ovirt.engine.api.restapi.util.ActionsBuilder ( path , collection.getEntityServiceClass ( ) ) ; model.setActions ( actionsBuilder.build ( ) ) ; } }
public void testGetLunsToUpdateInDbForSameLun ( ) { setLunsSameLunAndPvIds ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > upToDateLuns = getLunsToUpdateInDb ( ) . get ( command.noOp ) ; assertLunIdInList ( upToDateLuns , lunFromVg.getLUNId ( ) ) ; }
private void mockValidators ( ) { org.mockito.Mockito.doReturn ( diskValidator ) . when ( command ) . createDiskValidator ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( diskVmElementValidator ) . when ( command ) . createDiskVmElementValidator ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public void executeQueryCommand ( ) { getQuery ( ) . executeQueryCommand ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderDisk > result = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( 2 , result.size ( ) ) ; assertDiskFromVolume ( volumes.get ( 0 ) , result.get ( 0 ) ) ; assertDiskFromVolume ( volumes.get ( 2 ) , result.get ( 1 ) ) ; }
void localize ( ) { userNameEditor.setLabel ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.loginFormUserNameLabel ( ) ) ; passwordEditor.setLabel ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.loginFormPasswordLabel ( ) ) ; profileEditor.setLabel ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.loginFormProfileLabel ( ) ) ; connectAutomaticallyEditor.setLabel ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.loginFormConnectAutomaticallyLabel ( ) ) ; loginButton.setLabel ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.loginButtonLabel ( ) ) ; motdHeaderLabel.setText ( org.ovirt.engine.ui.userportal.section.login.view.LoginFormView.constants.motdHeaderLabel ( ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult isPosixDcAndMatchingCompatiblityVersion ( ) { if ( ( ( storagePool.getstorage_pool_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.POSIXFS ) ) && ( ! ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.PosixStorageEnabled , storagePool.getcompatibility_version ( ) . toString ( ) ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClustersByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void ExecuteIrsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.irsbroker.GetImagesListVDSCommand.getIrsProxy ( ) . getImagesList ( org.ovirt.engine.core.vdsbroker.irsbroker.GetImagesListVDSCommand.getParameters ( ) . getStorageDomainId ( ) . toString ( ) ) ; proceedProxyReturnValue ( ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > tempRetValue = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( _result.getImageList ( ) . length ) ; for ( java.lang.String id : _result.getImageList ( ) ) { tempRetValue.add ( new org.ovirt.engine.core.compat.Guid ( id ) ) ; } setReturnValue ( tempRetValue ) ; }
protected org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAO setUpStorageServerConnectionLunMapDAO ( ) { storageServerConnectionLunMapDAO = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageServerConnectionLunMapDAO.class ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionLunMapDao ( ) ) . thenReturn ( storageServerConnectionLunMapDAO ) ; return storageServerConnectionLunMapDAO ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
protected boolean setAndValidateDiskProfiles ( ) { java.util.Map < org.ovirt.engine.core.common.businessentities.DiskImage , org.ovirt.engine.core.compat.Guid > map = new java.util.HashMap < > ( ) ; for ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters ( ) . getParametersList ( ) ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageByImageId ( parameters.getImageId ( ) ) ; map.put ( diskImage , diskImage.getStorageIds ( ) . get ( 0 ) ) ; } return validate ( org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles ( map , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool ( ) . getcompatibility_version ( ) ) ) ; }
public void testAlreadyExistStorageDomain ( ) { org.mockito.Mockito.when ( storageDomainStaticDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest.getStorageDomain ( ) ) ; org.junit.Assert.assertFalse ( "Storage Domain already exists" , command.canAddDomain ( ) ) ; org.junit.Assert.assertTrue ( "Import block Storage Domain should have failed due to already existing Storage Domain" , command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST.toString ( ) ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notChangingManagementNetwork ( org.ovirt.engine.core.common.businessentities.network.Network newNetwork ) { java.lang.String managementNetwork = org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.ManagementNetwork ) ; return ( network.getName ( ) . equals ( managementNetwork ) ) && ( ! ( newNetwork.getName ( ) . equals ( managementNetwork ) ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
private void doInit ( org.ovirt.engineextensions.aaa.ldap.ExtMap input , org.ovirt.engineextensions.aaa.ldap.ExtMap output ) throws java.lang.Exception { try { ensureFramework ( input ) ; } catch ( java.lang.Exception e ) { org.ovirt.engineextensions.aaa.ldap.AuthzExtension.log.error ( "{} Cannot initialize LDAP framework, deferring initialization. Error: {}" , logPrefix , e.getMessage ( ) ) ; org.ovirt.engineextensions.aaa.ldap.AuthzExtension.log.debug ( "Exception" , e ) ; } }
protected void ExecuteIrsBrokerCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMRevertTask , new org.ovirt.engine.core.common.vdscommands.HSMTaskGuidBaseVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMRevertTaskVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMRevertTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; if ( ( returnValue != null ) && ( ! ( returnValue.getSucceeded ( ) ) ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMRevertTaskVDSCommand.getVDSReturnValue ( ) . setVdsError ( returnValue.getVdsError ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.SPMRevertTaskVDSCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; } }
public void canDoActionFailureOnMovingLunDisk ( ) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters1 = new org.ovirt.engine.core.common.action.MoveDiskParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , srcStorageId , dstStorageId ) ; command.getParameters ( ) . setParametersList ( java.util.Collections.singletonList ( moveDiskParameters1 ) ) ; initLunDisk ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.ACTION_TYPE_FAILED_NOT_SUPPORTED_DISK_STORAGE_TYPE ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.DiskImage disk , java.lang.String value ) { object.getDiskImportData ( disk.getId ( ) ) . setSelectedStorageDomainString ( value ) ; diskTable.edit ( object.getImportDiskListModel ( ) ) ; }
protected void updateScsiPassthroguhChangeability ( ) { getIsScsiPassthrough ( ) . setIsChangable ( ( ( ! ( getIsReadOnly ( ) . getEntity ( ) ) ) && ( isEditEnabled ( ) ) ) ) ; getIsScsiPassthrough ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.cannotEnableScsiPassthroughForLunReadOnlyDisk ( ) ) ; updateSgIoUnfilteredChangeability ( ) ; }
protected void updatePassDiscardChangeability ( ) { if ( ( isEditEnabled ( ) ) && ( getPassDiscard ( ) . getIsAvailable ( ) ) ) { if ( ( getDiskStorageType ( ) . getEntity ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN ) ) { updatePassDiscardChangeabilityForDirectLun ( ) ; } else if ( ( getDiskStorageType ( ) . getEntity ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) ) { updatePassDiscardChangeabilityForDiskImage ( ) ; } } }
public void setup ( ) { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; org.ovirt.engine.core.CommandMocks.mockDbFacade ( cmd , dbFacade ) ; org.mockito.Mockito.when ( dbFacade.getStoragePoolDao ( ) ) . thenReturn ( storagePoolDao ) ; org.mockito.Mockito.when ( dbFacade.getStorageDomainDao ( ) ) . thenReturn ( storageDomainDao ) ; org.mockito.Mockito.doReturn ( eventQueue ) . when ( cmd ) . getEventQueue ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { ( ( org.ovirt.engine.ui.common.widget.AddRemoveRowWidget < M , T , V > . AddRemoveRowPanel ) ( widget.getParent ( ) ) ) . swapButton ( createButton ( item ) ) ; org.ovirt.engine.core.common.utils.Pair < T , V > item = addGhostEntry ( ) ; onAdd ( item.getFirst ( ) , item.getSecond ( ) ) ; }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; boolean force = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmResource.FORCE , true , false ) ; org.ovirt.engine.core.common.action.RemoveVmParameters params = new org.ovirt.engine.core.common.action.RemoveVmParameters ( guid , force ) ; boolean detachOnly = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendVmResource.DETACH_ONLY , true , false ) ; if ( detachOnly ) { params.setRemoveDisks ( false ) ; } return performAction ( VdcActionType.RemoveVm , params ) ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createDefaultVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setname ( "Default" ) ; group.setId ( VDSGroup.DEFAULT_VDS_GROUP_ID ) ; group.setcpu_name ( "Intel Conroe" ) ; group.setcompatibility_version ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setStoragePoolId ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.STORAGE_POOL_ID ) ; return group ; }
public void executeCommandWhenServerIdPresent ( ) { setUpMocksForUpdate ( ) ; mockForReadContent ( true , null ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.times ( 1 ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd.getAuditLogTypeValue ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmStatistics getVmStatisticsToSave ( ) { return saveStatistics ? dbVm.getStatisticsData ( ) : null ; }
public void testNetworkExistWhenOnlyNetworkNameIsSet ( ) { java.lang.String networkName = "network" ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkName ( networkName ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( networkAttachment ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_HAVING_NAME_NOT_EXISTS ; org.junit.Assert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , networkName ) ) ) ; }
protected java.lang.String getHiddenColumnWidthKey ( com.google.gwt.user.cellview.client.Column < T , ? > column ) { if ( columnResizePersistenceEnabled ) { return ( ( ( ( ( ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_HIDDEN ) + "_" ) + ( org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.GRID_COLUMN_WIDTH_PREFIX ) ) + "_" ) + ( getGridElementId ( ) ) ) + "_" ) + ( getColumnIndex ( column ) ) ; } return null ; }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public static java.util.Collection < org.ovirt.engine.core.compat.Guid > getDiskImageIds ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { java.util.Collection < org.ovirt.engine.core.compat.Guid > result = new java.util.ArrayList < > ( ) ; if ( diskImages != null ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages ) { result.add ( diskImage.getImageId ( ) ) ; } } return result ; }
private void managePrestartedVmsInPool ( org.ovirt.engine.core.common.businessentities.VmPool vmPool ) { org.ovirt.engine.core.compat.Guid vmPoolId = vmPool.getvm_pool_id ( ) ; int prestartedVms = org.ovirt.engine.core.bll.VmPoolCommandBase.getNumOfPrestartedVmsInPool ( vmPoolId ) ; int missingPrestartedVms = ( vmPool.getPrestartedVms ( ) ) - prestartedVms ; if ( missingPrestartedVms > 0 ) { int numOfVmsToPrestart = java.lang.Math.min ( missingPrestartedVms , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.VmPoolMonitorBatchSize ) ) ; org.ovirt.engine.core.bll.VmPoolMonitor.log.infoFormat ( "VmPool {0} is missing {1} prestarted Vms, attempting to prestart {2} Vms" , vmPoolId , missingPrestartedVms , numOfVmsToPrestart ) ; prestartVms ( vmPoolId , numOfVmsToPrestart ) ; } }
protected void EntityPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . EntityPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "IsSelectedNullable" ) ) { org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel selectionTreeNodeModel = ( ( org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel ) ( sender ) ) ; org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tagModel = ( ( org.ovirt.engine.ui.uicommonweb.models.tags.TagModel ) ( selectionTreeNodeModel.getEntity ( ) ) ) ; tagModel.setSelection ( selectionTreeNodeModel.getIsSelectedNullable ( ) ) ; OnTagSelectionChanged ( tagModel , e ) ; } }
private boolean performStorageDomainsChecks ( org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters ) { org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain = getImageSourceDomain ( parameters.getImageId ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = getStorageDomainById ( parameters.getStorageDomainId ( ) , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePoolId ( ) ) ; return ( ( validateSourceStorageDomain ( sourceDomain ) ) && ( validateDestStorage ( destDomain ) ) ) && ( validateDestStorageAndSourceStorageOfSameTypes ( destDomain , sourceDomain ) ) ; }
protected void setUpCreationExpectations ( ) { setUpCreationExpectations ( ActionType.AddVmTemplate , org.ovirt.engine.core.common.action.AddVmTemplateParameters.class , new java.lang.String [ ] { "Name" , "Description" } , new java.lang.Object [ ] { NAMES [ 0 ] , DESCRIPTIONS [ 0 ] } , true , true , GUIDS [ 0 ] , asList ( GUIDS [ 2 ] ) , asList ( new org.ovirt.engine.core.common.businessentities.AsyncTaskStatus ( org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished ) ) , VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getEntity ( 0 ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.UserProfile profile = org.ovirt.engine.core.bll.UpdateUserProfileCommand.getUserProfile ( ) ; profile.setSshPublicKeyId ( org.ovirt.engine.core.bll.UpdateUserProfileCommand.getParameters ( ) . getUserProfile ( ) . getSshPublicKeyId ( ) ) ; profile.setSshPublicKey ( org.ovirt.engine.core.bll.UpdateUserProfileCommand.getParameters ( ) . getUserProfile ( ) . getSshPublicKey ( ) ) ; userProfileDao.update ( profile ) ; org.ovirt.engine.core.bll.UpdateUserProfileCommand.setSucceeded ( true ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( ReturnValue ) ) ; setExportPath ( ( connection == null ? null : connection.getConnection ( ) ) ) ; stopProgress ( ) ; }
private void networkNotUsedByVmsTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { org.mockito.Mockito.when ( vmDao.getAllForNetwork ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( vms ) ; org.junit.Assert.assertThat ( validator.networkNotUsedByVms ( ) , matcher ) ; }
private org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters createAddCommandParams ( org.ovirt.engine.api.model.Cluster cluster , org.ovirt.engine.core.common.businessentities.StoragePool dataCenter ) { org.ovirt.engine.core.common.businessentities.VDSGroup clusterEntity = map ( cluster , map ( dataCenter ) ) ; if ( ! ( ( cluster.isSetErrorHandling ( ) ) && ( cluster.getErrorHandling ( ) . isSetOnError ( ) ) ) ) { clusterEntity.setMigrateOnError ( null ) ; } final org.ovirt.engine.core.compat.Guid managementNetworkId = managementNetworkFinder.getManagementNetworkId ( cluster , dataCenter.getId ( ) ) ; return new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters ( clusterEntity , managementNetworkId ) ; }
protected void RemoveVmNetwork ( ) { new org.ovirt.engine.core.bll.network.VmInterfaceManager ( ) . removeAll ( macAdded , getVmId ( ) ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel ( ) . getCreateSnapshotCommand ( ) ) ) { return snapshotPopupProvider.get ( ) ; } else if ( lastExecutedCommand == ( getModel ( ) . getEditSnapshotScheduleCommand ( ) ) ) { return snapshotPopupProvider.get ( ) ; } return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.DiskSnapshot model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainDiskSnapshotsResourceTest.DISK_ID.toString ( ) , model.getDisk ( ) . getId ( ) ) ; }
public void testAddIncompleteParameters ( ) { org.ovirt.engine.api.model.Cdrom model = new org.ovirt.engine.api.model.Cdrom ( ) ; model.setName ( NAMES [ 0 ] ) ; model.setFile ( new org.ovirt.engine.api.model.File ( ) ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; verifyIncompleteException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.collection.add ( model ) ) , "Cdrom" , "add" , "file.id" ) ; }
public static void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private void commonTestFlow ( boolean withDummyLun ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getVgId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VDS_ID ) ; expectGetLunsForVg ( org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.VG_ID , withDummyLun ) ; expectGetDeviceList ( ) ; expectGetLunsMap ( ) ; expectGetConnections ( ) ; getQuery ( ) . setInternalExecution ( true ) ; getQuery ( ) . executeCommand ( ) ; org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded ( getQuery ( ) , true ) ; org.ovirt.engine.core.bll.GetLunsByVgIdQueryTest.checkReturnValue ( getQuery ( ) ) ; }
public void testUpdateReadOnly ( ) { setUpGetEntityExpectations ( 2 ) ; setUpDiskVmElementExpectations ( ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmDisk , org.ovirt.engine.core.common.action.VmDiskOperationParameterBase.class , new java.lang.String [ ] { "VmId" , "DiskVmElement.ReadOnly" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.VM_ID , java.lang.Boolean.TRUE } , true , true ) ) ; org.ovirt.engine.api.model.Disk disk = resource.update ( getUpdate ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( disk ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Permission permission ) { validateParameters ( permission , ( isPrincipalSubCollection ( ) ? new java.lang.String [ ] { "role.id|name" , "dataCenter|cluster|host|storageDomain|vm|vmPool|template.id" } : new java.lang.String [ ] { "role.id|name" , "user|group.id" } ) ) ; org.ovirt.engine.core.common.action.PermissionsOperationsParameters parameters = getParameters ( permission ) ; org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > resolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ; return performCreate ( VdcActionType.AddPermission , parameters , resolver ) ; }
private org.ovirt.engine.core.bll.QueriesCommandBase < ? > mockQuery ( ) { org.ovirt.engine.core.bll.QueriesCommandBase < ? > query = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.QueriesCommandBase.class , org.mockito.Mockito.withSettings ( ) . useConstructor ( params ) . defaultAnswer ( Answers.CALLS_REAL_METHODS ) ) ; org.mockito.Mockito.doReturn ( mockSessionDataContainer ) . when ( query ) . getSessionDataContainer ( ) ; query.postConstruct ( ) ; return query ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getDbGroupDao ( ) ; newGroup = new org.ovirt.engine.core.common.businessentities.DbGroup ( ) ; newGroup.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newGroup.setExternalId ( "0" ) ; newGroup.setDomain ( "domain" ) ; newGroup.setName ( "name" ) ; newGroup.setActive ( true ) ; newGroup.setNamespace ( "*" ) ; existingGroup = dao.get ( new org.ovirt.engine.core.compat.Guid ( "b399944a-81ab-4ec5-8266-e19ba7c3c9d1" ) ) ; }
protected void setLock ( org.ovirt.engine.core.utils.lock.EngineLock lock ) { context.withLock ( lock ) ; }
protected void executeVdsBrokerCommand ( ) { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker ( ) . hotplugMemory ( buildData ( ) ) ; org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue ( ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport ( e ) ; org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue ( ) . setExceptionString ( null ) ; } }
public void invokeClient ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.SignString , new org.ovirt.engine.core.common.queries.SignStringParameters ( org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker.createConnectionString ( host , port , useSsl ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.String signedTicket = returnValue.getReturnValue ( ) ; invokeClientNative ( signedTicket ) ; } } ) ) ; }
public void testGetDataAndSetDataWithSessionParam ( ) { container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ; org.junit.Assert.assertNull ( "Get should return null with an empty session" , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public void resumeJob ( java.lang.String jobId ) { try { sched.resumeJob ( org.quartz.JobKey.jobKey ( jobId , Scheduler.DEFAULT_GROUP ) ) ; } catch ( org.quartz.SchedulerException se ) { log.error ( "failed to pause a job with id={}: {}" , jobId , se.getMessage ( ) ) ; log.debug ( "Exception" , se ) ; } }
public void refresh ( ) { log.debug ( "Affinity Rules Enforcement Manager interval reached." ) ; final java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmCandidates = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : vdsGroupDao.getWithoutMigratingVms ( ) ) { if ( ! ( cluster.isInUpgradeMode ( ) ) ) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate ( cluster ) ; if ( candidate != null ) { vmCandidates.add ( candidate ) ; } } } for ( org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates ) { migrateVM ( vm ) ; } }
private org.ovirt.engine.core.common.businessentities.StorageType getStorageType ( java.util.List < org.ovirt.engine.core.common.businessentities.LUNs > luns ) { org.ovirt.engine.core.common.businessentities.StorageType storageType = null ; if ( ! ( luns.isEmpty ( ) ) ) { org.ovirt.engine.core.common.businessentities.LUNs lun = luns.get ( 0 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map > lunConnections = getLunConnections ( lun.getLUN_id ( ) ) ; if ( ! ( lunConnections.isEmpty ( ) ) ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = getConnection ( lunConnections.get ( 0 ) . getstorage_server_connection ( ) ) ; storageType = connection.getstorage_type ( ) ; } } return storageType ; }
protected boolean isGhost ( org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel value ) { if ( value != ( defaultProfile ) ) { java.lang.String name = ( ( java.lang.String ) ( value.getName ( ) . getEntity ( ) ) ) ; return ( name == null ) || ( name.isEmpty ( ) ) ; } return false ; }
protected void setupForStorageTests ( ) { org.mockito.Mockito.doReturn ( multipleSdValidator ) . when ( command ) . getStorageDomainsValidator ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.anySetOf ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( multipleSdValidator ) . allDomainsHaveSpaceForNewDisks ( org.mockito.ArgumentMatchers.anyList ( ) ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.common.businessentities.AuditLog event = org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getAuditLogDao ( ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ; if ( event == null ) { return failCanDoAction ( VdcBllMessages.AUDIT_LOG_CANNOT_REMOVE_AUDIT_LOG_NOT_EXIST ) ; } if ( ( ! ( AuditLogSeverity.ALERT.equals ( event.getSeverity ( ) ) ) ) && ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.OVIRT.equalsIgnoreCase ( event.getOrigin ( ) ) ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; } return true ; }
private org.ovirt.engine.core.common.businessentities.StoragePool mockStoragePool ( org.ovirt.engine.core.compat.Version compatibilityVersion ) { org.ovirt.engine.core.compat.Guid storagePoolId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; storagePool.setId ( storagePoolId ) ; storagePool.setCompatibilityVersion ( compatibilityVersion ) ; storagePool.setStatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito.when ( storagePoolDAO.get ( storagePoolId ) ) . thenReturn ( storagePool ) ; return storagePool ; }
public void onRemove ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > pb = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object a : sourceListModel.getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.network.Network network = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( a ) ) ; pb.add ( new org.ovirt.engine.core.common.action.RemoveNetworkParameters ( network.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.RemoveNetwork , pb ) ; sourceListModel.setConfirmWindow ( null ) ; }
private void checkTemplatesDcAndDisks ( java.util.List < org.ovirt.engine.core.compat.Guid > templateIds , org.ovirt.engine.core.compat.Guid storagePoolId , boolean hasDisks ) { for ( org.ovirt.engine.core.compat.Guid templateId : templateIds ) { org.junit.Assert.assertEquals ( storagePoolId , dbFacade.getVmTemplateDao ( ) . get ( templateId ) . getStoragePoolId ( ) ) ; checkDisks ( templateId , hasDisks ) ; } }
public void setUp ( ) { setXmlResponse ( "clusters" , 200 , "<clusters/>" ) ; setXmlResponse ( "clusters/123" , 200 , "<cluster id=\"123\"><name>test</name></cluster>" ) ; startServer ( ) ; connection = ( ( org.ovirt.engine.sdk4.internal.HttpConnection ) ( testConnectionBuilder ( ) . header ( "my" , "value" ) . build ( ) ) ) ; clustersService = connection.systemService ( ) . clustersService ( ) ; clusterService = clustersService.clusterService ( "123" ) ; }
public static void getExternalProviderHostGroupList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostGroupsFromExternalProvider , params , aQuery ) ; }
public void canDoActionEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmForSpace ( ) ; initVmDiskImage ( ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
public void vmNotRunningOnHostWithBalloonEnabled ( org.ovirt.engine.core.vdsbroker.VmTestPairs data ) { initMocks ( data , false ) ; org.mockito.Mockito.when ( vdsManagerVds.isBalloonEnabled ( ) ) . thenReturn ( true ) ; org.junit.Assume.assumeTrue ( ( ( data.vdsmVm ( ) ) == null ) ) ; vmAnalyzer.analyze ( ) ; org.junit.Assert.assertTrue ( vmAnalyzer.isMovedToDown ( ) ) ; }
private void plug ( ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.HotPlugDiskToVm , createHotPlugDiskToVmParameters ( true ) , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , this ) ; }
protected void initVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setStatus ( VMStatus.PoweredDown ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseMockUtils.mockVmDao ( command , vmDao ) ; org.mockito.Mockito.when ( vmDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vm ) ; mockGetVmsListForDisk ( ) ; }
public static void GetVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.GetVmConfigurationBySnapshotQueryParams ( snapshotSourceId ) , aQuery ) ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void newPoolNameIsAlreadyTaken ( ) { org.mockito.Mockito.when ( spDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > storagePoolList = new java.util.ArrayList < > ( ) ; storagePoolList.add ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createStoragePool ( ) ) ; org.mockito.Mockito.when ( spDao.getByName ( org.mockito.Matchers.anyString ( ) , org.mockito.Matchers.anyBoolean ( ) ) ) . thenReturn ( new java.util.ArrayList ( storagePoolList ) ) ; }
public void testActivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicResource ) ( resource ) ) ; setUpGetEntityExpectations ( 3 ) ; setAllContentHeaderExpectation ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID , org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID } ) ) ; verifyActionResponse ( backendVmNicResource.activate ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.Provider getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.Provider provider = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Provider.class ) ; org.mockito.Mockito.when ( provider.getId ( ) ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito.when ( provider.getName ( ) ) . thenReturn ( NAMES [ index ] ) ; org.mockito.Mockito.when ( provider.getDescription ( ) ) . thenReturn ( DESCRIPTIONS [ index ] ) ; return provider ; }
private void addVmDynamic ( ) { org.ovirt.engine.core.common.businessentities.VmDynamic tempVar = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; tempVar.setId ( getVmId ( ) ) ; tempVar.setStatus ( VMStatus.ImageLocked ) ; tempVar.setVmHost ( "" ) ; tempVar.setVmIp ( "" ) ; tempVar.setAppList ( getParameters ( ) . getVm ( ) . getDynamicData ( ) . getAppList ( ) ) ; getVmDynamicDAO ( ) . save ( tempVar ) ; getCompensationContext ( ) . snapshotNewEntity ( tempVar ) ; }
public void completeExternalNetworkProviderConfigurationsNoNameTest ( ) { org.ovirt.engine.api.model.ExternalNetworkProviderConfigurations configurations = getExternalNetworkProviderConfigurations ( 1 ) ; configurations.getExternalNetworkProviderConfigurations ( ) . get ( 0 ) . getExternalNetworkProvider ( ) . setName ( null ) ; try { org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalNetworkProviderConfigurations ( resource , configurations ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , Response.Status.BAD_REQUEST.getStatusCode ( ) ) ; } }
protected void setImageStatus ( org.ovirt.engine.core.common.businessentities.ImageStatus imageStatus ) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getRelevantDiskImage ( ) ; if ( ( diskImage != null ) && ( ( diskImage.getImageStatus ( ) ) != imageStatus ) ) { diskImage.setImageStatus ( imageStatus ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( diskImage.getImage ( ) . getId ( ) , imageStatus ) ; } }
private void initCommand ( ) { org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( ) ; params.setVdsId ( org.ovirt.engine.core.bll.StartVdsCommandTest.FENCECD_HOST_ID ) ; command = new org.ovirt.engine.core.bll.StartVdsCommand ( params ) ; command.setAuditLogDirector ( auditLogDirector ) ; command = org.mockito.Mockito.spy ( command ) ; org.mockito.Mockito.doReturn ( executor ) . when ( command ) . createHostFenceActionExecutor ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.FencingPolicy.class ) ) ; command.setVdsGroupId ( org.ovirt.engine.core.bll.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
public static void getProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
public void testActivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicResource ) ( resource ) ) ; setUpGetEntityExpectations ( 4 ) ; setGetVmQueryExpectations ( 4 ) ; setGetNetworksQueryExpectations ( 4 ) ; setGetGuestAgentQueryExpectations ( 3 ) ; setAllContentHeaderExpectation ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ 1 ] } ) ) ; verifyActionResponse ( backendVmNicResource.activate ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
public void testDoGet_ExistingFile ( ) throws java.io.IOException , java.net.URISyntaxException , javax.servlet.ServletException { org.mockito.Mockito.when ( mockRequest.getPathInfo ( ) ) . thenReturn ( "/org/ovirt/engine/core/utils/branding/BrandingServletTest.class" ) ; org.mockito.Mockito.when ( mockFile.getAbsolutePath ( ) ) . thenReturn ( this . getClass ( ) . getClassLoader ( ) . getResource ( "." ) . toURI ( ) . getPath ( ) ) ; testServlet.doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockResponse ) . setHeader ( org.mockito.Matchers.eq ( "ETag" ) , org.mockito.Matchers.anyString ( ) ) ; }
org.ovirt.engine.api.model.Group lookupGroup ( org.ovirt.engine.core.compat.Guid guid ) { java.lang.String id = guid.toString ( ) ; for ( org.ovirt.engine.core.common.businessentities.LdapGroup group : getGroupsFromDomain ( ) ) { if ( group.getid ( ) . toString ( ) . equals ( id ) ) return mapAdGroup ( group ) ; } return notFound ( ) ; }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc verifyUntrustedVolume ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.verifyUntrustedVolume ( sdID , spID , imageID , volumeID ) ; org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void mapPropertiesSyntaxNullValue ( ) { org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils utils = new org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils ( ) ; java.util.Map < java.lang.String , java.lang.String > propMap = new java.util.LinkedHashMap < java.lang.String , java.lang.String > ( ) ; propMap.put ( "speed" , "1024" ) ; propMap.put ( "duplex" , null ) ; propMap.put ( "debug" , "" ) ; org.junit.Assert.assertFalse ( utils.syntaxErrorInProperties ( propMap ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondaryDestinations ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long requiredMemory = ( parameters.containsKey ( PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName ( ) ) ) ? java.lang.Long.parseLong ( parameters.get ( PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName ( ) ) ) : 0L ; return getUnderUtilizedMemoryHosts ( candidateHosts , requiredMemory , 0 ) ; }
protected boolean canDoAction ( ) { java.lang.String user = org.ovirt.engine.core.bll.aaa.LoginBaseCommand.getParameters ( ) . getLoginName ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( user ) ) { org.ovirt.engine.api.extensions.ExtMap authRecord = ( ( org.ovirt.engine.api.extensions.ExtMap ) ( org.ovirt.engine.core.bll.aaa.LoginBaseCommand.getParameters ( ) . getAuthRecord ( ) ) ) ; if ( authRecord != null ) { user = authRecord.get ( AuthRecord.PRINCIPAL ) ; } } java.lang.String profile = org.ovirt.engine.core.bll.aaa.LoginBaseCommand.getParameters ( ) . getProfileName ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( profile ) ) { profile = "N/A" ; } org.ovirt.engine.core.bll.aaa.LoginBaseCommand.setUserName ( java.lang.String.format ( "%s@%s" , user , profile ) ) ; boolean result = isUserCanBeAuthenticated ( ) ; if ( ! result ) { logAutheticationFailure ( ) ; } return result ; }
public void testUpdate ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( getVm ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO , org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO , VMStatus.Down ) ) ; setUpEntityQueryExpectations ( getVm ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.B_ISO , org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.A_ISO , VMStatus.Down ) ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVm , org.ovirt.engine.core.common.action.VmManagementParametersBase.class , new java.lang.String [ ] { "VmStaticData.IsoPath" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.B_ISO } , true , true ) ) ; org.ovirt.engine.api.model.Cdrom cdrom = getCdrom ( org.ovirt.engine.api.restapi.resource.BackendVmCdromResourceTest.B_ISO ) ; cdrom = resource.update ( cdrom ) ; assertTrue ( cdrom.isSetFile ( ) ) ; }
public void testHost ( ) { testValidSql ( "Host: sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: name =\"test1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds WHERE vds.vds_name LIKE test1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds WHERE vds.usage_cpu_percent > 80 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: user.name = \"user1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN vdc_users_with_tags ON vds.vds_id=vdc_users_with_tags.vm_guid WHERE vdc_users_with_tags.name LIKE user1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: STORAGE.name = \"sd1\" sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vds_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE sd1 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN audit_log ON vds.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds.usage_cpu_percent > 80 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and tag=tag1 sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN audit_log ON vds_with_tags.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds_with_tags.tag_name IN ('tag1','all') ))) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: tag=\"tag1\"" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags WHERE vds_with_tags.tag_name IN ('tag1','all') )) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: vm.name=\"vm1\"" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN vms_with_tags ON vds.vds_id=vms_with_tags.run_on_vds WHERE vms_with_tags.vm_name LIKE vm1 ) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE ( ( vms.cluster_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1 and Vnic.network_name = vnic_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id LEFT OUTER JOIN vm_interface_view ON vms_with_tags.vm_guid=vm_interface_view.vm_guid WHERE ( ( ( vms.cluster_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ) AND vm_interface_view.network_name LIKE vnic\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setId ( networkId ) ; return network ; }
public org.ovirt.engine.sdk.decorators.DataCenterQuota add ( org.ovirt.engine.sdk.decorators.Quota quota ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . add ( url , quota , org.ovirt.engine.sdk.entities.Quota.class , org.ovirt.engine.sdk.decorators.DataCenterQuota.class , headers ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message execute ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message message ) { java.lang.String heartbeats = message.getHeaders ( ) . get ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_HEART_BEAT ) ; org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message response = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . connected ( ) . withHeader ( "session" , java.util.UUID.randomUUID ( ) . toString ( ) ) ; if ( heartbeats != null ) { response.withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_HEART_BEAT , org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.swapHeartbeat ( heartbeats ) ) ; } return response ; }
public void testDefaultRouteNetworkCannotBeExternal ( ) { networkCluster.setDefaultRoute ( true ) ; setNetworkExternal ( network , true ) ; org.ovirt.engine.core.common.errors.EngineMessage message = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL ; org.hamcrest.MatcherAssert.assertThat ( validator.defaultRouteNetworkCannotBeExternal ( network ) , org.hamcrest.CoreMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( message ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.hasItem ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.NETWORK_NAME_REPLACEMENT ) ) ) ) ; }
private void addInterfaceToDb ( org.ovirt.engine.core.common.businessentities.network.VmNic vmNetworkInterface ) { org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getVmNicDao ( ) . save ( vmNetworkInterface ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext ( ) . snapshotNewEntity ( vmNetworkInterface ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getDbFacade ( ) . getVmNetworkStatisticsDao ( ) . save ( vmNetworkInterface.getStatistics ( ) ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext ( ) . snapshotNewEntity ( vmNetworkInterface.getStatistics ( ) ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImageBase > presets = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImageBase > ) ( returnValue ) ) ; diskModel.getPreset ( ) . setItems ( presets ) ; diskModel.getPreset ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault ( presets ) ) ; }
public void shouldCreateNiceJsonValidationResult ( ) throws java.io.IOException { invalidVM.setCpuPinning ( "i am pinned" ) ; invalidVM.setDedicatedVmForVdsList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; invalidVM.setMigrationSupport ( org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST ) ; invalidVM.setId ( Guid.Empty ) ; newHost1.setHostOs ( "invalid os" ) ; org.ovirt.engine.core.bll.ValidationResult validationResult = validator.isUpgradePossible ( java.util.Arrays.asList ( newHost1 ) , java.util.Arrays.asList ( invalidVM ) ) ; org.assertj.core.api.Assertions.assertThat ( validationResult.getVariableReplacements ( ) . get ( 0 ) ) . contains ( "VM_CPUS_PINNED" , "VM_NOT_MIGRATABLE" , "HOST_INVALID_OS" ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusReturnForXmlRpc migrateStatus ( java.lang.String vmId ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.getMigrationStatus" ) . withParameter ( "vmID" , vmId ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "response" ) . withResponseType ( java.lang.Long.class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusReturnForXmlRpc ( response ) ; }
private void storageDomain_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain selectedStorage = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getStorageDomain ( ) . getSelectedItem ( ) ) ) ; if ( selectedStorage != null ) { updateVolumeType ( selectedStorage.getStorageType ( ) ) ; updateWipeAfterDelete ( selectedStorage.getStorageType ( ) ) ; } updateQuota ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getDataCenter ( ) . getSelectedItem ( ) ) ) ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 ) ; setAllContentHeaderExpectation ( ) ; setGetVmQueryExpectations ( 1 ) ; setGetNetworksQueryExpectations ( 1 ) ; setGetGuestAgentQueryExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmInterface , org.ovirt.engine.core.common.action.RemoveVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "InterfaceId" } , new java.lang.Object [ ] { PARENT_ID , GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( collection.deprecatedRemove ( GUIDS [ 0 ] . toString ( ) ) ) ; }
private boolean updateImageParametersRequiringVmDownRequested ( ) { if ( getOldDisk ( ) . getDiskStorageType ( ) . isInternal ( ) ) { return false ; } org.ovirt.engine.core.compat.Guid oldQuotaId = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( getOldDisk ( ) ) ) . getQuotaId ( ) ; return ! ( java.util.Objects.equals ( oldQuotaId , getQuotaId ( ) ) ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > createDiskDummiesForSpaceValidations ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > dummies = new java.util.ArrayList ( disksList.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : disksList ) { org.ovirt.engine.core.compat.Guid targetSdId = imageToDestinationDomainMap.get ( image.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage dummy = org.ovirt.engine.core.bll.ImagesHandler.createDiskImageWithExcessData ( image , targetSdId ) ; dummies.add ( dummy ) ; } return dummies ; }
protected java.lang.Object runPublicQuery ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams , javax.servlet.http.HttpServletRequest request ) { initQueryParams ( queryParams , request ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend.RunPublicQuery ( queryType , queryParams ) ; if ( result.getSucceeded ( ) ) { return result.getReturnValue ( ) ; } else { return null ; } }
public void tWarn_1_error ( java.lang.Exception exception , java.lang.String errorComponent , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws ovirt_engine_dwh.sampletimekeepingjob_3_2.SampleTimeKeepingJob.TalendException { end_Hash.put ( "tWarn_1" , java.lang.System.currentTimeMillis ( ) ) ; ( ( java.util.Map ) ( threadLocal.get ( ) ) ) . put ( "status" , "failure" ) ; tWarn_1_onSubJobError ( exception , errorComponent , globalMap ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn hotplugMemory ( java.util.Map info ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "VM.hotplugMemory" ) . withParameter ( "vmID" , getVmId ( info ) ) . withParameter ( "params" , info ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
protected void startPollingAsyncTasks ( java.util.Collection < org.ovirt.engine.core.compat.Guid > taskIds ) { for ( org.ovirt.engine.core.compat.Guid taskID : taskIds ) { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.startPollingTask ( taskID ) ; } }
public boolean hasOvercommitMemoryToRunVM ( org.ovirt.engine.core.common.businessentities.VDS curVds , org.ovirt.engine.core.common.businessentities.VM vm ) { double vmMemRequired = ( vm.getMemSizeMb ( ) ) + ( curVds.getGuestOverhead ( ) ) ; double vdsMemLimit = curVds.getMaxSchedulingMemory ( ) ; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug ( "hasOvercommitMemoryToRunVM: host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB" , curVds.getName ( ) , vdsMemLimit , vmMemRequired , curVds.getGuestOverhead ( ) ) ; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug ( "{} <= ??? {}" , vmMemRequired , vdsMemLimit ) ; return vmMemRequired <= vdsMemLimit ; }
public org.ovirt.engine.ui.common.widget.ImageWithDecorator getValue ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item ) { org.ovirt.engine.core.common.businessentities.VM vm = item.getVM ( ) ; com.google.gwt.resources.client.ImageResource changesImage = null ; java.lang.String vmStatus = "" ; if ( vm != null ) { if ( vm.isNextRunConfigurationExists ( ) ) { changesImage = org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.resources.vmDelta ( ) ; } vmStatus = vm.getStatus ( ) . toString ( ) ; } return new org.ovirt.engine.ui.common.widget.ImageWithDecorator ( getMainImage ( item ) , changesImage , org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_LEFT , org.ovirt.engine.ui.userportal.widget.table.column.VmStatusColumn.DECORATOR_POSITION_TOP , vmStatus ) ; }
public static void getClusterFeaturesByVersionAndCategory ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.mode.ApplicationMode category ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByVersionAndCategory , new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters ( version , category ) , aQuery ) ; }
public void initialize ( java.util.ArrayList parameters ) { super . initialize ( parameters ) ; if ( ! ( ( parameters.get ( 3 ) ) instanceof java.lang.Boolean ) ) { throw new org.ovirt.engine.core.bll.storage.InvalidOperationException ( ) ; } _isLastMaster = ( ( java.lang.Boolean ) ( parameters.get ( 3 ) ) ) ; if ( ! ( ( parameters.get ( 4 ) ) instanceof org.ovirt.engine.core.bll.storage.Guid ) ) { throw new org.ovirt.engine.core.bll.storage.InvalidOperationException ( ) ; } _newMasterStorageDomainId = ( ( org.ovirt.engine.core.bll.storage.Guid ) ( parameters.get ( 4 ) ) ) ; }
protected javax.ws.rs.core.UriInfo setUpActionExpectations ( org.ovirt.engine.core.common.action.VdcActionType task , java.lang.Class < ? extends org.ovirt.engine.core.common.action.VdcActionParametersBase > clz , java.lang.String [ ] names , java.lang.Object [ ] values , boolean valid , boolean success , java.lang.Object taskReturn , boolean replay , java.lang.String errorMessage ) { return setUpActionExpectations ( task , clz , names , values , valid , success , taskReturn , null , replay , errorMessage ) ; }
protected void removeVmNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces = getVmNicDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces ) { org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . freeMac ( iface.getMacAddress ( ) ) ; } } }
public static void GetDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.OnSuccess ( aQuery.getModel ( ) , 5 ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( age , name ) ; }
public void canDoActionFailsOnNoHook ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) ) ) ; setUpMocksForUpdate ( false ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString ( ) ) ) ; }
private void onConfigureVmsToImport ( ) { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel ) ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow ( ) ) ) ; if ( importVmsModel == null ) { return ; } if ( ! ( importVmsModel.validateArchitectures ( ) ) ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = importVmsModel.getSpecificImportModel ( ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setWindow ( null ) ; setWindow ( model ) ; }
private static boolean validateSpaceRequirements ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( storageDomain ) ; return ( storageDomainValidator.isDomainWithinThresholds ( ) . isValid ( ) ) && ( storageDomainValidator.hasSpaceForClonedDisks ( disksList ) . isValid ( ) ) ; }
protected void setVdsNetworkError ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex ) { getVDSReturnValue ( ) . setSucceeded ( false ) ; getVDSReturnValue ( ) . setExceptionString ( ex.toString ( ) ) ; getVDSReturnValue ( ) . setExceptionObject ( ex ) ; org.ovirt.engine.core.common.errors.VDSError tempVar = ex.getVdsError ( ) ; org.ovirt.engine.core.common.errors.VDSError tempVar2 = new org.ovirt.engine.core.common.errors.VDSError ( ) ; tempVar2.setCode ( VdcBllErrors.VDS_NETWORK_ERROR ) ; tempVar2.setMessage ( ex.getMessage ( ) ) ; getVDSReturnValue ( ) . setVdsError ( ( tempVar != null ? tempVar : tempVar2 ) ) ; logException ( ex ) ; }
public static boolean needsAlert ( org.ovirt.engine.core.common.businessentities.VM vm ) { boolean alertRequired = false ; if ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) { alertRequired = ( ( ! ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasGuestAgent ( vm ) ) ) || ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone ( vm ) ) ) || ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType ( vm ) ) ; } return ( ( alertRequired || ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded ( vm ) ) ) || ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError ( vm ) ) ) || ( org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasIllegalImages ( vm ) ) ; }
public void updateQuota ( org.ovirt.engine.core.common.businessentities.storage_pool datacenter ) { if ( ( datacenter.getQuotaEnforcementType ( ) . equals ( QuotaEnforcementTypeEnum.DISABLED ) ) || ( ! ( ( java.lang.Boolean ) ( getIsInternal ( ) . getEntity ( ) ) ) ) ) { getQuota ( ) . setIsAvailable ( false ) ; } else { getQuota ( ) . setIsAvailable ( true ) ; quota_storageSelectedItemChanged ( ( getIsNew ( ) ? null : ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getDisk ( ) ) ) . getQuotaId ( ) ) ) ; } }
private void verifyApplications ( org.ovirt.engine.api.model.Applications applications ) { org.junit.Assert.assertNotNull ( applications ) ; org.junit.Assert.assertEquals ( NAMES.length , applications.getApplications ( ) . size ( ) ) ; int index = 0 ; for ( org.ovirt.engine.api.model.Application app : applications.getApplications ( ) ) { org.junit.Assert.assertEquals ( NAMES [ index ] , app.getName ( ) ) ; verifyLinks ( app ) ; index ++ ; } }
public static void getUnknownImageList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < java.lang.String > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh ) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList ( aQuery , storagePoolId , forceRefresh , ImageFileType.All , new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter ( ( image ) -> ( org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX ) + ( image.getRepoImageId ( ) ) , ( image ) -> ( org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown ) == ( image.getFileType ( ) ) ) ) ; }
public boolean hasOvercommitMemoryToRunVM ( org.ovirt.engine.core.common.businessentities.VDS curVds , org.ovirt.engine.core.common.businessentities.VM vm ) { double vmMemRequired = ( vm.getMemSizeMb ( ) ) + ( curVds.getGuestOverhead ( ) ) ; double vdsMemLimit = curVds.getMaxSchedulingMemory ( ) ; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug ( "hasOvercommitMemoryToRunVM: host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB" , curVds.getName ( ) , vdsMemLimit , vmMemRequired , curVds.getGuestOverhead ( ) ) ; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug ( "{} <= ??? {}" , vmMemRequired , vdsMemLimit ) ; return vmMemRequired <= vdsMemLimit ; }
private void writeServiceLocator ( org.ovirt.api.metamodel.concepts.Locator locator ) { writer.writeStartObject ( ) ; writeCommon ( locator ) ; writeServiceRef ( locator.getService ( ) ) ; writer.writeStartArray ( "parameters" ) ; locator.parameters ( ) . forEach ( this :: writeParameter ) ; writer.writeEnd ( ) ; writer.writeEnd ( ) ; }
public void setupMocks ( ) { org.mockito.Mockito.when ( vdsGroupDao.get ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getVdsGroup ( ) ) ; org.mockito.Mockito.when ( vdsGroupDao.getFromCache ( org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID ) ) . thenReturn ( getVdsGroup ( ) ) ; org.mockito.Mockito.doReturn ( vdsGroupDao ) . when ( cmd ) . getVdsGroupDAO ( ) ; org.mockito.Mockito.when ( cmd.getSyncJobInstance ( ) ) . thenReturn ( hookSyncJob ) ; }
public static void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.storage.VmBackupModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand == ( getModel ( ) . getRemoveCommand ( ) ) ) { return removeConfirmPopupProvider.get ( ) ; } else if ( ( source.getConfirmWindow ( ) ) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.ImportCloneModel ) { return importClonePopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
public void testUpdate ( ) { updateExistingEntity ( ) ; dao.update ( existingEntity ) ; T result = dao.get ( existingEntity.getId ( ) ) ; org.ovirt.engine.core.dao.BaseGenericDaoTestCase.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( existingEntity , result ) ; verifyUpdate ( existingEntity , result ) ; }
private long getImageSizeInBytes ( ) { return ( ( ( long ) ( ( ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) . getVmMemSizeMb ( ) ) + 200 ) + ( 64 * ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) . getNumOfMonitors ( ) ) ) ) ) * 1024 ) * 1024 ; }
private void doDataCenterSearch ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDataCenterList ( new org.ovirt.engine.ui.uicommonweb.models.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > > ( ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) @ java.lang.Override public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result ) { setDataCenters ( result ) ; doNetworksSearch ( ) ; } } ) , false ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getImagesToPreview ( ) { if ( ( imagesToPreview ) == null ) { imagesToPreview = ( ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters ( ) . getDisks ( ) ) != null ) ? org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters ( ) . getDisks ( ) : org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getDbFacade ( ) . getDiskImageDao ( ) . getAllSnapshotsForVmSnapshot ( getDstSnapshot ( ) . getId ( ) ) ; imagesToPreview = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( imagesToPreview , true , true , false ) ; } return imagesToPreview ; }
private boolean registerLibvirtSecretsImpl ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets , boolean clearUnusedSecrets ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.RegisterLibvirtSecrets , new org.ovirt.engine.core.common.vdscommands.RegisterLibvirtSecretsVDSParameters ( vds.getId ( ) , libvirtSecrets , clearUnusedSecrets ) ) ; return returnValue.getSucceeded ( ) ; }
private void handleFinalizingFailure ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { log.error ( "Finalizing failed transfer. {}" , getTransferDescription ( ) ) ; stopImageTransferSession ( context.entity ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getImageGroupID ( ) ) ) { setImageStatus ( ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getTransferType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload ) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) ; } updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; }
public static java.lang.String getRegexToolPattern ( ) { java.lang.String regexPattern = java.lang.String.format ( "%1$s(?<%2$s>[0-9]{1,}.[0-9])_{1}(?<%3$s>[0-9]{1,}).[i|I][s|S][o|O]$" , org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getGuestToolsSetupIsoPrefix ( ) , org.ovirt.engine.core.bll.IsoDomainListSyncronizer.TOOL_CLUSTER_LEVEL , org.ovirt.engine.core.bll.IsoDomainListSyncronizer.TOOL_VERSION ) ; return regexPattern ; }
protected void ExecuteVdsBrokerCommand ( ) { returnValue = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterHookContentVDSCommand.getBroker ( ) . glusterHookRead ( org.ovirt.engine.core.vdsbroker.gluster.GetGlusterHookContentVDSCommand.getParameters ( ) . getGlusterCommand ( ) , org.ovirt.engine.core.vdsbroker.gluster.GetGlusterHookContentVDSCommand.getParameters ( ) . getHookStage ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.gluster.GetGlusterHookContentVDSCommand.getParameters ( ) . getHookName ( ) ) ; setReturnValue ( returnValue.getHookcontent ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.GetGlusterHookContentVDSCommand.proceedProxyReturnValue ( ) ; }
public static boolean IsAnyStorageDomainIsMatserAndActive ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > sdl ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : sdl ) { if ( ( ( ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) && ( ( a.getStatus ( ) ) != null ) ) && ( ( a.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) { return true ; } } return false ; }
public void setSelectedItem ( java.lang.Object value ) { if ( ( selectedItem ) != value ) { onSelectedItemChanging ( value , selectedItem ) ; selectedItem = value ; onSelectedItemChanged ( ) ; getSelectedItemChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SelectedItem" ) ) ; } }
private void endInternalCommandWithFailure ( ) { org.ovirt.engine.core.common.action.ExtendImageSizeParameters params = createExtendImageSizeParameters ( ) ; params.setTaskGroupSuccess ( false ) ; org.ovirt.engine.core.bll.UpdateVmDiskCommand.getBackend ( ) . endAction ( VdcActionType.ExtendImageSize , params , org.ovirt.engine.core.bll.UpdateVmDiskCommand.getContext ( ) . clone ( ) . withoutCompensationContext ( ) . withoutExecutionContext ( ) . withoutLock ( ) ) ; }
private void refreshCapabilities ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.VdsActionParameters ( vds.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.RefreshHost , list , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , null ) ; }
private void addClusterDetails ( org.ovirt.engine.core.compat.Guid clusterID , java.util.List < java.lang.String > clustersWithRunningVms ) { if ( ( clusterID != null ) && ( ! ( clusterID.equals ( Guid.Empty ) ) ) ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getClusterDao ( ) . getWithRunningVms ( clusterID ) ; if ( cluster != null ) { clustersWithRunningVms.add ( cluster.getName ( ) ) ; } } }
protected void readGeneralData ( ) { org.ovirt.engine.core.compat.backendcompat.XmlNode content = _document.SelectSingleNode ( "//*/Content" ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node ; vmBase.setOvfVersion ( getVersion ( ) ) ; node = content.SelectSingleNode ( "Description" ) ; if ( node != null ) { vmBase.setDescription ( node.InnerText ) ; } node = content.SelectSingleNode ( "Domain" ) ; if ( node != null ) { vmBase.setDomain ( node.InnerText ) ; } node = content.SelectSingleNode ( "CreationDate" ) ; if ( node != null ) { java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.UtcDateStringToLocaDate ( node.InnerText ) ; if ( creationDate != null ) { vmBase.setCreationDate ( creationDate ) ; } } node = content.SelectSingleNode ( "ExportDate" ) ; if ( node != null ) { java.util.Date exportDate = org.ovirt.engine.core.utils.ovf.OvfParser.UtcDateStringToLocaDate ( node.InnerText ) ; if ( exportDate != null ) { vmBase.setExportDate ( exportDate ) ; } } node = content.SelectSingleNode ( "IsAutoSuspend" ) ; if ( node != null ) { vmBase.setAutoSuspend ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } node = content.SelectSingleNode ( "TimeZone" ) ; if ( node != null ) { vmBase.setTimeZone ( node.InnerText ) ; } node = content.SelectSingleNode ( "default_boot_sequence" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setDefaultBootSequence ( org.ovirt.engine.core.common.businessentities.BootSequence.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "initrd_url" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setInitrdUrl ( node.InnerText ) ; } } node = content.SelectSingleNode ( "kernel_url" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setKernelUrl ( node.InnerText ) ; } } node = content.SelectSingleNode ( "kernel_params" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setKernelParams ( node.InnerText ) ; } } node = content.SelectSingleNode ( "Generation" ) ; if ( node != null ) { vmBase.setDbGeneration ( java.lang.Long.parseLong ( node.InnerText ) ) ; } else { vmBase.setDbGeneration ( 1L ) ; } node = content.SelectSingleNode ( getDefaultDisplayTypeStringRepresentation ( ) ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { defaultDisplayType = org.ovirt.engine.core.common.businessentities.DisplayType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ; vmBase.setDefaultDisplayType ( defaultDisplayType ) ; } } org.ovirt.engine.core.compat.backendcompat.XmlNodeList list = content.SelectNodes ( "Section" ) ; for ( org.ovirt.engine.core.compat.backendcompat.XmlNode section : list ) { java.lang.String value = section.Attributes.get ( "xsi:type" ) . getValue ( ) ; if ( "ovf:OperatingSystemSection_Type" . equals ( value ) ) { readOsSection ( section ) ; } else if ( "ovf:VirtualHardwareSection_Type" . equals ( value ) ) { readHardwareSection ( section ) ; } else if ( "ovf:SnapshotsSection_Type" . equals ( value ) ) { readSnapshotsSection ( section ) ; } } node = content.SelectSingleNode ( "Origin" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setOrigin ( org.ovirt.engine.core.common.businessentities.OriginType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "VmType" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setVmType ( org.ovirt.engine.core.common.businessentities.VmType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "IsSmartcardEnabled" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setSmartcardEnabled ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } } node = content.SelectSingleNode ( "DeleteProtected" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setDeleteProtected ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } } node = content.SelectSingleNode ( "TunnelMigration" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setTunnelMigration ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } } node = content.SelectSingleNode ( "VncKeyboardLayout" ) ; if ( node != null ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( node.InnerText ) ) ) { vmBase.setVncKeyboardLayout ( node.InnerText ) ; } } node = content.SelectSingleNode ( "MinAllocatedMem" ) ; if ( node != null ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( node.InnerText ) ) { vmBase.setMinAllocatedMem ( java.lang.Integer.parseInt ( node.InnerText ) ) ; } } readGeneralData ( content ) ; }
public void generate ( org.ovirt.api.metamodel.concepts.Model model ) { model.types ( ) . filter ( org.ovirt.api.metamodel.concepts.StructType.class :: isInstance ) . map ( org.ovirt.api.metamodel.concepts.StructType.class :: cast ) . forEach ( this :: generateStructSupportClasses ) ; model.types ( ) . filter ( org.ovirt.api.metamodel.concepts.EnumType.class :: isInstance ) . map ( org.ovirt.api.metamodel.concepts.EnumType.class :: cast ) . forEach ( this :: generateEnumSupportClasses ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand uiCommand ) { if ( ! ( vfsConfigPopupModel.validate ( ) ) ) { return ; } sourceListModel.setConfirmWindow ( null ) ; commitVfsConfigChanges ( hostNicVfsConfig , vfsConfigPopupModel ) ; }
public static void init ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . get ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . get ( org.ovirt.engine.core.dal.dbbroker.DbFacade.class ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao ( ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain initStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; storageDomain.setStorageDomainType ( StorageDomainType.Data ) ; storageDomain.setStatus ( StorageDomainStatus.Active ) ; return storageDomain ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView ( ) . flush ( ) ; beforeCommandExecuted ( button.getCommand ( ) ) ; button.getCommand ( ) . Execute ( ) ; }
public static void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void mockBackend ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito.doReturn ( backend ) . when ( cmd ) . getBackend ( ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; vdsReturnValue.setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , "" ) ) ; } org.mockito.Mockito.when ( vdsBrokerFrontend.runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.UpdateGlusterHook ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters.class ) ) ) . thenReturn ( vdsReturnValue ) ; }
protected void setUpCreationExpectations ( ) { setUpCreationExpectations ( ActionType.AddVmTemplate , org.ovirt.engine.core.common.action.AddVmTemplateParameters.class , new java.lang.String [ ] { "Name" , "Description" } , new java.lang.Object [ ] { NAMES [ 0 ] , DESCRIPTIONS [ 0 ] } , true , true , GUIDS [ 0 ] , asList ( GUIDS [ 2 ] ) , org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.asList ( new org.ovirt.engine.core.common.businessentities.AsyncTaskStatus ( org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished ) ) , VdcQueryType.GetVmTemplate , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.getEntity ( 0 ) ) ; }
protected boolean checkStorageDomainNameLengthValid ( ) { boolean result = true ; if ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getStorageName ( ) . length ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.StorageDomainNameSizeLimit ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ; result = false ; } return result ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { for ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel model : getItems ( ) ) { if ( model.isManagement ( ) ) { managementNetwork = model ; } if ( model.isGlusterNetwork ( ) ) { glusterNetwork = model ; } if ( model.isDefaultRouteNetwork ( ) ) { defaultRouteNetwork = model ; } } }
private org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > setupCanAddVmTests ( final int domainSizeGB ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB ) ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = createCommand ( vm ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; org.mockito.Mockito.doReturn ( createVmTemplate ( ) ) . when ( cmd ) . getVmTemplate ( ) ; org.mockito.Mockito.doReturn ( createStoragePool ( ) ) . when ( cmd ) . getStoragePool ( ) ; return cmd ; }
public void onFailure ( java.lang.Throwable caught ) { if ( org.ovirt.engine.ui.frontend.Frontend.ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute RunAction: " + caught ) , caught ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult ( actionType , parameters , null ) ; org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( caught ) ; }
public void testVmDuringSnaoshot ( ) { setUpGeneralValidations ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT ) ) . when ( snapshotsValidator ) . vmNotDuringSnapshot ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name ( ) ) ) ; }
public boolean isHostedEngine ( ) { boolean isExistingVmBehavior = ( getBehavior ( ) ) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior ; if ( isExistingVmBehavior ) { org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior ) ( getBehavior ( ) ) ) ; return ( behavior.getVm ( ) ) != null ? behavior.getVm ( ) . isHostedEngine ( ) : false ; } return false ; }
public static boolean isMemorySnapshotSupported ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } boolean archMemorySnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isMemorySnapshotSupportedByArchitecture ( vm.getClusterArch ( ) , vm.getVdsGroupCompatibilityVersion ( ) ) ; return ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MemorySnapshotSupported , vm.getVdsGroupCompatibilityVersion ( ) . toString ( ) ) ) ) && archMemorySnapshotSupported ; }
public java.lang.Object runInTransaction ( ) { vm.setRunOnVds ( getVdsId ( ) ) ; if ( getParameters ( ) . isClearHibernationVolumes ( ) ) { vm.setHibernationVolHandle ( StringUtils.EMPTY ) ; } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . update ( vm.getDynamicData ( ) ) ; return null ; }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateStoragePool , org.ovirt.engine.core.common.action.StoragePoolManagementParameter.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendDataCentersResourceTest.getModel ( 0 ) ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void OnSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel innerGeneralModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel ) ( model ) ) ; java.util.Map < java.lang.String , java.lang.String > serverMap = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ; if ( ! ( serverMap.isEmpty ( ) ) ) { innerGeneralModel.setHasNewGlusterHostsAlert ( true ) ; innerGeneralModel.setHasAnyAlert ( true ) ; } else { setHasNewGlusterHostsAlert ( false ) ; setHasAnyAlert ( false ) ; } }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface object ) { java.util.ArrayList < java.lang.String > networkList = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : importModel.getNetworks ( ) ) { networkList.add ( network.getName ( ) ) ; } ( ( org.ovirt.engine.ui.webadmin.widget.table.cell.CustomSelectionCell ) ( getCell ( ) ) ) . setOptions ( networkList ) ; return networkList.isEmpty ( ) ? "" : networkList.get ( 0 ) ; }
private org.ovirt.engine.core.common.businessentities.VM getVM ( org.ovirt.engine.api.model.VmPool model ) { if ( isFiltered ( ) ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmDataByPoolId , new org.ovirt.engine.core.common.queries.GetVmdataByPoolIdParameters ( asGuid ( model.getId ( ) ) ) , model.getId ( ) ) ; } return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , SearchType.VM , ( "Vms: pool=" + ( model.getName ( ) ) ) ) ; }
public void testRemoveNonExistant ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) , null ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { org.junit.Assert.assertNotNull ( wae.getResponse ( ) ) ; org.junit.Assert.assertEquals ( 404 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public void diskImagesDontExist ( ) { org.mockito.Mockito.doReturn ( false ) . when ( validator ) . isDiskExists ( disk1.getId ( ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . isDiskExists ( disk2.getId ( ) ) ; org.junit.Assert.assertThat ( validator.diskImagesNotExist ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST ) ) ; }
public java.util.List < org.ovirt.engine.sdk.decorators.HostHostNic > list ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ; return list ( url , org.ovirt.engine.sdk.entities.HostNics.class , org.ovirt.engine.sdk.decorators.HostHostNic.class ) ; }
public static int totalVideoRAMSizeMb ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Integer > settings = org.ovirt.engine.core.bll.utils.VideoDeviceSettings.getVideoDeviceSettings ( vm.getStaticData ( ) ) ; return ( ( ( settings.getOrDefault ( VdsProperties.VIDEO_RAM , 0 ) ) + ( settings.getOrDefault ( VdsProperties.VIDEO_VRAM , 0 ) ) ) + 1023 ) / 1024 ; }
public void refreshHeavyWeightData ( ) { log.debug ( "Refreshing Gluster Data [heavyweight]" ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao ( ) . getAll ( ) ) { if ( ( org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.refreshHeavyWeight ( cluster.getcompatibility_version ( ) ) ) && ( cluster.supportsGlusterService ( ) ) ) { try { refreshClusterHeavyWeightData ( cluster ) ; } catch ( java.lang.Exception e ) { log.error ( "Error while refreshing Gluster heavyweight data of cluster '{}': {}" , cluster.getName ( ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; } } } }
public void stringPropertiesSyntax ( ) { org.ovirt.engine.core.utils.customprop.CustomPropertiesUtils utils = new org.ovirt.engine.core.utils.customprop.CustomPropertiesUtils ( ) ; org.junit.Assert.assertTrue ( "Invalid key/value delimiter" , utils.syntaxErrorInProperties ( "speed:1024;duplex=full" ) ) ; org.junit.Assert.assertTrue ( "Missing key/value delimiter" , utils.syntaxErrorInProperties ( "speed=1024;duplex" ) ) ; org.junit.Assert.assertTrue ( "Invalid key character" , utils.syntaxErrorInProperties ( "spe*ed=1024;duplex=full" ) ) ; org.junit.Assert.assertTrue ( "Invalid value character" , utils.syntaxErrorInProperties ( "speed=1024;duplex=fu;ll" ) ) ; }
public void testKDCLocator ( ) { org.ovirt.engine.core.utils.kerberos.KDCLocator locator = new org.ovirt.engine.core.utils.kerberos.KDCLocator ( ) ; java.lang.String [ ] recordsList = new java.lang.String [ ] { "0 100 88 example.com." , "0 100 88 comp1.example.com" , "1 100 88 comp1.example.com." } ; org.ovirt.engine.core.utils.dns.DnsSRVLocator.DnsSRVResult result = locator.getKdc ( recordsList , "example.com" ) ; int numOfEntries = result.getNumOfValidAddresses ( ) ; org.junit.Assert.assertEquals ( numOfEntries , 3 ) ; }
public static java.lang.String map ( org.ovirt.engine.api.model.DiskStorageType diskStorageType ) { switch ( diskStorageType ) { case IMAGE : return DiskStorageType.IMAGE.value ( ) ; case CINDER : return DiskStorageType.CINDER.value ( ) ; case LUN : return DiskStorageType.LUN.value ( ) ; default : return null ; } }
protected java.lang.String getUrlBuilderCode ( java.util.List < org.ovirt.engine.sdk.generator.java.ParameterData > parameters ) { java.lang.StringBuilder buffer = new java.lang.StringBuilder ( ) ; for ( org.ovirt.engine.sdk.generator.java.ParameterData parameter : parameters ) { if ( ( parameter.getType ( ) ) == ( org.ovirt.engine.sdk.generator.java.ParameterType.URL ) ) { org.ovirt.engine.sdk.generator.java.templates.UrlBuilderParameterTemplate template = new org.ovirt.engine.sdk.generator.java.templates.UrlBuilderParameterTemplate ( ) ; buffer.append ( "\n" ) ; buffer.append ( template.evaluate ( parameter ) ) ; } } return buffer.toString ( ) ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForClonedDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.DiskImage > diskImages ) { final java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > disksMap = getDomainsDisksMap ( diskImages ) ; return validOrFirstFailure ( new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.ValidatorPredicate ( ) { @ java.lang.Override public org.ovirt.engine.core.bll.ValidationResult evaluate ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.StorageDomainValidator > entry ) { org.ovirt.engine.core.compat.Guid sdId = entry.getKey ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = disksMap.get ( sdId ) ; return getStorageDomainValidator ( entry ) . hasSpaceForClonedDisks ( disksList ) ; } } ) ; }
public void setUsePatternFly ( boolean usePatternFly ) { getWidget ( ) . addStyleName ( style.listBox ( ) ) ; if ( usePatternFly ) { container.addStyleName ( Styles.FORM_CONTROL ) ; container.addStyleName ( style.container ( ) ) ; getWidget ( ) . addStyleName ( style.listBoxPatternfly ( ) ) ; groupLabelContainer.addStyleName ( style.labelContainer ( ) ) ; } else { container.addStyleName ( style.container_legacy ( ) ) ; } }
public static int [ ] asIntArray ( java.util.List < ? > l , int def , int size ) { int [ ] ret = new int [ size ] ; java.util.Arrays.fill ( ret , def ) ; for ( int i = 0 ; ( i < ( l.size ( ) ) ) && ( i < size ) ; i ++ ) { ret [ i ] = java.lang.Integer.valueOf ( l.get ( i ) . toString ( ) ) ; } return ret ; }
public void testProcessingSoftwareGluster ( ) { org.mockito.Mockito.doThrow ( new java.lang.RuntimeException ( ) ) . when ( glusterStrategy ) . processSoftwareCapabilities ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; exception.expect ( java.lang.RuntimeException.class ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; strategy.processSoftwareCapabilities ( vds ) ; }
public void testGetAllMultiStoragePoolSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Datacenters" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertTrue ( ( ( storagePoolResultList ) == ( searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ) ) ; }
public static void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplateEntity ( int index ) { org.ovirt.engine.core.common.businessentities.VmTemplate vm = org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.setUpEntityExpectations ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VmTemplate.class ) , index ) ; org.mockito.Mockito.when ( vm.getDiskTemplateMap ( ) ) . thenReturn ( getDiskMap ( ) ) ; return vm ; }
protected org.ovirt.engine.core.common.queries.VdcQueryParametersBase getQueryParameters ( ) { return new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) ; }
public static void GetDataCenterMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StoragePoolNameSizeLimit ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setSucceeded ( false ) ; java.lang.String path = org.ovirt.engine.core.common.config.Config.resolveCACertificatePath ( ) ; if ( org.ovirt.engine.core.utils.FileUtil.fileExists ( path ) ) { org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.utils.FileUtil.readAllText ( path ) ) ; org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setSucceeded ( true ) ; } }
public int compare ( org.ovirt.engine.core.common.businessentities.Bookmark o1 , org.ovirt.engine.core.common.businessentities.Bookmark o2 ) { java.lang.String name1 = o1.getbookmark_name ( ) ; java.lang.String name2 = o2.getbookmark_name ( ) ; if ( ( name1 == null ) || ( name2 == null ) ) { throw new java.lang.IllegalArgumentException ( "Bookmark name cannot be null" ) ; } return name1.compareTo ( name2 ) ; }
private java.lang.String readEventLogValue ( org.ovirt.engine.core.utils.ovf.xml.XmlNode content , java.lang.String name ) { java.lang.StringBuilder fullNameSB = new java.lang.StringBuilder ( org.ovirt.engine.core.utils.ovf.OvfVmReader.EXPORT_ONLY_PREFIX ) ; fullNameSB.append ( name ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode node = content.SelectSingleNode ( fullNameSB.toString ( ) ) ; if ( node != null ) { return node.innerText ; } return null ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.VmDynamic before = dao.get ( existingVm.getId ( ) ) ; before.setVmHost ( "farkle.redhat.com" ) ; dao.update ( before ) ; org.ovirt.engine.core.common.businessentities.VmDynamic after = dao.get ( existingVm.getId ( ) ) ; org.junit.Assert.assertEquals ( before , after ) ; }
protected org.ovirt.engine.core.bll.AddVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > createCommand ( ) { org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters param = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters ( vmPools , testVm , VM_COUNT , DISK_SIZE ) ; param.setStorageDomainId ( firstStorageDomainId ) ; org.ovirt.engine.core.bll.AddVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.AddVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > ( param , org.ovirt.engine.core.bll.context.CommandContext.createContext ( param.getSessionId ( ) ) ) { @ java.lang.Override protected void initUser ( ) { } @ java.lang.Override protected void initTemplate ( ) { } } ) ; return command ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private org.ovirt.engine.core.bll.context.CommandContext createContextForStatelessSnapshotCreation ( ) { java.util.Map < java.lang.String , java.lang.String > values = getVmValuesForMsgResolving ( ) ; org.ovirt.engine.core.common.job.Step createSnapshotsStep = addSubStep ( StepEnum.EXECUTING , StepEnum.CREATING_SNAPSHOTS , values ) ; org.ovirt.engine.core.bll.job.ExecutionContext createSnapshotsCtx = new org.ovirt.engine.core.bll.job.ExecutionContext ( ) ; createSnapshotsCtx.setMonitored ( true ) ; createSnapshotsCtx.setStep ( createSnapshotsStep ) ; return org.ovirt.engine.core.bll.RunVmCommand.getContext ( ) . withExecutionContext ( createSnapshotsCtx ) ; }
private void logException ( java.lang.RuntimeException ex ) { if ( ! ( ex.getMessage ( ) . contains ( "Policy reset" ) ) ) { log.error ( "Command '{}' execution failed: {}" , this , ex.getMessage ( ) ) ; log.debug ( "Exception" , ex ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > getUserRequestForStorageDomainRepoFileList ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.common.businessentities.ImageType imageType , boolean forceRefresh ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > repoList = null ; if ( ! ( isStorageDomainValid ( storageDomainId , imageType , forceRefresh ) ) ) { return null ; } repoList = getCachedIsoListByDomainId ( storageDomainId , imageType ) ; return repoList ; }
private void addCommands ( ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveQosModel.getCommands ( ) . add ( org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand ( "onRemove" , this ) ) ; org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.RemoveQosModel.getCommands ( ) . add ( org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand ( "cancel" , this ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Permit model , int index ) { org.junit.Assert.assertEquals ( java.lang.Integer.toString ( ( index + 1 ) ) , model.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup = org.ovirt.engine.core.common.businessentities.ActionGroup.forValue ( ( index + 1 ) ) ; org.junit.Assert.assertEquals ( actionGroup.name ( ) . toLowerCase ( ) , model.getName ( ) ) ; }
public static void GetClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase ( dataCenterId ) , aQuery ) ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.compat.Guid groupId = org.ovirt.engine.core.bll.RemoveAdGroupCommand.getParameters ( ) . getAdElementId ( ) ; java.util.List < java.lang.String > reasons = org.ovirt.engine.core.bll.RemoveAdGroupCommand.getReturnValue ( ) . getCanDoActionMessages ( ) ; boolean returnValue = true ; if ( isLastSuperUserGroup ( groupId ) ) { returnValue = false ; reasons.add ( VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString ( ) ) ; } if ( groupId.equals ( MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID ) ) { returnValue = false ; reasons.add ( VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE.name ( ) ) ; } return returnValue ; }
private void onSave ( ) { if ( ! ( validate ( ) ) ) { return ; } org.ovirt.engine.core.common.businessentities.Provider provider = new org.ovirt.engine.core.common.businessentities.Provider ( ) ; provider.setName ( ( ( java.lang.String ) ( privateName.getEntity ( ) ) ) ) ; provider.setDescription ( ( ( java.lang.String ) ( privateDescription.getEntity ( ) ) ) ) ; provider.setUrl ( ( ( java.lang.String ) ( privateUrl.getEntity ( ) ) ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.AddProvider , new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) ) ; cancel ( ) ; }
protected void updateHostPinning ( org.ovirt.engine.core.common.businessentities.MigrationSupport migrationSupport ) { java.util.List < org.ovirt.engine.core.common.businessentities.MigrationSupport > supportedModes = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.MigrationSupport > ) ( getModel ( ) . getMigrationMode ( ) . getItems ( ) ) ) ; if ( supportedModes.contains ( migrationSupport ) ) { getModel ( ) . getMigrationMode ( ) . setSelectedItem ( migrationSupport ) ; } }
public void createCommand ( ) { org.ovirt.engine.core.common.action.RunVmParams param = new org.ovirt.engine.core.common.action.RunVmParams ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RunVmCommand < org.ovirt.engine.core.common.action.RunVmParams > ( param ) ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . removeQuotaCommandLeftOver ( ) ; mockVmRunHandler ( ) ; mockSuccessfulSnapshotValidator ( ) ; mockVmPropertiesUtils ( ) ; mockBackend ( ) ; }
public void validateNoFreeSpaceOnDomains ( ) { mcr.mockConfigValue ( ConfigValues.FreeSpaceCriticalLowInGB , 100 ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString ( ) ) ) ; }
private void runQueryByIdParameter ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.AsIsAsyncConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( queryType , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public synchronized void UpdateTaskWithActionParameters ( org.ovirt.engine.core.compat.Guid taskID , org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters ) { if ( _tasks.containsKey ( taskID ) ) { org.ovirt.engine.core.common.businessentities.async_tasks currentDbAsyncTask = _tasks.get ( taskID ) . getParameters ( ) . getDbAsyncTask ( ) ; currentDbAsyncTask.setaction_parameters ( actionParameters ) ; org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.updateAsyncTaskInDB ( _tasks.get ( taskID ) ) ; } }
public void getAAANamespaces ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ) ( source ) ) : new java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAvailableNamespaces , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void lunsMatch ( ) { org.ovirt.engine.core.common.businessentities.storage.LUNs lun = new org.ovirt.engine.core.common.businessentities.storage.LUNs ( ) ; lun.setLUNId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; lun.setPhysicalVolumeId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsFromVgInfo = java.util.Arrays.asList ( lun , lun ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > lunsFromDb = java.util.Arrays.asList ( lun , lun ) ; boolean isMismatch = command.isLunsInfoMismatch ( lunsFromVgInfo , lunsFromDb ) ; org.junit.Assert.assertFalse ( isMismatch ) ; }
private void postInitTemplate ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { org.ovirt.engine.core.common.businessentities.VmTemplate oldTemplate = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; getModel ( ) . getTemplate ( ) . setItems ( templates ) ; getModel ( ) . getTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( templates , ( oldTemplate != null ? new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( oldTemplate.getId ( ) ) : new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( org.ovirt.engine.core.compat.Guid.Empty ) ) ) ) ; }
protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData ( org.ovirt.engine.core.common.businessentities.LdapUser user , java.lang.String domain ) { if ( user == null ) { return null ; } user.setDomainControler ( domain ) ; java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.ad_groups > groupsDict = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.ad_groups > ( ) ; org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator ( ) ; proceedGroupsSearchResult ( user.getMemberof ( ) , groupsDict , generator ) ; user.setGroups ( groupsDict ) ; return user ; }
public void setCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { this . command = command ; command.getPropertyChangedEvent ( ) . addListener ( listener ) ; updateButton ( ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters ( ) . getId ( ) ; for ( org.ovirt.engine.core.common.businessentities.Permission permission : permissionDao.getAllDirectPermissionsForAdElement ( id ) ) { org.ovirt.engine.core.common.action.PermissionsOperationsParameters tempVar = new org.ovirt.engine.core.common.action.PermissionsOperationsParameters ( permission ) ; tempVar.setShouldBeLogged ( false ) ; runInternalActionWithTasksContext ( ActionType.RemovePermission , tempVar ) ; } dbUserDao.remove ( id ) ; org.ovirt.engine.core.bll.aaa.RemoveUserCommand.setSucceeded ( true ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result1 ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel1 = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result1.getState ( ) ) ) ; vmListModel1.getWindow ( ) . stopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = result1.getReturnValue ( ) ; if ( ( retVal != null ) && ( retVal.getSucceeded ( ) ) ) { vmListModel1.cancel ( ) ; } }
private void localize ( ) { networkEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.networkVnicProfile ( ) ) ; nameEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.nameVnicProfile ( ) ) ; descriptionEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.descriptionVnicProfile ( ) ) ; passthroughEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.passthorughVnicProfile ( ) ) ; portMirroringEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.portMirroringVnicProfile ( ) ) ; publicUseEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.publicUseVnicProfile ( ) ) ; networkQoSEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.profileQoSInstanceTypeLabel ( ) ) ; networkFilterEditor.setLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.profile.VnicProfilePopupView.constants.profileNetworkFilterLabel ( ) ) ; }
public static void GetClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , "" , "" , false ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
private boolean isRngDeviceSupported ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { org.ovirt.engine.core.compat.Version clusterVersion = clusterVersionOrNull ( model ) ; return clusterVersion == null ? false : ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.VirtIoRngDeviceSupported , clusterVersion.getValue ( ) ) ) ) ; }
private java.util.Set < java.lang.String > hostNameSet ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { java.util.Set < java.lang.String > existingHostNames = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { existingHostNames.add ( host.getHostName ( ) ) ; } return existingHostNames ; }
protected void init ( ) { T parameters = org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) ; if ( ( parameters.isImportAsNewEntity ( ) ) && ( parameters.getVmId ( ) . equals ( parameters.getVm ( ) . getId ( ) ) ) ) { parameters.getVm ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } setStoragePoolId ( parameters.getStoragePoolId ( ) ) ; imageToDestinationDomainMap = parameters.getImageToDestinationDomainMap ( ) ; }
public void testOnlyDiskAliasChangedMetaDataShouldBeUpdated ( ) { final org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters ( ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( createDiskImage ( ) ) ; parameters.getDiskInfo ( ) . setDiskAlias ( "New Disk Alias" ) ; initializeCommand ( parameters ) ; mockVdsCommandSetVolumeDescription ( ) ; command.executeVmCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.times ( 1 ) ) . setVolumeDescription ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StorageDomain.class ) ) ; }
public java.util.List < org.ovirt.engine.core.utils.customprop.ValidationError > validateVmProperties ( org.ovirt.engine.core.compat.Version version , java.lang.String properties ) { if ( syntaxErrorInProperties ( properties ) ) { return invalidSyntaxValidationError ; } return validateProperties ( allVmProperties.get ( version ) , convertProperties ( properties ) ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( vds.getDynamicData ( ) , vds.getStatus ( ) ) ; runVdsCommand ( VDSCommandType.SetVdsStatus , new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters ( getVdsId ( ) , org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private org.ovirt.engine.core.bll.ValidationResult nicActuallyExistsOrReferencesNewBond ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { java.lang.String targetNicName = attachment.getNicName ( ) ; boolean attachmentReferencesExistingNic = ( existingInterfacesMap.get ( attachment.getNicId ( ) , targetNicName ) ) != null ; if ( attachmentReferencesExistingNic ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } boolean attachmentReferencesNewlyCreatedBond = ( targetNicName != null ) && ( ( bondsMap.get ( targetNicName ) ) != null ) ; if ( attachmentReferencesNewlyCreatedBond ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ; }
public void testInactiveDomainInList ( ) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( ) ; org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand < org.ovirt.engine.core.common.action.StoragePoolParametersBase > cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand ( param ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; tempStorageDomains.setStatus ( StorageDomainStatus.Inactive ) ; domainsList.add ( tempStorageDomains ) ; org.junit.Assert.assertFalse ( cmd.validateDomainsInMaintenance ( domainsList ) ) ; }
public void testUpdateBrickStatus ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = dao.getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( existingBrick ) ; org.junit.jupiter.api.Assertions.assertEquals ( GlusterStatus.UP , existingBrick.getStatus ( ) ) ; dao.updateBrickStatus ( FixturesTool.GLUSTER_BRICK_UUID1 , GlusterStatus.DOWN ) ; existingBrick = dao.getById ( FixturesTool.GLUSTER_BRICK_UUID1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( existingBrick ) ; org.junit.jupiter.api.Assertions.assertEquals ( GlusterStatus.DOWN , existingBrick.getStatus ( ) ) ; }
protected void ExecuteIrsBrokerCommand ( ) { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.storage_domain_static , org.ovirt.engine.core.common.businessentities.SANState > domainFromIrs = ( ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.storage_domain_static , org.ovirt.engine.core.common.businessentities.SANState > ) ( org.ovirt.engine.core.vdsbroker.irsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.HSMGetStorageDomainInfo , new org.ovirt.engine.core.vdsbroker.irsbroker.HSMGetStorageDomainInfoVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.GetStorageDomainInfoVDSCommand.getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.GetStorageDomainInfoVDSCommand.getParameters ( ) . getStorageDomainId ( ) ) ) . getReturnValue ( ) ) ) ; if ( domainFromIrs != null ) { setReturnValue ( domainFromIrs.getFirst ( ) ) ; } }
public static void getProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
public void loadVmsFromExportDomain ( ) { startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExportDomain , new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenters ( ) . getSelectedItem ( ) . getId ( ) , exportDomain.getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateVms ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ; }
public void testNetworkNotChangedWhenDifferentNetworkIds ( ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; oldAttachment.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; oldAttachment.setNetworkId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setNetworkId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( createNetworkAttachmentValidator ( attachment ) . networkNotChanged ( oldAttachment ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID , oldAttachment.getId ( ) ) ) ) ; }
public void testGetNotFound2 ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( asList ( getEntity ( 2 ) ) ) ; try { resource.get ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > getClusterByServiceList ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > list , boolean supportsVirtService , boolean supportsGlusterService ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > filteredList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : list ) { if ( ( supportsVirtService && ( cluster.supportsVirtService ( ) ) ) || ( supportsGlusterService && ( cluster.supportsGlusterService ( ) ) ) ) { filteredList.add ( cluster ) ; } } java.util.Collections.sort ( filteredList , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return filteredList ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : storageDomains ) { if ( ( domain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) { return domain ; } } } return null ; }
public void testFindMappingEntryNotFound ( ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ( ) ; vnic.setNetworkName ( ( "not" + ( org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.NETWORK_NAME ) ) ) ; vnic.setVnicProfileName ( org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.VNIC_PROFILE2_NAME ) ; org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ( ) ; ctx.setUserMappings ( externalVnicProfileMappings ) ; ctx.setOvfVnics ( java.util.Collections.singletonList ( vnic ) ) ; underTest.handle ( ctx ) ; org.junit.jupiter.api.Assertions.assertNull ( ctx.getMatched ( ) . get ( vnic ) ) ; }
private static java.util.Map < java.lang.String , java.lang.Object > getSpiceUsbControllerSpecParams ( java.lang.String model , int controllerNumber , int index ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.createUsbControllerSpecParams ( ( model + controllerNumber ) , index ) ; }
protected org.ovirt.engine.api.model.GlusterBrick addParents ( org.ovirt.engine.api.model.GlusterBrick model ) { parent.addParents ( model ) ; return model ; }
public void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void canDoActionSucceeds ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.canDoAction ( ) ) ; }
public static void getMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.lang.String description , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitiesMap ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { return createTaskImpl ( taskId , asyncTaskCreationInfo , parentCommand , description , entitiesMap ) ; } catch ( java.lang.RuntimeException ex ) { log.errorFormat ( "Error during CreateTask for command: {0}. Exception {1}" , getClass ( ) . getName ( ) , ex ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } return org.ovirt.engine.core.compat.Guid.Empty ; }
public static void getDefaultTimeZone ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( java.util.Map.Entry < java.lang.String , java.lang.String > ) ( source ) ) . getKey ( ) ; } return "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetDefualtTimeZone , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable ( ) { java.lang.Boolean allowDupMacs = org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.AllowDuplicateMacAddresses ) ; org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool ( ) ) ; if ( allowDupMacs || ( ! ( vmInterfaceManager.existsPluggedInterfaceWithSameMac ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters ( ) . getNic ( ) ) ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } else { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE ) ; } }
public void testGetVolumesByStatusAndTypes ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumes = dao.getVolumesByStatusAndTypes ( org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoTest.CLUSTER_ID , GlusterStatus.UP , java.util.Collections.singletonList ( GlusterVolumeType.DISTRIBUTE ) ) ; org.junit.Assert.assertNotNull ( volumes ) ; org.junit.Assert.assertTrue ( volumes.contains ( existingDistVol ) ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume : volumes ) { org.junit.Assert.assertEquals ( GlusterVolumeType.DISTRIBUTE , volume.getVolumeType ( ) ) ; } }
void mockGetVdsCertificateSubjectByVmId ( ) { org.ovirt.engine.core.common.queries.QueryReturnValue hostSubjectReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue ( ) ; hostSubjectReturnValue.setReturnValue ( org.ovirt.engine.core.bll.ConfigureConsoleOptionsQueryTest.HOST_SUBJECT ) ; org.mockito.Mockito.doReturn ( hostSubjectReturnValue ) . when ( backend ) . runInternalQuery ( org.mockito.ArgumentMatchers.eq ( QueryType.GetVdsCertificateSubjectByVmId ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { java.lang.Iterable listEnumerable = ( ( java.lang.Iterable ) ( source ) ) ; java.util.Iterator listIterator = listEnumerable.iterator ( ) ; while ( listIterator.hasNext ( ) ) { list.add ( ( ( org.ovirt.engine.core.common.businessentities.storage.Disk ) ( listIterator.next ( ) ) ) ) ; } } return list ; }
public static void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
private void addTypeColumn ( ) { org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable ( ) . addColumn ( new org.ovirt.engine.ui.common.widget.table.column.PermissionTypeColumn ( ) , org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.constants.empty ( ) , "30px" ) ; }
public void testValidModifiedBondsFailsWhenReferencingExistingNonBondInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; final org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_IS_NOT_BOND ; org.ovirt.engine.core.bll.ValidationResult notABondValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , bond.getName ( ) ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , notABondValidationResult , notABondValidationResult , ValidationResult.VALID ) ; }
private void doTestBadRemove ( boolean canDo , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveGroup , org.ovirt.engine.core.common.action.AdElementParametersBase.class , new java.lang.String [ ] { "AdElementId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , canDo , success ) ) ; try { collection.remove ( GUIDS [ 0 ] . toString ( ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public static void GetMaxNumOfCPUsPerSocket ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfCpuPerSocket ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( tempVar , aQuery ) ; }
public void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.Map < java.lang.String , java.lang.String > > aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
protected void endExecutionMonitoring ( ) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmOnceCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; boolean runAndPausedSucceeded = ( java.lang.Boolean.TRUE.equals ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getRunAndPause ( ) ) ) && ( ( vmDynamicDao.get ( org.ovirt.engine.core.bll.RunVmOnceCommand.getVmId ( ) ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ; executionHandler.endJob ( executionContext , runAndPausedSucceeded ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveDisk , org.ovirt.engine.core.common.action.RemoveDiskParameters.class , new java.lang.String [ ] { "DiskId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void connect ( ) { boolean sslTarget = ( ( consoleOptions.getSecurePort ( ) ) == ( - 1 ) ) ? false : true ; org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker invoker = new org.ovirt.engine.ui.common.uicommon.WebClientConsoleInvoker ( org.ovirt.engine.ui.common.uicommon.SpiceHtml5Impl.CLIENT_PAGE , config , getHost ( ) , java.lang.String.valueOf ( ( sslTarget ? consoleOptions.getSecurePort ( ) : consoleOptions.getPort ( ) ) ) , getPassword ( ) , sslTarget ) ; invoker.invokeClient ( ) ; }
protected void build ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , org.ovirt.engine.core.common.businessentities.VmBase vm ) { if ( model.getIsAutoAssign ( ) . getEntity ( ) ) { vm.setDedicatedVmForVdsList ( java.util.Collections.emptyList ( ) ) ; } else { java.util.List < org.ovirt.engine.core.compat.Guid > defaultHostsGuids = model.getDefaultHost ( ) . getSelectedItems ( ) . stream ( ) . map ( VDS :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ; vm.setDedicatedVmForVdsList ( defaultHostsGuids ) ; } }
public void getSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery < java.lang.Boolean > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter < > ( java.lang.Boolean.TRUE ) ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { switch ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getActionState ( ) ) { case EXECUTE : if ( ! ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters ( ) . getTaskGroupSuccess ( ) ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE ; } if ( ( isFirstTaskHandler ( ) ) && ( org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getSucceeded ( ) ) ) { return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_DISK ; } break ; case END_SUCCESS : return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_DISK_FINISHED_SUCCESS ; case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE ; } return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED ; }
public void testCanEditARunningVM ( ) { prepareVmToPassValidate ( ) ; vm.setStatus ( VMStatus.Up ) ; mockDiskDaoGetAllForVm ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.storage.Disk > emptyList ( ) , true ) ; mockVmValidator ( ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . areUpdatedFieldsLegal ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public boolean isVisible ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( getDetailModel ( ) . getEntity ( ) ) ) . getStorageDomainType ( ) ; return ( ! ( storageDomainType.equals ( StorageDomainType.ISO ) ) ) && ( ! ( storageDomainType.equals ( StorageDomainType.ImportExport ) ) ) ; }
public void bondWithNetworkDidntChange ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.SetupNetworksHelperTest.BOND_NAME , "net" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > ifaces = createNics ( bond.getName ( ) ) ; mockExistingIfacesWithBond ( bond , ifaces ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.SetupNetworksParameters ( ) ; ifaces.add ( bond ) ; parameters.setInterfaces ( ifaces ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNoNetworksModified ( helper ) ; assertNoBondsRemoved ( helper ) ; assertNoNetworksRemoved ( helper ) ; }
public java.lang.Void runInTransaction ( ) { map.setstatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . updateStatus ( map.getId ( ) , map.getstatus ( ) ) ; if ( ( getStorageDomain ( ) . getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) { calcStoragePoolStatusByDomainsStatus ( ) ; } return null ; }
public void testNonSecuredEventMailSender ( ) { org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData = new org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber ( ) ; eventData.setlog_time ( new java.util.Date ( ) ) ; eventData.setevent_type ( 0 ) ; eventData.setuser_name ( "a test user name" ) ; eventData.setvm_name ( "a fine test VM" ) ; eventData.setvds_name ( "a fine test host" ) ; eventData.setmethod_address ( "mailtest.redhat@gmail.com" ) ; eventData.setvm_template_name ( "a test template" ) ; eventData.setstorage_pool_name ( "a test storage pool name" ) ; eventData.setstorage_domain_name ( "a test storage pool domain" ) ; eventData.setseverity ( 3 ) ; org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl mailSender = new org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl ( org.ovirt.engine.core.notifier.utils.mail.MailSenderTest.getMailProperties ( ) ) ; eventData.setmessage ( "a test message to be sent via non-secured mode" ) ; org.ovirt.engine.core.notifier.utils.sender.EventSenderResult sentResult = null ; try { sentResult = mailSender.send ( eventData , null ) ; } catch ( java.lang.Exception e ) { sentResult = new org.ovirt.engine.core.notifier.utils.sender.EventSenderResult ( ) ; sentResult.setSent ( false ) ; } org.junit.Assert.assertTrue ( sentResult.isSent ( ) ) ; }
public void runFailedAutoStartVM ( org.ovirt.engine.core.compat.Guid vmId ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; event.setVmId ( vmId ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( event , AuditLogType.HA_VM_FAILED ) ; org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat ( "Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id:{1}" , event.getVmName ( ) , vmId ) ; org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance ( ) . addVmToRun ( vmId ) ; }
public void diskImageWithSgio ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidatorTest.createVM ( org.ovirt.engine.core.bll.validator.storage.DiskVmElementValidatorTest.OS_WITH_NO_SUPPORTED_INTERFACES ) ; dve.setDiskInterface ( DiskInterface.VirtIO_SCSI ) ; disk.setSgio ( ScsiGenericIO.UNFILTERED ) ; org.junit.Assert.assertThat ( validator.isVirtIoScsiValid ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK ) ) ; }
public void shouldValidateSingleNodePinning ( ) { vm.setvNumaNodeList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode ( 0 , java.util.Arrays.asList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVdsNumaNode ( 1 ) ) ) ) ) ; vm.setNumaTuneMode ( NumaTuneMode.PREFERRED ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity ( vm , vm.getvNumaNodeList ( ) ) . isValid ( ) ) ; }
protected void updateActionAvailability ( ) { super . updateActionAvailability ( ) ; getConnectCommand ( ) . setIsExecutionAllowed ( ( ( ( ( ! ( getIsConnected ( ) ) ) && ( ( getEntity ( ) ) != null ) ) && ( ( getEntity ( ) . getDisplayType ( ) ) == ( org.ovirt.engine.core.common.businessentities.DisplayType.qxl ) ) ) && ( isVmConnectReady ( ) ) ) ) ; }
public void appendCustomValueAppend ( ) { final java.lang.String key = "foo" ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String newVal = "bar" ; final java.lang.String sep = "_" ; b.addCustomValue ( key , value ) ; b.appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.jupiter.api.Assertions.assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
public static void GetSANWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete ) , aQuery ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > searchVDSsByDb ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > data = genericSearch ( vdsDao , true ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : data ) { vds.setCpuName ( cpuFlagsManagerHandler.findMaxServerCpuByFlags ( vds.getCpuFlags ( ) , vds.getClusterCompatibilityVersion ( ) ) ) ; } return data ; }
private void generateMethodInterface ( org.ovirt.api.metamodel.concepts.Method method ) { if ( ( method.getBase ( ) ) != null ) { return ; } org.ovirt.api.metamodel.concepts.Name name = method.getName ( ) ; generateRequestInterface ( method ) ; generateResponseInterface ( method ) ; generateDoc ( method ) ; java.lang.String request = getRequestName ( method ) ; java.lang.String member = javaNames.getJavaMemberStyleName ( name ) ; javaBuffer.addLine ( "%1$s %2$s();" , request , member ) ; javaBuffer.addLine ( ) ; }
private org.ovirt.engine.core.compat.Guid getQuotaId ( ) { if ( ( ( newDisk ) != null ) && ( isQuotaValidationNeeded ( ) ) ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( newDisk ) ) . getQuotaId ( ) ; } return null ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( ( ev.matchesDefinition ( ListModel.selectedItemChangedEventDefinition ) ) && ( sender == ( getStoragePoolType ( ) ) ) ) { storagePoolType_SelectedItemChanged ( ) ; } }
public static java.lang.Boolean isMigrationSupported ( org.ovirt.engine.core.common.businessentities.ArchitectureType architecture , org.ovirt.engine.core.compat.Version version ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.migrationSupport.get ( architecture ) . get ( version ) ; }
public static void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , aQuery ) ; }
public void internalNetworkProvidedByChanged ( ) { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = createExternalNetwork ( ) ; network.setProvidedBy ( null ) ; assertThatExternalNetworkDetailsUnchangedFails ( externalNetwork ) ; }
public void defaultHost_SelectedItemChanged ( ) { updateCdImage ( ) ; }
public static boolean isHugepagesShared ( org.ovirt.engine.core.common.businessentities.VmBase vm ) { org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil util = org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil.getInstance ( ) ; java.util.Map < java.lang.String , java.lang.String > customProperties = util.convertProperties ( vm.getCustomProperties ( ) ) ; return java.lang.Boolean.parseBoolean ( customProperties.get ( "hugepages_shared" ) ) ; }
public void setup ( ) { map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainCommand ( params , org.ovirt.engine.core.bll.context.CommandContext.createContext ( params.getSessionId ( ) ) ) ) ; cmd.init ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao ( ) ; org.mockito.Mockito.doReturn ( eventQueue ) . when ( cmd ) . getEventQueue ( ) ; }
protected void OnSelectedItemChanged ( ) { super . OnSelectedItemChanged ( ) ; UpdateActionAvailability ( ) ; if ( ( ( getSelectedItem ( ) ) != null ) && ( ! ( getIsBookmarkInitiated ( ) ) ) ) { setIsBookmarkInitiated ( true ) ; getNavigatedEvent ( ) . raise ( this , new org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkEventArgs ( ( ( org.ovirt.engine.core.common.businessentities.Bookmark ) ( getSelectedItem ( ) ) ) ) ) ; setIsBookmarkInitiated ( false ) ; } }
public static void IsUSBEnabledByDefault ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.EnableUSBAsDefault , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.Network incoming , org.ovirt.engine.api.model.Network entity ) { org.ovirt.engine.api.model.Network updated = getMapper ( modelType , org.ovirt.engine.api.model.Network.class ) . map ( incoming , entity ) ; return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( entity.getDataCenterId ( ) , updated ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { java.util.Set < java.lang.String > emulatedSet = new java.util.TreeSet < java.lang.String > ( ( ( java.util.HashSet < java.lang.String > ) ( returnValue ) ) ) ; java.lang.String oldVal = getEmulatedMachine ( ) . getSelectedItem ( ) ; getEmulatedMachine ( ) . setItems ( emulatedSet ) ; getEmulatedMachine ( ) . setSelectedItem ( oldVal ) ; convertEmulatedMachineField ( ) ; } }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DataCenter dataCenter ) { validateParameters ( dataCenter , "name" ) ; if ( ! ( dataCenter.isSetLocal ( ) ) ) { validateParameters ( dataCenter , "local" ) ; } org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( dataCenter ) ; return performCreate ( ActionType.AddEmptyStoragePool , new org.ovirt.engine.core.common.action.StoragePoolManagementParameter ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.QueryType.GetStoragePoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
private static org.ovirt.engine.core.common.businessentities.GraphicsType deriveGraphicsType ( java.util.Map < org.ovirt.engine.core.common.businessentities.GraphicsType , org.ovirt.engine.core.common.businessentities.GraphicsInfo > graphicsInfos ) { if ( graphicsInfos != null ) { if ( graphicsInfos.containsKey ( GraphicsType.SPICE ) ) { return org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE ; } if ( graphicsInfos.containsKey ( GraphicsType.VNC ) ) { return org.ovirt.engine.core.common.businessentities.GraphicsType.VNC ; } } return null ; }
protected org.ovirt.engine.api.model.NetworkLabel addParents ( org.ovirt.engine.api.model.NetworkLabel model ) { model.setHostNic ( new org.ovirt.engine.api.model.HostNic ( ) ) ; model.getHostNic ( ) . setId ( nicId.toString ( ) ) ; model.getHostNic ( ) . setHost ( new org.ovirt.engine.api.model.Host ( ) ) ; model.getHostNic ( ) . getHost ( ) . setId ( hostId ) ; return model ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = org.ovirt.engine.core.bll.CopyImageGroupCommand.getDiskDao ( ) . get ( org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters ( ) . getImageGroupID ( ) ) ; if ( disk != null ) { org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( disk ) ; return validate ( diskValidator.validateUnsupportedDiskStorageType ( DiskStorageType.LUN , DiskStorageType.CINDER ) ) ; } return false ; }
public org.ovirt.engine.core.common.businessentities.event_subscriber mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.event_subscriber entity = new org.ovirt.engine.core.common.businessentities.event_subscriber ( ) ; entity.setevent_up_name ( rs.getString ( "event_up_name" ) ) ; entity.setevent_notification_method ( org.ovirt.engine.core.common.EventNotificationMethod.valueOf ( rs.getString ( "notification_method" ) ) ) ; entity.setmethod_address ( rs.getString ( "method_address" ) ) ; entity.setsubscriber_id ( getGuidDefaultEmpty ( rs , "subscriber_id" ) ) ; entity.settag_name ( rs.getString ( "tag_name" ) ) ; return entity ; }
private void updateDirectLunDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { if ( ( getDiskStorageType ( ) . getEntity ( ) ) != ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN ) ) { return ; } boolean isDirectLUNDiskkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.DirectLUNDiskEnabled , datacenter.getCompatibilityVersion ( ) . getValue ( ) ) ) ) ; getIsDirectLunDiskAvaialable ( ) . setEntity ( isDirectLUNDiskkEnabled ) ; setMessage ( ( ! isDirectLUNDiskkEnabled ? org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.directLUNDiskNotSupported ( ) : "" ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getValue ( org.ovirt.engine.core.common.utils.PairQueryable < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > object ) { if ( ( object.getFirst ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = object.getFirst ( ) ; return getDetailModel ( ) . isInterfaceAttachedByLabel ( nic ) ? templates.textImageLabels ( nic.getName ( ) , labelImage ) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( nic.getName ( ) ) ; } return null ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void testAddHostedEngineStorageFails ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest.getLUNs ( ) ) . when ( command ) . getLUNsFromVgInfo ( parameters.getStorageDomain ( ) . getStorage ( ) ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( command ) . getAllLuns ( ) ; parameters.getStorageDomain ( ) . setStorageName ( StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME ) ; org.junit.Assert.assertFalse ( command.canAddDomain ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages ( "Add self hosted engine storage domain succeeded where it should have failed" , command , EngineMessage.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE ) ; }
private void setUpGetEntityExpectations ( org.ovirt.engine.core.compat.Guid entityId , org.ovirt.engine.api.model.StorageDomain entity ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetStorageDomainByIdAndStoragePoolId , org.ovirt.engine.core.common.queries.StorageDomainAndPoolQueryParameters.class , new java.lang.String [ ] { "StorageDomainId" , "StoragePoolId" } , new java.lang.Object [ ] { entityId , GUIDS [ ( ( NAMES.length ) - 1 ) ] } , entity ) ; }
public static void GetVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.GetVmsRunningOnOrMigratingToVdsParameters ( id ) , aQuery ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( "SearchString" . equals ( args.propertyName ) ) { updateViewSearchString ( ) ; } else if ( "SearchStringPrefix" . equals ( args.propertyName ) ) { updateViewSearchStringPrefix ( ) ; } else if ( "HasSearchStringPrefix" . equals ( args.propertyName ) ) { updateViewHasSearchStringPrefix ( ) ; } else if ( "HasSelectedTags" . equals ( args.propertyName ) ) { updateViewHasSelectedTags ( ) ; } }
private void mockCommandCall ( org.ovirt.engine.core.common.action.ActionType actionType , boolean withContext ) { if ( withContext ) { org.mockito.Mockito.doReturn ( successfulReturnValue ( ) ) . when ( backend ) . runInternalAction ( org.mockito.ArgumentMatchers.eq ( actionType ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.ActionParametersBase.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.bll.context.CommandContext.class ) ) ; } else { org.mockito.Mockito.doReturn ( successfulReturnValue ( ) ) . when ( backend ) . runInternalAction ( org.mockito.ArgumentMatchers.eq ( actionType ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.ActionParametersBase.class ) ) ; } }
public void diskImagesExist ( ) { org.mockito.Mockito.doReturn ( true ) . when ( baseDiskDao ) . exists ( disk1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( baseDiskDao ) . exists ( disk2 ) ; org.junit.Assert.assertThat ( diskExistenceValidator.disksNotExist ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testGetByClusterIdAndServiceType ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > services = dao.getByClusterIdAndServiceType ( org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_TYPE ) ; org.junit.jupiter.api.Assertions.assertNotNull ( services ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , services.size ( ) ) ; verifyServiceOnServer1 ( services.get ( 0 ) ) ; }
public void freeMacs ( java.util.List < java.lang.String > macs ) { try ( org.ovirt.engine.core.utils.lock.AutoCloseableLock l = new org.ovirt.engine.core.utils.lock.AutoCloseableLock ( lockObj.writeLock ( ) ) ) { checkIfInitialized ( ) ; for ( java.lang.String mac : macs ) { macsStorage.freeMac ( org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong ( mac ) ) ; } } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( getRemoveCommand ( ) ) ) { Remove ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "Cancel" ) ) { Cancel ( ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( command.getName ( ) , "OnRemove" ) ) { OnRemove ( ) ; } }
private void _validateDigest ( java.security.MessageDigest digest , java.lang.String actual ) throws java.io.IOException { try { if ( ! ( java.util.Arrays.equals ( digest.digest ( ) , org.apache.commons.codec.binary.Hex.decodeHex ( actual.toCharArray ( ) ) ) ) ) { throw new java.io.IOException ( "SSH copy failed, invalid localDigest" ) ; } } catch ( org.apache.commons.codec.DecoderException e ) { throw new java.io.IOException ( "SSH copy failed, invalid localDigest" ) ; } }
private static org.ovirt.engine.core.common.businessentities.StorageDomain mockStorageDomain ( int availableSize , int usedSize , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.setAvailableDiskSize ( availableSize ) ; sd.setUsedDiskSize ( usedSize ) ; sd.setStatus ( StorageDomainStatus.Active ) ; sd.setStorageType ( storageType ) ; return sd ; }
private void init ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > byName = vmStaticDao.getAllByName ( org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.HostedEngineVmName ) ) ; if ( ( byName != null ) && ( ! ( byName.isEmpty ( ) ) ) ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = byName.get ( 0 ) ; hostedEngineVm = vmDao.get ( vmStatic.getId ( ) ) ; vmHandler.updateDisksFromDb ( hostedEngineVm ) ; } initHostedEngineStorageDomain ( ) ; }
private static synchronized org.ovirt.engine.sdk.utils.SerializationHelper.JAXBContextHolder getContext ( java.lang.Class < ? > clz ) throws javax.xml.bind.JAXBException { if ( ( org.ovirt.engine.sdk.utils.SerializationHelper.JAXB_CONTEXT ) == null ) { java.lang.ClassLoader cl = org.ovirt.engine.sdk.entities.ObjectFactory.class . getClassLoader ( ) ; org.ovirt.engine.sdk.utils.SerializationHelper.JAXB_CONTEXT = javax.xml.bind.JAXBContext.newInstance ( org.ovirt.engine.sdk.utils.SerializationHelper.PACKAGE_CONTEXT , cl ) ; } if ( ! ( org.ovirt.engine.sdk.utils.SerializationHelper.contexts.containsKey ( clz ) ) ) { org.ovirt.engine.sdk.utils.SerializationHelper.contexts.put ( clz , new org.ovirt.engine.sdk.utils.SerializationHelper.JAXBContextHolder ( org.ovirt.engine.sdk.utils.SerializationHelper.JAXB_CONTEXT ) ) ; } return org.ovirt.engine.sdk.utils.SerializationHelper.contexts.get ( clz ) ; }
public static void getGlusterRemoveBricksStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity ) ( source ) ) ; } } ; org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters ( clusterId , volumeId , bricks ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeRemoveBricksStatus , parameters , aQuery ) ; }
protected void removeNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > list = getVmNicDao ( ) . getAllForTemplate ( getVmTemplateId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : list ) { getVmNicDao ( ) . remove ( iface.getId ( ) ) ; } }
public void testVmWithDisks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > disks = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; disks.add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateBootSequence ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , disks ) , true , null ) ; }
private org.ovirt.engine.core.bll.ValidationResult networksUniquelyConfiguredOnHost ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { java.util.Set < org.ovirt.engine.core.compat.Guid > networkIds = new java.util.HashSet ( attachmentsToConfigure.size ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure ) { if ( networkIds.contains ( attachment.getNetworkId ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORKS_ALREADY_ATTACHED_TO_IFACES ) ; } else { networkIds.add ( attachment.getNetworkId ( ) ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot ( org.ovirt.engine.core.compat.Guid snapshotId ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getActiveSnapshot ( ) ; java.lang.String memoryVolume = ( ( activeSnapshot != null ) && ( ! ( getParameters ( ) . isImportAsNewEntity ( ) ) ) ) ? activeSnapshot.getMemoryVolume ( ) : org.apache.commons.lang.StringUtils.EMPTY ; return snapshotsManager.addActiveSnapshot ( snapshotId , getVm ( ) , memoryVolume , org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext ( ) ) ; }
private void initDisplayTypes ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { displayTypes = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetDisplayTypes ) , callback ) ; }
private boolean containsVmCluster ( java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters ) { for ( org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters ) { if ( ( cluster.getStoragePoolId ( ) ) != null ) { if ( vm.getClusterId ( ) . equals ( cluster.getId ( ) ) ) { return true ; } } } return false ; }
void registerPluginEventHandlerObject ( java.lang.String pluginName , com.google.gwt.core.client.JavaScriptObject pluginEventHandlerObject ) { org.ovirt.engine.ui.webadmin.plugin.Plugin plugin = getPlugin ( pluginName ) ; if ( ( plugin == null ) || ( pluginEventHandlerObject == null ) ) { return ; } if ( ( plugin.getEventHandlerObject ( ) ) == null ) { plugin.setEventHandlerObject ( pluginEventHandlerObject ) ; org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.info ( ( ( "Plugin [" + pluginName ) + "] has registered the event handler object" ) ) ; } else { org.ovirt.engine.ui.webadmin.plugin.PluginManager.logger.warning ( ( ( "Plugin [" + pluginName ) + "] has already registered the event handler object" ) ) ; } }
public void validateCantLiveMigrateToBackupDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain.setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain.setStatus ( StorageDomainStatus.Active ) ; dstStorageDomain.setBackup ( true ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE ) ; }
public void validateFailsWhenGlusterMultipleHostHasVolumesWithForce ( ) throws java.lang.Exception { command.getParameters ( ) . setForceAction ( true ) ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockHasMultipleClusters ( true ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
public void serializeVdsActionParameters ( ) { org.ovirt.engine.core.common.action.ActionParametersBase params = new org.ovirt.engine.core.common.action.ActionParametersBase ( ) ; params.setLockProperties ( org.ovirt.engine.core.common.action.LockProperties.create ( Scope.None ) . withWait ( true ) ) ; org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serializer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer ( ) ; org.junit.Assert.assertTrue ( ( ( serializer.serialize ( params ) . length ( ) ) > 0 ) ) ; }
private void mockFenceVdsResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result1 , org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result2 ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal1 = createVdsReturnValue ( result1 ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal2 = ( result2 == null ) ? null : createVdsReturnValue ( result2 ) ; org.mockito.Mockito.when ( resourceManager.runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.FenceVds ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.FenceVdsVDSCommandParameters.class ) ) ) . thenReturn ( retVal1 ) . thenReturn ( retVal2 ) ; }
public void testWrongKey ( ) throws java.lang.Exception { java.security.KeyPairGenerator generator = java.security.KeyPairGenerator.getInstance ( "RSA" ) ; java.security.KeyPair badKeyPair = generator.generateKeyPair ( ) ; client.setKeyPair ( badKeyPair ) ; client.connect ( ) ; client.authenticate ( ) ; client.executeCommand ( org.ovirt.engine.core.uutils.ssh.BasicTest.helloCommand , null , null , null ) ; }
protected void executeQueryCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = vmTemplateDao.getAll ( org.ovirt.engine.core.bll.GetAllTemplateBasedEntityQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetAllTemplateBasedEntityQuery.getParameters ( ) . isFiltered ( ) , entityType ) ; templates.forEach ( vmTemplateHandler :: updateDisksFromDb ) ; org.ovirt.engine.core.bll.GetAllTemplateBasedEntityQuery.getQueryReturnValue ( ) . setReturnValue ( templates ) ; }
private boolean validateVmSnapshotStatus ( ) { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = getSnapshotsValidator ( ) ; for ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.common.businessentities.VmDevice > pair : getVmsWithVmDeviceInfoForDiskId ( ) ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = pair.getSecond ( ) ; if ( ( vmDevice.getSnapshotId ( ) ) == null ) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst ( ) ; if ( ! ( validate ( snapshotsValidator.vmNotInPreview ( vm.getId ( ) ) ) ) ) { return false ; } } } return true ; }
public void testValidRemovedBondsWhenBondIsNotRequired ( ) throws java.lang.Exception { java.lang.String nicName = "nicName" ; bond.setName ( nicName ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setParams ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder ( ) . addRemovedBonds ( bond.getId ( ) ) ) . addExistingInterfaces ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > singletonList ( bond ) ) . build ( ) ; org.junit.Assert.assertThat ( validator.validRemovedBonds ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void pollAndUpdateAsyncTasks ( ) { if ( logChangedMap ) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.info ( "Polling and updating Async Tasks: {} tasks, {} tasks to poll now" , _tasks.size ( ) , numberOfTasksToPoll ( ) ) ; } java.util.Set < org.ovirt.engine.core.compat.Guid > poolsOfActiveTasks = getPoolIdsTasks ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > > poolsAllTasksMap = getSPMsTasksStatuses ( poolsOfActiveTasks ) ; updateTaskStatuses ( poolsAllTasksMap ) ; }
private java.lang.String getMemoryVolumeFromActiveSnapshotInExportDomain ( ) { for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getVm ( ) . getSnapshots ( ) ) { if ( ( snapshot.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE ) ) return snapshot.getMemoryVolume ( ) ; } org.ovirt.engine.core.bll.ImportVmCommand.log.warnFormat ( "VM {0} doesn't have active snapshot in export domain" , getVmId ( ) ) ; return org.apache.commons.lang.StringUtils.EMPTY ; }
public void canDetectMissingRequiredHostNumaNodes ( ) { updatedNumaNodes = java.util.Collections.singletonList ( org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNodeWithId ( 0 , vdsNumaNodes , org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommandTest.NODE_ID_0 ) ) ; vm.setvNumaNodeList ( existingNumaNodes ) ; vdsNumaNodes.remove ( 0 ) ; final org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand command = mockedCommandWithVmFromParams ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.VM_NUMA_NODE_HOST_NODE_INVALID_INDEX ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > newItems = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ; java.util.Collections.sort ( newItems , new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator ( ) ) ; setItems ( newItems ) ; }
public void testConflictedUpdate ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; org.ovirt.engine.api.model.Network model = org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.getModel ( 1 ) ; model.setId ( GUIDS [ 1 ] . toString ( ) ) ; try { resource.update ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyImmutabilityConstraint ( wae ) ; } }
public void versionDecreaseNoHostsOrNetwork ( ) { createCommandWithOlderVersion ( ) ; setupCpu ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFS ( ) ) ; initAndAssertValidation ( true ) ; }
public static void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
public boolean checkQuotaNameExisting ( org.ovirt.engine.core.common.businessentities.Quota quota , java.util.List < java.lang.String > messages ) { org.ovirt.engine.core.common.businessentities.Quota quotaByName = getQuotaDAO ( ) . getQuotaByQuotaName ( quota.getQuotaName ( ) ) ; if ( ( quotaByName != null ) && ( ! ( quotaByName.getId ( ) . equals ( quota.getId ( ) ) ) ) ) { messages.add ( VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED.toString ( ) ) ; return false ; } return true ; }
public static boolean setDiskAlias ( org.ovirt.engine.core.common.businessentities.BaseDisk disk , org.ovirt.engine.core.common.businessentities.VM vm , int count ) { if ( disk == null ) { org.ovirt.engine.core.bll.ImagesHandler.log.error ( "Disk object is null" ) ; return false ; } java.lang.String vmName = org.ovirt.engine.core.bll.ImagesHandler.nullSafeGetVmName ( vm ) ; disk.setDiskAlias ( org.ovirt.engine.core.bll.ImagesHandler.getSuggestedDiskAlias ( disk , vmName , count ) ) ; return true ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume ( java.lang.String volumeName , java.lang.String slaveHostName , java.lang.String slaveVolumeName , java.lang.String userName , boolean force ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeGeoRepSessionResume ( volumeName , slaveHostName , slaveVolumeName , userName , force ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void describeTo ( org.hamcrest.Description description ) { description.appendText ( "eqQueryParams(" ) ; for ( int i = 0 ; i < ( names.length ) ; i ++ ) { if ( i > 0 ) { description.appendText ( ", " ) ; } description.appendText ( names [ i ] ) ; description.appendText ( "=" ) ; description.appendText ( java.lang.String.valueOf ( values [ i ] ) ) ; } description.appendText ( ")" ) ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntity ( getVds ( ) . getStaticData ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsStaticDao ( ) . update ( getParameters ( ) . getVdsStaticData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
private void initImportClonedTemplateDisks ( ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : getParameters ( ) . getImages ( ) ) { diskGuidList.add ( image.getId ( ) ) ; imageGuidList.add ( image.getImageId ( ) ) ; if ( getParameters ( ) . isImportAsNewEntity ( ) ) { image.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; image.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; } } }
public void testVms ( ) { testValidSql ( "Vms:" , "SELECT * FROM ((SELECT vms.* FROM vms ) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: storage.name = 111" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE 111 )) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public boolean storageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . get ( storageDomain.getstorage ( ) ) ; if ( connection != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } return true ; }
private void updateConsoleAddressPartiallyOverridden ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery query = new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { boolean isConsistent = returnValue.getReturnValue ( ) ; setConsoleAddressPartiallyOverridden ( ( ! isConsistent ) ) ; } } ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsDisplayAddressConsistentInCluster , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster.getId ( ) ) , query ) ; }
protected java.lang.String buildMetadataDictionaryForTemplate ( org.ovirt.engine.core.common.businessentities.VmTemplate template , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > metaDictionary ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > allTemplateImages = template.getDiskList ( ) ; java.lang.String templateMeta = generateVmTemplateMetadata ( template , allTemplateImages ) ; metaDictionary.put ( template.getId ( ) , new org.ovirt.engine.core.compat.KeyValuePairCompat ( templateMeta , allTemplateImages.stream ( ) . map ( BaseDisk :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ) ) ; return templateMeta ; }
protected java.util.List < org.ovirt.engine.core.compat.Guid > getVdsWhiteList ( ) { if ( ( getPredefinedVdsIdListToRunOn ( ) . size ( ) ) > 0 ) { return getPredefinedVdsIdListToRunOn ( ) ; } return super . getVdsWhiteList ( ) ; }
protected boolean validateNoDuplicateVm ( ) { org.ovirt.engine.core.common.businessentities.VmStatic duplicateVm = org.ovirt.engine.core.bll.ImportVmCommand.getVmStaticDAO ( ) . get ( getVm ( ) . getId ( ) ) ; if ( duplicateVm != null ) { return failCanDoAction ( VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS , java.lang.String.format ( "$VmName %1$s" , duplicateVm.getName ( ) ) ) ; } return true ; }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForClonedDisks ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskImages ) { final java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > disksMap = getDomainsDisksMap ( diskImages ) ; return validOrFirstFailure ( ( entry ) -> { org.ovirt.engine.core.compat.Guid sdId = entry.getKey ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList = disksMap.get ( sdId ) ; return getStorageDomainValidator ( entry ) . hasSpaceForClonedDisks ( disksList ) ; } ) ; }
void registerSelectionChangeHandler ( final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < T > buttonDef ) { final org.ovirt.engine.ui.uicompat.IEventListener itemSelectionChangeHandler = new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.common.widget.action.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { buttonDef.update ( ) ; } } ; addSelectionChangeListener ( itemSelectionChangeHandler ) ; eventBus.addHandler ( org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent.getType ( ) , new org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent.UiCommonInitHandler ( ) { @ java.lang.Override public void onUiCommonInit ( org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent event ) { addSelectionChangeListener ( itemSelectionChangeHandler ) ; } } ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) != null ) && ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) ) { getGlusterHostAddress ( ) . setIsChangable ( true ) ; getGlusterHostPassword ( ) . setIsChangable ( true ) ; } else { getGlusterHostAddress ( ) . setIsChangable ( false ) ; getGlusterHostPassword ( ) . setIsChangable ( false ) ; } }
protected void itemsCollectionChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.NotifyCollectionChangedEventArgs e ) { super . itemsCollectionChanged ( sender , e ) ; if ( ( ( getSystemTreeSelectedItem ( ) ) != null ) && ( ( getSystemTreeSelectedItem ( ) . getType ( ) ) == ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Cluster ) ) ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( getSystemTreeSelectedItem ( ) . getEntity ( ) ) ) ; setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDSGroup > cast ( getItems ( ) ) , new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPredicate ( cluster.getId ( ) ) ) ) ; } }
public static void GetProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
private java.util.List < org.ovirt.engine.api.model.Network > getNetworksModel ( ) { java.util.List < org.ovirt.engine.api.model.Network > networks = new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { org.ovirt.engine.api.model.Network net = new org.ovirt.engine.api.model.Network ( ) ; net.setId ( GUIDS [ i ] ) ; net.setname ( NAMES [ i ] ) ; networks.add ( net ) ; } return networks ; }
public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead ( ) { vm.setMinAllocatedMem ( 8865 ) ; vm.setVmMemSizeMb ( 8865 ) ; org.mockito.Mockito.doReturn ( 0 ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM ( vds , vm , 0 ) ; org.junit.jupiter.api.Assertions.assertTrue ( vmPassedMemoryRequirement ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain getNewMaster ( boolean duringReconstruct ) { if ( ( ( _newMaster ) == null ) && ( Guid.Empty.equals ( _newMasterStorageDomainId ) ) ) { _newMaster = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.electNewMaster ( duringReconstruct , canChooseInactiveDomainAsMaster ) ; } else if ( ( _newMaster ) == null ) { _newMaster = org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomainDAO ( ) . get ( _newMasterStorageDomainId ) ; } return _newMaster ; }
public void setIsAdminGUIFlag ( org.ovirt.engine.core.compat.Guid userId , boolean hasPermissions ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = dbUserDao.get ( userId ) ; if ( ( user.isAdmin ( ) ) != hasPermissions ) { user.setAdmin ( hasPermissions ) ; dbUserDao.update ( user ) ; } }
public void testValidateGateway ( ) throws java.lang.Exception { host.setVdsGroupCompatibilityVersion ( Version.v3_5 ) ; doTestValidateGateway ( "someGateway" , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.NETWORK_ATTACH_ILLEGAL_GATEWAY ) ) ; }
public void testGetAllOfStorageType ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainStatic > result = dao.getAllOfStorageType ( StorageType.ISCSI ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain : result ) { org.junit.Assert.assertEquals ( StorageType.ISCSI , domain.getstorage_type ( ) ) ; } }
public void canDoActionFailsWithInvalidBricks ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > paramBricks1 = getInvalidNoOfBricks ( volumeWithRemoveBricksTask ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithRemoveBricksTask , paramBricks1 ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > paramBricks2 = getInvalidBricks ( volumeWithRemoveBricksTask ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.StopRemoveGlusterVolumeBricksCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters ( volumeWithRemoveBricksTask , paramBricks2 ) ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
private void buildVmData ( ) { builder.buildVmProperties ( ) ; builder.buildVmVideoCards ( ) ; builder.buildVmCD ( ) ; builder.buildVmFloppy ( ) ; builder.buildVmDrives ( ) ; builder.buildVmNetworkInterfaces ( ) ; builder.buildVmNetworkCluster ( ) ; builder.buildVmBootSequence ( ) ; builder.buildVmBootOptions ( ) ; builder.buildVmSoundDevices ( ) ; builder.buildVmTimeZone ( ) ; builder.buildVmUsbDevices ( ) ; builder.buildVmMemoryBalloon ( ) ; builder.buildUnmanagedDevices ( ) ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; jobProperties.put ( VdcObjectType.StoragePool.name ( ) . toLowerCase ( ) , org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePoolName ( ) ) ; jobProperties.put ( VdcObjectType.VDS.name ( ) . toLowerCase ( ) , org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getVdsName ( ) ) ; } return jobProperties ; }
public void moveShareableDiskToGlusterDomain ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS ) ; }
protected boolean checkImagesStatus ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( getDiskDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVmId ( ) ) , true , false , true ) ; org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( disksToCheck ) ; return validate ( diskImagesValidator.diskImagesNotLocked ( ) ) ; }
private void DomainRecoveredFromProblem ( org.ovirt.engine.core.compat.Guid domainId , org.ovirt.engine.core.compat.Guid vdsId , java.lang.String vdsName ) { java.lang.String domainIdTuple = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData.getDomainIdTuple ( domainId ) ; org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat ( "Domain {0} recovered from problem. vds: {1}" , domainIdTuple , vdsName ) ; ClearVds ( vdsId , domainId ) ; _domainsInProblem.get ( domainId ) . remove ( vdsId ) ; if ( ( _domainsInProblem.get ( domainId ) . size ( ) ) == 0 ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat ( ( "Domain {0} has recovered from problem. No active host in the DC is reporting it as" + " problematic, so clearing the domain recovery timer." ) , domainIdTuple ) ; _domainsInProblem.remove ( domainId ) ; clearTimer ( domainId ) ; } }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.IsWidget content ) { if ( slot == ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetSearchPanel ) ) { setPanelContent ( searchPanelContainer , content ) ; } else if ( slot == ( org.ovirt.engine.ui.webadmin.section.main.presenter.HeaderPresenterWidget.TYPE_SetTabBar ) ) { setPanelContent ( mainTabContainer , content ) ; content.asWidget ( ) . addStyleName ( style.mainTabBar ( ) ) ; } else { super . setInSlot ( slot , content ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) != null ) && ( getIsImportGlusterConfiguration ( ) . getEntity ( ) ) ) { getGlusterHostAddress ( ) . setIsChangable ( true ) ; getGlusterHostPassword ( ) . setIsChangable ( true ) ; } else { getGlusterHostAddress ( ) . setIsChangable ( false ) ; getGlusterHostPassword ( ) . setIsChangable ( false ) ; } }
public static void isFloppySupported ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.Integer osId , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) : java.lang.Boolean.FALSE ; } } ; org.ovirt.engine.core.common.queries.OsQueryParameters params = new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetFloppySupport , osId , version ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , params , aQuery ) ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected void setUpLogExpectations ( boolean debug ) { try { java.lang.reflect.Field field = org.ovirt.engine.api.restapi.resource.BaseBackendResource.class . getDeclaredField ( "log" ) ; org.slf4j.Logger logger = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.mockito.Mockito.when ( logger.isDebugEnabled ( ) ) . thenReturn ( debug ) ; setFinalStatic ( field , logger ) ; } catch ( java.lang.Exception e ) { e.printStackTrace ( ) ; } }
protected void executeQueryCommand ( ) { try { org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setSucceeded ( false ) ; org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.utils.PKIResources.getCaCertificate ( ) . toString ( PKIResources.Format.X509_PEM ) ) ; org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setSucceeded ( true ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.GetCACertificateQuery.getQueryReturnValue ( ) . setExceptionString ( e.getMessage ( ) ) ; } }
public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull ( ) { return ( ( vnicProfile.getNetworkQosId ( ) ) == null ) || ( ( getDbFacade ( ) . getNetworkQosDao ( ) . get ( vnicProfile.getNetworkQosId ( ) ) ) != null ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS ) ; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( int size ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setSizeInGigabytes ( size ) ; diskImage.setActualSize ( size ) ; diskImage.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; diskImage.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return diskImage ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel sanStorageModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > lunList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( returnValue ) ) ; sanStorageModel.ApplyData ( lunList , true ) ; }
private void rollback5 ( ) { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment ; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext ) ( enlistment.getContext ( ) ) ) ; if ( ( enlistmentContext.getDataCenterId ( ) ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RemoveStoragePool , new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( enlistmentContext.getDataCenterId ( ) ) ) ; } context.enlistment = null ; enlistment.done ( ) ; }
public static byte [ ] jsonToByteArray ( org.codehaus.jackson.JsonNode json ) { final java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream ( ) ; try { try ( org.codehaus.jackson.JsonGenerator gen = org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.factory.createJsonGenerator ( os , JsonEncoding.UTF8 ) ) { gen.writeTree ( json ) ; } } catch ( java.io.IOException e ) { org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.log.debug ( "Exception thrown during marshalling json" , e ) ; } return os.toByteArray ( ) ; }
protected void UpdateActionAvailability ( ) { super . UpdateActionAvailability ( ) ; getConnectCommand ( ) . setIsExecutionAllowed ( ( ( ( ( ( getEntity ( ) ) != null ) && ( ( ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown ) ) ) ) && ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType ( getEntity ( ) . getVmOs ( ) ) ) ) && ( getConfigurator ( ) . isClientWindownsExplorer ( ) ) ) ) ; }
protected static org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode createGlusterRoleTree ( ) { return new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode ( org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleTreeView.getConstants ( ) . glusterRoleTree ( ) , new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode ( org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleTreeView.getConstants ( ) . configureVolumesRoleTree ( ) , new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode [ ] { new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode ( org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_GLUSTER_VOLUME , org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleTreeView.getConstants ( ) . allowToCreateGlusterVolumesRoleTree ( ) ) , new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode ( org.ovirt.engine.core.common.businessentities.ActionGroup.DELETE_GLUSTER_VOLUME , org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleTreeView.getConstants ( ) . allowToDeleteGlusterVolumesRoleTree ( ) ) , new org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleNode ( org.ovirt.engine.core.common.businessentities.ActionGroup.MANIPULATE_GLUSTER_VOLUME , org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleTreeView.getConstants ( ) . allowToManipulateGlusterVolumesRoleTree ( ) ) } ) ) ; }
public void testISplitRpm ( ) { org.junit.Assert.assertArrayEquals ( new java.lang.String [ ] { "ovirt-iso-node" , "2.6.0" , "20130820.fc18.x86_64" } , org.ovirt.engine.core.common.utils.RpmVersionUtils.splitRpmToParts ( "ovirt-iso-node-2.6.0-20130820.fc18.x86_64" ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result ) { java.util.List < org.ovirt.engine.core.common.queries.VdcQueryReturnValue > returnValueList = result.getReturnValues ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValueList.get ( 0 ) . getReturnValue ( ) ) ) ; initTemplateWithVersion ( templates ) ; initCdImage ( ) ; }
protected void setUpGetEntityExpectations ( int times , org.ovirt.engine.core.common.businessentities.VMStatus status ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendCdRomsResourceTest.PARENT_ID } , ( status != null ? getEntity ( 0 , status ) : getEntity ( 0 ) ) ) ; } }
public void testInterfaceIsValidSlaveWhenInterfaceIsVlan ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setVlanId ( 1 ) ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostInterfaceValidator.VAR_INTERFACE_NAME , vdsNetworkInterface.getName ( ) ) ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceIsValidSlave ( ) , matcher ) ; }
private void addGlusterWebhook ( org.ovirt.engine.core.common.businessentities.VDS vds ) { try { backend.runInternalAction ( ActionType.AddGlusterWebhookInternal , new org.ovirt.engine.core.common.action.VdsActionParameters ( vds.getId ( ) ) ) ; } catch ( java.lang.RuntimeException e ) { log.error ( "Could not add gluster webhook for gluster host '{}'" , vds.getName ( ) ) ; log.debug ( "Exception" , e ) ; } }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > Get64bitOsTypes ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.VmOsType [ ] { org.ovirt.engine.core.common.businessentities.VmOsType.RHEL3x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL4x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL5x64 , org.ovirt.engine.core.common.businessentities.VmOsType.RHEL6x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2003x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008R2x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008x64 , org.ovirt.engine.core.common.businessentities.VmOsType.Windows7x64 } ) ) ; return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes ; }
public void startFailedAutoStartVms ( ) { java.util.LinkedList < org.ovirt.engine.core.compat.Guid > idsToRemove = new java.util.LinkedList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid vmId : autoStartVmsToRun ) { org.ovirt.engine.core.utils.lock.EngineLock runVmLock = createEngineLockForRunVm ( vmId , getLockMessage ( ) ) ; if ( ! ( getLockManager ( ) . acquireLock ( runVmLock ) . getFirst ( ) ) ) { continue ; } runVm ( vmId , runVmLock ) ; idsToRemove.add ( vmId ) ; } autoStartVmsToRun.removeAll ( idsToRemove ) ; }
private void removeAllNetworksByVfsConfigId ( org.ovirt.engine.core.compat.Guid vfsConfigId ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createVfsConfigIdParameter ( vfsConfigId ) ; getCallsHandler ( ) . executeModification ( "DeleteAllVfsConfigNetworks" , parameterSource ) ; }
public org.ovirt.engine.sdk.decorators.StorageDomain update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.StorageDomain.class , org.ovirt.engine.sdk.decorators.StorageDomain.class , headers ) ; }
public void testStorageDomainTemplateLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Template template = new org.ovirt.engine.api.model.Template ( ) ; template.setId ( org.ovirt.engine.api.common.util.LinkHelperTest.TEMPLATE_ID ) ; template.setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain ( ) ) ; template.getStorageDomain ( ) . setId ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; template = org.ovirt.engine.api.utils.LinkHelper.addLinks ( setUpUriExpectations ( ) , template ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_DOMAIN_TEMPLATE_HREF , template.getHref ( ) ) ; assertEquals ( org.ovirt.engine.api.common.util.LinkHelperTest.STORAGE_DOMAIN_HREF , template.getStorageDomain ( ) . getHref ( ) ) ; }
public javax.ws.rs.core.Response toResponse ( org.codehaus.jackson.JsonProcessingException exception ) { try { org.ovirt.engine.api.restapi.resource.validation.JsonExceptionMapper.log.error ( "JSON exception while processing \"{}\" request for path \"{}\"" , request.getMethod ( ) , uriInfo.getPath ( ) ) ; org.ovirt.engine.api.restapi.resource.validation.JsonExceptionMapper.log.error ( "Exception" , exception ) ; return javax.ws.rs.core.Response.status ( Status.BAD_REQUEST ) . entity ( new org.ovirt.engine.api.restapi.resource.validation.UsageFinder ( ) . getUsageMessage ( application , uriInfo , request ) ) . build ( ) ; } catch ( java.lang.Exception e ) { throw new javax.ws.rs.WebApplicationException ( e , javax.ws.rs.core.Response.status ( Response.Status.INTERNAL_SERVER_ERROR ) . build ( ) ) ; } }
private void setLunsIds ( org.ovirt.engine.core.compat.Guid lunFromVgLunId , org.ovirt.engine.core.compat.Guid lunFromDbLunId , org.ovirt.engine.core.compat.Guid lunFromVgPvId , org.ovirt.engine.core.compat.Guid lunFromDbPvId ) { lunFromVg.setLUNId ( lunFromVgLunId.toString ( ) ) ; lunFromVg.setPhysicalVolumeId ( lunFromVgPvId.toString ( ) ) ; lunFromDb.setLUNId ( lunFromDbLunId.toString ( ) ) ; lunFromDb.setPhysicalVolumeId ( lunFromDbPvId.toString ( ) ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object ) { super . edit ( object ) ; object.getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( object.getProgress ( ) ) == null ) { disableAllTabs ( ) ; enableEditPoolFields ( ) ; } } } ) ; }
public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull ( ) { return ( ( vnicProfile.getNetworkQosId ( ) ) == null ) || ( ( org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.network.NetworkQoSDao.class ) . get ( vnicProfile.getNetworkQosId ( ) ) ) != null ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS ) ; }
static com.gwtplatform.mvp.client.TabData getTabData ( org.ovirt.engine.ui.webadmin.widget.tab.WebadminMenuLayout menuLayout ) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails menuTabDetails = menuLayout.getDetails ( WebAdminApplicationPlaces.clusterMainTabPlace ) ; return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData ( menuTabDetails.getSecondaryTitle ( ) , menuTabDetails.getPrimaryTitle ( ) , menuTabDetails.getSecondaryPriority ( ) , menuTabDetails.getPrimaryPriority ( ) , menuTabDetails.getIcon ( ) ) ; }
private static org.ovirt.engine.api.model.QosType mapModelQosType ( java.lang.String type ) { switch ( type ) { case "storage" : return org.ovirt.engine.api.model.QosType.STORAGE ; case "cpu" : return org.ovirt.engine.api.model.QosType.CPU ; case "network" : return org.ovirt.engine.api.model.QosType.NETWORK ; case "hostnetwork" : return org.ovirt.engine.api.model.QosType.HOSTNETWORK ; default : throw new java.lang.IllegalArgumentException ( java.lang.String.format ( "QosType %s cannot be mapped to %s: " , type , org.ovirt.engine.api.model.QosType.class ) ) ; } }
public void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testSetStatusForNonRequiredNetworkAlreadyOperational ( ) { networkCluster.setRequired ( false ) ; networkCluster.setStatus ( NetworkStatus.OPERATIONAL ) ; underTest.setStatus ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID , createNetwork ( org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1 , org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1 ) ) ; org.mockito.Mockito.verify ( networkClusterDao , org.mockito.Mockito.never ( ) ) . updateStatus ( org.mockito.ArgumentMatchers.same ( networkCluster ) ) ; }
public void reuseSession ( ) { if ( ( restApiSessionId ) != null ) { processSessionId ( restApiSessionId ) ; } else { getSessionIdFromHttpSession ( new org.ovirt.engine.ui.frontend.communication.StorageCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.String result ) { if ( result != null ) { setSessionId ( result , false ) ; processSessionId ( result ) ; } else { processSessionIdException ( ) ; } } @ java.lang.Override public void onFailure ( java.lang.Throwable caught ) { processSessionIdException ( ) ; } } ) ; } }
public void invalidDefaultManagementNetworkAttachement ( ) { newDefaultManagementNetworkFound ( ) ; final org.ovirt.engine.core.common.errors.EngineMessage expected = org.ovirt.engine.core.common.errors.EngineMessage.Unassigned ; org.mockito.Mockito.when ( networkClusterValidator.managementNetworkChange ( ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( expected ) ) ; createCommandWithDefaultCluster ( ) ; oldGroupIsDetachedDefault ( ) ; setupCpu ( ) ; validateFailedWithReason ( expected ) ; }
public void validateIsoPrefixNameForInitrdAndNullForKernel ( ) throws java.lang.Exception { java.lang.String initrd = "initrd" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( ( ( RunVmCommand.ISO_PREFIX ) + initrd ) , null ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , ( ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) + initrd ) ) ; org.junit.Assert.assertEquals ( vm.getKernelUrl ( ) , null ) ; }
protected org.ovirt.engine.api.model.Job getEntity ( int index ) { org.ovirt.engine.api.model.Job job = new org.ovirt.engine.api.model.Job ( ) ; job.setId ( GUIDS [ index ] ) ; job.setDescription ( DESCRIPTIONS [ index ] ) ; job.setActionType ( ActionType.AddExternalJob ) ; job.setStartTime ( new java.util.Date ( ) ) ; job.setExternal ( true ) ; job.setAutoCleared ( true ) ; return job ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesSubtract ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesToSubtract ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > subtract = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { if ( ( org.ovirt.engine.ui.uicommonweb.Linq.getDiskImageById ( image.getId ( ) , imagesToSubtract ) ) == null ) { subtract.add ( image ) ; } } return subtract ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { return java.util.Collections.singletonMap ( VdcObjectType.Disk.name ( ) . toLowerCase ( ) , org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand.getDiskImage ( ) . getDiskAlias ( ) ) ; }
private void setErrorMessageAtReturn ( org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.Integer > result ) { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault ( ) ; fault.setError ( result.getSecond ( ) ) ; if ( ( fault.getError ( ) ) != null ) { fault.setMessage ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getVdsErrorsTranslator ( ) . translateErrorTextSingle ( fault.getError ( ) . toString ( ) ) ) ; } org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getReturnValue ( ) . setFault ( fault ) ; }
private void onNumaSupport ( ) { if ( ( getWindow ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VmNumaSupportModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VmNumaSupportModel ) ( getWindow ( ) ) ) ; setVmNumaNodes ( model.getVm ( ) . getvNumaNodeList ( ) ) ; }
protected javax.ws.rs.core.UriInfo setUpChangeCdUriQueryExpectations ( ) { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; javax.ws.rs.core.MultivaluedMap < java.lang.String , java.lang.String > queries = control.createMock ( javax.ws.rs.core.MultivaluedMap.class ) ; org.easymock.EasyMock.expect ( queries.containsKey ( "current" ) ) . andReturn ( true ) . anyTimes ( ) ; org.easymock.EasyMock.expect ( uriInfo.getQueryParameters ( ) ) . andReturn ( queries ) . anyTimes ( ) ; return uriInfo ; }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms ( java.lang.String removedNetworkName ) { final java.util.List < java.lang.String > removedNetworkNames = java.util.Collections.singletonList ( removedNetworkName ) ; final java.util.List < java.lang.String > vmsNames = findActiveVmsUsingNetwork.findNamesOfActiveVmsUsingNetworks ( host.getId ( ) , removedNetworkNames ) ; org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidator detachNetworkUsedByVmValidator = new org.ovirt.engine.core.bll.validator.network.DetachNetworkUsedByVmValidator ( vmsNames , removedNetworkNames ) ; return detachNetworkUsedByVmValidator.validate ( ) ; }
private void persistTopology ( org.ovirt.engine.core.common.businessentities.VDS host , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbNics , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > clusterNetworks , org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData ) { vdsDynamicDao.updateDnsResolverConfiguration ( host.getId ( ) , host.getReportedDnsResolverConfiguration ( ) ) ; final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl ( interfaceDao , host.getInterfaces ( ) , dbNics , userConfiguredData.getUserOverriddenNicValuesByNicName ( ) ) ; networkInterfacesPersister.persistTopology ( ) ; createHostNetworkAttachmentsPersister ( host , clusterNetworks , userConfiguredData ) . persistNetworkAttachments ( ) ; }
protected boolean validateDiskInterface ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images ) { if ( ( ( diskImage.getDiskInterface ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI ) ) && ( ! ( org.ovirt.engine.core.common.FeatureSupported.virtIoScsi ( org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup ( ) . getCompatibilityVersion ( ) ) ) ) ) { return failCanDoAction ( VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL ) ; } } return true ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private void setUpGetEntityExpectations ( boolean notFound ) throws java.lang.Exception { setUpEntityQueryExpectations ( QueryType.GetProviderById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , getProvider ( ) ) ; setUpGetEntityExpectations ( QueryType.GetComputeResourceFromExternalProvider , org.ovirt.engine.core.common.queries.ProviderQueryParameters.class , new java.lang.String [ ] { "Provider.Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : getResources ( ) ) ) ; }
protected void gatherChangedVms ( org.ovirt.engine.core.common.businessentities.VM dbVm , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData vdsmVm ) { changedVms.add ( new org.ovirt.engine.core.common.utils.Pair ( dbVm , vdsmVm ) ) ; if ( org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled ( ) ) { logBuilder.append ( java.lang.String.format ( "%s:%s" , vdsmVm.getVmDynamic ( ) . getId ( ) . toString ( ) . substring ( 0 , 8 ) , vdsmVm.getVmDynamic ( ) . getStatus ( ) ) ) ; } }
private javax.ws.rs.core.Response addSAN ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.core.common.businessentities.StorageType storageType , org.ovirt.engine.core.common.businessentities.storage_domain_static entity , org.ovirt.engine.core.compat.Guid hostId ) { boolean overrideLuns = ( model.getStorage ( ) . isSetOverrideLuns ( ) ) ? model.getStorage ( ) . isOverrideLuns ( ) : false ; return performCreation ( VdcActionType.AddSANStorageDomain , getSanAddParams ( entity , hostId , getLunIds ( model.getStorage ( ) , storageType , hostId ) , overrideLuns ) , ID_RESOLVER ) ; }
public void setForceLabelMessage ( java.lang.String forceLabelMessage ) { forceEditor.setLabel ( ( forceLabelMessage == null ? constants.notAvailableLabel ( ) : forceLabelMessage ) ) ; forceEditor.setVisible ( ( forceLabelMessage != null ) ) ; }
public org.ovirt.engine.core.bll.provider.ProviderProxy getProviderProxy ( ) { if ( ( providerProxy ) == null ) { providerProxy = org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( getProvider ( ) ) ; } return providerProxy ; }
public void selectWanOptionsEnabled ( boolean selected ) { wanEnabled.asCheckBox ( ) . setValue ( selected ) ; }
private void addDiskPermissions ( org.ovirt.engine.core.common.businessentities.Disk disk ) { org.ovirt.engine.core.common.businessentities.Permissions perms = new org.ovirt.engine.core.common.businessentities.Permissions ( org.ovirt.engine.core.bll.AddDiskCommand.getCurrentUser ( ) . getId ( ) , PredefinedRoles.DISK_OPERATOR.getId ( ) , disk.getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk ) ; org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission ( perms ) ; }
private org.ovirt.engine.core.common.businessentities.VDS createHost ( org.ovirt.engine.core.common.businessentities.VDSStatus status , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid dcId ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; host.setClusterId ( clusterId ) ; host.setStoragePoolId ( dcId ) ; host.setClusterCompatibilityVersion ( Version.v3_0 ) ; host.setStatus ( status ) ; host.setHostName ( ( "host-" + ( host.getId ( ) ) ) ) ; return host ; }
protected void onFetchVms ( ) { dbVms = getVmDynamicDao ( ) . getAllRunningForVds ( vdsManager.getVdsId ( ) ) . stream ( ) . collect ( java.util.stream.Collectors.toMap ( VmDynamic :: getId , java.util.function.Function.identity ( ) ) ) ; changedVms = new java.util.ArrayList < > ( ) ; filterVms ( ) ; gatherNonRunningVms ( dbVms ) ; saveLastVmsList ( vdsmVms ) ; }
public void addExternallyManagedVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > externalVmList ) { for ( org.ovirt.engine.core.common.businessentities.VmStatic currVm : externalVmList ) { org.ovirt.engine.core.common.action.AddVmParameters params = new org.ovirt.engine.core.common.action.AddVmParameters ( currVm , null , null ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.AddVmFromScratch , params , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { org.ovirt.engine.core.bll.VdsEventListener.log.debugFormat ( "Failed adding Externally managed VM {0}" , currVm.getName ( ) ) ; } } }
public void runningSucceded ( ) { removeMemoryFromActiveSnapshot ( ) ; super . runningSucceded ( ) ; }
public void testStatisticalQuery ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = setUpStatisticalExpectations ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.HostNic , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > statisticsResource = ( ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResource < org.ovirt.engine.api.model.HostNic , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( resource.getStatisticsResource ( ) ) ) ; org.junit.Assert.assertNotNull ( statisticsResource ) ; verifyQuery ( statisticsResource.getQuery ( ) , entity ) ; }
public void updateCommandStatus ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.common.asynctasks.AsyncTaskType taskType , org.ovirt.engine.core.compat.CommandStatus status ) { final org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = get ( commandId ) ; if ( cmdEntity != null ) { cmdEntity.setCommandStatus ( status ) ; if ( ( taskType.equals ( AsyncTaskType.notSupported ) ) || ( cmdEntity.isCallBackEnabled ( ) ) ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope ( TransactionScopeOption.Required , new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . saveOrUpdate ( cmdEntity ) ; return null ; } } ) ; } } }
public void testListCrashClientLocale ( ) { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; locales.add ( org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpMacPoolsQueryExpectations ( t ) ; collection.setUriInfo ( uriInfo ) ; verifyFault ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , this :: getCollection ) , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE , t ) ; }
public java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > getNetworkIdToAttachmentMap ( org.ovirt.engine.core.compat.Guid hostId ) { if ( ! ( networkToAttachmentByHostId.containsKey ( hostId ) ) ) { networkToAttachmentByHostId.put ( hostId , new org.ovirt.engine.core.common.utils.MapNetworkAttachments ( networkAttachmentDao.getAllForHost ( hostId ) ) . byNetworkId ( ) ) ; } return networkToAttachmentByHostId.get ( hostId ) ; }
protected org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters buildCreateVmParameters ( ) { org.ovirt.engine.core.common.vdscommands.CreateVmVDSCommandParameters createVmParams = super . buildCreateVmParameters ( ) ; org.ovirt.engine.core.common.action.RunVmOnceParams runOnceParams = org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) ; org.ovirt.engine.core.common.action.SysPrepParams sysPrepParams = new org.ovirt.engine.core.common.action.SysPrepParams ( ) ; sysPrepParams.setSysPrepDomainName ( runOnceParams.getSysPrepDomainName ( ) ) ; sysPrepParams.setSysPrepUserName ( runOnceParams.getSysPrepUserName ( ) ) ; sysPrepParams.setSysPrepPassword ( runOnceParams.getSysPrepPassword ( ) ) ; createVmParams.setSysPrepParams ( sysPrepParams ) ; createVmParams.getVm ( ) . setVmInit ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getVmInit ( ) ) ; fillRunOnceGraphics ( ) ; return createVmParams ; }
public void labelBeingAttachedToValidBondExistingBondValid ( ) { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( "bond" ) ; bond.setSlaves ( java.util.Arrays.asList ( "slave1" , "slave2" ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = new java.util.ArrayList ( java.util.Collections.singletonList ( bond ) ) ; org.ovirt.engine.core.common.businessentities.network.NicLabel nicLabel = new org.ovirt.engine.core.common.businessentities.network.NicLabel ( bond.getId ( ) , bond.getName ( ) , "lbl1" ) ; org.junit.Assert.assertThat ( createNicLabelValidator ( nics ) . labelBeingAttachedToValidBond ( nicLabel ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void testIsoOnDataDomainNotExists ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setBootSequence ( BootSequence.CD ) ; org.mockito.Mockito.when ( diskDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( null ) ; org.ovirt.engine.core.bll.validator.RunVmValidatorTest.validateResult ( runVmValidator.validateIsoPath ( vm , org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) , null , null ) , false , EngineMessage.ERROR_CANNOT_FIND_ISO_IMAGE_PATH ) ; }
private java.lang.String getBrandingMessages ( final java.util.Locale locale ) { return brandingManager.getMessages ( getApplicationType ( ) . getPrefix ( ) , locale ) ; }
public void updateReportsAvailability ( ) { if ( org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . isReportsEnabled ( ) ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.VDSGroup > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper.getInstance ( ) . getResourceSubActions ( "Cluster" , getModelProvider ( ) ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions.size ( ) ) > 0 ) ) { getTable ( ) . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition < org.ovirt.engine.core.common.businessentities.VDSGroup > ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabClusterView.constants.showReportCluster ( ) , resourceSubActions ) ) ; } } }
private void setUpGetEntityExpectations ( org.ovirt.engine.core.compat.Guid entityId , java.lang.Boolean returnNull ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetAdGroupById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { entityId } , ( returnNull ? null : getEntity ( 0 ) ) ) ; }
private boolean handleLibvirtSecrets ( org.ovirt.engine.core.bll.context.CommandContext cmdContext , org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid poolId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getLibvirtSecretDao ( ) . getAllByStoragePoolIdFilteredByActiveStorageDomains ( poolId ) ; if ( ( ! ( libvirtSecrets.isEmpty ( ) ) ) && ( ! ( registerLibvirtSecretsImpl ( vds , libvirtSecrets , false ) ) ) ) { org.ovirt.engine.core.bll.storage.CINDERStorageHelper.log.error ( "Failed to register libvirt secret on vds {}." , vds.getName ( ) ) ; setNonOperational ( cmdContext , vds.getId ( ) , NonOperationalReason.LIBVIRT_SECRETS_REGISTRATION_FAILURE ) ; return false ; } return true ; }
public void getIrsImageList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { getIrsImageList ( aQuery , storagePoolId , false ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.networks.NetworkProfileListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel ( ) . getNewCommand ( ) ) ) { return newProfilePopupProvider.get ( ) ; } else if ( lastExecutedCommand == ( getModel ( ) . getEditCommand ( ) ) ) { return editProfilePopupProvider.get ( ) ; } else { return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; } }
private java.lang.String generatePreviewSentence ( ) { com.google.gwt.safehtml.shared.SafeHtml host = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.strongTextWithColor ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostForOutOfSyncSentence ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.WHITE_TEXT_COLOR ) ; com.google.gwt.safehtml.shared.SafeHtml dc = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.strongTextWithColor ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.dcForOutOfSyncSentence ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.WHITE_TEXT_COLOR ) ; com.google.gwt.safehtml.shared.SafeHtml outOfSyncPreviewSentence = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.coloredText ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.constants.hostOutOfSyncPreviewSentence ( ) , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.TEXT_COLOR ) ; return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.ItemInfoPopup.templates.hostOutOfSyncPreviewSentence ( host , outOfSyncPreviewSentence , dc ) . asString ( ) ; }
public void getRoleList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Role > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllRoles , new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters ( ) , aQuery ) ; }
private static void logField ( org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromOvf , java.lang.String fieldName , java.lang.String fieldValue ) { java.lang.String vmName = vmStaticFromOvf.getVmName ( ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.AddCustomValue ( "FieldName" , fieldName ) ; logable.AddCustomValue ( "VmName" , vmName ) ; logable.AddCustomValue ( "FieldValue" , fieldValue ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.VM_IMPORT_INFO ) ; }
public void saveOrUpdateWithoutTransaction ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getCommandEntityDao ( ) . saveOrUpdate ( cmdEntity ) ; } finally { if ( transaction != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } } }
public org.ovirt.engine.api.model.Nics list ( ) { org.ovirt.engine.api.model.Nics nics = new org.ovirt.engine.api.model.Nics ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > entities = getBackendCollection ( QueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity : entities ) { org.ovirt.engine.api.model.Nic nic = populate ( map ( entity ) , entity ) ; nics.getNics ( ) . add ( addLinks ( nic ) ) ; } return nics ; }
public javax.ws.rs.core.Response remove ( ) { org.ovirt.engine.core.common.businessentities.UserProfile entity = getEntity ( org.ovirt.engine.core.common.businessentities.UserProfile.class , VdcQueryType.GetUserProfile , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , userId.toString ( ) , true ) ; entity.setSshPublicKeyId ( Guid.Empty ) ; entity.setSshPublicKey ( "" ) ; org.ovirt.engine.core.common.action.UserProfileParameters parameters = new org.ovirt.engine.core.common.action.UserProfileParameters ( ) ; parameters.setUserProfile ( entity ) ; return performAction ( ActionType.UpdateUserProfile , parameters ) ; }
public void saveJobSubjectEntity ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entitybeforeSave = dao.getJobSubjectEntityByJobId ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID ) ; org.junit.Assert.assertTrue ( ( ! ( entitybeforeSave.isEmpty ( ) ) ) ) ; dao.save ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID , org.ovirt.engine.core.compat.Guid.newGuid ( ) , VdcObjectType.VmPool ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > entityAfterSave = dao.getJobSubjectEntityByJobId ( org.ovirt.engine.core.dao.JobSubjectEntityDaoTest.EXISTING_JOB_ID ) ; org.junit.Assert.assertEquals ( "Job subject entities before and after adding new entity" , ( ( entitybeforeSave.size ( ) ) + 1 ) , entityAfterSave.size ( ) ) ; }
protected void copyVmDevices ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmDevice > ( vmFromConfiguration.getVmUnamagedDeviceList ( ) ) ; devices.addAll ( vmFromConfiguration.getManagedVmDeviceMap ( ) . values ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices ( getVmIdFromSnapshot ( ) , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmId ( ) , vmFromConfiguration , vmFromConfiguration.getStaticData ( ) , true , devices , newDiskImages , _vmInterfaces , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters ( ) . isSoundDeviceEnabled ( ) ) ; }
public static void getDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean filterInternalDomain ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters ( ) ; tempVar.setFilterInternalDomain ( filterInternalDomain ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetDomainList , tempVar , aQuery ) ; }
protected void executeVmCommand ( ) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand ( ) ; if ( retValue.getSucceeded ( ) ) { monitorV2VJob ( JobStatus.WAIT_FOR_START ) ; org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded ( true ) ; } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" ) ; setCommandStatus ( CommandStatus.FAILED ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
public static void getExistingStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId , org.ovirt.engine.core.common.businessentities.StorageDomainType domainType , org.ovirt.engine.core.common.businessentities.StorageType storageType , java.lang.String path ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetExistingStorageDomainList , new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters ( hostId , storageType , domainType , path ) , aQuery ) ; }
public void testUpdate ( ) { existingTemplate.setdescription ( "This is an updated description" ) ; dao.update ( existingTemplate ) ; org.ovirt.engine.core.common.businessentities.VmTemplate result = dbFacade.getVmTemplateDao ( ) . get ( existingTemplate.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( existingTemplate , result ) ; }
public void execute ( ) { frontend.runQuery ( VdcQueryType.GetEngineSessionIdToken , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String engineAuthToken = ( ( java.lang.String ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; restApiSessionManager.acquireSession ( engineAuthToken ) ; } } ) ) ; }
public void sendMessage ( byte [ ] message ) { send ( new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . send ( ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION , this . getRequestQueue ( ) ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_REPLY_TO , getResponseQueue ( ) ) . withCorrelationId ( ) . withContent ( message ) . build ( ) ) ; }
public void refuseBalloonOnPPC ( ) { org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = setupCanAddPpcTest ( ) ; cmd.getParameters ( ) . setBalloonEnabled ( true ) ; org.mockito.Mockito.when ( osRepository.isBalloonEnabled ( cmd.getParameters ( ) . getVm ( ) . getVmOsId ( ) , cmd.getCluster ( ) . getCompatibilityVersion ( ) ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH ) ; }
public void testNoAffinityGroups ( ) { hosts = java.util.Arrays.asList ( host_positive_enforcing , host_negative_enforcing , host_not_in_affinity_group ) ; java.util.List < org.ovirt.engine.core.common.scheduling.AffinityGroup > affinityGroups = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.doReturn ( affinityGroups ) . when ( affinityGroupDao ) . getAllAffinityGroupsByVmId ( org.mockito.ArgumentMatchers.any ( ) ) ; org.assertj.core.api.Assertions.assertThat ( unit.filter ( cluster , hosts , vm , new java.util.HashMap < > ( ) , new org.ovirt.engine.core.common.scheduling.PerHostMessages ( ) ) ) . contains ( host_positive_enforcing , host_negative_enforcing , host_not_in_affinity_group ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Role model , int index ) { super . verifyModel ( model , index ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.isSetUser ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( model.getUser ( ) . isSetId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ 1 ] . toString ( ) , model.getUser ( ) . getId ( ) ) ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > > asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
private void logAlert ( org.ovirt.engine.core.common.businessentities.VDS host , java.lang.Double percents ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; auditLogable.addCustomValue ( "Percents" , percents.toString ( ) ) ; auditLogable.setVdsId ( host.getId ( ) ) ; auditLogable.setRepeatable ( true ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( auditLogable , AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED_BROKEN_CONNECTIVITY ) ; }
public void testActivateNic ( ) throws java.lang.Exception { org.ovirt.engine.api.restapi.resource.BackendVmNicResource backendVmNicResource = ( ( org.ovirt.engine.api.restapi.resource.BackendVmNicResource ) ( resource ) ) ; setUpGetEntityExpectations ( 4 ) ; setGetVmQueryExpectations ( 4 ) ; setGetNetworksQueryExpectations ( 4 ) ; setGetGuestAgentQueryExpectations ( 3 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmInterface , org.ovirt.engine.core.common.action.AddVmInterfaceParameters.class , new java.lang.String [ ] { "VmId" , "Interface.Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID , GUIDS [ 1 ] } ) ) ; verifyActionResponse ( backendVmNicResource.activate ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , org.ovirt.engine.core.bll.context.CommandContext cmdContext , boolean enableCallback ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = buildCommandEntity ( getParentParameters ( parentCommand ) . getCommandId ( ) , enableCallback ) ; org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.persistCommand ( commandEntity , cmdContext ) ; } finally { if ( transaction != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } } }
private void verifyAsyncActionStartedAndFailed ( ) { verifyAsyncActionStarted ( ) ; org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.never ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( testState , true , true ) ) ; org.mockito.Mockito.verify ( mockEventBus , org.mockito.Mockito.atLeastOnce ( ) ) . fireEvent ( new org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent ( testState , true , false ) ) ; }
protected java.security.MessageDigest getMd5Digest ( final javax.servlet.http.HttpServletRequest request ) throws java.io.UnsupportedEncodingException , java.security.NoSuchAlgorithmException { java.security.MessageDigest digest = createMd5Digest ( ) ; for ( org.ovirt.engine.ui.frontend.server.gwt.GwtDynamicHostPageServlet.MD5Attributes attribute : org.ovirt.engine.ui.frontend.server.gwt.GwtDynamicHostPageServlet.MD5Attributes.values ( ) ) { if ( ( request.getAttribute ( attribute.getKey ( ) ) ) != null ) { digest.update ( request.getAttribute ( attribute.getKey ( ) ) . toString ( ) . getBytes ( java.nio.charset.StandardCharsets.UTF_8 ) ) ; } } return digest ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Quota quota ) { if ( ( quota.getQuotaEnforcementType ( ) ) == null ) { return getApplicationResources ( ) . iconDisable ( ) ; } setEnumTitle ( quota.getQuotaEnforcementType ( ) ) ; switch ( quota.getQuotaEnforcementType ( ) ) { case HARD_ENFORCEMENT : return getApplicationResources ( ) . iconEnforce ( ) ; case SOFT_ENFORCEMENT : return getApplicationResources ( ) . iconAudit ( ) ; case DISABLED : return getApplicationResources ( ) . iconDisable ( ) ; default : return getApplicationResources ( ) . iconDisable ( ) ; } }
protected org.ovirt.engine.core.common.businessentities.Snapshot getActiveSnapshot ( ) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.bll.VmHandler.getActiveSnapshot ( getVm ( ) ) ; if ( activeSnapshot == null ) { org.ovirt.engine.core.bll.ImportVmCommand.log.warn ( "VM '{}' doesn't have active snapshot in export domain" , getVmId ( ) ) ; } return activeSnapshot ; }
private java.lang.String getManagementOptions ( org.ovirt.engine.core.common.businessentities.FenceAgentOrder order ) { java.lang.String managementOptions = "" ; if ( order == ( org.ovirt.engine.core.common.businessentities.FenceAgentOrder.Primary ) ) { managementOptions = org.ovirt.engine.core.utils.pm.VdsFenceOptions.getDefaultAgentOptions ( _vds.getPmType ( ) , _vds.getPmOptions ( ) ) ; } else if ( order == ( org.ovirt.engine.core.common.businessentities.FenceAgentOrder.Secondary ) ) { managementOptions = org.ovirt.engine.core.utils.pm.VdsFenceOptions.getDefaultAgentOptions ( _vds.getPmSecondaryType ( ) , _vds.getPmSecondaryOptions ( ) ) ; } return managementOptions ; }
private void mockExistingNetworks ( org.ovirt.engine.core.common.businessentities.network ... networks ) { org.mockito.Mockito.when ( networkDAO.getAllForCluster ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Arrays.asList ( networks ) ) ; }
public void testUpdateCantDo ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations ( 1 ) ; resource.setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class , new java.lang.String [ ] { "RootPassword" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.ROOT_PASSWORD } , false , true , "ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST" ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , "ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST" , 409 ) ; } }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > locks = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > ( ) ; locks.put ( org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection ( ) . getconnection ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE_CONNECTION , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; locks.put ( org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection ( ) . getid ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.STORAGE_CONNECTION , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; return locks ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { if ( returnValue != null ) { java.util.Map < java.lang.String , java.lang.String > customPropertiesList = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getCustomPropertySheet ( ) . setKeyValueMap ( customPropertiesList ) ; getCustomPropertySheet ( ) . setIsChangeable ( ( ! ( customPropertiesList.isEmpty ( ) ) ) ) ; initCustomProperties ( ) ; } stopProgress ( ) ; }
protected org.ovirt.engine.api.model.VM doPopulate ( org.ovirt.engine.api.model.VM model , org.ovirt.engine.api.model.VM entity ) { setPayload ( model ) ; setBallooning ( model ) ; setConsoleDevice ( model ) ; setVirtioScsiController ( model ) ; setSoundcard ( model ) ; setCertificateInfo ( model ) ; setVmOvfConfiguration ( model , entity ) ; setRngDevice ( model ) ; return model ; }
protected void verify ( org.ovirt.engine.api.model.Balance model , org.ovirt.engine.api.model.Balance transform ) { org.junit.jupiter.api.Assertions.assertNotNull ( transform ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getId ( ) , transform.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( model.getSchedulingPolicyUnit ( ) . getId ( ) , transform.getSchedulingPolicyUnit ( ) . getId ( ) ) ; }
public static void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Permit model , int index ) { assertEquals ( java.lang.Integer.toString ( ( index + 1 ) ) , model.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup = org.ovirt.engine.core.common.businessentities.ActionGroup.forValue ( ( index + 1 ) ) ; assertEquals ( actionGroup.name ( ) . toLowerCase ( ) , model.getName ( ) ) ; }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
public void externalNetworkAttached ( ) { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork ( "net" ) ; net.setProvidedBy ( new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork ( ) ) ; mockExistingNetworks ( net ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; nic.setNetworkName ( net.getName ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic ) ) ; validateAndExpectViolation ( helper , EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORKS_CANNOT_BE_PROVISIONED ) ; }
public java.lang.Object lookupEntity ( java.lang.Object id ) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.businessentities.VM vm = doGetEntity ( org.ovirt.engine.core.common.businessentities.VM.class , query , getQueryParams ( queryParamsClass , id ) , id.toString ( ) ) ; org.ovirt.engine.api.restapi.resource.Vm model = new org.ovirt.engine.api.restapi.resource.Vm ( ) ; model.setId ( vm.getId ( ) . toString ( ) ) ; return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( getUriInfo ( ) , model ) ; }
private org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask ( org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; return new org.ovirt.engine.core.common.businessentities.AsyncTasks ( parentCommand , org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success , org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running , asyncTaskCreationInfo.getVdsmTaskId ( ) , parentParameters , getParameters ( ) , asyncTaskCreationInfo.getStepId ( ) , getCommandId ( ) , parentParameters.getCommandId ( ) , asyncTaskCreationInfo.getStoragePoolID ( ) , asyncTaskCreationInfo.getTaskType ( ) ) ; }
private void processSingleClusterChanges ( org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param ) { final org.ovirt.engine.core.bll.network.cluster.transformer.NetworkClustersToSetupNetworksParametersTransformer networkClustersToSetupNetworksParametersTransformer = networkClustersToSetupNetworksParametersTransformerFactory.createNetworkClustersToSetupNetworksParametersTransformer ( getContext ( ) ) ; final java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > setupNetworksParams = new java.util.ArrayList < > ( ) ; setupNetworksParams.addAll ( networkClustersToSetupNetworksParametersTransformer.transform ( param.getAttachments ( ) , param.getDetachments ( ) ) ) ; org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing ( setupNetworksParams ) ; runInternalMultipleActions ( VdcActionType.PersistentHostSetupNetworks , setupNetworksParams ) ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
private static void initOsIds ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osIds = new java.util.ArrayList < java.lang.Integer > ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames.keySet ( ) ) ; java.util.Collections.sort ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osIds , new java.util.Comparator < java.lang.Integer > ( ) { @ java.lang.Override public int compare ( java.lang.Integer o1 , java.lang.Integer o2 ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames.get ( o1 ) . compareTo ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.osNames.get ( o2 ) ) ; } } ) ; }
public static void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain getHEStorageDomain ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.StoragePool storagePool , org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.getForStoragePool ( storageDomainId , storagePool.getId ( ) ) ; if ( storageDomain != null ) { return storageDomain ; } org.ovirt.engine.core.common.action.StorageDomainManagementParameter importParams = new org.ovirt.engine.core.common.action.StorageDomainManagementParameter ( ) ; importParams.setStorageDomainId ( storageDomainId ) ; importParams.setVdsId ( vm.getRunOnVds ( ) ) ; return backend.runInternalAction ( ActionType.ImportHostedEngineStorageDomain , importParams ) . getActionReturnValue ( ) ; }
private boolean validateBondSlavesCount ( ) { boolean returnValue = true ; for ( java.util.Map.Entry < java.lang.String , java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > > bondEntry : bonds.entrySet ( ) ) { if ( ( bondEntry.getValue ( ) . size ( ) ) < 2 ) { returnValue = false ; violations.add ( VdcBllMessages.NETWORK_BOND_PARAMETERS_INVALID ) ; } } return returnValue ; }
public static org.ovirt.engine.core.sso.utils.SSOSession getSsoSession ( javax.servlet.http.HttpServletRequest request ) { org.ovirt.engine.core.sso.utils.SSOSession ssoSession = ( ( request.getSession ( false ) ) == null ) ? null : ( ( org.ovirt.engine.core.sso.utils.SSOSession ) ( request.getSession ( ) . getAttribute ( SSOConstants.OVIRT_SSO_SESSION ) ) ) ; if ( ssoSession == null ) { throw new org.ovirt.engine.core.sso.utils.OAuthException ( SSOConstants.ERR_CODE_INVALID_GRANT , "Session expired please try again." ) ; } return ssoSession ; }
public void networkInUseByOneVm ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VM.class ) ; org.mockito.Mockito.when ( vm.getName ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME ) ; networkNotUsedByVmsTest ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse ( ) , java.util.Collections.singletonList ( vm ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult valuesConsistent ( ) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos ( ) ; if ( qos == null ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } java.lang.Integer outUpperlimit = qos.getOutAverageUpperlimit ( ) ; java.lang.Integer outRealtime = qos.getOutAverageRealtime ( ) ; return ( ( outUpperlimit != null ) && ( outRealtime != null ) ) && ( outUpperlimit < outRealtime ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INCONSISTENT_VALUES ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void GetGlusterHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String hostAddress , java.lang.String rootPassword , java.lang.String fingerprint ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterServersQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterServersQueryParameters ( hostAddress , rootPassword ) ; parameters.setFingerprint ( fingerprint ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterServers , parameters , aQuery ) ; }
public org.ovirt.engine.core.bll.ValidationResult isDomainHasSpaceForRequest ( final long requestedSize , final boolean useThresHold ) { long size = ( useThresHold ) ? org.ovirt.engine.core.bll.validator.StorageDomainValidator.getLowDiskSpaceThreshold ( ) : 0L ; if ( ( ( storageDomain.getAvailableDiskSize ( ) ) != null ) && ( ( ( storageDomain.getAvailableDiskSize ( ) ) - requestedSize ) < size ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN , storageName ( ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public static void GetPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_domains > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public void postUpdateNumOfSockets2 ( ) { java.lang.String version = getClusterCompatibilityVersion ( ) . toString ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getMaxNumOfCPUsPerSocket ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.this ; behavior.maxCpusPerSocket = ( ( java.lang.Integer ) ( returnValue ) ) ; behavior.totalCpuCoresChanged ( ) ; } } ) , version ) ; }
public void setEnabled ( boolean enabled ) { contentWidget.setEnabled ( enabled ) ; if ( enabled ) { getLabelElement ( ) . replaceClassName ( style.labelDisabled ( ) , style.labelEnabled ( ) ) ; } else { getLabelElement ( ) . replaceClassName ( style.labelEnabled ( ) , style.labelDisabled ( ) ) ; } if ( ! ( keepTitleOnSetEnabled ) ) { updateWidgetTitle ( null ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qos = ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ) ( returnValue ) ) ; getQos ( ) . setItems ( qos ) ; getQos ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById ( qos , getNetwork ( ) . getQosId ( ) ) ) ; }
public static void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpEntityQueryExpectations ( false ) ; setUriInfo ( setUpActionExpectations ( ActionType.RemoveMacPool , org.ovirt.engine.core.common.action.RemoveMacPoolByIdParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void testRemove ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 0 ) ; setUpGetGraphicsExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveVmTemplate , org.ovirt.engine.core.common.action.VmTemplateParametersBase.class , new java.lang.String [ ] { "VmTemplateId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( collection.remove ( GUIDS [ 0 ] . toString ( ) ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; setTitle ( ( disk.isBoot ( ) ? constants.bootableDisk ( ) : null ) ) ; return disk.isBoot ( ) ? resources.bootableDiskIcon ( ) : null ; }
private org.ovirt.engine.core.common.businessentities.VDSGroup createCluster ( int index ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; cluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterHookSyncJobTest.CLUSTER_GUIDS [ index ] ) ; cluster.setname ( "cluster" ) ; cluster.setGlusterService ( true ) ; cluster.setVirtService ( false ) ; cluster.setcompatibility_version ( Version.v3_2 ) ; return cluster ; }
public static void initLinuxOsTypes ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsIds = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetLinuxOss ) , callback ) ; }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
protected void SelectedItemPropertyChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e ) { super . SelectedItemPropertyChanged ( sender , e ) ; if ( e.PropertyName.equals ( "status" ) ) { UpdateActionAvailability ( ) ; } else if ( e.PropertyName.equals ( "display_type" ) ) { UpdateConsoleModels ( ) ; } }
protected org.ovirt.engine.core.common.businessentities.aaa.DbGroup getEntity ( int index ) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup entity = new org.ovirt.engine.core.common.businessentities.aaa.DbGroup ( ) ; entity.setId ( GUIDS [ index ] ) ; entity.setExternalId ( EXTERNAL_IDS [ index ] ) ; entity.setName ( NAMES [ index ] ) ; entity.setDomain ( org.ovirt.engine.api.restapi.resource.DOMAIN ) ; return entity ; }
public void shouldPass ( ) throws java.lang.Exception { org.ovirt.engine.core.common.console.ConsoleOptions options = new org.ovirt.engine.core.common.console.ConsoleOptions ( org.ovirt.engine.core.common.businessentities.GraphicsType.SPICE ) ; options.setVmId ( Guid.Empty ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( options ) ; org.junit.Assert.assertTrue ( getQuery ( ) . validateInputs ( ) ) ; }
public void render ( org.ovirt.engine.ui.common.widget.table.column.Context context , com.google.gwt.resources.client.ImageResource value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb ) { if ( value != null ) { sb.append ( org.ovirt.engine.ui.common.widget.table.column.StyledImageResourceCell.template.imageContainer ( title , style , com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString ( com.google.gwt.user.client.ui.AbstractImagePrototype.create ( value ) . getHTML ( ) ) ) ) ; } }
private java.lang.String getVmIsBeingImportedMessage ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_IMPORTED.name ( ) ) ; if ( ( org.ovirt.engine.core.bll.ImportVmCommand.getVmName ( ) ) != null ) { builder.append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.ImportVmCommand.getVmName ( ) ) ) ; } return builder.toString ( ) ; }
protected void setUpEntityQueryExpectations ( java.lang.String failure ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > entities = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { entities.add ( getEntity ( i ) ) ; } setUpEntityQueryExpectations ( QueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters.class , new java.lang.String [ ] { "StorageDomainId" , "ImageType" } , new java.lang.Object [ ] { GUIDS [ 3 ] , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All } , entities , failure ) ; }
protected void updateStatus ( org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map , org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { log.infoFormat ( "Setting domain %s to status $s" , map.getId ( ) , status.name ( ) ) ; map.setStatus ( status ) ; getStoragePoolIsoMapDao ( ) . updateStatus ( map.getId ( ) , map.getStatus ( ) ) ; }
public void onEditSnapshotSchedule ( ) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel ) ( getWindow ( ) ) ) ; if ( ( snapshotModel.getRecurrence ( ) . getSelectedItem ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN ) ) { confirmDeleteVolumeSnapshotSchedule ( ) ; } else { onEditSnapshotScheduleInternal ( ) ; } }
public void setup ( ) { command.setCluster ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) ) ; org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic ( ) ; vmStatic.setClusterId ( clusterId ) ; org.mockito.Mockito.doReturn ( vmStatic ) . when ( vmStaticDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; }
public void canDoActionInvalidVmStatus ( ) { command.getParameters ( ) . setParametersList ( createMoveDisksParameters ( ) ) ; initDiskImage ( diskImageId ) ; initVm ( VMStatus.Unknown , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageId ) ; command.updateParameters ( ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP.toString ( ) ) ) ; }
public void testStorageDomainVmLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.VM_ID ) ; vm.setStorageDomain ( new org.ovirt.engine.api.model.StorageDomain ( ) ) ; vm.getStorageDomain ( ) . setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; vm = org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( vm ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_VM_HREF , vm.getHref ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , vm.getStorageDomain ( ) . getHref ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage mockSourceImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; org.mockito.Mockito.doReturn ( java.util.Collections.singletonList ( image ) ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.when ( diskImageDAO.get ( image.getImageId ( ) ) ) . thenReturn ( image ) ; return image ; }
public void localStoragePoolAttachedToSingleCluster ( ) { org.mockito.Mockito.when ( cluster.getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.StoragePool.class ) ; org.mockito.Mockito.when ( dataCenter.isLocal ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( dataCenterDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( dataCenter ) ; org.hamcrest.MatcherAssert.assertThat ( validator.localStoragePoolAttachedToSingleCluster ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private java.lang.Integer calcMaxVCpu ( ) { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxNumOfVmSockets , vm.getCompatibilityVersion ( ) . getValue ( ) ) ; java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxNumOfVmCpus , vm.getCompatibilityVersion ( ) . getValue ( ) ) ; int threadsPerCore = vm.getThreadsPerCpu ( ) ; int cpuPerSocket = vm.getCpuPerSocket ( ) ; maxVCpus = ( cpuPerSocket * threadsPerCore ) * ( java.lang.Math.min ( maxSockets , ( maxVCpus / ( cpuPerSocket * threadsPerCore ) ) ) ) ; return maxVCpus ; }
protected org.ovirt.engine.core.compat.Guid generateNewDiskId ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.compat.Guid newGuidForDisk = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; newDiskIdForDisk.put ( newGuidForDisk , org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf ( disk ) ) ; disk.setId ( newGuidForDisk ) ; disk.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; return newGuidForDisk ; }
public static void getGlusterSwiftServerServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByClusterId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( clusterId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public void diskInterfaceNotSupportedByOs ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) ; vm.setVmOs ( 2 ) ; initializeOsRepository ( vm.getOs ( ) , DiskInterface.VirtIO ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( ) ; dve.setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert.assertThat ( validator.isDiskInterfaceSupported ( vm , dve ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; }
private org.ovirt.engine.core.bll.network.macpool.MacsStorage createMacsStorage ( java.util.Collection < org.apache.commons.lang.math.LongRange > rangesBoundaries ) { org.ovirt.engine.core.bll.network.macpool.MacsStorage macsStorage = new org.ovirt.engine.core.bll.network.macpool.MacsStorage ( allowDuplicates ) ; for ( org.apache.commons.lang.math.LongRange range : rangesBoundaries ) { macsStorage.addRange ( range.getMinimumLong ( ) , range.getMaximumLong ( ) ) ; } if ( macsStorage.availableMacExist ( ) ) { return macsStorage ; } else { throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED ) ; } }
public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsNone ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpv4Configuration ( Ipv4BootProtocol.NONE , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( false , true , true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , network.getName ( ) ) ) , network , attachment ) ; }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture ( ) { if ( org.apache.commons.lang.StringUtils.isNotEmpty ( getCluster ( ) . getCpuName ( ) ) ) { return org.ovirt.engine.core.bll.ClusterOperationCommandBase.getCpuFlagsManagerHandler ( ) . getArchitectureByCpuName ( getCluster ( ) . getCpuName ( ) , getCluster ( ) . getCompatibilityVersion ( ) ) ; } else if ( ( getCluster ( ) . getArchitecture ( ) ) == null ) { return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined ; } return getCluster ( ) . getArchitecture ( ) ; }
public boolean isSkippedDueToStatus ( ) { if ( ( ( getReturnValue ( ) ) != null ) && ( ( getReturnValue ( ) ) instanceof org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue ) ) { org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue fenceStatus = ( ( org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue ) ( getReturnValue ( ) ) ) ; return fenceStatus.getIsSkippedDueToStatus ( ) ; } else { return false ; } }
private static java.lang.String getVMRegexString ( org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter search ) { java.lang.StringBuilder query = new java.lang.StringBuilder ( ) ; query.append ( ".*" ) . append ( search.getDefaultSort ( SearchObjects.VM_OBJ_NAME ) ) . append ( ".*" ) . append ( search.getRelatedTableName ( SearchObjects.VM_OBJ_NAME , false ) ) . append ( ".* " ) ; return query.toString ( ) ; }
private void addImportedDevices ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData ( ) ; vmStatic.setImages ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ) ; vmStatic.setInterfaces ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) ; org.ovirt.engine.core.bll.ImportUtils.updateGraphicsDevices ( vmStatic , org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePool ( ) . getCompatibilityVersion ( ) ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices ( vmStatic , false ) ; org.ovirt.engine.core.bll.ConvertVmCommand.getVmDeviceDao ( ) . updateBootOrderInBatch ( new java.util.ArrayList ( vm.getManagedVmDeviceMap ( ) . values ( ) ) ) ; }
private java.lang.String getVmIsBeingImportedMessage ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_IMPORTED.name ( ) ) ; if ( ( org.ovirt.engine.core.bll.ImportVmCommand.getVmName ( ) ) != null ) { builder.append ( java.lang.String.format ( "$VmName %1$s" , org.ovirt.engine.core.bll.ImportVmCommand.getVmName ( ) ) ) ; } return builder.toString ( ) ; }
public void testLogReturnLogsWhenLogLevelActiveAndExpandReturn ( ) throws java.lang.Exception { java.lang.String id = "" ; org.slf4j.Logger log = org.mockito.Mockito.mock ( org.slf4j.Logger.class ) ; org.mockito.Mockito.when ( log.isDebugEnabled ( ) ) . thenReturn ( true ) ; org.ovirt.engine.core.utils.log.LoggedUtils.logReturn ( log , id , new org.ovirt.engine.core.utils.log.LoggedUtilsTest.LoggedOverridingSubclass ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito.verify ( log ) . debug ( org.mockito.ArgumentMatchers.eq ( LoggedUtils.EXIT_LOG_RETURN_VALUE ) , new java.lang.Object [ ] { org.mockito.ArgumentMatchers.anyObject ( ) , org.mockito.ArgumentMatchers.anyObject ( ) , org.mockito.ArgumentMatchers.eq ( id ) } ) ; }
protected org.ovirt.engine.core.bll.UpdateVmPoolCommand < org.ovirt.engine.core.common.action.AddVmPoolParameters > createCommand ( ) { org.ovirt.engine.core.common.action.AddVmPoolParameters param = new org.ovirt.engine.core.common.action.AddVmPoolParameters ( vmPools , testVm , VM_COUNT ) ; param.setStorageDomainId ( firstStorageDomainId ) ; return org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.UpdateVmPoolCommand ( param , org.ovirt.engine.core.bll.context.CommandContext.createContext ( param.getSessionId ( ) ) ) ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getPluggedManagedInterfaces ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VmDevice > devices ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > result = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( ( ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isHostDevInterface ( device ) ) || ( org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBridge ( device ) ) ) && ( device.isPlugged ( ) ) ) && ( device.isManaged ( ) ) ) { result.add ( device ) ; } } return result ; }
public static void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public void checkDifferentSubnetIntegerAndStringRepresentation ( ) { org.mockito.Mockito.when ( mockedMaskValidator.isValidNetmaskFormat ( org.ovirt.engine.core.common.utils.SubnetUtilsTest.VALID_NETMASK_FORMAT ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( mockedMaskValidator.isPrefixValid ( org.ovirt.engine.core.common.utils.SubnetUtilsTest.DIFFERENT_PREFIX ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( mockIpAddressConverter.convertPrefixToNetmask ( org.ovirt.engine.core.common.utils.SubnetUtilsTest.DIFFERENT_PREFIX ) ) . thenReturn ( org.ovirt.engine.core.common.utils.SubnetUtilsTest.INVALID_NETMASK_FORMAT ) ; org.junit.jupiter.api.Assertions.assertFalse ( underTest.equalSubnet ( org.ovirt.engine.core.common.utils.SubnetUtilsTest.DIFFERENT_PREFIX , org.ovirt.engine.core.common.utils.SubnetUtilsTest.VALID_NETMASK_FORMAT ) ) ; }
protected boolean canDoAction ( ) { return ( ( ( ( ( ( ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmExist ( ) ) && ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmInUpPausedDownStatus ( ) ) ) && ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.canRunActionOnNonManagedVm ( ) ) ) && ( isDiskExist ( getDisk ( ) ) ) ) && ( checkCanPerformPlugUnPlugDisk ( ) ) ) && ( org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmNotInPreviewSnapshot ( ) ) ) && ( imageStorageValidation ( ) ) ) && ( virtIoScsiDiskValidation ( ) ) ; }
private void postInitTemplate ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates ) { org.ovirt.engine.core.common.businessentities.VmTemplate oldTemplate = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; getModel ( ) . getTemplate ( ) . setItems ( templates ) ; getModel ( ) . getTemplate ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( templates , ( oldTemplate != null ? new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( oldTemplate.getId ( ) ) : new org.ovirt.engine.ui.uicommonweb.Linq.TemplatePredicate ( org.ovirt.engine.core.compat.NGuid.Empty ) ) ) ) ; updateIsDisksAvailable ( ) ; }
public void testFailInterfaceCanUpdateReadOnly ( ) { initializeCommand ( new org.ovirt.engine.core.common.action.UpdateVmDiskParameters ( vmId , diskImageGuid , createDiskImage ( ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . updateReadOnlyRequested ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) . when ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface ( ) ; org.junit.Assert.assertFalse ( command.validateCanUpdateReadOnly ( diskValidator ) ) ; }
public void executeQueryCommandWithBaseSnapshotOnly ( ) { imagesIds.add ( image1.getImageId ( ) ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.storage.DiskImage > queryReturnValue = runQuery ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , queryReturnValue.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( image1 , queryReturnValue.get ( image1.getImageId ( ) ) ) ; }
public void testNotManagementNetworkNegative ( ) { org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ; org.mockito.Mockito.when ( managementNetworkUtil.isManagementNetwork ( org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID ) ) . thenReturn ( false ) ; org.hamcrest.MatcherAssert.assertThat ( validator.notManagementNetwork ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void addColumnWithHtmlHeader ( com.google.gwt.user.cellview.client.Column < T , ? > column , com.google.gwt.safehtml.shared.SafeHtml headerHtml , java.lang.String width ) { com.google.gwt.user.cellview.client.Header < ? > header = new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader ( headerHtml ) ; addColumn ( column , header ) ; setColumnWidth ( column , width ) ; }
public void testIsHeHostWithVmCountGreaterThanZero ( ) { final int vmCount = 1 ; final boolean isHostedEngine = true ; setupHostedEngineTests ( isHostedEngine , vmCount ) ; boolean isHostedEngineHost = dao.get ( existingVds.getId ( ) ) . isHostedEngineHost ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( isHostedEngineHost ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue executeVerb ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage ) { try { return org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.GetVmsInfo , buildGetVmsInfoParameters ( storage ) ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; logable.addCustomValue ( "StorageDomainName" , storage.getStorageName ( ) ) ; new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector ( ) . log ( logable , AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED ) ; throw e ; } }
public void testRemoveStorageConnectionFromIscsiBond ( ) { java.util.List < java.lang.String > connections = dao.getStorageConnectionIdsByIscsiBondId ( iscsiBondId ) ; connectionId = connections.get ( 0 ) ; dao.removeStorageConnectionFromIscsiBond ( iscsiBondId , connectionId ) ; connections = dao.getStorageConnectionIdsByIscsiBondId ( iscsiBondId ) ; org.junit.Assert.assertEquals ( 1 , connections.size ( ) ) ; org.junit.Assert.assertFalse ( connections.contains ( connectionId ) ) ; }
public static void GetCustomPropertiesList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < org.ovirt.engine.core.compat.Version , java.lang.String > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmCustomProperties , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public static void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepSessionList ( java.lang.String volumeName , java.lang.String slaveHost , java.lang.String slaveVolumeName , java.lang.String userName ) { try { java.util.Map < java.lang.String , java.lang.Object > response ; response = vdsServer.glusterVolumeGeoRepSessionList ( volumeName , slaveHost , slaveVolumeName , userName ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc ( response ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void initUser ( ) { }
public static void getGlusterRebalanceStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.setHandleFailure ( true ) ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters ( clusterId , volumeId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeRebalanceStatus , parameters , aQuery ) ; }
public void testGetAllVMSearch ( ) throws java.lang.Exception { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "VM" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.VM ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( vmResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > > aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
private void cycleRate ( ) { currentRate = ( ( currentRate ) + 1 ) % ( rateCycle.length ) ; org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE rate = rateCycle [ currentRate ] ; repetitions = rate.getRepetitions ( ) ; org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine ( ( ( ( ( ( ( ( "GridTimer[" + ( name ) ) + "] Rate Cycled: Current Rate: " ) + rate ) + " Reps: " ) + ( repetitions ) ) + " Interval: " ) + ( rate.getInterval ( ) ) ) ) ; start ( ) ; }
public void edit ( org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel model ) { splitTable.edit ( model.getProviderNetworks ( ) , model.getImportedNetworks ( ) , model.getAddImportCommand ( ) , model.getCancelImportCommand ( ) ) ; dcColumn.edit ( model.getDataCenters ( ) ) ; driver.edit ( model ) ; }
public void isVmNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name , org.ovirt.engine.core.compat.Guid datacenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( source != null ) && ( ! ( ( java.lang.Boolean ) ( source ) ) ) ; } } ; org.ovirt.engine.core.common.queries.NameQueryParameters params = new org.ovirt.engine.core.common.queries.NameQueryParameters ( name ) ; params.setDatacenterId ( datacenterId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.IsVmWithSameNameExist , params , aQuery ) ; }
public void testDiskAttachedToVMValid ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) ; org.mockito.Mockito.when ( vmDao.getVmsListForDisk ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.ArgumentMatchers.anyBoolean ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( vm ) ) ; org.junit.Assert.assertThat ( validator.isDiskAttachedToVm ( vm ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig mapRow ( java.sql.ResultSet rs , int index ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig entity = new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig ( ) ; entity.setId ( getGuid ( rs , "id" ) ) ; entity.setNicId ( getGuid ( rs , "nic_id" ) ) ; entity.setAllNetworksAllowed ( rs.getBoolean ( "is_all_networks_allowed" ) ) ; fillNetworksAndLabelsDataOnConfig ( entity ) ; return entity ; }
protected boolean validateName ( java.lang.String newVmName , org.ovirt.engine.ui.uicommonweb.models.EntityModel entity , org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] validators ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel temp = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; temp.setIsValid ( true ) ; temp.setEntity ( newVmName ) ; temp.validateEntity ( validators ) ; if ( ! ( temp.getIsValid ( ) ) ) { entity.setInvalidityReasons ( temp.getInvalidityReasons ( ) ) ; entity.setIsValid ( false ) ; } return temp.getIsValid ( ) ; }
protected void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateVmTemplate , org.ovirt.engine.core.common.action.UpdateVmTemplateParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , valid , success ) ) ; try { resource.update ( getRestModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask ( org.ovirt.engine.core.bll.CommandBase command , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return coCoAsyncTaskHelper.createAsyncTask ( command , asyncTaskCreationInfo , parentCommand ) ; }
public void setAcceptableValues ( java.util.Collection < java.lang.Object > values ) { java.util.Collection < java.lang.String > stringValues = org.ovirt.engine.ui.uicommonweb.Linq.cast ( values ) ; com.google.gwt.user.client.ui.MultiWordSuggestOracle suggestOracle = ( ( com.google.gwt.user.client.ui.MultiWordSuggestOracle ) ( asSuggestBox ( ) . getSuggestOracle ( ) ) ) ; suggestOracle.clear ( ) ; suggestOracle.addAll ( stringValues ) ; suggestOracle.setDefaultSuggestionsFromText ( stringValues ) ; }
protected boolean attachUserToSession ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getSessionId ( ) ) ) ) { org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( org.ovirt.engine.core.bll.LoginBaseCommand.getParameters ( ) . getSessionId ( ) , org.ovirt.engine.core.bll.LoginBaseCommand.getCurrentUser ( ) ) ; } else if ( ! ( org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( org.ovirt.engine.core.bll.LoginBaseCommand.getCurrentUser ( ) ) ) ) { return failCanDoAction ( VdcBllMessages.USER_CANNOT_LOGIN_SESSION_MISSING ) ; } return true ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc prepareImage ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID , boolean allowIllegal ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.prepareImage ( sdID , spID , imageID , volumeID , allowIllegal ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.PrepareImageReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testGetNotFound ( ) { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( java.util.Collections.emptyList ( ) ) ; verifyNotFoundException ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , ( ) -> org.ovirt.engine.api.restapi.resource.resource.get ( ) ) ) ; }
public void edit ( ) { T qos = org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getSelectedItem ( ) ; if ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.QosModel < T , P > qosModel = getEditQosModel ( qos ) ; setWindow ( qosModel ) ; qosModel.getDataCenters ( ) . setItems ( java.util.Arrays.asList ( org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) ) , org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getEntity ( ) ) ; }
protected void updateMemoryBalloon ( org.ovirt.engine.core.compat.Version clusterVersion ) { boolean hasMemoryBalloon = ( clusterVersion.compareTo ( VmListModel.BALLOON_DEVICE_MIN_VERSION ) ) >= 0 ; getModel ( ) . getMemoryBalloonDeviceEnabled ( ) . setIsAvailable ( hasMemoryBalloon ) ; }
public static void GetAllProviders ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.DiskImage createDiskSnapshot ( org.ovirt.engine.core.compat.Guid diskId ) { return new org.ovirt.engine.core.common.businessentities.DiskImage ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextBoolean ( ) , new java.util.Date ( ) , new java.util.Date ( ) , 1L , "1" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , "2" , org.ovirt.engine.core.compat.Guid.newGuid ( ) , 1L , diskId , org.ovirt.engine.core.common.businessentities.ImageStatus.OK , new java.util.Date ( ) , "" , org.ovirt.engine.core.common.businessentities.VmEntityType.VM , 1 , null , null , org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED , false ) ; }
public void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . withoutRefresh ( ) , aQuery ) ; }
protected void ReadGeneralData ( ) { org.ovirt.engine.core.compat.backendcompat.XmlNode content = _document.SelectSingleNode ( "//*/Content" ) ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode ( "Name" ) ; if ( node != null ) { _vm.getStaticData ( ) . setvm_name ( node.InnerText ) ; name = _vm.getStaticData ( ) . getvm_name ( ) ; } node = content.SelectSingleNode ( "TemplateId" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.getStaticData ( ) . setvmt_guid ( new org.ovirt.engine.core.compat.Guid ( node.InnerText ) ) ; } } node = content.SelectSingleNode ( "TemplateName" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setvmt_name ( node.InnerText ) ; } } node = content.SelectSingleNode ( "Description" ) ; if ( node != null ) { _vm.getStaticData ( ) . setdescription ( node.InnerText ) ; } node = content.SelectSingleNode ( "Domain" ) ; if ( node != null ) { _vm.getStaticData ( ) . setdomain ( node.InnerText ) ; } node = content.SelectSingleNode ( "CreationDate" ) ; if ( node != null ) { final java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.UtcDateStringToLocaDate ( node.InnerText ) ; if ( creationDate != null ) { _vm.getStaticData ( ) . setcreation_date ( creationDate ) ; } } node = content.SelectSingleNode ( "ExportDate" ) ; if ( node != null ) { final java.util.Date exportDate = org.ovirt.engine.core.utils.ovf.OvfParser.UtcDateStringToLocaDate ( node.InnerText ) ; if ( exportDate != null ) { _vm.getStaticData ( ) . setExportDate ( exportDate ) ; } } node = content.SelectSingleNode ( "IsInitilized" ) ; if ( node != null ) { _vm.getStaticData ( ) . setis_initialized ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } node = content.SelectSingleNode ( "IsAutoSuspend" ) ; if ( node != null ) { _vm.getStaticData ( ) . setis_auto_suspend ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } node = content.SelectSingleNode ( "TimeZone" ) ; if ( node != null ) { _vm.getStaticData ( ) . settime_zone ( node.InnerText ) ; } node = content.SelectSingleNode ( "IsStateless" ) ; if ( node != null ) { _vm.getStaticData ( ) . setis_stateless ( java.lang.Boolean.parseBoolean ( node.InnerText ) ) ; } org.ovirt.engine.core.compat.backendcompat.XmlNodeList list = content.SelectNodes ( "Section" ) ; for ( org.ovirt.engine.core.compat.backendcompat.XmlNode section : list ) { java.lang.String value = section.Attributes.get ( "xsi:type" ) . getValue ( ) ; if ( org.ovirt.engine.core.compat.StringHelper.EqOp ( value , "ovf:OperatingSystemSection_Type" ) ) { ReadOsSection ( section ) ; } else if ( org.ovirt.engine.core.compat.StringHelper.EqOp ( value , "ovf:VirtualHardwareSection_Type" ) ) { ReadHardwareSection ( section ) ; } else if ( org.apache.commons.lang.StringUtils.equals ( value , "ovf:SnapshotsSection_Type" ) ) { readSnapshotsSection ( section ) ; } } node = content.SelectSingleNode ( "Origin" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setorigin ( org.ovirt.engine.core.common.businessentities.OriginType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "initrd_url" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setinitrd_url ( node.InnerText ) ; } } node = content.SelectSingleNode ( "default_boot_sequence" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setdefault_boot_sequence ( org.ovirt.engine.core.common.businessentities.BootSequence.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "kernel_url" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setkernel_url ( node.InnerText ) ; } } node = content.SelectSingleNode ( "kernel_params" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setkernel_params ( node.InnerText ) ; } } org.ovirt.engine.core.utils.ovf.OvfLogEventHandler < org.ovirt.engine.core.common.businessentities.VmStatic > handler = new org.ovirt.engine.core.utils.ovf.VMStaticOvfLogHandler ( _vm.getStaticData ( ) ) ; java.util.List < java.lang.String > aliases = handler.getAliases ( ) ; for ( java.lang.String alias : aliases ) { java.lang.String value = readEventLogValue ( content , alias ) ; if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( value ) ) ) { handler.addValueForAlias ( alias , value ) ; } } node = content.SelectSingleNode ( "app_list" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setapp_list ( node.InnerText ) ; } } else if ( ( ( _images ) != null ) && ( ( _images.size ( ) ) > 0 ) ) { int root = org.ovirt.engine.core.utils.ovf.OvfVmReader.GetFirstImage ( _images , _images.get ( 0 ) ) ; if ( root != ( - 1 ) ) { for ( int i = 0 ; i < ( _images.size ( ) ) ; i ++ ) { int x = org.ovirt.engine.core.utils.ovf.OvfVmReader.GetNextImage ( _images , _images.get ( i ) ) ; if ( x == ( - 1 ) ) { _vm.setapp_list ( _images.get ( i ) . getappList ( ) ) ; } } } else { _vm.setapp_list ( _images.get ( 0 ) . getappList ( ) ) ; } } node = content.SelectSingleNode ( "VmType" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setvm_type ( org.ovirt.engine.core.common.businessentities.VmType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "DefaultDisplayType" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setdefault_display_type ( org.ovirt.engine.core.common.businessentities.DisplayType.forValue ( java.lang.Integer.parseInt ( node.InnerText ) ) ) ; } } node = content.SelectSingleNode ( "MinAllocatedMem" ) ; if ( node != null ) { if ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( node.InnerText ) ) ) { _vm.setMinAllocatedMem ( java.lang.Integer.parseInt ( node.InnerText ) ) ; } } }
public void update ( int index , org.ovirt.engine.core.common.businessentities.VmPool pool , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; parameters.put ( FragmentParams.NAME.getName ( ) , pool.getName ( ) ) ; getPlaceTransitionHandler ( ) . handlePlaceTransition ( WebAdminApplicationPlaces.poolGeneralSubTabPlace , parameters ) ; }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
public void testUpdateSnapshotStatus ( ) { dao.updateSnapshotStatus ( existingSnapshot.getSnapshotId ( ) , GlusterSnapshotStatus.DEACTIVATED ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot = dao.getById ( existingSnapshot.getSnapshotId ( ) ) ; org.junit.Assert.assertNotNull ( snapshot ) ; org.junit.Assert.assertNotEquals ( snapshot , existingSnapshot ) ; existingSnapshot.setStatus ( GlusterSnapshotStatus.DEACTIVATED ) ; org.junit.Assert.assertEquals ( existingSnapshot , snapshot ) ; }
public javax.ws.rs.core.Response reorderMacAddresses ( org.ovirt.engine.api.model.Action action ) { getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( guid ) , ( "VM: id=" + ( guid ) ) , true ) ; final org.ovirt.engine.core.common.action.VmOperationParameterBase params = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( guid ) ; final javax.ws.rs.core.Response response = doAction ( ActionType.ReorderVmNics , params , action ) ; return response ; }
public void testUpdateCantDo ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations ( 1 ) ; resource.setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVds , org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class , new java.lang.String [ ] { "RootPassword" } , new java.lang.Object [ ] { "" } , false , true , "ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST" ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , "ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST" , 409 ) ; } }
private org.ovirt.engine.core.common.businessentities.DiskImage mockSourceImage ( ) { org.ovirt.engine.core.common.businessentities.DiskImage image = createDiskImage ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; org.mockito.Mockito.doReturn ( java.util.Collections.singletonList ( image ) ) . when ( cmd ) . getSourceImages ( ) ; org.mockito.Mockito.when ( diskImageDAO.get ( image.getImageId ( ) ) ) . thenReturn ( image ) ; return image ; }
public void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
void initListBoxEditors ( ) { isoEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.compat.RpmVersion > ( new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer < org.ovirt.engine.core.compat.RpmVersion > ( ) { @ java.lang.Override public java.lang.String renderNullSafe ( org.ovirt.engine.core.compat.RpmVersion version ) { return version.getRpmName ( ) ; } } ) ; rbPassword = new com.google.gwt.user.client.ui.RadioButton ( "1" ) ; rbPublicKey = new com.google.gwt.user.client.ui.RadioButton ( "1" ) ; publicKeyEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextAreaLabelEditor ( ) ; }
public void customPropertiesModified ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; iface.setCustomProperties ( createCustomProperties ( ) ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( iface ) , Version.v3_5 ) ; validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNetworkModified ( helper , network ) ; assertNoNetworksRemoved ( helper ) ; assertNoBondsRemoved ( helper ) ; assertInterfaceModified ( helper , iface ) ; }
private void testUpdateManagementNetworkChange ( boolean emptyCluster , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > expectedResult ) { org.mockito.Mockito.when ( networkCluster.getClusterId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.network.cluster.TEST_CLUSTER_ID ) ; org.mockito.Mockito.when ( vdsDao.getAllForCluster ( org.ovirt.engine.core.bll.network.cluster.TEST_CLUSTER_ID ) ) . thenReturn ( ( emptyCluster ? java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > emptyList ( ) : java.util.Collections.< org.ovirt.engine.core.common.businessentities.VDS > singletonList ( null ) ) ) ; org.junit.Assert.assertThat ( validator.managementNetworkChange ( ) , expectedResult ) ; }
public void testVmLocked ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED ) ) . when ( vmValidator ) . vmNotLocked ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( result.getState ( ) ) ) ; localModel.stopProgress ( ) ; setConfirmWindow ( null ) ; if ( result.getReturnValue ( ) . getSucceeded ( ) ) { showRemoveBricksStatus ( ) ; disableRemoveBrickStatusPopUpActions ( ) ; } }
protected org.ovirt.engine.core.common.businessentities.AsyncTaskStatus checkTaskExist ( org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedStatusTask ) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus returnedStatusTask = null ; if ( cachedStatusTask == null ) { returnedStatusTask = new org.ovirt.engine.core.common.businessentities.AsyncTaskStatus ( org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.unknown ) ; org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.error ( ( "SPMAsyncTask::PollTask: Task '{}' (Parent Command '{}', Parameters Type '{}') " + "was not found in VDSM, will change its status to unknown." ) , getVdsmTaskId ( ) , getParameters ( ) . getDbAsyncTask ( ) . getActionType ( ) , getParameters ( ) . getClass ( ) . getName ( ) ) ; } else { returnedStatusTask = cachedStatusTask ; } return returnedStatusTask ; }
private void setPanel ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel object ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel > list = ( ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel > ) ( object.getKeyValueLines ( ) . getItems ( ) ) ) ; panel.clear ( ) ; widgetList = new java.util.ArrayList < org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget > ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel : list ) { org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget keyValueLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget ( ) ; widgetList.add ( keyValueLineWidget ) ; panel.add ( keyValueLineWidget ) ; keyValueLineWidget.edit ( keyValueLineModel ) ; keyValueLineWidget.setEnabled ( enabled ) ; } }
public void shouldDoNothingWhenSatisfied ( ) { org.ovirt.engine.core.common.scheduling.AffinityGroup positiveGroup = createAffinityGroup ( vdsGroup , true , vm1 , vm2 ) ; org.ovirt.engine.core.common.scheduling.AffinityGroup negativeGroup = createAffinityGroup ( vdsGroup , false , vm1 , vm4 ) ; affinityGroups.add ( positiveGroup ) ; affinityGroups.add ( negativeGroup ) ; org.assertj.core.api.Assertions.assertThat ( enforcer.chooseNextVmToMigrate ( vdsGroup ) ) . isNull ( ) ; }
public void talendLogs_LOGS_error ( java.lang.Exception exception , java.lang.String errorComponent , final java.util.Map < java.lang.String , java.lang.Object > globalMap ) throws ovirt_engine_dwh.samplerunjobs_3_6.SampleRunJobs.TalendException { talendLogs_CONSOLE_error ( exception , errorComponent , globalMap ) ; }
public void clearPoolTimers ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.info ( "clear domain error-timers for pool '{}'." , _storagePoolId ) ; for ( java.lang.String jobId : _timers.values ( ) ) { try { org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . deleteJob ( jobId ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.warn ( "failed deleting job '{}'." , jobId ) ; } } }
private static java.lang.String generateDiskAliasJsonEntry ( java.lang.String diskAlias ) { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance ( ) . generateJsonField ( "DiskAlias" , diskAlias ) ; }
protected void ExecuteVdsBrokerCommand ( ) { status = org.ovirt.engine.core.vdsbroker.gluster.EnableGlusterHookVDSCommand.getBroker ( ) . glusterHookEnable ( org.ovirt.engine.core.vdsbroker.gluster.EnableGlusterHookVDSCommand.getParameters ( ) . getGlusterCommand ( ) , org.ovirt.engine.core.vdsbroker.gluster.EnableGlusterHookVDSCommand.getParameters ( ) . getHookStage ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.gluster.EnableGlusterHookVDSCommand.getParameters ( ) . getHookName ( ) ) ; org.ovirt.engine.core.vdsbroker.gluster.EnableGlusterHookVDSCommand.proceedProxyReturnValue ( ) ; }
public static void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) , aQuery ) ; }
private javax.ws.rs.core.Response addSAN ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , org.ovirt.engine.core.common.businessentities.StorageDomainStatic entity , org.ovirt.engine.core.compat.Guid hostId ) { boolean overrideLuns = ( model.getStorage ( ) . isSetOverrideLuns ( ) ) ? model.getStorage ( ) . isOverrideLuns ( ) : false ; return performCreate ( VdcActionType.AddSANStorageDomain , getSanAddParams ( entity , hostId , getLunIds ( model.getStorage ( ) , storageType , hostId ) , overrideLuns ) , ID_RESOLVER ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getResolveContentConflict ( ) . getEntity ( ) ) == null ) { getServerHooksList ( ) . setIsChangeable ( false ) ; } else { getServerHooksList ( ) . setIsChangeable ( getResolveContentConflict ( ) . getEntity ( ) ) ; } }
public void successVmInPreviewForAttachedSnapshot ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice.setSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public static void updateDisksFromDb ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.List < org.ovirt.engine.core.common.businessentities.Disk > imageList = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskDao ( ) . getAllForVm ( vm.getId ( ) ) ; vm.clearDisks ( ) ; org.ovirt.engine.core.bll.VmHandler.updateDisksForVm ( vm , imageList ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
protected boolean canDoAction ( ) { if ( ( getDisk ( ) ) == null ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST ) ; } org.ovirt.engine.core.bll.validator.storage.DiskValidator oldDiskValidator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator ( getDisk ( ) ) ; return ( ( validate ( oldDiskValidator.validateNotHostedEngineDisk ( ) ) ) && ( validateAllVmsForDiskAreDown ( ) ) ) && ( canRemoveDiskBasedOnStorageTypeCheck ( ) ) ; }
public void provisioningProvided ( ) { org.hamcrest.MatcherAssert.assertThat ( validator.provisioningComputeResourceValid ( false , new org.ovirt.engine.core.common.businessentities.ExternalComputeResource ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.provisioningHostGroupValid ( false , new org.ovirt.engine.core.common.businessentities.ExternalHostGroup ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.provisioningComputeResourceValid ( true , new org.ovirt.engine.core.common.businessentities.ExternalComputeResource ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( validator.provisioningHostGroupValid ( true , new org.ovirt.engine.core.common.businessentities.ExternalHostGroup ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionCreate ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remotVolumeName , java.lang.String userName , java.lang.Boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionCreate" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , remoteHost ) . withParameter ( "remoteVolumeName" , remotVolumeName ) . withParameter ( "force" , force ) . withOptionalParameter ( "remoteUserName" , userName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public void testAllDomainsWithinThreshold ( ) { setUpGeneralValidations ( ) ; setUpDiskValidations ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) . when ( multipleStorageDomainsValidator ) . allDomainsExistAndActive ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN.name ( ) ) ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.storage.ImageStatus getDiskStatus ( final org.ovirt.engine.core.compat.Guid id ) { return execute ( ( ) -> { com.woorea.openstack.cinder.model.Volume volume = proxy.getVolumeById ( id.toString ( ) ) ; org.ovirt.engine.core.common.businessentities.storage.CinderVolumeStatus cinderVolumeStatus = org.ovirt.engine.core.common.businessentities.storage.CinderVolumeStatus.forValue ( volume.getStatus ( ) ) ; return org.ovirt.engine.core.bll.storage.disk.cinder.CinderBroker.mapCinderVolumeStatusToImageStatus ( cinderVolumeStatus ) ; } ) ; }
public void testRebalance ( ) throws java.lang.Exception { setupParentExpectations ( ) ; resource.setParent ( volumesResourceMock ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.StartRebalanceGlusterVolume , org.ovirt.engine.core.common.action.gluster.GlusterVolumeRebalanceParameters.class , new java.lang.String [ ] { "VolumeId" } , new java.lang.Object [ ] { GUIDS [ 0 ] } ) ) ; verifyActionResponse ( resource.rebalance ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
public void getClustersHavingHosts ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Cluster > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllClustersHavingHosts , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity ( getCommandId ( ) , parentParameters.getCommandId ( ) , getActionType ( ) , getParameters ( ) , commandStatus , enableCallBack , getReturnValue ( ) ) ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } }
private void setUpGetVirtioScsiExpectations ( int ... idxs ) throws java.lang.Exception { for ( int i = 0 ; i < ( idxs.length ) ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVirtioScsiControllers , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ idxs [ i ] ] } , new java.util.ArrayList < > ( ) ) ; } }
public void setUp ( ) { params = generateParameters ( ) ; command = org.mockito.Mockito.spy ( generateCommand ( ) ) ; role = new org.ovirt.engine.core.common.businessentities.Role ( ) ; role.setId ( params.getRoleId ( ) ) ; org.mockito.Mockito.doReturn ( roleDAOMock ) . when ( command ) . getRoleDao ( ) ; org.mockito.Mockito.when ( roleDAOMock.get ( params.getRoleId ( ) ) ) . thenReturn ( role ) ; org.mockito.Mockito.doReturn ( roleGroupMapDAOMock ) . when ( command ) . getRoleGroupMapDAO ( ) ; }
public void testRemoveAllSupportedHostFeature ( ) { java.util.Set < java.lang.String > featuresSupported = dao.getSupportedHostFeaturesByHostId ( FixturesTool.HOST_ID ) ; org.junit.Assert.assertFalse ( featuresSupported.isEmpty ( ) ) ; dao.removeAllSupportedHostFeature ( FixturesTool.HOST_ID , featuresSupported ) ; java.util.Set < java.lang.String > featuresSupportedAfterDeletion = dao.getSupportedHostFeaturesByHostId ( FixturesTool.HOST_ID ) ; org.junit.Assert.assertTrue ( "Failed to remove addtional supported features" , featuresSupportedAfterDeletion.isEmpty ( ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createDisk ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; disk.setDiskAlias ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; disk.setActive ( true ) ; disk.setImageStatus ( ImageStatus.OK ) ; return disk ; }
public static void getHostPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetServerSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public static void getAllTemplatesFromExportDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( storagePoolId , storageDomainId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplatesFromExportDomain , getAllFromExportDomainQueryParamenters , aQuery ) ; }
private static void setDiskList ( org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.getDiskImageList ( ) ) { vmTemplate.getDiskList ( ) . add ( diskImage ) ; } java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > diskImageTemplate = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.getDiskImageTempalteList ( ) ; vmTemplate.getDiskTemplateMap ( ) . putAll ( diskImageTemplate ) ; }
public org.ovirt.engine.core.bll.ValidationResult hotUpdatePossible ( ) { if ( ( getRequiredAction ( ) ) == ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.UPDATE_VM_DEVICE ) ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.networkLinking ( version ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.HOT_VM_INTERFACE_UPDATE_IS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.clusterVersion ( ) ) ; } else if ( ( portMirroringEnabled ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.getInterface ( ) . getVnicProfileId ( ) ) ) || ( portMirroringEnabled ( oldIface.getVnicProfileId ( ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_PERFORM_HOT_UPDATE_WITH_PORT_MIRRORING ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private org.ovirt.engine.core.common.action.VdcActionType addActionTypeForQosType ( org.ovirt.engine.api.model.QosType qosType ) { switch ( qosType ) { case STORAGE : return org.ovirt.engine.core.common.action.VdcActionType.AddStorageQos ; case CPU : return org.ovirt.engine.core.common.action.VdcActionType.AddCpuQos ; case NETWORK : return org.ovirt.engine.core.common.action.VdcActionType.AddNetworkQoS ; default : throw new java.lang.IllegalArgumentException ( ( ( "Unsupported QoS type \"" + qosType ) + "\"" ) ) ; } }
private void mockVdsDao ( org.ovirt.engine.core.common.businessentities.VDSStatus vdsStatus , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > listVds ) { org.ovirt.engine.core.dao.VdsDao vdsDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VdsDao.class ) ; org.mockito.Mockito.when ( vdsDaoMock.getAllForStoragePoolAndStatus ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) , org.mockito.Matchers.eq ( vdsStatus ) ) ) . thenReturn ( listVds ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getVdsDao ( ) ) . thenReturn ( vdsDaoMock ) ; }
private void scanAlignment ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameterList = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Disk disk : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( getSelectedItems ( ) ) ) ) { parameterList.add ( new org.ovirt.engine.core.common.action.GetDiskAlignmentParameters ( disk.getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.GetDiskAlignment , parameterList , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { } } , this ) ; }
protected org.ovirt.engine.api.model.Disk deprecatedPopulate ( org.ovirt.engine.api.model.Disk model , org.ovirt.engine.api.model.Disk entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( httpHeaders , uriInfo ) ; if ( details.contains ( "statistics" ) ) { addStatistics ( model , entity ) ; } return model ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { java.lang.String propertyName = ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ; if ( "IsExecutionAllowed" . equals ( propertyName ) ) { getView ( ) . setApplyEnabled ( model.getApplyCommand ( ) . getIsExecutionAllowed ( ) ) ; } }
private java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > getStorageToDiskMap ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > storageToDisksMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : getSourceImages ( ) ) { org.ovirt.engine.core.utils.MultiValueMapUtils.addToMap ( disk.getStorageIds ( ) . get ( 0 ) , disk , storageToDisksMap ) ; } return storageToDisksMap ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue ( ) ; stopProgress ( ) ; if ( ( returnValue != null ) && ( returnValue.getSucceeded ( ) ) ) { cancel ( ) ; postOnSave ( ) ; } }
protected boolean setAndValidateCpuProfile ( ) { if ( ( isInstanceType ( ) ) || ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate ( ) ) ) { return true ; } return validate ( cpuProfileHelper.setAndValidateCpuProfile ( org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate ( ) , org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserIdIfExternal ( ) . orElse ( null ) ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.core.common.businessentities.Cluster cluster ) { validateParameters ( cluster , getMandatoryParameters ( ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter ( cluster ) ; org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalProviders ( this , cluster.getExternalNetworkProviders ( ) ) ; return performCreate ( ActionType.AddCluster , createAddCommandParams ( cluster , dataCenter ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.QueryType.GetClusterById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { migrationPolicies = ( ( java.util.List < org.ovirt.engine.core.common.migration.MigrationPolicy > ) ( returnValue ) ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.EventSubscriberId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.EventSubscriberId other = ( ( org.ovirt.engine.core.common.businessentities.EventSubscriberId ) ( obj ) ) ; return ( ( ( java.util.Objects.equals ( subscriberId , other.subscriberId ) ) && ( java.util.Objects.equals ( eventUpName , other.eventUpName ) ) ) && ( ( eventNotificationMethod ) == ( other.eventNotificationMethod ) ) ) && ( java.util.Objects.equals ( tagName , other.tagName ) ) ; }
public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ) { returnValue = ( ! ( org.ovirt.engine.core.compat.StringHelper.EqOp ( getid ( ) , "" ) ) ) && ( org.ovirt.engine.core.compat.StringHelper.EqOp ( getid ( ) , ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( obj ) ) . getid ( ) ) ) ; } return returnValue ; }
public void getGlusterVolumeGeoRepStatusForMasterVolume ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession > > aQuery , org.ovirt.engine.core.compat.Guid masterVolumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeGeoRepSessions , new org.ovirt.engine.core.common.queries.IdQueryParameters ( masterVolumeId ) , aQuery ) ; }
private boolean areAllDisksPluggedToVm ( java.util.List < org.ovirt.engine.core.common.action.MoveDiskParameters > moveDiskParamsList , boolean plugged ) { for ( org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : moveDiskParamsList ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskMap.get ( moveDiskParameters.getImageId ( ) ) ; if ( ( diskImage.getPlugged ( ) ) != plugged ) { return false ; } } return true ; }
protected boolean isRunningVmsWithIsoAttached ( ) { if ( ( ! ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getParameters ( ) . getIsInternal ( ) ) ) && ( ( org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStorageDomain ( ) . getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) ) { java.util.List < java.lang.String > vmNames = getVmsWithAttachedISO ( ) ; if ( ! ( vmNames.isEmpty ( ) ) ) { return failCanDoAction ( EngineMessage.ERROR_CANNOT_DEACTIVATE_STORAGE_DOMAIN_WITH_ISO_ATTACHED , java.lang.String.format ( "$VmNames %1$s" , org.apache.commons.lang.StringUtils.join ( vmNames , "," ) ) ) ; } } return true ; }
private void addPluginActionButtons ( java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < ? > > pluginActionButtonList ) { if ( ( getTable ( ) ) != null ) { for ( org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < ? > buttonDef : pluginActionButtonList ) { getTable ( ) . addActionButton ( ( ( org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition ) ( buttonDef ) ) ) ; } } }
private org.apache.http.impl.client.DefaultHttpClient createDefaultHttpClient ( java.lang.String url , java.lang.String username , java.lang.String password , java.lang.String key_file , java.lang.String cert_file , java.lang.String ca_file , java.lang.Integer port , java.lang.Integer timeout ) { int port_ = getPort ( url , port ) ; org.apache.http.impl.client.DefaultHttpClient client = new org.apache.http.impl.client.DefaultHttpClient ( createPoolingClientConnectionManager ( url , port_ ) ) ; client.getCredentialsProvider ( ) . setCredentials ( new org.apache.http.auth.AuthScope ( getHost ( url ) , port_ ) , new org.apache.http.auth.UsernamePasswordCredentials ( username , password ) ) ; return client ; }
public void testSaveOrUpdateExisting ( ) { int sizeBeforeSave = dao.getAll ( ) . size ( ) ; existingUser.setFirstName ( "changedname" ) ; existingUser.setLastName ( "changedsurname" ) ; dao.saveOrUpdate ( existingUser ) ; int sizeAfterSave = dao.getAll ( ) . size ( ) ; org.ovirt.engine.core.common.businessentities.aaa.DbUser result = dao.get ( existingUser.getId ( ) ) ; org.junit.Assert.assertEquals ( existingUser , result ) ; org.junit.Assert.assertEquals ( 0 , ( sizeAfterSave - sizeBeforeSave ) ) ; }
public void syncWith ( org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor interfacePropertiesAccessor ) { setIpv4BootProtocol ( interfacePropertiesAccessor.getBootProtocol ( ) ) ; getIpv4Address ( ) . setEntity ( interfacePropertiesAccessor.getAddress ( ) ) ; getIpv4Subnet ( ) . setEntity ( interfacePropertiesAccessor.getNetmask ( ) ) ; getIpv4Gateway ( ) . setEntity ( interfacePropertiesAccessor.getGateway ( ) ) ; getQosModel ( ) . init ( interfacePropertiesAccessor.getHostNetworkQos ( ) ) ; getCustomPropertiesModel ( ) . deserialize ( org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties ( interfacePropertiesAccessor.getCustomProperties ( ) ) ) ; }
public static void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) ; params.setRefresh ( false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , params , aQuery ) ; }
private void doTestBadAddNic ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( VdcActionType.AddVmTemplateInterface , org.ovirt.engine.core.common.action.AddVmTemplateInterfaceParameters.class , new java.lang.String [ ] { "VmTemplateId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendTemplateNicsResourceTest.VM_ID } , valid , success ) ) ; org.ovirt.engine.api.model.Nic model = org.ovirt.engine.api.restapi.resource.BackendTemplateNicsResourceTest.getModel ( 0 ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
private void setSearchStringImpl ( java.lang.String value , boolean checkIfNewValue ) { if ( ( ! checkIfNewValue ) || ( ! ( java.util.Objects.equals ( searchString , value ) ) ) ) { searchString = value ; searchStringChanged ( ) ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "SearchString" ) ) ; } }
public void setRowData ( int start , java.util.List < ? extends T > values ) { super . setRowData ( start , values ) ; selectionModel.resolveChanges ( ) ; if ( ( ( ( values.size ( ) ) == 1 ) && ( selectionModel.getSelectedList ( ) . isEmpty ( ) ) ) && ( doAutoSelect ) ) { selectionModel.setSelected ( values.get ( 0 ) , true ) ; doAutoSelect = false ; } updateTableControls ( ) ; }
public void getIsGlusterVolumeSnapshotCliScheduleEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotCliScheduleFlag , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
protected void endWithFailure ( ) { updateOldImageAsActive ( SnapshotType.ACTIVE , true ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.undoActionOnSourceAndDestination ( ) ; org.ovirt.engine.core.bll.TryBackToSnapshotCommand.setSucceeded ( true ) ; }
private void override_EntityChanged ( org.ovirt.engine.ui.uicompat.EventArgs e ) { boolean isChangeable = ( ( java.lang.Boolean ) ( getOverride ( ) . getEntity ( ) ) ) ; getVersion ( ) . setIsChangable ( isChangeable ) ; getRetransmissions ( ) . setIsChangable ( isChangeable ) ; getTimeout ( ) . setIsChangable ( isChangeable ) ; getMountOptions ( ) . setIsChangable ( isChangeable ) ; getMountOptions ( ) . setTitle ( ( isChangeable ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . mountOptionsHint ( ) : null ) ) ; }
public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.common.businessentities.LUNs lun : getParameters ( ) . getLunsList ( ) ) { proceedLUNInDb ( lun , getStorageDomain ( ) . getStorageType ( ) , getStorageDomain ( ) . getStorage ( ) ) ; } setStorageDomainStatus ( StorageDomainStatus.Active , null ) ; getCompensationContext ( ) . resetCompensation ( ) ; return null ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel ) ( sender ) ) ; if ( ! ( keepStatusText ) ) { initStatusPanel ( ) ; } keepStatusText = false ; updateNetworks ( model.getNetworkModels ( ) ) ; updateLabels ( model.getNewNetworkLabelModel ( ) , model.getLabelModels ( ) ) ; updateNics ( model.getNicModels ( ) ) ; rendered = true ; }
public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.DbUser object ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; for ( java.lang.String name : object.getGroupNames ( ) ) { if ( ( builder.length ( ) ) > 0 ) { builder.append ( "," ) ; } builder.append ( name ) ; } return builder.toString ( ) ; }
private void updateVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { clearVms ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > externalVms = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { externalVms.add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > ( vm ) ) ; } externalVmModels.setItems ( externalVms ) ; stopProgress ( ) ; }
private java.lang.String GetLocalStoragesFormattedString ( ) { java.lang.String localStorages = "" ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.StorageDomain > Cast ( getSelectedItems ( ) ) ) { if ( ( a.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) { localStorages += ( a.getStorageName ( ) ) + ", " ; } } return localStorages.substring ( 0 , ( ( localStorages.length ( ) ) - 2 ) ) ; }
protected org.ovirt.engine.api.model.Nic deprecatedPopulate ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( httpHeaders , uriInfo ) ; addReportedDevices ( model , entity ) ; if ( details.contains ( "statistics" ) ) { addStatistics ( model , entity ) ; } return model ; }
public void testNotEnoughForMultipleDiskAndDomainsSecondDomainFails ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > imagesDisks = org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.mockMultipleSourceImagesForDomain ( 4 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.IMAGE_ACTUAL_SIZE_GB ) ; imagesDisks.addAll ( org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.mockMultipleSourceImagesForDomain ( 4 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID2 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.IMAGE_ACTUAL_SIZE_GB ) ) ; org.mockito.Mockito.doReturn ( imagesDisks ) . when ( cmd ) . getSourceImages ( ) ; mockStorageDomainDAOGetForStoragePool ( 22 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID ) ; mockStorageDomainDAOGetForStoragePool ( 10 , org.ovirt.engine.core.bll.RemoveSnapshotCommandTest.STORAGE_DOMAIN_ID2 ) ; org.junit.Assert.assertFalse ( "Validation should fail. Second domain should not have enough free space for request." , cmd.validateStorageDomains ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies ( getVm ( ) . getTotalMemorySizeInBytes ( ) , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance ( ) . findStorageDomainForMemory ( getParameters ( ) . getStoragePoolId ( ) , memoryDisksList , getVmDisksDummies ( ) ) ; disksList.addAll ( memoryDisksList ) ; return storageDomain ; }
private void updateVmIconDefaultsTable ( ) { vmIconDefaultDao.removeAll ( ) ; for ( java.util.Map.Entry < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > entry : osIdToIconIdMap.entrySet ( ) ) { final org.ovirt.engine.core.common.businessentities.VmIconDefault osDefautlIconIds = new org.ovirt.engine.core.common.businessentities.VmIconDefault ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , entry.getKey ( ) , entry.getValue ( ) . getSmall ( ) , entry.getValue ( ) . getLarge ( ) ) ; vmIconDefaultDao.save ( osDefautlIconIds ) ; } }
public void validateSufficientSpaceOnDestinationDomains ( ) { setupForStorageTests ( ) ; command.ensureDestinationImageMap ( ) ; org.junit.Assert.assertTrue ( command.checkDestDomains ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsWithinThresholds ( ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsHaveSpaceForNewDisks ( org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public org.ovirt.engine.core.dal.VdcBllMessages validate ( org.ovirt.engine.core.common.businessentities.VDS vds , java.lang.StringBuilder sb , boolean isMigrate ) { java.lang.Integer cores = org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores ( vds ) ; if ( ( cores != null ) && ( ( getVm ( ) . getNumOfCpus ( ) ) > cores ) ) { sb.append ( "has less cores(" ) . append ( cores ) . append ( ") than " ) . append ( getVm ( ) . getNumOfCpus ( ) ) ; return org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_CPUS ; } return null ; }
public org.ovirt.engine.core.bll.ValidationResult bootProtocolSetForRoleNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration ( ) ; boolean failWhen = ( isRoleNetwork ( ) ) && ( ( ( ipConfiguration == null ) || ( ! ( ipConfiguration.hasPrimaryAddressSet ( ) ) ) ) || ( ( ipConfiguration.getPrimaryAddress ( ) . getBootProtocol ( ) ) == ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE ) ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_ACTION_TYPE_FAILED_ROLE_NETWORK_HAS_NO_BOOT_PROTOCOL_ENTITY , getNetwork ( ) . getName ( ) ) ) . when ( failWhen ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo ) ) { return false ; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo option = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo ) ( obj ) ) ; return ( java.util.Objects.equals ( option.getKey ( ) , key ) ) && ( java.util.Objects.equals ( option.getDefaultValue ( ) , defaultValue ) ) ; }
public void testMissingParameterAlteratives ( ) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setDescription ( "incomplete" ) ; try { org.ovirt.engine.api.common.util.CompletenessAssertor.validateParameters ( vm , "status|host|name" ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException on incomplete model" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Vm" , "status|host|name" ) ; } }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
protected void verify ( org.ovirt.engine.api.model.Application model , org.ovirt.engine.api.model.Application transform ) { org.junit.Assert.assertNotNull ( transform ) ; org.junit.Assert.assertNotNull ( transform.getId ( ) ) ; org.junit.Assert.assertNotNull ( transform.getName ( ) ) ; org.junit.Assert.assertEquals ( model.getName ( ) , transform.getName ( ) ) ; org.junit.Assert.assertEquals ( model.getId ( ) , transform.getId ( ) ) ; }
public boolean isMemoryHotUnplugSupported ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( vm == null ) { return false ; } return isMemoryHotUnplugSupportedByArchitecture ( vm.getClusterArch ( ) , vm.getCompatibilityVersion ( ) ) ; }
public boolean validateVmProperties ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < java.lang.String > messages ) { java.util.List < org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.ValidationError > validationErrors = getVmPropertiesUtils ( ) . validateVMProperties ( vm.getVdsGroupCompatibilityVersion ( ) , vm.getStaticData ( ) ) ; if ( ! ( validationErrors.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.VmHandler.handleCustomPropertiesError ( validationErrors , messages ) ; return false ; } return true ; }
protected java.util.List < java.lang.String > listFiles ( ) { org.ovirt.engine.core.common.queries.GetAllIsoImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetAllIsoImagesListParameters ( asGuid ( storageDomainId ) ) ; queryParams.setForceRefresh ( true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > files = getBackendCollection ( org.ovirt.engine.core.common.businessentities.RepoFileMetaData.class , VdcQueryType.GetAllImagesList , queryParams ) ; java.util.List < java.lang.String > fileNames = new java.util.LinkedList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.RepoFileMetaData file : files ) { fileNames.add ( file.getRepoFileName ( ) ) ; } return fileNames ; }
private org.ovirt.engine.api.model.Networks mapCollection ( java.util.List < org.ovirt.engine.api.model.Network > entities ) { org.ovirt.engine.api.model.Networks collection = new org.ovirt.engine.api.model.Networks ( ) ; for ( org.ovirt.engine.api.model.Network entity : entities ) { collection.getNetworks ( ) . add ( addLinks ( map ( entity ) ) ) ; } return collection ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Disk object ) { setEnumTitle ( object.getVmEntityType ( ) ) ; if ( ( object.getVmEntityType ( ) ) == null ) { return null ; } return object.getVmEntityType ( ) . isVmType ( ) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.vmsImage ( ) : object.getVmEntityType ( ) . isTemplateType ( ) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.templatesImage ( ) : null ; }
public void testGetPeers ( ) throws javax.naming.AuthenticationException { org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP.put ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.FINGER_PRINT1 ) ; org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP.put ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME2 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.FINGER_PRINT2 ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP ) . when ( glusterUtil ) . getFingerprints ( org.mockito.Matchers.any ( java.util.Set.class ) ) ; java.util.Set < java.lang.String > peers = glusterUtil.getPeers ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.USER , org.ovirt.engine.core.bll.utils.GlusterUtilTest.PASSWORD ) ; org.junit.Assert.assertNotNull ( peers ) ; org.junit.Assert.assertTrue ( peers.contains ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 ) ) ; org.junit.Assert.assertTrue ( peers.contains ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME2 ) ) ; }
public void testFindMappingEntry ( ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ( ) ; vnic.setNetworkName ( org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.NETWORK_NAME ) ; vnic.setVnicProfileName ( org.ovirt.engine.core.bll.exportimport.MatchUserMappingToOvfVnicTest.VNIC_PROFILE1_NAME ) ; org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ctx = new org.ovirt.engine.core.bll.exportimport.vnics.MapVnicsContext ( ) ; ctx.setUserMappings ( externalVnicProfileMappings ) ; ctx.setOvfVnics ( java.util.Collections.singletonList ( vnic ) ) ; underTest.handle ( ctx ) ; org.hamcrest.MatcherAssert.assertThat ( ctx.getMatched ( ) . get ( vnic ) , org.hamcrest.Matchers.sameInstance ( externalVnicProfileMapping1 ) ) ; }
private void assertCorrectSlaveCountInValidBondsWhenInsufficientBonds ( int numberOfSlaves ) { java.lang.String bondName = "bondName" ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( EngineMessage.NETWORK_BONDS_INVALID_SLAVE_COUNT , bondName ) ) ; assertCorrectSlaveCountInValidBonds ( numberOfSlaves , java.lang.String.format ( "bonded interface with only %1$d slaves is not valid bond" , numberOfSlaves ) , matcher , bondName ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterByServiceList ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , supportsVirtService , supportsGlusterService ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; }
private org.ovirt.engine.api.model.GlusterBrick populateAdvancedDetails ( org.ovirt.engine.api.model.GlusterBrick model , org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.class , VdcQueryType.GetGlusterVolumeById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( entity.getVolumeId ( ) ) , null , true ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails detailsEntity = getEntity ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails.class , VdcQueryType.GetGlusterVolumeAdvancedDetails , new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( volumeEntity.getClusterId ( ) , volumeEntity.getName ( ) , entity.getQualifiedName ( ) , true ) , null , true ) ; model = getMapper ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails.class , org.ovirt.engine.api.model.GlusterBrick.class ) . map ( detailsEntity , model ) ; return model ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean isAttach = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ; createDiskPanel.setVisible ( ( ! isAttach ) ) ; attachDiskPanel.setVisible ( isAttach ) ; if ( ( ! isAttach ) && ( ! ( isNewLunDiskEnabled ) ) ) { disk.getDiskStorageType ( ) . setEntity ( DiskStorageType.IMAGE ) ; } revealDiskPanel ( disk ) ; }
private static void initClusterSeverities ( ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_ADD_VDS_GROUP , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_ADD_VDS_GROUP_FAILED , AuditLogSeverity.ERROR ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_UPDATE_VDS_GROUP , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_UPDATE_VDS_GROUP_FAILED , AuditLogSeverity.ERROR ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_REMOVE_VDS_GROUP , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_REMOVE_VDS_GROUP_FAILED , AuditLogSeverity.ERROR ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.SYSTEM_UPDATE_VDS_GROUP , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.USER_UPDATE_VM_CLUSTER_DEFAULT_HOST_CLEARED , AuditLogSeverity.NORMAL ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FROM_TRUSTED_TO_UNTRUSTED , AuditLogSeverity.WARNING ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.severities.put ( AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FROM_UNTRUSTED_TO_TRUSTED , AuditLogSeverity.WARNING ) ; }
private boolean isNicActuallyExistsOrReferencesNewBond ( java.lang.String nicName , org.ovirt.engine.core.compat.Guid nicId ) { return hostSetupNetworksValidatorHelper.isNicActuallyExistsOrReferencesNewBond ( existingInterfacesMap , bondsMap , nicName , nicId ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsForDiskId ( ) { if ( ( listVms ) == null ) { listVms = org.ovirt.engine.core.bll.RemoveDiskCommand.getVmDao ( ) . getVmsListForDisk ( ( ( org.ovirt.engine.core.compat.Guid ) ( org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters ( ) . getDiskId ( ) ) ) , true ) ; } return listVms ; }
protected boolean validateUsbPolicy ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) ; org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy ( vm.getStaticData ( ) ) ; return org.ovirt.engine.core.bll.VmHandler.isUsbPolicyLegal ( vm.getUsbPolicy ( ) , vm.getOs ( ) , getEffectiveCompatibilityVersion ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getReturnValue ( ) . getValidationMessages ( ) ) ; }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage_domains > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.StorageDomainDAOTest.NUMBER_OF_STORAGE_DOMAINS_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.junit.Assert.assertEquals ( result.iterator ( ) . next ( ) , existingDomain ) ; }
public void dump ( org.ovirt.engine.exttool.aaa.AAAServiceImpl module , org.ovirt.engine.api.extensions.ExtMap map , java.lang.String indent ) { if ( map != null ) { org.ovirt.engine.exttool.aaa.AAAServiceImpl.log.info ( "{}--- Begin GroupRecord ---" , indent ) ; org.ovirt.engine.exttool.aaa.AAAServiceImpl.Dump.dumpRecord ( module , map , java.util.Arrays.asList ( Authz.GroupRecord.GROUPS ) , "GroupRecord" , indent ) ; for ( org.ovirt.engine.api.extensions.ExtMap group : map.get ( Authz.GroupRecord.GROUPS , java.util.Collections.< org.ovirt.engine.api.extensions.ExtMap > emptyList ( ) ) ) { dump ( module , group , ( indent + " " ) ) ; } org.ovirt.engine.exttool.aaa.AAAServiceImpl.log.info ( "{}--- End GroupRecord ---" , indent ) ; } }
public void testSave ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network_cluster > clustersFromDB = dbFacade.getNetworkClusterDao ( ) . getAllForCluster ( cluster ) ; org.ovirt.engine.core.common.businessentities.network_cluster clusterFromDB = clustersFromDB.get ( 0 ) ; org.junit.Assert.assertNotNull ( clusterFromDB ) ; new_net.setCluster ( clusterFromDB ) ; new_net.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; dao.save ( new_net ) ; org.ovirt.engine.core.common.businessentities.Network result = dao.getByName ( new_net.getname ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( new_net , result ) ; }
private javax.ws.rs.core.Response addSAN ( org.ovirt.engine.api.model.StorageDomain model , org.ovirt.engine.core.common.businessentities.StorageType storageType , org.ovirt.engine.core.common.businessentities.StorageDomainStatic entity , org.ovirt.engine.core.compat.Guid hostId ) { boolean overrideLuns = ( model.getStorage ( ) . isSetOverrideLuns ( ) ) ? model.getStorage ( ) . isOverrideLuns ( ) : false ; return performCreate ( VdcActionType.AddSANStorageDomain , getSanAddParams ( entity , hostId , getLunIds ( model.getStorage ( ) , storageType , hostId ) , overrideLuns ) , ID_RESOLVER ) ; }
private void clearAsyncTasksWithOutVdsmId ( ) { for ( org.ovirt.engine.core.compat.Guid asyncTaskId : getReturnValue ( ) . getTaskPlaceHolderIdList ( ) ) { org.ovirt.engine.core.common.businessentities.AsyncTasks task = org.ovirt.engine.core.bll.CommandBase.getAsyncTaskDao ( ) . get ( asyncTaskId ) ; if ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( task.getVdsmTaskId ( ) ) ) { org.ovirt.engine.core.bll.AsyncTaskManager.failTaskWithoutVdsmId ( task ) ; } } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc isolateVolume ( java.lang.String sdUUID , java.lang.String srcImageID , java.lang.String dstImageID , java.lang.String volumeID ) { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.isolateVolume ( sdUUID , srcImageID , dstImageID , volumeID ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; }
public void getClusterFeaturesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
public void testDoGetExistingFile ( ) throws java.io.IOException , java.net.URISyntaxException , javax.servlet.ServletException { org.mockito.Mockito.when ( mockRequest.getPathInfo ( ) ) . thenReturn ( "/org/ovirt/engine/core/branding/BrandingServletTest.class" ) ; org.mockito.Mockito.when ( mockFile.getAbsolutePath ( ) ) . thenReturn ( this . getClass ( ) . getClassLoader ( ) . getResource ( "." ) . toURI ( ) . getPath ( ) ) ; testServlet.doGet ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockResponse ) . setHeader ( org.mockito.ArgumentMatchers.eq ( "ETag" ) , org.mockito.ArgumentMatchers.anyString ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > pools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool pool = pools.get ( 0 ) ; if ( pool != null ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getStorageDomainList ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool.getId ( ) ) ; } }
public static < TSource > TSource firstOrNull ( java.lang.Iterable < TSource > source , org.ovirt.engine.ui.uicommonweb.Linq.IPredicate < ? super TSource > predicate ) { if ( source != null ) { for ( TSource item : source ) { if ( predicate.match ( item ) ) { return item ; } } } return null ; }
public java.util.List < org.ovirt.api.metamodel.concepts.Constraint > getConstraints ( ) { java.util.List < org.ovirt.api.metamodel.concepts.Constraint > result = new java.util.ArrayList ( constraints ) ; if ( ( base ) != null ) { result.addAll ( base.getConstraints ( ) ) ; } result.sort ( java.util.Comparator.comparing ( Constraint :: getName ) ) ; return result ; }
public void testValidModifiedBondsWhenAllOk ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( "bond1" ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , ValidationResult.VALID , ValidationResult.VALID ) ; }
public void testSave ( ) { dao.save ( dummyPolicy ) ; org.ovirt.engine.core.common.scheduling.ClusterPolicy result = dao.get ( dummyPolicy.getId ( ) , java.util.Collections.emptyMap ( ) ) ; org.junit.Assert.assertTrue ( result.equals ( dummyPolicy ) ) ; dao.remove ( dummyPolicy.getId ( ) ) ; }
private void cpuFlagsNotMissing ( ) { org.mockito.Mockito.doReturn ( null ) . when ( cmd ) . missingServerCpuFlags ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ; }
public org.ovirt.engine.core.common.businessentities.VmDevice addDiskDevice ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid deviceId ) { return addDiskDevice ( vmId , deviceId , true , false , "" , false ) ; }
private void initOsRepository ( ) { OsInfoPreferencesLoader.INSTANCE.init ( java.nio.file.FileSystems.getDefault ( ) . getPath ( org.ovirt.engine.core.utils.EngineLocalConfig.getInstance ( ) . getEtcDir ( ) . getAbsolutePath ( ) , org.ovirt.engine.core.common.config.Config.< java.lang.String > getValue ( ConfigValues.OsRepositoryConfDir ) ) ) ; OsRepositoryImpl.INSTANCE.init ( OsInfoPreferencesLoader.INSTANCE.getPreferences ( ) ) ; org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.utils.OsRepositoryImpl.INSTANCE ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; dbFacade.populateDwhOsInfo ( osRepository.getOsNames ( ) ) ; }
public static void getTemplateListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmTemplatesByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand ) { return org.ovirt.engine.core.bll.tasks.TaskManagerUtil.concreteCreateTask ( taskId , this , asyncTaskCreationInfo , parentCommand ) ; }
private void doTestBadUpdate ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( ActionType.UpdateNetwork , org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters.class , new java.lang.String [ ] { "StoragePoolId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , valid , success ) ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.getModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
protected void verifyModel ( R model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.Assert.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.Assert.assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; org.ovirt.engine.api.restapi.resource.AbstractBackendResourceTest.verifyLinks ( model ) ; }
public void vdsGroupWithVirtGlusterServicesNotAllowed ( ) { createCommandWithVirtGlusterEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 , java.lang.Boolean.TRUE ) ; cpuExists ( ) ; allQueriesForVms ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ; }
public org.ovirt.engine.core.bll.ValidationResult vmDuringInitialization ( org.ovirt.engine.core.common.businessentities.VM vm ) { boolean isVmDuringInit = isVmDuringInitiating ( vm ) ; if ( ( ( vm.isRunning ( ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.NotResponding ) ) ) || isVmDuringInit ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private void executeCallbacks ( boolean success , org.ovirt.engine.ui.uicommonweb.action.UiAction.ActionFlowState flowState , java.util.List < org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback > callbacks , boolean waitForResult ) { java.util.Collections.shuffle ( callbacks ) ; for ( org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback callback : callbacks ) { assertNotAllDone ( flowState ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = new org.ovirt.engine.core.common.action.VdcReturnValueBase ( ) ; result.setValid ( ( waitForResult ? true : success ) ) ; result.setSucceeded ( ( waitForResult ? success : false ) ) ; callback.executed ( new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult ( ACTION_TYPE , null , java.util.Collections.singletonList ( result ) ) ) ; } }
public void successVmInPreviewForAttachedSnapshot ( ) { initializeCommand ( ImageOperation.Move , new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; vmDevice.setSnapshotId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void testFailInterfaceCanUpdateReadOnly ( ) { initializeCommand ( new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( vmId , createDiskImage ( ) ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . updateReadOnlyRequested ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR ) ) . when ( diskValidator ) . isReadOnlyPropertyCompatibleWithInterface ( ) ; org.junit.Assert.assertFalse ( command.validateCanUpdateReadOnly ( diskValidator ) ) ; }
private void updateVolumeType ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDiskModel ( ) . getStorageDomain ( ) . getSelectedItem ( ) ; org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = getDiskModel ( ) . getVolumeType ( ) . getSelectedItem ( ) ; if ( storageDomain != null ) { getVolumeFormat ( ) . setItems ( new java.util.ArrayList ( java.util.Collections.singletonList ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getDiskVolumeFormat ( volumeType , storageDomain.getStorageType ( ) ) ) ) ) ; } }
private java.util.List < T > visibleItemsAsList ( ) { java.util.List < T > result = new java.util.ArrayList < > ( ) ; dataDisplay.getVisibleItems ( ) . iterator ( ) . forEachRemaining ( result :: add ) ; return result ; }
public void setSpmPriorityValue ( java.lang.Integer spmPriorityValue ) { if ( ( ( this . spmPriorityValue ) == null ) || ( ! ( this . spmPriorityValue.equals ( spmPriorityValue ) ) ) ) { this . spmPriorityValue = spmPriorityValue ; if ( ( ( spmMaxPriorityValue ) == null ) || ( ( spmDefaultPriorityValue ) == null ) ) { retrieveMaxSpmPriority ( ) ; } else { updateSpmPriority ( ) ; } } }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper ( org.ovirt.engine.core.common.action.SetupNetworksParameters params ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ; org.mockito.Mockito.when ( vds.getId ( ) ) . thenReturn ( Guid.Empty ) ; org.mockito.Mockito.when ( vds.getVdsGroupCompatibilityVersion ( ) ) . thenReturn ( Version.v3_3 ) ; return createHelper ( params , vds ) ; }
private org.ovirt.engine.core.common.action.ActionParametersBase createUpgradeParameters ( org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters ) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters upgradeParams = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters ( parameters.getVdsId ( ) ) ; upgradeParams.setSessionId ( parameters.getSessionId ( ) ) ; upgradeParams.setCorrelationId ( parameters.getCorrelationId ( ) ) ; upgradeParams.setInitialStatus ( parameters.getInitialStatus ( ) ) ; upgradeParams.setoVirtIsoFile ( parameters.getoVirtIsoFile ( ) ) ; upgradeParams.setParentCommand ( ActionType.UpgradeHost ) ; upgradeParams.setParentParameters ( parameters ) ; upgradeParams.setReboot ( parameters.isReboot ( ) ) ; return upgradeParams ; }
private org.ovirt.engine.core.common.businessentities.storage.CinderDisk cloneDiskForSnapshot ( ) { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDependentVolume = getDisk ( ) ; initCinderDependentVolume ( cinderDependentVolume ) ; java.lang.String snapshotId = org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getCinderBroker ( ) . createSnapshot ( cinderDependentVolume , org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getParameters ( ) . getDescription ( ) ) ; org.ovirt.engine.core.compat.Guid destinationImageId = org.ovirt.engine.core.compat.Guid.createGuidFromString ( snapshotId ) ; org.ovirt.engine.core.bll.storage.CreateCinderSnapshotCommand.getParameters ( ) . setDestinationImageId ( destinationImageId ) ; cinderDependentVolume.setImageId ( destinationImageId ) ; return cinderDependentVolume ; }
public void mixedClusterServicesNotSupported ( ) { mockConfigRule.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , false ) ; org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster.supportsVirtService ( ) ) . thenReturn ( true ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert.assertThat ( validator.mixedClusterServicesSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ) ; }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public java.lang.String buildMetadataDictionaryForVm ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > metaDictionary , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > allVmImages ) { java.lang.String vmMeta = generateVmMetadata ( vm , allVmImages ) ; metaDictionary.put ( vm.getId ( ) , new org.ovirt.engine.core.compat.KeyValuePairCompat ( vmMeta , vm.getDiskMap ( ) . values ( ) . stream ( ) . map ( BaseDisk :: getId ) . collect ( java.util.stream.Collectors.toList ( ) ) ) ) ; return vmMeta ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.Boolean entity = ( ( java.lang.Boolean ) ( getAllowOverbooking ( ) . getEntity ( ) ) ) ; if ( entity ) { getOptimizeForUtilization ( ) . setEntity ( true ) ; } getOptimizeForSpeed ( ) . setIsChangable ( ( ! entity ) ) ; }
public static void GetDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , aQuery ) ; }
public void moveShareableDiskToGlusterDomain ( ) { initializeCommand ( ImageOperation.Move ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( true ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS.toString ( ) ) ) ; }
public static void getAllDataCenterNetworks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( storagePoolId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworksByDataCenterId , params , aQuery ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
private java.util.Map < java.lang.String , java.lang.Object > buildResponse ( org.ovirt.engine.core.sso.utils.SSOSession ssoSession , java.lang.String password ) { java.util.Map < java.lang.String , java.lang.Object > payload = new java.util.HashMap < > ( ) ; payload.put ( SSOConstants.JSON_ACTIVE , ssoSession.isActive ( ) ) ; payload.put ( SSOConstants.JSON_TOKEN_TYPE , "bearer" ) ; payload.put ( SSOConstants.JSON_CLIENT_ID , ssoSession.getClientId ( ) ) ; payload.put ( SSOConstants.JSON_USER_ID , java.lang.String.format ( "%s@%s" , ssoSession.getUserId ( ) , ssoSession.getProfile ( ) ) ) ; payload.put ( SSOConstants.JSON_SCOPE , ( org.apache.commons.lang.StringUtils.isEmpty ( ssoSession.getScope ( ) ) ? "" : ssoSession.getScope ( ) ) ) ; payload.put ( SSOConstants.JSON_EXPIRES_IN , ssoSession.getValidTo ( ) ) ; java.util.Map < java.lang.String , java.lang.Object > ovirt = new java.util.HashMap < > ( ) ; ovirt.put ( "version" , SSOConstants.OVIRT_SSO_VERSION ) ; ovirt.put ( "principal_id" , ssoSession.getPrincipalRecord ( ) . get ( Authz.PrincipalRecord.ID ) ) ; ovirt.put ( "email" , ssoSession.getPrincipalRecord ( ) . get ( Authz.PrincipalRecord.EMAIL ) ) ; ovirt.put ( "group_ids" , ssoSession.getPrincipalRecord ( ) . < java.util.List > get ( Authz.PrincipalRecord.GROUPS , java.util.Collections.< org.ovirt.engine.api.extensions.ExtMap > emptyList ( ) ) ) ; if ( password != null ) { ovirt.put ( "password" , password ) ; } ovirt.put ( "capability_credentials_change" , ssoContext.getSsoProfilesSupportingPasswdChange ( ) . contains ( ssoSession.getProfile ( ) ) ) ; payload.put ( "ovirt" , ovirt ) ; return payload ; }
private void AddDaysOfWeek ( ) { java.lang.String day ; int dayIndex = 3 ; for ( int i = - 2 ; i > ( - 8 ) ; i -- ) { day = org.ovirt.engine.core.compat.DateTime.getNow ( ) . addDays ( i ) . getDayOfWeek ( ) . toString ( ) ; mEnumValues.put ( day , dayIndex ) ; mVerbs.add ( day ) ; dayIndex ++ ; } }
public void setActiveVms ( java.lang.Integer value ) { if ( ( ( activeVms ) == null ) && ( value == null ) ) { return ; } if ( ( ( activeVms ) == null ) || ( ! ( activeVms.equals ( value ) ) ) ) { activeVms = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "ActiveVms" ) ) ; } }
public void testGetDataAndSetDataWithFullSession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert.assertTrue ( "Set should fail with an empty session" , container.setData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertEquals ( "Get should return null with an empty session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.getData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
private void addAddress ( java.util.Map < java.lang.String , java.lang.Object > map , java.lang.String address ) { if ( org.apache.commons.lang.StringUtils.isNotBlank ( address ) ) { map.put ( VdsProperties.Address , org.ovirt.engine.core.utils.StringMapUtils.string2Map ( org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters ( ) . getVmDevice ( ) . getAddress ( ) ) ) ; } }
protected org.ovirt.engine.core.vdsbroker.VmAnalyzer getVmAnalyzer ( org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.VM , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > pair ) { return new org.ovirt.engine.core.vdsbroker.VmAnalyzer ( pair.getFirst ( ) , pair.getSecond ( ) , this , auditLogDirector ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.customPropertiesList = ( ( java.util.Map < org.ovirt.engine.core.compat.Version , java.util.Map < java.lang.String , java.lang.String > > ) ( returnValue ) ) ; }
public org.ovirt.engine.api.model.Group get ( ) { java.lang.String directoryId ; try { directoryId = org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.decode ( id ) ; } catch ( java.lang.IllegalArgumentException exception ) { throw new javax.ws.rs.WebApplicationException ( Response.Status.NOT_FOUND ) ; } java.lang.String directory = parent.getDirectory ( ) . getName ( ) ; org.ovirt.engine.core.common.queries.DirectoryIdQueryParameters parameters = new org.ovirt.engine.core.common.queries.DirectoryIdQueryParameters ( directory , directoryId ) ; return performGet ( VdcQueryType.GetDirectoryGroupById , parameters , org.ovirt.engine.api.model.BaseResource.class ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog ( ) ; auditLogDao.remove ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters ( ) . getAuditLogId ( ) ) ; setAuditLogDetails ( auditLog ) ; auditLog.setUserId ( Guid.Empty ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logableToClear = createAuditLogableImpl ( auditLog ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator ( logableToClear , auditLog.getLogType ( ) ) ; eventFloodRegulator.evict ( ) ; org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded ( true ) ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { org.ovirt.engine.core.common.businessentities.AuditLog event = getAuditLog ( ) ; if ( AuditLogSeverity.ALERT.equals ( event.getSeverity ( ) ) ) { return java.util.Collections.singletonList ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.compat.Guid.SYSTEM , org.ovirt.engine.core.common.VdcObjectType.System , org.ovirt.engine.core.common.businessentities.ActionGroup.AUDIT_LOG_MANAGEMENT ) ) ; } return getPermissionList ( event ) ; }
public java.lang.String nextString ( int length , char [ ] chars ) { java.lang.Character [ ] characters = org.apache.commons.lang.ArrayUtils.toObject ( chars ) ; java.lang.StringBuilder sb = new java.lang.StringBuilder ( length ) ; for ( int i = 0 ; i < length ; ++ i ) { sb.append ( pickRandom ( characters ) ) ; } return sb.toString ( ) ; }
protected void initConnectionList ( boolean includeInactiveDomains ) { java.util.Set < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > statuses ; statuses = ( includeInactiveDomains ) ? java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown , StorageDomainStatus.Inactive ) : java.util.EnumSet.of ( StorageDomainStatus.Active , StorageDomainStatus.Unknown ) ; connections = storageServerConnectionDao.getStorageConnectionsByStorageTypeAndStatus ( org.ovirt.engine.core.bll.storage.pool.ConnectHostToStoragePoolServerCommandBase.getStoragePool ( ) . getId ( ) , null , statuses ) ; updateConnectionsTypeMap ( ) ; updateConnectionMapForFiberChannel ( statuses ) ; }
public java.util.Map < java.lang.String , java.lang.String > getProperties ( ) { return values ; }
private java.lang.String findValidMigrationIpAddress ( org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork , java.util.function.Function < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , java.lang.String > ipAddressGetter ) { final java.lang.String migrationSourceIpAddress = getMigrationNetworkAddress ( org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getId ( ) , migrationNetwork.getName ( ) , ipAddressGetter ) ; if ( org.apache.commons.lang.StringUtils.isNotEmpty ( migrationSourceIpAddress ) ) { final java.lang.String migrationDestinationIpAddress = getMigrationNetworkAddress ( getDestinationVds ( ) . getId ( ) , migrationNetwork.getName ( ) , ipAddressGetter ) ; if ( org.apache.commons.lang.StringUtils.isNotEmpty ( migrationDestinationIpAddress ) ) { return migrationDestinationIpAddress ; } } return null ; }
private void removeMemoryFromActiveSnapshot ( ) { java.lang.String memory = org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot ( ) . getMemoryVolume ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( memory ) ) { return ; } org.ovirt.engine.core.bll.RunVmCommand.getSnapshotDao ( ) . removeMemoryFromActiveSnapshot ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ; if ( ( org.ovirt.engine.core.bll.RunVmCommand.getSnapshotDao ( ) . getNumOfSnapshotsByMemory ( memory ) ) == 0 ) { removeMemoryVolumes ( memory , org.ovirt.engine.core.bll.RunVmCommand.getActionType ( ) , true ) ; } }
protected void verifyModel ( org.ovirt.engine.api.model.Step model , int index ) { org.junit.Assert.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.Assert.assertEquals ( DESCRIPTIONS [ index ] , model.getDescription ( ) ) ; org.junit.Assert.assertTrue ( model.isExternal ( ) ) ; org.junit.Assert.assertNotNull ( model.getJob ( ) ) ; verifyLinks ( model ) ; }
private static boolean validateSpaceRequirements ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator ( storageDomain ) ; return ( storageDomainValidator.isDomainWithinThresholds ( ) . isValid ( ) ) && ( storageDomainValidator.hasSpaceForClonedDisks ( disksList ) . isValid ( ) ) ; }
public void testReportConfigurationsOnHostWhenSwitchTypeIsOutOfSync ( ) { cluster.setRequiredSwitchTypeForCluster ( SwitchType.OVS ) ; org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations reportedConfigurations = createTestedInstance ( ) . reportConfigurationsOnHost ( ) ; org.hamcrest.MatcherAssert.assertThat ( reportedConfigurations.isNetworkInSync ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration > reportedConfigurationList = reportedConfigurations.getReportedConfigurationList ( ) ; org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration expectedReportedConfiguration = new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration ( org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.SWITCH_TYPE , org.ovirt.engine.core.common.network.SwitchType.LEGACY , org.ovirt.engine.core.common.network.SwitchType.OVS , false ) ; org.hamcrest.MatcherAssert.assertThat ( reportedConfigurationList.contains ( expectedReportedConfiguration ) , org.hamcrest.CoreMatchers.is ( true ) ) ; }
private java.util.Set < org.ovirt.engine.core.common.businessentities.VDS > fetchRemoteServers ( ) { java.util.Set < org.ovirt.engine.core.common.businessentities.VDS > remoteServers = new java.util.HashSet < > ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > slaveBricks = slaveVolume.getBricks ( ) ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity currentBrick : slaveBricks ) { remoteServers.add ( vdsDao.get ( currentBrick.getServerId ( ) ) ) ; } return remoteServers ; }
public org.ovirt.engine.core.bll.ValidationResult hotUpdateDoneWithInternalNetwork ( org.ovirt.engine.core.common.businessentities.network.Network oldNetwork , org.ovirt.engine.core.common.businessentities.network.Network newNetwork ) { return ( ( oldNetwork == null ) || ( ! ( oldNetwork.isExternal ( ) ) ) ) && ( ( newNetwork == null ) || ( ! ( newNetwork.isExternal ( ) ) ) ) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_REWIRED ) ; }
private static void failureEventHandler ( java.lang.String description , java.util.ArrayList < java.lang.String > errorMessages ) { java.util.ArrayList < org.ovirt.engine.ui.frontend.Message > messages = new java.util.ArrayList < org.ovirt.engine.ui.frontend.Message > ( ) ; for ( java.lang.String errorMessage : errorMessages ) { messages.add ( new org.ovirt.engine.ui.frontend.Message ( description , errorMessage ) ) ; } org.ovirt.engine.ui.frontend.Frontend.frontendFailureEvent.raise ( org.ovirt.engine.ui.frontend.Frontend.class , new org.ovirt.engine.ui.frontend.FrontendFailureEventArgs ( messages ) ) ; }
public void testSetDetectEmulatedMachine ( ) { boolean preUpdate = existingCluster.isDetectEmulatedMachine ( ) ; boolean updateValue = false ; org.junit.Assert.assertNotEquals ( updateValue , preUpdate ) ; dao.setEmulatedMachine ( existingCluster.getId ( ) , existingCluster.getEmulatedMachine ( ) , updateValue ) ; org.junit.Assert.assertEquals ( updateValue , dao.get ( existingCluster.getId ( ) ) . isDetectEmulatedMachine ( ) ) ; }
public void testAllDomainsExistAndActive ( ) { setUpGeneralValidations ( ) ; setUpDiskValidations ( ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( cmd ) . getDisksList ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ) . when ( multipleStorageDomainsValidator ) . allDomainsExistAndActive ( ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.name ( ) ) ) ; }
public void initTable ( ) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > ( ) { @ java.lang.Override public java.lang.String getValue ( java.lang.String appName ) { return appName ; } } ; getTable ( ) . addColumn ( appNameColumn , org.ovirt.engine.ui.common.widget.uicommon.vm.VmAppListModelTable.constants.installedApp ( ) ) ; }
public org.ovirt.api.metamodel.tool.JavaClassName getInterfaceName ( org.ovirt.api.metamodel.concepts.Service service ) { org.ovirt.api.metamodel.tool.JavaClassName name = new org.ovirt.api.metamodel.tool.JavaClassName ( ) ; java.lang.String packageName = javaPackages.getJaxrsPackageName ( service.getModule ( ) ) ; java.lang.String simpleName = ( javaNames.getJavaClassStyleName ( service.getName ( ) ) ) + ( org.ovirt.api.metamodel.tool.JaxrsNames.RESOURCE_SUFFIX ) ; name.setPackageName ( packageName ) ; name.setSimpleName ( simpleName ) ; return name ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterSnapshotScheduleOverride ( boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotScheduleOverride" ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void testIsFileDomain ( ) { org.junit.Assert.assertFalse ( StorageType.FCP.isFileDomain ( ) ) ; org.junit.Assert.assertFalse ( StorageType.ISCSI.isFileDomain ( ) ) ; org.junit.Assert.assertTrue ( StorageType.NFS.isFileDomain ( ) ) ; org.junit.Assert.assertTrue ( StorageType.LOCALFS.isFileDomain ( ) ) ; org.junit.Assert.assertTrue ( StorageType.POSIXFS.isFileDomain ( ) ) ; org.junit.Assert.assertTrue ( StorageType.GLUSTERFS.isFileDomain ( ) ) ; org.junit.Assert.assertTrue ( StorageType.GLANCE.isFileDomain ( ) ) ; org.junit.Assert.assertFalse ( StorageType.CINDER.isFileDomain ( ) ) ; }
public void getExternalProviderHostGroupList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalHostGroup > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostGroupsFromExternalProvider , params , aQuery ) ; }
private boolean selectProxyHost ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > activeHosts = org.ovirt.engine.core.bll.ConvertVmCommand.getVdsDao ( ) . getAllForStoragePoolAndStatus ( org.ovirt.engine.core.bll.ConvertVmCommand.getStoragePoolId ( ) , VDSStatus.Up ) ; if ( activeHosts.isEmpty ( ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHosts.get ( 0 ) ; setVds ( activeHost ) ; org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . setProxyHostId ( activeHost.getId ( ) ) ; return true ; }
public void setUsePatternFly ( final boolean use ) { super . setUsePatternFly ( use ) ; if ( use ) { getCheckboxWidgetLabel ( ) . getStyle ( ) . setPaddingLeft ( 10 , Unit.PX ) ; getCheckboxWidgetLabel ( ) . getStyle ( ) . setPaddingRight ( 10 , Unit.PX ) ; getCheckboxWidgetLabel ( ) . getStyle ( ) . setPosition ( Position.RELATIVE ) ; noPaddingNoFixes ( ) ; org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.removeWrapperStyleName ( org.ovirt.engine.ui.common.widget.editor.BaseEntityModelCheckboxEditor.CBE_RIGHT_OF_LABEL_PFLY_FIX ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateWatchdogItems ( ( ( java.util.HashSet < org.ovirt.engine.core.common.businessentities.VmWatchdogType > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }
private java.util.Set < java.lang.String > getMemoryVolumesToBeImported ( ) { java.util.Set < java.lang.String > memories = new java.util.HashSet < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getVm ( ) . getSnapshots ( ) ) { memories.add ( snapshot.getMemoryVolume ( ) ) ; } memories.remove ( StringUtils.EMPTY ) ; return memories ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setId ( networkId ) ; return network ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { super . onFailed ( cmdId , childCmdIds ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( getDiskId ( ) , ImageStatus.ILLEGAL ) ; org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommandCallback.getCommand ( ) . getParameters ( ) . setTaskGroupSuccess ( false ) ; org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus ( org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommandCallback.getCommand ( ) . getParameters ( ) . getImageId ( ) , ImageStatus.OK ) ; org.ovirt.engine.core.bll.storage.CloneSingleCinderDiskCommandCallback.getCommand ( ) . endAction ( ) ; }
public void isVirtioScsiEnabledDefaultedToTrue ( ) { cmd.getParameters ( ) . getVm ( ) . setClusterId ( cluster.getId ( ) ) ; cmd.initEffectiveCompatibilityVersion ( ) ; org.mockito.Mockito.when ( osRepository.getDiskInterfaces ( org.mockito.ArgumentMatchers.anyInt ( ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ) . thenReturn ( new java.util.ArrayList < > ( java.util.Collections.singletonList ( "VirtIO_SCSI" ) ) ) ; org.junit.Assert.assertTrue ( "isVirtioScsiEnabled hasn't been defaulted to true on cluster >= 3.3." , cmd.isVirtioScsiEnabled ( ) ) ; }
public static void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
protected void executeCommand ( ) { setSucceeded ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.DisconnectStorageServer , new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters ( org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getParameters ( ) . getVdsId ( ) , org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getParameters ( ) . getStorageServerConnection ( ) . getstorage_type ( ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageServerConnections > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections [ ] { org.ovirt.engine.core.bll.storage.DisconnectStorageServerConnectionCommand.getConnection ( ) } ) ) ) ) . getSucceeded ( ) ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo , org.ovirt.engine.core.common.action.VdcActionType parentCommand , java.lang.String description , org.ovirt.engine.core.common.VdcObjectType entityType , org.ovirt.engine.core.compat.Guid ... entityIds ) { return createTask ( taskId , asyncTaskCreationInfo , parentCommand , description , createEntitiesMapForSingleEntityType ( entityType , entityIds ) ) ; }
public boolean isStartupTimeoutPassed ( java.util.List < java.lang.String > messages ) { java.util.Date waitTo = getBackend ( ) . getStartedAt ( ) . addSeconds ( ( ( java.lang.Integer ) ( org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.DisableFenceAtStartupInSec ) ) ) ) ; java.util.Date now = new java.util.Date ( ) ; if ( ! ( ( waitTo.before ( now ) ) || ( waitTo.equals ( now ) ) ) ) { messages.add ( VdcBllMessages.VDS_FENCE_DISABLED_AT_SYSTEM_STARTUP_INTERVAL.name ( ) ) ; return false ; } else { return true ; } }
protected boolean validateVdsCluster ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupDAO ( ) . get ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId ( ) ) ; return vdsGroup == null ? failCanDoAction ( VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID ) : ( vdsGroup.getArchitecture ( ) ) != ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVm ( ) . getClusterArch ( ) ) ? failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER ) : true ; }
private void onShutdown ( ) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getWindow ( ) ) ) ; onPowerAction ( VdcActionType.ShutdownVm , new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.PowerActionParametersFactory < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase createActionParameters ( org.ovirt.engine.core.common.businessentities.VM vm ) { return new org.ovirt.engine.core.common.action.ShutdownVmParameters ( vm.getId ( ) , true , model.getReason ( ) . getEntity ( ) ) ; } } ) ; }
public void testParseInvalidOption ( ) { java.util.List < org.ovirt.engine.api.model.PowerManagement > ret = org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( "foo:one=1,two=2,three" , "one=bool,two=int,three=bool" ) ; assertNotNull ( ret ) ; assertEquals ( 1 , ret.size ( ) ) ; verifyResult ( ret.get ( 0 ) , "foo" , "one" , "bool" , "1" , "two" , "int" , "2" ) ; }
private boolean verifyImage ( org.ovirt.engine.core.compat.Guid transferingVdsId ) { org.ovirt.engine.core.common.vdscommands.ImageActionsVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ImageActionsVDSCommandParameters ( transferingVdsId , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId ( ) , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getDiskImage ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getDiskImage ( ) . getImageId ( ) ) ; try { backend.getResourceManager ( ) . runVdsCommand ( VDSCommandType.VerifyUntrustedVolume , parameters ) ; } catch ( java.lang.RuntimeException e ) { log.error ( "Failed to verify transferred image: {}" , e ) ; return false ; } return true ; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup createNewVdsGroup ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; group.setCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 ) ; group.setName ( "Default" ) ; return group ; }
private boolean refreshHost ( ) { org.ovirt.engine.core.common.action.VdsActionParameters vdsActionParams = new org.ovirt.engine.core.common.action.VdsActionParameters ( getVdsId ( ) ) ; return runInternalAction ( VdcActionType.RefreshHost , vdsActionParams ) . getSucceeded ( ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult storageDomainNotOperational ( org.ovirt.engine.core.compat.Guid storageDomainId , org.ovirt.engine.core.compat.Guid storagePoolId ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( storageDomainId , storagePoolId ) ; parameters.setIsInternal ( true ) ; parameters.setInactive ( true ) ; boolean isSucceeded = backend.runInternalAction ( VdcActionType.DeactivateStorageDomain , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) . getSucceeded ( ) ; return new org.ovirt.engine.core.common.eventqueue.EventResult ( isSucceeded , org.ovirt.engine.core.common.eventqueue.EventType.DOMAINNOTOPERATIONAL ) ; }
public synchronized void StartPollingTask ( org.ovirt.engine.core.compat.Guid taskID ) { if ( _tasks.containsKey ( taskID ) ) { _tasks.get ( taskID ) . StartPollingTask ( ) ; } }
protected void copyVmDevices ( ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices ( vmDevicesSourceId , org.ovirt.engine.core.bll.AddVmCommand.getVmId ( ) , getSrcDeviceIdToTargetDeviceIdMapping ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isSoundDeviceEnabled ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . isConsoleEnabled ( ) , isVirtioScsiEnabled ( ) , isBalloonEnabled ( ) , false ) ; if ( ( org.ovirt.engine.core.bll.AddVmCommand.getInstanceTypeId ( ) ) != null ) { copyDiskDevicesFromTemplate ( ) ; } }
public static java.util.stream.Stream < org.junit.jupiter.params.provider.Arguments > printFlowAsDigraph ( ) { return java.util.stream.Stream.of ( org.junit.jupiter.params.provider.Arguments.of ( "Map single vnic" , org.ovirt.engine.core.bll.exportimport.vnics.FlowDigraphTest.getMapVnicFlow ( ) , "19" ) , org.junit.jupiter.params.provider.Arguments.of ( "Map all vnics" , org.ovirt.engine.core.bll.exportimport.vnics.FlowDigraphTest.getMapVnicsCollectionFlow ( ) , "11" ) ) ; }
public static void getProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
public void updateGlusterServerHook ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook ) { getCallsHandler ( ) . executeModification ( "UpdateGlusterServerHook" , getCustomMapSqlParameterSource ( ) . addValue ( "hook_id" , serverHook.getHookId ( ) ) . addValue ( "server_id" , serverHook.getServerId ( ) ) . addValue ( "hook_status" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( serverHook.getStatus ( ) ) ) . addValue ( "content_type" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( serverHook.getContentType ( ) ) ) . addValue ( "checksum" , serverHook.getChecksum ( ) ) ) ; }
public void initialize ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem ) { super . initialize ( systemTreeSelectedItem ) ; getModel ( ) . getVmType ( ) . setIsChangeable ( true ) ; getModel ( ) . getPoolStateful ( ) . setIsChangeable ( true ) ; templateValidate ( ) ; instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager ( getModel ( ) ) ; getModel ( ) . getVmInitModel ( ) . init ( null ) ; }
private void executeFenceVdsManuallyAction ( ) { org.ovirt.engine.core.common.action.FenceVdsManualyParameters fenceVdsManuallyParams = new org.ovirt.engine.core.common.action.FenceVdsManualyParameters ( false ) ; fenceVdsManuallyParams.setStoragePoolId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVds ( ) . getStoragePoolId ( ) ) ; fenceVdsManuallyParams.setVdsId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getVdsId ( ) ) ; fenceVdsManuallyParams.setSessionId ( org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.getParameters ( ) . getSessionId ( ) ) ; fenceVdsManuallyParams.setParentCommand ( VdcActionType.RestartVds ) ; runInternalAction ( VdcActionType.FenceVdsManualy , fenceVdsManuallyParams , org.ovirt.engine.core.bll.VdsKdumpDetectionCommand.dupContext ( ) . withoutCompensationContext ( ) . withLock ( new org.ovirt.engine.core.utils.lock.EngineLock ( getExclusiveLocks ( ) , null ) ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getDiskInfo ( ) . isBoot ( ) ) && ( ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getVmId ( ) ) != null ) ) && ( ! ( Guid.Empty.equals ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getVmId ( ) ) ) ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AddDiskCommand.getParameters ( ) . getVmId ( ) . toString ( ) , LockMessagesMatchUtil.VM_DISK_BOOT ) ; } return null ; }
public void testListCrashClientLocale ( ) { collection.setUriInfo ( setUpUriExpectations ( null ) ) ; locales.add ( org.ovirt.engine.api.restapi.resource.gluster.CLIENT_LOCALE ) ; java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpHooksQueryExpectations ( t ) ; verifyFault ( org.junit.jupiter.api.Assertions.assertThrows ( javax.ws.rs.WebApplicationException.class , this :: getCollection ) , org.ovirt.engine.api.restapi.resource.gluster.BACKEND_FAILED_CLIENT_LOCALE , t ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.IscsiBond iscsiBond ) { validateParameters ( iscsiBond , "name" ) ; org.ovirt.engine.api.model.IscsiBond entity = getMapper ( org.ovirt.engine.api.model.IscsiBond.class , org.ovirt.engine.api.model.IscsiBond.class ) . map ( iscsiBond , null ) ; entity.setStoragePoolId ( dataCenterId ) ; return performCreate ( ActionType.AddIscsiBond , new org.ovirt.engine.core.common.action.AddIscsiBondParameters ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetIscsiBondById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public void testVerbosityLevelZero ( ) { java.lang.String command = createCommand ( new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder ( ) . verboseLevel ( AnsibleVerbosity.LEVEL0 ) . playbook ( org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK ) ) ; org.junit.Assert.assertEquals ( join ( AnsibleCommandBuilder.ANSIBLE_COMMAND , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.PRIVATE_KEY , org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilderTest.ANSIBLE_PLAYBOOK_FULL_PATH ) , command ) ; }
private boolean verifyDisksIfNeeded ( ) { if ( ( ! ( getParameters ( ) . isImportAsNewEntity ( ) ) ) && ( ! ( org.ovirt.engine.core.bll.ImportVmCommand.isImagesAlreadyOnTarget ( ) ) ) ) { return checkIfDisksExist ( imageList ) ; } return true ; }
protected void addMoveOrCopyParameters ( java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid , org.ovirt.engine.core.compat.Guid destStorageDomainGuid , org.ovirt.engine.core.common.businessentities.storage.DiskImage disk ) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters params = createParameters ( sourceStorageDomainGuid , destStorageDomainGuid , disk ) ; params.setQuotaId ( disk.getQuotaId ( ) ) ; params.setDiskProfileId ( disk.getDiskProfileId ( ) ) ; params.setNewAlias ( disk.getDiskAlias ( ) ) ; parameters.add ( params ) ; }
private static void AddGroupToUser ( org.ovirt.engine.core.common.businessentities.LdapUser user , java.lang.String groupName ) { if ( ! ( user.getGroups ( ) . containsKey ( groupName ) ) ) { org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDbGroupDao ( ) . getByName ( groupName ) ; org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup = null ; if ( dbGroup != null ) { ldapGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( dbGroup ) ; } else { ldapGroup = new org.ovirt.engine.core.common.businessentities.LdapGroup ( ) ; } user.getGroups ( ) . put ( groupName , ldapGroup ) ; } }
public static void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters ( org.ovirt.engine.api.model.StorageConnection incoming , org.ovirt.engine.core.common.businessentities.StorageServerConnections entity ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = map ( incoming , entity ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty ; if ( ( incoming.getHost ( ) ) != null ) { hostId = getHostId ( incoming.getHost ( ) ) ; } return new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( connection , hostId ) ; }
void addReportedDevices ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { java.util.List < org.ovirt.engine.api.model.ReportedDevice > devices = getDevices ( entity.getVmId ( ) , entity.getMacAddress ( ) ) ; if ( ! ( devices.isEmpty ( ) ) ) { org.ovirt.engine.api.model.ReportedDevices reportedDevices = new org.ovirt.engine.api.model.ReportedDevices ( ) ; reportedDevices.getReportedDevices ( ) . addAll ( devices ) ; model.setReportedDevices ( reportedDevices ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterVolumeGeoRepSessionStart ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName , java.lang.Boolean force ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepSessionStart" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "remoteHost" , remoteHost ) . withParameter ( "remoteVolumeName" , remoteVolumeName ) . withOptionalParameter ( "remoteUserName" , userName ) . withParameter ( "force" , force ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
public void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer.valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNumberOfActiveVmsInClusterByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isBlank ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getName ( ) ) ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVm ( ) . getName ( ) , LockMessagesMatchUtil.VM_NAME ) ; } return null ; }
protected boolean validateGraphicsAndDisplay ( ) { return org.ovirt.engine.core.bll.VmHandler.isGraphicsAndDisplaySupported ( org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) . getOs ( ) , getGraphicsTypesForVm ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getVm ( ) . getDefaultDisplayType ( ) , org.ovirt.engine.core.bll.ImportVmCommandBase.getReturnValue ( ) . getCanDoActionMessages ( ) , getEffectiveCompatibilityVersion ( ) ) ; }
private void clearChildAsyncTasksWithOutVdsmId ( ) { for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.CommandBase < ? > > entry : childCommandsMap.entrySet ( ) ) { entry.getValue ( ) . clearAsyncTasksWithOutVdsmId ( ) ; entry.getValue ( ) . clearChildAsyncTasksWithOutVdsmId ( ) ; } }
void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { titleLabel.setText ( constants.configurePopupTitle ( ) ) ; closeButton.setText ( constants.closeButtonLabel ( ) ) ; rolesTab.setLabel ( constants.configureRoleTabLabel ( ) ) ; clusterPoliciesTab.setLabel ( constants.configureClusterPolicyTabLabel ( ) ) ; systemPermissionsTab.setLabel ( constants.configureSystemPermissionTabLabel ( ) ) ; }
private boolean hasReportsModelRefreshEvent ( ) { for ( org.ovirt.engine.ui.uicompat.IEventListener < ? extends org.ovirt.engine.ui.uicompat.EventArgs > listnr : ( ( java.util.List < org.ovirt.engine.ui.uicompat.IEventListener < ? extends org.ovirt.engine.ui.uicompat.EventArgs > > ) ( getModel ( ) . getReportsAvailabilityEvent ( ) . getListeners ( ) ) ) ) { if ( listnr instanceof org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.ReportsModelRefreshEvent ) { return true ; } } return false ; }
public void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void freeLock ( ) { if ( ( context.getLock ( ) ) != null ) { getLockManager ( ) . releaseLock ( context.getLock ( ) ) ; log.info ( "Lock freed to object '{}'" , context.getLock ( ) ) ; context.withLock ( null ) ; } }
protected boolean canMigrateVm ( org.ovirt.engine.core.compat.Guid vmGuid , java.util.ArrayList < java.lang.String > reasons ) { if ( ( org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm ( ) . getMigrationSupport ( ) ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ) { return super . canMigrateVm ( vmGuid , reasons ) ; } else { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE ) ; } }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = getReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case UnknownTask : log.error ( java.lang.String.format ( "Trying to revert unknown task: %1$s" , org.ovirt.engine.core.vdsbroker.vdsbroker.HSMRevertTaskVDSCommand.getParameters ( ) . getTaskId ( ) ) ) ; return ; } super . proceedProxyReturnValue ( ) ; }
public static void getGlusterRebalanceStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity ) ( source ) ) ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeQueriesParameters ( clusterId , volumeId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeRebalanceStatus , parameters , aQuery ) ; }
public void getExternalProviderComputeResourceList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ExternalComputeResource > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.ProviderQueryParameters params = new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( ) ; params.setProvider ( provider ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetComputeResourceFromExternalProvider , params , aQuery ) ; }
protected org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator getStorageDomainValidator ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator > entry ) { if ( ( entry.getValue ( ) ) == null ) { entry.setValue ( new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( getStorageDomainDao ( ) . getForStoragePool ( entry.getKey ( ) , storagePoolId ) ) ) ; } return entry.getValue ( ) ; }
public void validateFailsWhenCreateAllSnapshotFromVmValidationFails ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain ( srcStorageId ) ; srcStorageDomain.setStatus ( StorageDomainStatus.Active ) ; org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain ( dstStorageId ) ; dstStorageDomain.setStatus ( StorageDomainStatus.Active ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . validateCreateAllSnapshotsFromVmCommand ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; }
protected void executeQueryCommand ( ) { java.util.Set < java.lang.String > primaryDevices = getNonPlaceholderDeviceNames ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.HostDeviceView > hostDeviceList = hostDeviceDao.getVmExtendedHostDevicesByVmId ( org.ovirt.engine.core.bll.GetExtendedVmHostDevicesByVmIdQuery.getParameters ( ) . getId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.HostDeviceView > result = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.HostDeviceView deviceView : hostDeviceList ) { if ( primaryDevices.contains ( deviceView.getDeviceName ( ) ) ) { result.add ( deviceView ) ; } } org.ovirt.engine.core.bll.GetExtendedVmHostDevicesByVmIdQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; }
protected void executeVdsBrokerCommand ( ) { java.lang.Boolean includeUserData = org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.SendVmTicketUID , org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds ( ) . getClusterCompatibilityVersion ( ) . toString ( ) ) ; if ( org.ovirt.engine.core.common.FeatureSupported.graphicsDeviceEnabled ( org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds ( ) . getClusterCompatibilityVersion ( ) ) ) { setTicketUsingUpdateDevice ( includeUserData ) ; } else { setTicketLegacy ( includeUserData ) ; } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.proceedProxyReturnValue ( ) ; }
private void updateShareable ( org.ovirt.engine.core.common.businessentities.VolumeType volumeType , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { if ( ( storageType.isBlockDomain ( ) ) && ( volumeType == ( org.ovirt.engine.core.common.businessentities.VolumeType.Sparse ) ) ) { getIsShareable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.shareableDiskNotSupportedByConfiguration ( ) ) ; getIsShareable ( ) . setIsChangable ( false ) ; getIsShareable ( ) . setEntity ( false ) ; } else { getIsShareable ( ) . setIsChangable ( isEditEnabled ( ) ) ; } }
public void testAuditLogMacInUseUnplug ( ) { final org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) ; vmInterfaceManager.auditLogMacInUseUnplug ( iface , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; verifyCommonAuditLogFilledProperly ( AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG , iface ) ; org.junit.Assert.assertEquals ( auditLogableCaptor.getValue ( ) . getVmName ( ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME ) ; }
public void testHost ( ) { testValidSql ( "Host: sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: name =\"test1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds WHERE vds.vds_name LIKE test1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds WHERE vds.usage_cpu_percent > 80 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: user.name = \"user1\" sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN vdc_users_with_tags ON vds.vds_id=vdc_users_with_tags.vm_guid WHERE vdc_users_with_tags.name LIKE user1 ) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: STORAGE.name = \"sd1\" sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN storage_domains_with_hosts_view ON vds_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE storage_domains_with_hosts_view.storage_name LIKE sd1 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and CPU_USAGE > 80 sortby cpu_usage desc" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN audit_log ON vds.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds.usage_cpu_percent > 80 )) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: EVENT.severity=error and tag=tag1 sortby cpu_usage desc" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags LEFT OUTER JOIN audit_log ON vds_with_tags.vds_id=audit_log.vds_id WHERE ( audit_log.severity = '2' AND vds_with_tags.tag_name IN ('tag1','all') ))) ORDER BY usage_cpu_percent DESC NULLS LAST,vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: tag=\"tag1\"" , "SELECT * FROM (SELECT * FROM vds WHERE ( vds_id IN (SELECT distinct vds_with_tags.vds_id FROM vds_with_tags WHERE vds_with_tags.tag_name IN ('tag1','all') )) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Host: vm.name=\"vm1\"" , "SELECT * FROM ((SELECT distinct vds.* FROM vds LEFT OUTER JOIN vms_with_tags ON vds.vds_id=vms_with_tags.run_on_vds WHERE vms_with_tags.vm_name LIKE vm1 ) ORDER BY vds_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id WHERE ( ( vms.vds_group_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Vms: cluster = default and Templates.name = template_1 and Storage.name = storage_1 and Vnic.network_name = vnic_1" , "SELECT * FROM (SELECT * FROM vms WHERE ( vm_guid IN (SELECT distinct vms_with_tags.vm_guid FROM vms_with_tags LEFT OUTER JOIN vm_templates_storage_domain ON vms_with_tags.vmt_guid=vm_templates_storage_domain.vmt_guid LEFT OUTER JOIN storage_domains_with_hosts_view ON vms_with_tags.storage_id=storage_domains_with_hosts_view.id LEFT OUTER JOIN vm_interface_view ON vms_with_tags.vm_guid=vm_interface_view.vm_guid WHERE ( ( ( vms.vds_group_name LIKE default AND vm_templates_storage_domain.name LIKE template\\_1 ) AND storage_domains_with_hosts_view.storage_name LIKE storage\\_1 ) AND vm_interface_view.network_name LIKE vnic\\_1 ))) ORDER BY vm_name ASC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
protected void updateStorageDomains ( final org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getStorageDomainById ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { getStorageDomain ( ) . setSelectedItem ( storageDomain ) ; } } ) , getStorageDomainId ( ) ) ; }
public void reportCompleted ( ) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = org.ovirt.engine.core.bll.RunVmOnceCommand.getExecutionContext ( ) ; executionContext.setShouldEndJob ( true ) ; boolean success = ( java.lang.Boolean.TRUE.equals ( org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters ( ) . getRunAndPause ( ) ) ) && ( ( org.ovirt.engine.core.bll.RunVmOnceCommand.getVmDynamicDao ( ) . get ( org.ovirt.engine.core.bll.RunVmOnceCommand.getVmId ( ) ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ; org.ovirt.engine.core.bll.job.ExecutionHandler.endJob ( executionContext , success ) ; }
private boolean canEditRequired ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel ) ( model ) ) ; return ( ( clusterNetworkModel.isAttached ( ) ) && ( ! ( clusterNetworkModel.isManagement ( ) ) ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotDelete ( java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.snapshotDelete" ) . withParameter ( "volumeName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( response ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics ) ) { return false ; } org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics other = ( ( org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics ) ( obj ) ) ; return ( super . equals ( obj ) ) && ( java.util.Objects.equals ( vmId , other.vmId ) ) ; }
private void runCommand ( org.ovirt.engine.core.bll.network.dc.InternalImportExternalNetworkCommand < org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters > command ) { org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; command.executeCommand ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( command.getReturnValue ( ) . getSucceeded ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NETWORK_ID , command.getReturnValue ( ) . getActionReturnValue ( ) ) ; }
protected boolean ValidateAdd ( org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod , org.ovirt.engine.core.common.businessentities.event_subscriber event_subscriber , org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { java.lang.String tagName = event_subscriber.gettag_name ( ) ; boolean retValue = ValidateNotificationMethod ( eventNotificationMethod , event_subscriber , user ) ; if ( retValue && ( org.apache.commons.lang.StringUtils.isNotEmpty ( tagName ) ) ) { retValue = ValidateTag ( tagName ) ; } return retValue ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "id" , getId ( ) ) . append ( "status" , getStatus ( ) ) . append ( "display" , isDisplay ( ) ) . append ( "required" , isRequired ( ) ) . append ( "migration" , isMigration ( ) ) . append ( "management" , isManagement ( ) ) . append ( "gluster" , isGluster ( ) ) . append ( "defaultRoute" , isDefaultRoute ( ) ) . build ( ) ; }
private void verifyInvalidValueException ( javax.ws.rs.WebApplicationException wae , java.lang.String value , java.lang.String typeName ) { assertEquals ( 400 , wae.getResponse ( ) . getStatus ( ) ) ; org.ovirt.engine.api.model.Fault fault = ( ( org.ovirt.engine.api.model.Fault ) ( wae.getResponse ( ) . getEntity ( ) ) ) ; assertNotNull ( fault ) ; assertEquals ( "Invalid value" , fault.getReason ( ) ) ; assertEquals ( ( ( ( value + " is not a member of " ) + typeName ) + ". Possible values for State are: new, runnable, blocked, waiting, timed_waiting, terminated" ) , fault.getDetail ( ) ) ; }
public void getSupportedCpuList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.ServerCpu > > aQuery , java.lang.String cpuName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.CastingConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSupportedCpuList , new org.ovirt.engine.core.common.queries.GetSupportedCpuListParameters ( cpuName ) , aQuery ) ; }
public void testAllocateMacFromRequestForStatelessVmWhenReturningToStateInSnapshot ( ) { nicBeingUpdated.setMacAddress ( org.ovirt.engine.core.bll.network.vm.NEW_MAC ) ; updatingNic.setMacAddress ( org.ovirt.engine.core.bll.network.vm.OLD_MAC ) ; mockOriginalSnapshot ( org.ovirt.engine.core.bll.network.vm.OLD_MAC , org.ovirt.engine.core.bll.network.vm.OTHER_MAC ) ; underTest.initMacPoolData ( ) ; org.hamcrest.MatcherAssert.assertThat ( ( "New mac value of nic being updated is same as one in snapshot, thus it is already allocated in" + "mac pool and it must not be allocated again." ) , underTest.allocateMacFromRequest ( ) , org.hamcrest.CoreMatchers.is ( false ) ) ; }
protected void onHide ( ) { super . onHide ( ) ; ( org.ovirt.engine.ui.common.presenter.AbstractPopupPresenterWidget.activePopups ) -- ; if ( ( org.ovirt.engine.ui.common.presenter.AbstractPopupPresenterWidget.activePopups ) == 0 ) { com.google.gwt.core.client.Scheduler.get ( ) . scheduleDeferred ( new com.google.gwt.core.client.Scheduler.ScheduledCommand ( ) { @ java.lang.Override public void execute ( ) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.reapPopupContentTooltips ( ) ; } } ) ; } }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public static void getPermissionsByAdElementId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid userId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permissions > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermissionsByAdElementId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( userId ) , aQuery ) ; }
public void disableVirtWhenVmsExist ( ) { createCommandWithGlusterEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDAO.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.mcr.mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 , java.lang.Boolean.TRUE ) ; cpuExists ( ) ; cpuFlagsNotMissing ( ) ; clusterHasVds ( ) ; clusterHasVMs ( ) ; canDoActionFailedWithReason ( VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS ) ; }
private org.ovirt.engine.core.common.businessentities.VM getVM ( org.ovirt.engine.api.model.VmPool pool ) { if ( isFiltered ( ) ) { return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , VdcQueryType.GetVmDataByPoolId , new org.ovirt.engine.core.common.queries.GetVmdataByPoolIdParameters ( asGuid ( pool.getId ( ) ) ) , pool.getId ( ) ) ; } return getEntity ( org.ovirt.engine.core.common.businessentities.VM.class , SearchType.VM , ( "Vms: pool=" + ( pool.getName ( ) ) ) ) ; }
public void versionDecreaseLowerVersionThanDC ( ) { createCommandWithOlderVersion ( ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFSOldVersion ( ) ) ; setupCpu ( ) ; validateFailedWithReason ( EngineMessage.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION_UNDER_DC ) ; }
protected void setGetVdsQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setClusterId ( GUIDS [ 0 ] ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , vds ) ; } }
public void testGetValue ( ) { org.junit.Assert.assertFalse ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.SriovHotPlugSupported , "3.6" ) ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.SriovHotPlugSupported , "4.0" ) ) ; }
public void getTemplateById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplate , new org.ovirt.engine.core.common.queries.GetVmTemplateParameters ( templateId ) , aQuery ) ; }
private void initStorageDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setId ( storageDomainId ) ; storageDomain.setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( command ) . getStorageDomainDao ( ) ; org.mockito.Mockito.when ( storageDomainDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( storageDomainDao.getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; }
public void removeAllIllegalDisks ( org.ovirt.engine.core.compat.Guid snapshotId , org.ovirt.engine.core.compat.Guid vmId ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImageDao.getAllSnapshotsForVmSnapshot ( snapshotId ) ) { if ( ( diskImage.getImageStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ) ) { imagesHandler.removeDiskImage ( diskImage , vmId ) ; } } }
private void createAdditionalInfoPanel ( ) { additionalInfoPanel.add ( createGeneralAdditionalInfo ( ) ) ; additionalInfoPanel.add ( createDisksAdditionalInfo ( ) ) ; additionalInfoPanel.add ( createNicsAdditionalInfo ( ) ) ; additionalInfoPanel.add ( createAppsAdditionalInfo ( ) ) ; }
public void buildVmUsbDevices ( ) { buildVmUsbControllers ( ) ; buildVmUsbSlots ( ) ; buildSmartcardDevice ( ) ; }
public void validateFailsWithDuplicateVolumeName ( ) { cmd = org.mockito.Mockito.spy ( createTestCommand ( getVolume ( 2 , false ) ) ) ; prepareMocks ( cmd ) ; org.mockito.Mockito.doReturn ( getVolume ( 2 , false ) ) . when ( volumeDao ) . getByName ( clusterId , "vol1" ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS ) ; }
private void onForceSave ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getSanStorageModelBase ( ) . setForce ( true ) ; onSave ( ) ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsGroupsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
private void vdsExistWithHigherVersion ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setStatus ( VDSStatus.Up ) ; vds.setClusterCompatibilityVersion ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.VERSION_1_2 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDS > vdsList = new java.util.ArrayList < > ( ) ; vdsList.add ( vds ) ; org.mockito.Mockito.when ( vdsDao.getAllForCluster ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( vdsList ) ; }
public boolean isRDPAvailable ( ) { if ( ( rdpAvailable ) == null ) { rdpAvailable = ( clientAgentType.getBrowser ( ) . toLowerCase ( ) . contains ( "explorer" ) ) && ( isWindowsClient ( ) ) ; com.google.gwt.core.client.GWT.log ( ( "Determining if RDP console is available on current platform, result:" + ( rdpAvailable ) ) ) ; } return rdpAvailable ; }
public double getDiskSize ( ) { if ( ( diskSize ) == 0 ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : getDiskMap ( ) . values ( ) ) { if ( ( org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE ) == ( disk.getDiskStorageType ( ) ) ) { diskSize += ( ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) . getSize ( ) ) / ( java.lang.Double.valueOf ( ( ( 1024 * 1024 ) * 1024 ) ) ) ; } } } return diskSize ; }
protected final void decreasePendingVm ( org.ovirt.engine.core.common.businessentities.VmStatic vm ) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId ( ) ; if ( ( vdsId == null ) || ( vdsId.equals ( lastDecreasedVds ) ) ) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debug ( "PendingVms for the guest '{}' running on host '{}' was already released, not releasing again" , vm.getName ( ) , vdsId ) ; return ; } lastDecreasedVds = vdsId ; org.ovirt.engine.core.bll.VmHandler.decreasePendingVm ( vm , vdsId ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; }
private java.lang.String createSpiceInvocationInfo ( ) { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto ( ) ) . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative ( ) ) . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin ( ) ) . append ( org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5 ( ) , org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5 ( ) ) . toString ( ) ; }
public static void getMaxSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 10 ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO ( ) . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( cluster.getId ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded ( true ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( ( vm.getVmPoolId ( ) ) == null ) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from ( vm.getVmType ( ) , vm.isStateless ( ) , vm.isNextRunConfigurationExists ( ) ) ; return config.getImageResource ( ) ; } else { return org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource ( vm.getVmType ( ) , vm.isNextRunConfigurationExists ( ) ) ; } }
public void bondWithNoSlaves ( ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.SetupNetworksHelperTest.BOND_NAME , null ) ; mockExistingIfaces ( bond ) ; org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper ( createParametersForNics ( bond ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.NETWORK_BOND_PARAMETERS_INVALID ) ; }
public void validateIsoPrefixNameForInitrdAndNullForKernel ( ) throws java.lang.Exception { java.lang.String initrd = "initrd" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ISO_PREFIX ) + initrd ) , null ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , ( ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) + initrd ) ) ; org.junit.Assert.assertEquals ( vm.getKernelUrl ( ) , null ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumesHealInfoReturnForXmlRpc glusterVolumeHealInfo ( java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeHealInfo ( volumeName ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumesHealInfoReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumesHealInfoReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void prepareMocks ( ) { vdsBrokerFrontendMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.interfaces.VDSBrokerFrontend.class ) ; org.mockito.Mockito.doReturn ( vdsBrokerFrontendMock ) . when ( getQuery ( ) ) . getVdsBroker ( ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionDao ( ) ) . thenReturn ( storageServerConnectionDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getStorageServerConnectionLunMapDao ( ) ) . thenReturn ( storageServerConnectionLunMapDao ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getLunDao ( ) ) . thenReturn ( lunDao ) ; }
public boolean isManagementNetwork ( org.ovirt.engine.core.compat.Guid networkId ) { final java.util.List < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > networkClusters = networkClusterDao.getAllForNetwork ( networkId ) ; final org.ovirt.engine.core.common.businessentities.network.NetworkCluster managementNetworkCluster = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull ( networkClusters , new org.ovirt.engine.core.utils.linq.Predicate < org.ovirt.engine.core.common.businessentities.network.NetworkCluster > ( ) { @ java.lang.Override public boolean eval ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster ) { return networkCluster.isManagement ( ) ; } } ) ; return managementNetworkCluster != null ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionStart ( java.lang.String volumeName , java.lang.String remoteHost , java.lang.String remoteVolumeName , java.lang.String userName , java.lang.Boolean force ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.glusterVolumeGeoRepSessionStart ( volumeName , remoteHost , remoteVolumeName , userName , force ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > getConnectableStorageConnectionsByStorageType ( org.ovirt.engine.core.compat.Guid pool , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { return getCallsHandler ( ) . executeReadList ( "GetConnectableStorageConnectionsByStorageType" , org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper , getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , pool ) . addValue ( "storage_type" , ( storageType != null ? storageType.getValue ( ) : null ) ) ) ; }
public void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisksForVmQueryParameters ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllAttachableDisksForVm , params , aQuery ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotSchedule fetchedSchedule = getGlusterVolumeSnapshotScheduleDao ( ) . getByVolumeId ( getGlusterVolumeId ( ) ) ; if ( fetchedSchedule == null ) { return failValidation ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_NOT_SCHEDULED ) ; } return true ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateNumOfSockets ( ) ; updateQuotaByCluster ( vm.getQuotaId ( ) , vm.getQuotaName ( ) ) ; updateCpuPinningVisibility ( ) ; updateMemoryBalloon ( ) ; updateCpuSharesAvailability ( ) ; updateNetworkInterfaces ( networkBehavior , networkInerfaces ) ; updateVirtioScsiAvailability ( ) ; updateOSValues ( ) ; }
protected void sortStorageDomains ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > vmDisks ) { java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comp = null ; for ( java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > comparator : getStorageDomainComparators ( domainsInPool , vmDisks ) ) { comp = ( comp == null ) ? comparator.reversed ( ) : comp.thenComparing ( comparator.reversed ( ) ) ; } java.util.Collections.sort ( domainsInPool , comp ) ; }
private void scheduleJobWithTrigger ( long initialDelay , java.util.concurrent.TimeUnit timeUnit , java.lang.Object instance , org.quartz.JobDetail job ) { org.quartz.Trigger trigger = createSimpleTrigger ( initialDelay , timeUnit , instance ) ; try { sched.scheduleJob ( job , trigger ) ; } catch ( org.quartz.SchedulerException se ) { log.error ( "failed to schedule job: {}" , se.getMessage ( ) ) ; log.debug ( "Exception" , se ) ; } }
public void testSave ( ) { dao.save ( vnicProfile ) ; org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get ( vnicProfile.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( vnicProfile.getId ( ) , result.getId ( ) ) ; org.junit.Assert.assertEquals ( false , result.isPortMirroring ( ) ) ; }
public void testGetEntityNameByIdAndTypeForDataCenter ( ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = storagePoolDao.get ( FixturesTool.DATA_CENTER ) ; org.junit.jupiter.api.Assertions.assertNotNull ( storagePool ) ; java.lang.String name = storagePool.getName ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( name , dao.getEntityNameByIdAndType ( FixturesTool.DATA_CENTER , VdcObjectType.StoragePool ) ) ; }
public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Vm model = createModel ( null ) ; model.setTemplate ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Vm" , "add" , "template.id|name" ) ; } }
public void setUp ( ) { disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; metadataDiskDescriptionHandler = org.mockito.Mockito.spy ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandler.getInstance ( ) ) ; org.mockito.Mockito.doReturn ( auditLogDirector ) . when ( metadataDiskDescriptionHandler ) . getAuditLogDirector ( ) ; org.mockito.Mockito.doNothing ( ) . when ( auditLogDirector ) . log ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.AuditLogType.class ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc fullList ( java.lang.String [ ] vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getVMFullList" ) . withOptionalParameterAsList ( "vmList" , new java.util.ArrayList < > ( java.util.Arrays.asList ( vmIds ) ) ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( response ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = super . getPermissionCheckSubjects ( ) ; if ( ( ( getVm ( ) ) != null ) && ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( getVm ( ) . getCustomProperties ( ) ) ) ) ) { permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getVm ( ) . getvds_group_id ( ) , org.ovirt.engine.core.common.VdcObjectType.VdsGroups , org.ovirt.engine.core.common.businessentities.ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES ) ) ; } return permissionList ; }
public void testGetNotFound ( ) throws java.lang.Exception { org.ovirt.engine.api.resource.StorageResource subresource = collection.getStorageResource ( "foo" ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpQueryExpectations ( "" ) ; try { subresource.get ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static org.ovirt.engine.api.model.HostedEngine map ( org.ovirt.engine.core.common.businessentities.VDS entity , org.ovirt.engine.api.model.HostedEngine template ) { org.ovirt.engine.api.model.HostedEngine hostedEngine = ( template != null ) ? template : new org.ovirt.engine.api.model.HostedEngine ( ) ; hostedEngine.setConfigured ( entity.getHighlyAvailableIsConfigured ( ) ) ; hostedEngine.setActive ( entity.getHighlyAvailableIsActive ( ) ) ; hostedEngine.setScore ( entity.getHighlyAvailableScore ( ) ) ; hostedEngine.setGlobalMaintenance ( entity.getHighlyAvailableGlobalMaintenance ( ) ) ; hostedEngine.setLocalMaintenance ( entity.getHighlyAvailableLocalMaintenance ( ) ) ; return hostedEngine ; }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runUpdateMomPolicy ( final org.ovirt.engine.core.common.businessentities.VDSGroup cluster , final org.ovirt.engine.core.common.businessentities.VDS vds ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; if ( ( cluster.getCompatibilityVersion ( ) . compareTo ( Version.v3_3 ) ) >= 0 ) { try { returnValue = runVdsCommand ( VDSCommandType.SetMOMPolicyParameters , new org.ovirt.engine.core.common.vdscommands.MomPolicyVDSParameters ( vds , cluster.isEnableBallooning ( ) , cluster.isEnableKsm ( ) ) ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.error ( "Could not update MoM policy on host '{}'" , vds.getName ( ) ) ; returnValue.setSucceeded ( false ) ; } } return returnValue ; }
public void testGet ( ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetHostDeviceByHostIdAndDeviceName , org.ovirt.engine.core.common.queries.HostDeviceParameters.class , new java.lang.String [ ] { "HostId" , "DeviceName" } , new java.lang.Object [ ] { HOST_ID , DEVICE_NAME } , getEntity ( 0 ) ) ; org.ovirt.engine.api.model.HostDevice device = resource.get ( ) ; verifyHostDevice ( device ) ; }
public void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
public static void GetCPUList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ServerCpu > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllServerCpuList , new org.ovirt.engine.core.common.queries.GetAllServerCpuListParameters ( version ) , aQuery ) ; }
protected void removeNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) . getAllForTemplate ( getVmTemplateId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmNetworkInterfaceDao ( ) . remove ( iface.getId ( ) ) ; } }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void poolHasDefaultCluster ( ) { org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.mcr.mockConfigValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID , org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.DEFAULT_VDS_GROUP_ID ) ; addDefaultClusterToPool ( ) ; storagePoolWithLocalFS ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS ) ) . when ( poolValidator ) . isNotLocalfsWithDefaultCluster ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS ) ; }
private void mockDaos ( boolean pluggedInterface ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createVM ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VM_NAME , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.NETWORK_NAME , pluggedInterface ) ; org.mockito.Mockito.when ( vmDao.getAllRunningForVds ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Arrays.asList ( vm ) ) ; org.mockito.Mockito.when ( vmNetworkInterfaceDao.getAllForVm ( vm.getId ( ) ) ) . thenReturn ( vm.getInterfaces ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createBond ( java.lang.String name , java.lang.String networkName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , name , true , null , null , null , networkName , true , null , null , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.DEFAULT_SPEED ) ; mockCalculateBaseNicWhenBaseNicIsPassed ( bond ) ; return bond ; }
public void getExternalProviderHostList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , org.ovirt.engine.core.compat.Guid providerId , boolean filterOutExistingHosts , java.lang.String searchFilter ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters params = new org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters ( ) ; params.setFilterOutExistingHosts ( filterOutExistingHosts ) ; params.setProviderId ( providerId ) ; params.setSearchFilter ( searchFilter ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostListFromExternalProvider , params , aQuery ) ; }
protected void setUpGetEntityExpectations ( int times , boolean notFound , org.ovirt.engine.api.model.VmPool entity ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( QueryType.GetVmPoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , ( notFound ? null : entity ) ) ; } }
protected void updateSelectedCdImage ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { getModel ( ) . getCdImage ( ) . setSelectedItem ( vmBase.getIsoPath ( ) ) ; boolean hasCd = ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vmBase.getIsoPath ( ) ) ) ; getModel ( ) . getCdImage ( ) . setIsChangeable ( hasCd ) ; getModel ( ) . getCdAttached ( ) . setEntity ( hasCd ) ; }
private void prepare7 ( ) { org.ovirt.engine.ui.uicompat.PreparingEnlistment enlistment = ( ( org.ovirt.engine.ui.uicompat.PreparingEnlistment ) ( context.enlistment ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.removeStorageServerConnectionReturnValue ; context.enlistment = null ; if ( returnValue != null ) { enlistment.Done ( ) ; } else { enlistment.prepared ( ) ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.VDS > getSecondarySources ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > candidateHosts , java.util.Map < java.lang.String , java.lang.String > parameters ) { long requiredMemory = ( parameters.containsKey ( PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName ( ) ) ) ? java.lang.Long.parseLong ( parameters.get ( PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName ( ) ) ) : 0L ; return getOverUtilizedMemoryHosts ( candidateHosts , requiredMemory ) ; }
public org.ovirt.engine.core.common.asynctasks.AsyncTaskType getAsyncTaskType ( ) { if ( ( getTaskType ( ) ) == ( org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported ) ) { throw new java.lang.UnsupportedOperationException ( ) ; } return getTaskType ( ) ; }
private void assertIpConfigurationsEqual ( org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration1 , org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration2 ) { assertIpv4AddressesEqual ( ipConfiguration1.getIpv4PrimaryAddress ( ) , ipConfiguration2.getIpv4PrimaryAddress ( ) ) ; assertIpv6AddressesEqual ( ipConfiguration1.getIpv6PrimaryAddress ( ) , ipConfiguration2.getIpv6PrimaryAddress ( ) ) ; }
public org.ovirt.engine.sdk.decorators.Host add ( org.ovirt.engine.sdk.decorators.Host host ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . add ( url , host , org.ovirt.engine.sdk.entities.Host.class , org.ovirt.engine.sdk.decorators.Host.class , headers ) ; }
public void executeCommandTest ( ) { addClusterCommand.executeCommand ( ) ; org.mockito.Mockito.verify ( clusterDao ) . save ( cluster ) ; org.mockito.Mockito.verify ( backend ) . runAction ( org.mockito.ArgumentMatchers.eq ( ActionType.AddCpuProfile ) , org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( addClusterCommand.getReturnValue ( ) . getSucceeded ( ) ) ; }
public org.ovirt.engine.core.dao.StoragePoolDao getStoragePoolDao ( ) { final org.ovirt.engine.core.dao.StoragePoolDao s = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDao.class ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; p.setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; org.mockito.Mockito.when ( s.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ) . thenReturn ( p ) ; org.mockito.Mockito.when ( s.get ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ) . thenReturn ( null ) ; return s ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < > ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters ( ) . getVmStaticData ( ) . getClusterId ( ) , org.ovirt.engine.core.common.VdcObjectType.Cluster , org.ovirt.engine.core.bll.AddVmPoolCommand.getActionType ( ) . getActionGroup ( ) ) ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.AddVmPoolCommand.getVmTemplateId ( ) , org.ovirt.engine.core.common.VdcObjectType.VmTemplate , org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_VM ) ) ; return permissionList ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = getImportChainConfirmationModel ( ( ( java.lang.String ) ( result ) ) ) ; sourceListModel.setConfirmWindow ( confirmationModel ) ; } else { stopProgress ( ) ; setTestResultValue ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) ) ; } }
public void testGet ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetIscsiBondById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.ISCSI_BOND_ID } , getIscsiBondContainingNetwork ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworkById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.NETWORK_ID } , getEntity ( 0 ) ) ; verifyModel ( resource.get ( ) , 0 ) ; }
public void testIncompleteInstall ( ) throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations ( 1 ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { resource.install ( new org.ovirt.engine.api.model.Action ( ) ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Action" , "install" , "rootPassword" ) ; } }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumesHealInfoReturnForXmlRpc glusterVolumeHealInfo ( java.lang.String volumeName ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.healInfo" ) . withParameter ( "volumeName" , volumeName ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumesHealInfoReturnForXmlRpc ( response ) ; }
private static java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > queryDirectoryGroups ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final org.ovirt.engine.api.extensions.ExtMap filter , boolean groupsResolving , boolean groupsResolvingRecursive ) { java.util.List < org.ovirt.engine.core.aaa.DirectoryGroup > directoryGroups = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.api.extensions.ExtMap group : org.ovirt.engine.core.aaa.AuthzUtils.queryPrincipalRecords ( extension , namespace , filter , groupsResolving , groupsResolvingRecursive ) ) { directoryGroups.add ( org.ovirt.engine.core.aaa.DirectoryUtils.mapGroupRecordToDirectoryGroup ( org.ovirt.engine.core.aaa.AuthzUtils.getName ( extension ) , group ) ) ; } return directoryGroups ; }
private void updateVmStaticTable ( ) { final org.ovirt.engine.core.dao.VmStaticDao vmStaticDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmStaticDao ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmStatic vmStatic : vmStaticDao.getAllWithoutIcon ( ) ) { setIconsByOs ( vmStatic ) ; vmStaticDao.update ( vmStatic ) ; } final org.ovirt.engine.core.dao.VmTemplateDao vmTemplateDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmTemplateDao ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplateDao.getAllWithoutIcon ( ) ) { setIconsByOs ( vmTemplate ) ; vmTemplateDao.update ( vmTemplate ) ; } }
private void endJob ( boolean exitStatus , org.ovirt.engine.core.common.job.Job job ) { job.markJobEnded ( exitStatus ) ; try { jobRepository.updateCompletedJobAndSteps ( job ) ; } catch ( java.lang.Exception e ) { log.error ( "Failed to end Job '{}', '{}': {}" , job.getId ( ) , job.getActionType ( ) . name ( ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; } }
public org.ovirt.engine.sdk.decorators.Tag add ( org.ovirt.engine.sdk.decorators.Tag tag ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( SLASH ) + ( getName ( ) ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . add ( url , tag , org.ovirt.engine.sdk.entities.Tag.class , org.ovirt.engine.sdk.decorators.Tag.class , headers ) ; }
public org.ovirt.engine.core.bll.ValidationResult isLunDiskVisible ( final org.ovirt.engine.core.common.businessentities.storage.LUNs lun , org.ovirt.engine.core.common.businessentities.VDS vds ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.LUNs > luns = executeGetDeviceList ( vds.getId ( ) , lun.getLunType ( ) ) ; boolean lunExists = org.apache.commons.collections.CollectionUtils.exists ( luns , new org.apache.commons.collections.Predicate ( ) { @ java.lang.Override public boolean evaluate ( java.lang.Object o ) { return ( ( org.ovirt.engine.core.common.businessentities.storage.LUNs ) ( o ) ) . getId ( ) . equals ( lun.getId ( ) ) ; } } ) ; return lunExists ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_INVALID ) ; }
private void updateHasSelectedTags ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > selectedTags = ( ( getTagList ( ) . getSelectedItems ( ) ) != null ) ? org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > cast ( getTagList ( ) . getSelectedItems ( ) ) : new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > ( ) ; setHasSelectedTags ( ( ( ( getSelectedItem ( ) ) != null ) && ( ( selectedTags.size ( ) ) > 0 ) ) ) ; }
public boolean isApplicable ( org.ovirt.engine.core.common.businessentities.Cluster oldCluster , org.ovirt.engine.core.common.businessentities.Cluster newCluster ) { newCpuName = newCluster.getCpuName ( ) ; final java.lang.String oldCpuName = oldCluster.getCpuName ( ) ; return ( ( newCpuName ) != null ) && ( ! ( newCpuName.equals ( oldCpuName ) ) ) ; }
public org.ovirt.engine.api.model.Disks list ( ) { boolean unregistered = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendStorageDomainDisksResource.UNREGISTERED_CONSTRAINT_PARAMETER , true , false ) ; if ( unregistered ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetUnregisteredDisks , new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters ( storageDomainId , getStoragePoolIdForDomain ( storageDomainId ) ) ) ) ; } else { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllDisksByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( this . storageDomainId ) ) ) ; } }
private void mockOsRepository ( ) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.mockito.Mockito.when ( osRepository.get64bitOss ( ) ) . thenReturn ( java.util.Collections.singletonList ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest._64_BIT_OS ) ) ; final java.util.Map < java.lang.Integer , org.ovirt.engine.core.common.businessentities.ArchitectureType > osArchitectures = java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.validator.RunVmValidatorTest._64_BIT_OS , ArchitectureType.x86_64 ) ; org.mockito.Mockito.when ( osRepository.getOsArchitectures ( ) ) . thenReturn ( java.util.Collections.unmodifiableMap ( osArchitectures ) ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; }
private void initInfoIcons ( org.ovirt.engine.ui.webadmin.ApplicationResources resources , org.ovirt.engine.ui.webadmin.ApplicationConstants constants , org.ovirt.engine.ui.webadmin.ApplicationTemplates templates ) { memoryOptimizationInfo = new org.ovirt.engine.ui.common.widget.dialog.InfoIcon ( templates.italicFixedWidth ( "465px" , constants.clusterPopupMemoryOptimizationInfo ( ) ) , resources ) ; cpuThreadsInfo = new org.ovirt.engine.ui.common.widget.dialog.InfoIcon ( templates.italicFixedWidth ( "600px" , constants.clusterPopupCpuThreadsInfo ( ) ) , resources ) ; schedulerOptimizationInfoIcon = new org.ovirt.engine.ui.common.widget.dialog.InfoIcon ( com.google.gwt.safehtml.shared.SafeHtmlUtils.EMPTY_SAFE_HTML , resources ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( ( ev.matchesDefinition ( ListModel.SelectedItemChangedEventDefinition ) ) && ( sender == ( getDataCenter ( ) ) ) ) { DataCenter_SelectedItemChanged ( ) ; } else if ( ( ev.matchesDefinition ( ListModel.SelectedItemChangedEventDefinition ) ) && ( sender == ( getCluster ( ) ) ) ) { Cluster_SelectedItemChanged ( ) ; } else if ( sender == ( getConsoleAddressEnabled ( ) ) ) { consoleAddressChanged ( ) ; } }
public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder setExistingInterfaces ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > existingInterfaces ) { this . existingInterfaces = existingInterfaces ; return this ; }
private org.ovirt.engine.core.common.action.CreateOrUpdateBond createNewCreateOrUpdateBondWithNameAndId ( ) { return createNewCreateOrUpdateBond ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , "bond1" ) ; }
public void canDoActionFailsOnNullHookId ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( null ) ) ) ; setUpMocksForRemove ( ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
private boolean isDiskProfilePermitted ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile , java.util.Set < org.ovirt.engine.core.compat.Guid > permittedDiskProfilesIds , org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { return ( ( user == null ) || ( permittedDiskProfilesIds.contains ( diskProfile.getId ( ) ) ) ) || ( ( permissionDao.getEntityPermissions ( user.getId ( ) , ActionGroup.ATTACH_DISK_PROFILE , diskProfile.getId ( ) , VdcObjectType.DiskProfile ) ) != null ) ; }
public void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , boolean doRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , ( doRefresh ? params : params.withoutRefresh ( ) ) , aQuery ) ; }
private org.ovirt.engine.core.bll.ValidationResult referencedNetworkAttachmentActuallyExists ( org.ovirt.engine.core.compat.Guid networkAttachmentId ) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null ; if ( doesNotReferenceExistingNetworkAttachment ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments ) { if ( existingAttachment.getId ( ) . equals ( networkAttachmentId ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_ATTACHMENT_NOT_EXISTS ; java.lang.String id = networkAttachmentId.toString ( ) ; java.lang.String replacement = org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , id ) ; return new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , replacement ) ; }
public void poll ( ) { if ( vdsManager.isMonitoringNeeded ( ) ) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher ( ) ; long fetchTime = java.lang.System.nanoTime ( ) ; if ( fetcher.fetch ( ) ) { getVmsMonitoring ( fetcher , fetchTime ) . perform ( ) ; processDevices ( fetcher.getVdsmVms ( ) . stream ( ) . map ( VmInternalData :: getVmDynamic ) , fetchTime ) ; } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info ( "Failed to fetch vms info for host '{}' - skipping VMs monitoring." , vdsManager.getVdsName ( ) ) ; } } }
private void updateOptions ( ) { getCompulsoryActions ( ) . clear ( ) ; getOptionalActions ( ) . clear ( ) ; if ( ( getEntity ( ) ) != null ) { startProgress ( null ) ; if ( ! ( getEntity ( ) . isLocal ( ) ) ) { updateOptionsNonLocalFSData ( ) ; } else { updateOptionsLocalFSData ( ) ; } } }
public void testGetAllStorageDomainsByImageId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAllStorageDomainsByImageId ( FixturesTool.TEMPLATE_IMAGE_ID ) ; org.junit.Assert.assertEquals ( 1 , result.size ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain domain = result.get ( 0 ) ; org.junit.Assert.assertEquals ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 , domain.getId ( ) ) ; org.junit.Assert.assertEquals ( "Wrong committed disk size" , 8 , domain.getCommittedDiskSize ( ) ) ; org.junit.Assert.assertEquals ( "Wrong actual disk size" , 4 , domain.getActualImagesSize ( ) ) ; }
public static void flatGroups ( org.ovirt.engine.api.extensions.ExtMap principal ) { java.util.Map < java.lang.String , org.ovirt.engine.api.extensions.ExtMap > accumulator = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups ( principal , PrincipalRecord.GROUPS , accumulator ) ; principal.put ( PrincipalRecord.GROUPS , new java.util.ArrayList ( accumulator.values ( ) ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { validateParameters ( network , getRequiredAddFields ( ) ) ; org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter ( ) ; dataCenter.setId ( dataCenterId.toString ( ) ) ; network.setDataCenter ( dataCenter ) ; org.ovirt.engine.api.model.Network entity = map ( network ) ; org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = getAddParameters ( network , entity ) ; return performCreate ( addAction , params , new org.ovirt.engine.api.restapi.resource.DataCenterNetworkIdResolver ( network.getName ( ) , params.getStoragePoolId ( ) . toString ( ) ) ) ; }
public void edit ( final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel object ) { setPanel ( object ) ; if ( ( object.getKeyValueLines ( ) . getItemsChangedEvent ( ) . getListeners ( ) . size ( ) ) == 0 ) { object.getKeyValueLines ( ) . getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.core.compat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { setPanel ( object ) ; } } ) ; } }
public void testRemoveStorageDomainNull ( ) throws java.lang.Exception { setUpGetEntityExpectations ( ) ; javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; setUriInfo ( uriInfo ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { assertEquals ( 400 , wae.getResponse ( ) . getStatus ( ) ) ; } }
public static void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getUpHostListByCluster ( aQuery , clusterName , null ) ; }
private void runQueryByIdParameter ( org.ovirt.engine.core.common.queries.VdcQueryType queryType , org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.AsIsAsyncConverter ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( queryType , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void stats ( ) { if ( org.ovirt.engineextensions.aaa.ldap.Framework.log.isDebugEnabled ( ) ) { long now = new java.util.Date ( ) . getTime ( ) ; if ( now > ( nextStats ) ) { nextStats = now + ( statsTTL ) ; for ( org.ovirt.engineextensions.aaa.ldap.Framework.ConnectionPoolEntry entry : connectionPools.values ( ) ) { org.ovirt.engineextensions.aaa.ldap.Framework.log.debug ( "Stats: {} {}" , entry.name , entry.connectionPool.getConnectionPoolStatistics ( ) ) ; } } } }
public void toByteArrayAllNoll ( ) { final byte [ ] allNullArray = org.ovirt.engine.core.utils.GuidUtils.toByteArray ( java.util.UUID.fromString ( "00000000-0000-0000-0000-000000000000" ) ) ; org.junit.Assert.assertNotNull ( allNullArray ) ; for ( int i = 0 ; i < 16 ; i ++ ) { org.junit.Assert.assertEquals ( 0 , allNullArray [ i ] ) ; } }
protected void executeCommand ( ) { completeGenerationInfo ( ) ; vdsCommandsHelper.runVdsCommandWithFailover ( VDSCommandType.CopyVolumeData , new org.ovirt.engine.core.common.vdscommands.CopyVolumeDataVDSCommandParameters ( org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getStorageJobId ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getSrcInfo ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getDstInfo ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . isCollapse ( ) ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getStoragePoolId ( ) , this ) ; org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.setSucceeded ( true ) ; }
public void testChangeDiskProfileForDisk ( ) { org.ovirt.engine.core.common.businessentities.storage.image_storage_domain_map image_storage_domain_map = dao.getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( 0 ) ; org.junit.Assert.assertThat ( "Same source and dest disk profile id, cannot perform test" , image_storage_domain_map.getDiskProfileId ( ) , org.hamcrest.CoreMatchers.not ( org.hamcrest.CoreMatchers.equalTo ( FixturesTool.DISK_PROFILE_2 ) ) ) ; dao.updateDiskProfileByImageGroupIdAndStorageDomainId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DISK_ID , org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DOMAIN_ID , FixturesTool.DISK_PROFILE_2 ) ; image_storage_domain_map = dao.getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) . get ( 0 ) ; org.junit.Assert.assertEquals ( "disk profile wasn't changed" , image_storage_domain_map.getDiskProfileId ( ) , FixturesTool.DISK_PROFILE_2 ) ; }
private void prepareStorageServer ( org.ovirt.engine.core.common.action.HostStoragePoolParametersBase parameters , java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > res = org.ovirt.engine.core.bll.storage.ISCSIStorageHelper.updateIfaces ( connections , parameters.getVds ( ) . getId ( ) ) ; connections.clear ( ) ; connections.addAll ( res ) ; }
public void getVmChangedFieldsForNextRun ( org.ovirt.engine.core.common.businessentities.VM original , org.ovirt.engine.core.common.businessentities.VM updated , org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParameters , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmChangedFieldsForNextRun , new org.ovirt.engine.core.common.queries.GetVmChangedFieldsForNextRunParameters ( original , updated , updateVmParameters ) , aQuery ) ; }
private org.ovirt.engine.api.model.Network getNetworkById ( java.lang.String networkId , java.util.List < org.ovirt.engine.api.model.Network > networks ) { for ( org.ovirt.engine.api.model.Network network : networks ) { if ( network.getId ( ) . toString ( ) . equals ( networkId ) ) { return network ; } } return null ; }
protected void initUser ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.VmPoolUserCommandBase.getDbUser ( ) ; if ( ( user != null ) && ( ( user.getId ( ) ) == null ) ) { user.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.VmPoolUserCommandBase.getDbUserDAO ( ) . save ( user ) ; } }
public void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.AsyncTask task ) { org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskParameterSource parameterSource = getTaskParameterSource ( task ) ; parameterSource.addValue ( "started_at" , task.getStartTime ( ) ) ; parameterSource.addValue ( "storage_pool_id" , task.getStoragePoolId ( ) ) ; parameterSource.addValue ( "async_task_type" , task.getTaskType ( ) ) ; getCallsHandler ( ) . executeModification ( "Insertasync_tasks" , parameterSource ) ; }
public void setOriginalNetParams ( org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters originalNetParams ) { this . originalNetParams = originalNetParams ; }
protected boolean setUpPasswordlessSSH ( org.ovirt.engine.core.compat.Guid masterUpServerId , java.util.Set < org.ovirt.engine.core.compat.Guid > remoteServerSet , java.lang.String userName ) { java.util.List < java.lang.String > pubKeys = readPubKey ( masterUpServerId ) ; boolean canProceed = ( pubKeys != null ) && ( ( pubKeys.size ( ) ) > 0 ) ; if ( canProceed ) { canProceed = updatePubKeysToRemoteHosts ( pubKeys , remoteServerSet , userName ) ; } return canProceed ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.StartRebalanceGlusterVolume , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRebalanceVDSParameters ( upServer.getId ( ) , getGlusterVolumeName ( ) , getParameters ( ) . isFixLayoutOnly ( ) , getParameters ( ) . isForceAction ( ) ) ) ; if ( getSucceeded ( ) ) { setSucceeded ( returnValue.getSucceeded ( ) ) ; } else { handleVdsError ( AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED , returnValue.getVdsError ( ) . getMessage ( ) ) ; return ; } }
protected void executeCommand ( ) { getNetwork ( ) . setLabel ( null ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction ( VdcActionType.UpdateNetwork , new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( getNetwork ( ) . getDataCenterId ( ) , getNetwork ( ) ) ) ; if ( ! ( result.getSucceeded ( ) ) ) { propagateFailure ( result ) ; } setSucceeded ( result.getSucceeded ( ) ) ; }
public void upgrade ( ) { final org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItem ( ) ; org.ovirt.engine.ui.uicommonweb.models.Model model = org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.createUpgradeModel ( host ) ; setWindow ( model ) ; model.initialize ( ) ; model.getCommands ( ) . add ( org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand ( "Cancel" , this ) ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > parseLUNList ( java.util.Map < java.lang.String , java.lang.Object > [ ] lunList ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > result = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ( lunList.length ) ; for ( java.util.Map < java.lang.String , java.lang.Object > xlun : lunList ) { result.add ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLunFromXmlRpc ( xlun ) ) ; } return result ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( "tag1" , "desc1" ) ; tagsDirector.AddTag ( tag ) ; tag.settag_name ( "new name" ) ; tagsDirector.UpdateTag ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags fromDirector = tagsDirector.GetTagById ( tag.gettag_id ( ) ) ; org.junit.Assert.assertEquals ( tag.gettag_name ( ) , fromDirector.gettag_name ( ) ) ; }
protected boolean isQuotaDependant ( ) { boolean result ; if ( ( getActionType ( ) . getQuotaDependency ( ) ) == ( VdcActionType.QuotaDependency.NONE ) ) result = false ; else if ( ! ( org.ovirt.engine.core.bll.CommandBase.isInternalExecution ( ) ) ) result = true ; else if ( getActionType ( ) . isQuotaDependentAsInternalCommand ( ) ) result = true ; else result = false ; return result ; }
public org.ovirt.engine.core.common.businessentities.TagsVmMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.TagsVmMap entity = new org.ovirt.engine.core.common.businessentities.TagsVmMap ( ) ; entity.settag_id ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "tag_id" ) ) ) ; entity.setvm_id ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( rs.getString ( "vm_id" ) ) ) ; entity.setDefaultDisplayType ( ( ( java.lang.Integer ) ( rs.getObject ( "DefaultDisplayType" ) ) ) ) ; return entity ; }
public void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public void diskImagesAlreadyExistBothExist ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) . when ( validator ) . getExistingDisk ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.junit.Assert.assertThat ( validator.diskImagesAlreadyExist ( ) , org.junit.matchers.JUnitMatchers.both ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST ) ) . and ( org.ovirt.engine.core.bll.validator.ValidationResultMatchers.replacements ( org.junit.matchers.JUnitMatchers.hasItem ( org.ovirt.engine.core.bll.validator.DiskImagesValidatorTest.createAliasReplacements ( disk1 , disk2 ) ) ) ) ) ; }
private void updateAdminStatus ( org.ovirt.engine.core.common.businessentities.Permissions perm ) { org.ovirt.engine.core.common.businessentities.Role role = org.ovirt.engine.core.bll.AddPermissionCommand.getRoleDao ( ) . get ( perm.getRoleId ( ) ) ; if ( ( role.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.RoleType.ADMIN ) ) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.setIsAdminGUIFlag ( perm.getAdElementId ( ) , true ) ; } }
public boolean isFileDomain ( ) { return ( ( ( ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageType.NFS ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageType.POSIXFS ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageType.GLUSTERFS ) ) ) || ( ( this ) == ( org.ovirt.engine.core.common.businessentities.StorageType.GLANCE ) ) ; }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
private void mockStoragePool ( ) { final org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool.setId ( command.getParameters ( ) . getStoragePoolId ( ) ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( pool ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Quota quota ) { if ( ( quota.getQuotaEnforcementType ( ) ) == null ) { return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable ( ) ; } switch ( quota.getQuotaEnforcementType ( ) ) { case HARD_ENFORCEMENT : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconEnforce ( ) ; case SOFT_ENFORCEMENT : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconAudit ( ) ; case DISABLED : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable ( ) ; default : return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaDcStatusColumn.resources.iconDisable ( ) ; } }
private double getStoredStackPanelWidth ( java.lang.String key ) { java.lang.String widthString = clientStorage.getLocalItem ( key ) ; double width = org.ovirt.engine.ui.webadmin.widget.main.TabbedSplitLayoutPanel.DEFAULT_STACK_PANEL_WIDTH ; try { if ( widthString != null ) { width = java.lang.Double.valueOf ( widthString ) ; } } catch ( java.lang.NumberFormatException nfe ) { } return width ; }
public org.ovirt.engine.api.model.Nics list ( ) { org.ovirt.engine.api.model.Nics nics = new org.ovirt.engine.api.model.Nics ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > entities = getBackendCollection ( QueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( instanceTypeId ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity : entities ) { org.ovirt.engine.api.model.Nic nic = populate ( map ( entity ) , entity ) ; nics.getNics ( ) . add ( addLinks ( nic ) ) ; } return nics ; }
public static void getAAANamespaces ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ) ( source ) ) : new java.util.HashMap < java.lang.String , java.util.List < java.lang.String > > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAvailableNamespaces , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public void testBootProtocolSetForRoleNetworkWhenBootProtocolIsDhcp ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.DHCP , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForRoleNetworkWhenNullValuedIpConfiguration ( true , false , false , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , network , attachment ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( ReturnValue ) ) ; setExportPath ( ( connection == null ? null : connection.getconnection ( ) ) ) ; getVmsFromExportDomain ( dataCenter.getId ( ) , exportDomain.getId ( ) ) ; }
public java.util.concurrent.Future < java.lang.Void > close ( ) { return disconnect ( ) ; }
public void testBuildVmOnNewTemplate ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.buildVmOnNewTemplate ( model , origVm ) ; verifyBuiltCommonVm ( vm.getStaticData ( ) ) ; verifyBuiltOrigVm ( origVm , vm ) ; org.junit.Assert.assertEquals ( origVm.getDedicatedVmForVdsList ( ) , vm.getDedicatedVmForVdsList ( ) ) ; org.junit.Assert.assertEquals ( origVm.getMigrationSupport ( ) , vm.getMigrationSupport ( ) ) ; org.junit.Assert.assertEquals ( origVm.getMigrationDowntime ( ) , vm.getMigrationDowntime ( ) ) ; }
private static void getVlanParentInterface ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVlanParent , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
public void onSuccess ( final org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.action.VdcActionType , org.ovirt.engine.core.common.action.VdcActionParametersBase > operation , final org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { org.ovirt.engine.ui.frontend.Frontend.logger.finer ( "Frontend: sucessfully executed runAction, determining result!" ) ; handleActionResult ( actionType , parameters , result , ( callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK ) , state , showErrorDialog ) ; fireAsyncActionSucceededEvent ( state ) ; }
public void testListCrash ( ) { java.lang.Throwable t = new java.lang.RuntimeException ( FAILURE ) ; setUpVnicProfilesQueryExpectations ( t ) ; javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest.setUpUriExpectations ( null ) ; collection.setUriInfo ( uriInfo ) ; verifyFault ( org.ovirt.engine.api.restapi.resource.AbstractBackendVnicProfilesResourceTest.assertThrows ( javax.ws.rs.WebApplicationException.class , this :: getCollection ) , org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_SERVER_LOCALE , t ) ; }
public void testGetVdsCapabilities ( ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { org.ovirt.vdsm.jsonrpc.client.JsonRpcClient client = org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient ( org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.HOST_ADDRESS , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.PORT , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.TIMEOUT , 0 , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.TIMEOUT , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.TIMEOUT , true , "TLSv1" , java.lang.Runtime.getRuntime ( ) . availableProcessors ( ) , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.DEFAULT_REQUEST_QUEUE , org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcIntegrationTest.DEFAULT_RESPONSE_QUEUE ) ; final org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getCapabilities" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > map = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( client , request ) ; org.junit.Assert.assertTrue ( map.isEmpty ( ) ) ; }
protected boolean doDomainsUseConnection ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection ) { if ( ( ( domains ) == null ) || ( domains.isEmpty ( ) ) ) { domains = getStorageDomainsByConnId ( connection.getid ( ) ) ; } return ( ( domains ) != null ) && ( ! ( domains.isEmpty ( ) ) ) ; }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void setImagesToModel ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , java.util.List < java.lang.String > images ) { java.lang.String oldCdImage = ( ( java.lang.String ) ( model.getCdImage ( ) . getSelectedItem ( ) ) ) ; model.getCdImage ( ) . setItems ( images ) ; model.getCdImage ( ) . setSelectedItem ( ( oldCdImage != null ? oldCdImage : org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault ( images ) ) ) ; }
private static org.ovirt.engine.core.common.businessentities.DiskImage createDiskImageTemplate ( ) { org.ovirt.engine.core.common.businessentities.DiskImage i = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; i.setSizeInGigabytes ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.USED_SPACE_GB ) + ( org.ovirt.engine.core.bll.AddVmCommandTest.AVAILABLE_SPACE_GB ) ) ) ; i.setActualSizeInBytes ( ( ( ( ( org.ovirt.engine.core.bll.AddVmCommandTest.REQUIRED_DISK_SIZE_GB ) * 1024L ) * 1024L ) * 1024L ) ) ; i.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; i.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.AddVmCommandTest.STORAGE_DOMAIN_ID_1 ) ) ) ; return i ; }
public void testExistingPassDiscardFunctionalityIsNotPreservedSdDiscardSupportBreaks ( ) { storageDomain.setSupportsDiscard ( true ) ; createVmDiskOnSd ( false , false ) ; createVmDiskOnSd ( false , true ) ; org.junit.Assert.assertFalse ( discardHelper.isExistingPassDiscardFunctionalityPreserved ( java.util.Arrays.asList ( createLunWithDiscardSupport ( 0L ) , createLunWithDiscardSupport ( 2048L ) ) , storageDomain ) ) ; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity getDistributedVolume ( org.ovirt.engine.core.compat.Guid volumeId ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getVolume ( volumeId ) ; volume.setStatus ( ( volumeId == ( volumeId1 ) ? org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus.UP : org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus.DOWN ) ) ; volume.setBricks ( getBricks ( volumeId , 2 ) ) ; volume.setVolumeType ( GlusterVolumeType.DISTRIBUTE ) ; volume.setClusterId ( CLUSTER_ID ) ; return volume ; }
public boolean isHotPlugAvailable ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; return ( vm != null ) && ( ( ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Suspended ) ) ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetNetworksByDataCenterId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.dataCenterId } , new java.util.ArrayList < org.ovirt.engine.api.model.Network > ( ) ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private java.lang.String getPublicEntity ( java.lang.String entityName , java.lang.String [ ] periods , int i ) { java.lang.String exception = org.ovirt.engine.sdk.codegen.rsdl.RsdlCodegen.checkNamingException ( org.ovirt.engine.sdk.codegen.rsdl.RsdlCodegen.ENTITY_NAME_EXCEPTIONS , entityName , periods , i ) ; if ( exception != null ) { return exception ; } if ( this . entitiesMap.containsKey ( entityName.toLowerCase ( ) ) ) { return this . entitiesMap.get ( entityName.toLowerCase ( ) ) ; } throw new java.lang.RuntimeException ( ( ( "Public entity \"" + entityName ) + "\" fetch has failed." ) ) ; }
public static < T extends java.lang.Enum > java.lang.String [ ] GetNames ( java.lang.Class < T > clazz ) { java.util.ArrayList < java.lang.String > returnValues = new java.util.ArrayList < java.lang.String > ( ) ; if ( ! ( clazz.isEnum ( ) ) ) { throw new java.lang.RuntimeException ( ( "Class is not an Enum: " + ( clazz.getName ( ) ) ) ) ; } for ( java.lang.Enum e : clazz.getEnumConstants ( ) ) { returnValues.add ( e.name ( ) ) ; } return returnValues.toArray ( new java.lang.String [ 0 ] ) ; }
protected void endWithFailure ( ) { setIsVmRunningStateless ( ) ; rollbackQuota ( ) ; if ( _isVmRunningStateless ) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) . get ( 0 ) , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.RunVmCommand.getCompensationContext ( ) ) ) ; setSucceeded ( vdcReturnValue.getSucceeded ( ) ) ; } else { super . endWithFailure ( ) ; } }
protected void alertPowerManagementStatusFailed ( java.lang.String reason ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; alert.setVdsId ( org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters ( ) . getTargetVdsID ( ) ) ; alert.addCustomValue ( "Reason" , reason ) ; auditLogDirector.log ( alert , AuditLogType.VDS_ALERT_FENCE_TEST_FAILED ) ; }
public org.ovirt.engine.api.model.Networks list ( ) { org.ovirt.engine.api.model.Networks networks ; if ( isFiltered ( ) ) { networks = mapCollection ( getBackendCollection ( queryType , getQueryParameters ( ) , SearchType.Network ) ) ; } else { networks = mapCollection ( getBackendCollection ( SearchType.Network ) ) ; } for ( org.ovirt.engine.api.model.Network network : networks.getNetworks ( ) ) { network.setDisplay ( null ) ; } return networks ; }
protected java.util.List < java.lang.String > getHeaderDeclarations ( java.util.List < org.ovirt.engine.sdk.entities.Header > headers ) { java.util.List < java.lang.String > paramDecls = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.sdk.entities.Header header : headers ) { java.lang.String paramName = org.ovirt.engine.sdk.codegen.utils.FormatUtils.toJava ( header.getName ( ) ) ; java.lang.String paramType = org.ovirt.engine.sdk.codegen.utils.TypeUtils.toJava ( org.ovirt.engine.sdk.codegen.templates.AbstractOverloadableTemplate.XSD_STRING_TYPE ) ; org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate paramDeclTemplate = new org.ovirt.engine.sdk.codegen.templates.MethodParameterTemplate ( ) ; java.lang.String paramDecl = paramDeclTemplate.evaluate ( paramType , paramName ) ; paramDecls.add ( paramDecl ) ; } return paramDecls ; }
protected boolean validateVM ( org.ovirt.engine.core.bll.validator.VmValidator vmValidator ) { org.ovirt.engine.core.bll.validator.LiveSnapshotValidator validator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool ( ) . getCompatibilityVersion ( ) , org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVds ( ) ) ; return ( ( ( org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm ( ) . isDown ( ) ) || ( validate ( validator.validateSnapshot ( ) ) ) ) && ( validate ( vmValidator.vmNotSavingRestoring ( ) ) ) ) && ( validate ( vmValidator.validateVmStatusUsingMatrix ( VdcActionType.CreateAllSnapshotsFromVm ) ) ) ; }
protected void removeVmNetwork ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > interfaces = getVmNetworkInterfaceDao ( ) . getAllForVm ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; if ( interfaces != null ) { for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : interfaces ) { org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . freeMac ( iface.getMacAddress ( ) ) ; } } }
public static java.util.Set < org.ovirt.engine.core.compat.Guid > getAllStorageIdsForImageIds ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images ) { java.util.Set < org.ovirt.engine.core.compat.Guid > domainsIds = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { domainsIds.addAll ( image.getStorageIds ( ) ) ; } return domainsIds ; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster ( int index ) { org.ovirt.engine.api.restapi.resource.Cluster entity = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ; org.mockito.Mockito.when ( entity.getId ( ) ) . thenReturn ( GUIDS [ index ] ) ; org.mockito.Mockito.when ( entity.getName ( ) ) . thenReturn ( NAMES [ index ] ) ; org.mockito.Mockito.when ( entity.getDescription ( ) ) . thenReturn ( DESCRIPTIONS [ index ] ) ; return entity ; }
private void closeChannel ( ) { try { if ( ( this . channel ) != null ) { this . channel.close ( ) ; } } catch ( java.io.IOException e ) { } finally { this . channel = null ; } }
private void externalHostGroups_SelectedItemChanged ( ) { org.ovirt.engine.core.common.businessentities.ExternalHostGroup dhg = ( ( org.ovirt.engine.core.common.businessentities.ExternalHostGroup ) ( getExternalHostGroups ( ) . getSelectedItem ( ) ) ) ; if ( dhg != null ) { getHost ( ) . setEntity ( ( ( ( getName ( ) . getEntity ( ) ) + "." ) + ( dhg.getDomainName ( ) ) ) ) ; } }
protected void setUpGetHostByNameExpectations ( int idx ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations ( org.mockito.Mockito.spy ( new org.ovirt.engine.core.common.businessentities.VDS ( ) ) , idx ) ; setUpGetEntityExpectations ( VdcQueryType.GetVdsByName , org.ovirt.engine.core.common.queries.NameQueryParameters.class , new java.lang.String [ ] { "Name" } , new java.lang.Object [ ] { NAMES [ idx ] } , host ) ; }
public org.ovirt.engine.api.model.Configuration adapt ( org.ovirt.engine.api.v3.types.V3Configuration from ) { org.ovirt.engine.api.model.Configuration to = new org.ovirt.engine.api.model.Configuration ( ) ; if ( from.isSetData ( ) ) { to.setData ( from.getData ( ) ) ; } if ( from.isSetType ( ) ) { to.setType ( org.ovirt.engine.api.model.ConfigurationType.valueOf ( from.getType ( ) ) ) ; } return to ; }
protected void ExecuteIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.VDS vds = org.ovirt.engine.core.vdsbroker.irsbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( this . getCurrentIrsProxyData ( ) . getCurrentVdsId ( ) ) ; status = org.ovirt.engine.core.vdsbroker.irsbroker.DestroyStoragePoolVDSCommand.getIrsProxy ( ) . destroyStoragePool ( org.ovirt.engine.core.vdsbroker.irsbroker.DestroyStoragePoolVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , vds.getVdsSpmId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.DestroyStoragePoolVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) ) ; org.ovirt.engine.core.vdsbroker.irsbroker.DestroyStoragePoolVDSCommand.ProceedProxyReturnValue ( ) ; org.ovirt.engine.core.vdsbroker.irsbroker.DestroyStoragePoolVDSCommand.RemoveIrsProxy ( ) ; }
public void getHostNumaTopologyByHostId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VdsNumaNode > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVdsNumaNodesByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , asyncQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionList = new java.util.ArrayList < org.ovirt.engine.core.bll.utils.PermissionSubject > ( ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVdsGroupId ( ) , org.ovirt.engine.core.common.VdcObjectType.VdsGroups , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getActionType ( ) . getActionGroup ( ) ) ) ; permissionList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getVmIdFromSnapshot ( ) , org.ovirt.engine.core.common.VdcObjectType.VM , org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getActionType ( ) . getActionGroup ( ) ) ) ; addPermissionSubjectForAdminLevelProperties ( permissionList ) ; return permissionList ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterHostsPubKeyReturnForXmlRpc glusterGeoRepKeysGet ( ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.geoRepKeysGet" ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.gluster.GlusterHostsPubKeyReturnForXmlRpc ( response ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; updateDefaultNetworkFilterIfRequired ( ) ; vnicProfileDao.save ( org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile ( ) ) ; networkHelper.addPermissionsOnVnicProfile ( org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getUserId ( ) , org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile ( ) . getId ( ) , org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters ( ) . isPublicUse ( ) ) ; org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue ( ) . setActionReturnValue ( org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.setSucceeded ( true ) ; }
private void endCreateAllSnapshots ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance ( ) . endAction ( VdcActionType.CreateAllSnapshotsFromVm , getCreateSnapshotParameters ( ) , org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContextForTasks ( enclosingCommand.getContext ( ) ) ) ; enclosingCommand.getReturnValue ( ) . setSucceeded ( returnValue.getSucceeded ( ) ) ; }
public void mockConfig ( ) { java.util.HashSet < org.ovirt.engine.core.compat.Version > supportedClusters = new java.util.HashSet < > ( ) ; supportedClusters.add ( version ) ; org.mockito.Mockito.when ( host.getSupportedClusterVersionsSet ( ) ) . thenReturn ( supportedClusters ) ; org.mockito.Mockito.when ( host.getVdsGroupCompatibilityVersion ( ) ) . thenReturn ( version ) ; configRule.mockConfigValue ( ConfigValues.DefaultRouteSupported , version , java.lang.Boolean.FALSE ) ; configRule.mockConfigValue ( ConfigValues.DefaultMtu , 1500 ) ; }
public static void GetNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.core.notifier.methods.NotificationMethodMapBuilder.NotificationMethodFactoryMapper createMethodsMapper ( java.util.List < org.ovirt.engine.core.common.businessentities.EventNotificationMethod > notificationMethods , java.util.Map < java.lang.String , java.lang.String > properties ) { org.ovirt.engine.core.notifier.methods.NotificationMethodMapBuilder.NotificationMethodFactoryMapper methodMapper = new org.ovirt.engine.core.notifier.methods.NotificationMethodMapBuilder.NotificationMethodFactoryMapper ( ) ; for ( org.ovirt.engine.core.common.businessentities.EventNotificationMethod method : notificationMethods ) { if ( EventNotificationMethods.EMAIL.equals ( method.getmethod_type ( ) ) ) { methodMapper.addMethodFactory ( EventNotificationMethods.EMAIL , new org.ovirt.engine.core.notifier.methods.NotificationMethodFactoryEmailImpl ( properties ) ) ; } } return methodMapper ; }
public java.lang.String getSessionIdBySeqId ( long sessionSequenceId ) { java.lang.String sessionId = null ; for ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.SessionInfo sessionInfo : sessionInfoMap.values ( ) ) { if ( sessionInfo.contentOfSession.get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_SEQ_ID ) . equals ( sessionSequenceId ) ) { sessionId = ( ( java.lang.String ) ( sessionInfo.contentOfSession.get ( org.ovirt.engine.core.bll.aaa.SessionDataContainer.ENGINE_SESSION_ID ) ) ) ; break ; } } return sessionId ; }
public void testGetStorageDomainIdWithPermissions ( ) { mockStoragePoolDAO ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; org.ovirt.engine.core.dao.StorageDomainDAO storageDomainDAOMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageDomainDAO.class ) ; org.mockito.Mockito.when ( storageDomainDAOMock.getIsoStorageDomainIdForPool ( getQueryParameters ( ) . getStoragePoolId ( ) ) ) . thenReturn ( storageDomainId ) ; org.mockito.Mockito.when ( getQuery ( ) . getDbFacade ( ) . getStorageDomainDao ( ) ) . thenReturn ( storageDomainDAOMock ) ; org.junit.Assert.assertEquals ( "wrong storage domain id" , storageDomainId , getQuery ( ) . getStorageDomainIdForQuery ( ) ) ; }
public void run ( ) { int val = counter.incrementAndGet ( ) ; org.ovirt.engine.core.common.businessentities.Tags tag = createTag ( ( "tag" + val ) , ( "desc" + val ) ) ; dao.save ( tag ) ; org.ovirt.engine.core.common.businessentities.Tags fromDb = dao.get ( tag.gettag_id ( ) ) ; org.junit.Assert.assertEquals ( tag , fromDb ) ; dao.remove ( tag.gettag_id ( ) ) ; fromDb = dao.get ( tag.gettag_id ( ) ) ; org.junit.Assert.assertNull ( fromDb ) ; }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; disk.setImageId ( diskImageGuid ) ; java.util.ArrayList < org.ovirt.engine.core.compat.Guid > storageIdList = new java.util.ArrayList < > ( ) ; storageIdList.add ( storageDomainId ) ; disk.setStorageIds ( storageIdList ) ; disk.setStoragePoolId ( storagePoolId ) ; return disk ; }
public void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
private void applyStyles ( ) { cardStatusEditor.addContentWidgetStyleName ( style.cardStatusEditorContent ( ) ) ; pluggedEditor.addContentWidgetStyleName ( style.cardStatusRadioContent ( ) ) ; unpluggedEditor.addContentWidgetStyleName ( style.cardStatusRadioContent ( ) ) ; linkStateEditor.addContentWidgetStyleName ( style.linkStateEditorContent ( ) ) ; linkedEditor.addContentWidgetStyleName ( style.linkStateRadioContent ( ) ) ; unlinkedEditor.addContentWidgetStyleName ( style.linkStateRadioContent ( ) ) ; enableManualMacCheckbox.addContentWidgetStyleName ( style.checkBox ( ) ) ; portMirroringEditor.addContentWidgetStyleName ( style.portMirroringEditor ( ) ) ; }
public void canDoActionFailedVMHasNotDisk ( ) throws java.lang.Exception { initializeCommand ( createParameters ( ) ) ; createNullDisk ( ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST.toString ( ) ) ) ; }
protected boolean validateImages ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesToValidate = getDiskImagesToValidate ( ) ; org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( imagesToValidate ) ; return ( validate ( diskImagesValidator.diskImagesNotLocked ( ) ) ) && ( ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . isQualifiedForLiveSnapshotMerge ( ) ) || ( validate ( diskImagesValidator.diskImagesNotIllegal ( ) ) ) ) ; }
public void addDiskToVm ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk , org.ovirt.engine.core.compat.Guid vmId ) { baseDiskDao.save ( disk ) ; if ( ( disk.getDiskVmElementForVm ( vmId ) ) != null ) { diskVmElementDao.save ( disk.getDiskVmElementForVm ( vmId ) ) ; } final org.ovirt.engine.core.bll.utils.VmDeviceUtils vmDeviceUtils = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.class ) ; vmDeviceUtils.addDiskDevice ( vmId , disk.getId ( ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.aaa.DbUser user ) { if ( user.isAdmin ( ) ) { return getApplicationResources ( ) . adminImage ( ) ; } if ( user.isGroup ( ) ) { return getApplicationResources ( ) . userGroupImage ( ) ; } return getApplicationResources ( ) . userImage ( ) ; }
public void completeExternalNetworkProviderConfigurationsNoNameTest ( ) { org.ovirt.engine.api.model.ExternalNetworkProviderConfigurations configurations = getExternalNetworkProviderConfigurations ( 1 ) ; configurations.getExternalNetworkProviderConfigurations ( ) . get ( 0 ) . getExternalNetworkProvider ( ) . setName ( null ) ; try { org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.completeExternalNetworkProviderConfigurations ( resource , configurations ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , Response.Status.BAD_REQUEST.getStatusCode ( ) ) ; } }
protected void executeNetworkCommand ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op1 , org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > op2 , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > allNics , java.lang.Object ... params ) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToDetach = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ) ( op1 ) ) ; assert networkToDetach.isAttached ( ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.detachNetwork ( allNics , networkToDetach ) ; }
protected void insertAsyncTaskPlaceHolders ( ) { persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.HibernateVmCommand.getParameters ( ) . getParentCommand ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.SAVE_IMAGE_TASK_KEY ) ; persistAsyncTaskPlaceHolder ( org.ovirt.engine.core.bll.HibernateVmCommand.getParameters ( ) . getParentCommand ( ) , org.ovirt.engine.core.bll.HibernateVmCommand.SAVE_RAM_STATE_TASK_KEY ) ; }
public void testCreatingBusinessEntityMapWithDuplicatesAmongIds ( ) { org.ovirt.engine.core.compat.Guid itemId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem first = new org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem ( itemId , "name" ) ; org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem second = new org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem ( itemId , "different name" ) ; org.junit.jupiter.api.Assertions.assertThrows ( java.lang.IllegalArgumentException.class , ( ) -> new org.ovirt.engine.core.common.businessentities.BusinessEntityMap < > ( java.util.Arrays.asList ( first , second ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.snapshot ( vmId , disks ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private void setDataCenterDetails ( ) { org.ovirt.engine.core.common.businessentities.StoragePool dc = org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getParameters ( ) . getStoragePool ( ) ; setCompatibilityVersion ( dc.getcompatibility_version ( ) . toString ( ) ) ; setStoragePoolType ( dc.getStorageType ( ) . name ( ) ) ; setQuotaEnforcementType ( dc.getQuotaEnforcementType ( ) . name ( ) ) ; }
protected void build ( org.ovirt.engine.core.common.businessentities.VmBase vm , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model ) { model.getName ( ) . setEntity ( vm.getName ( ) ) ; model.getDescription ( ) . setEntity ( vm.getDescription ( ) ) ; model.getVmId ( ) . setEntity ( vm.getId ( ) . toString ( ) ) ; }
private void runOnce ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem ( ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getVmById ( new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery ( new org.ovirt.engine.ui.frontend.AsyncCallback < org.ovirt.engine.core.common.businessentities.VM > ( ) { @ java.lang.Override public void onSuccess ( org.ovirt.engine.core.common.businessentities.VM result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( result , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.this ) ; setWindow ( runOnceModel ) ; runOnceModel.init ( ) ; } } ) , vm.getId ( ) ) ; }
public void loadVmsFromExportDomain ( ) { startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmsFromExportDomain , new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters ( getDataCenters ( ) . getSelectedItem ( ) . getId ( ) , exportDomain.getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { updateVms ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ; }
protected void doTestBadAdd ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetVmByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , setUpVm ( GUIDS [ 1 ] ) ) ; setUpGetConsoleExpectations ( new int [ ] { 0 } ) ; setUpGetSoundcardExpectations ( new int [ ] { 0 } ) ; super . doTestBadAdd ( valid , success , detail ) ; }
private javax.ws.rs.core.Response copy ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters params = new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( guid ) ; if ( action.isSetHost ( ) ) { validateParameters ( action.getHost ( ) , "id|name" ) ; org.ovirt.engine.core.compat.Guid hostId = getHostId ( action ) ; params.setSourceServerId ( hostId ) ; } return doAction ( VdcActionType.UpdateGlusterHook , params , action ) ; }
public void testRemove ( ) { dao.remove ( existingVds.getId ( ) ) ; statisticsDao.remove ( existingVds.getId ( ) ) ; staticDao.remove ( existingVds.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VdsStatic resultStatic = staticDao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultStatic ) ; org.ovirt.engine.core.common.businessentities.VdsDynamic resultDynamic = dao.get ( existingVds.getId ( ) ) ; org.junit.Assert.assertNull ( resultDynamic ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , _lunConnections , lunMapping , physicalVolumeId , deviceSize , pvSize , discardMaxSize , discardZeroesData , lunType , pathsDictionary , pathsCapacity , vendorName , productId , serial , vendorId , volumeGroupId , status , diskId , diskAlias , storageDomainId , storageDomainName ) ; }
private boolean stopSuspendedVm ( ) { org.ovirt.engine.core.bll.StopVmCommandBase.setVm ( null ) ; final org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getStatus ( ) ; if ( vmStatus == ( org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked ) ) { return false ; } updateVmStatus ( VMStatus.ImageLocked ) ; if ( ! ( removeVmHibernationVolumes ( ) ) ) { updateVmStatus ( vmStatus ) ; return false ; } return true ; }
protected void doExecute ( ) { super . doExecute ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = getParameters ( ) ; if ( parameters.isEmpty ( ) ) { cancel ( ) ; return ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( getActionType ( ) , parameters , new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel localModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel ) ( result.getState ( ) ) ) ; localModel.cancel ( ) ; } } , this ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > GetWindowsOsTypes ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ) != null ) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmOsType > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmOsType type : org.ovirt.engine.core.common.businessentities.VmOsType.values ( ) ) { if ( type.isWindows ( ) ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes.add ( type ) ; } } return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.windowsOsTypes ; }
public void testValidateVmDown ( ) { prepareForVmValidatorTests ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotValidator ) . vmSnapshotDisksNotDuringMerge ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; cmd.getVm ( ) . setStatus ( VMStatus.Down ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( cmd ) ; }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
protected void init ( ) { super . init ( ) ; setVmName ( org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . getVmName ( ) ) ; setVdsId ( org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . getProxyHostId ( ) ) ; setClusterId ( org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . getClusterId ( ) ) ; setStoragePoolId ( org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . getStoragePoolId ( ) ) ; setStorageDomainId ( org.ovirt.engine.core.bll.ConvertVmCommand.getParameters ( ) . getStorageDomainId ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { if ( isTemplateVersion ( ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getBaseTemplateId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.TEMPLATE , EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; } return super . getSharedLocks ( ) ; }
public static org.ovirt.engine.api.model.Cpu map ( org.ovirt.engine.core.common.businessentities.ServerCpu entity , org.ovirt.engine.api.model.Cpu template ) { org.ovirt.engine.api.model.Cpu model = ( template != null ) ? template : new org.ovirt.engine.api.model.Cpu ( ) ; model.setName ( entity.getCpuName ( ) ) ; model.setLevel ( entity.getLevel ( ) ) ; model.setArchitecture ( org.ovirt.engine.api.restapi.types.CPUMapper.map ( entity.getArchitecture ( ) , null ) ) ; return model ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( ev.equals ( ConsoleModel.ErrorEventDefinition ) ) && ( ( sender instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel ) || ( sender instanceof org.ovirt.engine.ui.uicommonweb.models.vms.RdpConsoleModel ) ) ) { consoleModelError ( sender , getConsoleModelErrorMessage ( sender , ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs ) ( args ) ) ) ) ; } }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > > configs = returnValue.getReturnValue ( ) ; if ( configs != null ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > clusterConfigOptions = configs.getFirst ( ) ; java.util.Collections.sort ( clusterConfigOptions , java.util.Comparator.comparing ( GlusterVolumeSnapshotConfig :: getParamName ) ) ; setModelItems ( getClusterConfigOptions ( ) , clusterConfigOptions , existingClusterConfigs ) ; } else { getClusterConfigOptions ( ) . setItems ( null ) ; } }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ; org.ovirt.engine.core.bll.ValidationResult slavesValidationResult = new org.ovirt.engine.core.bll.ValidationResult ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , "slaveA" ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostSetupNetworksValidator.VAR_NETWORK_NAME , "networkName" ) ) ; org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , slavesValidationResult , slavesValidationResult ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "storageDomainId" , storageDomainId ) . append ( "imageGroupId" , imageGroupId ) . append ( "baseImageId" , baseImageId ) . append ( "topImageId" , topImageId ) . append ( "baseImageGeneration" , baseImageGeneration ) . build ( ) ; }
protected void persistCollectedData ( ) { super . persistCollectedData ( ) ; org.ovirt.engine.core.dao.VdsDynamicDAO vdsDynamicDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDynamicDao ( ) ; org.ovirt.engine.core.common.businessentities.VdsDynamic hostFromDb = vdsDynamicDao.get ( getVds ( ) . getId ( ) ) ; hostFromDb.setSupportedClusterLevels ( getVds ( ) . getDynamicData ( ) . getSupportedClusterLevels ( ) ) ; vdsDynamicDao.update ( hostFromDb ) ; }
protected org.ovirt.engine.core.common.businessentities.storage_domains getSourceDomain ( ) { org.ovirt.engine.core.common.businessentities.storage_domains sd = new org.ovirt.engine.core.common.businessentities.storage_domains ( ) ; sd.setstorage_domain_type ( StorageDomainType.ImportExport ) ; sd.setstatus ( StorageDomainStatus.Active ) ; return sd ; }
private java.lang.String startUserDialog ( ) throws java.io.IOException { org.ovirt.engine.core.config.EngineConfigLogic.log.debug ( "starting user dialog." ) ; java.lang.String user = null ; while ( org.apache.commons.lang.StringUtils.isBlank ( user ) ) { org.ovirt.engine.core.config.EngineConfigLogic.console.writeLine ( "Please enter user: " ) ; user = org.ovirt.engine.core.config.EngineConfigLogic.console.readLine ( ) ; } return user ; }
public void addAllocateNewMacAddress ( ) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = createNewInterface ( ) ; java.lang.String newMac = org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ; org.mockito.Mockito.when ( macPoolManager.allocateNewMac ( ) ) . thenReturn ( newMac ) ; vmInterfaceManager.add ( iface , org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance ( ) , true , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.OS_ID , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.VERSION_3_2 ) ; org.junit.Assert.assertEquals ( newMac , iface.getMacAddress ( ) ) ; }
public org.ovirt.engine.sdk.decorators.VM update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.VM.class , org.ovirt.engine.sdk.decorators.VM.class , headers ) ; }
private static boolean isExceptionalPluralResource ( java.lang.String method , java.lang.String type ) { return ( "katelloerrata" . equals ( method ) ) && ( "katelloerratum" . equals ( type ) ) ; }
public org.ovirt.engine.core.common.job.Job getJobWithSteps ( final org.ovirt.engine.core.compat.Guid jobId ) { org.ovirt.engine.core.common.job.Job job = jobDao.get ( jobId ) ; if ( job != null ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.VdcObjectType > jobSubjectEntity = jobSubjectEntityDao.getJobSubjectEntityByJobId ( jobId ) ; job.setJobSubjectEntities ( jobSubjectEntity ) ; loadJobSteps ( job ) ; } return job ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.DataCenter dataCenter ) { validateParameters ( dataCenter , "name" ) ; if ( ! ( dataCenter.isSetLocal ( ) ) ) { validateParameters ( dataCenter , "local" ) ; } org.ovirt.engine.core.common.businessentities.StoragePool entity = map ( dataCenter ) ; return performCreate ( ActionType.AddEmptyStoragePool , new org.ovirt.engine.core.common.action.StoragePoolManagementParameter ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
public void onSuccess ( java.lang.Object model1 , java.lang.Object ReturnValue1 ) { org.ovirt.engine.ui.uicommonweb.models.storage.VmBackupModel backupModel1 = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.VmBackupModel ) ( model1 ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue1 ) ) . getReturnValue ( ) ; java.util.Collections.sort ( vms , new org.ovirt.engine.ui.uicommonweb.Linq.VmComparator ( ) ) ; backupModel1.setItems ( vms ) ; }
protected java.lang.Object queryDataCenter ( ) { return storagePoolDao.get ( org.ovirt.engine.core.bll.storage.pool.GetStoragePoolByIdQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.storage.pool.GetStoragePoolByIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.storage.pool.GetStoragePoolByIdQuery.getParameters ( ) . isFiltered ( ) ) ; }
public int hashCode ( ) { return java.util.Objects.hash ( id , hostName , consoleAddress , name , otpValidity , pmEnabled , pmKdumpDetection , port , protocol , sshPort , sshUsername , serverSslEnabled , uniqueId , clusterId , vdsStrength , vdsType , disablePowerManagementPolicy , hostProviderId , openstackNetworkProviderId , currentKernelCmdline , kernelCmdlineParsable , lastStoredKernelCmdline , kernelCmdlineIommu , kernelCmdlineKvmNested , kernelCmdlinePciRealloc , kernelCmdlineUnsafeInterrupts ) ; }
public void onFailed ( org.ovirt.engine.core.compat.Guid cmdId , java.util.List < org.ovirt.engine.core.compat.Guid > childCmdIds ) { org.ovirt.engine.core.bll.CommandBase < ? > commandBase = getCommand ( cmdId ) ; commandBase.getParameters ( ) . setTaskGroupSuccess ( false ) ; endAction ( commandBase , childCmdIds , false ) ; }
public static void clearNetworks ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic , org.ovirt.engine.ui.uicommonweb.models.hosts.network.DataFromHostSetupNetworksModel dataFromHostSetupNetworksModel ) { java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > attachedNetworks = nic.getItems ( ) ; if ( ( attachedNetworks.size ( ) ) > 0 ) { for ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList ( attachedNetworks ) ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand ( networkModel , null , dataFromHostSetupNetworksModel ) . execute ( ) ; } } }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { validateParameters ( network , "name" , "dataCenter.name|id" ) ; org.ovirt.engine.api.model.Network entity = map ( network ) ; if ( namedDataCenter ( network ) ) { entity.setDataCenterId ( getDataCenterId ( network ) ) ; } org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( entity.getDataCenterId ( ) , entity ) ; if ( network.isSetProfileRequired ( ) ) { parameters.setVnicProfileRequired ( network.isProfileRequired ( ) ) ; } return performCreate ( VdcActionType.AddNetwork , parameters , new org.ovirt.engine.api.restapi.resource.BackendNetworksResource.AddedNetworkResolver ( ) ) ; }
public void testGetIncludeStatistics ( ) { try { accepts.add ( "application/xml; detail=statistics" ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 ) ; org.ovirt.engine.api.model.Disk disk = resource.get ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( disk.isSetStatistics ( ) ) ; org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.verifyModelSpecific ( disk , 1 ) ; verifyLinks ( disk ) ; } finally { accepts.clear ( ) ; } }
private java.util.Set < org.ovirt.engine.core.compat.Guid > getStorageDoaminsByDisks ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disks , boolean isFillStorageTodDiskMap ) { java.util.Set < org.ovirt.engine.core.compat.Guid > domainsList = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( ) ; if ( disks != null ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage disk : disks ) { domainsList.addAll ( disk.getStorageIds ( ) ) ; if ( isFillStorageTodDiskMap ) { for ( org.ovirt.engine.core.compat.Guid storageDomainId : disk.getStorageIds ( ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( storageDomainId , disk , storageToDisksMap ) ; } } } } return domainsList ; }
private void setUpStorageHelper ( ) { org.ovirt.engine.core.bll.storage.connection.IStorageHelper helper = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.storage.connection.IStorageHelper.class ) ; org.mockito.Mockito.when ( helper.connectStorageToDomainByVdsIdDetails ( storageDomain , command.getParameters ( ) . getVdsId ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > ( true , null ) ) ; org.mockito.Mockito.when ( helper.disconnectStorageFromDomainByVdsId ( storageDomain , command.getParameters ( ) . getVdsId ( ) ) ) . thenReturn ( true ) ; org.mockito.Mockito.doReturn ( helper ) . when ( command ) . getStorageHelper ( storageDomain ) ; }
public void getAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public synchronized void UpdateTaskWithActionParameters ( org.ovirt.engine.core.compat.Guid taskID , org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters ) { if ( _tasks.containsKey ( taskID ) ) { org.ovirt.engine.core.common.businessentities.AsyncTasks currentDbAsyncTask = _tasks.get ( taskID ) . getParameters ( ) . getDbAsyncTask ( ) ; currentDbAsyncTask.setaction_parameters ( actionParameters ) ; org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.updateAsyncTaskInDB ( _tasks.get ( taskID ) ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.Iterable < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > qos = ( ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.network.NetworkQoS > ) ( returnValue ) ) ; getQos ( ) . setItems ( qos ) ; getQos ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById ( qos , getNetwork ( ) . getQosId ( ) ) ) ; }
protected void setGetVdsQueryExpectations ( int times ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setClusterId ( GUIDS [ 0 ] ) ; setUpEntityQueryExpectations ( QueryType.GetVdsByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , vds ) ; } }
protected void validateParameters ( org.ovirt.engine.api.model.CpuProfile cpuProfile ) { validateParameters ( cpuProfile , "name" , "cluster.id" ) ; java.lang.String clusterId = cpuProfile.getCluster ( ) . getId ( ) ; getEntity ( org.ovirt.engine.core.common.businessentities.Cluster.class , QueryType.GetClusterById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( clusterId ) ) , ( "cluster: id=" + clusterId ) ) ; }
public static void refreshReloadableConfigsInVdcOptionCache ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VdcOption > list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao ( ) . getAll ( ) ; for ( org.ovirt.engine.core.common.businessentities.VdcOption option : list ) { try { if ( org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable ( option.getoption_name ( ) ) ) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.updateOption ( option ) ; } } catch ( java.lang.NoSuchFieldException e ) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error ( "Not refreshing field '{}': does not exist in class {}." , option.getoption_name ( ) , org.ovirt.engine.core.common.config.ConfigValues.class . getSimpleName ( ) ) ; } } }
public static void cancelTimer ( java.lang.String timerName ) { for ( java.util.Map.Entry < java.lang.String , com.google.gwt.user.client.Timer > timerEntry : org.ovirt.engine.ui.common.uicommon.TimerFactory.timerList.entrySet ( ) ) { if ( timerEntry.getKey ( ) . equals ( timerName ) ) { org.ovirt.engine.ui.common.uicommon.TimerFactory.logger.fine ( ( ( "Cancelling the timer '" + ( timerEntry.getKey ( ) ) ) + "'" ) ) ; timerEntry.getValue ( ) . cancel ( ) ; } } }
public void validateSuccessFailedDiskInterfaceUnsupported ( ) { mockVmStatusUp ( ) ; cretaeVirtIODisk ( ) ; initStorageDomain ( ) ; org.mockito.Mockito.when ( diskValidator.isDiskInterfaceSupported ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ) ; org.mockito.Mockito.when ( command.getDiskValidator ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.storage.Disk.class ) ) ) . thenReturn ( diskValidator ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED ) ; }
private static java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > createClusterList ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_0 ) ; cluster.setName ( "firstCluster" ) ; clusters.add ( cluster ) ; return clusters ; }
protected void removeVmUsers ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.TagsVmMap > all = tagDao.getTagVmMapByVmIdAndDefaultTag ( org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.TagsVmMap tagVm : all ) { tagDao.detachVmFromTag ( tagVm.getTagId ( ) , org.ovirt.engine.core.bll.VmCommand.getVmId ( ) ) ; } }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
private void vlanIdAvailableTest ( org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks ) { this . networks.addAll ( networks ) ; org.mockito.Mockito.when ( network.getVlanId ( ) ) . thenReturn ( DEFAULT_VLAN_ID ) ; org.mockito.Mockito.when ( network.getId ( ) ) . thenReturn ( DEFAULT_GUID ) ; org.junit.Assert.assertThat ( validator.vlanIdNotUsed ( ) , matcher ) ; }
public void testGetNotFound1 ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( new java.util.ArrayList < > ( ) ) ; try { resource.get ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static void runAsSuperAdmin ( ) { if ( ( org.ovirt.engine.core.itests.AbstractBackendTest.sessionId ) == null ) { org.ovirt.engine.core.itests.AbstractBackendTest.generateUserSession ( ) ; } org.ovirt.engine.core.common.businessentities.permissions perms = new org.ovirt.engine.core.common.businessentities.permissions ( ) ; perms.setad_element_id ( org.ovirt.engine.core.itests.AbstractBackendTest.user.getUserId ( ) ) ; perms.setObjectId ( MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID ) ; perms.setObjectType ( VdcObjectType.System ) ; perms.setrole_id ( PredefinedRoles.SUPER_USER.getId ( ) ) ; try { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getPermissionDao ( ) . save ( perms ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( "User is already super user." ) ; } }
private void handleOperationException ( org.ovirt.engine.core.bll.adbroker.LdapSearchExceptionHandlingResponse response , java.lang.Throwable throwable , org.ovirt.engine.core.bll.adbroker.LdapCredentials credentials ) { response.setServerScore ( Score.HIGH ) . setTranslatedException ( new org.ovirt.engine.core.bll.adbroker.EngineDirectoryServiceException ( org.ovirt.engine.core.utils.kerberos.AuthenticationResult.USER_ACCOUNT_DISABLED_OR_LOCKED , throwable ) ) . setTryNextServer ( false ) ; org.ovirt.engine.core.bll.adbroker.LdapBrokerUtils.logEventForUser ( credentials.getUserName ( ) , AuthenticationResult.USER_ACCOUNT_DISABLED_OR_LOCKED.getAuditLogType ( ) ) ; }
private java.lang.String GetLocalStoragesFormattedString ( ) { java.lang.StringBuilder localStorages = new java.lang.StringBuilder ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.StorageDomain > cast ( getSelectedItems ( ) ) ) { if ( ( a.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS ) ) { localStorages.append ( a.getStorageName ( ) ) . append ( ", " ) ; } } return localStorages.substring ( 0 , ( ( localStorages.length ( ) ) - 2 ) ) ; }
public void canDoActionFailsForNoStorageDevice ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.Raid0 , null , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.gluster.StorageDevice > emptyList ( ) ) ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
public void setMainTabSelectedItem ( org.ovirt.engine.core.common.businessentities.VmPool selectedItem ) { driver.edit ( getDetailModel ( ) ) ; monitorCount.setValue ( java.lang.String.valueOf ( getDetailModel ( ) . getMonitorCount ( ) ) ) ; isStateless.setValue ( java.lang.Boolean.toString ( getDetailModel ( ) . getIsStateless ( ) ) ) ; oS.setValue ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getOsName ( getDetailModel ( ) . getOS ( ) ) ) ; formBuilder.update ( getDetailModel ( ) ) ; defaultHost.setTitle ( getDetailModel ( ) . getDefaultHost ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.VmWatchdogAction map ( org.ovirt.engine.api.model.WatchdogAction action , org.ovirt.engine.core.common.businessentities.VmWatchdogAction incoming ) { switch ( action ) { case DUMP : return org.ovirt.engine.core.common.businessentities.VmWatchdogAction.DUMP ; case NONE : return org.ovirt.engine.core.common.businessentities.VmWatchdogAction.NONE ; case PAUSE : return org.ovirt.engine.core.common.businessentities.VmWatchdogAction.PAUSE ; case POWEROFF : return org.ovirt.engine.core.common.businessentities.VmWatchdogAction.POWEROFF ; case RESET : return org.ovirt.engine.core.common.businessentities.VmWatchdogAction.RESET ; default : return null ; } }
public void validateSuccess ( ) { org.mockito.Mockito.when ( validator.isConnectionExists ( ) ) . thenReturn ( ValidationResult.VALID ) ; org.mockito.Mockito.when ( validator.isConnectionForISCSIDomainAttached ( domain ) ) . thenReturn ( java.lang.Boolean.TRUE ) ; org.mockito.Mockito.when ( validator.isISCSIConnectionAndDomain ( domain ) ) . thenReturn ( ValidationResult.VALID ) ; org.mockito.Mockito.when ( validator.isDomainOfConnectionExistsAndInactive ( domain ) ) . thenReturn ( ValidationResult.VALID ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void handleError ( java.lang.Exception e , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { log.error ( "Host installation failed for host '{}', '{}': {}" , org.ovirt.engine.core.bll.VdsCommand.getVds ( ) . getId ( ) , org.ovirt.engine.core.bll.VdsCommand.getVds ( ) . getName ( ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; setVdsStatus ( status ) ; org.ovirt.engine.core.bll.VdsCommand.setSucceeded ( false ) ; _failureMessage = e.getMessage ( ) ; }
public static void setUpOsRepository ( ) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.osinfo.OsRepository.class ) ; org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; org.mockito.Mockito.when ( osRepository.getVmWatchdogTypes ( org.mockito.Matchers.any ( java.lang.Integer.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateWatchdogCommandTest.WATCHDOG_MODELS ) ; }
public void copyDataTo ( ovirt_engine_dwh.configurationsync_3_5.ConfigurationSync.delete_usersStruct other ) { other.user_id = this . user_id ; other.first_name = this . first_name ; other.last_name = this . last_name ; other.domain = this . domain ; other.username = this . username ; other.department = this . department ; other.user_role_title = this . user_role_title ; other.email = this . email ; other.external_id = this . external_id ; other.active = this . active ; other.create_date = this . create_date ; other.update_date = this . update_date ; other.delete_date = this . delete_date ; }
protected void ExecuteQuery ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > results = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LdapUser > ( ) ; for ( org.ovirt.engine.core.compat.Guid guid : getUserIds ( ) ) { org.ovirt.engine.core.common.businessentities.LdapUser user = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getUserByUserGuid ( guid ) ; if ( user != null ) { results.add ( user ) ; } } setReturnValue ( results ) ; setSucceeded ( true ) ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > list = new java.util.ArrayList < > ( ) ; if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) { if ( ( template.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK ) ) { list.add ( template ) ; } } java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; } return list ; }
public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; }
protected boolean validateSuffix ( java.lang.String suffix , org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel ) { for ( java.lang.Object object : objectsInSetupMap.values ( ) ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) ; if ( ! ( validateName ( ( ( vm.getVmName ( ) ) + suffix ) , vm , entityModel ) ) ) { return false ; } } return true ; }
public void testValidateNotRemovingUsedNetworkByVmsWhenNotUsedByVms ( ) throws java.lang.Exception { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . build ( ) ) ; org.mockito.Mockito.when ( findActiveVmsUsingNetwork.findNamesOfActiveVmsUsingNetworks ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.anyCollection ( ) ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.junit.Assert.assertThat ( validator.validateNotRemovingUsedNetworkByVms ( "removedNet" ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void setup ( ) { org.mockito.Mockito.when ( dbFacade.getFenceAgentDao ( ) ) . thenReturn ( fenceAgentDao ) ; org.mockito.Mockito.doReturn ( dbFacade ) . when ( validator ) . getDbFacade ( ) ; org.mockito.Mockito.doReturn ( proxyLocator ) . when ( validator ) . getProxyLocator ( org.mockito.Mockito.any ( ) ) ; org.mockito.Mockito.doReturn ( backend ) . when ( validator ) . getBackend ( ) ; }
public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue ( ) { return org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getSucceeded ( ) ? org.ovirt.engine.core.common.AuditLogType.NETWORK_UPDATE_NETWORK : org.ovirt.engine.core.common.AuditLogType.NETWORK_UPDATE_NETWORK_FAILED ; }
public static void getAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , org.ovirt.engine.core.common.queries.QueryParametersBase params ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( "Server: runPublicQuery invoked! '{}'" , queryType ) ; if ( ( params.getCorrelationId ( ) ) == null ) { params.setCorrelationId ( org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ) ; } debugQuery ( queryType , params ) ; return getBackend ( ) . runPublicQuery ( queryType , params ) ; }
public static void mockAsyncDataProvider ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp = org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.setup.getMocks ( ) . asyncDataProvider ( ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.getConfigValuePreConverted ( ConfigurationValues.VncKeyboardLayoutValidValues ) ) . thenReturn ( java.util.Collections.emptyList ( ) ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.osNameExists ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.OS_TYPE ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( org.ovirt.engine.ui.uicommonweb.models.vms.BaseVmTest.adp.getMaxVmNameLengthWin ( ) ) . thenReturn ( 15 ) ; }
public static void redirectToErrorPage ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response , org.ovirt.engine.core.sso.utils.OAuthException ex ) { org.ovirt.engine.core.sso.utils.SSOUtils.log.error ( "OAuthException {}: {}" , ex.getCode ( ) , ex.getMessage ( ) ) ; org.ovirt.engine.core.sso.utils.SSOUtils.log.debug ( "Exception" , ex ) ; org.ovirt.engine.core.sso.utils.SSOUtils.redirectToErrorPageImpl ( request , response , ex ) ; }
public void setChildren ( java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.common.SelectionTreeNodeModel > value ) { if ( ( ( ( children ) == null ) && ( value != null ) ) || ( ( ( children ) != null ) && ( ! ( children.equals ( value ) ) ) ) ) { children = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "Children" ) ) ; } }
public void mockConfig ( ) { java.util.HashSet < org.ovirt.engine.core.compat.Version > supportedClusters = new java.util.HashSet < > ( ) ; supportedClusters.add ( version ) ; org.mockito.Mockito.when ( host.getSupportedClusterVersionsSet ( ) ) . thenReturn ( supportedClusters ) ; org.mockito.Mockito.when ( host.getVdsGroupCompatibilityVersion ( ) ) . thenReturn ( version ) ; configRule.mockConfigValue ( ConfigValues.DefaultRouteSupported , version , java.lang.Boolean.FALSE ) ; }
public static boolean vmDeviceChanged ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType deviceGeneralType , java.lang.String deviceTypeName , boolean deviceEnabled ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = ( deviceTypeName != null ) ? org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao.getVmDeviceByVmIdTypeAndDevice ( vmId , deviceGeneralType , deviceTypeName ) : org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao.getVmDeviceByVmIdAndType ( vmId , deviceGeneralType ) ; return deviceEnabled == ( vmDevices.isEmpty ( ) ) ; }
private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator createValidatorForTestingValidateQosOverridden ( org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkId ( network.getId ( ) ) ; networkAttachment.setHostNetworkQos ( new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos ( ) ) ; return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . setParams ( new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder ( ) . addNetworkAttachments ( networkAttachment ) ) . addNetworks ( network ) . build ( ) ; }
public static void getVmById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void updateActionAvailability ( ) { if ( ( ( getEntity ( ) ) == null ) || ( ( getEntity ( ) . isGroup ( ) ) == true ) ) { getManageEventsCommand ( ) . setIsExecutionAllowed ( false ) ; } else { getManageEventsCommand ( ) . setIsExecutionAllowed ( true ) ; } }
public void getUsbPolicyOnUpdateCurrentlyNativeGotEnabledNativePolicyUsb ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "native" ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate ( usb , UsbPolicy.ENABLED_NATIVE ) , UsbPolicy.ENABLED_NATIVE ) ; }
public final void setSoftLimit ( java.lang.String sessionId , java.util.Date softLimit ) { setData ( sessionId , org.ovirt.engine.core.bll.session.SessionDataContainer.SOFT_LIMIT_PARAMETER_NAME , softLimit ) ; }
private org.ovirt.engine.core.common.businessentities.storage.ImageStatus checkImageStatus ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume , org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand removeCinderDiskVolumeCommand ) { try { return removeCinderDiskVolumeCommand.getCinderBroker ( ) . getImageStatusByClassificationType ( removedVolume ) ; } catch ( com.woorea.openstack.base.client.OpenStackResponseException ex ) { if ( ( ex.getStatus ( ) ) == ( org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND ) ) { log.info ( "Image status could not be provided since the cinder image might have already been removed from Cinder." ) ; return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ; } logError ( removedVolume , ex ) ; } catch ( java.lang.Exception e ) { logError ( removedVolume , e ) ; } return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ; }
public java.util.Map < java.lang.String , java.lang.String > getJobMessageProperties ( ) { if ( ( jobProperties ) == null ) { jobProperties = super . getJobMessageProperties ( ) ; if ( ( org.ovirt.engine.core.bll.gluster.GlusterHookStatusChangeCommand.getGlusterHook ( ) ) != null ) { jobProperties.put ( GlusterConstants.HOOK_NAME , org.ovirt.engine.core.bll.gluster.GlusterHookStatusChangeCommand.getGlusterHook ( ) . getName ( ) ) ; } } return jobProperties ; }
private static java.util.Map < java.lang.String , java.lang.Object > setDisks ( java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > disksData ) { java.util.Map < java.lang.String , java.lang.Object > map = new java.util.HashMap < > ( ) ; map.put ( VdsProperties.vm_disks , disksData ) ; return map ; }
public static void GetDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( storageDomainId ) , aQuery ) ; }
public void setup ( ) { initVm ( ) ; images = new java.util.ArrayList < > ( ) ; luns = java.util.Collections.EMPTY_LIST ; emulatedMachine = "pc" ; cpuId = "SandyBridge" ; underTest = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter ( vm , images , luns , version , emulatedMachine , cpuId , osRepository ) ; }
public void removeImage ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { imageStorageDomainMapDao.remove ( diskImage.getImageId ( ) ) ; diskImageDynamicDao.remove ( diskImage.getImageId ( ) ) ; imageDao.remove ( diskImage.getImageId ( ) ) ; }
private void initCommandBase ( ) { initUser ( ) ; org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext ( ) ; if ( ( executionContext.getJob ( ) ) != null ) { setJobId ( executionContext.getJob ( ) . getId ( ) ) ; } else if ( ( executionContext.getStep ( ) ) != null ) { setJobId ( executionContext.getStep ( ) . getJobId ( ) ) ; } setCorrelationId ( _parameters.getCorrelationId ( ) ) ; }
private boolean isNicActuallyExistsOrReferencesNewBond ( java.lang.String nicName , org.ovirt.engine.core.compat.Guid nicId ) { return hostSetupNetworksValidatorHelper.isNicActuallyExistsOrReferencesNewBond ( existingInterfacesMap , bondsMap , nicName , nicId ) ; }
protected org.ovirt.engine.core.common.action.ImportVmParameters createParameters ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = createVmWithSnapshots ( ) ; vm.setName ( "testVm" ) ; org.ovirt.engine.core.compat.Guid clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; vm.setClusterId ( clusterId ) ; org.ovirt.engine.core.compat.Guid spId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; return new org.ovirt.engine.core.common.action.ImportVmParameters ( vm , org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.compat.Guid.newGuid ( ) , spId , clusterId ) ; }
private java.lang.String updateFreeVf ( ) { java.lang.String vfToUse = vfScheduler.findFreeVfForVnic ( org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVdsId ( ) , getNetwork ( ) , org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVmId ( ) ) ; if ( vfToUse == null ) { failValidation ( EngineMessage.CANNOT_PLUG_PASSTHROUGH_VNIC_NO_SUITABLE_VF , java.lang.String.format ( "$vnicName %1$s" , getInterfaceName ( ) ) ) ; } return vfToUse ; }
public static org.ovirt.engine.core.common.businessentities.network.IpConfiguration createDefaultIpConfiguration ( ) { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration ( ) ; org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address = org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpv4Address ( ) ; ipConfiguration.getIPv4Addresses ( ) . add ( iPv4Address ) ; org.ovirt.engine.core.common.businessentities.network.IpV6Address ipv6Address = org.ovirt.engine.core.common.utils.NetworkCommonUtils.createDefaultIpv6Address ( ) ; ipConfiguration.getIpV6Addresses ( ) . add ( ipv6Address ) ; return ipConfiguration ; }
private void decreasePendingVms ( org.ovirt.engine.core.compat.Guid vdsId ) { if ( ( vdsId == null ) || ( vdsId.equals ( lastDecreasedVds ) ) ) { return ; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RunVmCommandBase.getVm ( ) ; decreasePendingVms ( vdsId , vm.getNumOfCpus ( ) , vm.getMinAllocatedMem ( ) , vm.getName ( ) ) ; }
protected void updateSgIoUnfilteredChangeability ( ) { if ( ! ( getIsScsiPassthrough ( ) . getEntity ( ) ) ) { getIsSgIoUnfiltered ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.cannotEnableSgioWhenScsiPassthroughDisabled ( ) ) ; getIsSgIoUnfiltered ( ) . setIsChangable ( false ) ; getIsSgIoUnfiltered ( ) . setEntity ( false ) ; return ; } getIsSgIoUnfiltered ( ) . setIsChangable ( isEditEnabled ( ) ) ; }
private void updateTransferType ( org.ovirt.engine.api.model.ImageTransfer imageTransfer , org.ovirt.engine.core.common.action.TransferDiskImageParameters params ) { if ( ( imageTransfer.isSetDirection ( ) ) && ( ( imageTransfer.getDirection ( ) ) == ( org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD ) ) ) { params.setTransferType ( TransferType.Download ) ; } }
public void testMissingParameterSpecificReason ( ) { org.ovirt.engine.api.model.Vm vm = new org.ovirt.engine.api.model.Vm ( ) ; vm.setDescription ( "incomplete" ) ; try { org.ovirt.engine.api.common.util.CompletenessAssertor.validateParameters ( "Missing stuff" , "{0} {1} required for {2}" , vm , "status" ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException on incomplete model" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( "Missing stuff" , wae , "Vm" , "status" ) ; } }
public java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > getQuotaStorageConsumptionParameters ( ) { java.util.List < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : getParameters ( ) . getVmTemplate ( ) . getDiskList ( ) ) { list.add ( new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter ( disk.getQuotaId ( ) , null , QuotaConsumptionParameter.QuotaAction.CONSUME , imageToDestinationDomainMap.get ( disk.getId ( ) ) , ( ( double ) ( disk.getSizeInGigabytes ( ) ) ) ) ) ; } return list ; }
public int hashCode ( ) { return java.util.Objects.hash ( super . hashCode ( ) , ipv4Address , ipv6Address , bondName , bondOptions , bondType , bonded , ipv4BootProtocol , ipv6BootProtocol , reportedSwitchType , networkName , bridged , ipv4Gateway , ipv6Gateway , mtu , ipv4Subnet , ipv6Prefix , vdsId , baseInterface , vlanId , qos , labels , adPartnerMac ) ; }
protected void syncSearch ( org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType , final java.util.Comparator < ? super T > comparator ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity ( ) ) == null ) { return ; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity ( ) . getId ( ) ) ; parameters.setRefresh ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( vdcQueryType , parameters , new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery ( comparator ) ) ; }
public static void getGlusterHooks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterHooks , new org.ovirt.engine.core.common.queries.gluster.GlusterParameters ( clusterId ) , aQuery ) ; }
protected void onExportChanged ( ) { super . onExportChanged ( ) ; if ( getExport ( ) . getEntity ( ) ) { getHasVLanTag ( ) . setIsChangeable ( false ) ; getVLanTag ( ) . setIsChangeable ( false ) ; getIsVmNetwork ( ) . setIsChangeable ( false ) ; getNetworkLabel ( ) . setIsChangeable ( false ) ; getNeutronPhysicalNetwork ( ) . setIsChangeable ( false ) ; } }
public void isClusterEmpty ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { runQueryByIdParameter ( VdcQueryType.IsClusterEmpty , aQuery , clusterId ) ; }
protected void readOsSection ( org.ovirt.engine.core.utils.ovf.xml.XmlNode section ) { _vmTemplate.setId ( new org.ovirt.engine.core.compat.Guid ( section.attributes.get ( "ovf:id" ) . getValue ( ) ) ) ; org.ovirt.engine.core.utils.ovf.xml.XmlNode node = section.SelectSingleNode ( "Description" ) ; if ( node != null ) { int osId = osRepository.getOsIdByUniqueName ( node.innerText ) ; _vmTemplate.setOsId ( osId ) ; _vmTemplate.setClusterArch ( osRepository.getArchitectureFromOS ( osId ) ) ; } else { _vmTemplate.setClusterArch ( ArchitectureType.undefined ) ; } }
public static boolean isNumOfMonitorsLegal ( java.util.Collection < org.ovirt.engine.core.common.businessentities.GraphicsType > graphicsTypes , int numOfMonitors , java.util.List < java.lang.String > reasons ) { boolean legal = false ; if ( graphicsTypes.contains ( GraphicsType.VNC ) ) { legal = numOfMonitors <= 1 ; } else if ( graphicsTypes.contains ( GraphicsType.SPICE ) ) { legal = numOfMonitors <= ( org.ovirt.engine.core.bll.VmHandler.getMaxNumberOfMonitors ( ) ) ; } if ( ! legal ) { reasons.add ( EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_NUM_OF_MONITORS.toString ( ) ) ; } return legal ; }
protected void executeCommand ( ) { if ( isMemoryRemovable ( ) ) { java.util.List < org.ovirt.engine.core.compat.Guid > guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString ( org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters ( ) . getMemoryVolumes ( ) ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guids.get ( 2 ) ) ; removeMemoryDumpDiskParameters.setShouldBeLogged ( false ) ; runInternalAction ( ActionType.RemoveDisk , removeMemoryDumpDiskParameters ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( guids.get ( 4 ) ) ; removeMemoryMetadataDiskParameters.setShouldBeLogged ( false ) ; runInternalAction ( ActionType.RemoveDisk , removeMemoryMetadataDiskParameters ) ; } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded ( true ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { if ( returnValue != null ) { _defaultConfigurationVersion = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL ; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ( ( org.ovirt.engine.ui.uicommonweb.models.LoginModel ) ( model ) ) ; loginModel.getLoggedInEvent ( ) . raise ( loginModel , EventArgs.EMPTY ) ; }
public static void getGlusterRemoveBricksStatus ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid volumeId , java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > bricks ) { aQuery.setHandleFailure ( true ) ; org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksQueriesParameters ( clusterId , volumeId , bricks ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetGlusterVolumeRemoveBricksStatus , parameters , aQuery ) ; }
public void testRemoveForcedIncomplete ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 1 ) ; setUpVersionExpectations ( ) ; javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations ( VdcActionType.RemoveStoragePool , org.ovirt.engine.core.common.action.StoragePoolParametersBase.class , new java.lang.String [ ] { "StoragePoolId" , "ForceDelete" } , new java.lang.Object [ ] { GUIDS [ 0 ] , java.lang.Boolean.FALSE } , true , true , false ) ; uriInfo = addMatrixParameterExpectations ( uriInfo , BackendDataCenterResource.FORCE , java.lang.Boolean.FALSE.toString ( ) ) ; setUriInfo ( uriInfo ) ; control.replay ( ) ; resource.remove ( ) ; }
protected void getVersionV1 ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { org.ovirt.engine.core.services.RegisterServlet.log.info ( "Version request: source={}', secured='{}'" , request.getRemoteHost ( ) , request.isSecure ( ) ) ; try ( java.io.PrintWriter out = response.getWriter ( ) ) { response.setContentType ( "text/plain" ) ; out.print ( org.ovirt.engine.core.services.RegisterServlet.INTERFACE_VERSION ) ; } }
public static void GetAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) , aQuery ) ; }
public void setDiskWindow ( org.ovirt.engine.ui.uicommonweb.models.Model value ) { if ( ( diskModel ) != value ) { diskModel = value ; onPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel.DISK_WINDOW ) ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object loadedCluster ) { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster newItem = new org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( loadedDataCenter ) ) , ( ( org.ovirt.engine.core.common.businessentities.Cluster ) ( loadedCluster ) ) ) ; unitModel.getDataCenterWithClustersList ( ) . setItems ( java.util.Arrays.asList ( newItem ) ) ; unitModel.getDataCenterWithClustersList ( ) . setSelectedItem ( newItem ) ; }
public java.lang.Void runInTransaction ( ) { if ( ! ( asyncTask.getChildCmdEntity ( ) . getRootCommandId ( ) . equals ( asyncTask.getChildCmdEntity ( ) . getId ( ) ) ) ) { coco.persistCommand ( asyncTask.getRootCmdEntity ( ) ) ; } coco.persistCommand ( asyncTask.getChildCmdEntity ( ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAsyncTaskDao ( ) . saveOrUpdate ( asyncTask ) ; return null ; }
protected void initUser ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.VmPoolUserCommandBase.getDbUser ( ) ; if ( ( user != null ) && ( ( user.getId ( ) ) == null ) ) { user.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.VmPoolUserCommandBase.getDbUserDao ( ) . save ( user ) ; } }
public void initializeCommand ( ) { command = org.mockito.Mockito.spy ( createCommand ( ) ) ; mockVds ( ) ; org.mockito.Mockito.when ( command.getActionType ( ) ) . thenReturn ( getCommandActionType ( ) ) ; org.mockito.Mockito.doReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VmNetworkInterfaceDAO.class ) ) . when ( command ) . getVmNetworkInterfaceDAO ( ) ; }
public void countAllTemplates ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplateCount , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
protected org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , final int sizeRequired , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired ) ; initializeVmDaoMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; return cmd ; }
private void setKeyAndValidate ( final java.lang.String keyName , final java.lang.String value , final java.lang.String version ) throws java.lang.IllegalAccessException { config.getEngineConfigLogic ( ) . persist ( keyName , value , version ) ; org.ovirt.engine.core.config.entity.ConfigKey currentConfigKey = config.getEngineConfigLogic ( ) . fetchConfigKey ( keyName , "general" ) ; org.junit.jupiter.api.Assertions.assertEquals ( value , currentConfigKey.getValue ( ) ) ; }
public static void getStorageDomainListByTemplate ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageDomainsByVmTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
public void testVmsRuleNeg ( ) throws java.lang.Exception { org.ovirt.engine.api.model.AffinityGroup model = new org.ovirt.engine.api.model.AffinityGroup ( ) ; model.setEnforcing ( false ) ; model.setPositive ( true ) ; org.ovirt.engine.api.model.AffinityGroup entity = new org.ovirt.engine.api.model.AffinityGroup ( ) ; org.ovirt.engine.api.restapi.types.AffinityGroupMapper.map ( model , entity ) ; org.junit.Assert.assertEquals ( EntityAffinityRule.POSITIVE , entity.getVmAffinityRule ( ) ) ; org.junit.Assert.assertFalse ( entity.isVmEnforcing ( ) ) ; org.junit.Assert.assertTrue ( entity.isVmAffinityEnabled ( ) ) ; }
protected void setUpGetEntityExpectations ( int times , org.ovirt.engine.api.model.Disk entity ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpGetEntityExpectations ( VdcQueryType.GetDiskByDiskId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmDiskResourceTest.DISK_ID } , entity ) ; } }
public void getStorageDomainMaxNameLength ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 1 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.StorageDomainNameSizeLimit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private void onOk ( ) { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel ) ( getWindow ( ) ) ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies ( ) . getSelectedItem ( ) ; setEntity ( selectedModel.getEntity ( ) ) ; setWindow ( null ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel > currentModels = currentProxies.getItemsAsList ( ) ; currentProxies.setItems ( java.util.Collections.emptyList ( ) ) ; currentProxies.setItems ( currentModels ) ; }
public void getUsbPolicyUsbTypeNative ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "native" ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; assertEquals ( org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnCreate ( usb , vdsGroup.getcompatibility_version ( ) ) , UsbPolicy.ENABLED_NATIVE ) ; }
public org.ovirt.engine.core.bll.ValidationResult domainIsValidDestination ( ) { if ( ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ) ) || ( ( storageDomain.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.action.VdsActionParameters parameters = new org.ovirt.engine.core.common.action.VdsActionParameters ( getVdsId ( ) ) ; parameters.setLockProperties ( org.ovirt.engine.core.common.action.LockProperties.create ( LockProperties.Scope.Execution ) . withWait ( isInternalExecution ( ) ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction ( ActionType.RefreshHostCapabilities , parameters ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { return ; } returnValue = runInternalAction ( ActionType.RefreshHostDevices , parameters ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { return ; } setSucceeded ( true ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = prepareDAO ( dbFacade.getVmNetworkStatisticsDao ( ) ) ; newVmStatistics = new org.ovirt.engine.core.common.businessentities.VmNetworkStatistics ( ) ; newVmStatistics.setId ( org.ovirt.engine.core.dao.VmNetworkStatisticsDAOTest.NEW_INTERFACE_ID ) ; newVmStatistics.setVmId ( org.ovirt.engine.core.dao.VmNetworkStatisticsDAOTest.VM_ID ) ; newVmStatistics.setStatus ( InterfaceStatus.Down ) ; newVmStatistics.setReceiveDropRate ( 0.0 ) ; newVmStatistics.setReceiveRate ( 0.0 ) ; newVmStatistics.setTransmitDropRate ( 0.0 ) ; newVmStatistics.setTransmitRate ( 0.0 ) ; }
protected boolean isVmPartOfManualPool ( ) { if ( ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmPoolId ( ) ) == null ) { return false ; } final org.ovirt.engine.core.common.businessentities.VmPool vmPool = vmPoolDao.get ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVmPoolId ( ) ) ; return vmPool.getVmPoolType ( ) . equals ( VmPoolType.MANUAL ) ; }
public void filterImageDisksFilterDiskSnapshots ( ) { disk1.setActive ( true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > result = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks ( java.util.Arrays.asList ( disk1 , disk2 ) , false , false , true ) ; org.junit.Assert.assertEquals ( "Wrong number of Guids returned" , 1 , result.size ( ) ) ; org.junit.Assert.assertTrue ( "The result should contain the active image disk" , result.contains ( disk1 ) ) ; }
public org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.compat.Guid > , org.ovirt.engine.core.compat.Guid > runBalance ( java.lang.String balanceName , java.util.List < org.ovirt.engine.core.compat.Guid > hostIDs , java.util.Map < java.lang.String , java.lang.String > propertiesMap ) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient ( ) ; client.setConfig ( config ) ; java.lang.Object result = client.execute ( org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE , createBalanceArgs ( balanceName , hostIDs , propertiesMap ) ) ; return parseBalanceResults ( result ) ; } catch ( org.apache.xmlrpc.XmlRpcException e ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error ( "Could not communicate with the external scheduler while balancing" , e ) ; auditLogFailedToConnect ( ) ; return null ; } }
public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap entity = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( ) ; entity.setstorage_id ( getGuidDefaultEmpty ( rs , "storage_id" ) ) ; entity.setstorage_pool_id ( getGuid ( rs , "storage_pool_id" ) ) ; entity.setStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.forValue ( rs.getInt ( "status" ) ) ) ; return entity ; }
public void getClusterFeaturesByVersionAndCategory ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.mode.ApplicationMode category ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.Set < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ) ( source ) ) : new java.util.HashSet < org.ovirt.engine.core.common.businessentities.AdditionalFeature > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClusterFeaturesByVersionAndCategory , new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters ( version , category ) , aQuery ) ; }
public void getVmGuestAgentInterfacesByVmId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmGuestAgentInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . withoutRefresh ( ) , aQuery ) ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public void testEvalDifferentName ( ) throws java.lang.Exception { org.mockito.Mockito.when ( mockOtherIface.getName ( ) ) . thenReturn ( ( "not" + ( org.ovirt.engine.core.vdsbroker.vdsbroker.predicates.DisplayInterfaceEqualityPredicateTest.TEST_INTERFACE_NAME ) ) ) ; org.mockito.Mockito.when ( mockOtherIface.getAddress ( ) ) . thenReturn ( org.ovirt.engine.core.vdsbroker.vdsbroker.predicates.DisplayInterfaceEqualityPredicateTest.TEST_INTERFACE_ADDRESS ) ; org.junit.Assert.assertFalse ( underTest.eval ( mockOtherIface ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { org.junit.Assert.assertNotNull ( model ) ; org.junit.Assert.assertEquals ( model.getId ( ) , java.lang.String.valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; org.junit.Assert.assertEquals ( LogSeverity.ALERT , model.getSeverity ( ) ) ; org.junit.Assert.assertEquals ( model.getDescription ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; org.junit.Assert.assertEquals ( model.getOrigin ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; org.junit.Assert.assertEquals ( model.getCustomId ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
public void isValidVmNetworkForValidNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNewNetwork ( true , NETWORK_NAME ) ; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface = createNewInterface ( ) ; iface.setNetworkName ( network.getName ( ) ) ; org.junit.Assert.assertTrue ( vmInterfaceManager.isValidVmNetwork ( iface , java.util.Collections.singletonMap ( network.getName ( ) , network ) ) ) ; }
public void updateChangeability ( org.ovirt.engine.core.common.config.ConfigValues feature , org.ovirt.engine.core.compat.Version version ) { boolean featureSupported = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( feature , version.getValue ( ) ) ) ) ; setIsChangeable ( featureSupported ) ; setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . optionNotSupportedClusterVersionTooOld ( version.getValue ( ) ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.userportal.VmItemBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.userportal.VmItemBehavior ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VmPool pool = ( ( org.ovirt.engine.core.common.businessentities.VmPool ) ( returnValue ) ) ; boolean isManualPool = ( pool.getVmPoolType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmPoolType.MANUAL ) ; behavior.updateCommandsAccordingToPoolType ( isManualPool ) ; }
private static java.util.List < org.ovirt.engine.core.aaa.DirectoryUser > queryPrincipals ( final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension , final java.lang.String namespace , final org.ovirt.engine.api.extensions.ExtMap filter , boolean groupsResolving , boolean groupsResolvingRecursive ) { org.ovirt.engine.api.extensions.ExtMap inputMap = new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Authz.InvokeKeys.QUERY_ENTITY , Authz.QueryEntity.PRINCIPAL ) . mput ( Authz.InvokeKeys.QUERY_FLAGS , org.ovirt.engine.core.aaa.AuthzUtils.queryFlagValue ( groupsResolving , groupsResolvingRecursive ) ) . mput ( Authz.InvokeKeys.QUERY_FILTER , filter ) . mput ( Authz.InvokeKeys.NAMESPACE , namespace ) ; return org.ovirt.engine.core.aaa.AuthzUtils.populatePrincipals ( extension , namespace , inputMap ) ; }
public void numOfSocketChanged ( ) { final int numOfSockets = extractIntFromListModel ( getModel ( ) . getNumOfSockets ( ) ) ; final int totalCpuCores = getTotalCpuCores ( ) ; if ( ( numOfSockets == 0 ) || ( totalCpuCores == 0 ) ) { return ; } getModel ( ) . getThreadsPerCore ( ) . setSelectedItem ( 1 ) ; getModel ( ) . getCoresPerSocket ( ) . setSelectedItem ( ( totalCpuCores / numOfSockets ) ) ; setCpuChangeability ( ) ; }
public void getClusterWithVm ( ) { final org.ovirt.engine.core.common.businessentities.VM v = new org.ovirt.engine.core.common.businessentities.VM ( ) ; v.setClusterId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setVm ( v ) ; final org.ovirt.engine.core.common.businessentities.Cluster g = b.getCluster ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , g.getId ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList ( java.lang.String uri , java.lang.String username , java.lang.String password , java.util.List < java.lang.String > vmsNames ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getExternalVMs ( uri , username , password , vmsNames ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public static void getStorageConnectionsByDataCenterIdAndStorageType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.common.businessentities.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters params = new org.ovirt.engine.core.common.queries.GetConnectionsByDataCenterAndStorageTypeParameters ( storagePoolId , storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetConnectionsByDataCenterAndStorageType , params , aQuery ) ; }
protected boolean validateSpaceRequirements ( ) { for ( java.util.Map.Entry < org.ovirt.engine.core.compat.Guid , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > > sdImageEntry : storageToDisksMap.entrySet ( ) ) { org.ovirt.engine.core.common.businessentities.StorageDomain destStorageDomain = destStorages.get ( sdImageEntry.getKey ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > disksList = sdImageEntry.getValue ( ) ; org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = createStorageDomainValidator ( destStorageDomain ) ; if ( ( ! ( validateDomainsThreshold ( storageDomainValidator ) ) ) || ( ! ( validateFreeSpace ( storageDomainValidator , disksList ) ) ) ) { return false ; } } return true ; }
private void setUpEntityQueryExpectations ( java.util.List < ? super org.ovirt.engine.core.common.businessentities.network.pseudo.NetworkLabel > result ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetNetworkLabelsByNetworkId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendNetworkLabelResourceTest.NETWORK_ID } , result ) ; }
private void addDiskPermissions ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) { if ( ( org.ovirt.engine.core.bll.AddDiskCommand.getCurrentUser ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.Permissions perms = new org.ovirt.engine.core.common.businessentities.Permissions ( org.ovirt.engine.core.bll.AddDiskCommand.getCurrentUser ( ) . getId ( ) , PredefinedRoles.DISK_OPERATOR.getId ( ) , disk.getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk ) ; org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission ( perms ) ; } }
public void testUpdateSnapshotStatusByName ( ) { dao.updateSnapshotStatusByName ( existingSnapshot.getVolumeId ( ) , existingSnapshot.getSnapshotName ( ) , GlusterSnapshotStatus.DEACTIVATED ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot = dao.getById ( existingSnapshot.getSnapshotId ( ) ) ; org.junit.Assert.assertNotNull ( snapshot ) ; org.junit.Assert.assertNotEquals ( snapshot , existingSnapshot ) ; existingSnapshot.setStatus ( GlusterSnapshotStatus.DEACTIVATED ) ; org.junit.Assert.assertEquals ( existingSnapshot , snapshot ) ; }
public void testBootProtocolSetForDisplayNetworkWhenBootProtocolIsDhcp ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.DHCP , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , network , attachment ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Cluster cluster ) { validateParameters ( cluster , "name" , "dataCenter.name|id" ) ; validateEnums ( org.ovirt.engine.api.model.Cluster.class , cluster ) ; org.ovirt.engine.core.common.businessentities.storage_pool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool ( cluster , this ) ; org.ovirt.engine.core.common.businessentities.VDSGroup entity = map ( cluster , map ( pool ) ) ; return performCreation ( VdcActionType.AddVdsGroup , new org.ovirt.engine.core.common.action.VdsGroupOperationParameters ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById , org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters.class ) ) ; }
protected void verifyModel ( org.ovirt.engine.api.model.Group model , int index ) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup entity = getEntity ( index ) ; org.junit.jupiter.api.Assertions.assertEquals ( entity.getId ( ) . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( entity.getName ( ) , model.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( model.getDomain ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.encode ( entity.getDomain ( ) ) , model.getDomain ( ) . getId ( ) ) ; verifyLinks ( model ) ; }
private static org.ovirt.engine.core.common.businessentities.network.NetworkCluster cloneNetworkCluster ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster instance ) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster obj = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster ( ) ; obj.setId ( instance.getId ( ) ) ; obj.setStatus ( instance.getStatus ( ) ) ; obj.setDisplay ( instance.isDisplay ( ) ) ; obj.setRequired ( instance.isRequired ( ) ) ; obj.setMigration ( instance.isMigration ( ) ) ; obj.setGluster ( instance.isGluster ( ) ) ; return obj ; }
public void testExecuteQuery ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getSessionId ( ) ) . thenReturn ( org.ovirt.engine.core.bll.GetUserBySessionIdQueryTest.sessionID ) ; org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance ( ) . setUser ( org.ovirt.engine.core.bll.GetUserBySessionIdQueryTest.sessionID , getUser ( ) ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( "Wrong user returned from query" , getUser ( ) , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void getRoleActionGroupsByRoleId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid roleId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetRoleActionGroupsByRoleId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( roleId ) , aQuery ) ; }
private void startRebalance ( ) { if ( ( getSelectedItems ( ) ) == null ) { return ; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRebalanceParameters ( volume.getId ( ) , false , false ) ) ; } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction ( VdcActionType.StartRebalanceGlusterVolume , list ) ; }
private void checkVmName ( boolean isImportAsNewEntity , java.lang.String name ) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters ( ) ; parameters.getVm ( ) . setVmName ( name ) ; parameters.setImportAsNewEntity ( isImportAsNewEntity ) ; org.ovirt.engine.core.bll.ImportVmCommand command = new org.ovirt.engine.core.bll.ImportVmCommand ( parameters ) ; java.util.Set < javax.validation.ConstraintViolation < org.ovirt.engine.core.common.action.ImportVmParameters > > validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator ( ) . validate ( parameters , command.getValidationGroups ( ) . toArray ( new java.lang.Class < ? > [ 0 ] ) ) ; org.junit.Assert.assertEquals ( validate.isEmpty ( ) , ( ! isImportAsNewEntity ) ) ; }
protected void executeCommand ( ) { try { addVmToDb ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getVm ( ) ; if ( vm.getImages ( ) . isEmpty ( ) ) { endVmRelatedOps ( ) ; } else { processImages ( ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.network.MacPoolManager.getInstance ( ) . freeMacs ( macsAdded ) ; throw e ; } setSucceeded ( true ) ; }
public void testGetAllNetworkSearch ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchPattern ( ) ) . thenReturn ( ( "Network" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) ) ; org.mockito.Mockito.when ( getQueryParameters ( ) . getSearchTypeValue ( ) ) . thenReturn ( SearchType.Network ) ; getQuery ( ) . executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertEquals ( networkResultList , getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void executeCommandWhenFailed ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , false ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_ENABLE_FAILED ) ; }
public void failGetSpiceOnVncVm ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getOptions ( ) ) . thenReturn ( getValidOptions ( GraphicsType.SPICE ) ) ; org.ovirt.engine.core.common.businessentities.VM mockVm = mockVm ( GraphicsType.VNC ) ; org.mockito.Mockito.doReturn ( mockVm ) . when ( getQuery ( ) ) . getCachedVm ( ) ; getQuery ( ) . validateInputs ( ) ; org.junit.jupiter.api.Assertions.assertFalse ( getQuery ( ) . getQueryReturnValue ( ) . getSucceeded ( ) ) ; }
public void moveShareableDiskToGlusterDomain ( ) { initializeCommand ( ImageOperation.Move ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.GLUSTERFS ) ; initVmDiskImage ( true ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS.toString ( ) ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch ( ) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter ( ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL ) . when ( ( ( dataCenter != null ) && ( cluster.supportsVirtService ( ) ? ( dataCenter.getCompatibilityVersion ( ) . compareTo ( cluster.getCompatibilityVersion ( ) ) ) > 0 : false ) ) ) ; }
public void run ( ) { setCorrelationId ( params ) ; try { backend.RunAction ( task , sp ) ; } finally { if ( ( user ) != null ) { backend.Logoff ( sh.sessionize ( new org.ovirt.engine.core.common.action.LogoutUserParameters ( user.getUserId ( ) ) ) ) ; } sh.clean ( ) ; } }
public void testGetEntityNameByIdAndTypeForBookmark ( ) { org.ovirt.engine.core.common.businessentities.Bookmark bookmark = dbFacade.getBookmarkDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.BOOKMARK_ID ) ; org.junit.Assert.assertNotNull ( bookmark ) ; java.lang.String name = bookmark.getbookmark_name ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.BOOKMARK_ID , VdcObjectType.Bookmarks ) ) ) ; }
protected boolean canDoAction ( ) { boolean returnValue = super . canDoAction ( ) ; if ( returnValue && ( VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals ( org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters ( ) . getVmStaticData ( ) . getVmtGuid ( ) ) ) ) { returnValue = false ; addCanDoActionMessage ( VdcBllMessages.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE ) ; } return returnValue ; }
public void search ( ) { if ( ( getEntity ( ) ) != null ) { super . search ( ) ; } }
public com.google.gwt.resources.client.ImageResource getValue ( java.lang.Object object ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData importVmData = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( object ) ) ; if ( ( ( importVmData.getError ( ) ) != null ) || ( importVmData.isNameExistsInTheSystem ( ) ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.errorImage ( ) ; } if ( ( importVmData.getWarning ( ) ) != null ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.resources.alertImage ( ) ; } return null ; }
protected org.ovirt.engine.core.common.businessentities.ad_groups getAdGroup ( ) { if ( ( ( mGroup ) == null ) && ( ! ( getGroupId ( ) . equals ( Guid.Empty ) ) ) ) { mGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getAdGroupDao ( ) . get ( getGroupId ( ) ) ; } return mGroup ; }
public java.lang.String toString ( ) { return ( ( ( ( ( ( ( "(status = " + ( getStatus ( ) ) ) + ", result = " ) + ( getResult ( ) ) ) + ", exception = " ) + ( getException ( ) ) ) + ", message = " ) + ( getMessage ( ) ) ) + ")" ; }
private void waitUntilCheck ( java.util.function.Predicate < org.ovirt.vdsm.jsonrpc.client.JsonRpcClient > check , java.lang.String formatBefore , java.lang.String formatAfter ) throws java.lang.InterruptedException { java.lang.String hostname = client.getHostname ( ) ; org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug ( formatBefore , hostname ) ; int retries = 50 ; while ( check.test ( this . client ) ) { if ( retries == 0 ) { throw new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ( ( ( "Unable to reconnect to " + hostname ) + " after policy reset" ) ) ; } retries -- ; java.util.concurrent.TimeUnit.MILLISECONDS.sleep ( 200 ) ; } org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer.logger.debug ( formatAfter , hostname ) ; }
public java.lang.Void runInTransaction ( ) { addVmImagesAndSnapshots ( ) ; updateSnapshotsFromExport ( ) ; moveOrCopyAllImageGroups ( ) ; org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices ( getVm ( ) . getStaticData ( ) , getParameters ( ) . isImportAsNewEntity ( ) ) ; org.ovirt.engine.core.bll.VmHandler.lockVm ( getVm ( ) . getId ( ) ) ; if ( getParameters ( ) . isImportAsNewEntity ( ) ) { getParameters ( ) . setVm ( getVm ( ) ) ; setVmId ( getVm ( ) . getId ( ) ) ; } return null ; }
private static void mapQosTypeToModel ( org.ovirt.engine.core.common.businessentities.qos.QosBase entity , org.ovirt.engine.api.model.QoS model ) { switch ( entity.getQosType ( ) ) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToModel ( entity , model ) ; break ; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToModel ( entity , model ) ; break ; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToModel ( entity , model ) ; break ; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToModel ( entity , model ) ; break ; default : throw new java.lang.IllegalArgumentException ( "Unsupported QoS type" ) ; } }
public void testHasPeersFalse ( ) { org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP.put ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.SERVER_NAME1 , org.ovirt.engine.core.bll.utils.GlusterUtilTest.FINGER_PRINT1 ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.EXPECTED_MAP ) . when ( glusterUtil ) . getFingerprints ( org.mockito.Matchers.any ( java.util.Set.class ) ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.utils.GlusterUtilTest.OUTPUT_XML_NO_PEERS ) . when ( glusterUtil ) . executePeerStatusCommand ( client ) ; org.junit.Assert.assertTrue ( glusterUtil.getPeers ( client ) . isEmpty ( ) ) ; }
public void onFailure ( final java.util.List < org.ovirt.engine.ui.frontend.communication.VdcOperation < org.ovirt.engine.core.common.queries.VdcQueryType , org.ovirt.engine.core.common.queries.VdcQueryParametersBase > > operationList , final java.lang.Throwable caught ) { try { if ( ignoreFailure ( caught ) ) { return ; } org.ovirt.engine.ui.frontend.Frontend.logger.log ( java.util.logging.Level.SEVERE , ( "Failed to execute runMultipleQueries: " + caught ) , caught ) ; org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult ( queryTypeList , queryParamsList , null ) ; failureEventHandler ( caught ) ; callback.executed ( f ) ; } finally { fireAsyncOperationCompleteEvent ( state ) ; } }
private void addDefaultClusterToPool ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup defaultCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; defaultCluster.setCompatibilityVersion ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1 ) ; defaultCluster.setId ( org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.DEFAULT_VDS_GROUP_ID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = new java.util.ArrayList < > ( ) ; clusters.add ( defaultCluster ) ; org.mockito.Mockito.when ( vdsGroupDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( clusters ) ; }
protected boolean canDoAction ( ) { boolean result = true ; if ( ( ( org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters ( ) . getEvent ( ) ) == null ) || ( org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters ( ) . getEvent ( ) . getOrigin ( ) . equalsIgnoreCase ( org.ovirt.engine.core.bll.AddExternalEventCommand.OVIRT ) ) ) { addCanDoActionMessage ( EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN ) ; result = false ; } if ( ! result ) { addCanDoActionMessage ( EngineMessage.VAR__ACTION__ADD ) ; addCanDoActionMessage ( EngineMessage.VAR__TYPE__EXTERNAL_EVENT ) ; } return result ; }
public void testGetStorageConnectionNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( 1 , getIscsiBondContainingStorageConnection ( ) ) ; setUpEntityQueryExpectations ( QueryType.GetStorageServerConnectionById , org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase.class , new java.lang.String [ ] { "ServerConnectionId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondStorageConnectionResourceTest.STORAGE_CONNECTION_ID.toString ( ) } , null ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void handleError ( ) { if ( ( org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.getVds ( ) . getSpmStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None ) ) { log.info ( "Fence failed on vds '{}' which is spm of pool '{}' - moving pool to non operational" , org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.getVds ( ) . getName ( ) , org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.getVds ( ) . getStoragePoolId ( ) ) ; runInternalAction ( VdcActionType.SetStoragePoolStatus , new org.ovirt.engine.core.common.action.SetStoragePoolStatusParameters ( org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.getVds ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational , org.ovirt.engine.core.common.AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM ) ) ; } log.error ( "Failed to run Fence script on vds '{}'." , org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.getVdsName ( ) ) ; org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.AlertIfPowerManagementOperationSkipped ( org.ovirt.engine.core.bll.VdsNotRespondingTreatmentCommand.RESTART , null ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.Boolean entity = getAllowOverbooking ( ) . getEntity ( ) ; if ( entity ) { getOptimizeForUtilization ( ) . setEntity ( true ) ; } getOptimizeForSpeed ( ) . setIsChangable ( ( ! entity ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { boolean isCardStatusChangable = iface.getPlugged ( ) . getIsChangable ( ) ; pluggedEditor.setEnabled ( isCardStatusChangable ) ; unpluggedEditor.setEnabled ( isCardStatusChangable ) ; boolean isCardStatusAvailable = iface.getPlugged ( ) . getIsAvailable ( ) ; cardStatusSelectionPanel.setVisible ( isCardStatusAvailable ) ; }
private void logNetworkException ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e ) { switch ( vds.getStatus ( ) ) { case Down : break ; case NonResponsive : org.ovirt.engine.core.vdsbroker.VdsManager.log.debug ( "Failed to refresh VDS, network error, continuing, vds='{}'({}): {}" , vds.getName ( ) , vds.getId ( ) , e.getMessage ( ) ) ; break ; default : org.ovirt.engine.core.vdsbroker.VdsManager.log.warn ( "Failed to refresh VDS, network error, continuing, vds='{}'({}): {}" , vds.getName ( ) , vds.getId ( ) , e.getMessage ( ) ) ; } org.ovirt.engine.core.vdsbroker.VdsManager.log.debug ( "Exception" , e ) ; }
protected org.ovirt.engine.core.compat.Guid getSmallIconId ( ) { if ( ( org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) ) != null ) { return org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmStaticData ( ) . getSmallIconId ( ) ; } return null ; }
public static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyOnCreate ( org.ovirt.engine.api.model.Usb usb , org.ovirt.engine.core.compat.Version vdsGroupVersion ) { if ( ( ( usb == null ) || ( ! ( usb.isSetEnabled ( ) ) ) ) || ( ! ( usb.isEnabled ( ) ) ) ) { return org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED ; } else { org.ovirt.engine.api.model.UsbType usbType = org.ovirt.engine.api.restapi.types.VmMapper.getUsbType ( usb ) ; if ( usbType == null ) { return org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyAccordingToClusterVersion ( vdsGroupVersion ) ; } else { return org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyAccordingToUsbType ( usbType ) ; } } }
private void createDummyPolicyUnit ( ) { dummyPolicyUnit = new org.ovirt.engine.core.common.scheduling.PolicyUnit ( ) ; dummyPolicyUnit.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; dummyPolicyUnit.setName ( "Dummy policy unit" ) ; dummyPolicyUnit.setPolicyUnitType ( PolicyUnitType.Filter ) ; dummyPolicyUnit.setParameterRegExMap ( new java.util.LinkedHashMap < java.lang.String , java.lang.String > ( ) ) ; }
protected void buildVmSoundDevices ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDeviceDao ( ) . getVmDeviceByVmIdAndType ( vm.getId ( ) , VmDeviceGeneralType.SOUND ) ; if ( ! ( vmSoundDevices.isEmpty ( ) ) ) { createInfo.put ( VdsProperties.soundDevice , osRepository.getSoundDevice ( vm.getStaticData ( ) . getOsId ( ) , vm.getClusterCompatibilityVersion ( ) ) ) ; } }
public void setInSlot ( java.lang.Object slot , com.google.gwt.user.client.ui.Widget content ) { if ( slot == ( org.ovirt.engine.ui.userportal.section.main.presenter.tab.basic.MainTabBasicListPresenterWidget.TYPE_VmListContent ) ) { vmPanel.clear ( ) ; if ( content != null ) { vmPanel.add ( content ) ; } } else { super . setInSlot ( slot , content ) ; } }
private void PollAndUpdateAsyncTasks ( ) { if ( logChangedMap ) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat ( "Polling and updating Async Tasks: {0} tasks, {1} tasks to poll now" , _tasks.size ( ) , NumberOfTasksToPoll ( ) ) ; } java.util.Set < org.ovirt.engine.core.compat.Guid > poolsOfActiveTasks = getPoolIdsTasks ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > > poolsAllTasksMap = getSPMsTasksStatuses ( poolsOfActiveTasks ) ; updateTaskStatuses ( poolsAllTasksMap ) ; }
org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentNotRemoved ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment ) { org.ovirt.engine.core.compat.Guid networkAttachmentId = networkAttachment.getId ( ) ; if ( isNewAttachment ( networkAttachmentId ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } boolean attachmentInRemoveList = params.getRemovedNetworkAttachments ( ) . contains ( networkAttachmentId ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NETWORK_ATTACHMENT_IN_BOTH_LISTS , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "NETWORK_ATTACHMENT_IN_BOTH_LISTS_ENTITY" , networkAttachmentId.toString ( ) ) ) . when ( attachmentInRemoveList ) ; }
public void unmanagedVlanAddedToNic ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( "nic0" , null ) ; mockExistingIfaces ( nic ) ; java.lang.String networkName = "net" ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForNics ( nic , createVlan ( nic , 100 , networkName ) ) ) ; validateAndExpectViolation ( helper , EngineMessage.NETWORKS_DONT_EXIST_IN_CLUSTER , networkName ) ; }
public void testCheckGroupsCanBeAttachedAlreadyExists ( ) { org.ovirt.engine.core.common.businessentities.RoleGroupMap map = new org.ovirt.engine.core.common.businessentities.RoleGroupMap ( getParams ( ) . getActionGroups ( ) . get ( 0 ) , getParams ( ) . getRoleId ( ) ) ; mockGetAllForRole ( java.util.Collections.singletonList ( map ) ) ; java.util.List < java.lang.String > messages = new java.util.ArrayList < > ( 1 ) ; org.junit.Assert.assertTrue ( "validate should fail" , getCommand ( ) . checkIfGroupsCanBeAttached ( messages ) ) ; org.junit.Assert.assertEquals ( "wrong messages" , EngineMessage.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED.toString ( ) , messages.get ( 0 ) ) ; }
private void logHostFailToResponde ( org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex , long timeoutToFence ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.info ( ( "Server failed to respond, vds_id='{}', vds_name='{}', vm_count={}, " + "spm_status='{}', non-responsive_timeout (seconds)={}, error: {}" ) , cachedVds.getId ( ) , cachedVds.getName ( ) , cachedVds.getVmCount ( ) , cachedVds.getSpmStatus ( ) , java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds ( timeoutToFence ) , ex.getMessage ( ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ; logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( cachedVds.getId ( ) ) ; logable.updateCallStackFromThrowable ( ex ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.VDS_FAILURE ) ; }
public void testExecuteCommandByClusterIdForRestart ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT , org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_RESTART ) ) ) ; setUpMockUpForRestart ( ) ; mockBackend ( true , null , GlusterServiceStatus.RUNNING ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( serverServiceDao , org.mockito.Mockito.times ( 4 ) ) . updateByServerIdAndServiceType ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class ) ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_SERVICE_RESTARTED ) ; }
public void testBootProtocolSetForDisplayNetworkWhenBootProtocolIsDhcp ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ; network.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( NetworkBootProtocol.DHCP , null , null ) ; attachment.setNetworkId ( network.getId ( ) ) ; doTestBootProtocolSetForDisplayNetworkWhenNullValuedIpConfigurationAndWhenNetworkClusterDisplay ( true , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) , network , attachment ) ; }
public void getHostListByDataCenter ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid spId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VDS > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsByStoragePool , new org.ovirt.engine.core.common.queries.IdQueryParameters ( spId ) , aQuery ) ; }
public void testGetValue ( ) { org.junit.Assert.assertFalse ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.CinderProviderSupported , "3.5" ) ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.CinderProviderSupported , "3.6" ) ) ; org.junit.Assert.assertTrue ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.CinderProviderSupported , "4.0" ) ) ; }
public javax.ws.rs.core.Response remove ( org.ovirt.engine.api.model.Action action ) { get ( ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters params = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( asGuid ( id ) ) ; if ( action.isSetForce ( ) ) { params.setForceDelete ( action.isForce ( ) ) ; } if ( ( action.isSetStorageDomain ( ) ) && ( action.getStorageDomain ( ) . isSetId ( ) ) ) { params.setStorageDomainId ( asGuid ( action.getStorageDomain ( ) . getId ( ) ) ) ; } return performAction ( VdcActionType.RemoveDisk , params ) ; }
public void testIpConfiguredForStaticBootProtocolWhenIpConfigurationIsNull ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; attachment.setIpConfiguration ( null ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( attachment ) ; org.junit.Assert.assertThat ( validator.ipConfiguredForStaticBootProtocol ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void enableLoadBalancer ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start scheduling to enable vds load balancer" ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . scheduleAFixedDelayJob ( this , "performLoadBalancing" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsLoadBalancingIntervalInMinutes ) , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished scheduling to enable vds load balancer" ) ; } }
public boolean IsTemplate ( ) { java.lang.String id1 = "1" ; java.lang.String id2 = "2" ; org.ovirt.engine.core.compat.backendcompat.XmlNode node = _document.SelectSingleNode ( "//*/Content/TemplateId" ) ; if ( ! ( org.apache.commons.lang.StringUtils.isBlank ( node.InnerText ) ) ) { id1 = node.InnerText ; } org.ovirt.engine.core.compat.backendcompat.XmlNodeList list = _document.SelectNodes ( "//*/Content/Section" ) ; for ( org.ovirt.engine.core.compat.backendcompat.XmlNode section : list ) { java.lang.String value = section.Attributes.get ( "xsi:type" ) . getValue ( ) ; if ( org.apache.commons.lang.StringUtils.equals ( value , "ovf:OperatingSystemSection_Type" ) ) { id2 = section.Attributes.get ( "ovf:id" ) . getValue ( ) ; } } return org.apache.commons.lang.StringUtils.equals ( id1 , id2 ) ; }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction ( ) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters ( ) ; parameters.setImagesParameters ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) ) ; if ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . isUseCinderCommandCallback ( ) ) { parameters.setShouldBeEndedByParent ( false ) ; parameters.setCommandId ( org.ovirt.engine.core.bll.RunVmCommand.getParametersForChildCommand ( ) . get ( 0 ) . getCommandId ( ) ) ; } return parameters ; }
public void updateCompletedJobAndSteps ( final org.ovirt.engine.core.common.job.Job job ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { jobDao.update ( job ) ; stepDao.updateJobStepsCompleted ( job.getId ( ) , job.getStatus ( ) , job.getEndTime ( ) ) ; return null ; } } ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VM > getVmsByIds ( java.util.List < org.ovirt.engine.core.compat.Guid > vmsIds ) { return getCallsHandler ( ) . executeReadList ( "GetVmsByIds" , org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "vms_ids" , createArrayOfUUIDs ( vmsIds ) ) ) ; }
private void pollAndUpdateAsyncTasks ( ) { if ( logChangedMap ) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat ( "Polling and updating Async Tasks: {0} tasks, {1} tasks to poll now" , _tasks.size ( ) , numberOfTasksToPoll ( ) ) ; } java.util.Set < org.ovirt.engine.core.compat.Guid > poolsOfActiveTasks = getPoolIdsTasks ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.AsyncTaskStatus > > poolsAllTasksMap = getSPMsTasksStatuses ( poolsOfActiveTasks ) ; updateTaskStatuses ( poolsAllTasksMap ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateWithHostSetupNetworksValidator ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) , getExistingNics ( ) , getExistingAttachments ( ) , getNetworkBusinessEntityMap ( ) , managementNetworkUtil , networkClusterDao , networkAttachmentDao , networkDao , vdsDao ) ; return validator.validate ( ) ; }
protected boolean canDoAction ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.VmLogonCommand.getVm ( ) ; if ( vm == null ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST ) ; return false ; } if ( ! ( org.ovirt.engine.core.bll.VmLogonCommand.canRunActionOnNonManagedVm ( ) ) ) { return false ; } return true ; }
private static boolean isEnoughFreeSpace ( final org.ovirt.engine.core.common.businessentities.storage_domains domain ) { org.ovirt.engine.core.common.businessentities.StorageDomainDynamic dynamic = domain.getStorageDynamicData ( ) ; return ( ( dynamic != null ) && ( ( dynamic.getfreeDiskInGB ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.FreeSpaceCriticalLowInGB ) ) ) ) && ( ( dynamic.getfreeDiskPercent ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.FreeSpaceLow ) ) ) ; }
protected java.util.List < java.lang.Class < ? > > getValidationGroups ( ) { if ( ( org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters ( ) . getVmStaticData ( ) . getVmType ( ) ) == ( org.ovirt.engine.core.common.businessentities.VmType.Desktop ) ) { org.ovirt.engine.core.bll.VmManagementCommandBase.addValidationGroup ( org.ovirt.engine.core.common.validation.group.DesktopVM.class ) ; } return super . getValidationGroups ( ) ; }
public void removeAllCommandsInHierarchy ( final org.ovirt.engine.core.compat.Guid commandId ) { for ( org.ovirt.engine.core.compat.Guid childCmdId : getChildCommandIds ( commandId ) ) { removeAllCommandsInHierarchy ( childCmdId ) ; } removeCommand ( commandId ) ; }
protected void executeQueryCommand ( ) { boolean filterInternalDomain = false ; if ( ( org.ovirt.engine.core.bll.GetDomainListQuery.getParameters ( ) ) instanceof org.ovirt.engine.core.common.queries.GetDomainListParameters ) { filterInternalDomain = ( ( org.ovirt.engine.core.common.queries.GetDomainListParameters ) ( org.ovirt.engine.core.bll.GetDomainListQuery.getParameters ( ) ) ) . getFilterInternalDomain ( ) ; } java.util.List < java.lang.String > domains = org.ovirt.engine.core.bll.adbroker.LdapBrokerUtils.getDomainsList ( filterInternalDomain ) ; java.lang.String internalDomainName = org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( ConfigValues.AdminDomain ) ; java.util.Collections.sort ( domains , new org.ovirt.engine.core.bll.LoginDomainComparator ( internalDomainName ) ) ; org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue ( ) . setReturnValue ( domains ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Nic nic ) { validateEnums ( org.ovirt.engine.api.model.Nic.class , nic ) ; validateParameters ( nic , "name" ) ; return performCreate ( VdcActionType.AddVmInterface , new org.ovirt.engine.core.common.action.AddVmInterfaceParameters ( vmId , map ( nic ) ) , new org.ovirt.engine.api.restapi.resource.NicResolver ( nic.getName ( ) ) ) ; }
public static void getTemplateDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid templateId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmTemplatesDisks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) , aQuery ) ; }
protected org.ovirt.engine.core.common.action.VmDiskOperationParameterBase createParameters ( ) { return new org.ovirt.engine.core.common.action.VmDiskOperationParameterBase ( diskVmElement ) ; }
public static void getUserMessageOfTheDayViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.UserMessageOfTheDay , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotplugMemory ( java.util.Map info ) { try { return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( vdsServer.hotplugMemory ( info ) ) ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateAttachmentNotReferenceVlanDevice ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = existingInterfacesMap.get ( attachment.getNicName ( ) ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ATTACHMENT_REFERENCE_VLAN_DEVICE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "ATTACHMENT_REFERENCE_VLAN_DEVICE_ENTITY" , attachment.getNetworkName ( ) ) , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "nicName" , attachment.getNicName ( ) ) ) . when ( ( ( nic != null ) && ( org.ovirt.engine.core.utils.NetworkUtils.isVlan ( nic ) ) ) ) ; }
private static org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VideoRAMSettings selectVideoRAMSettings ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { org.ovirt.engine.core.compat.Version vmVersion = vmBase.getCustomCompatibilityVersion ( ) ; java.util.function.Supplier < org.ovirt.engine.core.compat.Version > clusterVersionSupplier = ( ) -> org.ovirt.engine.core.bll.utils.ClusterUtils.getCompatibilityVersion ( vmBase ) ; if ( org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective ( vmVersion , clusterVersionSupplier ) . greaterOrEquals ( Version.v3_6 ) ) { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.VgamemVideoRAMSettings ( ) ; } else { return new org.ovirt.engine.core.bll.utils.VideoDeviceSettings.LegacyVideoRAMSettings ( ) ; } }
public void getVMsWithVNumaNodesByClusterId ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid clusterId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmsWithNumaByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , asyncQuery ) ; }
void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { nameEditor.setLabel ( constants.nameProvider ( ) ) ; typeEditor.setLabel ( constants.typeProvider ( ) ) ; descriptionEditor.setLabel ( constants.descriptionProvider ( ) ) ; urlEditor.setLabel ( constants.urlProvider ( ) ) ; testButton.setLabel ( constants.testProvider ( ) ) ; requiresAuthenticationEditor.setLabel ( constants.requiresAuthenticationProvider ( ) ) ; usernameEditor.setLabel ( constants.usernameProvider ( ) ) ; passwordEditor.setLabel ( constants.passwordProvider ( ) ) ; }
public void glusterServiceNotRequired ( ) { org.mockito.Mockito.when ( cluster.getCompatibilityVersion ( ) ) . thenReturn ( org.mockito.Mockito.mock ( org.ovirt.engine.core.compat.Version.class ) ) ; org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( false ) ; validator = new org.ovirt.engine.core.bll.validator.ClusterValidator ( dbFacade , cluster , cpuFlagsManagerHandler ) ; org.junit.Assert.assertThat ( validator.glusterServiceSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
protected boolean canDoAction ( ) { if ( ( ! ( super . canDoAction ( ) ) ) || ( ! ( org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.checkStorageDomain ( ) ) ) ) { return false ; } oldDomain = org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomainStaticDao ( ) . get ( org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain ( ) . setLastTimeUsedAsMaster ( oldDomain.getLastTimeUsedAsMaster ( ) ) ; return validateStoragePropertiesUpdate ( ) ; }
private java.util.List < java.lang.String > findViolatedNics ( java.util.Map < java.lang.String , java.util.List < org.ovirt.engine.core.bll.validator.network.NetworkType > > nicNameToNetworkTypesMap ) { java.util.List < java.lang.String > violatedNics = new java.util.ArrayList < > ( ) ; for ( java.util.Map.Entry < java.lang.String , java.util.List < org.ovirt.engine.core.bll.validator.network.NetworkType > > nicNameToNetworkTypes : nicNameToNetworkTypesMap.entrySet ( ) ) { java.lang.String nicName = nicNameToNetworkTypes.getKey ( ) ; java.util.List < org.ovirt.engine.core.bll.validator.network.NetworkType > networkTypes = nicNameToNetworkTypes.getValue ( ) ; if ( ! ( networkExclusivenessValidator.isNetworkExclusive ( networkTypes ) ) ) { violatedNics.add ( nicName ) ; } } return violatedNics ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permissionSubjects = new java.util.ArrayList < > ( ) ; permissionSubjects.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.common.VdcObjectType.Storage , org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK ) ) ; permissionSubjects.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getParameters ( ) . getSourceStorageDomainId ( ) , org.ovirt.engine.core.common.VdcObjectType.Storage , org.ovirt.engine.core.common.businessentities.ActionGroup.ACCESS_IMAGE_STORAGE ) ) ; return permissionSubjects ; }
public boolean validate ( org.ovirt.engine.core.config.entity.ConfigKey key , java.lang.String value ) { if ( ( org.apache.commons.lang.StringUtils.isNotBlank ( value ) ) && ( value.equals ( org.ovirt.engine.core.config.entity.helper.PasswordValueHelper.INTERACTIVE_MODE ) ) ) { return true ; } if ( ( parser.getAdminPassFile ( ) ) != null ) { return true ; } return false ; }
public void parseVolumeChainMoreItems ( ) throws java.lang.Exception { org.ovirt.engine.core.utils.ovf.xml.XmlDocument devices = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument ( org.ovirt.engine.core.vdsbroker.libvirt.VmDevicesConverterTest.DEVICES_XML ) ; java.util.List < java.util.Map < java.lang.String , java.lang.Object > > res = converter.parseVolumeChain ( devices.selectSingleNode ( "//*/disk[2]" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 3 , res.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "cc5beaf2-3265-4b36-b7be-4f23dc3b07af" , res.get ( 0 ) . get ( VdsProperties.VolumeId ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "fff3c995-e7c3-4a2c-96a3-f0ce569a57c2" , res.get ( 1 ) . get ( VdsProperties.VolumeId ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "011046ce-312a-42e6-bcb7-764fd332da02" , res.get ( 2 ) . get ( VdsProperties.VolumeId ) ) ; }
public void getStorageDomainDefaultWipeAfterDelete ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return ( ( java.lang.Boolean ) ( returnValue ) ) ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters params = new org.ovirt.engine.core.common.queries.GetStorageDomainDefaultWipeAfterDeleteParameters ( storageType ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainDefaultWipeAfterDelete , params , aQuery ) ; }
protected void executeCommand ( ) { completeGenerationInfo ( ) ; org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover ( VDSCommandType.CopyVolumeData , new org.ovirt.engine.core.common.vdscommands.CopyVolumeDataVDSCommandParameters ( org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getStorageJobId ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getSrcInfo ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getDstInfo ( ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . isCollapse ( ) ) , org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters ( ) . getStoragePoolId ( ) , this ) ; org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.setSucceeded ( true ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterVolumeSet ( java.lang.String volumeName , java.lang.String key , java.lang.String value ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "GlusterVolume.set" ) . withParameter ( "volumeName" , volumeName ) . withParameter ( "option" , key ) . withParameter ( "value" , value ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn ( response ) ; }
private boolean bondIsUpdatedAndDoesNotContainCertainSlave ( java.lang.String slaveName , java.lang.String bondName ) { for ( org.ovirt.engine.core.common.businessentities.network.Bond bond : params.getBonds ( ) ) { boolean isRequiredBond = bond.getName ( ) . equals ( bondName ) ; if ( isRequiredBond ) { boolean updatedBondDoesNotContainGivenSlave = ! ( bond.getSlaves ( ) . contains ( slaveName ) ) ; return updatedBondDoesNotContainGivenSlave ; } } return false ; }
public void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public boolean test ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { updateDisksStorage ( storageDomain , memoryDisks ) ; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator ( storageDomain ) ; return ( storageDomainValidator.isDomainWithinThresholds ( ) . isValid ( ) ) && ( storageDomainValidator.hasSpaceForClonedDisks ( memoryDisks ) . isValid ( ) ) ; }
public void setScope ( java.lang.String scope ) { if ( ( ( scopeAsList ) == null ) && ( ! ( org.ovirt.engine.core.sso.utils.SsoUtils.strippedScopeAsList ( org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList ( scope ) ) . isEmpty ( ) ) ) ) { this . scope = scope ; this . scopeAsList = org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList ( scope ) ; restApiScope = org.ovirt.engine.core.sso.utils.SsoUtils.isRestApiScope ( scopeAsList ) ; } }
public static boolean isOsSupportedForVirtIoScsi ( int osId , org.ovirt.engine.core.compat.Version clusterVersion ) { java.util.List < java.lang.String > diskInterfaces = org.ovirt.engine.core.bll.validator.VmValidationUtils.getOsRepository ( ) . getDiskInterfaces ( osId , clusterVersion ) ; return diskInterfaces.contains ( DiskInterface.VirtIO_SCSI.toString ( ) ) ; }
public void testEvent ( ) { testValidSql ( "Event: " , "SELECT * FROM ((SELECT audit_log.* FROM audit_log WHERE not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Event: severity=error " , "SELECT * FROM ((SELECT audit_log.* FROM audit_log WHERE audit_log.severity = '2' AND not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Event: severity=alert " , "SELECT * FROM ((SELECT audit_log.* FROM audit_log WHERE audit_log.severity = '10' AND not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; testValidSql ( "Event: host.name = \"host1\" " , "SELECT * FROM ((SELECT audit_log.* FROM audit_log LEFT OUTER JOIN vds_with_tags ON audit_log.vds_id=vds_with_tags.vds_id WHERE vds_with_tags.vds_name LIKE host1 AND not deleted) ORDER BY audit_log_id DESC ) as T1 OFFSET (1 -1) LIMIT 0" ) ; }
public static void addVideoDevices ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , int numberOfVideoDevices ) { for ( int i = 0 ; i < numberOfVideoDevices ; i ++ ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmBase.getId ( ) ) , VmDeviceGeneralType.VIDEO , vmBase.getDefaultDisplayType ( ) . getDefaultVmDeviceType ( ) , org.ovirt.engine.core.bll.utils.VmDeviceUtils.getVideoDeviceSpecParams ( vmBase ) , true , false ) ; } }
public static java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > parseLUNList ( java.util.Map < java.lang.String , java.lang.Object > [ ] lunList , org.ovirt.engine.core.compat.Version compatibilityVersion ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > result = new java.util.ArrayList < > ( lunList.length ) ; for ( java.util.Map < java.lang.String , java.lang.Object > xlun : lunList ) { result.add ( org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.parseLunFromXmlRpc ( xlun , compatibilityVersion ) ) ; } return result ; }
public void testUnknownTypeLunCantBeAdded ( ) { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk ( ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( disk ) ; initializeCommand ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , parameters ) ; disk.getLun ( ) . setLunType ( StorageType.UNKNOWN ) ; org.junit.Assert.assertFalse ( "checkIfLunDiskCanBeAdded() succeded for LUN with UNKNOWN type" , command.checkIfLunDiskCanBeAdded ( spyDiskValidator ( disk ) ) ) ; org.junit.Assert.assertTrue ( "checkIfLunDiskCanBeAdded() failed but correct can do action hasn't been added to the return response" , verifyValidationMessagesContainMessage ( EngineMessage.ACTION_TYPE_FAILED_DISK_LUN_HAS_NO_VALID_TYPE ) ) ; }
public void testValidateModifiedBondSlavesWhenSlaveInterfaceDoesNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters ( host.getId ( ) ) ; params.setBonds ( java.util.Collections.singletonList ( bond ) ) ; doTestValidateModifiedBondSlaves ( params , null , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > emptyList ( ) , java.util.Collections.< org.ovirt.engine.core.common.businessentities.network.Network > emptyList ( ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST ) ) ; }
protected org.ovirt.engine.core.common.businessentities.StorageDomain mockGetExistingDomain ( boolean answerWithDomain ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = java.util.Collections.emptyList ( ) ; if ( answerWithDomain ) { sd = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; sd.getStorageStaticData ( ) . setConnection ( new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ) ; domains = java.util.Arrays.asList ( sd ) ; } org.mockito.Mockito.doReturn ( createQueryReturnValueWith ( domains ) ) . when ( backend ) . runInternalQuery ( org.mockito.Matchers.eq ( VdcQueryType.GetExistingStorageDomainList ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class ) ) ; return sd ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( args.propertyName.equalsIgnoreCase ( "selectedSessionSummaryRow" ) ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails selectedSessionDetail = model.getGeoRepSessionSummary ( ) . getSelectedItem ( ) . getEntity ( ) ; getView ( ) . setCheckPointCompletedAtVisibility ( selectedSessionDetail.isCheckpointCompleted ( ) ) ; getView ( ) . updateSessionDetailProperties ( selectedSessionDetail ) ; } }
public void onRefreshActiveModel ( org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent event ) { if ( getTimer ( ) . isActive ( ) ) { if ( handleRefreshActiveModel ( event ) ) { syncSearch ( ) ; } if ( event.isDoFastForward ( ) ) { getTimer ( ) . fastForward ( ) ; } } }
public void getEngineSshPublicKey ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetEngineSSHPublicKey , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel , ? > getConfirmModelPopup ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkQoSListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand ) { if ( lastExecutedCommand.equals ( getModel ( ) . getRemoveCommand ( ) ) ) { return removeConfirmPopupProvider.get ( ) ; } else { return super . getConfirmModelPopup ( source , lastExecutedCommand ) ; } }
private void postDoUpdateManagedFieldsFrom ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { if ( isNextRunConfigurationExists ( ) ) { deactivate ( ) ; getModel ( ) . getIsSoundcardEnabled ( ) . setEntity ( isVmDeviceExists ( vmBase.getManagedDeviceMap ( ) , VmDeviceType.SOUND.getName ( ) ) ) ; getModel ( ) . getIsConsoleDeviceEnabled ( ) . setEntity ( isVmDeviceExists ( vmBase.getManagedDeviceMap ( ) , VmDeviceType.CONSOLE.getName ( ) ) ) ; activate ( ) ; } updateWatchdog ( vmBase ) ; }
public void testDevicePassthroughMapping ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( Guid.Empty ) ; vds.setHostDevicePassthroughEnabled ( true ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; org.junit.jupiter.api.Assertions.assertNotNull ( host ) ; org.junit.jupiter.api.Assertions.assertNotNull ( host.getDevicePassthrough ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( host.getDevicePassthrough ( ) . isEnabled ( ) ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc glusterVolumeSnapshotList ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String volumeName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterVolumeSnapshotList ( ( volumeName == null ? "" : volumeName ) ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeSnapshotInfoReturnForXmlRpc ( clusterId , xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void testAllByConnectionId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = dao.getAllByConnectionId ( new org.ovirt.engine.core.compat.Guid ( "0cc146e8-e5ed-482c-8814-270bc48c297f" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , domains.size ( ) , "Unexpected number of storage domains by connection id" ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.STORAGE_DOMAIN_NFS_MASTER , domains.get ( 0 ) . getId ( ) , "Wrong storage domain id for search by connection id" ) ; }
private void writeParameter ( org.ovirt.api.metamodel.concepts.Parameter parameter ) { writer.writeStartElement ( "parameter" ) ; writeCommon ( parameter ) ; writer.writeElement ( "in" , java.lang.Boolean.toString ( parameter.isIn ( ) ) ) ; writer.writeElement ( "out" , java.lang.Boolean.toString ( parameter.isIn ( ) ) ) ; writeTypeRef ( parameter.getType ( ) ) ; writer.writeEndElement ( ) ; }
public void testPrefixViewCache ( ) throws java.lang.Exception { java.io.File file = writeConf ( ) ; org.ovirt.engine.core.extensions.mgr.Configuration config = org.ovirt.engine.core.extensions.mgr.Configuration.loadFile ( file ) ; org.junit.Assert.assertNotNull ( config ) ; org.ovirt.engine.core.extensions.mgr.Configuration view1 = config.getView ( "a" ) ; org.junit.Assert.assertNotNull ( view1 ) ; org.ovirt.engine.core.extensions.mgr.Configuration view2 = config.getView ( "a" ) ; org.junit.Assert.assertNotNull ( view2 ) ; org.junit.Assert.assertSame ( view1 , view2 ) ; }
public void testStringSubstitutionWithList ( ) { org.ovirt.engine.core.common.interfaces.ErrorTranslator et = new org.ovirt.engine.core.utils.ErrorTranslatorImpl ( org.ovirt.engine.core.utils.ErrorTranslatorTest.FILENAME ) ; java.util.List < java.lang.String > error = et.translateErrorText ( java.util.Arrays.asList ( org.ovirt.engine.core.utils.ErrorTranslatorTest.TEST_KEY_WITH_REPLACEMENT , "$action SOMEACTION" , "$type SOME Type" ) ) ; java.lang.String result = "Cannot SOMEACTION SOME Type. VM's Image doesn't exist." ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , error.size ( ) , "Size" ) ; org.junit.jupiter.api.Assertions.assertEquals ( result , error.get ( 0 ) , "String should equal" ) ; }
public org.ovirt.engine.core.common.businessentities.network.NetworkView mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkView entity = super . mapRow ( rs , rowNum ) ; entity.setStoragePoolName ( rs.getString ( "storage_pool_name" ) ) ; entity.setCompatabilityVersion ( new org.ovirt.engine.core.compat.Version ( rs.getString ( "compatibility_version" ) ) ) ; entity.setProviderName ( rs.getString ( "provider_name" ) ) ; return entity ; }
private org.ovirt.engine.core.common.action.PlugUnplugVmNicParameters createPlugUnPlugParameters ( ) { org.ovirt.engine.core.common.action.PlugUnplugVmNicParameters plugUnplugVmNicParameters = new org.ovirt.engine.core.common.action.PlugUnplugVmNicParameters ( org.ovirt.engine.core.bll.AddVmInterfaceCommand.getParameters ( ) . getInterface ( ) . getId ( ) , org.ovirt.engine.core.common.action.PlugAction.PLUG ) ; plugUnplugVmNicParameters.setVmId ( org.ovirt.engine.core.bll.AddVmInterfaceCommand.getParameters ( ) . getVmId ( ) ) ; return plugUnplugVmNicParameters ; }
private boolean checkDerivedDisksFromDiskNotExist ( org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage ) { return validate ( createDiskImagesValidator ( diskImage ) . diskImagesHaveNoDerivedDisks ( org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.VolumeFormat > getVolumeFormats ( ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.VolumeFormat > ( java.util.Arrays.asList ( VolumeFormat.COW , VolumeFormat.RAW ) ) ; }
protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
protected void setUpEntityQueryExpectations ( java.lang.String failure ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.RepoImage > entities = new java.util.ArrayList < > ( ) ; for ( int i = 0 ; i < ( NAMES.length ) ; i ++ ) { entities.add ( getEntity ( i ) ) ; } setUpEntityQueryExpectations ( VdcQueryType.GetImagesList , org.ovirt.engine.core.common.queries.GetImagesListParameters.class , new java.lang.String [ ] { "StorageDomainId" , "ImageType" } , new java.lang.Object [ ] { GUIDS [ 3 ] , org.ovirt.engine.core.common.businessentities.storage.ImageFileType.All } , entities , failure ) ; }
private org.ovirt.engine.core.common.vdscommands.MigrateVDSCommandParameters createMigrateVDSCommandParameters ( ) { java.lang.String srcVdsHost = org.ovirt.engine.core.bll.MigrateVmCommand.getVds ( ) . getHostName ( ) ; java.lang.String dstVdsHost = java.lang.String.format ( "%1$s:%2$s" , getDestinationVds ( ) . getHostName ( ) , getDestinationVds ( ) . getPort ( ) ) ; return new org.ovirt.engine.core.common.vdscommands.MigrateVDSCommandParameters ( org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.MigrateVmCommand.getVmId ( ) , srcVdsHost , vdsDestinationId , dstVdsHost , org.ovirt.engine.core.common.businessentities.MigrationMethod.ONLINE , isTunnelMigrationUsed ( ) , getMigrationNetworkIp ( ) ) ; }
public void testAllocateVm ( ) throws java.lang.Exception { setUpGetVmExpectations ( 1 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.AttachUserToVmFromPoolAndRun , org.ovirt.engine.core.common.action.VmPoolUserParameters.class , new java.lang.String [ ] { "VmPoolId" , "IsInternal" } , new java.lang.Object [ ] { GUIDS [ 0 ] , java.lang.Boolean.FALSE } , GUIDS [ 0 ] ) ) ; verifyTestAllocateVmActionResponse ( resource.allocateVm ( new org.ovirt.engine.api.model.Action ( ) ) ) ; }
private void buildSharedLockMap ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vmsDiskPluggedTo ) { sharedLockMap = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo ) { sharedLockMap.put ( vm.getId ( ) . toString ( ) , LockingGroup.VM.name ( ) ) ; } }
protected boolean performImageChecksForRunningVm ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < java.lang.String > message , org.ovirt.engine.core.common.action.RunVmParams runParams , java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > vmDisks ) { org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator ( vmDisks ) ; return ( validate ( diskImagesValidator.diskImagesNotLocked ( ) , message ) ) && ( org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks ( message , vm.getStoragePoolId ( ) , false , false , ( ( ! ( vm.isAutoStartup ( ) ) ) || ( ! ( runParams.getIsInternal ( ) ) ) ) , vmDisks ) ) ; }
private void initExternalProvidersList ( ) { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.Provider > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( result ) ) ; providers.add ( 0 , null ) ; getExternalProviders ( ) . setItems ( providers ) ; getExternalProviders ( ) . setSelectedItem ( null ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetAllNetworkProviders ( getProvidersQuery ) ; }
private void updateOverCommitPercent ( ) { if ( ( ( getAvailableDiskSize ( ) ) == null ) || ( ( getAvailableDiskSize ( ) ) == 0 ) ) { setStorageDomainOverCommitPercent ( 0 ) ; } else { setStorageDomainOverCommitPercent ( ( ( ( ( getCommittedDiskSize ( ) ) - ( getActualImagesSize ( ) ) ) * 100 ) / ( getAvailableDiskSize ( ) ) ) ) ; } }
public static void GetNextAvailableDiskAliasNameByVMId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNextAvailableDiskAliasNameByVMId , new org.ovirt.engine.core.common.queries.GetAllDisksByVmIdParameters ( vmId ) , aQuery ) ; }
public java.lang.String toString ( ) { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . append ( "exclusiveLocks" , exclusiveLocks ) . append ( "sharedLocks" , sharedLocks ) . build ( ) ; }
public org.springframework.jdbc.core.JdbcTemplate getJdbcTemplate ( ) { return jdbcTemplate ; }
protected void persistCommandIfNeeded ( ) { if ( ( ( getCallback ( ) ) != null ) || ( parentHasCallback ( ) ) ) { persistCommand ( getParameters ( ) . getParentCommand ( ) ) ; } }
private void testAllQosValuesEqualToNull ( boolean isAllNull ) { boolean allValues = true ; java.util.List < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > allForStorageDomain = dao.getAllForStorageDomain ( FixturesTool.STORAGE_DOAMIN_SCALE_SD5 ) ; org.junit.Assert.assertNotNull ( allForStorageDomain ) ; org.junit.Assert.assertFalse ( allForStorageDomain.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile : allForStorageDomain ) { allValues &= ( diskProfile.getQosId ( ) ) == null ; } org.junit.Assert.assertEquals ( isAllNull , allValues ) ; }
public void testImportVMFromConfigurationWhenStorageDomainIsInactive ( ) { initCommand ( getOvfEntityData ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain ( ) ; storageDomain.setStatus ( StorageDomainStatus.Inactive ) ; org.mockito.Mockito.when ( validator.validateUnregisteredEntity ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.IVdcQueryable.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.OvfEntityData.class ) , org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 ) ; }
public void testSave ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain ( FixturesTool.STORAGE_DOAMIN_NFS_ISO , ImageFileType.ISO ) ; org.junit.Assert.assertNotNull ( listOfRepoFiles ) ; org.junit.Assert.assertSame ( listOfRepoFiles.isEmpty ( ) , true ) ; org.ovirt.engine.core.common.businessentities.RepoImage newRepoFileMap = org.ovirt.engine.core.dao.RepoFileMetaDataDAOTest.getNewIsoRepoFile ( ) ; repoFileMetaDataDao.addRepoFileMap ( newRepoFileMap ) ; listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain ( FixturesTool.STORAGE_DOAMIN_NFS_ISO , ImageFileType.ISO ) ; org.junit.Assert.assertSame ( listOfRepoFiles.isEmpty ( ) , false ) ; }
protected org.ovirt.engine.api.model.GlusterBrick addParents ( org.ovirt.engine.api.model.GlusterBrick glusterBrick ) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster ( ) ; cluster.setId ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.clusterId.toString ( ) ) ; org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume ( ) ; volume.setId ( org.ovirt.engine.api.restapi.resource.gluster.GlusterTestHelper.volumeId.toString ( ) ) ; volume.setCluster ( cluster ) ; glusterBrick.setGlusterVolume ( volume ) ; return glusterBrick ; }
public void updateAllInBatch ( java.lang.String procedureName , java.util.Collection < T > paramValues , org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper < T > mapper ) { org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getCallsHandler ( ) . executeStoredProcAsBatch ( ( procedureName == null ? org.ovirt.engine.core.dao.MassOperationsGenericDaoDbFacade.getProcedureNameForUpdate ( ) : procedureName ) , paramValues , mapper ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return ( ( network.getName ( ) . trim ( ) . toLowerCase ( ) . equals ( getNetworkName ( ) . trim ( ) . toLowerCase ( ) ) ) && ( ! ( network.getId ( ) . equals ( getNetwork ( ) . getId ( ) ) ) ) ) && ( getNetwork ( ) . getDataCenterId ( ) . equals ( network.getDataCenterId ( ) ) ) ; }
private static void mockStorageDomainStatic ( org.ovirt.engine.core.bll.ImportVmTemplateCommand command , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType ) { final org.ovirt.engine.core.dao.StorageDomainStaticDAO dao = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StorageDomainStaticDAO.class ) ; final org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic ( ) ; domain.setStorageType ( storageType ) ; org.mockito.Mockito.when ( dao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito.doReturn ( dao ) . when ( command ) . getStorageDomainStaticDAO ( ) ; }
public org.ovirt.engine.core.common.businessentities.network.VnicProfileView mapRow ( java.sql.ResultSet rs , int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.VnicProfileView entity = super . mapRow ( rs , rowNum ) ; entity.setNetworkName ( rs.getString ( "network_name" ) ) ; entity.setNetworkQosName ( rs.getString ( "network_qos_name" ) ) ; entity.setDataCenterName ( rs.getString ( "data_center_name" ) ) ; entity.setCompatibilityVersion ( new org.ovirt.engine.core.compat.Version ( rs.getString ( "compatibility_version" ) ) ) ; return entity ; }
public static void isMTUOverrideSupported ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MTUOverrideSupported ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.VDS > hostNameListModel = getExternalHostName ( ) ; hostNameListModel.setItems ( hosts ) ; hostNameListModel.setIsChangeable ( true ) ; setEnableSearchHost ( true ) ; }
public void setAcceptableValues ( java.util.Collection < java.lang.Object > values ) { java.util.Collection < java.lang.String > stringValues = org.ovirt.engine.ui.uicommonweb.Linq.cast ( values ) ; com.google.gwt.user.client.ui.MultiWordSuggestOracle suggestOracle = ( ( com.google.gwt.user.client.ui.MultiWordSuggestOracle ) ( asSuggestBox ( ) . getSuggestOracle ( ) ) ) ; suggestOracle.clear ( ) ; suggestOracle.addAll ( stringValues ) ; suggestOracle.setDefaultSuggestionsFromText ( stringValues ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public void getMaxVmsInPool ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1000 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVmsInPool , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
private static boolean isBelowPctThreshold ( final org.ovirt.engine.core.common.businessentities.storage_domains domain ) { org.ovirt.engine.core.common.businessentities.StorageDomainDynamic dynamic = domain.getStorageDynamicData ( ) ; return ( ( dynamic != null ) && ( ( dynamic.getfreeDiskInGB ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.FreeSpaceCriticalLowInGB ) ) ) ) && ( ( dynamic.getfreeDiskPercent ( ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.FreeSpaceLow ) ) ) ; }
public void testHashCode ( ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > > m = new java.util.HashMap < > ( ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > p1 = new org.ovirt.engine.core.common.utils.Pair ( true , "abc" ) ; org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , java.lang.String > p2 = new org.ovirt.engine.core.common.utils.Pair ( true , "abc" ) ; m.put ( "test" , p1 ) ; org.junit.jupiter.api.Assertions.assertTrue ( m.containsValue ( p1 ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( m.containsValue ( p2 ) ) ; }
public void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public java.lang.Boolean runInTransaction ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifaces = new java.util.ArrayList ( getInterfaces ( ) ) ; ifaces.addAll ( getRemovedBonds ( ) . values ( ) ) ; runVdsCommand ( VDSCommandType.CollectVdsNetworkData , new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters ( getVds ( ) , ifaces ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks ( ) ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( getVdsGroupId ( ) , net ) ; } return java.lang.Boolean.TRUE ; }
public org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult runDiscover ( ) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient ( ) ; client.setConfig ( config ) ; java.lang.Object result = client.execute ( org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.DISCOVER , org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.EMPTY ) ; return parseDiscoverResults ( result ) ; } catch ( org.apache.xmlrpc.XmlRpcException e ) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error ( "Error communicating with the external scheduler while discovering: {}" , e.getMessage ( ) ) ; org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.debug ( "Exception" , e ) ; return null ; } }
public org.ovirt.engine.sdk.decorators.ClusterNetwork update ( ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = this . getHref ( ) ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . update ( url , this , org.ovirt.engine.sdk.entities.Network.class , org.ovirt.engine.sdk.decorators.ClusterNetwork.class , headers ) ; }
private void testStatusMapping ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus storagePoolStatus , org.ovirt.engine.api.model.DataCenterStatus dataCenterStatus ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; storagePool.setStatus ( storagePoolStatus ) ; org.ovirt.engine.api.model.DataCenter dataCenter = org.ovirt.engine.api.restapi.types.DataCenterMapper.map ( storagePool , null ) ; assertEquals ( dataCenter.getStatus ( ) . getState ( ) , dataCenterStatus.value ( ) ) ; }
private org.ovirt.engine.core.common.businessentities.aaa.DbUser getTargetDbUser ( ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; dbUser.setLoginName ( getSearchString ( ) ) ; dbUser.setDomain ( ( ( org.ovirt.engine.core.aaa.ProfileEntry ) ( getProfile ( ) . getSelectedItem ( ) ) ) . getAuthz ( ) ) ; return dbUser ; }
public void initUserAndGroupData ( ) { if ( ( dbUser ) == null ) { dbUser = org.ovirt.engine.core.bll.PermissionsCommandBase.getDbUserDao ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getAdElementId ( ) ) ; } if ( ( ( dbUser ) == null ) && ( ( dbGroup ) == null ) ) { dbGroup = dbGroupDao.get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getAdElementId ( ) ) ; } }
public void validateFailsForCluster ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( ) ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; mockIsGlusterEnabled ( false ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; mockIsGlusterEnabled ( true ) ; mockCompatibilityVersion ( Version.v3_5 ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public java.lang.Object runInTransaction ( ) { detachStorageDomainWithEntities ( getStorageDomain ( ) ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove = getStorageDomain ( ) . getStoragePoolIsoMapData ( ) ; getCompensationContext ( ) . snapshotEntity ( mapToRemove ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( mapToRemove.getStorageId ( ) , mapToRemove.getStoragePoolId ( ) ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskProfileDao ( ) . nullifyQosForStorageDomain ( getStorageDomain ( ) . getId ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
protected void executeCommand ( ) { registerRollbackHandler ( new org.ovirt.engine.core.bll.AddMacPoolCommand.CustomTransactionCompletionListener ( ) ) ; getMacPoolEntity ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; getMacPoolDao ( ) . save ( getMacPoolEntity ( ) ) ; addPermission ( getCurrentUser ( ) . getId ( ) , getMacPoolEntity ( ) . getId ( ) ) ; macPoolPerCluster.createPool ( getMacPoolEntity ( ) ) ; setSucceeded ( true ) ; getReturnValue ( ) . setActionReturnValue ( getMacPoolId ( ) ) ; }
public void refreshStoragePool ( ) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getBroker ( ) . refreshStoragePool ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getMasterDomainId ( ) . toString ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters ( ) . getStoragePool ( ) . getMasterDomainVersion ( ) ) ; }
public void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.VDS > > aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; getUpHostListByCluster ( aQuery , clusterName , null ) ; }
private void numaSupport ( ) { setNumaChanged ( true ) ; getBehavior ( ) . numaSupport ( ) ; }
public void postDataCenterWithClusterSelectedItemChanged ( ) { updateDefaultHost ( ) ; updateCustomPropertySheet ( ) ; updateMinAllocatedMemory ( ) ; updateNumOfSockets ( ) ; if ( ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; updateQuotaByCluster ( template.getQuotaId ( ) , template.getQuotaName ( ) ) ; } updateCpuPinningVisibility ( ) ; }
public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget < ? extends org.ovirt.engine.ui.uicommonweb.models.Model , ? > getModelPopup ( org.ovirt.engine.ui.uicommonweb.models.vms.hostdev.VmHostDeviceListModel source , org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand , org.ovirt.engine.ui.uicommonweb.models.Model windowModel ) { if ( lastExecutedCommand == ( getModel ( ) . getAddCommand ( ) ) ) { return addPopupProvider.get ( ) ; } else if ( lastExecutedCommand == ( getModel ( ) . getRepinHostCommand ( ) ) ) { return repinPopupProvider.get ( ) ; } return super . getModelPopup ( source , lastExecutedCommand , windowModel ) ; }
protected void endVmCommand ( ) { try { if ( org.ovirt.engine.core.bll.RemoveVmCommand.acquireLock ( ) ) { setVm ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDao ( ) . get ( org.ovirt.engine.core.bll.RemoveVmCommand.getVmId ( ) ) ) ; if ( ( org.ovirt.engine.core.bll.RemoveVmCommand.getVm ( ) ) != null ) { processUnremovedDisks ( true ) ; removeVmFromDb ( ) ; } } org.ovirt.engine.core.bll.RemoveVmCommand.setSucceeded ( true ) ; } finally { org.ovirt.engine.core.bll.RemoveVmCommand.freeLock ( ) ; } }
private void setLunsSameLunAndPvIds ( ) { org.ovirt.engine.core.compat.Guid lunId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.compat.Guid pvId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; setLunsIds ( lunId , lunId , pvId , pvId ) ; }
public static org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel createInstance ( org.ovirt.engine.core.common.businessentities.VmBase vm , org.ovirt.engine.core.common.businessentities.VMStatus vmStatus , org.ovirt.engine.core.compat.Guid dcId , org.ovirt.engine.core.compat.Version clusterCompatibilityVersion , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > vmNicList , org.ovirt.engine.ui.uicommonweb.models.IModel sourceModel ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel instance = new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel ( vm , vmStatus , dcId , clusterCompatibilityVersion , vmNicList , sourceModel ) ; instance.init ( ) ; return instance ; }
private void handleVdsLiveSnapshotFailure ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { log.warn ( ( "Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}" ) , e.getMessage ( ) ) ; log.debug ( "Exception" , e ) ; addCustomValue ( "SnapshotName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotName ( ) ) ; addCustomValue ( "VmName" , org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmName ( ) ) ; updateCallStackFromThrowable ( e ) ; auditLogDirector.log ( this , AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE ) ; }
public static void updateSmartcardDevice ( org.ovirt.engine.core.compat.Guid vmId , boolean smartcardEnabled ) { if ( smartcardEnabled ) { if ( ! ( org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasSmartcardDevice ( vmId ) ) ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addSmartcardDevice ( vmId ) ; } } else { org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeSmartcardDevices ( vmId ) ; } }
public void getVmConfigurationBySnapshot ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid snapshotSourceId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmConfigurationBySnapshot , new org.ovirt.engine.core.common.queries.IdQueryParameters ( snapshotSourceId ) . withoutRefresh ( ) , aQuery ) ; }
public void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public void testUpdate ( ) throws java.lang.Exception { setUpGetEntityExpectations ( 2 ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsGroupByVdsGroupId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 2 ] } , getVdsGroupEntity ( ) ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.UpdateVmTemplate , org.ovirt.engine.core.common.action.UpdateVmTemplateParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) ; verifyModel ( resource.update ( org.ovirt.engine.api.restapi.resource.BackendTemplatesResourceTest.getModel ( 0 ) ) , 0 ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.RepoImage > getAllImagesAsRepoImages ( ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoImage > repoImages = new java.util.ArrayList < > ( ) ; long currentTime = java.lang.System.currentTimeMillis ( ) ; for ( com.woorea.openstack.glance.model.Image glanceImage : getClient ( ) . images ( ) . list ( true ) . execute ( ) ) { org.ovirt.engine.core.common.businessentities.RepoImage repoImage = org.ovirt.engine.core.bll.provider.OpenStackImageProviderProxy.imageToRepoImage ( glanceImage ) ; repoImage.setLastRefreshed ( currentTime ) ; repoImages.add ( repoImage ) ; } return repoImages ; }
protected org.ovirt.engine.core.compat.Guid getDataCenterId ( org.ovirt.engine.api.model.Network network ) { java.lang.String networkName = network.getDataCenter ( ) . getName ( ) ; return getEntity ( org.ovirt.engine.core.common.businessentities.StoragePool.class , VdcQueryType.GetStoragePoolByDatacenterName , new org.ovirt.engine.core.common.queries.NameQueryParameters ( networkName ) , ( "Datacenter: name=" + networkName ) ) . getId ( ) ; }
public void labelBeingAttachedToValidBondNotBond ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics = java.util.Collections.singletonList ( nic ) ; org.ovirt.engine.core.common.businessentities.network.NicLabel nicLabel = new org.ovirt.engine.core.common.businessentities.network.NicLabel ( nic.getId ( ) , nic.getName ( ) , "lbl1" ) ; org.hamcrest.MatcherAssert.assertThat ( createNicLabelValidator ( nics ) . labelBeingAttachedToValidBond ( nicLabel ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void logExecution ( java.lang.String sessionId , java.lang.String details ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = sessionDataContainer.getUser ( sessionId , false ) ; org.ovirt.engine.core.bll.Backend.log.debug ( "Executing {}{}" , details , ( user == null ? "." : java.lang.String.format ( " for user %s@%s." , user.getLoginName ( ) , user.getDomain ( ) ) ) ) ; }
public java.lang.Void runInTransaction ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks = getNetworkDao ( ) . getAllForCluster ( vds.getVdsGroupId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : networks ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( vds.getVdsGroupId ( ) , net ) ; } return null ; }
private org.ovirt.engine.core.compat.Guid getStoragePoolId ( ) { org.ovirt.engine.core.compat.Guid result = null ; org.ovirt.engine.core.common.queries.GetVmTemplateParameters params = org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters ( ) ; if ( ( params.getDataCenterId ( ) ) != null ) { result = params.getDataCenterId ( ) ; } else if ( ( params.getClusterId ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDao.get ( params.getClusterId ( ) ) ; if ( cluster != null ) { result = cluster.getStoragePoolId ( ) ; } } return result ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase login ( org.ovirt.engine.core.common.action.LoginUserParameters parameters ) { switch ( parameters.getActionType ( ) ) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.CommandsFactory.createCommand ( parameters.getActionType ( ) , parameters ) ; return command.executeAction ( ) ; default : return getErrorCommandReturnValue ( EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION ) ; } }
public boolean poll ( ) { waitBetweenPolls ( ) ; org.ovirt.engine.core.bll.network.host.HostPoller.LOGGER.trace ( "Request to do poll for host {}." , parameters.getVdsId ( ) ) ; org.ovirt.engine.core.common.interfaces.FutureVDSCall < org.ovirt.engine.core.common.vdscommands.VDSReturnValue > task = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.interfaces.BackendInternal.class ) . getResourceManager ( ) . runFutureVdsCommand ( FutureVDSCommandType.Poll , parameters ) ; org.ovirt.engine.core.bll.network.host.HostPoller.LOGGER.trace ( "FutureVDSCommandType.Poll executed for host{}." , parameters.getVdsId ( ) ) ; boolean succeeded = getValue ( task ) ; org.ovirt.engine.core.bll.network.host.HostPoller.LOGGER.trace ( "Result of FutureVDSCommandType.Poll for host {}: {}" , parameters.getVdsId ( ) , succeeded ) ; timestampOfEndOfPreviousInvocation = currentTimestamp ( ) ; return succeeded ; }
private void updateActionAvailability ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( ) ; if ( vds != null ) { getSyncStorageDevicesCommand ( ) . setIsExecutionAllowed ( ( ( vds.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) ; getCreateBrickCommand ( ) . setIsExecutionAllowed ( ( ( vds.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) ; } }
private void decreasePendingVms ( ) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RunVmCommandBase.getVm ( ) ; if ( ( vdsId == null ) || ( vdsId.equals ( lastDecreasedVds ) ) ) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat ( "PendingVms for the guest {0} running on host {1} was already released, not releasing again" , vm.getName ( ) , vdsId ) ; return ; } lastDecreasedVds = vdsId ; org.ovirt.engine.core.bll.VmHandler.decreasePendingVms ( vm , vdsId ) ; getBlockingQueue ( vdsId ) . offer ( java.lang.Boolean.TRUE ) ; }
public static void GetStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
public void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > > aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > getSnapshotsDummiesForStorageAllocations ( ) { return org.ovirt.engine.core.bll.ImagesHandler.getSnapshotsDummiesForStorageAllocations ( getSourceImages ( ) ) ; }
private void handleDirectorySearcherException ( org.ovirt.engine.api.extensions.ExtMap output , java.lang.Exception ex ) { if ( ex instanceof org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException ) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException authResultException = ( ( org.ovirt.engine.extensions.aaa.builtin.kerberosldap.AuthenticationResultException ) ( ex ) ) ; org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = authResultException.getResult ( ) ; if ( result == null ) { result = org.ovirt.engine.core.utils.kerberos.AuthenticationResult.OTHER ; } org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapAuthenticateUserCommand.log.error ( result.getDetailedMessage ( ) ) ; output.put ( Authn.InvokeKeys.RESULT , resultsMap.get ( result ) ) ; } }
private void getImageChildren ( org.ovirt.engine.core.compat.Guid snapshot , java.util.List < org.ovirt.engine.core.compat.Guid > children ) { java.util.List < org.ovirt.engine.core.compat.Guid > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao ( ) . getAllSnapshotsForParent ( snapshot ) ) { list.add ( image.getImageId ( ) ) ; } children.addAll ( list ) ; for ( org.ovirt.engine.core.compat.Guid snapshotId : list ) { getImageChildren ( snapshotId , children ) ; } }
protected org.ovirt.engine.api.model.Snapshots mapCollection ( java.util.List < org.ovirt.engine.api.model.Snapshot > entities ) { org.ovirt.engine.api.model.Snapshots snapshots = new org.ovirt.engine.api.model.Snapshots ( ) ; for ( org.ovirt.engine.api.model.Snapshot entity : entities ) { org.ovirt.engine.api.model.Snapshot snapshot = map ( entity , null ) ; snapshot = populate ( snapshot , entity ) ; snapshot = addLinks ( snapshot ) ; snapshot = addVmConfiguration ( entity , snapshot ) ; snapshots.getSnapshots ( ) . add ( snapshot ) ; } return snapshots ; }
public void getAllForVmForUnprivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface > interfaces = dao.getAllForVm ( FixturesTool.VM_RHEL5_POOL_50 , org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertTrue ( interfaces.isEmpty ( ) ) ; }
private static void assertFullGetAllAttachableDisksByPoolId ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { org.junit.Assert.assertEquals ( "There should be only three attachable disks" , 3 , disks.size ( ) ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > expectedFloatingDiskIds = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( FixturesTool.FLOATING_DISK_ID , FixturesTool.FLOATING_LUN_ID ) ) ; java.util.Set < org.ovirt.engine.core.compat.Guid > actualFloatingDiskIds = new java.util.HashSet < org.ovirt.engine.core.compat.Guid > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { actualFloatingDiskIds.add ( disk.getId ( ) ) ; } org.junit.Assert.assertEquals ( "Wrong attachable disks" , expectedFloatingDiskIds , actualFloatingDiskIds ) ; }
public org.ovirt.engine.api.model.CdRom update ( org.ovirt.engine.api.model.CdRom resource ) { if ( ( org.ovirt.engine.api.common.util.QueryHelper.hasConstraint ( getUriInfo ( ) . getQueryParameters ( ) , org.ovirt.engine.api.restapi.resource.BackendCdRomResource.CURRENT_CONSTRAINT_PARAMETER ) ) || ( org.ovirt.engine.api.common.util.QueryHelper.hasMatrixParam ( getUriInfo ( ) , org.ovirt.engine.api.restapi.resource.BackendCdRomResource.CURRENT_CONSTRAINT_PARAMETER ) ) ) { validateParameters ( resource , requiredUpdateFields ) ; performAction ( VdcActionType.ChangeDisk , new org.ovirt.engine.core.common.action.ChangeDiskCommandParameters ( getEntity ( entityResolver , true ) . getId ( ) , resource.getFile ( ) . getId ( ) ) ) ; return resource ; } else { return super . update ( resource ) ; } }
public org.ovirt.engine.core.bll.ValidationResult networkInVfsConfig ( org.ovirt.engine.core.compat.Guid networkId ) { java.lang.String networkName = getNetwork ( networkId ) . getName ( ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.ACTION_TYPE_FAILED_NETWORK_NOT_IN_VFS_CONFIG , getNicNameReplacement ( ) , java.lang.String.format ( org.ovirt.engine.core.bll.validator.VfsConfigValidator.NETWORK_NAME_REPLACEMENT , networkName ) ) . when ( ( ! ( oldVfsConfig.getNetworks ( ) . contains ( networkId ) ) ) ) ; }
protected boolean canDoAction ( ) { if ( ( ( org.ovirt.engine.core.bll.ConvertVmCommand.getVds ( ) ) != null ) && ( ( org.ovirt.engine.core.bll.ConvertVmCommand.getVds ( ) . getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Up ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL ) ; } if ( ( ( org.ovirt.engine.core.bll.ConvertVmCommand.getVds ( ) ) == null ) && ( ! ( selectProxyHost ( ) ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL ) ; } return true ; }
private boolean unmanagedNetworkChanged ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface existingIface = getExistingIfaces ( ) . get ( iface.getName ( ) ) ; return ( existingIface == null ) || ( ! ( iface.getNetworkName ( ) . equals ( existingIface.getNetworkName ( ) ) ) ) ; }
public void testValidateThereIsEnoughOfFreeMacsNegative ( ) { org.mockito.Mockito.when ( macPoolMock.getAvailableMacsCount ( ) ) . thenReturn ( 0 ) ; final org.ovirt.engine.core.bll.ValidationResult actual = underTest.validateThereIsEnoughOfFreeMacs ( java.util.Collections.singletonList ( vmNetworkInterfaceMock ) , macPoolMock , org.ovirt.engine.core.bll.validator.VmNicMacsUtilsTest.ALWAYS_TRUE ) ; org.hamcrest.MatcherAssert.assertThat ( actual , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallBackEnabled ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > cmdEntities = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ; for ( org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet ( ) ) { cmdEntity = commandsCache.get ( cmdId ) ; if ( commandsCache.get ( cmdId ) . isCallBackEnabled ( ) ) { cmdEntities.add ( cmdEntity ) ; } } return cmdEntities ; }
public void qosOnNetwork ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork ( null ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNic ( "eth0" , null , null , network.getName ( ) ) ; org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; network.setQosId ( qosId ) ; org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = createQos ( ) ; qos.setId ( qosId ) ; org.mockito.Mockito.when ( qosDao.get ( qosId ) ) . thenReturn ( qos ) ; qos ( network , iface , qos , true ) ; }
public java.util.concurrent.FutureTask < java.util.Map < java.lang.String , java.lang.Object > > timeBoundPollConfirmConnectivity ( final long timeout , final java.util.concurrent.TimeUnit unit ) { return timeBoundPollInternal ( timeout , unit , "Host.confirmConnectivity" ) ; }
public void setNumberOfSockets ( java.lang.Integer value ) { if ( ( ( numberOfSockets ) == null ) && ( value == null ) ) { return ; } if ( ( ( numberOfSockets ) == null ) || ( ! ( numberOfSockets.equals ( value ) ) ) ) { numberOfSockets = value ; OnPropertyChanged ( new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs ( "NumberOfSockets" ) ) ; } }
private org.ovirt.engine.core.bll.context.CommandContext createContextForStatelessSnapshotCreation ( ) { java.util.Map < java.lang.String , java.lang.String > values = getVmValuesForMsgResolving ( ) ; org.ovirt.engine.core.common.job.Step createSnapshotsStep = addSubStep ( StepEnum.EXECUTING , StepEnum.CREATING_SNAPSHOTS , values ) ; org.ovirt.engine.core.bll.job.ExecutionContext createSnapshotsCtx = new org.ovirt.engine.core.bll.job.ExecutionContext ( ) ; createSnapshotsCtx.setMonitored ( true ) ; createSnapshotsCtx.setStep ( createSnapshotsStep ) ; org.ovirt.engine.core.bll.RunVmCommand.getContext ( ) . withExecutionContext ( createSnapshotsCtx ) ; org.ovirt.engine.core.bll.RunVmCommand.persistCommandIfNeeded ( ) ; return org.ovirt.engine.core.bll.RunVmCommand.getContext ( ) . clone ( ) . withoutCompensationContext ( ) ; }
private void vnicProfileForVmNetworkTest ( boolean vmNetwork , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher ) { org.mockito.Mockito.when ( network.isVmNetwork ( ) ) . thenReturn ( vmNetwork ) ; org.mockito.Mockito.when ( networkDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( network ) ; org.junit.Assert.assertThat ( validator.vnicProfileForVmNetworkOnly ( ) , matcher ) ; }
public void OnSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > newItems = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ; java.util.Collections.sort ( newItems , new org.ovirt.engine.ui.uicommonweb.Linq.NetworkComparator ( ) ) ; org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; searchableListModel.setItems ( newItems ) ; }
public void testGetFullPath_SaneParameter ( ) { java.io.File file = testServlet.getFile ( mockFile , "/branding/test" ) ; org.junit.Assert.assertNotNull ( "Path should not be null" , file ) ; org.junit.Assert.assertEquals ( "Path should be '/abs/test/branding/test'" , "/abs/test/branding/test" , file.getAbsolutePath ( ) ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVdsDao ( ) . get ( org.ovirt.engine.core.bll.GetVdsFenceStatusQuery.getParameters ( ) . getVdsId ( ) ) ; org.ovirt.engine.core.bll.FenceExecutor executor = new org.ovirt.engine.core.bll.FenceExecutor ( vds ) ; org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue result = executor.checkHostStatus ( ) ; if ( result.getSucceeded ( ) ) { org.ovirt.engine.core.bll.GetVdsFenceStatusQuery.getQueryReturnValue ( ) . setReturnValue ( result ) ; } else { handleError ( result ) ; } }
public void testToByteArrayAllNull ( ) { final byte [ ] allNullArray = Guid.Empty.toByteArray ( ) ; org.junit.jupiter.api.Assertions.assertNotNull ( allNullArray ) ; for ( int i = 0 ; i < 16 ; i ++ ) { org.junit.jupiter.api.Assertions.assertEquals ( 0 , allNullArray [ i ] ) ; } }
public static org.ovirt.engine.api.model.Options map ( java.util.Map < java.lang.String , java.lang.String > entity , org.ovirt.engine.api.model.Options template ) { org.ovirt.engine.api.model.Options model = ( template != null ) ? template : new org.ovirt.engine.api.model.Options ( ) ; for ( java.util.Map.Entry < java.lang.String , java.lang.String > option : entity.entrySet ( ) ) { model.getOptions ( ) . add ( org.ovirt.engine.api.restapi.types.HostMapper.map ( option , null ) ) ; } return model ; }
public org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence ( org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction ) { java.util.List < org.ovirt.engine.core.common.businessentities.pm.FenceAgent > fenceAgents = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.dao.FenceAgentDao.class ) . getFenceAgentsForHost ( fencedHost.getId ( ) ) ; if ( ( fenceAgents == null ) || ( fenceAgents.isEmpty ( ) ) ) { return new org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult ( org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR , org.ovirt.engine.core.common.businessentities.pm.PowerStatus.UNKNOWN , java.lang.String.format ( "Invalid fence agents defined for host '%s'." , fencedHost.getHostName ( ) ) ) ; } return fence ( fenceAction , fenceAgents ) ; }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public void getGlusterVolumeSnapshotsForVolume ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotsByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
public void save ( org.ovirt.engine.core.common.businessentities.Permission permission ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "ad_element_id" , permission.getAdElementId ( ) ) . addValue ( "id" , permission.getId ( ) ) . addValue ( "role_id" , permission.getRoleId ( ) ) . addValue ( "object_id" , permission.getObjectId ( ) ) . addValue ( "object_type_id" , permission.getObjectType ( ) . getValue ( ) ) ; getCallsHandler ( ) . executeModification ( "InsertPermission" , parameterSource ) ; }
private boolean activateOrDeactivateNic ( org.ovirt.engine.core.common.businessentities.network.VmNic nic , org.ovirt.engine.core.common.action.PlugAction plugAction , boolean newNic ) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters ( nic , plugAction , newNic ) ; parameters.setVmId ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getVmId ( ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getBackend ( ) . runInternalAction ( VdcActionType.ActivateDeactivateVmNic , parameters ) ; if ( ! ( returnValue.getSucceeded ( ) ) ) { propagateFailure ( returnValue ) ; } return returnValue.getSucceeded ( ) ; }
public void hostNInUse ( ) { org.mockito.Mockito.when ( oldHost.getHostName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( host.getHostName ( ) ) . thenReturn ( generateRandomName ( ) ) ; org.mockito.Mockito.when ( hostDao.getAllForHostname ( org.mockito.ArgumentMatchers.anyString ( ) ) ) . thenReturn ( java.util.Collections.singletonList ( org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.VDS.class ) ) ) ; org.junit.Assert.assertThat ( validator.hostNameNotUsed ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST ) ) ; }
protected void executeIrsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info ( "Executing GetVolumeInfo using the current SPM" ) ; org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxy ( ) . getCurrentVdsId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters ( ) . getImageGroupId ( ) , org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters ( ) . getImageId ( ) ) ; params.setExpectedEngineErrors ( org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters ( ) . getExpectedEngineErrors ( ) ) ; setVDSReturnValue ( resourceManager.runVdsCommand ( VDSCommandType.GetVolumeInfo , params ) ) ; }
protected void buildVmBootOptions ( ) { if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getInitrdUrl ( ) ) ) ) { createInfo.add ( VdsProperties.InitrdUrl , vm.getInitrdUrl ( ) ) ; } if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getKernelUrl ( ) ) ) ) { createInfo.add ( VdsProperties.KernelUrl , vm.getKernelUrl ( ) ) ; if ( ! ( org.apache.commons.lang.StringUtils.isEmpty ( vm.getKernelParams ( ) ) ) ) { createInfo.add ( VdsProperties.KernelParams , vm.getKernelParams ( ) ) ; } } }
public static void logError ( org.slf4j.Logger log , java.lang.String id , java.lang.Object obj , java.lang.Throwable t ) { org.ovirt.engine.core.utils.log.Logged logged = org.ovirt.engine.core.utils.log.LoggedUtils.getAnnotation ( obj ) ; if ( ( logged != null ) && ( org.ovirt.engine.core.utils.log.LoggedUtils.isLogLevelOn ( log , logged.errorLevel ( ) ) ) ) { org.ovirt.engine.core.utils.log.LoggedUtils.log ( log , logged.errorLevel ( ) , org.ovirt.engine.core.utils.log.LoggedUtils.ERROR_LOG , org.ovirt.engine.core.utils.log.LoggedUtils.determineMessage ( log , logged , obj ) , org.apache.commons.lang.exception.ExceptionUtils.getMessage ( t ) , id ) ; log.error ( "Exception" , t ) ; } }
public static void getProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
private void initManualWidgets ( ) { nicTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor < org.ovirt.engine.core.common.businessentities.network.VmInterfaceType > ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer ( ) ) ; pluggedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "cardStatus" ) ; unpluggedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "cardStatus" ) ; linkedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "linkState" ) ; unlinkedEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelRadioButtonEditor ( "linkState" ) ; enableManualMacCheckbox = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
private void failover ( ) { if ( ( ( ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getIgnoreFailoverLimit ( ) ) || ( ( _failoverCounter ) < ( ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.SpmCommandFailOverRetries ) ) - 1 ) ) ) && ( getCurrentIrsProxyData ( ) . getHasVdssForSpmSelection ( ) ) ) && ( getCurrentIrsProxyData ( ) . failover ( ) ) ) { ( _failoverCounter ) ++ ; org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.executeCommand ( ) ; } else { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; } }
public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc verifyUntrustedVolume ( java.lang.String spID , java.lang.String sdID , java.lang.String imageID , java.lang.String volumeID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Volume.verify_untrusted" ) . withParameter ( "storagepoolID" , spID ) . withParameter ( "storagedomainID" , sdID ) . withParameter ( "imageID" , imageID ) . withParameter ( "volumeID" , volumeID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc ( response ) ; }
protected void syncSearch ( ) { super . syncSearch ( ) ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ; params.setRefresh ( getIsQueryFirstTime ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( QueryType.GetAttachedClustersByClusterPolicyId , params , new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.SetItemsAsyncQuery ( ) ) ; setIsQueryFirstTime ( false ) ; }
public static java.util.Date UtcDateStringToLocaDate ( java.lang.String str ) { if ( org.apache.commons.lang.StringUtils.isBlank ( str ) ) { return null ; } try { return org.ovirt.engine.core.utils.ovf.OvfParser.getDateFormat ( org.ovirt.engine.core.utils.ovf.OvfParser.utcDateFormatStr ) . parse ( str ) ; } catch ( java.text.ParseException e1 ) { try { return org.ovirt.engine.core.utils.ovf.OvfParser.getDateFormat ( org.ovirt.engine.core.utils.ovf.OvfParser.utcFallbackDateFormatStr ) . parse ( str ) ; } catch ( java.text.ParseException e ) { org.ovirt.engine.core.utils.ovf.OvfParser.log.error ( "OVF DateTime format Error, Expected: yyyy/M/dd hh:mm:ss" , e ) ; return null ; } } }
public void canDoActionFailsOnNoHook ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( CLUSTER_ID , HOOK_ID ) ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString ( ) ) ) ; }
private java.lang.String getConnectionDescription ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections , java.lang.String connectionId ) { org.ovirt.engine.core.compat.Guid connectionIdGuid = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( connectionId ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connections ) { org.ovirt.engine.core.compat.Guid connectionGuid = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty ( connection.getId ( ) ) ; if ( connectionGuid.equals ( connectionIdGuid ) ) { java.lang.String desc = connection.getConnection ( ) ; if ( ( connection.getIqn ( ) ) != null ) { desc += " " + ( connection.getIqn ( ) ) ; } return desc ; } } return "" ; }
private static void removeNetworkFromHosts ( org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.bll.context.CommandContext context , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nics ) { org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder builder = org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder.class ) ; java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters = builder.buildParameters ( network , nics ) ; if ( ! ( parameters.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing ( parameters ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalMultipleActions ( ActionType.PersistentHostSetupNetworks , parameters , context ) ; } }
public void testCanEditARunningVM ( ) { prepareVmToPassValidate ( ) ; vm.setStatus ( VMStatus.Up ) ; mockDiskDaoGetAllForVm ( java.util.Collections.< org.ovirt.engine.core.common.businessentities.storage.Disk > emptyList ( ) , true ) ; mockVmValidator ( ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( command ) . getVmDeviceDao ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . areUpdatedFieldsLegal ( ) ; command.initEffectiveCompatibilityVersion ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVdsInterfacesByVdsId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID } , org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.setUpInterfaces ( ) , failure ) ; control.replay ( ) ; }
private void onSaveSanStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getWindow ( ) . startProgress ( null ) ; org.ovirt.engine.ui.uicompat.Task.create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "SaveSan" } ) ) ) . Run ( ) ; }
public void serializeVdsActionParameters ( ) { org.ovirt.engine.core.common.action.ActionParametersBase params = new org.ovirt.engine.core.common.action.ActionParametersBase ( ) ; params.setLockProperties ( org.ovirt.engine.core.common.action.LockProperties.create ( Scope.None ) . withWait ( true ) ) ; org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer serializer = new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ( serializer.serialize ( params ) . length ( ) ) > 0 ) ) ; }
public void testBeanValidations ( ) { org.junit.Assert.assertTrue ( createCommand ( initializeMock ( 1 ) ) . validateInputs ( ) ) ; }
private boolean isRunningConfigurationNeeded ( ) { return ( ( org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . isNextRunConfigurationExists ( ) ) || ( ! ( org.ovirt.engine.core.bll.VmHandler.isUpdateValid ( org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) . getVmStaticData ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStatus ( ) ) ) ) ) || ( ! ( org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices ( getVmId ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getVm ( ) . getStatus ( ) , org.ovirt.engine.core.bll.UpdateVmCommand.getParameters ( ) ) ) ) ; }
protected void verifyCollection ( java.util.List < org.ovirt.engine.api.model.Watchdog > collection ) { org.junit.jupiter.api.Assertions.assertNotNull ( collection ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , collection.size ( ) ) ; if ( ! ( collection.isEmpty ( ) ) ) { verifyModel ( collection.get ( 0 ) ) ; } }
public void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public javax.ws.rs.core.Response importCertificates ( org.ovirt.engine.api.model.Action action ) { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider ( this , id ) ; java.util.List < org.ovirt.engine.core.common.businessentities.CertificateInfo > entities = getBackendCollection ( org.ovirt.engine.core.common.businessentities.CertificateInfo.class , VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) ) ; if ( ( entities.size ( ) ) == 0 ) { return null ; } return performAction ( VdcActionType.ImportProviderCertificate , new org.ovirt.engine.core.common.action.ImportProviderCertificateParameters ( provider , entities.get ( 0 ) . getPayload ( ) ) ) ; }
public boolean storageDomainRemoved ( org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . getAllForVolumeGroup ( storageDomain.getStorage ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : filterConnectionsUsedByOthers ( list , storageDomain.getStorage ( ) , "" ) ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionDao ( ) . remove ( connection.getid ( ) ) ; } removeStorageDomainLuns ( storageDomain ) ; return true ; }
private java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getVmDisksDummies ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksDummies = new java.util.LinkedList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid storageDomainId : getParameters ( ) . getImageToDestinationDomainMap ( ) . values ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setStorageIds ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( java.util.Arrays.asList ( storageDomainId ) ) ) ; disksDummies.add ( diskImage ) ; } return disksDummies ; }
private boolean SelectedItemsContainBlankTemplate ( ) { if ( ( getSelectedItems ( ) ) != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VmTemplate > cast ( getSelectedItems ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : templates ) { if ( ( template != null ) && ( template.getId ( ) . equals ( NGuid.Empty ) ) ) { return true ; } } } return false ; }
protected org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > createCommand ( ) { org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters param = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters ( vmPools , testVm , VM_COUNT , DISK_SIZE ) ; param.setStorageDomainId ( firstStorageDomainId ) ; org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand < org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters > ( param , org.ovirt.engine.core.bll.context.CommandContext.createContext ( param.getSessionId ( ) ) ) { @ java.lang.Override protected void initUser ( ) { } @ java.lang.Override protected void initTemplate ( ) { } } ) ; return command ; }
public void onRemove ( ) { org.ovirt.engine.core.common.businessentities.Bookmark selectedBookmark = ( ( org.ovirt.engine.core.common.businessentities.Bookmark ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.core.common.action.BookmarksParametersBase parameters = new org.ovirt.engine.core.common.action.BookmarksParametersBase ( selectedBookmark.getbookmark_id ( ) ) ; org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback async = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { postOnSave ( result.getReturnValue ( ) ) ; } } ; getWindow ( ) . startProgress ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.RemoveBookmark , parameters , async ) ; }
public void getVolumeSnapshotSchedule ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid volumeId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeSnapshotScheduleByVolumeId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( volumeId ) , aQuery ) ; }
protected void updateVirtioScsiAvailability ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . getSelectedCluster ( ) ; boolean isVirtioScsiEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.VirtIoScsiEnabled , cluster.getcompatibility_version ( ) . getValue ( ) ) ) ) ; getModel ( ) . getIsVirtioScsiEnabled ( ) . setIsAvailable ( isVirtioScsiEnabled ) ; }
public void testCompareRpmRelease ( ) { org.junit.jupiter.api.Assertions.assertEquals ( ( - 1 ) , org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts ( "2.3.10.4.fc18.x86_64" , "2.3.10.4.fc19.x86_64" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts ( "20130821.fc18.x86_64" , "20130820.fc18.x86_64" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( ( - 1 ) , org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts ( "20130820.0.fc18.x86_64" , "20130820.1.fc18.x86_64" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts ( "20130820.0.fc18.x86_64" , "20130820.fc18.x86_64" ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts ( "20130820.1.3.fc18.x86_64" , "20130820.1.fc18.x86_64" ) ) ; }
protected void endWithFailure ( ) { if ( isConsiderSuccessful ( ) ) { auditLog ( this , AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE ) ; this . endSuccessfully ( ) ; return ; } super . endWithFailure ( ) ; handleDestDisk ( ) ; unlockDisk ( ) ; org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setSucceeded ( true ) ; }
public void initialize ( ) { super . initialize ( ) ; getIsPlugged ( ) . setIsAvailable ( true ) ; if ( ( getVm ( ) . getId ( ) ) != null ) { loadAttachableDisks ( ) ; } getIsBootable ( ) . setIsChangeable ( true ) ; }
private boolean importSupported ( org.ovirt.engine.core.compat.Version spVersion , org.ovirt.engine.core.compat.Version vdsGroupVersion ) { return ( ( spVersion.greaterOrEquals ( Version.v3_5 ) ) && ( vdsGroupVersion.greaterOrEquals ( Version.v3_6 ) ) ) && ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.AutoImportHostedEngine ) ) ; }
public void testUpdateAll ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmDynamic existingVm2 = dao.get ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( "77296e00-0cad-4e5a-9299-008a7b6f4356" ) ) ; existingVm.setStatus ( VMStatus.Down ) ; existingVm2.setVmIp ( "111" ) ; dao.updateAll ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.VmDynamic [ ] { existingVm , existingVm2 } ) ) ; org.junit.Assert.assertEquals ( existingVm , dao.get ( existingVm.getId ( ) ) ) ; org.junit.Assert.assertEquals ( existingVm2 , dao.get ( existingVm2.getId ( ) ) ) ; }
protected void onReveal ( ) { org.ovirt.engine.ui.uicompat.Event entityChangedEvent = getModel ( ) . getDiskViewType ( ) . getEntityChangedEvent ( ) ; if ( ! ( entityChangedEvent.getListeners ( ) . contains ( getView ( ) . getDiskTypeChangedEventListener ( ) ) ) ) { entityChangedEvent.addListener ( getView ( ) . getDiskTypeChangedEventListener ( ) ) ; } org.ovirt.engine.ui.uicompat.Event systemTreeSelectedItemChangedEvent = org.ovirt.engine.ui.uicommonweb.models.CommonModel.getInstance ( ) . getSystemTree ( ) . getSelectedItemChangedEvent ( ) ; systemTreeSelectedItemChangedEvent.addListener ( systemTreeListener ) ; super . onReveal ( ) ; getView ( ) . handleQuotaColumnVisibility ( ) ; }
public static void getTemplateNicList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public static void GetRpmVersionViaPublic ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery ( VdcQueryType.GetConfigurationValue , new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ProductRPMVersion , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void testListNonIso ( ) throws java.lang.Exception { try { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setupGetStorageDomainExpectations ( StorageDomainType.Data ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void InternalSetVmStatus ( org.ovirt.engine.core.common.businessentities.VM vm , final org.ovirt.engine.core.common.businessentities.VMStatus status , final org.ovirt.engine.core.common.businessentities.VmExitStatus exitStaus , final java.lang.String exitMessage ) { vm.setStatus ( status ) ; vm.setExitStatus ( exitStaus ) ; vm.setExitMessage ( exitMessage ) ; boolean isVmStatusDown = org.ovirt.engine.core.common.businessentities.VM.isStatusDown ( status ) ; if ( isVmStatusDown || ( status == ( org.ovirt.engine.core.common.businessentities.VMStatus.Unknown ) ) ) { resetVmAttributes ( vm ) ; if ( isVmStatusDown ) { vm.setRunOnVds ( null ) ; vm.setVmPauseStatus ( VmPauseStatus.NONE ) ; } } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { boolean showEditor = ! ( glusterStorageModel.getLinkGlusterVolume ( ) . getEntity ( ) ) ; pathEditorRow.setVisible ( showEditor ) ; pathExampleLabel.setVisible ( showEditor ) ; glusterVolumesRow.setVisible ( ( ! showEditor ) ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Network network ) { org.ovirt.engine.api.model.Network entity = map ( network ) ; org.ovirt.engine.core.compat.Guid networkId = entity.getId ( ) ; org.ovirt.engine.core.common.businessentities.IscsiBond bond = getBond ( ) ; bond.getNetworkIds ( ) . add ( networkId ) ; return performCreate ( VdcActionType.EditIscsiBond , new org.ovirt.engine.core.common.action.EditIscsiBondParameters ( bond ) , new org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworksResource.AddedNetworkResolver ( networkId ) ) ; }
public void testIsNotLocalFsWithDefaultClusterWhenClusterIsDefault ( ) { storagePool.setStorageType ( StorageType.LOCALFS ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . containsDefaultCluster ( ) ; org.ovirt.engine.core.bll.ValidationResult result = validator.isNotLocalfsWithDefaultCluster ( ) ; org.junit.Assert.assertFalse ( result.isValid ( ) ) ; org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage ( result , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_WITH_DEFAULT_VDS_GROUP_CANNOT_BE_LOCALFS ) ; }
public void failWhenHostDoesNotExist ( ) { java.util.List < java.lang.String > messages = new java.util.LinkedList < > ( ) ; boolean result = validator.isHostExists ( null , messages ) ; org.junit.jupiter.api.Assertions.assertFalse ( result ) ; org.junit.jupiter.api.Assertions.assertEquals ( 1 , messages.size ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( "ACTION_TYPE_FAILED_HOST_NOT_EXIST" , messages.get ( 0 ) ) ; }
public static void GetSpiceUsbAutoShare ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SpiceUsbAutoShare , org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void testDontFailWithNullValueEntitiesList ( ) { org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem > map = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( null ) ; org.hamcrest.MatcherAssert.assertThat ( map.get ( "anyString" ) , org.hamcrest.CoreMatchers.nullValue ( ) ) ; org.hamcrest.MatcherAssert.assertThat ( map.get ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) , org.hamcrest.CoreMatchers.nullValue ( ) ) ; }
public java.lang.String getTooltipContent ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > item , org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel panel ) { if ( item instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ) { showNetwork ( ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ) ( item ) ) ) ; } else if ( item instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel ) { showNic ( ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel ) ( item ) ) ) ; } else if ( item instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel ) { return null ; } return this . getElement ( ) . getInnerHTML ( ) ; }
protected void executeVdsBrokerCommand ( ) { org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusReturnForXmlRpc retVal = org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusVDSCommand.getBroker ( ) . migrateStatus ( org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusVDSCommand.getParameters ( ) . getVmId ( ) . toString ( ) ) ; status = retVal.getStatus ( ) ; setReturnValue ( retVal.getDowntime ( ) ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.MigrateStatusVDSCommand.proceedProxyReturnValue ( ) ; }
protected void itemsChanged ( T selectedItem ) { if ( selectedItem == null ) { itemsChanged ( ) ; } else { java.util.List < T > selectedItems = new java.util.ArrayList < T > ( ) ; selectedItems.add ( selectedItem ) ; setSelectedItem ( selectedItem ) ; setSelectedItems ( selectedItems ) ; } }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters params = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( asGuid ( id ) ) ; boolean force = org.ovirt.engine.api.common.util.QueryHelper.getBooleanMatrixParameter ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource.FORCE , true , false ) ; if ( force ) { params.setForceDelete ( force ) ; } java.lang.String storageDomain = org.ovirt.engine.api.common.util.QueryHelper.getMatrixConstraint ( uriInfo , org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource.STORAGE_DOMAIN ) ; if ( storageDomain != null ) { params.setStorageDomainId ( asGuid ( storageDomain ) ) ; } return performAction ( VdcActionType.RemoveDisk , params ) ; }
public static org.ovirt.engine.api.model.VmPoolType map ( org.ovirt.engine.api.model.VmPoolType vmPoolType , org.ovirt.engine.api.model.VmPoolType incoming ) { if ( vmPoolType == null ) { return null ; } switch ( vmPoolType ) { case AUTOMATIC : return org.ovirt.engine.api.model.VmPoolType.AUTOMATIC ; case MANUAL : return org.ovirt.engine.api.model.VmPoolType.MANUAL ; default : return null ; } }
public void shouldDetectPassThroughDeviceOnVM ( ) { org.mockito.Mockito.when ( hostDeviceManager.checkVmNeedsDirectPassthrough ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) ) ) . thenReturn ( true ) ; org.hamcrest.MatcherAssert.assertThat ( validator.checkVmReadyForUpgrade ( invalidVM ) , org.hamcrest.CoreMatchers.hasItem ( EngineMessage.CLUSTER_UPGRADE_DETAIL_VM_NEEDS_PASSTHROUGH.name ( ) ) ) ; }
protected void doGet ( javax.servlet.http.HttpServletRequest request , javax.servlet.http.HttpServletResponse response ) throws java.io.IOException , javax.servlet.ServletException { java.io.File file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath ( request.getPathInfo ( ) , base ) ; file = checkForIndex ( request , response , file , request.getPathInfo ( ) ) ; org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile ( request , response , file , type , cache , required ) ; }
public org.ovirt.engine.sdk.entities.Action forceselectspm ( org.ovirt.engine.sdk.entities.Action action ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( this . getHref ( ) ) + "/forceselectspm" ; org.ovirt.engine.sdk.utils.HttpHeaderBuilder headersBuilder = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) ; java.util.List < org.apache.http.Header > headers = headersBuilder.build ( ) ; org.ovirt.engine.sdk.utils.UrlBuilder urlBuilder = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) ; url = urlBuilder.build ( ) ; return getProxy ( ) . action ( url , action , org.ovirt.engine.sdk.entities.Action.class , org.ovirt.engine.sdk.entities.Action.class , headers ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ( ( org.ovirt.engine.ui.webadmin.section.main.view.popup.host.HostPopupView ) ( getView ( ) ) ) . rbDiscoveredHost.getValue ( ) ) { model.getIsDiscorveredHosts ( ) . setEntity ( true ) ; } }
public static boolean qosConfiguredOnInterface ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( ( networkAttachment != null ) && ( networkAttachment.isQosOverridden ( ) ) ) { return ( ( networkAttachment.getHostNetworkQos ( ) ) != null ) && ( ! ( networkAttachment.getHostNetworkQos ( ) . isEmpty ( ) ) ) ; } else { return ( network != null ) && ( ( network.getQosId ( ) ) != null ) ; } }
protected void convert ( ) { boolean useVirtV2V = ( org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters ( ) . getVm ( ) . getOrigin ( ) ) != ( org.ovirt.engine.core.common.businessentities.OriginType.OVIRT ) ; if ( useVirtV2V ) { runInternalAction ( ActionType.ConvertOva , buildConvertOvaParameters ( ) , createConversionStepContext ( StepEnum.CONVERTING_OVA ) ) ; } else { runInternalAction ( ActionType.ExtractOva , buildExtractOvaParameters ( ) , createConversionStepContext ( StepEnum.EXTRACTING_OVA ) ) ; } }
private org.ovirt.engine.core.common.businessentities.VM mockVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setId ( vmId ) ; vm.setStoragePoolId ( spId ) ; vm.setStatus ( VMStatus.Down ) ; org.mockito.Mockito.doReturn ( vmDAO ) . when ( spyCommand ) . getVmDAO ( ) ; org.mockito.Mockito.when ( vmDAO.get ( vmId ) ) . thenReturn ( vm ) ; return vm ; }
public void initialize ( ) { super . initialize ( ) ; org.ovirt.engine.ui.uicommonweb.UICommand onSaveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand ( "OnSave" , this ) ; org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands ( ) . add ( onSaveCommand ) ; org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands ( ) . add ( getCancelCommand ( ) ) ; updateClusters ( ) ; }
private void migrationPoliciesChanged ( ) { boolean hasMigrationPolicy = ( ( getMigrationPolicies ( ) . getSelectedItem ( ) ) != null ) && ( ! ( NoMigrationPolicy.ID.equals ( getMigrationPolicies ( ) . getSelectedItem ( ) . getId ( ) ) ) ) ; org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ; getAutoConverge ( ) . setIsChangeable ( ( ! hasMigrationPolicy ) , constants.availableOnlyWithLegacyPolicy ( ) ) ; getMigrateCompressed ( ) . setIsChangeable ( ( ! hasMigrationPolicy ) , constants.availableOnlyWithLegacyPolicy ( ) ) ; }
protected boolean isDetachAllowed ( final boolean isRemoveLast ) { if ( ( getStoragePoolIsoMap ( ) ) == null ) { return failValidation ( EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL ) ; } if ( ( ! isRemoveLast ) && ( isMaster ( ) ) ) { return failValidation ( EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN ) ; } return true ; }
private void addChildren ( org.ovirt.engine.core.common.businessentities.Tags tag ) { org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added to tree" , tag.getTagName ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Tags > children = getTagDao ( ) . getAllForParent ( tag.getTagId ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Tags child : children ) { addChildren ( child ) ; org.ovirt.engine.core.bll.TagsDirector.log.info ( "Tag '{}' added as child to parent '{}'" , child.getTagName ( ) , tag.getTagName ( ) ) ; tag.getChildren ( ) . add ( child ) ; addTagToHash ( tag ) ; addTagToHash ( child ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturn getQemuImageInfo ( java.lang.String sdUUID , java.lang.String spUUID , java.lang.String imgUUID , java.lang.String volUUID ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Volume.getQemuImageInfo" ) . withParameter ( "storagepoolID" , spUUID ) . withParameter ( "storagedomainID" , sdUUID ) . withParameter ( "imageID" , imgUUID ) . withParameter ( "volumeID" , volUUID ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.QemuImageInfoReturn ( response ) ; }
public void testImportWithStorageDomainName ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( VdcQueryType.GetStorageDomainByName , org.ovirt.engine.core.common.queries.NameQueryParameters.class , new java.lang.String [ ] { "Name" } , new java.lang.Object [ ] { NAMES [ 2 ] } , getStorageDomainStatic ( 2 ) ) ; setUpGetDataCenterByStorageDomainExpectations ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainTemplateResourceTest.STORAGE_DOMAIN_ID ) ; org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setName ( NAMES [ 2 ] ) ; org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster ( ) ; cluster.setId ( GUIDS [ 1 ] . toString ( ) ) ; doTestImport ( storageDomain , cluster , false ) ; }
public void executeCommand ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand < org.ovirt.engine.core.common.action.gluster.GlusterHookParameters > ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) ) ) ; setupMocks ( cmd ) ; mockBackendStatusChange ( cmd , true ) ; cmd.executeCommand ( ) ; org.junit.Assert.assertEquals ( cmd.getAuditLogTypeValue ( ) , AuditLogType.GLUSTER_HOOK_ENABLE ) ; }
private java.util.List < org.ovirt.engine.api.model.RngSource > adaptRngSources ( org.ovirt.engine.api.v3.types.V3HardwareInformation from ) { java.util.List < org.ovirt.engine.api.model.RngSource > results = new java.util.LinkedList < > ( ) ; for ( java.lang.String s : from.getSupportedRngSources ( ) . getRngSources ( ) ) { results.add ( org.ovirt.engine.api.model.RngSource.fromValue ( s ) ) ; } return results ; }
public void testGetAllByCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > result = dao.getAllByCluster ( org.ovirt.engine.core.dao.VmStaticDaoTest.CLUSTER_ID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmStatic vm : result ) { org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.VmStaticDaoTest.CLUSTER_ID , vm.getClusterId ( ) ) ; } }
public void testValidModifiedBondsFailsWhenSlavesValidationFails ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond ( ) ; bond.setSlaves ( java.util.Arrays.asList ( "slaveA" , "slaveB" ) ) ; doTestValidModifiedBonds ( bond , ValidationResult.VALID , ValidationResult.VALID , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) , new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE ) ) ; }
protected void updateStorageDomain ( final java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomainsToUpdate ) { executeInNewTransaction ( new org.ovirt.engine.core.utils.transaction.TransactionMethod < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void runInTransaction ( ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain domainToUpdate : storageDomainsToUpdate ) { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext ( ) ; context.snapshotEntity ( domainToUpdate.getStorageDynamicData ( ) ) ; getStorageDomainDynamicDao ( ) . update ( domainToUpdate.getStorageDynamicData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; } return null ; } } ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool a : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) { if ( ( a.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up ) ) { list.add ( a ) ; } } model.setDataCenter ( model , list ) ; getPoolModelBehaviorInitializedEvent ( ) . raise ( this , EventArgs.Empty ) ; }
public void canAddVm ( ) { org.mockito.Mockito.doNothing ( ) . when ( cmd ) . initTemplateDisks ( ) ; initCommandMethods ( ) ; cmd.init ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateCustomProperties ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . validateSpaceRequirements ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.canAddVm ( java.util.Collections.singletonList ( createStorageDomain ( org.ovirt.engine.core.bll.STORAGE_DOMAIN_ID_1 ) ) ) , "vm could not be added" ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc allocateVolume ( java.lang.String spUUID , java.lang.String sdUUID , java.lang.String imgGUID , java.lang.String volUUID , java.lang.String size ) { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.allocateVolume ( sdUUID , spUUID , imgGUID , volUUID , size ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; }
public void init ( final org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel clickSource ) { super . init ( clickSource ) ; org.ovirt.engine.ui.uicommonweb.models.AbstractErrataListModel model = modelProvider.getModel ( ) ; model.setItemsFilter ( createFilter ( clickSource.getFilterCommand ( ) ) ) ; }
public void testGetBrickByServerIdAndDirectory ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = dao.getBrickByServerIdAndDirectory ( FixturesTool.GLUSTER_BRICK_SERVER1 , FixturesTool.GLUSTER_BRICK_DIR1 ) ; org.junit.jupiter.api.Assertions.assertNotNull ( brick ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.GLUSTER_BRICK_SERVER1 , brick.getServerId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( FixturesTool.GLUSTER_BRICK_DIR1 , brick.getBrickDirectory ( ) ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue currentVmsInPoolQuery = runInternalQuery ( VdcQueryType.GetAllPoolVms , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool ( ) . getVmPoolId ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VM > poolVmsBeforeAdd = ( currentVmsInPoolQuery.getSucceeded ( ) ) ? currentVmsInPoolQuery.< java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; super . executeCommand ( ) ; if ( org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getSucceeded ( ) ) { updatePoolVms ( poolVmsBeforeAdd ) ; } vmPoolMonitor.triggerPoolMonitoringJob ( ) ; }
private void updateAlerts ( ) { final org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel.getSelectedItem ( ) ; if ( host == null ) { return ; } generalModel.setHasUpgradeAlert ( ( ( host.isUpdateAvailable ( ) ) && ( ( host.getStatus ( ) ) != ( org.ovirt.engine.core.common.businessentities.VDSStatus.Installing ) ) ) ) ; generalModel.setHasAnyAlert ( ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 0 , true ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendBookmarksResourceTest.getModel ( 0 ) ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void canDoActionFailsOnNullDiskInterface ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; image.setvolumeFormat ( VolumeFormat.COW ) ; image.setVolumeType ( VolumeType.Preallocated ) ; org.ovirt.engine.core.common.action.AddDiskParameters params = new org.ovirt.engine.core.common.action.AddDiskParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , image ) ; initializeCommand ( storageId , params ) ; org.junit.Assert.assertFalse ( command.validateInputs ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( "VALIDATION.DISK_INTERFACE.NOT_NULL" ) ) ; }
public void canDoActionFailsForDifferentStorageDevice ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice ( "sda" , null ) ; org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice ( "sdb" , null ) ; storageDevice2.setDevType ( "SDA" ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Arrays.asList ( storageDevice1 , storageDevice2 ) ) ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; }
private void addStorageFormatOptions ( org.ovirt.engine.api.model.VersionCaps version , org.ovirt.engine.api.model.StorageFormat ... formats ) { version.setStorageFormats ( new org.ovirt.engine.api.model.StorageFormats ( ) ) ; for ( org.ovirt.engine.api.model.StorageFormat format : formats ) { version.getStorageFormats ( ) . getStorageFormats ( ) . add ( format.value ( ) ) ; } }
public boolean isSpiceProxyDefined ( org.ovirt.engine.core.common.businessentities.VM vm ) { return ( ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( ( ( java.lang.String ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.SpiceProxyDefault ) ) ) ) ) ) || ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vm.getVdsGroupSpiceProxy ( ) ) ) ) ) || ( ! ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( vm.getVmPoolSpiceProxy ( ) ) ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; vfMap = returnValue.getReturnValue ( ) ; if ( ( vfMap ) == null ) { vfMap = java.util.Collections.emptyMap ( ) ; } queryFreeBonds ( ) ; }
public void testSubResourceLocator ( ) throws java.lang.Exception { java.lang.String id = java.util.UUID.nameUUIDFromBytes ( org.ovirt.engine.api.restapi.resource.BackendStatisticsResourceTest.STATISTICS [ 1 ] . getBytes ( ) ) . toString ( ) ; control.replay ( ) ; assertTrue ( ( ( collection.getStatisticResource ( id ) ) instanceof org.ovirt.engine.api.resource.StatisticResource ) ) ; }
public static void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface lookupNic ( org.ovirt.engine.core.compat.Guid nicId ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > nics = getBackendCollection ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class , QueryType.GetTemplateInterfacesByTemplateId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( templateId ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : nics ) { if ( java.util.Objects.equals ( nic.getId ( ) , nicId ) ) { return nic ; } } return null ; }
private void assertGetAllForVdsCorrectResult ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > result ) { org.junit.jupiter.api.Assertions.assertNotNull ( result ) ; org.junit.jupiter.api.Assertions.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : result ) { org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.core.dao.network.InterfaceDaoImplTest.VDS_ID , iface.getVdsId ( ) ) ; } }
private void addModelListeners ( final org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider modelProvider ) { modelProvider.getModel ( ) . getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel lastSelectedItem = modelProvider.getSelectionModel ( ) . getSelectedObject ( ) ; modelProvider.getSelectionModel ( ) . setSelected ( lastSelectedItem , false ) ; expandTree ( display.getRootTreeNode ( ) , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.ITEM_LEVEL ) ; } } ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > getAll ( ) { try { com.woorea.openstack.quantum.model.Networks networks = getClient ( ) . networks ( ) . list ( ) . execute ( ) ; return map ( networks.getList ( ) ) ; } catch ( java.lang.RuntimeException e ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE , e ) ; } }
public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest.getModel ( ) ; model.setProvisionedSize ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Disk" , "testAddIncompleteParameters2" , "provisionedSize|size" ) ; } }
public void testGetByIdReturnsNullIfNotExist ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem testItem = new org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , null ) ; org.ovirt.engine.core.common.businessentities.BusinessEntityMap < org.ovirt.engine.core.common.businessentities.BusinessEntityMapTest.TestItem > map = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap ( java.util.Collections.singletonList ( testItem ) ) ; org.junit.Assert.assertThat ( map.get ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) , org.hamcrest.CoreMatchers.nullValue ( ) ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getVmDeviceByVmId ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid userID , boolean isFiltered ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "vm_id" , vmId ) . addValue ( "user_id" , userID ) . addValue ( "is_filtered" , isFiltered ) ; return getCallsHandler ( ) . executeReadList ( "GetVmDeviceByVmId" , createEntityRowMapper ( ) , parameterSource ) ; }
public void testGetAllStaticByStoragePool ( ) { org.ovirt.engine.core.compat.Guid spID = dbFacade.getClusterDao ( ) . get ( newVmStatic.getClusterId ( ) ) . getStoragePoolId ( ) ; org.junit.Assert.assertNotNull ( spID ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmStatic > result = dao.getAllByStoragePoolId ( spID ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.UnlabelNic , org.ovirt.engine.core.common.action.LabelNicParameters.class , new java.lang.String [ ] { "NicId" , "Label" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.NIC_ID , org.ovirt.engine.api.restapi.resource.BackendHostNicLabelResourceTest.LABELS [ 0 ] } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void setTestResultImage ( java.lang.String errorMessage ) { testResultImage.setResource ( ( errorMessage.isEmpty ( ) ? org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderPopupView.resources.logNormalImage ( ) : org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderPopupView.resources.logErrorImage ( ) ) ) ; testResultImage.setStylePrimaryName ( style.testResultImage ( ) ) ; testResultMessage.setText ( ( errorMessage.isEmpty ( ) ? org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderPopupView.constants.testSuccessMessage ( ) : errorMessage ) ) ; }
private void validateUpdateDescription ( org.ovirt.engine.core.common.businessentities.VMStatus status ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage ( ) ; disk.setReadOnly ( false ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( disk ) ; org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters ( ) ; parameters.getDiskInfo ( ) . setReadOnly ( false ) ; disk.setDescription ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( 10 ) ) ; initializeCommand ( parameters , java.util.Collections.singletonList ( createVm ( status ) ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
public void hostProviderTypeDoesNotMatch ( ) { org.mockito.Mockito.when ( host.getHostProviderId ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.common.businessentities.Provider provider = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Provider.class ) ; org.mockito.Mockito.when ( provider.getType ( ) ) . thenReturn ( ProviderType.OPENSTACK_IMAGE ) ; org.mockito.Mockito.when ( providerDao.get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( provider ) ; org.junit.Assert.assertThat ( validator.hostProviderTypeMatches ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_HOST_PROVIDER_TYPE_MISMATCH ) ) ; }
public void validateFailsWithForceNotSupported ( ) { org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters parameters = new org.ovirt.engine.core.common.action.gluster.CreateGlusterVolumeParameters ( getVolume ( 2 , true ) , true ) ; org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommand command = new org.ovirt.engine.core.bll.gluster.CreateGlusterVolumeCommand ( parameters ) ; cmd = org.mockito.Mockito.spy ( command ) ; prepareMocks ( cmd ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { if ( ( object.getVersion ( ) . getSelectedItem ( ) ) != null ) { org.ovirt.engine.core.compat.Version clusterVersion = object.getVersion ( ) . getSelectedItem ( ) ; migrationPolicyDetails.setVisible ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . isMigrationPoliciesSupported ( clusterVersion ) ) ; } }
public static org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel findAncestor ( org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType type , org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel root ) { if ( ( root.getType ( ) ) != type ) { if ( ( root.getParent ( ) ) != null ) { return org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel.findAncestor ( type , root.getParent ( ) ) ; } return null ; } return root ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.event_subscriber > getAllForSubscriber ( org.ovirt.engine.core.compat.Guid id ) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource ( ) . addValue ( "subscriber_id" , id ) ; return getCallsHandler ( ) . executeReadList ( "Getevent_subscriberBysubscriber_id" , org.ovirt.engine.core.dao.EventDAODbFacadeImpl.EventSubscriberRowMapper.instance , parameterSource ) ; }
protected void executeQuery ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.LdapUser > results = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LdapUser > ( ) ; for ( org.ovirt.engine.core.compat.Guid guid : getUserIds ( ) ) { org.ovirt.engine.core.common.businessentities.LdapUser user = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getUserByUserGuid ( guid ) ; if ( user != null ) { results.add ( user ) ; } } setReturnValue ( results ) ; setSucceeded ( true ) ; }
private static void setActions ( org.ovirt.engine.api.model.BaseResource model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParentType ) { org.ovirt.engine.api.restapi.util.LinkHelper.Collection collection = org.ovirt.engine.api.restapi.util.LinkHelper.getCollection ( model ) ; java.lang.String path = org.ovirt.engine.api.restapi.util.LinkHelper.getPath ( model , suggestedParentType ) ; if ( path != null ) { org.ovirt.engine.api.restapi.util.ActionsBuilder actionsBuilder = new org.ovirt.engine.api.restapi.util.ActionsBuilder ( path , collection.getResourceType ( ) ) ; model.setActions ( actionsBuilder.build ( ) ) ; } }
private void InitVdsBroker ( ) { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat ( "Initialize vdsBroker ({0},{1})" , _vds.getHostName ( ) , _vds.getPort ( ) ) ; int clientTimeOut = ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.vdsTimeout ) ) * 1000 ; org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector , org.apache.commons.httpclient.HttpClient > returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection ( _vds.getHostName ( ) , _vds.getPort ( ) , clientTimeOut , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector.class , org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.UseSecureConnectionWithServers ) ) ; _vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper ( returnValue.getFirst ( ) , returnValue.getSecond ( ) ) ; }
public void testValidate ( ) { org.mockito.Mockito.when ( vdsDaoMock.get ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommandTest.HOST_ID ) ) . thenReturn ( oldHost ) ; org.mockito.Mockito.when ( fenceAgentDao.getFenceAgentsForHost ( org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommandTest.HOST_ID ) ) . thenReturn ( new java.util.ArrayList ( ) ) ; org.junit.Assert.assertTrue ( underTestCommand.validate ( ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getSharedLocks ( ) { if ( isTemplateVersion ( ) ) { return java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getBaseTemplateId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.TEMPLATE , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) ; } return super . getSharedLocks ( ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; if ( storageListModel.removeConnection ) { storageListModel.cleanConnection ( storageListModel.connection , storageListModel.hostId ) ; storageListModel.removeConnection = false ; } storageListModel.onFinish ( storageListModel.context , false , storageListModel.storageModel ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > getConsoleDevices ( org.ovirt.engine.core.compat.Guid vmId ) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType.CONSOLE , VmDeviceType.CONSOLE.getName ( ) ) ; }
public static org.ovirt.engine.core.common.businessentities.storage.DiskImage createSnapshotMemoryDisk ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , org.ovirt.engine.core.common.scheduling.VmOverheadCalculator vmOverheadCalculator , java.lang.String diskDescription ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryDisk ( vm , storageType , vmOverheadCalculator , diskDescription ) ; image.setDiskAlias ( org.ovirt.engine.core.bll.memory.MemoryUtils.VM_SNAPSHOT_MEMORY_DISK_ALIAS ) ; image.setImageStatus ( ImageStatus.OK ) ; return image ; }
public void addDiskImageWithNoVmDevice ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image , boolean active , org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap imageStorageDomainMap ) { try { addImage ( image , active , imageStorageDomainMap ) ; addDisk ( image ) ; } catch ( java.lang.RuntimeException ex ) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error ( "Failed adding new disk image and related entities to db: {}" , ex.getMessage ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug ( "Exception" , ex ) ; throw new org.ovirt.engine.core.common.errors.EngineException ( org.ovirt.engine.core.common.errors.EngineError.DB , ex ) ; } }
protected void setUpEntityQueryExpectations ( int times , org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond ) throws java.lang.Exception { while ( ( times -- ) > 0 ) { setUpEntityQueryExpectations ( VdcQueryType.GetIscsiBondById , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendIscsiBondNetworkResourceTest.ISCSI_BOND_ID } , iscsiBond ) ; } }
public void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
protected void onEntityChanged ( ) { if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData ) ( getEntity ( ) ) ) . getVm ( ) ; setItems ( vm.getInterfaces ( ) ) ; } else { setItems ( null ) ; } }
public javax.ws.rs.core.Response remove ( ) { get ( ) ; org.ovirt.engine.core.common.action.RemoveDiskParameters params = new org.ovirt.engine.core.common.action.RemoveDiskParameters ( asGuid ( id ) ) ; boolean force = org.ovirt.engine.api.common.util.ParametersHelper.getBooleanParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource.FORCE , true , false ) ; if ( force ) { params.setForceDelete ( force ) ; } java.lang.String storageDomain = org.ovirt.engine.api.common.util.ParametersHelper.getParameter ( httpHeaders , uriInfo , org.ovirt.engine.api.restapi.resource.BackendTemplateDiskResource.STORAGE_DOMAIN ) ; if ( storageDomain != null ) { params.setStorageDomainId ( asGuid ( storageDomain ) ) ; } return performAction ( VdcActionType.RemoveDisk , params ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.lang.Boolean entity = getOptimizeForSpeed ( ) . getEntity ( ) ; if ( entity ) { getGuarantyResources ( ) . setEntity ( true ) ; } getAllowOverbooking ( ) . setIsChangeable ( ( ! entity ) ) ; }
public org.ovirt.engine.core.compat.Guid getDefaultIconId ( boolean small ) { final org.ovirt.engine.core.common.queries.VmIconIdSizePair pair = osIdToDefaultIconIdMap.get ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID ) ; if ( pair != null ) { return pair.get ( small ) ; } throw new java.lang.RuntimeException ( "Icon of default operating system not found." ) ; }
public void invoke ( org.ovirt.engine.api.extensions.ExtMap context , java.util.Map < java.lang.String , java.lang.Object > args ) { if ( ! ( context.containsKey ( ContextKeys.EXIT_STATUS ) ) ) { context.put ( Schema.InvokeKeys.MODIFICATION_TYPE , Sql.ModificationTypes.DELETE ) ; context.put ( Schema.InvokeKeys.ENTITY_KEYS , new org.ovirt.engine.api.extensions.ExtMap ( ) . mput ( Schema.UserIdentifiers.USERNAME , context.get ( ContextKeys.POSITIONAL ) ) ) ; } if ( ! ( context.containsKey ( ContextKeys.EXIT_STATUS ) ) ) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get ( "_schema-modify" ) . invoke ( context ) ; context.putIfAbsent ( ContextKeys.EXIT_STATUS , org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS ) ; } }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public static java.lang.String cdPathWindowsToLinux ( java.lang.String windowsPath , org.ovirt.engine.core.compat.Guid storagePoolId ) { return org.ovirt.engine.core.bll.ImagesHandler.cdPathWindowsToLinux ( windowsPath , ( ( java.lang.String ) ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.IsoPrefix , new org.ovirt.engine.core.common.vdscommands.IrsBaseVDSCommandParameters ( storagePoolId ) ) . getReturnValue ( ) ) ) ) ; }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters ( ) { return postDeleteActionHandler.fixParameters ( new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters ( org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getImageGroupId ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getImageList ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . isPostZero ( ) , storageDomainDao.get ( org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . getStorageDomainId ( ) ) . isDiscardAfterDelete ( ) , org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters ( ) . isForce ( ) ) ) ; }
private java.util.Map < java.lang.String , java.lang.Object > buildResponse ( javax.servlet.http.HttpServletRequest request , org.ovirt.engine.core.sso.utils.SsoSession ssoSession , java.lang.String clientId , java.lang.String clientSecret ) throws java.lang.Exception { java.util.Map < java.lang.String , java.lang.Object > payload = buildResponse ( ssoSession ) ; if ( org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList ( ssoSession.getScope ( ) ) . contains ( SsoConstants.OPENID_SCOPE ) ) { payload.put ( "id_token" , org.ovirt.engine.core.sso.servlets.OpenIdUtils.createJWT ( request , ssoSession , clientId , clientSecret ) ) ; } return payload ; }
public void persistCommand ( org.ovirt.engine.core.common.action.VdcActionType parentCommand , boolean enableCallBack ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = getParentParameters ( parentCommand ) ; javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity ( getCommandId ( ) , parentParameters.getCommandId ( ) , getActionType ( ) , getParameters ( ) , commandStatus , enableCallBack , getReturnValue ( ) ) ) ; } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } }
public org.ovirt.engine.core.bll.ValidationResult validateSingleHostAttachedToLocalStorage ( ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = storagePoolDao.getForVdsGroup ( host.getVdsGroupId ( ) ) ; if ( ( storagePool == null ) || ( ! ( storagePool.isLocal ( ) ) ) ) { return org.ovirt.engine.core.bll.ValidationResult.VALID ; } return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE ) . unless ( hostStaticDao.getAllForVdsGroup ( host.getVdsGroupId ( ) ) . isEmpty ( ) ) ; }
public org.ovirt.engine.api.model.NetworkFilterParameters list ( ) { org.ovirt.engine.api.model.NetworkFilterParameters parameters = new org.ovirt.engine.api.model.NetworkFilterParameters ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter > entities = getBackendCollection ( QueryType.GetVmInterfaceFilterParametersByVmInterfaceId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( nicId ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter entity : entities ) { org.ovirt.engine.api.model.NetworkFilterParameter parameter = populate ( map ( entity ) , entity ) ; parameters.getNetworkFilterParameters ( ) . add ( addLinks ( parameter ) ) ; } return parameters ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc diskReplicateFinish ( java.lang.String vmUUID , java.util.Map srcDisk , java.util.Map dstDisk ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.diskReplicateFinish ( vmUUID , srcDisk , dstDisk ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getStorageDevices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hostId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterStorageDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) , aQuery ) ; }
protected void initAppTable ( ) { appTable = new org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.vms.VmAppListModel > ( ) ; appTable.addColumn ( new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip < java.lang.String > ( ) { @ java.lang.Override public java.lang.String getValue ( java.lang.String object ) { return object ; } } , constants.installedApp ( ) ) ; appTable.getElement ( ) . getStyle ( ) . setPosition ( Position.RELATIVE ) ; com.google.gwt.user.client.ui.ScrollPanel appPanel = new com.google.gwt.user.client.ui.ScrollPanel ( ) ; appPanel.add ( appTable ) ; subTabLayoutPanel.add ( appPanel , constants.importVmApplicationslSubTabLabel ( ) ) ; }
public void getNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.common.businessentities.Label label = new org.ovirt.engine.core.common.businessentities.LabelBuilder ( org.ovirt.engine.core.bll.AddLabelCommand.getParameters ( ) . getLabel ( ) ) . build ( ) ; labelDao.save ( label ) ; vmStaticDao.incrementDbGenerationForVms ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( label.getVms ( ) ) ) ; org.ovirt.engine.core.bll.AddLabelCommand.setSucceeded ( true ) ; setActionReturnValue ( label.getId ( ) ) ; }
public void testAllDomainsExistAndActiveOneInactive ( ) { domain1.setStatus ( StorageDomainStatus.Active ) ; domain2.setStatus ( StorageDomainStatus.Inactive ) ; org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsExistAndActive ( ) ; org.junit.Assert.assertFalse ( "One domain should not be active" , result.isValid ( ) ) ; org.junit.Assert.assertEquals ( "Wrong validation error" , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , result.getMessage ( ) ) ; }
public void validateSucceedsWithStopActionTypeAndClusterId ( ) { cmd.getParameters ( ) . setActionType ( GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_STOP ) ; cmd.getParameters ( ) . setClusterId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd.setClusterId ( cmd.getParameters ( ) . getClusterId ( ) ) ; prepareMocks ( cmd ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
public void testUpdate ( ) { org.ovirt.engine.core.common.businessentities.event_subscriber before = dao.getAllForSubscriber ( existingSubscriber ) . get ( 0 ) ; int oldMethodId = before.getmethod_id ( ) ; before.setmethod_id ( 2 ) ; dao.update ( before , oldMethodId ) ; org.ovirt.engine.core.common.businessentities.event_subscriber after = dao.getAllForSubscriber ( existingSubscriber ) . get ( 0 ) ; org.junit.Assert.assertNotNull ( after ) ; org.junit.Assert.assertEquals ( before , after ) ; }
public org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clone ( ) throws java.lang.CloneNotSupportedException { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy policy = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClientPolicy ( this . getRetryTimeOut ( ) , this . getRetryNumber ( ) , this . getIncomingHeartbeat ( ) , this . getOutgoingHeartbeat ( ) , this . getExceptions ( ) , this . requestQueue , this . responseQueue ) ; policy.setEventQueue ( this . eventQueue ) ; return policy ; }
protected boolean isVmNameValidLength ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.lang.String vmName = vm.getVmName ( ) ; int maxVmNameLengthWindows = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.MaxVmNameLengthWindows ) ; int maxVmNameLengthNonWindows = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.MaxVmNameLengthNonWindows ) ; int maxLength = ( vm.getVmOs ( ) . isWindows ( ) ) ? maxVmNameLengthWindows : maxVmNameLengthNonWindows ; boolean nameLengthValid = ( vmName.length ( ) ) <= maxLength ; return nameLengthValid ; }
public org.ovirt.engine.core.bll.ValidationResult validateFloppy ( ) { if ( ( org.apache.commons.lang.StringUtils.isNotEmpty ( runVmParam.getFloppyPath ( ) ) ) && ( ! ( org.ovirt.engine.core.bll.validator.VmValidationUtils.isFloppySupported ( vm.getOs ( ) , vm.getClusterCompatibilityVersion ( ) ) ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_FLOPPY_IS_NOT_SUPPORTED_BY_OS ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.DbUser user ) { if ( user.getLastAdminCheckStatus ( ) ) { return getApplicationResources ( ) . adminImage ( ) ; } if ( user.isGroup ( ) ) { return getApplicationResources ( ) . userGroupImage ( ) ; } return getApplicationResources ( ) . userImage ( ) ; }
public void testRemove ( ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveNetwork , org.ovirt.engine.core.common.action.RemoveNetworkParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 0 ] } , true , true ) ) ; verifyRemove ( resource.remove ( ) ) ; }
public void testInterfaceInHostWhenInDifferentHost ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( ) ; vdsNetworkInterface.setVdsId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.NIC_NOT_EXISTS_ON_HOST , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( HostInterfaceValidator.VAR_NIC_NOT_EXISTS_ON_HOST_ENTITY , hostId.toString ( ) ) ) ; org.junit.Assert.assertThat ( new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . interfaceInHost ( hostId ) , matcher ) ; }
public void testUpdateWithNonExistingNetwork ( ) throws java.lang.Exception { control.replay ( ) ; org.ovirt.engine.api.model.NIC nic = resource.update ( getNic ( true ) ) ; nic.getNetwork ( ) . setId ( GUIDS [ 2 ] . toString ( ) ) ; assertNotNull ( nic ) ; }
public static void isAnyHostUpInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) { return true ; } return false ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetUpHostListByCluster ( aQuery , clusterName , 1 ) ; }
protected void executeCommand ( ) { getProvider ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.provider.AddProviderCommand.getDbFacade ( ) . getProviderDao ( ) . save ( getProvider ( ) ) ; org.ovirt.engine.core.bll.provider.AddProviderCommand.getReturnValue ( ) . setActionReturnValue ( getProvider ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.provider.AddProviderCommand.setSucceeded ( true ) ; }
public void update ( int index , org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String value ) { java.util.Map < java.lang.String , java.lang.String > parameters = new java.util.HashMap < > ( ) ; parameters.put ( FragmentParams.NAME.getName ( ) , vm.getName ( ) ) ; getPlaceTransitionHandler ( ) . handlePlaceTransition ( WebAdminApplicationPlaces.virtualMachineGeneralSubTabPlace , parameters ) ; }
private void setUpGetEntityExpectations ( boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( QueryType.GetExternalSubnetsOnProviderByExternalNetwork , org.ovirt.engine.core.common.queries.GetExternalSubnetsOnProviderByExternalNetworkQueryParameters.class , new java.lang.String [ ] { "ProviderId" , "NetworkId" } , new java.lang.Object [ ] { GUIDS [ 0 ] , org.ovirt.engine.api.restapi.utils.HexUtils.string2hex ( NAMES [ 1 ] ) } , ( notFound ? null : getSubnets ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.network.Network createNetworkWithNameAndLabel ( java.lang.String name , java.lang.String label ) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetworkWithName ( name ) ; network.setLabel ( label ) ; return network ; }
private com.google.gwt.user.client.ui.PushButton createButton ( com.google.gwt.resources.client.ImageResource imageResource ) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton ( new com.google.gwt.user.client.ui.Image ( imageResource ) , new com.google.gwt.event.dom.client.ClickHandler ( ) { @ java.lang.Override public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { toggleVisibleWestPanel ( ) ; } } ) ; result.setVisible ( false ) ; result.addStyleName ( style.sliderButton ( ) ) ; result.addStyleName ( "tslp_sliderButton_pfly_fix" ) ; return result ; }
public java.lang.Boolean call ( ) throws java.lang.Exception { if ( ( _resultError ) || ( ! ( _installIncomplete ) ) ) { _parser.cliNoop ( ) ; } else { java.lang.String [ ] msgs = ( ( java.lang.String [ ] ) ( _parser.cliEnvironmentGet ( org.ovirt.ovirt_host_deploy.constants.CoreEnv.INSTALL_INCOMPLETE_REASONS ) ) ) ; userVisibleLog ( java.util.logging.Level.WARNING , "Installation is incomplete, manual intervention is required" ) ; for ( java.lang.String m : msgs ) { userVisibleLog ( java.util.logging.Level.WARNING , m ) ; } } return true ; }
protected org.ovirt.engine.core.common.businessentities.network.Network lookupClusterNetwork ( org.ovirt.engine.core.compat.Guid clusterId , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < org.ovirt.engine.api.restapi.resource.Network > networks ) { for ( org.ovirt.engine.api.restapi.resource.Network network : networks ) { if ( ( ( id != null ) && ( id.equals ( network.getId ( ) ) ) ) || ( ( name != null ) && ( name.equals ( network.getName ( ) ) ) ) ) { return network ; } } return null ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > getCommandsWithCallBackEnabled ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.CommandEntity > cmdEntities = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ; for ( org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet ( ) ) { cmdEntity = commandsCache.get ( cmdId ) ; if ( commandsCache.get ( cmdId ) . isCallBackEnabled ( ) ) { cmdEntities.add ( cmdEntity ) ; } } return cmdEntities ; }
public void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ListConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookDisable ( java.lang.String glusterCommand , java.lang.String stage , java.lang.String hookName ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterHookDisable ( glusterCommand , stage , hookName ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue executeVerb ( ) { org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters tempVar = new org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getStoragePoolId ( ) ) ; tempVar.setStorageDomainId ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getStorageDomainId ( ) ) ; tempVar.setVmIdList ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getIds ( ) ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.GetVmsInfo , tempVar ) ; return retVal ; }
public void testListFailure ( ) { setUpMacPoolsQueryExpectations ( org.ovirt.engine.api.restapi.resource.FAILURE ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection.setUriInfo ( uriInfo ) ; try { getCollection ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae ) ; } }
private org.ovirt.engine.core.common.action.VdcReturnValueBase notAllowToRunAction ( org.ovirt.engine.core.common.action.VdcActionType actionType ) { java.lang.String mode = dbFacade.getVdcOptionDao ( ) . getByNameAndVersion ( ConfigValues.EngineMode.name ( ) , ConfigCommon.defaultConfigurationVersion ) . getoption_value ( ) ; if ( EngineWorkingMode.MAINTENANCE.name ( ) . equalsIgnoreCase ( mode ) ) { return getErrorCommandReturnValue ( EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE ) ; } else if ( EngineWorkingMode.PREPARE.name ( ) . equalsIgnoreCase ( mode ) ) { return notAllowedInPrepForMaintMode ( actionType ) ; } return null ; }
protected void addJNDIBeans ( ) { addBeanJNDIName ( BeanType.BACKEND , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-bll/Backend" ) ) ; addBeanJNDIName ( BeanType.SCHEDULER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-scheduler/Scheduler" ) ) ; addBeanJNDIName ( BeanType.USERS_DOMAINS_CACHE , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-bll/UsersDomainsCacheManagerService" ) ) ; addBeanJNDIName ( BeanType.VDS_EVENT_LISTENER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-bll/VdsEventListener" ) ) ; addBeanJNDIName ( BeanType.LOCK_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-bll/LockManager" ) ) ; addBeanJNDIName ( BeanType.EVENTQUEUE_MANAGER , org.ovirt.engine.core.utils.ejb.EngineEJBUtilsStrategy.ENGINE_CONTEXT_PREFIX.concat ( "engine-bll/EventQueue" ) ) ; }
public static void removeVmStatelessImages ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.bll.context.CommandContext context ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vmId , SnapshotType.STATELESS ) ) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat ( "Deleting snapshot for stateless vm {0}" , vmId ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.RestoreStatelessVm , new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vmId ) , context ) ; } }
public void getMaxVmsInPool ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1000 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVmsInPool , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
void initEditors ( ) { versionEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxOnlyEditor < java.lang.Object > ( new com.google.gwt.text.shared.AbstractRenderer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String render ( java.lang.Object object ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( object ) ) ; return model.getTitle ( ) ; } } ) ; overrideEditor = new org.ovirt.engine.ui.common.widget.editor.EntityModelCheckBoxEditor ( org.ovirt.engine.ui.common.widget.Align.RIGHT ) ; }
private void removeSessionImpl ( java.lang.String sessionId , int reason , java.lang.String message , java.lang.Object ... msgArgs ) { if ( ssoSessionUtils.isSessionInUse ( getEngineSessionSeqId ( sessionId ) ) ) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = getUser ( sessionId , false ) ; log.info ( "Not removing session '{}', session has running commands{}" , sessionId , ( dbUser == null ? "." : java.lang.String.format ( " for user '%s@%s'." , dbUser.getLoginName ( ) , dbUser.getDomain ( ) ) ) ) ; return ; } java.lang.String authzName = null ; if ( ( getProfile ( sessionId ) ) != null ) { authzName = getProfile ( sessionId ) . getAuthzName ( ) ; } org.ovirt.engine.core.aaa.AcctUtils.reportRecords ( reason , authzName , getPrincipalName ( sessionId ) , message , msgArgs ) ; engineSessionDao.remove ( getEngineSessionSeqId ( sessionId ) ) ; sessionInfoMap.remove ( sessionId ) ; }
public void doTestBadAddFromConfigurationMissingParameters ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Vm model = createModel ( null ) ; model.setInitialization ( new org.ovirt.engine.api.model.Initialization ( ) ) ; model.getInitialization ( ) . setConfiguration ( new org.ovirt.engine.api.model.Configuration ( ) ) ; try { collection.add ( model ) ; org.junit.Assert.fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Vm" , "add" , "initialization.configuration.type" , "initialization.configuration.data" ) ; } }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.core.common.scheduling.PolicyUnit object ) { java.lang.String tooltipContent = null ; if ( object.isInternal ( ) ) { tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.internalPolicyUnit ( ) ; } else { tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.ManagePolicyUnitPopupView.constants.externalPolicyUnit ( ) ; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( tooltipContent ) ; }
public void testGetEntityNameByIdAndTypeForVmPool ( ) { org.ovirt.engine.core.common.businessentities.VmPool vmPool = dbFacade.getVmPoolDao ( ) . get ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VM_POOL_ID ) ; org.junit.Assert.assertNotNull ( vmPool ) ; java.lang.String name = vmPool.getVmPoolName ( ) ; org.junit.Assert.assertTrue ( name.equals ( dbFacade.getEntityNameByIdAndType ( org.ovirt.engine.core.dao.DbFacadeDAOTest.VM_POOL_ID , VdcObjectType.VmPool ) ) ) ; }
public void testGetGlusterVolumeSnapshotConfigByVolumeId ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig > configs = dao.getConfigByVolumeId ( org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.CLUSTER_ID , org.ovirt.engine.core.dao.gluster.GlusterVolumeSnapshotConfigDaoTest.VOLUME_ID ) ; org.junit.Assert.assertNotNull ( configs ) ; org.junit.Assert.assertEquals ( 2 , configs.size ( ) ) ; org.junit.Assert.assertTrue ( configs.contains ( existingConfig1 ) ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { return org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getParameters ( ) . isNeedsLocking ( ) ? java.util.Collections.singletonMap ( org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId ( ) . toString ( ) , org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair ( LockingGroup.VM , VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ) : null ; }
org.ovirt.engine.core.bll.ValidationResult validateSlaveHasNoLabels ( java.lang.String slaveName ) { java.util.Set < java.lang.String > labelsToConfigureOnNic = getLabelsToConfigureOnNic ( slaveName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.LABEL_ATTACH_TO_IMPROPER_INTERFACE , org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString ( "LABEL_ATTACH_TO_IMPROPER_INTERFACE_ENTITY" , slaveName ) ) . unless ( ( ( labelsToConfigureOnNic == null ) || ( labelsToConfigureOnNic.isEmpty ( ) ) ) ) ; }
private boolean shouldUpdateImageProperties ( ) { if ( ( getOldDisk ( ) . getDiskStorageType ( ) ) != ( org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE ) ) { return false ; } org.ovirt.engine.core.compat.Guid oldQuotaId = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( getOldDisk ( ) ) ) . getQuotaId ( ) ; return ! ( org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual ( oldQuotaId , getQuotaId ( ) ) ) ; }
public void execute ( int iterationId ) { org.ovirt.engine.core.common.businessentities.VDS vds = getVdss ( ) . get ( iterationId ) ; try { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( getStorageDomain ( ) . getStorageType ( ) ) . connectStorageToDomainByVdsId ( getStorageDomain ( ) , vds.getId ( ) ) ; } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.storage.ConnectSingleAsyncOperation.log.errorFormat ( "Failed to connect host {0} to storage domain (name: {1}, id: {2}). Exception: {3}" , vds.getName ( ) , getStorageDomain ( ) . getName ( ) , getStorageDomain ( ) . getId ( ) , e ) ; } }
public void testGetBrandingThemes ( ) { java.util.List < org.ovirt.engine.core.branding.BrandingTheme > result = testManager.getBrandingThemes ( ) ; org.junit.Assert.assertNotNull ( "There should be a result" , result ) ; org.junit.Assert.assertEquals ( "There should be five active themes" , 5 , result.size ( ) ) ; java.util.List < org.ovirt.engine.core.branding.BrandingTheme > result2 = testManager.getBrandingThemes ( ) ; org.junit.Assert.assertNotNull ( "There should be a result" , result2 ) ; org.junit.Assert.assertEquals ( "There should be five active themes" , 5 , result2.size ( ) ) ; org.junit.Assert.assertSame ( "The result are not the same object" , result , result2 ) ; }
private org.ovirt.engine.api.model.Network getNetwork ( ) { java.util.List < org.ovirt.engine.api.model.Network > networks = parent.getNetworks ( ) ; for ( org.ovirt.engine.api.model.Network entity : networks ) { if ( entity.getId ( ) . toString ( ) . equals ( id ) ) { return entity ; } } return null ; }
public void getClusterGlusterServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters ( clusterId , null , null , false ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeAdvancedDetails , parameters , aQuery ) ; }
public static void getDataCenterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( "DataCenter: sortby name" , org.ovirt.engine.core.common.interfaces.SearchType.StoragePool ) , aQuery ) ; }
public void isStorageDomainNameUnique ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return storageDomains.isEmpty ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Storage: name=" + name ) , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) , aQuery ) ; }
public void getDataCenterById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) . withoutRefresh ( ) , aQuery ) ; }
public void testList ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; setUpGetEntityExpectations ( VdcQueryType.GetDbUserByUserId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ 1 ] } , getUserByIdx ( 1 ) ) ; setUpQueryExpectations ( "" ) ; collection.setUriInfo ( uriInfo ) ; verifyCollection ( getCollection ( ) ) ; }
public void syncNetworkQosNotSupported ( ) { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork ( ) ; mockExistingNetworks ( network ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork ( "eth0" , network ) ; mockExistingIfaces ( iface ) ; org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.when ( qosDao.get ( qosId ) ) . thenReturn ( createQos ( ) ) ; network.setQosId ( qosId ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( createParametersForSync ( iface ) ) ; validateAndExpectViolation ( helper , VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME ) ; }
public void testExecuteQueryCommand ( ) { params = getQueryParameters ( ) ; org.mockito.Mockito.when ( params.getId ( ) ) . thenReturn ( vmID ) ; org.ovirt.engine.core.bll.IsBalloonEnabledQuery < org.ovirt.engine.core.common.queries.IdQueryParameters > query = getQuery ( ) ; query.executeQueryCommand ( ) ; org.junit.jupiter.api.Assertions.assertTrue ( ( ! ( ( ( java.lang.Boolean ) ( query.getQueryReturnValue ( ) . getReturnValue ( ) ) ) . booleanValue ( ) ) ) ) ; }
public void validateVmMemoryCanRunOnVdsHighMemLowOverhead ( ) { vm.setMinAllocatedMem ( 10000 ) ; vm.setVmMemSizeMb ( 10000 ) ; org.mockito.Mockito.doReturn ( ( - 1200 ) ) . when ( vmOverheadCalculator ) . getStaticOverheadInMb ( org.mockito.Matchers.any ( ) ) ; boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM ( vds , vm ) ; org.junit.Assert.assertTrue ( vmPassedMemoryRequirement ) ; }
public static void getVnicProfilesByDcId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dcId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VnicProfileView > ( ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVnicProfilesByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dcId ) , aQuery ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { for ( org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup grp : ( ( java.util.Collection < org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup > ) ( returnValue ) ) ) { items.add ( createUserGroup ( grp.getName ( ) , grp.getNamespace ( ) , grp.getAuthz ( ) ) ) ; } setItems ( items ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( target ) ) ; boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( returnValue ) ) ; diskModel.getIsShareable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . shareableDiskNotSupported ( ) ) ; diskModel.getIsShareable ( ) . setIsChangable ( isShareableDiskEnabled ) ; }
public org.ovirt.engine.api.model.Disks list ( ) { if ( org.ovirt.engine.api.common.util.QueryHelper.hasMatrixParam ( getUriInfo ( ) , org.ovirt.engine.api.restapi.resource.BackendStorageDomainDisksResource.UNREGISTERED_CONSTRAINT_PARAMETER ) ) { return mapCollection ( getBackendCollection ( VdcQueryType.GetUnregisteredDisks , new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters ( storageDomainId , getStoragePoolIdForDomain ( storageDomainId ) ) ) ) ; } else { return mapCollection ( getBackendCollection ( VdcQueryType.GetAllDisksByStorageDomainId , new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase ( this . storageDomainId ) ) ) ; } }
protected void verify ( org.ovirt.engine.api.model.Job model , org.ovirt.engine.api.model.Job transform ) { org.junit.Assert.assertNotNull ( transform ) ; org.junit.Assert.assertEquals ( model.getId ( ) , transform.getId ( ) ) ; org.junit.Assert.assertEquals ( model.getDescription ( ) , transform.getDescription ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model.setDataCenter ( model , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.StoragePool [ ] { dataCenter } ) ) ) ; model.getDataCenter ( ) . setIsChangable ( false ) ; }
protected boolean isStorageDomainCompatibleWithDC ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spv = new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator ( org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool ( ) ) ; if ( ( storageDomain.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.GLUSTERFS ) ) { org.ovirt.engine.core.bll.ValidationResult result = spv.isGlusterSupportedInDC ( ) ; return validate ( result ) ; } if ( ( storageDomain.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageType.POSIXFS ) ) { org.ovirt.engine.core.bll.ValidationResult result = spv.isPosixSupportedInDC ( ) ; return validate ( result ) ; } return true ; }
public void getDefaultSpmPriority ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; aQuery.asyncCallback.onSuccess ( aQuery.getModel ( ) , 5 ) ; }
public void detachCinderDomainFromPool ( final org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove ) { storagePoolIsoMapDao.remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( mapToRemove.getStorageId ( ) , mapToRemove.getStoragePoolId ( ) ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.snapshot ( vmId , disks , memory ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void getClusterServerMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
protected void executeCommand ( ) { if ( ( org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.Label label = labelDao.get ( org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId ( ) ) ; vmStaticDao.incrementDbGenerationForVms ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( label.getVms ( ) ) ) ; labelDao.remove ( org.ovirt.engine.core.bll.RemoveLabelCommand.getLabelId ( ) ) ; org.ovirt.engine.core.bll.RemoveLabelCommand.setSucceeded ( true ) ; } }
public java.lang.String getTaskMessage ( org.ovirt.engine.core.common.businessentities.Cluster cluster , org.ovirt.engine.core.common.job.StepEnum stepType , org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task ) { if ( task == null ) { return null ; } java.util.Map < java.lang.String , java.lang.String > values = getMessageMap ( cluster , task ) ; return org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage ( stepType , values ) ; }
public void clearTasks ( ) { synchronized ( _listTasks ) { java.util.ArrayList < org.ovirt.engine.core.bll.tasks.CommandAsyncTask > CurrentActionTypeTasks = getCurrentTasks ( ) ; for ( org.ovirt.engine.core.bll.tasks.CommandAsyncTask task : CurrentActionTypeTasks ) { if ( ( task.getLastTaskStatus ( ) . getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished ) ) { task.clearAsyncTask ( ) ; _listTasks.remove ( task.getVdsmTaskId ( ) ) ; } } } }
public void validVnicNotPlugged ( ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mockVnic ( true ) ; org.mockito.Mockito.when ( vnic.isPlugged ( ) ) . thenReturn ( false ) ; initHostWithOneVfsConfig ( java.util.Collections.singletonList ( vnic ) , 0 , true , false , false , false ) ; assertHostValid ( java.util.Collections.singletonList ( vnic ) ) ; }
public void vdspysGroupWithVirtGlusterNotSupported ( ) { createCommandWithGlusterEnabled ( ) ; org.mockito.Mockito.when ( vdsGroupDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; org.mockito.Mockito.when ( vdsGroupDao.getByName ( org.mockito.Matchers.anyString ( ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName ( ) ) ; mcr.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; mcr.mockConfigValue ( ConfigValues.GlusterSupport , org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.VERSION_1_1 , java.lang.Boolean.FALSE ) ; cpuExists ( ) ; allQueriesForVms ( ) ; canDoActionFailedWithReason ( EngineMessage.GLUSTER_NOT_SUPPORTED ) ; }
public void testDetachSuccess ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( ) ; setUpActionExpectations ( ActionType.DetachStorageConnectionFromStorageDomain , org.ovirt.engine.core.common.action.AttachDetachStorageConnectionParameters.class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ; javax.ws.rs.core.Response response = resource.remove ( ) ; assertEquals ( 200 , response.getStatus ( ) ) ; }
private void restoreOriginalValue ( final java.lang.String keyName , org.ovirt.engine.core.config.entity.ConfigKey originialValue ) throws java.lang.IllegalAccessException { config.getEngineConfigLogic ( ) . persist ( keyName , originialValue.getValue ( ) , originialValue.getVersion ( ) ) ; org.ovirt.engine.core.config.entity.ConfigKey currentConfigKey = config.getEngineConfigLogic ( ) . fetchConfigKey ( keyName , "general" ) ; org.junit.Assert.assertEquals ( originialValue.getValue ( ) , currentConfigKey.getValue ( ) ) ; }
protected java.lang.Object runQuery ( org.ovirt.engine.core.common.queries.QueryType queryType , org.ovirt.engine.core.common.queries.QueryParametersBase queryParams , java.lang.String sessionId ) { initQueryParams ( queryParams , sessionId ) ; org.ovirt.engine.core.common.queries.QueryReturnValue result = backend.runQuery ( queryType , queryParams ) ; return ( result != null ) && ( result.getSucceeded ( ) ) ? result.getReturnValue ( ) : null ; }
public static void getVmsRunningOnOrMigratingToVds ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetVmsRunningOnOrMigratingToVds , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain ( org.ovirt.engine.core.compat.Guid poolId , org.ovirt.engine.core.common.businessentities.StorageDomainType type , org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { java.lang.Integer statusNum = ( status == null ) ? null : status.getValue ( ) ; return getCallsHandler ( ) . executeRead ( "Getstorage_domain_by_type_storagePoolId_and_status" , org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance , getCustomMapSqlParameterSource ( ) . addValue ( "storage_pool_id" , poolId ) . addValue ( "storage_domain_type" , type.getValue ( ) ) . addValue ( "status" , statusNum ) ) ; }
public org.ovirt.engine.core.bll.ValidationResult notRenamingManagementNetwork ( org.ovirt.engine.core.common.businessentities.network.Network newNetwork ) { java.lang.String managementNetwork = org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork ( ) ; return ( network.getName ( ) . equals ( managementNetwork ) ) && ( ! ( newNetwork.getName ( ) . equals ( managementNetwork ) ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( skipFencingIfSDActive ? 1231 : 1237 ) ; result = ( prime * result ) + ( skipFencingIfConnectivityBroken ? 1231 : 1237 ) ; result = ( prime * result ) + ( hostsWithBrokenConnectivityThreshold ) ; return result ; }
private void endDefaultOperations ( ) { endUnlockOps ( ) ; if ( isTemplateVersion ( ) ) { java.lang.String jobId = org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.getInstance ( ) . scheduleAOneTimeJob ( this , "updateVmVersion" , new java.lang.Class [ 0 ] , new java.lang.Object [ 0 ] , 0 , java.util.concurrent.TimeUnit.SECONDS ) ; org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobIdMap.put ( org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters ( ) . getBaseTemplateId ( ) , jobId ) ; } }
public void testGetNotFound2 ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( asList ( getEntity ( 2 ) ) ) ; try { resource.get ( ) ; org.junit.Assert.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
private org.ovirt.engine.core.common.businessentities.network.IpV6Address createIpv6Address ( ) { org.ovirt.engine.core.common.businessentities.network.IpV6Address address = new org.ovirt.engine.core.common.businessentities.network.IpV6Address ( ) ; address.setAddress ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_ADDRESS ) ; address.setPrefix ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_PREFIX ) ; address.setGateway ( org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IPV6_GATEWAY ) ; address.setBootProtocol ( NetworkBootProtocol.STATIC_IP ) ; return address ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { super . eventRaised ( ev , sender , args ) ; if ( ( ev.matchesDefinition ( HasEntity.entityChangedEventDefinition ) ) && ( sender == ( getPath ( ) ) ) ) { getPathChangedEvent ( ) . raise ( this , EventArgs.EMPTY ) ; } else if ( ( ev.matchesDefinition ( HasEntity.entityChangedEventDefinition ) ) && ( sender == ( getOverride ( ) ) ) ) { override_EntityChanged ( args ) ; } }
private org.ovirt.engine.core.common.businessentities.VDS createServer ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String hostname , org.ovirt.engine.core.compat.Version version ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( serverId ) ; vds.setHostName ( hostname ) ; vds.setStatus ( VDSStatus.Up ) ; vds.setClusterCompatibilityVersion ( version ) ; return vds ; }
public javax.ws.rs.core.Response move ( org.ovirt.engine.api.model.Action action ) { validateParameters ( action , "storageDomain.id|name" ) ; org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId ( action ) ; org.ovirt.engine.api.model.Disk disk = get ( ) ; org.ovirt.engine.core.compat.Guid imageId = asGuid ( disk.getImageId ( ) ) ; org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId ( disk ) ; org.ovirt.engine.core.common.action.MoveDisksParameters params = new org.ovirt.engine.core.common.action.MoveDisksParameters ( java.util.Collections.singletonList ( new org.ovirt.engine.core.common.action.MoveDiskParameters ( imageId , sourceStorageDomainId , storageDomainId ) ) ) ; return doAction ( VdcActionType.MoveDisks , params , action ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.common.businessentities.Quota quota = getParameters ( ) . getQuota ( ) ; if ( quota.isDefault ( ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID ) ; return false ; } return ( ( validateQuotaNameIsUnique ( quota ) ) && ( validateQuotaStorageLimitation ( quota ) ) ) && ( validateQuotaClusterLimitation ( quota ) ) ; }
public void testInstanceOnlyOutput ( ) { java.lang.String expected = ( ( ( getClass ( ) . getSimpleName ( ) ) + ( ToStringBuilder.CLASS_NAME_SUFFIX ) ) + ( ToStringBuilder.ATTRIBUTES_LIST_PREFIX ) ) + ( ToStringBuilder.ATTRIBUTES_LIST_SUFFIX ) ; org.junit.jupiter.api.Assertions.assertEquals ( expected , org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance ( this ) . build ( ) ) ; }
public org.ovirt.engine.api.model.InstanceType update ( org.ovirt.engine.api.model.InstanceType incoming ) { org.ovirt.engine.api.model.InstanceType instanceType = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource.UpdateParametersProvider ( ) ) ; if ( instanceType != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , instanceType ) ; } return instanceType ; }
private void initSpmPriorities ( ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getMaxSpmPriority ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel ) ( target ) ) ; model.maxSpmPriority = ( ( java.lang.Integer ) ( returnValue ) ) ; initSpmPriorities1 ( ) ; } } ) ) ; }
public java.util.List < org.ovirt.engine.sdk.decorators.VMCdRom > list ( java.lang.Integer max ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; java.lang.String url = new org.ovirt.engine.sdk.utils.UrlBuilder ( ( ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + ( getName ( ) ) ) ) . add ( "max" , max , UrlParameterType.MATRIX ) . build ( ) ; return list ( url , org.ovirt.engine.sdk.entities.CdRoms.class , org.ovirt.engine.sdk.decorators.VMCdRom.class , headers ) ; }
public void onFailed ( ) { updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; log.debug ( "Removing ImageUpload id {}" , org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; imageTransferDao.remove ( org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.endWithFailure ( ) ; log.error ( "Failed to upload {} (command id '{}')" , getUploadDescription ( ) , org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId ( ) ) ; }
public void persistCommand ( org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity ) { commandsCache.put ( cmdEntity ) ; if ( cmdEntity.isCallBackEnabled ( ) ) { buildCmdHierarchy ( cmdEntity ) ; if ( ! ( cmdEntity.isCallBackNotified ( ) ) ) { cmdExecutor.addToCallBackMap ( cmdEntity ) ; } } }
protected void SetValue ( java.lang.String name , java.lang.String value , java.lang.String version ) { org.ovirt.engine.core.common.businessentities.VdcOption vdcOption = dbfacade.getVdcOptionDao ( ) . getByNameAndVersion ( name , version ) ; vdcOption.setoption_value ( value ) ; dbfacade.getVdcOptionDao ( ) . update ( vdcOption ) ; try { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get ( vdcOption.getoption_name ( ) ) . put ( version , org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.GetValue ( vdcOption ) ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat ( "Could not update option {0} in cache." , name ) ; } }
protected org.ovirt.engine.core.compat.Guid removeImage ( java.lang.String taskKey , org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters ) { org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder ( taskKey ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetValue = removeImage ( parameters ) ; if ( vdsRetValue.getSucceeded ( ) ) { org.ovirt.engine.core.compat.Guid guid = createTask ( taskId , vdsRetValue ) ; enclosingCommand.getTaskIdList ( ) . add ( guid ) ; return guid ; } else { enclosingCommand.deleteAsyncTaskPlaceHolder ( taskKey ) ; return ( vdsRetValue.getVdsError ( ) . getCode ( ) ) == ( org.ovirt.engine.core.common.errors.VdcBllErrors.ImageDoesNotExistInDomainError ) ? org.ovirt.engine.core.compat.Guid.Empty : null ; } }
public static void isSupportBridgesReportByVDSM ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . booleanValue ( ) : true ; } } ; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.SupportBridgesReportByVDSM ) ; tempVar.setVersion ( version ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigFromCache ( tempVar , aQuery ) ; }
public static void getGlusterSwiftServices ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterServerServicesByServerId , new org.ovirt.engine.core.common.queries.gluster.GlusterServiceQueryParameters ( serverId , org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT ) , aQuery ) ; }
public static void getGlusterBricksForServer ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterVolumeBricksByServerId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( serverId ) , aQuery ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity masterVolume = glusterVolumeDao.getById ( org.ovirt.engine.core.bll.gluster.GetNonEligibilityReasonsOfVolumeForGeoRepSessionQuery.getParameters ( ) . getId ( ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = glusterVolumeDao.getById ( org.ovirt.engine.core.bll.gluster.GetNonEligibilityReasonsOfVolumeForGeoRepSessionQuery.getParameters ( ) . getSlaveVolumeId ( ) ) ; org.ovirt.engine.core.bll.gluster.GetNonEligibilityReasonsOfVolumeForGeoRepSessionQuery.getQueryReturnValue ( ) . setReturnValue ( getNonEligibilityReasons ( masterVolume , slaveVolume ) ) ; }
protected boolean isStorageDomainNotInPool ( org.ovirt.engine.core.common.businessentities.storage_domains storageDomain ) { boolean returnValue = false ; if ( storageDomain != null ) { returnValue = getDbFacade ( ) . getStoragePoolIsoMapDao ( ) . getAllForStorage ( storageDomain.getId ( ) ) . isEmpty ( ) ; if ( ! returnValue ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL ) ; } } return returnValue ; }
private void persistTopology ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > reportedNics , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > dbNics , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > userConfiguredNics ) { final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl ( interfaceDao , reportedNics , dbNics , userConfiguredNics ) ; networkInterfacesPersister.persistTopology ( ) ; }
private void fillEngineConfigMap ( ) { engineConfigMap.setVersion ( parseOptionKey ( OptionKey.OPTION_VERSION ) ) ; engineConfigMap.setAlternateConfigFile ( parseOptionKey ( OptionKey.OPTION_CONFIG ) ) ; engineConfigMap.setAlternatePropertiesFile ( parseOptionKey ( OptionKey.OPTION_PROPERTIES ) ) ; engineConfigMap.setUser ( parseOptionKey ( OptionKey.OPTION_USER ) ) ; engineConfigMap.setAdminPassFile ( parseOptionKey ( OptionKey.OPTION_ADMINPASSFILE ) ) ; engineConfigMap.setOnlyReloadable ( parseOptionKey ( OptionKey.OPTION_ONLY_RELOADABLE ) ) ; engineConfigMap.setLogFile ( parseOptionKey ( OptionKey.OPTION_LOG_FILE ) ) ; engineConfigMap.setLogLevel ( parseOptionKey ( OptionKey.OPTION_LOG_LEVEL ) ) ; engineConfigMap.setLog4jConfig ( parseOptionKey ( OptionKey.OPTION_LOG4J_CONFIG ) ) ; }
private void addVmDynamic ( ) { org.ovirt.engine.core.common.businessentities.VmDynamic tempVar = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; tempVar.setId ( getVmId ( ) ) ; tempVar.setStatus ( VMStatus.ImageLocked ) ; tempVar.setVmHost ( "" ) ; tempVar.setVmIp ( "" ) ; tempVar.setVmFQDN ( "" ) ; tempVar.setAppList ( getParameters ( ) . getVm ( ) . getDynamicData ( ) . getAppList ( ) ) ; org.ovirt.engine.core.bll.ImportVmCommand.getVmDynamicDAO ( ) . save ( tempVar ) ; org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext ( ) . snapshotNewEntity ( tempVar ) ; }
public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesList ( org.ovirt.engine.core.compat.Guid serverId , java.lang.String [ ] serviceNames ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.glusterServicesGet ( serviceNames ) ; org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc ( serverId , xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { if ( ( modelProvider.getModel ( ) . getSelectedItem ( ) ) == null ) { getView ( ) . clear ( ) ; return ; } getView ( ) . edit ( modelProvider.getModel ( ) ) ; getView ( ) . displayVmOsImages ( true ) ; setupDisks ( modelProvider ) ; setupConsole ( modelProvider ) ; }
public void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void testClusterCorrectStoragePoolName ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > result = dao.getAllForStoragePool ( storagePool.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.Cluster group : result ) { org.junit.Assert.assertEquals ( storagePool.getName ( ) , group.getStoragePoolName ( ) ) ; } }
protected void endWithFailure ( ) { org.ovirt.engine.core.common.businessentities.Snapshot previouslyActiveSnapshot = getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVmId ( ) , SnapshotType.PREVIEW , SnapshotStatus.LOCKED ) ; getSnapshotDao ( ) . remove ( previouslyActiveSnapshot.getId ( ) ) ; getSnapshotDao ( ) . remove ( getSnapshotDao ( ) . getId ( org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVmId ( ) , SnapshotType.ACTIVE ) ) ; snapshotsManager.addActiveSnapshot ( previouslyActiveSnapshot.getId ( ) , org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm ( ) , previouslyActiveSnapshot.getMemoryVolume ( ) , org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getCompensationContext ( ) ) ; super . endWithFailure ( ) ; }
public void enableHaReservationCheck ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.EnableVdsLoadBalancing ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Start HA Reservation check" ) ; java.lang.Integer interval = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VdsHaReservationIntervalInMinutes ) ; org.ovirt.engine.core.di.Injector.get ( org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class ) . scheduleAFixedDelayJob ( this , "performHaResevationCheck" , new java.lang.Class [ ] { } , new java.lang.Object [ ] { } , interval , interval , java.util.concurrent.TimeUnit.MINUTES ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Finished HA Reservation check" ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc createVolumeContainer ( java.lang.String sdUUID , java.lang.String imgGUID , java.lang.String size , int volFormat , int diskType , java.lang.String volUUID , java.lang.String descr , java.lang.String srcImgGUID , java.lang.String srcVolUUID ) { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.createVolumeContainer ( sdUUID , imgGUID , size , volFormat , diskType , volUUID , descr , srcImgGUID , srcVolUUID ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; }
private void addVideoCardByDisplayType ( org.ovirt.engine.core.common.businessentities.DisplayType displayType ) { java.util.Map < java.lang.String , java.lang.Object > struct = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ; struct.put ( VdsProperties.Type , VmDeviceGeneralType.VIDEO.getValue ( ) ) ; struct.put ( VdsProperties.Device , displayType.getVmDeviceType ( ) . getName ( ) ) ; struct.put ( VdsProperties.SpecParams , org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getNewMonitorSpecParams ( ) ) ; struct.put ( VdsProperties.DeviceId , java.lang.String.valueOf ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ; devices.add ( struct ) ; }
public void validateWrongDiskImageTypeTemplate ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) , VmEntityType.TEMPLATE ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK.toString ( ) ) ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { getView ( ) . flush ( ) ; getView ( ) . getTestButton ( ) . getCommand ( ) . execute ( ) ; }
public void validateSucceeds ( ) { org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections.singletonList ( getStorageDevice ( "sda" ) ) , getStorageDevice ( "sdb" ) , org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough , 10 ) ) . when ( cmd ) . getParameters ( ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.jupiter.api.Assertions.assertTrue ( cmd.validate ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "" , query ) ; setUpEntityQueryExpectations ( QueryType.GetStorageDomainsByStoragePoolId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ ( ( NAMES.length ) - 1 ) ] } , setUpStorageDomains ( ) , failure ) ; }
public org.ovirt.engine.api.model.ReportedDevices list ( ) { org.ovirt.engine.api.model.ReportedDevices model = new org.ovirt.engine.api.model.ReportedDevices ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface device : getCollection ( ) ) { model.getReportedDevices ( ) . add ( addLinks ( org.ovirt.engine.api.restapi.types.ReportedDeviceMapper.map ( device , new org.ovirt.engine.api.model.ReportedDevice ( ) ) ) ) ; } return model ; }
public org.ovirt.engine.api.resource.SnapshotDiskResource getDiskSubResource ( java.lang.String id ) { return inject ( new org.ovirt.engine.api.restapi.resource.BackendSnapshotDiskResource ( id , this ) ) ; }
public static void getDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Disks:" , org.ovirt.engine.core.common.interfaces.SearchType.Disk ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( p.getvds_group_id ( ) . equals ( vm.getVdsGroupId ( ) ) ) && ( org.ovirt.engine.core.bll.RunVmCommandBase.hasMemoryToRunVM ( p , vm ) ) ) && ( org.ovirt.engine.core.bll.RunVmCommandBase.hasCpuToRunVM ( p , vm ) ) ; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext ( org.ovirt.engine.core.compat.Guid commandId ) { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext ( ) ; defaultContext.setCommandId ( commandId ) ; defaultContext.setCommandType ( getClass ( ) . getName ( ) ) ; defaultContext.setBusinessEntitySnapshotDAO ( getBusinessEntitySnapshotDAO ( ) ) ; defaultContext.setSnapshotSerializer ( org.ovirt.engine.core.utils.SerializationFactory.getSerializer ( ) ) ; return defaultContext ; }
public static void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
protected java.util.Map < java.lang.String , org.ovirt.engine.core.common.utils.Pair < java.lang.String , java.lang.String > > getExclusiveLocks ( ) { if ( ( getSourceVmFromDb ( ) ) == null ) { return null ; } return java.util.Collections.singletonMap ( getSourceVmFromDb ( ) . getId ( ) . toString ( ) , LockMessagesMatchUtil.VM ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel ) ( result.getState ( ) ) ) ; vmListModel.getWindow ( ) . stopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; if ( ( returnValueBase != null ) && ( returnValueBase.getSucceeded ( ) ) ) { vmListModel.cancel ( ) ; } }
protected void addStoragePermissionByQuotaMode ( java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permsList , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid StorageDomainId ) { org.ovirt.engine.core.common.businessentities.storage_pool storagePool = null ; if ( storagePoolId != null ) { storagePool = org.ovirt.engine.core.bll.CommandBase.getStoragePoolDAO ( ) . get ( storagePoolId ) ; if ( storagePool != null ) { if ( ( storagePool.getQuotaEnforcementType ( ) ) == ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) { permsList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( StorageDomainId , org.ovirt.engine.core.common.VdcObjectType.Storage , org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK ) ) ; } } } }
private org.ovirt.engine.core.common.businessentities.GraphicsDevice getGraphicsDevOfType ( org.ovirt.engine.core.common.businessentities.GraphicsType type ) { java.util.List < org.ovirt.engine.core.common.businessentities.GraphicsDevice > graphicsDevices = getGraphicsDevices ( ) ; for ( org.ovirt.engine.core.common.businessentities.GraphicsDevice dev : graphicsDevices ) { if ( ( dev.getGraphicsType ( ) ) == type ) { return dev ; } } return null ; }
protected void setImagesToModel ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model , java.util.List < java.lang.String > images ) { java.lang.String oldCdImage = model.getCdImage ( ) . getSelectedItem ( ) ; model.getCdImage ( ) . setItems ( images ) ; model.getCdImage ( ) . setSelectedItem ( ( oldCdImage != null ? oldCdImage : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( images ) ) ) ; }
public void getUsbPolicyUsbTypeNative ( ) { org.ovirt.engine.api.model.Usb usb = new org.ovirt.engine.api.model.Usb ( ) ; usb.setEnabled ( true ) ; usb.setType ( "native" ) ; org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.api.restapi.resource.utils.UsbResourceUtils.getUsbPolicy ( usb , vdsGroup ) , UsbPolicy.ENABLED_NATIVE ) ; }
public void deleteAsyncTaskPlaceHolder ( java.lang.String taskKey ) { org.ovirt.engine.core.compat.Guid taskId = taskKeyToTaskIdMap.remove ( taskKey ) ; if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( taskId ) ) ) { org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId ( taskId ) ; } }
public void setOptionsMap ( java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo > optionsMap ) { this . optionsMap = optionsMap ; getKeyList ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( getOptionsMap ( ) . keySet ( ) ) , getKeyList ( ) . getSelectedItem ( ) ) ; }
public < T > void mockConfigValue ( org.ovirt.engine.core.common.config.ConfigValues value , org.ovirt.engine.core.compat.Version version , T returnValue ) { mockConfigValue ( value , version.getValue ( ) , returnValue ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotPlugNic ( java.util.Map info ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.hotplugNic ( info ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected void executeQueryCommand ( ) { java.lang.String directoryName = org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getParameters ( ) . getDomain ( ) ; org.ovirt.engine.core.common.utils.ExternalId id = org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getParameters ( ) . getId ( ) ; org.ovirt.engine.core.authentication.Directory directory = org.ovirt.engine.core.authentication.DirectoryManager.getInstance ( ) . getDirectory ( directoryName ) ; org.ovirt.engine.core.authentication.DirectoryUser user = directory.findUser ( id ) ; org.ovirt.engine.core.bll.GetDirectoryUserByIdQuery.getQueryReturnValue ( ) . setReturnValue ( user ) ; }
private java.util.Set < org.ovirt.engine.core.compat.Guid > getStorageDomainsByDisks ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disks , boolean isFillStorageTodDiskMap ) { java.util.Set < org.ovirt.engine.core.compat.Guid > domainsList = new java.util.HashSet < > ( ) ; if ( disks != null ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disks ) { domainsList.addAll ( disk.getStorageIds ( ) ) ; if ( isFillStorageTodDiskMap ) { for ( org.ovirt.engine.core.compat.Guid storageDomainId : disk.getStorageIds ( ) ) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap ( storageDomainId , disk , storageToDisksMap ) ; } } } } return domainsList ; }
public boolean hasSpaceForSnapshots ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < java.lang.String > message ) { java.lang.Integer minSnapshotSize = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.InitStorageSparseSizeInGB ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.common.businessentities.storage_domains , java.lang.Integer > e : mapStorageDomainsToNumOfDisks ( vm ) . entrySet ( ) ) { if ( ! ( destinationHasSpace ( e.getKey ( ) , ( minSnapshotSize * ( e.getValue ( ) ) ) , message ) ) ) { return false ; } } return true ; }
protected void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) throws java.lang.Exception { setUpEntityQueryExpectations ( 2 ) ; setUriInfo ( setUpActionExpectations ( VdcActionType.RemoveNetwork , org.ovirt.engine.core.common.action.RemoveNetworkParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.networkId } , valid , success ) ) ; try { resource.remove ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void testVmsRule ( ) { org.ovirt.engine.api.model.AffinityGroup model = new org.ovirt.engine.api.model.AffinityGroup ( ) ; model.setEnforcing ( true ) ; model.setPositive ( false ) ; org.ovirt.engine.api.model.AffinityGroup entity = new org.ovirt.engine.api.model.AffinityGroup ( ) ; org.ovirt.engine.api.restapi.types.AffinityGroupMapper.map ( model , entity ) ; org.junit.jupiter.api.Assertions.assertEquals ( EntityAffinityRule.NEGATIVE , entity.getVmAffinityRule ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( entity.isVmEnforcing ( ) ) ; org.junit.jupiter.api.Assertions.assertTrue ( entity.isVmAffinityEnabled ( ) ) ; }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; if ( disk.isShareable ( ) ) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant ( org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants.shareable ( ) ) ; } return null ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > > aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SortListByNameConverter < > ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetClustersByStoragePoolId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , aQuery ) ; }
public void validateFailsForDeviceAlreadyInUse ( ) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice ( "sda" ) ; storageDevice.setCanCreateBrick ( false ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( HOST_ID , "brick1" , "/gluster-bricks/brick1" , org.ovirt.engine.core.common.businessentities.RaidType.RAID0 , null , null , java.util.Collections.singletonList ( storageDevice ) , getStorageDevice ( "sda" ) , org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough , 10 ) ) . when ( cmd ) . getParameters ( ) ; prepareMocks ( VDSStatus.Up ) ; org.junit.jupiter.api.Assertions.assertFalse ( cmd.validate ( ) ) ; }
public org.ovirt.engine.sdk.entities.Action setupnetworks ( org.ovirt.engine.sdk.entities.Action action ) throws java.io.IOException , org.apache.http.client.ClientProtocolException , org.ovirt.engine.sdk.exceptions.ServerException { java.lang.String url = ( ( this . parent.getHref ( ) ) + ( SLASH ) ) + "setupnetworks" ; java.util.List < org.apache.http.Header > headers = new org.ovirt.engine.sdk.utils.HttpHeaderBuilder ( ) . build ( ) ; url = new org.ovirt.engine.sdk.utils.UrlBuilder ( url ) . build ( ) ; return getProxy ( ) . action ( url , action , org.ovirt.engine.sdk.entities.Action.class , org.ovirt.engine.sdk.entities.Action.class , headers ) ; }
private void doTestBadRemove ( boolean valid , boolean success , java.lang.String detail ) { setUpGetTagExpectations ( true ) ; setUriInfo ( setUpActionExpectations ( ActionType.DetachVdsFromTag , org.ovirt.engine.core.common.action.AttachEntityToTagParameters.class , new java.lang.String [ ] { "TagId" , "EntitiesId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendHostTagResourceTest.TAG_ID , asList ( org.ovirt.engine.api.restapi.resource.BackendHostTagResourceTest.HOST_ID ) } , valid , success ) ) ; try { resource.remove ( ) ; org.junit.jupiter.api.Assertions.fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyFault ( wae , detail ) ; } }
public void testResolveCopy ( ) throws java.lang.Exception { setUriInfo ( setUpActionExpectations ( ActionType.UpdateGlusterHook , org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters.class , new java.lang.String [ ] { "HookId" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterHookResourceTest.hookId } ) ) ; org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action ( ) ; action.setResolutionType ( "copy" ) ; verifyActionResponse ( resource.resolve ( action ) ) ; }
public static void getNumberOfActiveVmsInCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId ) { if ( ( aQuery.converterCallback ) == null ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer.valueOf ( 0 ) ; } return source ; } } ; } org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetNumberOfActiveVmsInVdsGroupByVdsGroupId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( clusterId ) , aQuery ) ; }
protected void proceedProxyReturnValue ( ) { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus ( org.ovirt.engine.core.vdsbroker.irsbroker.ExtendStorageDomainVDSCommand.getReturnStatus ( ) ) ; switch ( returnStatus ) { case DeviceNotFound : org.ovirt.engine.core.vdsbroker.irsbroker.ExtendStorageDomainVDSCommand.getVDSReturnValue ( ) . setSucceeded ( false ) ; break ; default : super . proceedProxyReturnValue ( ) ; initializeVdsError ( returnStatus ) ; break ; } }
protected java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > doFilter ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskList , int osId , org.ovirt.engine.core.compat.Version clusterVersion ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > filteredDiskList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : diskList ) { if ( org.ovirt.engine.core.bll.validator.VmValidationUtils.isDiskInterfaceSupportedByOs ( osId , clusterVersion , disk.getDiskInterface ( ) ) ) { filteredDiskList.add ( disk ) ; } } return filteredDiskList ; }
protected void executeCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > rngDevices = getRngDevices ( ) ; java.util.Set < org.ovirt.engine.core.common.businessentities.VmDeviceId > idsToRemove = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice dev : rngDevices ) { idsToRemove.add ( dev.getId ( ) ) ; } vmDeviceDao.removeAll ( idsToRemove ) ; setSucceeded ( true ) ; }
public static java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > getModeSpecificEventNotificationTypeList ( ) { java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > subList = new java.util.ArrayList < org.ovirt.engine.core.common.EventNotificationEntity > ( ) ; for ( org.ovirt.engine.core.common.EventNotificationEntity entity : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetEventNotificationTypeList ( ) ) { if ( ( ( entity.getAvailableInModes ( ) ) & ( org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.UI_MODE.getValue ( ) ) ) > 0 ) { subList.add ( entity ) ; } } return subList ; }
public < T > T createLockingInstance ( T instance , java.lang.Class < T > interfaceClass , java.util.concurrent.locks.ReentrantReadWriteLock lock ) { java.util.Objects.requireNonNull ( instance ) ; return ( ( T ) ( java.lang.reflect.Proxy.newProxyInstance ( interfaceClass.getClassLoader ( ) , new java.lang.Class < ? > [ ] { interfaceClass } , new org.ovirt.engine.core.utils.lock.LockedObjectFactory.LockingInvocationHandler ( instance , lock ) ) ) ) ; }
public void onRefreshActiveModel ( org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent event ) { if ( ( getTimer ( ) . isActive ( ) ) || ( refreshOnInactiveTimer ( ) ) ) { if ( handleRefreshActiveModel ( event ) ) { syncSearch ( ) ; } if ( event.isDoFastForward ( ) ) { getTimer ( ) . fastForward ( ) ; } } }
public static void removeTaskFromDbByTaskId ( org.ovirt.engine.core.compat.Guid taskId ) { try { if ( ( org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.callRemoveTaskFromDbByTaskId ( taskId ) ) != 0 ) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.info ( "Removed task '{}' from DataBase" , taskId ) ; } } catch ( java.lang.RuntimeException e ) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.error ( "Removing task '{}' from DataBase threw an exception: {}" , taskId , e.getMessage ( ) ) ; org.ovirt.engine.core.bll.tasks.AsyncTaskManager.log.debug ( "Exception" , e ) ; } }
public static boolean isPublicKeyValid ( java.lang.String publicKey ) { java.lang.String [ ] words = publicKey.split ( "\\s+" , 3 ) ; if ( ( words.length ) < 2 ) { return false ; } if ( ! ( words [ 0 ] . matches ( "^[\\p{Alpha}\\p{Digit}-]*$" ) ) ) { return false ; } if ( ! ( org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isBase64 ( words [ 1 ] . getBytes ( java.nio.charset.Charset.forName ( "UTF-8" ) ) ) ) ) { return false ; } return true ; }
public static boolean isCommandAllowed ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.action.ActionType actionType ) { return ! ( ( ( vm.isHostedEngine ( ) ) && ( ! ( org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains ( actionType ) ) ) ) || ( ( vm.isExternalVm ( ) ) && ( ! ( org.ovirt.engine.core.common.validation.VmActionByVmOriginTypeValidator.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains ( actionType ) ) ) ) ) ; }
public void setUp ( ) throws java.lang.Exception { host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; final org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = new org.ovirt.engine.core.common.businessentities.VdsDynamic ( ) ; host.setDynamicData ( vdsDynamic ) ; bond = new org.ovirt.engine.core.common.businessentities.network.Bond ( ) ; bond.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.mockito.Mockito.when ( mockNetworkExclusivenessValidatorResolver.resolveNetworkExclusivenessValidator ( ) ) . thenReturn ( mockNetworkExclusivenessValidator ) ; org.mockito.Mockito.when ( mockNetworkAttachmentIpConfigurationValidator.validateNetworkAttachmentIpConfiguration ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( ValidationResult.VALID ) ; }
private java.lang.String getRootCollectionName ( java.lang.String period , java.lang.String [ ] periods , int i ) { java.lang.String collection = org.ovirt.engine.sdk.codegen.utils.StringUtils.toUpperCase ( org.ovirt.engine.sdk.codegen.utils.StringUtils.toPlural ( period ) ) ; java.lang.String collectionCandidate = getPublicCollection ( org.ovirt.engine.sdk.codegen.utils.StringUtils.toPlural ( period ) , periods , i , false ) ; if ( collectionCandidate != null ) { collection = collectionCandidate ; } return collection ; }
protected void verifyModel ( org.ovirt.engine.api.model.Bookmark model , int index ) { org.junit.jupiter.api.Assertions.assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( NAMES [ index ] , model.getName ( ) ) ; org.junit.jupiter.api.Assertions.assertEquals ( org.ovirt.engine.api.restapi.resource.BackendBookmarksResourceTest.VALUES [ index ] , model.getValue ( ) ) ; verifyLinks ( model ) ; }
public void getUnusedBricksFromServer ( org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery , org.ovirt.engine.core.compat.Guid hostId ) { asyncQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters ( hostId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetUnusedGlusterBricks , parameters , asyncQuery ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getDbUserDao ( ) ; vm = new org.ovirt.engine.core.compat.Guid ( "77296e00-0cad-4e5a-9299-008a7b6f4354" ) ; existingUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544a" ) ) ; deletableUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544b" ) ) ; newUser = new org.ovirt.engine.core.common.businessentities.DbUser ( ) ; newUser.setExternalId ( new org.ovirt.engine.core.common.utils.ExternalId ( new byte [ 0 ] ) ) ; newUser.setFirstName ( "Bob" ) ; newUser.setLastName ( "Milqtoste" ) ; newUser.setLoginName ( "newuser" ) ; newUser.setEmail ( "newuser@redhat.com" ) ; newUser.setDomain ( "domain" ) ; newUser.setGroupNames ( "groups" ) ; }
private boolean selectionContextChanged ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.ovirt.engine.core.common.businessentities.DisplayType vmDisplay = ( vm.isRunningOrPaused ( ) ) ? vm.getDisplayType ( ) : vm.getDefaultDisplayType ( ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleSelectionContext newContext = new org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleSelectionContext ( vm.getVmOsId ( ) , vmDisplay ) ; org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel selectedConsole = resolveUserSelectedConsoleModel ( vm.getId ( ) ) ; if ( selectedConsole == null ) { return true ; } return ! ( newContext.equals ( selectedConsole.getSelectionContext ( ) ) ) ; }
private void applyModeCustomizations ( ) { if ( ( org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode ( ) ) == ( org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly ) ) { spmTab.setVisible ( false ) ; powerManagementTab.setVisible ( false ) ; consoleTab.setVisible ( false ) ; networkProviderTab.setVisible ( false ) ; } }
public static boolean isAnyStorageDomainIsMasterAndActive ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > sdl ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : sdl ) { if ( ( ( ( a.getStorageDomainType ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) && ( ( a.getStatus ( ) ) != null ) ) && ( ( a.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) { return true ; } } return false ; }
private static java.lang.String getFieldName ( org.ovirt.engine.core.common.businessentities.StorageServerConnections paramConnection ) { java.lang.String fieldName ; if ( paramConnection.getStorageType ( ) . equals ( StorageType.ISCSI ) ) { fieldName = "address" ; } else if ( paramConnection.getStorageType ( ) . isFileDomain ( ) ) { fieldName = "path" ; } else { fieldName = "connection" ; } return fieldName ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > mapHosts ( java.util.List < org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost > foremanHosts ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList ( foremanHosts.size ( ) ) ; for ( org.ovirt.engine.core.bll.host.provider.foreman.ForemanHost foremanHost : foremanHosts ) { org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; host.setVdsName ( foremanHost.getName ( ) ) ; host.setHostName ( foremanHost.getName ( ) ) ; hosts.add ( host ) ; } return hosts ; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createDiskImage ( boolean active ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage di = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; di.setActive ( true ) ; di.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setParentId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; di.setImageStatus ( ImageStatus.OK ) ; return di ; }
public static void GetLocalStorageHost ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String dataCenterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) { return item ; } } return null ; } } ; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "hosts: datacenter=" + dataCenterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , sp , aQuery ) ; }
public java.lang.Void runInTransaction ( ) { addVmStatic ( ) ; addVmDynamic ( ) ; addVmNetwork ( ) ; addVmNumaNodes ( ) ; addVmStatistics ( ) ; addActiveSnapshot ( ) ; addVmPermission ( ) ; addVmInit ( ) ; addVmRngDevice ( ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public void canDoActionNotEnoughSpace ( ) throws java.lang.Exception { initializeCommand ( ImageOperation.Move ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidatorWithoutSpace ( ) ) . when ( command ) . createStorageDomainValidator ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
private void commitLabelChanges ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > srcIfaces , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface dstIface ) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.moveLabels ( srcIfaces , dstIface ) ; }
public void isSoundcardEnabled ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetSoundDevices , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public void canDoActionVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown ( ) { createParameters ( ) ; initDiskImage ( diskImageGroupId , diskImageId ) ; initVm ( VMStatus.Up , org.ovirt.engine.core.compat.Guid.newGuid ( ) , diskImageGroupId ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN ) ) . when ( diskValidator ) . isDiskPluggedToVmsThatAreNotDown ( org.mockito.Matchers.anyBoolean ( ) , org.mockito.Matchers.anyList ( ) ) ; org.junit.Assert.assertFalse ( command.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN.name ( ) ) ) ; }
public void mapVmWatchdog ( ) { org.ovirt.engine.core.common.businessentities.VmWatchdog entity = new org.ovirt.engine.core.common.businessentities.VmWatchdog ( ) ; entity.setAction ( VmWatchdogAction.RESET ) ; entity.setModel ( VmWatchdogType.i6300esb ) ; entity.setId ( Guid.Empty ) ; org.ovirt.engine.api.model.Watchdog model = org.ovirt.engine.api.restapi.types.WatchdogMapper.map ( entity , null ) ; org.junit.Assert.assertNotNull ( model ) ; org.junit.Assert.assertEquals ( model.getAction ( ) , WatchdogAction.RESET ) ; org.junit.Assert.assertEquals ( model.getModel ( ) , WatchdogModel.I6300ESB ) ; }
static java.lang.String resolveMessage ( java.lang.String message , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable ) { java.lang.String returnValue = message ; if ( logable != null ) { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getAvailableValues ( logable ) ; returnValue = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resolveMessage ( message , map ) ; } return returnValue ; }
public static void getLunsByVgId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String vgId , org.ovirt.engine.core.compat.Guid vdsId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters params = new org.ovirt.engine.core.common.queries.GetLunsByVgIdParameters ( vgId , vdsId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetLunsByVgId , params , aQuery ) ; }
public static void GetAllAttachableDisks ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; } } ; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks ( storagePoolId ) ; params.setVmId ( vmId ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllAttachableDisks , params , aQuery ) ; }
private void setSelectedVncImpl ( ) { org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel vncConsoleModel = model.getVmConsoles ( ) . getConsoleModel ( org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel.class ) ; if ( vncConsoleModel == null ) { return ; } if ( noVncImplRadioButton.asRadioButton ( ) . getValue ( ) ) { vncConsoleModel.setVncImplementation ( VncConsoleModel.ClientConsoleMode.NoVnc ) ; } else { vncConsoleModel.setVncImplementation ( VncConsoleModel.ClientConsoleMode.Native ) ; } }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { if ( ! ( items.isEmpty ( ) ) ) { org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel , org.ovirt.engine.ui.webadmin.widget.host.HostProxySourceWidget > modelWidgetPair = items.get ( ( ( items.size ( ) ) - 1 ) ) ; getEntry ( modelWidgetPair.getSecond ( ) ) . removeLastButton ( ) ; } org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel , org.ovirt.engine.ui.webadmin.widget.host.HostProxySourceWidget > item = addGhostEntry ( ) ; onAdd ( item.getFirst ( ) , item.getSecond ( ) ) ; item.getFirst ( ) . edit ( listModel ) ; }
private static void setRngSupportedSourcesToVds ( org.ovirt.engine.core.common.businessentities.VDS vds , java.util.Map < java.lang.String , java.lang.Object > xmlRpcStruct ) { vds.getSupportedRngSources ( ) . clear ( ) ; java.lang.String rngSourcesFromStruct = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignStringValueFromArray ( xmlRpcStruct , VdsProperties.rngSources ) ; if ( rngSourcesFromStruct != null ) { vds.getSupportedRngSources ( ) . addAll ( org.ovirt.engine.core.common.businessentities.VmRngDevice.csvToSourcesSet ( rngSourcesFromStruct.toUpperCase ( ) ) ) ; } }
public void setCustomValuesOverridesExistingValues ( ) { final java.lang.String key = "foo" ; b.appendCustomValue ( key , "test value" , null ) ; doSetCustomValuesTest ( b , key ) ; }
public void Template_SelectedItemChanged ( ) { super . Template_SelectedItemChanged ( ) ; org.ovirt.engine.core.common.businessentities.VmTemplate template = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . getTemplate ( ) . getSelectedItem ( ) ) ) ; if ( template == null ) { return ; } setupWindowModelFrom ( template ) ; updateHostPinning ( template.getMigrationSupport ( ) ) ; doChangeDefautlHost ( template.getDedicatedVmForVds ( ) ) ; }
private void updateRemoveDisksCheckBox ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model , boolean deleteDisks , boolean isChangable , java.lang.String changeProhibitionReason ) { model.setEntity ( deleteDisks ) ; if ( ( ! isChangable ) && ( changeProhibitionReason != null ) ) { model.setChangeProhibitionReason ( changeProhibitionReason ) ; } model.setIsChangeable ( isChangable ) ; }
public void testCombine ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( "/foo/bar" , org.ovirt.engine.api.utils.LinkCreator.combine ( "/foo" , "bar" ) ) ; org.junit.Assert.assertEquals ( "/foo/bar" , org.ovirt.engine.api.utils.LinkCreator.combine ( "/foo/" , "bar" ) ) ; org.junit.Assert.assertEquals ( "/foo/bar" , org.ovirt.engine.api.utils.LinkCreator.combine ( "/foo/" , "/bar" ) ) ; org.junit.Assert.assertEquals ( "/foo/bar" , org.ovirt.engine.api.utils.LinkCreator.combine ( "/foo" , "/bar" ) ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot ( java.lang.String vmId , java.util.Map < java.lang.String , java.lang.String > [ ] disks , java.lang.String memory , boolean frozen ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.snapshot ( vmId , disks , memory , frozen ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
public org.ovirt.engine.core.common.businessentities.network.NetworkQoS flush ( ) { super . flush ( ) ; networkQoS.setName ( getName ( ) . getEntity ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > selectedDataCenters = getDataCenters ( ) . getSelectedObjects ( ) ; if ( ! ( selectedDataCenters.isEmpty ( ) ) ) { networkQoS.setStoragePoolId ( selectedDataCenters.get ( 0 ) . getId ( ) ) ; } return networkQoS ; }
private void handleFinalizingSuccess ( final org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand < T > . StateContext context ) { log.info ( "Finalizing successful upload to {}" , getUploadDescription ( ) ) ; if ( stopImageTransferSession ( context.entity ) ) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId ( ) ; if ( verifyImage ( transferingVdsId ) ) { setVolumeLegalityInStorage ( org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.LEGAL_IMAGE ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.unLockImage ( ) ; updateEntityPhase ( ImageTransferPhase.FINISHED_SUCCESS ) ; } else { setImageStatus ( ImageStatus.ILLEGAL ) ; updateEntityPhase ( ImageTransferPhase.FINALIZING_FAILURE ) ; } } }
public void testNetworkExistWhenOnlyNetworkIdIsSet ( ) { org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment ( ) ; networkAttachment.setNetworkId ( networkId ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( networkAttachment ) ; org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_HAVING_ID_NOT_EXISTS ; org.junit.Assert.assertThat ( validator.networkExists ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( engineMessage , org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString ( engineMessage , networkId.toString ( ) ) ) ) ; }
private void ApplySearchPageSize ( int value ) { model.setSearchPageSize ( value ) ; if ( ( searchRequested ) && ( ! ( model.getTimer ( ) . isActive ( ) ) ) ) { model.getSearchCommand ( ) . Execute ( ) ; } model.UpdatePagingAvailability ( ) ; }
public void getVmDiskList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllDisksByVmId , params , aQuery ) ; }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool ( ) { return poolPerDc.poolForDataCenter ( getStoragePoolId ( ) ) ; }
public void validateIsoPrefixNameForKernelAndNullForInitrd ( ) throws java.lang.Exception { java.lang.String kernel = "kernel" ; org.ovirt.engine.core.common.businessentities.VM vm = createVmForTesting ( null , ( ( RunVmCommand.ISO_PREFIX ) + kernel ) ) ; org.junit.Assert.assertEquals ( vm.getInitrdUrl ( ) , null ) ; org.junit.Assert.assertEquals ( vm.getKernelUrl ( ) , ( ( ( org.ovirt.engine.core.bll.RunVmCommandTest.ACTIVE_ISO_PREFIX ) + "/" ) + kernel ) ) ; }
public void validateSlaveHasNoLabelsHasNoOldNorNewLabelsValid ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slave = createNic ( "slave" ) ; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder ( ) . addExistingInterfaces ( slave ) . build ( ) ; org.hamcrest.MatcherAssert.assertThat ( validator.validateSlaveHasNoLabels ( slave.getName ( ) ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void testBusyDomainInList ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status ) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase ( ) ; org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand < org.ovirt.engine.core.common.action.StoragePoolParametersBase > cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand ( param ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; tempStorageDomains.setStatus ( status ) ; domainsList.add ( tempStorageDomains ) ; org.junit.Assert.assertFalse ( cmd.validateDomainsInMaintenance ( domainsList ) ) ; }
public void testListGlobalLimit ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quota = getQuota ( ) ; quota.setGlobalQuotaCluster ( getClusterGlobalCpuLimit ( ) ) ; setUpGetEntityExpectations ( quota ) ; control.replay ( ) ; org.ovirt.engine.api.model.QuotaClusterLimits clusterLimits = collection.list ( ) ; assertClusterLimitsFound ( clusterLimits , 1 ) ; org.ovirt.engine.api.model.QuotaClusterLimit clusterLimit = clusterLimits.getQuotaClusterLimits ( ) . get ( 0 ) ; assertEquals ( clusterLimit.getVcpuLimit ( ) . intValue ( ) , 20 ) ; }
private java.util.List < org.ovirt.engine.api.model.Agent > getPowerManagementAgents ( org.ovirt.engine.api.model.Version version ) { java.lang.String fenceMapping = getConfigurationValue ( ConfigurationValues.VdsFenceOptionMapping , version ) ; java.lang.String fenceTypes = getConfigurationValueDefault ( ConfigurationValues.VdsFenceOptionTypes ) ; if ( ( fenceMapping != null ) && ( fenceTypes != null ) ) { return org.ovirt.engine.api.restapi.util.FenceOptionsParser.parse ( fenceMapping , fenceTypes ) ; } return java.util.Collections.emptyList ( ) ; }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.common.config.ConfigValues defaultTimeZoneConfigKey ; switch ( org.ovirt.engine.core.bll.GetDefaultTimeZoneQuery.getParameters ( ) . getTimeZoneType ( ) ) { default : case GENERAL_TIMEZONE : defaultTimeZoneConfigKey = org.ovirt.engine.core.common.config.ConfigValues.DefaultGeneralTimeZone ; break ; case WINDOWS_TIMEZONE : defaultTimeZoneConfigKey = org.ovirt.engine.core.common.config.ConfigValues.DefaultWindowsTimeZone ; break ; } java.lang.String timeZone = org.ovirt.engine.core.common.config.Config.< java.lang.String > GetValue ( defaultTimeZoneConfigKey ) ; org.ovirt.engine.core.bll.GetDefaultTimeZoneQuery.getQueryReturnValue ( ) . setReturnValue ( timeZone ) ; }
private void commonSave ( boolean allNetworksAllowed ) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig newConfig = new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig ( ) ; newConfig.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newConfig.setNicId ( FixturesTool.VDS_NETWORK_INTERFACE_WITHOUT_QOS ) ; newConfig.setAllNetworksAllowed ( allNetworksAllowed ) ; if ( ! allNetworksAllowed ) { addNetworks ( newConfig ) ; addLabels ( newConfig ) ; } dao.save ( newConfig ) ; org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig result = dao.get ( newConfig.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; assertHostNicVfsConfigEquals ( newConfig , result ) ; }
private void doTestNetworkIpAddressWasSameAsHostnameAndChangedForBootProtocol ( org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol bootProtocol ) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration ( bootProtocol , null , null ) ; org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator ( attachment ) ; org.ovirt.engine.core.bll.ValidationResult actual = validator.networkIpAddressWasSameAsHostnameAndChanged ( null ) ; org.junit.Assert.assertThat ( actual , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void setUpEntityQueryExpectations ( int index , boolean notFound ) throws java.lang.Exception { setUpGetEntityExpectations ( VdcQueryType.GetDirectoryGroupById , org.ovirt.engine.core.common.queries.DirectoryIdQueryParameters.class , new java.lang.String [ ] { "Domain" , "Id" } , new java.lang.Object [ ] { DOMAIN , new java.lang.String ( javax.xml.bind.DatatypeConverter.parseHexBinary ( EXTERNAL_IDS [ index ] ) , java.nio.charset.Charset.forName ( "UTF-8" ) ) } , ( notFound ? null : getEntity ( index ) ) ) ; }
public void getStorageDomainsByConnection ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , java.lang.String connectionPath ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters param = new org.ovirt.engine.core.common.queries.GetStorageDomainsByConnectionParameters ( ) ; param.setConnection ( connectionPath ) ; if ( storagePoolId != null ) { param.setStoragePoolId ( storagePoolId ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageDomainsByConnection , param , aQuery ) ; }
public java.lang.String toString ( ) { java.lang.StringBuilder builder = new java.lang.StringBuilder ( ) ; builder.append ( "\n" ) ; builder.append ( super . toString ( ) ) ; builder.append ( "\n" ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcObjectDescriptor.toStringBuilder ( mStoragePoolInfo , builder ) ; org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcObjectDescriptor.toStringBuilder ( mDomainsList , builder ) ; return builder.toString ( ) ; }
public javax.ws.rs.core.Response add ( final org.ovirt.engine.api.model.HostDevice hostDevice ) { validateParameters ( hostDevice , "id|name" ) ; java.lang.String deviceName = hostDevice.getName ( ) ; if ( hostDevice.isSetId ( ) ) { deviceName = org.ovirt.engine.api.restapi.utils.HexUtils.hex2string ( hostDevice.getId ( ) ) ; } return performCreate ( ActionType.AddVmHostDevices , new org.ovirt.engine.core.common.action.VmHostDevicesParameters ( vmId , deviceName ) , new org.ovirt.engine.api.restapi.resource.BackendVmHostDevicesResource.DeviceNameResolver ( deviceName ) ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel ) ( sender ) ) ; java.lang.String propertyName = args.propertyName ; if ( "BootProtocolsAvailable" . equals ( propertyName ) ) { enableDisableByBootProtocol ( model ) ; } }
public void restoreFixtures ( ) { java.util.Iterator < org.ovirt.engine.core.common.businessentities.VmStatic > vmStaticIterator = vmStatics.iterator ( ) ; while ( vmStaticIterator.hasNext ( ) ) { dbFacade.getVmStaticDao ( ) . update ( vmStaticIterator.next ( ) ) ; } }
public boolean isEnabled ( java.util.List < T > selectedItems ) { return org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunctionResultHelper.invokeAndGetResultAsBoolean ( actionButtonInterface.isEnabled ( ) , org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject.arrayFrom ( selectedItems ) , null , true ) ; }
public void testGet ( ) throws java.lang.Exception { org.ovirt.engine.api.resource.StorageResource subresource = collection.getStorageResource ( GUIDS [ org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.SINGLE_STORAGE_IDX ] . toString ( ) ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpQueryExpectations ( "" , null ) ; verifyModel ( subresource.get ( ) , org.ovirt.engine.api.restapi.resource.BackendHostStorageResourceTest.SINGLE_STORAGE_IDX ) ; }
private void buildSmartcardDevice ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice ( vm.getId ( ) , VmDeviceGeneralType.SMARTCARD , VmDeviceType.SMARTCARD.getName ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices ) { java.util.Map < java.lang.String , java.lang.Object > struct = new java.util.HashMap < > ( ) ; struct.put ( VdsProperties.Type , vmDevice.getType ( ) . getValue ( ) ) ; struct.put ( VdsProperties.Device , vmDevice.getDevice ( ) ) ; addDevice ( struct , vmDevice , null ) ; } }
public void addNotEmptyIdConnection ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection ( "multipass.my.domain.tlv.company.com:/export/allstorage/data1" , StorageType.POSIXFS , "nfs" , "timeo=30" ) ; newPosixConnection.setid ( org.ovirt.engine.core.compat.Guid.newGuid ( ) . toString ( ) ) ; parameters.setStorageServerConnection ( newPosixConnection ) ; parameters.setVdsId ( Guid.Empty ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . isConnWithSameDetailsExists ( newPosixConnection ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY ) ; }
public void testUpdateVdsGroupsProps ( ) { org.junit.Assert.assertNotSame ( "pc-1.2.3" , existingVdsGroup.getEmulatedMachine ( ) ) ; existingVdsGroup.setEmulatedMachine ( "pc-1.2.3" ) ; dao.update ( existingVdsGroup ) ; org.junit.Assert.assertEquals ( "pc-1.2.3" , existingVdsGroup.getEmulatedMachine ( ) ) ; existingVdsGroup.setDetectEmulatedMachine ( true ) ; dao.update ( existingVdsGroup ) ; org.junit.Assert.assertEquals ( true , existingVdsGroup.isDetectEmulatedMachine ( ) ) ; }
public void testGet ( ) { newVdsInterface.setVdsId ( org.ovirt.engine.core.dao.InterfaceDAOTest.VDS_ID ) ; dao.saveInterfaceForVds ( newVdsInterface ) ; dao.saveStatisticsForVds ( newVdsInterface.getStatistics ( ) ) ; org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao.get ( newVdsInterface.getId ( ) ) ; org.junit.Assert.assertEquals ( newVdsInterface , result ) ; }
protected void executeQueryCommand ( ) { java.util.Map < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > templateMap = org.ovirt.engine.core.bll.GetVmTemplatesByImageGuidQuery.getDbFacade ( ) . getVmTemplateDao ( ) . getAllForImage ( org.ovirt.engine.core.bll.GetVmTemplatesByImageGuidQuery.getParameters ( ) . getId ( ) ) ; if ( ! ( templateMap.values ( ) . isEmpty ( ) ) ) { updateDisksFromDb ( templateMap.values ( ) . iterator ( ) . next ( ) ) ; } org.ovirt.engine.core.bll.GetVmTemplatesByImageGuidQuery.getQueryReturnValue ( ) . setReturnValue ( templateMap ) ; }
private void UpdateCanSpecify ( ) { org.ovirt.engine.core.common.businessentities.network network = ( ( org.ovirt.engine.core.common.businessentities.network ) ( getNetwork ( ) . getSelectedItem ( ) ) ) ; boolean isChangable = getIsStaticAddress ( ) ; getAddress ( ) . setIsChangable ( isChangable ) ; getSubnet ( ) . setIsChangable ( isChangable ) ; }
public void testAddExistingSuccessfully ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain ( ) . getStorageStaticData ( ) ; org.mockito.Mockito.doReturn ( new org.ovirt.engine.core.common.utils.Pair ( sdStatic , sdStatic.getId ( ) ) ) . when ( command ) . executeHSMGetStorageDomainInfo ( org.mockito.ArgumentMatchers.any ( ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; command.executeCommand ( ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getSucceeded ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValueObj ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValueObj ) ) ; allNics = returnValue.getReturnValue ( ) ; queryNetworkAttachments ( ) ; }
public java.lang.String toString ( ) { final java.lang.String TEST_SUCCEEDED = "Test Succeeded, " ; final java.lang.String TEST_FAILED = "Test Failed, " ; return getIsSucceeded ( ) ? TEST_SUCCEEDED + ( getStatus ( ) ) : TEST_FAILED + ( getMessage ( ) ) ; }
public void getDataCentersByStorageDomain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid storageDomainId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStoragePoolsByStorageDomainId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( storageDomainId ) , aQuery ) ; }
public static void execute ( java.lang.Runnable command ) { try { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.es.submit ( new org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.InternalWrapperRunnable ( command , org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getCorrelationId ( ) ) ) ; } catch ( java.util.concurrent.RejectedExecutionException e ) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn ( "The thread pool is out of limit. A submitted task was rejected" ) ; throw e ; } }
private org.ovirt.engine.core.common.businessentities.StorageDomain prepareStorageDomainForElection ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = createDataStorageDomain ( status , name , HE_SD_ID ) ; org.mockito.Mockito.when ( storageDomainDao.getAllForStoragePool ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( java.util.Collections.singletonList ( domain ) ) ; cmd.setStoragePool ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return domain ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.VM model = new org.ovirt.engine.api.model.VM ( ) ; model.setName ( NAMES [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "VM" , "add" , "cluster.id|name" ) ; } }
public org.ovirt.engine.ui.common.widget.HasUiCommandClickHandlers addFooterButton ( java.lang.String label , java.lang.String uniqueId ) { org.ovirt.engine.ui.common.widget.AbstractUiCommandButton button = createCommandButton ( label , uniqueId ) ; org.ovirt.engine.ui.common.view.popup.AbstractModelBoundPopupView.asWidget ( ) . addFooterButton ( button ) ; button.asWidget ( ) . getElement ( ) . setId ( org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId ( elementId , uniqueId ) ) ; return button ; }
protected void actualSave ( ) { flush ( ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( action , new org.ovirt.engine.core.common.action.ProviderParameters ( provider ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { if ( ( ( result.getReturnValue ( ) ) == null ) || ( ! ( result.getReturnValue ( ) . getSucceeded ( ) ) ) ) { return ; } sourceListModel.getSearchCommand ( ) . execute ( ) ; cancel ( ) ; } } ) ; }
protected void onReveal ( ) { super . onReveal ( ) ; if ( hasSelection ( ) ) { clearSelection ( ) ; } else { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible ( false ) ; } getTable ( ) . resetScrollPosition ( ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity ) ) { return false ; } org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity other = ( ( org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity ) ( obj ) ) ; return ( super . equals ( obj ) ) && ( java.util.Objects.equals ( commandId , other.commandId ) ) ; }
public org.ovirt.engine.api.model.NIC update ( org.ovirt.engine.api.model.NIC resource ) { validateParameters ( resource , requiredUpdateFields ) ; org.ovirt.engine.core.common.businessentities.network.Network network = findNetwork ( resource ) ; if ( network != null ) { resource.getNetwork ( ) . setName ( network.getName ( ) ) ; resource.getNetwork ( ) . setId ( null ) ; } return performUpdate ( resource , entityResolver , updateType , updateParametersProvider ) ; }
public org.ovirt.engine.core.common.businessentities.storage.VolumeClassification deleteVolumeByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk.getVolumeClassification ( ) ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { deleteVolume ( cinderDisk ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { deleteSnapshot ( cinderDisk.getImageId ( ) ) ; } else { org.ovirt.engine.core.bll.storage.CinderBroker.log.error ( "Error, could not determine Cinder entity {} with id {} from Cinder provider." , cinderDisk.getDiskAlias ( ) , cinderDisk.getImageId ( ) ) ; } return cinderVolumeType ; }
private java.util.List < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActionsImpl ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , boolean isInternal , boolean isRunOnlyIfAllValidationPass , boolean isWaitForResult , org.ovirt.engine.core.bll.context.CommandContext commandContext ) { org.ovirt.engine.core.bll.MultipleActionsRunner runner = multipleActionsRunnersFactory.createMultipleActionsRunner ( actionType , parameters , isInternal , commandContext ) ; runner.setIsRunOnlyIfAllValidatePass ( isRunOnlyIfAllValidationPass ) ; runner.setIsWaitForResult ( isWaitForResult ) ; return runner.execute ( ) ; }
public void filterUnSelectableModels ( ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > filterredItems = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > ( ) ; java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > items = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > cast ( getModel ( ) . getItems ( ) ) ; for ( org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model : items ) { if ( ( ( org.ovirt.engine.ui.uicommonweb.models.Model ) ( model ) ) . getIsSelectable ( ) ) { filterredItems.add ( model ) ; } } getModel ( ) . getAvailableStorageItems ( ) . setItems ( filterredItems ) ; }
private void executeFenceVdsManulalyAction ( final org.ovirt.engine.core.compat.Guid vdsId , java.lang.String sessionId ) { org.ovirt.engine.core.common.action.FenceVdsManualyParameters fenceVdsManuallyParams = new org.ovirt.engine.core.common.action.FenceVdsManualyParameters ( false ) ; fenceVdsManuallyParams.setStoragePoolId ( org.ovirt.engine.core.bll.RestartVdsCommand.getVds ( ) . getStoragePoolId ( ) ) ; fenceVdsManuallyParams.setVdsId ( vdsId ) ; fenceVdsManuallyParams.setSessionId ( sessionId ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.FenceVdsManualy , fenceVdsManuallyParams ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = ( prime * result ) + ( ( id.tagId ) == null ? 0 : id.tagId.hashCode ( ) ) ; result = ( prime * result ) + ( ( id.vmId ) == null ? 0 : id.vmId.hashCode ( ) ) ; result = ( prime * result ) + ( ( defaultDisplayType ) == null ? 0 : defaultDisplayType.hashCode ( ) ) ; return result ; }
public void updateTasksInCluster ( ) { org.mockito.Mockito.doReturn ( getTasks ( ) ) . when ( provider ) . getTaskListForCluster ( org.ovirt.engine.core.bll.gluster.GlusterTasksSyncJobTest.CLUSTER_GUIDS [ 1 ] ) ; prepareMocks ( ) ; tasksSyncJob.updateGlusterAsyncTasks ( ) ; org.mockito.Mockito.verify ( taskUtils , org.mockito.Mockito.times ( 2 ) ) . updateSteps ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public boolean hasSpaceForSnapshots ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < java.lang.String > message ) { java.lang.Integer minSnapshotSize = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > GetValue ( ConfigValues.InitStorageSparseSizeInGB ) ; for ( java.util.Map.Entry < org.ovirt.engine.core.common.businessentities.StorageDomain , java.lang.Integer > e : mapStorageDomainsToNumOfDisks ( vm ) . entrySet ( ) ) { if ( ! ( destinationHasSpace ( e.getKey ( ) , ( minSnapshotSize * ( e.getValue ( ) ) ) , message ) ) ) { return false ; } } return true ; }
protected boolean validate ( ) { if ( ! ( org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters ( ) . isSkipDomainChecks ( ) ) ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getStorageDomain ( ) ) ; return ( validate ( storageDomainValidator.isDomainExistAndActive ( ) ) ) && ( validate ( storageDomainValidator.isDataDomain ( ) ) ) ; } return true ; }
public void configure ( org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { spice.getOptions ( ) . setAdminConsole ( getSpiceAdminConsole ( ) ) ; spice.getOptions ( ) . setUsbFilter ( getUsbFilter ( ) ) ; updateSpiceUsbAutoShare ( spice ) ; updateSpiceFullScreenDefault ( spice ) ; }
private java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > sortTemplates ( java.util.Collection < org.ovirt.engine.core.common.businessentities.VmTemplate > value ) { if ( value == null ) { return null ; } final java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > sortedValues = new java.util.ArrayList ( value ) ; java.util.Collections.sort ( sortedValues , new org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalTemplateListModel.TemplateComparator ( ) ) ; return sortedValues ; }
private boolean validateDestStorage ( org.ovirt.engine.core.compat.Guid imageId , org.ovirt.engine.core.compat.Guid destDomainId ) { org.ovirt.engine.core.bll.validator.StorageDomainValidator validator = getValidator ( destDomainId , org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePoolId ( ) ) ; return ( validate ( validator.isDomainExistAndActive ( ) ) ) && ( validate ( validator.domainIsValidDestination ( ) ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.Quota > quotas ) { quotas = ( quotas != null ) ? quotas : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Quota > ( ) ; getStorageQuota ( ) . setItems ( quotas ) ; getStorageQuota ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( quotas ) ) ; }
public void getNetworkLabelsByDataCenterId ( org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.ui.frontend.AsyncQuery query ) { query.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.util.SortedSet < java.lang.String > > ( ) { @ java.lang.Override public java.util.SortedSet < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery ) { java.util.SortedSet < java.lang.String > sortedSet = new java.util.TreeSet ( new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator ( ) ) ; sortedSet.addAll ( ( ( java.util.Collection < java.lang.String > ) ( returnValue ) ) ) ; return sortedSet ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetNetworkLabelsByDataCenterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( dataCenterId ) , query ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { getCommonPassword ( ) . setIsChangable ( getUseCommonPassword ( ) . getEntity ( ) ) ; getApplyPasswordCommand ( ) . setIsExecutionAllowed ( getUseCommonPassword ( ) . getEntity ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.DbGroup mapRow ( final java.sql.ResultSet rs , final int rowNum ) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.DbGroup entity = new org.ovirt.engine.core.common.businessentities.DbGroup ( ) ; entity.setId ( getGuidDefaultEmpty ( rs , "id" ) ) ; entity.setName ( rs.getString ( "name" ) ) ; entity.setActive ( rs.getBoolean ( "active" ) ) ; entity.setDomain ( rs.getString ( "domain" ) ) ; entity.setDistinguishedName ( rs.getString ( "distinguishedname" ) ) ; entity.setExternalId ( rs.getString ( "external_id" ) ) ; return entity ; }
private org.ovirt.engine.core.common.action.RemoveCinderDiskParameters buildRemoveDiskChildCommandParameters ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.action.RemoveCinderDiskParameters removeDiskParams = new org.ovirt.engine.core.common.action.RemoveCinderDiskParameters ( cinderDisk.getId ( ) ) ; removeDiskParams.setShouldBeLogged ( false ) ; removeDiskParams.setParentCommand ( org.ovirt.engine.core.bll.storage.RestoreFromCinderSnapshotCommand.getActionType ( ) ) ; removeDiskParams.setParentParameters ( org.ovirt.engine.core.bll.storage.RestoreFromCinderSnapshotCommand.getParameters ( ) ) ; return removeDiskParams ; }
public boolean validate ( ) { org.ovirt.engine.ui.uicommonweb.validation.LengthValidation tempVar = new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation ( ) ; tempVar.setMaxLength ( 40 ) ; getName ( ) . validateEntity ( new org.ovirt.engine.ui.uicommonweb.validation.IValidation [ ] { new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation ( ) , tempVar , new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation ( ) } ) ; return getName ( ) . getIsValid ( ) ; }
protected java.util.List < org.ovirt.engine.api.model.Network > getClusterNetworks ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity ( org.ovirt.engine.core.common.businessentities.VDS.class , VdcQueryType.GetVdsByVdsId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( getHostId ( ) ) ) , "Host" ) ; return getEntity ( java.util.List.class , VdcQueryType.GetAllNetworksByClusterId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vds.getVdsGroupId ( ) ) , "Networks" ) ; }
public void onSuccess ( java.lang.Object result ) { stopProgress ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties > > providers = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider < org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties > > ) ( result ) ) ; providers.add ( 0 , null ) ; getNetworkProviders ( ) . setItems ( providers ) ; getNetworkProviders ( ) . setSelectedItem ( null ) ; }
private void setupMock ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getId ( ) ) . thenReturn ( expected.getId ( ) ) ; org.mockito.Mockito.when ( glusterBrickDaoMock.getBricksOfVolume ( expected.getId ( ) ) ) . thenReturn ( bricks ) ; }
public boolean isImagesExists ( java.lang.Iterable < org.ovirt.engine.core.common.businessentities.storage.DiskImage > images , org.ovirt.engine.core.compat.Guid storagePoolId ) { for ( org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage fromIrs = isImageExist ( storagePoolId , image ) ; if ( fromIrs == null ) { return false ; } } return true ; }
private void RestoreVmFromBaseSnapshot ( org.ovirt.engine.core.common.businessentities.VM vm ) { if ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getSnapshotDao ( ) . exists ( vm.getId ( ) , SnapshotType.STATELESS ) ) { log.infoFormat ( "Deleting snapshots for stateless vm {0}" , vm.getId ( ) ) ; org.ovirt.engine.core.common.action.VmOperationParameterBase restoreParams = new org.ovirt.engine.core.common.action.VmOperationParameterBase ( vm.getId ( ) ) ; restoreParams.setTransactionScopeOption ( TransactionScopeOption.RequiresNew ) ; runInternalAction ( VdcActionType.RestoreStatelessVm , restoreParams , new org.ovirt.engine.core.bll.context.CommandContext ( org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getExecutionContext ( ) , org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getLock ( ) ) ) ; } }
private boolean initRange ( java.lang.String start , java.lang.String end ) { java.util.List < java.lang.String > macAddresses = org.ovirt.engine.core.utils.MacAddressRangeUtils.initRange ( start , end ) ; if ( ( ( macAddresses.size ( ) ) + ( availableMacs.size ( ) ) ) > ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxMacsCountInPool ) ) ) { throw new org.ovirt.engine.core.bll.network.MacPoolManager.MacPoolExceededMaxException ( ) ; } availableMacs.addAll ( macAddresses ) ; return true ; }
private void setCookie ( final javax.servlet.http.HttpServletResponse response , final javax.servlet.ServletContext servletContext , final java.util.Locale userLocale ) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie ( org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE , userLocale.toString ( ) ) ; cookie.setPath ( org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH ) ; cookie.setMaxAge ( java.lang.Integer.MAX_VALUE ) ; response.addCookie ( cookie ) ; }
public void initUserAndGroupData ( ) { if ( ( dbUser ) == null ) { dbUser = org.ovirt.engine.core.bll.PermissionsCommandBase.getDbUserDAO ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getad_element_id ( ) ) ; } if ( ( ( dbUser ) == null ) && ( ( dbGroup ) == null ) ) { dbGroup = org.ovirt.engine.core.bll.PermissionsCommandBase.getAdGroupDAO ( ) . get ( org.ovirt.engine.core.bll.PermissionsCommandBase.getParameters ( ) . getPermission ( ) . getad_element_id ( ) ) ; } }
public static org.ovirt.engine.api.model.Application map ( java.lang.String appName , org.ovirt.engine.api.model.Application template ) { org.ovirt.engine.api.model.Application model = ( template != null ) ? template : new org.ovirt.engine.api.model.Application ( ) ; model.setName ( appName ) ; model.setId ( new org.ovirt.engine.core.compat.Guid ( appName.getBytes ( ) , true ) . toString ( ) ) ; return model ; }
protected boolean canMigrateVm ( org.ovirt.engine.core.compat.Guid vmGuid , java.util.List < java.lang.String > reasons ) { if ( ( org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm ( ) . getMigrationSupport ( ) ) == ( org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE ) ) { return super . canMigrateVm ( vmGuid , reasons ) ; } else { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE ) ; } }
private void updateShareableDiskEnabled ( org.ovirt.engine.core.common.businessentities.StoragePool datacenter ) { boolean isShareableDiskEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getConfigValuePreConverted ( ConfigurationValues.ShareableDiskEnabled , datacenter.getcompatibility_version ( ) . getValue ( ) ) ) ) ; getIsShareable ( ) . setChangeProhibitionReason ( org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.shareableDiskNotSupported ( ) ) ; getIsShareable ( ) . setIsChangable ( ( isShareableDiskEnabled && ( isEditEnabled ( ) ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies ( org.ovirt.engine.core.bll.ImportVmCommand.getVm ( ) . getTotalMemorySizeInBytes ( ) , MemoryUtils.METADATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance ( ) . findStorageDomainForMemory ( org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . getStoragePoolId ( ) , memoryDisksList , getVmDisksDummies ( ) , org.ovirt.engine.core.bll.ImportVmCommand.getVm ( ) ) ; disksList.addAll ( memoryDisksList ) ; return storageDomain ; }
public void before ( ) { injectorRule.bind ( javax.transaction.TransactionManager.class , transactionManager ) ; glusterManager = org.mockito.Mockito.spy ( org.ovirt.engine.core.bll.gluster.GlusterSyncJob.getInstance ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { final java.util.Map < java.lang.Integer , org.ovirt.engine.core.common.queries.VmIconIdSizePair > returnMap = returnValue.getReturnValue ( ) ; if ( ( returnMap.get ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DEFAULT_OS_ID ) ) == null ) { throw new java.lang.RuntimeException ( "Engine did not provide icon IDs of default OS." ) ; } osIdToDefaultIconIdMap = java.util.Collections.unmodifiableMap ( returnMap ) ; initializeLargeToSmallIconMap ( ) ; }
public void testList ( ) { resource.setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetHostDevicesByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { HOST_ID } , getHostDeviceCollection ( ) ) ; verifyHostDevices ( resource.list ( ) . getHostDevices ( ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > list = returnValue.getReturnValue ( ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Permission > newList = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Permission permission : list ) { if ( ! ( permission.getRoleId ( ) . equals ( ApplicationGuids.quotaConsumer.asGuid ( ) ) ) ) { newList.add ( permission ) ; } } setItems ( newList ) ; }
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction ( org.ovirt.engine.core.compat.Guid stepId , org.ovirt.engine.core.common.action.VdcActionType actionType , org.ovirt.engine.core.common.businessentities.AsyncTasks dbAsyncTask , org.ovirt.engine.core.bll.job.ExecutionContext context ) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters ( ) ; org.ovirt.engine.core.bll.CommandBase < ? > command = org.ovirt.engine.core.bll.CommandsFactory.createCommand ( actionType , parameters ) ; command.setContext ( new org.ovirt.engine.core.bll.context.CommandContext ( context ) ) ; return command.endAction ( ) ; }
protected void updateModelDataCenterFromVds ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( dataCenters != null ) { getDataCenter ( ) . setItems ( dataCenters ) ; getDataCenter ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( dataCenters , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate < > ( vds.getStoragePoolId ( ) ) ) ) ; if ( ( getDataCenter ( ) . getSelectedItem ( ) ) == null ) { getDataCenter ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( dataCenters ) ) ; } } }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( command == ( runOnceCommand ) ) { if ( validate ( ) ) { onRunOnce ( ) ; } } else if ( command == ( cancelCommand ) ) { commandTarget.executeCommand ( command ) ; } }
public java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > getSelectableModelsByRole ( ) { org.ovirt.engine.core.common.businessentities.StorageDomainType role = getModel ( ) . getAvailableStorageDomainTypeItems ( ) . getSelectedItem ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel > items = getModel ( ) . getStorageModelsByRole ( role ) ; return getSelectableModels ( items ) ; }
private void initializeObjectState ( ) { if ( org.apache.commons.lang.StringUtils.isEmpty ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getSnapshotName ( ) ) ) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = org.ovirt.engine.core.bll.RemoveSnapshotCommand.getSnapshotDao ( ) . get ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getParameters ( ) . getSnapshotId ( ) ) ; if ( snapshot != null ) { setSnapshotName ( snapshot.getDescription ( ) ) ; } } setStoragePoolId ( org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm ( ) . getStoragePoolId ( ) ) ; }
public void onRemoval ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy.getDbFacade ( ) . getStorageDomainDao ( ) . getAllByConnectionId ( provider.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainEntry = storageDomains.get ( 0 ) ; org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy.getDbFacade ( ) . getStorageDomainDynamicDao ( ) . remove ( storageDomainEntry.getId ( ) ) ; org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy.getDbFacade ( ) . getStorageDomainStaticDao ( ) . remove ( storageDomainEntry.getId ( ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message execute ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message message ) { java.util.Map < java.lang.String , java.lang.String > headers = message.getHeaders ( ) ; java.lang.String destHeader = headers.get ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_DESTINATION ) ; if ( org.ovirt.vdsm.jsonrpc.client.utils.JsonUtils.isEmpty ( destHeader ) ) { return new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message ( ) . error ( ) . withHeader ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.HEADER_MESSAGE , "Missing required header" ) ; } for ( org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.MessageListener el : eventListeners ) { el.onMessageReceived ( message.getContent ( ) ) ; } return null ; }
boolean areRequiredNetworksAvailable ( final java.util.List < org.ovirt.engine.core.common.businessentities.VmNetworkInterface > vmNetworkInterfaces , final java.util.List < org.ovirt.engine.core.common.businessentities.VdsNetworkInterface > allInterfacesForVds ) { for ( final org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIf : vmNetworkInterfaces ) { boolean found = false ; for ( final org.ovirt.engine.core.common.businessentities.VdsNetworkInterface vdsIf : allInterfacesForVds ) { if ( org.apache.commons.lang.StringUtils.equals ( vmIf.getNetworkName ( ) , vdsIf.getNetworkName ( ) ) ) { found = true ; break ; } } if ( ! found ) { return false ; } } return true ; }
public void testGetNotFound ( ) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpBasicUriExpectations ( ) ; setUriInfo ( uriInfo ) ; setUpEntityQueryExpectations ( 1 , true ) ; control.replay ( ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected java.util.List < java.lang.Integer > filterPossibleValues ( java.util.List < java.lang.Integer > candidates , java.util.List < java.lang.Integer > others ) { java.util.List < java.lang.Integer > res = new java.util.ArrayList < java.lang.Integer > ( ) ; int currentCpusCores = getTotalCpuCores ( ) ; for ( java.lang.Integer candidate : candidates ) { for ( java.lang.Integer other : others ) { if ( ( candidate * other ) == currentCpusCores ) { res.add ( candidate ) ; break ; } } } return res ; }
public void setupMocks ( ) { setUpCommand ( ) ; mockGetStorageDomainList ( ) ; mockDbDao ( ) ; command.init ( ) ; }
public void createCpuProfileTest ( ) { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.createCpuProfile ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID , org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_NAME ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_NAME , cpuProfile.getName ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.bll.profiles.CpuProfileHelperTest.CLUSTER_ID , cpuProfile.getClusterId ( ) ) ; org.junit.Assert.assertNotNull ( cpuProfile.getId ( ) ) ; org.junit.Assert.assertEquals ( ProfileType.CPU , cpuProfile.getProfileType ( ) ) ; }
public void RequestSearch ( ) { searchRequested = true ; }
public void testEchoStderr ( ) throws java.lang.Exception { java.lang.String content = "hello\nworld!\nother\ndata" ; try ( final java.io.InputStream stdin = new java.io.ByteArrayInputStream ( content.getBytes ( "UTF-8" ) ) ; final java.io.ByteArrayOutputStream stdout = new java.io.ByteArrayOutputStream ( ) ; final java.io.ByteArrayOutputStream stderr = new java.io.ByteArrayOutputStream ( ) ) { client.executeCommand ( "cat >&2" , stdin , stdout , stderr ) ; org.junit.Assert.assertEquals ( content , new java.lang.String ( stderr.toByteArray ( ) , "UTF-8" ) ) ; org.junit.Assert.assertEquals ( 0 , stdout.size ( ) ) ; } }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
protected org.ovirt.engine.api.model.ReportedDevice postPopulate ( org.ovirt.engine.api.model.ReportedDevice model ) { model.setType ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.ReportedDeviceType.class ) ) ; for ( org.ovirt.engine.api.model.Ip ip : model.getIps ( ) . getIps ( ) ) { ip.setVersion ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.restapi.types.IpVersion.class ) . value ( ) ) ; ip.setGateway ( null ) ; ip.setNetmask ( null ) ; } return model ; }
public java.util.List < java.lang.Integer > get64bitOss ( ) { java.util.List < java.lang.Integer > oss = new java.util.ArrayList < > ( ) ; for ( int osId : getOsIds ( ) ) { java.lang.String bus = getValueByVersion ( idToUnameLookup.get ( osId ) , "bus" , null ) ; if ( "64" . equalsIgnoreCase ( bus ) ) { oss.add ( osId ) ; } } return oss ; }
public void refreshDetails ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getGlusterRebalanceStatus ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue vdcValue = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = vdcValue.getReturnValue ( ) ; if ( rebalanceStatusEntity != null ) { showStatus ( rebalanceStatusEntity ) ; } } } ) , volumeEntity.getClusterId ( ) , volumeEntity.getId ( ) ) ; }
public int totalVideoRAMSizeMb ( org.ovirt.engine.core.common.businessentities.VM vm ) { java.util.Map < java.lang.String , java.lang.Integer > settings = getVideoDeviceSettings ( vm.getStaticData ( ) ) ; return ( ( ( settings.getOrDefault ( VdsProperties.VIDEO_RAM , 0 ) ) + ( settings.getOrDefault ( VdsProperties.VIDEO_VRAM , 0 ) ) ) + 1023 ) / 1024 ; }
private void updateOps ( byte [ ] message ) { if ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.isDebugEnabled ( ) ) { try { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompCommonClient.LOG.debug ( ( "Message sent: " + ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse ( message ) ) ) ) ; } catch ( org.ovirt.vdsm.jsonrpc.client.ClientConnectionException ignored ) { } } final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = this ; scheduleTask ( ( ) -> { client.updateInterestedOps ( ) ; return null ; } ) ; }
public void onRevealOverlayContent ( org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent event ) { java.util.Set < com.gwtplatform.mvp.client.PresenterWidget < ? > > children = getChildren ( com.gwtplatform.mvp.client.presenter.slots.LegacySlotConvertor.convert ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetContent ) ) ; if ( ( ( event.getContent ( ) ) != null ) && ( ! ( children.isEmpty ( ) ) ) ) { event.getContent ( ) . setCurrentPlaceWidget ( children.iterator ( ) . next ( ) ) ; } setInSlot ( org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetOverlay , event.getContent ( ) ) ; }
public void prepareParams ( ) { parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( ) ; parameters.setVdsId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand ( parameters , null ) ) ; org.mockito.Mockito.doReturn ( storageConnDao ) . when ( command ) . getStorageConnDao ( ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( command ) . getStorageDomainDao ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . findConnectionWithSameDetails ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.StorageServerConnections.class ) ) ; }
private boolean isVmInterfacesConfigured ( ) { for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getInterfaces ( ) ) { if ( ( nic.getNetworkName ( ) ) == null ) { if ( ! ( org.ovirt.engine.core.bll.validator.VmNicValidator.networkLinkingSupported ( org.ovirt.engine.core.bll.RunVmCommand.getVm ( ) . getVdsGroupCompatibilityVersion ( ) ) ) ) { addCanDoActionMessage ( VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED ) ; return false ; } else { return true ; } } } return true ; }
public boolean fetch ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue getStats = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance ( ) . runVdsCommand ( VDSCommandType.GetAllVmStats , new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase ( vdsManager.getCopyVds ( ) ) ) ; if ( getStats.getSucceeded ( ) ) { vdsmVms = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > ) ( getStats.getReturnValue ( ) ) ) ; onFetchVms ( ) ; return true ; } else { onError ( ) ; return false ; } }
public void onSuccess ( java.lang.String pk ) { if ( ( pk != null ) && ( ( pk.length ( ) ) > 0 ) ) { getPublicKey ( ) . setEntity ( pk ) ; } }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { if ( ! ( org.ovirt.engine.ui.uicommonweb.Linq.filterDisksByStorageType ( disks , DiskStorageType.LUN ) . isEmpty ( ) ) ) { setMessage ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . cloneVmLunsWontBeCloned ( ) ) ; } }
protected void addVmPayload ( ) { org.ovirt.engine.core.common.businessentities.VmPayload payload = org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmPayload ( ) ; if ( payload != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) , org.ovirt.engine.core.bll.AddVmCommand.getParameters ( ) . getVmId ( ) ) , VmDeviceGeneralType.DISK , payload.getType ( ) , payload.getSpecParams ( ) , true , true , null ) ; } }
public int compare ( org.ovirt.engine.core.common.businessentities.Bookmark o1 , org.ovirt.engine.core.common.businessentities.Bookmark o2 ) { java.lang.String name1 = o1.getName ( ) ; java.lang.String name2 = o2.getName ( ) ; if ( ( name1 == null ) || ( name2 == null ) ) { throw new java.lang.IllegalArgumentException ( "Bookmark name cannot be null" ) ; } return name1.compareTo ( name2 ) ; }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel vmListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.templates.VmBaseListModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > filteredStorageDomains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : storageDomains ) { if ( ( a.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) { filteredStorageDomains.add ( a ) ; } } vmListModel.PostExportGetStorageDomainList ( filteredStorageDomains ) ; }
protected void Perform ( ) { if ( org.ovirt.engine.core.common.businessentities.VM.isStatusUp ( org.ovirt.engine.core.bll.PauseVmCommand.getVm ( ) . getStatus ( ) ) ) { setActionReturnValue ( org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.Pause , new org.ovirt.engine.core.common.vdscommands.PauseVDSCommandParameters ( org.ovirt.engine.core.bll.PauseVmCommand.getVdsId ( ) , org.ovirt.engine.core.bll.PauseVmCommand.getVmId ( ) ) ) . getReturnValue ( ) ) ; org.ovirt.engine.core.bll.PauseVmCommand.setSucceeded ( true ) ; } else { setActionReturnValue ( org.ovirt.engine.core.bll.PauseVmCommand.getVm ( ) . getStatus ( ) ) ; } }
private org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters buildCreateSnapshotParametersForEndAction ( ) { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters parameters = buildCreateSnapshotParameters ( ) ; parameters.setImagesParameters ( org.ovirt.engine.core.bll.RunVmCommand.getParameters ( ) . getImagesParameters ( ) ) ; parameters.setEndProcedure ( EndProcedure.COMMAND_MANAGED ) ; parameters.setCommandId ( org.ovirt.engine.core.bll.RunVmCommand.getParametersForChildCommand ( ) . get ( 0 ) . getCommandId ( ) ) ; return parameters ; }
public void validateFailsForCluster ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( ) , null ) ) ; prepareMocks ( cmd , VDSStatus.Up ) ; mockIsGlusterEnabled ( false ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; mockIsGlusterEnabled ( true ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
public java.util.Set < java.lang.String > computeSelecetedLabels ( ) { java.util.Set < java.lang.String > selectedLabels = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.ui.uicommonweb.models.ListModel < java.lang.String > labelModel : getItems ( ) ) { selectedLabels.add ( labelModel.getSelectedItem ( ) ) ; } return selectedLabels ; }
public static java.lang.String decrypt ( java.lang.String source ) throws java.security.GeneralSecurityException { if ( ( source == null ) || ( ( source.length ( ) ) == 0 ) ) { return source ; } else { javax.crypto.Cipher rsa = javax.crypto.Cipher.getInstance ( "RSA" ) ; rsa.init ( javax.crypto.Cipher.DECRYPT_MODE , org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getPrivateKeyEntry ( ) . getPrivateKey ( ) ) ; return new java.lang.String ( rsa.doFinal ( new org.apache.commons.codec.binary.Base64 ( ) . decode ( source ) ) , java.nio.charset.Charset.forName ( "UTF-8" ) ) ; } }
public void getFreeVfMoreThanOneFreeVf ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( 5 , 2 , 2 , 2 , 2 ) ; org.junit.Assert.assertEquals ( 5 , freeVfs.size ( ) ) ; org.junit.Assert.assertTrue ( freeVfs.contains ( hostNicVfsConfigHelper.getFreeVf ( nic ) ) ) ; }
protected java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > filterStoragesByDatacenterId ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains , org.ovirt.engine.core.compat.NGuid diskDatacenterId ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > storages = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain storage : storageDomains ) { if ( storage.getStoragePoolId ( ) . equals ( diskDatacenterId ) ) { storages.add ( storage ) ; } } return storages ; }
private java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > getDiskImagesByIdMap ( java.util.Collection < org.ovirt.engine.api.model.Disk > values ) { java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > result = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; for ( org.ovirt.engine.api.model.Disk diskImage : values ) { result.put ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) ) ; } return result ; }
private void initParentResource ( ) { org.ovirt.engine.api.restapi.resource.AbstractBackendResource parent = collection.getParent ( ) . getParent ( ) ; parent.setBackend ( backend ) ; parent.setMappingLocator ( mapperLocator ) ; parent.setValidatorLocator ( validatorLocator ) ; parent.setMessageBundle ( messageBundle ) ; parent.setHttpHeaders ( httpHeaders ) ; }
public void testCanDoActionWithEmptySnapshotGuid ( ) { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters ( vmId , org.ovirt.engine.core.compat.Guid.Empty ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand ( params ) ) ; org.mockito.Mockito.doNothing ( ) . when ( cmd ) . updateVmDisksFromDb ( ) ; org.mockito.Mockito.doReturn ( snapshotDao ) . when ( cmd ) . getSnapshotDao ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID ) ; }
public org.ovirt.engine.core.bll.ValidationResult consistentDataCenter ( ) { return ( ( qos ) != null ) && ( ( ( getOldQos ( ) ) == null ) || ( ! ( qos.getStoragePoolId ( ) . equals ( getOldQos ( ) . getStoragePoolId ( ) ) ) ) ) ? new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_QOS_STORAGE_POOL_NOT_CONSISTENT ) : org.ovirt.engine.core.bll.ValidationResult.VALID ; }
static void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertTrue ( model.isSparse ( ) ) ; assertTrue ( model.isPropagateErrors ( ) ) ; }
public void sufficientDiskSpace ( ) { org.ovirt.engine.core.bll.validator.ImportValidator validator = setupDiskSpaceTest ( createParameters ( ) ) ; org.junit.Assert.assertTrue ( validator.validateSpaceRequirements ( mockCreateDiskDummiesForSpaceValidations ( ) ) . isValid ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator ) . allDomainsHaveSpaceForClonedDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator , org.mockito.Mockito.never ( ) ) . allDomainsHaveSpaceForDisksWithSnapshots ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( multipleSdValidator , org.mockito.Mockito.never ( ) ) . allDomainsHaveSpaceForNewDisks ( org.mockito.ArgumentMatchers.any ( ) ) ; }
public void testGetAllOfType ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > result = dao.getAllOfType ( StorageType.ISCSI ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.StoragePool pool : result ) { org.junit.Assert.assertEquals ( StorageType.ISCSI , pool.getstorage_pool_type ( ) ) ; } }
public void runCommand ( ) throws org.ovirt.engine.core.domains.ManageDomainsResult { java.lang.String action = args.get ( org.ovirt.engine.core.domains.ManageDomainsArguments.ARG_ACTION ) ; if ( org.ovirt.engine.core.domains.ManageDomainsArguments.ACTION_ADD.equals ( action ) ) { addDomain ( ) ; } else if ( org.ovirt.engine.core.domains.ManageDomainsArguments.ACTION_EDIT.equals ( action ) ) { editDomain ( ) ; } else if ( org.ovirt.engine.core.domains.ManageDomainsArguments.ACTION_DELETE.equals ( action ) ) { deleteDomain ( ) ; } else if ( org.ovirt.engine.core.domains.ManageDomainsArguments.ACTION_VALIDATE.equals ( action ) ) { validate ( ) ; } else if ( org.ovirt.engine.core.domains.ManageDomainsArguments.ACTION_LIST.equals ( action ) ) { getConfiguration ( ) ; } }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { ( ( org.ovirt.engine.ui.webadmin.section.main.presenter.popup.cluster.NewClusterNetworkPopupPresenterWidget.ViewDef ) ( getView ( ) ) ) . setDataCenterName ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( model.getDataCenters ( ) . getSelectedItem ( ) ) ) . getName ( ) ) ; }
public void setUp ( ) { clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.when ( glusterUtils.getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( ) ; org.ovirt.engine.api.model.Application application = resource.get ( ) ; assertEquals ( NAMES [ org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest.APPLICATION_INDEX ] , application.getName ( ) ) ; verifyLinks ( application ) ; }
private org.ovirt.api.metamodel.tool.JavaTypeReference getListReference ( org.ovirt.api.metamodel.concepts.ListType type ) { org.ovirt.api.metamodel.concepts.Type elementType = type.getElementType ( ) ; org.ovirt.api.metamodel.tool.JavaTypeReference reference = getTypeReference ( elementType , true ) ; reference.addImport ( java.util.List.class ) ; reference.setText ( ( ( "List<" + ( reference.getText ( ) ) ) + ">" ) ) ; return reference ; }
public org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper clone ( ) throws java.lang.CloneNotSupportedException { super . clone ( ) ; org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper cloneWrapper = new org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper ( getAuditLogable ( ) , canDoActionMessages ) ; if ( ( getParameters ( ) ) != null ) { cloneWrapper.setParameters ( new java.util.ArrayList < org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter > ( ) ) ; for ( org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter parameter : getParameters ( ) ) { cloneWrapper.getParameters ( ) . add ( parameter.clone ( ) ) ; } } return cloneWrapper ; }
public void shouldNotMigrateVmOnClusterTwoWhileInUpgradeMode ( ) { cluster2.setClusterPolicyId ( ClusterPolicy.UPGRADE_POLICY_GUID ) ; arem.refresh ( ) ; org.mockito.Mockito.verify ( arem ) . migrateVM ( vm1 ) ; org.mockito.Mockito.verify ( arem , org.mockito.Mockito.times ( 1 ) ) . migrateVM ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( arem , org.mockito.Mockito.times ( 0 ) ) . migrateVM ( org.mockito.ArgumentMatchers.eq ( vm2 ) ) ; }
public void setCommandStatus ( org.ovirt.engine.core.compat.CommandStatus status , boolean updateDB ) { this . commandStatus = status ; if ( updateDB ) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend ( ) ; try { org.ovirt.engine.core.bll.tasks.TaskManagerUtil.updateCommandStatus ( getCommandId ( ) , commandStatus ) ; } finally { if ( transaction != null ) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume ( transaction ) ; } } } }
protected org.ovirt.engine.core.common.businessentities.StorageDomain findStorageDomainForMemory ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domainsInPool , java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain currDomain : domainsInPool ) { updateDisksStorage ( currDomain , disksList ) ; if ( ( ( currDomain.getStorageDomainType ( ) . isDataDomain ( ) ) && ( ( currDomain.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) && ( validateSpaceRequirements ( currDomain , disksList ) ) ) { return currDomain ; } } return null ; }
public org.ovirt.engine.api.model.InstanceType update ( org.ovirt.engine.api.model.InstanceType incoming ) { org.ovirt.engine.api.model.InstanceType instanceType = performUpdate ( incoming , new org.ovirt.engine.api.restapi.resource.QueryIdResolver ( org.ovirt.engine.core.common.queries.VdcQueryType.GetInstanceType , org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class ) , VdcActionType.UpdateVmTemplate , new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource.UpdateParametersProvider ( ) ) ; if ( instanceType != null ) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData ( this , instanceType ) ; } return instanceType ; }
private void selectAsSPM ( ) { org.ovirt.engine.core.common.action.ForceSelectSPMParameters params = new org.ovirt.engine.core.common.action.ForceSelectSPMParameters ( ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( getSelectedItem ( ) ) ) . getId ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.RunAction ( VdcActionType.ForceSelectSPM , params ) ; }
private java.lang.String generateInfoFileData ( ) { java.util.Map < java.lang.String , java.lang.Object > data = new java.util.HashMap < > ( ) ; data.put ( OvfInfoFileConstants.LastUpdated , updateDate.toString ( ) ) ; data.put ( OvfInfoFileConstants.Domains , java.util.Arrays.asList ( org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ; return buildJson ( data , true ) ; }
static void verifyParent ( org.ovirt.engine.api.model.Tag model , java.lang.String parentId ) { assertNotNull ( model.getParent ( ) ) ; assertEquals ( parentId , model.getParent ( ) . getId ( ) ) ; }
public void hostAttachedToLocalStorageWithoutDataCenter ( ) { org.mockito.Mockito.when ( dbFacade.getStoragePoolDao ( ) ) . thenReturn ( storagePoolDao ) ; validator = new org.ovirt.engine.core.bll.validator.HostValidator ( dbFacade , host , hostedEngineHelper ) ; org.junit.Assert.assertThat ( validator.validateSingleHostAttachedToLocalStorage ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public org.ovirt.engine.core.compat.Guid getStorageDomainId ( ) { if ( ( cachedStorageDomainId ) == null ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies ( org.ovirt.engine.core.bll.HibernateVmCommand.getVm ( ) . getTotalMemorySizeInBytes ( ) , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance ( ) . findStorageDomainForMemory ( org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId ( ) , diskDummiesForMemSize ) ; if ( storageDomain != null ) { cachedStorageDomainId = storageDomain.getId ( ) ; } } return cachedStorageDomainId ; }
protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { }
private void createProfiles ( ) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { for ( org.ovirt.engine.core.extensions.mgr.ExtensionProxy authnExtension : org.ovirt.engine.core.extensions.mgr.ExtensionsManager.getInstance ( ) . getProvidedExtensions ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_SERVICE ) ) { registerProfile ( new org.ovirt.engine.core.aaa.AuthenticationProfile ( authnExtension , org.ovirt.engine.core.extensions.mgr.ExtensionsManager.getInstance ( ) . getExtensionByName ( authnExtension.getContext ( ) . < java.util.Properties > get ( Base.ContextKeys.CONFIGURATION ) . getProperty ( org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_AUTHZ_PLUGIN ) ) ) ) ; } }
public void testCompareTo ( ) { org.ovirt.engine.core.compat.Guid guid1 = new org.ovirt.engine.core.compat.Guid ( "5b411bc1-c220-4421-9abd-cfa484aecb6e" ) ; org.ovirt.engine.core.compat.Guid guid2 = new org.ovirt.engine.core.compat.Guid ( "5b411bc1-c220-4421-9abd-cfa484aecb6f" ) ; org.junit.Assert.assertTrue ( ( ( guid1.compareTo ( guid2 ) ) < 0 ) ) ; org.junit.Assert.assertEquals ( 0 , guid1.compareTo ( guid1 ) ) ; org.junit.Assert.assertTrue ( ( ( guid2.compareTo ( guid1 ) ) > 0 ) ) ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
private void mockPassDiscardSupportedForDestSd ( org.ovirt.engine.core.bll.ValidationResult validationResult , org.ovirt.engine.core.common.businessentities.storage.ImageOperation imageOperation ) { command.getParameters ( ) . setOperation ( imageOperation ) ; org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator multipleDiskVmElementValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator.class ) ; org.mockito.Mockito.doReturn ( multipleDiskVmElementValidator ) . when ( command ) . createMultipleDiskVmElementValidator ( ) ; org.mockito.Mockito.when ( multipleDiskVmElementValidator.isPassDiscardSupportedForDestSd ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( validationResult ) ; }
public void setmessage ( java.lang.String value ) { this . message = value ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( model.getItems ( ) ) == null ) { return ; } java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = model.getItems ( ) . iterator ( ) ; if ( iterator.hasNext ( ) ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = model.cloneTagModel ( iterator.next ( ) ) ; updateDataProvider ( java.util.Arrays.asList ( root ) ) ; } }
private void setUpMocksForAdd ( boolean hookFound , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook , org.ovirt.engine.core.common.businessentities.VDSStatus status ) { setupMocks ( hookFound , hook ) ; org.mockito.Mockito.when ( vdsDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( getServer ( org.ovirt.engine.core.bll.gluster.AddGlusterHookCommandTest.SERVER_ID , "gfs1" , org.ovirt.engine.core.bll.gluster.CLUSTER_ID , status ) ) ; }
public void testValidateSessionTrue ( ) { javax.servlet.http.HttpSession httpSession = new org.ovirt.engine.api.common.security.auth.ChallengerTest.TestHttpSession ( org.ovirt.engine.api.common.security.auth.ChallengerTest.sessionId , false ) ; org.mockito.Mockito.doReturn ( httpSession ) . when ( challenger ) . getCurrentSession ( org.mockito.Matchers.anyBoolean ( ) ) ; challenger.setValidator ( new org.ovirt.engine.api.common.security.auth.ChallengerTest.ConstValidator ( true , org.ovirt.engine.api.common.security.auth.ChallengerTest.sessionId ) ) ; org.jboss.resteasy.core.ResourceMethod resource = control.createMock ( org.jboss.resteasy.core.ResourceMethod.class ) ; org.jboss.resteasy.core.ServerResponse response = challenger.preProcess ( setUpRequestExpectations ( null , true , true ) , resource ) ; assertNull ( response ) ; control.verify ( ) ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( volumeDao ) . when ( cmd ) . getGlusterVolumeDao ( ) ; org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito.doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; }
public void migrateVM ( java.util.List < org.ovirt.engine.core.compat.Guid > initialHosts , org.ovirt.engine.core.compat.Guid vmToMigrate ) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters ( false , vmToMigrate ) ; parameters.setInitialHosts ( new java.util.ArrayList ( initialHosts ) ) ; org.ovirt.engine.core.bll.Backend.getInstance ( ) . runInternalAction ( VdcActionType.MigrateVm , parameters , org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext ( ) ) ; }
protected boolean checkStorageDomainStatus ( final org.ovirt.engine.core.common.businessentities.StorageDomainStatus ... statuses ) { boolean valid = false ; org.ovirt.engine.core.common.businessentities.StorageDomainStatus status = getStorageDomainStatus ( ) ; if ( status != null ) { valid = java.util.Arrays.asList ( statuses ) . contains ( status ) ; } if ( ! valid ) { if ( status == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED ) ; } addStorageDomainStatusIllegalMessage ( ) ; } return valid ; }
private void addInterfaceDeviceToDb ( ) { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.bll.utils.VmDeviceUtils.addNetworkInterfaceDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface ( ) . getId ( ) , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getParameters ( ) . getVmId ( ) ) , org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getInterface ( ) . isPlugged ( ) ) ; org.ovirt.engine.core.bll.network.vm.AddVmInterfaceCommand.getCompensationContext ( ) . snapshotNewEntity ( vmDevice ) ; }
public void testSave ( ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity newHook = getGlusterHook ( ) ; newHook.setId ( FixturesTool.NEW_HOOK_ID ) ; dao.save ( newHook ) ; org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = dao.getById ( newHook.getId ( ) ) ; org.junit.Assert.assertEquals ( newHook , hook ) ; }
public void testValidateVmMigrating ( ) { prepareForVmValidatorTests ( ) ; org.mockito.Mockito.doReturn ( ValidationResult.VALID ) . when ( snapshotValidator ) . vmSnapshotDisksNotDuringMerge ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; cmd.getVm ( ) . setStatus ( VMStatus.MigratingTo ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP ) ; }
private java.util.Set < java.lang.String > getRemovedBondsUsedByNetworks ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure = getAttachmentsToConfigure ( ) ; java.util.Set < java.lang.String > requiredNicsNames = new java.util.HashSet < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure ) { requiredNicsNames.add ( attachment.getNicName ( ) ) ; } return requiredNicsNames ; }
public void testSave ( ) { org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entry = new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID_WITH_NO_MAP_ENTRY , org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_DOMAIN_ID , FixturesTool.DEFAULT_QUOTA_GENERAL , FixturesTool.DISK_PROFILE_1 ) ; dao.save ( entry ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap > entries = dao.getAllByImageId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID_WITH_NO_MAP_ENTRY ) ; org.junit.Assert.assertNotNull ( entries ) ; org.junit.Assert.assertEquals ( 1 , entries.size ( ) ) ; org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entryFromDb = entries.get ( 0 ) ; org.junit.Assert.assertEquals ( entry , entryFromDb ) ; }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand ( ) { return runVdsCommand ( VDSCommandType.ConvertVm , buildConvertParameters ( ) ) ; }
public void clusterWithVirtGlusterServicesNotAllowed ( ) { createCommandWithVirtGlusterEnabled ( ) ; org.mockito.Mockito.when ( clusterDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createClusterWithNoCpuName ( ) ) ; mcr.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , java.lang.Boolean.FALSE ) ; cpuExists ( ) ; allQueriesForVms ( ) ; validateFailedWithReason ( EngineMessage.CLUSTER_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED ) ; }
private void createUpStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; pool.setstatus ( StoragePoolStatus.Up ) ; org.mockito.Mockito.when ( storagePoolDAO.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( pool ) ; }
private org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolWithoutLocking ( org.ovirt.engine.core.compat.Guid macPoolId , java.util.List < org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator > decorators ) { final org.ovirt.engine.core.bll.network.macpool.MacPool poolById = macPools.get ( macPoolId ) ; if ( poolById == null ) { throw new java.lang.IllegalStateException ( org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE ) ; } return decoratedMacPoolFactory.createDecoratedPool ( poolById , decorators ) ; }
public void testMemoryMapping ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( Guid.Empty ) ; vds.setPhysicalMemMb ( 4000 ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; assertNotNull ( host.getMemory ( ) ) ; assertEquals ( java.lang.Long.valueOf ( host.getMemory ( ) ) , java.lang.Long.valueOf ( 4194304000L ) ) ; }
public void setup ( ) { executor = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor ( fencedHost , new org.ovirt.engine.core.common.businessentities.FencingPolicy ( ) ) ) ; org.mockito.Mockito.doReturn ( agentExecutor1 ) . doReturn ( agentExecutor2 ) . when ( executor ) . createFenceActionExecutor ( org.mockito.Matchers.any ( java.util.List.class ) ) ; }
private void initManualWidgets ( ) { usageTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer ( ) ) ; uuidEditor = new org.ovirt.engine.ui.common.widget.editor.generic.StringEntityModelTextBoxOnlyEditor ( ) ; uuidEditorWithInfo = new org.ovirt.engine.ui.common.widget.EntityModelWidgetWithInfo ( new org.ovirt.engine.ui.common.widget.label.EnableableFormLabel ( org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderSecretPopupView.constants.idLibvirtSecret ( ) ) , uuidEditor ) ; uuidEditorWithInfo.setExplanation ( org.ovirt.engine.ui.webadmin.section.main.view.popup.provider.ProviderSecretPopupView.constants.idLibvirtSecretHint ( ) ) ; }
private void mockVmDevice ( org.ovirt.engine.core.common.businessentities.VmDevice vmDevice ) { org.mockito.Mockito.when ( vmDeviceDao.getVmDeviceByVmIdAndType ( vm.getId ( ) , vmDevice.getType ( ) ) ) . thenReturn ( java.util.Arrays.asList ( vmDevice ) ) ; org.mockito.Mockito.doReturn ( vmDeviceDao ) . when ( dbFacade ) . getVmDeviceDao ( ) ; }
public void checkRemoveNFSConnectionNoDomain ( ) { parameters.setStorageServerConnection ( NFSConnection ) ; org.mockito.Mockito.when ( storageServerConnectionDao.get ( NFSConnection.getId ( ) ) ) . thenReturn ( NFSConnection ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > domains = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; org.mockito.Mockito.doReturn ( domains ) . when ( command ) . getStorageDomainsByConnId ( NFSConnection.getId ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess ( command ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel roleListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel ) ( model ) ) ; roleListModel.publicAttachedActions = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.ActionGroup > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ; roleListModel.setAttachedActionGroups ( publicAttachedActions ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue response ) { if ( response.getSucceeded ( ) ) { model.applyData ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage.LUNs > ) ( response.getReturnValue ( ) ) ) , false , prevSelected ) ; model.setGetLUNsFailure ( "" ) ; } else { model.setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . couldNotRetrieveLUNsLunsFailure ( ) ) ; } }
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand ( final org.ovirt.engine.core.bll.CommandBase < ? > command , final org.ovirt.engine.core.bll.context.CommandContext cmdContext ) { org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler ( org.ovirt.engine.core.bll.tasks.CommandExecutor.log ) . runAction ( command , ( cmdContext != null ? cmdContext.getExecutionContext ( ) : null ) ) ; updateCommand ( command , result ) ; return result ; }
public java.lang.Void runInTransaction ( ) { try { jobDao.updateJobLastUpdateTime ( step.getJobId ( ) , new java.util.Date ( ) ) ; stepDao.save ( step ) ; } catch ( java.lang.Exception e ) { org.ovirt.engine.core.bll.job.JobRepositoryImpl.log.errorFormat ( "Failed to save step {0}, {1}." , step.getId ( ) , step.getStepName ( ) , e ) ; } return null ; }
protected org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters getActionParameters ( org.ovirt.engine.api.model.Network network , org.ovirt.engine.api.model.Network entity ) { if ( namedDataCenter ( network ) ) { entity.setstorage_pool_id ( getDataCenterId ( network ) ) ; } return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( entity.getstorage_pool_id ( ) . getValue ( ) , entity ) ; }
private void initCommand ( ) { org.ovirt.engine.core.common.action.FenceVdsActionParameters params = new org.ovirt.engine.core.common.action.FenceVdsActionParameters ( ) ; params.setVdsId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_ID ) ; command = new org.ovirt.engine.core.bll.pm.StartVdsCommand ( params , null ) ; command.setAuditLogDirector ( auditLogDirector ) ; command = org.mockito.Mockito.spy ( command ) ; org.mockito.Mockito.doReturn ( executor ) . when ( command ) . createHostFenceActionExecutor ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VDS.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.FencingPolicy.class ) ) ; org.mockito.Mockito.doReturn ( vdsBrokerFrontend ) . when ( command ) . getVdsBroker ( ) ; command.setClusterId ( org.ovirt.engine.core.bll.pm.StartVdsCommandTest.FENCECD_HOST_CLUSTER_ID ) ; }
protected boolean validate ( ) { if ( ( ! ( super . validate ( ) ) ) || ( ! ( org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.checkStorageDomain ( ) ) ) ) { return false ; } oldDomain = org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomainStaticDao ( ) . get ( org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain ( ) . getId ( ) ) ; org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain ( ) . setLastTimeUsedAsMaster ( oldDomain.getLastTimeUsedAsMaster ( ) ) ; return validateStoragePropertiesUpdate ( ) ; }
public void getClusterNotNull ( ) { final org.ovirt.engine.core.common.businessentities.Cluster g = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; b.setCluster ( g ) ; final org.ovirt.engine.core.common.businessentities.Cluster gr = b.getCluster ( ) ; org.junit.Assert.assertEquals ( g , gr ) ; }
public void storageTypeUnsupported ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain sd = mockGetExistingDomain ( true ) ; sd.setStorageType ( StorageType.CINDER ) ; sd.setId ( org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HE_SD_ID ) ; cmd.init ( ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( "" , cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; org.mockito.Mockito.verify ( backend , org.mockito.Mockito.times ( 1 ) ) . runInternalQuery ( org.mockito.ArgumentMatchers.eq ( QueryType.GetExistingStorageDomainList ) , org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.verify ( cmd , org.mockito.Mockito.times ( 0 ) ) . executeCommand ( ) ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.network.Network n ) { return ( ( n.getname ( ) . trim ( ) . toLowerCase ( ) . equals ( getNetworkName ( ) . trim ( ) . toLowerCase ( ) ) ) && ( ! ( n.getId ( ) . equals ( getNetwork ( ) . getId ( ) ) ) ) ) && ( getNetwork ( ) . getstorage_pool_id ( ) . equals ( n.getstorage_pool_id ( ) ) ) ; }
private void createNotVirtIODisk ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = getDiskImage ( ) ; disk.setActive ( true ) ; disk.setDiskInterface ( DiskInterface.IDE ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( disk ) ; org.mockito.Mockito.when ( osRepository.getDiskHotpluggableInterfaces ( org.mockito.Matchers.any ( java.lang.Integer.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Version.class ) ) ) . thenReturn ( new java.util.HashSet < > ( org.ovirt.engine.core.bll.storage.disk.HotPlugDiskToVmCommandTest.DISK_HOTPLUGGABLE_INTERFACES ) ) ; }
public java.lang.Boolean getValue ( ) { for ( org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersTableItems ( ) ) { if ( ( networkClusterModel.getIsChangable ( ) ) && ( ! ( networkClusterModel.isAttached ( ) ) ) ) { return false ; } } return true ; }
public void updateStepProgress ( ) { java.lang.Integer newProgress = 74 ; org.ovirt.engine.core.common.job.Step s = dao.get ( FixturesTool.STEP_ID ) ; org.junit.Assert.assertNotEquals ( "New progress should be different than the current" , newProgress , s.getProgress ( ) ) ; updateStepProgress ( FixturesTool.STEP_ID , newProgress ) ; s = dao.get ( FixturesTool.STEP_ID ) ; org.junit.Assert.assertEquals ( "New progress should be the same as the current" , newProgress , s.getProgress ( ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.provider.ProviderValidator validatorOld = new org.ovirt.engine.core.bll.provider.ProviderValidator ( getOldProvider ( ) ) ; org.ovirt.engine.core.bll.provider.ProviderValidator validatorNew = new org.ovirt.engine.core.bll.provider.ProviderValidator ( getProvider ( ) ) ; return ( ( validate ( validatorOld.providerIsSet ( ) ) ) && ( ( nameKept ( ) ) || ( validate ( validatorNew.nameAvailable ( ) ) ) ) ) && ( validate ( providerTypeNotChanged ( getOldProvider ( ) , getProvider ( ) ) ) ) ; }
public void testRemove ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao.getByName ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME ) ; org.junit.Assert.assertNotNull ( result ) ; dao.remove ( result.getId ( ) ) ; result = dao.getByName ( org.ovirt.engine.core.dao.NetworkDAOTest.EXISTING_NETWORK_NAME ) ; org.junit.Assert.assertNull ( result ) ; }
private void updateActionAvailability ( ) { java.util.List items = ( ( ( getSelectedItems ( ) ) != null ) && ( ( getSelectedItem ( ) ) != null ) ) ? getSelectedItems ( ) : new java.util.ArrayList ( ) ; getEditQuotaCommand ( ) . setIsExecutionAllowed ( ( ( items.size ( ) ) == 1 ) ) ; getRemoveQuotaCommand ( ) . setIsExecutionAllowed ( ( ( items.size ( ) ) > 0 ) ) ; getCloneQuotaCommand ( ) . setIsExecutionAllowed ( ( ( items.size ( ) ) == 1 ) ) ; }
protected void init ( ) { resource = new org.ovirt.engine.api.restapi.resource.BackendHostResource ( GUIDS [ 0 ] . toString ( ) , new org.ovirt.engine.api.restapi.resource.BackendHostsResource ( ) ) ; resource.setBackend ( backend ) ; resource.setMappingLocator ( mapperLocator ) ; resource.setValidatorLocator ( validatorLocator ) ; resource.setMessageBundle ( messageBundle ) ; resource.setHttpHeaders ( httpHeaders ) ; }
public void testRemove ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao.getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( result.getDnsResolverConfiguration ( ) . getId ( ) , FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE ) ; dao.remove ( result.getId ( ) ) ; org.junit.Assert.assertNull ( dao.getByNameAndDataCenter ( org.ovirt.engine.core.dao.network.NetworkDaoTest.EXISTING_NETWORK_NAME2 , FixturesTool.DATA_CENTER ) ) ; org.junit.Assert.assertNull ( dnsResolverConfigurationDao.get ( FixturesTool.EXISTING_DNS_RESOLVER_CONFIGURATION_TO_REMOVE ) ) ; }
public void bondWithNoNetworkDidntChange ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond ( org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ifaces = createNics ( bond.getName ( ) ) ; mockExistingIfacesWithBond ( bond , ifaces ) ; org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = new org.ovirt.engine.core.common.action.SetupNetworksParameters ( ) ; ifaces.add ( bond ) ; parameters.setInterfaces ( ifaces ) ; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper ( parameters ) ; validateAndExpectNoViolations ( helper ) ; assertNoBondsModified ( helper ) ; assertNoNetworksModified ( helper ) ; assertNoBondsRemoved ( helper ) ; assertNoNetworksRemoved ( helper ) ; }
private void updateRemovedLabelOnNics ( java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > nicsToConfigureByName ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > labelToNic = getLabelToNic ( nicsToConfigureByName.values ( ) ) ; for ( java.lang.String removedLabel : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) . getRemovedLabels ( ) ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicWithLabel = labelToNic.get ( removedLabel ) ; if ( nicWithLabel != null ) { nicWithLabel.getLabels ( ) . remove ( removedLabel ) ; } } }
public void setDefaultInterface ( ) { org.ovirt.engine.core.compat.Guid vmId = getVmId ( ) ; if ( ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( vmId ) ) || ( ( getDisk ( ) ) == null ) ) { getDiskInterface ( ) . setSelectedItem ( DiskInterface.VirtIO ) ; } else { getDiskInterface ( ) . setSelectedItem ( getDisk ( ) . getDiskVmElementForVm ( vmId ) . getDiskInterface ( ) ) ; } }
public void testVdsGroupCorrectStoragePoolName ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > result = dao.getAllForStoragePool ( storagePool.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup group : result ) { org.junit.Assert.assertEquals ( storagePool.getName ( ) , group.getStoragePoolName ( ) ) ; } }
public void testValidNetworkAttachmentIpConfiguration ( ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = initValidator ( ) ; org.ovirt.engine.core.bll.ValidationResult actual = validator.validNewOrModifiedNetworkAttachments ( ) ; org.junit.Assert.assertEquals ( ValidationResult.VALID , actual ) ; }
private void useAlternateCredentials_EntityChanged ( ) { boolean useAlternateCredentials = getUseAlternateCredentials ( ) . getEntity ( ) ; getSysPrepUserName ( ) . setIsChangable ( getUseAlternateCredentials ( ) . getEntity ( ) ) ; getSysPrepPassword ( ) . setIsChangable ( getUseAlternateCredentials ( ) . getEntity ( ) ) ; getSysPrepUserName ( ) . setEntity ( ( useAlternateCredentials ? "" : null ) ) ; getSysPrepPassword ( ) . setEntity ( ( useAlternateCredentials ? "" : null ) ) ; }
protected org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData getCurrentIrsProxyData ( ) { if ( ! ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.containsKey ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) ) ) ) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.put ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) , new org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.IrsProxyData ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) ) ) ; } return org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand._irsProxyData.get ( org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getParameters ( ) . getStoragePoolId ( ) ) ; }
public static org.ovirt.engine.core.bll.ValidationResult isCinderHasNoImages ( org.ovirt.engine.core.compat.Guid storageDomainId ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > cinderDisks = org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getDiskImageDao ( ) . getAllForStorageDomain ( storageDomainId ) ; if ( ! ( cinderDisks.isEmpty ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ERROR_CANNOT_DETACH_CINDER_PROVIDER_WITH_IMAGES ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private void initComparators ( ) { java.util.List < ? extends java.util.Comparator < org.ovirt.engine.core.common.businessentities.StorageDomain > > comparators = java.util.Arrays.asList ( new org.ovirt.engine.core.bll.memory.MemoryStorageHandlerTest.SmallestStorageDomainComparator ( validStorageDomain2 ) , new org.ovirt.engine.core.bll.memory.MemoryStorageHandlerTest.BiggestStorageDomainComparator ( validStorageDomain3 ) ) ; org.mockito.Mockito.doReturn ( comparators ) . when ( memoryStorageHandler ) . getStorageDomainComparators ( org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.storage.DiskImage.class ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; behavior.postInitTemplate ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.filterTemplatesByArchitecture ( templates , dataCenterWithCluster.getCluster ( ) . getArchitecture ( ) ) ) ; }
public void onSuccess ( java.lang.String defaultMountPoint ) { lvModel.stopProgress ( ) ; lvModel.getDefaultMountFolder ( ) . setEntity ( defaultMountPoint ) ; }
public void testGetDataAndSetDataWithFullSession ( ) { org.ovirt.engine.core.utils.ThreadLocalParamsContainer.setHttpSessionId ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID ) ; org.junit.Assert.assertTrue ( "Set should fail with an empty session" , container.SetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE ) ) ; org.junit.Assert.assertEquals ( "Get should return null with an empty session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; org.junit.Assert.assertEquals ( "Get should return the value with a given session" , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_VALUE , container.GetData ( org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_SESSION_ID , org.ovirt.engine.core.bll.session.SessionDataContainerTest.TEST_KEY , false ) ) ; }
public boolean fetch ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue getList = getResourceManager ( ) . runVdsCommand ( VDSCommandType.List , new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase ( vdsManager.getCopyVds ( ) ) ) ; if ( getList.getSucceeded ( ) ) { vdsmVms = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData > ) ( getList.getReturnValue ( ) ) ) ; onFetchVms ( ) ; return true ; } else { onError ( ) ; return false ; } }
public void updateDataCenter ( org.ovirt.vdsmfake.domain.DataCenter dataCenter ) { if ( ! ( dataCenterMap.containsKey ( dataCenter.getId ( ) ) ) ) { dataCenterMap.put ( dataCenter.getId ( ) , dataCenter ) ; } storeObject ( dataCenter ) ; org.ovirt.vdsmfake.domain.VdsmManager.log.info ( "Data center {} stored" , dataCenter.getId ( ) ) ; }
public void setUp ( ) { org.ovirt.engine.core.common.action.RemoveImageParameters params = new org.ovirt.engine.core.common.action.RemoveImageParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveImageCommand < org.ovirt.engine.core.common.action.RemoveImageParameters > ( params , null ) { @ java.lang.Override protected void initImage ( ) { } @ java.lang.Override protected void initStoragePoolId ( ) { } @ java.lang.Override protected void initStorageDomainId ( ) { } @ java.lang.Override protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { } } ) ; org.mockito.Mockito.doReturn ( snapshotDAO ) . when ( cmd ) . getSnapshotDao ( ) ; org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance ( ) . bind ( org.ovirt.engine.core.common.osinfo.OsRepository.class , osRepository ) ; }
private void mockCluster ( ) { cluster = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.businessentities.Cluster.class ) ; org.mockito.Mockito.doReturn ( clusterId ) . when ( cluster ) . getId ( ) ; org.mockito.Mockito.doReturn ( storagePoolId ) . when ( cluster ) . getStoragePoolId ( ) ; org.mockito.Mockito.doReturn ( ArchitectureType.x86_64 ) . when ( cluster ) . getArchitecture ( ) ; }
public boolean shouldShowDataCenterAlert ( org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter ) { return false ; }
public void testNoStorageQuotaAssigned ( ) { underTest.handleIoTune ( vmDevice , underTest.loadStorageQos ( diskImage ) ) ; org.junit.Assert.assertNull ( vmDevice.getSpecParams ( ) ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( VdcQueryType.GetVmInterfacesByVmId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.VM_ID } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > ( ) ) ; try { resource.update ( getNic ( false ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
protected void setUpCommand ( ) { org.mockito.Mockito.doNothing ( ) . when ( command ) . initTemplate ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . areTemplateImagesInStorageReady ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . verifyAddVm ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateDiskProfiles ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . setAndValidateCpuProfile ( ) ; }
public static void getPermittedStorageDomainsByStoragePoolId ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId , org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ; org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters params = new org.ovirt.engine.core.common.queries.GetPermittedStorageDomainsByStoragePoolIdParameters ( ) ; params.setStoragePoolId ( dataCenterId ) ; params.setActionGroup ( actionGroup ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetPermittedStorageDomainsByStoragePoolId , params , aQuery ) ; }
public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter ( java.lang.String fieldName ) { org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter retval = null ; if ( "ARCHITECTURE" . equals ( fieldName ) ) { retval = new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter ( org.ovirt.engine.core.common.businessentities.ArchitectureType.class ) ; } return retval ; }
private void extractBondIfModified ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , java.lang.String bondName ) { if ( ! ( bonds.containsKey ( bondName ) ) ) { bonds.put ( bondName , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; } if ( bondWasModified ( iface ) ) { modifiedBonds.put ( bondName , iface ) ; } }
public static void getUpHostListByCluster ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName , java.lang.Integer maxCount ) { org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Host: cluster = " + clusterName ) + " and status = up" ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; if ( maxCount != null ) { searchParameters.setMaxCount ( maxCount ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParameters , aQuery ) ; }
private void onSaveSanStorage ( ) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ( ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel ) ( getConfirmWindow ( ) ) ) ; if ( ( confirmationModel != null ) && ( ! ( confirmationModel.validate ( ) ) ) ) { return ; } cancelConfirm ( ) ; getWindow ( ) . startProgress ( ) ; org.ovirt.engine.ui.uicompat.Task.create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "SaveSan" } ) ) ) . run ( ) ; }
void initEditors ( ) { volumeTypeListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.storage.VolumeType > ( ) ) ; storageListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StorageDomainFreeSpaceRenderer ( ) ) ; volumeFormatListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer < org.ovirt.engine.core.common.businessentities.storage.VolumeFormat > ( ) ) ; sourceStorageListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.StorageDomainFreeSpaceRenderer ( ) ) ; diskProfileListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.profiles.DiskProfile > ( ) ) ; quotaListEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor ( new org.ovirt.engine.ui.common.widget.renderer.NameRenderer < org.ovirt.engine.core.common.businessentities.Quota > ( ) ) ; }
public org.ovirt.engine.core.common.businessentities.storage.ImageStatus getImageStatusByClassificationType ( org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { org.ovirt.engine.core.common.businessentities.storage.VolumeClassification cinderVolumeType = cinderDisk.getVolumeClassification ( ) ; if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Volume ) ) { return getDiskStatus ( cinderDisk.getImageId ( ) ) ; } else if ( cinderVolumeType == ( org.ovirt.engine.core.common.businessentities.storage.VolumeClassification.Snapshot ) ) { return getSnapshotStatus ( cinderDisk.getImageId ( ) ) ; } org.ovirt.engine.core.bll.storage.CinderBroker.log.error ( "Error, could not determine Cinder entity {} with id {} from Cinder provider." , cinderDisk.getDiskAlias ( ) , cinderDisk.getImageId ( ) ) ; return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL ; }
public boolean isHotPlugAvailable ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; return ( vm != null ) && ( ( ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Up ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Paused ) ) ) || ( ( vm.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VMStatus.Suspended ) ) ) ; }
private void initImportClonedTemplateDisks ( ) { for ( org.ovirt.engine.core.common.businessentities.DiskImage image : getImages ( ) ) { if ( getParameters ( ) . isImportAsNewEntity ( ) ) { generateNewDiskId ( image ) ; updateManagedDeviceMap ( image , getVmTemplate ( ) . getManagedDeviceMap ( ) ) ; } else { newDiskIdForDisk.put ( image.getId ( ) , image ) ; } } }
public org.ovirt.engine.core.bll.ValidationResult isConnectionExtensionExists ( org.ovirt.engine.core.compat.Guid connExtId ) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageServerConnectionExtensionDao ( ) . get ( connExtId ) ; if ( connExt == null ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_DOES_NOT_EXIST , java.lang.String.format ( "$%1$s %2$s" , "connExtId" , connExtId.toString ( ) ) ) ; } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
private org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler scheduleTimeout ( ) { java.lang.Class [ ] argTypes = new java.lang.Class [ 0 ] ; java.lang.Object [ ] args = new java.lang.Object [ 0 ] ; java.lang.Integer timeout = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.StoragePoolNonOperationalResetTimeoutInMin ) ; timerId = getScheduler ( ) . scheduleAOneTimeJob ( this , "onTimeout" , argTypes , args , timeout , java.util.concurrent.TimeUnit.MINUTES ) ; return this ; }
private void performGeoRepAction ( java.lang.String commandName , java.lang.String confirmTitle , org.ovirt.engine.ui.uicommonweb.help.HelpTag helpTag , java.lang.String hashName , java.lang.String action , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession selectedSession = getSelectedItem ( ) ; if ( selectedSession == null ) { return ; } initializeGeoRepActionConfirmation ( confirmTitle , helpTag , hashName , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants.geoRepForceHelp ( ) , org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.messages.geoRepForceTitle ( action ) , commandName , selectedSession.getMasterVolumeName ( ) , selectedSession.getSlaveVolumeName ( ) , selectedSession.getSlaveHostName ( ) , null ) ; onGeoRepSessionAction ( actionType ) ; }
private org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel createErrorNetworkModel ( java.lang.String networkName , java.lang.Integer vlanId ) { org.ovirt.engine.core.common.businessentities.Network errorNetwork = new org.ovirt.engine.core.common.businessentities.Network ( ) ; errorNetwork.setname ( networkName ) ; errorNetwork.setvlan_id ( vlanId ) ; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ( errorNetwork , this ) ; networkModel.setError ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . thisNetworkDoesNotExistInTheClusterErr ( ) ) ; networkMap.put ( networkName , networkModel ) ; return networkModel ; }
private boolean addMacToMap ( java.util.Map < java.lang.String , java.lang.Integer > macMap , java.lang.String mac ) { if ( ! ( macMap.containsKey ( mac ) ) ) { macMap.put ( mac , 1 ) ; return true ; } else if ( allowDuplicate ( ) ) { incrementMacInMap ( macMap , mac ) ; return true ; } return false ; }
public void testAddIncompleteParameters2 ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Disk model = org.ovirt.engine.api.restapi.resource.BackendVmDisksResourceTest.getModel ( ) ; model.setProvisionedSize ( null ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; control.replay ( ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Disk" , "testAddIncompleteParameters2" , "provisionedSize|size" ) ; } }
private void verifyModelSpecific ( org.ovirt.engine.api.model.Disk model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertTrue ( model.isSparse ( ) ) ; assertTrue ( model.isPropagateErrors ( ) ) ; }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType > cinderVolumeTypes ) { java.util.List < java.lang.String > volumeTypesNames = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType cinderVolumeType : cinderVolumeTypes ) { volumeTypesNames.add ( cinderVolumeType.getName ( ) ) ; } getCinderVolumeType ( ) . setItems ( volumeTypesNames ) ; }
public void checkExecuteCommandWithNullVdsId ( ) { parameters.setStorageServerConnection ( NFSConnection ) ; parameters.setVdsId ( null ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( command , org.mockito.Mockito.never ( ) ) . disconnectStorage ( ) ; }
public static java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > networksByName ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > networks ) { if ( ! ( networks.isEmpty ( ) ) ) { java.util.Map < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > byName = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network net : networks ) { byName.put ( net.getName ( ) , net ) ; } return byName ; } else { return java.util.Collections.emptyMap ( ) ; } }
public boolean existsPluggedInterfaceWithSameMac ( org.ovirt.engine.core.common.businessentities.network.VmNic interfaceToPlug ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > vmNetworkIntrefaces = getVmNicDao ( ) . getPluggedForMac ( interfaceToPlug.getMacAddress ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic vmNetworkInterface : vmNetworkIntrefaces ) { if ( ! ( interfaceToPlug.getId ( ) . equals ( vmNetworkInterface.getId ( ) ) ) ) { return true ; } } return false ; }
public void getVdsNullRun ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setRunOnVds ( null ) ; final org.ovirt.engine.core.compat.Guid vdsId = null ; b.setVds ( vds ) ; b.setVdsId ( vdsId ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.Assert.assertNull ( v ) ; }
protected java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > getParametersForChildCommand ( ) { java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > sortedList = getParameters ( ) . getImagesParameters ( ) ; java.util.Collections.sort ( sortedList , new java.util.Comparator < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) { @ java.lang.Override public int compare ( org.ovirt.engine.core.common.action.VdcActionParametersBase o1 , org.ovirt.engine.core.common.action.VdcActionParametersBase o2 ) { return ( ( org.ovirt.engine.core.common.action.ImagesActionsParametersBase ) ( o1 ) ) . getDestinationImageId ( ) . compareTo ( ( ( org.ovirt.engine.core.common.action.ImagesActionsParametersBase ) ( o2 ) ) . getDestinationImageId ( ) ) ; } } ) ; return sortedList ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { getWindow ( ) . stopProgress ( ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue ( ) ; if ( ( returnValueBase != null ) && ( returnValueBase.getSucceeded ( ) ) ) { cancel ( ) ; } }
private static void assertDiskDescriptionDecoding ( org.ovirt.engine.core.common.businessentities.storage.Disk disk ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.Disk diskToEnrich = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandler.getInstance ( ) . enrichDiskByJsonDescription ( org.ovirt.engine.core.bll.storage.disk.image.MetadataDiskDescriptionHandler.getInstance ( ) . generateJsonDiskDescription ( disk ) , diskToEnrich ) ; org.junit.Assert.assertEquals ( diskToEnrich , disk ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand.getAdGroupDAO ( ) ; org.ovirt.engine.core.common.businessentities.DbGroup groupToAdd = org.ovirt.engine.core.bll.AddGroupCommand.getParameters ( ) . getGroupToAdd ( ) ; org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = dao.getByExternalId ( groupToAdd.getDomain ( ) , groupToAdd.getExternalId ( ) ) ; if ( dbGroup == null ) { dao.save ( groupToAdd ) ; } else { dao.update ( dbGroup ) ; groupToAdd = dbGroup ; } setActionReturnValue ( groupToAdd.getId ( ) ) ; org.ovirt.engine.core.bll.AddGroupCommand.setSucceeded ( true ) ; }
public org.ovirt.engine.core.common.eventqueue.EventResult call ( ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( getParameters ( ) . getNewMasterDomainId ( ) , getParameters ( ) . getStoragePoolId ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStoragePoolIsoMapDao ( ) . save ( domainPoolMap ) ; executeReconstruct ( ) ; return new org.ovirt.engine.core.common.eventqueue.EventResult ( reconstructOpSucceeded , org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT ) ; }
private org.ovirt.engine.core.vdsbroker.monitoring.VmStatsRefresher getRefresherForVds ( org.ovirt.engine.core.vdsbroker.VdsManager vdsManager ) { org.ovirt.engine.core.compat.Version version = vdsManager.getCompatibilityVersion ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = vdsManager.getCopyVds ( ) ; if ( ( ( ( org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP ) == ( vds.getProtocol ( ) ) ) && ( org.ovirt.engine.core.common.FeatureSupported.vmStatsEvents ( version ) ) ) && ( org.ovirt.engine.core.common.FeatureSupported.events ( version ) ) ) { return new org.ovirt.engine.core.vdsbroker.monitoring.EventVmStatsRefresher ( vdsManager ) ; } return new org.ovirt.engine.core.vdsbroker.monitoring.PollListAndAllVmStatsRefresher ( vdsManager ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > runMultipleActions ( org.ovirt.engine.core.common.action.VdcActionType actionType , java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > multipleParams , boolean isRunOnlyIfAllCanDoPass , boolean isWaitForResult ) { org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug ( ( ( "Server: RunMultipleAction invoked! [amount of actions: " + ( multipleParams.size ( ) ) ) + "]" ) ) ; for ( org.ovirt.engine.core.common.action.VdcActionParametersBase params : multipleParams ) { params.setSessionId ( getSession ( ) . getId ( ) ) ; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcReturnValueBase > returnValues = getBackend ( ) . runMultipleActions ( actionType , multipleParams , isRunOnlyIfAllCanDoPass , isWaitForResult ) ; return returnValues ; }
private void doLoad ( org.ovirt.engine.api.extensions.ExtMap input ) { context = input.get ( Base.InvokeKeys.CONTEXT ) ; context.< java.util.Collection < java.lang.String > > get ( Base.ContextKeys.CONFIGURATION_SENSITIVE_KEYS ) . add ( "config.authn.user.password" ) ; context.mput ( Base.ContextKeys.AUTHOR , "The oVirt Project" ) . mput ( Base.ContextKeys.EXTENSION_NAME , "Internal Authn (Built-in)" ) . mput ( Base.ContextKeys.LICENSE , "ASL 2.0" ) . mput ( Base.ContextKeys.HOME_URL , "http://www.ovirt.org" ) . mput ( Base.ContextKeys.VERSION , "N/A" ) . mput ( Authn.ContextKeys.CAPABILITIES , ( ( Authn.Capabilities.AUTHENTICATE_CREDENTIALS ) | ( Authn.Capabilities.AUTHENTICATE_PASSWORD ) ) ) . mput ( Base.ContextKeys.BUILD_INTERFACE_VERSION , Base.INTERFACE_VERSION_CURRENT ) ; java.util.Properties config = context.get ( Base.ContextKeys.CONFIGURATION ) ; adminUser = config.getProperty ( "config.authn.user.name" , "admin" ) ; adminPassword = config.getProperty ( "config.authn.user.password" ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStoragePoolIsoMapDao ( ) ; storagePoolIsoMapDAO = dbFacade.getStoragePoolDao ( ) ; existingPool = storagePoolIsoMapDAO.get ( new org.ovirt.engine.core.compat.Guid ( "6d849ebf-755f-4552-ad09-9a090cda105d" ) ) ; existingStoragePoolIsoMap = dao.get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( org.ovirt.engine.core.dao.StoragePoolIsoMapDAOTest.EXISTING_ISO_ID , existingPool.getId ( ) ) ) ; newStoragePoolIsoMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap ( org.ovirt.engine.core.dao.StoragePoolIsoMapDAOTest.FREE_ISO_ID , existingPool.getId ( ) , org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unattached ) ; }
protected boolean validate ( ) { if ( ( getQuota ( ) ) == null ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST ) ; return false ; } if ( getQuota ( ) . isDefault ( ) ) { addValidationMessage ( EngineMessage.ACTION_TYPE_FAILED_QUOTA_DEFAULT_CANNOT_BE_CHANGED ) ; return false ; } return super . validate ( ) ; }
private void startRebalance ( ) { if ( ( getSelectedItems ( ) ) == null ) { return ; } java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > list = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( java.lang.Object item : getSelectedItems ( ) ) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = ( ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity ) ( item ) ) ; list.add ( new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRebalanceParameters ( volume.getId ( ) , false , false ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runMultipleAction ( VdcActionType.StartRebalanceGlusterVolume , list , null , true , true ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] array = ( ( java.lang.Object [ ] ) ( target ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior ) ( array [ 0 ] ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( array [ 1 ] ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; model.SetClusters ( model , clusters , null ) ; behavior.InitTemplate ( ) ; behavior.InitCdImage ( ) ; }
private void cleanupPassthroughVnics ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > vnicToVfMap = getVnicToVfMap ( ) ; if ( vnicToVfMap != null ) { hostNicVfsConfigHelper.setVmIdOnVfs ( org.ovirt.engine.core.bll.RunVmCommand.getVdsId ( ) , null , new java.util.HashSet ( vnicToVfMap.values ( ) ) ) ; } vfScheduler.cleanVmData ( org.ovirt.engine.core.bll.RunVmCommand.getVmId ( ) ) ; }
public java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > getClusterByServiceList ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > list , boolean supportsVirtService , boolean supportsGlusterService ) { final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > filteredList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : list ) { if ( ( supportsVirtService && ( cluster.supportsVirtService ( ) ) ) || ( supportsGlusterService && ( cluster.supportsGlusterService ( ) ) ) ) { filteredList.add ( cluster ) ; } } java.util.Collections.sort ( filteredList , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return filteredList ; }
protected void setUpFormatDomain ( boolean shouldFail ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; ret.setSucceeded ( ( ! shouldFail ) ) ; org.mockito.Mockito.doReturn ( ret ) . when ( command ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.FormatStorageDomain ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.Erratum erratum ) { if ( ( erratum.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.bug ( ) ; } else if ( ( erratum.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.enhancement ( ) ; } else if ( ( erratum.getType ( ) ) == ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY ) ) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.security ( ) ; } return null ; }
public java.lang.String getTooltip ( org.ovirt.engine.ui.uicommonweb.models.EntityModel object ) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel ) ( object.getEntity ( ) ) ) . getDisk ( ) ; if ( disk.isShareable ( ) ) { return org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmDiskAttachPopupWidget.constants.shareable ( ) ; } return null ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( ! ( bondDialogModel.validate ( ) ) ) { return ; } sourceListModel.setConfirmWindow ( null ) ; setBondOptions ( entity , bondDialogModel ) ; }
public static boolean checkVersionSupported ( final org.ovirt.engine.core.compat.Version compatibility_version ) { boolean result = true ; if ( ( compatibility_version == null ) || ( ! ( org.ovirt.engine.core.common.config.Config.< java.util.Set < org.ovirt.engine.core.compat.Version > > getValue ( ConfigValues.SupportedClusterLevels ) . contains ( compatibility_version ) ) ) ) { result = false ; } return result ; }
protected void removeSnapshot ( org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot ) { org.ovirt.engine.core.bll.BaseImagesCommand.getImageStorageDomainMapDao ( ) . remove ( snapshot.getImageId ( ) ) ; org.ovirt.engine.core.bll.BaseImagesCommand.getImageDao ( ) . remove ( snapshot.getImageId ( ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesForDisk = org.ovirt.engine.core.bll.BaseImagesCommand.getDiskImageDao ( ) . getAllSnapshotsForImageGroup ( snapshot.getId ( ) ) ; if ( ( imagesForDisk == null ) || ( imagesForDisk.isEmpty ( ) ) ) { org.ovirt.engine.core.bll.BaseImagesCommand.getBaseDiskDao ( ) . remove ( snapshot.getId ( ) ) ; } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { @ java.lang.SuppressWarnings ( value = "unchecked" ) final java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ; final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVmListModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostVmListModel ) ( target ) ) ; model.setItems ( list ) ; }
protected void executeVmCommand ( ) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand ( ) ; if ( retValue.getSucceeded ( ) ) { getVdsManager ( ) . addV2VJobInfoForVm ( org.ovirt.engine.core.bll.ConvertVmCommand.getVmId ( ) , JobStatus.WAIT_FOR_START ) ; org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded ( true ) ; } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" ) ; setCommandStatus ( CommandStatus.FAILED ) ; } } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error ( "Failed to convert VM" , e ) ; setCommandStatus ( CommandStatus.FAILED ) ; } }
protected void executeQueryCommand ( ) { org.ovirt.engine.core.bll.GetVmPoolByIdQuery.getQueryReturnValue ( ) . setReturnValue ( org.ovirt.engine.core.bll.GetVmPoolByIdQuery.getDbFacade ( ) . getVmPoolDao ( ) . get ( org.ovirt.engine.core.bll.GetVmPoolByIdQuery.getParameters ( ) . getId ( ) , org.ovirt.engine.core.bll.GetVmPoolByIdQuery.getUserID ( ) , org.ovirt.engine.core.bll.GetVmPoolByIdQuery.getParameters ( ) . isFiltered ( ) ) ) ; }
public void authenticate ( java.lang.String name , java.lang.String password ) { broker.runAdAction ( AdActionType.AuthenticateUser , new org.ovirt.engine.core.bll.adbroker.LdapUserPasswordBaseParameters ( getProfileName ( ) , name , password ) ) ; }
void addStyles ( ) { advancedParametersExpanderContent.setStyleName ( style.advancedParametersExpanderContent ( ) ) ; warningLowSpaceIndicatorEditor.addContentWidgetContainerStyleName ( style.warningTextBoxEditor ( ) ) ; criticalSpaceActionBlockerEditor.addContentWidgetStyleName ( style.blockerTextBoxEditor ( ) ) ; formatListEditor.addContentWidgetStyleName ( style.formatListEditor ( ) ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; vm = FixturesTool.VM_RHEL5_POOL_50 ; existingUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544a" ) ) ; deletableUser = dao.get ( new org.ovirt.engine.core.compat.Guid ( "9bf7c640-b620-456f-a550-0348f366544b" ) ) ; newUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser ( ) ; newUser.setExternalId ( "0" ) ; newUser.setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; newUser.setFirstName ( "Bob" ) ; newUser.setLastName ( "Milqtoste" ) ; newUser.setLoginName ( "newuser" ) ; newUser.setEmail ( "newuser@redhat.com" ) ; newUser.setDomain ( "domain" ) ; newUser.setGroupNames ( new java.util.LinkedList < > ( java.util.Collections.singletonList ( "groups" ) ) ) ; newUser.setNamespace ( "*" ) ; }
protected void cretaeVirtIODisk ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk.setImageId ( diskImageGuid ) ; disk.setDiskInterface ( DiskInterface.VirtIO ) ; disk.setactive ( true ) ; disk.setvm_guid ( vmId ) ; org.mockito.Mockito.doReturn ( diskDao ) . when ( command ) . getDiskDao ( ) ; org.mockito.Mockito.when ( diskDao.get ( diskImageGuid ) ) . thenReturn ( disk ) ; mockVmDevice ( false ) ; }
private void loadExternalScheduler ( ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > getValue ( ConfigValues.ExternalSchedulerEnabled ) ) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "Starting external scheduler discovery thread" ) ; org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void run ( ) { if ( exSchedulerDiscovery.discover ( ) ) { reloadPolicyUnits ( ) ; } } } ) ; } else { exSchedulerDiscovery.markAllExternalPoliciesAsDisabled ( ) ; org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info ( "External scheduler disabled, discovery skipped" ) ; } }
private org.ovirt.engine.core.common.businessentities.StorageDomain initStorageDomain ( org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setId ( storageDomainId ) ; storageDomain.setStoragePoolId ( storagePoolId ) ; org.mockito.Mockito.when ( storageDomainDao.get ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( storageDomain ) ; org.mockito.Mockito.when ( storageDomainDao.getForStoragePool ( storageDomainId , storagePoolId ) ) . thenReturn ( storageDomain ) ; return storageDomain ; }
void initAlertEventFooterPanel ( org.ovirt.engine.ui.webadmin.uicommon.model.AlertModelProvider alertModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.EventModelProvider eventModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.TaskModelProvider taskModelProvider , com.google.gwt.event.shared.EventBus eventBus , org.ovirt.engine.ui.common.system.ClientStorage clientStorage ) { alertEventFooterPanel.add ( new org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView ( alertModelProvider , eventModelProvider , taskModelProvider , eventBus , clientStorage ) ) ; }
public void setUp ( ) throws java.lang.Exception { file = new java.io.File ( this . getClass ( ) . getResource ( "small_file.txt" ) . toURI ( ) ) ; testServlet = new org.ovirt.engine.core.utils.servlet.FileServlet ( ) ; }
public void readData ( java.io.ObjectInputStream dis ) { synchronized ( ovirt_engine_dwh.aggregationtodaily_3_4.AggregationToDaily.row11Struct.commonByteArrayLock_OVIRT_ENGINE_DWH_AggregationToDaily ) { try { int length = 0 ; this . var_name = readString ( dis ) ; this . var_datetime = readDate ( dis ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } }
public void testFetchSpecificQuotaUsageForSpecificVdsGroup ( ) throws java.lang.Exception { java.util.List < org.ovirt.engine.core.common.businessentities.QuotaVdsGroup > quotaVdsGroupList = dao.getQuotaVdsGroupByVdsGroupGuid ( FixturesTool.VDS_GROUP_RHEL6_ISCSI , FixturesTool.QUOTA_SPECIFIC ) ; org.ovirt.engine.core.common.businessentities.QuotaVdsGroup quotaVdsGroup = quotaVdsGroupList.get ( 0 ) ; org.junit.Assert.assertNotNull ( quotaVdsGroup ) ; org.junit.Assert.assertEquals ( true , ( ( quotaVdsGroupList.size ( ) ) == 1 ) ) ; org.junit.Assert.assertEquals ( quotaVdsGroup.getVirtualCpu ( ) , java.lang.Integer.valueOf ( 10 ) ) ; }
private org.apache.http.conn.ClientConnectionManager createPoolingClientConnectionManager ( java.lang.String url , int port ) { org.apache.http.conn.scheme.SchemeRegistry schemeRegistry = createSchemeRegistry ( url , port ) ; org.apache.http.impl.conn.PoolingClientConnectionManager cm = new org.apache.http.impl.conn.PoolingClientConnectionManager ( schemeRegistry ) ; cm.setMaxTotal ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS ) ; cm.setDefaultMaxPerRoute ( org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_ROUTE ) ; cm.setMaxPerRoute ( new org.apache.http.conn.routing.HttpRoute ( new org.apache.http.HttpHost ( getHost ( url ) , getPort ( url , port ) ) ) , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.MAX_CONNECTIONS_PER_HOST ) ; new org.ovirt.engine.sdk.web.IdleConnectionMonitorThread ( cm , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.WAIT_IDLE_CHECK_TTL , org.ovirt.engine.sdk.web.ConnectionsPoolBuilder.WAIT_IDLE_CLOSE_TTL ) . start ( ) ; return cm ; }
private static void failureEventHandler ( java.lang.Throwable caught ) { java.lang.String errorMessage ; if ( caught instanceof com.google.gwt.user.client.rpc.StatusCodeException ) { errorMessage = ( ( org.ovirt.engine.ui.frontend.Frontend.getConstants ( ) . requestToServerFailedWithCode ( ) ) + ": " ) + ( ( ( com.google.gwt.user.client.rpc.StatusCodeException ) ( caught ) ) . getStatusCode ( ) ) ; } else { errorMessage = ( ( org.ovirt.engine.ui.frontend.Frontend.getConstants ( ) . requestToServerFailed ( ) ) + ": " ) + ( caught.getLocalizedMessage ( ) ) ; } org.ovirt.engine.ui.frontend.Frontend.failureEventHandler ( errorMessage ) ; }
public void testRemoveStoragePoolIsoMap ( ) { dao.remove ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap.getstorage_id ( ) , existingStoragePoolIsoMap.getstorage_pool_id ( ) ) ) ; org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap result = dao.get ( new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId ( existingStoragePoolIsoMap.getstorage_id ( ) , existingStoragePoolIsoMap.getstorage_pool_id ( ) ) ) ; org.junit.Assert.assertNull ( result ) ; }
public static < T > java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > toEntityModelList ( java.util.ArrayList < T > list ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > entityModelList = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > > ( ) ; if ( list != null ) { for ( T item : list ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < T > ( ) ; model.setEntity ( item ) ; entityModelList.add ( model ) ; } } return entityModelList ; }
private void initCommand ( ) { final org.ovirt.engine.core.compat.Guid sourceSnapshotId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; command = setupCanAddVmFromSnapshotTests ( 0 , sourceSnapshotId ) ; generateStorageToDisksMap ( command ) ; initDestSDs ( command ) ; storageDomainValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class ) ; snapshotsValidator = org.mockito.Mockito.mock ( org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class ) ; }
public java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > getPermissionCheckSubjects ( ) { if ( ( ( permsList ) == null ) && ( ( getDisk ( ) ) != null ) ) { permsList = new java.util.ArrayList < > ( ) ; permsList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getDisk ( ) . getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.ATTACH_DISK ) ) ; permsList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( getDisk ( ) . getId ( ) , org.ovirt.engine.core.common.VdcObjectType.Disk , org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES ) ) ; } return permsList ; }
public void exampleToMapDefaultMapper ( ) { java.util.Map < java.lang.String , java.lang.String > map = org.ovirt.engine.core.utils.linq.LinqUtils.toMap ( list , new org.ovirt.engine.core.utils.linq.DefaultMapper < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public java.lang.String createKey ( java.lang.String s ) { return s.substring ( 0 , 1 ) ; } } ) ; java.util.Map < java.lang.String , java.lang.String > example = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; example.put ( "t" , "three" ) ; example.put ( "o" , "one" ) ; org.junit.Assert.assertEquals ( map , example ) ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STOPPED_VOLUME_ID ) ; org.mockito.Mockito.doReturn ( getGlusterVolume ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ) . when ( volumeDao ) . getById ( org.ovirt.engine.core.bll.gluster.StartGlusterVolumeProfileCommandTest.STARTED_VOLUME_ID ) ; }
public static void setGatewayIfNecessary ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.VDS host , java.lang.String gateway ) { final org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil managementNetworkUtil = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getManagementNetworkUtil ( ) ; if ( ( ( org.ovirt.engine.core.common.FeatureSupported.multipleGatewaysSupported ( host.getVdsGroupCompatibilityVersion ( ) ) ) || ( managementNetworkUtil.isManagementNetwork ( iface.getNetworkName ( ) , host.getVdsGroupId ( ) ) ) ) || ( iface.getName ( ) . equals ( host.getActiveNic ( ) ) ) ) { iface.setGateway ( gateway ) ; } }
public void onValueChange ( com.google.gwt.event.logical.shared.ValueChangeEvent < T > event ) { T value = event.getValue ( ) ; boolean becomingGhost = isGhost ( value ) ; if ( becomingGhost != ( wasGhost ) ) { setButtonEnabled ( widget , ( ! becomingGhost ) ) ; toggleGhost ( value , widget , becomingGhost ) ; wasGhost = becomingGhost ; } }
public void onSuccess ( java.util.List < org.ovirt.engine.core.compat.Version > versions ) { org.ovirt.engine.core.compat.Version versionToSelect = calculateNewVersionWhichShouldBeSelected ( versions ) ; getVersion ( ) . setItems ( versions , versionToSelect ) ; }
public void mockConfig ( ) { org.mockito.Mockito.when ( host.getClusterCompatibilityVersion ( ) ) . thenReturn ( version ) ; configRule.mockConfigValue ( ConfigValues.DefaultMTU , 1500 ) ; configRule.mockConfigValue ( ConfigValues.HostNetworkQosSupported , version , false ) ; }
protected org.ovirt.engine.api.model.VM getEntity ( ) { if ( ( vm ) != null ) { return vm ; } for ( org.ovirt.engine.api.model.VM entity : parent.getEntitiesFromExportDomain ( ) ) { if ( guid.equals ( entity.getId ( ) ) ) { vm = entity ; return entity ; } } return entityNotFound ( ) ; }
public void storagePoolIdWithStoragePool ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; b.setStoragePoolId ( null ) ; final org.ovirt.engine.core.common.businessentities.StoragePool p = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; p.setId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID ) ; b.setStoragePool ( p ) ; final org.ovirt.engine.core.compat.NGuid n = b.getStoragePoolId ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID , n ) ; }
private boolean isEditAvailable ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain ) { if ( storageDomain == null ) { return false ; } boolean isActive = ( ( storageDomain.getstorage_domain_shared_status ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Active ) ) || ( ( storageDomain.getstorage_domain_shared_status ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Mixed ) ) ; boolean isBlockStorage = storageDomain.getstorage_type ( ) . isBlockDomain ( ) ; return isBlockStorage ? true : isActive ; }
protected void verifyModel ( org.ovirt.engine.api.model.User model , int index ) { assertEquals ( GUIDS [ index ] . toString ( ) , model.getId ( ) ) ; assertEquals ( ( ( ( NAMES [ index ] ) + "@" ) + ( DOMAIN ) ) , model.getUserName ( ) ) ; assertNotNull ( model.getDomain ( ) ) ; assertEquals ( new org.ovirt.engine.core.compat.Guid ( org.ovirt.engine.api.restapi.resource.DOMAIN.getBytes ( ) , true ) . toString ( ) , model.getDomain ( ) . getId ( ) ) ; assertTrue ( model.isSetGroups ( ) ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.PARSED_GROUPS.length , model.getGroups ( ) . getGroups ( ) . size ( ) ) ; for ( int i = 0 ; i < ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.PARSED_GROUPS.length ) ; i ++ ) { org.ovirt.engine.api.model.Group group = model.getGroups ( ) . getGroups ( ) . get ( i ) ; assertEquals ( org.ovirt.engine.api.restapi.resource.BackendUsersResourceTest.PARSED_GROUPS [ i ] , group.getName ( ) ) ; } verifyLinks ( model ) ; }
private void reportNonOperationReason ( org.ovirt.engine.core.common.businessentities.NonOperationalReason reason , java.lang.String compatibleVersions , java.lang.String vdsSupportedVersions ) { java.util.Map < java.lang.String , java.lang.String > customLogValues = new java.util.HashMap < > ( ) ; customLogValues.put ( "CompatibilityVersion" , compatibleVersions ) ; customLogValues.put ( "VdsSupportedVersions" , vdsSupportedVersions ) ; reportNonOperationReason ( reason , customLogValues ) ; }
protected void onEntityContentChanged ( ) { super . onEntityContentChanged ( ) ; if ( ( getEntity ( ) ) != null ) { getSearchCommand ( ) . execute ( ) ; } else { setItems ( null ) ; } }
public void setup ( ) { urlValidation = org.mockito.Mockito.spy ( new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation ( new java.lang.String [ ] { org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP } ) ) ; hostValidation = new org.ovirt.engine.ui.uicommonweb.validation.UriHostAddressValidation ( null ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getUriMessage ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( urlValidation ) . getSchemeMessage ( org.mockito.ArgumentMatchers.any ( ) ) ; org.mockito.Mockito.doReturn ( hostValidation ) . when ( urlValidation ) . getHostValidation ( ) ; }
protected boolean validate ( ) { if ( ! ( super . validate ( ) ) ) { return false ; } org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator brickValidator = new org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator ( ) ; return validate ( brickValidator.canRemoveBrick ( getParameters ( ) . getBricks ( ) , getGlusterVolume ( ) , getParameters ( ) . getReplicaCount ( ) , false ) ) ; }
protected void initAppsTable ( ) { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable ( false , true ) ; org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn < java.lang.String > ( ) { @ java.lang.Override public java.lang.String getValue ( java.lang.String appName ) { return appName ; } } ; appsTable.addColumn ( appNameColumn , org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot ( ) ) ; appsTable.setRowData ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) ; appsTable.setWidth ( "100%" , true ) ; appsTable.setSelectionModel ( new com.google.gwt.view.client.NoSelectionModel ( ) ) ; }
private void saveNfsStorage ( ) { if ( ( getWindow ( ) . getProgress ( ) ) != null ) { return ; } getWindow ( ) . startProgress ( ) ; org.ovirt.engine.ui.uicompat.Task.create ( this , new java.util.ArrayList < java.lang.Object > ( java.util.Arrays.asList ( new java.lang.Object [ ] { "SaveNfs" } ) ) ) . run ( ) ; }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public static void initLinuxOsTypes ( ) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; callback.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsIds = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.OsRepository , new org.ovirt.engine.core.common.queries.OsQueryParameters ( org.ovirt.engine.core.common.queries.OsQueryParameters.OsRepositoryVerb.GetLinuxOss ) , callback ) ; }
public void testAddHostedEngineStorageFails ( ) { org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest.getLUNs ( ) ) . when ( command ) . getLUNsFromVgInfo ( parameters.getStorageDomain ( ) . getStorage ( ) ) ; org.mockito.Mockito.doReturn ( java.util.Collections.emptyList ( ) ) . when ( command ) . getAllLuns ( ) ; parameters.getStorageDomain ( ) . setStorageName ( StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME ) ; org.junit.Assert.assertFalse ( command.canAddDomain ( ) ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages ( "Add self hosted engine storage domain succeeded where it should have failed" , command , VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE ) ; }
private void updateReportsAvailability ( ) { if ( org.ovirt.engine.ui.uicommonweb.ReportInit.getInstance ( ) . isReportsEnabled ( ) ) { java.util.List < org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition < org.ovirt.engine.core.common.businessentities.StoragePool > > resourceSubActions = org.ovirt.engine.ui.webadmin.uicommon.ReportActionsHelper.getInstance ( ) . getResourceSubActions ( "DataCenter" , getModelProvider ( ) ) ; if ( ( resourceSubActions != null ) && ( ( resourceSubActions.size ( ) ) > 0 ) ) { getTable ( ) . addActionButton ( new org.ovirt.engine.ui.webadmin.widget.action.WebAdminMenuBarButtonDefinition ( org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabDataCenterView.constants.showReportDC ( ) , resourceSubActions ) ) ; } } }
public void removeAll ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNic > interfaces = java.util.Arrays.asList ( org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) , org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface ( ) ) ; org.mockito.Mockito.when ( vmNicDao.getAllForVm ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( interfaces ) ; vmInterfaceManager.removeAll ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces ) { verifyRemoveAllDelegatedCorrectly ( iface ) ; } }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = result.getReturnValue ( ) ; if ( vm == null ) { return ; } setVM ( vm ) ; syncSearch ( ) ; } }
private java.lang.String getValue ( ) { org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine ( ( ( ( ( ( ( ( ( isActive ( ) ? "Refresh Status: Active(" : "Inactive(" ) + ( isPaused ( ) ? "paused)" : "running)" ) ) + ":" ) + " Rate: " ) + ( rateCycle [ currentRate ] ) ) + "(" ) + ( ( getRefreshRate ( ) ) / 1000 ) ) + " sec)" ) ) ; return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . refreshInterval ( ( ( getRefreshRate ( ) ) / 1000 ) ) ; }
private void assertAllDisksAreActive ( java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.Disk > disks ) { for ( org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks ) { if ( disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk ) { continue ; } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( disk ) ) ; org.junit.Assert.assertTrue ( "disk should be active" , diskImage.getActive ( ) ) ; } }
public final void AddField ( java.lang.Enum < ? > status , java.lang.String fieldName ) { java.util.List < java.lang.String > values = null ; if ( ! ( ( values = mDictionary.get ( status ) ) != null ) ) { values = new java.util.ArrayList < java.lang.String > ( ) ; mDictionary.put ( status , values ) ; } if ( ! ( values.contains ( fieldName ) ) ) { values.add ( fieldName ) ; } }
private void setupMock ( ) throws java.lang.Exception { commandMock = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.ClearExternalJobCommand ( parameters , null ) ) ; org.mockito.Mockito.when ( commandMock.getParameters ( ) ) . thenReturn ( parameters ) ; org.mockito.Mockito.doReturn ( jobDaoMock ) . when ( commandMock ) . getJobDao ( ) ; org.mockito.Mockito.when ( jobDaoMock.get ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) . thenReturn ( makeTestJob ( org.ovirt.engine.core.bll.ClearExternalJobCommandTest.jobId ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageServerConnections createPosixConnection ( java.lang.String connection , org.ovirt.engine.core.common.businessentities.StorageType type , java.lang.String vfsType , java.lang.String mountOptions ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionDetails = populateBasicConnectionDetails ( connection , type ) ; connectionDetails.setVfsType ( vfsType ) ; connectionDetails.setMountOptions ( mountOptions ) ; return connectionDetails ; }
public void storageDomain ( ) { final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; b.setStorageDomain ( s ) ; final org.ovirt.engine.core.common.businessentities.StorageDomain st = b.getStorageDomain ( ) ; org.junit.Assert.assertEquals ( s , st ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportRepoImageBaseModel ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . filterClustersWithoutArchitecture ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) ; model.getCluster ( ) . setItems ( clusters ) ; model.getCluster ( ) . setIsEmpty ( clusters.isEmpty ( ) ) ; model.updateControlsAvailability ( ) ; stopProgress ( ) ; }
private boolean isDomainExistsInDiskDescription ( java.util.Map < java.lang.String , java.lang.Object > map , org.ovirt.engine.core.compat.Guid storageDomainId ) { if ( ( map.get ( OvfInfoFileConstants.Domains ) ) == null ) { return false ; } return map.get ( OvfInfoFileConstants.Domains ) . toString ( ) . contains ( storageDomainId.toString ( ) ) ; }
public void validateFailsOnServerNotUp ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID ) , null ) ) ; setUpMocksForAdd ( VDSStatus.Down ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString ( ) ) ) ; }
private org.ovirt.engine.core.common.businessentities.Cluster createCluster ( int index ) { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster ( ) ; cluster.setId ( org.ovirt.engine.core.bll.gluster.GlusterHookSyncJobTest.CLUSTER_GUIDS [ index ] ) ; cluster.setName ( "cluster" ) ; cluster.setGlusterService ( true ) ; cluster.setVirtService ( false ) ; return cluster ; }
public void diskInterfaceSupportedByOs ( ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM ( ) ; initializeOsRepository ( DiskInterface.VirtIO ) ; org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement ( ) ; dve.setDiskInterface ( DiskInterface.VirtIO ) ; org.junit.Assert.assertThat ( validator.isDiskInterfaceSupported ( vm , dve ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
private void addImportedDiskDevices ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > vmDevicesToUpdate ) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId ( ) ; for ( org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks ( vmBase.getImages ( ) ) ) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId ( ) ; org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice ( vmId , deviceId , getVmDeviceAddress ( vmBase , vmId ) ) ; updateImportedVmDevice ( vmBase , vmDevice , deviceId , vmDevicesToUpdate ) ; } }
public static void getStorageConnectionById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String id , boolean isRefresh ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageServerConnections ) ( source ) ) : null ; } } ; org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase params = new org.ovirt.engine.core.common.queries.StorageServerConnectionQueryParametersBase ( id ) ; params.setRefresh ( isRefresh ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetStorageServerConnectionById , params , aQuery ) ; }
protected org.ovirt.engine.core.common.businessentities.VmDevice generateNewEntity ( ) { java.util.Map < java.lang.String , java.lang.String > customProp = new java.util.LinkedHashMap < > ( ) ; customProp.put ( "prop1" , "value1" ) ; return new org.ovirt.engine.core.common.businessentities.VmDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , org.ovirt.engine.core.dao.VmDeviceDAOTest.EXISTING_VM_ID ) , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK , "floppy" , "type:'drive', controller:'0', bus:'0', unit:'1'" , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , "alias" , customProp , null ) ; }
private java.lang.Integer getWarningLowSpaceSize ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel ) { java.lang.Integer percentageValue = warningLowSpaceIndicatorEditor.asValueBox ( ) . getValue ( ) ; return percentageValue == null ? 0 : ( ( storageModel.getStorage ( ) . getTotalDiskSize ( ) ) * percentageValue ) / 100 ; }
private org.ovirt.engine.core.vdsbroker.monitoring.VmStatsRefresher getRefresherForVds ( org.ovirt.engine.core.vdsbroker.VdsManager vdsManager ) { org.ovirt.engine.core.common.businessentities.VDS vds = vdsManager.getCopyVds ( ) ; if ( ( org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP ) == ( vds.getProtocol ( ) ) ) { return new org.ovirt.engine.core.vdsbroker.monitoring.EventVmStatsRefresher ( vdsManager ) ; } return new org.ovirt.engine.core.vdsbroker.monitoring.PollListAndAllVmStatsRefresher ( vdsManager ) ; }
private void mockBackend ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito.doReturn ( backend ) . when ( cmd ) . getBackend ( ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; vdsReturnValue.setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , "" ) ) ; } org.mockito.Mockito.when ( vdsBrokerFrontend.runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.RemoveGlusterHook ) , org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( vdsReturnValue ) ; }
protected boolean detachStorage ( org.ovirt.engine.core.common.businessentities.StorageDomain dom ) { org.ovirt.engine.core.compat.Guid domId = dom.getId ( ) ; org.ovirt.engine.core.compat.Guid poolId = dom.getStoragePoolId ( ) . getValue ( ) ; org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters params = new org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters ( domId , poolId ) ; params.setDestroyingPool ( org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters ( ) . getDestroyingPool ( ) ) ; return org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getBackend ( ) . runInternalAction ( VdcActionType.DetachStorageDomainFromPool , params ) . getSucceeded ( ) ; }
public void validateSuccess ( ) { org.mockito.Mockito.when ( validator.isConnectionForISCSIDomainAttached ( domain ) ) . thenReturn ( java.lang.Boolean.FALSE ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess ( command ) ; }
private void containerChanged ( ) { if ( ( getContainer ( ) ) == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.ListModel < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenter = getContainer ( ) . getDataCenter ( ) ; dataCenter.getSelectedItemChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { containerDataCenterChanged ( ) ; } } ) ; if ( ( dataCenter.getSelectedItem ( ) ) != null ) { containerDataCenterChanged ( ) ; } }
private void setupMock ( ) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; returnValue.setSucceeded ( true ) ; returnValue.setReturnValue ( expected ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( getQuery ( ) ) . runVdsCommand ( org.mockito.ArgumentMatchers.eq ( VDSCommandType.GetGlusterVolumeOptionsInfo ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ; org.mockito.Mockito.when ( glusterUtils.getUpServer ( CLUSTER_ID ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
public void testList ( ) throws java.lang.Exception { int numOfEntitiesInList = 2 ; setUpGetEntityExpectations ( VdcQueryType.GetStorageServerConnectionExtensionsByHostId , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { org.ovirt.engine.api.restapi.resource.BackendStorageServerConnectionExtensionsResourceTest.hostID } , getEntityList ( numOfEntitiesInList ) ) ; javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations ( null ) ; collection.setUriInfo ( uriInfo ) ; java.util.List < org.ovirt.engine.api.model.StorageConnectionExtension > retCollection = getCollection ( ) ; assertNotNull ( retCollection ) ; assertEquals ( numOfEntitiesInList , retCollection.size ( ) ) ; }
private void saveToDb ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable , org.ovirt.engine.core.common.AuditLogType logType , java.lang.String loggerString ) { org.ovirt.engine.core.common.AuditLogSeverity severity = logType.getSeverity ( ) ; org.ovirt.engine.core.common.businessentities.AuditLog auditLog = createAuditLog ( auditLogable , logType , loggerString , severity ) ; if ( auditLog == null ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.warn ( "Unable to create AuditLog" ) ; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.setPropertiesFromAuditLogableBase ( auditLogable , auditLog ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance ( ) . getAuditLogDao ( ) . save ( auditLog ) ; logMessage ( severity , org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessageToLog ( loggerString , auditLog ) ) ; } }
public void run ( ) { try { waitForTasksToBeCleared ( ) ; executeDeactivateCommnad ( false ) ; ctx.resetCompensation ( ) ; } catch ( java.lang.Exception e ) { log.error ( "Error when attempting to deactivate storage domain {}" , getStorageDomainId ( ) , e ) ; compensate ( ) ; } }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getRunOnVds ( ) ) != null ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getRunOnVds ( ) , vmDynamicData ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getVmDynamicDao ( ) . update ( vmDynamicData ) ; } }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getRunOnVds ( ) ) != null ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getRunOnVds ( ) , vmDynamicData ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.getVmDynamicDao ( ) . update ( vmDynamicData ) ; } }
public org.ovirt.engine.api.model.Files list ( ) { if ( org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isIsoDomain ( getEntity ( org.ovirt.engine.api.model.StorageDomain.class , VdcQueryType.GetStorageDomainById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( asGuid ( storageDomainId ) ) , "storage_domain" ) ) ) { return mapCollection ( listFiles ( ) ) ; } else { return notFound ( org.ovirt.engine.api.model.Files.class ) ; } }
private void mockDiskImageDao ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.Disk > diskImageList = new java.util.ArrayList < > ( ) ; org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Collections.singletonList ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ) ) ; diskImageList.add ( diskImage ) ; org.mockito.Mockito.when ( diskDao.getAllForVm ( vmId ) ) . thenReturn ( diskImageList ) ; }
private void initDiskStorageDomain ( org.ovirt.engine.core.common.businessentities.storage.StorageType storageType , java.lang.Boolean sdSupportsDiscard ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; storageDomain.setStorageName ( org.ovirt.engine.core.bll.validator.storage.DiskVmElementDiscardSupportValidatorTest.storageDomainName ) ; storageDomain.setStorageType ( storageType ) ; storageDomain.setSupportsDiscard ( sdSupportsDiscard ) ; storageDomainId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; storageDomain.setId ( storageDomainId ) ; org.mockito.MockitoAnnotations.initMocks ( this ) ; org.ovirt.engine.core.bll.validator.storage.DiskVmElementDiscardSupportValidatorTest.injectorRule.bind ( org.ovirt.engine.core.dao.StorageDomainDao.class , storageDomainDao ) ; org.mockito.Mockito.when ( storageDomainDao.get ( storageDomainId ) ) . thenReturn ( storageDomain ) ; }
protected org.ovirt.engine.core.common.businessentities.VdsDynamic generateNewEntity ( ) { org.ovirt.engine.core.common.businessentities.VdsDynamic newDynamicVds = new org.ovirt.engine.core.common.businessentities.VdsDynamic ( ) ; newDynamicVds.setId ( FixturesTool.VDS_JUST_STATIC_ID ) ; newDynamicVds.setUpdateAvailable ( true ) ; return newDynamicVds ; }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( ( p.getUsageCpuPercent ( ) ) + ( calcSpmCpuConsumption ( p ) ) ) >= highUtilization ) && ( ( p.getCpuOverCommitTimestamp ( ) ) != null ) ) && ( ( ( getTime ( ) . getTime ( ) ) - ( p.getCpuOverCommitTimestamp ( ) . getTime ( ) ) ) >= ( java.util.concurrent.TimeUnit.MINUTES.toMillis ( cpuOverCommitDurationMinutes ) ) ) ) && ( ( p.getVmCount ( ) ) > 0 ) ; }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.RoleGroupMapId ) ) { return false ; } org.ovirt.engine.core.common.businessentities.RoleGroupMapId other = ( ( org.ovirt.engine.core.common.businessentities.RoleGroupMapId ) ( obj ) ) ; return ( java.util.Objects.equals ( actionGroup , other.actionGroup ) ) && ( java.util.Objects.equals ( roleId , other.roleId ) ) ; }
protected void executeCommand ( ) { AddCustomValue ( "InterfaceType" , org.ovirt.engine.core.common.businessentities.VmInterfaceType.forValue ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.getParameters ( ) . getInterface ( ) . getType ( ) ) . getDescription ( ) . toString ( ) ) ; org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.getVmNetworkInterfaceDao ( ) . update ( org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.getParameters ( ) . getInterface ( ) ) ; org.ovirt.engine.core.bll.UpdateVmTemplateInterfaceCommand.setSucceeded ( true ) ; }
private void setupMock ( ) { expected = getExpectedHooksList ( ) ; emptyList = new java.util.ArrayList < > ( ) ; org.mockito.Mockito.doReturn ( org.ovirt.engine.core.bll.gluster.GetGlusterHooksQueryTest.CLUSTER_ID ) . when ( getQueryParameters ( ) ) . getClusterId ( ) ; }
private void initNetworkModels ( ) { java.util.Map < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > networkModels = new java.util.HashMap < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel > ( ) ; for ( org.ovirt.engine.core.common.businessentities.Network network : allNetworks ) { networkModels.put ( network.getname ( ) , new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel ( network , this ) ) ; } setNetworks ( networkModels ) ; }
protected org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion computeTemplateWithVersionToSelect ( java.util.List < org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion > newItems , org.ovirt.engine.core.compat.Guid previousTemplateId , boolean useLatest , boolean addLatest ) { if ( previousTemplateId == null ) { return org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.computeNewTemplateWithVersionToSelect ( newItems , addLatest ) ; } org.ovirt.engine.ui.uicommonweb.models.templates.TemplateWithVersion oldTemplateToSelect = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( newItems , new org.ovirt.engine.ui.uicommonweb.Linq.TemplateWithVersionPredicate ( previousTemplateId , useLatest ) ) ; return oldTemplateToSelect != null ? oldTemplateToSelect : org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.computeNewTemplateWithVersionToSelect ( newItems , addLatest ) ; }
void registerModelEventListeners ( final org.ovirt.engine.ui.common.uicommon.model.ModelProvider < ? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel > modelProvider ) { modelProvider.getModel ( ) . getPropertyChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args ) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = args ; if ( "IsAvailable" . equals ( pcArgs.propertyName ) ) { boolean isAvailable = modelProvider.getModel ( ) . getIsAvailable ( ) ; setAccessible ( isAvailable ) ; } } } ) ; }
public static void getPoolById ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid poolId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVmPoolById , new org.ovirt.engine.core.common.queries.IdQueryParameters ( poolId ) , aQuery ) ; }
public void prepareMocks ( ) { org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( cmd ) . getUpServer ( ) ; org.mockito.Mockito.doReturn ( getSingleBrickVolume ( volumeId1 ) ) . when ( volumeDao ) . getById ( volumeId1 ) ; org.mockito.Mockito.doReturn ( getMultiBrickVolume ( volumeId2 ) ) . when ( volumeDao ) . getById ( volumeId2 ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . getCluster ( ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ( ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; clusterGuideModel.allHosts = hosts ; clusterGuideModel.updateOptionsNonLocalFS ( ) ; }
public org.ovirt.engine.core.aaa.DirectoryUser findUser ( org.ovirt.engine.core.common.utils.ExternalId id ) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction ( AdActionType.GetAdUserByUserId , new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByIdParameters ( getName ( ) , id ) ) ; org.ovirt.engine.core.common.businessentities.LdapUser ldapUser = ( ( org.ovirt.engine.core.common.businessentities.LdapUser ) ( ldapResult.getReturnValue ( ) ) ) ; return mapUser ( ldapUser ) ; }
private void generateNewDiskId ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > diskList , org.ovirt.engine.core.common.businessentities.DiskImage disk ) { org.ovirt.engine.core.compat.Guid newGuidForDisk = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; newDiskIdForDisk.put ( newGuidForDisk , org.ovirt.engine.core.common.businessentities.DiskImage.copyOf ( disk ) ) ; disk.setId ( newGuidForDisk ) ; disk.setImageId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskList ) { diskImage.setId ( disk.getId ( ) ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result ) { hostsModel.stopProgress ( ) ; boolean isAllValidatePassed = true ; for ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase : result.getReturnValue ( ) ) { isAllValidatePassed = isAllValidatePassed && ( returnValueBase.isValid ( ) ) ; if ( ! isAllValidatePassed ) { break ; } } if ( isAllValidatePassed ) { cancel ( ) ; } }
protected void asyncSearch ( ) { super . asyncSearch ( ) ; if ( ( getEntity ( ) ) == null ) { return ; } setAsyncResult ( null ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
private java.lang.String getNetworkId ( java.lang.String networkName ) { if ( networkName != null ) { org.ovirt.engine.core.compat.Guid clusterId = getClusterId ( ) ; org.ovirt.engine.core.common.businessentities.network.Network n = getClusterNetwork ( clusterId , null , networkName ) ; if ( n != null ) { return n.getId ( ) . toString ( ) ; } } return null ; }
public void testGetPagPhrase ( ) { mcr.mockConfigValue ( ConfigValues.DBPagingType , "wrongPageType" ) ; mcr.mockConfigValue ( ConfigValues.DBPagingSyntax , "wrongPageSyntax" ) ; org.ovirt.engine.core.searchbackend.SyntaxChecker chkr = new org.ovirt.engine.core.searchbackend.SyntaxChecker ( ) ; org.ovirt.engine.core.searchbackend.SyntaxContainer res = new org.ovirt.engine.core.searchbackend.SyntaxContainer ( "" ) ; res.setMaxCount ( 0 ) ; org.junit.Assert.assertEquals ( "" , chkr.getPagePhrase ( res , "1" ) ) ; mcr.mockConfigValue ( ConfigValues.DBPagingType , "Range" ) ; mcr.mockConfigValue ( ConfigValues.DBPagingSyntax , " WHERE RowNum BETWEEN %1$s AND %2$s" ) ; org.junit.Assert.assertNotEquals ( "" , chkr.getPagePhrase ( res , "1" ) ) ; }
public static void GetStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
private org.ovirt.engine.core.common.businessentities.VM mockVMFromDAO ( org.ovirt.engine.core.compat.Guid requestedUser ) { org.ovirt.engine.core.common.businessentities.VM expectedVM = new org.ovirt.engine.core.common.businessentities.VM ( ) ; org.ovirt.engine.core.dao.VmDAO vmDaoMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VmDAO.class ) ; org.mockito.Mockito.when ( vmDaoMock.getAllForUserWithGroupsAndUserRoles ( requestedUser ) ) . thenReturn ( java.util.Collections.singletonList ( expectedVM ) ) ; org.mockito.Mockito.when ( getDbFacadeMockInstance ( ) . getVmDAO ( ) ) . thenReturn ( vmDaoMock ) ; return expectedVM ; }
public org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity getGlusterHook ( org.ovirt.engine.core.compat.Guid clusterId , java.lang.String glusterCommand , org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStage stage , java.lang.String hookName ) { return getCallsHandler ( ) . executeRead ( "GetGlusterHook" , org.ovirt.engine.core.dao.gluster.GlusterHooksDaoImpl.glusterHookRowMapper , getCustomMapSqlParameterSource ( ) . addValue ( "cluster_id" , clusterId ) . addValue ( "gluster_command" , glusterCommand ) . addValue ( "stage" , org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull ( stage ) ) . addValue ( "name" , hookName ) . addValue ( "includeContent" , false ) ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.StorageDomain sp ) { setEnumTitle ( sp.getStatus ( ) ) ; switch ( sp.getStatus ( ) ) { case Unattached : return getApplicationResources ( ) . tornChainImage ( ) ; case Active : return getApplicationResources ( ) . upImage ( ) ; case InActive : return getApplicationResources ( ) . downImage ( ) ; case Uninitialized : return getApplicationResources ( ) . unconfiguredImage ( ) ; case Locked : return getApplicationResources ( ) . lockImage ( ) ; default : return getApplicationResources ( ) . downImage ( ) ; } }
private static void reportInvalidInterfacesForNetwork ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > interfaces , org.ovirt.engine.core.common.businessentities.network.Network network , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( interfaces.size ( ) ) != 1 ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( vds.getId ( ) ) ; logable.addCustomValue ( "NetworkName" , network.getName ( ) ) ; logable.addCustomValue ( "Interfaces" , org.apache.commons.lang.StringUtils.join ( org.ovirt.engine.core.common.businessentities.Entities.objectNames ( interfaces ) , "," ) ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES ) ; } }
protected boolean isValidExportDomain ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getStorageDomainDao ( ) . getForStoragePool ( org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getStorageDomainId ( ) , org.ovirt.engine.core.bll.storage.GetVmsFromExportDomainQuery.getParameters ( ) . getStoragePoolId ( ) ) ; if ( ( domain != null ) && ( ( domain.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport ) ) ) { return true ; } return false ; }
private void mockStoragePoolDAO ( org.ovirt.engine.core.common.businessentities.StoragePool pool ) { org.ovirt.engine.core.compat.Guid storagePoolId = getQueryParameters ( ) . getStoragePoolId ( ) ; if ( pool != null ) { pool.setId ( storagePoolId ) ; } org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDAOMock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDAO.class ) ; org.mockito.Mockito.when ( storagePoolDAOMock.get ( storagePoolId , getUser ( ) . getUserId ( ) , getQueryParameters ( ) . isFiltered ( ) ) ) . thenReturn ( pool ) ; org.mockito.Mockito.when ( getQuery ( ) . getDbFacade ( ) . getStoragePoolDao ( ) ) . thenReturn ( storagePoolDAOMock ) ; }
public void removeFunction ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { unusedFunctions.add ( policyUnit ) ; for ( int i = 0 ; i < ( usedFunctions.size ( ) ) ; i ++ ) { if ( usedFunctions.get ( i ) . getFirst ( ) . getId ( ) . equals ( policyUnit.getId ( ) ) ) { usedFunctions.remove ( i ) ; break ; } } refreshCustomProperties ( policyUnit , false ) ; getFunctionsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; }
public void addCustomValueDoesNotHandleNullKeys ( ) { final java.lang.String key = null ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; b.addCustomValue ( key , value ) ; final java.lang.String v = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( value , v ) ; }
protected final void endVmTemplateRelatedOps ( ) { if ( ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) != null ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplate ( ) ) ; incrementDbGeneration ( ) ; org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate ( org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId ( ) ) ; } else { org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "MoveOrCopyTemplateCommand::EndMoveOrCopyCommand: VmTemplate is null, not performing full EndAction" ) ; } }
private boolean containsLocalStorage ( org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : getSelectedItems ( ) ) { if ( ( a.getStorageType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.StorageType.LOCALFS ) ) { return true ; } } return false ; }
public org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity , org.ovirt.engine.core.common.vdscommands.VDSReturnValue > call ( ) throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand ( VDSCommandType.GetGlusterHookContent , new org.ovirt.engine.core.common.vdscommands.gluster.GlusterHookVDSParameters ( server.getId ( ) , hook.getGlusterCommand ( ) , hook.getStage ( ) , hook.getName ( ) ) ) ; return new org.ovirt.engine.core.common.utils.Pair ( hook , returnValue ) ; }
protected void setUpGetPayloadExpectations ( int times ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload ( ) ; for ( int i = 0 ; i < times ; i ++ ) { setUpGetEntityExpectations ( VdcQueryType.GetVmPayload , org.ovirt.engine.core.common.queries.IdQueryParameters.class , new java.lang.String [ ] { "Id" } , new java.lang.Object [ ] { GUIDS [ i ] } , payload ) ; } }
public void OnSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; java.util.List < java.lang.String > images = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; setImagesToModel ( model , images ) ; }
protected java.util.Map activateApi ( org.codehaus.jackson.JsonNode params ) { return api.list ( ) ; }
public void onClick ( com.google.gwt.event.dom.client.ClickEvent event ) { V widget = item.getSecond ( ) ; getEntry ( widget ) . removeLastButton ( ) ; org.ovirt.engine.core.common.utils.Pair < T , V > item = addGhostEntry ( ) ; onAdd ( item.getFirst ( ) , item.getSecond ( ) ) ; }
private org.ovirt.engine.core.dao.VdsGroupDAO mockVdsGroup ( ) { org.ovirt.engine.core.dao.VdsGroupDAO mock = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.VdsGroupDAO.class ) ; org.ovirt.engine.core.common.businessentities.VDSGroup value = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; value.setEmulatedMachine ( "pc-1.0" ) ; org.mockito.Mockito.when ( mock.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( value ) ; return mock ; }
public static boolean IsAnyStorageDomainIsMatserAndActive ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > sdl ) { for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : sdl ) { if ( ( ( ( a.getstorage_domain_type ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainType.Master ) ) && ( ( a.getstatus ( ) ) != null ) ) && ( ( a.getstatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active ) ) ) { return true ; } } return false ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] array = ( ( java.lang.Object [ ] ) ( target ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.NewEditStorageModelBehavior behavior = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.NewEditStorageModelBehavior ) ( array [ 0 ] ) ) ; org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel storageModelItem = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel ) ( array [ 1 ] ) ) ; behavior.postUpdateItemsAvailability ( storageModelItem , ( returnValue == null ) ) ; }
public boolean isDiskExist ( final org.ovirt.engine.core.compat.Guid id ) { return execute ( ( ) -> { try { com.woorea.openstack.cinder.model.Volume volume = proxy.getVolumeById ( id.toString ( ) ) ; return volume != null ; } catch ( com.woorea.openstack.base.client.OpenStackResponseException ex ) { if ( ( ex.getStatus ( ) ) == ( org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND ) ) { return false ; } throw ex ; } } ) ; }
public void setUp ( ) { role = new org.ovirt.engine.core.common.businessentities.Role ( ) ; role.setId ( params.getRoleId ( ) ) ; org.mockito.Mockito.doReturn ( roleDaoMock ) . when ( command ) . getRoleDao ( ) ; org.mockito.Mockito.when ( roleDaoMock.get ( params.getRoleId ( ) ) ) . thenReturn ( role ) ; org.mockito.Mockito.doReturn ( roleGroupMapDaoMock ) . when ( command ) . getRoleGroupMapDao ( ) ; }
private void interfaceHasSiblingVlanInterfaces ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( siblingVlanInterfaces.isEmpty ( ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllSiblingVlanInterfaces , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
private void mockGetForDisk ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { java.util.Map < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > vmsMap = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ; vmsMap.put ( java.lang.Boolean.TRUE , vms ) ; org.mockito.Mockito.when ( vmDAO.getForDisk ( diskImageGuid , true ) ) . thenReturn ( vmsMap ) ; }
public static boolean supportedInConfig ( org.ovirt.engine.core.common.config.ConfigValues feature , org.ovirt.engine.core.compat.Version version , org.ovirt.engine.core.common.businessentities.ArchitectureType arch ) { java.util.Map < java.lang.String , java.lang.String > archOptions = org.ovirt.engine.core.common.config.Config.< java.util.Map > getValue ( feature , version.getValue ( ) ) ; java.lang.String value = archOptions.get ( arch.name ( ) ) ; if ( value == null ) { value = archOptions.get ( arch.getFamily ( ) . name ( ) ) ; } return java.lang.Boolean.parseBoolean ( value ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; model.setDataCentersAndClusters ( model , dataCenters , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) ; initCdImage ( ) ; getPoolModelBehaviorInitializedEvent ( ) . raise ( this , EventArgs.Empty ) ; }
public void runMultipleActions ( final java.util.List < org.ovirt.engine.core.common.action.VdcActionType > actionTypes , final java.util.List < org.ovirt.engine.core.common.action.VdcActionParametersBase > parameters , final java.util.List < org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback > callbacks , final org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback failureCallback , final java.lang.Object state ) { runMultipleActions ( actionTypes , parameters , callbacks , failureCallback , state , true ) ; }
protected void EndImportCommand ( ) { setVm ( null ) ; EndActionOnAllImageGroups ( ) ; if ( ( getVm ( ) ) != null ) { org.ovirt.engine.core.bll.VmHandler.UnLockVm ( getVm ( ) ) ; UpdateVmImSpm ( ) ; } else { setCommandShouldBeLogged ( false ) ; org.ovirt.engine.core.bll.ImportVmCommand.log.warn ( "ImportVmCommand::EndImportCommand: Vm is null - not performing full EndAction" ) ; } setSucceeded ( true ) ; }
public void testMemoryMapping ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setId ( Guid.Empty ) ; vds.setPhysicalMemMb ( 4000 ) ; org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map ( vds , ( ( org.ovirt.engine.api.model.Host ) ( null ) ) ) ; assertNotNull ( host.getMemory ( ) ) ; assertEquals ( java.lang.Long.valueOf ( 4194304000L ) , host.getMemory ( ) ) ; }
public void storageDomainName ( ) { final org.ovirt.engine.core.common.businessentities.StorageDomain s = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; s.setStorageName ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ) ; b.setStorageDomain ( s ) ; final java.lang.String n = b.getStorageDomainName ( ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME , n ) ; }
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { expectedDisk.getSnapshots ( ) . addAll ( snapshots ) ; expectedVM.getDiskMap ( ) . put ( expectedDisk.getId ( ) , expectedDisk ) ; expectedVM.getDiskList ( ) . add ( expectedDisk ) ; return null ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { expandTree ( getDataDisplayWidget ( ) . getRootTreeNode ( ) , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.ITEM_LEVEL ) ; }
protected void executeCommand ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.vds_spm_id_map > vds_spm_id_mapList = org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getVdsSpmIdMapDao ( ) . getAll ( org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getVds ( ) . getStoragePoolId ( ) ) ; if ( ( vds_spm_id_mapList.size ( ) ) >= ( org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.MaxNumberOfHostsInStoragePool ) ) ) { buildFaultResult ( ) ; return ; } insertSpmIdToDb ( vds_spm_id_mapList ) ; org.ovirt.engine.core.bll.AddVdsSpmIdCommand.setSucceeded ( true ) ; }
protected org.ovirt.engine.core.compat.Guid createTask ( org.ovirt.engine.core.compat.Guid taskId , org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetValue ) { return enclosingCommand.createTask ( taskId , vdsRetValue.getCreationInfo ( ) , enclosingCommand.getActionType ( ) ) ; }
public java.lang.String add ( org.ovirt.engine.core.common.businessentities.network.Network network ) { org.ovirt.engine.core.common.businessentities.network.Network networkForCreate = createNewNetworkEntity ( network ) ; org.ovirt.engine.core.common.businessentities.network.Network createdNetwork = execute ( getClient ( ) . networks ( ) . create ( networkForCreate ) ) ; return createdNetwork.getId ( ) ; }
protected void ExecuteVdsBrokerCommand ( ) { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand.getBroker ( ) . connectStorageServer ( org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand.getParameters ( ) . getStorageType ( ) . getValue ( ) , org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand.getParameters ( ) . getStoragePoolId ( ) . toString ( ) , BuildStructFromConnectionListObject ( ) ) ; ProceedProxyReturnValue ( ) ; java.util.Map < java.lang.String , java.lang.String > returnValue = _result.convertToStatusList ( ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand.setReturnValue ( returnValue ) ; logFailedStorageConnections ( returnValue ) ; }
protected void updateModelDataCenterFromVds ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > dataCenters , org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( dataCenters != null ) { getDataCenter ( ) . setItems ( dataCenters ) ; getDataCenter ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( dataCenters , new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate < > ( vds.getStoragePoolId ( ) ) ) ) ; if ( ( getDataCenter ( ) . getSelectedItem ( ) ) == null ) { getDataCenter ( ) . setSelectedItem ( org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull ( dataCenters ) ) ; } } }
private org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties mapAdditionalProperties ( java.sql.ResultSet rs , org.ovirt.engine.core.common.businessentities.Provider < ? > entity ) throws java.sql.SQLException { switch ( entity.getType ( ) ) { case OPENSTACK_NETWORK : org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties ( ) ; properties.setTenantName ( rs.getString ( "tenant_name" ) ) ; properties.setPluginType ( rs.getString ( "plugin_type" ) ) ; return properties ; default : return null ; } }
public void testGetNextConfiguration ( ) throws java.lang.Exception { setUriInfo ( addMatrixParameterExpectations ( setUpBasicUriExpectations ( ) , BackendVmResource.NEXT_RUN ) ) ; setUpGetEntityNextRunExpectations ( ) ; setUpGetPayloadExpectations ( 0 , 1 ) ; setUpGetBallooningExpectations ( ) ; setUpGetNextRunGraphicsExpectations ( 1 ) ; setUpGetCertuficateExpectations ( ) ; org.ovirt.engine.api.model.Vm response = resource.get ( ) ; verifyModel ( response , 0 ) ; verifyCertificate ( response ) ; }
private void removeRequestFromTracking ( org.codehaus.jackson.JsonNode id ) { try ( org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper wrapper = new org.ovirt.vdsm.jsonrpc.client.utils.LockWrapper ( this . lock ) ) { this . queue.remove ( id ) ; org.ovirt.vdsm.jsonrpc.client.utils.ResponseTracking tracking = this . map.remove ( id ) ; java.util.List < org.codehaus.jackson.JsonNode > nodes = this . hostToId.get ( tracking.getClient ( ) . getClientId ( ) ) ; if ( nodes != null ) { nodes.remove ( id ) ; } } }
public void validateWrongDiskImageTypeTemplate ( ) throws java.lang.Exception { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initTemplateDiskImage ( ) ; org.junit.Assert.assertFalse ( command.validate ( ) ) ; org.junit.Assert.assertTrue ( command.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK.toString ( ) ) ) ; }
public void testAddIncompleteParametersNoName ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setDescription ( DESCRIPTIONS [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Network" , "add" , "id|name" ) ; } }
private void dataCenterQueryResult ( org.ovirt.engine.core.common.businessentities.StoragePool storagePool ) { final java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = clusterDao.getAllForStoragePool ( storagePool.getId ( ) ) ; final java.util.Set < org.ovirt.engine.core.compat.Guid > macPoolIds = clusters.stream ( ) . map ( Cluster :: getMacPoolId ) . collect ( java.util.stream.Collectors.toSet ( ) ) ; storagePool.setMacPoolId ( ( ( macPoolIds.size ( ) ) != 1 ? null : macPoolIds.iterator ( ) . next ( ) ) ) ; }
protected void configure ( ) { super . configure ( ) ; bind ( org.ovirt.engine.ui.common.utils.ConsoleUtils.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.userportal.widget.basic.MainTabBasicListItemMessagesTranslator.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.userportal.section.login.presenter.ConnectAutomaticallyProvider.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.userportal.utils.ConnectAutomaticallyManager.class ) . in ( com.google.inject.Singleton.class ) ; bind ( org.ovirt.engine.ui.common.utils.ConsoleManager.class ) . in ( com.google.inject.Singleton.class ) ; }
public void testNoDiskStatsDataForDisks ( ) { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > disk = new java.util.HashMap < > ( ) ; disksStats.put ( "a" , disk ) ; disksStats.put ( "b" , disk ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksStats ( disksStats ) ; validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVds ( ) , xml , true ) ; }
public static boolean urandomRandomUpdateRequired ( org.ovirt.engine.core.compat.Version oldVersion , org.ovirt.engine.core.compat.Version newVersion ) { if ( java.util.Objects.equals ( oldVersion , newVersion ) ) { return false ; } if ( ( oldVersion == null ) || ( newVersion == null ) ) { return false ; } return ( ( newVersion.greaterOrEquals ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) && ( oldVersion.less ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) ) || ( ( oldVersion.greaterOrEquals ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) && ( newVersion.less ( org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.FIRST_URANDOM_VERSION ) ) ) ; }
private void importCertificate ( ) { }
public org.ovirt.engine.core.common.businessentities.storage.CinderConnectionInfo initializeConnectionForDisk ( final org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk ) { return execute ( ( ) -> { com.woorea.openstack.cinder.model.ConnectionForInitialize connectionForInitialize = new com.woorea.openstack.cinder.model.ConnectionForInitialize ( ) ; return proxy.initializeConnectionForVolume ( cinderDisk.getImageId ( ) . toString ( ) , connectionForInitialize ) ; } ) ; }
protected < T extends org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl > org.ovirt.engine.core.compat.Guid selectedBestHost ( T unit , org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts ) { java.util.List < org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > scores = unit.score ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) , hosts , vm , null ) ; scores.sort ( java.util.Comparator.comparing ( Pair :: getSecond ) ) ; return scores.get ( 0 ) . getFirst ( ) ; }
private void setNewIdInImportedCollections ( org.ovirt.engine.core.common.businessentities.VmBase vmBase ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice managedDevice : vmBase.getManagedDeviceMap ( ) . values ( ) ) { if ( ! ( isDiskOrInterface ( managedDevice ) ) ) { managedDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmBase.getId ( ) ) ) ; } } for ( org.ovirt.engine.core.common.businessentities.VmDevice unmanagedDevice : vmBase.getUnmanagedDeviceList ( ) ) { unmanagedDevice.setId ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , vmBase.getId ( ) ) ) ; } }
public void onAddition ( ) { org.ovirt.engine.core.compat.Guid storageDomainId = addStorageDomain ( StorageType.CINDER , StorageDomainType.Volume ) ; org.ovirt.engine.core.compat.Guid storagePoolId = provider.getAdditionalProperties ( ) . getStoragePoolId ( ) ; if ( ( storagePoolId != null ) && ( ! ( storagePoolId.equals ( Guid.Empty ) ) ) ) { attachStorageDomainToDataCenter ( storageDomainId , storagePoolId ) ; } }
public void testRemoveAll ( ) { org.ovirt.engine.core.common.businessentities.EngineSession result = dao.get ( existingEngineSession.getId ( ) ) ; org.junit.Assert.assertNotNull ( result ) ; org.junit.Assert.assertEquals ( 2 , dao.removeAll ( ) ) ; result = dao.get ( existingEngineSession.getId ( ) ) ; org.junit.Assert.assertNull ( result ) ; org.junit.Assert.assertEquals ( 0 , dao.removeAll ( ) ) ; }
public void onFailureResetInitialStatus ( ) { try { command.executeCommand ( ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException exception ) { org.mockito.Mockito.verify ( vdsBrokerFrontend ) . RunVdsCommand ( org.mockito.Matchers.eq ( VDSCommandType.SetVdsStatus ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters.class ) ) ; return ; } org.junit.Assert.fail ( ) ; }
public java.lang.String getTooltip ( IVdcQueryable quota ) { boolean quotaExceeded = false ; if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaStorage ) ( quota ) ) ) ; } else if ( quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) { quotaExceeded = getQuotaExceeded ( ( ( org.ovirt.engine.core.common.businessentities.QuotaVdsGroup ) ( quota ) ) ) ; } if ( quotaExceeded ) { return org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.constants.quotaExceeded ( ) ; } return null ; }
public void legalTimedOut ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase t = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.TimeoutBaseTest.TestTimeoutBase ( ) ; t.setUseTimout ( true ) ; long c = java.lang.System.currentTimeMillis ( ) ; c -= 1000 ; t.setEndTime ( c ) ; final java.lang.String s = "legal-timeout" ; t.setTimeoutObjectId ( s ) ; t.getLegal ( ) ; final boolean result = t.getLegal ( ) ; org.junit.Assert.assertTrue ( result ) ; }
public static java.lang.String getPassFromFile ( java.lang.String passFile ) throws java.io.IOException { java.io.File f = new java.io.File ( passFile ) ; if ( ! ( f.exists ( ) ) ) { return org.apache.commons.lang.StringUtils.EMPTY ; } java.lang.String pass ; try ( java.io.BufferedReader br = new java.io.BufferedReader ( new java.io.FileReader ( f ) ) ) { pass = br.readLine ( ) ; } if ( pass == null ) { return org.apache.commons.lang.StringUtils.EMPTY ; } return pass ; }
protected boolean validateVmProperties ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.List < java.lang.String > messages ) { java.util.List < org.ovirt.engine.core.utils.customprop.ValidationError > validationErrors = getVmPropertiesUtils ( ) . validateVMProperties ( vm.getVdsGroupCompatibilityVersion ( ) , vm.getStaticData ( ) ) ; if ( ! ( validationErrors.isEmpty ( ) ) ) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance ( ) . handleCustomPropertiesError ( validationErrors , messages ) ; return false ; } return true ; }
public static void isVirtioScsiEnabledForVm ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetVirtioScsiControllers , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId ( org.ovirt.engine.core.compat.Guid storageDomainId ) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade ( ) . getStorageDomainStaticDao ( ) . get ( storageDomainId ) ; if ( storageDomainStatic != null ) { org.ovirt.engine.core.common.businessentities.Provider < ? > provider = getDbFacade ( ) . getProviderDao ( ) . get ( new org.ovirt.engine.core.compat.Guid ( storageDomainStatic.getStorage ( ) ) ) ; return org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance ( ) . create ( provider ) ; } return null ; }
public void initTable ( org.ovirt.engine.ui.common.CommonApplicationConstants constants ) { this . constants = constants ; initTableColumns ( ) ; initTableOverhead ( ) ; handleRadioButtonClick ( null ) ; org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel ( ) . getItemsChangedEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { disksViewRadioGroup.setDiskStorageType ( getModel ( ) . getDiskViewType ( ) . getEntity ( ) ) ; } } ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
private void updateVmData ( org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamicData ) { if ( ( org.ovirt.engine.core.bll.StopVmCommandBase.getVm ( ) . getRunOnVds ( ) ) != null ) { org.ovirt.engine.core.bll.Backend.getInstance ( ) . getResourceManager ( ) . RunVdsCommand ( VDSCommandType.UpdateVmDynamicData , new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters ( vmDynamicData ) ) ; } else { org.ovirt.engine.core.bll.StopVmCommandBase.getVmDynamicDao ( ) . update ( vmDynamicData ) ; } }
protected void mockBackendStatusChange ( boolean succeeded , org.ovirt.engine.core.common.errors.EngineError errorCode ) { org.mockito.Mockito.doReturn ( backend ) . when ( cmd ) . getBackend ( ) ; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue ( ) ; vdsReturnValue.setReturnValue ( succeeded ) ; vdsReturnValue.setSucceeded ( succeeded ) ; if ( ! succeeded ) { vdsReturnValue.setVdsError ( new org.ovirt.engine.core.common.errors.VDSError ( errorCode , "" ) ) ; } org.mockito.Mockito.when ( vdsBrokerFrontend.runVdsCommand ( org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.any ( org.ovirt.engine.core.common.vdscommands.VDSCommandType.class ) , org.ovirt.engine.core.bll.gluster.GlusterHookCommandTest.any ( org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class ) ) ) . thenReturn ( vdsReturnValue ) ; }
private void updateBricks ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume , org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume ) { java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity > fetchedBricks = fetchedVolume.getBricks ( ) ; if ( fetchedBricks == null ) { log.warnFormat ( ( "Bricks of volume {0} were not fetched. " + "Hence will not try to update them in engine at this point." ) , fetchedVolume.getName ( ) ) ; return ; } removeDeletedBricks ( existingVolume , fetchedBricks ) ; updateExistingAndNewBricks ( existingVolume , fetchedBricks ) ; }
public org.ovirt.engine.core.bll.ValidationResult protocolIsNotXmlrpc ( ) { return org.ovirt.engine.core.bll.ValidationResult.failWith ( EngineMessage.NOT_SUPPORTED_PROTOCOL_FOR_CLUSTER_VERSION ) . when ( ( ( org.ovirt.engine.core.common.businessentities.VdsProtocol.XML ) == ( host.getProtocol ( ) ) ) ) ; }
private org.ovirt.engine.core.common.mode.ApplicationMode findApplicationMode ( java.lang.String sessionId ) { org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.ApplicationMode , org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion ) ; parameters.setSessionId ( sessionId ) ; org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = backend.runPublicQuery ( VdcQueryType.GetConfigurationValue , parameters ) ; return org.ovirt.engine.core.common.mode.ApplicationMode.from ( result.getReturnValue ( ) ) ; }
private java.lang.String showSpiceConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model ) { if ( consoleUtils.canOpenSpiceConsole ( model ) ) { model.getDefaultConsoleModel ( ) . getConnectCommand ( ) . Execute ( ) ; } return null ; }
public void testSaveInterfaceForVds ( ) { newVdsInterface.setVdsId ( org.ovirt.engine.core.dao.InterfaceDAOTest.VDS_ID ) ; dao.saveInterfaceForVds ( newVdsInterface ) ; dao.saveStatisticsForVds ( newVdsStatistics ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > result = dao.getAllInterfacesForVds ( org.ovirt.engine.core.dao.InterfaceDAOTest.VDS_ID ) ; boolean found = false ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : result ) { found |= iface.getName ( ) . equals ( newVdsInterface.getName ( ) ) ; } org.junit.Assert.assertTrue ( found ) ; }
public void testGetNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpEntityQueryExpectations ( java.util.Collections.emptyList ( ) ) ; try { resource.get ( ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public void onSuccess ( java.util.List < org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity > volumeList ) { int volumesUp = 0 ; int volumesDown = 0 ; for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity : volumeList ) { if ( ( volumeEntity.getStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP ) ) { volumesUp ++ ; } else { volumesDown ++ ; } } setNoOfVolumesTotal ( volumeList.size ( ) ) ; setNoOfVolumesUp ( volumesUp ) ; setNoOfVolumesDown ( volumesDown ) ; }
public static org.ovirt.engine.api.model.Application map ( java.lang.String appName , org.ovirt.engine.api.model.Application template ) { org.ovirt.engine.api.model.Application model = ( template != null ) ? template : new org.ovirt.engine.api.model.Application ( ) ; model.setName ( appName ) ; model.setId ( org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid ( appName.getBytes ( ) ) . toString ( ) ) ; return model ; }
public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > getHostErrataListProvider ( com.google.gwt.event.shared.EventBus eventBus , com.google.inject.Provider < org.ovirt.engine.ui.common.presenter.popup.DefaultConfirmationPopupPresenterWidget > defaultConfirmPopupProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > > mainModelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > modelProvider , final com.google.inject.Provider < org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel > countModelProvider ) { org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider < org.ovirt.engine.core.common.businessentities.Erratum , org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel < java.lang.Void > , org.ovirt.engine.ui.uicommonweb.models.HostErrataListModel > result = new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider ( eventBus , defaultConfirmPopupProvider ) ; result.setMainModelProvider ( mainModelProvider ) ; result.setModelProvider ( modelProvider ) ; return result ; }
private void updateVms ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms ) { clearVms ( ) ; java.util.List < org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > > externalVms = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { externalVms.add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) ; } externalVmModels.setItems ( externalVms ) ; stopProgress ( ) ; }
public void Maintenance ( ) { java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > pb = new java.util.ArrayList < org.ovirt.engine.core.common.action.VdcActionParametersBase > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.StorageDomain > Cast ( getSelectedItems ( ) ) ) { pb.add ( new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( a.getId ( ) , getEntity ( ) . getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction ( VdcActionType.DeactivateStorageDomain , pb ) ; }
public void testGet ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 ) ; setUpManagementNetworkExpectation ( ) ; final org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.get ( ) ; verifyModel ( cluster , 0 ) ; verifyManagementNetwork ( cluster ) ; }
public void testAddIncompleteParameters ( ) throws java.lang.Exception { org.ovirt.engine.api.model.Network model = new org.ovirt.engine.api.model.Network ( ) ; model.setName ( NAMES [ 0 ] ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; try { collection.add ( model ) ; fail ( "expected WebApplicationException on incomplete parameters" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyIncompleteException ( wae , "Network" , "add" , "dataCenter.name|id" ) ; } }
public void shouldElectActiveSharedDataDomain ( ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = prepareSharedStorageDomainForElection ( StorageDomainStatus.Active , "shared domain name" ) ; org.junit.Assert.assertEquals ( domain , cmd.electNewMaster ( ) ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , final org.ovirt.engine.ui.uicommonweb.models.ListModel model , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < org.ovirt.engine.ui.uicommonweb.models.ListModel > valueUpdater ) { delegate.onBrowserEvent ( context , parent , renderer.render ( ( ( T ) ( model.getSelectedItem ( ) ) ) ) , event , new com.google.gwt.cell.client.ValueUpdater < java.lang.String > ( ) { @ java.lang.Override public void update ( java.lang.String value ) { if ( value != null ) { model.setSelectedItem ( entityByName.get ( value ) ) ; } } } ) ; }
private void prepareMocks ( org.ovirt.engine.core.bll.gluster.ResetGlusterVolumeOptionsCommand command ) { org.mockito.Mockito.doReturn ( volumeDao ) . when ( command ) . getGlusterVolumeDao ( ) ; org.mockito.Mockito.doReturn ( getVds ( VDSStatus.Up ) ) . when ( command ) . getUpServer ( ) ; }
public void render ( org.ovirt.engine.ui.webadmin.widget.table.cell.Context context , T value , com.google.gwt.safehtml.shared.SafeHtmlBuilder sb , java.lang.String id ) { sb.appendHtmlConstant ( ( ( "<table id=\"" + id ) + "\" style=\"margin:0 auto\"><tr>" ) ) ; java.util.Iterator < com.google.gwt.cell.client.HasCell < T , ? > > iterator = hasCells.iterator ( ) ; while ( iterator.hasNext ( ) ) { render ( context , value , sb , iterator.next ( ) , id ) ; } sb.appendHtmlConstant ( "</tr></table>" ) ; }
public void onSuccessAudit ( ) { mockExecutor ( true ) ; org.mockito.Mockito.doNothing ( ) . when ( command ) . teardown ( ) ; command.executeCommand ( ) ; org.mockito.Mockito.verify ( auditLogDirector , org.mockito.Mockito.times ( 2 ) ) . log ( org.mockito.ArgumentMatchers.any ( ) , org.mockito.ArgumentMatchers.any ( ) ) ; }
protected void revertTasks ( ) { org.ovirt.engine.core.compat.Guid destImageId = org.ovirt.engine.core.bll.CreateImageTemplateCommand.getDestinationDiskImage ( ) . getImageId ( ) ; org.ovirt.engine.core.common.action.RemoveImageParameters p = new org.ovirt.engine.core.common.action.RemoveImageParameters ( destImageId ) ; p.setEntityInfo ( new org.ovirt.engine.core.common.asynctasks.EntityInfo ( org.ovirt.engine.core.common.VdcObjectType.Disk , destImageId ) ) ; p.setParentParameters ( p ) ; p.setParentCommand ( VdcActionType.RemoveImage ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = checkAndPerformRollbackUsingCommand ( VdcActionType.RemoveImage , p ) ; if ( returnValue.getSucceeded ( ) ) { startPollingAsyncTasks ( returnValue.getInternalVdsmTaskIdList ( ) ) ; } }
private void prepareMocks ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand < org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters > command ) { org.mockito.Mockito.doReturn ( auditLogDao ) . when ( command ) . getAuditLogDao ( ) ; org.mockito.Mockito.doReturn ( getEventWithOvirtOrigin ( ) ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_2 ) ; org.mockito.Mockito.doReturn ( getEventWithExternalOrigin ( ) ) . when ( auditLogDao ) . get ( org.ovirt.engine.core.bll.RemoveAuditLogByIdCommandTest.EVENT_ID_3 ) ; }
private org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages createPackagesManager ( final org.ovirt.engine.core.common.businessentities.VDS host , final boolean checkOnly ) throws java.security.KeyStoreException { final org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages hostPackagesManager = new org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages ( host , checkOnly ) ; java.lang.String correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId ( ) ; if ( org.apache.commons.lang.StringUtils.isEmpty ( correlationId ) ) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId ( host ) ; } hostPackagesManager.setCorrelationId ( correlationId ) ; hostPackagesManager.useDefaultKeyPair ( ) ; return hostPackagesManager ; }
private void removeCinderDisk ( org.ovirt.engine.core.compat.Guid cinderDiskId ) { java.util.concurrent.Future < org.ovirt.engine.core.common.action.VdcReturnValueBase > future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( VdcActionType.RemoveCinderDisk , buildRevertParameters ( cinderDiskId ) , null ) ; try { future.get ( ) ; } catch ( java.lang.InterruptedException | java.util.concurrent.ExecutionException e ) { log.error ( "Fail to revert disk id '{}'." , cinderDiskId ) ; log.error ( "Exception: " , e ) ; } }
public void currentUser ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; final org.ovirt.engine.core.common.users.VdcUser u = new org.ovirt.engine.core.common.users.VdcUser ( ) ; b.setCurrentUser ( u ) ; final org.ovirt.engine.core.common.users.VdcUser cu = b.getCurrentUser ( ) ; org.junit.Assert.assertEquals ( u , cu ) ; }
private void addSharedLockEntry ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( sharedLockMap ) == null ) { sharedLockMap = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } sharedLockMap.put ( vds.getStoragePoolId ( ) . toString ( ) , LockingGroup.POOL.name ( ) ) ; }
private static void addPortMirroringToVmInterface ( java.util.Map < java.lang.String , java.lang.Object > struct , org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile , org.ovirt.engine.core.common.businessentities.network.Network network ) { if ( ( vnicProfile != null ) && ( vnicProfile.isPortMirroring ( ) ) ) { struct.put ( VdsProperties.PORT_MIRRORING , ( network == null ? java.util.Collections.< java.lang.String > emptyList ( ) : java.util.Collections.singletonList ( network.getName ( ) ) ) ) ; } }
private org.ovirt.engine.core.bll.ValidationResult validateWithHostSetupNetworksValidator ( org.ovirt.engine.core.common.businessentities.VDS host ) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator ( host , org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters ( ) , getExistingNics ( ) , getExistingAttachments ( ) , getNetworkBusinessEntityMap ( ) , managementNetworkUtil , networkClusterDao , networkDao , vdsDao , hostSetupNetworksValidatorHelper , vmDao ) ; return validator.validate ( ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > findAllStorageDomainsBySharedStatus ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > items , org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus status ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ret = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain i : items ) { if ( ( i.getStorageDomainSharedStatus ( ) ) == status ) { ret.add ( i ) ; } } return ret ; }
private void updateWanColorDepthOptions ( final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice ) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getWANColorDepth ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { spice.setWANColorDepth ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth ) ( returnValue ) ) ) ; } } ) ) ; }
public void testExecuteQueryGetAllEntitiesCommand ( ) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { getQuery ( ) . executeQueryCommand ( ) ; @ java.lang.SuppressWarnings ( value = "unchecked" ) java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.Assert.assertEquals ( "Wrong number of VMs in result" , 2 , result.size ( ) ) ; }
private void addFeaturePortMirroring ( org.ovirt.engine.api.model.Features features ) { org.ovirt.engine.api.model.Feature feature = new org.ovirt.engine.api.model.Feature ( ) ; feature.setName ( "Port Mirroring" ) ; features.getFeature ( ) . add ( feature ) ; }
public void testEmptyDiskStats ( ) { java.util.Map < java.lang.String , java.lang.Object > disksStats = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.setDisksStats ( disksStats ) ; validateDisksStatsList ( org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilderTest.getVds ( ) , xml , false ) ; }
private void runNextActionFlowWithFirstActionFailureTestCommon ( boolean waitFoResult ) { org.ovirt.engine.ui.uicommonweb.action.UiAction action1 = createAction ( waitFoResult , true ) ; org.ovirt.engine.ui.uicommonweb.action.UiAction action2 = createAction ( waitFoResult , true ) ; action1.then ( action2 ) ; action1.runAction ( ) ; verifyRunActionAndExecuteCallbacksRandomly ( action1.getActionFlowState ( ) , waitFoResult ) ; verifyRunActionAndExecuteCallbacksRandomly ( true , action1.getActionFlowState ( ) , 2 , 1 , waitFoResult ) ; assertFinishedWithErrors ( java.util.Arrays.asList ( action1 , action2 ) , 1 ) ; }
public void versionDecreaseNoHostsOrNetwork ( ) { createCommandWithOlderVersion ( ) ; setupCpu ( ) ; org.ovirt.engine.core.dao.StoragePoolDao storagePoolDao2 = org.mockito.Mockito.mock ( org.ovirt.engine.core.dao.StoragePoolDao.class ) ; org.mockito.Mockito.when ( storagePoolDao2.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( org.ovirt.engine.core.bll.UpdateClusterCommandTest.createStoragePoolLocalFS ( ) ) ; org.mockito.Mockito.doReturn ( storagePoolDao2 ) . when ( cmd ) . getStoragePoolDao ( ) ; initAndAssertValidation ( true ) ; }
public void hostNicHaveOneFreeVfWhichShareIommuGroup ( ) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mockVnic ( true ) ; initHostWithOneVfsConfig ( java.util.Collections.singletonList ( vnic ) , 1 , true , false , false , true , true , false ) ; assertHostNotValid ( java.util.Collections.singletonList ( vnic ) , java.util.Collections.singletonList ( vnic.getName ( ) ) ) ; }
public void PostOnSaveInternal ( org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue ) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel ) ( getWindow ( ) ) ) ; model.StopProgress ( ) ; Cancel ( ) ; if ( model.getIsNew ( ) ) { setGuideContext ( returnValue.getActionReturnValue ( ) ) ; UpdateActionAvailability ( ) ; getGuideCommand ( ) . Execute ( ) ; } }
private void setupVmNetworkInterfaceDao ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface > expectedVmNetworkInterfaces ) { org.mockito.Mockito.when ( vmNetworkInterfaceDaoMock.getAllForNetwork ( networkId ) ) . thenReturn ( expectedVmNetworkInterfaces ) ; }
public java.lang.String generateId ( org.ovirt.engine.api.model.Version v ) { org.ovirt.engine.core.compat.NGuid guid = new org.ovirt.engine.core.compat.NGuid ( ( ( ( v.getMajor ( ) ) + "." ) + ( v.getMinor ( ) ) ) . getBytes ( ) , true ) ; return guid.toString ( ) ; }
public static void getStorageDomainList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters ( "Storage:" , org.ovirt.engine.core.common.interfaces.SearchType.StorageDomain ) ; searchParams.setMaxCount ( 9999 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , searchParams , aQuery ) ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO ( ) . update ( org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getClusterAttachments ( ) ) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus ( clusterAttachment.getClusterId ( ) , org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork ( ) ) ; } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded ( true ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , T model , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < T > valueUpdater ) { super . onBrowserEvent ( context , parent , model , event , valueUpdater ) ; if ( ! ( BrowserEvents.CLICK.equals ( event.getType ( ) ) ) ) { return ; } onClickEvent ( model ) ; }
public void freeMacs ( java.util.List < java.lang.String > macs ) { if ( ! ( macs.isEmpty ( ) ) ) { lockObj.writeLock ( ) . lock ( ) ; try { if ( ! ( initialized ) ) { logInitializationError ( "Failed to free MAC addresses." ) ; } for ( java.lang.String mac : macs ) { internalFreeMac ( mac ) ; } } finally { lockObj.writeLock ( ) . unlock ( ) ; } } }
public synchronized boolean hasTasksForEntityIdAndAction ( org.ovirt.engine.core.compat.Guid id , org.ovirt.engine.core.common.action.VdcActionType type ) { if ( ( _tasks ) != null ) { for ( org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values ( ) ) { if ( ( isCurrentTaskLookedFor ( id , task ) ) && ( type.equals ( task.getParameters ( ) . getDbAsyncTask ( ) . getaction_type ( ) ) ) ) { return true ; } } } return false ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.VDS > findAllVDSByPmEnabled ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > items ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ret = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS i : items ) { if ( i.isPmEnabled ( ) ) { ret.add ( i ) ; } } return ret ; }
protected void verifyModel ( org.ovirt.engine.api.model.Event model , int index ) { assertNotNull ( model ) ; assertEquals ( model.getId ( ) , java.lang.String.valueOf ( org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.LOG_IDS [ index ] ) ) ; assertEquals ( LogSeverity.ALERT , model.getSeverity ( ) ) ; assertEquals ( model.getDescription ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.MESSAGES [ index ] ) ; assertEquals ( model.getOrigin ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.ORIGIN_NAMES [ index ] ) ; assertEquals ( model.getCustomId ( ) , org.ovirt.engine.api.restapi.resource.BackendEventsResourceTest.CUSTOMER_EVENT_IDS [ index ] ) ; }
private org.ovirt.engine.core.compat.KeyValuePairCompat < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > getBondOption ( org.ovirt.engine.core.common.businessentities.network.BondMode mode ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; entityModel.setEntity ( mode.getDescription ( ) ) ; return new org.ovirt.engine.core.compat.KeyValuePairCompat ( mode.getConfigurationValue ( ) , entityModel ) ; }
public int getCountByType ( org.ovirt.engine.core.common.businessentities.Erratum.ErrataType type ) { if ( ( ( errata ) == null ) || ( errata.isEmpty ( ) ) ) { return 0 ; } int count = 0 ; for ( org.ovirt.engine.core.common.businessentities.Erratum e : errata ) { if ( ( e.getType ( ) ) == type ) { count ++ ; } } return count ; }
private boolean unmanagedNetworkChanged ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface = getExistingIfaces ( ) . get ( iface.getName ( ) ) ; return ( existingIface == null ) || ( ! ( iface.getNetworkName ( ) . equals ( existingIface.getNetworkName ( ) ) ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : "" ; }
public static void GetNetworkList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid dataCenterId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllNetworks , new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters ( dataCenterId ) , aQuery ) ; }
public void testStoragePoolDoesntExist ( ) { final int domainSizeGB = 20 ; org.ovirt.engine.core.bll.AddVmCommand < org.ovirt.engine.core.common.action.AddVmParameters > cmd = setupCanAddVmTests ( domainSizeGB ) ; org.mockito.Mockito.doReturn ( null ) . when ( cmd ) . getStoragePool ( ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST ) ; }
public void edit ( ) { final org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = getSelectedItem ( ) ; if ( ( getWindow ( ) ) != null ) { return ; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkQoSModel networkQoSModel = new org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkQoSModel ( networkQoS , this , getEntity ( ) ) ; setWindow ( networkQoSModel ) ; networkQoSModel.getDataCenters ( ) . setItems ( java.util.Arrays.asList ( getEntity ( ) ) , getEntity ( ) ) ; }
public org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy getRetryPolicy ( ) { return this . policy ; }
private boolean removeMemoryFromSnapshot ( org.ovirt.engine.core.common.businessentities.Snapshot snapshot , boolean clearFromDB ) { final java.lang.String memoryVolume = snapshot.getMemoryVolume ( ) ; if ( memoryVolume.isEmpty ( ) ) { return true ; } if ( clearFromDB ) { getSnapshotDao ( ) . removeMemoryFromSnapshot ( snapshot.getId ( ) ) ; } return removeMemoryVolumes ( snapshot ) ; }
private java.lang.Runnable pendingOperations ( ) throws java.io.IOException , org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ( ( this . nioEngine ) == null ) { return null ; } return nioEngine.process ( ) ; }
public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc fullList ( java.util.List < java.lang.String > vmIds ) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder ( "Host.getVMFullList" ) . withOptionalParameterAsList ( "vmList" , vmIds ) . build ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap ( this . client , request ) . withResponseKey ( "vmList" ) . withResponseType ( java.lang.Object [ ] . class ) ; return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc ( response ) ; }
protected boolean validateVmProperties ( org.ovirt.engine.core.common.businessentities.VM vm , java.lang.String runOnceCustomProperties , java.util.List < java.lang.String > messages ) { java.lang.String customProperties = ( runOnceCustomProperties != null ) ? runOnceCustomProperties : vm.getCustomProperties ( ) ; return getVmPropertiesUtils ( ) . validateVmProperties ( vm.getVdsGroupCompatibilityVersion ( ) , customProperties , messages ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; }
protected boolean canEdit ( org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel ) { java.lang.Boolean migrationNetworkEnabled = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted ( ConfigurationValues.MigrationNetworkEnabled , clusterNetworkModel.getCluster ( ) . getcompatibility_version ( ) . toString ( ) ) ) ) ; return ( migrationNetworkEnabled && ( clusterNetworkModel.isAttached ( ) ) ) && ( ! ( clusterNetworkModel.isExternal ( ) ) ) ; }
public void testGetAllMultiClusterSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Clusters" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( vdsGroupResultList , searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.canDoAction ( VdcActionType.AddDisk , getAddDiskParameters ( ) , org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext ( ) . clone ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue ( ) . setValidationMessages ( returnValue.getValidationMessages ( ) ) ; return returnValue.isValid ( ) ; }
protected void buildModel ( org.ovirt.engine.core.common.businessentities.VmBase vmBase , org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.BuilderExecutionFinished < org.ovirt.engine.core.common.businessentities.VmBase , org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel > callback ) { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor ( callback , new org.ovirt.engine.ui.uicommonweb.builders.vm.NameAndDescriptionVmBaseToUnitBuilder ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyVmBaseToUnitBuilder ( ) . withEveryFeatureSupported ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.CoreVmBaseToUnitBuilder ( new org.ovirt.engine.ui.uicommonweb.builders.vm.KernelParamsVmBaseToUnitBuilder ( ) , new org.ovirt.engine.ui.uicommonweb.builders.vm.SerialNumberPolicyVmBaseToUnitBuilder ( ) . withEveryFeatureSupported ( ) ) . withEveryFeatureSupported ( ) ) ) . build ( vmBase , getModel ( ) ) ; }
public void snapshotExistsByGuidReturnsInvalidResultWhenNoSnapshot ( ) throws java.lang.Exception { org.mockito.Mockito.when ( snapshotDao.exists ( vmId , snapshotId ) ) . thenReturn ( false ) ; org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult ( validator.snapshotExists ( vmId , snapshotId ) , VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_DOES_NOT_EXIST ) ; }
public void mockVdsDao ( ) { org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter search = new org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter ( ) ; org.mockito.Mockito.when ( vdsDao.getAllWithQuery ( org.mockito.Matchers.matches ( org.ovirt.engine.core.bll.SearchQueryTest.getVdsRegexString ( search ) ) ) ) . thenReturn ( vdsResultList ) ; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds.setCpuFlags ( "flag" ) ; vds.setClusterCompatibilityVersion ( org.ovirt.engine.core.compat.Version.getLast ( ) ) ; vdsResultList.add ( vds ) ; }
public java.lang.Object answer ( org.mockito.invocation.InvocationOnMock invocation ) throws java.lang.Throwable { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > toReturn = new java.util.LinkedList < > ( ) ; for ( org.ovirt.engine.core.common.utils.Pair < java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo > , org.ovirt.engine.core.common.businessentities.StorageDomain > pair : poolDomainsOvfInfo.values ( ) ) { toReturn.add ( pair.getSecond ( ) ) ; } return toReturn ; }
protected boolean validateInputs ( ) { return validate ( getParameters ( ) ) ; }
public void validateFailure ( ) { org.mockito.Mockito.when ( validator.isConnectionForISCSIDomainAttached ( domain ) ) . thenReturn ( java.lang.Boolean.FALSE ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST ) ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.OpenstackVolumeAuthenticationKey authenticationKey ) { validateParameters ( authenticationKey , "uuid" , "value" , "usageType" ) ; return performCreate ( VdcActionType.AddLibvirtSecret , new org.ovirt.engine.core.common.action.LibvirtSecretParameters ( map ( addProvider ( authenticationKey ) ) ) , new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetLibvirtSecretById , org.ovirt.engine.core.common.queries.IdQueryParameters.class ) ) ; }
private void initStoragePool ( ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; storagePool.setcompatibility_version ( Version.v3_1 ) ; org.mockito.Mockito.when ( storagePoolDao.get ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( storagePool ) ; org.mockito.Mockito.when ( command.getStoragePoolId ( ) ) . thenReturn ( storagePoolId ) ; }
protected void initContainerDetails ( org.ovirt.engine.core.common.action.ImagesContainterParametersBase parameters ) { super . setVmId ( parameters.getContainerId ( ) ) ; if ( ( ( getDiskImage ( ) ) != null ) && ( ( getDiskImage ( ) . getStoragePoolId ( ) ) != null ) ) { setStoragePoolId ( getDiskImage ( ) . getStoragePoolId ( ) . getValue ( ) ) ; } }
protected void setStorageDomainStatus ( org.ovirt.engine.core.common.businessentities.StorageDomainStatus status , org.ovirt.engine.core.bll.context.CompensationContext context ) { if ( ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) ) != null ) && ( ( org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getStoragePoolId ( ) ) != null ) ) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . getStoragePoolIsoMapData ( ) ; if ( context != null ) { context.snapshotEntityStatus ( map ) ; } org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain ( ) . setStatus ( status ) ; org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePoolIsoMapDAO ( ) . updateStatus ( map.getId ( ) , status ) ; } }
public void getUnknownImageList ( org.ovirt.engine.ui.frontend.AsyncQuery < java.util.List < java.lang.String > > aQuery , org.ovirt.engine.core.compat.Guid storagePoolId , boolean forceRefresh ) { getIrsImageList ( aQuery , storagePoolId , forceRefresh , ImageFileType.All , new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.RepoImageToImageFileNameAsyncConverter ( ) { @ java.lang.Override protected java.lang.String transform ( java.util.ArrayList < java.lang.String > fileNameList , org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { return ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ISO_PREFIX ) + ( super . transform ( fileNameList , repoImage ) ) ; } @ java.lang.Override protected boolean desiredImage ( org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage ) { return ( org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown ) == ( repoImage.getFileType ( ) ) ; } } ) ; }
public void canDoActionFailsOnNullHookId ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( null ) ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.canDoAction ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getCanDoActionMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
public static void GetProviderCertificateChain ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.Provider provider ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetProviderCertificateChain , new org.ovirt.engine.core.common.queries.ProviderQueryParameters ( provider ) , aQuery ) ; }
public void testZeroLatency ( ) { java.lang.String doubleValue = "0" ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.getVmDynamic ( ) ; java.util.Map < java.lang.String , java.lang.Object > diskData = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setDiskData ( ) ; diskData.put ( VdsProperties.vm_disk_write_latency , doubleValue ) ; java.util.Map < java.lang.String , java.lang.Object > xml = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.setMockForTesting ( diskData ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData ( vmDynamic , xml , org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectBuilderTest.getVds ( ) ) ; org.junit.Assert.assertEquals ( new java.lang.Double ( "0" ) , vmDynamic.getDisks ( ) . get ( 0 ) . getWriteLatency ( ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.bll.validator.UpgradeHostValidator validator = new org.ovirt.engine.core.bll.validator.UpgradeHostValidator ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand.getVds ( ) ) ; return ( ( ( validate ( validator.hostExists ( ) ) ) && ( validate ( validator.statusSupportedForHostUpgrade ( ) ) ) ) && ( validate ( validator.updatesAvailable ( ) ) ) ) && ( validate ( validator.imageProvidedForOvirtNode ( org.ovirt.engine.core.bll.hostdeploy.UpgradeHostCommand.getParameters ( ) . getoVirtIsoFile ( ) ) ) ) ; }
public boolean validate ( ) { org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk = getCinderDisk ( ) ; cinderDisk.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.storage.disk.cinder.RegisterCinderDiskCommand.getParameters ( ) . getStorageDomainId ( ) ) ) ) ; org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDiskValidator = getCinderDisksValidator ( cinderDisk ) ; return validate ( cinderDiskValidator.validateCinderDisksAlreadyRegistered ( ) ) ; }
protected void InitDetailModels ( ) { super . InitDetailModels ( ) ; org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new org.ovirt.engine.core.compat.ObservableCollection < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateVmListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel ( ) ) ; list.add ( new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateStorageListModel ( ) ) ; addCustomModelsDetailModelList ( list ) ; setDetailModels ( list ) ; }
private void WatchdogModel_EntityChanged ( java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { if ( ( getWatchdogModel ( ) . getEntity ( ) ) == null ) { getWatchdogAction ( ) . setIsChangable ( false ) ; getWatchdogAction ( ) . setSelectedItem ( null ) ; } else { getWatchdogAction ( ) . setIsChangable ( true ) ; } }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = result.getReturnValue ( ) ; storageListModel.storageDomain.setStorage ( ( ( java.lang.String ) ( vdcReturnValueBase.getActionReturnValue ( ) ) ) ) ; storageListModel.connection.setId ( ( ( java.lang.String ) ( vdcReturnValueBase.getActionReturnValue ( ) ) ) ) ; }
public boolean match ( org.ovirt.engine.core.common.businessentities.DbUser source ) { return ( org.ovirt.engine.core.compat.StringHelper.stringsEqual ( source.getDomain ( ) , target.getDomain ( ) ) ) && ( ( ( org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty ( target.getLoginName ( ) ) ) || ( "*" . equals ( target.getLoginName ( ) ) ) ) || ( source.getLoginName ( ) . toLowerCase ( ) . startsWith ( target.getLoginName ( ) ) ) ) ; }
public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; storageListModel.removeConnection = true ; org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = result.getReturnValue ( ) ; storageListModel.storageDomain.setStorage ( ( ( java.lang.String ) ( vdcReturnValueBase.getActionReturnValue ( ) ) ) ) ; storageListModel.connection.setId ( ( ( java.lang.String ) ( vdcReturnValueBase.getActionReturnValue ( ) ) ) ) ; }
public void calculateNetworkImplementationDetailsNetworkVmNetworkOutOfSync ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice ( ) ; calculateNetworkImplementationDetailsAndAssertSync ( iface , false , ( ! ( iface.isBridged ( ) ) ) , iface.getMtu ( ) , iface.getVlanId ( ) , createQos ( ) ) ; }
protected void EndWithFailure ( ) { org.ovirt.engine.core.bll.ExportVmCommand.EndActionOnAllImageGroups ( ) ; if ( ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) != null ) { org.ovirt.engine.core.bll.VmHandler.UnLockVm ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) ; org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb ( org.ovirt.engine.core.bll.ExportVmCommand.getVm ( ) ) ; } else { org.ovirt.engine.core.bll.ExportVmCommand.setCommandShouldBeLogged ( false ) ; log.warn ( "ExportVmCommand::EndMoveVmCommand: Vm is null - not performing full EndAction" ) ; } org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded ( true ) ; }
public void testIllegalImageReturnedByQuery ( ) throws java.lang.Exception { existingVm.getDiskMap ( ) . put ( existingDiskImage.getId ( ) , existingDiskImage ) ; existingVm.getImages ( ) . add ( existingDiskImage ) ; snapshotVmConfigurationHelper.markImagesIllegalIfNotInDb ( existingVm , existingSnapshotId ) ; for ( org.ovirt.engine.core.common.businessentities.storage.Disk diskImage : existingVm.getDiskMap ( ) . values ( ) ) { org.junit.Assert.assertEquals ( ImageStatus.ILLEGAL , ( ( org.ovirt.engine.core.common.businessentities.storage.DiskImage ) ( diskImage ) ) . getImageStatus ( ) ) ; } }
public void testStorageDomainLinks ( ) throws java.lang.Exception { org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain ( ) ; storageDomain.setId ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_ID ) ; storageDomain.setStorage ( new org.ovirt.engine.api.model.HostStorage ( ) ) ; storageDomain.getStorage ( ) . setPath ( "foo" ) ; org.ovirt.engine.api.restapi.util.LinkHelper.addLinks ( storageDomain ) ; assertEquals ( org.ovirt.engine.api.restapi.util.LinkHelperTest.STORAGE_DOMAIN_HREF , storageDomain.getHref ( ) ) ; assertNull ( storageDomain.getStorage ( ) . getHref ( ) ) ; }
protected R addLinks ( R model , java.lang.Class < ? extends org.ovirt.engine.api.model.BaseResource > suggestedParent , java.lang.String ... subCollectionMembersToExclude ) { model = addParents ( model ) ; model = linkSubCollections ( model , suggestedParent , subCollectionMembersToExclude ) ; model = org.ovirt.engine.api.common.util.LinkHelper.addLinks ( org.ovirt.engine.api.restapi.resource.AbstractBackendResource.getUriInfo ( ) , model , suggestedParent ) ; return model ; }
public javax.ws.rs.core.Response add ( org.ovirt.engine.api.model.Cluster cluster ) { validateParameters ( cluster , "name" , "dataCenter.name|id" ) ; validateEnums ( org.ovirt.engine.api.model.Cluster.class , cluster ) ; org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool ( cluster , this ) ; org.ovirt.engine.core.common.businessentities.VDSGroup entity = map ( cluster , map ( pool ) ) ; return performCreate ( VdcActionType.AddVdsGroup , new org.ovirt.engine.core.common.action.VdsGroupOperationParameters ( entity ) , new org.ovirt.engine.api.restapi.resource.QueryIdResolver < org.ovirt.engine.core.compat.Guid > ( org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById , org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters.class ) ) ; }
public void getVdsSwallowsException ( ) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setRunOnVds ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID2 ) ; b.setVds ( vds ) ; b.setVdsId ( org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.GUID3 ) ; b.setVm ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS v = b.getVds ( ) ; org.junit.Assert.assertNull ( v ) ; }
public void addFunction ( org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit ) { usedFunctions.add ( new org.ovirt.engine.core.common.utils.Pair < org.ovirt.engine.core.common.scheduling.PolicyUnit , java.lang.Integer > ( policyUnit , 1 ) ) ; for ( int i = 0 ; i < ( unusedFunctions.size ( ) ) ; i ++ ) { if ( unusedFunctions.get ( i ) . getId ( ) . equals ( policyUnit.getId ( ) ) ) { unusedFunctions.remove ( policyUnit ) ; break ; } } refreshCustomProperties ( null , false ) ; getFunctionsChangedEvent ( ) . raise ( this , EventArgs.Empty ) ; }
public void getFreeVfMoreThanOneFreeVf ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.HostDevice > freeVfs = freeVfCommon ( 5 , 2 , 2 , 2 , 2 , 2 ) ; org.junit.Assert.assertEquals ( 5 , freeVfs.size ( ) ) ; org.junit.Assert.assertTrue ( freeVfs.contains ( networkDeviceHelper.getFreeVf ( nic , null ) ) ) ; }
private boolean containsDeviceWithType ( java.util.List < org.ovirt.engine.core.common.businessentities.VmDevice > devices , org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType generalType , org.ovirt.engine.core.common.utils.VmDeviceType deviceType ) { for ( org.ovirt.engine.core.common.businessentities.VmDevice device : devices ) { if ( ( device.getType ( ) ) == generalType ) { if ( ( deviceType == null ) || ( ( ( deviceType.getName ( ) ) != null ) && ( deviceType.getName ( ) . equals ( device.getDevice ( ) ) ) ) ) { return true ; } } } return false ; }
private double calcDistributeMetric ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.VM vm , int hostCores ) { int vcpu = org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.VcpuConsumptionPercentage ) ; int spmCpu = ( ( vds.getSpmStatus ( ) ) == ( org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None ) ) ? 0 : org.ovirt.engine.core.common.config.Config.< java.lang.Integer > getValue ( ConfigValues.SpmVCpuConsumption ) ; double hostCpu = vds.getUsageCpuPercent ( ) ; double pendingVcpus = vds.getPendingVcpusCount ( ) ; return ( hostCpu / vcpu ) + ( ( ( pendingVcpus + ( vm.getNumOfCpus ( ) ) ) + spmCpu ) / hostCores ) ; }
public boolean disconnectStorageFromDomainByVdsId ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId ) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviderDao ( ) . get ( org.ovirt.engine.core.compat.Guid.createGuidFromString ( storageDomain.getStorage ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.LibvirtSecret > libvirtSecrets = getLibvirtSecretDao ( ) . getAllByProviderId ( provider.getId ( ) ) ; org.ovirt.engine.core.common.businessentities.VDS vds = getVdsDao ( ) . get ( vdsId ) ; return unregisterLibvirtSecrets ( storageDomain , vds , libvirtSecrets ) ; }
public void validateVmInPreview ( ) { initializeCommand ( new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ) ; initSnapshotValidator ( ) ; initVmForSpace ( ) ; initVmDiskImage ( false ) ; initSrcStorageDomain ( ) ; initDestStorageDomain ( StorageType.NFS ) ; org.mockito.Mockito.when ( snapshotsValidator.vmNotInPreview ( org.mockito.Matchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( command , EngineMessage.ACTION_TYPE_FAILED_VM_IN_PREVIEW ) ; }
public com.google.gwt.resources.client.ImageResource getValue ( org.ovirt.engine.core.common.businessentities.StorageDomain sp ) { setEnumTitle ( sp.getstorage_domain_shared_status ( ) ) ; switch ( sp.getstorage_domain_shared_status ( ) ) { case Unattached : return getApplicationResources ( ) . tornChainImage ( ) ; case Active : return getApplicationResources ( ) . upImage ( ) ; case InActive : return getApplicationResources ( ) . downImage ( ) ; case Mixed : return getApplicationResources ( ) . upalertImage ( ) ; case Locked : return getApplicationResources ( ) . lockImage ( ) ; default : return getApplicationResources ( ) . downImage ( ) ; } }
private void localize ( org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { headerLabel.setText ( constants.loginHeaderLabel ( ) ) ; userNameEditor.setLabel ( constants.loginFormUserNameLabel ( ) ) ; passwordEditor.setLabel ( constants.loginFormPasswordLabel ( ) ) ; domainEditor.setLabel ( constants.loginFormDomainLabel ( ) ) ; loginButton.setLabel ( constants.loginButtonLabel ( ) ) ; }
public void eventRaised ( org.ovirt.engine.core.compat.Event ev , java.lang.Object sender , org.ovirt.engine.core.compat.EventArgs args ) { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel ) ( sender ) ) ; if ( "Bricks" . equals ( ( ( org.ovirt.engine.core.compat.PropertyChangedEventArgs ) ( args ) ) . PropertyName ) ) { bricksCountEditor.setText ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getMessages ( ) . noOfBricksSelected ( ( ( model.getBricks ( ) . getSelectedItems ( ) ) == null ? 0 : model.getBricks ( ) . getSelectedItems ( ) . size ( ) ) ) ) ; } }
private void mockBackend ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase addClusterReturnValue = org.mockito.Mockito.mock ( org.ovirt.engine.core.common.action.VdcReturnValueBase.class ) ; org.mockito.Mockito.when ( backend.runAction ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.VdcActionType.class ) , org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.common.action.CpuProfileParameters.class ) ) ) . thenReturn ( addClusterReturnValue ) ; }
public void validateFailsOnNullHookId ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( null ) , null ) ) ; setupMocks ( cmd ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString ( ) ) ) ; }
public void executeCommandWhenServerIdPresent ( ) { setUpMocksForUpdate ( ) ; mockForReadContent ( true , null ) ; cmd.executeCommand ( ) ; org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.times ( 1 ) ) . updateGlusterHook ( org.mockito.ArgumentMatchers.any ( ) ) ; org.junit.Assert.assertEquals ( AuditLogType.GLUSTER_HOOK_UPDATED , cmd.getAuditLogTypeValue ( ) ) ; }
protected void setUpQueryExpectations ( java.lang.String query , java.lang.Object failure ) throws java.lang.Exception { assertEquals ( "" , query ) ; java.util.List < org.ovirt.engine.api.model.Permission > perms = setUpPermissions ( ) ; setUpEntityQueryExpectations ( queryType , queryParams.getClass ( ) , new java.lang.String [ ] { queryParameterName } , new java.lang.Object [ ] { GUIDS [ 1 ] } , perms , failure ) ; }
public void getClusterDesktopMemoryOverCommit ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . intValue ( ) : 0 ; } } ; getConfigFromCache ( new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters ( org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit , getDefaultConfigurationVersion ( ) ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) ; if ( response.getSucceeded ( ) ) { model.applyData ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.LUNs > ) ( response.getReturnValue ( ) ) ) , false ) ; model.setGetLUNsFailure ( "" ) ; } else { model.setGetLUNsFailure ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . couldNotRetrieveLUNsLunsFailure ( ) ) ; } }
public void setup ( ) { storagePool = new org.ovirt.engine.core.common.businessentities.storage_pool ( "test" , org.ovirt.engine.core.compat.Guid.NewGuid ( ) , "test" , StorageType.UNKNOWN.getValue ( ) , StoragePoolStatus.Up.getValue ( ) ) ; validator = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.StoragePoolValidator ( storagePool ) ) ; }
private void runOnce ( ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ; org.ovirt.engine.ui.frontend.AsyncQuery getVmInitQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; getVmInitQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { @ java.lang.Override public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.vms.RunOnceModel runOnceModel = new org.ovirt.engine.ui.uicommonweb.models.vms.WebadminRunOnceModel ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.this ) ; setWindow ( runOnceModel ) ; runOnceModel.init ( ) ; } } ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getVmById ( getVmInitQuery , vm.getId ( ) ) ; }
public void testGetAllMultiVdsSearch ( ) throws java.lang.Exception { org.ovirt.engine.core.common.queries.SearchParameters searchParam = new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Hosts" + ( org.ovirt.engine.core.common.utils.CommonConstants.QUERY_RETURN_TYPE_SEPARATOR ) ) , org.ovirt.engine.core.common.interfaces.SearchType.VDS ) ; org.ovirt.engine.core.bll.SearchQuery < org.ovirt.engine.core.common.queries.SearchParameters > searchQuery = spySearchQuery ( searchParam ) ; searchQuery.executeQueryCommand ( ) ; org.junit.Assert.assertEquals ( vdsResultList , searchQuery.getQueryReturnValue ( ) . getReturnValue ( ) ) ; }
public void testFirstMatch ( ) { java.util.List < java.lang.String > source = java.util.Arrays.asList ( "zero" , "one" , "two " , "three" ) ; org.junit.Assert.assertEquals ( "one" , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , "one" , "two" ) ) ; org.junit.Assert.assertEquals ( "one" , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , "two" , "one" ) ) ; org.junit.Assert.assertEquals ( null , org.ovirt.engine.core.common.utils.ListUtils.firstMatch ( source , null ) ) ; }
public void setColumnVisible ( com.google.gwt.user.cellview.client.Column < T , ? > column , boolean visible ) { if ( isColumnPresent ( column ) ) { columnVisibleMapOverride.put ( column , visible ) ; ensureColumnVisible ( column , null , visible , columnWidthMap.get ( column ) , false ) ; } }
protected boolean canDoAction ( ) { if ( ! ( super . canDoAction ( ) ) ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions ) { if ( ( ( session.getSlaveVolumeId ( ) ) == null ) || ( ( session.getSlaveNodeUuid ( ) ) == null ) ) { return failCanDoAction ( VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE ) ; } } return true ; }
public void cpuTypeDoesNotSupportVirtServiceForVirtCluster ( ) { org.mockito.Mockito.when ( cluster.supportsVirtService ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.doReturn ( false ) . when ( validator ) . cpuExists ( ) ; org.junit.Assert.assertThat ( validator.cpuTypeSupportsVirtService ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND ) ) ; }
public void onSuccess ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue ) { java.lang.Integer numOfActiveVms = returnValue.getReturnValue ( ) ; if ( numOfActiveVms != 0 ) { confirmModel.setMessage ( constants.thereAreActiveVMsRequiringRestart ( ) ) ; } checkForNonResponsiveHosts ( confirmModel ) ; }
public void testSetEmulatedMachine ( ) { java.lang.String preUpdate = existingCluster.getEmulatedMachine ( ) ; java.lang.String updatedValue = "pc-version-1.2.3" ; org.junit.Assert.assertNotSame ( updatedValue , preUpdate ) ; existingCluster.setEmulatedMachine ( updatedValue ) ; dao.setEmulatedMachine ( existingCluster.getId ( ) , updatedValue , false ) ; org.junit.Assert.assertEquals ( updatedValue , dao.get ( existingCluster.getId ( ) ) . getEmulatedMachine ( ) ) ; }
public boolean equals ( java.lang.Object o ) { if ( ( this ) == o ) { return true ; } if ( ! ( o instanceof org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration ) ) { return false ; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration that = ( ( org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration ) ( o ) ) ; return ( java.util.Objects.equals ( getId ( ) , that.getId ( ) ) ) && ( java.util.Objects.equals ( getNameServers ( ) , that.getNameServers ( ) ) ) ; }
void localize ( org.ovirt.engine.ui.userportal.ApplicationConstants constants ) { headerLabel.setText ( constants.loginHeaderLabel ( ) ) ; userNameEditor.setLabel ( constants.loginFormUserNameLabel ( ) ) ; passwordEditor.setLabel ( constants.loginFormPasswordLabel ( ) ) ; domainEditor.setLabel ( constants.loginFormDomainLabel ( ) ) ; connectAutomatically.setLabel ( constants.loginFormConnectAutomaticallyLabel ( ) ) ; loginButton.setLabel ( constants.loginButtonLabel ( ) ) ; }
private org.ovirt.engine.ui.common.widget.MenuBar rootMenu ( org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel < ? > item ) { org.ovirt.engine.ui.common.widget.MenuBar menuBar = new org.ovirt.engine.ui.common.widget.MenuBar ( true ) ; return menuBar ; }
private static void addCommandForNewQuota ( org.ovirt.engine.core.compat.Guid commandId , org.ovirt.engine.core.compat.Guid quotaLimitId , java.lang.Double desiredStorageSize , java.lang.Integer desiredCPUSize , java.lang.Double desiredMemSize ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.QuotaManager.QuotaDeltaValue > commandMap = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.bll.QuotaManager.QuotaDeltaValue > ( ) ; org.ovirt.engine.core.bll.QuotaManager.addCommandForExistingQuota ( commandId , desiredStorageSize , desiredCPUSize , desiredMemSize , commandMap ) ; }
public boolean canOpenSpiceConsole ( org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item ) { if ( item.isPool ( ) ) { return false ; } if ( ( item.getDefaultConsoleModel ( ) . getConnectCommand ( ) . getIsAvailable ( ) ) && ( item.getDefaultConsoleModel ( ) . getConnectCommand ( ) . getIsExecutionAllowed ( ) ) ) { return true ; } return false ; }
public static org.ovirt.engine.core.common.businessentities.VDSGroup map ( org.ovirt.engine.core.common.businessentities.StoragePool pool , org.ovirt.engine.core.common.businessentities.VDSGroup template ) { org.ovirt.engine.core.common.businessentities.VDSGroup entity = ( template != null ) ? template : new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ; if ( ( pool.getcompatibility_version ( ) ) != null ) { entity.setcompatibility_version ( pool.getcompatibility_version ( ) ) ; } return entity ; }
protected boolean updateVnicForBackwardCompatibility ( ) { if ( ! ( validate ( org.ovirt.engine.core.bll.network.vm.VnicProfileHelper.updateNicForBackwardCompatibility ( org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getParameters ( ) . getInterface ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVm ( ) . getStaticData ( ) , org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getCurrentUser ( ) . getUserId ( ) ) ) ) ) { return false ; } return true ; }
public java.lang.Void runInTransaction ( ) { getCompensationContext ( ) . snapshotEntityStatus ( getVm ( ) . getDynamicData ( ) , getVm ( ) . getStatus ( ) ) ; updateVmData ( getVm ( ) . getDynamicData ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
protected void ExecuteVdsBrokerCommand ( ) { java.util.List < java.lang.String > vmIds = org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand.getParameters ( ) . getVmIds ( ) ; java.lang.String [ ] vmIdsArray = vmIds.toArray ( new java.lang.String [ vmIds.size ( ) ] ) ; fullVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand.getBroker ( ) . list ( java.lang.Boolean.TRUE.toString ( ) , vmIdsArray ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand.ProceedProxyReturnValue ( ) ; java.util.Map < java.lang.String , java.lang.Object > [ ] struct = fullVmListReturn.mVmList ; org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand.setReturnValue ( struct ) ; }
public void testGetAllWithPermissionsPrivilegedUser ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao.getAll ( org.ovirt.engine.core.dao.PRIVILEGED_USER_ID , true ) ; org.junit.Assert.assertFalse ( result.isEmpty ( ) ) ; org.junit.Assert.assertEquals ( org.ovirt.engine.core.dao.StorageDomainDaoTest.NUMBER_OF_STORAGE_DOMAINS_FOR_PRIVELEGED_USER , result.size ( ) ) ; org.junit.Assert.assertEquals ( result.iterator ( ) . next ( ) , existingDomain ) ; }
public void updateMemoryBalloon ( org.ovirt.engine.core.compat.Guid vmId , java.lang.Boolean isBalloonEnabled ) { if ( isBalloonEnabled == null ) { return ; } if ( isBalloonEnabled ) { if ( ! ( hasMemoryBalloon ( vmId ) ) ) { addMemoryBalloon ( vmId ) ; } } else { removeMemoryBalloons ( vmId ) ; } }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > pools = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; if ( ( pools != null ) && ( ( pools.size ( ) ) > 0 ) ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = pools.get ( 0 ) ; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterList ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool.getId ( ) ) ; } }
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( ! ( obj instanceof org.ovirt.engine.core.common.businessentities.VmDevice ) ) { return false ; } org.ovirt.engine.core.common.businessentities.VmPayload other = ( ( org.ovirt.engine.core.common.businessentities.VmPayload ) ( obj ) ) ; return ( ( super . equals ( obj ) ) && ( java.util.Objects.equals ( volumeId , other.volumeId ) ) ) && ( java.util.Objects.equals ( files , other.files ) ) ; }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData selectedObject = ( ( com.google.gwt.view.client.SingleSelectionModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData > ) ( event.getSource ( ) ) ) . getSelectedObject ( ) ; customSelectionCellFormatType.setEnabledWithToolTip ( selectedObject.getCollapseSnapshots ( ) . getEntity ( ) , constants.importAllocationModifiedCollapse ( ) ) ; }
protected boolean containsDefaultCluster ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > clusters = getVdsGroupDao ( ) . getAllForStoragePool ( storagePool.getId ( ) ) ; boolean hasDefaultCluster = false ; for ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters ) { if ( cluster.getId ( ) . equals ( org.ovirt.engine.core.common.config.Config.getValue ( ConfigValues.AutoRegistrationDefaultVdsGroupID ) ) ) { hasDefaultCluster = true ; break ; } } return hasDefaultCluster ; }
public void appendCustomValueUsesNullSeparator ( ) { final java.lang.String key = "foo" ; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME ; final java.lang.String newVal = "bar" ; final java.lang.String sep = null ; b.addCustomValue ( key , value ) ; b.appendCustomValue ( key , newVal , sep ) ; final java.lang.String s = b.getCustomValue ( key ) ; org.junit.Assert.assertEquals ( ( ( value + sep ) + newVal ) , s ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > list = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ( ) ; if ( source != null ) { java.lang.Iterable listEnumerable = ( ( java.lang.Iterable ) ( source ) ) ; java.util.Iterator listIterator = listEnumerable.iterator ( ) ; while ( listIterator.hasNext ( ) ) { list.add ( ( ( org.ovirt.engine.core.common.businessentities.Disk ) ( listIterator.next ( ) ) ) ) ; } } return list ; }
protected void postInitDisks ( ) { onDataLoad ( ) ; checkDestFormatCompatibility ( ) ; stopProgress ( ) ; }
private void assertCorrectSlaveCountInValidBonds ( int numberOfSlaves , java.lang.String reason , org.hamcrest.Matcher < org.ovirt.engine.core.bll.ValidationResult > matcher , java.lang.String bondName ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName ( bondName , true ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > slaves = createGivenCountOfSlavesForBond ( bondName , numberOfSlaves ) ; org.junit.Assert.assertThat ( reason , new org.ovirt.engine.core.bll.validator.HostInterfaceValidator ( vdsNetworkInterface ) . validBond ( slaves ) , matcher ) ; }
private boolean connectStorageToLunByVdsId ( org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.common.businessentities.LUNs lun ) { try { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance ( ) . getItem ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) . getstorage_type ( ) ) . connectStorageToLunByVdsId ( org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.getStorageDomain ( ) , vds.getId ( ) , lun , Guid.Empty ) ; } catch ( org.ovirt.engine.core.common.errors.VdcBLLException e ) { final org.ovirt.engine.core.bll.storage.ConnectAllHostsToLunCommand.ConnectAllHostsToLunCommandReturnValue result = getResult ( ) ; result.setFailedVds ( vds ) ; result.setFailedLun ( lun ) ; throw e ; } }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , java.lang.String value , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < java.lang.String > valueUpdater ) { delegate.onBrowserEvent ( context , parent , value , event , valueUpdater ) ; super . onBrowserEvent ( context , parent , value , event , valueUpdater ) ; }
private void handleFinalizingFailure ( final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand < T > . StateContext context ) { log.error ( "Finalizing failed transfer. {}" , getTransferDescription ( ) ) ; stopImageTransferSession ( context.entity ) ; if ( ! ( org.ovirt.engine.core.compat.Guid.isNullOrEmpty ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getImageGroupID ( ) ) ) ) { setImageStatus ( ( ( org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters ( ) . getTransferType ( ) ) == ( org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload ) ? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK ) ) ; } updateEntityPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; setAuditLogTypeFromPhase ( ImageTransferPhase.FINISHED_FAILURE ) ; }
public org.ovirt.engine.core.bll.ValidationResult hotUpdatePossible ( ) { if ( ( getRequiredAction ( ) ) == ( org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.UPDATE_VM_DEVICE ) ) { if ( ! ( org.ovirt.engine.core.common.FeatureSupported.networkLinking ( version ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.HOT_VM_INTERFACE_UPDATE_IS_NOT_SUPPORTED , org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.clusterVersion ( ) ) ; } else if ( ( ( getVnicProfile ( ) ) != null ) && ( getVnicProfile ( ) . isPortMirroring ( ) ) ) { return new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_PERFORM_HOT_UPDATE_WITH_PORT_MIRRORING ) ; } } return org.ovirt.engine.core.bll.ValidationResult.VALID ; }
public void testGet ( ) throws java.lang.Exception { setUpGetStorageDomainExpectations ( StorageDomainType.ImportExport ) ; setUpGetEntityExpectations ( StorageDomainType.ImportExport , org.ovirt.engine.api.restapi.resource.BackendExportDomainDiskResourceTest.STORAGE_DOMAIN_ID ) ; setUriInfo ( setUpBasicUriExpectations ( ) ) ; org.ovirt.engine.api.model.Disk disk = resource.get ( ) ; assertNotNull ( disk ) ; assertEquals ( disk.getId ( ) , org.ovirt.engine.api.restapi.resource.BackendExportDomainDiskResourceTest.DISK_ID.toString ( ) ) ; }
public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source == null ? new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) : ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; }
private void interfaceHasSiblingVlanInterfaces ( org.ovirt.engine.core.compat.Guid vdsID , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface , org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > siblingVlanInterfaces = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( siblingVlanInterfaces.isEmpty ( ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllSiblingVlanInterfaces , new org.ovirt.engine.core.common.queries.InterfaceAndIdQueryParameters ( vdsID , iface ) , aQuery ) ; }
protected boolean validate ( ) { loadStorageDomain ( ) ; if ( ! ( org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters ( ) . isSkipDomainChecks ( ) ) ) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator ( storageDomain ) ; if ( ! ( validate ( storageDomainValidator.isDomainExistAndActive ( ) ) ) ) { return false ; } } return true ; }
protected boolean canDoAction ( ) { org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand < T > . DetachNetworkValidator validator = new DetachNetworkValidator ( getNetwork ( ) , org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters ( ) . getNetworkCluster ( ) ) ; return ( ( validate ( validator.notManagementNetwork ( ) ) ) && ( validate ( validator.clusterNetworkNotUsedByVms ( ) ) ) ) && ( validate ( validator.clusterNetworkNotUsedByTemplates ( ) ) ) ; }
private void updateCachedIsoFileListFromVdsm ( org.ovirt.engine.core.common.businessentities.RepoFileMetaData repoFileMetaData ) { boolean isRefreshed = false ; try { java.util.List < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > problematicRepoFileList = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.RepoFileMetaData > ( ) ; isRefreshed = refreshIsoDomain ( repoFileMetaData.getRepoDomainId ( ) , problematicRepoFileList , repoFileMetaData.getFileType ( ) ) ; addRepoFileToProblematicList ( problematicRepoFileList ) ; } finally { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.infoFormat ( "Finished automatic refresh process for {0} file type with {1}, for storage domain id {2}." , repoFileMetaData.getFileType ( ) , ( isRefreshed ? "success" : "failure" ) , repoFileMetaData.getRepoDomainId ( ) ) ; } }
private void initVersion ( ) { if ( ! ( isVersionInit ) ) { isVersionInit = true ; for ( org.ovirt.engine.core.compat.Version item : getVersion ( ) . getItems ( ) ) { if ( item.equals ( getEntity ( ) . getcompatibility_version ( ) ) ) { getVersion ( ) . setSelectedItem ( item ) ; break ; } } } }
public boolean eval ( org.ovirt.engine.core.common.businessentities.VDS p ) { return ( ( ( ( p.getUsageCpuPercent ( ) ) + ( calcSpmCpuConsumption ( p ) ) ) < lowUtilization ) && ( ( p.getVmCount ( ) ) >= minVmCount ) ) && ( ( ( p.getCpuOverCommitTimestamp ( ) ) == null ) || ( ( ( getTime ( ) . getTime ( ) ) - ( p.getCpuOverCommitTimestamp ( ) . getTime ( ) ) ) < ( java.util.concurrent.TimeUnit.MINUTES.toMillis ( cpuOverCommitDurationMinutes ) ) ) ) ; }
public static void getAllProviders ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } java.util.Collections.sort ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.Provider > ) ( source ) ) , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( ) , aQuery ) ; }
private static java.util.Set < java.lang.String > getClusterEmulatedMachines ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { if ( ( cluster.getEmulatedMachine ( ) ) == null ) { return new java.util.HashSet < > ( ) ; } else { return new java.util.HashSet ( java.util.Arrays.asList ( cluster.getEmulatedMachine ( ) . split ( "," ) ) ) ; } }
public void onSelectionChange ( com.google.gwt.view.client.SelectionChangeEvent event ) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData selectedObject = ( ( com.google.gwt.view.client.SingleSelectionModel < org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData > ) ( event.getSource ( ) ) ) . getSelectedObject ( ) ; customSelectionCellFormatType.setEnabled ( selectedObject.getCollapseSnapshots ( ) . getEntity ( ) ) ; }
public void validateFailsForVdsNonUp ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.CreateBrickCommand ( new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters ( ) , null ) ) ; prepareMocks ( VDSStatus.Down ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.mockito.Mockito.doReturn ( VDSStatus.Error ) . when ( vds ) . getStatus ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.mockito.Mockito.doReturn ( VDSStatus.Maintenance ) . when ( vds ) . getStatus ( ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; }
protected void addStoragePoolToDb ( ) { org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool ( ) . setId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool ( ) . setStatus ( StoragePoolStatus.Uninitialized ) ; org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePoolDao ( ) . save ( org.ovirt.engine.core.bll.storage.pool.AddEmptyStoragePoolCommand.getStoragePool ( ) ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.storage_pool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.storage_pool ) ( returnValue ) ) ; model.SetDataCenter ( model , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.storage_pool > ( java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.storage_pool [ ] { dataCenter } ) ) ) ; model.getDataCenter ( ) . setIsChangable ( false ) ; }
protected void handleCopyResult ( org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage , org.ovirt.engine.core.common.action.VdcActionParametersBase parameters , org.ovirt.engine.core.common.action.VdcReturnValueBase result ) { if ( ! ( result.getSucceeded ( ) ) ) { throw new org.ovirt.engine.core.common.errors.VdcBLLException ( org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError ) ; } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice ( copiedDiskImage ) ; org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList ( ) . addAll ( result.getInternalTaskIdList ( ) ) ; newDiskImages.add ( copiedDiskImage ) ; } }
public static void GetAllProvidersByType ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.common.businessentities.ProviderType providerType ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Provider > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllProviders , new org.ovirt.engine.core.common.queries.GetAllProvidersParameters ( providerType ) , aQuery ) ; }
public void setup ( ) { initVm ( ) ; images = new java.util.ArrayList < > ( ) ; emulatedMachine = "pc" ; cpuId = "SandyBridge" ; underTest = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter ( vm , images , version , emulatedMachine , cpuId , osRepository ) ; }
public void ovfConfigurationMap ( ) { java.lang.String ovfConfig = "config" ; org.ovirt.engine.api.model.ConfigurationType configurationType = org.ovirt.engine.api.model.ConfigurationType.OVF ; org.ovirt.engine.api.model.Vm model = new org.ovirt.engine.api.model.Vm ( ) ; org.ovirt.engine.api.restapi.types.VmMapper.map ( ovfConfig , ConfigurationType.OVF , model ) ; assertNotNull ( model.getInitialization ( ) ) ; assertNotNull ( model.getInitialization ( ) . getConfiguration ( ) ) ; assertEquals ( ovfConfig , model.getInitialization ( ) . getConfiguration ( ) . getData ( ) ) ; assertEquals ( model.getInitialization ( ) . getConfiguration ( ) . getType ( ) , configurationType ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification ( org.ovirt.engine.core.compat.Guid violatingEntityId , org.ovirt.engine.core.compat.Guid nicId , java.lang.String nicName , org.ovirt.engine.core.common.errors.EngineMessage message ) { boolean bothIdentificationSet = ( nicId != null ) && ( nicName != null ) ; java.lang.String [ ] replacements = createIncoherentNicIdentificationErrorReplacements ( violatingEntityId , nicId , nicName ) ; return org.ovirt.engine.core.bll.ValidationResult.failWith ( message , replacements ) . when ( ( bothIdentificationSet && ( isNicNameAndNicIdIncoherent ( nicId , nicName ) ) ) ) ; }
public void testTryParse ( ) { org.ovirt.engine.core.compat.TimeSpan ref = org.ovirt.engine.core.compat.TimeSpan.tryParse ( "-1.02:03:04.05" ) ; org.junit.Assert.assertNotNull ( "A TimeSpan should be returned" , ref ) ; org.junit.Assert.assertEquals ( ( - 1 ) , ref.Days ) ; ref = org.ovirt.engine.core.compat.TimeSpan.tryParse ( "A Long Time" ) ; org.junit.Assert.assertNull ( "A TimeSpan should not be returned" , ref ) ; }
public org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap runInTransaction ( ) { org.ovirt.engine.core.bll.context.CompensationContext context = getCompensationContext ( ) ; context.snapshotEntityStatus ( map ) ; map.setStatus ( status ) ; getStoragePoolIsoMapDAO ( ) . updateStatus ( map.getId ( ) , map.getStatus ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; }
public org.ovirt.engine.api.model.Hook getHook ( org.ovirt.engine.api.model.Hooks hooks ) { for ( org.ovirt.engine.api.model.Hook hook : hooks.getHooks ( ) ) { if ( hook.getId ( ) . equals ( guid ) ) { return hook ; } } return notFound ( ) ; }
private void updateHaMaintenanceAvailability ( java.util.List items ) { if ( ( items == null ) || ( ( items.size ( ) ) != 1 ) ) { setHaMaintenanceAvailability ( false ) ; return ; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem ( ) ; if ( ( vm == null ) || ( ! ( vm.isHostedEngine ( ) ) ) ) { setHaMaintenanceAvailability ( false ) ; } else { setHaMaintenanceAvailability ( true ) ; } }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getFakeDashboard ( ) { java.util.Random random = new java.util.Random ( ) ; org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = new org.ovirt.engine.ui.frontend.server.dashboard.Dashboard ( ) ; dashboard.setGlobalUtilization ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.fakeGlobalUtilization ( random ) ) ; dashboard.setHeatMapData ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.fakeHeatMapData ( random ) ) ; dashboard.setInventory ( org.ovirt.engine.ui.frontend.server.dashboard.fake.FakeDataGenerator.fakeInventory ( random ) ) ; return dashboard ; }
private void updateCanSpecify ( ) { boolean isChangable = ( bootProtocolsAvailable ) && ( getIsStaticAddress ( ) ) ; getAddress ( ) . setIsChangable ( isChangable ) ; getSubnet ( ) . setIsChangable ( isChangable ) ; }
protected void executeQueryCommand ( ) { java.lang.String password = org.ovirt.engine.core.aaa.SsoUtils.getPassword ( sessionDataContainer.getSsoAccessToken ( org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getParameters ( ) . getSessionId ( ) ) ) ; org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue ( ) . setReturnValue ( ( password != null ) ) ; org.ovirt.engine.core.bll.aaa.IsPasswordDelegationPossibleQuery.getQueryReturnValue ( ) . setSucceeded ( true ) ; }
public void testDiskAttachedToAnyVM ( ) { org.junit.Assert.assertThat ( validator.isDiskAttachedToAnyVm ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > findAllInterfaceVlanIdIsEmpty ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > items ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ret = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface i : items ) { if ( ( i.getVlanId ( ) ) == null ) { ret.add ( i ) ; } } return ret ; }
protected void executeCommand ( ) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand ( org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters ( ) . getAction ( ) , org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters ( ) . getActionParameters ( ) , org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent ( ) ) ; org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded ( true ) ; }
protected void mockVmRunHandler ( ) { org.mockito.Mockito.doReturn ( vmRunHandler ) . when ( command ) . getVmRunHandler ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( vmRunHandler ) . performImageChecksForRunningVm ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.VM.class ) , org.mockito.Matchers.anyListOf ( java.lang.String.class ) , org.mockito.Matchers.any ( org.ovirt.engine.core.common.action.RunVmParams.class ) , org.mockito.Matchers.anyListOf ( org.ovirt.engine.core.common.businessentities.Disk.class ) ) ; }
public static void exitOnError ( org.ovirt.engine.core.domains.ManageDomainsResult result ) { if ( ! ( result.isSuccessful ( ) ) ) { org.ovirt.engine.core.domains.ManageDomains.log.error ( result.getDetailedMessage ( ) ) ; java.lang.System.out.println ( result.getDetailedMessage ( ) ) ; java.lang.System.exit ( result.getExitCode ( ) ) ; } }
private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan ( java.lang.String baseIfaceName , int vlanId , java.lang.String networkName ) { return createVdsInterface ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , ( ( baseIfaceName + "." ) + vlanId ) , false , null , vlanId , networkName , true , null , false , null ) ; }
protected void setBallooning ( org.ovirt.engine.api.model.VM vm ) { java.lang.Boolean balloonEnabled = getEntity ( java.lang.Boolean.class , VdcQueryType.IsBalloonEnabled , new org.ovirt.engine.core.common.queries.IdQueryParameters ( new org.ovirt.engine.core.compat.Guid ( vm.getId ( ) ) ) , null , true ) ; if ( ! ( vm.isSetMemoryPolicy ( ) ) ) { vm.setMemoryPolicy ( new org.ovirt.engine.api.model.MemoryPolicy ( ) ) ; } vm.getMemoryPolicy ( ) . setBallooning ( balloonEnabled ) ; }
protected boolean canDoAction ( ) { if ( ! ( entityExists ( ) ) ) { return failCanDoAction ( ( org.ovirt.engine.core.bll.AbstractVmWatchdogCommand.getParameters ( ) . isVm ( ) ? org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND : org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST ) ) ; } return true ; }
private void setUpParentMock ( org.ovirt.engine.api.restapi.resource.BackendHostsResource parent ) { parent.setBackend ( backend ) ; parent.setMappingLocator ( mapperLocator ) ; parent.setValidatorLocator ( validatorLocator ) ; parent.setMessageBundle ( messageBundle ) ; parent.setHttpHeaders ( httpHeaders ) ; }
public void validateFailsOnNoHook ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters ( HOOK_ID ) , null ) ) ; setupMocks ( cmd , false ) ; org.junit.Assert.assertFalse ( cmd.validate ( ) ) ; org.junit.Assert.assertTrue ( cmd.getReturnValue ( ) . getValidationMessages ( ) . contains ( EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString ( ) ) ) ; }
protected org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters getActionParameters ( org.ovirt.engine.api.model.Network network , org.ovirt.engine.api.model.Network entity ) { if ( namedDataCenter ( network ) ) { entity.setDataCenterId ( getDataCenterId ( network ) ) ; } return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters ( entity.getDataCenterId ( ) , entity ) ; }
public void findNoneOfActiveVmsUsingNetworks ( ) { mockDaos ( true ) ; java.util.List < java.lang.String > vmNames = vmInterfaceManager.findActiveVmsUsingNetworks ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , java.util.Collections.singletonList ( ( ( NETWORK_NAME ) + "1" ) ) ) ; org.junit.Assert.assertTrue ( vmNames.isEmpty ( ) ) ; }
public void setUp ( ) { clusterId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( clusterDao ) . get ( org.mockito.ArgumentMatchers.any ( org.ovirt.engine.core.compat.Guid.class ) ) ; org.mockito.Mockito.doReturn ( clusterUtils ) . when ( command ) . getClusterUtils ( ) ; org.mockito.Mockito.when ( glusterUtils.getUpServer ( clusterId ) ) . thenReturn ( getVds ( VDSStatus.Up ) ) ; }
public void validateShareableDiskVolumeFormatSucceeds ( ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createShareableDiskImage ( ) ; image.setvolumeFormat ( VolumeFormat.RAW ) ; org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters ( ) ; parameters.setDiskInfo ( image ) ; org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid ( ) ; initializeCommand ( storageId , parameters ) ; mockVm ( ) ; mockStorageDomain ( storageId ) ; mockStoragePoolIsoMap ( ) ; mockInterfaceList ( ) ; mockMaxPciSlots ( ) ; runAndAssertValidateSuccess ( ) ; }
public void getClusterList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; java.util.Collections.sort ( list , new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAllVdsGroups , new org.ovirt.engine.core.common.queries.VdcQueryParametersBase ( ) , aQuery ) ; }
static org.ovirt.engine.api.model.VM getModel ( int index ) { org.ovirt.engine.api.model.VM model = new org.ovirt.engine.api.model.VM ( ) ; model.setName ( NAMES [ index ] ) ; model.setDescription ( DESCRIPTIONS [ index ] ) ; model.setId ( GUIDS [ index ] . toString ( ) ) ; model.setCluster ( new org.ovirt.engine.api.model.Cluster ( ) ) ; model.getCluster ( ) . setId ( GUIDS [ 2 ] . toString ( ) ) ; return model ; }
private org.ovirt.engine.core.common.businessentities.VM mockVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm.setId ( vmId ) ; vm.setStoragePoolId ( spId ) ; vm.setStatus ( VMStatus.Down ) ; org.mockito.Mockito.when ( vmDao.get ( vmId ) ) . thenReturn ( vm ) ; return vm ; }
public void syncWithBackend ( ) { final org.ovirt.engine.core.common.businessentities.StoragePool dc = getSelectedDc ( ) ; if ( dc == null ) { return ; } boolean isSupportBridgesReportByVDSM = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted ( ConfigurationValues.SupportBridgesReportByVDSM , dc.getcompatibility_version ( ) . toString ( ) ) ) ) ; setSupportBridgesReportByVDSM ( isSupportBridgesReportByVDSM ) ; boolean isMTUOverrideSupported = ( ( java.lang.Boolean ) ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted ( ConfigurationValues.MTUOverrideSupported , dc.getcompatibility_version ( ) . toString ( ) ) ) ) ; setMTUOverrideSupported ( isMTUOverrideSupported ) ; }
public void setText ( java.lang.String text ) { super . setText ( text ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object ReturnValue ) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.SearchableListModel ) ( model ) ) ; java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( ReturnValue ) ) . getReturnValue ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > templates = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; templates.add ( map.get ( true ) ) ; searchableListModel.setItems ( templates ) ; }
public void testRemoveById ( ) { dao.remove ( new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID , FixturesTool.STORAGE_DOMAIN_SCALE_SD5 ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap > entries = dao.getAllByStorageDomainId ( org.ovirt.engine.core.dao.ImageStorageDomainMapDaoTest.EXISTING_IMAGE_ID ) ; for ( org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap entry : entries ) { org.junit.Assert.assertNotEquals ( FixturesTool.STORAGE_DOMAIN_SCALE_SD5 , entry.getStorageDomainId ( ) ) ; } org.junit.Assert.assertNotNull ( entries ) ; org.junit.Assert.assertTrue ( entries.isEmpty ( ) ) ; }
private static void logVmStatusTransition ( org.ovirt.engine.core.common.businessentities.VM vmToUpdate , org.ovirt.engine.core.common.businessentities.VmDynamic runningVm ) { if ( ( vmToUpdate.getStatus ( ) ) != ( runningVm.getStatus ( ) ) ) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.infoFormat ( "VM {0} {1} moved from {2} --> {3}" , vmToUpdate.getName ( ) , vmToUpdate.getId ( ) , vmToUpdate.getStatus ( ) . name ( ) , runningVm.getStatus ( ) . name ( ) ) ; } }
public void getGlusterHostsNewlyAdded ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid clusterId , boolean isFingerprintRequired ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetAddedGlusterServers , new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters ( clusterId , isFingerprintRequired ) , aQuery ) ; }
protected boolean canDoAction ( ) { if ( ( hostedEngineHelper.getStorageDomain ( ) ) != null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST ) ; } if ( ( heStorageDomain ) == null ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST ) ; } if ( ! ( java.util.Arrays.asList ( org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES ) . contains ( heStorageDomain.getStorageType ( ) ) ) ) { return failCanDoAction ( EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED ) ; } return true ; }
public void nameLengthIsTooLong ( ) { org.mockito.Mockito.when ( host.getName ( ) ) . thenReturn ( org.ovirt.engine.core.utils.RandomUtils.instance ( ) . nextString ( ( ( org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE ) * 2 ) ) ) ; org.junit.Assert.assertThat ( validator.nameLengthIsLegal ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith ( EngineMessage.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG ) ) ; }
protected boolean setAndValidateCpuProfile ( ) { getVm ( ) . getStaticData ( ) . setVdsGroupId ( org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId ( ) ) ; getVm ( ) . getStaticData ( ) . setCpuProfileId ( org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters ( ) . getCpuProfileId ( ) ) ; return validate ( org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile ( getVm ( ) . getStaticData ( ) , getEffectiveCompatibilityVersion ( ) ) ) ; }
private org.ovirt.engine.core.bll.ValidationResult validateQos ( java.util.Collection < org.ovirt.engine.core.common.businessentities.network.NetworkAttachment > attachmentsToConfigure ) { org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID ; vr = ( skipValidation ( vr ) ) ? vr : validateQosOverriddenInterfaces ( ) ; vr = ( skipValidation ( vr ) ) ? vr : validateQosNotPartiallyConfigured ( attachmentsToConfigure ) ; return vr ; }
public void onSuccess ( java.lang.Object returnValue ) { getBehavior ( ) . deactivateInstanceTypeManager ( ) ; updateWatchdogItems ( ( ( java.util.HashSet < org.ovirt.engine.core.common.businessentities.VmWatchdogType > ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; getBehavior ( ) . activateInstanceTypeManager ( ) ; }
private java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > getVmDisksDummies ( ) { java.util.Collection < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksDummies = new java.util.LinkedList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.ImportVmCommand.getParameters ( ) . getImageToDestinationDomainMap ( ) . values ( ) ) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage ( ) ; diskImage.setStorageIds ( new java.util.ArrayList ( java.util.Arrays.asList ( storageDomainId ) ) ) ; disksDummies.add ( diskImage ) ; } return disksDummies ; }
protected void initFrontend ( ) { frontend.setEventsHandler ( frontendEventsHandler ) ; frontend.getFrontendFailureEvent ( ) . addListener ( frontendFailureEventListener ) ; frontend.getFrontendNotLoggedInEvent ( ) . addListener ( new org.ovirt.engine.ui.uicompat.IEventListener < org.ovirt.engine.ui.uicompat.EventArgs > ( ) { @ java.lang.Override public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { user.logout ( ) ; } } ) ; frontend.setFilterQueries ( filterFrontendQueries ( ) ) ; }
public static void getGlusterHookContent ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid hookId , org.ovirt.engine.core.compat.Guid serverId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : "" ; } } ; org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters parameters = new org.ovirt.engine.core.common.queries.gluster.GlusterHookContentQueryParameters ( hookId ) ; parameters.setGlusterServerId ( serverId ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetGlusterHookContent , parameters , aQuery ) ; }
public void onBrowserEvent ( org.ovirt.engine.ui.common.widget.table.cell.Context context , com.google.gwt.dom.client.Element parent , java.lang.String value , java.lang.String tooltipContent , com.google.gwt.dom.client.NativeEvent event , com.google.gwt.cell.client.ValueUpdater < java.lang.String > valueUpdater ) { delegate.onBrowserEvent ( context , parent , value , event , valueUpdater ) ; super . onBrowserEvent ( context , parent , value , tooltipContent , event , valueUpdater ) ; }
public java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > getAllWithQuery ( java.lang.String query ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > groups = getJdbcTemplate ( ) . query ( query , org.ovirt.engine.core.dao.ClusterDaoImpl.ClusterRowMapper.instance ) ; return getHostsAndVmsForClusters ( groups ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel brickModel = ( ( org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel ) ( model ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hostList = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; brickModel.getServers ( ) . setItems ( hostList ) ; }
private void createCommand ( ) { org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase ( ) ; params.setStorageDomainId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; params.setStoragePoolId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) ) ; cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.storage.domain.ActivateStorageDomainCommand ( params , null ) ) ; org.mockito.Mockito.doReturn ( storageDomainDao ) . when ( cmd ) . getStorageDomainDao ( ) ; org.mockito.Mockito.doReturn ( storagePoolDao ) . when ( cmd ) . getStoragePoolDao ( ) ; org.mockito.Mockito.doReturn ( vdsDao ) . when ( cmd ) . getVdsDao ( ) ; }
public void eventRaised ( org.ovirt.engine.ui.uicompat.Event < ? extends org.ovirt.engine.ui.uicompat.EventArgs > ev , java.lang.Object sender , org.ovirt.engine.ui.uicompat.EventArgs args ) { java.util.Iterator < org.ovirt.engine.ui.uicommonweb.models.tags.TagModel > iterator = model.getItems ( ) . iterator ( ) ; if ( iterator.hasNext ( ) ) { org.ovirt.engine.ui.uicommonweb.models.tags.TagModel root = model.cloneTagModel ( iterator.next ( ) ) ; updateDataProvider ( java.util.Arrays.asList ( root ) ) ; } }
public void executeCommandFailedWhenServerIdPresent ( ) { cmd = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand ( new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters ( HOOK_ID , org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommandTest.SERVER_ID ) , null ) ) ; setUpMocksForUpdate ( ) ; mockForReadContent ( false , EngineError.GlusterHookNotFound ) ; try { cmd.executeCommand ( ) ; } catch ( org.ovirt.engine.core.common.errors.EngineException e ) { org.junit.Assert.assertEquals ( e.getErrorCode ( ) , EngineError.GlusterHookNotFound ) ; } org.mockito.Mockito.verify ( hooksDao , org.mockito.Mockito.never ( ) ) . updateGlusterHook ( org.mockito.Matchers.any ( org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity.class ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { if ( result != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( org.ovirt.engine.core.common.queries.VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ; if ( vm == null ) { return ; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolInterfaceListModel poolInterfaceListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.pools.PoolInterfaceListModel ) ( model ) ) ; poolInterfaceListModel.SyncSearch ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ; } }
public void canDoActionFailsWhenGlusterMultipleHostHasVolumesWithForce ( ) throws java.lang.Exception { command = org.mockito.Mockito.spy ( new org.ovirt.engine.core.bll.RemoveVdsCommand ( new org.ovirt.engine.core.common.action.RemoveVdsParameters ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , true ) ) ) ; prepareMocks ( ) ; mockVdsWithStatus ( VDSStatus.Maintenance ) ; mockHasMultipleClusters ( true ) ; mockIsGlusterEnabled ( true ) ; mockHasVolumeOnServer ( true ) ; org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure ( command , EngineMessage.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME ) ; }
public void showCounts ( org.ovirt.engine.core.common.businessentities.ErrataCounts errataCounts ) { clearErrorMessage ( ) ; progressDotsImage.setVisible ( false ) ; getTotalSecurity ( ) . setLabel ( buildSecurityString ( errataCounts ) ) ; getTotalBugFix ( ) . setLabel ( java.lang.String.valueOf ( errataCounts.getCountByType ( ErrataType.BUGFIX ) ) ) ; getTotalEnhancement ( ) . setLabel ( java.lang.String.valueOf ( errataCounts.getCountByType ( ErrataType.ENHANCEMENT ) ) ) ; formPanel.setVisible ( true ) ; }
private boolean commitNewMac ( java.lang.String mac ) { availableMacs.remove ( mac ) ; allocatedMacs.put ( mac , 1 ) ; if ( availableMacs.isEmpty ( ) ) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase ( ) ; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log ( logable , AuditLogType.MAC_POOL_EMPTY ) ; return false ; } return true ; }
protected com.google.gwt.user.cellview.client.CellTree createDataDisplayWidget ( org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider modelProvider ) { com.google.gwt.user.cellview.client.CellTree display = new org.ovirt.engine.ui.common.widget.tree.ElementIdCellTree < org.ovirt.engine.ui.webadmin.uicommon.model.SystemTreeModelProvider > ( modelProvider , null , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.res ) { @ java.lang.Override protected void onLoad ( ) { expandTree ( getDataDisplayWidget ( ) . getRootTreeNode ( ) , org.ovirt.engine.ui.webadmin.widget.tree.SystemTree.ITEM_LEVEL ) ; } } ; display.setAnimationEnabled ( true ) ; modelProvider.setDataDisplay ( display ) ; return display ; }
public static java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > getStorageDomainsByIds ( java.util.List < org.ovirt.engine.core.compat.Guid > storageIds , java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > storageDomains ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > list = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid storageId : storageIds ) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.ui.uicommonweb.Linq.getStorageById ( storageId , storageDomains ) ; if ( storageDomain != null ) { list.add ( storageDomain ) ; } } return list ; }
private static void addEmptyCD ( org.ovirt.engine.core.compat.Guid dstId ) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice ( new org.ovirt.engine.core.common.businessentities.VmDeviceId ( org.ovirt.engine.core.compat.Guid.newGuid ( ) , dstId ) , VmDeviceGeneralType.DISK , VmDeviceType.CDROM , java.util.Collections.< java.lang.String , java.lang.Object > singletonMap ( VdsProperties.Path , "" ) , true , true , null , false ) ; }
public static void getVmSnapshotList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Snapshot > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.RunQuery ( VdcQueryType.GetAllVmSnapshotsByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
public void hasMultipleClustersForLocalDC ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.Cluster > clusters = java.util.Arrays.asList ( new org.ovirt.engine.core.common.businessentities.Cluster ( ) , new org.ovirt.engine.core.common.businessentities.Cluster ( ) ) ; org.mockito.Mockito.when ( clusterDao.getAllForStoragePool ( org.mockito.ArgumentMatchers.any ( ) ) ) . thenReturn ( clusters ) ; cmd.getStoragePool ( ) . setIsLocal ( true ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.CLUSTER_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE ) ; }
public static org.ovirt.engine.api.model.QosType map ( java.lang.String qosType , org.ovirt.engine.api.model.QosType template ) { if ( qosType == null ) { if ( template == null ) { throw new java.lang.IllegalStateException ( "Not specified which QosType should be used" ) ; } else { return org.ovirt.engine.api.restapi.types.QosTypeMapper.map ( template , null ) ; } } else { return org.ovirt.engine.api.restapi.types.QosTypeMapper.mapModelQosType ( qosType ) ; } }
public org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc getDeviceList ( int storageType ) { try { java.util.Map < java.lang.String , java.lang.Object > xmlRpcReturnValue = vdsServer.getDeviceList ( storageType ) ; org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.LUNListReturnForXmlRpc ( xmlRpcReturnValue ) ; return wrapper ; } catch ( java.lang.reflect.UndeclaredThrowableException ute ) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException ( ute ) ; } }
protected org.ovirt.engine.api.model.Nic deprecatedPopulate ( org.ovirt.engine.api.model.Nic model , org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity ) { java.util.Set < java.lang.String > details = org.ovirt.engine.api.common.util.DetailHelper.getDetails ( httpHeaders , uriInfo ) ; org.ovirt.engine.api.restapi.resource.BackendNicHelper.addReportedDevices ( this , model , entity ) ; if ( details.contains ( "statistics" ) ) { org.ovirt.engine.api.restapi.resource.BackendNicHelper.addStatistics ( model , entity ) ; } return model ; }
public void isConnWithSameDetailsExistCheckSameConn ( ) { org.ovirt.engine.core.common.businessentities.StorageServerConnections newISCSIConnection = createISCSIConnection ( "1.2.3.4" , StorageType.ISCSI , "iqn.2013-04.myhat.com:aaa-target1" , "user1" , "mypassword123" ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageServerConnections > connections = new java.util.ArrayList < > ( ) ; connections.add ( newISCSIConnection ) ; org.mockito.Mockito.when ( storageConnDao.getAllForConnection ( newISCSIConnection ) ) . thenReturn ( connections ) ; boolean isExists = command.isConnWithSameDetailsExists ( newISCSIConnection , null ) ; org.junit.Assert.assertFalse ( isExists ) ; }
public void executeCommand ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . executeCommand ( command ) ; if ( org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel.CMD_IMPORT.equals ( command.getName ( ) ) ) { onImport ( ) ; } else if ( org.ovirt.engine.ui.uicommonweb.models.networks.ImportNetworksModel.CMD_CANCEL.equals ( command.getName ( ) ) ) { cancel ( ) ; } else if ( getAddImportCommand ( ) . equals ( command ) ) { addImport ( ) ; } else if ( getCancelImportCommand ( ) . equals ( command ) ) { cancelImport ( ) ; } }
protected org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > setupCanAddVmFromSnapshotTests ( final int domainSizeGB , final int sizeRequired , org.ovirt.engine.core.compat.Guid sourceSnapshotId ) { org.ovirt.engine.core.common.businessentities.VM vm = initializeMock ( domainSizeGB , sizeRequired ) ; initializeVmDAOMock ( vm ) ; org.ovirt.engine.core.bll.AddVmFromSnapshotCommand < org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters > cmd = createVmFromSnapshotCommand ( vm , sourceSnapshotId ) ; org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods ( cmd ) ; return cmd ; }
public void testDoFilterFromCookieNull ( ) throws java.io.IOException , javax.servlet.ServletException { testFilter.doFilter ( mockRequest , mockResponse , mockChain ) ; org.mockito.Mockito.verify ( mockChain ) . doFilter ( mockRequest , mockResponse ) ; org.mockito.Mockito.verify ( mockRequest ) . setAttribute ( LocaleFilter.LOCALE , java.util.Locale.US ) ; org.mockito.Mockito.verify ( mockResponse , org.mockito.Mockito.times ( 1 ) ) . addCookie ( org.mockito.Mockito.any ( ) ) ; }
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > pmOptions = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ; if ( pmOptions != null ) { getPmPort ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey ) ) ; getPmSlot ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey ) ) ; getPmSecure ( ) . setIsAvailable ( pmOptions.contains ( org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey ) ) ; } }
private boolean Register ( org.ovirt.engine.core.common.businessentities.VDS vdsByUniqueId , org.ovirt.engine.core.compat.Guid vdsGroupId , boolean IsPending ) { if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.LogVdsRegistration ) ) { log.infoFormat ( "RegisterVdsQuery::Register - Entering" ) ; } boolean returnValue = true ; if ( vdsByUniqueId == null ) { returnValue = registerNewHost ( vdsGroupId , IsPending ) ; } else { returnValue = updateExistingHost ( vdsByUniqueId , IsPending ) ; } if ( org.ovirt.engine.core.common.config.Config.< java.lang.Boolean > GetValue ( ConfigValues.LogVdsRegistration ) ) { log.infoFormat ( "RegisterVdsQuery::Register - Leaving with value {0}" , returnValue ) ; } return returnValue ; }
public static void getClusterListByName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( ( "Cluster: name=" + name ) + " sortby name" ) , org.ovirt.engine.core.common.interfaces.SearchType.Cluster ) , aQuery ) ; }
private static org.ovirt.engine.core.common.action.CpuProfileParameters createParameters ( ) { org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = org.ovirt.engine.core.bll.profiles.CpuProfileHelper.createCpuProfile ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CLUSTER_ID , org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.PROFILE_NAME ) ; org.ovirt.engine.core.common.action.CpuProfileParameters parameters = new org.ovirt.engine.core.common.action.CpuProfileParameters ( cpuProfile ) ; parameters.setCorrelationId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.CORRELATION_ID ) ; parameters.setAddPermissions ( true ) ; parameters.setSessionId ( org.ovirt.engine.core.bll.profiles.AddCpuProfileCommandTest.SESSION_ID ) ; return parameters ; }
public void markAsInvalid ( java.util.List < java.lang.String > validationHints ) { super . markAsInvalid ( validationHints ) ; java.lang.String tooltipText = org.ovirt.engine.ui.common.widget.AbstractValidatedWidgetWithLabel.getValidationTooltipText ( validationHints ) ; labelTooltip.setText ( tooltipText ) ; addLabelStyleName ( OvirtCss.HAS_TOOLTIP ) ; contentWidgetContainerTooltip.setText ( tooltipText ) ; }
protected org.ovirt.engine.api.model.Disk postPopulate ( org.ovirt.engine.api.model.Disk model ) { model.setFormat ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskFormat.class ) ) ; model.setInterface ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskInterface.class ) ) ; model.setStatus ( org.ovirt.engine.api.common.util.StatusUtils.create ( org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle ( org.ovirt.engine.api.model.DiskStatus.class ) ) ) ; model.setLunStorage ( new org.ovirt.engine.api.model.HostStorage ( ) ) ; return model ; }
public void validateSucceeds ( ) { setupMocks ( ) ; org.mockito.Mockito.doReturn ( getServer ( ) ) . when ( cmd ) . getUpServer ( ) ; org.junit.Assert.assertTrue ( cmd.validate ( ) ) ; }
protected boolean verifySourceDomains ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.StorageDomain > poolDomainsMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById ( org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getPoolDomains ( ) ) ; java.util.EnumSet < org.ovirt.engine.core.common.businessentities.StorageDomainStatus > validDomainStatuses = java.util.EnumSet.of ( StorageDomainStatus.Active ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks ( getImagesToCheckDestinationStorageDomains ( ) , true , false , false ) ; validDisksDomains = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.findDomainsInApplicableStatusForDisks ( templateDiskImages , poolDomainsMap , validDomainStatuses ) ; return validate ( new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator ( templateDiskImages ) . diskImagesOnAnyApplicableDomains ( validDisksDomains , poolDomainsMap , EngineMessage.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS , validDomainStatuses ) ) ; }
private org.ovirt.engine.core.common.businessentities.StorageDomain updateStorageDomainInMemoryVolumes ( java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > disksList ) { java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies ( getVm ( ) . getTotalMemorySizeInBytes ( ) , MemoryUtils.META_DATA_SIZE_IN_BYTES ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance ( ) . findStorageDomainForMemory ( getParameters ( ) . getStoragePoolId ( ) , memoryDisksList ) ; disksList.addAll ( memoryDisksList ) ; return storageDomain ; }
public void onResponseReceived ( com.google.gwt.http.client.Request request , com.google.gwt.http.client.Response response ) { if ( ( response.getStatusCode ( ) ) == ( com.google.gwt.http.client.Response.SC_OK ) ) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabReportsPresenter.reportsWebappDeployed = true ; getView ( ) . updateReportsPanel ( url , params ) ; } else { errorPopupManager.show ( applicationConstants.reportsWebAppNotDeployedMsg ( ) ) ; } }
void initAlertEventFooterPanel ( org.ovirt.engine.ui.webadmin.uicommon.model.AlertModelProvider alertModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.EventModelProvider eventModelProvider , org.ovirt.engine.ui.webadmin.uicommon.model.TaskModelProvider taskModelProvider , org.ovirt.engine.ui.webadmin.ApplicationResources resources , org.ovirt.engine.ui.webadmin.ApplicationTemplates templates , com.google.gwt.event.shared.EventBus eventBus , org.ovirt.engine.ui.common.system.ClientStorage clientStorage , org.ovirt.engine.ui.webadmin.ApplicationConstants constants ) { alertEventFooterPanel.add ( new org.ovirt.engine.ui.webadmin.widget.footer.AlertsEventsFooterView ( alertModelProvider , eventModelProvider , taskModelProvider , resources , templates , eventBus , clientStorage , constants ) ) ; }
private org.ovirt.engine.core.common.businessentities.VdsNetworkInterface createVlan ( org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface , org.ovirt.engine.core.common.businessentities.Network net ) { return createVdsInterface ( ( ( ( iface.getName ( ) ) + "." ) + ( net.getvlan_id ( ) ) ) , false , null , null , NetworkBootProtocol.None , net.getName ( ) , net.getvlan_id ( ) ) ; }
private void initImportClonedTemplate ( ) { getParameters ( ) . getVmTemplate ( ) . setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getParameters ( ) . getVmTemplate ( ) . getInterfaces ( ) ) { iface.setId ( org.ovirt.engine.core.compat.Guid.NewGuid ( ) ) ; } }
public static java.lang.String generateRandomMessage ( int length ) { java.util.Random random = new java.util.Random ( ) ; java.lang.StringBuffer randStr = new java.lang.StringBuffer ( ) ; for ( int i = 0 ; i < length ; i ++ ) { int number = random.nextInt ( org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.CHAR_LIST.length ( ) ) ; char ch = org.ovirt.vdsm.jsonrpc.client.reactors.stomp.SSLStompClientTestCase.CHAR_LIST.charAt ( number ) ; randStr.append ( ch ) ; } return randStr.toString ( ) ; }
public void mixedClusterServicesSupported ( ) { mockConfigRule.mockConfigValue ( ConfigValues.AllowClusterWithVirtGlusterEnabled , true ) ; org.mockito.Mockito.when ( cluster.supportsGlusterService ( ) ) . thenReturn ( true ) ; org.mockito.Mockito.when ( cluster.supportsVirtService ( ) ) . thenReturn ( true ) ; org.junit.Assert.assertThat ( validator.mixedClusterServicesSupported ( ) , org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid ( ) ) ; }
public void getVmListByClusterName ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String clusterName ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = org.ovirt.engine.ui.uicommonweb.Linq.< org.ovirt.engine.core.common.businessentities.VM > cast ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.IVdcQueryable > ) ( source ) ) ) ; return vms ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.Search , new org.ovirt.engine.core.common.queries.SearchParameters ( ( "Vms: cluster=" + clusterName ) , org.ovirt.engine.core.common.interfaces.SearchType.VM ) , aQuery ) ; }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ( ( org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > disks = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.Disk > ) ( returnValue ) ) ; org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks ( snapshotModel , disks , VmModelHelper.WarningType.VM_SNAPSHOT ) ; snapshotModel.getCommands ( ) . add ( getOnSaveCommand ( ) ) ; snapshotModel.getCommands ( ) . add ( getCancelCommand ( ) ) ; snapshotModel.StopProgress ( ) ; }
public void setUp ( ) throws java.lang.Exception { super . setUp ( ) ; dao = dbFacade.getStorageServerConnectionDao ( ) ; existingConnection = dao.get ( "0cc146e8-e5ed-482c-8814-270bc48c297f" ) ; existingNfsAutoConnection = dao.get ( FixturesTool.EXISTING_STORAGE_CONNECTION_NFS_AUTO_ID.toString ( ) ) ; newServerConnection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections ( ) ; newServerConnection.setid ( "0cc146e8-e5ed-482c-8814-270bc48c2980" ) ; newServerConnection.setconnection ( org.ovirt.engine.core.dao.StorageServerConnectionDAOTest.EXISTING_DOMAIN_STORAGE_NAME ) ; }
protected void addStoragePermissionByQuotaMode ( java.util.List < org.ovirt.engine.core.bll.utils.PermissionSubject > permsList , org.ovirt.engine.core.compat.Guid storagePoolId , org.ovirt.engine.core.compat.Guid StorageDomainId ) { org.ovirt.engine.core.common.businessentities.StoragePool storagePool = null ; if ( storagePoolId != null ) { storagePool = org.ovirt.engine.core.bll.CommandBase.getStoragePoolDAO ( ) . get ( storagePoolId ) ; if ( storagePool != null ) { if ( ( ( storagePool.getQuotaEnforcementType ( ) ) == ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED ) ) || ( ( storagePool.getQuotaEnforcementType ( ) ) == ( org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT ) ) ) { permsList.add ( new org.ovirt.engine.core.bll.utils.PermissionSubject ( StorageDomainId , org.ovirt.engine.core.common.VdcObjectType.Storage , org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK ) ) ; } } } }
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { org.ovirt.engine.ui.uicommonweb.models.storage.MoveOrCopyDiskModel model = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.MoveOrCopyDiskModel ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.storage_pool dataCenter = ( ( org.ovirt.engine.core.common.businessentities.storage_pool ) ( returnValue ) ) ; model.setQuotaEnforcementType ( dataCenter.getQuotaEnforcementType ( ) ) ; model.postInitStorageDomains ( ) ; }
public void setValueB ( java.lang.Integer value ) { this . valueB = value ; }
protected void doEdit ( org.ovirt.engine.ui.uicommonweb.models.pools.PoolGeneralModel model ) { driver.edit ( model ) ; monitorCount.setText ( java.lang.Integer.toString ( getModel ( ) . getMonitorCount ( ) ) ) ; oS.setText ( org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance ( ) . getOsName ( getModel ( ) . getOS ( ) ) ) ; }
protected org.ovirt.engine.core.common.utils.Pair < java.lang.Boolean , org.ovirt.engine.core.common.errors.EngineFault > runConnectionStorageToDomain ( org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , org.ovirt.engine.core.compat.Guid vdsId , int type ) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.getVdsDao ( ) . get ( vdsId ) ; if ( ! ( org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.canVDSConnectToGlusterfs ( vds ) ) ) { org.ovirt.engine.core.bll.storage.connection.GLUSTERFSStorageHelper.log.error ( "Couldn't find glusterfs-cli package on vds {} (needed for connecting storage domain {})." , vds.getName ( ) , storageDomain.getName ( ) ) ; addMessageToAuditLog ( AuditLogType.VDS_CANNOT_CONNECT_TO_GLUSTERFS , null , vds ) ; return new org.ovirt.engine.core.common.utils.Pair ( false , null ) ; } return super . runConnectionStorageToDomain ( storageDomain , vdsId , type ) ; }
public void testExecuteQueryWithNotExistingIscsiBond ( ) { org.mockito.Mockito.when ( getQueryParameters ( ) . getId ( ) ) . thenReturn ( iscsiBondId ) ; getQuery ( ) . executeQueryCommand ( ) ; org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery ( ) . getQueryReturnValue ( ) . getReturnValue ( ) ; org.junit.Assert.assertNull ( result ) ; }
private void addExpectHeader ( org.ovirt.engine.api.model.DetailedLink link , java.lang.String value ) { org.ovirt.engine.api.model.Headers headers = link.getRequest ( ) . getHeaders ( ) ; if ( headers == null ) { headers = new org.ovirt.engine.api.model.Headers ( ) ; link.getRequest ( ) . setHeaders ( headers ) ; } org.ovirt.engine.api.model.Header header = new org.ovirt.engine.api.model.Header ( ) ; header.setName ( "Expect" ) ; header.setValue ( value ) ; header.setRequired ( false ) ; headers.getHeaders ( ) . add ( header ) ; }
public void Executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; storageListModel.CleanConnection ( storageListModel.connection , storageListModel.hostId ) ; storageListModel.OnFinish ( storageListModel.context , false , storageListModel.storageModel ) ; }
public void testMapHostId ( ) { org.ovirt.engine.api.model.VM entity = new org.ovirt.engine.api.model.VM ( ) ; entity.setStatus ( VMStatus.Up ) ; org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.core.compat.Guid.NewGuid ( ) ; entity.setRunOnVds ( guid ) ; org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.types.VmMapper.map ( entity , null ) ; assertEquals ( guid.toString ( ) , model.getHost ( ) . getId ( ) ) ; }
protected boolean validate ( ) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.tasks.CommandHelper.validate ( VdcActionType.AddDisk , getAddDiskParameters ( ) , org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getContext ( ) . clone ( ) ) ; org.ovirt.engine.core.bll.storage.disk.image.UploadDiskImageCommand.getReturnValue ( ) . setValidationMessages ( returnValue.getValidationMessages ( ) ) ; return returnValue.isValid ( ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 1 , true ) ; try { resource.update ( getRestModel ( 0 ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public java.lang.String getReplacementStringNullSafe ( java.lang.Object data ) { return ( ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster ) ( data ) ) . getCluster ( ) . getName ( ) ) + "/" ) + ( ( ( org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster ) ( data ) ) . getDataCenter ( ) . getname ( ) ) ; }
private boolean isConsoleCommandsExecutionAllowed ( ) { final java.util.List < org.ovirt.engine.core.common.businessentities.VM > list = ( ( getSelectedItem ( ) ) == null ) ? null : getSelectedItems ( ) ; if ( list == null ) { return false ; } for ( org.ovirt.engine.core.common.businessentities.VM vm : list ) { if ( consoleModelsCache.getVmConsolesForEntity ( vm ) . canConnectToConsole ( ) ) { return true ; } } return false ; }
protected void endWithFailure ( ) { if ( ( org.ovirt.engine.core.bll.AddImageFromScratchCommand.getDestinationDiskImage ( ) ) != null ) { if ( org.ovirt.engine.core.bll.AddImageFromScratchCommand.getParameters ( ) . isShouldRemainIllegalOnFailedExecution ( ) ) { setImageStatus ( ImageStatus.ILLEGAL , org.ovirt.engine.core.bll.AddImageFromScratchCommand.getDestinationDiskImage ( ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . getDiskImageDynamicDao ( ) . remove ( org.ovirt.engine.core.bll.AddImageFromScratchCommand.getDestinationDiskImage ( ) . getImageId ( ) ) ; super . endWithFailure ( ) ; } } }
public void testValidateNotEnoughSpace ( ) { prepareForVmValidatorTests ( ) ; spySdValidator ( ) ; cmd.getVm ( ) . setStatus ( VMStatus.Up ) ; java.util.List < org.ovirt.engine.core.common.businessentities.storage.DiskImage > imagesDisks = mockDisksList ( 4 ) ; org.mockito.Mockito.when ( storageDomainsValidator.allDomainsHaveSpaceForClonedDisks ( imagesDisks ) ) . thenReturn ( new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ) ; org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure ( cmd , EngineMessage.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN ) ; }
protected void AsyncSearch ( ) { super . AsyncSearch ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; setAsyncResult ( org.ovirt.engine.ui.frontend.Frontend.RegisterQuery ( VdcQueryType.GetVmInterfacesByVmId , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm.getId ( ) ) ) ) ; setItems ( getAsyncResult ( ) . getData ( ) ) ; }
public void getHostArchitecture ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < org.ovirt.engine.core.common.businessentities.ArchitectureType > ( ) { @ java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( org.ovirt.engine.core.common.businessentities.ArchitectureType ) ( source ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetHostArchitecture , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }
private void cancelImportConfirm ( ) { cancelConfirm ( ) ; getWindow ( ) . stopProgress ( ) ; if ( ( fileConnection ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runAction ( VdcActionType.DisconnectStorageServerConnection , new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase ( fileConnection , hostId , false ) , new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback ( ) { @ java.lang.Override public void executed ( org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result ) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ( ( org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel ) ( result.getState ( ) ) ) ; cleanConnection ( storageListModel.fileConnection , storageListModel.hostId ) ; storageListModel.fileConnection = null ; } } , this ) ; } }
public static void getoVirtISOsList ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { @ java.lang.Override public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ( ( java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ) ( source ) ) ) : new java.util.ArrayList < org.ovirt.engine.core.compat.RpmVersion > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VdcQueryType.GetoVirtISOs , new org.ovirt.engine.core.common.queries.VdsIdParametersBase ( id ) , aQuery ) ; }
private void mockVmValidator ( ) { mockVmValidator ( vm ) ; }
public void testUpdateNotFound ( ) throws java.lang.Exception { setUriInfo ( setUpBasicUriExpectations ( ) ) ; setUpGetEntityExpectations ( 0 , true ) ; try { resource.update ( org.ovirt.engine.api.restapi.resource.BackendTagsResourceTest.getModel ( 0 , false ) ) ; fail ( "expected WebApplicationException" ) ; } catch ( javax.ws.rs.WebApplicationException wae ) { verifyNotFoundException ( wae ) ; } }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm ( org.ovirt.engine.core.common.businessentities.VM vm , org.ovirt.engine.core.common.action.VdcActionType actionType ) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID ; if ( ! ( vm.isManagedVm ( ) ) ) { if ( ! ( org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_NON_MANAGED_VMS.contains ( actionType ) ) ) { validationResult = new org.ovirt.engine.core.bll.ValidationResult ( org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM ) ; } } return validationResult ; }
public void testGuestFQDN ( ) { org.ovirt.engine.api.model.VM vm = new org.ovirt.engine.api.model.VM ( ) ; org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic ( ) ; vmDynamic.setStatus ( VMStatus.Up ) ; vmDynamic.setVmFQDN ( "localhost.localdomain" ) ; vm.setDynamicData ( vmDynamic ) ; org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper.map ( vm , ( ( org.ovirt.engine.api.model.VM ) ( null ) ) ) ; assertNotNull ( map.getGuestInfo ( ) . getFqdn ( ) ) ; assertEquals ( map.getGuestInfo ( ) . getFqdn ( ) , "localhost.localdomain" ) ; }
